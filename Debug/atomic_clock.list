
atomic_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .itcm         00001b78  00000000  08000298  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00019de8  08001e10  08001e10  00021e10  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .user_flash   00000000  08100000  08100000  0004022c  2**0
                  CONTENTS
  4 .rodata       000038b0  0801bbf8  0801bbf8  0003bbf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  0801f4a8  0801f4a8  0003f4a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  0801f4b0  0801f4b0  0003f4b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f4b4  0801f4b4  0003f4b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  0801f4b8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007150  20000230  0801f6e4  00040230  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20007380  0801f6e4  00047380  2**0
                  ALLOC
 11 .lwip_sec     00044b83  30000000  30000000  00050000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0004022c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0004025a  2**0
                  CONTENTS, READONLY
 14 .debug_info   00038dd4  00000000  00000000  0004029d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000752f  00000000  00000000  00079071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000029e0  00000000  00000000  000805a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002167  00000000  00000000  00082f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00011f0b  00000000  00000000  000850e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000415d3  00000000  00000000  00096ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001a9811  00000000  00000000  000d85c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000c064  00000000  00000000  00281dd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  0028de3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .itcm:

00000000 <start_laser_tuning>:
/**
  * @brief  Function x.
  * @retval None
  */

void start_laser_tuning(void) {
       0:	b580      	push	{r7, lr}
       2:	af00      	add	r7, sp, #0
	stop_MW_operation(); //releases timers and ensures that sample pulse is generated for ADC
       4:	f001 fa76 	bl	14f4 <stop_MW_operation>
	laser_state = LASER_STEPPED_UP;
       8:	4b17      	ldr	r3, [pc, #92]	; (68 <start_laser_tuning+0x68>)
       a:	2202      	movs	r2, #2
       c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_SET); //Laser_tuning output high
       e:	2201      	movs	r2, #1
      10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
      14:	4815      	ldr	r0, [pc, #84]	; (6c <start_laser_tuning+0x6c>)
      16:	f001 fd93 	bl	1b40 <__HAL_GPIO_WritePin_veneer>
	if (laser_mod_value > (LASER_MAX_MOD - LASER_STEP)) {
      1a:	4b15      	ldr	r3, [pc, #84]	; (70 <start_laser_tuning+0x70>)
      1c:	881b      	ldrh	r3, [r3, #0]
      1e:	461a      	mov	r2, r3
      20:	2303      	movs	r3, #3
      22:	4619      	mov	r1, r3
      24:	f640 33b8 	movw	r3, #3000	; 0xbb8
      28:	1a5b      	subs	r3, r3, r1
      2a:	429a      	cmp	r2, r3
      2c:	dd0a      	ble.n	44 <start_laser_tuning+0x44>
	    printf("LOSS OF LASER LOCK\r\n");
      2e:	4811      	ldr	r0, [pc, #68]	; (74 <start_laser_tuning+0x74>)
      30:	f001 fd96 	bl	1b60 <__puts_veneer>
	    printf("Modulation value outside bounds: %u\r\n", laser_mod_value);
      34:	4b0e      	ldr	r3, [pc, #56]	; (70 <start_laser_tuning+0x70>)
      36:	881b      	ldrh	r3, [r3, #0]
      38:	4619      	mov	r1, r3
      3a:	480f      	ldr	r0, [pc, #60]	; (78 <start_laser_tuning+0x78>)
      3c:	f001 fd94 	bl	1b68 <__printf_veneer>
		Error_Handler();
      40:	f001 fd96 	bl	1b70 <__Error_Handler_veneer>
	}
	laser_mod_value += LASER_STEP;
      44:	4b0a      	ldr	r3, [pc, #40]	; (70 <start_laser_tuning+0x70>)
      46:	881b      	ldrh	r3, [r3, #0]
      48:	2203      	movs	r2, #3
      4a:	4413      	add	r3, r2
      4c:	b29a      	uxth	r2, r3
      4e:	4b08      	ldr	r3, [pc, #32]	; (70 <start_laser_tuning+0x70>)
      50:	801a      	strh	r2, [r3, #0]
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, laser_mod_value); //
      52:	4b07      	ldr	r3, [pc, #28]	; (70 <start_laser_tuning+0x70>)
      54:	881b      	ldrh	r3, [r3, #0]
      56:	2200      	movs	r2, #0
      58:	2110      	movs	r1, #16
      5a:	4808      	ldr	r0, [pc, #32]	; (7c <start_laser_tuning+0x7c>)
      5c:	f001 fd6c 	bl	1b38 <__HAL_DAC_SetValue_veneer>
	reset_adc_samples(); //reset ADC samples including sample count
      60:	f000 fb32 	bl	6c8 <reset_adc_samples>
	#ifdef LASER_VERBOSE
	printf("Started laser tuning\r\n");
	#endif //LASER_VERBOSE
}
      64:	bf00      	nop
      66:	bd80      	pop	{r7, pc}
      68:	2000024c 	.word	0x2000024c
      6c:	58020400 	.word	0x58020400
      70:	20000000 	.word	0x20000000
      74:	0801bbf8 	.word	0x0801bbf8
      78:	0801bc0c 	.word	0x0801bc0c
      7c:	200002bc 	.word	0x200002bc

00000080 <start_laser_ramp>:
  * @brief  Starts a laser scan
  * @retval None
  * This function initiates a laser frequency scan using an n-point moving average
  * ADC value where n = ADC_SAMPLES
  */
void start_laser_ramp(void) {
      80:	b580      	push	{r7, lr}
      82:	af00      	add	r7, sp, #0
	stop_MW_operation(); //releases timers and ensures that sample pulse is generated for ADC
      84:	f001 fa36 	bl	14f4 <stop_MW_operation>
	laser_state = LASER_RAMP_PHASE_ONE;
      88:	4b15      	ldr	r3, [pc, #84]	; (e0 <start_laser_ramp+0x60>)
      8a:	2204      	movs	r2, #4
      8c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_SET); //Laser_tuning output high
      8e:	2201      	movs	r2, #1
      90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
      94:	4813      	ldr	r0, [pc, #76]	; (e4 <start_laser_ramp+0x64>)
      96:	f001 fd53 	bl	1b40 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
      9a:	2201      	movs	r2, #1
      9c:	2101      	movs	r1, #1
      9e:	4812      	ldr	r0, [pc, #72]	; (e8 <start_laser_ramp+0x68>)
      a0:	f001 fd4e 	bl	1b40 <__HAL_GPIO_WritePin_veneer>
	adc_averaged_max = 0;
      a4:	4b11      	ldr	r3, [pc, #68]	; (ec <start_laser_ramp+0x6c>)
      a6:	2200      	movs	r2, #0
      a8:	601a      	str	r2, [r3, #0]
	adc_averaged_min = 0xFFFF;
      aa:	4b11      	ldr	r3, [pc, #68]	; (f0 <start_laser_ramp+0x70>)
      ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
      b0:	601a      	str	r2, [r3, #0]
	laser_mod_value = LASER_MIN_MOD;
      b2:	4b10      	ldr	r3, [pc, #64]	; (f4 <start_laser_ramp+0x74>)
      b4:	220a      	movs	r2, #10
      b6:	801a      	strh	r2, [r3, #0]
	if (ADC_SAMPLES > 1) moving_average_offset = ADC_SAMPLES / 2;
      b8:	4b0f      	ldr	r3, [pc, #60]	; (f8 <start_laser_ramp+0x78>)
      ba:	2204      	movs	r2, #4
      bc:	801a      	strh	r2, [r3, #0]
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, laser_mod_value); //
      be:	4b0d      	ldr	r3, [pc, #52]	; (f4 <start_laser_ramp+0x74>)
      c0:	881b      	ldrh	r3, [r3, #0]
      c2:	2200      	movs	r2, #0
      c4:	2110      	movs	r1, #16
      c6:	480d      	ldr	r0, [pc, #52]	; (fc <start_laser_ramp+0x7c>)
      c8:	f001 fd36 	bl	1b38 <__HAL_DAC_SetValue_veneer>
	start_timer(MW_TIMER); //using MW for 1s delay
      cc:	4b0c      	ldr	r3, [pc, #48]	; (100 <start_laser_ramp+0x80>)
      ce:	681b      	ldr	r3, [r3, #0]
      d0:	4618      	mov	r0, r3
      d2:	f001 fcdf 	bl	1a94 <start_timer>
    printf("LD temperature equalising.\r\n");
      d6:	480b      	ldr	r0, [pc, #44]	; (104 <start_laser_ramp+0x84>)
      d8:	f001 fd42 	bl	1b60 <__puts_veneer>
}
      dc:	bf00      	nop
      de:	bd80      	pop	{r7, pc}
      e0:	2000024c 	.word	0x2000024c
      e4:	58020400 	.word	0x58020400
      e8:	58021800 	.word	0x58021800
      ec:	20000638 	.word	0x20000638
      f0:	2000063c 	.word	0x2000063c
      f4:	20000000 	.word	0x20000000
      f8:	20000250 	.word	0x20000250
      fc:	200002bc 	.word	0x200002bc
     100:	2000001c 	.word	0x2000001c
     104:	0801bc34 	.word	0x0801bc34

00000108 <stop_laser_tuning>:

/**
  * @brief  Stops laser tuning ready to return to POP
  * @retval None
  */
void stop_laser_tuning(void) {
     108:	b580      	push	{r7, lr}
     10a:	af00      	add	r7, sp, #0
	laser_state = LASER_ON_FREQ;
     10c:	4b0b      	ldr	r3, [pc, #44]	; (13c <stop_laser_tuning+0x34>)
     10e:	2200      	movs	r2, #0
     110:	701a      	strb	r2, [r3, #0]
	stop_timer(MW_TIMER); //release MW_timer
     112:	4b0b      	ldr	r3, [pc, #44]	; (140 <stop_laser_tuning+0x38>)
     114:	681b      	ldr	r3, [r3, #0]
     116:	4618      	mov	r0, r3
     118:	f001 fcda 	bl	1ad0 <stop_timer>
	stop_timer(SWEEP_TIMER); //release SWEEP_timer
     11c:	4b09      	ldr	r3, [pc, #36]	; (144 <stop_laser_tuning+0x3c>)
     11e:	681b      	ldr	r3, [r3, #0]
     120:	4618      	mov	r0, r3
     122:	f001 fcd5 	bl	1ad0 <stop_timer>
	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_RESET); // Laser_tuning output low
     126:	2200      	movs	r2, #0
     128:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     12c:	4806      	ldr	r0, [pc, #24]	; (148 <stop_laser_tuning+0x40>)
     12e:	f001 fd07 	bl	1b40 <__HAL_GPIO_WritePin_veneer>
	reset_adc_samples(); //reset ADC samples including sample count
     132:	f000 fac9 	bl	6c8 <reset_adc_samples>
}
     136:	bf00      	nop
     138:	bd80      	pop	{r7, pc}
     13a:	bf00      	nop
     13c:	2000024c 	.word	0x2000024c
     140:	2000001c 	.word	0x2000001c
     144:	20000020 	.word	0x20000020
     148:	58020400 	.word	0x58020400

0000014c <laser_update>:

/**
  * @brief  Checks laser locking status to see if an action is needed.
  * @retval True if an action was taken
  */
const bool laser_update(void) {
     14c:	b580      	push	{r7, lr}
     14e:	b086      	sub	sp, #24
     150:	af00      	add	r7, sp, #0
	bool action_taken = false;
     152:	2300      	movs	r3, #0
     154:	75fb      	strb	r3, [r7, #23]
	double sweep_time_s = 0;
     156:	f04f 0200 	mov.w	r2, #0
     15a:	f04f 0300 	mov.w	r3, #0
     15e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint8_t local_copy_of_laser_state = laser_state; //hack to make switch statement behave
     162:	4b97      	ldr	r3, [pc, #604]	; (3c0 <_Min_Heap_Size+0x1c0>)
     164:	781b      	ldrb	r3, [r3, #0]
     166:	71fb      	strb	r3, [r7, #7]
	switch (local_copy_of_laser_state)
     168:	79fb      	ldrb	r3, [r7, #7]
     16a:	2b08      	cmp	r3, #8
     16c:	f200 8218 	bhi.w	5a0 <_Min_Stack_Size+0x1a0>
     170:	a201      	add	r2, pc, #4	; (adr r2, 178 <laser_update+0x2c>)
     172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     176:	bf00      	nop
     178:	000005b9 	.word	0x000005b9
     17c:	0000019d 	.word	0x0000019d
     180:	000001cb 	.word	0x000001cb
     184:	00000233 	.word	0x00000233
     188:	000002a7 	.word	0x000002a7
     18c:	000002f5 	.word	0x000002f5
     190:	00000419 	.word	0x00000419
     194:	000004d1 	.word	0x000004d1
     198:	0000056d 	.word	0x0000056d
	{
		case LASER_ON_FREQ:
			break; //no action to take
		case LASER_TEMP_STABILISING:
			if (check_timer(MW_TIMER) < LASER_STAB_US) return(false); //Still waiting, no action taken
     19c:	4b89      	ldr	r3, [pc, #548]	; (3c4 <_Min_Heap_Size+0x1c4>)
     19e:	681b      	ldr	r3, [r3, #0]
     1a0:	4618      	mov	r0, r3
     1a2:	f001 fca7 	bl	1af4 <check_timer>
     1a6:	4603      	mov	r3, r0
     1a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
     1ac:	d201      	bcs.n	1b2 <laser_update+0x66>
     1ae:	2300      	movs	r3, #0
     1b0:	e20e      	b.n	5d0 <_Min_Stack_Size+0x1d0>
			action_taken = true;
     1b2:	2301      	movs	r3, #1
     1b4:	75fb      	strb	r3, [r7, #23]
			stop_timer(MW_TIMER); //release timer
     1b6:	4b83      	ldr	r3, [pc, #524]	; (3c4 <_Min_Heap_Size+0x1c4>)
     1b8:	681b      	ldr	r3, [r3, #0]
     1ba:	4618      	mov	r0, r3
     1bc:	f001 fc88 	bl	1ad0 <stop_timer>
			laser_state = LASER_ON_FREQ;
     1c0:	4b7f      	ldr	r3, [pc, #508]	; (3c0 <_Min_Heap_Size+0x1c0>)
     1c2:	2200      	movs	r2, #0
     1c4:	701a      	strb	r2, [r3, #0]
			reset_adc_samples(); //reset ADC samples including sample count
     1c6:	f000 fa7f 	bl	6c8 <reset_adc_samples>
		case LASER_STEPPED_UP:
			if(adc_average_updated) {
     1ca:	4b7f      	ldr	r3, [pc, #508]	; (3c8 <_Min_Heap_Size+0x1c8>)
     1cc:	781b      	ldrb	r3, [r3, #0]
     1ce:	2b00      	cmp	r3, #0
     1d0:	f000 81f4 	beq.w	5bc <_Min_Stack_Size+0x1bc>
				adc_polled_above = adc_averaged_val;
     1d4:	4b7d      	ldr	r3, [pc, #500]	; (3cc <_Min_Heap_Size+0x1cc>)
     1d6:	681b      	ldr	r3, [r3, #0]
     1d8:	4a7d      	ldr	r2, [pc, #500]	; (3d0 <_Min_Heap_Size+0x1d0>)
     1da:	6013      	str	r3, [r2, #0]
				laser_state = LASER_STEPPED_DOWN;
     1dc:	4b78      	ldr	r3, [pc, #480]	; (3c0 <_Min_Heap_Size+0x1c0>)
     1de:	2203      	movs	r2, #3
     1e0:	701a      	strb	r2, [r3, #0]
				if (laser_mod_value < LASER_MIN_MOD + (2 * LASER_STEP)) {
     1e2:	4b7c      	ldr	r3, [pc, #496]	; (3d4 <_Min_Heap_Size+0x1d4>)
     1e4:	881b      	ldrh	r3, [r3, #0]
     1e6:	461a      	mov	r2, r3
     1e8:	2303      	movs	r3, #3
     1ea:	3305      	adds	r3, #5
     1ec:	005b      	lsls	r3, r3, #1
     1ee:	429a      	cmp	r2, r3
     1f0:	da0a      	bge.n	208 <_Min_Heap_Size+0x8>
				    printf("LOSS OF LASER LOCK\r\n");
     1f2:	4879      	ldr	r0, [pc, #484]	; (3d8 <_Min_Heap_Size+0x1d8>)
     1f4:	f001 fcb4 	bl	1b60 <__puts_veneer>
				    printf("Modulation value outside bounds: %u\r\n", laser_mod_value);
     1f8:	4b76      	ldr	r3, [pc, #472]	; (3d4 <_Min_Heap_Size+0x1d4>)
     1fa:	881b      	ldrh	r3, [r3, #0]
     1fc:	4619      	mov	r1, r3
     1fe:	4877      	ldr	r0, [pc, #476]	; (3dc <_Min_Heap_Size+0x1dc>)
     200:	f001 fcb2 	bl	1b68 <__printf_veneer>
					Error_Handler();
     204:	f001 fcb4 	bl	1b70 <__Error_Handler_veneer>
				}
				laser_mod_value = laser_mod_value - (2 * LASER_STEP);
     208:	4b72      	ldr	r3, [pc, #456]	; (3d4 <_Min_Heap_Size+0x1d4>)
     20a:	881a      	ldrh	r2, [r3, #0]
     20c:	2303      	movs	r3, #3
     20e:	005b      	lsls	r3, r3, #1
     210:	b29b      	uxth	r3, r3
     212:	1ad3      	subs	r3, r2, r3
     214:	b29a      	uxth	r2, r3
     216:	4b6f      	ldr	r3, [pc, #444]	; (3d4 <_Min_Heap_Size+0x1d4>)
     218:	801a      	strh	r2, [r3, #0]
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, laser_mod_value); //
     21a:	4b6e      	ldr	r3, [pc, #440]	; (3d4 <_Min_Heap_Size+0x1d4>)
     21c:	881b      	ldrh	r3, [r3, #0]
     21e:	2200      	movs	r2, #0
     220:	2110      	movs	r1, #16
     222:	486f      	ldr	r0, [pc, #444]	; (3e0 <_Min_Heap_Size+0x1e0>)
     224:	f001 fc88 	bl	1b38 <__HAL_DAC_SetValue_veneer>
				reset_adc_samples(); //reset ADC samples including sample count
     228:	f000 fa4e 	bl	6c8 <reset_adc_samples>
				action_taken = true;
     22c:	2301      	movs	r3, #1
     22e:	75fb      	strb	r3, [r7, #23]
			}
			break;
     230:	e1c4      	b.n	5bc <_Min_Stack_Size+0x1bc>
		case LASER_STEPPED_DOWN:
			if(adc_average_updated) {
     232:	4b65      	ldr	r3, [pc, #404]	; (3c8 <_Min_Heap_Size+0x1c8>)
     234:	781b      	ldrb	r3, [r3, #0]
     236:	2b00      	cmp	r3, #0
     238:	f000 81c2 	beq.w	5c0 <_Min_Stack_Size+0x1c0>
				adc_polled_below = adc_averaged_val;
     23c:	4b63      	ldr	r3, [pc, #396]	; (3cc <_Min_Heap_Size+0x1cc>)
     23e:	681b      	ldr	r3, [r3, #0]
     240:	4a68      	ldr	r2, [pc, #416]	; (3e4 <_Min_Heap_Size+0x1e4>)
     242:	6013      	str	r3, [r2, #0]
				laser_mod_value += LASER_STEP; //return laser modulation value to pre-tuned value
     244:	4b63      	ldr	r3, [pc, #396]	; (3d4 <_Min_Heap_Size+0x1d4>)
     246:	881b      	ldrh	r3, [r3, #0]
     248:	2203      	movs	r2, #3
     24a:	4413      	add	r3, r2
     24c:	b29a      	uxth	r2, r3
     24e:	4b61      	ldr	r3, [pc, #388]	; (3d4 <_Min_Heap_Size+0x1d4>)
     250:	801a      	strh	r2, [r3, #0]
				action_taken = true;
     252:	2301      	movs	r3, #1
     254:	75fb      	strb	r3, [r7, #23]
				if (adc_polled_below > adc_polled_above) {
     256:	4b63      	ldr	r3, [pc, #396]	; (3e4 <_Min_Heap_Size+0x1e4>)
     258:	681a      	ldr	r2, [r3, #0]
     25a:	4b5d      	ldr	r3, [pc, #372]	; (3d0 <_Min_Heap_Size+0x1d0>)
     25c:	681b      	ldr	r3, [r3, #0]
     25e:	429a      	cmp	r2, r3
     260:	d905      	bls.n	26e <_Min_Heap_Size+0x6e>
					laser_mod_value++; //increase current by incrementing laser modulation value
     262:	4b5c      	ldr	r3, [pc, #368]	; (3d4 <_Min_Heap_Size+0x1d4>)
     264:	881b      	ldrh	r3, [r3, #0]
     266:	3301      	adds	r3, #1
     268:	b29a      	uxth	r2, r3
     26a:	4b5a      	ldr	r3, [pc, #360]	; (3d4 <_Min_Heap_Size+0x1d4>)
     26c:	801a      	strh	r2, [r3, #0]
				}
				if (adc_polled_above > adc_polled_below) {
     26e:	4b58      	ldr	r3, [pc, #352]	; (3d0 <_Min_Heap_Size+0x1d0>)
     270:	681a      	ldr	r2, [r3, #0]
     272:	4b5c      	ldr	r3, [pc, #368]	; (3e4 <_Min_Heap_Size+0x1e4>)
     274:	681b      	ldr	r3, [r3, #0]
     276:	429a      	cmp	r2, r3
     278:	d905      	bls.n	286 <_Min_Heap_Size+0x86>
					laser_mod_value--; //decrease current by decrementing laser modulation value
     27a:	4b56      	ldr	r3, [pc, #344]	; (3d4 <_Min_Heap_Size+0x1d4>)
     27c:	881b      	ldrh	r3, [r3, #0]
     27e:	3b01      	subs	r3, #1
     280:	b29a      	uxth	r2, r3
     282:	4b54      	ldr	r3, [pc, #336]	; (3d4 <_Min_Heap_Size+0x1d4>)
     284:	801a      	strh	r2, [r3, #0]
				}
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, laser_mod_value);
     286:	4b53      	ldr	r3, [pc, #332]	; (3d4 <_Min_Heap_Size+0x1d4>)
     288:	881b      	ldrh	r3, [r3, #0]
     28a:	2200      	movs	r2, #0
     28c:	2110      	movs	r1, #16
     28e:	4854      	ldr	r0, [pc, #336]	; (3e0 <_Min_Heap_Size+0x1e0>)
     290:	f001 fc52 	bl	1b38 <__HAL_DAC_SetValue_veneer>
				/* If adding a short delay for LD to stabilise after polling */
				laser_state = LASER_TEMP_STABILISING;
     294:	4b4a      	ldr	r3, [pc, #296]	; (3c0 <_Min_Heap_Size+0x1c0>)
     296:	2201      	movs	r2, #1
     298:	701a      	strb	r2, [r3, #0]
				start_timer(MW_TIMER); //using MW for short delay
     29a:	4b4a      	ldr	r3, [pc, #296]	; (3c4 <_Min_Heap_Size+0x1c4>)
     29c:	681b      	ldr	r3, [r3, #0]
     29e:	4618      	mov	r0, r3
     2a0:	f001 fbf8 	bl	1a94 <start_timer>
				/* Substituted with this if no stabilising time is required after polling
				 * laser_state = LASER_ON_FREQ;
				 * reset_adc_samples(); //reset ADC samples including sample count
				 */
			}
			break;
     2a4:	e18c      	b.n	5c0 <_Min_Stack_Size+0x1c0>
		case LASER_RAMP_PHASE_ONE: //waiting for the LD temperature to stabilise
			if (check_timer(MW_TIMER) < 1000000) return(false); //Still waiting, no action taken
     2a6:	4b47      	ldr	r3, [pc, #284]	; (3c4 <_Min_Heap_Size+0x1c4>)
     2a8:	681b      	ldr	r3, [r3, #0]
     2aa:	4618      	mov	r0, r3
     2ac:	f001 fc22 	bl	1af4 <check_timer>
     2b0:	4603      	mov	r3, r0
     2b2:	4a4d      	ldr	r2, [pc, #308]	; (3e8 <_Min_Heap_Size+0x1e8>)
     2b4:	4293      	cmp	r3, r2
     2b6:	d801      	bhi.n	2bc <_Min_Heap_Size+0xbc>
     2b8:	2300      	movs	r3, #0
     2ba:	e189      	b.n	5d0 <_Min_Stack_Size+0x1d0>
			action_taken = true;
     2bc:	2301      	movs	r3, #1
     2be:	75fb      	strb	r3, [r7, #23]
			stop_timer(MW_TIMER); //release MW_timer
     2c0:	4b40      	ldr	r3, [pc, #256]	; (3c4 <_Min_Heap_Size+0x1c4>)
     2c2:	681b      	ldr	r3, [r3, #0]
     2c4:	4618      	mov	r0, r3
     2c6:	f001 fc03 	bl	1ad0 <stop_timer>
			laser_state = LASER_RAMP_PHASE_TWO;
     2ca:	4b3d      	ldr	r3, [pc, #244]	; (3c0 <_Min_Heap_Size+0x1c0>)
     2cc:	2205      	movs	r2, #5
     2ce:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
     2d0:	2200      	movs	r2, #0
     2d2:	2101      	movs	r1, #1
     2d4:	4845      	ldr	r0, [pc, #276]	; (3ec <_Min_Heap_Size+0x1ec>)
     2d6:	f001 fc33 	bl	1b40 <__HAL_GPIO_WritePin_veneer>
			reset_adc_samples(); //reset ADC samples including sample count
     2da:	f000 f9f5 	bl	6c8 <reset_adc_samples>
			start_timer(SWEEP_TIMER); //
     2de:	4b44      	ldr	r3, [pc, #272]	; (3f0 <_Min_Heap_Size+0x1f0>)
     2e0:	681b      	ldr	r3, [r3, #0]
     2e2:	4618      	mov	r0, r3
     2e4:	f001 fbd6 	bl	1a94 <start_timer>
		    printf("Starting laser frequency scan. Allow %.2g seconds \r\n", (float)((LASER_MAX_MOD - LASER_MIN_MOD) / 186));
     2e8:	f04f 0200 	mov.w	r2, #0
     2ec:	4b41      	ldr	r3, [pc, #260]	; (3f4 <_Min_Heap_Size+0x1f4>)
     2ee:	4842      	ldr	r0, [pc, #264]	; (3f8 <_Min_Heap_Size+0x1f8>)
     2f0:	f001 fc3a 	bl	1b68 <__printf_veneer>
		    //break statement not required here

		case LASER_RAMP_PHASE_TWO: //finding F=2 dip
			if(adc_average_updated) {
     2f4:	4b34      	ldr	r3, [pc, #208]	; (3c8 <_Min_Heap_Size+0x1c8>)
     2f6:	781b      	ldrb	r3, [r3, #0]
     2f8:	2b00      	cmp	r3, #0
     2fa:	f000 8163 	beq.w	5c4 <_Min_Stack_Size+0x1c4>
				if (adc_averaged_val < adc_averaged_min) {//if new minimum detected
     2fe:	4b33      	ldr	r3, [pc, #204]	; (3cc <_Min_Heap_Size+0x1cc>)
     300:	681a      	ldr	r2, [r3, #0]
     302:	4b3e      	ldr	r3, [pc, #248]	; (3fc <_Min_Heap_Size+0x1fc>)
     304:	681b      	ldr	r3, [r3, #0]
     306:	429a      	cmp	r2, r3
     308:	d207      	bcs.n	31a <_Min_Heap_Size+0x11a>
					adc_averaged_min = adc_averaged_val; //record new mininum
     30a:	4b30      	ldr	r3, [pc, #192]	; (3cc <_Min_Heap_Size+0x1cc>)
     30c:	681b      	ldr	r3, [r3, #0]
     30e:	4a3b      	ldr	r2, [pc, #236]	; (3fc <_Min_Heap_Size+0x1fc>)
     310:	6013      	str	r3, [r2, #0]
					saved_mod_value = laser_mod_value; //record the associated modulation value
     312:	4b30      	ldr	r3, [pc, #192]	; (3d4 <_Min_Heap_Size+0x1d4>)
     314:	881a      	ldrh	r2, [r3, #0]
     316:	4b3a      	ldr	r3, [pc, #232]	; (400 <_Min_Stack_Size>)
     318:	801a      	strh	r2, [r3, #0]
				}
				/* Detect when we've passed F=2 dip
				 * If the latest reading is significantly higher than the minimum
				 * then record F=2 and look for F=3
				 */
				if ((adc_averaged_val - adc_averaged_min) >= DIP_THRESHOLD ) {//if the latest reading is significantly above the minimum
     31a:	4b2c      	ldr	r3, [pc, #176]	; (3cc <_Min_Heap_Size+0x1cc>)
     31c:	681a      	ldr	r2, [r3, #0]
     31e:	4b37      	ldr	r3, [pc, #220]	; (3fc <_Min_Heap_Size+0x1fc>)
     320:	681b      	ldr	r3, [r3, #0]
     322:	1ad3      	subs	r3, r2, r3
     324:	2bf7      	cmp	r3, #247	; 0xf7
     326:	d90e      	bls.n	346 <_Min_Heap_Size+0x146>
					F2_mod_value = saved_mod_value - moving_average_offset; //record the modulation value for the F=2 dip
     328:	4b35      	ldr	r3, [pc, #212]	; (400 <_Min_Stack_Size>)
     32a:	881a      	ldrh	r2, [r3, #0]
     32c:	4b35      	ldr	r3, [pc, #212]	; (404 <_Min_Stack_Size+0x4>)
     32e:	881b      	ldrh	r3, [r3, #0]
     330:	1ad3      	subs	r3, r2, r3
     332:	b29a      	uxth	r2, r3
     334:	4b34      	ldr	r3, [pc, #208]	; (408 <_Min_Stack_Size+0x8>)
     336:	801a      	strh	r2, [r3, #0]
					adc_averaged_min = 0xFFFF; //reset the saved minimum
     338:	4b30      	ldr	r3, [pc, #192]	; (3fc <_Min_Heap_Size+0x1fc>)
     33a:	f64f 72ff 	movw	r2, #65535	; 0xffff
     33e:	601a      	str	r2, [r3, #0]
					laser_state = LASER_RAMP_PHASE_THREE;
     340:	4b1f      	ldr	r3, [pc, #124]	; (3c0 <_Min_Heap_Size+0x1c0>)
     342:	2206      	movs	r2, #6
     344:	701a      	strb	r2, [r3, #0]
				}
				laser_mod_value += LASER_STEP; //next laser step
     346:	4b23      	ldr	r3, [pc, #140]	; (3d4 <_Min_Heap_Size+0x1d4>)
     348:	881b      	ldrh	r3, [r3, #0]
     34a:	2203      	movs	r2, #3
     34c:	4413      	add	r3, r2
     34e:	b29a      	uxth	r2, r3
     350:	4b20      	ldr	r3, [pc, #128]	; (3d4 <_Min_Heap_Size+0x1d4>)
     352:	801a      	strh	r2, [r3, #0]
				if (laser_mod_value >= LASER_MAX_MOD) {//if no longer in range
     354:	4b1f      	ldr	r3, [pc, #124]	; (3d4 <_Min_Heap_Size+0x1d4>)
     356:	881b      	ldrh	r3, [r3, #0]
     358:	f640 32b7 	movw	r2, #2999	; 0xbb7
     35c:	4293      	cmp	r3, r2
     35e:	d91c      	bls.n	39a <_Min_Heap_Size+0x19a>
				    printf("Have completed absorption scan without detecting any dips.\r\n");
     360:	482a      	ldr	r0, [pc, #168]	; (40c <_Min_Stack_Size+0xc>)
     362:	f001 fbfd 	bl	1b60 <__puts_veneer>
				    printf("DIP_THRESHOLD: %u\r\n", DIP_THRESHOLD);
     366:	21f8      	movs	r1, #248	; 0xf8
     368:	4829      	ldr	r0, [pc, #164]	; (410 <_Min_Stack_Size+0x10>)
     36a:	f001 fbfd 	bl	1b68 <__printf_veneer>
					sweep_time_s = (double) (stop_timer(SWEEP_TIMER)) / 1000000;
     36e:	4b20      	ldr	r3, [pc, #128]	; (3f0 <_Min_Heap_Size+0x1f0>)
     370:	681b      	ldr	r3, [r3, #0]
     372:	4618      	mov	r0, r3
     374:	f001 fbac 	bl	1ad0 <stop_timer>
     378:	ee07 0a90 	vmov	s15, r0
     37c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     380:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 3b8 <_Min_Heap_Size+0x1b8>
     384:	ee86 7b05 	vdiv.f64	d7, d6, d5
     388:	ed87 7b02 	vstr	d7, [r7, #8]
					printf("Sweep complete in %.3g s.\r\n", sweep_time_s);
     38c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     390:	4820      	ldr	r0, [pc, #128]	; (414 <_Min_Stack_Size+0x14>)
     392:	f001 fbe9 	bl	1b68 <__printf_veneer>
					Error_Handler();
     396:	f001 fbeb 	bl	1b70 <__Error_Handler_veneer>
				}
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, laser_mod_value); //set DAC output pin
     39a:	4b0e      	ldr	r3, [pc, #56]	; (3d4 <_Min_Heap_Size+0x1d4>)
     39c:	881b      	ldrh	r3, [r3, #0]
     39e:	2200      	movs	r2, #0
     3a0:	2110      	movs	r1, #16
     3a2:	480f      	ldr	r0, [pc, #60]	; (3e0 <_Min_Heap_Size+0x1e0>)
     3a4:	f001 fbc8 	bl	1b38 <__HAL_DAC_SetValue_veneer>
				//reset_adc_samples(); //reset ADC samples including sample count
				adc_average_updated = false; //clears new reading flag
     3a8:	4b07      	ldr	r3, [pc, #28]	; (3c8 <_Min_Heap_Size+0x1c8>)
     3aa:	2200      	movs	r2, #0
     3ac:	701a      	strb	r2, [r3, #0]
				action_taken = true;
     3ae:	2301      	movs	r3, #1
     3b0:	75fb      	strb	r3, [r7, #23]
			}
			break;
     3b2:	e107      	b.n	5c4 <_Min_Stack_Size+0x1c4>
     3b4:	f3af 8000 	nop.w
     3b8:	00000000 	.word	0x00000000
     3bc:	412e8480 	.word	0x412e8480
     3c0:	2000024c 	.word	0x2000024c
     3c4:	2000001c 	.word	0x2000001c
     3c8:	2000062c 	.word	0x2000062c
     3cc:	20000600 	.word	0x20000600
     3d0:	20000630 	.word	0x20000630
     3d4:	20000000 	.word	0x20000000
     3d8:	0801bbf8 	.word	0x0801bbf8
     3dc:	0801bc0c 	.word	0x0801bc0c
     3e0:	200002bc 	.word	0x200002bc
     3e4:	20000634 	.word	0x20000634
     3e8:	000f423f 	.word	0x000f423f
     3ec:	58021800 	.word	0x58021800
     3f0:	20000020 	.word	0x20000020
     3f4:	40300000 	.word	0x40300000
     3f8:	0801bc50 	.word	0x0801bc50
     3fc:	2000063c 	.word	0x2000063c
     400:	2000024e 	.word	0x2000024e
     404:	20000250 	.word	0x20000250
     408:	20000252 	.word	0x20000252
     40c:	0801bc88 	.word	0x0801bc88
     410:	0801bcc4 	.word	0x0801bcc4
     414:	0801bcd8 	.word	0x0801bcd8
		case LASER_RAMP_PHASE_THREE: //finding F=3 dip
			if(adc_average_updated) {
     418:	4b71      	ldr	r3, [pc, #452]	; (5e0 <_Min_Stack_Size+0x1e0>)
     41a:	781b      	ldrb	r3, [r3, #0]
     41c:	2b00      	cmp	r3, #0
     41e:	f000 80d3 	beq.w	5c8 <_Min_Stack_Size+0x1c8>
				if (adc_averaged_val < adc_averaged_min) {//if new minimum detected
     422:	4b70      	ldr	r3, [pc, #448]	; (5e4 <_Min_Stack_Size+0x1e4>)
     424:	681a      	ldr	r2, [r3, #0]
     426:	4b70      	ldr	r3, [pc, #448]	; (5e8 <_Min_Stack_Size+0x1e8>)
     428:	681b      	ldr	r3, [r3, #0]
     42a:	429a      	cmp	r2, r3
     42c:	d207      	bcs.n	43e <_Min_Stack_Size+0x3e>
					adc_averaged_min = adc_averaged_val; //record new mininum
     42e:	4b6d      	ldr	r3, [pc, #436]	; (5e4 <_Min_Stack_Size+0x1e4>)
     430:	681b      	ldr	r3, [r3, #0]
     432:	4a6d      	ldr	r2, [pc, #436]	; (5e8 <_Min_Stack_Size+0x1e8>)
     434:	6013      	str	r3, [r2, #0]
					saved_mod_value = laser_mod_value; //record the associated modulation value
     436:	4b6d      	ldr	r3, [pc, #436]	; (5ec <_Min_Stack_Size+0x1ec>)
     438:	881a      	ldrh	r2, [r3, #0]
     43a:	4b6d      	ldr	r3, [pc, #436]	; (5f0 <_Min_Stack_Size+0x1f0>)
     43c:	801a      	strh	r2, [r3, #0]
				}
				/* Detect when we've passed F=3 dip
				 * If the latest reading is significantly higher than the minimum
				 * then record F=3
				 */
				if ((adc_averaged_val - adc_averaged_min) >= DIP_THRESHOLD) {//if the latest reading is significant above the minimum
     43e:	4b69      	ldr	r3, [pc, #420]	; (5e4 <_Min_Stack_Size+0x1e4>)
     440:	681a      	ldr	r2, [r3, #0]
     442:	4b69      	ldr	r3, [pc, #420]	; (5e8 <_Min_Stack_Size+0x1e8>)
     444:	681b      	ldr	r3, [r3, #0]
     446:	1ad3      	subs	r3, r2, r3
     448:	2bf7      	cmp	r3, #247	; 0xf7
     44a:	d90a      	bls.n	462 <_Min_Stack_Size+0x62>
					F3_mod_value = saved_mod_value - moving_average_offset; //record the modulation value for the F=3 dip
     44c:	4b68      	ldr	r3, [pc, #416]	; (5f0 <_Min_Stack_Size+0x1f0>)
     44e:	881a      	ldrh	r2, [r3, #0]
     450:	4b68      	ldr	r3, [pc, #416]	; (5f4 <_Min_Stack_Size+0x1f4>)
     452:	881b      	ldrh	r3, [r3, #0]
     454:	1ad3      	subs	r3, r2, r3
     456:	b29a      	uxth	r2, r3
     458:	4b67      	ldr	r3, [pc, #412]	; (5f8 <_Min_Stack_Size+0x1f8>)
     45a:	801a      	strh	r2, [r3, #0]
					laser_state = LASER_RAMP_PHASE_FOUR;
     45c:	4b67      	ldr	r3, [pc, #412]	; (5fc <_Min_Stack_Size+0x1fc>)
     45e:	2207      	movs	r2, #7
     460:	701a      	strb	r2, [r3, #0]
				}
				laser_mod_value += LASER_STEP; //next laser step
     462:	4b62      	ldr	r3, [pc, #392]	; (5ec <_Min_Stack_Size+0x1ec>)
     464:	881b      	ldrh	r3, [r3, #0]
     466:	2203      	movs	r2, #3
     468:	4413      	add	r3, r2
     46a:	b29a      	uxth	r2, r3
     46c:	4b5f      	ldr	r3, [pc, #380]	; (5ec <_Min_Stack_Size+0x1ec>)
     46e:	801a      	strh	r2, [r3, #0]
				if (laser_mod_value >= LASER_MAX_MOD) {//if no longer in range
     470:	4b5e      	ldr	r3, [pc, #376]	; (5ec <_Min_Stack_Size+0x1ec>)
     472:	881b      	ldrh	r3, [r3, #0]
     474:	f640 32b7 	movw	r2, #2999	; 0xbb7
     478:	4293      	cmp	r3, r2
     47a:	d91c      	bls.n	4b6 <_Min_Stack_Size+0xb6>
					printf("Have completed absorption scan without detecting F=3 DIP.\r\n");
     47c:	4860      	ldr	r0, [pc, #384]	; (600 <_Min_Stack_Size+0x200>)
     47e:	f001 fb6f 	bl	1b60 <__puts_veneer>
					printf("DIP_THRESHOLD: %u\r\n", DIP_THRESHOLD);
     482:	21f8      	movs	r1, #248	; 0xf8
     484:	485f      	ldr	r0, [pc, #380]	; (604 <_Min_Stack_Size+0x204>)
     486:	f001 fb6f 	bl	1b68 <__printf_veneer>
					sweep_time_s = (double) (stop_timer(SWEEP_TIMER)) / 1000000;
     48a:	4b5f      	ldr	r3, [pc, #380]	; (608 <_Min_Stack_Size+0x208>)
     48c:	681b      	ldr	r3, [r3, #0]
     48e:	4618      	mov	r0, r3
     490:	f001 fb1e 	bl	1ad0 <stop_timer>
     494:	ee07 0a90 	vmov	s15, r0
     498:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     49c:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 5d8 <_Min_Stack_Size+0x1d8>
     4a0:	ee86 7b05 	vdiv.f64	d7, d6, d5
     4a4:	ed87 7b02 	vstr	d7, [r7, #8]
					printf("Sweep complete in %.3g s.\r\n", sweep_time_s);
     4a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     4ac:	4857      	ldr	r0, [pc, #348]	; (60c <_Min_Stack_Size+0x20c>)
     4ae:	f001 fb5b 	bl	1b68 <__printf_veneer>
					Error_Handler();
     4b2:	f001 fb5d 	bl	1b70 <__Error_Handler_veneer>
				}
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, laser_mod_value); //set DAC output pin
     4b6:	4b4d      	ldr	r3, [pc, #308]	; (5ec <_Min_Stack_Size+0x1ec>)
     4b8:	881b      	ldrh	r3, [r3, #0]
     4ba:	2200      	movs	r2, #0
     4bc:	2110      	movs	r1, #16
     4be:	4854      	ldr	r0, [pc, #336]	; (610 <_Min_Stack_Size+0x210>)
     4c0:	f001 fb3a 	bl	1b38 <__HAL_DAC_SetValue_veneer>
				//reset_adc_samples(); //reset ADC samples including sample count
				adc_average_updated = false; //clears new reading flag
     4c4:	4b46      	ldr	r3, [pc, #280]	; (5e0 <_Min_Stack_Size+0x1e0>)
     4c6:	2200      	movs	r2, #0
     4c8:	701a      	strb	r2, [r3, #0]
				action_taken = true;
     4ca:	2301      	movs	r3, #1
     4cc:	75fb      	strb	r3, [r7, #23]
			}
			break;
     4ce:	e07b      	b.n	5c8 <_Min_Stack_Size+0x1c8>
		case LASER_RAMP_PHASE_FOUR: //finishing the current sweep
			if(adc_average_updated) {
     4d0:	4b43      	ldr	r3, [pc, #268]	; (5e0 <_Min_Stack_Size+0x1e0>)
     4d2:	781b      	ldrb	r3, [r3, #0]
     4d4:	2b00      	cmp	r3, #0
     4d6:	d079      	beq.n	5cc <_Min_Stack_Size+0x1cc>
				laser_mod_value += LASER_STEP; //next laser step
     4d8:	4b44      	ldr	r3, [pc, #272]	; (5ec <_Min_Stack_Size+0x1ec>)
     4da:	881b      	ldrh	r3, [r3, #0]
     4dc:	2203      	movs	r2, #3
     4de:	4413      	add	r3, r2
     4e0:	b29a      	uxth	r2, r3
     4e2:	4b42      	ldr	r3, [pc, #264]	; (5ec <_Min_Stack_Size+0x1ec>)
     4e4:	801a      	strh	r2, [r3, #0]
				if (laser_mod_value >= LASER_MAX_MOD) {//if no longer in range
     4e6:	4b41      	ldr	r3, [pc, #260]	; (5ec <_Min_Stack_Size+0x1ec>)
     4e8:	881b      	ldrh	r3, [r3, #0]
     4ea:	f640 32b7 	movw	r2, #2999	; 0xbb7
     4ee:	4293      	cmp	r3, r2
     4f0:	d92f      	bls.n	552 <_Min_Stack_Size+0x152>
					sweep_time_s = (double) (stop_timer(SWEEP_TIMER)) / 1000000;
     4f2:	4b45      	ldr	r3, [pc, #276]	; (608 <_Min_Stack_Size+0x208>)
     4f4:	681b      	ldr	r3, [r3, #0]
     4f6:	4618      	mov	r0, r3
     4f8:	f001 faea 	bl	1ad0 <stop_timer>
     4fc:	ee07 0a90 	vmov	s15, r0
     500:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     504:	ed9f 5b34 	vldr	d5, [pc, #208]	; 5d8 <_Min_Stack_Size+0x1d8>
     508:	ee86 7b05 	vdiv.f64	d7, d6, d5
     50c:	ed87 7b02 	vstr	d7, [r7, #8]
					printf("Absorption spectroscopy complete in %.3g s.\r\n", sweep_time_s);
     510:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     514:	483f      	ldr	r0, [pc, #252]	; (614 <_Min_Stack_Size+0x214>)
     516:	f001 fb27 	bl	1b68 <__printf_veneer>
					printf("F=2 dip detected at step %u.\r\n", F2_mod_value);
     51a:	4b3f      	ldr	r3, [pc, #252]	; (618 <_Min_Stack_Size+0x218>)
     51c:	881b      	ldrh	r3, [r3, #0]
     51e:	4619      	mov	r1, r3
     520:	483e      	ldr	r0, [pc, #248]	; (61c <_Min_Stack_Size+0x21c>)
     522:	f001 fb21 	bl	1b68 <__printf_veneer>
					printf("F=3 dip detected at step %u.\r\n", F3_mod_value);
     526:	4b34      	ldr	r3, [pc, #208]	; (5f8 <_Min_Stack_Size+0x1f8>)
     528:	881b      	ldrh	r3, [r3, #0]
     52a:	4619      	mov	r1, r3
     52c:	483c      	ldr	r0, [pc, #240]	; (620 <_Min_Stack_Size+0x220>)
     52e:	f001 fb1b 	bl	1b68 <__printf_veneer>
					HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Resets trigger output
     532:	2201      	movs	r2, #1
     534:	2101      	movs	r1, #1
     536:	483b      	ldr	r0, [pc, #236]	; (624 <_Min_Stack_Size+0x224>)
     538:	f001 fb02 	bl	1b40 <__HAL_GPIO_WritePin_veneer>
					if (LOCK_TO_DIP == 2) {
						laser_mod_value = F2_mod_value;
					} else if (LOCK_TO_DIP == 3) {
						laser_mod_value = F3_mod_value;
     53c:	4b2e      	ldr	r3, [pc, #184]	; (5f8 <_Min_Stack_Size+0x1f8>)
     53e:	881a      	ldrh	r2, [r3, #0]
     540:	4b2a      	ldr	r3, [pc, #168]	; (5ec <_Min_Stack_Size+0x1ec>)
     542:	801a      	strh	r2, [r3, #0]
					} else {
						printf("Illegal DIP specified. LOCK_TO_DIP = %u.\r\n", LOCK_TO_DIP);
						Error_Handler();
					}
					printf("F=%u dip selected.\r\n", LOCK_TO_DIP);
     544:	2103      	movs	r1, #3
     546:	4838      	ldr	r0, [pc, #224]	; (628 <_Min_Stack_Size+0x228>)
     548:	f001 fb0e 	bl	1b68 <__printf_veneer>
					laser_state = LASER_TEMP_STABILISING;
     54c:	4b2b      	ldr	r3, [pc, #172]	; (5fc <_Min_Stack_Size+0x1fc>)
     54e:	2201      	movs	r2, #1
     550:	701a      	strb	r2, [r3, #0]
				}
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, laser_mod_value); //set DAC output pin
     552:	4b26      	ldr	r3, [pc, #152]	; (5ec <_Min_Stack_Size+0x1ec>)
     554:	881b      	ldrh	r3, [r3, #0]
     556:	2200      	movs	r2, #0
     558:	2110      	movs	r1, #16
     55a:	482d      	ldr	r0, [pc, #180]	; (610 <_Min_Stack_Size+0x210>)
     55c:	f001 faec 	bl	1b38 <__HAL_DAC_SetValue_veneer>
				//reset_adc_samples(); //reset ADC samples including sample count
				adc_average_updated = false; //clears new reading flag
     560:	4b1f      	ldr	r3, [pc, #124]	; (5e0 <_Min_Stack_Size+0x1e0>)
     562:	2200      	movs	r2, #0
     564:	701a      	strb	r2, [r3, #0]
				action_taken = true;
     566:	2301      	movs	r3, #1
     568:	75fb      	strb	r3, [r7, #23]
			}
			break;
     56a:	e02f      	b.n	5cc <_Min_Stack_Size+0x1cc>
		case LASER_RAMP_PHASE_FIVE: //waiting for the LD temperature to stabilise
			if (check_timer(MW_TIMER) < 1000000) return(false); //Still waiting, no action taken
     56c:	4b2f      	ldr	r3, [pc, #188]	; (62c <_Min_Stack_Size+0x22c>)
     56e:	681b      	ldr	r3, [r3, #0]
     570:	4618      	mov	r0, r3
     572:	f001 fabf 	bl	1af4 <check_timer>
     576:	4603      	mov	r3, r0
     578:	4a2d      	ldr	r2, [pc, #180]	; (630 <_Min_Stack_Size+0x230>)
     57a:	4293      	cmp	r3, r2
     57c:	d801      	bhi.n	582 <_Min_Stack_Size+0x182>
     57e:	2300      	movs	r3, #0
     580:	e026      	b.n	5d0 <_Min_Stack_Size+0x1d0>
			action_taken = true;
     582:	2301      	movs	r3, #1
     584:	75fb      	strb	r3, [r7, #23]
			stop_timer(MW_TIMER); //release MW_timer
     586:	4b29      	ldr	r3, [pc, #164]	; (62c <_Min_Stack_Size+0x22c>)
     588:	681b      	ldr	r3, [r3, #0]
     58a:	4618      	mov	r0, r3
     58c:	f001 faa0 	bl	1ad0 <stop_timer>
			laser_state = LASER_ON_FREQ;
     590:	4b1a      	ldr	r3, [pc, #104]	; (5fc <_Min_Stack_Size+0x1fc>)
     592:	2200      	movs	r2, #0
     594:	701a      	strb	r2, [r3, #0]
			reset_adc_samples(); //reset ADC samples including sample count
     596:	f000 f897 	bl	6c8 <reset_adc_samples>
		    printf("LD temperature stabilised.\r\n");
     59a:	4826      	ldr	r0, [pc, #152]	; (634 <_Min_Stack_Size+0x234>)
     59c:	f001 fae0 	bl	1b60 <__puts_veneer>

		default: // Other state
	       printf("laser_update has detected illegal state: %u \r\n", laser_state);
     5a0:	4b16      	ldr	r3, [pc, #88]	; (5fc <_Min_Stack_Size+0x1fc>)
     5a2:	781b      	ldrb	r3, [r3, #0]
     5a4:	4619      	mov	r1, r3
     5a6:	4824      	ldr	r0, [pc, #144]	; (638 <_Min_Stack_Size+0x238>)
     5a8:	f001 fade 	bl	1b68 <__printf_veneer>
	       printf("local version: %u \r\n", local_copy_of_laser_state);
     5ac:	79fb      	ldrb	r3, [r7, #7]
     5ae:	4619      	mov	r1, r3
     5b0:	4822      	ldr	r0, [pc, #136]	; (63c <_Min_Stack_Size+0x23c>)
     5b2:	f001 fad9 	bl	1b68 <__printf_veneer>
     5b6:	e00a      	b.n	5ce <_Min_Stack_Size+0x1ce>
			break; //no action to take
     5b8:	bf00      	nop
     5ba:	e008      	b.n	5ce <_Min_Stack_Size+0x1ce>
			break;
     5bc:	bf00      	nop
     5be:	e006      	b.n	5ce <_Min_Stack_Size+0x1ce>
			break;
     5c0:	bf00      	nop
     5c2:	e004      	b.n	5ce <_Min_Stack_Size+0x1ce>
			break;
     5c4:	bf00      	nop
     5c6:	e002      	b.n	5ce <_Min_Stack_Size+0x1ce>
			break;
     5c8:	bf00      	nop
     5ca:	e000      	b.n	5ce <_Min_Stack_Size+0x1ce>
			break;
     5cc:	bf00      	nop
	}
    return(action_taken);
     5ce:	7dfb      	ldrb	r3, [r7, #23]
}
     5d0:	4618      	mov	r0, r3
     5d2:	3718      	adds	r7, #24
     5d4:	46bd      	mov	sp, r7
     5d6:	bd80      	pop	{r7, pc}
     5d8:	00000000 	.word	0x00000000
     5dc:	412e8480 	.word	0x412e8480
     5e0:	2000062c 	.word	0x2000062c
     5e4:	20000600 	.word	0x20000600
     5e8:	2000063c 	.word	0x2000063c
     5ec:	20000000 	.word	0x20000000
     5f0:	2000024e 	.word	0x2000024e
     5f4:	20000250 	.word	0x20000250
     5f8:	20000254 	.word	0x20000254
     5fc:	2000024c 	.word	0x2000024c
     600:	0801bcf4 	.word	0x0801bcf4
     604:	0801bcc4 	.word	0x0801bcc4
     608:	20000020 	.word	0x20000020
     60c:	0801bcd8 	.word	0x0801bcd8
     610:	200002bc 	.word	0x200002bc
     614:	0801bd30 	.word	0x0801bd30
     618:	20000252 	.word	0x20000252
     61c:	0801bd60 	.word	0x0801bd60
     620:	0801bd80 	.word	0x0801bd80
     624:	58021800 	.word	0x58021800
     628:	0801bda0 	.word	0x0801bda0
     62c:	2000001c 	.word	0x2000001c
     630:	000f423f 	.word	0x000f423f
     634:	0801bdb8 	.word	0x0801bdb8
     638:	0801bdd4 	.word	0x0801bdd4
     63c:	0801be04 	.word	0x0801be04

00000640 <measure_POP_cycle_time>:
  * @brief  Measure POP cycle time
  * @param  None
  * @retval None
  */
void measure_POP_cycle_time (void)
{
     640:	b580      	push	{r7, lr}
     642:	af00      	add	r7, sp, #0
	/* Measure the period of a POP cycle *AFTER* the ADC has been initialised
	 * Should be performed before calculating sweep settings
	 */
	stop_laser_tuning(); //ensure MW_timer not being used and laser tuning pin high
     644:	f7ff fd60 	bl	108 <stop_laser_tuning>
	start_timer(SWEEP_TIMER); //Using sweep timer for 3s timeout
     648:	4b13      	ldr	r3, [pc, #76]	; (698 <measure_POP_cycle_time+0x58>)
     64a:	681b      	ldr	r3, [r3, #0]
     64c:	4618      	mov	r0, r3
     64e:	f001 fa21 	bl	1a94 <start_timer>
	start_POP_cycle_calibration(true);
     652:	2001      	movs	r0, #1
     654:	f000 fe90 	bl	1378 <start_POP_cycle_calibration>
	//loop here until period of POP cycle has been measured or 3s has elapsed
	//When correctly connected, POP cycle measurement should take 1.3s
	while (!POP_period_us && (check_timer(SWEEP_TIMER) < 3000000)) {
     658:	e001      	b.n	65e <measure_POP_cycle_time+0x1e>
		MW_update();
     65a:	f000 ff63 	bl	1524 <MW_update>
	while (!POP_period_us && (check_timer(SWEEP_TIMER) < 3000000)) {
     65e:	4b0f      	ldr	r3, [pc, #60]	; (69c <measure_POP_cycle_time+0x5c>)
     660:	681b      	ldr	r3, [r3, #0]
     662:	2b00      	cmp	r3, #0
     664:	d108      	bne.n	678 <measure_POP_cycle_time+0x38>
     666:	4b0c      	ldr	r3, [pc, #48]	; (698 <measure_POP_cycle_time+0x58>)
     668:	681b      	ldr	r3, [r3, #0]
     66a:	4618      	mov	r0, r3
     66c:	f001 fa42 	bl	1af4 <check_timer>
     670:	4603      	mov	r3, r0
     672:	4a0b      	ldr	r2, [pc, #44]	; (6a0 <measure_POP_cycle_time+0x60>)
     674:	4293      	cmp	r3, r2
     676:	d9f0      	bls.n	65a <measure_POP_cycle_time+0x1a>
//		printf("POP_period_us %lu, SWEEP_TIMER value %lu \r\n", POP_period_us, check_timer(SWEEP_TIMER));
	}
//	printf("Finished loop - POP_period_us %lu, SWEEP_TIMER value %lu \r\n", POP_period_us, check_timer(SWEEP_TIMER));
	stop_timer(SWEEP_TIMER); //stop SWEEP_TIMER
     678:	4b07      	ldr	r3, [pc, #28]	; (698 <measure_POP_cycle_time+0x58>)
     67a:	681b      	ldr	r3, [r3, #0]
     67c:	4618      	mov	r0, r3
     67e:	f001 fa27 	bl	1ad0 <stop_timer>
	if (!POP_period_us) {//if the calibration loop timed out
     682:	4b06      	ldr	r3, [pc, #24]	; (69c <measure_POP_cycle_time+0x5c>)
     684:	681b      	ldr	r3, [r3, #0]
     686:	2b00      	cmp	r3, #0
     688:	d102      	bne.n	690 <measure_POP_cycle_time+0x50>
		printf("WARNING - STM32 is not receiving a periodic sample from the FPGA \r\n");
     68a:	4806      	ldr	r0, [pc, #24]	; (6a4 <measure_POP_cycle_time+0x64>)
     68c:	f001 fa68 	bl	1b60 <__puts_veneer>
	}
	stop_MW_operation(); //release MW_SWEEP timer and ensure MW_INVALID is cleared
     690:	f000 ff30 	bl	14f4 <stop_MW_operation>
}
     694:	bf00      	nop
     696:	bd80      	pop	{r7, pc}
     698:	20000020 	.word	0x20000020
     69c:	200005f8 	.word	0x200005f8
     6a0:	002dc6bf 	.word	0x002dc6bf
     6a4:	0801be1c 	.word	0x0801be1c

000006a8 <system_mode_laser_tuning>:
{
     6a8:	b580      	push	{r7, lr}
     6aa:	af00      	add	r7, sp, #0
	stop_MW_operation(); //resets MW timers, sets MW_invalid pin low (to ensure ADC sample pulse) and sets correct MW state
     6ac:	f000 ff22 	bl	14f4 <stop_MW_operation>
	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_SET); // Laser_tuning output high
     6b0:	2201      	movs	r2, #1
     6b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     6b6:	4803      	ldr	r0, [pc, #12]	; (6c4 <system_mode_laser_tuning+0x1c>)
     6b8:	f001 fa42 	bl	1b40 <__HAL_GPIO_WritePin_veneer>
	reset_adc_samples(); //reset ADC samples including sample count
     6bc:	f000 f804 	bl	6c8 <reset_adc_samples>
}
     6c0:	bf00      	nop
     6c2:	bd80      	pop	{r7, pc}
     6c4:	58020400 	.word	0x58020400

000006c8 <reset_adc_samples>:
{
     6c8:	b480      	push	{r7}
     6ca:	af00      	add	r7, sp, #0
	adc_average_updated = false; //signals to other functions that adc_averaged_val shouldn't be read
     6cc:	4b08      	ldr	r3, [pc, #32]	; (6f0 <reset_adc_samples+0x28>)
     6ce:	2200      	movs	r2, #0
     6d0:	701a      	strb	r2, [r3, #0]
	adc_sample_no = 0; //reset cyclical sample counter
     6d2:	4b08      	ldr	r3, [pc, #32]	; (6f4 <reset_adc_samples+0x2c>)
     6d4:	2200      	movs	r2, #0
     6d6:	801a      	strh	r2, [r3, #0]
	adc_readings_total = 0; //zeroes the total counter
     6d8:	4b07      	ldr	r3, [pc, #28]	; (6f8 <reset_adc_samples+0x30>)
     6da:	2200      	movs	r2, #0
     6dc:	601a      	str	r2, [r3, #0]
	sample_count=0; //reset the main ADC sample counter
     6de:	4b07      	ldr	r3, [pc, #28]	; (6fc <reset_adc_samples+0x34>)
     6e0:	2200      	movs	r2, #0
     6e2:	801a      	strh	r2, [r3, #0]
}
     6e4:	bf00      	nop
     6e6:	46bd      	mov	sp, r7
     6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ec:	4770      	bx	lr
     6ee:	bf00      	nop
     6f0:	2000062c 	.word	0x2000062c
     6f4:	20000624 	.word	0x20000624
     6f8:	20000628 	.word	0x20000628
     6fc:	200005f6 	.word	0x200005f6

00000700 <synth_writereg>:
  * @param  Address
  * @param  Chip address
  * @param  Verify
  * @retval Contents read back from register
  */
static uint32_t synth_writereg(const uint32_t data, const uint32_t reg_address, const uint32_t chip_address, const bool verify) {
     700:	b580      	push	{r7, lr}
     702:	b08a      	sub	sp, #40	; 0x28
     704:	af00      	add	r7, sp, #0
     706:	60f8      	str	r0, [r7, #12]
     708:	60b9      	str	r1, [r7, #8]
     70a:	607a      	str	r2, [r7, #4]
     70c:	70fb      	strb	r3, [r7, #3]

	uint32_t read_data = 0;
     70e:	2300      	movs	r3, #0
     710:	627b      	str	r3, [r7, #36]	; 0x24
	const uint32_t write_data = (data << 8) | (reg_address << 3) | chip_address; // This is what we will write, 32 bits in total.
     712:	68fb      	ldr	r3, [r7, #12]
     714:	021a      	lsls	r2, r3, #8
     716:	68bb      	ldr	r3, [r7, #8]
     718:	00db      	lsls	r3, r3, #3
     71a:	4313      	orrs	r3, r2
     71c:	687a      	ldr	r2, [r7, #4]
     71e:	4313      	orrs	r3, r2
     720:	61fb      	str	r3, [r7, #28]
	#ifdef SPI_DEBUG
		printf("SPI BYTES WRITTEN: 0x%X \r\n", write_data);
	#endif //SPI_DEBUG
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
     722:	2200      	movs	r2, #0
     724:	f44f 7180 	mov.w	r1, #256	; 0x100
     728:	4830      	ldr	r0, [pc, #192]	; (7ec <synth_writereg+0xec>)
     72a:	f001 fa09 	bl	1b40 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 0); // Take SEN low to indicate we are sending data
     72e:	2200      	movs	r2, #0
     730:	f44f 6100 	mov.w	r1, #2048	; 0x800
     734:	482d      	ldr	r0, [pc, #180]	; (7ec <synth_writereg+0xec>)
     736:	f001 fa03 	bl	1b40 <__HAL_GPIO_WritePin_veneer>

	/* Clock in the data */
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
     73a:	2300      	movs	r3, #0
     73c:	623b      	str	r3, [r7, #32]
     73e:	e036      	b.n	7ae <synth_writereg+0xae>

		/* Data written on the rising edge */
		uint32_t bit = (SYNTH_SPI_BITS - 1 - i);
     740:	2220      	movs	r2, #32
     742:	6a3b      	ldr	r3, [r7, #32]
     744:	1ad3      	subs	r3, r2, r3
     746:	3b01      	subs	r3, #1
     748:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(MOSI_GPIO_Port, MOSI_Pin, !!(write_data & (1 << bit)));
     74a:	2201      	movs	r2, #1
     74c:	697b      	ldr	r3, [r7, #20]
     74e:	fa02 f303 	lsl.w	r3, r2, r3
     752:	461a      	mov	r2, r3
     754:	69fb      	ldr	r3, [r7, #28]
     756:	4013      	ands	r3, r2
     758:	2b00      	cmp	r3, #0
     75a:	bf14      	ite	ne
     75c:	2301      	movne	r3, #1
     75e:	2300      	moveq	r3, #0
     760:	b2db      	uxtb	r3, r3
     762:	461a      	mov	r2, r3
     764:	f44f 7100 	mov.w	r1, #512	; 0x200
     768:	4820      	ldr	r0, [pc, #128]	; (7ec <synth_writereg+0xec>)
     76a:	f001 f9e9 	bl	1b40 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 1);
     76e:	2201      	movs	r2, #1
     770:	f44f 7180 	mov.w	r1, #256	; 0x100
     774:	481d      	ldr	r0, [pc, #116]	; (7ec <synth_writereg+0xec>)
     776:	f001 f9e3 	bl	1b40 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
     77a:	2200      	movs	r2, #0
     77c:	f44f 7180 	mov.w	r1, #256	; 0x100
     780:	481a      	ldr	r0, [pc, #104]	; (7ec <synth_writereg+0xec>)
     782:	f001 f9dd 	bl	1b40 <__HAL_GPIO_WritePin_veneer>

		/* Data read on the falling edge */
		read_data = read_data
				| (HAL_GPIO_ReadPin(MISO_GPIO_Port, MISO_Pin)
     786:	f44f 6180 	mov.w	r1, #1024	; 0x400
     78a:	4818      	ldr	r0, [pc, #96]	; (7ec <synth_writereg+0xec>)
     78c:	f001 f9e4 	bl	1b58 <__HAL_GPIO_ReadPin_veneer>
     790:	4603      	mov	r3, r0
     792:	4619      	mov	r1, r3
						<< (SYNTH_SPI_BITS - 1 - i));
     794:	2220      	movs	r2, #32
     796:	6a3b      	ldr	r3, [r7, #32]
     798:	1ad3      	subs	r3, r2, r3
     79a:	3b01      	subs	r3, #1
     79c:	fa01 f303 	lsl.w	r3, r1, r3
     7a0:	461a      	mov	r2, r3
		read_data = read_data
     7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     7a4:	4313      	orrs	r3, r2
     7a6:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
     7a8:	6a3b      	ldr	r3, [r7, #32]
     7aa:	3301      	adds	r3, #1
     7ac:	623b      	str	r3, [r7, #32]
     7ae:	2220      	movs	r2, #32
     7b0:	6a3b      	ldr	r3, [r7, #32]
     7b2:	4293      	cmp	r3, r2
     7b4:	d3c4      	bcc.n	740 <synth_writereg+0x40>
	}

	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1); // Assert the SEN line to register the transmitted data
     7b6:	2201      	movs	r2, #1
     7b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
     7bc:	480b      	ldr	r0, [pc, #44]	; (7ec <synth_writereg+0xec>)
     7be:	f001 f9bf 	bl	1b40 <__HAL_GPIO_WritePin_veneer>

	if (verify) {
     7c2:	78fb      	ldrb	r3, [r7, #3]
     7c4:	2b00      	cmp	r3, #0
     7c6:	d00c      	beq.n	7e2 <synth_writereg+0xe2>
		const uint32_t verify_data = synth_readreg(reg_address); // Data returned on the second cycle
     7c8:	68b8      	ldr	r0, [r7, #8]
     7ca:	f000 f813 	bl	7f4 <synth_readreg>
     7ce:	61b8      	str	r0, [r7, #24]
		if (verify_data != data) {
     7d0:	69ba      	ldr	r2, [r7, #24]
     7d2:	68fb      	ldr	r3, [r7, #12]
     7d4:	429a      	cmp	r2, r3
     7d6:	d004      	beq.n	7e2 <synth_writereg+0xe2>
			printf("SPI transmission error!\n");
     7d8:	4805      	ldr	r0, [pc, #20]	; (7f0 <synth_writereg+0xf0>)
     7da:	f001 f9c1 	bl	1b60 <__puts_veneer>
			Error_Handler(); // We enter an infinite loop here
     7de:	f001 f9c7 	bl	1b70 <__Error_Handler_veneer>
		}
	}

	return read_data;
     7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     7e4:	4618      	mov	r0, r3
     7e6:	3728      	adds	r7, #40	; 0x28
     7e8:	46bd      	mov	sp, r7
     7ea:	bd80      	pop	{r7, pc}
     7ec:	58020800 	.word	0x58020800
     7f0:	0801c0f0 	.word	0x0801c0f0

000007f4 <synth_readreg>:
/**
  * @brief  Reads a register.
  * @param  Address
  * @retval Register contents
  */
static uint32_t synth_readreg(const uint32_t reg_address){
     7f4:	b580      	push	{r7, lr}
     7f6:	b084      	sub	sp, #16
     7f8:	af00      	add	r7, sp, #0
     7fa:	6078      	str	r0, [r7, #4]

    synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY); // First cycle to send the read address
     7fc:	2300      	movs	r3, #0
     7fe:	2200      	movs	r2, #0
     800:	2100      	movs	r1, #0
     802:	6878      	ldr	r0, [r7, #4]
     804:	f7ff ff7c 	bl	700 <synth_writereg>
    const uint32_t read_data = synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY);  // Data returned on the second cycle
     808:	2300      	movs	r3, #0
     80a:	2200      	movs	r2, #0
     80c:	2100      	movs	r1, #0
     80e:	6878      	ldr	r0, [r7, #4]
     810:	f7ff ff76 	bl	700 <synth_writereg>
     814:	60f8      	str	r0, [r7, #12]

    return (read_data >> 8); // We only care about the first 24 bits returned.
     816:	68fb      	ldr	r3, [r7, #12]
     818:	0a1b      	lsrs	r3, r3, #8

}
     81a:	4618      	mov	r0, r3
     81c:	3710      	adds	r7, #16
     81e:	46bd      	mov	sp, r7
     820:	bd80      	pop	{r7, pc}

00000822 <set_MW_power>:
/**
  * @brief  Program LO2 output gain.
  * @param  MW power setting
  * @retval Success/fail
  */
uint32_t set_MW_power (const uint8_t mw_power) {
     822:	b580      	push	{r7, lr}
     824:	b084      	sub	sp, #16
     826:	af00      	add	r7, sp, #0
     828:	4603      	mov	r3, r0
     82a:	71fb      	strb	r3, [r7, #7]
	if (mw_power > 3) {//check that LO2GAIN is an integer from 0 to 3 inclusive
     82c:	79fb      	ldrb	r3, [r7, #7]
     82e:	2b03      	cmp	r3, #3
     830:	d904      	bls.n	83c <set_MW_power+0x1a>
		printf("illegal mw_power - must be an integer from 0 to 3!\n");
     832:	4811      	ldr	r0, [pc, #68]	; (878 <set_MW_power+0x56>)
     834:	f001 f994 	bl	1b60 <__puts_veneer>
		Error_Handler(); // We enter an infinite loop here
     838:	f001 f99a 	bl	1b70 <__Error_Handler_veneer>
	}
	uint32_t read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     83c:	2016      	movs	r0, #22
     83e:	f7ff ffd9 	bl	7f4 <synth_readreg>
     842:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
     844:	68fb      	ldr	r3, [r7, #12]
     846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
     84a:	60fb      	str	r3, [r7, #12]
	read_data |= (mw_power << 8);	// Set LO2GAIN value.
     84c:	79fb      	ldrb	r3, [r7, #7]
     84e:	021b      	lsls	r3, r3, #8
     850:	461a      	mov	r2, r3
     852:	68fb      	ldr	r3, [r7, #12]
     854:	4313      	orrs	r3, r2
     856:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     858:	2301      	movs	r3, #1
     85a:	2200      	movs	r2, #0
     85c:	2116      	movs	r1, #22
     85e:	68f8      	ldr	r0, [r7, #12]
     860:	f7ff ff4e 	bl	700 <synth_writereg>
	#ifdef MW_VERBOSE
		printf("PROGRAMMED GAIN DIVIDER REGISTER: 0x%lX \r\n", read_data);
	#endif
	printf("LO2 gain setting: %u \r\n", mw_power);
     864:	79fb      	ldrb	r3, [r7, #7]
     866:	4619      	mov	r1, r3
     868:	4804      	ldr	r0, [pc, #16]	; (87c <set_MW_power+0x5a>)
     86a:	f001 f97d 	bl	1b68 <__printf_veneer>
	return SUCCESS;
     86e:	2300      	movs	r3, #0
}
     870:	4618      	mov	r0, r3
     872:	3710      	adds	r7, #16
     874:	46bd      	mov	sp, r7
     876:	bd80      	pop	{r7, pc}
     878:	0801c108 	.word	0x0801c108
     87c:	0801c13c 	.word	0x0801c13c

00000880 <init_synthesiser>:
/**
  * @brief  Initialises HMC835 synthesiser.
  * @param  MW power setting
  * @retval Success/fail
  */
uint32_t init_synthesiser(const uint8_t mw_power) {
     880:	b580      	push	{r7, lr}
     882:	b084      	sub	sp, #16
     884:	af00      	add	r7, sp, #0
     886:	4603      	mov	r3, r0
     888:	71fb      	strb	r3, [r7, #7]

	//Set pins to required initial conditions
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // Turn off the amber lock LED
     88a:	2200      	movs	r2, #0
     88c:	2102      	movs	r1, #2
     88e:	4856      	ldr	r0, [pc, #344]	; (9e8 <init_synthesiser+0x168>)
     890:	f001 f956 	bl	1b40 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
     894:	2201      	movs	r2, #1
     896:	2101      	movs	r1, #1
     898:	4854      	ldr	r0, [pc, #336]	; (9ec <init_synthesiser+0x16c>)
     89a:	f001 f951 	bl	1b40 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
     89e:	2200      	movs	r2, #0
     8a0:	f44f 7180 	mov.w	r1, #256	; 0x100
     8a4:	4852      	ldr	r0, [pc, #328]	; (9f0 <init_synthesiser+0x170>)
     8a6:	f001 f94b 	bl	1b40 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1);
     8aa:	2201      	movs	r2, #1
     8ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
     8b0:	484f      	ldr	r0, [pc, #316]	; (9f0 <init_synthesiser+0x170>)
     8b2:	f001 f945 	bl	1b40 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 1); // Enable the main regulator.
     8b6:	2201      	movs	r2, #1
     8b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     8bc:	484c      	ldr	r0, [pc, #304]	; (9f0 <init_synthesiser+0x170>)
     8be:	f001 f93f 	bl	1b40 <__HAL_GPIO_WritePin_veneer>

	HAL_Delay(100); // Wait 100 ms for the supply to stabilise.
     8c2:	2064      	movs	r0, #100	; 0x64
     8c4:	f001 f940 	bl	1b48 <__HAL_Delay_veneer>

	synth_writereg(0x1UL << 5, OPEN_MODE_READ_ADDRESS, 0x0, DONT_VERIFY); // Soft reset.
     8c8:	2300      	movs	r3, #0
     8ca:	2200      	movs	r2, #0
     8cc:	2100      	movs	r1, #0
     8ce:	2020      	movs	r0, #32
     8d0:	f7ff ff16 	bl	700 <synth_writereg>
	synth_writereg(0x41BFFF, ANALOG_EN_REGISTER, 0x0, VERIFY); // Set the SDO output level to 3.3 Volts
     8d4:	2301      	movs	r3, #1
     8d6:	2200      	movs	r2, #0
     8d8:	2108      	movs	r1, #8
     8da:	4846      	ldr	r0, [pc, #280]	; (9f4 <init_synthesiser+0x174>)
     8dc:	f7ff ff10 	bl	700 <synth_writereg>

	uint32_t read_data = synth_readreg(ID_REGISTER); // Read the ID register to check the chip is communicating
     8e0:	2000      	movs	r0, #0
     8e2:	f7ff ff87 	bl	7f4 <synth_readreg>
     8e6:	60f8      	str	r0, [r7, #12]
	/* Check we have the correct ID */
	if (read_data != SYNTH_ID) {
     8e8:	4a43      	ldr	r2, [pc, #268]	; (9f8 <init_synthesiser+0x178>)
     8ea:	68fb      	ldr	r3, [r7, #12]
     8ec:	4293      	cmp	r3, r2
     8ee:	d00a      	beq.n	906 <init_synthesiser+0x86>
		HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0); // Disable the main regulator.
     8f0:	2200      	movs	r2, #0
     8f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     8f6:	483e      	ldr	r0, [pc, #248]	; (9f0 <init_synthesiser+0x170>)
     8f8:	f001 f922 	bl	1b40 <__HAL_GPIO_WritePin_veneer>
		printf("Incorrect synthesiser ID!\r\n");
     8fc:	483f      	ldr	r0, [pc, #252]	; (9fc <init_synthesiser+0x17c>)
     8fe:	f001 f92f 	bl	1b60 <__puts_veneer>
		return ERROR;
     902:	2301      	movs	r3, #1
     904:	e066      	b.n	9d4 <init_synthesiser+0x154>
	}

	/* Everything looks good, we can communicate with the chip :-) */
	printf("HMC835 Detected.\r\n");
     906:	483e      	ldr	r0, [pc, #248]	; (a00 <init_synthesiser+0x180>)
     908:	f001 f92a 	bl	1b60 <__puts_veneer>

	/* Enables Single-Ended output mode for LO2 output */
	read_data = synth_readreg(MODES_REGISTER); // Get the current value of the modes register
     90c:	2017      	movs	r0, #23
     90e:	f7ff ff71 	bl	7f4 <synth_readreg>
     912:	60f8      	str	r0, [r7, #12]
#ifdef MW_VERBOSE
	printf("READ MODES REGISTER: 0x%lX \r\n", read_data);
#endif
	read_data |= (0x1UL << 9);     // Enable single ended output for LO2 (LO2_P)
     914:	68fb      	ldr	r3, [r7, #12]
     916:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     91a:	60fb      	str	r3, [r7, #12]
	read_data  &= ~(!AUTO_MUTE << 7); //can disable auto_mute - see variable declarations
     91c:	2301      	movs	r3, #1
     91e:	f083 0301 	eor.w	r3, r3, #1
     922:	b2db      	uxtb	r3, r3
     924:	01db      	lsls	r3, r3, #7
     926:	43db      	mvns	r3, r3
     928:	461a      	mov	r2, r3
     92a:	68fb      	ldr	r3, [r7, #12]
     92c:	4013      	ands	r3, r2
     92e:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, MODES_REGISTER, 0x0, VERIFY); // Send
     930:	2301      	movs	r3, #1
     932:	2200      	movs	r2, #0
     934:	2117      	movs	r1, #23
     936:	68f8      	ldr	r0, [r7, #12]
     938:	f7ff fee2 	bl	700 <synth_writereg>
	//read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get the current value.
	//read_data &= 0xFFFFFFF8; // Zero the first 3 LSBs.
	//read_data |= 0x07;
	//synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Update the VCO divide register.

	synth_writereg(1, REFDIV_REGISTER, 0x0, VERIFY); // Reference divider setting.
     93c:	2301      	movs	r3, #1
     93e:	2200      	movs	r2, #0
     940:	2102      	movs	r1, #2
     942:	2001      	movs	r0, #1
     944:	f7ff fedc 	bl	700 <synth_writereg>
	printf("PROGRAMMED DIVIDER REGISTER: 0x01 \r\n");
#endif

	/* Lock detect training: This must be done after any change to the PD
	 * reference frequency or after power cycle. */
	read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get contents of lock detect register
     948:	2007      	movs	r0, #7
     94a:	f7ff ff53 	bl	7f4 <synth_readreg>
     94e:	60f8      	str	r0, [r7, #12]
#ifdef MW_VERBOSE
	printf("READ LOCK_DETECT_REGISTER: 0x%lX \r\n", read_data);
#endif
	read_data |= (0x1UL << 11);      // Enable lock-detect counters.
     950:	68fb      	ldr	r3, [r7, #12]
     952:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     956:	60fb      	str	r3, [r7, #12]
	read_data |= (0x1UL << 14);      // Enable the lock-detect timer.
     958:	68fb      	ldr	r3, [r7, #12]
     95a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     95e:	60fb      	str	r3, [r7, #12]
	read_data |= (0x1UL << 20);      // Train the lock-detect timer.
     960:	68fb      	ldr	r3, [r7, #12]
     962:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     966:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Send
     968:	2301      	movs	r3, #1
     96a:	2200      	movs	r2, #0
     96c:	2107      	movs	r1, #7
     96e:	68f8      	ldr	r0, [r7, #12]
     970:	f7ff fec6 	bl	700 <synth_writereg>
#ifdef MW_VERBOSE
	printf("PROGRAMMED LOCK DETECT REGISTER: 0x%lX \r\n", read_data);
#endif
	HAL_Delay(10); // Wait 10 ms for training to complete, not sure if we really need to do this.
     974:	200a      	movs	r0, #10
     976:	f001 f8e7 	bl	1b48 <__HAL_Delay_veneer>

	/* Program LO2 output gain */
	if (mw_power > 3) {//check that LO2GAIN is an integer from 0 to 3 inclusive
     97a:	79fb      	ldrb	r3, [r7, #7]
     97c:	2b03      	cmp	r3, #3
     97e:	d904      	bls.n	98a <init_synthesiser+0x10a>
		printf("illegal mw_power - must be an integer from 0 to 3!\n");
     980:	4820      	ldr	r0, [pc, #128]	; (a04 <init_synthesiser+0x184>)
     982:	f001 f8ed 	bl	1b60 <__puts_veneer>
		Error_Handler();
     986:	f001 f8f3 	bl	1b70 <__Error_Handler_veneer>
	}
	read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     98a:	2016      	movs	r0, #22
     98c:	f7ff ff32 	bl	7f4 <synth_readreg>
     990:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
     992:	68fb      	ldr	r3, [r7, #12]
     994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
     998:	60fb      	str	r3, [r7, #12]
	read_data |= (mw_power << 8);	// Set LO2GAIN value.
     99a:	79fb      	ldrb	r3, [r7, #7]
     99c:	021b      	lsls	r3, r3, #8
     99e:	461a      	mov	r2, r3
     9a0:	68fb      	ldr	r3, [r7, #12]
     9a2:	4313      	orrs	r3, r2
     9a4:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     9a6:	2301      	movs	r3, #1
     9a8:	2200      	movs	r2, #0
     9aa:	2116      	movs	r1, #22
     9ac:	68f8      	ldr	r0, [r7, #12]
     9ae:	f7ff fea7 	bl	700 <synth_writereg>
	printf("PROGRAMMED GAIN DIVIDER REGISTER: 0x%lX \r\n", read_data);
	printf("LO2 gain setting: %u \r\n", mw_power);
#endif

	/* Sets output frequency to the hyperfine value */
	set_frequency_hz(HYPERFINE + MW_DELTA);
     9b2:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 9e0 <init_synthesiser+0x160>
     9b6:	f000 f83e 	bl	a36 <set_frequency_hz>
	//printf("Single frequency output: %f Hz \r\n", HYPERFINE);
	printf("Single frequency output: %.10g Hz \r\n", (double)(HYPERFINE + MW_DELTA));
     9ba:	a309      	add	r3, pc, #36	; (adr r3, 9e0 <init_synthesiser+0x160>)
     9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
     9c0:	4811      	ldr	r0, [pc, #68]	; (a08 <init_synthesiser+0x188>)
     9c2:	f001 f8d1 	bl	1b68 <__printf_veneer>
	mw_sweep_settings.state = MW_STABILISING;
     9c6:	4b11      	ldr	r3, [pc, #68]	; (a0c <init_synthesiser+0x18c>)
     9c8:	2202      	movs	r2, #2
     9ca:	701a      	strb	r2, [r3, #0]
	mw_sweep_settings.next_state = MW_FIXED_FREQ;
     9cc:	4b0f      	ldr	r3, [pc, #60]	; (a0c <init_synthesiser+0x18c>)
     9ce:	2201      	movs	r2, #1
     9d0:	705a      	strb	r2, [r3, #1]
	//mw_sweep_settings.valid = true;
	//HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); // MW_invalid output low
	return SUCCESS;
     9d2:	2300      	movs	r3, #0
}
     9d4:	4618      	mov	r0, r3
     9d6:	3710      	adds	r7, #16
     9d8:	46bd      	mov	sp, r7
     9da:	bd80      	pop	{r7, pc}
     9dc:	f3af 8000 	nop.w
     9e0:	ea600000 	.word	0xea600000
     9e4:	41e69e35 	.word	0x41e69e35
     9e8:	58021000 	.word	0x58021000
     9ec:	58021800 	.word	0x58021800
     9f0:	58020800 	.word	0x58020800
     9f4:	0041bfff 	.word	0x0041bfff
     9f8:	00c7701a 	.word	0x00c7701a
     9fc:	0801c154 	.word	0x0801c154
     a00:	0801c170 	.word	0x0801c170
     a04:	0801c108 	.word	0x0801c108
     a08:	0801c184 	.word	0x0801c184
     a0c:	20000648 	.word	0x20000648

00000a10 <lock_status>:
/**
  * @brief  Checks for MW frequency lock
  * @param  None
  * @retval Lock status
  */
static const bool lock_status(void) {
     a10:	b580      	push	{r7, lr}
     a12:	b082      	sub	sp, #8
     a14:	af00      	add	r7, sp, #0

	bool locked = synth_readreg(GPOLD_REGISTER) & (1UL << 1);
     a16:	2012      	movs	r0, #18
     a18:	f7ff feec 	bl	7f4 <synth_readreg>
     a1c:	4603      	mov	r3, r0
     a1e:	f003 0302 	and.w	r3, r3, #2
     a22:	2b00      	cmp	r3, #0
     a24:	bf14      	ite	ne
     a26:	2301      	movne	r3, #1
     a28:	2300      	moveq	r3, #0
     a2a:	71fb      	strb	r3, [r7, #7]
	return locked;
     a2c:	79fb      	ldrb	r3, [r7, #7]

}
     a2e:	4618      	mov	r0, r3
     a30:	3708      	adds	r7, #8
     a32:	46bd      	mov	sp, r7
     a34:	bd80      	pop	{r7, pc}

00000a36 <set_frequency_hz>:
/**
  * @brief  Translate a frequency into register values for programming to HMC835
  * @param  Frequency
  * @retval None
  */
void set_frequency_hz(const double fo) {
     a36:	b580      	push	{r7, lr}
     a38:	b088      	sub	sp, #32
     a3a:	af00      	add	r7, sp, #0
     a3c:	ed87 0b00 	vstr	d0, [r7]

#ifdef OPTIMISED_FOR_3_035GHZ_GENERATION
	/* Code optimisation for Generation of frequencies close to 3.035GHz
	 * k always equals 1
	 */
	uint32_t k = 1;
     a40:	2301      	movs	r3, #1
     a42:	61fb      	str	r3, [r7, #28]
//		}
//	}
#endif //OPTIMISED_FOR_3_035GHZ_GENERATION

	/* Calculate the N division ratio */
	const double N = ((fo * k) / REF_FREQ);
     a44:	69fb      	ldr	r3, [r7, #28]
     a46:	ee07 3a90 	vmov	s15, r3
     a4a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     a4e:	ed97 7b00 	vldr	d7, [r7]
     a52:	ee26 6b07 	vmul.f64	d6, d6, d7
     a56:	ed9f 5b2a 	vldr	d5, [pc, #168]	; b00 <set_frequency_hz+0xca>
     a5a:	ee86 7b05 	vdiv.f64	d7, d6, d5
     a5e:	ed87 7b04 	vstr	d7, [r7, #16]

	/* Extract the fractional and integer parts */
	const uint32_t NINT = N;
     a62:	ed97 7b04 	vldr	d7, [r7, #16]
     a66:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     a6a:	ee17 3a90 	vmov	r3, s15
     a6e:	60fb      	str	r3, [r7, #12]
	const uint32_t NFRAC = ((N - NINT) * (1 << 24)) + 0.5;
     a70:	68fb      	ldr	r3, [r7, #12]
     a72:	ee07 3a90 	vmov	s15, r3
     a76:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     a7a:	ed97 6b04 	vldr	d6, [r7, #16]
     a7e:	ee36 7b47 	vsub.f64	d7, d6, d7
     a82:	ed9f 6b21 	vldr	d6, [pc, #132]	; b08 <set_frequency_hz+0xd2>
     a86:	ee27 7b06 	vmul.f64	d7, d7, d6
     a8a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     a8e:	ee37 7b06 	vadd.f64	d7, d7, d6
     a92:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     a96:	ee17 3a90 	vmov	r3, s15
     a9a:	60bb      	str	r3, [r7, #8]
		printf("Failed to establish synthesiser frequency accurately\r\n");
		Error_Handler();
	}
#endif

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
     a9c:	2201      	movs	r2, #1
     a9e:	2102      	movs	r1, #2
     aa0:	481b      	ldr	r0, [pc, #108]	; (b10 <set_frequency_hz+0xda>)
     aa2:	f001 f84d 	bl	1b40 <__HAL_GPIO_WritePin_veneer>
	//set_frequency(NINT, NFRAC, k, MANUAL_MUTE); //Sets only the necessary Hittite registers
	set_freq_regs(NINT, NFRAC, k); //Sets only the necessary Hittite registers
     aa6:	69fa      	ldr	r2, [r7, #28]
     aa8:	68b9      	ldr	r1, [r7, #8]
     aaa:	68f8      	ldr	r0, [r7, #12]
     aac:	f000 f838 	bl	b20 <set_freq_regs>

	//MW stabilisation delay and check for lock
	timer_delay(MW_TIMER, MW_STABILISE_TIME_US);
     ab0:	4b18      	ldr	r3, [pc, #96]	; (b14 <set_frequency_hz+0xde>)
     ab2:	681b      	ldr	r3, [r3, #0]
     ab4:	f241 7270 	movw	r2, #6000	; 0x1770
     ab8:	4611      	mov	r1, r2
     aba:	4618      	mov	r0, r3
     abc:	f001 f826 	bl	1b0c <timer_delay>
	//if (!poll_until_locked(LOCK_WAIT_US)) {
	if (!lock_status()) {
     ac0:	f7ff ffa6 	bl	a10 <lock_status>
     ac4:	4603      	mov	r3, r0
     ac6:	f083 0301 	eor.w	r3, r3, #1
     aca:	b2db      	uxtb	r3, r3
     acc:	2b00      	cmp	r3, #0
     ace:	d011      	beq.n	af4 <set_frequency_hz+0xbe>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); //turn off amber LED
     ad0:	2200      	movs	r2, #0
     ad2:	2102      	movs	r1, #2
     ad4:	4810      	ldr	r0, [pc, #64]	; (b18 <set_frequency_hz+0xe2>)
     ad6:	f001 f833 	bl	1b40 <__HAL_GPIO_WritePin_veneer>
		printf("Failed to establish MW Lock within %ld us of setting frequency!\r\n", MW_STABILISE_TIME_US);
     ada:	f241 7370 	movw	r3, #6000	; 0x1770
     ade:	4619      	mov	r1, r3
     ae0:	480e      	ldr	r0, [pc, #56]	; (b1c <set_frequency_hz+0xe6>)
     ae2:	f001 f841 	bl	1b68 <__printf_veneer>
#ifdef HALT_ON_LOSS_OF_LOCK
		Error_Handler();
     ae6:	f001 f843 	bl	1b70 <__Error_Handler_veneer>
#endif //HALT_ON_LOSS_OF_LOCK
		HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Sets MW_invalid pin low
     aea:	2200      	movs	r2, #0
     aec:	2102      	movs	r1, #2
     aee:	4808      	ldr	r0, [pc, #32]	; (b10 <set_frequency_hz+0xda>)
     af0:	f001 f826 	bl	1b40 <__HAL_GPIO_WritePin_veneer>
	}

}
     af4:	bf00      	nop
     af6:	3720      	adds	r7, #32
     af8:	46bd      	mov	sp, r7
     afa:	bd80      	pop	{r7, pc}
     afc:	f3af 8000 	nop.w
     b00:	00000000 	.word	0x00000000
     b04:	4187d784 	.word	0x4187d784
     b08:	00000000 	.word	0x00000000
     b0c:	41700000 	.word	0x41700000
     b10:	58020400 	.word	0x58020400
     b14:	2000001c 	.word	0x2000001c
     b18:	58021000 	.word	0x58021000
     b1c:	0801c1ac 	.word	0x0801c1ac

00000b20 <set_freq_regs>:
static void set_freq_regs(const uint32_t integer, const uint32_t fraction, const uint32_t vco_divider) {
     b20:	b580      	push	{r7, lr}
     b22:	b086      	sub	sp, #24
     b24:	af00      	add	r7, sp, #0
     b26:	60f8      	str	r0, [r7, #12]
     b28:	60b9      	str	r1, [r7, #8]
     b2a:	607a      	str	r2, [r7, #4]
	uint32_t read_data = 0x0;
     b2c:	2300      	movs	r3, #0
     b2e:	617b      	str	r3, [r7, #20]
	if (last_vcodiv == -1 || (last_vcodiv != vco_divider)) {
     b30:	4b24      	ldr	r3, [pc, #144]	; (bc4 <set_freq_regs+0xa4>)
     b32:	681b      	ldr	r3, [r3, #0]
     b34:	f1b3 3fff 	cmp.w	r3, #4294967295
     b38:	d004      	beq.n	b44 <set_freq_regs+0x24>
     b3a:	4b22      	ldr	r3, [pc, #136]	; (bc4 <set_freq_regs+0xa4>)
     b3c:	681b      	ldr	r3, [r3, #0]
     b3e:	687a      	ldr	r2, [r7, #4]
     b40:	429a      	cmp	r2, r3
     b42:	d014      	beq.n	b6e <set_freq_regs+0x4e>
		read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     b44:	2016      	movs	r0, #22
     b46:	f7ff fe55 	bl	7f4 <synth_readreg>
     b4a:	6178      	str	r0, [r7, #20]
		read_data &= 0xFFFFFFC0; // Zero the first 6 LSBs (VCO division value - mute).
     b4c:	697b      	ldr	r3, [r7, #20]
     b4e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
     b52:	617b      	str	r3, [r7, #20]
		read_data |= vco_divider; // This will set k which will un-mute the outputs */
     b54:	697a      	ldr	r2, [r7, #20]
     b56:	687b      	ldr	r3, [r7, #4]
     b58:	4313      	orrs	r3, r2
     b5a:	617b      	str	r3, [r7, #20]
		synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     b5c:	2301      	movs	r3, #1
     b5e:	2200      	movs	r2, #0
     b60:	2116      	movs	r1, #22
     b62:	6978      	ldr	r0, [r7, #20]
     b64:	f7ff fdcc 	bl	700 <synth_writereg>
		last_vcodiv = vco_divider;
     b68:	4a16      	ldr	r2, [pc, #88]	; (bc4 <set_freq_regs+0xa4>)
     b6a:	687b      	ldr	r3, [r7, #4]
     b6c:	6013      	str	r3, [r2, #0]
	if (last_integer == -1 || (last_integer != integer)) {
     b6e:	4b16      	ldr	r3, [pc, #88]	; (bc8 <set_freq_regs+0xa8>)
     b70:	681b      	ldr	r3, [r3, #0]
     b72:	f1b3 3fff 	cmp.w	r3, #4294967295
     b76:	d004      	beq.n	b82 <set_freq_regs+0x62>
     b78:	4b13      	ldr	r3, [pc, #76]	; (bc8 <set_freq_regs+0xa8>)
     b7a:	681b      	ldr	r3, [r3, #0]
     b7c:	68fa      	ldr	r2, [r7, #12]
     b7e:	429a      	cmp	r2, r3
     b80:	d008      	beq.n	b94 <set_freq_regs+0x74>
		synth_writereg(integer, INTEGER_FREQUENCY_REGISTER, 0x0, VERIFY);   // Integer register.
     b82:	2301      	movs	r3, #1
     b84:	2200      	movs	r2, #0
     b86:	2103      	movs	r1, #3
     b88:	68f8      	ldr	r0, [r7, #12]
     b8a:	f7ff fdb9 	bl	700 <synth_writereg>
		last_integer = integer;
     b8e:	4a0e      	ldr	r2, [pc, #56]	; (bc8 <set_freq_regs+0xa8>)
     b90:	68fb      	ldr	r3, [r7, #12]
     b92:	6013      	str	r3, [r2, #0]
	if (last_fraction == -1 || (last_fraction != fraction)) {
     b94:	4b0d      	ldr	r3, [pc, #52]	; (bcc <set_freq_regs+0xac>)
     b96:	681b      	ldr	r3, [r3, #0]
     b98:	f1b3 3fff 	cmp.w	r3, #4294967295
     b9c:	d004      	beq.n	ba8 <set_freq_regs+0x88>
     b9e:	4b0b      	ldr	r3, [pc, #44]	; (bcc <set_freq_regs+0xac>)
     ba0:	681b      	ldr	r3, [r3, #0]
     ba2:	68ba      	ldr	r2, [r7, #8]
     ba4:	429a      	cmp	r2, r3
     ba6:	d008      	beq.n	bba <set_freq_regs+0x9a>
		synth_writereg(fraction, FRACTIONAL_FREQUENCY_REGISTER, 0x0, VERIFY);  // Fractional register.
     ba8:	2301      	movs	r3, #1
     baa:	2200      	movs	r2, #0
     bac:	2104      	movs	r1, #4
     bae:	68b8      	ldr	r0, [r7, #8]
     bb0:	f7ff fda6 	bl	700 <synth_writereg>
		last_fraction = fraction;
     bb4:	4a05      	ldr	r2, [pc, #20]	; (bcc <set_freq_regs+0xac>)
     bb6:	68bb      	ldr	r3, [r7, #8]
     bb8:	6013      	str	r3, [r2, #0]
}
     bba:	bf00      	nop
     bbc:	3718      	adds	r7, #24
     bbe:	46bd      	mov	sp, r7
     bc0:	bd80      	pop	{r7, pc}
     bc2:	bf00      	nop
     bc4:	20000004 	.word	0x20000004
     bc8:	20000008 	.word	0x20000008
     bcc:	2000000c 	.word	0x2000000c

00000bd0 <calc_defined_step_MW_sweep>:
  * @param  POP cycles per point
  * @param  Number of points
  * @param	POP_period in us
  * @retval Success/failure or early termination
  */
bool calc_defined_step_MW_sweep(const double centre_freq, const double span, const uint32_t pop_cycles_per_point, const uint32_t num_points_req) {
     bd0:	b580      	push	{r7, lr}
     bd2:	b094      	sub	sp, #80	; 0x50
     bd4:	af02      	add	r7, sp, #8
     bd6:	ed87 0b04 	vstr	d0, [r7, #16]
     bda:	ed87 1b02 	vstr	d1, [r7, #8]
     bde:	6078      	str	r0, [r7, #4]
     be0:	6039      	str	r1, [r7, #0]
	printf("MW sweep will have %.10g GHz centre frequency with %.5g Hz span\r\n", centre_freq/1000000000, span);
     be2:	ed97 7b04 	vldr	d7, [r7, #16]
     be6:	ed9f 6b8e 	vldr	d6, [pc, #568]	; e20 <calc_defined_step_MW_sweep+0x250>
     bea:	ee87 5b06 	vdiv.f64	d5, d7, d6
     bee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     bf2:	e9cd 2300 	strd	r2, r3, [sp]
     bf6:	ec53 2b15 	vmov	r2, r3, d5
     bfa:	4893      	ldr	r0, [pc, #588]	; (e48 <calc_defined_step_MW_sweep+0x278>)
     bfc:	f000 ffb4 	bl	1b68 <__printf_veneer>
	printf("and %ld POP cycles per point\r\n", pop_cycles_per_point);
     c00:	6879      	ldr	r1, [r7, #4]
     c02:	4892      	ldr	r0, [pc, #584]	; (e4c <calc_defined_step_MW_sweep+0x27c>)
     c04:	f000 ffb0 	bl	1b68 <__printf_veneer>
	mw_sweep_settings.sweep_type = FIXED_STEPS;
     c08:	4b91      	ldr	r3, [pc, #580]	; (e50 <calc_defined_step_MW_sweep+0x280>)
     c0a:	2200      	movs	r2, #0
     c0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	mw_sweep_settings.pop_cycles_per_point = pop_cycles_per_point;
     c10:	4a8f      	ldr	r2, [pc, #572]	; (e50 <calc_defined_step_MW_sweep+0x280>)
     c12:	687b      	ldr	r3, [r7, #4]
     c14:	6193      	str	r3, [r2, #24]
	mw_sweep_settings.centre_freq = centre_freq;
     c16:	498e      	ldr	r1, [pc, #568]	; (e50 <calc_defined_step_MW_sweep+0x280>)
     c18:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     c1c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	mw_sweep_settings.span = span;
     c20:	498b      	ldr	r1, [pc, #556]	; (e50 <calc_defined_step_MW_sweep+0x280>)
     c22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     c26:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	/* Calculate start frequency */
	double start_freq = centre_freq - 0.5* span;
     c2a:	ed97 7b02 	vldr	d7, [r7, #8]
     c2e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     c32:	ee27 7b06 	vmul.f64	d7, d7, d6
     c36:	ed97 6b04 	vldr	d6, [r7, #16]
     c3a:	ee36 7b47 	vsub.f64	d7, d6, d7
     c3e:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	mw_sweep_settings.k = calculate_k(start_freq);
     c42:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
     c46:	f000 fb6d 	bl	1324 <calculate_k>
     c4a:	4603      	mov	r3, r0
     c4c:	b2da      	uxtb	r2, r3
     c4e:	4b80      	ldr	r3, [pc, #512]	; (e50 <calc_defined_step_MW_sweep+0x280>)
     c50:	709a      	strb	r2, [r3, #2]

	/* Extrapolate step size requested versus achievable  */
	const double step_size_Hz = span / (num_points_req - 1);
     c52:	683b      	ldr	r3, [r7, #0]
     c54:	3b01      	subs	r3, #1
     c56:	ee07 3a90 	vmov	s15, r3
     c5a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     c5e:	ed97 5b02 	vldr	d5, [r7, #8]
     c62:	ee85 7b06 	vdiv.f64	d7, d5, d6
     c66:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	printf("Requested %ld steps, therefore step size of %.3g Hz\r\n", num_points_req, step_size_Hz);
     c6a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
     c6e:	6839      	ldr	r1, [r7, #0]
     c70:	4878      	ldr	r0, [pc, #480]	; (e54 <calc_defined_step_MW_sweep+0x284>)
     c72:	f000 ff79 	bl	1b68 <__printf_veneer>
	const double unit_step_size_Hz = REF_FREQ / (double) (mw_sweep_settings.k * (1 << 24)); //minimum step size possible
     c76:	ed9f 5b6c 	vldr	d5, [pc, #432]	; e28 <calc_defined_step_MW_sweep+0x258>
     c7a:	4b75      	ldr	r3, [pc, #468]	; (e50 <calc_defined_step_MW_sweep+0x280>)
     c7c:	789b      	ldrb	r3, [r3, #2]
     c7e:	061b      	lsls	r3, r3, #24
     c80:	ee07 3a90 	vmov	s15, r3
     c84:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     c88:	ee85 7b06 	vdiv.f64	d7, d5, d6
     c8c:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	//printf("Unit step size: %.3g Hz\r\n", unit_step_size_Hz);
	mw_sweep_settings.step_size = (step_size_Hz / unit_step_size_Hz + 0.5);
     c90:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
     c94:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     c98:	ee85 7b06 	vdiv.f64	d7, d5, d6
     c9c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     ca0:	ee37 7b06 	vadd.f64	d7, d7, d6
     ca4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     ca8:	ee17 2a90 	vmov	r2, s15
     cac:	4b68      	ldr	r3, [pc, #416]	; (e50 <calc_defined_step_MW_sweep+0x280>)
     cae:	615a      	str	r2, [r3, #20]
	if (!mw_sweep_settings.step_size) { //step_size must be a positive non-zero integer
     cb0:	4b67      	ldr	r3, [pc, #412]	; (e50 <calc_defined_step_MW_sweep+0x280>)
     cb2:	695b      	ldr	r3, [r3, #20]
     cb4:	2b00      	cmp	r3, #0
     cb6:	d104      	bne.n	cc2 <calc_defined_step_MW_sweep+0xf2>
		mw_sweep_settings.step_size++;
     cb8:	4b65      	ldr	r3, [pc, #404]	; (e50 <calc_defined_step_MW_sweep+0x280>)
     cba:	695b      	ldr	r3, [r3, #20]
     cbc:	3301      	adds	r3, #1
     cbe:	4a64      	ldr	r2, [pc, #400]	; (e50 <calc_defined_step_MW_sweep+0x280>)
     cc0:	6153      	str	r3, [r2, #20]
	}
	const double achieved_step_size = (double) (mw_sweep_settings.step_size * unit_step_size_Hz);
     cc2:	4b63      	ldr	r3, [pc, #396]	; (e50 <calc_defined_step_MW_sweep+0x280>)
     cc4:	695b      	ldr	r3, [r3, #20]
     cc6:	ee07 3a90 	vmov	s15, r3
     cca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     cce:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     cd2:	ee26 7b07 	vmul.f64	d7, d6, d7
     cd6:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	printf("Step size achieved: %.3g Hz\r\n", achieved_step_size);
     cda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
     cde:	485e      	ldr	r0, [pc, #376]	; (e58 <calc_defined_step_MW_sweep+0x288>)
     ce0:	f000 ff42 	bl	1b68 <__printf_veneer>
	mw_sweep_settings.num_steps = span / achieved_step_size;
     ce4:	ed97 5b02 	vldr	d5, [r7, #8]
     ce8:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
     cec:	ee85 7b06 	vdiv.f64	d7, d5, d6
     cf0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     cf4:	ee17 2a90 	vmov	r2, s15
     cf8:	4b55      	ldr	r3, [pc, #340]	; (e50 <calc_defined_step_MW_sweep+0x280>)
     cfa:	611a      	str	r2, [r3, #16]

	/* Can avoid spurs if frequency requested can be encoded exactly  */
	start_freq = ((long)(start_freq/unit_step_size_Hz)) * unit_step_size_Hz;
     cfc:	ed97 5b10 	vldr	d5, [r7, #64]	; 0x40
     d00:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     d04:	ee85 7b06 	vdiv.f64	d7, d5, d6
     d08:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     d0c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
     d10:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     d14:	ee26 7b07 	vmul.f64	d7, d6, d7
     d18:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

	/* Calculate the N division ratio, extracting the fractional and integer parts */
	const double N = ((start_freq * mw_sweep_settings.k) / REF_FREQ);
     d1c:	4b4c      	ldr	r3, [pc, #304]	; (e50 <calc_defined_step_MW_sweep+0x280>)
     d1e:	789b      	ldrb	r3, [r3, #2]
     d20:	ee07 3a90 	vmov	s15, r3
     d24:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     d28:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
     d2c:	ee26 6b07 	vmul.f64	d6, d6, d7
     d30:	ed9f 5b3d 	vldr	d5, [pc, #244]	; e28 <calc_defined_step_MW_sweep+0x258>
     d34:	ee86 7b05 	vdiv.f64	d7, d6, d5
     d38:	ed87 7b08 	vstr	d7, [r7, #32]
	mw_sweep_settings.NINT = N;
     d3c:	ed97 7b08 	vldr	d7, [r7, #32]
     d40:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     d44:	ee17 2a90 	vmov	r2, s15
     d48:	4b41      	ldr	r3, [pc, #260]	; (e50 <calc_defined_step_MW_sweep+0x280>)
     d4a:	605a      	str	r2, [r3, #4]
	mw_sweep_settings.NFRAC_start_of_ramp = ((N - mw_sweep_settings.NINT) * (1 << 24)) + 0.5;
     d4c:	4b40      	ldr	r3, [pc, #256]	; (e50 <calc_defined_step_MW_sweep+0x280>)
     d4e:	685b      	ldr	r3, [r3, #4]
     d50:	ee07 3a90 	vmov	s15, r3
     d54:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     d58:	ed97 6b08 	vldr	d6, [r7, #32]
     d5c:	ee36 7b47 	vsub.f64	d7, d6, d7
     d60:	ed9f 6b33 	vldr	d6, [pc, #204]	; e30 <calc_defined_step_MW_sweep+0x260>
     d64:	ee27 7b06 	vmul.f64	d7, d7, d6
     d68:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     d6c:	ee37 7b06 	vadd.f64	d7, d7, d6
     d70:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     d74:	ee17 2a90 	vmov	r2, s15
     d78:	4b35      	ldr	r3, [pc, #212]	; (e50 <calc_defined_step_MW_sweep+0x280>)
     d7a:	60da      	str	r2, [r3, #12]

	/* Calculate dwell time at each MW frequency */
	mw_sweep_settings.stabilise_time = MW_STABILISE_TIME_US; //Global MW stabilisation time
     d7c:	f241 7270 	movw	r2, #6000	; 0x1770
     d80:	4b33      	ldr	r3, [pc, #204]	; (e50 <calc_defined_step_MW_sweep+0x280>)
     d82:	61da      	str	r2, [r3, #28]
	mw_sweep_settings.dwell_time = pop_cycles_per_point * POP_period_us + TIMING_MARGIN_US;
     d84:	4b35      	ldr	r3, [pc, #212]	; (e5c <calc_defined_step_MW_sweep+0x28c>)
     d86:	681b      	ldr	r3, [r3, #0]
     d88:	687a      	ldr	r2, [r7, #4]
     d8a:	fb02 f303 	mul.w	r3, r2, r3
     d8e:	2264      	movs	r2, #100	; 0x64
     d90:	4413      	add	r3, r2
     d92:	4a2f      	ldr	r2, [pc, #188]	; (e50 <calc_defined_step_MW_sweep+0x280>)
     d94:	6213      	str	r3, [r2, #32]

	/* Calculate the period of a sweep */
	const double calc_sweep_time = (double)(MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time) * (double)(mw_sweep_settings.num_steps+1)/1000000;
     d96:	f241 7270 	movw	r2, #6000	; 0x1770
     d9a:	2301      	movs	r3, #1
     d9c:	441a      	add	r2, r3
     d9e:	4b2c      	ldr	r3, [pc, #176]	; (e50 <calc_defined_step_MW_sweep+0x280>)
     da0:	6a1b      	ldr	r3, [r3, #32]
     da2:	4413      	add	r3, r2
     da4:	ee07 3a90 	vmov	s15, r3
     da8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     dac:	4b28      	ldr	r3, [pc, #160]	; (e50 <calc_defined_step_MW_sweep+0x280>)
     dae:	691b      	ldr	r3, [r3, #16]
     db0:	3301      	adds	r3, #1
     db2:	ee07 3a90 	vmov	s15, r3
     db6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     dba:	ee26 6b07 	vmul.f64	d6, d6, d7
     dbe:	ed9f 5b1e 	vldr	d5, [pc, #120]	; e38 <calc_defined_step_MW_sweep+0x268>
     dc2:	ee86 7b05 	vdiv.f64	d7, d6, d5
     dc6:	ed87 7b06 	vstr	d7, [r7, #24]
	printf("Sweep period: %.3g s\r\n", calc_sweep_time);
     dca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     dce:	4824      	ldr	r0, [pc, #144]	; (e60 <calc_defined_step_MW_sweep+0x290>)
     dd0:	f000 feca 	bl	1b68 <__printf_veneer>
	printf("%ld points, %.3g ms each\r\n", mw_sweep_settings.num_steps, 1000 * calc_sweep_time / (mw_sweep_settings.num_steps + 1));
     dd4:	4b1e      	ldr	r3, [pc, #120]	; (e50 <calc_defined_step_MW_sweep+0x280>)
     dd6:	6919      	ldr	r1, [r3, #16]
     dd8:	ed97 7b06 	vldr	d7, [r7, #24]
     ddc:	ed9f 6b18 	vldr	d6, [pc, #96]	; e40 <calc_defined_step_MW_sweep+0x270>
     de0:	ee27 6b06 	vmul.f64	d6, d7, d6
     de4:	4b1a      	ldr	r3, [pc, #104]	; (e50 <calc_defined_step_MW_sweep+0x280>)
     de6:	691b      	ldr	r3, [r3, #16]
     de8:	3301      	adds	r3, #1
     dea:	ee07 3a90 	vmov	s15, r3
     dee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     df2:	ee86 5b07 	vdiv.f64	d5, d6, d7
     df6:	ec53 2b15 	vmov	r2, r3, d5
     dfa:	481a      	ldr	r0, [pc, #104]	; (e64 <calc_defined_step_MW_sweep+0x294>)
     dfc:	f000 feb4 	bl	1b68 <__printf_veneer>

	mw_sweep_settings.current_point = 0;
     e00:	4b13      	ldr	r3, [pc, #76]	; (e50 <calc_defined_step_MW_sweep+0x280>)
     e02:	2200      	movs	r2, #0
     e04:	629a      	str	r2, [r3, #40]	; 0x28
	mw_sweep_settings.sweep_period = calc_sweep_time;
     e06:	4912      	ldr	r1, [pc, #72]	; (e50 <calc_defined_step_MW_sweep+0x280>)
     e08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     e0c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	//print_mw_sweep_settings();
	return(true);
     e10:	2301      	movs	r3, #1
}
     e12:	4618      	mov	r0, r3
     e14:	3748      	adds	r7, #72	; 0x48
     e16:	46bd      	mov	sp, r7
     e18:	bd80      	pop	{r7, pc}
     e1a:	bf00      	nop
     e1c:	f3af 8000 	nop.w
     e20:	00000000 	.word	0x00000000
     e24:	41cdcd65 	.word	0x41cdcd65
     e28:	00000000 	.word	0x00000000
     e2c:	4187d784 	.word	0x4187d784
     e30:	00000000 	.word	0x00000000
     e34:	41700000 	.word	0x41700000
     e38:	00000000 	.word	0x00000000
     e3c:	412e8480 	.word	0x412e8480
     e40:	00000000 	.word	0x00000000
     e44:	408f4000 	.word	0x408f4000
     e48:	0801c1f0 	.word	0x0801c1f0
     e4c:	0801c234 	.word	0x0801c234
     e50:	20000648 	.word	0x20000648
     e54:	0801c254 	.word	0x0801c254
     e58:	0801c28c 	.word	0x0801c28c
     e5c:	200005f8 	.word	0x200005f8
     e60:	0801c2ac 	.word	0x0801c2ac
     e64:	0801c2c4 	.word	0x0801c2c4

00000e68 <calc_fixed_time_MW_sweep>:
  * @param  Span in Hz
  * @param  Sweep period in s
  * @param  Additional time for scope sync
  * @retval Success/failure or early termination
  */
bool calc_fixed_time_MW_sweep(const double centre_freq, const double span, const double requested_sweep_period, const bool scope_sync_time) {
     e68:	b580      	push	{r7, lr}
     e6a:	b09e      	sub	sp, #120	; 0x78
     e6c:	af04      	add	r7, sp, #16
     e6e:	ed87 0b06 	vstr	d0, [r7, #24]
     e72:	ed87 1b04 	vstr	d1, [r7, #16]
     e76:	ed87 2b02 	vstr	d2, [r7, #8]
     e7a:	4603      	mov	r3, r0
     e7c:	71fb      	strb	r3, [r7, #7]
	//Dwell time must be a minimum of one POP cycle
	//Overall dwell time should be at least 50% of sweep time
	//Number of points shall be maximised within the available time

	printf("MW sweep will have %.10g GHz centre frequency with %.5g Hz span, over %.3g s\r\n", centre_freq/1000000000, span, requested_sweep_period);
     e7e:	ed97 7b06 	vldr	d7, [r7, #24]
     e82:	ed9f 6b97 	vldr	d6, [pc, #604]	; 10e0 <calc_fixed_time_MW_sweep+0x278>
     e86:	ee87 5b06 	vdiv.f64	d5, d7, d6
     e8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     e8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
     e92:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     e96:	e9cd 2300 	strd	r2, r3, [sp]
     e9a:	ec53 2b15 	vmov	r2, r3, d5
     e9e:	4898      	ldr	r0, [pc, #608]	; (1100 <calc_fixed_time_MW_sweep+0x298>)
     ea0:	f000 fe62 	bl	1b68 <__printf_veneer>
	mw_sweep_settings.sweep_type = FIXED_TIME;
     ea4:	4b97      	ldr	r3, [pc, #604]	; (1104 <calc_fixed_time_MW_sweep+0x29c>)
     ea6:	2201      	movs	r2, #1
     ea8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	mw_sweep_settings.centre_freq = centre_freq;
     eac:	4995      	ldr	r1, [pc, #596]	; (1104 <calc_fixed_time_MW_sweep+0x29c>)
     eae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     eb2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	mw_sweep_settings.span = span;
     eb6:	4993      	ldr	r1, [pc, #588]	; (1104 <calc_fixed_time_MW_sweep+0x29c>)
     eb8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     ebc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	mw_sweep_settings.dwell_time = POP_period_us + TIMING_MARGIN_US; //minimum possible value of dwell_time in us
     ec0:	4b91      	ldr	r3, [pc, #580]	; (1108 <calc_fixed_time_MW_sweep+0x2a0>)
     ec2:	681b      	ldr	r3, [r3, #0]
     ec4:	2264      	movs	r2, #100	; 0x64
     ec6:	4413      	add	r3, r2
     ec8:	4a8e      	ldr	r2, [pc, #568]	; (1104 <calc_fixed_time_MW_sweep+0x29c>)
     eca:	6213      	str	r3, [r2, #32]
	uint32_t point_time = MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time; //minimum possible value in us
     ecc:	f241 7270 	movw	r2, #6000	; 0x1770
     ed0:	2301      	movs	r3, #1
     ed2:	441a      	add	r2, r3
     ed4:	4b8b      	ldr	r3, [pc, #556]	; (1104 <calc_fixed_time_MW_sweep+0x29c>)
     ed6:	6a1b      	ldr	r3, [r3, #32]
     ed8:	4413      	add	r3, r2
     eda:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint32_t points_in_sweep = requested_sweep_period * (double)(1000000 / point_time); //maximum possible number of steps in sweep, rounded down to an integer
     edc:	4a8b      	ldr	r2, [pc, #556]	; (110c <calc_fixed_time_MW_sweep+0x2a4>)
     ede:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
     ee0:	fbb2 f3f3 	udiv	r3, r2, r3
     ee4:	ee07 3a90 	vmov	s15, r3
     ee8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     eec:	ed97 7b02 	vldr	d7, [r7, #8]
     ef0:	ee26 7b07 	vmul.f64	d7, d6, d7
     ef4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     ef8:	ee17 3a90 	vmov	r3, s15
     efc:	65bb      	str	r3, [r7, #88]	; 0x58
	//printf("%lu points in sweep, maximum\r\n", points_in_sweep);

	/* now figure out the unit_step_size and how many steps will be taken in the span */

	/* Calculate start frequency */
	double start_freq = centre_freq - 0.5* span;
     efe:	ed97 7b04 	vldr	d7, [r7, #16]
     f02:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     f06:	ee27 7b06 	vmul.f64	d7, d7, d6
     f0a:	ed97 6b06 	vldr	d6, [r7, #24]
     f0e:	ee36 7b47 	vsub.f64	d7, d6, d7
     f12:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	mw_sweep_settings.k = calculate_k(start_freq);
     f16:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
     f1a:	f000 fa03 	bl	1324 <calculate_k>
     f1e:	4603      	mov	r3, r0
     f20:	b2da      	uxtb	r2, r3
     f22:	4b78      	ldr	r3, [pc, #480]	; (1104 <calc_fixed_time_MW_sweep+0x29c>)
     f24:	709a      	strb	r2, [r3, #2]

	//steps should be evenly sized
	//selected step size should be an integer multiple of the unit step size
	//increase the step_size value until the sweep fits into the available period
	const double unit_step_size_Hz = REF_FREQ / (double) (mw_sweep_settings.k * (1 << 24)); //minimum step size possible
     f26:	ed9f 5b70 	vldr	d5, [pc, #448]	; 10e8 <calc_fixed_time_MW_sweep+0x280>
     f2a:	4b76      	ldr	r3, [pc, #472]	; (1104 <calc_fixed_time_MW_sweep+0x29c>)
     f2c:	789b      	ldrb	r3, [r3, #2]
     f2e:	061b      	lsls	r3, r3, #24
     f30:	ee07 3a90 	vmov	s15, r3
     f34:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     f38:	ee85 7b06 	vdiv.f64	d7, d5, d6
     f3c:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	//printf("Unit step size: %.3g Hz\r\n", unit_step_size_Hz);
	mw_sweep_settings.step_size = 1;
     f40:	4b70      	ldr	r3, [pc, #448]	; (1104 <calc_fixed_time_MW_sweep+0x29c>)
     f42:	2201      	movs	r2, #1
     f44:	615a      	str	r2, [r3, #20]
	while ((mw_sweep_settings.step_size * points_in_sweep) < (span / unit_step_size_Hz)) {
     f46:	e004      	b.n	f52 <calc_fixed_time_MW_sweep+0xea>
		mw_sweep_settings.step_size++;
     f48:	4b6e      	ldr	r3, [pc, #440]	; (1104 <calc_fixed_time_MW_sweep+0x29c>)
     f4a:	695b      	ldr	r3, [r3, #20]
     f4c:	3301      	adds	r3, #1
     f4e:	4a6d      	ldr	r2, [pc, #436]	; (1104 <calc_fixed_time_MW_sweep+0x29c>)
     f50:	6153      	str	r3, [r2, #20]
	while ((mw_sweep_settings.step_size * points_in_sweep) < (span / unit_step_size_Hz)) {
     f52:	4b6c      	ldr	r3, [pc, #432]	; (1104 <calc_fixed_time_MW_sweep+0x29c>)
     f54:	695b      	ldr	r3, [r3, #20]
     f56:	6dba      	ldr	r2, [r7, #88]	; 0x58
     f58:	fb02 f303 	mul.w	r3, r2, r3
     f5c:	ee07 3a90 	vmov	s15, r3
     f60:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     f64:	ed97 4b04 	vldr	d4, [r7, #16]
     f68:	ed97 5b12 	vldr	d5, [r7, #72]	; 0x48
     f6c:	ee84 7b05 	vdiv.f64	d7, d4, d5
     f70:	eeb4 6bc7 	vcmpe.f64	d6, d7
     f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     f78:	d4e6      	bmi.n	f48 <calc_fixed_time_MW_sweep+0xe0>
	}
	const double achieved_step_size = (double) (mw_sweep_settings.step_size * unit_step_size_Hz);
     f7a:	4b62      	ldr	r3, [pc, #392]	; (1104 <calc_fixed_time_MW_sweep+0x29c>)
     f7c:	695b      	ldr	r3, [r3, #20]
     f7e:	ee07 3a90 	vmov	s15, r3
     f82:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     f86:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
     f8a:	ee26 7b07 	vmul.f64	d7, d6, d7
     f8e:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	printf("Step size: %lu x unit step i.e. %.3g Hz\r\n", mw_sweep_settings.step_size, achieved_step_size);
     f92:	4b5c      	ldr	r3, [pc, #368]	; (1104 <calc_fixed_time_MW_sweep+0x29c>)
     f94:	6959      	ldr	r1, [r3, #20]
     f96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
     f9a:	485d      	ldr	r0, [pc, #372]	; (1110 <calc_fixed_time_MW_sweep+0x2a8>)
     f9c:	f000 fde4 	bl	1b68 <__printf_veneer>

	//calculate number of steps in sweep and round down to an integer (must fit in time available)
	mw_sweep_settings.num_steps = (span / achieved_step_size);
     fa0:	ed97 5b04 	vldr	d5, [r7, #16]
     fa4:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
     fa8:	ee85 7b06 	vdiv.f64	d7, d5, d6
     fac:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     fb0:	ee17 2a90 	vmov	r2, s15
     fb4:	4b53      	ldr	r3, [pc, #332]	; (1104 <calc_fixed_time_MW_sweep+0x29c>)
     fb6:	611a      	str	r2, [r3, #16]

	const uint32_t point_time_us = 1000000 * requested_sweep_period / (mw_sweep_settings.num_steps + 1); //period of each point in us
     fb8:	ed97 7b02 	vldr	d7, [r7, #8]
     fbc:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 10f0 <calc_fixed_time_MW_sweep+0x288>
     fc0:	ee27 5b06 	vmul.f64	d5, d7, d6
     fc4:	4b4f      	ldr	r3, [pc, #316]	; (1104 <calc_fixed_time_MW_sweep+0x29c>)
     fc6:	691b      	ldr	r3, [r3, #16]
     fc8:	3301      	adds	r3, #1
     fca:	ee07 3a90 	vmov	s15, r3
     fce:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     fd2:	ee85 7b06 	vdiv.f64	d7, d5, d6
     fd6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     fda:	ee17 3a90 	vmov	r3, s15
     fde:	63fb      	str	r3, [r7, #60]	; 0x3c
//	printf("DEBUG point_time_us: %lu \r\n", point_time_us);
//	printf("DEBUG sweep time in us: %lu \r\n", point_time_us * (mw_sweep_settings.num_steps + 1));
	mw_sweep_settings.pop_cycles_per_point = (point_time_us - MW_STABILISE_TIME_US - TIMING_MARGIN_US - MW_PROCESSING_TIME_US)/POP_period_us;
     fe0:	f241 7270 	movw	r2, #6000	; 0x1770
     fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     fe6:	1a9b      	subs	r3, r3, r2
     fe8:	2264      	movs	r2, #100	; 0x64
     fea:	1a9b      	subs	r3, r3, r2
     fec:	2201      	movs	r2, #1
     fee:	1a9a      	subs	r2, r3, r2
     ff0:	4b45      	ldr	r3, [pc, #276]	; (1108 <calc_fixed_time_MW_sweep+0x2a0>)
     ff2:	681b      	ldr	r3, [r3, #0]
     ff4:	fbb2 f3f3 	udiv	r3, r2, r3
     ff8:	4a42      	ldr	r2, [pc, #264]	; (1104 <calc_fixed_time_MW_sweep+0x29c>)
     ffa:	6193      	str	r3, [r2, #24]
	printf("%lu points in sweep, %lu ms and %lu POP cycles each\r\n", mw_sweep_settings.num_steps + 1, point_time_us / 1000, mw_sweep_settings.pop_cycles_per_point);
     ffc:	4b41      	ldr	r3, [pc, #260]	; (1104 <calc_fixed_time_MW_sweep+0x29c>)
     ffe:	691b      	ldr	r3, [r3, #16]
    1000:	1c59      	adds	r1, r3, #1
    1002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1004:	4a43      	ldr	r2, [pc, #268]	; (1114 <calc_fixed_time_MW_sweep+0x2ac>)
    1006:	fba2 2303 	umull	r2, r3, r2, r3
    100a:	099a      	lsrs	r2, r3, #6
    100c:	4b3d      	ldr	r3, [pc, #244]	; (1104 <calc_fixed_time_MW_sweep+0x29c>)
    100e:	699b      	ldr	r3, [r3, #24]
    1010:	4841      	ldr	r0, [pc, #260]	; (1118 <calc_fixed_time_MW_sweep+0x2b0>)
    1012:	f000 fda9 	bl	1b68 <__printf_veneer>
	uint32_t min_dwell_required_us = mw_sweep_settings.pop_cycles_per_point * POP_period_us + TIMING_MARGIN_US; //minimum dwell_time to achieve above
    1016:	4b3b      	ldr	r3, [pc, #236]	; (1104 <calc_fixed_time_MW_sweep+0x29c>)
    1018:	699b      	ldr	r3, [r3, #24]
    101a:	4a3b      	ldr	r2, [pc, #236]	; (1108 <calc_fixed_time_MW_sweep+0x2a0>)
    101c:	6812      	ldr	r2, [r2, #0]
    101e:	fb02 f303 	mul.w	r3, r2, r3
    1022:	2264      	movs	r2, #100	; 0x64
    1024:	4413      	add	r3, r2
    1026:	63bb      	str	r3, [r7, #56]	; 0x38
	mw_sweep_settings.dwell_time = point_time_us - MW_STABILISE_TIME_US - MW_PROCESSING_TIME_US; //actual programmed dwell time
    1028:	f241 7270 	movw	r2, #6000	; 0x1770
    102c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    102e:	1a9b      	subs	r3, r3, r2
    1030:	2201      	movs	r2, #1
    1032:	1a9b      	subs	r3, r3, r2
    1034:	4a33      	ldr	r2, [pc, #204]	; (1104 <calc_fixed_time_MW_sweep+0x29c>)
    1036:	6213      	str	r3, [r2, #32]
	if (mw_sweep_settings.dwell_time < min_dwell_required_us) {
    1038:	4b32      	ldr	r3, [pc, #200]	; (1104 <calc_fixed_time_MW_sweep+0x29c>)
    103a:	6a1b      	ldr	r3, [r3, #32]
    103c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    103e:	429a      	cmp	r2, r3
    1040:	d902      	bls.n	1048 <calc_fixed_time_MW_sweep+0x1e0>
		mw_sweep_settings.dwell_time = min_dwell_required_us;
    1042:	4a30      	ldr	r2, [pc, #192]	; (1104 <calc_fixed_time_MW_sweep+0x29c>)
    1044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1046:	6213      	str	r3, [r2, #32]
	}
//	printf("DEBUG dwell_time: %lu \r\n", mw_sweep_settings.dwell_time);
//	printf("DEBUG sweep time in us: %lu \r\n", (mw_sweep_settings.dwell_time + MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US) * (mw_sweep_settings.num_steps + 1));

	/* Double check - calculate the period of a sweep */
	double point_period = (double)(MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time)/1000000;
    1048:	f241 7270 	movw	r2, #6000	; 0x1770
    104c:	2301      	movs	r3, #1
    104e:	441a      	add	r2, r3
    1050:	4b2c      	ldr	r3, [pc, #176]	; (1104 <calc_fixed_time_MW_sweep+0x29c>)
    1052:	6a1b      	ldr	r3, [r3, #32]
    1054:	4413      	add	r3, r2
    1056:	ee07 3a90 	vmov	s15, r3
    105a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    105e:	ed9f 5b24 	vldr	d5, [pc, #144]	; 10f0 <calc_fixed_time_MW_sweep+0x288>
    1062:	ee86 7b05 	vdiv.f64	d7, d6, d5
    1066:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
//	printf("Point period %f\r\n", point_period);
	double calc_sweep_time = point_period * (mw_sweep_settings.num_steps + 1);
    106a:	4b26      	ldr	r3, [pc, #152]	; (1104 <calc_fixed_time_MW_sweep+0x29c>)
    106c:	691b      	ldr	r3, [r3, #16]
    106e:	3301      	adds	r3, #1
    1070:	ee07 3a90 	vmov	s15, r3
    1074:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    1078:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
    107c:	ee26 7b07 	vmul.f64	d7, d6, d7
    1080:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
//	printf("calc_sweep_time %f\r\n", calc_sweep_time);
	double min_sweep_time = (double)((min_dwell_required_us + MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US) * (mw_sweep_settings.num_steps + 1)) / 1000000;
    1084:	f241 7270 	movw	r2, #6000	; 0x1770
    1088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    108a:	4413      	add	r3, r2
    108c:	2201      	movs	r2, #1
    108e:	4413      	add	r3, r2
    1090:	4a1c      	ldr	r2, [pc, #112]	; (1104 <calc_fixed_time_MW_sweep+0x29c>)
    1092:	6912      	ldr	r2, [r2, #16]
    1094:	3201      	adds	r2, #1
    1096:	fb02 f303 	mul.w	r3, r2, r3
    109a:	ee07 3a90 	vmov	s15, r3
    109e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    10a2:	ed9f 5b13 	vldr	d5, [pc, #76]	; 10f0 <calc_fixed_time_MW_sweep+0x288>
    10a6:	ee86 7b05 	vdiv.f64	d7, d6, d5
    10aa:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	if (calc_sweep_time/min_sweep_time > 1.02) {
    10ae:	ed97 5b18 	vldr	d5, [r7, #96]	; 0x60
    10b2:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
    10b6:	ee85 7b06 	vdiv.f64	d7, d5, d6
    10ba:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 10f8 <calc_fixed_time_MW_sweep+0x290>
    10be:	eeb4 7bc6 	vcmpe.f64	d7, d6
    10c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    10c6:	dd2b      	ble.n	1120 <calc_fixed_time_MW_sweep+0x2b8>
		printf("Sweep period %.4g s but could be reduced to %.4g s\r\n", calc_sweep_time, min_sweep_time);
    10c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
    10cc:	e9cd 2300 	strd	r2, r3, [sp]
    10d0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    10d4:	4811      	ldr	r0, [pc, #68]	; (111c <calc_fixed_time_MW_sweep+0x2b4>)
    10d6:	f000 fd47 	bl	1b68 <__printf_veneer>
    10da:	e029      	b.n	1130 <calc_fixed_time_MW_sweep+0x2c8>
    10dc:	f3af 8000 	nop.w
    10e0:	00000000 	.word	0x00000000
    10e4:	41cdcd65 	.word	0x41cdcd65
    10e8:	00000000 	.word	0x00000000
    10ec:	4187d784 	.word	0x4187d784
    10f0:	00000000 	.word	0x00000000
    10f4:	412e8480 	.word	0x412e8480
    10f8:	851eb852 	.word	0x851eb852
    10fc:	3ff051eb 	.word	0x3ff051eb
    1100:	0801c2e0 	.word	0x0801c2e0
    1104:	20000648 	.word	0x20000648
    1108:	200005f8 	.word	0x200005f8
    110c:	000f4240 	.word	0x000f4240
    1110:	0801c330 	.word	0x0801c330
    1114:	10624dd3 	.word	0x10624dd3
    1118:	0801c35c 	.word	0x0801c35c
    111c:	0801c394 	.word	0x0801c394
	} else {
		printf("Sweep period %.4g s is pretty much optimal for %lu POP samples per point\r\n", calc_sweep_time, mw_sweep_settings.pop_cycles_per_point);
    1120:	4b57      	ldr	r3, [pc, #348]	; (1280 <calc_fixed_time_MW_sweep+0x418>)
    1122:	699b      	ldr	r3, [r3, #24]
    1124:	9300      	str	r3, [sp, #0]
    1126:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    112a:	4856      	ldr	r0, [pc, #344]	; (1284 <calc_fixed_time_MW_sweep+0x41c>)
    112c:	f000 fd1c 	bl	1b68 <__printf_veneer>

	//Period of MW sweep isn't precise as it's based on measured average processing time
	//Steps are increased by up to 10% to increase the sweep period to guarantee horizontal scope sync
	//These are added to the end of the sweep so that the centre frequency is still central
	//Sweep period will be increased by a maximum of 1s
	if (scope_sync_time) {
    1130:	79fb      	ldrb	r3, [r7, #7]
    1132:	2b00      	cmp	r3, #0
    1134:	d044      	beq.n	11c0 <calc_fixed_time_MW_sweep+0x358>

		mw_sweep_settings.num_steps = mw_sweep_settings.num_steps * 1.1 + 0.5;
    1136:	4b52      	ldr	r3, [pc, #328]	; (1280 <calc_fixed_time_MW_sweep+0x418>)
    1138:	691b      	ldr	r3, [r3, #16]
    113a:	ee07 3a90 	vmov	s15, r3
    113e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    1142:	ed9f 6b49 	vldr	d6, [pc, #292]	; 1268 <calc_fixed_time_MW_sweep+0x400>
    1146:	ee27 7b06 	vmul.f64	d7, d7, d6
    114a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    114e:	ee37 7b06 	vadd.f64	d7, d7, d6
    1152:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1156:	ee17 2a90 	vmov	r2, s15
    115a:	4b49      	ldr	r3, [pc, #292]	; (1280 <calc_fixed_time_MW_sweep+0x418>)
    115c:	611a      	str	r2, [r3, #16]
//		printf("DEBUG #steps: %lu \r\n", mw_sweep_settings.num_steps);
		calc_sweep_time = point_period * (mw_sweep_settings.num_steps + 1);
    115e:	4b48      	ldr	r3, [pc, #288]	; (1280 <calc_fixed_time_MW_sweep+0x418>)
    1160:	691b      	ldr	r3, [r3, #16]
    1162:	3301      	adds	r3, #1
    1164:	ee07 3a90 	vmov	s15, r3
    1168:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    116c:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
    1170:	ee26 7b07 	vmul.f64	d7, d6, d7
    1174:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60

		/* Decrease number of steps if additional 10% is >1s */
//		printf("DEBUG calc_sweep_time - requested_sweep_period: %f \r\n", calc_sweep_time - requested_sweep_period);
		if ((calc_sweep_time - requested_sweep_period) > 1){
    1178:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
    117c:	ed97 7b02 	vldr	d7, [r7, #8]
    1180:	ee36 7b47 	vsub.f64	d7, d6, d7
    1184:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    1188:	eeb4 7bc6 	vcmpe.f64	d7, d6
    118c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1190:	dd11      	ble.n	11b6 <calc_fixed_time_MW_sweep+0x34e>
			mw_sweep_settings.num_steps--;
    1192:	4b3b      	ldr	r3, [pc, #236]	; (1280 <calc_fixed_time_MW_sweep+0x418>)
    1194:	691b      	ldr	r3, [r3, #16]
    1196:	3b01      	subs	r3, #1
    1198:	4a39      	ldr	r2, [pc, #228]	; (1280 <calc_fixed_time_MW_sweep+0x418>)
    119a:	6113      	str	r3, [r2, #16]
			calc_sweep_time = point_period * (mw_sweep_settings.num_steps + 1);
    119c:	4b38      	ldr	r3, [pc, #224]	; (1280 <calc_fixed_time_MW_sweep+0x418>)
    119e:	691b      	ldr	r3, [r3, #16]
    11a0:	3301      	adds	r3, #1
    11a2:	ee07 3a90 	vmov	s15, r3
    11a6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    11aa:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
    11ae:	ee26 7b07 	vmul.f64	d7, d6, d7
    11b2:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
		}
//		printf("DEBUG #steps: %lu \r\n", mw_sweep_settings.num_steps);

		//Double check of the sweep period selected
		printf("Final calculated sweep period, including scope sync: %.3g s\r\n", calc_sweep_time);
    11b6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    11ba:	4833      	ldr	r0, [pc, #204]	; (1288 <calc_fixed_time_MW_sweep+0x420>)
    11bc:	f000 fcd4 	bl	1b68 <__printf_veneer>
	}

	/* Can avoid spurs if frequency requested can be encoded exactly  */
	start_freq = ((long)(start_freq/unit_step_size_Hz)) * unit_step_size_Hz;
    11c0:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
    11c4:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
    11c8:	ee85 7b06 	vdiv.f64	d7, d5, d6
    11cc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    11d0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    11d4:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
    11d8:	ee26 7b07 	vmul.f64	d7, d6, d7
    11dc:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50

	/* Calculate the N division ratio, extracting the fractional and integer parts */
	const double N = ((start_freq * mw_sweep_settings.k) / REF_FREQ);
    11e0:	4b27      	ldr	r3, [pc, #156]	; (1280 <calc_fixed_time_MW_sweep+0x418>)
    11e2:	789b      	ldrb	r3, [r3, #2]
    11e4:	ee07 3a90 	vmov	s15, r3
    11e8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    11ec:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
    11f0:	ee26 6b07 	vmul.f64	d6, d6, d7
    11f4:	ed9f 5b1e 	vldr	d5, [pc, #120]	; 1270 <calc_fixed_time_MW_sweep+0x408>
    11f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
    11fc:	ed87 7b08 	vstr	d7, [r7, #32]
	mw_sweep_settings.NINT = N;
    1200:	ed97 7b08 	vldr	d7, [r7, #32]
    1204:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1208:	ee17 2a90 	vmov	r2, s15
    120c:	4b1c      	ldr	r3, [pc, #112]	; (1280 <calc_fixed_time_MW_sweep+0x418>)
    120e:	605a      	str	r2, [r3, #4]
	mw_sweep_settings.NFRAC_start_of_ramp = ((N - mw_sweep_settings.NINT) * (1 << 24)) + 0.5;
    1210:	4b1b      	ldr	r3, [pc, #108]	; (1280 <calc_fixed_time_MW_sweep+0x418>)
    1212:	685b      	ldr	r3, [r3, #4]
    1214:	ee07 3a90 	vmov	s15, r3
    1218:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    121c:	ed97 6b08 	vldr	d6, [r7, #32]
    1220:	ee36 7b47 	vsub.f64	d7, d6, d7
    1224:	ed9f 6b14 	vldr	d6, [pc, #80]	; 1278 <calc_fixed_time_MW_sweep+0x410>
    1228:	ee27 7b06 	vmul.f64	d7, d7, d6
    122c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    1230:	ee37 7b06 	vadd.f64	d7, d7, d6
    1234:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1238:	ee17 2a90 	vmov	r2, s15
    123c:	4b10      	ldr	r3, [pc, #64]	; (1280 <calc_fixed_time_MW_sweep+0x418>)
    123e:	60da      	str	r2, [r3, #12]
	mw_sweep_settings.current_point = 0;
    1240:	4b0f      	ldr	r3, [pc, #60]	; (1280 <calc_fixed_time_MW_sweep+0x418>)
    1242:	2200      	movs	r2, #0
    1244:	629a      	str	r2, [r3, #40]	; 0x28
	mw_sweep_settings.sweep_period = calc_sweep_time;
    1246:	490e      	ldr	r1, [pc, #56]	; (1280 <calc_fixed_time_MW_sweep+0x418>)
    1248:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    124c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	mw_sweep_settings.stabilise_time = MW_STABILISE_TIME_US; //Global MW stabilisation time
    1250:	f241 7270 	movw	r2, #6000	; 0x1770
    1254:	4b0a      	ldr	r3, [pc, #40]	; (1280 <calc_fixed_time_MW_sweep+0x418>)
    1256:	61da      	str	r2, [r3, #28]
//	print_mw_sweep_settings();
	return(true);
    1258:	2301      	movs	r3, #1
}
    125a:	4618      	mov	r0, r3
    125c:	3768      	adds	r7, #104	; 0x68
    125e:	46bd      	mov	sp, r7
    1260:	bd80      	pop	{r7, pc}
    1262:	bf00      	nop
    1264:	f3af 8000 	nop.w
    1268:	9999999a 	.word	0x9999999a
    126c:	3ff19999 	.word	0x3ff19999
    1270:	00000000 	.word	0x00000000
    1274:	4187d784 	.word	0x4187d784
    1278:	00000000 	.word	0x00000000
    127c:	41700000 	.word	0x41700000
    1280:	20000648 	.word	0x20000648
    1284:	0801c3cc 	.word	0x0801c3cc
    1288:	0801c418 	.word	0x0801c418

0000128c <calc_hyperfine_settings>:

/**
  * @brief Populates the k, integer N, and fractional N values for the hyperfine frequency
  * @retval None
  */
static void calc_hyperfine_settings(const double centre_freq) {
    128c:	b580      	push	{r7, lr}
    128e:	b084      	sub	sp, #16
    1290:	af00      	add	r7, sp, #0
    1292:	ed87 0b00 	vstr	d0, [r7]
	mw_sweep_settings.k = calculate_k(centre_freq);
    1296:	ed97 0b00 	vldr	d0, [r7]
    129a:	f000 f843 	bl	1324 <calculate_k>
    129e:	4603      	mov	r3, r0
    12a0:	b2da      	uxtb	r2, r3
    12a2:	4b1f      	ldr	r3, [pc, #124]	; (1320 <calc_hyperfine_settings+0x94>)
    12a4:	709a      	strb	r2, [r3, #2]
	const double N = ((centre_freq * mw_sweep_settings.k) / REF_FREQ);
    12a6:	4b1e      	ldr	r3, [pc, #120]	; (1320 <calc_hyperfine_settings+0x94>)
    12a8:	789b      	ldrb	r3, [r3, #2]
    12aa:	ee07 3a90 	vmov	s15, r3
    12ae:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    12b2:	ed97 7b00 	vldr	d7, [r7]
    12b6:	ee26 6b07 	vmul.f64	d6, d6, d7
    12ba:	ed9f 5b15 	vldr	d5, [pc, #84]	; 1310 <calc_hyperfine_settings+0x84>
    12be:	ee86 7b05 	vdiv.f64	d7, d6, d5
    12c2:	ed87 7b02 	vstr	d7, [r7, #8]
	mw_sweep_settings.NINT = N;
    12c6:	ed97 7b02 	vldr	d7, [r7, #8]
    12ca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    12ce:	ee17 2a90 	vmov	r2, s15
    12d2:	4b13      	ldr	r3, [pc, #76]	; (1320 <calc_hyperfine_settings+0x94>)
    12d4:	605a      	str	r2, [r3, #4]
	mw_sweep_settings.NFRAC_hyperfine = ((N - mw_sweep_settings.NINT) * (1 << 24)) + 0.5;
    12d6:	4b12      	ldr	r3, [pc, #72]	; (1320 <calc_hyperfine_settings+0x94>)
    12d8:	685b      	ldr	r3, [r3, #4]
    12da:	ee07 3a90 	vmov	s15, r3
    12de:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    12e2:	ed97 6b02 	vldr	d6, [r7, #8]
    12e6:	ee36 7b47 	vsub.f64	d7, d6, d7
    12ea:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 1318 <calc_hyperfine_settings+0x8c>
    12ee:	ee27 7b06 	vmul.f64	d7, d7, d6
    12f2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    12f6:	ee37 7b06 	vadd.f64	d7, d7, d6
    12fa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    12fe:	ee17 2a90 	vmov	r2, s15
    1302:	4b07      	ldr	r3, [pc, #28]	; (1320 <calc_hyperfine_settings+0x94>)
    1304:	609a      	str	r2, [r3, #8]
}
    1306:	bf00      	nop
    1308:	3710      	adds	r7, #16
    130a:	46bd      	mov	sp, r7
    130c:	bd80      	pop	{r7, pc}
    130e:	bf00      	nop
    1310:	00000000 	.word	0x00000000
    1314:	4187d784 	.word	0x4187d784
    1318:	00000000 	.word	0x00000000
    131c:	41700000 	.word	0x41700000
    1320:	20000648 	.word	0x20000648

00001324 <calculate_k>:

/**
  * @brief  Calculates k value
  * @retval k
  */
static const uint32_t calculate_k(const double frequency) {
    1324:	b480      	push	{r7}
    1326:	b085      	sub	sp, #20
    1328:	af00      	add	r7, sp, #0
    132a:	ed87 0b00 	vstr	d0, [r7]
	/* For the k divider we need to find the smallest even integer or use a max of 62*/
	uint32_t k = VCO_MAX_FREQ / frequency;
    132e:	ed9f 5b10 	vldr	d5, [pc, #64]	; 1370 <calculate_k+0x4c>
    1332:	ed97 6b00 	vldr	d6, [r7]
    1336:	ee85 7b06 	vdiv.f64	d7, d5, d6
    133a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    133e:	ee17 3a90 	vmov	r3, s15
    1342:	60fb      	str	r3, [r7, #12]

	if (k != 1) {
    1344:	68fb      	ldr	r3, [r7, #12]
    1346:	2b01      	cmp	r3, #1
    1348:	d00b      	beq.n	1362 <calculate_k+0x3e>
		while (k > 62 || k % 2) {
    134a:	e002      	b.n	1352 <calculate_k+0x2e>
			k --;
    134c:	68fb      	ldr	r3, [r7, #12]
    134e:	3b01      	subs	r3, #1
    1350:	60fb      	str	r3, [r7, #12]
		while (k > 62 || k % 2) {
    1352:	68fb      	ldr	r3, [r7, #12]
    1354:	2b3e      	cmp	r3, #62	; 0x3e
    1356:	d8f9      	bhi.n	134c <calculate_k+0x28>
    1358:	68fb      	ldr	r3, [r7, #12]
    135a:	f003 0301 	and.w	r3, r3, #1
    135e:	2b00      	cmp	r3, #0
    1360:	d1f4      	bne.n	134c <calculate_k+0x28>
		}
	}
	return (k);
    1362:	68fb      	ldr	r3, [r7, #12]
}
    1364:	4618      	mov	r0, r3
    1366:	3714      	adds	r7, #20
    1368:	46bd      	mov	sp, r7
    136a:	f85d 7b04 	ldr.w	r7, [sp], #4
    136e:	4770      	bx	lr
    1370:	20000000 	.word	0x20000000
    1374:	41ee8c21 	.word	0x41ee8c21

00001378 <start_POP_cycle_calibration>:

/**
  * @brief  Starts the process of measuring the POP period
  * @retval None
  */
void start_POP_cycle_calibration(const bool cal_only) {
    1378:	b580      	push	{r7, lr}
    137a:	b082      	sub	sp, #8
    137c:	af00      	add	r7, sp, #0
    137e:	4603      	mov	r3, r0
    1380:	71fb      	strb	r3, [r7, #7]
	/* Requires ADC to be initialised and for HAL_ADC_ConvCpltCallback to be active */
	if (cal_only == true) {
    1382:	79fb      	ldrb	r3, [r7, #7]
    1384:	2b00      	cmp	r3, #0
    1386:	d003      	beq.n	1390 <start_POP_cycle_calibration+0x18>
		mw_sweep_settings.sweep_mode = POP_CAL_ONLY;
    1388:	4b0f      	ldr	r3, [pc, #60]	; (13c8 <start_POP_cycle_calibration+0x50>)
    138a:	2201      	movs	r2, #1
    138c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	}
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); 	//Sets MW_invalid pin high to reset POP cycle
    1390:	2201      	movs	r2, #1
    1392:	2102      	movs	r1, #2
    1394:	480d      	ldr	r0, [pc, #52]	; (13cc <start_POP_cycle_calibration+0x54>)
    1396:	f000 fbd3 	bl	1b40 <__HAL_GPIO_WritePin_veneer>
	HAL_Delay(10); // 10ms in case ADC was part-way through a conversion
    139a:	200a      	movs	r0, #10
    139c:	f000 fbd4 	bl	1b48 <__HAL_Delay_veneer>
	sample_count = 0; //reset sample count
    13a0:	4b0b      	ldr	r3, [pc, #44]	; (13d0 <start_POP_cycle_calibration+0x58>)
    13a2:	2200      	movs	r2, #0
    13a4:	801a      	strh	r2, [r3, #0]
	mw_sweep_settings.state = MW_CALIBRATE;
    13a6:	4b08      	ldr	r3, [pc, #32]	; (13c8 <start_POP_cycle_calibration+0x50>)
    13a8:	2206      	movs	r2, #6
    13aa:	701a      	strb	r2, [r3, #0]
	start_timer(MW_TIMER); //reset MW_timer and start counting
    13ac:	4b09      	ldr	r3, [pc, #36]	; (13d4 <start_POP_cycle_calibration+0x5c>)
    13ae:	681b      	ldr	r3, [r3, #0]
    13b0:	4618      	mov	r0, r3
    13b2:	f000 fb6f 	bl	1a94 <start_timer>
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Restart POP cycle
    13b6:	2200      	movs	r2, #0
    13b8:	2102      	movs	r1, #2
    13ba:	4804      	ldr	r0, [pc, #16]	; (13cc <start_POP_cycle_calibration+0x54>)
    13bc:	f000 fbc0 	bl	1b40 <__HAL_GPIO_WritePin_veneer>
	#ifdef MW_VERBOSE
		printf("POP calibration started\r\n");
	#endif //MW_VERBOSE
}
    13c0:	bf00      	nop
    13c2:	3708      	adds	r7, #8
    13c4:	46bd      	mov	sp, r7
    13c6:	bd80      	pop	{r7, pc}
    13c8:	20000648 	.word	0x20000648
    13cc:	58020400 	.word	0x58020400
    13d0:	200005f6 	.word	0x200005f6
    13d4:	2000001c 	.word	0x2000001c

000013d8 <start_MW_sweep>:

/**
  * @brief  Starts a MW sweep
  * @retval Success/failure
  */
static const bool start_MW_sweep(const bool single_sweep) {
    13d8:	b580      	push	{r7, lr}
    13da:	b082      	sub	sp, #8
    13dc:	af00      	add	r7, sp, #0
    13de:	4603      	mov	r3, r0
    13e0:	71fb      	strb	r3, [r7, #7]
	//uses settings from the mw_sweep_settings structure
	if (single_sweep == true) {
    13e2:	79fb      	ldrb	r3, [r7, #7]
    13e4:	2b00      	cmp	r3, #0
    13e6:	d003      	beq.n	13f0 <start_MW_sweep+0x18>
		mw_sweep_settings.sweep_mode = SWEEP_ONCE;
    13e8:	4b1c      	ldr	r3, [pc, #112]	; (145c <start_MW_sweep+0x84>)
    13ea:	2202      	movs	r2, #2
    13ec:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	}
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // Assume MW lock, the LED will be disabled if lock fails.
    13f0:	2201      	movs	r2, #1
    13f2:	2102      	movs	r1, #2
    13f4:	481a      	ldr	r0, [pc, #104]	; (1460 <start_MW_sweep+0x88>)
    13f6:	f000 fba3 	bl	1b40 <__HAL_GPIO_WritePin_veneer>

	#ifdef MW_VERBOSE
		printf("Setting trigger output low \r\n");
	#endif //MW_VERBOSE

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
    13fa:	2201      	movs	r2, #1
    13fc:	2102      	movs	r1, #2
    13fe:	4819      	ldr	r0, [pc, #100]	; (1464 <start_MW_sweep+0x8c>)
    1400:	f000 fb9e 	bl	1b40 <__HAL_GPIO_WritePin_veneer>
//	set_frequency(mw_sweep_settings.NINT, mw_sweep_settings.NFRAC_start, mw_sweep_settings.k, MANUAL_MUTE); //program initial MW frequency
	set_freq_regs(mw_sweep_settings.NINT, mw_sweep_settings.NFRAC_start_of_ramp, mw_sweep_settings.k); //program initial MW frequency
    1404:	4b15      	ldr	r3, [pc, #84]	; (145c <start_MW_sweep+0x84>)
    1406:	685b      	ldr	r3, [r3, #4]
    1408:	4a14      	ldr	r2, [pc, #80]	; (145c <start_MW_sweep+0x84>)
    140a:	68d1      	ldr	r1, [r2, #12]
    140c:	4a13      	ldr	r2, [pc, #76]	; (145c <start_MW_sweep+0x84>)
    140e:	7892      	ldrb	r2, [r2, #2]
    1410:	4618      	mov	r0, r3
    1412:	f7ff fb85 	bl	b20 <set_freq_regs>
	mw_sweep_settings.state = MW_STABILISING; //waiting for MW output to stabilise
    1416:	4b11      	ldr	r3, [pc, #68]	; (145c <start_MW_sweep+0x84>)
    1418:	2202      	movs	r2, #2
    141a:	701a      	strb	r2, [r3, #0]
	mw_sweep_settings.next_state = MW_RAMP_DWELL;
    141c:	4b0f      	ldr	r3, [pc, #60]	; (145c <start_MW_sweep+0x84>)
    141e:	2205      	movs	r2, #5
    1420:	705a      	strb	r2, [r3, #1]
	mw_sweep_settings.current_point = 0; //currently on at start of ramp i.e. point 0
    1422:	4b0e      	ldr	r3, [pc, #56]	; (145c <start_MW_sweep+0x84>)
    1424:	2200      	movs	r2, #0
    1426:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(10); // 10ms in case ADC was part-way through a conversion
    1428:	200a      	movs	r0, #10
    142a:	f000 fb8d 	bl	1b48 <__HAL_Delay_veneer>
	/* Output used for triggering external scope */
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
    142e:	2200      	movs	r2, #0
    1430:	2101      	movs	r1, #1
    1432:	480d      	ldr	r0, [pc, #52]	; (1468 <start_MW_sweep+0x90>)
    1434:	f000 fb84 	bl	1b40 <__HAL_GPIO_WritePin_veneer>
	start_timer(MW_TIMER); //reset MW_timer (MW step timer) and start counting
    1438:	4b0c      	ldr	r3, [pc, #48]	; (146c <start_MW_sweep+0x94>)
    143a:	681b      	ldr	r3, [r3, #0]
    143c:	4618      	mov	r0, r3
    143e:	f000 fb29 	bl	1a94 <start_timer>
	start_timer(SWEEP_TIMER); //reset general (sweep) timer and start counting
    1442:	4b0b      	ldr	r3, [pc, #44]	; (1470 <start_MW_sweep+0x98>)
    1444:	681b      	ldr	r3, [r3, #0]
    1446:	4618      	mov	r0, r3
    1448:	f000 fb24 	bl	1a94 <start_timer>
	sample_count = 0; //reset sample count
    144c:	4b09      	ldr	r3, [pc, #36]	; (1474 <start_MW_sweep+0x9c>)
    144e:	2200      	movs	r2, #0
    1450:	801a      	strh	r2, [r3, #0]
	//known limitation - if the ADC has been recently triggered then HAL_ADC_ConvCpltCallback will increment sample_count by 1
	//workround is to introduce a small delay after setting MW_invalid high
	return(true);
    1452:	2301      	movs	r3, #1
}
    1454:	4618      	mov	r0, r3
    1456:	3708      	adds	r7, #8
    1458:	46bd      	mov	sp, r7
    145a:	bd80      	pop	{r7, pc}
    145c:	20000648 	.word	0x20000648
    1460:	58021000 	.word	0x58021000
    1464:	58020400 	.word	0x58020400
    1468:	58021800 	.word	0x58021800
    146c:	2000001c 	.word	0x2000001c
    1470:	20000020 	.word	0x20000020
    1474:	200005f6 	.word	0x200005f6

00001478 <start_POP_tuning>:

/**
  * @brief  Starts the MW tuning process
  * @retval None
  */
void start_POP_tuning(const double centre_freq) {
    1478:	b580      	push	{r7, lr}
    147a:	b082      	sub	sp, #8
    147c:	af00      	add	r7, sp, #0
    147e:	ed87 0b00 	vstr	d0, [r7]
	stop_MW_operation(); //releases timers and ensures that sample pulse is generated for ADC
    1482:	f000 f837 	bl	14f4 <stop_MW_operation>
//	if (test for straying above bound) {
//		printf("LOSS OF MW LOCK\r\n");
//		printf("Error message: %u\r\n", variable);
//		Error_Handler();
//	}
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
    1486:	2201      	movs	r2, #1
    1488:	2102      	movs	r1, #2
    148a:	4810      	ldr	r0, [pc, #64]	; (14cc <start_POP_tuning+0x54>)
    148c:	f000 fb58 	bl	1b40 <__HAL_GPIO_WritePin_veneer>
	calc_hyperfine_settings(centre_freq); //calculates HMC835 k and N settings and places them in mw_sweep_settings
    1490:	ed97 0b00 	vldr	d0, [r7]
    1494:	f7ff fefa 	bl	128c <calc_hyperfine_settings>
	set_freq_regs(mw_sweep_settings.NINT, mw_sweep_settings.NFRAC_hyperfine + POP_STEP, mw_sweep_settings.k); //MW f set above hyperfine
    1498:	4b0d      	ldr	r3, [pc, #52]	; (14d0 <start_POP_tuning+0x58>)
    149a:	6858      	ldr	r0, [r3, #4]
    149c:	4b0c      	ldr	r3, [pc, #48]	; (14d0 <start_POP_tuning+0x58>)
    149e:	689b      	ldr	r3, [r3, #8]
    14a0:	3308      	adds	r3, #8
    14a2:	4a0b      	ldr	r2, [pc, #44]	; (14d0 <start_POP_tuning+0x58>)
    14a4:	7892      	ldrb	r2, [r2, #2]
    14a6:	4619      	mov	r1, r3
    14a8:	f7ff fb3a 	bl	b20 <set_freq_regs>
	mw_sweep_settings.state = MW_STABILISING; //waiting for MW output to stabilise
    14ac:	4b08      	ldr	r3, [pc, #32]	; (14d0 <start_POP_tuning+0x58>)
    14ae:	2202      	movs	r2, #2
    14b0:	701a      	strb	r2, [r3, #0]
	mw_sweep_settings.next_state = POP_SAMPLE_BELOW;
    14b2:	4b07      	ldr	r3, [pc, #28]	; (14d0 <start_POP_tuning+0x58>)
    14b4:	2204      	movs	r2, #4
    14b6:	705a      	strb	r2, [r3, #1]
	start_timer(MW_TIMER); //Restart timer for MW settling time time
    14b8:	4b06      	ldr	r3, [pc, #24]	; (14d4 <start_POP_tuning+0x5c>)
    14ba:	681b      	ldr	r3, [r3, #0]
    14bc:	4618      	mov	r0, r3
    14be:	f000 fae9 	bl	1a94 <start_timer>
//	reset_adc_samples(); //reset ADC samples including sample count
	#ifdef POP_VERBOSE
	printf("POP tuning - MW sampling above hyperfine\r\n");
	#endif //POP_VERBOSE
}
    14c2:	bf00      	nop
    14c4:	3708      	adds	r7, #8
    14c6:	46bd      	mov	sp, r7
    14c8:	bd80      	pop	{r7, pc}
    14ca:	bf00      	nop
    14cc:	58020400 	.word	0x58020400
    14d0:	20000648 	.word	0x20000648
    14d4:	2000001c 	.word	0x2000001c

000014d8 <start_continuous_MW_sweep>:

/**
  * @brief  Starts a continuous MW calibrate/sweep cycle
  * @retval None
  */
void start_continuous_MW_sweep(void) {
    14d8:	b580      	push	{r7, lr}
    14da:	af00      	add	r7, sp, #0
	mw_sweep_settings.sweep_mode = CONTINUOUS_SWEEP;
    14dc:	4b04      	ldr	r3, [pc, #16]	; (14f0 <start_continuous_MW_sweep+0x18>)
    14de:	2200      	movs	r2, #0
    14e0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	start_POP_cycle_calibration(false);
    14e4:	2000      	movs	r0, #0
    14e6:	f7ff ff47 	bl	1378 <start_POP_cycle_calibration>
}
    14ea:	bf00      	nop
    14ec:	bd80      	pop	{r7, pc}
    14ee:	bf00      	nop
    14f0:	20000648 	.word	0x20000648

000014f4 <stop_MW_operation>:

/**
  * @brief  Stops MW operation e.g. for laser tuning
  * @retval None
  */
void stop_MW_operation(void) {
    14f4:	b580      	push	{r7, lr}
    14f6:	af00      	add	r7, sp, #0
	mw_sweep_settings.sweep_mode = MW_STOPPED;
    14f8:	4b07      	ldr	r3, [pc, #28]	; (1518 <stop_MW_operation+0x24>)
    14fa:	2200      	movs	r2, #0
    14fc:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	stop_timer(MW_TIMER);
    1500:	4b06      	ldr	r3, [pc, #24]	; (151c <stop_MW_operation+0x28>)
    1502:	681b      	ldr	r3, [r3, #0]
    1504:	4618      	mov	r0, r3
    1506:	f000 fae3 	bl	1ad0 <stop_timer>
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Ensures the ADC sample pulse is being generated
    150a:	2200      	movs	r2, #0
    150c:	2102      	movs	r1, #2
    150e:	4804      	ldr	r0, [pc, #16]	; (1520 <stop_MW_operation+0x2c>)
    1510:	f000 fb16 	bl	1b40 <__HAL_GPIO_WritePin_veneer>
}
    1514:	bf00      	nop
    1516:	bd80      	pop	{r7, pc}
    1518:	20000648 	.word	0x20000648
    151c:	2000001c 	.word	0x2000001c
    1520:	58020400 	.word	0x58020400

00001524 <MW_update>:

/**
  * @brief  Checks MW status to see if a timer has elapsed and if frequency needs changing.
  * @retval True if an action was taken
  */
const bool MW_update(void) {
    1524:	b580      	push	{r7, lr}
    1526:	b08a      	sub	sp, #40	; 0x28
    1528:	af04      	add	r7, sp, #16
	uint8_t local_copy_of_MW_state = mw_sweep_settings.state; //hack to make switch statement behave
    152a:	4b99      	ldr	r3, [pc, #612]	; (1790 <MW_update+0x26c>)
    152c:	781b      	ldrb	r3, [r3, #0]
    152e:	75bb      	strb	r3, [r7, #22]
	//switch (mw_sweep_settings.state)
	bool action_taken = false;
    1530:	2300      	movs	r3, #0
    1532:	75fb      	strb	r3, [r7, #23]
	uint32_t sweep_period_us;
	switch (local_copy_of_MW_state)
    1534:	7dbb      	ldrb	r3, [r7, #22]
    1536:	2b06      	cmp	r3, #6
    1538:	f200 817c 	bhi.w	1834 <MW_update+0x310>
    153c:	a201      	add	r2, pc, #4	; (adr r2, 1544 <MW_update+0x20>)
    153e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1542:	bf00      	nop
    1544:	0000184d 	.word	0x0000184d
    1548:	0000184d 	.word	0x0000184d
    154c:	00001561 	.word	0x00001561
    1550:	000015b1 	.word	0x000015b1
    1554:	000015fb 	.word	0x000015fb
    1558:	00001645 	.word	0x00001645
    155c:	000017c1 	.word	0x000017c1
		case MW_STOPPED:
		case MW_FIXED_FREQ:
			break; //no action to take

		case MW_STABILISING: //waiting for MW output to stabilise
			if (check_timer(MW_TIMER) < MW_STABILISE_TIME_US) return(false); //Still waiting, no action taken
    1560:	4b8c      	ldr	r3, [pc, #560]	; (1794 <MW_update+0x270>)
    1562:	681b      	ldr	r3, [r3, #0]
    1564:	4618      	mov	r0, r3
    1566:	f000 fac5 	bl	1af4 <check_timer>
    156a:	4603      	mov	r3, r0
    156c:	f241 7270 	movw	r2, #6000	; 0x1770
    1570:	4293      	cmp	r3, r2
    1572:	d201      	bcs.n	1578 <MW_update+0x54>
    1574:	2300      	movs	r3, #0
    1576:	e171      	b.n	185c <MW_update+0x338>
			//Otherwise MW stabilisation timer has elapsed
			stop_timer(MW_TIMER);
    1578:	4b86      	ldr	r3, [pc, #536]	; (1794 <MW_update+0x270>)
    157a:	681b      	ldr	r3, [r3, #0]
    157c:	4618      	mov	r0, r3
    157e:	f000 faa7 	bl	1ad0 <stop_timer>
			reset_adc_samples(); //clear any data in the adc sample buffer
    1582:	f7ff f8a1 	bl	6c8 <reset_adc_samples>
			HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Sets MW_invalid pin low as MW now stable
    1586:	2200      	movs	r2, #0
    1588:	2102      	movs	r1, #2
    158a:	4883      	ldr	r0, [pc, #524]	; (1798 <MW_update+0x274>)
    158c:	f000 fad8 	bl	1b40 <__HAL_GPIO_WritePin_veneer>
//			mw_sweep_settings.state = MW_RAMP_DWELL;
			if (mw_sweep_settings.next_state == MW_RAMP_DWELL) start_timer(MW_TIMER); //Restart timer for DWELL time
    1590:	4b7f      	ldr	r3, [pc, #508]	; (1790 <MW_update+0x26c>)
    1592:	785b      	ldrb	r3, [r3, #1]
    1594:	2b05      	cmp	r3, #5
    1596:	d104      	bne.n	15a2 <MW_update+0x7e>
    1598:	4b7e      	ldr	r3, [pc, #504]	; (1794 <MW_update+0x270>)
    159a:	681b      	ldr	r3, [r3, #0]
    159c:	4618      	mov	r0, r3
    159e:	f000 fa79 	bl	1a94 <start_timer>
			mw_sweep_settings.state = mw_sweep_settings.next_state;
    15a2:	4b7b      	ldr	r3, [pc, #492]	; (1790 <MW_update+0x26c>)
    15a4:	785a      	ldrb	r2, [r3, #1]
    15a6:	4b7a      	ldr	r3, [pc, #488]	; (1790 <MW_update+0x26c>)
    15a8:	701a      	strb	r2, [r3, #0]
			action_taken = true;
    15aa:	2301      	movs	r3, #1
    15ac:	75fb      	strb	r3, [r7, #23]
			break;
    15ae:	e154      	b.n	185a <MW_update+0x336>

		case POP_SAMPLE_ABOVE: //POP with elevated MW frequency
			if(adc_average_updated) {
    15b0:	4b7a      	ldr	r3, [pc, #488]	; (179c <MW_update+0x278>)
    15b2:	781b      	ldrb	r3, [r3, #0]
    15b4:	2b00      	cmp	r3, #0
    15b6:	f000 814b 	beq.w	1850 <MW_update+0x32c>
				adc_polled_above = adc_averaged_val;
    15ba:	4b79      	ldr	r3, [pc, #484]	; (17a0 <MW_update+0x27c>)
    15bc:	681b      	ldr	r3, [r3, #0]
    15be:	4a79      	ldr	r2, [pc, #484]	; (17a4 <MW_update+0x280>)
    15c0:	6013      	str	r3, [r2, #0]
//				if (test for straying below bounds) {
//				    printf("LOSS OF MW LOCK\r\n");
//				    printf("Error message: %u\r\n", variable);
//					Error_Handler();
//				}
				HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
    15c2:	2201      	movs	r2, #1
    15c4:	2102      	movs	r1, #2
    15c6:	4874      	ldr	r0, [pc, #464]	; (1798 <MW_update+0x274>)
    15c8:	f000 faba 	bl	1b40 <__HAL_GPIO_WritePin_veneer>
//				set_freq_regs(mw_sweep_settings.NINT, mw_sweep_settings.NFRAC_hyperfine - POP_STEP, mw_sweep_settings.k); //MW f set below hyperfine
				synth_writereg(mw_sweep_settings.NFRAC_hyperfine - POP_STEP, FRACTIONAL_FREQUENCY_REGISTER, 0x0, VERIFY);  //MW f set below hyperfine
    15cc:	4b70      	ldr	r3, [pc, #448]	; (1790 <MW_update+0x26c>)
    15ce:	689b      	ldr	r3, [r3, #8]
    15d0:	f1a3 0008 	sub.w	r0, r3, #8
    15d4:	2301      	movs	r3, #1
    15d6:	2200      	movs	r2, #0
    15d8:	2104      	movs	r1, #4
    15da:	f7ff f891 	bl	700 <synth_writereg>
				mw_sweep_settings.state = MW_STABILISING; //waiting for MW output to stabilise
    15de:	4b6c      	ldr	r3, [pc, #432]	; (1790 <MW_update+0x26c>)
    15e0:	2202      	movs	r2, #2
    15e2:	701a      	strb	r2, [r3, #0]
				mw_sweep_settings.next_state = POP_SAMPLE_BELOW;
    15e4:	4b6a      	ldr	r3, [pc, #424]	; (1790 <MW_update+0x26c>)
    15e6:	2204      	movs	r2, #4
    15e8:	705a      	strb	r2, [r3, #1]
				start_timer(MW_TIMER); //Restart timer for MW settling time time
    15ea:	4b6a      	ldr	r3, [pc, #424]	; (1794 <MW_update+0x270>)
    15ec:	681b      	ldr	r3, [r3, #0]
    15ee:	4618      	mov	r0, r3
    15f0:	f000 fa50 	bl	1a94 <start_timer>
//				reset_adc_samples(); //reset ADC samples including sample count
				#ifdef POP_VERBOSE
				printf("POP tuning - MW sampling above hyperfine\r\n");
				#endif //POP_VERBOSE
				action_taken = true;
    15f4:	2301      	movs	r3, #1
    15f6:	75fb      	strb	r3, [r7, #23]
			}
			break;
    15f8:	e12a      	b.n	1850 <MW_update+0x32c>
		case POP_SAMPLE_BELOW: //POP with reduced MW frequency
			if(adc_average_updated) {
    15fa:	4b68      	ldr	r3, [pc, #416]	; (179c <MW_update+0x278>)
    15fc:	781b      	ldrb	r3, [r3, #0]
    15fe:	2b00      	cmp	r3, #0
    1600:	f000 8128 	beq.w	1854 <MW_update+0x330>
				adc_polled_above = adc_averaged_val;
    1604:	4b66      	ldr	r3, [pc, #408]	; (17a0 <MW_update+0x27c>)
    1606:	681b      	ldr	r3, [r3, #0]
    1608:	4a66      	ldr	r2, [pc, #408]	; (17a4 <MW_update+0x280>)
    160a:	6013      	str	r3, [r2, #0]
//				if (test for straying above bounds) {
//				    printf("LOSS OF MW LOCK\r\n");
//				    printf("Error message: %u\r\n", variable);
//					Error_Handler();
//				}
				HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
    160c:	2201      	movs	r2, #1
    160e:	2102      	movs	r1, #2
    1610:	4861      	ldr	r0, [pc, #388]	; (1798 <MW_update+0x274>)
    1612:	f000 fa95 	bl	1b40 <__HAL_GPIO_WritePin_veneer>
//				set_freq_regs(mw_sweep_settings.NINT, mw_sweep_settings.NFRAC_hyperfine + POP_STEP, mw_sweep_settings.k); //MW f set above hyperfine
				synth_writereg(mw_sweep_settings.NFRAC_hyperfine + POP_STEP, FRACTIONAL_FREQUENCY_REGISTER, 0x0, VERIFY);  //MW f set above hyperfine
    1616:	4b5e      	ldr	r3, [pc, #376]	; (1790 <MW_update+0x26c>)
    1618:	689b      	ldr	r3, [r3, #8]
    161a:	f103 0008 	add.w	r0, r3, #8
    161e:	2301      	movs	r3, #1
    1620:	2200      	movs	r2, #0
    1622:	2104      	movs	r1, #4
    1624:	f7ff f86c 	bl	700 <synth_writereg>
				mw_sweep_settings.state = MW_STABILISING; //waiting for MW output to stabilise
    1628:	4b59      	ldr	r3, [pc, #356]	; (1790 <MW_update+0x26c>)
    162a:	2202      	movs	r2, #2
    162c:	701a      	strb	r2, [r3, #0]
				mw_sweep_settings.next_state = POP_SAMPLE_ABOVE;
    162e:	4b58      	ldr	r3, [pc, #352]	; (1790 <MW_update+0x26c>)
    1630:	2203      	movs	r2, #3
    1632:	705a      	strb	r2, [r3, #1]
				start_timer(MW_TIMER); //Restart timer for MW settling time time
    1634:	4b57      	ldr	r3, [pc, #348]	; (1794 <MW_update+0x270>)
    1636:	681b      	ldr	r3, [r3, #0]
    1638:	4618      	mov	r0, r3
    163a:	f000 fa2b 	bl	1a94 <start_timer>
//				reset_adc_samples(); //reset ADC samples including sample count
				#ifdef POP_VERBOSE
				printf("POP tuning - MW sampling above hyperfine\r\n");
				#endif //POP_VERBOSE
				action_taken = true;
    163e:	2301      	movs	r3, #1
    1640:	75fb      	strb	r3, [r7, #23]
			}
			break;
    1642:	e107      	b.n	1854 <MW_update+0x330>

		case MW_RAMP_DWELL: //valid MW output waiting for end of dwell time
			if (check_timer(MW_TIMER) < mw_sweep_settings.dwell_time) return(false); //Still waiting
    1644:	4b53      	ldr	r3, [pc, #332]	; (1794 <MW_update+0x270>)
    1646:	681b      	ldr	r3, [r3, #0]
    1648:	4618      	mov	r0, r3
    164a:	f000 fa53 	bl	1af4 <check_timer>
    164e:	4602      	mov	r2, r0
    1650:	4b4f      	ldr	r3, [pc, #316]	; (1790 <MW_update+0x26c>)
    1652:	6a1b      	ldr	r3, [r3, #32]
    1654:	429a      	cmp	r2, r3
    1656:	d201      	bcs.n	165c <MW_update+0x138>
    1658:	2300      	movs	r3, #0
    165a:	e0ff      	b.n	185c <MW_update+0x338>
			//Otherwise dwell timer has elapsed
			action_taken = true;
    165c:	2301      	movs	r3, #1
    165e:	75fb      	strb	r3, [r7, #23]
			stop_timer(MW_TIMER);
    1660:	4b4c      	ldr	r3, [pc, #304]	; (1794 <MW_update+0x270>)
    1662:	681b      	ldr	r3, [r3, #0]
    1664:	4618      	mov	r0, r3
    1666:	f000 fa33 	bl	1ad0 <stop_timer>
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggles red LED
    166a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    166e:	484a      	ldr	r0, [pc, #296]	; (1798 <MW_update+0x274>)
    1670:	f000 fa6e 	bl	1b50 <__HAL_GPIO_TogglePin_veneer>
			HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high as about to change frequency
    1674:	2201      	movs	r2, #1
    1676:	2102      	movs	r1, #2
    1678:	4847      	ldr	r0, [pc, #284]	; (1798 <MW_update+0x274>)
    167a:	f000 fa61 	bl	1b40 <__HAL_GPIO_WritePin_veneer>
			mw_sweep_settings.state = MW_STABILISING;
    167e:	4b44      	ldr	r3, [pc, #272]	; (1790 <MW_update+0x26c>)
    1680:	2202      	movs	r2, #2
    1682:	701a      	strb	r2, [r3, #0]
			if (mw_sweep_settings.current_point == mw_sweep_settings.num_steps) { // All steps completed, tidy up and restart next sweep
    1684:	4b42      	ldr	r3, [pc, #264]	; (1790 <MW_update+0x26c>)
    1686:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1688:	4b41      	ldr	r3, [pc, #260]	; (1790 <MW_update+0x26c>)
    168a:	691b      	ldr	r3, [r3, #16]
    168c:	429a      	cmp	r2, r3
    168e:	d15c      	bne.n	174a <MW_update+0x226>
				HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
    1690:	2201      	movs	r2, #1
    1692:	2101      	movs	r1, #1
    1694:	4844      	ldr	r0, [pc, #272]	; (17a8 <MW_update+0x284>)
    1696:	f000 fa53 	bl	1b40 <__HAL_GPIO_WritePin_veneer>
				sweep_period_us=check_timer(SWEEP_TIMER);
    169a:	4b44      	ldr	r3, [pc, #272]	; (17ac <MW_update+0x288>)
    169c:	681b      	ldr	r3, [r3, #0]
    169e:	4618      	mov	r0, r3
    16a0:	f000 fa28 	bl	1af4 <check_timer>
    16a4:	60b8      	str	r0, [r7, #8]
				stop_timer(SWEEP_TIMER);
    16a6:	4b41      	ldr	r3, [pc, #260]	; (17ac <MW_update+0x288>)
    16a8:	681b      	ldr	r3, [r3, #0]
    16aa:	4618      	mov	r0, r3
    16ac:	f000 fa10 	bl	1ad0 <stop_timer>
				printf("Sweep complete in %.4g s. Expected %.4g s. %u samples\r\n", (double)(sweep_period_us)/1000000, mw_sweep_settings.sweep_period, sample_count);
    16b0:	68bb      	ldr	r3, [r7, #8]
    16b2:	ee07 3a90 	vmov	s15, r3
    16b6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    16ba:	ed9f 6b33 	vldr	d6, [pc, #204]	; 1788 <MW_update+0x264>
    16be:	ee87 5b06 	vdiv.f64	d5, d7, d6
    16c2:	4b33      	ldr	r3, [pc, #204]	; (1790 <MW_update+0x26c>)
    16c4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
    16c8:	4939      	ldr	r1, [pc, #228]	; (17b0 <MW_update+0x28c>)
    16ca:	8809      	ldrh	r1, [r1, #0]
    16cc:	b289      	uxth	r1, r1
    16ce:	9102      	str	r1, [sp, #8]
    16d0:	e9cd 2300 	strd	r2, r3, [sp]
    16d4:	ec53 2b15 	vmov	r2, r3, d5
    16d8:	4836      	ldr	r0, [pc, #216]	; (17b4 <MW_update+0x290>)
    16da:	f000 fa45 	bl	1b68 <__printf_veneer>
				/* Check if the ADC registered the correct number of samples */
				uint16_t expected_samples = mw_sweep_settings.pop_cycles_per_point * (mw_sweep_settings.num_steps + 1);
    16de:	4b2c      	ldr	r3, [pc, #176]	; (1790 <MW_update+0x26c>)
    16e0:	699b      	ldr	r3, [r3, #24]
    16e2:	b29a      	uxth	r2, r3
    16e4:	4b2a      	ldr	r3, [pc, #168]	; (1790 <MW_update+0x26c>)
    16e6:	691b      	ldr	r3, [r3, #16]
    16e8:	3301      	adds	r3, #1
    16ea:	b29b      	uxth	r3, r3
    16ec:	fb12 f303 	smulbb	r3, r2, r3
    16f0:	80fb      	strh	r3, [r7, #6]
				uint16_t possible_samples = expected_samples + mw_sweep_settings.num_steps + 1;
    16f2:	4b27      	ldr	r3, [pc, #156]	; (1790 <MW_update+0x26c>)
    16f4:	691b      	ldr	r3, [r3, #16]
    16f6:	b29a      	uxth	r2, r3
    16f8:	88fb      	ldrh	r3, [r7, #6]
    16fa:	4413      	add	r3, r2
    16fc:	b29b      	uxth	r3, r3
    16fe:	3301      	adds	r3, #1
    1700:	80bb      	strh	r3, [r7, #4]
//				printf("Sweep generated %u full POP cycles and registered %u samples\r\n", expected_samples, sample_count);
				if ((sample_count == expected_samples) || (sample_count == possible_samples)) {
    1702:	4b2b      	ldr	r3, [pc, #172]	; (17b0 <MW_update+0x28c>)
    1704:	881b      	ldrh	r3, [r3, #0]
    1706:	b29b      	uxth	r3, r3
    1708:	88fa      	ldrh	r2, [r7, #6]
    170a:	429a      	cmp	r2, r3
    170c:	d010      	beq.n	1730 <MW_update+0x20c>
    170e:	4b28      	ldr	r3, [pc, #160]	; (17b0 <MW_update+0x28c>)
    1710:	881b      	ldrh	r3, [r3, #0]
    1712:	b29b      	uxth	r3, r3
    1714:	88ba      	ldrh	r2, [r7, #4]
    1716:	429a      	cmp	r2, r3
    1718:	d00a      	beq.n	1730 <MW_update+0x20c>
					#ifdef MW_VERBOSE
					printf("Sweep generated and successfully registered %u samples\r\n", sample_count);
					#endif //MW_VERBOSE
				} else {
					printf("Warning - sweep generated %u samples but %u registered\r\n", expected_samples, sample_count);
    171a:	88fb      	ldrh	r3, [r7, #6]
    171c:	4a24      	ldr	r2, [pc, #144]	; (17b0 <MW_update+0x28c>)
    171e:	8812      	ldrh	r2, [r2, #0]
    1720:	b292      	uxth	r2, r2
    1722:	4619      	mov	r1, r3
    1724:	4824      	ldr	r0, [pc, #144]	; (17b8 <MW_update+0x294>)
    1726:	f000 fa1f 	bl	1b68 <__printf_veneer>
					printf("Timing of last sample is marginal\r\n");
    172a:	4824      	ldr	r0, [pc, #144]	; (17bc <MW_update+0x298>)
    172c:	f000 fa18 	bl	1b60 <__puts_veneer>
//				printf("MW processing time: %lu us\r\n", measured_processing_time_us);
//				if ((double)(measured_processing_time_us)/MW_PROCESSING_TIME_US > 1.1) {
//					printf("Warning - measured MW processing time (%lu us)is larger than the %lu us expected\r\n", measured_processing_time_us, MW_PROCESSING_TIME_US);
//				}
				#endif //MW_VERBOSE
				if (mw_sweep_settings.sweep_mode == SWEEP_ONCE) {//have reached the end of a single sweep and should stop
    1730:	4b17      	ldr	r3, [pc, #92]	; (1790 <MW_update+0x26c>)
    1732:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
    1736:	2b02      	cmp	r3, #2
    1738:	d103      	bne.n	1742 <MW_update+0x21e>
					mw_sweep_settings.state = MW_STOPPED;
    173a:	4b15      	ldr	r3, [pc, #84]	; (1790 <MW_update+0x26c>)
    173c:	2200      	movs	r2, #0
    173e:	701a      	strb	r2, [r3, #0]
						printf("Failure to program value to DAC \r\n");
						Error_Handler();
					}
				#endif //RAMP_DAC
			}
			break;
    1740:	e08b      	b.n	185a <MW_update+0x336>
					start_MW_sweep(false); //restart the next MW sweep without updating mw_sweep_settings.sweep_mode
    1742:	2000      	movs	r0, #0
    1744:	f7ff fe48 	bl	13d8 <start_MW_sweep>
			break;
    1748:	e087      	b.n	185a <MW_update+0x336>
				mw_sweep_settings.current_point++; //increment point counter
    174a:	4b11      	ldr	r3, [pc, #68]	; (1790 <MW_update+0x26c>)
    174c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    174e:	3301      	adds	r3, #1
    1750:	4a0f      	ldr	r2, [pc, #60]	; (1790 <MW_update+0x26c>)
    1752:	6293      	str	r3, [r2, #40]	; 0x28
				uint32_t local_NFRAC = mw_sweep_settings.NFRAC_start_of_ramp + mw_sweep_settings.step_size * mw_sweep_settings.current_point;
    1754:	4b0e      	ldr	r3, [pc, #56]	; (1790 <MW_update+0x26c>)
    1756:	68da      	ldr	r2, [r3, #12]
    1758:	4b0d      	ldr	r3, [pc, #52]	; (1790 <MW_update+0x26c>)
    175a:	695b      	ldr	r3, [r3, #20]
    175c:	490c      	ldr	r1, [pc, #48]	; (1790 <MW_update+0x26c>)
    175e:	6a89      	ldr	r1, [r1, #40]	; 0x28
    1760:	fb01 f303 	mul.w	r3, r1, r3
    1764:	4413      	add	r3, r2
    1766:	60fb      	str	r3, [r7, #12]
				set_freq_regs(mw_sweep_settings.NINT, local_NFRAC, mw_sweep_settings.k); //program new MW frequency
    1768:	4b09      	ldr	r3, [pc, #36]	; (1790 <MW_update+0x26c>)
    176a:	685b      	ldr	r3, [r3, #4]
    176c:	4a08      	ldr	r2, [pc, #32]	; (1790 <MW_update+0x26c>)
    176e:	7892      	ldrb	r2, [r2, #2]
    1770:	68f9      	ldr	r1, [r7, #12]
    1772:	4618      	mov	r0, r3
    1774:	f7ff f9d4 	bl	b20 <set_freq_regs>
				start_timer(MW_TIMER); //Restart timer for MW stabilisation time
    1778:	4b06      	ldr	r3, [pc, #24]	; (1794 <MW_update+0x270>)
    177a:	681b      	ldr	r3, [r3, #0]
    177c:	4618      	mov	r0, r3
    177e:	f000 f989 	bl	1a94 <start_timer>
			break;
    1782:	e06a      	b.n	185a <MW_update+0x336>
    1784:	f3af 8000 	nop.w
    1788:	00000000 	.word	0x00000000
    178c:	412e8480 	.word	0x412e8480
    1790:	20000648 	.word	0x20000648
    1794:	2000001c 	.word	0x2000001c
    1798:	58020400 	.word	0x58020400
    179c:	2000062c 	.word	0x2000062c
    17a0:	20000600 	.word	0x20000600
    17a4:	20000630 	.word	0x20000630
    17a8:	58021800 	.word	0x58021800
    17ac:	20000020 	.word	0x20000020
    17b0:	200005f6 	.word	0x200005f6
    17b4:	0801c458 	.word	0x0801c458
    17b8:	0801c490 	.word	0x0801c490
    17bc:	0801c4cc 	.word	0x0801c4cc

		case MW_CALIBRATE: //Measures the elapsed time taken for 101 samples (100 POP cycles)
			if (sample_count >= 100) {//100 or more POP cycles have elapsed
    17c0:	4b28      	ldr	r3, [pc, #160]	; (1864 <MW_update+0x340>)
    17c2:	881b      	ldrh	r3, [r3, #0]
    17c4:	b29b      	uxth	r3, r3
    17c6:	2b63      	cmp	r3, #99	; 0x63
    17c8:	d946      	bls.n	1858 <MW_update+0x334>
				uint32_t total_POP_cal_period = check_timer(MW_TIMER);
    17ca:	4b27      	ldr	r3, [pc, #156]	; (1868 <MW_update+0x344>)
    17cc:	681b      	ldr	r3, [r3, #0]
    17ce:	4618      	mov	r0, r3
    17d0:	f000 f990 	bl	1af4 <check_timer>
    17d4:	6138      	str	r0, [r7, #16]
				POP_period_us = (float)(total_POP_cal_period) / 100 + 0.5;
    17d6:	693b      	ldr	r3, [r7, #16]
    17d8:	ee07 3a90 	vmov	s15, r3
    17dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    17e0:	eddf 6a22 	vldr	s13, [pc, #136]	; 186c <MW_update+0x348>
    17e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
    17e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    17ec:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    17f0:	ee37 7b06 	vadd.f64	d7, d7, d6
    17f4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    17f8:	ee17 2a90 	vmov	r2, s15
    17fc:	4b1c      	ldr	r3, [pc, #112]	; (1870 <MW_update+0x34c>)
    17fe:	601a      	str	r2, [r3, #0]
				stop_timer(MW_TIMER);
    1800:	4b19      	ldr	r3, [pc, #100]	; (1868 <MW_update+0x344>)
    1802:	681b      	ldr	r3, [r3, #0]
    1804:	4618      	mov	r0, r3
    1806:	f000 f963 	bl	1ad0 <stop_timer>
				printf("POP period, averaged over 100 cycles: %lu us\r\n", POP_period_us);
    180a:	4b19      	ldr	r3, [pc, #100]	; (1870 <MW_update+0x34c>)
    180c:	681b      	ldr	r3, [r3, #0]
    180e:	4619      	mov	r1, r3
    1810:	4818      	ldr	r0, [pc, #96]	; (1874 <MW_update+0x350>)
    1812:	f000 f9a9 	bl	1b68 <__printf_veneer>
				action_taken = true;
    1816:	2301      	movs	r3, #1
    1818:	75fb      	strb	r3, [r7, #23]
				if (mw_sweep_settings.sweep_mode == POP_CAL_ONLY) {//have reached the end of calibration and should stop
    181a:	4b17      	ldr	r3, [pc, #92]	; (1878 <MW_update+0x354>)
    181c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
    1820:	2b01      	cmp	r3, #1
    1822:	d103      	bne.n	182c <MW_update+0x308>
					mw_sweep_settings.state = MW_STOPPED;
    1824:	4b14      	ldr	r3, [pc, #80]	; (1878 <MW_update+0x354>)
    1826:	2200      	movs	r2, #0
    1828:	701a      	strb	r2, [r3, #0]
				} else {
						start_MW_sweep(false); //start MW_sweep without updating mw_sweep_settings.sweep_mode
				}
			}
			break;
    182a:	e015      	b.n	1858 <MW_update+0x334>
						start_MW_sweep(false); //start MW_sweep without updating mw_sweep_settings.sweep_mode
    182c:	2000      	movs	r0, #0
    182e:	f7ff fdd3 	bl	13d8 <start_MW_sweep>
			break;
    1832:	e011      	b.n	1858 <MW_update+0x334>

		default: // Other state
	       printf("MW_update has detected illegal state: %u \r\n", mw_sweep_settings.state);
    1834:	4b10      	ldr	r3, [pc, #64]	; (1878 <MW_update+0x354>)
    1836:	781b      	ldrb	r3, [r3, #0]
    1838:	4619      	mov	r1, r3
    183a:	4810      	ldr	r0, [pc, #64]	; (187c <MW_update+0x358>)
    183c:	f000 f994 	bl	1b68 <__printf_veneer>
	       printf("local version: %u \r\n", local_copy_of_MW_state);
    1840:	7dbb      	ldrb	r3, [r7, #22]
    1842:	4619      	mov	r1, r3
    1844:	480e      	ldr	r0, [pc, #56]	; (1880 <MW_update+0x35c>)
    1846:	f000 f98f 	bl	1b68 <__printf_veneer>
    184a:	e006      	b.n	185a <MW_update+0x336>
			break; //no action to take
    184c:	bf00      	nop
    184e:	e004      	b.n	185a <MW_update+0x336>
			break;
    1850:	bf00      	nop
    1852:	e002      	b.n	185a <MW_update+0x336>
			break;
    1854:	bf00      	nop
    1856:	e000      	b.n	185a <MW_update+0x336>
			break;
    1858:	bf00      	nop
	}
    return(action_taken);
    185a:	7dfb      	ldrb	r3, [r7, #23]
}
    185c:	4618      	mov	r0, r3
    185e:	3718      	adds	r7, #24
    1860:	46bd      	mov	sp, r7
    1862:	bd80      	pop	{r7, pc}
    1864:	200005f6 	.word	0x200005f6
    1868:	2000001c 	.word	0x2000001c
    186c:	42c80000 	.word	0x42c80000
    1870:	200005f8 	.word	0x200005f8
    1874:	0801c4f0 	.word	0x0801c4f0
    1878:	20000648 	.word	0x20000648
    187c:	0801c520 	.word	0x0801c520
    1880:	0801c54c 	.word	0x0801c54c

00001884 <MW_frequency_toggle>:

/* Function to check MW settling time
 * Toggles between two MW frequencies
 */
void MW_frequency_toggle (const double f_one, const double f_two) {
    1884:	b580      	push	{r7, lr}
    1886:	b090      	sub	sp, #64	; 0x40
    1888:	af02      	add	r7, sp, #8
    188a:	ed87 0b02 	vstr	d0, [r7, #8]
    188e:	ed87 1b00 	vstr	d1, [r7]
	printf("MW frequency toggling experiment\r\n");
    1892:	4869      	ldr	r0, [pc, #420]	; (1a38 <MW_frequency_toggle+0x1b4>)
    1894:	f000 f964 	bl	1b60 <__puts_veneer>
	printf("Toggling between %.10g and %.10g GHz\r\n", f_one/1000000000, f_two/1000000000);
    1898:	ed97 7b02 	vldr	d7, [r7, #8]
    189c:	ed9f 6b5e 	vldr	d6, [pc, #376]	; 1a18 <MW_frequency_toggle+0x194>
    18a0:	ee87 4b06 	vdiv.f64	d4, d7, d6
    18a4:	ed97 6b00 	vldr	d6, [r7]
    18a8:	ed9f 5b5b 	vldr	d5, [pc, #364]	; 1a18 <MW_frequency_toggle+0x194>
    18ac:	ee86 7b05 	vdiv.f64	d7, d6, d5
    18b0:	ed8d 7b00 	vstr	d7, [sp]
    18b4:	ec53 2b14 	vmov	r2, r3, d4
    18b8:	4860      	ldr	r0, [pc, #384]	; (1a3c <MW_frequency_toggle+0x1b8>)
    18ba:	f000 f955 	bl	1b68 <__printf_veneer>

	/* For the k divider we need to find the smallest even integer or use a max of 62*/
	uint32_t k_one = VCO_MAX_FREQ / f_one;
    18be:	ed9f 5b58 	vldr	d5, [pc, #352]	; 1a20 <MW_frequency_toggle+0x19c>
    18c2:	ed97 6b02 	vldr	d6, [r7, #8]
    18c6:	ee85 7b06 	vdiv.f64	d7, d5, d6
    18ca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    18ce:	ee17 3a90 	vmov	r3, s15
    18d2:	637b      	str	r3, [r7, #52]	; 0x34
	if (k_one != 1) {
    18d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    18d6:	2b01      	cmp	r3, #1
    18d8:	d00b      	beq.n	18f2 <MW_frequency_toggle+0x6e>
		while (k_one > 62 || k_one % 2) {
    18da:	e002      	b.n	18e2 <MW_frequency_toggle+0x5e>
			k_one--;
    18dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    18de:	3b01      	subs	r3, #1
    18e0:	637b      	str	r3, [r7, #52]	; 0x34
		while (k_one > 62 || k_one % 2) {
    18e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    18e4:	2b3e      	cmp	r3, #62	; 0x3e
    18e6:	d8f9      	bhi.n	18dc <MW_frequency_toggle+0x58>
    18e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    18ea:	f003 0301 	and.w	r3, r3, #1
    18ee:	2b00      	cmp	r3, #0
    18f0:	d1f4      	bne.n	18dc <MW_frequency_toggle+0x58>
		}
	}
	uint32_t k_two = VCO_MAX_FREQ / f_two;
    18f2:	ed9f 5b4b 	vldr	d5, [pc, #300]	; 1a20 <MW_frequency_toggle+0x19c>
    18f6:	ed97 6b00 	vldr	d6, [r7]
    18fa:	ee85 7b06 	vdiv.f64	d7, d5, d6
    18fe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1902:	ee17 3a90 	vmov	r3, s15
    1906:	633b      	str	r3, [r7, #48]	; 0x30
	if (k_two != 1) {
    1908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    190a:	2b01      	cmp	r3, #1
    190c:	d00b      	beq.n	1926 <MW_frequency_toggle+0xa2>
		while (k_two > 62 || k_two % 2) {
    190e:	e002      	b.n	1916 <MW_frequency_toggle+0x92>
			k_two--;
    1910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1912:	3b01      	subs	r3, #1
    1914:	633b      	str	r3, [r7, #48]	; 0x30
		while (k_two > 62 || k_two % 2) {
    1916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1918:	2b3e      	cmp	r3, #62	; 0x3e
    191a:	d8f9      	bhi.n	1910 <MW_frequency_toggle+0x8c>
    191c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    191e:	f003 0301 	and.w	r3, r3, #1
    1922:	2b00      	cmp	r3, #0
    1924:	d1f4      	bne.n	1910 <MW_frequency_toggle+0x8c>
		}
	}

	const double N_one = ((f_one * k_one) / REF_FREQ);
    1926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1928:	ee07 3a90 	vmov	s15, r3
    192c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    1930:	ed97 7b02 	vldr	d7, [r7, #8]
    1934:	ee26 6b07 	vmul.f64	d6, d6, d7
    1938:	ed9f 5b3b 	vldr	d5, [pc, #236]	; 1a28 <MW_frequency_toggle+0x1a4>
    193c:	ee86 7b05 	vdiv.f64	d7, d6, d5
    1940:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	const double N_two = ((f_two * k_two) / REF_FREQ);
    1944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1946:	ee07 3a90 	vmov	s15, r3
    194a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    194e:	ed97 7b00 	vldr	d7, [r7]
    1952:	ee26 6b07 	vmul.f64	d6, d6, d7
    1956:	ed9f 5b34 	vldr	d5, [pc, #208]	; 1a28 <MW_frequency_toggle+0x1a4>
    195a:	ee86 7b05 	vdiv.f64	d7, d6, d5
    195e:	ed87 7b08 	vstr	d7, [r7, #32]

	/* Extract the fractional and integer parts */
	const uint32_t N_one_INT = N_one;
    1962:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
    1966:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    196a:	ee17 3a90 	vmov	r3, s15
    196e:	61fb      	str	r3, [r7, #28]
	const uint32_t N_one_FRAC = ((N_one - N_one_INT) * (1 << 24)) + 0.5;
    1970:	69fb      	ldr	r3, [r7, #28]
    1972:	ee07 3a90 	vmov	s15, r3
    1976:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    197a:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
    197e:	ee36 7b47 	vsub.f64	d7, d6, d7
    1982:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 1a30 <MW_frequency_toggle+0x1ac>
    1986:	ee27 7b06 	vmul.f64	d7, d7, d6
    198a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    198e:	ee37 7b06 	vadd.f64	d7, d7, d6
    1992:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1996:	ee17 3a90 	vmov	r3, s15
    199a:	61bb      	str	r3, [r7, #24]
	const uint32_t N_two_INT = N_two;
    199c:	ed97 7b08 	vldr	d7, [r7, #32]
    19a0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    19a4:	ee17 3a90 	vmov	r3, s15
    19a8:	617b      	str	r3, [r7, #20]
	const uint32_t N_two_FRAC = ((N_two - N_two_INT) * (1 << 24)) + 0.5;
    19aa:	697b      	ldr	r3, [r7, #20]
    19ac:	ee07 3a90 	vmov	s15, r3
    19b0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    19b4:	ed97 6b08 	vldr	d6, [r7, #32]
    19b8:	ee36 7b47 	vsub.f64	d7, d6, d7
    19bc:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 1a30 <MW_frequency_toggle+0x1ac>
    19c0:	ee27 7b06 	vmul.f64	d7, d7, d6
    19c4:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    19c8:	ee37 7b06 	vadd.f64	d7, d7, d6
    19cc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    19d0:	ee17 3a90 	vmov	r3, s15
    19d4:	613b      	str	r3, [r7, #16]

	while (1) {
	set_freq_regs(N_one_INT, N_one_FRAC, k_one); //Program necessary values for f_one
    19d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    19d8:	69b9      	ldr	r1, [r7, #24]
    19da:	69f8      	ldr	r0, [r7, #28]
    19dc:	f7ff f8a0 	bl	b20 <set_freq_regs>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
    19e0:	2200      	movs	r2, #0
    19e2:	2101      	movs	r1, #1
    19e4:	4816      	ldr	r0, [pc, #88]	; (1a40 <MW_frequency_toggle+0x1bc>)
    19e6:	f000 f8ab 	bl	1b40 <__HAL_GPIO_WritePin_veneer>
	timer_delay(SLOW_TIMER, 100); //10ms delay
    19ea:	4b16      	ldr	r3, [pc, #88]	; (1a44 <MW_frequency_toggle+0x1c0>)
    19ec:	681b      	ldr	r3, [r3, #0]
    19ee:	2164      	movs	r1, #100	; 0x64
    19f0:	4618      	mov	r0, r3
    19f2:	f000 f88b 	bl	1b0c <timer_delay>
	set_freq_regs(N_two_INT, N_two_FRAC, k_two); //Program necessary values for f_two
    19f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    19f8:	6939      	ldr	r1, [r7, #16]
    19fa:	6978      	ldr	r0, [r7, #20]
    19fc:	f7ff f890 	bl	b20 <set_freq_regs>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
    1a00:	2201      	movs	r2, #1
    1a02:	2101      	movs	r1, #1
    1a04:	480e      	ldr	r0, [pc, #56]	; (1a40 <MW_frequency_toggle+0x1bc>)
    1a06:	f000 f89b 	bl	1b40 <__HAL_GPIO_WritePin_veneer>
	timer_delay(SLOW_TIMER, 100); //10ms delay
    1a0a:	4b0e      	ldr	r3, [pc, #56]	; (1a44 <MW_frequency_toggle+0x1c0>)
    1a0c:	681b      	ldr	r3, [r3, #0]
    1a0e:	2164      	movs	r1, #100	; 0x64
    1a10:	4618      	mov	r0, r3
    1a12:	f000 f87b 	bl	1b0c <timer_delay>
	set_freq_regs(N_one_INT, N_one_FRAC, k_one); //Program necessary values for f_one
    1a16:	e7de      	b.n	19d6 <MW_frequency_toggle+0x152>
    1a18:	00000000 	.word	0x00000000
    1a1c:	41cdcd65 	.word	0x41cdcd65
    1a20:	20000000 	.word	0x20000000
    1a24:	41ee8c21 	.word	0x41ee8c21
    1a28:	00000000 	.word	0x00000000
    1a2c:	4187d784 	.word	0x4187d784
    1a30:	00000000 	.word	0x00000000
    1a34:	41700000 	.word	0x41700000
    1a38:	0801c564 	.word	0x0801c564
    1a3c:	0801c588 	.word	0x0801c588
    1a40:	58021800 	.word	0x58021800
    1a44:	20000018 	.word	0x20000018

00001a48 <set_SDO_output>:
/* Selects SDO pin connectivity/functionality
 * By default, the SDO pin will output 'Lock detect' but can be connected
 * to other internal signals. See table 2.15 of HMC835 datasheet (v04.1113)
 * for more details all options
 */
 void set_SDO_output(const uint32_t GPO_setting) {
    1a48:	b580      	push	{r7, lr}
    1a4a:	b084      	sub	sp, #16
    1a4c:	af00      	add	r7, sp, #0
    1a4e:	6078      	str	r0, [r7, #4]
	//Default output on SDO pin is 'Lock detect output', value 0x01
	//VCO divider is 0x0A
	//See table 2.15 of HMC835 datasheet for more details (v04.1113)
	uint32_t read_data = 0x0;
    1a50:	2300      	movs	r3, #0
    1a52:	60fb      	str	r3, [r7, #12]

	if (GPO_setting > 31) {
    1a54:	687b      	ldr	r3, [r7, #4]
    1a56:	2b1f      	cmp	r3, #31
    1a58:	d904      	bls.n	1a64 <set_SDO_output+0x1c>
		printf("SDO pin value must be less that 32\r\n");
    1a5a:	480d      	ldr	r0, [pc, #52]	; (1a90 <set_SDO_output+0x48>)
    1a5c:	f000 f880 	bl	1b60 <__puts_veneer>
		Error_Handler();
    1a60:	f000 f886 	bl	1b70 <__Error_Handler_veneer>
	}
	read_data = synth_readreg(GPO_REGISTER); // Get the current value.
    1a64:	200f      	movs	r0, #15
    1a66:	f7fe fec5 	bl	7f4 <synth_readreg>
    1a6a:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFFE0; // Zero the first 5 LSBs.
    1a6c:	68fb      	ldr	r3, [r7, #12]
    1a6e:	f023 031f 	bic.w	r3, r3, #31
    1a72:	60fb      	str	r3, [r7, #12]
	//read_data |= 0x0A; //Select VCO divider output
	read_data |= GPO_setting; //Select GPO output dependent on function input value
    1a74:	68fa      	ldr	r2, [r7, #12]
    1a76:	687b      	ldr	r3, [r7, #4]
    1a78:	4313      	orrs	r3, r2
    1a7a:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GPO_REGISTER, 0x0, VERIFY); // Update the GPO register.
    1a7c:	2301      	movs	r3, #1
    1a7e:	2200      	movs	r2, #0
    1a80:	210f      	movs	r1, #15
    1a82:	68f8      	ldr	r0, [r7, #12]
    1a84:	f7fe fe3c 	bl	700 <synth_writereg>
}
    1a88:	bf00      	nop
    1a8a:	3710      	adds	r7, #16
    1a8c:	46bd      	mov	sp, r7
    1a8e:	bd80      	pop	{r7, pc}
    1a90:	0801c5b0 	.word	0x0801c5b0

00001a94 <start_timer>:

/**
  * @brief  Starts a timer.
  * @retval uint32_t
  */
uint32_t start_timer(TIM_TypeDef * timer) {
    1a94:	b480      	push	{r7}
    1a96:	b083      	sub	sp, #12
    1a98:	af00      	add	r7, sp, #0
    1a9a:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
    1a9c:	687b      	ldr	r3, [r7, #4]
    1a9e:	681b      	ldr	r3, [r3, #0]
    1aa0:	f023 0201 	bic.w	r2, r3, #1
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	601a      	str	r2, [r3, #0]
	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	695b      	ldr	r3, [r3, #20]
    1aac:	f043 0201 	orr.w	r2, r3, #1
    1ab0:	687b      	ldr	r3, [r7, #4]
    1ab2:	615a      	str	r2, [r3, #20]
	timer->CR1 |= TIM_CR1_CEN;
    1ab4:	687b      	ldr	r3, [r7, #4]
    1ab6:	681b      	ldr	r3, [r3, #0]
    1ab8:	f043 0201 	orr.w	r2, r3, #1
    1abc:	687b      	ldr	r3, [r7, #4]
    1abe:	601a      	str	r2, [r3, #0]
	//printf("Started timer with returned CNT value: %ld \r\n", timer->CNT);
	return timer->CNT;
    1ac0:	687b      	ldr	r3, [r7, #4]
    1ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    1ac4:	4618      	mov	r0, r3
    1ac6:	370c      	adds	r7, #12
    1ac8:	46bd      	mov	sp, r7
    1aca:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ace:	4770      	bx	lr

00001ad0 <stop_timer>:

/**
  * @brief  Stops a timer.
  * @retval uint32_t
  */
uint32_t stop_timer(TIM_TypeDef *timer) {
    1ad0:	b480      	push	{r7}
    1ad2:	b083      	sub	sp, #12
    1ad4:	af00      	add	r7, sp, #0
    1ad6:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
    1ad8:	687b      	ldr	r3, [r7, #4]
    1ada:	681b      	ldr	r3, [r3, #0]
    1adc:	f023 0201 	bic.w	r2, r3, #1
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	601a      	str	r2, [r3, #0]
	return timer->CNT;
    1ae4:	687b      	ldr	r3, [r7, #4]
    1ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    1ae8:	4618      	mov	r0, r3
    1aea:	370c      	adds	r7, #12
    1aec:	46bd      	mov	sp, r7
    1aee:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af2:	4770      	bx	lr

00001af4 <check_timer>:
/**
  * @brief  Returns timer counter value
  * @param  Timer
  * @retval Counter value
  */
uint32_t check_timer(TIM_TypeDef *timer) {
    1af4:	b480      	push	{r7}
    1af6:	b083      	sub	sp, #12
    1af8:	af00      	add	r7, sp, #0
    1afa:	6078      	str	r0, [r7, #4]

	return timer->CNT;
    1afc:	687b      	ldr	r3, [r7, #4]
    1afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    1b00:	4618      	mov	r0, r3
    1b02:	370c      	adds	r7, #12
    1b04:	46bd      	mov	sp, r7
    1b06:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b0a:	4770      	bx	lr

00001b0c <timer_delay>:

/**
  * @brief  Uses a H/W timer to loop for the cycle count requested.
  */
void timer_delay(TIM_TypeDef *timer, const uint32_t delay_count){
    1b0c:	b580      	push	{r7, lr}
    1b0e:	b084      	sub	sp, #16
    1b10:	af00      	add	r7, sp, #0
    1b12:	6078      	str	r0, [r7, #4]
    1b14:	6039      	str	r1, [r7, #0]
	/* Note that we don't consider overflow.
	 * FAST_TIMER will take approximately 65 ms to overflow.
	 * SLOW_TIMER will take 650ms
	 * MW_TIMER and SWEEP_TIMER will take 71 minutes */

	uint32_t start = start_timer(timer);
    1b16:	6878      	ldr	r0, [r7, #4]
    1b18:	f7ff ffbc 	bl	1a94 <start_timer>
    1b1c:	60f8      	str	r0, [r7, #12]
//	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
//	timer->CR1 |= TIM_CR1_CEN; // Enable the timer
//	uint32_t start = timer->CNT; // Get the start value of the timer

//	while((timer->CNT - start) < delay_count){} // Loop until delay_us has expired
	while(timer->CNT < delay_count){} // Loop until delay_us has expired
    1b1e:	bf00      	nop
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1b24:	683a      	ldr	r2, [r7, #0]
    1b26:	429a      	cmp	r2, r3
    1b28:	d8fa      	bhi.n	1b20 <timer_delay+0x14>

	stop_timer(timer);
    1b2a:	6878      	ldr	r0, [r7, #4]
    1b2c:	f7ff ffd0 	bl	1ad0 <stop_timer>
//	timer->CR1 &= ~(TIM_CR1_CEN); // Disable the timer

}
    1b30:	bf00      	nop
    1b32:	3710      	adds	r7, #16
    1b34:	46bd      	mov	sp, r7
    1b36:	bd80      	pop	{r7, pc}

00001b38 <__HAL_DAC_SetValue_veneer>:
    1b38:	f85f f000 	ldr.w	pc, [pc]	; 1b3c <__HAL_DAC_SetValue_veneer+0x4>
    1b3c:	08005fe5 	.word	0x08005fe5

00001b40 <__HAL_GPIO_WritePin_veneer>:
    1b40:	f85f f000 	ldr.w	pc, [pc]	; 1b44 <__HAL_GPIO_WritePin_veneer+0x4>
    1b44:	08007c3d 	.word	0x08007c3d

00001b48 <__HAL_Delay_veneer>:
    1b48:	f85f f000 	ldr.w	pc, [pc]	; 1b4c <__HAL_Delay_veneer+0x4>
    1b4c:	08004065 	.word	0x08004065

00001b50 <__HAL_GPIO_TogglePin_veneer>:
    1b50:	f85f f000 	ldr.w	pc, [pc]	; 1b54 <__HAL_GPIO_TogglePin_veneer+0x4>
    1b54:	08007c6f 	.word	0x08007c6f

00001b58 <__HAL_GPIO_ReadPin_veneer>:
    1b58:	f85f f000 	ldr.w	pc, [pc]	; 1b5c <__HAL_GPIO_ReadPin_veneer+0x4>
    1b5c:	08007c0d 	.word	0x08007c0d

00001b60 <__puts_veneer>:
    1b60:	f85f f000 	ldr.w	pc, [pc]	; 1b64 <__puts_veneer+0x4>
    1b64:	08019d6d 	.word	0x08019d6d

00001b68 <__printf_veneer>:
    1b68:	f85f f000 	ldr.w	pc, [pc]	; 1b6c <__printf_veneer+0x4>
    1b6c:	08019ca1 	.word	0x08019ca1

00001b70 <__Error_Handler_veneer>:
    1b70:	f85f f000 	ldr.w	pc, [pc]	; 1b74 <__Error_Handler_veneer+0x4>
    1b74:	080032e9 	.word	0x080032e9

Disassembly of section .text:

08001e10 <__do_global_dtors_aux>:
 8001e10:	b510      	push	{r4, lr}
 8001e12:	4c05      	ldr	r4, [pc, #20]	; (8001e28 <__do_global_dtors_aux+0x18>)
 8001e14:	7823      	ldrb	r3, [r4, #0]
 8001e16:	b933      	cbnz	r3, 8001e26 <__do_global_dtors_aux+0x16>
 8001e18:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <__do_global_dtors_aux+0x1c>)
 8001e1a:	b113      	cbz	r3, 8001e22 <__do_global_dtors_aux+0x12>
 8001e1c:	4804      	ldr	r0, [pc, #16]	; (8001e30 <__do_global_dtors_aux+0x20>)
 8001e1e:	f3af 8000 	nop.w
 8001e22:	2301      	movs	r3, #1
 8001e24:	7023      	strb	r3, [r4, #0]
 8001e26:	bd10      	pop	{r4, pc}
 8001e28:	20000230 	.word	0x20000230
 8001e2c:	00000000 	.word	0x00000000
 8001e30:	0801bba8 	.word	0x0801bba8

08001e34 <frame_dummy>:
 8001e34:	b508      	push	{r3, lr}
 8001e36:	4b03      	ldr	r3, [pc, #12]	; (8001e44 <frame_dummy+0x10>)
 8001e38:	b11b      	cbz	r3, 8001e42 <frame_dummy+0xe>
 8001e3a:	4903      	ldr	r1, [pc, #12]	; (8001e48 <frame_dummy+0x14>)
 8001e3c:	4803      	ldr	r0, [pc, #12]	; (8001e4c <frame_dummy+0x18>)
 8001e3e:	f3af 8000 	nop.w
 8001e42:	bd08      	pop	{r3, pc}
 8001e44:	00000000 	.word	0x00000000
 8001e48:	20000234 	.word	0x20000234
 8001e4c:	0801bba8 	.word	0x0801bba8

08001e50 <memchr>:
 8001e50:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001e54:	2a10      	cmp	r2, #16
 8001e56:	db2b      	blt.n	8001eb0 <memchr+0x60>
 8001e58:	f010 0f07 	tst.w	r0, #7
 8001e5c:	d008      	beq.n	8001e70 <memchr+0x20>
 8001e5e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001e62:	3a01      	subs	r2, #1
 8001e64:	428b      	cmp	r3, r1
 8001e66:	d02d      	beq.n	8001ec4 <memchr+0x74>
 8001e68:	f010 0f07 	tst.w	r0, #7
 8001e6c:	b342      	cbz	r2, 8001ec0 <memchr+0x70>
 8001e6e:	d1f6      	bne.n	8001e5e <memchr+0xe>
 8001e70:	b4f0      	push	{r4, r5, r6, r7}
 8001e72:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8001e76:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8001e7a:	f022 0407 	bic.w	r4, r2, #7
 8001e7e:	f07f 0700 	mvns.w	r7, #0
 8001e82:	2300      	movs	r3, #0
 8001e84:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8001e88:	3c08      	subs	r4, #8
 8001e8a:	ea85 0501 	eor.w	r5, r5, r1
 8001e8e:	ea86 0601 	eor.w	r6, r6, r1
 8001e92:	fa85 f547 	uadd8	r5, r5, r7
 8001e96:	faa3 f587 	sel	r5, r3, r7
 8001e9a:	fa86 f647 	uadd8	r6, r6, r7
 8001e9e:	faa5 f687 	sel	r6, r5, r7
 8001ea2:	b98e      	cbnz	r6, 8001ec8 <memchr+0x78>
 8001ea4:	d1ee      	bne.n	8001e84 <memchr+0x34>
 8001ea6:	bcf0      	pop	{r4, r5, r6, r7}
 8001ea8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001eac:	f002 0207 	and.w	r2, r2, #7
 8001eb0:	b132      	cbz	r2, 8001ec0 <memchr+0x70>
 8001eb2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001eb6:	3a01      	subs	r2, #1
 8001eb8:	ea83 0301 	eor.w	r3, r3, r1
 8001ebc:	b113      	cbz	r3, 8001ec4 <memchr+0x74>
 8001ebe:	d1f8      	bne.n	8001eb2 <memchr+0x62>
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	4770      	bx	lr
 8001ec4:	3801      	subs	r0, #1
 8001ec6:	4770      	bx	lr
 8001ec8:	2d00      	cmp	r5, #0
 8001eca:	bf06      	itte	eq
 8001ecc:	4635      	moveq	r5, r6
 8001ece:	3803      	subeq	r0, #3
 8001ed0:	3807      	subne	r0, #7
 8001ed2:	f015 0f01 	tst.w	r5, #1
 8001ed6:	d107      	bne.n	8001ee8 <memchr+0x98>
 8001ed8:	3001      	adds	r0, #1
 8001eda:	f415 7f80 	tst.w	r5, #256	; 0x100
 8001ede:	bf02      	ittt	eq
 8001ee0:	3001      	addeq	r0, #1
 8001ee2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8001ee6:	3001      	addeq	r0, #1
 8001ee8:	bcf0      	pop	{r4, r5, r6, r7}
 8001eea:	3801      	subs	r0, #1
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop

08001ef0 <strlen>:
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001ef6:	2a00      	cmp	r2, #0
 8001ef8:	d1fb      	bne.n	8001ef2 <strlen+0x2>
 8001efa:	1a18      	subs	r0, r3, r0
 8001efc:	3801      	subs	r0, #1
 8001efe:	4770      	bx	lr

08001f00 <__aeabi_uldivmod>:
 8001f00:	b953      	cbnz	r3, 8001f18 <__aeabi_uldivmod+0x18>
 8001f02:	b94a      	cbnz	r2, 8001f18 <__aeabi_uldivmod+0x18>
 8001f04:	2900      	cmp	r1, #0
 8001f06:	bf08      	it	eq
 8001f08:	2800      	cmpeq	r0, #0
 8001f0a:	bf1c      	itt	ne
 8001f0c:	f04f 31ff 	movne.w	r1, #4294967295
 8001f10:	f04f 30ff 	movne.w	r0, #4294967295
 8001f14:	f000 b970 	b.w	80021f8 <__aeabi_idiv0>
 8001f18:	f1ad 0c08 	sub.w	ip, sp, #8
 8001f1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001f20:	f000 f806 	bl	8001f30 <__udivmoddi4>
 8001f24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001f28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001f2c:	b004      	add	sp, #16
 8001f2e:	4770      	bx	lr

08001f30 <__udivmoddi4>:
 8001f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f34:	9e08      	ldr	r6, [sp, #32]
 8001f36:	460d      	mov	r5, r1
 8001f38:	4604      	mov	r4, r0
 8001f3a:	460f      	mov	r7, r1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d14a      	bne.n	8001fd6 <__udivmoddi4+0xa6>
 8001f40:	428a      	cmp	r2, r1
 8001f42:	4694      	mov	ip, r2
 8001f44:	d965      	bls.n	8002012 <__udivmoddi4+0xe2>
 8001f46:	fab2 f382 	clz	r3, r2
 8001f4a:	b143      	cbz	r3, 8001f5e <__udivmoddi4+0x2e>
 8001f4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8001f50:	f1c3 0220 	rsb	r2, r3, #32
 8001f54:	409f      	lsls	r7, r3
 8001f56:	fa20 f202 	lsr.w	r2, r0, r2
 8001f5a:	4317      	orrs	r7, r2
 8001f5c:	409c      	lsls	r4, r3
 8001f5e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001f62:	fa1f f58c 	uxth.w	r5, ip
 8001f66:	fbb7 f1fe 	udiv	r1, r7, lr
 8001f6a:	0c22      	lsrs	r2, r4, #16
 8001f6c:	fb0e 7711 	mls	r7, lr, r1, r7
 8001f70:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8001f74:	fb01 f005 	mul.w	r0, r1, r5
 8001f78:	4290      	cmp	r0, r2
 8001f7a:	d90a      	bls.n	8001f92 <__udivmoddi4+0x62>
 8001f7c:	eb1c 0202 	adds.w	r2, ip, r2
 8001f80:	f101 37ff 	add.w	r7, r1, #4294967295
 8001f84:	f080 811c 	bcs.w	80021c0 <__udivmoddi4+0x290>
 8001f88:	4290      	cmp	r0, r2
 8001f8a:	f240 8119 	bls.w	80021c0 <__udivmoddi4+0x290>
 8001f8e:	3902      	subs	r1, #2
 8001f90:	4462      	add	r2, ip
 8001f92:	1a12      	subs	r2, r2, r0
 8001f94:	b2a4      	uxth	r4, r4
 8001f96:	fbb2 f0fe 	udiv	r0, r2, lr
 8001f9a:	fb0e 2210 	mls	r2, lr, r0, r2
 8001f9e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001fa2:	fb00 f505 	mul.w	r5, r0, r5
 8001fa6:	42a5      	cmp	r5, r4
 8001fa8:	d90a      	bls.n	8001fc0 <__udivmoddi4+0x90>
 8001faa:	eb1c 0404 	adds.w	r4, ip, r4
 8001fae:	f100 32ff 	add.w	r2, r0, #4294967295
 8001fb2:	f080 8107 	bcs.w	80021c4 <__udivmoddi4+0x294>
 8001fb6:	42a5      	cmp	r5, r4
 8001fb8:	f240 8104 	bls.w	80021c4 <__udivmoddi4+0x294>
 8001fbc:	4464      	add	r4, ip
 8001fbe:	3802      	subs	r0, #2
 8001fc0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001fc4:	1b64      	subs	r4, r4, r5
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	b11e      	cbz	r6, 8001fd2 <__udivmoddi4+0xa2>
 8001fca:	40dc      	lsrs	r4, r3
 8001fcc:	2300      	movs	r3, #0
 8001fce:	e9c6 4300 	strd	r4, r3, [r6]
 8001fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fd6:	428b      	cmp	r3, r1
 8001fd8:	d908      	bls.n	8001fec <__udivmoddi4+0xbc>
 8001fda:	2e00      	cmp	r6, #0
 8001fdc:	f000 80ed 	beq.w	80021ba <__udivmoddi4+0x28a>
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	e9c6 0500 	strd	r0, r5, [r6]
 8001fe6:	4608      	mov	r0, r1
 8001fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fec:	fab3 f183 	clz	r1, r3
 8001ff0:	2900      	cmp	r1, #0
 8001ff2:	d149      	bne.n	8002088 <__udivmoddi4+0x158>
 8001ff4:	42ab      	cmp	r3, r5
 8001ff6:	d302      	bcc.n	8001ffe <__udivmoddi4+0xce>
 8001ff8:	4282      	cmp	r2, r0
 8001ffa:	f200 80f8 	bhi.w	80021ee <__udivmoddi4+0x2be>
 8001ffe:	1a84      	subs	r4, r0, r2
 8002000:	eb65 0203 	sbc.w	r2, r5, r3
 8002004:	2001      	movs	r0, #1
 8002006:	4617      	mov	r7, r2
 8002008:	2e00      	cmp	r6, #0
 800200a:	d0e2      	beq.n	8001fd2 <__udivmoddi4+0xa2>
 800200c:	e9c6 4700 	strd	r4, r7, [r6]
 8002010:	e7df      	b.n	8001fd2 <__udivmoddi4+0xa2>
 8002012:	b902      	cbnz	r2, 8002016 <__udivmoddi4+0xe6>
 8002014:	deff      	udf	#255	; 0xff
 8002016:	fab2 f382 	clz	r3, r2
 800201a:	2b00      	cmp	r3, #0
 800201c:	f040 8090 	bne.w	8002140 <__udivmoddi4+0x210>
 8002020:	1a8a      	subs	r2, r1, r2
 8002022:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8002026:	fa1f fe8c 	uxth.w	lr, ip
 800202a:	2101      	movs	r1, #1
 800202c:	fbb2 f5f7 	udiv	r5, r2, r7
 8002030:	fb07 2015 	mls	r0, r7, r5, r2
 8002034:	0c22      	lsrs	r2, r4, #16
 8002036:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800203a:	fb0e f005 	mul.w	r0, lr, r5
 800203e:	4290      	cmp	r0, r2
 8002040:	d908      	bls.n	8002054 <__udivmoddi4+0x124>
 8002042:	eb1c 0202 	adds.w	r2, ip, r2
 8002046:	f105 38ff 	add.w	r8, r5, #4294967295
 800204a:	d202      	bcs.n	8002052 <__udivmoddi4+0x122>
 800204c:	4290      	cmp	r0, r2
 800204e:	f200 80cb 	bhi.w	80021e8 <__udivmoddi4+0x2b8>
 8002052:	4645      	mov	r5, r8
 8002054:	1a12      	subs	r2, r2, r0
 8002056:	b2a4      	uxth	r4, r4
 8002058:	fbb2 f0f7 	udiv	r0, r2, r7
 800205c:	fb07 2210 	mls	r2, r7, r0, r2
 8002060:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8002064:	fb0e fe00 	mul.w	lr, lr, r0
 8002068:	45a6      	cmp	lr, r4
 800206a:	d908      	bls.n	800207e <__udivmoddi4+0x14e>
 800206c:	eb1c 0404 	adds.w	r4, ip, r4
 8002070:	f100 32ff 	add.w	r2, r0, #4294967295
 8002074:	d202      	bcs.n	800207c <__udivmoddi4+0x14c>
 8002076:	45a6      	cmp	lr, r4
 8002078:	f200 80bb 	bhi.w	80021f2 <__udivmoddi4+0x2c2>
 800207c:	4610      	mov	r0, r2
 800207e:	eba4 040e 	sub.w	r4, r4, lr
 8002082:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8002086:	e79f      	b.n	8001fc8 <__udivmoddi4+0x98>
 8002088:	f1c1 0720 	rsb	r7, r1, #32
 800208c:	408b      	lsls	r3, r1
 800208e:	fa22 fc07 	lsr.w	ip, r2, r7
 8002092:	ea4c 0c03 	orr.w	ip, ip, r3
 8002096:	fa05 f401 	lsl.w	r4, r5, r1
 800209a:	fa20 f307 	lsr.w	r3, r0, r7
 800209e:	40fd      	lsrs	r5, r7
 80020a0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80020a4:	4323      	orrs	r3, r4
 80020a6:	fbb5 f8f9 	udiv	r8, r5, r9
 80020aa:	fa1f fe8c 	uxth.w	lr, ip
 80020ae:	fb09 5518 	mls	r5, r9, r8, r5
 80020b2:	0c1c      	lsrs	r4, r3, #16
 80020b4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80020b8:	fb08 f50e 	mul.w	r5, r8, lr
 80020bc:	42a5      	cmp	r5, r4
 80020be:	fa02 f201 	lsl.w	r2, r2, r1
 80020c2:	fa00 f001 	lsl.w	r0, r0, r1
 80020c6:	d90b      	bls.n	80020e0 <__udivmoddi4+0x1b0>
 80020c8:	eb1c 0404 	adds.w	r4, ip, r4
 80020cc:	f108 3aff 	add.w	sl, r8, #4294967295
 80020d0:	f080 8088 	bcs.w	80021e4 <__udivmoddi4+0x2b4>
 80020d4:	42a5      	cmp	r5, r4
 80020d6:	f240 8085 	bls.w	80021e4 <__udivmoddi4+0x2b4>
 80020da:	f1a8 0802 	sub.w	r8, r8, #2
 80020de:	4464      	add	r4, ip
 80020e0:	1b64      	subs	r4, r4, r5
 80020e2:	b29d      	uxth	r5, r3
 80020e4:	fbb4 f3f9 	udiv	r3, r4, r9
 80020e8:	fb09 4413 	mls	r4, r9, r3, r4
 80020ec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80020f0:	fb03 fe0e 	mul.w	lr, r3, lr
 80020f4:	45a6      	cmp	lr, r4
 80020f6:	d908      	bls.n	800210a <__udivmoddi4+0x1da>
 80020f8:	eb1c 0404 	adds.w	r4, ip, r4
 80020fc:	f103 35ff 	add.w	r5, r3, #4294967295
 8002100:	d26c      	bcs.n	80021dc <__udivmoddi4+0x2ac>
 8002102:	45a6      	cmp	lr, r4
 8002104:	d96a      	bls.n	80021dc <__udivmoddi4+0x2ac>
 8002106:	3b02      	subs	r3, #2
 8002108:	4464      	add	r4, ip
 800210a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800210e:	fba3 9502 	umull	r9, r5, r3, r2
 8002112:	eba4 040e 	sub.w	r4, r4, lr
 8002116:	42ac      	cmp	r4, r5
 8002118:	46c8      	mov	r8, r9
 800211a:	46ae      	mov	lr, r5
 800211c:	d356      	bcc.n	80021cc <__udivmoddi4+0x29c>
 800211e:	d053      	beq.n	80021c8 <__udivmoddi4+0x298>
 8002120:	b156      	cbz	r6, 8002138 <__udivmoddi4+0x208>
 8002122:	ebb0 0208 	subs.w	r2, r0, r8
 8002126:	eb64 040e 	sbc.w	r4, r4, lr
 800212a:	fa04 f707 	lsl.w	r7, r4, r7
 800212e:	40ca      	lsrs	r2, r1
 8002130:	40cc      	lsrs	r4, r1
 8002132:	4317      	orrs	r7, r2
 8002134:	e9c6 7400 	strd	r7, r4, [r6]
 8002138:	4618      	mov	r0, r3
 800213a:	2100      	movs	r1, #0
 800213c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002140:	f1c3 0120 	rsb	r1, r3, #32
 8002144:	fa02 fc03 	lsl.w	ip, r2, r3
 8002148:	fa20 f201 	lsr.w	r2, r0, r1
 800214c:	fa25 f101 	lsr.w	r1, r5, r1
 8002150:	409d      	lsls	r5, r3
 8002152:	432a      	orrs	r2, r5
 8002154:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8002158:	fa1f fe8c 	uxth.w	lr, ip
 800215c:	fbb1 f0f7 	udiv	r0, r1, r7
 8002160:	fb07 1510 	mls	r5, r7, r0, r1
 8002164:	0c11      	lsrs	r1, r2, #16
 8002166:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800216a:	fb00 f50e 	mul.w	r5, r0, lr
 800216e:	428d      	cmp	r5, r1
 8002170:	fa04 f403 	lsl.w	r4, r4, r3
 8002174:	d908      	bls.n	8002188 <__udivmoddi4+0x258>
 8002176:	eb1c 0101 	adds.w	r1, ip, r1
 800217a:	f100 38ff 	add.w	r8, r0, #4294967295
 800217e:	d22f      	bcs.n	80021e0 <__udivmoddi4+0x2b0>
 8002180:	428d      	cmp	r5, r1
 8002182:	d92d      	bls.n	80021e0 <__udivmoddi4+0x2b0>
 8002184:	3802      	subs	r0, #2
 8002186:	4461      	add	r1, ip
 8002188:	1b49      	subs	r1, r1, r5
 800218a:	b292      	uxth	r2, r2
 800218c:	fbb1 f5f7 	udiv	r5, r1, r7
 8002190:	fb07 1115 	mls	r1, r7, r5, r1
 8002194:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002198:	fb05 f10e 	mul.w	r1, r5, lr
 800219c:	4291      	cmp	r1, r2
 800219e:	d908      	bls.n	80021b2 <__udivmoddi4+0x282>
 80021a0:	eb1c 0202 	adds.w	r2, ip, r2
 80021a4:	f105 38ff 	add.w	r8, r5, #4294967295
 80021a8:	d216      	bcs.n	80021d8 <__udivmoddi4+0x2a8>
 80021aa:	4291      	cmp	r1, r2
 80021ac:	d914      	bls.n	80021d8 <__udivmoddi4+0x2a8>
 80021ae:	3d02      	subs	r5, #2
 80021b0:	4462      	add	r2, ip
 80021b2:	1a52      	subs	r2, r2, r1
 80021b4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80021b8:	e738      	b.n	800202c <__udivmoddi4+0xfc>
 80021ba:	4631      	mov	r1, r6
 80021bc:	4630      	mov	r0, r6
 80021be:	e708      	b.n	8001fd2 <__udivmoddi4+0xa2>
 80021c0:	4639      	mov	r1, r7
 80021c2:	e6e6      	b.n	8001f92 <__udivmoddi4+0x62>
 80021c4:	4610      	mov	r0, r2
 80021c6:	e6fb      	b.n	8001fc0 <__udivmoddi4+0x90>
 80021c8:	4548      	cmp	r0, r9
 80021ca:	d2a9      	bcs.n	8002120 <__udivmoddi4+0x1f0>
 80021cc:	ebb9 0802 	subs.w	r8, r9, r2
 80021d0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80021d4:	3b01      	subs	r3, #1
 80021d6:	e7a3      	b.n	8002120 <__udivmoddi4+0x1f0>
 80021d8:	4645      	mov	r5, r8
 80021da:	e7ea      	b.n	80021b2 <__udivmoddi4+0x282>
 80021dc:	462b      	mov	r3, r5
 80021de:	e794      	b.n	800210a <__udivmoddi4+0x1da>
 80021e0:	4640      	mov	r0, r8
 80021e2:	e7d1      	b.n	8002188 <__udivmoddi4+0x258>
 80021e4:	46d0      	mov	r8, sl
 80021e6:	e77b      	b.n	80020e0 <__udivmoddi4+0x1b0>
 80021e8:	3d02      	subs	r5, #2
 80021ea:	4462      	add	r2, ip
 80021ec:	e732      	b.n	8002054 <__udivmoddi4+0x124>
 80021ee:	4608      	mov	r0, r1
 80021f0:	e70a      	b.n	8002008 <__udivmoddi4+0xd8>
 80021f2:	4464      	add	r4, ip
 80021f4:	3802      	subs	r0, #2
 80021f6:	e742      	b.n	800207e <__udivmoddi4+0x14e>

080021f8 <__aeabi_idiv0>:
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop

080021fc <__io_putchar>:
PUTCHAR_PROTOTYPE {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8002204:	1d39      	adds	r1, r7, #4
 8002206:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800220a:	2201      	movs	r2, #1
 800220c:	4803      	ldr	r0, [pc, #12]	; (800221c <__io_putchar+0x20>)
 800220e:	f00b fd07 	bl	800dc20 <HAL_UART_Transmit>
	return ch;
 8002212:	687b      	ldr	r3, [r7, #4]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	20000560 	.word	0x20000560

08002220 <main>:
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
  memcpy(&_sitcm, &_siitcm, ((void*) &_eitcm - (void*) &_sitcm));
 8002226:	4aaa      	ldr	r2, [pc, #680]	; (80024d0 <main+0x2b0>)
 8002228:	4baa      	ldr	r3, [pc, #680]	; (80024d4 <main+0x2b4>)
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	461a      	mov	r2, r3
 800222e:	49aa      	ldr	r1, [pc, #680]	; (80024d8 <main+0x2b8>)
 8002230:	48a8      	ldr	r0, [pc, #672]	; (80024d4 <main+0x2b4>)
 8002232:	f017 ff04 	bl	801a03e <memcpy>
  MPU_Config();
 8002236:	f001 f805 	bl	8003244 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800223a:	4ba8      	ldr	r3, [pc, #672]	; (80024dc <main+0x2bc>)
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d11b      	bne.n	800227e <main+0x5e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002246:	f3bf 8f4f 	dsb	sy
}
 800224a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800224c:	f3bf 8f6f 	isb	sy
}
 8002250:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002252:	4ba2      	ldr	r3, [pc, #648]	; (80024dc <main+0x2bc>)
 8002254:	2200      	movs	r2, #0
 8002256:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800225a:	f3bf 8f4f 	dsb	sy
}
 800225e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002260:	f3bf 8f6f 	isb	sy
}
 8002264:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002266:	4b9d      	ldr	r3, [pc, #628]	; (80024dc <main+0x2bc>)
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	4a9c      	ldr	r2, [pc, #624]	; (80024dc <main+0x2bc>)
 800226c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002270:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002272:	f3bf 8f4f 	dsb	sy
}
 8002276:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002278:	f3bf 8f6f 	isb	sy
}
 800227c:	e000      	b.n	8002280 <main+0x60>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800227e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002280:	4b96      	ldr	r3, [pc, #600]	; (80024dc <main+0x2bc>)
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d138      	bne.n	80022fe <main+0xde>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800228c:	4b93      	ldr	r3, [pc, #588]	; (80024dc <main+0x2bc>)
 800228e:	2200      	movs	r2, #0
 8002290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002294:	f3bf 8f4f 	dsb	sy
}
 8002298:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800229a:	4b90      	ldr	r3, [pc, #576]	; (80024dc <main+0x2bc>)
 800229c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022a0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	0b5b      	lsrs	r3, r3, #13
 80022a6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80022aa:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	08db      	lsrs	r3, r3, #3
 80022b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022b4:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	015a      	lsls	r2, r3, #5
 80022ba:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80022be:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80022c4:	4985      	ldr	r1, [pc, #532]	; (80024dc <main+0x2bc>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	1e5a      	subs	r2, r3, #1
 80022d0:	607a      	str	r2, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1ef      	bne.n	80022b6 <main+0x96>
    } while(sets-- != 0U);
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	1e5a      	subs	r2, r3, #1
 80022da:	60ba      	str	r2, [r7, #8]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1e5      	bne.n	80022ac <main+0x8c>
  __ASM volatile ("dsb 0xF":::"memory");
 80022e0:	f3bf 8f4f 	dsb	sy
}
 80022e4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80022e6:	4b7d      	ldr	r3, [pc, #500]	; (80024dc <main+0x2bc>)
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	4a7c      	ldr	r2, [pc, #496]	; (80024dc <main+0x2bc>)
 80022ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80022f2:	f3bf 8f4f 	dsb	sy
}
 80022f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80022f8:	f3bf 8f6f 	isb	sy
}
 80022fc:	e000      	b.n	8002300 <main+0xe0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80022fe:	bf00      	nop
  HAL_Init();
 8002300:	f001 fe1e 	bl	8003f40 <HAL_Init>
  SystemClock_Config();
 8002304:	f000 f91c 	bl	8002540 <SystemClock_Config>
  MX_GPIO_Init();
 8002308:	f000 fdd2 	bl	8002eb0 <MX_GPIO_Init>
  MX_LPTIM1_Init();
 800230c:	f000 fbc6 	bl	8002a9c <MX_LPTIM1_Init>
  MX_DAC1_Init();
 8002310:	f000 fa36 	bl	8002780 <MX_DAC1_Init>
  MX_USART3_UART_Init();
 8002314:	f000 fd7e 	bl	8002e14 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8002318:	f000 fc90 	bl	8002c3c <MX_TIM3_Init>
  MX_TIM1_Init();
 800231c:	f000 fbec 	bl	8002af8 <MX_TIM1_Init>
  MX_HRTIM_Init();
 8002320:	f000 fa6a 	bl	80027f8 <MX_HRTIM_Init>
  MX_ADC3_Init();
 8002324:	f000 f9ca 	bl	80026bc <MX_ADC3_Init>
  MX_LWIP_Init();
 8002328:	f00c fd8e 	bl	800ee48 <MX_LWIP_Init>
  MX_TIM2_Init();
 800232c:	f000 fc38 	bl	8002ba0 <MX_TIM2_Init>
  MX_TIM5_Init();
 8002330:	f000 fd22 	bl	8002d78 <MX_TIM5_Init>
  MX_TIM4_Init();
 8002334:	f000 fcd0 	bl	8002cd8 <MX_TIM4_Init>
  printf("\033c"); //clears screen
 8002338:	4869      	ldr	r0, [pc, #420]	; (80024e0 <main+0x2c0>)
 800233a:	f017 fcb1 	bl	8019ca0 <iprintf>
  printf("Atomic Clock - Source __TIMESTAMP__: %s\r\n", __TIMESTAMP__);
 800233e:	4969      	ldr	r1, [pc, #420]	; (80024e4 <main+0x2c4>)
 8002340:	4869      	ldr	r0, [pc, #420]	; (80024e8 <main+0x2c8>)
 8002342:	f017 fcad 	bl	8019ca0 <iprintf>
		if (init_synthesiser(MW_power) != SUCCESS) {
 8002346:	4b69      	ldr	r3, [pc, #420]	; (80024ec <main+0x2cc>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f019 fc38 	bl	801bbc0 <__init_synthesiser_veneer>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d004      	beq.n	8002360 <main+0x140>
			printf("Synthesiser initialisation failed!\r\n");
 8002356:	4866      	ldr	r0, [pc, #408]	; (80024f0 <main+0x2d0>)
 8002358:	f017 fd08 	bl	8019d6c <puts>
			Error_Handler();
 800235c:	f000 ffc4 	bl	80032e8 <Error_Handler>
			printf("MW power setting (LO2GAIN): 0x%x \r\n", MW_power);
 8002360:	4b62      	ldr	r3, [pc, #392]	; (80024ec <main+0x2cc>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	4619      	mov	r1, r3
 8002366:	4863      	ldr	r0, [pc, #396]	; (80024f4 <main+0x2d4>)
 8002368:	f017 fc9a 	bl	8019ca0 <iprintf>
	if (HAL_LPTIM_Counter_Start_IT(&hlptim1, 1024) != HAL_OK) {
 800236c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002370:	4861      	ldr	r0, [pc, #388]	; (80024f8 <main+0x2d8>)
 8002372:	f006 fff1 	bl	8009358 <HAL_LPTIM_Counter_Start_IT>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d004      	beq.n	8002386 <main+0x166>
		printf("Failed to start slow flashing LED!\r\n");
 800237c:	485f      	ldr	r0, [pc, #380]	; (80024fc <main+0x2dc>)
 800237e:	f017 fcf5 	bl	8019d6c <puts>
		Error_Handler();
 8002382:	f000 ffb1 	bl	80032e8 <Error_Handler>
	if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK) {
 8002386:	2100      	movs	r1, #0
 8002388:	485d      	ldr	r0, [pc, #372]	; (8002500 <main+0x2e0>)
 800238a:	f003 fdd9 	bl	8005f40 <HAL_DAC_Start>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d004      	beq.n	800239e <main+0x17e>
		printf("Failure to initialise DAC channel 1 \r\n");
 8002394:	485b      	ldr	r0, [pc, #364]	; (8002504 <main+0x2e4>)
 8002396:	f017 fce9 	bl	8019d6c <puts>
		Error_Handler();
 800239a:	f000 ffa5 	bl	80032e8 <Error_Handler>
	if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_2) != HAL_OK) {
 800239e:	2110      	movs	r1, #16
 80023a0:	4857      	ldr	r0, [pc, #348]	; (8002500 <main+0x2e0>)
 80023a2:	f003 fdcd 	bl	8005f40 <HAL_DAC_Start>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d004      	beq.n	80023b6 <main+0x196>
		printf("Failure to initialise DAC channel 2 \r\n");
 80023ac:	4856      	ldr	r0, [pc, #344]	; (8002508 <main+0x2e8>)
 80023ae:	f017 fcdd 	bl	8019d6c <puts>
		Error_Handler();
 80023b2:	f000 ff99 	bl	80032e8 <Error_Handler>
	printf("Setting DAC output 1 (OCXO control) to 0V \r\n");
 80023b6:	4855      	ldr	r0, [pc, #340]	; (800250c <main+0x2ec>)
 80023b8:	f017 fcd8 	bl	8019d6c <puts>
	if(HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0) != HAL_OK){
 80023bc:	2300      	movs	r3, #0
 80023be:	2200      	movs	r2, #0
 80023c0:	2100      	movs	r1, #0
 80023c2:	484f      	ldr	r0, [pc, #316]	; (8002500 <main+0x2e0>)
 80023c4:	f003 fe0e 	bl	8005fe4 <HAL_DAC_SetValue>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d004      	beq.n	80023d8 <main+0x1b8>
			printf("DAC setup failed for channel 1!\r\n");
 80023ce:	4850      	ldr	r0, [pc, #320]	; (8002510 <main+0x2f0>)
 80023d0:	f017 fccc 	bl	8019d6c <puts>
		Error_Handler();
 80023d4:	f000 ff88 	bl	80032e8 <Error_Handler>
	printf("Setting DAC output 2 (laser control) to 0V \r\n");
 80023d8:	484e      	ldr	r0, [pc, #312]	; (8002514 <main+0x2f4>)
 80023da:	f017 fcc7 	bl	8019d6c <puts>
	if(HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0) != HAL_OK){
 80023de:	2300      	movs	r3, #0
 80023e0:	2200      	movs	r2, #0
 80023e2:	2110      	movs	r1, #16
 80023e4:	4846      	ldr	r0, [pc, #280]	; (8002500 <main+0x2e0>)
 80023e6:	f003 fdfd 	bl	8005fe4 <HAL_DAC_SetValue>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d004      	beq.n	80023fa <main+0x1da>
			printf("DAC setup failed for channel 2!\r\n");
 80023f0:	4849      	ldr	r0, [pc, #292]	; (8002518 <main+0x2f8>)
 80023f2:	f017 fcbb 	bl	8019d6c <puts>
		Error_Handler();
 80023f6:	f000 ff77 	bl	80032e8 <Error_Handler>
	if(HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK){
 80023fa:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80023fe:	2100      	movs	r1, #0
 8002400:	4846      	ldr	r0, [pc, #280]	; (800251c <main+0x2fc>)
 8002402:	f003 fb59 	bl	8005ab8 <HAL_ADCEx_Calibration_Start>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d004      	beq.n	8002416 <main+0x1f6>
		printf("ADC calibration failure \r\n");
 800240c:	4844      	ldr	r0, [pc, #272]	; (8002520 <main+0x300>)
 800240e:	f017 fcad 	bl	8019d6c <puts>
		Error_Handler();
 8002412:	f000 ff69 	bl	80032e8 <Error_Handler>
	if(HAL_ADC_Start_IT(&hadc3) != HAL_OK){
 8002416:	4841      	ldr	r0, [pc, #260]	; (800251c <main+0x2fc>)
 8002418:	f002 fa3c 	bl	8004894 <HAL_ADC_Start_IT>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d004      	beq.n	800242c <main+0x20c>
		printf("Failed to start ADC with interrupt capability \r\n");
 8002422:	4840      	ldr	r0, [pc, #256]	; (8002524 <main+0x304>)
 8002424:	f017 fca2 	bl	8019d6c <puts>
	                Error_Handler();
 8002428:	f000 ff5e 	bl	80032e8 <Error_Handler>
	printf("ADC calibrated successfully and interrupt callback enabled \r\n");
 800242c:	483e      	ldr	r0, [pc, #248]	; (8002528 <main+0x308>)
 800242e:	f017 fc9d 	bl	8019d6c <puts>
	measure_POP_cycle_time();
 8002432:	f019 fbd5 	bl	801bbe0 <__measure_POP_cycle_time_veneer>
	calc_fixed_time_MW_sweep((double)(HYPERFINE + MW_DELTA), 10000, 50, ADD_SCOPE_SYNC_TIME); //10kHz sweep, 50s
 8002436:	2000      	movs	r0, #0
 8002438:	ed9f 2b1f 	vldr	d2, [pc, #124]	; 80024b8 <main+0x298>
 800243c:	ed9f 1b20 	vldr	d1, [pc, #128]	; 80024c0 <main+0x2a0>
 8002440:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80024c8 <main+0x2a8>
 8002444:	f019 fbd0 	bl	801bbe8 <__calc_fixed_time_MW_sweep_veneer>
	printf("Entering main while loop\r\n");
 8002448:	4838      	ldr	r0, [pc, #224]	; (800252c <main+0x30c>)
 800244a:	f017 fc8f 	bl	8019d6c <puts>
		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 800244e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002452:	4837      	ldr	r0, [pc, #220]	; (8002530 <main+0x310>)
 8002454:	f005 fbda 	bl	8007c0c <HAL_GPIO_ReadPin>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	bf14      	ite	ne
 800245e:	2301      	movne	r3, #1
 8002460:	2300      	moveq	r3, #0
 8002462:	b2da      	uxtb	r2, r3
 8002464:	4b33      	ldr	r3, [pc, #204]	; (8002534 <main+0x314>)
 8002466:	701a      	strb	r2, [r3, #0]
		if (blue_button_status) {// If blue button is pressed
 8002468:	4b32      	ldr	r3, [pc, #200]	; (8002534 <main+0x314>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d01d      	beq.n	80024ae <main+0x28e>
			printf("Blue button pressed....\r\n");
 8002472:	4831      	ldr	r0, [pc, #196]	; (8002538 <main+0x318>)
 8002474:	f017 fc7a 	bl	8019d6c <puts>
			start_laser_ramp();
 8002478:	f019 fbba 	bl	801bbf0 <__start_laser_ramp_veneer>
			while(blue_button_status) {//remain here polling button until it is released
 800247c:	e012      	b.n	80024a4 <main+0x284>
				timer_delay(SLOW_TIMER, 100); //1ms delay
 800247e:	4b2f      	ldr	r3, [pc, #188]	; (800253c <main+0x31c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2164      	movs	r1, #100	; 0x64
 8002484:	4618      	mov	r0, r3
 8002486:	f019 fba7 	bl	801bbd8 <__timer_delay_veneer>
				blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 800248a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800248e:	4828      	ldr	r0, [pc, #160]	; (8002530 <main+0x310>)
 8002490:	f005 fbbc 	bl	8007c0c <HAL_GPIO_ReadPin>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	bf14      	ite	ne
 800249a:	2301      	movne	r3, #1
 800249c:	2300      	moveq	r3, #0
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	4b24      	ldr	r3, [pc, #144]	; (8002534 <main+0x314>)
 80024a2:	701a      	strb	r2, [r3, #0]
			while(blue_button_status) {//remain here polling button until it is released
 80024a4:	4b23      	ldr	r3, [pc, #140]	; (8002534 <main+0x314>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1e7      	bne.n	800247e <main+0x25e>
		MW_update();
 80024ae:	f019 fb8f 	bl	801bbd0 <__MW_update_veneer>
		laser_update();
 80024b2:	f019 fb89 	bl	801bbc8 <__laser_update_veneer>
		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 80024b6:	e7ca      	b.n	800244e <main+0x22e>
 80024b8:	00000000 	.word	0x00000000
 80024bc:	40490000 	.word	0x40490000
 80024c0:	00000000 	.word	0x00000000
 80024c4:	40c38800 	.word	0x40c38800
 80024c8:	ea600000 	.word	0xea600000
 80024cc:	41e69e35 	.word	0x41e69e35
 80024d0:	00001b78 	.word	0x00001b78
 80024d4:	00000000 	.word	0x00000000
 80024d8:	08000298 	.word	0x08000298
 80024dc:	e000ed00 	.word	0xe000ed00
 80024e0:	0801be60 	.word	0x0801be60
 80024e4:	0801be64 	.word	0x0801be64
 80024e8:	0801be80 	.word	0x0801be80
 80024ec:	20000002 	.word	0x20000002
 80024f0:	0801beac 	.word	0x0801beac
 80024f4:	0801bed0 	.word	0x0801bed0
 80024f8:	200003ac 	.word	0x200003ac
 80024fc:	0801bef4 	.word	0x0801bef4
 8002500:	200002bc 	.word	0x200002bc
 8002504:	0801bf18 	.word	0x0801bf18
 8002508:	0801bf40 	.word	0x0801bf40
 800250c:	0801bf68 	.word	0x0801bf68
 8002510:	0801bf94 	.word	0x0801bf94
 8002514:	0801bfb8 	.word	0x0801bfb8
 8002518:	0801bfe8 	.word	0x0801bfe8
 800251c:	20000258 	.word	0x20000258
 8002520:	0801c00c 	.word	0x0801c00c
 8002524:	0801c028 	.word	0x0801c028
 8002528:	0801c058 	.word	0x0801c058
 800252c:	0801c098 	.word	0x0801c098
 8002530:	58020800 	.word	0x58020800
 8002534:	200005f4 	.word	0x200005f4
 8002538:	0801c0b4 	.word	0x0801c0b4
 800253c:	20000018 	.word	0x20000018

08002540 <SystemClock_Config>:
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b0a4      	sub	sp, #144	; 0x90
 8002544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002546:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800254a:	224c      	movs	r2, #76	; 0x4c
 800254c:	2100      	movs	r1, #0
 800254e:	4618      	mov	r0, r3
 8002550:	f017 fcfc 	bl	8019f4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002558:	2220      	movs	r2, #32
 800255a:	2100      	movs	r1, #0
 800255c:	4618      	mov	r0, r3
 800255e:	f017 fcf5 	bl	8019f4c <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8002562:	f107 030c 	add.w	r3, r7, #12
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	605a      	str	r2, [r3, #4]
 800256c:	609a      	str	r2, [r3, #8]
 800256e:	60da      	str	r2, [r3, #12]
 8002570:	611a      	str	r2, [r3, #16]
 8002572:	615a      	str	r2, [r3, #20]
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002574:	2002      	movs	r0, #2
 8002576:	f007 fa4d 	bl	8009a14 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800257a:	2300      	movs	r3, #0
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	4b4c      	ldr	r3, [pc, #304]	; (80026b0 <SystemClock_Config+0x170>)
 8002580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002582:	4a4b      	ldr	r2, [pc, #300]	; (80026b0 <SystemClock_Config+0x170>)
 8002584:	f023 0301 	bic.w	r3, r3, #1
 8002588:	62d3      	str	r3, [r2, #44]	; 0x2c
 800258a:	4b49      	ldr	r3, [pc, #292]	; (80026b0 <SystemClock_Config+0x170>)
 800258c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	60bb      	str	r3, [r7, #8]
 8002594:	4b47      	ldr	r3, [pc, #284]	; (80026b4 <SystemClock_Config+0x174>)
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	4a46      	ldr	r2, [pc, #280]	; (80026b4 <SystemClock_Config+0x174>)
 800259a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800259e:	6193      	str	r3, [r2, #24]
 80025a0:	4b44      	ldr	r3, [pc, #272]	; (80026b4 <SystemClock_Config+0x174>)
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	68bb      	ldr	r3, [r7, #8]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80025ac:	bf00      	nop
 80025ae:	4b41      	ldr	r3, [pc, #260]	; (80026b4 <SystemClock_Config+0x174>)
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025ba:	d1f8      	bne.n	80025ae <SystemClock_Config+0x6e>
  HAL_PWR_EnableBkUpAccess();
 80025bc:	f007 fa1a 	bl	80099f4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80025c0:	f001 fd74 	bl	80040ac <HAL_GetREVID>
 80025c4:	4b3c      	ldr	r3, [pc, #240]	; (80026b8 <SystemClock_Config+0x178>)
 80025c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c8:	4a3b      	ldr	r2, [pc, #236]	; (80026b8 <SystemClock_Config+0x178>)
 80025ca:	f023 0318 	bic.w	r3, r3, #24
 80025ce:	6713      	str	r3, [r2, #112]	; 0x70
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 80025d0:	2325      	movs	r3, #37	; 0x25
 80025d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80025d4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80025d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80025da:	2301      	movs	r3, #1
 80025dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80025de:	2301      	movs	r3, #1
 80025e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025e2:	2302      	movs	r3, #2
 80025e4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025e6:	2302      	movs	r3, #2
 80025e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80025ea:	2301      	movs	r3, #1
 80025ec:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 80;
 80025ee:	2350      	movs	r3, #80	; 0x50
 80025f0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 80025f2:	2302      	movs	r3, #2
 80025f4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80025f6:	2304      	movs	r3, #4
 80025f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80025fa:	2302      	movs	r3, #2
 80025fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002600:	230c      	movs	r3, #12
 8002602:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002606:	2300      	movs	r3, #0
 8002608:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800260c:	2300      	movs	r3, #0
 800260e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002612:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002616:	4618      	mov	r0, r3
 8002618:	f007 fa36 	bl	8009a88 <HAL_RCC_OscConfig>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <SystemClock_Config+0xe6>
    Error_Handler();
 8002622:	f000 fe61 	bl	80032e8 <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002626:	233f      	movs	r3, #63	; 0x3f
 8002628:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800262a:	2303      	movs	r3, #3
 800262c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800262e:	2300      	movs	r3, #0
 8002630:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 8002632:	2309      	movs	r3, #9
 8002634:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8002636:	2300      	movs	r3, #0
 8002638:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800263a:	2300      	movs	r3, #0
 800263c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV16;
 800263e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002642:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8002644:	2300      	movs	r3, #0
 8002646:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800264c:	2101      	movs	r1, #1
 800264e:	4618      	mov	r0, r3
 8002650:	f007 fe74 	bl	800a33c <HAL_RCC_ClockConfig>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <SystemClock_Config+0x11e>
    Error_Handler();
 800265a:	f000 fe45 	bl	80032e8 <Error_Handler>
  HAL_RCC_EnableCSS();
 800265e:	f008 f823 	bl	800a6a8 <HAL_RCC_EnableCSS>
  __HAL_RCC_CRS_CLK_ENABLE();
 8002662:	4b15      	ldr	r3, [pc, #84]	; (80026b8 <SystemClock_Config+0x178>)
 8002664:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002668:	4a13      	ldr	r2, [pc, #76]	; (80026b8 <SystemClock_Config+0x178>)
 800266a:	f043 0302 	orr.w	r3, r3, #2
 800266e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002672:	4b11      	ldr	r3, [pc, #68]	; (80026b8 <SystemClock_Config+0x178>)
 8002674:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	607b      	str	r3, [r7, #4]
 800267e:	687b      	ldr	r3, [r7, #4]
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8002680:	2300      	movs	r3, #0
 8002682:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 8002684:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002688:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 800268a:	2300      	movs	r3, #0
 800268c:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 800268e:	f240 53b7 	movw	r3, #1463	; 0x5b7
 8002692:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8002694:	2322      	movs	r3, #34	; 0x22
 8002696:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8002698:	2320      	movs	r3, #32
 800269a:	623b      	str	r3, [r7, #32]
  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 800269c:	f107 030c 	add.w	r3, r7, #12
 80026a0:	4618      	mov	r0, r3
 80026a2:	f00a fd9d 	bl	800d1e0 <HAL_RCCEx_CRSConfig>
}
 80026a6:	bf00      	nop
 80026a8:	3790      	adds	r7, #144	; 0x90
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	58000400 	.word	0x58000400
 80026b4:	58024800 	.word	0x58024800
 80026b8:	58024400 	.word	0x58024400

080026bc <MX_ADC3_Init>:
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b088      	sub	sp, #32
 80026c0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80026c2:	1d3b      	adds	r3, r7, #4
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	60da      	str	r2, [r3, #12]
 80026ce:	611a      	str	r2, [r3, #16]
 80026d0:	615a      	str	r2, [r3, #20]
 80026d2:	619a      	str	r2, [r3, #24]
  hadc3.Instance = ADC3;
 80026d4:	4b28      	ldr	r3, [pc, #160]	; (8002778 <MX_ADC3_Init+0xbc>)
 80026d6:	4a29      	ldr	r2, [pc, #164]	; (800277c <MX_ADC3_Init+0xc0>)
 80026d8:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80026da:	4b27      	ldr	r3, [pc, #156]	; (8002778 <MX_ADC3_Init+0xbc>)
 80026dc:	2200      	movs	r2, #0
 80026de:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80026e0:	4b25      	ldr	r3, [pc, #148]	; (8002778 <MX_ADC3_Init+0xbc>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80026e6:	4b24      	ldr	r3, [pc, #144]	; (8002778 <MX_ADC3_Init+0xbc>)
 80026e8:	2204      	movs	r2, #4
 80026ea:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80026ec:	4b22      	ldr	r3, [pc, #136]	; (8002778 <MX_ADC3_Init+0xbc>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80026f2:	4b21      	ldr	r3, [pc, #132]	; (8002778 <MX_ADC3_Init+0xbc>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80026f8:	4b1f      	ldr	r3, [pc, #124]	; (8002778 <MX_ADC3_Init+0xbc>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80026fe:	4b1e      	ldr	r3, [pc, #120]	; (8002778 <MX_ADC3_Init+0xbc>)
 8002700:	2200      	movs	r2, #0
 8002702:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 8002704:	4b1c      	ldr	r3, [pc, #112]	; (8002778 <MX_ADC3_Init+0xbc>)
 8002706:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800270a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800270c:	4b1a      	ldr	r3, [pc, #104]	; (8002778 <MX_ADC3_Init+0xbc>)
 800270e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002712:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8002714:	4b18      	ldr	r3, [pc, #96]	; (8002778 <MX_ADC3_Init+0xbc>)
 8002716:	2200      	movs	r2, #0
 8002718:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800271a:	4b17      	ldr	r3, [pc, #92]	; (8002778 <MX_ADC3_Init+0xbc>)
 800271c:	2200      	movs	r2, #0
 800271e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002720:	4b15      	ldr	r3, [pc, #84]	; (8002778 <MX_ADC3_Init+0xbc>)
 8002722:	2200      	movs	r2, #0
 8002724:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8002726:	4b14      	ldr	r3, [pc, #80]	; (8002778 <MX_ADC3_Init+0xbc>)
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800272e:	4812      	ldr	r0, [pc, #72]	; (8002778 <MX_ADC3_Init+0xbc>)
 8002730:	f001 ff0e 	bl	8004550 <HAL_ADC_Init>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <MX_ADC3_Init+0x82>
    Error_Handler();
 800273a:	f000 fdd5 	bl	80032e8 <Error_Handler>
  sConfig.Channel = ADC_CHANNEL_0;
 800273e:	2301      	movs	r3, #1
 8002740:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002742:	2306      	movs	r3, #6
 8002744:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002746:	2300      	movs	r3, #0
 8002748:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800274a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800274e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002750:	2304      	movs	r3, #4
 8002752:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002754:	2300      	movs	r3, #0
 8002756:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8002758:	2300      	movs	r3, #0
 800275a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800275c:	1d3b      	adds	r3, r7, #4
 800275e:	4619      	mov	r1, r3
 8002760:	4805      	ldr	r0, [pc, #20]	; (8002778 <MX_ADC3_Init+0xbc>)
 8002762:	f002 fc31 	bl	8004fc8 <HAL_ADC_ConfigChannel>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <MX_ADC3_Init+0xb4>
    Error_Handler();
 800276c:	f000 fdbc 	bl	80032e8 <Error_Handler>
}
 8002770:	bf00      	nop
 8002772:	3720      	adds	r7, #32
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	20000258 	.word	0x20000258
 800277c:	58026000 	.word	0x58026000

08002780 <MX_DAC1_Init>:
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08a      	sub	sp, #40	; 0x28
 8002784:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8002786:	1d3b      	adds	r3, r7, #4
 8002788:	2224      	movs	r2, #36	; 0x24
 800278a:	2100      	movs	r1, #0
 800278c:	4618      	mov	r0, r3
 800278e:	f017 fbdd 	bl	8019f4c <memset>
  hdac1.Instance = DAC1;
 8002792:	4b17      	ldr	r3, [pc, #92]	; (80027f0 <MX_DAC1_Init+0x70>)
 8002794:	4a17      	ldr	r2, [pc, #92]	; (80027f4 <MX_DAC1_Init+0x74>)
 8002796:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002798:	4815      	ldr	r0, [pc, #84]	; (80027f0 <MX_DAC1_Init+0x70>)
 800279a:	f003 fbaf 	bl	8005efc <HAL_DAC_Init>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <MX_DAC1_Init+0x28>
    Error_Handler();
 80027a4:	f000 fda0 	bl	80032e8 <Error_Handler>
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80027a8:	2300      	movs	r3, #0
 80027aa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80027ac:	2300      	movs	r3, #0
 80027ae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80027b0:	2300      	movs	r3, #0
 80027b2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80027b4:	2301      	movs	r3, #1
 80027b6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80027b8:	2300      	movs	r3, #0
 80027ba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80027bc:	1d3b      	adds	r3, r7, #4
 80027be:	2200      	movs	r2, #0
 80027c0:	4619      	mov	r1, r3
 80027c2:	480b      	ldr	r0, [pc, #44]	; (80027f0 <MX_DAC1_Init+0x70>)
 80027c4:	f003 fc34 	bl	8006030 <HAL_DAC_ConfigChannel>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <MX_DAC1_Init+0x52>
    Error_Handler();
 80027ce:	f000 fd8b 	bl	80032e8 <Error_Handler>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80027d2:	1d3b      	adds	r3, r7, #4
 80027d4:	2210      	movs	r2, #16
 80027d6:	4619      	mov	r1, r3
 80027d8:	4805      	ldr	r0, [pc, #20]	; (80027f0 <MX_DAC1_Init+0x70>)
 80027da:	f003 fc29 	bl	8006030 <HAL_DAC_ConfigChannel>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <MX_DAC1_Init+0x68>
    Error_Handler();
 80027e4:	f000 fd80 	bl	80032e8 <Error_Handler>
}
 80027e8:	bf00      	nop
 80027ea:	3728      	adds	r7, #40	; 0x28
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	200002bc 	.word	0x200002bc
 80027f4:	40007400 	.word	0x40007400

080027f8 <MX_HRTIM_Init>:
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b0a4      	sub	sp, #144	; 0x90
 80027fc:	af00      	add	r7, sp, #0
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 80027fe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	605a      	str	r2, [r3, #4]
 8002808:	609a      	str	r2, [r3, #8]
 800280a:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 800280c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002810:	2254      	movs	r2, #84	; 0x54
 8002812:	2100      	movs	r1, #0
 8002814:	4618      	mov	r0, r3
 8002816:	f017 fb99 	bl	8019f4c <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 800281a:	f107 0320 	add.w	r3, r7, #32
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	605a      	str	r2, [r3, #4]
 8002824:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8002826:	463b      	mov	r3, r7
 8002828:	2220      	movs	r2, #32
 800282a:	2100      	movs	r1, #0
 800282c:	4618      	mov	r0, r3
 800282e:	f017 fb8d 	bl	8019f4c <memset>
  hhrtim.Instance = HRTIM1;
 8002832:	4b98      	ldr	r3, [pc, #608]	; (8002a94 <MX_HRTIM_Init+0x29c>)
 8002834:	4a98      	ldr	r2, [pc, #608]	; (8002a98 <MX_HRTIM_Init+0x2a0>)
 8002836:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8002838:	4b96      	ldr	r3, [pc, #600]	; (8002a94 <MX_HRTIM_Init+0x29c>)
 800283a:	2200      	movs	r2, #0
 800283c:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 800283e:	4b95      	ldr	r3, [pc, #596]	; (8002a94 <MX_HRTIM_Init+0x29c>)
 8002840:	2200      	movs	r2, #0
 8002842:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8002844:	4893      	ldr	r0, [pc, #588]	; (8002a94 <MX_HRTIM_Init+0x29c>)
 8002846:	f005 fa51 	bl	8007cec <HAL_HRTIM_Init>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <MX_HRTIM_Init+0x5c>
    Error_Handler();
 8002850:	f000 fd4a 	bl	80032e8 <Error_Handler>
  pTimeBaseCfg.Period = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH+POP_CYCLE_DELAY;
 8002854:	f24c 2318 	movw	r3, #49688	; 0xc218
 8002858:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 800285c:	2300      	movs	r3, #0
 800285e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV4;
 8002862:	2307      	movs	r3, #7
 8002864:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8002868:	2308      	movs	r3, #8
 800286a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 800286e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002872:	461a      	mov	r2, r3
 8002874:	2100      	movs	r1, #0
 8002876:	4887      	ldr	r0, [pc, #540]	; (8002a94 <MX_HRTIM_Init+0x29c>)
 8002878:	f005 fb08 	bl	8007e8c <HAL_HRTIM_TimeBaseConfig>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <MX_HRTIM_Init+0x8e>
    Error_Handler();
 8002882:	f000 fd31 	bl	80032e8 <Error_Handler>
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP3|HRTIM_TIM_IT_REP;
 8002886:	2314      	movs	r3, #20
 8002888:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 800288a:	2300      	movs	r3, #0
 800288c:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 800288e:	2300      	movs	r3, #0
 8002890:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 8002892:	2300      	movs	r3, #0
 8002894:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 8002896:	2301      	movs	r3, #1
 8002898:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 800289a:	2300      	movs	r3, #0
 800289c:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 800289e:	2300      	movs	r3, #0
 80028a0:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 80028a2:	2300      	movs	r3, #0
 80028a4:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 80028a6:	2300      	movs	r3, #0
 80028a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 80028aa:	2300      	movs	r3, #0
 80028ac:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 80028ae:	2300      	movs	r3, #0
 80028b0:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 80028b2:	2300      	movs	r3, #0
 80028b4:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 80028b6:	2300      	movs	r3, #0
 80028b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 80028ba:	2300      	movs	r3, #0
 80028bc:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 80028be:	2300      	movs	r3, #0
 80028c0:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 80028c2:	2300      	movs	r3, #0
 80028c4:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 80028c6:	2300      	movs	r3, #0
 80028c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 80028ca:	2300      	movs	r3, #0
 80028cc:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 80028ce:	2300      	movs	r3, #0
 80028d0:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 80028d2:	2300      	movs	r3, #0
 80028d4:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 80028d6:	2300      	movs	r3, #0
 80028d8:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 80028da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028de:	461a      	mov	r2, r3
 80028e0:	2100      	movs	r1, #0
 80028e2:	486c      	ldr	r0, [pc, #432]	; (8002a94 <MX_HRTIM_Init+0x29c>)
 80028e4:	f005 fafa 	bl	8007edc <HAL_HRTIM_WaveformTimerConfig>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <MX_HRTIM_Init+0xfa>
    Error_Handler();
 80028ee:	f000 fcfb 	bl	80032e8 <Error_Handler>
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP2|HRTIM_TIM_IT_CMP3;
 80028f2:	2306      	movs	r3, #6
 80028f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 80028f6:	2300      	movs	r3, #0
 80028f8:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 80028fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028fe:	461a      	mov	r2, r3
 8002900:	2104      	movs	r1, #4
 8002902:	4864      	ldr	r0, [pc, #400]	; (8002a94 <MX_HRTIM_Init+0x29c>)
 8002904:	f005 faea 	bl	8007edc <HAL_HRTIM_WaveformTimerConfig>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <MX_HRTIM_Init+0x11a>
    Error_Handler();
 800290e:	f000 fceb 	bl	80032e8 <Error_Handler>
  pCompareCfg.CompareValue = PUMP_WIDTH;
 8002912:	f240 631b 	movw	r3, #1563	; 0x61b
 8002916:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8002918:	f107 0320 	add.w	r3, r7, #32
 800291c:	2201      	movs	r2, #1
 800291e:	2100      	movs	r1, #0
 8002920:	485c      	ldr	r0, [pc, #368]	; (8002a94 <MX_HRTIM_Init+0x29c>)
 8002922:	f005 fb4d 	bl	8007fc0 <HAL_HRTIM_WaveformCompareConfig>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <MX_HRTIM_Init+0x138>
    Error_Handler();
 800292c:	f000 fcdc 	bl	80032e8 <Error_Handler>
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME;
 8002930:	f244 5395 	movw	r3, #17813	; 0x4595
 8002934:	623b      	str	r3, [r7, #32]
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8002936:	2300      	movs	r3, #0
 8002938:	627b      	str	r3, [r7, #36]	; 0x24
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 800293a:	2300      	movs	r3, #0
 800293c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 800293e:	f107 0320 	add.w	r3, r7, #32
 8002942:	2202      	movs	r2, #2
 8002944:	2100      	movs	r1, #0
 8002946:	4853      	ldr	r0, [pc, #332]	; (8002a94 <MX_HRTIM_Init+0x29c>)
 8002948:	f005 fb3a 	bl	8007fc0 <HAL_HRTIM_WaveformCompareConfig>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <MX_HRTIM_Init+0x15e>
    Error_Handler();
 8002952:	f000 fcc9 	bl	80032e8 <Error_Handler>
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH;
 8002956:	f640 536e 	movw	r3, #3438	; 0xd6e
 800295a:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 800295c:	f107 0320 	add.w	r3, r7, #32
 8002960:	2202      	movs	r2, #2
 8002962:	2104      	movs	r1, #4
 8002964:	484b      	ldr	r0, [pc, #300]	; (8002a94 <MX_HRTIM_Init+0x29c>)
 8002966:	f005 fb2b 	bl	8007fc0 <HAL_HRTIM_WaveformCompareConfig>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <MX_HRTIM_Init+0x17c>
    Error_Handler();
 8002970:	f000 fcba 	bl	80032e8 <Error_Handler>
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH;
 8002974:	f644 0306 	movw	r3, #18438	; 0x4806
 8002978:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 800297a:	f107 0320 	add.w	r3, r7, #32
 800297e:	2204      	movs	r2, #4
 8002980:	2100      	movs	r1, #0
 8002982:	4844      	ldr	r0, [pc, #272]	; (8002a94 <MX_HRTIM_Init+0x29c>)
 8002984:	f005 fb1c 	bl	8007fc0 <HAL_HRTIM_WaveformCompareConfig>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <MX_HRTIM_Init+0x19a>
    Error_Handler();
 800298e:	f000 fcab 	bl	80032e8 <Error_Handler>
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME+MICROWAVE_WIDTH;
 8002992:	f244 435d 	movw	r3, #17501	; 0x445d
 8002996:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_4, &pCompareCfg) != HAL_OK)
 8002998:	f107 0320 	add.w	r3, r7, #32
 800299c:	2208      	movs	r2, #8
 800299e:	2104      	movs	r1, #4
 80029a0:	483c      	ldr	r0, [pc, #240]	; (8002a94 <MX_HRTIM_Init+0x29c>)
 80029a2:	f005 fb0d 	bl	8007fc0 <HAL_HRTIM_WaveformCompareConfig>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <MX_HRTIM_Init+0x1b8>
    Error_Handler();
 80029ac:	f000 fc9c 	bl	80032e8 <Error_Handler>
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 80029b0:	2302      	movs	r3, #2
 80029b2:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1|HRTIM_OUTPUTSET_TIMCMP3;
 80029b4:	2328      	movs	r3, #40	; 0x28
 80029b6:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMPER;
 80029b8:	2314      	movs	r3, #20
 80029ba:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 80029bc:	2300      	movs	r3, #0
 80029be:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 80029c0:	2308      	movs	r3, #8
 80029c2:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 80029c8:	2300      	movs	r3, #0
 80029ca:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 80029cc:	2300      	movs	r3, #0
 80029ce:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 80029d0:	463b      	mov	r3, r7
 80029d2:	2201      	movs	r2, #1
 80029d4:	2100      	movs	r1, #0
 80029d6:	482f      	ldr	r0, [pc, #188]	; (8002a94 <MX_HRTIM_Init+0x29c>)
 80029d8:	f005 fc60 	bl	800829c <HAL_HRTIM_WaveformOutputConfig>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <MX_HRTIM_Init+0x1ee>
    Error_Handler();
 80029e2:	f000 fc81 	bl	80032e8 <Error_Handler>
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 80029e6:	2300      	movs	r3, #0
 80029e8:	603b      	str	r3, [r7, #0]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMCMP4;
 80029ea:	2350      	movs	r3, #80	; 0x50
 80029ec:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 80029ee:	2300      	movs	r3, #0
 80029f0:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 80029f2:	463b      	mov	r3, r7
 80029f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029f8:	2104      	movs	r1, #4
 80029fa:	4826      	ldr	r0, [pc, #152]	; (8002a94 <MX_HRTIM_Init+0x29c>)
 80029fc:	f005 fc4e 	bl	800829c <HAL_HRTIM_WaveformOutputConfig>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <MX_HRTIM_Init+0x212>
    Error_Handler();
 8002a06:	f000 fc6f 	bl	80032e8 <Error_Handler>
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP3;
 8002a0e:	2320      	movs	r3, #32
 8002a10:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 8002a12:	2310      	movs	r3, #16
 8002a14:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 8002a16:	2308      	movs	r3, #8
 8002a18:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8002a1a:	463b      	mov	r3, r7
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	2100      	movs	r1, #0
 8002a20:	481c      	ldr	r0, [pc, #112]	; (8002a94 <MX_HRTIM_Init+0x29c>)
 8002a22:	f005 fc3b 	bl	800829c <HAL_HRTIM_WaveformOutputConfig>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <MX_HRTIM_Init+0x238>
    Error_Handler();
 8002a2c:	f000 fc5c 	bl	80032e8 <Error_Handler>
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8002a30:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002a34:	461a      	mov	r2, r3
 8002a36:	2104      	movs	r1, #4
 8002a38:	4816      	ldr	r0, [pc, #88]	; (8002a94 <MX_HRTIM_Init+0x29c>)
 8002a3a:	f005 fa27 	bl	8007e8c <HAL_HRTIM_TimeBaseConfig>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <MX_HRTIM_Init+0x250>
    Error_Handler();
 8002a44:	f000 fc50 	bl	80032e8 <Error_Handler>
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY;
 8002a48:	f240 7353 	movw	r3, #1875	; 0x753
 8002a4c:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8002a4e:	f107 0320 	add.w	r3, r7, #32
 8002a52:	2201      	movs	r2, #1
 8002a54:	2104      	movs	r1, #4
 8002a56:	480f      	ldr	r0, [pc, #60]	; (8002a94 <MX_HRTIM_Init+0x29c>)
 8002a58:	f005 fab2 	bl	8007fc0 <HAL_HRTIM_WaveformCompareConfig>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <MX_HRTIM_Init+0x26e>
    Error_Handler();
 8002a62:	f000 fc41 	bl	80032e8 <Error_Handler>
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME;
 8002a66:	f643 6342 	movw	r3, #15938	; 0x3e42
 8002a6a:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8002a6c:	f107 0320 	add.w	r3, r7, #32
 8002a70:	2204      	movs	r2, #4
 8002a72:	2104      	movs	r1, #4
 8002a74:	4807      	ldr	r0, [pc, #28]	; (8002a94 <MX_HRTIM_Init+0x29c>)
 8002a76:	f005 faa3 	bl	8007fc0 <HAL_HRTIM_WaveformCompareConfig>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <MX_HRTIM_Init+0x28c>
    Error_Handler();
 8002a80:	f000 fc32 	bl	80032e8 <Error_Handler>
  HAL_HRTIM_MspPostInit(&hhrtim);
 8002a84:	4803      	ldr	r0, [pc, #12]	; (8002a94 <MX_HRTIM_Init+0x29c>)
 8002a86:	f000 fd71 	bl	800356c <HAL_HRTIM_MspPostInit>
}
 8002a8a:	bf00      	nop
 8002a8c:	3790      	adds	r7, #144	; 0x90
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	200002d0 	.word	0x200002d0
 8002a98:	40017400 	.word	0x40017400

08002a9c <MX_LPTIM1_Init>:
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  hlptim1.Instance = LPTIM1;
 8002aa0:	4b13      	ldr	r3, [pc, #76]	; (8002af0 <MX_LPTIM1_Init+0x54>)
 8002aa2:	4a14      	ldr	r2, [pc, #80]	; (8002af4 <MX_LPTIM1_Init+0x58>)
 8002aa4:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8002aa6:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <MX_LPTIM1_Init+0x54>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV32;
 8002aac:	4b10      	ldr	r3, [pc, #64]	; (8002af0 <MX_LPTIM1_Init+0x54>)
 8002aae:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8002ab2:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8002ab4:	4b0e      	ldr	r3, [pc, #56]	; (8002af0 <MX_LPTIM1_Init+0x54>)
 8002ab6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002aba:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8002abc:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <MX_LPTIM1_Init+0x54>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8002ac2:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <MX_LPTIM1_Init+0x54>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8002ac8:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <MX_LPTIM1_Init+0x54>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8002ace:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <MX_LPTIM1_Init+0x54>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8002ad4:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <MX_LPTIM1_Init+0x54>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8002ada:	4805      	ldr	r0, [pc, #20]	; (8002af0 <MX_LPTIM1_Init+0x54>)
 8002adc:	f006 fb8c 	bl	80091f8 <HAL_LPTIM_Init>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <MX_LPTIM1_Init+0x4e>
    Error_Handler();
 8002ae6:	f000 fbff 	bl	80032e8 <Error_Handler>
}
 8002aea:	bf00      	nop
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	200003ac 	.word	0x200003ac
 8002af4:	40002400 	.word	0x40002400

08002af8 <MX_TIM1_Init>:
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b088      	sub	sp, #32
 8002afc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002afe:	f107 0310 	add.w	r3, r7, #16
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	605a      	str	r2, [r3, #4]
 8002b08:	609a      	str	r2, [r3, #8]
 8002b0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b0c:	1d3b      	adds	r3, r7, #4
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	605a      	str	r2, [r3, #4]
 8002b14:	609a      	str	r2, [r3, #8]
  htim1.Instance = TIM1;
 8002b16:	4b20      	ldr	r3, [pc, #128]	; (8002b98 <MX_TIM1_Init+0xa0>)
 8002b18:	4a20      	ldr	r2, [pc, #128]	; (8002b9c <MX_TIM1_Init+0xa4>)
 8002b1a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1249;
 8002b1c:	4b1e      	ldr	r3, [pc, #120]	; (8002b98 <MX_TIM1_Init+0xa0>)
 8002b1e:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8002b22:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b24:	4b1c      	ldr	r3, [pc, #112]	; (8002b98 <MX_TIM1_Init+0xa0>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002b2a:	4b1b      	ldr	r3, [pc, #108]	; (8002b98 <MX_TIM1_Init+0xa0>)
 8002b2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b30:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b32:	4b19      	ldr	r3, [pc, #100]	; (8002b98 <MX_TIM1_Init+0xa0>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b38:	4b17      	ldr	r3, [pc, #92]	; (8002b98 <MX_TIM1_Init+0xa0>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b3e:	4b16      	ldr	r3, [pc, #88]	; (8002b98 <MX_TIM1_Init+0xa0>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002b44:	4814      	ldr	r0, [pc, #80]	; (8002b98 <MX_TIM1_Init+0xa0>)
 8002b46:	f00a fd05 	bl	800d554 <HAL_TIM_Base_Init>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <MX_TIM1_Init+0x5c>
    Error_Handler();
 8002b50:	f000 fbca 	bl	80032e8 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002b5a:	f107 0310 	add.w	r3, r7, #16
 8002b5e:	4619      	mov	r1, r3
 8002b60:	480d      	ldr	r0, [pc, #52]	; (8002b98 <MX_TIM1_Init+0xa0>)
 8002b62:	f00a fd4f 	bl	800d604 <HAL_TIM_ConfigClockSource>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <MX_TIM1_Init+0x78>
    Error_Handler();
 8002b6c:	f000 fbbc 	bl	80032e8 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b70:	2300      	movs	r3, #0
 8002b72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002b74:	2300      	movs	r3, #0
 8002b76:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b7c:	1d3b      	adds	r3, r7, #4
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4805      	ldr	r0, [pc, #20]	; (8002b98 <MX_TIM1_Init+0xa0>)
 8002b82:	f00a ff6f 	bl	800da64 <HAL_TIMEx_MasterConfigSynchronization>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <MX_TIM1_Init+0x98>
    Error_Handler();
 8002b8c:	f000 fbac 	bl	80032e8 <Error_Handler>
}
 8002b90:	bf00      	nop
 8002b92:	3720      	adds	r7, #32
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	200003e4 	.word	0x200003e4
 8002b9c:	40010000 	.word	0x40010000

08002ba0 <MX_TIM2_Init>:
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b088      	sub	sp, #32
 8002ba4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ba6:	f107 0310 	add.w	r3, r7, #16
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	605a      	str	r2, [r3, #4]
 8002bb0:	609a      	str	r2, [r3, #8]
 8002bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bb4:	1d3b      	adds	r3, r7, #4
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	605a      	str	r2, [r3, #4]
 8002bbc:	609a      	str	r2, [r3, #8]
  htim2.Instance = TIM2;
 8002bbe:	4b1e      	ldr	r3, [pc, #120]	; (8002c38 <MX_TIM2_Init+0x98>)
 8002bc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bc4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 124;
 8002bc6:	4b1c      	ldr	r3, [pc, #112]	; (8002c38 <MX_TIM2_Init+0x98>)
 8002bc8:	227c      	movs	r2, #124	; 0x7c
 8002bca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bcc:	4b1a      	ldr	r3, [pc, #104]	; (8002c38 <MX_TIM2_Init+0x98>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002bd2:	4b19      	ldr	r3, [pc, #100]	; (8002c38 <MX_TIM2_Init+0x98>)
 8002bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bda:	4b17      	ldr	r3, [pc, #92]	; (8002c38 <MX_TIM2_Init+0x98>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002be0:	4b15      	ldr	r3, [pc, #84]	; (8002c38 <MX_TIM2_Init+0x98>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002be6:	4814      	ldr	r0, [pc, #80]	; (8002c38 <MX_TIM2_Init+0x98>)
 8002be8:	f00a fcb4 	bl	800d554 <HAL_TIM_Base_Init>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <MX_TIM2_Init+0x56>
    Error_Handler();
 8002bf2:	f000 fb79 	bl	80032e8 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bfa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002bfc:	f107 0310 	add.w	r3, r7, #16
 8002c00:	4619      	mov	r1, r3
 8002c02:	480d      	ldr	r0, [pc, #52]	; (8002c38 <MX_TIM2_Init+0x98>)
 8002c04:	f00a fcfe 	bl	800d604 <HAL_TIM_ConfigClockSource>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <MX_TIM2_Init+0x72>
    Error_Handler();
 8002c0e:	f000 fb6b 	bl	80032e8 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c12:	2300      	movs	r3, #0
 8002c14:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c16:	2300      	movs	r3, #0
 8002c18:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c1a:	1d3b      	adds	r3, r7, #4
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4806      	ldr	r0, [pc, #24]	; (8002c38 <MX_TIM2_Init+0x98>)
 8002c20:	f00a ff20 	bl	800da64 <HAL_TIMEx_MasterConfigSynchronization>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <MX_TIM2_Init+0x8e>
    Error_Handler();
 8002c2a:	f000 fb5d 	bl	80032e8 <Error_Handler>
}
 8002c2e:	bf00      	nop
 8002c30:	3720      	adds	r7, #32
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20000430 	.word	0x20000430

08002c3c <MX_TIM3_Init>:
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b088      	sub	sp, #32
 8002c40:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c42:	f107 0310 	add.w	r3, r7, #16
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	605a      	str	r2, [r3, #4]
 8002c4c:	609a      	str	r2, [r3, #8]
 8002c4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c50:	1d3b      	adds	r3, r7, #4
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	605a      	str	r2, [r3, #4]
 8002c58:	609a      	str	r2, [r3, #8]
  htim3.Instance = TIM3;
 8002c5a:	4b1d      	ldr	r3, [pc, #116]	; (8002cd0 <MX_TIM3_Init+0x94>)
 8002c5c:	4a1d      	ldr	r2, [pc, #116]	; (8002cd4 <MX_TIM3_Init+0x98>)
 8002c5e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 124;
 8002c60:	4b1b      	ldr	r3, [pc, #108]	; (8002cd0 <MX_TIM3_Init+0x94>)
 8002c62:	227c      	movs	r2, #124	; 0x7c
 8002c64:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c66:	4b1a      	ldr	r3, [pc, #104]	; (8002cd0 <MX_TIM3_Init+0x94>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002c6c:	4b18      	ldr	r3, [pc, #96]	; (8002cd0 <MX_TIM3_Init+0x94>)
 8002c6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c72:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c74:	4b16      	ldr	r3, [pc, #88]	; (8002cd0 <MX_TIM3_Init+0x94>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c7a:	4b15      	ldr	r3, [pc, #84]	; (8002cd0 <MX_TIM3_Init+0x94>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c80:	4813      	ldr	r0, [pc, #76]	; (8002cd0 <MX_TIM3_Init+0x94>)
 8002c82:	f00a fc67 	bl	800d554 <HAL_TIM_Base_Init>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <MX_TIM3_Init+0x54>
    Error_Handler();
 8002c8c:	f000 fb2c 	bl	80032e8 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c96:	f107 0310 	add.w	r3, r7, #16
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	480c      	ldr	r0, [pc, #48]	; (8002cd0 <MX_TIM3_Init+0x94>)
 8002c9e:	f00a fcb1 	bl	800d604 <HAL_TIM_ConfigClockSource>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <MX_TIM3_Init+0x70>
    Error_Handler();
 8002ca8:	f000 fb1e 	bl	80032e8 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cac:	2300      	movs	r3, #0
 8002cae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002cb4:	1d3b      	adds	r3, r7, #4
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4805      	ldr	r0, [pc, #20]	; (8002cd0 <MX_TIM3_Init+0x94>)
 8002cba:	f00a fed3 	bl	800da64 <HAL_TIMEx_MasterConfigSynchronization>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <MX_TIM3_Init+0x8c>
    Error_Handler();
 8002cc4:	f000 fb10 	bl	80032e8 <Error_Handler>
}
 8002cc8:	bf00      	nop
 8002cca:	3720      	adds	r7, #32
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	2000047c 	.word	0x2000047c
 8002cd4:	40000400 	.word	0x40000400

08002cd8 <MX_TIM4_Init>:
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b088      	sub	sp, #32
 8002cdc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cde:	f107 0310 	add.w	r3, r7, #16
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	605a      	str	r2, [r3, #4]
 8002ce8:	609a      	str	r2, [r3, #8]
 8002cea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cec:	1d3b      	adds	r3, r7, #4
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	605a      	str	r2, [r3, #4]
 8002cf4:	609a      	str	r2, [r3, #8]
  htim4.Instance = TIM4;
 8002cf6:	4b1e      	ldr	r3, [pc, #120]	; (8002d70 <MX_TIM4_Init+0x98>)
 8002cf8:	4a1e      	ldr	r2, [pc, #120]	; (8002d74 <MX_TIM4_Init+0x9c>)
 8002cfa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 62499;
 8002cfc:	4b1c      	ldr	r3, [pc, #112]	; (8002d70 <MX_TIM4_Init+0x98>)
 8002cfe:	f24f 4223 	movw	r2, #62499	; 0xf423
 8002d02:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d04:	4b1a      	ldr	r3, [pc, #104]	; (8002d70 <MX_TIM4_Init+0x98>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002d0a:	4b19      	ldr	r3, [pc, #100]	; (8002d70 <MX_TIM4_Init+0x98>)
 8002d0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d10:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d12:	4b17      	ldr	r3, [pc, #92]	; (8002d70 <MX_TIM4_Init+0x98>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d18:	4b15      	ldr	r3, [pc, #84]	; (8002d70 <MX_TIM4_Init+0x98>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002d1e:	4814      	ldr	r0, [pc, #80]	; (8002d70 <MX_TIM4_Init+0x98>)
 8002d20:	f00a fc18 	bl	800d554 <HAL_TIM_Base_Init>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <MX_TIM4_Init+0x56>
    Error_Handler();
 8002d2a:	f000 fadd 	bl	80032e8 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002d34:	f107 0310 	add.w	r3, r7, #16
 8002d38:	4619      	mov	r1, r3
 8002d3a:	480d      	ldr	r0, [pc, #52]	; (8002d70 <MX_TIM4_Init+0x98>)
 8002d3c:	f00a fc62 	bl	800d604 <HAL_TIM_ConfigClockSource>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <MX_TIM4_Init+0x72>
    Error_Handler();
 8002d46:	f000 facf 	bl	80032e8 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d52:	1d3b      	adds	r3, r7, #4
 8002d54:	4619      	mov	r1, r3
 8002d56:	4806      	ldr	r0, [pc, #24]	; (8002d70 <MX_TIM4_Init+0x98>)
 8002d58:	f00a fe84 	bl	800da64 <HAL_TIMEx_MasterConfigSynchronization>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <MX_TIM4_Init+0x8e>
    Error_Handler();
 8002d62:	f000 fac1 	bl	80032e8 <Error_Handler>
}
 8002d66:	bf00      	nop
 8002d68:	3720      	adds	r7, #32
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	200004c8 	.word	0x200004c8
 8002d74:	40000800 	.word	0x40000800

08002d78 <MX_TIM5_Init>:
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b088      	sub	sp, #32
 8002d7c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d7e:	f107 0310 	add.w	r3, r7, #16
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	605a      	str	r2, [r3, #4]
 8002d88:	609a      	str	r2, [r3, #8]
 8002d8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d8c:	1d3b      	adds	r3, r7, #4
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	605a      	str	r2, [r3, #4]
 8002d94:	609a      	str	r2, [r3, #8]
  htim5.Instance = TIM5;
 8002d96:	4b1d      	ldr	r3, [pc, #116]	; (8002e0c <MX_TIM5_Init+0x94>)
 8002d98:	4a1d      	ldr	r2, [pc, #116]	; (8002e10 <MX_TIM5_Init+0x98>)
 8002d9a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 124;
 8002d9c:	4b1b      	ldr	r3, [pc, #108]	; (8002e0c <MX_TIM5_Init+0x94>)
 8002d9e:	227c      	movs	r2, #124	; 0x7c
 8002da0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002da2:	4b1a      	ldr	r3, [pc, #104]	; (8002e0c <MX_TIM5_Init+0x94>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002da8:	4b18      	ldr	r3, [pc, #96]	; (8002e0c <MX_TIM5_Init+0x94>)
 8002daa:	f04f 32ff 	mov.w	r2, #4294967295
 8002dae:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002db0:	4b16      	ldr	r3, [pc, #88]	; (8002e0c <MX_TIM5_Init+0x94>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002db6:	4b15      	ldr	r3, [pc, #84]	; (8002e0c <MX_TIM5_Init+0x94>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002dbc:	4813      	ldr	r0, [pc, #76]	; (8002e0c <MX_TIM5_Init+0x94>)
 8002dbe:	f00a fbc9 	bl	800d554 <HAL_TIM_Base_Init>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <MX_TIM5_Init+0x54>
    Error_Handler();
 8002dc8:	f000 fa8e 	bl	80032e8 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dd0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002dd2:	f107 0310 	add.w	r3, r7, #16
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	480c      	ldr	r0, [pc, #48]	; (8002e0c <MX_TIM5_Init+0x94>)
 8002dda:	f00a fc13 	bl	800d604 <HAL_TIM_ConfigClockSource>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <MX_TIM5_Init+0x70>
    Error_Handler();
 8002de4:	f000 fa80 	bl	80032e8 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002de8:	2300      	movs	r3, #0
 8002dea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dec:	2300      	movs	r3, #0
 8002dee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002df0:	1d3b      	adds	r3, r7, #4
 8002df2:	4619      	mov	r1, r3
 8002df4:	4805      	ldr	r0, [pc, #20]	; (8002e0c <MX_TIM5_Init+0x94>)
 8002df6:	f00a fe35 	bl	800da64 <HAL_TIMEx_MasterConfigSynchronization>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <MX_TIM5_Init+0x8c>
    Error_Handler();
 8002e00:	f000 fa72 	bl	80032e8 <Error_Handler>
}
 8002e04:	bf00      	nop
 8002e06:	3720      	adds	r7, #32
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	20000514 	.word	0x20000514
 8002e10:	40000c00 	.word	0x40000c00

08002e14 <MX_USART3_UART_Init>:
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
 8002e18:	4b22      	ldr	r3, [pc, #136]	; (8002ea4 <MX_USART3_UART_Init+0x90>)
 8002e1a:	4a23      	ldr	r2, [pc, #140]	; (8002ea8 <MX_USART3_UART_Init+0x94>)
 8002e1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8002e1e:	4b21      	ldr	r3, [pc, #132]	; (8002ea4 <MX_USART3_UART_Init+0x90>)
 8002e20:	4a22      	ldr	r2, [pc, #136]	; (8002eac <MX_USART3_UART_Init+0x98>)
 8002e22:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e24:	4b1f      	ldr	r3, [pc, #124]	; (8002ea4 <MX_USART3_UART_Init+0x90>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ea4 <MX_USART3_UART_Init+0x90>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e30:	4b1c      	ldr	r3, [pc, #112]	; (8002ea4 <MX_USART3_UART_Init+0x90>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e36:	4b1b      	ldr	r3, [pc, #108]	; (8002ea4 <MX_USART3_UART_Init+0x90>)
 8002e38:	220c      	movs	r2, #12
 8002e3a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e3c:	4b19      	ldr	r3, [pc, #100]	; (8002ea4 <MX_USART3_UART_Init+0x90>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e42:	4b18      	ldr	r3, [pc, #96]	; (8002ea4 <MX_USART3_UART_Init+0x90>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e48:	4b16      	ldr	r3, [pc, #88]	; (8002ea4 <MX_USART3_UART_Init+0x90>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e4e:	4b15      	ldr	r3, [pc, #84]	; (8002ea4 <MX_USART3_UART_Init+0x90>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e54:	4b13      	ldr	r3, [pc, #76]	; (8002ea4 <MX_USART3_UART_Init+0x90>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e5a:	4812      	ldr	r0, [pc, #72]	; (8002ea4 <MX_USART3_UART_Init+0x90>)
 8002e5c:	f00a fe90 	bl	800db80 <HAL_UART_Init>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <MX_USART3_UART_Init+0x56>
    Error_Handler();
 8002e66:	f000 fa3f 	bl	80032e8 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	480d      	ldr	r0, [pc, #52]	; (8002ea4 <MX_USART3_UART_Init+0x90>)
 8002e6e:	f00b ff20 	bl	800ecb2 <HAL_UARTEx_SetTxFifoThreshold>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <MX_USART3_UART_Init+0x68>
    Error_Handler();
 8002e78:	f000 fa36 	bl	80032e8 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	4809      	ldr	r0, [pc, #36]	; (8002ea4 <MX_USART3_UART_Init+0x90>)
 8002e80:	f00b ff55 	bl	800ed2e <HAL_UARTEx_SetRxFifoThreshold>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <MX_USART3_UART_Init+0x7a>
    Error_Handler();
 8002e8a:	f000 fa2d 	bl	80032e8 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002e8e:	4805      	ldr	r0, [pc, #20]	; (8002ea4 <MX_USART3_UART_Init+0x90>)
 8002e90:	f00b fed6 	bl	800ec40 <HAL_UARTEx_DisableFifoMode>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <MX_USART3_UART_Init+0x8a>
    Error_Handler();
 8002e9a:	f000 fa25 	bl	80032e8 <Error_Handler>
}
 8002e9e:	bf00      	nop
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20000560 	.word	0x20000560
 8002ea8:	40004800 	.word	0x40004800
 8002eac:	000f4240 	.word	0x000f4240

08002eb0 <MX_GPIO_Init>:
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08e      	sub	sp, #56	; 0x38
 8002eb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	605a      	str	r2, [r3, #4]
 8002ec0:	609a      	str	r2, [r3, #8]
 8002ec2:	60da      	str	r2, [r3, #12]
 8002ec4:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ec6:	4ba0      	ldr	r3, [pc, #640]	; (8003148 <MX_GPIO_Init+0x298>)
 8002ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ecc:	4a9e      	ldr	r2, [pc, #632]	; (8003148 <MX_GPIO_Init+0x298>)
 8002ece:	f043 0310 	orr.w	r3, r3, #16
 8002ed2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ed6:	4b9c      	ldr	r3, [pc, #624]	; (8003148 <MX_GPIO_Init+0x298>)
 8002ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002edc:	f003 0310 	and.w	r3, r3, #16
 8002ee0:	623b      	str	r3, [r7, #32]
 8002ee2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ee4:	4b98      	ldr	r3, [pc, #608]	; (8003148 <MX_GPIO_Init+0x298>)
 8002ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eea:	4a97      	ldr	r2, [pc, #604]	; (8003148 <MX_GPIO_Init+0x298>)
 8002eec:	f043 0304 	orr.w	r3, r3, #4
 8002ef0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ef4:	4b94      	ldr	r3, [pc, #592]	; (8003148 <MX_GPIO_Init+0x298>)
 8002ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002efa:	f003 0304 	and.w	r3, r3, #4
 8002efe:	61fb      	str	r3, [r7, #28]
 8002f00:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f02:	4b91      	ldr	r3, [pc, #580]	; (8003148 <MX_GPIO_Init+0x298>)
 8002f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f08:	4a8f      	ldr	r2, [pc, #572]	; (8003148 <MX_GPIO_Init+0x298>)
 8002f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f12:	4b8d      	ldr	r3, [pc, #564]	; (8003148 <MX_GPIO_Init+0x298>)
 8002f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f1c:	61bb      	str	r3, [r7, #24]
 8002f1e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f20:	4b89      	ldr	r3, [pc, #548]	; (8003148 <MX_GPIO_Init+0x298>)
 8002f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f26:	4a88      	ldr	r2, [pc, #544]	; (8003148 <MX_GPIO_Init+0x298>)
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f30:	4b85      	ldr	r3, [pc, #532]	; (8003148 <MX_GPIO_Init+0x298>)
 8002f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	617b      	str	r3, [r7, #20]
 8002f3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f3e:	4b82      	ldr	r3, [pc, #520]	; (8003148 <MX_GPIO_Init+0x298>)
 8002f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f44:	4a80      	ldr	r2, [pc, #512]	; (8003148 <MX_GPIO_Init+0x298>)
 8002f46:	f043 0302 	orr.w	r3, r3, #2
 8002f4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f4e:	4b7e      	ldr	r3, [pc, #504]	; (8003148 <MX_GPIO_Init+0x298>)
 8002f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f5c:	4b7a      	ldr	r3, [pc, #488]	; (8003148 <MX_GPIO_Init+0x298>)
 8002f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f62:	4a79      	ldr	r2, [pc, #484]	; (8003148 <MX_GPIO_Init+0x298>)
 8002f64:	f043 0320 	orr.w	r3, r3, #32
 8002f68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f6c:	4b76      	ldr	r3, [pc, #472]	; (8003148 <MX_GPIO_Init+0x298>)
 8002f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f72:	f003 0320 	and.w	r3, r3, #32
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f7a:	4b73      	ldr	r3, [pc, #460]	; (8003148 <MX_GPIO_Init+0x298>)
 8002f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f80:	4a71      	ldr	r2, [pc, #452]	; (8003148 <MX_GPIO_Init+0x298>)
 8002f82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f8a:	4b6f      	ldr	r3, [pc, #444]	; (8003148 <MX_GPIO_Init+0x298>)
 8002f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f98:	4b6b      	ldr	r3, [pc, #428]	; (8003148 <MX_GPIO_Init+0x298>)
 8002f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f9e:	4a6a      	ldr	r2, [pc, #424]	; (8003148 <MX_GPIO_Init+0x298>)
 8002fa0:	f043 0308 	orr.w	r3, r3, #8
 8002fa4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fa8:	4b67      	ldr	r3, [pc, #412]	; (8003148 <MX_GPIO_Init+0x298>)
 8002faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	607b      	str	r3, [r7, #4]
 8002fb4:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_WritePin(GPIOE, ATT_4_Pin|ATT_8_Pin|ATT_16_Pin, GPIO_PIN_SET);
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	2134      	movs	r1, #52	; 0x34
 8002fba:	4864      	ldr	r0, [pc, #400]	; (800314c <MX_GPIO_Init+0x29c>)
 8002fbc:	f004 fe3e 	bl	8007c3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|MW_INVALID_Pin|LASER_TUNING_Pin|LD3_Pin
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f245 1103 	movw	r1, #20739	; 0x5103
 8002fc6:	4862      	ldr	r0, [pc, #392]	; (8003150 <MX_GPIO_Init+0x2a0>)
 8002fc8:	f004 fe38 	bl	8007c3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET);
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2101      	movs	r1, #1
 8002fd0:	4860      	ldr	r0, [pc, #384]	; (8003154 <MX_GPIO_Init+0x2a4>)
 8002fd2:	f004 fe33 	bl	8007c3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002fdc:	485e      	ldr	r0, [pc, #376]	; (8003158 <MX_GPIO_Init+0x2a8>)
 8002fde:	f004 fe2d 	bl	8007c3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, SCLK_Pin|MOSI_Pin|REG_EN_Pin, GPIO_PIN_RESET);
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8002fe8:	485c      	ldr	r0, [pc, #368]	; (800315c <MX_GPIO_Init+0x2ac>)
 8002fea:	f004 fe27 	bl	8007c3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ff4:	4859      	ldr	r0, [pc, #356]	; (800315c <MX_GPIO_Init+0x2ac>)
 8002ff6:	f004 fe21 	bl	8007c3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ATT_2_Pin|ATT_1_Pin|ATT_05_Pin|ATT_025_Pin
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	21f8      	movs	r1, #248	; 0xf8
 8002ffe:	4856      	ldr	r0, [pc, #344]	; (8003158 <MX_GPIO_Init+0x2a8>)
 8003000:	f004 fe1c 	bl	8007c3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003004:	2200      	movs	r2, #0
 8003006:	2102      	movs	r1, #2
 8003008:	4850      	ldr	r0, [pc, #320]	; (800314c <MX_GPIO_Init+0x29c>)
 800300a:	f004 fe17 	bl	8007c3c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = ATT_4_Pin|ATT_8_Pin|ATT_16_Pin|LD2_Pin;
 800300e:	2336      	movs	r3, #54	; 0x36
 8003010:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003012:	2301      	movs	r3, #1
 8003014:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003016:	2300      	movs	r3, #0
 8003018:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800301a:	2300      	movs	r3, #0
 800301c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800301e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003022:	4619      	mov	r1, r3
 8003024:	4849      	ldr	r0, [pc, #292]	; (800314c <MX_GPIO_Init+0x29c>)
 8003026:	f004 fc41 	bl	80078ac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 800302a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800302e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003030:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003034:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003036:	2300      	movs	r3, #0
 8003038:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800303a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800303e:	4619      	mov	r1, r3
 8003040:	4846      	ldr	r0, [pc, #280]	; (800315c <MX_GPIO_Init+0x2ac>)
 8003042:	f004 fc33 	bl	80078ac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|MW_INVALID_Pin|LASER_TUNING_Pin|LD3_Pin
 8003046:	f245 1303 	movw	r3, #20739	; 0x5103
 800304a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800304c:	2301      	movs	r3, #1
 800304e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003050:	2300      	movs	r3, #0
 8003052:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003054:	2300      	movs	r3, #0
 8003056:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800305c:	4619      	mov	r1, r3
 800305e:	483c      	ldr	r0, [pc, #240]	; (8003150 <MX_GPIO_Init+0x2a0>)
 8003060:	f004 fc24 	bl	80078ac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003064:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800306a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800306e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003070:	2300      	movs	r3, #0
 8003072:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003074:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003078:	4619      	mov	r1, r3
 800307a:	4839      	ldr	r0, [pc, #228]	; (8003160 <MX_GPIO_Init+0x2b0>)
 800307c:	f004 fc16 	bl	80078ac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SCOPE_TRIG_OUT_Pin;
 8003080:	2301      	movs	r3, #1
 8003082:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003084:	2301      	movs	r3, #1
 8003086:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003088:	2300      	movs	r3, #0
 800308a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800308c:	2300      	movs	r3, #0
 800308e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SCOPE_TRIG_OUT_GPIO_Port, &GPIO_InitStruct);
 8003090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003094:	4619      	mov	r1, r3
 8003096:	482f      	ldr	r0, [pc, #188]	; (8003154 <MX_GPIO_Init+0x2a4>)
 8003098:	f004 fc08 	bl	80078ac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ATT_2_Pin|ATT_1_Pin|ATT_05_Pin
 800309c:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030a2:	2301      	movs	r3, #1
 80030a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a6:	2300      	movs	r3, #0
 80030a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030aa:	2300      	movs	r3, #0
 80030ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030b2:	4619      	mov	r1, r3
 80030b4:	4828      	ldr	r0, [pc, #160]	; (8003158 <MX_GPIO_Init+0x2a8>)
 80030b6:	f004 fbf9 	bl	80078ac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80030ba:	2380      	movs	r3, #128	; 0x80
 80030bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80030be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80030c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c4:	2300      	movs	r3, #0
 80030c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80030c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030cc:	4619      	mov	r1, r3
 80030ce:	4821      	ldr	r0, [pc, #132]	; (8003154 <MX_GPIO_Init+0x2a4>)
 80030d0:	f004 fbec 	bl	80078ac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SCLK_Pin|MOSI_Pin|SEN_Pin|REG_EN_Pin;
 80030d4:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030da:	2301      	movs	r3, #1
 80030dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80030de:	2302      	movs	r3, #2
 80030e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e2:	2300      	movs	r3, #0
 80030e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030ea:	4619      	mov	r1, r3
 80030ec:	481b      	ldr	r0, [pc, #108]	; (800315c <MX_GPIO_Init+0x2ac>)
 80030ee:	f004 fbdd 	bl	80078ac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80030f2:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80030f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f8:	2302      	movs	r3, #2
 80030fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fc:	2300      	movs	r3, #0
 80030fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003100:	2300      	movs	r3, #0
 8003102:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8003104:	230a      	movs	r3, #10
 8003106:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800310c:	4619      	mov	r1, r3
 800310e:	4815      	ldr	r0, [pc, #84]	; (8003164 <MX_GPIO_Init+0x2b4>)
 8003110:	f004 fbcc 	bl	80078ac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MISO_Pin;
 8003114:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003118:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800311a:	2300      	movs	r3, #0
 800311c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311e:	2300      	movs	r3, #0
 8003120:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 8003122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003126:	4619      	mov	r1, r3
 8003128:	480c      	ldr	r0, [pc, #48]	; (800315c <MX_GPIO_Init+0x2ac>)
 800312a:	f004 fbbf 	bl	80078ac <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800312e:	2200      	movs	r2, #0
 8003130:	2100      	movs	r1, #0
 8003132:	2028      	movs	r0, #40	; 0x28
 8003134:	f002 fe31 	bl	8005d9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003138:	2028      	movs	r0, #40	; 0x28
 800313a:	f002 fe48 	bl	8005dce <HAL_NVIC_EnableIRQ>
}
 800313e:	bf00      	nop
 8003140:	3738      	adds	r7, #56	; 0x38
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	58024400 	.word	0x58024400
 800314c:	58021000 	.word	0x58021000
 8003150:	58020400 	.word	0x58020400
 8003154:	58021800 	.word	0x58021800
 8003158:	58020c00 	.word	0x58020c00
 800315c:	58020800 	.word	0x58020800
 8003160:	58021400 	.word	0x58021400
 8003164:	58020000 	.word	0x58020000

08003168 <HAL_ADC_ConvCpltCallback>:
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  adc_val = 0x0000FFFF & HAL_ADC_GetValue(&hadc3); //ensure that only 16 bits are recorded
 8003170:	482a      	ldr	r0, [pc, #168]	; (800321c <HAL_ADC_ConvCpltCallback+0xb4>)
 8003172:	f001 fccd 	bl	8004b10 <HAL_ADC_GetValue>
 8003176:	4603      	mov	r3, r0
 8003178:	b29b      	uxth	r3, r3
 800317a:	4a29      	ldr	r2, [pc, #164]	; (8003220 <HAL_ADC_ConvCpltCallback+0xb8>)
 800317c:	6013      	str	r3, [r2, #0]
  sample_count++;
 800317e:	4b29      	ldr	r3, [pc, #164]	; (8003224 <HAL_ADC_ConvCpltCallback+0xbc>)
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	b29b      	uxth	r3, r3
 8003184:	3301      	adds	r3, #1
 8003186:	b29a      	uxth	r2, r3
 8003188:	4b26      	ldr	r3, [pc, #152]	; (8003224 <HAL_ADC_ConvCpltCallback+0xbc>)
 800318a:	801a      	strh	r2, [r3, #0]
		adc_readings_total = adc_readings_total + adc_val;
 800318c:	4b26      	ldr	r3, [pc, #152]	; (8003228 <HAL_ADC_ConvCpltCallback+0xc0>)
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	4b23      	ldr	r3, [pc, #140]	; (8003220 <HAL_ADC_ConvCpltCallback+0xb8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4413      	add	r3, r2
 8003196:	4a24      	ldr	r2, [pc, #144]	; (8003228 <HAL_ADC_ConvCpltCallback+0xc0>)
 8003198:	6013      	str	r3, [r2, #0]
		if (sample_count >= ADC_SAMPLES) {//if the sample buffer is full
 800319a:	4b22      	ldr	r3, [pc, #136]	; (8003224 <HAL_ADC_ConvCpltCallback+0xbc>)
 800319c:	881b      	ldrh	r3, [r3, #0]
 800319e:	b29b      	uxth	r3, r3
 80031a0:	2b07      	cmp	r3, #7
 80031a2:	d912      	bls.n	80031ca <HAL_ADC_ConvCpltCallback+0x62>
			adc_readings_total = adc_readings_total - adc_readings[adc_sample_no]; //subtract the expired value from the total
 80031a4:	4b20      	ldr	r3, [pc, #128]	; (8003228 <HAL_ADC_ConvCpltCallback+0xc0>)
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	4b20      	ldr	r3, [pc, #128]	; (800322c <HAL_ADC_ConvCpltCallback+0xc4>)
 80031aa:	881b      	ldrh	r3, [r3, #0]
 80031ac:	4619      	mov	r1, r3
 80031ae:	4b20      	ldr	r3, [pc, #128]	; (8003230 <HAL_ADC_ConvCpltCallback+0xc8>)
 80031b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	4a1c      	ldr	r2, [pc, #112]	; (8003228 <HAL_ADC_ConvCpltCallback+0xc0>)
 80031b8:	6013      	str	r3, [r2, #0]
			adc_averaged_val = adc_readings_total >> ADC_SAMPLE_POWER; //truncate as a cycle-efficient division
 80031ba:	4b1b      	ldr	r3, [pc, #108]	; (8003228 <HAL_ADC_ConvCpltCallback+0xc0>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	08db      	lsrs	r3, r3, #3
 80031c0:	4a1c      	ldr	r2, [pc, #112]	; (8003234 <HAL_ADC_ConvCpltCallback+0xcc>)
 80031c2:	6013      	str	r3, [r2, #0]
			adc_average_updated = true;
 80031c4:	4b1c      	ldr	r3, [pc, #112]	; (8003238 <HAL_ADC_ConvCpltCallback+0xd0>)
 80031c6:	2201      	movs	r2, #1
 80031c8:	701a      	strb	r2, [r3, #0]
		adc_readings[adc_sample_no] = adc_val;
 80031ca:	4b18      	ldr	r3, [pc, #96]	; (800322c <HAL_ADC_ConvCpltCallback+0xc4>)
 80031cc:	881b      	ldrh	r3, [r3, #0]
 80031ce:	4619      	mov	r1, r3
 80031d0:	4b13      	ldr	r3, [pc, #76]	; (8003220 <HAL_ADC_ConvCpltCallback+0xb8>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a16      	ldr	r2, [pc, #88]	; (8003230 <HAL_ADC_ConvCpltCallback+0xc8>)
 80031d6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		adc_sample_no++;
 80031da:	4b14      	ldr	r3, [pc, #80]	; (800322c <HAL_ADC_ConvCpltCallback+0xc4>)
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	3301      	adds	r3, #1
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	4b12      	ldr	r3, [pc, #72]	; (800322c <HAL_ADC_ConvCpltCallback+0xc4>)
 80031e4:	801a      	strh	r2, [r3, #0]
		if (adc_sample_no >= ADC_SAMPLES) adc_sample_no = 0; //set back to zero if loop complete
 80031e6:	4b11      	ldr	r3, [pc, #68]	; (800322c <HAL_ADC_ConvCpltCallback+0xc4>)
 80031e8:	881b      	ldrh	r3, [r3, #0]
 80031ea:	2b07      	cmp	r3, #7
 80031ec:	d902      	bls.n	80031f4 <HAL_ADC_ConvCpltCallback+0x8c>
 80031ee:	4b0f      	ldr	r3, [pc, #60]	; (800322c <HAL_ADC_ConvCpltCallback+0xc4>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	801a      	strh	r2, [r3, #0]
	if(adc_average_updated) {
 80031f4:	4b10      	ldr	r3, [pc, #64]	; (8003238 <HAL_ADC_ConvCpltCallback+0xd0>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00b      	beq.n	8003214 <HAL_ADC_ConvCpltCallback+0xac>
		dac_val = adc_averaged_val >> 4;
 80031fc:	4b0d      	ldr	r3, [pc, #52]	; (8003234 <HAL_ADC_ConvCpltCallback+0xcc>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	091b      	lsrs	r3, r3, #4
 8003202:	4a0e      	ldr	r2, [pc, #56]	; (800323c <HAL_ADC_ConvCpltCallback+0xd4>)
 8003204:	6013      	str	r3, [r2, #0]
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_val);
 8003206:	4b0d      	ldr	r3, [pc, #52]	; (800323c <HAL_ADC_ConvCpltCallback+0xd4>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2200      	movs	r2, #0
 800320c:	2100      	movs	r1, #0
 800320e:	480c      	ldr	r0, [pc, #48]	; (8003240 <HAL_ADC_ConvCpltCallback+0xd8>)
 8003210:	f002 fee8 	bl	8005fe4 <HAL_DAC_SetValue>
}
 8003214:	bf00      	nop
 8003216:	3708      	adds	r7, #8
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	20000258 	.word	0x20000258
 8003220:	200005fc 	.word	0x200005fc
 8003224:	200005f6 	.word	0x200005f6
 8003228:	20000628 	.word	0x20000628
 800322c:	20000624 	.word	0x20000624
 8003230:	20000604 	.word	0x20000604
 8003234:	20000600 	.word	0x20000600
 8003238:	2000062c 	.word	0x2000062c
 800323c:	20000640 	.word	0x20000640
 8003240:	200002bc 	.word	0x200002bc

08003244 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800324a:	463b      	mov	r3, r7
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	605a      	str	r2, [r3, #4]
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8003256:	f002 fdd5 	bl	8005e04 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800325a:	2301      	movs	r3, #1
 800325c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800325e:	2300      	movs	r3, #0
 8003260:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8003262:	2300      	movs	r3, #0
 8003264:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8003266:	231f      	movs	r3, #31
 8003268:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800326a:	2387      	movs	r3, #135	; 0x87
 800326c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800326e:	2300      	movs	r3, #0
 8003270:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8003272:	2300      	movs	r3, #0
 8003274:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8003276:	2301      	movs	r3, #1
 8003278:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800327a:	2301      	movs	r3, #1
 800327c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800327e:	2300      	movs	r3, #0
 8003280:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8003282:	2300      	movs	r3, #0
 8003284:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003286:	463b      	mov	r3, r7
 8003288:	4618      	mov	r0, r3
 800328a:	f002 fdf3 	bl	8005e74 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800328e:	2301      	movs	r3, #1
 8003290:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 8003292:	4b13      	ldr	r3, [pc, #76]	; (80032e0 <MPU_Config+0x9c>)
 8003294:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8003296:	2310      	movs	r3, #16
 8003298:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800329a:	2300      	movs	r3, #0
 800329c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800329e:	2301      	movs	r3, #1
 80032a0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80032a2:	2303      	movs	r3, #3
 80032a4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80032a6:	2300      	movs	r3, #0
 80032a8:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80032aa:	463b      	mov	r3, r7
 80032ac:	4618      	mov	r0, r3
 80032ae:	f002 fde1 	bl	8005e74 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80032b2:	2302      	movs	r3, #2
 80032b4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 80032b6:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <MPU_Config+0xa0>)
 80032b8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 80032ba:	2308      	movs	r3, #8
 80032bc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80032be:	2300      	movs	r3, #0
 80032c0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80032c2:	2301      	movs	r3, #1
 80032c4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80032c6:	2301      	movs	r3, #1
 80032c8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80032ca:	463b      	mov	r3, r7
 80032cc:	4618      	mov	r0, r3
 80032ce:	f002 fdd1 	bl	8005e74 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80032d2:	2004      	movs	r0, #4
 80032d4:	f002 fdae 	bl	8005e34 <HAL_MPU_Enable>

}
 80032d8:	bf00      	nop
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	30020000 	.word	0x30020000
 80032e4:	30040000 	.word	0x30040000

080032e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80032ec:	b672      	cpsid	i
}
 80032ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	__disable_irq();

	printf("Error handler routine called\r\n");
 80032f0:	4810      	ldr	r0, [pc, #64]	; (8003334 <Error_Handler+0x4c>)
 80032f2:	f016 fd3b 	bl	8019d6c <puts>

	/* Disable the AOM */
	HAL_HRTIM_WaveformOutputStop(&hhrtim, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1);
 80032f6:	f240 1103 	movw	r1, #259	; 0x103
 80032fa:	480f      	ldr	r0, [pc, #60]	; (8003338 <Error_Handler+0x50>)
 80032fc:	f004 ffff 	bl	80082fe <HAL_HRTIM_WaveformOutputStop>
	HAL_HRTIM_WaveformCounterStop_IT(&hhrtim, HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E);
 8003300:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 8003304:	480c      	ldr	r0, [pc, #48]	; (8003338 <Error_Handler+0x50>)
 8003306:	f005 f827 	bl	8008358 <HAL_HRTIM_WaveformCountStop_IT>

	/* Power down the synthesiser */
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0);
 800330a:	2200      	movs	r2, #0
 800330c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003310:	480a      	ldr	r0, [pc, #40]	; (800333c <Error_Handler+0x54>)
 8003312:	f004 fc93 	bl	8007c3c <HAL_GPIO_WritePin>

	while (1) {
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 8003316:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800331a:	4809      	ldr	r0, [pc, #36]	; (8003340 <Error_Handler+0x58>)
 800331c:	f004 fca7 	bl	8007c6e <HAL_GPIO_TogglePin>
		timer_delay(SLOW_TIMER, ERROR_LED_DELAY);
 8003320:	4b08      	ldr	r3, [pc, #32]	; (8003344 <Error_Handler+0x5c>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003328:	4611      	mov	r1, r2
 800332a:	4618      	mov	r0, r3
 800332c:	f018 fc54 	bl	801bbd8 <__timer_delay_veneer>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 8003330:	e7f1      	b.n	8003316 <Error_Handler+0x2e>
 8003332:	bf00      	nop
 8003334:	0801c0d0 	.word	0x0801c0d0
 8003338:	200002d0 	.word	0x200002d0
 800333c:	58020800 	.word	0x58020800
 8003340:	58020400 	.word	0x58020400
 8003344:	20000018 	.word	0x20000018

08003348 <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800334e:	4b0a      	ldr	r3, [pc, #40]	; (8003378 <HAL_MspInit+0x30>)
 8003350:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003354:	4a08      	ldr	r2, [pc, #32]	; (8003378 <HAL_MspInit+0x30>)
 8003356:	f043 0302 	orr.w	r3, r3, #2
 800335a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800335e:	4b06      	ldr	r3, [pc, #24]	; (8003378 <HAL_MspInit+0x30>)
 8003360:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	607b      	str	r3, [r7, #4]
 800336a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	58024400 	.word	0x58024400

0800337c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b0b4      	sub	sp, #208	; 0xd0
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003384:	f107 0310 	add.w	r3, r7, #16
 8003388:	22c0      	movs	r2, #192	; 0xc0
 800338a:	2100      	movs	r1, #0
 800338c:	4618      	mov	r0, r3
 800338e:	f016 fddd 	bl	8019f4c <memset>
  if(hadc->Instance==ADC3)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a2b      	ldr	r2, [pc, #172]	; (8003444 <HAL_ADC_MspInit+0xc8>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d14e      	bne.n	800343a <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800339c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80033a0:	f04f 0300 	mov.w	r3, #0
 80033a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80033a8:	2301      	movs	r3, #1
 80033aa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 80033ac:	2313      	movs	r3, #19
 80033ae:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 79;
 80033b0:	234f      	movs	r3, #79	; 0x4f
 80033b2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80033b4:	2302      	movs	r3, #2
 80033b6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80033b8:	2302      	movs	r3, #2
 80033ba:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80033bc:	23c0      	movs	r3, #192	; 0xc0
 80033be:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80033c0:	2320      	movs	r3, #32
 80033c2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80033c4:	2300      	movs	r3, #0
 80033c6:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80033c8:	2300      	movs	r3, #0
 80033ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033ce:	f107 0310 	add.w	r3, r7, #16
 80033d2:	4618      	mov	r0, r3
 80033d4:	f007 fb6a 	bl	800aaac <HAL_RCCEx_PeriphCLKConfig>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 80033de:	f7ff ff83 	bl	80032e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80033e2:	4b19      	ldr	r3, [pc, #100]	; (8003448 <HAL_ADC_MspInit+0xcc>)
 80033e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033e8:	4a17      	ldr	r2, [pc, #92]	; (8003448 <HAL_ADC_MspInit+0xcc>)
 80033ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033f2:	4b15      	ldr	r3, [pc, #84]	; (8003448 <HAL_ADC_MspInit+0xcc>)
 80033f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003400:	4b11      	ldr	r3, [pc, #68]	; (8003448 <HAL_ADC_MspInit+0xcc>)
 8003402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003406:	4a10      	ldr	r2, [pc, #64]	; (8003448 <HAL_ADC_MspInit+0xcc>)
 8003408:	f043 0304 	orr.w	r3, r3, #4
 800340c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003410:	4b0d      	ldr	r3, [pc, #52]	; (8003448 <HAL_ADC_MspInit+0xcc>)
 8003412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003416:	f003 0304 	and.w	r3, r3, #4
 800341a:	60bb      	str	r3, [r7, #8]
 800341c:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 800341e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8003422:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003426:	f000 fe61 	bl	80040ec <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 800342a:	2200      	movs	r2, #0
 800342c:	2100      	movs	r1, #0
 800342e:	207f      	movs	r0, #127	; 0x7f
 8003430:	f002 fcb3 	bl	8005d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8003434:	207f      	movs	r0, #127	; 0x7f
 8003436:	f002 fcca 	bl	8005dce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800343a:	bf00      	nop
 800343c:	37d0      	adds	r7, #208	; 0xd0
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	58026000 	.word	0x58026000
 8003448:	58024400 	.word	0x58024400

0800344c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b08a      	sub	sp, #40	; 0x28
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003454:	f107 0314 	add.w	r3, r7, #20
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	605a      	str	r2, [r3, #4]
 800345e:	609a      	str	r2, [r3, #8]
 8003460:	60da      	str	r2, [r3, #12]
 8003462:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a18      	ldr	r2, [pc, #96]	; (80034cc <HAL_DAC_MspInit+0x80>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d129      	bne.n	80034c2 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800346e:	4b18      	ldr	r3, [pc, #96]	; (80034d0 <HAL_DAC_MspInit+0x84>)
 8003470:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003474:	4a16      	ldr	r2, [pc, #88]	; (80034d0 <HAL_DAC_MspInit+0x84>)
 8003476:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800347a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800347e:	4b14      	ldr	r3, [pc, #80]	; (80034d0 <HAL_DAC_MspInit+0x84>)
 8003480:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003484:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003488:	613b      	str	r3, [r7, #16]
 800348a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800348c:	4b10      	ldr	r3, [pc, #64]	; (80034d0 <HAL_DAC_MspInit+0x84>)
 800348e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003492:	4a0f      	ldr	r2, [pc, #60]	; (80034d0 <HAL_DAC_MspInit+0x84>)
 8003494:	f043 0301 	orr.w	r3, r3, #1
 8003498:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800349c:	4b0c      	ldr	r3, [pc, #48]	; (80034d0 <HAL_DAC_MspInit+0x84>)
 800349e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80034aa:	2330      	movs	r3, #48	; 0x30
 80034ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034ae:	2303      	movs	r3, #3
 80034b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b6:	f107 0314 	add.w	r3, r7, #20
 80034ba:	4619      	mov	r1, r3
 80034bc:	4805      	ldr	r0, [pc, #20]	; (80034d4 <HAL_DAC_MspInit+0x88>)
 80034be:	f004 f9f5 	bl	80078ac <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80034c2:	bf00      	nop
 80034c4:	3728      	adds	r7, #40	; 0x28
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	40007400 	.word	0x40007400
 80034d0:	58024400 	.word	0x58024400
 80034d4:	58020000 	.word	0x58020000

080034d8 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b0b4      	sub	sp, #208	; 0xd0
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034e0:	f107 0310 	add.w	r3, r7, #16
 80034e4:	22c0      	movs	r2, #192	; 0xc0
 80034e6:	2100      	movs	r1, #0
 80034e8:	4618      	mov	r0, r3
 80034ea:	f016 fd2f 	bl	8019f4c <memset>
  if(hhrtim->Instance==HRTIM1)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a1c      	ldr	r2, [pc, #112]	; (8003564 <HAL_HRTIM_MspInit+0x8c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d131      	bne.n	800355c <HAL_HRTIM_MspInit+0x84>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 80034f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034fc:	f04f 0300 	mov.w	r3, #0
 8003500:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 8003504:	2300      	movs	r3, #0
 8003506:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800350a:	f107 0310 	add.w	r3, r7, #16
 800350e:	4618      	mov	r0, r3
 8003510:	f007 facc 	bl	800aaac <HAL_RCCEx_PeriphCLKConfig>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 800351a:	f7ff fee5 	bl	80032e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 800351e:	4b12      	ldr	r3, [pc, #72]	; (8003568 <HAL_HRTIM_MspInit+0x90>)
 8003520:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003524:	4a10      	ldr	r2, [pc, #64]	; (8003568 <HAL_HRTIM_MspInit+0x90>)
 8003526:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800352a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800352e:	4b0e      	ldr	r3, [pc, #56]	; (8003568 <HAL_HRTIM_MspInit+0x90>)
 8003530:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003534:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	68fb      	ldr	r3, [r7, #12]
    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_TIMA_IRQn, 0, 0);
 800353c:	2200      	movs	r2, #0
 800353e:	2100      	movs	r1, #0
 8003540:	2068      	movs	r0, #104	; 0x68
 8003542:	f002 fc2a 	bl	8005d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMA_IRQn);
 8003546:	2068      	movs	r0, #104	; 0x68
 8003548:	f002 fc41 	bl	8005dce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(HRTIM1_TIME_IRQn, 0, 0);
 800354c:	2200      	movs	r2, #0
 800354e:	2100      	movs	r1, #0
 8003550:	206c      	movs	r0, #108	; 0x6c
 8003552:	f002 fc22 	bl	8005d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIME_IRQn);
 8003556:	206c      	movs	r0, #108	; 0x6c
 8003558:	f002 fc39 	bl	8005dce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 800355c:	bf00      	nop
 800355e:	37d0      	adds	r7, #208	; 0xd0
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40017400 	.word	0x40017400
 8003568:	58024400 	.word	0x58024400

0800356c <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b08a      	sub	sp, #40	; 0x28
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003574:	f107 0314 	add.w	r3, r7, #20
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	605a      	str	r2, [r3, #4]
 800357e:	609a      	str	r2, [r3, #8]
 8003580:	60da      	str	r2, [r3, #12]
 8003582:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a22      	ldr	r2, [pc, #136]	; (8003614 <HAL_HRTIM_MspPostInit+0xa8>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d13d      	bne.n	800360a <HAL_HRTIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800358e:	4b22      	ldr	r3, [pc, #136]	; (8003618 <HAL_HRTIM_MspPostInit+0xac>)
 8003590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003594:	4a20      	ldr	r2, [pc, #128]	; (8003618 <HAL_HRTIM_MspPostInit+0xac>)
 8003596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800359a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800359e:	4b1e      	ldr	r3, [pc, #120]	; (8003618 <HAL_HRTIM_MspPostInit+0xac>)
 80035a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a8:	613b      	str	r3, [r7, #16]
 80035aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035ac:	4b1a      	ldr	r3, [pc, #104]	; (8003618 <HAL_HRTIM_MspPostInit+0xac>)
 80035ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035b2:	4a19      	ldr	r2, [pc, #100]	; (8003618 <HAL_HRTIM_MspPostInit+0xac>)
 80035b4:	f043 0304 	orr.w	r3, r3, #4
 80035b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035bc:	4b16      	ldr	r3, [pc, #88]	; (8003618 <HAL_HRTIM_MspPostInit+0xac>)
 80035be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035c2:	f003 0304 	and.w	r3, r3, #4
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	68fb      	ldr	r3, [r7, #12]
    /**HRTIM GPIO Configuration
    PG6     ------> HRTIM_CHE1
    PC6     ------> HRTIM_CHA1
    PC7     ------> HRTIM_CHA2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80035ca:	2340      	movs	r3, #64	; 0x40
 80035cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ce:	2302      	movs	r3, #2
 80035d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d2:	2300      	movs	r3, #0
 80035d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035d6:	2303      	movs	r3, #3
 80035d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 80035da:	2302      	movs	r3, #2
 80035dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80035de:	f107 0314 	add.w	r3, r7, #20
 80035e2:	4619      	mov	r1, r3
 80035e4:	480d      	ldr	r0, [pc, #52]	; (800361c <HAL_HRTIM_MspPostInit+0xb0>)
 80035e6:	f004 f961 	bl	80078ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80035ea:	23c0      	movs	r3, #192	; 0xc0
 80035ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ee:	2302      	movs	r3, #2
 80035f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035f6:	2303      	movs	r3, #3
 80035f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 80035fa:	2301      	movs	r3, #1
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035fe:	f107 0314 	add.w	r3, r7, #20
 8003602:	4619      	mov	r1, r3
 8003604:	4806      	ldr	r0, [pc, #24]	; (8003620 <HAL_HRTIM_MspPostInit+0xb4>)
 8003606:	f004 f951 	bl	80078ac <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 800360a:	bf00      	nop
 800360c:	3728      	adds	r7, #40	; 0x28
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40017400 	.word	0x40017400
 8003618:	58024400 	.word	0x58024400
 800361c:	58021800 	.word	0x58021800
 8003620:	58020800 	.word	0x58020800

08003624 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b0b4      	sub	sp, #208	; 0xd0
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800362c:	f107 0310 	add.w	r3, r7, #16
 8003630:	22c0      	movs	r2, #192	; 0xc0
 8003632:	2100      	movs	r1, #0
 8003634:	4618      	mov	r0, r3
 8003636:	f016 fc89 	bl	8019f4c <memset>
  if(hlptim->Instance==LPTIM1)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a19      	ldr	r2, [pc, #100]	; (80036a4 <HAL_LPTIM_MspInit+0x80>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d12a      	bne.n	800369a <HAL_LPTIM_MspInit+0x76>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8003644:	f04f 0220 	mov.w	r2, #32
 8003648:	f04f 0300 	mov.w	r3, #0
 800364c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8003650:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003654:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003658:	f107 0310 	add.w	r3, r7, #16
 800365c:	4618      	mov	r0, r3
 800365e:	f007 fa25 	bl	800aaac <HAL_RCCEx_PeriphCLKConfig>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <HAL_LPTIM_MspInit+0x48>
    {
      Error_Handler();
 8003668:	f7ff fe3e 	bl	80032e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800366c:	4b0e      	ldr	r3, [pc, #56]	; (80036a8 <HAL_LPTIM_MspInit+0x84>)
 800366e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003672:	4a0d      	ldr	r2, [pc, #52]	; (80036a8 <HAL_LPTIM_MspInit+0x84>)
 8003674:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003678:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800367c:	4b0a      	ldr	r3, [pc, #40]	; (80036a8 <HAL_LPTIM_MspInit+0x84>)
 800367e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003682:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 800368a:	2200      	movs	r2, #0
 800368c:	2100      	movs	r1, #0
 800368e:	205d      	movs	r0, #93	; 0x5d
 8003690:	f002 fb83 	bl	8005d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8003694:	205d      	movs	r0, #93	; 0x5d
 8003696:	f002 fb9a 	bl	8005dce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 800369a:	bf00      	nop
 800369c:	37d0      	adds	r7, #208	; 0xd0
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	40002400 	.word	0x40002400
 80036a8:	58024400 	.word	0x58024400

080036ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b089      	sub	sp, #36	; 0x24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a35      	ldr	r2, [pc, #212]	; (8003790 <HAL_TIM_Base_MspInit+0xe4>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d10f      	bne.n	80036de <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80036be:	4b35      	ldr	r3, [pc, #212]	; (8003794 <HAL_TIM_Base_MspInit+0xe8>)
 80036c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036c4:	4a33      	ldr	r2, [pc, #204]	; (8003794 <HAL_TIM_Base_MspInit+0xe8>)
 80036c6:	f043 0301 	orr.w	r3, r3, #1
 80036ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80036ce:	4b31      	ldr	r3, [pc, #196]	; (8003794 <HAL_TIM_Base_MspInit+0xe8>)
 80036d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	61fb      	str	r3, [r7, #28]
 80036da:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80036dc:	e052      	b.n	8003784 <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM2)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e6:	d10f      	bne.n	8003708 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036e8:	4b2a      	ldr	r3, [pc, #168]	; (8003794 <HAL_TIM_Base_MspInit+0xe8>)
 80036ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036ee:	4a29      	ldr	r2, [pc, #164]	; (8003794 <HAL_TIM_Base_MspInit+0xe8>)
 80036f0:	f043 0301 	orr.w	r3, r3, #1
 80036f4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80036f8:	4b26      	ldr	r3, [pc, #152]	; (8003794 <HAL_TIM_Base_MspInit+0xe8>)
 80036fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	61bb      	str	r3, [r7, #24]
 8003704:	69bb      	ldr	r3, [r7, #24]
}
 8003706:	e03d      	b.n	8003784 <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM3)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a22      	ldr	r2, [pc, #136]	; (8003798 <HAL_TIM_Base_MspInit+0xec>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d10f      	bne.n	8003732 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003712:	4b20      	ldr	r3, [pc, #128]	; (8003794 <HAL_TIM_Base_MspInit+0xe8>)
 8003714:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003718:	4a1e      	ldr	r2, [pc, #120]	; (8003794 <HAL_TIM_Base_MspInit+0xe8>)
 800371a:	f043 0302 	orr.w	r3, r3, #2
 800371e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003722:	4b1c      	ldr	r3, [pc, #112]	; (8003794 <HAL_TIM_Base_MspInit+0xe8>)
 8003724:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	617b      	str	r3, [r7, #20]
 800372e:	697b      	ldr	r3, [r7, #20]
}
 8003730:	e028      	b.n	8003784 <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM4)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a19      	ldr	r2, [pc, #100]	; (800379c <HAL_TIM_Base_MspInit+0xf0>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d10f      	bne.n	800375c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800373c:	4b15      	ldr	r3, [pc, #84]	; (8003794 <HAL_TIM_Base_MspInit+0xe8>)
 800373e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003742:	4a14      	ldr	r2, [pc, #80]	; (8003794 <HAL_TIM_Base_MspInit+0xe8>)
 8003744:	f043 0304 	orr.w	r3, r3, #4
 8003748:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800374c:	4b11      	ldr	r3, [pc, #68]	; (8003794 <HAL_TIM_Base_MspInit+0xe8>)
 800374e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003752:	f003 0304 	and.w	r3, r3, #4
 8003756:	613b      	str	r3, [r7, #16]
 8003758:	693b      	ldr	r3, [r7, #16]
}
 800375a:	e013      	b.n	8003784 <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM5)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a0f      	ldr	r2, [pc, #60]	; (80037a0 <HAL_TIM_Base_MspInit+0xf4>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d10e      	bne.n	8003784 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003766:	4b0b      	ldr	r3, [pc, #44]	; (8003794 <HAL_TIM_Base_MspInit+0xe8>)
 8003768:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800376c:	4a09      	ldr	r2, [pc, #36]	; (8003794 <HAL_TIM_Base_MspInit+0xe8>)
 800376e:	f043 0308 	orr.w	r3, r3, #8
 8003772:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003776:	4b07      	ldr	r3, [pc, #28]	; (8003794 <HAL_TIM_Base_MspInit+0xe8>)
 8003778:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800377c:	f003 0308 	and.w	r3, r3, #8
 8003780:	60fb      	str	r3, [r7, #12]
 8003782:	68fb      	ldr	r3, [r7, #12]
}
 8003784:	bf00      	nop
 8003786:	3724      	adds	r7, #36	; 0x24
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	40010000 	.word	0x40010000
 8003794:	58024400 	.word	0x58024400
 8003798:	40000400 	.word	0x40000400
 800379c:	40000800 	.word	0x40000800
 80037a0:	40000c00 	.word	0x40000c00

080037a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b0ba      	sub	sp, #232	; 0xe8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	605a      	str	r2, [r3, #4]
 80037b6:	609a      	str	r2, [r3, #8]
 80037b8:	60da      	str	r2, [r3, #12]
 80037ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80037bc:	f107 0310 	add.w	r3, r7, #16
 80037c0:	22c0      	movs	r2, #192	; 0xc0
 80037c2:	2100      	movs	r1, #0
 80037c4:	4618      	mov	r0, r3
 80037c6:	f016 fbc1 	bl	8019f4c <memset>
  if(huart->Instance==USART3)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a27      	ldr	r2, [pc, #156]	; (800386c <HAL_UART_MspInit+0xc8>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d146      	bne.n	8003862 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80037d4:	f04f 0202 	mov.w	r2, #2
 80037d8:	f04f 0300 	mov.w	r3, #0
 80037dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80037e0:	2300      	movs	r3, #0
 80037e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037e6:	f107 0310 	add.w	r3, r7, #16
 80037ea:	4618      	mov	r0, r3
 80037ec:	f007 f95e 	bl	800aaac <HAL_RCCEx_PeriphCLKConfig>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80037f6:	f7ff fd77 	bl	80032e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80037fa:	4b1d      	ldr	r3, [pc, #116]	; (8003870 <HAL_UART_MspInit+0xcc>)
 80037fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003800:	4a1b      	ldr	r2, [pc, #108]	; (8003870 <HAL_UART_MspInit+0xcc>)
 8003802:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003806:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800380a:	4b19      	ldr	r3, [pc, #100]	; (8003870 <HAL_UART_MspInit+0xcc>)
 800380c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003810:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003814:	60fb      	str	r3, [r7, #12]
 8003816:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003818:	4b15      	ldr	r3, [pc, #84]	; (8003870 <HAL_UART_MspInit+0xcc>)
 800381a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800381e:	4a14      	ldr	r2, [pc, #80]	; (8003870 <HAL_UART_MspInit+0xcc>)
 8003820:	f043 0308 	orr.w	r3, r3, #8
 8003824:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003828:	4b11      	ldr	r3, [pc, #68]	; (8003870 <HAL_UART_MspInit+0xcc>)
 800382a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800382e:	f003 0308 	and.w	r3, r3, #8
 8003832:	60bb      	str	r3, [r7, #8]
 8003834:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003836:	f44f 7340 	mov.w	r3, #768	; 0x300
 800383a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800383e:	2302      	movs	r3, #2
 8003840:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003844:	2300      	movs	r3, #0
 8003846:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800384a:	2300      	movs	r3, #0
 800384c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003850:	2307      	movs	r3, #7
 8003852:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003856:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800385a:	4619      	mov	r1, r3
 800385c:	4805      	ldr	r0, [pc, #20]	; (8003874 <HAL_UART_MspInit+0xd0>)
 800385e:	f004 f825 	bl	80078ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003862:	bf00      	nop
 8003864:	37e8      	adds	r7, #232	; 0xe8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40004800 	.word	0x40004800
 8003870:	58024400 	.word	0x58024400
 8003874:	58020c00 	.word	0x58020c00

08003878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800387c:	f007 f8fa 	bl	800aa74 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
		Error_Handler();
 8003880:	f7ff fd32 	bl	80032e8 <Error_Handler>
 8003884:	e7fc      	b.n	8003880 <NMI_Handler+0x8>

08003886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Error_Handler();
 800388a:	f7ff fd2d 	bl	80032e8 <Error_Handler>
 800388e:	e7fc      	b.n	800388a <HardFault_Handler+0x4>

08003890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  Error_Handler();
 8003894:	f7ff fd28 	bl	80032e8 <Error_Handler>
 8003898:	e7fc      	b.n	8003894 <MemManage_Handler+0x4>

0800389a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  Error_Handler();
 800389e:	f7ff fd23 	bl	80032e8 <Error_Handler>
 80038a2:	e7fc      	b.n	800389e <BusFault_Handler+0x4>

080038a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  Error_Handler();
 80038a8:	f7ff fd1e 	bl	80032e8 <Error_Handler>
 80038ac:	e7fc      	b.n	80038a8 <UsageFault_Handler+0x4>

080038ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038ae:	b480      	push	{r7}
 80038b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038b2:	bf00      	nop
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038c0:	bf00      	nop
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038ca:	b480      	push	{r7}
 80038cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038ce:	bf00      	nop
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038dc:	f000 fba2 	bl	8004024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038e0:	bf00      	nop
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80038e8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80038ec:	f004 f9d9 	bl	8007ca2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 80038f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80038f4:	f004 f9d5 	bl	8007ca2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80038f8:	bf00      	nop
 80038fa:	bd80      	pop	{r7, pc}

080038fc <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */
  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8003900:	4802      	ldr	r0, [pc, #8]	; (800390c <LPTIM1_IRQHandler+0x10>)
 8003902:	f005 fd90 	bl	8009426 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */
  /* USER CODE END LPTIM1_IRQn 1 */
}
 8003906:	bf00      	nop
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	200003ac 	.word	0x200003ac

08003910 <HRTIM1_TIMA_IRQHandler>:

/**
  * @brief This function handles HRTIM timer A global interrupt.
  */
void HRTIM1_TIMA_IRQHandler(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 0 */

  /* USER CODE END HRTIM1_TIMA_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_A);
 8003914:	2100      	movs	r1, #0
 8003916:	4802      	ldr	r0, [pc, #8]	; (8003920 <HRTIM1_TIMA_IRQHandler+0x10>)
 8003918:	f004 fd9c 	bl	8008454 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 1 */

  /* USER CODE END HRTIM1_TIMA_IRQn 1 */
}
 800391c:	bf00      	nop
 800391e:	bd80      	pop	{r7, pc}
 8003920:	200002d0 	.word	0x200002d0

08003924 <HRTIM1_TIME_IRQHandler>:

/**
  * @brief This function handles HRTIM timer E global interrupt.
  */
void HRTIM1_TIME_IRQHandler(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 0 */

  /* USER CODE END HRTIM1_TIME_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_E);
 8003928:	2104      	movs	r1, #4
 800392a:	4802      	ldr	r0, [pc, #8]	; (8003934 <HRTIM1_TIME_IRQHandler+0x10>)
 800392c:	f004 fd92 	bl	8008454 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 1 */

  /* USER CODE END HRTIM1_TIME_IRQn 1 */
}
 8003930:	bf00      	nop
 8003932:	bd80      	pop	{r7, pc}
 8003934:	200002d0 	.word	0x200002d0

08003938 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 800393c:	4802      	ldr	r0, [pc, #8]	; (8003948 <ADC3_IRQHandler+0x10>)
 800393e:	f001 f8f5 	bl	8004b2c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8003942:	bf00      	nop
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	20000258 	.word	0x20000258

0800394c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
	return 1;
 8003950:	2301      	movs	r3, #1
}
 8003952:	4618      	mov	r0, r3
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <_kill>:

int _kill(int pid, int sig)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003966:	4b05      	ldr	r3, [pc, #20]	; (800397c <_kill+0x20>)
 8003968:	2216      	movs	r2, #22
 800396a:	601a      	str	r2, [r3, #0]
	return -1;
 800396c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003970:	4618      	mov	r0, r3
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	20007370 	.word	0x20007370

08003980 <_exit>:

void _exit (int status)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003988:	f04f 31ff 	mov.w	r1, #4294967295
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f7ff ffe5 	bl	800395c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003992:	e7fe      	b.n	8003992 <_exit+0x12>

08003994 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039a0:	2300      	movs	r3, #0
 80039a2:	617b      	str	r3, [r7, #20]
 80039a4:	e00a      	b.n	80039bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80039a6:	f3af 8000 	nop.w
 80039aa:	4601      	mov	r1, r0
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	1c5a      	adds	r2, r3, #1
 80039b0:	60ba      	str	r2, [r7, #8]
 80039b2:	b2ca      	uxtb	r2, r1
 80039b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	3301      	adds	r3, #1
 80039ba:	617b      	str	r3, [r7, #20]
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	dbf0      	blt.n	80039a6 <_read+0x12>
	}

return len;
 80039c4:	687b      	ldr	r3, [r7, #4]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3718      	adds	r7, #24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b086      	sub	sp, #24
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	60f8      	str	r0, [r7, #12]
 80039d6:	60b9      	str	r1, [r7, #8]
 80039d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039da:	2300      	movs	r3, #0
 80039dc:	617b      	str	r3, [r7, #20]
 80039de:	e009      	b.n	80039f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	1c5a      	adds	r2, r3, #1
 80039e4:	60ba      	str	r2, [r7, #8]
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7fe fc07 	bl	80021fc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	3301      	adds	r3, #1
 80039f2:	617b      	str	r3, [r7, #20]
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	dbf1      	blt.n	80039e0 <_write+0x12>
	}
	return len;
 80039fc:	687b      	ldr	r3, [r7, #4]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <_close>:

int _close(int file)
{
 8003a06:	b480      	push	{r7}
 8003a08:	b083      	sub	sp, #12
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
	return -1;
 8003a0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
 8003a26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a2e:	605a      	str	r2, [r3, #4]
	return 0;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <_isatty>:

int _isatty(int file)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b083      	sub	sp, #12
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
	return 1;
 8003a46:	2301      	movs	r3, #1
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
	return 0;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3714      	adds	r7, #20
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
	...

08003a70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b087      	sub	sp, #28
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a78:	4a14      	ldr	r2, [pc, #80]	; (8003acc <_sbrk+0x5c>)
 8003a7a:	4b15      	ldr	r3, [pc, #84]	; (8003ad0 <_sbrk+0x60>)
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a84:	4b13      	ldr	r3, [pc, #76]	; (8003ad4 <_sbrk+0x64>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d102      	bne.n	8003a92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a8c:	4b11      	ldr	r3, [pc, #68]	; (8003ad4 <_sbrk+0x64>)
 8003a8e:	4a12      	ldr	r2, [pc, #72]	; (8003ad8 <_sbrk+0x68>)
 8003a90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a92:	4b10      	ldr	r3, [pc, #64]	; (8003ad4 <_sbrk+0x64>)
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4413      	add	r3, r2
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d205      	bcs.n	8003aac <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003aa0:	4b0e      	ldr	r3, [pc, #56]	; (8003adc <_sbrk+0x6c>)
 8003aa2:	220c      	movs	r2, #12
 8003aa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aaa:	e009      	b.n	8003ac0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003aac:	4b09      	ldr	r3, [pc, #36]	; (8003ad4 <_sbrk+0x64>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ab2:	4b08      	ldr	r3, [pc, #32]	; (8003ad4 <_sbrk+0x64>)
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4413      	add	r3, r2
 8003aba:	4a06      	ldr	r2, [pc, #24]	; (8003ad4 <_sbrk+0x64>)
 8003abc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003abe:	68fb      	ldr	r3, [r7, #12]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	371c      	adds	r7, #28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	20020000 	.word	0x20020000
 8003ad0:	00000400 	.word	0x00000400
 8003ad4:	20000698 	.word	0x20000698
 8003ad8:	20007380 	.word	0x20007380
 8003adc:	20007370 	.word	0x20007370

08003ae0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003ae6:	4b3f      	ldr	r3, [pc, #252]	; (8003be4 <SystemInit+0x104>)
 8003ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aec:	4a3d      	ldr	r2, [pc, #244]	; (8003be4 <SystemInit+0x104>)
 8003aee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003af2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003af6:	4b3c      	ldr	r3, [pc, #240]	; (8003be8 <SystemInit+0x108>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 030f 	and.w	r3, r3, #15
 8003afe:	2b06      	cmp	r3, #6
 8003b00:	d807      	bhi.n	8003b12 <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */

	  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003b02:	4b39      	ldr	r3, [pc, #228]	; (8003be8 <SystemInit+0x108>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f023 030f 	bic.w	r3, r3, #15
 8003b0a:	4a37      	ldr	r2, [pc, #220]	; (8003be8 <SystemInit+0x108>)
 8003b0c:	f043 0307 	orr.w	r3, r3, #7
 8003b10:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003b12:	4b36      	ldr	r3, [pc, #216]	; (8003bec <SystemInit+0x10c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a35      	ldr	r2, [pc, #212]	; (8003bec <SystemInit+0x10c>)
 8003b18:	f043 0301 	orr.w	r3, r3, #1
 8003b1c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003b1e:	4b33      	ldr	r3, [pc, #204]	; (8003bec <SystemInit+0x10c>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003b24:	4b31      	ldr	r3, [pc, #196]	; (8003bec <SystemInit+0x10c>)
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	4930      	ldr	r1, [pc, #192]	; (8003bec <SystemInit+0x10c>)
 8003b2a:	4b31      	ldr	r3, [pc, #196]	; (8003bf0 <SystemInit+0x110>)
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003b30:	4b2d      	ldr	r3, [pc, #180]	; (8003be8 <SystemInit+0x108>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0308 	and.w	r3, r3, #8
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d007      	beq.n	8003b4c <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003b3c:	4b2a      	ldr	r3, [pc, #168]	; (8003be8 <SystemInit+0x108>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f023 030f 	bic.w	r3, r3, #15
 8003b44:	4a28      	ldr	r2, [pc, #160]	; (8003be8 <SystemInit+0x108>)
 8003b46:	f043 0307 	orr.w	r3, r3, #7
 8003b4a:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003b4c:	4b27      	ldr	r3, [pc, #156]	; (8003bec <SystemInit+0x10c>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003b52:	4b26      	ldr	r3, [pc, #152]	; (8003bec <SystemInit+0x10c>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003b58:	4b24      	ldr	r3, [pc, #144]	; (8003bec <SystemInit+0x10c>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003b5e:	4b23      	ldr	r3, [pc, #140]	; (8003bec <SystemInit+0x10c>)
 8003b60:	4a24      	ldr	r2, [pc, #144]	; (8003bf4 <SystemInit+0x114>)
 8003b62:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003b64:	4b21      	ldr	r3, [pc, #132]	; (8003bec <SystemInit+0x10c>)
 8003b66:	4a24      	ldr	r2, [pc, #144]	; (8003bf8 <SystemInit+0x118>)
 8003b68:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003b6a:	4b20      	ldr	r3, [pc, #128]	; (8003bec <SystemInit+0x10c>)
 8003b6c:	4a23      	ldr	r2, [pc, #140]	; (8003bfc <SystemInit+0x11c>)
 8003b6e:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003b70:	4b1e      	ldr	r3, [pc, #120]	; (8003bec <SystemInit+0x10c>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003b76:	4b1d      	ldr	r3, [pc, #116]	; (8003bec <SystemInit+0x10c>)
 8003b78:	4a20      	ldr	r2, [pc, #128]	; (8003bfc <SystemInit+0x11c>)
 8003b7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003b7c:	4b1b      	ldr	r3, [pc, #108]	; (8003bec <SystemInit+0x10c>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003b82:	4b1a      	ldr	r3, [pc, #104]	; (8003bec <SystemInit+0x10c>)
 8003b84:	4a1d      	ldr	r2, [pc, #116]	; (8003bfc <SystemInit+0x11c>)
 8003b86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003b88:	4b18      	ldr	r3, [pc, #96]	; (8003bec <SystemInit+0x10c>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003b8e:	4b17      	ldr	r3, [pc, #92]	; (8003bec <SystemInit+0x10c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a16      	ldr	r2, [pc, #88]	; (8003bec <SystemInit+0x10c>)
 8003b94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b98:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003b9a:	4b14      	ldr	r3, [pc, #80]	; (8003bec <SystemInit+0x10c>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003ba0:	4b17      	ldr	r3, [pc, #92]	; (8003c00 <SystemInit+0x120>)
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	4b17      	ldr	r3, [pc, #92]	; (8003c04 <SystemInit+0x124>)
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bac:	d202      	bcs.n	8003bb4 <SystemInit+0xd4>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003bae:	4b16      	ldr	r3, [pc, #88]	; (8003c08 <SystemInit+0x128>)
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 8003bb4:	4b0d      	ldr	r3, [pc, #52]	; (8003bec <SystemInit+0x10c>)
 8003bb6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003bba:	4a0c      	ldr	r2, [pc, #48]	; (8003bec <SystemInit+0x10c>)
 8003bbc:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8003bc0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8003bc4:	4b09      	ldr	r3, [pc, #36]	; (8003bec <SystemInit+0x10c>)
 8003bc6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003bca:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8003bcc:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003bce:	4b0f      	ldr	r3, [pc, #60]	; (8003c0c <SystemInit+0x12c>)
 8003bd0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003bd4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	e000ed00 	.word	0xe000ed00
 8003be8:	52002000 	.word	0x52002000
 8003bec:	58024400 	.word	0x58024400
 8003bf0:	eaf6ed7f 	.word	0xeaf6ed7f
 8003bf4:	02020200 	.word	0x02020200
 8003bf8:	01ff0000 	.word	0x01ff0000
 8003bfc:	01010280 	.word	0x01010280
 8003c00:	5c001000 	.word	0x5c001000
 8003c04:	ffff0000 	.word	0xffff0000
 8003c08:	51008108 	.word	0x51008108
 8003c0c:	52004000 	.word	0x52004000

08003c10 <HAL_LPTIM_AutoReloadMatchCallback>:
//		}
//
//	}
//}

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin); //toggle green LED
 8003c18:	2101      	movs	r1, #1
 8003c1a:	4803      	ldr	r0, [pc, #12]	; (8003c28 <HAL_LPTIM_AutoReloadMatchCallback+0x18>)
 8003c1c:	f004 f827 	bl	8007c6e <HAL_GPIO_TogglePin>
}
 8003c20:	bf00      	nop
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	58020400 	.word	0x58020400

08003c2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003c2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c64 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003c30:	f7ff ff56 	bl	8003ae0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c34:	480c      	ldr	r0, [pc, #48]	; (8003c68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003c36:	490d      	ldr	r1, [pc, #52]	; (8003c6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003c38:	4a0d      	ldr	r2, [pc, #52]	; (8003c70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c3c:	e002      	b.n	8003c44 <LoopCopyDataInit>

08003c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c42:	3304      	adds	r3, #4

08003c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c48:	d3f9      	bcc.n	8003c3e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c4a:	4a0a      	ldr	r2, [pc, #40]	; (8003c74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003c4c:	4c0a      	ldr	r4, [pc, #40]	; (8003c78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c50:	e001      	b.n	8003c56 <LoopFillZerobss>

08003c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c54:	3204      	adds	r2, #4

08003c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c58:	d3fb      	bcc.n	8003c52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003c5a:	f016 f9c9 	bl	8019ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c5e:	f7fe fadf 	bl	8002220 <main>
  bx  lr
 8003c62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003c64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c6c:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 8003c70:	0801f4b8 	.word	0x0801f4b8
  ldr r2, =_sbss
 8003c74:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8003c78:	20007380 	.word	0x20007380

08003c7c <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c7c:	e7fe      	b.n	8003c7c <ADC_IRQHandler>

08003c7e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b083      	sub	sp, #12
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00b      	beq.n	8003ca6 <LAN8742_RegisterBusIO+0x28>
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d007      	beq.n	8003ca6 <LAN8742_RegisterBusIO+0x28>
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <LAN8742_RegisterBusIO+0x28>
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d102      	bne.n	8003cac <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8003ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8003caa:	e014      	b.n	8003cd6 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	691a      	ldr	r2, [r3, #16]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b086      	sub	sp, #24
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8003cea:	2300      	movs	r3, #0
 8003cec:	60fb      	str	r3, [r7, #12]
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60bb      	str	r3, [r7, #8]
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d17c      	bne.n	8003dfc <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d002      	beq.n	8003d10 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2220      	movs	r2, #32
 8003d14:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003d16:	2300      	movs	r3, #0
 8003d18:	617b      	str	r3, [r7, #20]
 8003d1a:	e01c      	b.n	8003d56 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	f107 0208 	add.w	r2, r7, #8
 8003d24:	2112      	movs	r1, #18
 8003d26:	6978      	ldr	r0, [r7, #20]
 8003d28:	4798      	blx	r3
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	da03      	bge.n	8003d38 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8003d30:	f06f 0304 	mvn.w	r3, #4
 8003d34:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8003d36:	e00b      	b.n	8003d50 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	f003 031f 	and.w	r3, r3, #31
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d105      	bne.n	8003d50 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	613b      	str	r3, [r7, #16]
         break;
 8003d4e:	e005      	b.n	8003d5c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	3301      	adds	r3, #1
 8003d54:	617b      	str	r3, [r7, #20]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	2b1f      	cmp	r3, #31
 8003d5a:	d9df      	bls.n	8003d1c <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b1f      	cmp	r3, #31
 8003d62:	d902      	bls.n	8003d6a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8003d64:	f06f 0302 	mvn.w	r3, #2
 8003d68:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d145      	bne.n	8003dfc <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	6810      	ldr	r0, [r2, #0]
 8003d78:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	4798      	blx	r3
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	db37      	blt.n	8003df6 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	6810      	ldr	r0, [r2, #0]
 8003d8e:	f107 0208 	add.w	r2, r7, #8
 8003d92:	2100      	movs	r1, #0
 8003d94:	4798      	blx	r3
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	db28      	blt.n	8003dee <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	4798      	blx	r3
 8003da2:	4603      	mov	r3, r0
 8003da4:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003da6:	e01c      	b.n	8003de2 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	4798      	blx	r3
 8003dae:	4603      	mov	r3, r0
 8003db0:	461a      	mov	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003dba:	d80e      	bhi.n	8003dda <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6810      	ldr	r0, [r2, #0]
 8003dc4:	f107 0208 	add.w	r2, r7, #8
 8003dc8:	2100      	movs	r1, #0
 8003dca:	4798      	blx	r3
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	da07      	bge.n	8003de2 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8003dd2:	f06f 0304 	mvn.w	r3, #4
 8003dd6:	613b      	str	r3, [r7, #16]
                 break;
 8003dd8:	e010      	b.n	8003dfc <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8003dda:	f06f 0301 	mvn.w	r3, #1
 8003dde:	613b      	str	r3, [r7, #16]
               break;
 8003de0:	e00c      	b.n	8003dfc <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1dd      	bne.n	8003da8 <LAN8742_Init+0xc6>
 8003dec:	e006      	b.n	8003dfc <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8003dee:	f06f 0304 	mvn.w	r3, #4
 8003df2:	613b      	str	r3, [r7, #16]
 8003df4:	e002      	b.n	8003dfc <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8003df6:	f06f 0303 	mvn.w	r3, #3
 8003dfa:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d112      	bne.n	8003e28 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	4798      	blx	r3
 8003e08:	4603      	mov	r3, r0
 8003e0a:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8003e0c:	bf00      	nop
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	4798      	blx	r3
 8003e14:	4603      	mov	r3, r0
 8003e16:	461a      	mov	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003e20:	d9f5      	bls.n	8003e0e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8003e28:	693b      	ldr	r3, [r7, #16]
 }
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3718      	adds	r7, #24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b084      	sub	sp, #16
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6810      	ldr	r0, [r2, #0]
 8003e46:	f107 020c 	add.w	r2, r7, #12
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	4798      	blx	r3
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	da02      	bge.n	8003e5a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003e54:	f06f 0304 	mvn.w	r3, #4
 8003e58:	e06e      	b.n	8003f38 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6810      	ldr	r0, [r2, #0]
 8003e62:	f107 020c 	add.w	r2, r7, #12
 8003e66:	2101      	movs	r1, #1
 8003e68:	4798      	blx	r3
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	da02      	bge.n	8003e76 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003e70:	f06f 0304 	mvn.w	r3, #4
 8003e74:	e060      	b.n	8003f38 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8003e80:	2301      	movs	r3, #1
 8003e82:	e059      	b.n	8003f38 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6810      	ldr	r0, [r2, #0]
 8003e8c:	f107 020c 	add.w	r2, r7, #12
 8003e90:	2100      	movs	r1, #0
 8003e92:	4798      	blx	r3
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	da02      	bge.n	8003ea0 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003e9a:	f06f 0304 	mvn.w	r3, #4
 8003e9e:	e04b      	b.n	8003f38 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d11b      	bne.n	8003ee2 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d006      	beq.n	8003ec2 <LAN8742_GetLinkState+0x90>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	e03a      	b.n	8003f38 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e033      	b.n	8003f38 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003eda:	2304      	movs	r3, #4
 8003edc:	e02c      	b.n	8003f38 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003ede:	2305      	movs	r3, #5
 8003ee0:	e02a      	b.n	8003f38 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6810      	ldr	r0, [r2, #0]
 8003eea:	f107 020c 	add.w	r2, r7, #12
 8003eee:	211f      	movs	r1, #31
 8003ef0:	4798      	blx	r3
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	da02      	bge.n	8003efe <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8003ef8:	f06f 0304 	mvn.w	r3, #4
 8003efc:	e01c      	b.n	8003f38 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8003f08:	2306      	movs	r3, #6
 8003f0a:	e015      	b.n	8003f38 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f003 031c 	and.w	r3, r3, #28
 8003f12:	2b18      	cmp	r3, #24
 8003f14:	d101      	bne.n	8003f1a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003f16:	2302      	movs	r3, #2
 8003f18:	e00e      	b.n	8003f38 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f003 031c 	and.w	r3, r3, #28
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	d101      	bne.n	8003f28 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e007      	b.n	8003f38 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f003 031c 	and.w	r3, r3, #28
 8003f2e:	2b14      	cmp	r3, #20
 8003f30:	d101      	bne.n	8003f36 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003f32:	2304      	movs	r3, #4
 8003f34:	e000      	b.n	8003f38 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003f36:	2305      	movs	r3, #5
    }				
  }
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f46:	2003      	movs	r0, #3
 8003f48:	f001 ff1c 	bl	8005d84 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003f4c:	f006 fbbc 	bl	800a6c8 <HAL_RCC_GetSysClockFreq>
 8003f50:	4602      	mov	r2, r0
 8003f52:	4b15      	ldr	r3, [pc, #84]	; (8003fa8 <HAL_Init+0x68>)
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	0a1b      	lsrs	r3, r3, #8
 8003f58:	f003 030f 	and.w	r3, r3, #15
 8003f5c:	4913      	ldr	r1, [pc, #76]	; (8003fac <HAL_Init+0x6c>)
 8003f5e:	5ccb      	ldrb	r3, [r1, r3]
 8003f60:	f003 031f 	and.w	r3, r3, #31
 8003f64:	fa22 f303 	lsr.w	r3, r2, r3
 8003f68:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f6a:	4b0f      	ldr	r3, [pc, #60]	; (8003fa8 <HAL_Init+0x68>)
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	f003 030f 	and.w	r3, r3, #15
 8003f72:	4a0e      	ldr	r2, [pc, #56]	; (8003fac <HAL_Init+0x6c>)
 8003f74:	5cd3      	ldrb	r3, [r2, r3]
 8003f76:	f003 031f 	and.w	r3, r3, #31
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f80:	4a0b      	ldr	r2, [pc, #44]	; (8003fb0 <HAL_Init+0x70>)
 8003f82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f84:	4a0b      	ldr	r2, [pc, #44]	; (8003fb4 <HAL_Init+0x74>)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f8a:	2000      	movs	r0, #0
 8003f8c:	f000 f814 	bl	8003fb8 <HAL_InitTick>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e002      	b.n	8003fa0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003f9a:	f7ff f9d5 	bl	8003348 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	58024400 	.word	0x58024400
 8003fac:	0801efb4 	.word	0x0801efb4
 8003fb0:	20000014 	.word	0x20000014
 8003fb4:	20000010 	.word	0x20000010

08003fb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003fc0:	4b15      	ldr	r3, [pc, #84]	; (8004018 <HAL_InitTick+0x60>)
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e021      	b.n	8004010 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003fcc:	4b13      	ldr	r3, [pc, #76]	; (800401c <HAL_InitTick+0x64>)
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	4b11      	ldr	r3, [pc, #68]	; (8004018 <HAL_InitTick+0x60>)
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f001 ff01 	bl	8005dea <HAL_SYSTICK_Config>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e00e      	b.n	8004010 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b0f      	cmp	r3, #15
 8003ff6:	d80a      	bhi.n	800400e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	6879      	ldr	r1, [r7, #4]
 8003ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8004000:	f001 fecb 	bl	8005d9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004004:	4a06      	ldr	r2, [pc, #24]	; (8004020 <HAL_InitTick+0x68>)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800400a:	2300      	movs	r3, #0
 800400c:	e000      	b.n	8004010 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
}
 8004010:	4618      	mov	r0, r3
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	20000028 	.word	0x20000028
 800401c:	20000010 	.word	0x20000010
 8004020:	20000024 	.word	0x20000024

08004024 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004024:	b480      	push	{r7}
 8004026:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004028:	4b06      	ldr	r3, [pc, #24]	; (8004044 <HAL_IncTick+0x20>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	461a      	mov	r2, r3
 800402e:	4b06      	ldr	r3, [pc, #24]	; (8004048 <HAL_IncTick+0x24>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4413      	add	r3, r2
 8004034:	4a04      	ldr	r2, [pc, #16]	; (8004048 <HAL_IncTick+0x24>)
 8004036:	6013      	str	r3, [r2, #0]
}
 8004038:	bf00      	nop
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	20000028 	.word	0x20000028
 8004048:	2000069c 	.word	0x2000069c

0800404c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  return uwTick;
 8004050:	4b03      	ldr	r3, [pc, #12]	; (8004060 <HAL_GetTick+0x14>)
 8004052:	681b      	ldr	r3, [r3, #0]
}
 8004054:	4618      	mov	r0, r3
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	2000069c 	.word	0x2000069c

08004064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800406c:	f7ff ffee 	bl	800404c <HAL_GetTick>
 8004070:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800407c:	d005      	beq.n	800408a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800407e:	4b0a      	ldr	r3, [pc, #40]	; (80040a8 <HAL_Delay+0x44>)
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	461a      	mov	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4413      	add	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800408a:	bf00      	nop
 800408c:	f7ff ffde 	bl	800404c <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	429a      	cmp	r2, r3
 800409a:	d8f7      	bhi.n	800408c <HAL_Delay+0x28>
  {
  }
}
 800409c:	bf00      	nop
 800409e:	bf00      	nop
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	20000028 	.word	0x20000028

080040ac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80040b0:	4b03      	ldr	r3, [pc, #12]	; (80040c0 <HAL_GetREVID+0x14>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	0c1b      	lsrs	r3, r3, #16
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	5c001000 	.word	0x5c001000

080040c4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80040cc:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80040d4:	4904      	ldr	r1, [pc, #16]	; (80040e8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4313      	orrs	r3, r2
 80040da:	604b      	str	r3, [r1, #4]
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	58000400 	.word	0x58000400

080040ec <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80040f6:	4b07      	ldr	r3, [pc, #28]	; (8004114 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	43db      	mvns	r3, r3
 80040fe:	401a      	ands	r2, r3
 8004100:	4904      	ldr	r1, [pc, #16]	; (8004114 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	4313      	orrs	r3, r2
 8004106:	604b      	str	r3, [r1, #4]
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	58000400 	.word	0x58000400

08004118 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	431a      	orrs	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	609a      	str	r2, [r3, #8]
}
 8004132:	bf00      	nop
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800413e:	b480      	push	{r7}
 8004140:	b083      	sub	sp, #12
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
 8004146:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	609a      	str	r2, [r3, #8]
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004174:	4618      	mov	r0, r3
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004180:	b480      	push	{r7}
 8004182:	b087      	sub	sp, #28
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
 800418c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	3360      	adds	r3, #96	; 0x60
 8004192:	461a      	mov	r2, r3
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4413      	add	r3, r2
 800419a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	430b      	orrs	r3, r1
 80041ae:	431a      	orrs	r2, r3
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80041b4:	bf00      	nop
 80041b6:	371c      	adds	r7, #28
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	f003 031f 	and.w	r3, r3, #31
 80041da:	6879      	ldr	r1, [r7, #4]
 80041dc:	fa01 f303 	lsl.w	r3, r1, r3
 80041e0:	431a      	orrs	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	611a      	str	r2, [r3, #16]
}
 80041e6:	bf00      	nop
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b087      	sub	sp, #28
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	60f8      	str	r0, [r7, #12]
 80041fa:	60b9      	str	r1, [r7, #8]
 80041fc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	3360      	adds	r3, #96	; 0x60
 8004202:	461a      	mov	r2, r3
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	4413      	add	r3, r2
 800420a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	431a      	orrs	r2, r3
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	601a      	str	r2, [r3, #0]
  }
}
 800421c:	bf00      	nop
 800421e:	371c      	adds	r7, #28
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800423c:	2301      	movs	r3, #1
 800423e:	e000      	b.n	8004242 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800424e:	b480      	push	{r7}
 8004250:	b087      	sub	sp, #28
 8004252:	af00      	add	r7, sp, #0
 8004254:	60f8      	str	r0, [r7, #12]
 8004256:	60b9      	str	r1, [r7, #8]
 8004258:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	3330      	adds	r3, #48	; 0x30
 800425e:	461a      	mov	r2, r3
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	0a1b      	lsrs	r3, r3, #8
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	f003 030c 	and.w	r3, r3, #12
 800426a:	4413      	add	r3, r2
 800426c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	f003 031f 	and.w	r3, r3, #31
 8004278:	211f      	movs	r1, #31
 800427a:	fa01 f303 	lsl.w	r3, r1, r3
 800427e:	43db      	mvns	r3, r3
 8004280:	401a      	ands	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	0e9b      	lsrs	r3, r3, #26
 8004286:	f003 011f 	and.w	r1, r3, #31
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	f003 031f 	and.w	r3, r3, #31
 8004290:	fa01 f303 	lsl.w	r3, r1, r3
 8004294:	431a      	orrs	r2, r3
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800429a:	bf00      	nop
 800429c:	371c      	adds	r7, #28
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b083      	sub	sp, #12
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042b2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80042ba:	2301      	movs	r3, #1
 80042bc:	e000      	b.n	80042c0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	3314      	adds	r3, #20
 80042dc:	461a      	mov	r2, r3
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	0e5b      	lsrs	r3, r3, #25
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	4413      	add	r3, r2
 80042ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	0d1b      	lsrs	r3, r3, #20
 80042f4:	f003 031f 	and.w	r3, r3, #31
 80042f8:	2107      	movs	r1, #7
 80042fa:	fa01 f303 	lsl.w	r3, r1, r3
 80042fe:	43db      	mvns	r3, r3
 8004300:	401a      	ands	r2, r3
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	0d1b      	lsrs	r3, r3, #20
 8004306:	f003 031f 	and.w	r3, r3, #31
 800430a:	6879      	ldr	r1, [r7, #4]
 800430c:	fa01 f303 	lsl.w	r3, r1, r3
 8004310:	431a      	orrs	r2, r3
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004316:	bf00      	nop
 8004318:	371c      	adds	r7, #28
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
	...

08004324 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800433c:	43db      	mvns	r3, r3
 800433e:	401a      	ands	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f003 0318 	and.w	r3, r3, #24
 8004346:	4908      	ldr	r1, [pc, #32]	; (8004368 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004348:	40d9      	lsrs	r1, r3
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	400b      	ands	r3, r1
 800434e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004352:	431a      	orrs	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800435a:	bf00      	nop
 800435c:	3714      	adds	r7, #20
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	000fffff 	.word	0x000fffff

0800436c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f003 031f 	and.w	r3, r3, #31
}
 800437c:	4618      	mov	r0, r3
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8004398:	4618      	mov	r0, r3
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	4b04      	ldr	r3, [pc, #16]	; (80043c4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80043b2:	4013      	ands	r3, r2
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	6093      	str	r3, [r2, #8]
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr
 80043c4:	5fffffc0 	.word	0x5fffffc0

080043c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043dc:	d101      	bne.n	80043e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80043de:	2301      	movs	r3, #1
 80043e0:	e000      	b.n	80043e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	4b05      	ldr	r3, [pc, #20]	; (8004414 <LL_ADC_EnableInternalRegulator+0x24>)
 80043fe:	4013      	ands	r3, r2
 8004400:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	6fffffc0 	.word	0x6fffffc0

08004418 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004428:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800442c:	d101      	bne.n	8004432 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800442e:	2301      	movs	r3, #1
 8004430:	e000      	b.n	8004434 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	4b05      	ldr	r3, [pc, #20]	; (8004464 <LL_ADC_Enable+0x24>)
 800444e:	4013      	ands	r3, r2
 8004450:	f043 0201 	orr.w	r2, r3, #1
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr
 8004464:	7fffffc0 	.word	0x7fffffc0

08004468 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	4b05      	ldr	r3, [pc, #20]	; (800448c <LL_ADC_Disable+0x24>)
 8004476:	4013      	ands	r3, r2
 8004478:	f043 0202 	orr.w	r2, r3, #2
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	7fffffc0 	.word	0x7fffffc0

08004490 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d101      	bne.n	80044a8 <LL_ADC_IsEnabled+0x18>
 80044a4:	2301      	movs	r3, #1
 80044a6:	e000      	b.n	80044aa <LL_ADC_IsEnabled+0x1a>
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d101      	bne.n	80044ce <LL_ADC_IsDisableOngoing+0x18>
 80044ca:	2301      	movs	r3, #1
 80044cc:	e000      	b.n	80044d0 <LL_ADC_IsDisableOngoing+0x1a>
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689a      	ldr	r2, [r3, #8]
 80044e8:	4b05      	ldr	r3, [pc, #20]	; (8004500 <LL_ADC_REG_StartConversion+0x24>)
 80044ea:	4013      	ands	r3, r2
 80044ec:	f043 0204 	orr.w	r2, r3, #4
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	7fffffc0 	.word	0x7fffffc0

08004504 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	2b04      	cmp	r3, #4
 8004516:	d101      	bne.n	800451c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004518:	2301      	movs	r3, #1
 800451a:	e000      	b.n	800451e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800452a:	b480      	push	{r7}
 800452c:	b083      	sub	sp, #12
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f003 0308 	and.w	r3, r3, #8
 800453a:	2b08      	cmp	r3, #8
 800453c:	d101      	bne.n	8004542 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800453e:	2301      	movs	r3, #1
 8004540:	e000      	b.n	8004544 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004550:	b590      	push	{r4, r7, lr}
 8004552:	b089      	sub	sp, #36	; 0x24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004558:	2300      	movs	r3, #0
 800455a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800455c:	2300      	movs	r3, #0
 800455e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e18f      	b.n	800488a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004574:	2b00      	cmp	r3, #0
 8004576:	d109      	bne.n	800458c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f7fe feff 	bl	800337c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4618      	mov	r0, r3
 8004592:	f7ff ff19 	bl	80043c8 <LL_ADC_IsDeepPowerDownEnabled>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d004      	beq.n	80045a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7ff feff 	bl	80043a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7ff ff34 	bl	8004418 <LL_ADC_IsInternalRegulatorEnabled>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d114      	bne.n	80045e0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7ff ff18 	bl	80043f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045c0:	4b87      	ldr	r3, [pc, #540]	; (80047e0 <HAL_ADC_Init+0x290>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	099b      	lsrs	r3, r3, #6
 80045c6:	4a87      	ldr	r2, [pc, #540]	; (80047e4 <HAL_ADC_Init+0x294>)
 80045c8:	fba2 2303 	umull	r2, r3, r2, r3
 80045cc:	099b      	lsrs	r3, r3, #6
 80045ce:	3301      	adds	r3, #1
 80045d0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80045d2:	e002      	b.n	80045da <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	3b01      	subs	r3, #1
 80045d8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1f9      	bne.n	80045d4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff ff17 	bl	8004418 <LL_ADC_IsInternalRegulatorEnabled>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10d      	bne.n	800460c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f4:	f043 0210 	orr.w	r2, r3, #16
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004600:	f043 0201 	orr.w	r2, r3, #1
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4618      	mov	r0, r3
 8004612:	f7ff ff77 	bl	8004504 <LL_ADC_REG_IsConversionOngoing>
 8004616:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461c:	f003 0310 	and.w	r3, r3, #16
 8004620:	2b00      	cmp	r3, #0
 8004622:	f040 8129 	bne.w	8004878 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	2b00      	cmp	r3, #0
 800462a:	f040 8125 	bne.w	8004878 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004632:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004636:	f043 0202 	orr.w	r2, r3, #2
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff ff24 	bl	8004490 <LL_ADC_IsEnabled>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d136      	bne.n	80046bc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a65      	ldr	r2, [pc, #404]	; (80047e8 <HAL_ADC_Init+0x298>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d004      	beq.n	8004662 <HAL_ADC_Init+0x112>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a63      	ldr	r2, [pc, #396]	; (80047ec <HAL_ADC_Init+0x29c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d10e      	bne.n	8004680 <HAL_ADC_Init+0x130>
 8004662:	4861      	ldr	r0, [pc, #388]	; (80047e8 <HAL_ADC_Init+0x298>)
 8004664:	f7ff ff14 	bl	8004490 <LL_ADC_IsEnabled>
 8004668:	4604      	mov	r4, r0
 800466a:	4860      	ldr	r0, [pc, #384]	; (80047ec <HAL_ADC_Init+0x29c>)
 800466c:	f7ff ff10 	bl	8004490 <LL_ADC_IsEnabled>
 8004670:	4603      	mov	r3, r0
 8004672:	4323      	orrs	r3, r4
 8004674:	2b00      	cmp	r3, #0
 8004676:	bf0c      	ite	eq
 8004678:	2301      	moveq	r3, #1
 800467a:	2300      	movne	r3, #0
 800467c:	b2db      	uxtb	r3, r3
 800467e:	e008      	b.n	8004692 <HAL_ADC_Init+0x142>
 8004680:	485b      	ldr	r0, [pc, #364]	; (80047f0 <HAL_ADC_Init+0x2a0>)
 8004682:	f7ff ff05 	bl	8004490 <LL_ADC_IsEnabled>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	bf0c      	ite	eq
 800468c:	2301      	moveq	r3, #1
 800468e:	2300      	movne	r3, #0
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d012      	beq.n	80046bc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a53      	ldr	r2, [pc, #332]	; (80047e8 <HAL_ADC_Init+0x298>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d004      	beq.n	80046aa <HAL_ADC_Init+0x15a>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a51      	ldr	r2, [pc, #324]	; (80047ec <HAL_ADC_Init+0x29c>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d101      	bne.n	80046ae <HAL_ADC_Init+0x15e>
 80046aa:	4a52      	ldr	r2, [pc, #328]	; (80047f4 <HAL_ADC_Init+0x2a4>)
 80046ac:	e000      	b.n	80046b0 <HAL_ADC_Init+0x160>
 80046ae:	4a52      	ldr	r2, [pc, #328]	; (80047f8 <HAL_ADC_Init+0x2a8>)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	4619      	mov	r1, r3
 80046b6:	4610      	mov	r0, r2
 80046b8:	f7ff fd2e 	bl	8004118 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80046bc:	f7ff fcf6 	bl	80040ac <HAL_GetREVID>
 80046c0:	4603      	mov	r3, r0
 80046c2:	f241 0203 	movw	r2, #4099	; 0x1003
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d914      	bls.n	80046f4 <HAL_ADC_Init+0x1a4>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	2b10      	cmp	r3, #16
 80046d0:	d110      	bne.n	80046f4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	7d5b      	ldrb	r3, [r3, #21]
 80046d6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046dc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80046e2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	7f1b      	ldrb	r3, [r3, #28]
 80046e8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80046ea:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046ec:	f043 030c 	orr.w	r3, r3, #12
 80046f0:	61bb      	str	r3, [r7, #24]
 80046f2:	e00d      	b.n	8004710 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	7d5b      	ldrb	r3, [r3, #21]
 80046f8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046fe:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004704:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	7f1b      	ldrb	r3, [r3, #28]
 800470a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800470c:	4313      	orrs	r3, r2
 800470e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	7f1b      	ldrb	r3, [r3, #28]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d106      	bne.n	8004726 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	3b01      	subs	r3, #1
 800471e:	045b      	lsls	r3, r3, #17
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	4313      	orrs	r3, r2
 8004724:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472a:	2b00      	cmp	r3, #0
 800472c:	d009      	beq.n	8004742 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004732:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	4313      	orrs	r3, r2
 8004740:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68da      	ldr	r2, [r3, #12]
 8004748:	4b2c      	ldr	r3, [pc, #176]	; (80047fc <HAL_ADC_Init+0x2ac>)
 800474a:	4013      	ands	r3, r2
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	6812      	ldr	r2, [r2, #0]
 8004750:	69b9      	ldr	r1, [r7, #24]
 8004752:	430b      	orrs	r3, r1
 8004754:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff fed2 	bl	8004504 <LL_ADC_REG_IsConversionOngoing>
 8004760:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f7ff fedf 	bl	800452a <LL_ADC_INJ_IsConversionOngoing>
 800476c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d15f      	bne.n	8004834 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d15c      	bne.n	8004834 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	7d1b      	ldrb	r3, [r3, #20]
 800477e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004784:	4313      	orrs	r3, r2
 8004786:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68da      	ldr	r2, [r3, #12]
 800478e:	4b1c      	ldr	r3, [pc, #112]	; (8004800 <HAL_ADC_Init+0x2b0>)
 8004790:	4013      	ands	r3, r2
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	6812      	ldr	r2, [r2, #0]
 8004796:	69b9      	ldr	r1, [r7, #24]
 8004798:	430b      	orrs	r3, r1
 800479a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d130      	bne.n	8004808 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	691a      	ldr	r2, [r3, #16]
 80047b2:	4b14      	ldr	r3, [pc, #80]	; (8004804 <HAL_ADC_Init+0x2b4>)
 80047b4:	4013      	ands	r3, r2
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80047ba:	3a01      	subs	r2, #1
 80047bc:	0411      	lsls	r1, r2, #16
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80047c2:	4311      	orrs	r1, r2
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80047c8:	4311      	orrs	r1, r2
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80047ce:	430a      	orrs	r2, r1
 80047d0:	431a      	orrs	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0201 	orr.w	r2, r2, #1
 80047da:	611a      	str	r2, [r3, #16]
 80047dc:	e01c      	b.n	8004818 <HAL_ADC_Init+0x2c8>
 80047de:	bf00      	nop
 80047e0:	20000010 	.word	0x20000010
 80047e4:	053e2d63 	.word	0x053e2d63
 80047e8:	40022000 	.word	0x40022000
 80047ec:	40022100 	.word	0x40022100
 80047f0:	58026000 	.word	0x58026000
 80047f4:	40022300 	.word	0x40022300
 80047f8:	58026300 	.word	0x58026300
 80047fc:	fff0c003 	.word	0xfff0c003
 8004800:	ffffbffc 	.word	0xffffbffc
 8004804:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	691a      	ldr	r2, [r3, #16]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0201 	bic.w	r2, r2, #1
 8004816:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f001 f804 	bl	800583c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d10c      	bne.n	8004856 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004842:	f023 010f 	bic.w	r1, r3, #15
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	1e5a      	subs	r2, r3, #1
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	430a      	orrs	r2, r1
 8004852:	631a      	str	r2, [r3, #48]	; 0x30
 8004854:	e007      	b.n	8004866 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 020f 	bic.w	r2, r2, #15
 8004864:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486a:	f023 0303 	bic.w	r3, r3, #3
 800486e:	f043 0201 	orr.w	r2, r3, #1
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	655a      	str	r2, [r3, #84]	; 0x54
 8004876:	e007      	b.n	8004888 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487c:	f043 0210 	orr.w	r2, r3, #16
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004888:	7ffb      	ldrb	r3, [r7, #31]
}
 800488a:	4618      	mov	r0, r3
 800488c:	3724      	adds	r7, #36	; 0x24
 800488e:	46bd      	mov	sp, r7
 8004890:	bd90      	pop	{r4, r7, pc}
 8004892:	bf00      	nop

08004894 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a92      	ldr	r2, [pc, #584]	; (8004aec <HAL_ADC_Start_IT+0x258>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d004      	beq.n	80048b0 <HAL_ADC_Start_IT+0x1c>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a91      	ldr	r2, [pc, #580]	; (8004af0 <HAL_ADC_Start_IT+0x25c>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d101      	bne.n	80048b4 <HAL_ADC_Start_IT+0x20>
 80048b0:	4b90      	ldr	r3, [pc, #576]	; (8004af4 <HAL_ADC_Start_IT+0x260>)
 80048b2:	e000      	b.n	80048b6 <HAL_ADC_Start_IT+0x22>
 80048b4:	4b90      	ldr	r3, [pc, #576]	; (8004af8 <HAL_ADC_Start_IT+0x264>)
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7ff fd58 	bl	800436c <LL_ADC_GetMultimode>
 80048bc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7ff fe1e 	bl	8004504 <LL_ADC_REG_IsConversionOngoing>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f040 8118 	bne.w	8004b00 <HAL_ADC_Start_IT+0x26c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d101      	bne.n	80048de <HAL_ADC_Start_IT+0x4a>
 80048da:	2302      	movs	r3, #2
 80048dc:	e113      	b.n	8004b06 <HAL_ADC_Start_IT+0x272>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 febe 	bl	8005668 <ADC_Enable>
 80048ec:	4603      	mov	r3, r0
 80048ee:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80048f0:	7dfb      	ldrb	r3, [r7, #23]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f040 80f5 	bne.w	8004ae2 <HAL_ADC_Start_IT+0x24e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048fc:	4b7f      	ldr	r3, [pc, #508]	; (8004afc <HAL_ADC_Start_IT+0x268>)
 80048fe:	4013      	ands	r3, r2
 8004900:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a78      	ldr	r2, [pc, #480]	; (8004af0 <HAL_ADC_Start_IT+0x25c>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d002      	beq.n	8004918 <HAL_ADC_Start_IT+0x84>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	e000      	b.n	800491a <HAL_ADC_Start_IT+0x86>
 8004918:	4b74      	ldr	r3, [pc, #464]	; (8004aec <HAL_ADC_Start_IT+0x258>)
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	6812      	ldr	r2, [r2, #0]
 800491e:	4293      	cmp	r3, r2
 8004920:	d002      	beq.n	8004928 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d105      	bne.n	8004934 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004938:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d006      	beq.n	800494e <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004944:	f023 0206 	bic.w	r2, r3, #6
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	659a      	str	r2, [r3, #88]	; 0x58
 800494c:	e002      	b.n	8004954 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	221c      	movs	r2, #28
 800495a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 021c 	bic.w	r2, r2, #28
 8004972:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	2b08      	cmp	r3, #8
 800497a:	d108      	bne.n	800498e <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	685a      	ldr	r2, [r3, #4]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f042 0208 	orr.w	r2, r2, #8
 800498a:	605a      	str	r2, [r3, #4]
          break;
 800498c:	e008      	b.n	80049a0 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f042 0204 	orr.w	r2, r2, #4
 800499c:	605a      	str	r2, [r3, #4]
          break;
 800499e:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d107      	bne.n	80049b8 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0210 	orr.w	r2, r2, #16
 80049b6:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a4c      	ldr	r2, [pc, #304]	; (8004af0 <HAL_ADC_Start_IT+0x25c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d002      	beq.n	80049c8 <HAL_ADC_Start_IT+0x134>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	e000      	b.n	80049ca <HAL_ADC_Start_IT+0x136>
 80049c8:	4b48      	ldr	r3, [pc, #288]	; (8004aec <HAL_ADC_Start_IT+0x258>)
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	6812      	ldr	r2, [r2, #0]
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d008      	beq.n	80049e4 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d005      	beq.n	80049e4 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	2b05      	cmp	r3, #5
 80049dc:	d002      	beq.n	80049e4 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	2b09      	cmp	r3, #9
 80049e2:	d13a      	bne.n	8004a5a <HAL_ADC_Start_IT+0x1c6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d02d      	beq.n	8004a4e <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80049fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	2b08      	cmp	r3, #8
 8004a08:	d110      	bne.n	8004a2c <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 0220 	bic.w	r2, r2, #32
 8004a18:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a28:	605a      	str	r2, [r3, #4]
              break;
 8004a2a:	e010      	b.n	8004a4e <HAL_ADC_Start_IT+0x1ba>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	685a      	ldr	r2, [r3, #4]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a3a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0220 	orr.w	r2, r2, #32
 8004a4a:	605a      	str	r2, [r3, #4]
              break;
 8004a4c:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7ff fd42 	bl	80044dc <LL_ADC_REG_StartConversion>
 8004a58:	e054      	b.n	8004b04 <HAL_ADC_Start_IT+0x270>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a21      	ldr	r2, [pc, #132]	; (8004af0 <HAL_ADC_Start_IT+0x25c>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d002      	beq.n	8004a76 <HAL_ADC_Start_IT+0x1e2>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	e000      	b.n	8004a78 <HAL_ADC_Start_IT+0x1e4>
 8004a76:	4b1d      	ldr	r3, [pc, #116]	; (8004aec <HAL_ADC_Start_IT+0x258>)
 8004a78:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d03e      	beq.n	8004b04 <HAL_ADC_Start_IT+0x270>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a8a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004a8e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	2b08      	cmp	r3, #8
 8004a9c:	d110      	bne.n	8004ac0 <HAL_ADC_Start_IT+0x22c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 0220 	bic.w	r2, r2, #32
 8004aac:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004abc:	605a      	str	r2, [r3, #4]
              break;
 8004abe:	e021      	b.n	8004b04 <HAL_ADC_Start_IT+0x270>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685a      	ldr	r2, [r3, #4]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ace:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0220 	orr.w	r2, r2, #32
 8004ade:	605a      	str	r2, [r3, #4]
              break;
 8004ae0:	e010      	b.n	8004b04 <HAL_ADC_Start_IT+0x270>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004aea:	e00b      	b.n	8004b04 <HAL_ADC_Start_IT+0x270>
 8004aec:	40022000 	.word	0x40022000
 8004af0:	40022100 	.word	0x40022100
 8004af4:	40022300 	.word	0x40022300
 8004af8:	58026300 	.word	0x58026300
 8004afc:	fffff0fe 	.word	0xfffff0fe
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004b00:	2302      	movs	r3, #2
 8004b02:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3718      	adds	r7, #24
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop

08004b10 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
	...

08004b2c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08a      	sub	sp, #40	; 0x28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004b34:	2300      	movs	r3, #0
 8004b36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a87      	ldr	r2, [pc, #540]	; (8004d6c <HAL_ADC_IRQHandler+0x240>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d004      	beq.n	8004b5c <HAL_ADC_IRQHandler+0x30>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a86      	ldr	r2, [pc, #536]	; (8004d70 <HAL_ADC_IRQHandler+0x244>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d101      	bne.n	8004b60 <HAL_ADC_IRQHandler+0x34>
 8004b5c:	4b85      	ldr	r3, [pc, #532]	; (8004d74 <HAL_ADC_IRQHandler+0x248>)
 8004b5e:	e000      	b.n	8004b62 <HAL_ADC_IRQHandler+0x36>
 8004b60:	4b85      	ldr	r3, [pc, #532]	; (8004d78 <HAL_ADC_IRQHandler+0x24c>)
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7ff fc02 	bl	800436c <LL_ADC_GetMultimode>
 8004b68:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d017      	beq.n	8004ba4 <HAL_ADC_IRQHandler+0x78>
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d012      	beq.n	8004ba4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b82:	f003 0310 	and.w	r3, r3, #16
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d105      	bne.n	8004b96 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b8e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f001 f81a 	bl	8005bd0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	f003 0304 	and.w	r3, r3, #4
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d004      	beq.n	8004bb8 <HAL_ADC_IRQHandler+0x8c>
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	f003 0304 	and.w	r3, r3, #4
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10a      	bne.n	8004bce <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f000 8083 	beq.w	8004cca <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	f003 0308 	and.w	r3, r3, #8
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d07d      	beq.n	8004cca <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd2:	f003 0310 	and.w	r3, r3, #16
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d105      	bne.n	8004be6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bde:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7ff fb1c 	bl	8004228 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d062      	beq.n	8004cbc <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a5d      	ldr	r2, [pc, #372]	; (8004d70 <HAL_ADC_IRQHandler+0x244>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d002      	beq.n	8004c06 <HAL_ADC_IRQHandler+0xda>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	e000      	b.n	8004c08 <HAL_ADC_IRQHandler+0xdc>
 8004c06:	4b59      	ldr	r3, [pc, #356]	; (8004d6c <HAL_ADC_IRQHandler+0x240>)
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6812      	ldr	r2, [r2, #0]
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d008      	beq.n	8004c22 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d005      	beq.n	8004c22 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2b05      	cmp	r3, #5
 8004c1a:	d002      	beq.n	8004c22 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	2b09      	cmp	r3, #9
 8004c20:	d104      	bne.n	8004c2c <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	623b      	str	r3, [r7, #32]
 8004c2a:	e00c      	b.n	8004c46 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a4f      	ldr	r2, [pc, #316]	; (8004d70 <HAL_ADC_IRQHandler+0x244>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d002      	beq.n	8004c3c <HAL_ADC_IRQHandler+0x110>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	e000      	b.n	8004c3e <HAL_ADC_IRQHandler+0x112>
 8004c3c:	4b4b      	ldr	r3, [pc, #300]	; (8004d6c <HAL_ADC_IRQHandler+0x240>)
 8004c3e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004c46:	6a3b      	ldr	r3, [r7, #32]
 8004c48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d135      	bne.n	8004cbc <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0308 	and.w	r3, r3, #8
 8004c5a:	2b08      	cmp	r3, #8
 8004c5c:	d12e      	bne.n	8004cbc <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7ff fc4e 	bl	8004504 <LL_ADC_REG_IsConversionOngoing>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d11a      	bne.n	8004ca4 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	685a      	ldr	r2, [r3, #4]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f022 020c 	bic.w	r2, r2, #12
 8004c7c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d112      	bne.n	8004cbc <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c9a:	f043 0201 	orr.w	r2, r3, #1
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	655a      	str	r2, [r3, #84]	; 0x54
 8004ca2:	e00b      	b.n	8004cbc <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca8:	f043 0210 	orr.w	r2, r3, #16
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb4:	f043 0201 	orr.w	r2, r3, #1
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f7fe fa53 	bl	8003168 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	220c      	movs	r2, #12
 8004cc8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	f003 0320 	and.w	r3, r3, #32
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d004      	beq.n	8004cde <HAL_ADC_IRQHandler+0x1b2>
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	f003 0320 	and.w	r3, r3, #32
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10b      	bne.n	8004cf6 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f000 80a0 	beq.w	8004e2a <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 809a 	beq.w	8004e2a <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cfa:	f003 0310 	and.w	r3, r3, #16
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d105      	bne.n	8004d0e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d06:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7ff fac7 	bl	80042a6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004d18:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7ff fa82 	bl	8004228 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004d24:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a11      	ldr	r2, [pc, #68]	; (8004d70 <HAL_ADC_IRQHandler+0x244>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d002      	beq.n	8004d36 <HAL_ADC_IRQHandler+0x20a>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	e000      	b.n	8004d38 <HAL_ADC_IRQHandler+0x20c>
 8004d36:	4b0d      	ldr	r3, [pc, #52]	; (8004d6c <HAL_ADC_IRQHandler+0x240>)
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	6812      	ldr	r2, [r2, #0]
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d008      	beq.n	8004d52 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d005      	beq.n	8004d52 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	2b06      	cmp	r3, #6
 8004d4a:	d002      	beq.n	8004d52 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	2b07      	cmp	r3, #7
 8004d50:	d104      	bne.n	8004d5c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	623b      	str	r3, [r7, #32]
 8004d5a:	e014      	b.n	8004d86 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a03      	ldr	r2, [pc, #12]	; (8004d70 <HAL_ADC_IRQHandler+0x244>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d00a      	beq.n	8004d7c <HAL_ADC_IRQHandler+0x250>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	e008      	b.n	8004d7e <HAL_ADC_IRQHandler+0x252>
 8004d6c:	40022000 	.word	0x40022000
 8004d70:	40022100 	.word	0x40022100
 8004d74:	40022300 	.word	0x40022300
 8004d78:	58026300 	.word	0x58026300
 8004d7c:	4b84      	ldr	r3, [pc, #528]	; (8004f90 <HAL_ADC_IRQHandler+0x464>)
 8004d7e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d047      	beq.n	8004e1c <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
 8004d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d007      	beq.n	8004da6 <HAL_ADC_IRQHandler+0x27a>
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d03f      	beq.n	8004e1c <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004d9c:	6a3b      	ldr	r3, [r7, #32]
 8004d9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d13a      	bne.n	8004e1c <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db0:	2b40      	cmp	r3, #64	; 0x40
 8004db2:	d133      	bne.n	8004e1c <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d12e      	bne.n	8004e1c <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7ff fbb1 	bl	800452a <LL_ADC_INJ_IsConversionOngoing>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d11a      	bne.n	8004e04 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ddc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d112      	bne.n	8004e1c <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfa:	f043 0201 	orr.w	r2, r3, #1
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	655a      	str	r2, [r3, #84]	; 0x54
 8004e02:	e00b      	b.n	8004e1c <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e08:	f043 0210 	orr.w	r2, r3, #16
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e14:	f043 0201 	orr.w	r2, r3, #1
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 feaf 	bl	8005b80 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2260      	movs	r2, #96	; 0x60
 8004e28:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d011      	beq.n	8004e58 <HAL_ADC_IRQHandler+0x32c>
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00c      	beq.n	8004e58 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f8a8 	bl	8004fa0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2280      	movs	r2, #128	; 0x80
 8004e56:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d012      	beq.n	8004e88 <HAL_ADC_IRQHandler+0x35c>
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00d      	beq.n	8004e88 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e70:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 fe95 	bl	8005ba8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e86:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d012      	beq.n	8004eb8 <HAL_ADC_IRQHandler+0x38c>
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00d      	beq.n	8004eb8 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 fe87 	bl	8005bbc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004eb6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	f003 0310 	and.w	r3, r3, #16
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d043      	beq.n	8004f4a <HAL_ADC_IRQHandler+0x41e>
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	f003 0310 	and.w	r3, r3, #16
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d03e      	beq.n	8004f4a <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d102      	bne.n	8004eda <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed8:	e021      	b.n	8004f1e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d015      	beq.n	8004f0c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a2a      	ldr	r2, [pc, #168]	; (8004f90 <HAL_ADC_IRQHandler+0x464>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d004      	beq.n	8004ef4 <HAL_ADC_IRQHandler+0x3c8>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a29      	ldr	r2, [pc, #164]	; (8004f94 <HAL_ADC_IRQHandler+0x468>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d101      	bne.n	8004ef8 <HAL_ADC_IRQHandler+0x3cc>
 8004ef4:	4b28      	ldr	r3, [pc, #160]	; (8004f98 <HAL_ADC_IRQHandler+0x46c>)
 8004ef6:	e000      	b.n	8004efa <HAL_ADC_IRQHandler+0x3ce>
 8004ef8:	4b28      	ldr	r3, [pc, #160]	; (8004f9c <HAL_ADC_IRQHandler+0x470>)
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7ff fa44 	bl	8004388 <LL_ADC_GetMultiDMATransfer>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00b      	beq.n	8004f1e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8004f06:	2301      	movs	r3, #1
 8004f08:	627b      	str	r3, [r7, #36]	; 0x24
 8004f0a:	e008      	b.n	8004f1e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	f003 0303 	and.w	r3, r3, #3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d10e      	bne.n	8004f42 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f28:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f34:	f043 0202 	orr.w	r2, r3, #2
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 f839 	bl	8004fb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2210      	movs	r2, #16
 8004f48:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d018      	beq.n	8004f86 <HAL_ADC_IRQHandler+0x45a>
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d013      	beq.n	8004f86 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f62:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f6e:	f043 0208 	orr.w	r2, r3, #8
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f7e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 fe07 	bl	8005b94 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004f86:	bf00      	nop
 8004f88:	3728      	adds	r7, #40	; 0x28
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	40022000 	.word	0x40022000
 8004f94:	40022100 	.word	0x40022100
 8004f98:	40022300 	.word	0x40022300
 8004f9c:	58026300 	.word	0x58026300

08004fa0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004fc8:	b590      	push	{r4, r7, lr}
 8004fca:	b0a1      	sub	sp, #132	; 0x84
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	4a9d      	ldr	r2, [pc, #628]	; (8005258 <HAL_ADC_ConfigChannel+0x290>)
 8004fe2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d101      	bne.n	8004ff2 <HAL_ADC_ConfigChannel+0x2a>
 8004fee:	2302      	movs	r3, #2
 8004ff0:	e321      	b.n	8005636 <HAL_ADC_ConfigChannel+0x66e>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7ff fa80 	bl	8004504 <LL_ADC_REG_IsConversionOngoing>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	f040 8306 	bne.w	8005618 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005014:	2b00      	cmp	r3, #0
 8005016:	d108      	bne.n	800502a <HAL_ADC_ConfigChannel+0x62>
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	0e9b      	lsrs	r3, r3, #26
 800501e:	f003 031f 	and.w	r3, r3, #31
 8005022:	2201      	movs	r2, #1
 8005024:	fa02 f303 	lsl.w	r3, r2, r3
 8005028:	e016      	b.n	8005058 <HAL_ADC_ConfigChannel+0x90>
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005030:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005032:	fa93 f3a3 	rbit	r3, r3
 8005036:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005038:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800503a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800503c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8005042:	2320      	movs	r3, #32
 8005044:	e003      	b.n	800504e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8005046:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005048:	fab3 f383 	clz	r3, r3
 800504c:	b2db      	uxtb	r3, r3
 800504e:	f003 031f 	and.w	r3, r3, #31
 8005052:	2201      	movs	r2, #1
 8005054:	fa02 f303 	lsl.w	r3, r2, r3
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	6812      	ldr	r2, [r2, #0]
 800505c:	69d1      	ldr	r1, [r2, #28]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	6812      	ldr	r2, [r2, #0]
 8005062:	430b      	orrs	r3, r1
 8005064:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6818      	ldr	r0, [r3, #0]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	6859      	ldr	r1, [r3, #4]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	461a      	mov	r2, r3
 8005074:	f7ff f8eb 	bl	800424e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4618      	mov	r0, r3
 800507e:	f7ff fa41 	bl	8004504 <LL_ADC_REG_IsConversionOngoing>
 8005082:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4618      	mov	r0, r3
 800508a:	f7ff fa4e 	bl	800452a <LL_ADC_INJ_IsConversionOngoing>
 800508e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005090:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005092:	2b00      	cmp	r3, #0
 8005094:	f040 80b3 	bne.w	80051fe <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005098:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800509a:	2b00      	cmp	r3, #0
 800509c:	f040 80af 	bne.w	80051fe <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6818      	ldr	r0, [r3, #0]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	6819      	ldr	r1, [r3, #0]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	461a      	mov	r2, r3
 80050ae:	f7ff f90d 	bl	80042cc <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80050b2:	4b6a      	ldr	r3, [pc, #424]	; (800525c <HAL_ADC_ConfigChannel+0x294>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80050ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050be:	d10b      	bne.n	80050d8 <HAL_ADC_ConfigChannel+0x110>
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	695a      	ldr	r2, [r3, #20]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	089b      	lsrs	r3, r3, #2
 80050cc:	f003 0307 	and.w	r3, r3, #7
 80050d0:	005b      	lsls	r3, r3, #1
 80050d2:	fa02 f303 	lsl.w	r3, r2, r3
 80050d6:	e01d      	b.n	8005114 <HAL_ADC_ConfigChannel+0x14c>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	f003 0310 	and.w	r3, r3, #16
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10b      	bne.n	80050fe <HAL_ADC_ConfigChannel+0x136>
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	695a      	ldr	r2, [r3, #20]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	089b      	lsrs	r3, r3, #2
 80050f2:	f003 0307 	and.w	r3, r3, #7
 80050f6:	005b      	lsls	r3, r3, #1
 80050f8:	fa02 f303 	lsl.w	r3, r2, r3
 80050fc:	e00a      	b.n	8005114 <HAL_ADC_ConfigChannel+0x14c>
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	695a      	ldr	r2, [r3, #20]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	089b      	lsrs	r3, r3, #2
 800510a:	f003 0304 	and.w	r3, r3, #4
 800510e:	005b      	lsls	r3, r3, #1
 8005110:	fa02 f303 	lsl.w	r3, r2, r3
 8005114:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	2b04      	cmp	r3, #4
 800511c:	d027      	beq.n	800516e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6818      	ldr	r0, [r3, #0]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	6919      	ldr	r1, [r3, #16]
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800512c:	f7ff f828 	bl	8004180 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6818      	ldr	r0, [r3, #0]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	6919      	ldr	r1, [r3, #16]
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	7e5b      	ldrb	r3, [r3, #25]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d102      	bne.n	8005146 <HAL_ADC_ConfigChannel+0x17e>
 8005140:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005144:	e000      	b.n	8005148 <HAL_ADC_ConfigChannel+0x180>
 8005146:	2300      	movs	r3, #0
 8005148:	461a      	mov	r2, r3
 800514a:	f7ff f852 	bl	80041f2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6818      	ldr	r0, [r3, #0]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	6919      	ldr	r1, [r3, #16]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	7e1b      	ldrb	r3, [r3, #24]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d102      	bne.n	8005164 <HAL_ADC_ConfigChannel+0x19c>
 800515e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005162:	e000      	b.n	8005166 <HAL_ADC_ConfigChannel+0x19e>
 8005164:	2300      	movs	r3, #0
 8005166:	461a      	mov	r2, r3
 8005168:	f7ff f82a 	bl	80041c0 <LL_ADC_SetDataRightShift>
 800516c:	e047      	b.n	80051fe <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005174:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	069b      	lsls	r3, r3, #26
 800517e:	429a      	cmp	r2, r3
 8005180:	d107      	bne.n	8005192 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005190:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005198:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	069b      	lsls	r3, r3, #26
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d107      	bne.n	80051b6 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80051b4:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	069b      	lsls	r3, r3, #26
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d107      	bne.n	80051da <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80051d8:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	069b      	lsls	r3, r3, #26
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d107      	bne.n	80051fe <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80051fc:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4618      	mov	r0, r3
 8005204:	f7ff f944 	bl	8004490 <LL_ADC_IsEnabled>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	f040 820d 	bne.w	800562a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6818      	ldr	r0, [r3, #0]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	6819      	ldr	r1, [r3, #0]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	461a      	mov	r2, r3
 800521e:	f7ff f881 	bl	8004324 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	4a0c      	ldr	r2, [pc, #48]	; (8005258 <HAL_ADC_ConfigChannel+0x290>)
 8005228:	4293      	cmp	r3, r2
 800522a:	f040 8133 	bne.w	8005494 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800523a:	2b00      	cmp	r3, #0
 800523c:	d110      	bne.n	8005260 <HAL_ADC_ConfigChannel+0x298>
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	0e9b      	lsrs	r3, r3, #26
 8005244:	3301      	adds	r3, #1
 8005246:	f003 031f 	and.w	r3, r3, #31
 800524a:	2b09      	cmp	r3, #9
 800524c:	bf94      	ite	ls
 800524e:	2301      	movls	r3, #1
 8005250:	2300      	movhi	r3, #0
 8005252:	b2db      	uxtb	r3, r3
 8005254:	e01e      	b.n	8005294 <HAL_ADC_ConfigChannel+0x2cc>
 8005256:	bf00      	nop
 8005258:	47ff0000 	.word	0x47ff0000
 800525c:	5c001000 	.word	0x5c001000
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005266:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005268:	fa93 f3a3 	rbit	r3, r3
 800526c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800526e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005270:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8005272:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005274:	2b00      	cmp	r3, #0
 8005276:	d101      	bne.n	800527c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8005278:	2320      	movs	r3, #32
 800527a:	e003      	b.n	8005284 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800527c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800527e:	fab3 f383 	clz	r3, r3
 8005282:	b2db      	uxtb	r3, r3
 8005284:	3301      	adds	r3, #1
 8005286:	f003 031f 	and.w	r3, r3, #31
 800528a:	2b09      	cmp	r3, #9
 800528c:	bf94      	ite	ls
 800528e:	2301      	movls	r3, #1
 8005290:	2300      	movhi	r3, #0
 8005292:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005294:	2b00      	cmp	r3, #0
 8005296:	d079      	beq.n	800538c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d107      	bne.n	80052b4 <HAL_ADC_ConfigChannel+0x2ec>
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	0e9b      	lsrs	r3, r3, #26
 80052aa:	3301      	adds	r3, #1
 80052ac:	069b      	lsls	r3, r3, #26
 80052ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80052b2:	e015      	b.n	80052e0 <HAL_ADC_ConfigChannel+0x318>
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052bc:	fa93 f3a3 	rbit	r3, r3
 80052c0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80052c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052c4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80052c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80052cc:	2320      	movs	r3, #32
 80052ce:	e003      	b.n	80052d8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80052d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052d2:	fab3 f383 	clz	r3, r3
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	3301      	adds	r3, #1
 80052da:	069b      	lsls	r3, r3, #26
 80052dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d109      	bne.n	8005300 <HAL_ADC_ConfigChannel+0x338>
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	0e9b      	lsrs	r3, r3, #26
 80052f2:	3301      	adds	r3, #1
 80052f4:	f003 031f 	and.w	r3, r3, #31
 80052f8:	2101      	movs	r1, #1
 80052fa:	fa01 f303 	lsl.w	r3, r1, r3
 80052fe:	e017      	b.n	8005330 <HAL_ADC_ConfigChannel+0x368>
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005308:	fa93 f3a3 	rbit	r3, r3
 800530c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800530e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005310:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8005312:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005314:	2b00      	cmp	r3, #0
 8005316:	d101      	bne.n	800531c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8005318:	2320      	movs	r3, #32
 800531a:	e003      	b.n	8005324 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 800531c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800531e:	fab3 f383 	clz	r3, r3
 8005322:	b2db      	uxtb	r3, r3
 8005324:	3301      	adds	r3, #1
 8005326:	f003 031f 	and.w	r3, r3, #31
 800532a:	2101      	movs	r1, #1
 800532c:	fa01 f303 	lsl.w	r3, r1, r3
 8005330:	ea42 0103 	orr.w	r1, r2, r3
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10a      	bne.n	8005356 <HAL_ADC_ConfigChannel+0x38e>
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	0e9b      	lsrs	r3, r3, #26
 8005346:	3301      	adds	r3, #1
 8005348:	f003 021f 	and.w	r2, r3, #31
 800534c:	4613      	mov	r3, r2
 800534e:	005b      	lsls	r3, r3, #1
 8005350:	4413      	add	r3, r2
 8005352:	051b      	lsls	r3, r3, #20
 8005354:	e018      	b.n	8005388 <HAL_ADC_ConfigChannel+0x3c0>
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800535c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800535e:	fa93 f3a3 	rbit	r3, r3
 8005362:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005366:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536a:	2b00      	cmp	r3, #0
 800536c:	d101      	bne.n	8005372 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800536e:	2320      	movs	r3, #32
 8005370:	e003      	b.n	800537a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8005372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005374:	fab3 f383 	clz	r3, r3
 8005378:	b2db      	uxtb	r3, r3
 800537a:	3301      	adds	r3, #1
 800537c:	f003 021f 	and.w	r2, r3, #31
 8005380:	4613      	mov	r3, r2
 8005382:	005b      	lsls	r3, r3, #1
 8005384:	4413      	add	r3, r2
 8005386:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005388:	430b      	orrs	r3, r1
 800538a:	e07e      	b.n	800548a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005394:	2b00      	cmp	r3, #0
 8005396:	d107      	bne.n	80053a8 <HAL_ADC_ConfigChannel+0x3e0>
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	0e9b      	lsrs	r3, r3, #26
 800539e:	3301      	adds	r3, #1
 80053a0:	069b      	lsls	r3, r3, #26
 80053a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80053a6:	e015      	b.n	80053d4 <HAL_ADC_ConfigChannel+0x40c>
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b0:	fa93 f3a3 	rbit	r3, r3
 80053b4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80053ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80053c0:	2320      	movs	r3, #32
 80053c2:	e003      	b.n	80053cc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80053c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c6:	fab3 f383 	clz	r3, r3
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	3301      	adds	r3, #1
 80053ce:	069b      	lsls	r3, r3, #26
 80053d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d109      	bne.n	80053f4 <HAL_ADC_ConfigChannel+0x42c>
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	0e9b      	lsrs	r3, r3, #26
 80053e6:	3301      	adds	r3, #1
 80053e8:	f003 031f 	and.w	r3, r3, #31
 80053ec:	2101      	movs	r1, #1
 80053ee:	fa01 f303 	lsl.w	r3, r1, r3
 80053f2:	e017      	b.n	8005424 <HAL_ADC_ConfigChannel+0x45c>
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	fa93 f3a3 	rbit	r3, r3
 8005400:	61bb      	str	r3, [r7, #24]
  return result;
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005406:	6a3b      	ldr	r3, [r7, #32]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d101      	bne.n	8005410 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 800540c:	2320      	movs	r3, #32
 800540e:	e003      	b.n	8005418 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8005410:	6a3b      	ldr	r3, [r7, #32]
 8005412:	fab3 f383 	clz	r3, r3
 8005416:	b2db      	uxtb	r3, r3
 8005418:	3301      	adds	r3, #1
 800541a:	f003 031f 	and.w	r3, r3, #31
 800541e:	2101      	movs	r1, #1
 8005420:	fa01 f303 	lsl.w	r3, r1, r3
 8005424:	ea42 0103 	orr.w	r1, r2, r3
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005430:	2b00      	cmp	r3, #0
 8005432:	d10d      	bne.n	8005450 <HAL_ADC_ConfigChannel+0x488>
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	0e9b      	lsrs	r3, r3, #26
 800543a:	3301      	adds	r3, #1
 800543c:	f003 021f 	and.w	r2, r3, #31
 8005440:	4613      	mov	r3, r2
 8005442:	005b      	lsls	r3, r3, #1
 8005444:	4413      	add	r3, r2
 8005446:	3b1e      	subs	r3, #30
 8005448:	051b      	lsls	r3, r3, #20
 800544a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800544e:	e01b      	b.n	8005488 <HAL_ADC_ConfigChannel+0x4c0>
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	fa93 f3a3 	rbit	r3, r3
 800545c:	60fb      	str	r3, [r7, #12]
  return result;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d101      	bne.n	800546c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8005468:	2320      	movs	r3, #32
 800546a:	e003      	b.n	8005474 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	fab3 f383 	clz	r3, r3
 8005472:	b2db      	uxtb	r3, r3
 8005474:	3301      	adds	r3, #1
 8005476:	f003 021f 	and.w	r2, r3, #31
 800547a:	4613      	mov	r3, r2
 800547c:	005b      	lsls	r3, r3, #1
 800547e:	4413      	add	r3, r2
 8005480:	3b1e      	subs	r3, #30
 8005482:	051b      	lsls	r3, r3, #20
 8005484:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005488:	430b      	orrs	r3, r1
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	6892      	ldr	r2, [r2, #8]
 800548e:	4619      	mov	r1, r3
 8005490:	f7fe ff1c 	bl	80042cc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	f280 80c6 	bge.w	800562a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a67      	ldr	r2, [pc, #412]	; (8005640 <HAL_ADC_ConfigChannel+0x678>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d004      	beq.n	80054b2 <HAL_ADC_ConfigChannel+0x4ea>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a65      	ldr	r2, [pc, #404]	; (8005644 <HAL_ADC_ConfigChannel+0x67c>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d101      	bne.n	80054b6 <HAL_ADC_ConfigChannel+0x4ee>
 80054b2:	4b65      	ldr	r3, [pc, #404]	; (8005648 <HAL_ADC_ConfigChannel+0x680>)
 80054b4:	e000      	b.n	80054b8 <HAL_ADC_ConfigChannel+0x4f0>
 80054b6:	4b65      	ldr	r3, [pc, #404]	; (800564c <HAL_ADC_ConfigChannel+0x684>)
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7fe fe53 	bl	8004164 <LL_ADC_GetCommonPathInternalCh>
 80054be:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a5e      	ldr	r2, [pc, #376]	; (8005640 <HAL_ADC_ConfigChannel+0x678>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d004      	beq.n	80054d4 <HAL_ADC_ConfigChannel+0x50c>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a5d      	ldr	r2, [pc, #372]	; (8005644 <HAL_ADC_ConfigChannel+0x67c>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d10e      	bne.n	80054f2 <HAL_ADC_ConfigChannel+0x52a>
 80054d4:	485a      	ldr	r0, [pc, #360]	; (8005640 <HAL_ADC_ConfigChannel+0x678>)
 80054d6:	f7fe ffdb 	bl	8004490 <LL_ADC_IsEnabled>
 80054da:	4604      	mov	r4, r0
 80054dc:	4859      	ldr	r0, [pc, #356]	; (8005644 <HAL_ADC_ConfigChannel+0x67c>)
 80054de:	f7fe ffd7 	bl	8004490 <LL_ADC_IsEnabled>
 80054e2:	4603      	mov	r3, r0
 80054e4:	4323      	orrs	r3, r4
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	bf0c      	ite	eq
 80054ea:	2301      	moveq	r3, #1
 80054ec:	2300      	movne	r3, #0
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	e008      	b.n	8005504 <HAL_ADC_ConfigChannel+0x53c>
 80054f2:	4857      	ldr	r0, [pc, #348]	; (8005650 <HAL_ADC_ConfigChannel+0x688>)
 80054f4:	f7fe ffcc 	bl	8004490 <LL_ADC_IsEnabled>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	bf0c      	ite	eq
 80054fe:	2301      	moveq	r3, #1
 8005500:	2300      	movne	r3, #0
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b00      	cmp	r3, #0
 8005506:	d07d      	beq.n	8005604 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a51      	ldr	r2, [pc, #324]	; (8005654 <HAL_ADC_ConfigChannel+0x68c>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d130      	bne.n	8005574 <HAL_ADC_ConfigChannel+0x5ac>
 8005512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005514:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d12b      	bne.n	8005574 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a4b      	ldr	r2, [pc, #300]	; (8005650 <HAL_ADC_ConfigChannel+0x688>)
 8005522:	4293      	cmp	r3, r2
 8005524:	f040 8081 	bne.w	800562a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a44      	ldr	r2, [pc, #272]	; (8005640 <HAL_ADC_ConfigChannel+0x678>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d004      	beq.n	800553c <HAL_ADC_ConfigChannel+0x574>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a43      	ldr	r2, [pc, #268]	; (8005644 <HAL_ADC_ConfigChannel+0x67c>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d101      	bne.n	8005540 <HAL_ADC_ConfigChannel+0x578>
 800553c:	4a42      	ldr	r2, [pc, #264]	; (8005648 <HAL_ADC_ConfigChannel+0x680>)
 800553e:	e000      	b.n	8005542 <HAL_ADC_ConfigChannel+0x57a>
 8005540:	4a42      	ldr	r2, [pc, #264]	; (800564c <HAL_ADC_ConfigChannel+0x684>)
 8005542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005544:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005548:	4619      	mov	r1, r3
 800554a:	4610      	mov	r0, r2
 800554c:	f7fe fdf7 	bl	800413e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005550:	4b41      	ldr	r3, [pc, #260]	; (8005658 <HAL_ADC_ConfigChannel+0x690>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	099b      	lsrs	r3, r3, #6
 8005556:	4a41      	ldr	r2, [pc, #260]	; (800565c <HAL_ADC_ConfigChannel+0x694>)
 8005558:	fba2 2303 	umull	r2, r3, r2, r3
 800555c:	099b      	lsrs	r3, r3, #6
 800555e:	3301      	adds	r3, #1
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005564:	e002      	b.n	800556c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	3b01      	subs	r3, #1
 800556a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1f9      	bne.n	8005566 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005572:	e05a      	b.n	800562a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a39      	ldr	r2, [pc, #228]	; (8005660 <HAL_ADC_ConfigChannel+0x698>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d11e      	bne.n	80055bc <HAL_ADC_ConfigChannel+0x5f4>
 800557e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005580:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d119      	bne.n	80055bc <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a30      	ldr	r2, [pc, #192]	; (8005650 <HAL_ADC_ConfigChannel+0x688>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d14b      	bne.n	800562a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a2a      	ldr	r2, [pc, #168]	; (8005640 <HAL_ADC_ConfigChannel+0x678>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d004      	beq.n	80055a6 <HAL_ADC_ConfigChannel+0x5de>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a28      	ldr	r2, [pc, #160]	; (8005644 <HAL_ADC_ConfigChannel+0x67c>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d101      	bne.n	80055aa <HAL_ADC_ConfigChannel+0x5e2>
 80055a6:	4a28      	ldr	r2, [pc, #160]	; (8005648 <HAL_ADC_ConfigChannel+0x680>)
 80055a8:	e000      	b.n	80055ac <HAL_ADC_ConfigChannel+0x5e4>
 80055aa:	4a28      	ldr	r2, [pc, #160]	; (800564c <HAL_ADC_ConfigChannel+0x684>)
 80055ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055b2:	4619      	mov	r1, r3
 80055b4:	4610      	mov	r0, r2
 80055b6:	f7fe fdc2 	bl	800413e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80055ba:	e036      	b.n	800562a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a28      	ldr	r2, [pc, #160]	; (8005664 <HAL_ADC_ConfigChannel+0x69c>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d131      	bne.n	800562a <HAL_ADC_ConfigChannel+0x662>
 80055c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d12c      	bne.n	800562a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a1e      	ldr	r2, [pc, #120]	; (8005650 <HAL_ADC_ConfigChannel+0x688>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d127      	bne.n	800562a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a18      	ldr	r2, [pc, #96]	; (8005640 <HAL_ADC_ConfigChannel+0x678>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d004      	beq.n	80055ee <HAL_ADC_ConfigChannel+0x626>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a16      	ldr	r2, [pc, #88]	; (8005644 <HAL_ADC_ConfigChannel+0x67c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d101      	bne.n	80055f2 <HAL_ADC_ConfigChannel+0x62a>
 80055ee:	4a16      	ldr	r2, [pc, #88]	; (8005648 <HAL_ADC_ConfigChannel+0x680>)
 80055f0:	e000      	b.n	80055f4 <HAL_ADC_ConfigChannel+0x62c>
 80055f2:	4a16      	ldr	r2, [pc, #88]	; (800564c <HAL_ADC_ConfigChannel+0x684>)
 80055f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80055fa:	4619      	mov	r1, r3
 80055fc:	4610      	mov	r0, r2
 80055fe:	f7fe fd9e 	bl	800413e <LL_ADC_SetCommonPathInternalCh>
 8005602:	e012      	b.n	800562a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005608:	f043 0220 	orr.w	r2, r3, #32
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005616:	e008      	b.n	800562a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800561c:	f043 0220 	orr.w	r2, r3, #32
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005632:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005636:	4618      	mov	r0, r3
 8005638:	3784      	adds	r7, #132	; 0x84
 800563a:	46bd      	mov	sp, r7
 800563c:	bd90      	pop	{r4, r7, pc}
 800563e:	bf00      	nop
 8005640:	40022000 	.word	0x40022000
 8005644:	40022100 	.word	0x40022100
 8005648:	40022300 	.word	0x40022300
 800564c:	58026300 	.word	0x58026300
 8005650:	58026000 	.word	0x58026000
 8005654:	cb840000 	.word	0xcb840000
 8005658:	20000010 	.word	0x20000010
 800565c:	053e2d63 	.word	0x053e2d63
 8005660:	c7520000 	.word	0xc7520000
 8005664:	cfb80000 	.word	0xcfb80000

08005668 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4618      	mov	r0, r3
 8005676:	f7fe ff0b 	bl	8004490 <LL_ADC_IsEnabled>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d16e      	bne.n	800575e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	689a      	ldr	r2, [r3, #8]
 8005686:	4b38      	ldr	r3, [pc, #224]	; (8005768 <ADC_Enable+0x100>)
 8005688:	4013      	ands	r3, r2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00d      	beq.n	80056aa <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005692:	f043 0210 	orr.w	r2, r3, #16
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800569e:	f043 0201 	orr.w	r2, r3, #1
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e05a      	b.n	8005760 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7fe fec6 	bl	8004440 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80056b4:	f7fe fcca 	bl	800404c <HAL_GetTick>
 80056b8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a2b      	ldr	r2, [pc, #172]	; (800576c <ADC_Enable+0x104>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d004      	beq.n	80056ce <ADC_Enable+0x66>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a29      	ldr	r2, [pc, #164]	; (8005770 <ADC_Enable+0x108>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d101      	bne.n	80056d2 <ADC_Enable+0x6a>
 80056ce:	4b29      	ldr	r3, [pc, #164]	; (8005774 <ADC_Enable+0x10c>)
 80056d0:	e000      	b.n	80056d4 <ADC_Enable+0x6c>
 80056d2:	4b29      	ldr	r3, [pc, #164]	; (8005778 <ADC_Enable+0x110>)
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7fe fe49 	bl	800436c <LL_ADC_GetMultimode>
 80056da:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a23      	ldr	r2, [pc, #140]	; (8005770 <ADC_Enable+0x108>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d002      	beq.n	80056ec <ADC_Enable+0x84>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	e000      	b.n	80056ee <ADC_Enable+0x86>
 80056ec:	4b1f      	ldr	r3, [pc, #124]	; (800576c <ADC_Enable+0x104>)
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	6812      	ldr	r2, [r2, #0]
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d02c      	beq.n	8005750 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d130      	bne.n	800575e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80056fc:	e028      	b.n	8005750 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4618      	mov	r0, r3
 8005704:	f7fe fec4 	bl	8004490 <LL_ADC_IsEnabled>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d104      	bne.n	8005718 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4618      	mov	r0, r3
 8005714:	f7fe fe94 	bl	8004440 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005718:	f7fe fc98 	bl	800404c <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	2b02      	cmp	r3, #2
 8005724:	d914      	bls.n	8005750 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	2b01      	cmp	r3, #1
 8005732:	d00d      	beq.n	8005750 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005738:	f043 0210 	orr.w	r2, r3, #16
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005744:	f043 0201 	orr.w	r2, r3, #1
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e007      	b.n	8005760 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b01      	cmp	r3, #1
 800575c:	d1cf      	bne.n	80056fe <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	8000003f 	.word	0x8000003f
 800576c:	40022000 	.word	0x40022000
 8005770:	40022100 	.word	0x40022100
 8005774:	40022300 	.word	0x40022300
 8005778:	58026300 	.word	0x58026300

0800577c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4618      	mov	r0, r3
 800578a:	f7fe fe94 	bl	80044b6 <LL_ADC_IsDisableOngoing>
 800578e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4618      	mov	r0, r3
 8005796:	f7fe fe7b 	bl	8004490 <LL_ADC_IsEnabled>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d047      	beq.n	8005830 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d144      	bne.n	8005830 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f003 030d 	and.w	r3, r3, #13
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d10c      	bne.n	80057ce <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7fe fe55 	bl	8004468 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2203      	movs	r2, #3
 80057c4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80057c6:	f7fe fc41 	bl	800404c <HAL_GetTick>
 80057ca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80057cc:	e029      	b.n	8005822 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d2:	f043 0210 	orr.w	r2, r3, #16
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057de:	f043 0201 	orr.w	r2, r3, #1
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e023      	b.n	8005832 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80057ea:	f7fe fc2f 	bl	800404c <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d914      	bls.n	8005822 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00d      	beq.n	8005822 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800580a:	f043 0210 	orr.w	r2, r3, #16
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005816:	f043 0201 	orr.w	r2, r3, #1
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e007      	b.n	8005832 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1dc      	bne.n	80057ea <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
	...

0800583c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a7a      	ldr	r2, [pc, #488]	; (8005a34 <ADC_ConfigureBoostMode+0x1f8>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d004      	beq.n	8005858 <ADC_ConfigureBoostMode+0x1c>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a79      	ldr	r2, [pc, #484]	; (8005a38 <ADC_ConfigureBoostMode+0x1fc>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d109      	bne.n	800586c <ADC_ConfigureBoostMode+0x30>
 8005858:	4b78      	ldr	r3, [pc, #480]	; (8005a3c <ADC_ConfigureBoostMode+0x200>)
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005860:	2b00      	cmp	r3, #0
 8005862:	bf14      	ite	ne
 8005864:	2301      	movne	r3, #1
 8005866:	2300      	moveq	r3, #0
 8005868:	b2db      	uxtb	r3, r3
 800586a:	e008      	b.n	800587e <ADC_ConfigureBoostMode+0x42>
 800586c:	4b74      	ldr	r3, [pc, #464]	; (8005a40 <ADC_ConfigureBoostMode+0x204>)
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005874:	2b00      	cmp	r3, #0
 8005876:	bf14      	ite	ne
 8005878:	2301      	movne	r3, #1
 800587a:	2300      	moveq	r3, #0
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d01c      	beq.n	80058bc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005882:	f005 f89b 	bl	800a9bc <HAL_RCC_GetHCLKFreq>
 8005886:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005890:	d010      	beq.n	80058b4 <ADC_ConfigureBoostMode+0x78>
 8005892:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005896:	d873      	bhi.n	8005980 <ADC_ConfigureBoostMode+0x144>
 8005898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800589c:	d002      	beq.n	80058a4 <ADC_ConfigureBoostMode+0x68>
 800589e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058a2:	d16d      	bne.n	8005980 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	0c1b      	lsrs	r3, r3, #16
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b0:	60fb      	str	r3, [r7, #12]
        break;
 80058b2:	e068      	b.n	8005986 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	089b      	lsrs	r3, r3, #2
 80058b8:	60fb      	str	r3, [r7, #12]
        break;
 80058ba:	e064      	b.n	8005986 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80058bc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80058c0:	f04f 0100 	mov.w	r1, #0
 80058c4:	f006 fafc 	bl	800bec0 <HAL_RCCEx_GetPeriphCLKFreq>
 80058c8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80058d2:	d051      	beq.n	8005978 <ADC_ConfigureBoostMode+0x13c>
 80058d4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80058d8:	d854      	bhi.n	8005984 <ADC_ConfigureBoostMode+0x148>
 80058da:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80058de:	d047      	beq.n	8005970 <ADC_ConfigureBoostMode+0x134>
 80058e0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80058e4:	d84e      	bhi.n	8005984 <ADC_ConfigureBoostMode+0x148>
 80058e6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80058ea:	d03d      	beq.n	8005968 <ADC_ConfigureBoostMode+0x12c>
 80058ec:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80058f0:	d848      	bhi.n	8005984 <ADC_ConfigureBoostMode+0x148>
 80058f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058f6:	d033      	beq.n	8005960 <ADC_ConfigureBoostMode+0x124>
 80058f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058fc:	d842      	bhi.n	8005984 <ADC_ConfigureBoostMode+0x148>
 80058fe:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005902:	d029      	beq.n	8005958 <ADC_ConfigureBoostMode+0x11c>
 8005904:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005908:	d83c      	bhi.n	8005984 <ADC_ConfigureBoostMode+0x148>
 800590a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800590e:	d01a      	beq.n	8005946 <ADC_ConfigureBoostMode+0x10a>
 8005910:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005914:	d836      	bhi.n	8005984 <ADC_ConfigureBoostMode+0x148>
 8005916:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800591a:	d014      	beq.n	8005946 <ADC_ConfigureBoostMode+0x10a>
 800591c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005920:	d830      	bhi.n	8005984 <ADC_ConfigureBoostMode+0x148>
 8005922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005926:	d00e      	beq.n	8005946 <ADC_ConfigureBoostMode+0x10a>
 8005928:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800592c:	d82a      	bhi.n	8005984 <ADC_ConfigureBoostMode+0x148>
 800592e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005932:	d008      	beq.n	8005946 <ADC_ConfigureBoostMode+0x10a>
 8005934:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005938:	d824      	bhi.n	8005984 <ADC_ConfigureBoostMode+0x148>
 800593a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800593e:	d002      	beq.n	8005946 <ADC_ConfigureBoostMode+0x10a>
 8005940:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005944:	d11e      	bne.n	8005984 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	0c9b      	lsrs	r3, r3, #18
 800594c:	005b      	lsls	r3, r3, #1
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	fbb2 f3f3 	udiv	r3, r2, r3
 8005954:	60fb      	str	r3, [r7, #12]
        break;
 8005956:	e016      	b.n	8005986 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	091b      	lsrs	r3, r3, #4
 800595c:	60fb      	str	r3, [r7, #12]
        break;
 800595e:	e012      	b.n	8005986 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	095b      	lsrs	r3, r3, #5
 8005964:	60fb      	str	r3, [r7, #12]
        break;
 8005966:	e00e      	b.n	8005986 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	099b      	lsrs	r3, r3, #6
 800596c:	60fb      	str	r3, [r7, #12]
        break;
 800596e:	e00a      	b.n	8005986 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	09db      	lsrs	r3, r3, #7
 8005974:	60fb      	str	r3, [r7, #12]
        break;
 8005976:	e006      	b.n	8005986 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	0a1b      	lsrs	r3, r3, #8
 800597c:	60fb      	str	r3, [r7, #12]
        break;
 800597e:	e002      	b.n	8005986 <ADC_ConfigureBoostMode+0x14a>
        break;
 8005980:	bf00      	nop
 8005982:	e000      	b.n	8005986 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005984:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005986:	f7fe fb91 	bl	80040ac <HAL_GetREVID>
 800598a:	4603      	mov	r3, r0
 800598c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005990:	4293      	cmp	r3, r2
 8005992:	d815      	bhi.n	80059c0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4a2b      	ldr	r2, [pc, #172]	; (8005a44 <ADC_ConfigureBoostMode+0x208>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d908      	bls.n	80059ae <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689a      	ldr	r2, [r3, #8]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059aa:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80059ac:	e03e      	b.n	8005a2c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	689a      	ldr	r2, [r3, #8]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059bc:	609a      	str	r2, [r3, #8]
}
 80059be:	e035      	b.n	8005a2c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	085b      	lsrs	r3, r3, #1
 80059c4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4a1f      	ldr	r2, [pc, #124]	; (8005a48 <ADC_ConfigureBoostMode+0x20c>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d808      	bhi.n	80059e0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	689a      	ldr	r2, [r3, #8]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80059dc:	609a      	str	r2, [r3, #8]
}
 80059de:	e025      	b.n	8005a2c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	4a1a      	ldr	r2, [pc, #104]	; (8005a4c <ADC_ConfigureBoostMode+0x210>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d80a      	bhi.n	80059fe <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059fa:	609a      	str	r2, [r3, #8]
}
 80059fc:	e016      	b.n	8005a2c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	4a13      	ldr	r2, [pc, #76]	; (8005a50 <ADC_ConfigureBoostMode+0x214>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d80a      	bhi.n	8005a1c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a18:	609a      	str	r2, [r3, #8]
}
 8005a1a:	e007      	b.n	8005a2c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689a      	ldr	r2, [r3, #8]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005a2a:	609a      	str	r2, [r3, #8]
}
 8005a2c:	bf00      	nop
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	40022000 	.word	0x40022000
 8005a38:	40022100 	.word	0x40022100
 8005a3c:	40022300 	.word	0x40022300
 8005a40:	58026300 	.word	0x58026300
 8005a44:	01312d00 	.word	0x01312d00
 8005a48:	005f5e10 	.word	0x005f5e10
 8005a4c:	00bebc20 	.word	0x00bebc20
 8005a50:	017d7840 	.word	0x017d7840

08005a54 <LL_ADC_StartCalibration>:
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	689a      	ldr	r2, [r3, #8]
 8005a64:	4b09      	ldr	r3, [pc, #36]	; (8005a8c <LL_ADC_StartCalibration+0x38>)
 8005a66:	4013      	ands	r3, r2
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005a74:	430a      	orrs	r2, r1
 8005a76:	4313      	orrs	r3, r2
 8005a78:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	609a      	str	r2, [r3, #8]
}
 8005a80:	bf00      	nop
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	3ffeffc0 	.word	0x3ffeffc0

08005a90 <LL_ADC_IsCalibrationOnGoing>:
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005aa0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005aa4:	d101      	bne.n	8005aaa <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e000      	b.n	8005aac <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d101      	bne.n	8005ad6 <HAL_ADCEx_Calibration_Start+0x1e>
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	e04c      	b.n	8005b70 <HAL_ADCEx_Calibration_Start+0xb8>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f7ff fe4c 	bl	800577c <ADC_Disable>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005ae8:	7dfb      	ldrb	r3, [r7, #23]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d135      	bne.n	8005b5a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005af2:	4b21      	ldr	r3, [pc, #132]	; (8005b78 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005af4:	4013      	ands	r3, r2
 8005af6:	f043 0202 	orr.w	r2, r3, #2
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	68b9      	ldr	r1, [r7, #8]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7ff ffa4 	bl	8005a54 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005b0c:	e014      	b.n	8005b38 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	3301      	adds	r3, #1
 8005b12:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	4a19      	ldr	r2, [pc, #100]	; (8005b7c <HAL_ADCEx_Calibration_Start+0xc4>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d30d      	bcc.n	8005b38 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b20:	f023 0312 	bic.w	r3, r3, #18
 8005b24:	f043 0210 	orr.w	r2, r3, #16
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e01b      	b.n	8005b70 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7ff ffa7 	bl	8005a90 <LL_ADC_IsCalibrationOnGoing>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1e2      	bne.n	8005b0e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b4c:	f023 0303 	bic.w	r3, r3, #3
 8005b50:	f043 0201 	orr.w	r2, r3, #1
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	655a      	str	r2, [r3, #84]	; 0x54
 8005b58:	e005      	b.n	8005b66 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b5e:	f043 0210 	orr.w	r2, r3, #16
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3718      	adds	r7, #24
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	ffffeefd 	.word	0xffffeefd
 8005b7c:	25c3f800 	.word	0x25c3f800

08005b80 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <__NVIC_SetPriorityGrouping>:
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f003 0307 	and.w	r3, r3, #7
 8005bf2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005bf4:	4b0b      	ldr	r3, [pc, #44]	; (8005c24 <__NVIC_SetPriorityGrouping+0x40>)
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c00:	4013      	ands	r3, r2
 8005c02:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005c0c:	4b06      	ldr	r3, [pc, #24]	; (8005c28 <__NVIC_SetPriorityGrouping+0x44>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c12:	4a04      	ldr	r2, [pc, #16]	; (8005c24 <__NVIC_SetPriorityGrouping+0x40>)
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	60d3      	str	r3, [r2, #12]
}
 8005c18:	bf00      	nop
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr
 8005c24:	e000ed00 	.word	0xe000ed00
 8005c28:	05fa0000 	.word	0x05fa0000

08005c2c <__NVIC_GetPriorityGrouping>:
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c30:	4b04      	ldr	r3, [pc, #16]	; (8005c44 <__NVIC_GetPriorityGrouping+0x18>)
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	0a1b      	lsrs	r3, r3, #8
 8005c36:	f003 0307 	and.w	r3, r3, #7
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr
 8005c44:	e000ed00 	.word	0xe000ed00

08005c48 <__NVIC_EnableIRQ>:
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	4603      	mov	r3, r0
 8005c50:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005c52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	db0b      	blt.n	8005c72 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c5a:	88fb      	ldrh	r3, [r7, #6]
 8005c5c:	f003 021f 	and.w	r2, r3, #31
 8005c60:	4907      	ldr	r1, [pc, #28]	; (8005c80 <__NVIC_EnableIRQ+0x38>)
 8005c62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c66:	095b      	lsrs	r3, r3, #5
 8005c68:	2001      	movs	r0, #1
 8005c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8005c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005c72:	bf00      	nop
 8005c74:	370c      	adds	r7, #12
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	e000e100 	.word	0xe000e100

08005c84 <__NVIC_SetPriority>:
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	6039      	str	r1, [r7, #0]
 8005c8e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005c90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	db0a      	blt.n	8005cae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	b2da      	uxtb	r2, r3
 8005c9c:	490c      	ldr	r1, [pc, #48]	; (8005cd0 <__NVIC_SetPriority+0x4c>)
 8005c9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ca2:	0112      	lsls	r2, r2, #4
 8005ca4:	b2d2      	uxtb	r2, r2
 8005ca6:	440b      	add	r3, r1
 8005ca8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005cac:	e00a      	b.n	8005cc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	4908      	ldr	r1, [pc, #32]	; (8005cd4 <__NVIC_SetPriority+0x50>)
 8005cb4:	88fb      	ldrh	r3, [r7, #6]
 8005cb6:	f003 030f 	and.w	r3, r3, #15
 8005cba:	3b04      	subs	r3, #4
 8005cbc:	0112      	lsls	r2, r2, #4
 8005cbe:	b2d2      	uxtb	r2, r2
 8005cc0:	440b      	add	r3, r1
 8005cc2:	761a      	strb	r2, [r3, #24]
}
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr
 8005cd0:	e000e100 	.word	0xe000e100
 8005cd4:	e000ed00 	.word	0xe000ed00

08005cd8 <NVIC_EncodePriority>:
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b089      	sub	sp, #36	; 0x24
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f003 0307 	and.w	r3, r3, #7
 8005cea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	f1c3 0307 	rsb	r3, r3, #7
 8005cf2:	2b04      	cmp	r3, #4
 8005cf4:	bf28      	it	cs
 8005cf6:	2304      	movcs	r3, #4
 8005cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	3304      	adds	r3, #4
 8005cfe:	2b06      	cmp	r3, #6
 8005d00:	d902      	bls.n	8005d08 <NVIC_EncodePriority+0x30>
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	3b03      	subs	r3, #3
 8005d06:	e000      	b.n	8005d0a <NVIC_EncodePriority+0x32>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	fa02 f303 	lsl.w	r3, r2, r3
 8005d16:	43da      	mvns	r2, r3
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	401a      	ands	r2, r3
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d20:	f04f 31ff 	mov.w	r1, #4294967295
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	fa01 f303 	lsl.w	r3, r1, r3
 8005d2a:	43d9      	mvns	r1, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d30:	4313      	orrs	r3, r2
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3724      	adds	r7, #36	; 0x24
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
	...

08005d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d50:	d301      	bcc.n	8005d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005d52:	2301      	movs	r3, #1
 8005d54:	e00f      	b.n	8005d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d56:	4a0a      	ldr	r2, [pc, #40]	; (8005d80 <SysTick_Config+0x40>)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005d5e:	210f      	movs	r1, #15
 8005d60:	f04f 30ff 	mov.w	r0, #4294967295
 8005d64:	f7ff ff8e 	bl	8005c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d68:	4b05      	ldr	r3, [pc, #20]	; (8005d80 <SysTick_Config+0x40>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d6e:	4b04      	ldr	r3, [pc, #16]	; (8005d80 <SysTick_Config+0x40>)
 8005d70:	2207      	movs	r2, #7
 8005d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3708      	adds	r7, #8
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	e000e010 	.word	0xe000e010

08005d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f7ff ff29 	bl	8005be4 <__NVIC_SetPriorityGrouping>
}
 8005d92:	bf00      	nop
 8005d94:	3708      	adds	r7, #8
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b086      	sub	sp, #24
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	4603      	mov	r3, r0
 8005da2:	60b9      	str	r1, [r7, #8]
 8005da4:	607a      	str	r2, [r7, #4]
 8005da6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005da8:	f7ff ff40 	bl	8005c2c <__NVIC_GetPriorityGrouping>
 8005dac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	68b9      	ldr	r1, [r7, #8]
 8005db2:	6978      	ldr	r0, [r7, #20]
 8005db4:	f7ff ff90 	bl	8005cd8 <NVIC_EncodePriority>
 8005db8:	4602      	mov	r2, r0
 8005dba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005dbe:	4611      	mov	r1, r2
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7ff ff5f 	bl	8005c84 <__NVIC_SetPriority>
}
 8005dc6:	bf00      	nop
 8005dc8:	3718      	adds	r7, #24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b082      	sub	sp, #8
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005dd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7ff ff33 	bl	8005c48 <__NVIC_EnableIRQ>
}
 8005de2:	bf00      	nop
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b082      	sub	sp, #8
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f7ff ffa4 	bl	8005d40 <SysTick_Config>
 8005df8:	4603      	mov	r3, r0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3708      	adds	r7, #8
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
	...

08005e04 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005e04:	b480      	push	{r7}
 8005e06:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8005e08:	f3bf 8f5f 	dmb	sy
}
 8005e0c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005e0e:	4b07      	ldr	r3, [pc, #28]	; (8005e2c <HAL_MPU_Disable+0x28>)
 8005e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e12:	4a06      	ldr	r2, [pc, #24]	; (8005e2c <HAL_MPU_Disable+0x28>)
 8005e14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e18:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8005e1a:	4b05      	ldr	r3, [pc, #20]	; (8005e30 <HAL_MPU_Disable+0x2c>)
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	605a      	str	r2, [r3, #4]
}
 8005e20:	bf00      	nop
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	e000ed00 	.word	0xe000ed00
 8005e30:	e000ed90 	.word	0xe000ed90

08005e34 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005e3c:	4a0b      	ldr	r2, [pc, #44]	; (8005e6c <HAL_MPU_Enable+0x38>)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f043 0301 	orr.w	r3, r3, #1
 8005e44:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005e46:	4b0a      	ldr	r3, [pc, #40]	; (8005e70 <HAL_MPU_Enable+0x3c>)
 8005e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4a:	4a09      	ldr	r2, [pc, #36]	; (8005e70 <HAL_MPU_Enable+0x3c>)
 8005e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e50:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005e52:	f3bf 8f4f 	dsb	sy
}
 8005e56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005e58:	f3bf 8f6f 	isb	sy
}
 8005e5c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005e5e:	bf00      	nop
 8005e60:	370c      	adds	r7, #12
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	e000ed90 	.word	0xe000ed90
 8005e70:	e000ed00 	.word	0xe000ed00

08005e74 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	785a      	ldrb	r2, [r3, #1]
 8005e80:	4b1d      	ldr	r3, [pc, #116]	; (8005ef8 <HAL_MPU_ConfigRegion+0x84>)
 8005e82:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d029      	beq.n	8005ee0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8005e8c:	4a1a      	ldr	r2, [pc, #104]	; (8005ef8 <HAL_MPU_ConfigRegion+0x84>)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	7b1b      	ldrb	r3, [r3, #12]
 8005e98:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	7adb      	ldrb	r3, [r3, #11]
 8005e9e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005ea0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	7a9b      	ldrb	r3, [r3, #10]
 8005ea6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005ea8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	7b5b      	ldrb	r3, [r3, #13]
 8005eae:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005eb0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	7b9b      	ldrb	r3, [r3, #14]
 8005eb6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005eb8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	7bdb      	ldrb	r3, [r3, #15]
 8005ebe:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005ec0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	7a5b      	ldrb	r3, [r3, #9]
 8005ec6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005ec8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	7a1b      	ldrb	r3, [r3, #8]
 8005ece:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005ed0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	7812      	ldrb	r2, [r2, #0]
 8005ed6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005ed8:	4a07      	ldr	r2, [pc, #28]	; (8005ef8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005eda:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005edc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8005ede:	e005      	b.n	8005eec <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8005ee0:	4b05      	ldr	r3, [pc, #20]	; (8005ef8 <HAL_MPU_ConfigRegion+0x84>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8005ee6:	4b04      	ldr	r3, [pc, #16]	; (8005ef8 <HAL_MPU_ConfigRegion+0x84>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	611a      	str	r2, [r3, #16]
}
 8005eec:	bf00      	nop
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr
 8005ef8:	e000ed90 	.word	0xe000ed90

08005efc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d101      	bne.n	8005f0e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e014      	b.n	8005f38 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	791b      	ldrb	r3, [r3, #4]
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d105      	bne.n	8005f24 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7fd fa94 	bl	800344c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2202      	movs	r2, #2
 8005f28:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3708      	adds	r7, #8
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	795b      	ldrb	r3, [r3, #5]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d101      	bne.n	8005f56 <HAL_DAC_Start+0x16>
 8005f52:	2302      	movs	r3, #2
 8005f54:	e040      	b.n	8005fd8 <HAL_DAC_Start+0x98>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2202      	movs	r2, #2
 8005f60:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	6819      	ldr	r1, [r3, #0]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	f003 0310 	and.w	r3, r3, #16
 8005f6e:	2201      	movs	r2, #1
 8005f70:	409a      	lsls	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	430a      	orrs	r2, r1
 8005f78:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10f      	bne.n	8005fa0 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d11d      	bne.n	8005fca <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	685a      	ldr	r2, [r3, #4]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f042 0201 	orr.w	r2, r2, #1
 8005f9c:	605a      	str	r2, [r3, #4]
 8005f9e:	e014      	b.n	8005fca <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	f003 0310 	and.w	r3, r3, #16
 8005fb0:	2102      	movs	r1, #2
 8005fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d107      	bne.n	8005fca <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	685a      	ldr	r2, [r3, #4]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f042 0202 	orr.w	r2, r2, #2
 8005fc8:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b087      	sub	sp, #28
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
 8005ff0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d105      	bne.n	800600e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4413      	add	r3, r2
 8006008:	3308      	adds	r3, #8
 800600a:	617b      	str	r3, [r7, #20]
 800600c:	e004      	b.n	8006018 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4413      	add	r3, r2
 8006014:	3314      	adds	r3, #20
 8006016:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	461a      	mov	r2, r3
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	371c      	adds	r7, #28
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
	...

08006030 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b088      	sub	sp, #32
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	795b      	ldrb	r3, [r3, #5]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d101      	bne.n	8006048 <HAL_DAC_ConfigChannel+0x18>
 8006044:	2302      	movs	r3, #2
 8006046:	e12a      	b.n	800629e <HAL_DAC_ConfigChannel+0x26e>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2201      	movs	r2, #1
 800604c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2202      	movs	r2, #2
 8006052:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2b04      	cmp	r3, #4
 800605a:	f040 8081 	bne.w	8006160 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800605e:	f7fd fff5 	bl	800404c <HAL_GetTick>
 8006062:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d140      	bne.n	80060ec <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800606a:	e018      	b.n	800609e <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800606c:	f7fd ffee 	bl	800404c <HAL_GetTick>
 8006070:	4602      	mov	r2, r0
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	2b01      	cmp	r3, #1
 8006078:	d911      	bls.n	800609e <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006080:	4b89      	ldr	r3, [pc, #548]	; (80062a8 <HAL_DAC_ConfigChannel+0x278>)
 8006082:	4013      	ands	r3, r2
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00a      	beq.n	800609e <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	f043 0208 	orr.w	r2, r3, #8
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2203      	movs	r2, #3
 8006098:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e0ff      	b.n	800629e <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060a4:	4b80      	ldr	r3, [pc, #512]	; (80062a8 <HAL_DAC_ConfigChannel+0x278>)
 80060a6:	4013      	ands	r3, r2
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1df      	bne.n	800606c <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 80060ac:	2001      	movs	r0, #1
 80060ae:	f7fd ffd9 	bl	8004064 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68ba      	ldr	r2, [r7, #8]
 80060b8:	6992      	ldr	r2, [r2, #24]
 80060ba:	641a      	str	r2, [r3, #64]	; 0x40
 80060bc:	e023      	b.n	8006106 <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80060be:	f7fd ffc5 	bl	800404c <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d90f      	bls.n	80060ec <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	da0a      	bge.n	80060ec <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	f043 0208 	orr.w	r2, r3, #8
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2203      	movs	r2, #3
 80060e6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e0d8      	b.n	800629e <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	dbe3      	blt.n	80060be <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 80060f6:	2001      	movs	r0, #1
 80060f8:	f7fd ffb4 	bl	8004064 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68ba      	ldr	r2, [r7, #8]
 8006102:	6992      	ldr	r2, [r2, #24]
 8006104:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f003 0310 	and.w	r3, r3, #16
 8006112:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006116:	fa01 f303 	lsl.w	r3, r1, r3
 800611a:	43db      	mvns	r3, r3
 800611c:	ea02 0103 	and.w	r1, r2, r3
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	69da      	ldr	r2, [r3, #28]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f003 0310 	and.w	r3, r3, #16
 800612a:	409a      	lsls	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	430a      	orrs	r2, r1
 8006132:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f003 0310 	and.w	r3, r3, #16
 8006140:	21ff      	movs	r1, #255	; 0xff
 8006142:	fa01 f303 	lsl.w	r3, r1, r3
 8006146:	43db      	mvns	r3, r3
 8006148:	ea02 0103 	and.w	r1, r2, r3
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	6a1a      	ldr	r2, [r3, #32]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f003 0310 	and.w	r3, r3, #16
 8006156:	409a      	lsls	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	430a      	orrs	r2, r1
 800615e:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d11d      	bne.n	80061a4 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616e:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f003 0310 	and.w	r3, r3, #16
 8006176:	221f      	movs	r2, #31
 8006178:	fa02 f303 	lsl.w	r3, r2, r3
 800617c:	43db      	mvns	r3, r3
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	4013      	ands	r3, r2
 8006182:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	695b      	ldr	r3, [r3, #20]
 8006188:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f003 0310 	and.w	r3, r3, #16
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	fa02 f303 	lsl.w	r3, r2, r3
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	4313      	orrs	r3, r2
 800619a:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061aa:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f003 0310 	and.w	r3, r3, #16
 80061b2:	2207      	movs	r2, #7
 80061b4:	fa02 f303 	lsl.w	r3, r2, r3
 80061b8:	43db      	mvns	r3, r3
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	4013      	ands	r3, r2
 80061be:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d102      	bne.n	80061ce <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 80061c8:	2300      	movs	r3, #0
 80061ca:	61fb      	str	r3, [r7, #28]
 80061cc:	e00f      	b.n	80061ee <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d102      	bne.n	80061dc <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80061d6:	2301      	movs	r3, #1
 80061d8:	61fb      	str	r3, [r7, #28]
 80061da:	e008      	b.n	80061ee <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d102      	bne.n	80061ea <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80061e4:	2301      	movs	r3, #1
 80061e6:	61fb      	str	r3, [r7, #28]
 80061e8:	e001      	b.n	80061ee <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80061ea:	2300      	movs	r3, #0
 80061ec:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	69fa      	ldr	r2, [r7, #28]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f003 0310 	and.w	r3, r3, #16
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	fa02 f303 	lsl.w	r3, r2, r3
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	4313      	orrs	r3, r2
 800620e:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	697a      	ldr	r2, [r7, #20]
 8006216:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6819      	ldr	r1, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f003 0310 	and.w	r3, r3, #16
 8006224:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006228:	fa02 f303 	lsl.w	r3, r2, r3
 800622c:	43da      	mvns	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	400a      	ands	r2, r1
 8006234:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f003 0310 	and.w	r3, r3, #16
 8006244:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006248:	fa02 f303 	lsl.w	r3, r2, r3
 800624c:	43db      	mvns	r3, r3
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	4013      	ands	r3, r2
 8006252:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f003 0310 	and.w	r3, r3, #16
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	fa02 f303 	lsl.w	r3, r2, r3
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	4313      	orrs	r3, r2
 800626a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6819      	ldr	r1, [r3, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f003 0310 	and.w	r3, r3, #16
 8006280:	22c0      	movs	r2, #192	; 0xc0
 8006282:	fa02 f303 	lsl.w	r3, r2, r3
 8006286:	43da      	mvns	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	400a      	ands	r2, r1
 800628e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2201      	movs	r2, #1
 8006294:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2200      	movs	r2, #0
 800629a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3720      	adds	r7, #32
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	20008000 	.word	0x20008000

080062ac <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e0cf      	b.n	800645e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d106      	bne.n	80062d6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2223      	movs	r2, #35	; 0x23
 80062cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f009 f851 	bl	800f378 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062d6:	4b64      	ldr	r3, [pc, #400]	; (8006468 <HAL_ETH_Init+0x1bc>)
 80062d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80062dc:	4a62      	ldr	r2, [pc, #392]	; (8006468 <HAL_ETH_Init+0x1bc>)
 80062de:	f043 0302 	orr.w	r3, r3, #2
 80062e2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80062e6:	4b60      	ldr	r3, [pc, #384]	; (8006468 <HAL_ETH_Init+0x1bc>)
 80062e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80062ec:	f003 0302 	and.w	r3, r3, #2
 80062f0:	60bb      	str	r3, [r7, #8]
 80062f2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	7a1b      	ldrb	r3, [r3, #8]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d103      	bne.n	8006304 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80062fc:	2000      	movs	r0, #0
 80062fe:	f7fd fee1 	bl	80040c4 <HAL_SYSCFG_ETHInterfaceSelect>
 8006302:	e003      	b.n	800630c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8006304:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006308:	f7fd fedc 	bl	80040c4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800630c:	4b57      	ldr	r3, [pc, #348]	; (800646c <HAL_ETH_Init+0x1c0>)
 800630e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	6812      	ldr	r2, [r2, #0]
 800631e:	f043 0301 	orr.w	r3, r3, #1
 8006322:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006326:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006328:	f7fd fe90 	bl	800404c <HAL_GetTick>
 800632c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800632e:	e011      	b.n	8006354 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8006330:	f7fd fe8c 	bl	800404c <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800633e:	d909      	bls.n	8006354 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2204      	movs	r2, #4
 8006344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	22e0      	movs	r2, #224	; 0xe0
 800634c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e084      	b.n	800645e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1e4      	bne.n	8006330 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fcd4 	bl	8006d14 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800636c:	f004 fb26 	bl	800a9bc <HAL_RCC_GetHCLKFreq>
 8006370:	4603      	mov	r3, r0
 8006372:	4a3f      	ldr	r2, [pc, #252]	; (8006470 <HAL_ETH_Init+0x1c4>)
 8006374:	fba2 2303 	umull	r2, r3, r2, r3
 8006378:	0c9a      	lsrs	r2, r3, #18
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	3a01      	subs	r2, #1
 8006380:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 febf 	bl	8007108 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006392:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8006396:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	6812      	ldr	r2, [r2, #0]
 800639e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80063a6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	f003 0303 	and.w	r3, r3, #3
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d009      	beq.n	80063ca <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	22e0      	movs	r2, #224	; 0xe0
 80063c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e049      	b.n	800645e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063d2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80063d6:	4b27      	ldr	r3, [pc, #156]	; (8006474 <HAL_ETH_Init+0x1c8>)
 80063d8:	4013      	ands	r3, r2
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	6952      	ldr	r2, [r2, #20]
 80063de:	0051      	lsls	r1, r2, #1
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	6812      	ldr	r2, [r2, #0]
 80063e4:	430b      	orrs	r3, r1
 80063e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80063ea:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 ff27 	bl	8007242 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 ff6d 	bl	80072d4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	3305      	adds	r3, #5
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	021a      	lsls	r2, r3, #8
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	3304      	adds	r3, #4
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	4619      	mov	r1, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	430a      	orrs	r2, r1
 8006414:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	3303      	adds	r3, #3
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	061a      	lsls	r2, r3, #24
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	3302      	adds	r3, #2
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	041b      	lsls	r3, r3, #16
 800642c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	3301      	adds	r3, #1
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006438:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006446:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006448:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2210      	movs	r2, #16
 8006458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	58024400 	.word	0x58024400
 800646c:	58000400 	.word	0x58000400
 8006470:	431bde83 	.word	0x431bde83
 8006474:	ffff8001 	.word	0xffff8001

08006478 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006486:	2b10      	cmp	r3, #16
 8006488:	d153      	bne.n	8006532 <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2223      	movs	r2, #35	; 0x23
 800648e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2204      	movs	r2, #4
 8006496:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 f936 	bl	800670a <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f042 0202 	orr.w	r2, r2, #2
 80064ac:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f042 0201 	orr.w	r2, r2, #1
 80064bc:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f042 0201 	orr.w	r2, r2, #1
 80064ce:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064da:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	6812      	ldr	r2, [r2, #0]
 80064e2:	f043 0301 	orr.w	r3, r3, #1
 80064e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80064ea:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	6812      	ldr	r2, [r2, #0]
 80064fe:	f043 0301 	orr.w	r3, r3, #1
 8006502:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006506:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006512:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	6812      	ldr	r2, [r2, #0]
 800651a:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 800651e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006522:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2223      	movs	r2, #35	; 0x23
 800652a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800652e:	2300      	movs	r3, #0
 8006530:	e000      	b.n	8006534 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
  }
}
 8006534:	4618      	mov	r0, r3
 8006536:	3708      	adds	r7, #8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800654a:	2b23      	cmp	r3, #35	; 0x23
 800654c:	d13f      	bne.n	80065ce <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2223      	movs	r2, #35	; 0x23
 8006552:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800655e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	6812      	ldr	r2, [r2, #0]
 8006566:	f023 0301 	bic.w	r3, r3, #1
 800656a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800656e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800657a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	6812      	ldr	r2, [r2, #0]
 8006582:	f023 0301 	bic.w	r3, r3, #1
 8006586:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800658a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f022 0201 	bic.w	r2, r2, #1
 800659c:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f042 0201 	orr.w	r2, r2, #1
 80065ae:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f022 0202 	bic.w	r2, r2, #2
 80065c0:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2210      	movs	r2, #16
 80065c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80065ca:	2300      	movs	r3, #0
 80065cc:	e000      	b.n	80065d0 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
  }
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b086      	sub	sp, #24
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d109      	bne.n	8006602 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f4:	f043 0201 	orr.w	r2, r3, #1
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e07f      	b.n	8006702 <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006608:	2b23      	cmp	r3, #35	; 0x23
 800660a:	d179      	bne.n	8006700 <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 800660c:	2200      	movs	r2, #0
 800660e:	68b9      	ldr	r1, [r7, #8]
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f000 febd 	bl	8007390 <ETH_Prepare_Tx_Descriptors>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d009      	beq.n	8006630 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006622:	f043 0202 	orr.w	r2, r3, #2
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e068      	b.n	8006702 <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8006630:	f3bf 8f4f 	dsb	sy
}
 8006634:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	3206      	adds	r2, #6
 800663e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006642:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006648:	1c5a      	adds	r2, r3, #1
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	629a      	str	r2, [r3, #40]	; 0x28
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006652:	2b03      	cmp	r3, #3
 8006654:	d904      	bls.n	8006660 <HAL_ETH_Transmit+0x84>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800665a:	1f1a      	subs	r2, r3, #4
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	3106      	adds	r1, #6
 800666c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006670:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006674:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    tickstart = HAL_GetTick();
 8006678:	f7fd fce8 	bl	800404c <HAL_GetTick>
 800667c:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 800667e:	e039      	b.n	80066f4 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006688:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800668c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d012      	beq.n	80066ba <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800669a:	f043 0208 	orr.w	r2, r3, #8
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066ac:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e023      	b.n	8006702 <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c0:	d018      	beq.n	80066f4 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80066c2:	f7fd fcc3 	bl	800404c <HAL_GetTick>
 80066c6:	4602      	mov	r2, r0
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d302      	bcc.n	80066d8 <HAL_ETH_Transmit+0xfc>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10d      	bne.n	80066f4 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066de:	f043 0204 	orr.w	r2, r3, #4
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80066ee:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e006      	b.n	8006702 <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	dbc1      	blt.n	8006680 <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80066fc:	2300      	movs	r3, #0
 80066fe:	e000      	b.n	8006702 <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
  }
}
 8006702:	4618      	mov	r0, r3
 8006704:	3718      	adds	r7, #24
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800670a:	b580      	push	{r7, lr}
 800670c:	b088      	sub	sp, #32
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8006712:	2300      	movs	r3, #0
 8006714:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8006716:	2301      	movs	r3, #1
 8006718:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800671e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	69fa      	ldr	r2, [r7, #28]
 8006724:	3212      	adds	r2, #18
 8006726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800672a:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006730:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8006732:	e03b      	b.n	80067ac <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d112      	bne.n	8006762 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800673c:	f107 030c 	add.w	r3, r7, #12
 8006740:	4618      	mov	r0, r3
 8006742:	f008 ffc1 	bl	800f6c8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d102      	bne.n	8006752 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800674c:	2300      	movs	r3, #0
 800674e:	74fb      	strb	r3, [r7, #19]
 8006750:	e007      	b.n	8006762 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	461a      	mov	r2, r3
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	461a      	mov	r2, r3
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8006762:	7cfb      	ldrb	r3, [r7, #19]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d021      	beq.n	80067ac <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8006768:	f3bf 8f5f 	dmb	sy
}
 800676c:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006772:	2b00      	cmp	r3, #0
 8006774:	d004      	beq.n	8006780 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 800677c:	60da      	str	r2, [r3, #12]
 800677e:	e003      	b.n	8006788 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8006786:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	3301      	adds	r3, #1
 800678c:	61fb      	str	r3, [r7, #28]
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	2b03      	cmp	r3, #3
 8006792:	d902      	bls.n	800679a <ETH_UpdateDescriptor+0x90>
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	3b04      	subs	r3, #4
 8006798:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	69fa      	ldr	r2, [r7, #28]
 800679e:	3212      	adds	r2, #18
 80067a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067a4:	617b      	str	r3, [r7, #20]
      desccount--;
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	3b01      	subs	r3, #1
 80067aa:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d002      	beq.n	80067b8 <ETH_UpdateDescriptor+0xae>
 80067b2:	7cfb      	ldrb	r3, [r7, #19]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1bd      	bne.n	8006734 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067bc:	69ba      	ldr	r2, [r7, #24]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d00d      	beq.n	80067de <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067ca:	461a      	mov	r2, r3
 80067cc:	2300      	movs	r3, #0
 80067ce:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	69fa      	ldr	r2, [r7, #28]
 80067d6:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	69ba      	ldr	r2, [r7, #24]
 80067dc:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80067de:	bf00      	nop
 80067e0:	3720      	adds	r7, #32
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b086      	sub	sp, #24
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	60f8      	str	r0, [r7, #12]
 80067ee:	60b9      	str	r1, [r7, #8]
 80067f0:	607a      	str	r2, [r7, #4]
 80067f2:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80067fc:	f003 0301 	and.w	r3, r3, #1
 8006800:	2b00      	cmp	r3, #0
 8006802:	d001      	beq.n	8006808 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e03e      	b.n	8006886 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006810:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	055b      	lsls	r3, r3, #21
 800681c:	4313      	orrs	r3, r2
 800681e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	041b      	lsls	r3, r3, #16
 800682a:	4313      	orrs	r3, r2
 800682c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f043 030c 	orr.w	r3, r3, #12
 8006834:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	f043 0301 	orr.w	r3, r3, #1
 800683c:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	697a      	ldr	r2, [r7, #20]
 8006844:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8006848:	f7fd fc00 	bl	800404c <HAL_GetTick>
 800684c:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800684e:	e009      	b.n	8006864 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8006850:	f7fd fbfc 	bl	800404c <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800685e:	d901      	bls.n	8006864 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e010      	b.n	8006886 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800686c:	f003 0301 	and.w	r3, r3, #1
 8006870:	2b00      	cmp	r3, #0
 8006872:	d1ed      	bne.n	8006850 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800687c:	b29b      	uxth	r3, r3
 800687e:	461a      	mov	r2, r3
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3718      	adds	r7, #24
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
	...

08006890 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]
 800689c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d001      	beq.n	80068b2 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e03c      	b.n	800692c <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80068ba:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	055b      	lsls	r3, r3, #21
 80068c6:	4313      	orrs	r3, r2
 80068c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	041b      	lsls	r3, r3, #16
 80068d4:	4313      	orrs	r3, r2
 80068d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	f023 030c 	bic.w	r3, r3, #12
 80068de:	f043 0304 	orr.w	r3, r3, #4
 80068e2:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	f043 0301 	orr.w	r3, r3, #1
 80068ea:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	4b10      	ldr	r3, [pc, #64]	; (8006934 <HAL_ETH_WritePHYRegister+0xa4>)
 80068f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80068f6:	4a0f      	ldr	r2, [pc, #60]	; (8006934 <HAL_ETH_WritePHYRegister+0xa4>)
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 80068fe:	f7fd fba5 	bl	800404c <HAL_GetTick>
 8006902:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006904:	e009      	b.n	800691a <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8006906:	f7fd fba1 	bl	800404c <HAL_GetTick>
 800690a:	4602      	mov	r2, r0
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006914:	d901      	bls.n	800691a <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e008      	b.n	800692c <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006922:	f003 0301 	and.w	r3, r3, #1
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1ed      	bne.n	8006906 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3718      	adds	r7, #24
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	40028000 	.word	0x40028000

08006938 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d101      	bne.n	800694c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e1c3      	b.n	8006cd4 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 020c 	and.w	r2, r3, #12
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0310 	and.w	r3, r3, #16
 8006964:	2b00      	cmp	r3, #0
 8006966:	bf14      	ite	ne
 8006968:	2301      	movne	r3, #1
 800696a:	2300      	moveq	r3, #0
 800696c:	b2db      	uxtb	r3, r3
 800696e:	461a      	mov	r2, r3
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800698e:	2b00      	cmp	r3, #0
 8006990:	bf0c      	ite	eq
 8006992:	2301      	moveq	r3, #1
 8006994:	2300      	movne	r3, #0
 8006996:	b2db      	uxtb	r3, r3
 8006998:	461a      	mov	r2, r3
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	bf14      	ite	ne
 80069ae:	2301      	movne	r3, #1
 80069b0:	2300      	moveq	r3, #0
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	bf0c      	ite	eq
 80069c8:	2301      	moveq	r3, #1
 80069ca:	2300      	movne	r3, #0
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	461a      	mov	r2, r3
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80069da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069de:	2b00      	cmp	r3, #0
 80069e0:	bf14      	ite	ne
 80069e2:	2301      	movne	r3, #1
 80069e4:	2300      	moveq	r3, #0
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	bf14      	ite	ne
 80069fc:	2301      	movne	r3, #1
 80069fe:	2300      	moveq	r3, #0
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	461a      	mov	r2, r3
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	bf14      	ite	ne
 8006a32:	2301      	movne	r3, #1
 8006a34:	2300      	moveq	r3, #0
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	461a      	mov	r2, r3
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	bf0c      	ite	eq
 8006a4c:	2301      	moveq	r3, #1
 8006a4e:	2300      	movne	r3, #0
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	461a      	mov	r2, r3
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	bf0c      	ite	eq
 8006a66:	2301      	moveq	r3, #1
 8006a68:	2300      	movne	r3, #0
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	bf14      	ite	ne
 8006a80:	2301      	movne	r3, #1
 8006a82:	2300      	moveq	r3, #0
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	461a      	mov	r2, r3
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	bf14      	ite	ne
 8006a9a:	2301      	movne	r3, #1
 8006a9c:	2300      	moveq	r3, #0
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	bf14      	ite	ne
 8006ab4:	2301      	movne	r3, #1
 8006ab6:	2300      	moveq	r3, #0
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	461a      	mov	r2, r3
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8006ac6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	bf14      	ite	ne
 8006ace:	2301      	movne	r3, #1
 8006ad0:	2300      	moveq	r3, #0
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	bf14      	ite	ne
 8006af6:	2301      	movne	r3, #1
 8006af8:	2300      	moveq	r3, #0
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	461a      	mov	r2, r3
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	bf0c      	ite	eq
 8006b2c:	2301      	moveq	r3, #1
 8006b2e:	2300      	movne	r3, #0
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	461a      	mov	r2, r3
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	bf14      	ite	ne
 8006b48:	2301      	movne	r3, #1
 8006b4a:	2300      	moveq	r3, #0
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	461a      	mov	r2, r3
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8006b5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	bf14      	ite	ne
 8006b64:	2301      	movne	r3, #1
 8006b66:	2300      	moveq	r3, #0
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	bf14      	ite	ne
 8006b80:	2301      	movne	r3, #1
 8006b82:	2300      	moveq	r3, #0
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	0e5b      	lsrs	r3, r3, #25
 8006b96:	f003 021f 	and.w	r2, r3, #31
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	bf14      	ite	ne
 8006bac:	2301      	movne	r3, #1
 8006bae:	2300      	moveq	r3, #0
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	f003 020f 	and.w	r2, r3, #15
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bce:	f003 0302 	and.w	r3, r3, #2
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	bf14      	ite	ne
 8006bd6:	2301      	movne	r3, #1
 8006bd8:	2300      	moveq	r3, #0
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	461a      	mov	r2, r3
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	bf0c      	ite	eq
 8006bf2:	2301      	moveq	r3, #1
 8006bf4:	2300      	movne	r3, #0
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c06:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c14:	0c1b      	lsrs	r3, r3, #16
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c24:	f003 0301 	and.w	r3, r3, #1
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	bf14      	ite	ne
 8006c2c:	2301      	movne	r3, #1
 8006c2e:	2300      	moveq	r3, #0
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	461a      	mov	r2, r3
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c42:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	bf14      	ite	ne
 8006c4a:	2301      	movne	r3, #1
 8006c4c:	2300      	moveq	r3, #0
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8006c60:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006c70:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8006c80:	f003 0308 	and.w	r3, r3, #8
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	bf14      	ite	ne
 8006c88:	2301      	movne	r3, #1
 8006c8a:	2300      	moveq	r3, #0
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006c9e:	f003 0310 	and.w	r3, r3, #16
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	bf14      	ite	ne
 8006ca6:	2301      	movne	r3, #1
 8006ca8:	2300      	moveq	r3, #0
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	461a      	mov	r2, r3
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8006cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	bf0c      	ite	eq
 8006cc4:	2301      	moveq	r3, #1
 8006cc6:	2300      	movne	r3, #0
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d101      	bne.n	8006cf4 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e00b      	b.n	8006d0c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cfa:	2b10      	cmp	r3, #16
 8006cfc:	d105      	bne.n	8006d0a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8006cfe:	6839      	ldr	r1, [r7, #0]
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 f85f 	bl	8006dc4 <ETH_SetMACConfig>

    return HAL_OK;
 8006d06:	2300      	movs	r3, #0
 8006d08:	e000      	b.n	8006d0c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
  }
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3708      	adds	r7, #8
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006d24:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006d2c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8006d2e:	f003 fe45 	bl	800a9bc <HAL_RCC_GetHCLKFreq>
 8006d32:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	4a1e      	ldr	r2, [pc, #120]	; (8006db0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d908      	bls.n	8006d4e <HAL_ETH_SetMDIOClockRange+0x3a>
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	4a1d      	ldr	r2, [pc, #116]	; (8006db4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d804      	bhi.n	8006d4e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d4a:	60fb      	str	r3, [r7, #12]
 8006d4c:	e027      	b.n	8006d9e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	4a18      	ldr	r2, [pc, #96]	; (8006db4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d908      	bls.n	8006d68 <HAL_ETH_SetMDIOClockRange+0x54>
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	4a17      	ldr	r2, [pc, #92]	; (8006db8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d204      	bcs.n	8006d68 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006d64:	60fb      	str	r3, [r7, #12]
 8006d66:	e01a      	b.n	8006d9e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	4a13      	ldr	r2, [pc, #76]	; (8006db8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d303      	bcc.n	8006d78 <HAL_ETH_SetMDIOClockRange+0x64>
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	4a12      	ldr	r2, [pc, #72]	; (8006dbc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d911      	bls.n	8006d9c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	4a10      	ldr	r2, [pc, #64]	; (8006dbc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d908      	bls.n	8006d92 <HAL_ETH_SetMDIOClockRange+0x7e>
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	4a0f      	ldr	r2, [pc, #60]	; (8006dc0 <HAL_ETH_SetMDIOClockRange+0xac>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d804      	bhi.n	8006d92 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d8e:	60fb      	str	r3, [r7, #12]
 8006d90:	e005      	b.n	8006d9e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d98:	60fb      	str	r3, [r7, #12]
 8006d9a:	e000      	b.n	8006d9e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8006d9c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8006da8:	bf00      	nop
 8006daa:	3710      	adds	r7, #16
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	01312cff 	.word	0x01312cff
 8006db4:	02160ebf 	.word	0x02160ebf
 8006db8:	03938700 	.word	0x03938700
 8006dbc:	05f5e0ff 	.word	0x05f5e0ff
 8006dc0:	08f0d17f 	.word	0x08f0d17f

08006dc4 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8006dd6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	791b      	ldrb	r3, [r3, #4]
 8006ddc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8006dde:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	7b1b      	ldrb	r3, [r3, #12]
 8006de4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8006de6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	7b5b      	ldrb	r3, [r3, #13]
 8006dec:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006dee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	7b9b      	ldrb	r3, [r3, #14]
 8006df4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8006df6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	7bdb      	ldrb	r3, [r3, #15]
 8006dfc:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8006dfe:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8006e00:	683a      	ldr	r2, [r7, #0]
 8006e02:	7c12      	ldrb	r2, [r2, #16]
 8006e04:	2a00      	cmp	r2, #0
 8006e06:	d102      	bne.n	8006e0e <ETH_SetMACConfig+0x4a>
 8006e08:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006e0c:	e000      	b.n	8006e10 <ETH_SetMACConfig+0x4c>
 8006e0e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8006e10:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8006e12:	683a      	ldr	r2, [r7, #0]
 8006e14:	7c52      	ldrb	r2, [r2, #17]
 8006e16:	2a00      	cmp	r2, #0
 8006e18:	d102      	bne.n	8006e20 <ETH_SetMACConfig+0x5c>
 8006e1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006e1e:	e000      	b.n	8006e22 <ETH_SetMACConfig+0x5e>
 8006e20:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8006e22:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	7c9b      	ldrb	r3, [r3, #18]
 8006e28:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8006e2a:	431a      	orrs	r2, r3
               macconf->Speed |
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8006e30:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8006e36:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	7f1b      	ldrb	r3, [r3, #28]
 8006e3c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8006e3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	7f5b      	ldrb	r3, [r3, #29]
 8006e44:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8006e46:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8006e48:	683a      	ldr	r2, [r7, #0]
 8006e4a:	7f92      	ldrb	r2, [r2, #30]
 8006e4c:	2a00      	cmp	r2, #0
 8006e4e:	d102      	bne.n	8006e56 <ETH_SetMACConfig+0x92>
 8006e50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e54:	e000      	b.n	8006e58 <ETH_SetMACConfig+0x94>
 8006e56:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8006e58:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	7fdb      	ldrb	r3, [r3, #31]
 8006e5e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8006e60:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8006e62:	683a      	ldr	r2, [r7, #0]
 8006e64:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006e68:	2a00      	cmp	r2, #0
 8006e6a:	d102      	bne.n	8006e72 <ETH_SetMACConfig+0xae>
 8006e6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e70:	e000      	b.n	8006e74 <ETH_SetMACConfig+0xb0>
 8006e72:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8006e74:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8006e7a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e82:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8006e84:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	4b56      	ldr	r3, [pc, #344]	; (8006ff0 <ETH_SetMACConfig+0x22c>)
 8006e96:	4013      	ands	r3, r2
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	6812      	ldr	r2, [r2, #0]
 8006e9c:	68f9      	ldr	r1, [r7, #12]
 8006e9e:	430b      	orrs	r3, r1
 8006ea0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ea6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006eae:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006eb0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006eb8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8006eba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006ec2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8006ec4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8006ec6:	683a      	ldr	r2, [r7, #0]
 8006ec8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8006ecc:	2a00      	cmp	r2, #0
 8006ece:	d102      	bne.n	8006ed6 <ETH_SetMACConfig+0x112>
 8006ed0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006ed4:	e000      	b.n	8006ed8 <ETH_SetMACConfig+0x114>
 8006ed6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8006ed8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	685a      	ldr	r2, [r3, #4]
 8006ee8:	4b42      	ldr	r3, [pc, #264]	; (8006ff4 <ETH_SetMACConfig+0x230>)
 8006eea:	4013      	ands	r3, r2
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	6812      	ldr	r2, [r2, #0]
 8006ef0:	68f9      	ldr	r1, [r7, #12]
 8006ef2:	430b      	orrs	r3, r1
 8006ef4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006efc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8006f02:	4313      	orrs	r3, r2
 8006f04:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68da      	ldr	r2, [r3, #12]
 8006f0c:	4b3a      	ldr	r3, [pc, #232]	; (8006ff8 <ETH_SetMACConfig+0x234>)
 8006f0e:	4013      	ands	r3, r2
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	6812      	ldr	r2, [r2, #0]
 8006f14:	68f9      	ldr	r1, [r7, #12]
 8006f16:	430b      	orrs	r3, r1
 8006f18:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006f20:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006f26:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8006f28:	683a      	ldr	r2, [r7, #0]
 8006f2a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8006f2e:	2a00      	cmp	r2, #0
 8006f30:	d101      	bne.n	8006f36 <ETH_SetMACConfig+0x172>
 8006f32:	2280      	movs	r2, #128	; 0x80
 8006f34:	e000      	b.n	8006f38 <ETH_SetMACConfig+0x174>
 8006f36:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8006f38:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f3e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006f40:	4313      	orrs	r3, r2
 8006f42:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f4a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8006f4e:	4013      	ands	r3, r2
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	6812      	ldr	r2, [r2, #0]
 8006f54:	68f9      	ldr	r1, [r7, #12]
 8006f56:	430b      	orrs	r3, r1
 8006f58:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006f60:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8006f68:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f76:	f023 0103 	bic.w	r1, r3, #3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	430a      	orrs	r2, r1
 8006f82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8006f8e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	430a      	orrs	r2, r1
 8006f9c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006fa4:	683a      	ldr	r2, [r7, #0]
 8006fa6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8006faa:	2a00      	cmp	r2, #0
 8006fac:	d101      	bne.n	8006fb2 <ETH_SetMACConfig+0x1ee>
 8006fae:	2240      	movs	r2, #64	; 0x40
 8006fb0:	e000      	b.n	8006fb4 <ETH_SetMACConfig+0x1f0>
 8006fb2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8006fb4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006fbc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006fbe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006fc6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006fd4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	430a      	orrs	r2, r1
 8006fe0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8006fe4:	bf00      	nop
 8006fe6:	3714      	adds	r7, #20
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr
 8006ff0:	00048083 	.word	0x00048083
 8006ff4:	c0f88000 	.word	0xc0f88000
 8006ff8:	fffffef0 	.word	0xfffffef0

08006ffc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b085      	sub	sp, #20
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	4b38      	ldr	r3, [pc, #224]	; (80070f4 <ETH_SetDMAConfig+0xf8>)
 8007012:	4013      	ands	r3, r2
 8007014:	683a      	ldr	r2, [r7, #0]
 8007016:	6811      	ldr	r1, [r2, #0]
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	6812      	ldr	r2, [r2, #0]
 800701c:	430b      	orrs	r3, r1
 800701e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007022:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	791b      	ldrb	r3, [r3, #4]
 8007028:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800702e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	7b1b      	ldrb	r3, [r3, #12]
 8007034:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007036:	4313      	orrs	r3, r2
 8007038:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007042:	685a      	ldr	r2, [r3, #4]
 8007044:	4b2c      	ldr	r3, [pc, #176]	; (80070f8 <ETH_SetDMAConfig+0xfc>)
 8007046:	4013      	ands	r3, r2
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	6812      	ldr	r2, [r2, #0]
 800704c:	68f9      	ldr	r1, [r7, #12]
 800704e:	430b      	orrs	r3, r1
 8007050:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007054:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	7b5b      	ldrb	r3, [r3, #13]
 800705a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8007060:	4313      	orrs	r3, r2
 8007062:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800706c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8007070:	4b22      	ldr	r3, [pc, #136]	; (80070fc <ETH_SetDMAConfig+0x100>)
 8007072:	4013      	ands	r3, r2
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	6812      	ldr	r2, [r2, #0]
 8007078:	68f9      	ldr	r1, [r7, #12]
 800707a:	430b      	orrs	r3, r1
 800707c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007080:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	7d1b      	ldrb	r3, [r3, #20]
 800708c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800708e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	7f5b      	ldrb	r3, [r3, #29]
 8007094:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8007096:	4313      	orrs	r3, r2
 8007098:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070a2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80070a6:	4b16      	ldr	r3, [pc, #88]	; (8007100 <ETH_SetDMAConfig+0x104>)
 80070a8:	4013      	ands	r3, r2
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	6812      	ldr	r2, [r2, #0]
 80070ae:	68f9      	ldr	r1, [r7, #12]
 80070b0:	430b      	orrs	r3, r1
 80070b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80070b6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	7f1b      	ldrb	r3, [r3, #28]
 80070be:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80070c4:	4313      	orrs	r3, r2
 80070c6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070d0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80070d4:	4b0b      	ldr	r3, [pc, #44]	; (8007104 <ETH_SetDMAConfig+0x108>)
 80070d6:	4013      	ands	r3, r2
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	6812      	ldr	r2, [r2, #0]
 80070dc:	68f9      	ldr	r1, [r7, #12]
 80070de:	430b      	orrs	r3, r1
 80070e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80070e4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80070e8:	bf00      	nop
 80070ea:	3714      	adds	r7, #20
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr
 80070f4:	ffff87fd 	.word	0xffff87fd
 80070f8:	ffff2ffe 	.word	0xffff2ffe
 80070fc:	fffec000 	.word	0xfffec000
 8007100:	ffc0efef 	.word	0xffc0efef
 8007104:	7fc0ffff 	.word	0x7fc0ffff

08007108 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b0a4      	sub	sp, #144	; 0x90
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8007110:	2301      	movs	r3, #1
 8007112:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8007116:	2300      	movs	r3, #0
 8007118:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800711a:	2300      	movs	r3, #0
 800711c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8007120:	2300      	movs	r3, #0
 8007122:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8007126:	2301      	movs	r3, #1
 8007128:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800712c:	2301      	movs	r3, #1
 800712e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8007132:	2301      	movs	r3, #1
 8007134:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8007138:	2300      	movs	r3, #0
 800713a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800713e:	2301      	movs	r3, #1
 8007140:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8007144:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007148:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800714a:	2300      	movs	r3, #0
 800714c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8007150:	2300      	movs	r3, #0
 8007152:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8007154:	2300      	movs	r3, #0
 8007156:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800715a:	2300      	movs	r3, #0
 800715c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8007160:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8007164:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8007166:	2300      	movs	r3, #0
 8007168:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800716c:	2300      	movs	r3, #0
 800716e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8007170:	2301      	movs	r3, #1
 8007172:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8007176:	2300      	movs	r3, #0
 8007178:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800717c:	2300      	movs	r3, #0
 800717e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8007182:	2300      	movs	r3, #0
 8007184:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8007186:	2300      	movs	r3, #0
 8007188:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800718a:	2300      	movs	r3, #0
 800718c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800718e:	2300      	movs	r3, #0
 8007190:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8007194:	2300      	movs	r3, #0
 8007196:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800719a:	2301      	movs	r3, #1
 800719c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80071a0:	2320      	movs	r3, #32
 80071a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80071a6:	2301      	movs	r3, #1
 80071a8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80071ac:	2300      	movs	r3, #0
 80071ae:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80071b2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80071b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80071b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80071bc:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80071be:	2300      	movs	r3, #0
 80071c0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80071c4:	2302      	movs	r3, #2
 80071c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80071ca:	2300      	movs	r3, #0
 80071cc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80071d0:	2300      	movs	r3, #0
 80071d2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80071d6:	2300      	movs	r3, #0
 80071d8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80071dc:	2301      	movs	r3, #1
 80071de:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80071e2:	2300      	movs	r3, #0
 80071e4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80071e6:	2301      	movs	r3, #1
 80071e8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80071ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80071f0:	4619      	mov	r1, r3
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f7ff fde6 	bl	8006dc4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80071f8:	2301      	movs	r3, #1
 80071fa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80071fc:	2301      	movs	r3, #1
 80071fe:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8007200:	2300      	movs	r3, #0
 8007202:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8007204:	2300      	movs	r3, #0
 8007206:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800720a:	2300      	movs	r3, #0
 800720c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800720e:	2300      	movs	r3, #0
 8007210:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8007212:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007216:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8007218:	2300      	movs	r3, #0
 800721a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800721c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007220:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8007222:	2300      	movs	r3, #0
 8007224:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8007228:	f44f 7306 	mov.w	r3, #536	; 0x218
 800722c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800722e:	f107 0308 	add.w	r3, r7, #8
 8007232:	4619      	mov	r1, r3
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f7ff fee1 	bl	8006ffc <ETH_SetDMAConfig>
}
 800723a:	bf00      	nop
 800723c:	3790      	adds	r7, #144	; 0x90
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8007242:	b480      	push	{r7}
 8007244:	b085      	sub	sp, #20
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800724a:	2300      	movs	r3, #0
 800724c:	60fb      	str	r3, [r7, #12]
 800724e:	e01d      	b.n	800728c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	68d9      	ldr	r1, [r3, #12]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	4613      	mov	r3, r2
 8007258:	005b      	lsls	r3, r3, #1
 800725a:	4413      	add	r3, r2
 800725c:	00db      	lsls	r3, r3, #3
 800725e:	440b      	add	r3, r1
 8007260:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	2200      	movs	r2, #0
 8007266:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	2200      	movs	r2, #0
 800726c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	2200      	movs	r2, #0
 8007272:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	2200      	movs	r2, #0
 8007278:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800727a:	68b9      	ldr	r1, [r7, #8]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	3206      	adds	r2, #6
 8007282:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	3301      	adds	r3, #1
 800728a:	60fb      	str	r3, [r7, #12]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2b03      	cmp	r3, #3
 8007290:	d9de      	bls.n	8007250 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072a0:	461a      	mov	r2, r3
 80072a2:	2303      	movs	r3, #3
 80072a4:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	68da      	ldr	r2, [r3, #12]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072b4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	68da      	ldr	r2, [r3, #12]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072c4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80072c8:	bf00      	nop
 80072ca:	3714      	adds	r7, #20
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b085      	sub	sp, #20
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80072dc:	2300      	movs	r3, #0
 80072de:	60fb      	str	r3, [r7, #12]
 80072e0:	e023      	b.n	800732a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6919      	ldr	r1, [r3, #16]
 80072e6:	68fa      	ldr	r2, [r7, #12]
 80072e8:	4613      	mov	r3, r2
 80072ea:	005b      	lsls	r3, r3, #1
 80072ec:	4413      	add	r3, r2
 80072ee:	00db      	lsls	r3, r3, #3
 80072f0:	440b      	add	r3, r1
 80072f2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	2200      	movs	r2, #0
 80072f8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	2200      	movs	r2, #0
 80072fe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	2200      	movs	r2, #0
 8007304:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	2200      	movs	r2, #0
 800730a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	2200      	movs	r2, #0
 8007310:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	2200      	movs	r2, #0
 8007316:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8007318:	68b9      	ldr	r1, [r7, #8]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	68fa      	ldr	r2, [r7, #12]
 800731e:	3212      	adds	r2, #18
 8007320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	3301      	adds	r3, #1
 8007328:	60fb      	str	r3, [r7, #12]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2b03      	cmp	r3, #3
 800732e:	d9d8      	bls.n	80072e2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007356:	461a      	mov	r2, r3
 8007358:	2303      	movs	r3, #3
 800735a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	691a      	ldr	r2, [r3, #16]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800736a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800737e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8007382:	bf00      	nop
 8007384:	3714      	adds	r7, #20
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
	...

08007390 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8007390:	b480      	push	{r7}
 8007392:	b08d      	sub	sp, #52	; 0x34
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	3318      	adds	r3, #24
 80073a0:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80073ae:	2300      	movs	r3, #0
 80073b0:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ba:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80073c2:	2300      	movs	r3, #0
 80073c4:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80073c6:	6a3b      	ldr	r3, [r7, #32]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073d2:	d007      	beq.n	80073e4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80073d4:	697a      	ldr	r2, [r7, #20]
 80073d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d8:	3304      	adds	r3, #4
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	4413      	add	r3, r2
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d001      	beq.n	80073e8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80073e4:	2302      	movs	r3, #2
 80073e6:	e259      	b.n	800789c <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 0304 	and.w	r3, r3, #4
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d044      	beq.n	800747e <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80073f4:	6a3b      	ldr	r3, [r7, #32]
 80073f6:	68da      	ldr	r2, [r3, #12]
 80073f8:	4b75      	ldr	r3, [pc, #468]	; (80075d0 <ETH_Prepare_Tx_Descriptors+0x240>)
 80073fa:	4013      	ands	r3, r2
 80073fc:	68ba      	ldr	r2, [r7, #8]
 80073fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007400:	431a      	orrs	r2, r3
 8007402:	6a3b      	ldr	r3, [r7, #32]
 8007404:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8007406:	6a3b      	ldr	r3, [r7, #32]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800740e:	6a3b      	ldr	r3, [r7, #32]
 8007410:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007420:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 0308 	and.w	r3, r3, #8
 800742a:	2b00      	cmp	r3, #0
 800742c:	d027      	beq.n	800747e <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800742e:	6a3b      	ldr	r3, [r7, #32]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	b29a      	uxth	r2, r3
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007438:	041b      	lsls	r3, r3, #16
 800743a:	431a      	orrs	r2, r3
 800743c:	6a3b      	ldr	r3, [r7, #32]
 800743e:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8007440:	6a3b      	ldr	r3, [r7, #32]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007448:	6a3b      	ldr	r3, [r7, #32]
 800744a:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 800744c:	6a3b      	ldr	r3, [r7, #32]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007458:	431a      	orrs	r2, r3
 800745a:	6a3b      	ldr	r3, [r7, #32]
 800745c:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800746c:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800747c:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 0310 	and.w	r3, r3, #16
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00e      	beq.n	80074a8 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800748a:	6a3b      	ldr	r3, [r7, #32]
 800748c:	689a      	ldr	r2, [r3, #8]
 800748e:	4b51      	ldr	r3, [pc, #324]	; (80075d4 <ETH_Prepare_Tx_Descriptors+0x244>)
 8007490:	4013      	ands	r3, r2
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	6992      	ldr	r2, [r2, #24]
 8007496:	431a      	orrs	r2, r3
 8007498:	6a3b      	ldr	r3, [r7, #32]
 800749a:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 800749c:	6a3b      	ldr	r3, [r7, #32]
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80074a4:	6a3b      	ldr	r3, [r7, #32]
 80074a6:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 0304 	and.w	r3, r3, #4
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d105      	bne.n	80074c0 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 0310 	and.w	r3, r3, #16
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d036      	beq.n	800752e <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80074c0:	6a3b      	ldr	r3, [r7, #32]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80074c8:	6a3b      	ldr	r3, [r7, #32]
 80074ca:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80074cc:	f3bf 8f5f 	dmb	sy
}
 80074d0:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80074d2:	6a3b      	ldr	r3, [r7, #32]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80074da:	6a3b      	ldr	r3, [r7, #32]
 80074dc:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80074de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e0:	3301      	adds	r3, #1
 80074e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e6:	2b03      	cmp	r3, #3
 80074e8:	d902      	bls.n	80074f0 <ETH_Prepare_Tx_Descriptors+0x160>
 80074ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ec:	3b04      	subs	r3, #4
 80074ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074f8:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 80074fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fc:	3301      	adds	r3, #1
 80074fe:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8007500:	6a3b      	ldr	r3, [r7, #32]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007508:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800750c:	d10f      	bne.n	800752e <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	693a      	ldr	r2, [r7, #16]
 8007512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007516:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8007518:	f3bf 8f5f 	dmb	sy
}
 800751c:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800751e:	6a3b      	ldr	r3, [r7, #32]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007526:	6a3b      	ldr	r3, [r7, #32]
 8007528:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 800752a:	2302      	movs	r3, #2
 800752c:	e1b6      	b.n	800789c <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800752e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007530:	3301      	adds	r3, #1
 8007532:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	461a      	mov	r2, r3
 800753a:	6a3b      	ldr	r3, [r7, #32]
 800753c:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800753e:	6a3b      	ldr	r3, [r7, #32]
 8007540:	689a      	ldr	r2, [r3, #8]
 8007542:	4b24      	ldr	r3, [pc, #144]	; (80075d4 <ETH_Prepare_Tx_Descriptors+0x244>)
 8007544:	4013      	ands	r3, r2
 8007546:	69fa      	ldr	r2, [r7, #28]
 8007548:	6852      	ldr	r2, [r2, #4]
 800754a:	431a      	orrs	r2, r3
 800754c:	6a3b      	ldr	r3, [r7, #32]
 800754e:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d012      	beq.n	800757e <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	461a      	mov	r2, r3
 8007564:	6a3b      	ldr	r3, [r7, #32]
 8007566:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8007568:	6a3b      	ldr	r3, [r7, #32]
 800756a:	689a      	ldr	r2, [r3, #8]
 800756c:	4b1a      	ldr	r3, [pc, #104]	; (80075d8 <ETH_Prepare_Tx_Descriptors+0x248>)
 800756e:	4013      	ands	r3, r2
 8007570:	69fa      	ldr	r2, [r7, #28]
 8007572:	6852      	ldr	r2, [r2, #4]
 8007574:	0412      	lsls	r2, r2, #16
 8007576:	431a      	orrs	r2, r3
 8007578:	6a3b      	ldr	r3, [r7, #32]
 800757a:	609a      	str	r2, [r3, #8]
 800757c:	e008      	b.n	8007590 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800757e:	6a3b      	ldr	r3, [r7, #32]
 8007580:	2200      	movs	r2, #0
 8007582:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8007584:	6a3b      	ldr	r3, [r7, #32]
 8007586:	689a      	ldr	r2, [r3, #8]
 8007588:	4b13      	ldr	r3, [pc, #76]	; (80075d8 <ETH_Prepare_Tx_Descriptors+0x248>)
 800758a:	4013      	ands	r3, r2
 800758c:	6a3a      	ldr	r2, [r7, #32]
 800758e:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 0310 	and.w	r3, r3, #16
 8007598:	2b00      	cmp	r3, #0
 800759a:	d021      	beq.n	80075e0 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 800759c:	6a3b      	ldr	r3, [r7, #32]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	6a1b      	ldr	r3, [r3, #32]
 80075a8:	04db      	lsls	r3, r3, #19
 80075aa:	431a      	orrs	r2, r3
 80075ac:	6a3b      	ldr	r3, [r7, #32]
 80075ae:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80075b0:	6a3b      	ldr	r3, [r7, #32]
 80075b2:	68da      	ldr	r2, [r3, #12]
 80075b4:	4b09      	ldr	r3, [pc, #36]	; (80075dc <ETH_Prepare_Tx_Descriptors+0x24c>)
 80075b6:	4013      	ands	r3, r2
 80075b8:	68ba      	ldr	r2, [r7, #8]
 80075ba:	69d2      	ldr	r2, [r2, #28]
 80075bc:	431a      	orrs	r2, r3
 80075be:	6a3b      	ldr	r3, [r7, #32]
 80075c0:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80075c2:	6a3b      	ldr	r3, [r7, #32]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80075ca:	6a3b      	ldr	r3, [r7, #32]
 80075cc:	60da      	str	r2, [r3, #12]
 80075ce:	e02e      	b.n	800762e <ETH_Prepare_Tx_Descriptors+0x29e>
 80075d0:	ffff0000 	.word	0xffff0000
 80075d4:	ffffc000 	.word	0xffffc000
 80075d8:	c000ffff 	.word	0xc000ffff
 80075dc:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80075e0:	6a3b      	ldr	r3, [r7, #32]
 80075e2:	68da      	ldr	r2, [r3, #12]
 80075e4:	4b7b      	ldr	r3, [pc, #492]	; (80077d4 <ETH_Prepare_Tx_Descriptors+0x444>)
 80075e6:	4013      	ands	r3, r2
 80075e8:	68ba      	ldr	r2, [r7, #8]
 80075ea:	6852      	ldr	r2, [r2, #4]
 80075ec:	431a      	orrs	r2, r3
 80075ee:	6a3b      	ldr	r3, [r7, #32]
 80075f0:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 0301 	and.w	r3, r3, #1
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d008      	beq.n	8007610 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80075fe:	6a3b      	ldr	r3, [r7, #32]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	431a      	orrs	r2, r3
 800760c:	6a3b      	ldr	r3, [r7, #32]
 800760e:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0320 	and.w	r3, r3, #32
 8007618:	2b00      	cmp	r3, #0
 800761a:	d008      	beq.n	800762e <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 800761c:	6a3b      	ldr	r3, [r7, #32]
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	431a      	orrs	r2, r3
 800762a:	6a3b      	ldr	r3, [r7, #32]
 800762c:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f003 0304 	and.w	r3, r3, #4
 8007636:	2b00      	cmp	r3, #0
 8007638:	d008      	beq.n	800764c <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 800763a:	6a3b      	ldr	r3, [r7, #32]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007646:	431a      	orrs	r2, r3
 8007648:	6a3b      	ldr	r3, [r7, #32]
 800764a:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800764c:	6a3b      	ldr	r3, [r7, #32]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007654:	6a3b      	ldr	r3, [r7, #32]
 8007656:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8007658:	6a3b      	ldr	r3, [r7, #32]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007660:	6a3b      	ldr	r3, [r7, #32]
 8007662:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8007664:	f3bf 8f5f 	dmb	sy
}
 8007668:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800766a:	6a3b      	ldr	r3, [r7, #32]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007672:	6a3b      	ldr	r3, [r7, #32]
 8007674:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 0302 	and.w	r3, r3, #2
 800767e:	2b00      	cmp	r3, #0
 8007680:	f000 80da 	beq.w	8007838 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8007684:	6a3b      	ldr	r3, [r7, #32]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	431a      	orrs	r2, r3
 8007692:	6a3b      	ldr	r3, [r7, #32]
 8007694:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8007696:	e0cf      	b.n	8007838 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8007698:	6a3b      	ldr	r3, [r7, #32]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80076a0:	6a3b      	ldr	r3, [r7, #32]
 80076a2:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80076a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a6:	3301      	adds	r3, #1
 80076a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ac:	2b03      	cmp	r3, #3
 80076ae:	d902      	bls.n	80076b6 <ETH_Prepare_Tx_Descriptors+0x326>
 80076b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b2:	3b04      	subs	r3, #4
 80076b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076be:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80076c0:	6a3b      	ldr	r3, [r7, #32]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80076c8:	6a3b      	ldr	r3, [r7, #32]
 80076ca:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80076cc:	6a3b      	ldr	r3, [r7, #32]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076d8:	d007      	beq.n	80076ea <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80076da:	697a      	ldr	r2, [r7, #20]
 80076dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076de:	3304      	adds	r3, #4
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	4413      	add	r3, r2
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d029      	beq.n	800773e <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f6:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80076f8:	2300      	movs	r3, #0
 80076fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80076fc:	e019      	b.n	8007732 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 80076fe:	f3bf 8f5f 	dmb	sy
}
 8007702:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8007704:	6a3b      	ldr	r3, [r7, #32]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800770c:	6a3b      	ldr	r3, [r7, #32]
 800770e:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8007710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007712:	3301      	adds	r3, #1
 8007714:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007718:	2b03      	cmp	r3, #3
 800771a:	d902      	bls.n	8007722 <ETH_Prepare_Tx_Descriptors+0x392>
 800771c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771e:	3b04      	subs	r3, #4
 8007720:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800772a:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800772c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772e:	3301      	adds	r3, #1
 8007730:	62bb      	str	r3, [r7, #40]	; 0x28
 8007732:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007736:	429a      	cmp	r2, r3
 8007738:	d3e1      	bcc.n	80076fe <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 800773a:	2302      	movs	r3, #2
 800773c:	e0ae      	b.n	800789c <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 800773e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007740:	3301      	adds	r3, #1
 8007742:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	461a      	mov	r2, r3
 8007750:	6a3b      	ldr	r3, [r7, #32]
 8007752:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8007754:	6a3b      	ldr	r3, [r7, #32]
 8007756:	689a      	ldr	r2, [r3, #8]
 8007758:	4b1f      	ldr	r3, [pc, #124]	; (80077d8 <ETH_Prepare_Tx_Descriptors+0x448>)
 800775a:	4013      	ands	r3, r2
 800775c:	69fa      	ldr	r2, [r7, #28]
 800775e:	6852      	ldr	r2, [r2, #4]
 8007760:	431a      	orrs	r2, r3
 8007762:	6a3b      	ldr	r3, [r7, #32]
 8007764:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d012      	beq.n	8007794 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	461a      	mov	r2, r3
 800777a:	6a3b      	ldr	r3, [r7, #32]
 800777c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800777e:	6a3b      	ldr	r3, [r7, #32]
 8007780:	689a      	ldr	r2, [r3, #8]
 8007782:	4b16      	ldr	r3, [pc, #88]	; (80077dc <ETH_Prepare_Tx_Descriptors+0x44c>)
 8007784:	4013      	ands	r3, r2
 8007786:	69fa      	ldr	r2, [r7, #28]
 8007788:	6852      	ldr	r2, [r2, #4]
 800778a:	0412      	lsls	r2, r2, #16
 800778c:	431a      	orrs	r2, r3
 800778e:	6a3b      	ldr	r3, [r7, #32]
 8007790:	609a      	str	r2, [r3, #8]
 8007792:	e008      	b.n	80077a6 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8007794:	6a3b      	ldr	r3, [r7, #32]
 8007796:	2200      	movs	r2, #0
 8007798:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800779a:	6a3b      	ldr	r3, [r7, #32]
 800779c:	689a      	ldr	r2, [r3, #8]
 800779e:	4b0f      	ldr	r3, [pc, #60]	; (80077dc <ETH_Prepare_Tx_Descriptors+0x44c>)
 80077a0:	4013      	ands	r3, r2
 80077a2:	6a3a      	ldr	r2, [r7, #32]
 80077a4:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 0310 	and.w	r3, r3, #16
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d018      	beq.n	80077e4 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80077b2:	6a3b      	ldr	r3, [r7, #32]
 80077b4:	68da      	ldr	r2, [r3, #12]
 80077b6:	4b0a      	ldr	r3, [pc, #40]	; (80077e0 <ETH_Prepare_Tx_Descriptors+0x450>)
 80077b8:	4013      	ands	r3, r2
 80077ba:	68ba      	ldr	r2, [r7, #8]
 80077bc:	69d2      	ldr	r2, [r2, #28]
 80077be:	431a      	orrs	r2, r3
 80077c0:	6a3b      	ldr	r3, [r7, #32]
 80077c2:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80077c4:	6a3b      	ldr	r3, [r7, #32]
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80077cc:	6a3b      	ldr	r3, [r7, #32]
 80077ce:	60da      	str	r2, [r3, #12]
 80077d0:	e020      	b.n	8007814 <ETH_Prepare_Tx_Descriptors+0x484>
 80077d2:	bf00      	nop
 80077d4:	ffff8000 	.word	0xffff8000
 80077d8:	ffffc000 	.word	0xffffc000
 80077dc:	c000ffff 	.word	0xc000ffff
 80077e0:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80077e4:	6a3b      	ldr	r3, [r7, #32]
 80077e6:	68da      	ldr	r2, [r3, #12]
 80077e8:	4b2f      	ldr	r3, [pc, #188]	; (80078a8 <ETH_Prepare_Tx_Descriptors+0x518>)
 80077ea:	4013      	ands	r3, r2
 80077ec:	68ba      	ldr	r2, [r7, #8]
 80077ee:	6852      	ldr	r2, [r2, #4]
 80077f0:	431a      	orrs	r2, r3
 80077f2:	6a3b      	ldr	r3, [r7, #32]
 80077f4:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 0301 	and.w	r3, r3, #1
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d008      	beq.n	8007814 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8007802:	6a3b      	ldr	r3, [r7, #32]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	695b      	ldr	r3, [r3, #20]
 800780e:	431a      	orrs	r2, r3
 8007810:	6a3b      	ldr	r3, [r7, #32]
 8007812:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	3301      	adds	r3, #1
 8007818:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800781a:	f3bf 8f5f 	dmb	sy
}
 800781e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8007820:	6a3b      	ldr	r3, [r7, #32]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007828:	6a3b      	ldr	r3, [r7, #32]
 800782a:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800782c:	6a3b      	ldr	r3, [r7, #32]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007834:	6a3b      	ldr	r3, [r7, #32]
 8007836:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	2b00      	cmp	r3, #0
 800783e:	f47f af2b 	bne.w	8007698 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d006      	beq.n	8007856 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8007848:	6a3b      	ldr	r3, [r7, #32]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007850:	6a3b      	ldr	r3, [r7, #32]
 8007852:	609a      	str	r2, [r3, #8]
 8007854:	e005      	b.n	8007862 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8007856:	6a3b      	ldr	r3, [r7, #32]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800785e:	6a3b      	ldr	r3, [r7, #32]
 8007860:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8007862:	6a3b      	ldr	r3, [r7, #32]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800786a:	6a3b      	ldr	r3, [r7, #32]
 800786c:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007872:	6979      	ldr	r1, [r7, #20]
 8007874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007876:	3304      	adds	r3, #4
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	440b      	add	r3, r1
 800787c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007882:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007884:	b672      	cpsid	i
}
 8007886:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	4413      	add	r3, r2
 8007890:	1c5a      	adds	r2, r3, #1
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8007896:	b662      	cpsie	i
}
 8007898:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	3734      	adds	r7, #52	; 0x34
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr
 80078a8:	ffff8000 	.word	0xffff8000

080078ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b089      	sub	sp, #36	; 0x24
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80078b6:	2300      	movs	r3, #0
 80078b8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80078ba:	4b89      	ldr	r3, [pc, #548]	; (8007ae0 <HAL_GPIO_Init+0x234>)
 80078bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80078be:	e194      	b.n	8007bea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	2101      	movs	r1, #1
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	fa01 f303 	lsl.w	r3, r1, r3
 80078cc:	4013      	ands	r3, r2
 80078ce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	f000 8186 	beq.w	8007be4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	f003 0303 	and.w	r3, r3, #3
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d005      	beq.n	80078f0 <HAL_GPIO_Init+0x44>
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	f003 0303 	and.w	r3, r3, #3
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d130      	bne.n	8007952 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	005b      	lsls	r3, r3, #1
 80078fa:	2203      	movs	r2, #3
 80078fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007900:	43db      	mvns	r3, r3
 8007902:	69ba      	ldr	r2, [r7, #24]
 8007904:	4013      	ands	r3, r2
 8007906:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	68da      	ldr	r2, [r3, #12]
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	005b      	lsls	r3, r3, #1
 8007910:	fa02 f303 	lsl.w	r3, r2, r3
 8007914:	69ba      	ldr	r2, [r7, #24]
 8007916:	4313      	orrs	r3, r2
 8007918:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	69ba      	ldr	r2, [r7, #24]
 800791e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007926:	2201      	movs	r2, #1
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	fa02 f303 	lsl.w	r3, r2, r3
 800792e:	43db      	mvns	r3, r3
 8007930:	69ba      	ldr	r2, [r7, #24]
 8007932:	4013      	ands	r3, r2
 8007934:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	091b      	lsrs	r3, r3, #4
 800793c:	f003 0201 	and.w	r2, r3, #1
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	fa02 f303 	lsl.w	r3, r2, r3
 8007946:	69ba      	ldr	r2, [r7, #24]
 8007948:	4313      	orrs	r3, r2
 800794a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	69ba      	ldr	r2, [r7, #24]
 8007950:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	f003 0303 	and.w	r3, r3, #3
 800795a:	2b03      	cmp	r3, #3
 800795c:	d017      	beq.n	800798e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	005b      	lsls	r3, r3, #1
 8007968:	2203      	movs	r2, #3
 800796a:	fa02 f303 	lsl.w	r3, r2, r3
 800796e:	43db      	mvns	r3, r3
 8007970:	69ba      	ldr	r2, [r7, #24]
 8007972:	4013      	ands	r3, r2
 8007974:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	689a      	ldr	r2, [r3, #8]
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	005b      	lsls	r3, r3, #1
 800797e:	fa02 f303 	lsl.w	r3, r2, r3
 8007982:	69ba      	ldr	r2, [r7, #24]
 8007984:	4313      	orrs	r3, r2
 8007986:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	69ba      	ldr	r2, [r7, #24]
 800798c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	f003 0303 	and.w	r3, r3, #3
 8007996:	2b02      	cmp	r3, #2
 8007998:	d123      	bne.n	80079e2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	08da      	lsrs	r2, r3, #3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	3208      	adds	r2, #8
 80079a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	f003 0307 	and.w	r3, r3, #7
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	220f      	movs	r2, #15
 80079b2:	fa02 f303 	lsl.w	r3, r2, r3
 80079b6:	43db      	mvns	r3, r3
 80079b8:	69ba      	ldr	r2, [r7, #24]
 80079ba:	4013      	ands	r3, r2
 80079bc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	691a      	ldr	r2, [r3, #16]
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	f003 0307 	and.w	r3, r3, #7
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	fa02 f303 	lsl.w	r3, r2, r3
 80079ce:	69ba      	ldr	r2, [r7, #24]
 80079d0:	4313      	orrs	r3, r2
 80079d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	08da      	lsrs	r2, r3, #3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	3208      	adds	r2, #8
 80079dc:	69b9      	ldr	r1, [r7, #24]
 80079de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	005b      	lsls	r3, r3, #1
 80079ec:	2203      	movs	r2, #3
 80079ee:	fa02 f303 	lsl.w	r3, r2, r3
 80079f2:	43db      	mvns	r3, r3
 80079f4:	69ba      	ldr	r2, [r7, #24]
 80079f6:	4013      	ands	r3, r2
 80079f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	f003 0203 	and.w	r2, r3, #3
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	005b      	lsls	r3, r3, #1
 8007a06:	fa02 f303 	lsl.w	r3, r2, r3
 8007a0a:	69ba      	ldr	r2, [r7, #24]
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	69ba      	ldr	r2, [r7, #24]
 8007a14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	f000 80e0 	beq.w	8007be4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a24:	4b2f      	ldr	r3, [pc, #188]	; (8007ae4 <HAL_GPIO_Init+0x238>)
 8007a26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007a2a:	4a2e      	ldr	r2, [pc, #184]	; (8007ae4 <HAL_GPIO_Init+0x238>)
 8007a2c:	f043 0302 	orr.w	r3, r3, #2
 8007a30:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007a34:	4b2b      	ldr	r3, [pc, #172]	; (8007ae4 <HAL_GPIO_Init+0x238>)
 8007a36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007a3a:	f003 0302 	and.w	r3, r3, #2
 8007a3e:	60fb      	str	r3, [r7, #12]
 8007a40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007a42:	4a29      	ldr	r2, [pc, #164]	; (8007ae8 <HAL_GPIO_Init+0x23c>)
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	089b      	lsrs	r3, r3, #2
 8007a48:	3302      	adds	r3, #2
 8007a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	f003 0303 	and.w	r3, r3, #3
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	220f      	movs	r2, #15
 8007a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a5e:	43db      	mvns	r3, r3
 8007a60:	69ba      	ldr	r2, [r7, #24]
 8007a62:	4013      	ands	r3, r2
 8007a64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a20      	ldr	r2, [pc, #128]	; (8007aec <HAL_GPIO_Init+0x240>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d052      	beq.n	8007b14 <HAL_GPIO_Init+0x268>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a1f      	ldr	r2, [pc, #124]	; (8007af0 <HAL_GPIO_Init+0x244>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d031      	beq.n	8007ada <HAL_GPIO_Init+0x22e>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a1e      	ldr	r2, [pc, #120]	; (8007af4 <HAL_GPIO_Init+0x248>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d02b      	beq.n	8007ad6 <HAL_GPIO_Init+0x22a>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a1d      	ldr	r2, [pc, #116]	; (8007af8 <HAL_GPIO_Init+0x24c>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d025      	beq.n	8007ad2 <HAL_GPIO_Init+0x226>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a1c      	ldr	r2, [pc, #112]	; (8007afc <HAL_GPIO_Init+0x250>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d01f      	beq.n	8007ace <HAL_GPIO_Init+0x222>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a1b      	ldr	r2, [pc, #108]	; (8007b00 <HAL_GPIO_Init+0x254>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d019      	beq.n	8007aca <HAL_GPIO_Init+0x21e>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a1a      	ldr	r2, [pc, #104]	; (8007b04 <HAL_GPIO_Init+0x258>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d013      	beq.n	8007ac6 <HAL_GPIO_Init+0x21a>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a19      	ldr	r2, [pc, #100]	; (8007b08 <HAL_GPIO_Init+0x25c>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d00d      	beq.n	8007ac2 <HAL_GPIO_Init+0x216>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a18      	ldr	r2, [pc, #96]	; (8007b0c <HAL_GPIO_Init+0x260>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d007      	beq.n	8007abe <HAL_GPIO_Init+0x212>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a17      	ldr	r2, [pc, #92]	; (8007b10 <HAL_GPIO_Init+0x264>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d101      	bne.n	8007aba <HAL_GPIO_Init+0x20e>
 8007ab6:	2309      	movs	r3, #9
 8007ab8:	e02d      	b.n	8007b16 <HAL_GPIO_Init+0x26a>
 8007aba:	230a      	movs	r3, #10
 8007abc:	e02b      	b.n	8007b16 <HAL_GPIO_Init+0x26a>
 8007abe:	2308      	movs	r3, #8
 8007ac0:	e029      	b.n	8007b16 <HAL_GPIO_Init+0x26a>
 8007ac2:	2307      	movs	r3, #7
 8007ac4:	e027      	b.n	8007b16 <HAL_GPIO_Init+0x26a>
 8007ac6:	2306      	movs	r3, #6
 8007ac8:	e025      	b.n	8007b16 <HAL_GPIO_Init+0x26a>
 8007aca:	2305      	movs	r3, #5
 8007acc:	e023      	b.n	8007b16 <HAL_GPIO_Init+0x26a>
 8007ace:	2304      	movs	r3, #4
 8007ad0:	e021      	b.n	8007b16 <HAL_GPIO_Init+0x26a>
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	e01f      	b.n	8007b16 <HAL_GPIO_Init+0x26a>
 8007ad6:	2302      	movs	r3, #2
 8007ad8:	e01d      	b.n	8007b16 <HAL_GPIO_Init+0x26a>
 8007ada:	2301      	movs	r3, #1
 8007adc:	e01b      	b.n	8007b16 <HAL_GPIO_Init+0x26a>
 8007ade:	bf00      	nop
 8007ae0:	58000080 	.word	0x58000080
 8007ae4:	58024400 	.word	0x58024400
 8007ae8:	58000400 	.word	0x58000400
 8007aec:	58020000 	.word	0x58020000
 8007af0:	58020400 	.word	0x58020400
 8007af4:	58020800 	.word	0x58020800
 8007af8:	58020c00 	.word	0x58020c00
 8007afc:	58021000 	.word	0x58021000
 8007b00:	58021400 	.word	0x58021400
 8007b04:	58021800 	.word	0x58021800
 8007b08:	58021c00 	.word	0x58021c00
 8007b0c:	58022000 	.word	0x58022000
 8007b10:	58022400 	.word	0x58022400
 8007b14:	2300      	movs	r3, #0
 8007b16:	69fa      	ldr	r2, [r7, #28]
 8007b18:	f002 0203 	and.w	r2, r2, #3
 8007b1c:	0092      	lsls	r2, r2, #2
 8007b1e:	4093      	lsls	r3, r2
 8007b20:	69ba      	ldr	r2, [r7, #24]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007b26:	4938      	ldr	r1, [pc, #224]	; (8007c08 <HAL_GPIO_Init+0x35c>)
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	089b      	lsrs	r3, r3, #2
 8007b2c:	3302      	adds	r3, #2
 8007b2e:	69ba      	ldr	r2, [r7, #24]
 8007b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	43db      	mvns	r3, r3
 8007b40:	69ba      	ldr	r2, [r7, #24]
 8007b42:	4013      	ands	r3, r2
 8007b44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d003      	beq.n	8007b5a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007b52:	69ba      	ldr	r2, [r7, #24]
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007b5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	43db      	mvns	r3, r3
 8007b6e:	69ba      	ldr	r2, [r7, #24]
 8007b70:	4013      	ands	r3, r2
 8007b72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d003      	beq.n	8007b88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007b80:	69ba      	ldr	r2, [r7, #24]
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007b88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	43db      	mvns	r3, r3
 8007b9a:	69ba      	ldr	r2, [r7, #24]
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d003      	beq.n	8007bb4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007bac:	69ba      	ldr	r2, [r7, #24]
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	69ba      	ldr	r2, [r7, #24]
 8007bb8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	43db      	mvns	r3, r3
 8007bc4:	69ba      	ldr	r2, [r7, #24]
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d003      	beq.n	8007bde <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007bd6:	69ba      	ldr	r2, [r7, #24]
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	69ba      	ldr	r2, [r7, #24]
 8007be2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	3301      	adds	r3, #1
 8007be8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	f47f ae63 	bne.w	80078c0 <HAL_GPIO_Init+0x14>
  }
}
 8007bfa:	bf00      	nop
 8007bfc:	bf00      	nop
 8007bfe:	3724      	adds	r7, #36	; 0x24
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr
 8007c08:	58000400 	.word	0x58000400

08007c0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b085      	sub	sp, #20
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	460b      	mov	r3, r1
 8007c16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	691a      	ldr	r2, [r3, #16]
 8007c1c:	887b      	ldrh	r3, [r7, #2]
 8007c1e:	4013      	ands	r3, r2
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d002      	beq.n	8007c2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007c24:	2301      	movs	r3, #1
 8007c26:	73fb      	strb	r3, [r7, #15]
 8007c28:	e001      	b.n	8007c2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3714      	adds	r7, #20
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	460b      	mov	r3, r1
 8007c46:	807b      	strh	r3, [r7, #2]
 8007c48:	4613      	mov	r3, r2
 8007c4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007c4c:	787b      	ldrb	r3, [r7, #1]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d003      	beq.n	8007c5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007c52:	887a      	ldrh	r2, [r7, #2]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007c58:	e003      	b.n	8007c62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007c5a:	887b      	ldrh	r3, [r7, #2]
 8007c5c:	041a      	lsls	r2, r3, #16
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	619a      	str	r2, [r3, #24]
}
 8007c62:	bf00      	nop
 8007c64:	370c      	adds	r7, #12
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr

08007c6e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007c6e:	b480      	push	{r7}
 8007c70:	b085      	sub	sp, #20
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
 8007c76:	460b      	mov	r3, r1
 8007c78:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	695b      	ldr	r3, [r3, #20]
 8007c7e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007c80:	887a      	ldrh	r2, [r7, #2]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	4013      	ands	r3, r2
 8007c86:	041a      	lsls	r2, r3, #16
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	43d9      	mvns	r1, r3
 8007c8c:	887b      	ldrh	r3, [r7, #2]
 8007c8e:	400b      	ands	r3, r1
 8007c90:	431a      	orrs	r2, r3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	619a      	str	r2, [r3, #24]
}
 8007c96:	bf00      	nop
 8007c98:	3714      	adds	r7, #20
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr

08007ca2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b082      	sub	sp, #8
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	4603      	mov	r3, r0
 8007caa:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cb0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007cb4:	88fb      	ldrh	r3, [r7, #6]
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d008      	beq.n	8007cce <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007cbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007cc0:	88fb      	ldrh	r3, [r7, #6]
 8007cc2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007cc6:	88fb      	ldrh	r3, [r7, #6]
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f000 f804 	bl	8007cd6 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007cce:	bf00      	nop
 8007cd0:	3708      	adds	r7, #8
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007cd6:	b480      	push	{r7}
 8007cd8:	b083      	sub	sp, #12
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	4603      	mov	r3, r0
 8007cde:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d101      	bne.n	8007cfe <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e0bd      	b.n	8007e7a <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2202      	movs	r2, #2
 8007d02:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	f003 0301 	and.w	r3, r3, #1
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d031      	beq.n	8007da6 <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a4f      	ldr	r2, [pc, #316]	; (8007e84 <HAL_HRTIM_Init+0x198>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d10e      	bne.n	8007d6a <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8007d4c:	4b4e      	ldr	r3, [pc, #312]	; (8007e88 <HAL_HRTIM_Init+0x19c>)
 8007d4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d52:	4a4d      	ldr	r2, [pc, #308]	; (8007e88 <HAL_HRTIM_Init+0x19c>)
 8007d54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d58:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007d5c:	4b4a      	ldr	r3, [pc, #296]	; (8007e88 <HAL_HRTIM_Init+0x19c>)
 8007d5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d66:	60fb      	str	r3, [r7, #12]
 8007d68:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007d78:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007d82:	693a      	ldr	r2, [r7, #16]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007d8e:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	695b      	ldr	r3, [r3, #20]
 8007d94:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007d98:	693a      	ldr	r2, [r7, #16]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	693a      	ldr	r2, [r7, #16]
 8007da4:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f7fb fb96 	bl	80034d8 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	f003 0302 	and.w	r3, r3, #2
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d012      	beq.n	8007dde <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dc6:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dd0:	693a      	ldr	r2, [r7, #16]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	693a      	ldr	r2, [r7, #16]
 8007ddc:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2201      	movs	r2, #1
 8007de2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8007dee:	2300      	movs	r3, #0
 8007df0:	75fb      	strb	r3, [r7, #23]
 8007df2:	e03e      	b.n	8007e72 <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8007df4:	7dfa      	ldrb	r2, [r7, #23]
 8007df6:	6879      	ldr	r1, [r7, #4]
 8007df8:	4613      	mov	r3, r2
 8007dfa:	00db      	lsls	r3, r3, #3
 8007dfc:	1a9b      	subs	r3, r3, r2
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	440b      	add	r3, r1
 8007e02:	3318      	adds	r3, #24
 8007e04:	2200      	movs	r2, #0
 8007e06:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8007e08:	7dfa      	ldrb	r2, [r7, #23]
 8007e0a:	6879      	ldr	r1, [r7, #4]
 8007e0c:	4613      	mov	r3, r2
 8007e0e:	00db      	lsls	r3, r3, #3
 8007e10:	1a9b      	subs	r3, r3, r2
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	440b      	add	r3, r1
 8007e16:	331c      	adds	r3, #28
 8007e18:	2200      	movs	r2, #0
 8007e1a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8007e1c:	7dfa      	ldrb	r2, [r7, #23]
 8007e1e:	6879      	ldr	r1, [r7, #4]
 8007e20:	4613      	mov	r3, r2
 8007e22:	00db      	lsls	r3, r3, #3
 8007e24:	1a9b      	subs	r3, r3, r2
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	440b      	add	r3, r1
 8007e2a:	3320      	adds	r3, #32
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8007e30:	7dfa      	ldrb	r2, [r7, #23]
 8007e32:	6879      	ldr	r1, [r7, #4]
 8007e34:	4613      	mov	r3, r2
 8007e36:	00db      	lsls	r3, r3, #3
 8007e38:	1a9b      	subs	r3, r3, r2
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	440b      	add	r3, r1
 8007e3e:	3324      	adds	r3, #36	; 0x24
 8007e40:	2200      	movs	r2, #0
 8007e42:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8007e44:	7dfa      	ldrb	r2, [r7, #23]
 8007e46:	6879      	ldr	r1, [r7, #4]
 8007e48:	4613      	mov	r3, r2
 8007e4a:	00db      	lsls	r3, r3, #3
 8007e4c:	1a9b      	subs	r3, r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	440b      	add	r3, r1
 8007e52:	3328      	adds	r3, #40	; 0x28
 8007e54:	2200      	movs	r2, #0
 8007e56:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8007e58:	7dfa      	ldrb	r2, [r7, #23]
 8007e5a:	6879      	ldr	r1, [r7, #4]
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	00db      	lsls	r3, r3, #3
 8007e60:	1a9b      	subs	r3, r3, r2
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	440b      	add	r3, r1
 8007e66:	3330      	adds	r3, #48	; 0x30
 8007e68:	2200      	movs	r2, #0
 8007e6a:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8007e6c:	7dfb      	ldrb	r3, [r7, #23]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8007e72:	7dfb      	ldrb	r3, [r7, #23]
 8007e74:	2b05      	cmp	r3, #5
 8007e76:	d9bd      	bls.n	8007df4 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3718      	adds	r7, #24
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	40017400 	.word	0x40017400
 8007e88:	58024400 	.word	0x58024400

08007e8c <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	2b02      	cmp	r3, #2
 8007ea2:	d101      	bne.n	8007ea8 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8007ea4:	2302      	movs	r3, #2
 8007ea6:	e015      	b.n	8007ed4 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2202      	movs	r2, #2
 8007eac:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	2b05      	cmp	r3, #5
 8007eb4:	d104      	bne.n	8007ec0 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8007eb6:	6879      	ldr	r1, [r7, #4]
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	f000 fbd0 	bl	800865e <HRTIM_MasterBase_Config>
 8007ebe:	e004      	b.n	8007eca <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	68b9      	ldr	r1, [r7, #8]
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f000 fbf9 	bl	80086bc <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3710      	adds	r7, #16
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	d101      	bne.n	8007ef8 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8007ef4:	2302      	movs	r3, #2
 8007ef6:	e05f      	b.n	8007fb8 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d101      	bne.n	8007f06 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8007f02:	2302      	movs	r3, #2
 8007f04:	e058      	b.n	8007fb8 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2202      	movs	r2, #2
 8007f12:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	2b05      	cmp	r3, #5
 8007f1a:	d104      	bne.n	8007f26 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8007f1c:	6879      	ldr	r1, [r7, #4]
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	f000 fc0c 	bl	800873c <HRTIM_MasterWaveform_Config>
 8007f24:	e004      	b.n	8007f30 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	68b9      	ldr	r1, [r7, #8]
 8007f2a:	68f8      	ldr	r0, [r7, #12]
 8007f2c:	f000 fc6c 	bl	8008808 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6819      	ldr	r1, [r3, #0]
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	68ba      	ldr	r2, [r7, #8]
 8007f38:	4613      	mov	r3, r2
 8007f3a:	00db      	lsls	r3, r3, #3
 8007f3c:	1a9b      	subs	r3, r3, r2
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	4403      	add	r3, r0
 8007f42:	3320      	adds	r3, #32
 8007f44:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6859      	ldr	r1, [r3, #4]
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	68ba      	ldr	r2, [r7, #8]
 8007f4e:	4613      	mov	r3, r2
 8007f50:	00db      	lsls	r3, r3, #3
 8007f52:	1a9b      	subs	r3, r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4403      	add	r3, r0
 8007f58:	3324      	adds	r3, #36	; 0x24
 8007f5a:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6899      	ldr	r1, [r3, #8]
 8007f60:	68f8      	ldr	r0, [r7, #12]
 8007f62:	68ba      	ldr	r2, [r7, #8]
 8007f64:	4613      	mov	r3, r2
 8007f66:	00db      	lsls	r3, r3, #3
 8007f68:	1a9b      	subs	r3, r3, r2
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	4403      	add	r3, r0
 8007f6e:	3328      	adds	r3, #40	; 0x28
 8007f70:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	68d9      	ldr	r1, [r3, #12]
 8007f76:	68f8      	ldr	r0, [r7, #12]
 8007f78:	68ba      	ldr	r2, [r7, #8]
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	00db      	lsls	r3, r3, #3
 8007f7e:	1a9b      	subs	r3, r3, r2
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	4403      	add	r3, r0
 8007f84:	332c      	adds	r3, #44	; 0x2c
 8007f86:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6919      	ldr	r1, [r3, #16]
 8007f8c:	68f8      	ldr	r0, [r7, #12]
 8007f8e:	68ba      	ldr	r2, [r7, #8]
 8007f90:	4613      	mov	r3, r2
 8007f92:	00db      	lsls	r3, r3, #3
 8007f94:	1a9b      	subs	r3, r3, r2
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	4403      	add	r3, r0
 8007f9a:	3330      	adds	r3, #48	; 0x30
 8007f9c:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8007f9e:	68b9      	ldr	r1, [r7, #8]
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	f000 fe49 	bl	8008c38 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2201      	movs	r2, #1
 8007faa:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8007fb6:	2300      	movs	r3, #0
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3710      	adds	r7, #16
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b085      	sub	sp, #20
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	607a      	str	r2, [r7, #4]
 8007fcc:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d101      	bne.n	8007fde <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 8007fda:	2302      	movs	r3, #2
 8007fdc:	e157      	b.n	800828e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d101      	bne.n	8007fec <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8007fe8:	2302      	movs	r3, #2
 8007fea:	e150      	b.n	800828e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2202      	movs	r2, #2
 8007ff8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	2b05      	cmp	r3, #5
 8008000:	d140      	bne.n	8008084 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	3b01      	subs	r3, #1
 8008006:	2b07      	cmp	r3, #7
 8008008:	d82a      	bhi.n	8008060 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 800800a:	a201      	add	r2, pc, #4	; (adr r2, 8008010 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 800800c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008010:	08008031 	.word	0x08008031
 8008014:	0800803d 	.word	0x0800803d
 8008018:	08008061 	.word	0x08008061
 800801c:	08008049 	.word	0x08008049
 8008020:	08008061 	.word	0x08008061
 8008024:	08008061 	.word	0x08008061
 8008028:	08008061 	.word	0x08008061
 800802c:	08008055 	.word	0x08008055
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	683a      	ldr	r2, [r7, #0]
 8008036:	6812      	ldr	r2, [r2, #0]
 8008038:	61da      	str	r2, [r3, #28]
        break;
 800803a:	e01a      	b.n	8008072 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	683a      	ldr	r2, [r7, #0]
 8008042:	6812      	ldr	r2, [r2, #0]
 8008044:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 8008046:	e014      	b.n	8008072 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	683a      	ldr	r2, [r7, #0]
 800804e:	6812      	ldr	r2, [r2, #0]
 8008050:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8008052:	e00e      	b.n	8008072 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	683a      	ldr	r2, [r7, #0]
 800805a:	6812      	ldr	r2, [r2, #0]
 800805c:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 800805e:	e008      	b.n	8008072 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2207      	movs	r2, #7
 8008064:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2200      	movs	r2, #0
 800806c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 8008070:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8008078:	b2db      	uxtb	r3, r3
 800807a:	2b07      	cmp	r3, #7
 800807c:	f040 80fe 	bne.w	800827c <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	e104      	b.n	800828e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	3b01      	subs	r3, #1
 8008088:	2b07      	cmp	r3, #7
 800808a:	f200 80e3 	bhi.w	8008254 <HAL_HRTIM_WaveformCompareConfig+0x294>
 800808e:	a201      	add	r2, pc, #4	; (adr r2, 8008094 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8008090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008094:	080080b5 	.word	0x080080b5
 8008098:	080080c9 	.word	0x080080c9
 800809c:	08008255 	.word	0x08008255
 80080a0:	08008185 	.word	0x08008185
 80080a4:	08008255 	.word	0x08008255
 80080a8:	08008255 	.word	0x08008255
 80080ac:	08008255 	.word	0x08008255
 80080b0:	08008199 	.word	0x08008199
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6819      	ldr	r1, [r3, #0]
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	01db      	lsls	r3, r3, #7
 80080c0:	440b      	add	r3, r1
 80080c2:	339c      	adds	r3, #156	; 0x9c
 80080c4:	601a      	str	r2, [r3, #0]
        break;
 80080c6:	e0d1      	b.n	800826c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6819      	ldr	r1, [r3, #0]
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	01db      	lsls	r3, r3, #7
 80080d4:	440b      	add	r3, r1
 80080d6:	33a4      	adds	r3, #164	; 0xa4
 80080d8:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d03f      	beq.n	8008162 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	3301      	adds	r3, #1
 80080ea:	01db      	lsls	r3, r3, #7
 80080ec:	4413      	add	r3, r2
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	6811      	ldr	r1, [r2, #0]
 80080f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	3301      	adds	r3, #1
 80080fc:	01db      	lsls	r3, r3, #7
 80080fe:	440b      	add	r3, r1
 8008100:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	3301      	adds	r3, #1
 800810a:	01db      	lsls	r3, r3, #7
 800810c:	4413      	add	r3, r2
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	68f9      	ldr	r1, [r7, #12]
 8008116:	6809      	ldr	r1, [r1, #0]
 8008118:	431a      	orrs	r2, r3
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	3301      	adds	r3, #1
 800811e:	01db      	lsls	r3, r3, #7
 8008120:	440b      	add	r3, r1
 8008122:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800812c:	d109      	bne.n	8008142 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	6819      	ldr	r1, [r3, #0]
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	689a      	ldr	r2, [r3, #8]
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	01db      	lsls	r3, r3, #7
 800813a:	440b      	add	r3, r1
 800813c:	339c      	adds	r3, #156	; 0x9c
 800813e:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8008140:	e091      	b.n	8008266 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800814a:	f040 808c 	bne.w	8008266 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	6819      	ldr	r1, [r3, #0]
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	689a      	ldr	r2, [r3, #8]
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	01db      	lsls	r3, r3, #7
 800815a:	440b      	add	r3, r1
 800815c:	33a8      	adds	r3, #168	; 0xa8
 800815e:	601a      	str	r2, [r3, #0]
         break;
 8008160:	e081      	b.n	8008266 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	3301      	adds	r3, #1
 800816a:	01db      	lsls	r3, r3, #7
 800816c:	4413      	add	r3, r2
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	6811      	ldr	r1, [r2, #0]
 8008174:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	3301      	adds	r3, #1
 800817c:	01db      	lsls	r3, r3, #7
 800817e:	440b      	add	r3, r1
 8008180:	601a      	str	r2, [r3, #0]
         break;
 8008182:	e070      	b.n	8008266 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6819      	ldr	r1, [r3, #0]
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	01db      	lsls	r3, r3, #7
 8008190:	440b      	add	r3, r1
 8008192:	33a8      	adds	r3, #168	; 0xa8
 8008194:	601a      	str	r2, [r3, #0]
        break;
 8008196:	e069      	b.n	800826c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6819      	ldr	r1, [r3, #0]
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	01db      	lsls	r3, r3, #7
 80081a4:	440b      	add	r3, r1
 80081a6:	33ac      	adds	r3, #172	; 0xac
 80081a8:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d03f      	beq.n	8008232 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	3301      	adds	r3, #1
 80081ba:	01db      	lsls	r3, r3, #7
 80081bc:	4413      	add	r3, r2
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	6811      	ldr	r1, [r2, #0]
 80081c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	3301      	adds	r3, #1
 80081cc:	01db      	lsls	r3, r3, #7
 80081ce:	440b      	add	r3, r1
 80081d0:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	3301      	adds	r3, #1
 80081da:	01db      	lsls	r3, r3, #7
 80081dc:	4413      	add	r3, r2
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	68f9      	ldr	r1, [r7, #12]
 80081e8:	6809      	ldr	r1, [r1, #0]
 80081ea:	431a      	orrs	r2, r3
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	3301      	adds	r3, #1
 80081f0:	01db      	lsls	r3, r3, #7
 80081f2:	440b      	add	r3, r1
 80081f4:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081fe:	d109      	bne.n	8008214 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6819      	ldr	r1, [r3, #0]
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	689a      	ldr	r2, [r3, #8]
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	01db      	lsls	r3, r3, #7
 800820c:	440b      	add	r3, r1
 800820e:	339c      	adds	r3, #156	; 0x9c
 8008210:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 8008212:	e02a      	b.n	800826a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800821c:	d125      	bne.n	800826a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6819      	ldr	r1, [r3, #0]
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	689a      	ldr	r2, [r3, #8]
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	01db      	lsls	r3, r3, #7
 800822a:	440b      	add	r3, r1
 800822c:	33a8      	adds	r3, #168	; 0xa8
 800822e:	601a      	str	r2, [r3, #0]
         break;
 8008230:	e01b      	b.n	800826a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	3301      	adds	r3, #1
 800823a:	01db      	lsls	r3, r3, #7
 800823c:	4413      	add	r3, r2
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	6811      	ldr	r1, [r2, #0]
 8008244:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	3301      	adds	r3, #1
 800824c:	01db      	lsls	r3, r3, #7
 800824e:	440b      	add	r3, r1
 8008250:	601a      	str	r2, [r3, #0]
         break;
 8008252:	e00a      	b.n	800826a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2207      	movs	r2, #7
 8008258:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2200      	movs	r2, #0
 8008260:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 8008264:	e002      	b.n	800826c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8008266:	bf00      	nop
 8008268:	e000      	b.n	800826c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 800826a:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8008272:	b2db      	uxtb	r3, r3
 8008274:	2b07      	cmp	r3, #7
 8008276:	d101      	bne.n	800827c <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	e008      	b.n	800828e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2200      	movs	r2, #0
 8008288:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	3714      	adds	r7, #20
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop

0800829c <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	60b9      	str	r1, [r7, #8]
 80082a6:	607a      	str	r2, [r7, #4]
 80082a8:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	d101      	bne.n	80082ba <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 80082b6:	2302      	movs	r3, #2
 80082b8:	e01d      	b.n	80082f6 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d101      	bne.n	80082c8 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 80082c4:	2302      	movs	r3, #2
 80082c6:	e016      	b.n	80082f6 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2202      	movs	r2, #2
 80082d4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	68b9      	ldr	r1, [r7, #8]
 80082de:	68f8      	ldr	r0, [r7, #12]
 80082e0:	f000 fbd2 	bl	8008a88 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3710      	adds	r7, #16
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 80082fe:	b480      	push	{r7}
 8008300:	b083      	sub	sp, #12
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
 8008306:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800830e:	2b01      	cmp	r3, #1
 8008310:	d101      	bne.n	8008316 <HAL_HRTIM_WaveformOutputStop+0x18>
 8008312:	2302      	movs	r3, #2
 8008314:	e01a      	b.n	800834c <HAL_HRTIM_WaveformOutputStop+0x4e>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2201      	movs	r2, #1
 800831a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2202      	movs	r2, #2
 8008322:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f8d3 1398 	ldr.w	r1, [r3, #920]	; 0x398
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	683a      	ldr	r2, [r7, #0]
 8008334:	430a      	orrs	r2, r1
 8008336:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2201      	movs	r2, #1
 800833e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 800834a:	2300      	movs	r3, #0
}
 800834c:	4618      	mov	r0, r3
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <HAL_HRTIM_WaveformCountStop_IT>:
  * @note The counter of a timer is stopped only if all timer outputs are disabled
  * @note All enabled timer related interrupts are disabled.
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStop_IT(HRTIM_HandleTypeDef * hhrtim,
                                                   uint32_t Timers)
{
 8008358:	b480      	push	{r7}
 800835a:	b085      	sub	sp, #20
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  /* ++ WA */
  __IO uint32_t delai = (uint32_t)(0x17FU);
 8008362:	f240 137f 	movw	r3, #383	; 0x17f
 8008366:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800836e:	2b01      	cmp	r3, #1
 8008370:	d101      	bne.n	8008376 <HAL_HRTIM_WaveformCountStop_IT+0x1e>
 8008372:	2302      	movs	r3, #2
 8008374:	e065      	b.n	8008442 <HAL_HRTIM_WaveformCountStop_IT+0xea>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2201      	movs	r2, #1
 800837a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2202      	movs	r2, #2
 8008382:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Disable HRTIM interrupts (if required) */
  __HAL_HRTIM_DISABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	43da      	mvns	r2, r3
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	400a      	ands	r2, r1
 800839a:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Disable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d00a      	beq.n	80083be <HAL_HRTIM_WaveformCountStop_IT+0x66>
  {
    /* Interrupts enable flag must be cleared one by one */
    __HAL_HRTIM_MASTER_DISABLE_IT(hhrtim, hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	68d9      	ldr	r1, [r3, #12]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80083b4:	43da      	mvns	r2, r3
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	400a      	ands	r2, r1
 80083bc:	60da      	str	r2, [r3, #12]
  }

  /* Disable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80083be:	2300      	movs	r3, #0
 80083c0:	73fb      	strb	r3, [r7, #15]
 80083c2:	e023      	b.n	800840c <HAL_HRTIM_WaveformCountStop_IT+0xb4>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 80083c4:	7bfb      	ldrb	r3, [r7, #15]
 80083c6:	4a22      	ldr	r2, [pc, #136]	; (8008450 <HAL_HRTIM_WaveformCountStop_IT+0xf8>)
 80083c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	4013      	ands	r3, r2
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d018      	beq.n	8008406 <HAL_HRTIM_WaveformCountStop_IT+0xae>
    {
      __HAL_HRTIM_TIMER_DISABLE_IT(hhrtim, timer_idx, hhrtim->TimerParam[timer_idx].InterruptRequests);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	7bfb      	ldrb	r3, [r7, #15]
 80083da:	01db      	lsls	r3, r3, #7
 80083dc:	4413      	add	r3, r2
 80083de:	338c      	adds	r3, #140	; 0x8c
 80083e0:	6818      	ldr	r0, [r3, #0]
 80083e2:	7bfa      	ldrb	r2, [r7, #15]
 80083e4:	6879      	ldr	r1, [r7, #4]
 80083e6:	4613      	mov	r3, r2
 80083e8:	00db      	lsls	r3, r3, #3
 80083ea:	1a9b      	subs	r3, r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	440b      	add	r3, r1
 80083f0:	3320      	adds	r3, #32
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	43da      	mvns	r2, r3
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6819      	ldr	r1, [r3, #0]
 80083fa:	7bfb      	ldrb	r3, [r7, #15]
 80083fc:	4002      	ands	r2, r0
 80083fe:	01db      	lsls	r3, r3, #7
 8008400:	440b      	add	r3, r1
 8008402:	338c      	adds	r3, #140	; 0x8c
 8008404:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8008406:	7bfb      	ldrb	r3, [r7, #15]
 8008408:	3301      	adds	r3, #1
 800840a:	73fb      	strb	r3, [r7, #15]
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
 800840c:	7bfb      	ldrb	r3, [r7, #15]
 800840e:	2b04      	cmp	r3, #4
 8008410:	d9d8      	bls.n	80083c4 <HAL_HRTIM_WaveformCountStop_IT+0x6c>
    }
  }

  /* ++ WA */
  do { delai--; } while (delai != 0U);
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	3b01      	subs	r3, #1
 8008416:	60bb      	str	r3, [r7, #8]
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d1f9      	bne.n	8008412 <HAL_HRTIM_WaveformCountStop_IT+0xba>
  /* -- WA */

  /* Disable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR &= ~(Timers);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	6819      	ldr	r1, [r3, #0]
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	43da      	mvns	r2, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	400a      	ands	r2, r1
 800842e:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3714      	adds	r7, #20
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	2000002c 	.word	0x2000002c

08008454 <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	2bff      	cmp	r3, #255	; 0xff
 8008462:	d103      	bne.n	800846c <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 fc49 	bl	8008cfc <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 800846a:	e00a      	b.n	8008482 <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	2b05      	cmp	r3, #5
 8008470:	d103      	bne.n	800847a <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 fcc0 	bl	8008df8 <HRTIM_Master_ISR>
}
 8008478:	e003      	b.n	8008482 <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 800847a:	6839      	ldr	r1, [r7, #0]
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 fd65 	bl	8008f4c <HRTIM_Timer_ISR>
}
 8008482:	bf00      	nop
 8008484:	3708      	adds	r7, #8
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800848a:	b480      	push	{r7}
 800848c:	b083      	sub	sp, #12
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 8008492:	bf00      	nop
 8008494:	370c      	adds	r7, #12
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr

0800849e <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800849e:	b480      	push	{r7}
 80084a0:	b083      	sub	sp, #12
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 80084a6:	bf00      	nop
 80084a8:	370c      	adds	r7, #12
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80084b2:	b480      	push	{r7}
 80084b4:	b083      	sub	sp, #12
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 80084ba:	bf00      	nop
 80084bc:	370c      	adds	r7, #12
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr

080084c6 <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80084c6:	b480      	push	{r7}
 80084c8:	b083      	sub	sp, #12
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 80084ce:	bf00      	nop
 80084d0:	370c      	adds	r7, #12
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr

080084da <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80084da:	b480      	push	{r7}
 80084dc:	b083      	sub	sp, #12
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 80084e2:	bf00      	nop
 80084e4:	370c      	adds	r7, #12
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr

080084ee <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80084ee:	b480      	push	{r7}
 80084f0:	b083      	sub	sp, #12
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 80084f6:	bf00      	nop
 80084f8:	370c      	adds	r7, #12
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr

08008502 <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8008502:	b480      	push	{r7}
 8008504:	b083      	sub	sp, #12
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 800850a:	bf00      	nop
 800850c:	370c      	adds	r7, #12
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr

08008516 <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8008516:	b480      	push	{r7}
 8008518:	b083      	sub	sp, #12
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 800851e:	bf00      	nop
 8008520:	370c      	adds	r7, #12
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr

0800852a <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800852a:	b480      	push	{r7}
 800852c:	b083      	sub	sp, #12
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
 8008532:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 8008534:	bf00      	nop
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <HAL_HRTIM_RepetitionEventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008540:	b480      	push	{r7}
 8008542:	b083      	sub	sp, #12
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RepetitionEventCallback could be implemented in the user file
   */
}
 800854a:	bf00      	nop
 800854c:	370c      	adds	r7, #12
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr

08008556 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008556:	b480      	push	{r7}
 8008558:	b083      	sub	sp, #12
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
 800855e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 8008560:	bf00      	nop
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <HAL_HRTIM_Compare2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_D for timer D
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  */
__weak void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare2EventCallback could be implemented in the user file
   */
}
 8008576:	bf00      	nop
 8008578:	370c      	adds	r7, #12
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr

08008582 <HAL_HRTIM_Compare3EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008582:	b480      	push	{r7}
 8008584:	b083      	sub	sp, #12
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
 800858a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare3EventCallback could be implemented in the user file
   */
}
 800858c:	bf00      	nop
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 80085a2:	bf00      	nop
 80085a4:	370c      	adds	r7, #12
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr

080085ae <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80085ae:	b480      	push	{r7}
 80085b0:	b083      	sub	sp, #12
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
 80085b6:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 80085b8:	bf00      	nop
 80085ba:	370c      	adds	r7, #12
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 80085ce:	bf00      	nop
 80085d0:	370c      	adds	r7, #12
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr

080085da <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80085da:	b480      	push	{r7}
 80085dc:	b083      	sub	sp, #12
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
 80085e2:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 80085fa:	bf00      	nop
 80085fc:	370c      	adds	r7, #12
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008606:	b480      	push	{r7}
 8008608:	b083      	sub	sp, #12
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
 800860e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 8008610:	bf00      	nop
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 8008626:	bf00      	nop
 8008628:	370c      	adds	r7, #12
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr

08008632 <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008632:	b480      	push	{r7}
 8008634:	b083      	sub	sp, #12
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
 800863a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 800863c:	bf00      	nop
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr

08008648 <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 8008652:	bf00      	nop
 8008654:	370c      	adds	r7, #12
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr

0800865e <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800865e:	b480      	push	{r7}
 8008660:	b085      	sub	sp, #20
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
 8008666:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f023 0307 	bic.w	r3, r3, #7
 8008676:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	68fa      	ldr	r2, [r7, #12]
 800867e:	4313      	orrs	r3, r2
 8008680:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f023 0318 	bic.w	r3, r3, #24
 8008688:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	68fa      	ldr	r2, [r7, #12]
 8008690:	4313      	orrs	r3, r2
 8008692:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	683a      	ldr	r2, [r7, #0]
 80086a2:	6812      	ldr	r2, [r2, #0]
 80086a4:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	683a      	ldr	r2, [r7, #0]
 80086ac:	6852      	ldr	r2, [r2, #4]
 80086ae:	619a      	str	r2, [r3, #24]
}
 80086b0:	bf00      	nop
 80086b2:	3714      	adds	r7, #20
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80086bc:	b480      	push	{r7}
 80086be:	b087      	sub	sp, #28
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	3301      	adds	r3, #1
 80086d0:	01db      	lsls	r3, r3, #7
 80086d2:	4413      	add	r3, r2
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	f023 0307 	bic.w	r3, r3, #7
 80086de:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	697a      	ldr	r2, [r7, #20]
 80086e6:	4313      	orrs	r3, r2
 80086e8:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	f023 0318 	bic.w	r3, r3, #24
 80086f0:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	68db      	ldr	r3, [r3, #12]
 80086f6:	697a      	ldr	r2, [r7, #20]
 80086f8:	4313      	orrs	r3, r2
 80086fa:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	3301      	adds	r3, #1
 8008704:	01db      	lsls	r3, r3, #7
 8008706:	4413      	add	r3, r2
 8008708:	697a      	ldr	r2, [r7, #20]
 800870a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6819      	ldr	r1, [r3, #0]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	01db      	lsls	r3, r3, #7
 8008718:	440b      	add	r3, r1
 800871a:	3394      	adds	r3, #148	; 0x94
 800871c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6819      	ldr	r1, [r3, #0]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	685a      	ldr	r2, [r3, #4]
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	01db      	lsls	r3, r3, #7
 800872a:	440b      	add	r3, r1
 800872c:	3398      	adds	r3, #152	; 0x98
 800872e:	601a      	str	r2, [r3, #0]
}
 8008730:	bf00      	nop
 8008732:	371c      	adds	r7, #28
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 800873c:	b480      	push	{r7}
 800873e:	b085      	sub	sp, #20
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8008756:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f023 0320 	bic.w	r3, r3, #32
 800875e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	695b      	ldr	r3, [r3, #20]
 8008764:	68fa      	ldr	r2, [r7, #12]
 8008766:	4313      	orrs	r3, r2
 8008768:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008770:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	699b      	ldr	r3, [r3, #24]
 8008776:	68fa      	ldr	r2, [r7, #12]
 8008778:	4313      	orrs	r3, r2
 800877a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008782:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	69db      	ldr	r3, [r3, #28]
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	4313      	orrs	r3, r2
 800878c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008794:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	6a1b      	ldr	r3, [r3, #32]
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	4313      	orrs	r3, r2
 800879e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80087a6:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80087b8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	68fa      	ldr	r2, [r7, #12]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80087cc:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087d2:	68fa      	ldr	r2, [r7, #12]
 80087d4:	4313      	orrs	r3, r2
 80087d6:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087de:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e4:	68ba      	ldr	r2, [r7, #8]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	68ba      	ldr	r2, [r7, #8]
 80087f8:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 80087fc:	bf00      	nop
 80087fe:	3714      	adds	r7, #20
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8008808:	b480      	push	{r7}
 800880a:	b08b      	sub	sp, #44	; 0x2c
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	3301      	adds	r3, #1
 800881c:	01db      	lsls	r3, r3, #7
 800881e:	4413      	add	r3, r2
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	68fa      	ldr	r2, [r7, #12]
 8008824:	6811      	ldr	r1, [r2, #0]
 8008826:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	3301      	adds	r3, #1
 800882e:	01db      	lsls	r3, r3, #7
 8008830:	440b      	add	r3, r1
 8008832:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	3301      	adds	r3, #1
 800883c:	01db      	lsls	r3, r3, #7
 800883e:	4413      	add	r3, r2
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	01db      	lsls	r3, r3, #7
 800884c:	4413      	add	r3, r2
 800884e:	33e8      	adds	r3, #232	; 0xe8
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	01db      	lsls	r3, r3, #7
 800885c:	4413      	add	r3, r2
 800885e:	33e4      	adds	r3, #228	; 0xe4
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 800886c:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 800886e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008870:	f023 0320 	bic.w	r3, r3, #32
 8008874:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	695b      	ldr	r3, [r3, #20]
 800887a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800887c:	4313      	orrs	r3, r2
 800887e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8008880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008882:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008886:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	699b      	ldr	r3, [r3, #24]
 800888c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800888e:	4313      	orrs	r3, r2
 8008890:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8008892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008894:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008898:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	69db      	ldr	r3, [r3, #28]
 800889e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088a0:	4313      	orrs	r3, r2
 80088a2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 80088a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80088aa:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6a1b      	ldr	r3, [r3, #32]
 80088b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088b2:	4313      	orrs	r3, r2
 80088b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 80088b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b8:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80088bc:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088c4:	4313      	orrs	r3, r2
 80088c6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 80088c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80088ce:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088d6:	4313      	orrs	r3, r2
 80088d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 80088da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80088e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088ea:	d103      	bne.n	80088f4 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 80088ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088f2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 80088f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088fa:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008902:	4313      	orrs	r3, r2
 8008904:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8008906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008908:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800890c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008914:	4313      	orrs	r3, r2
 8008916:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8008918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891a:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 800891e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008926:	4313      	orrs	r3, r2
 8008928:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	f023 031f 	bic.w	r3, r3, #31
 8008930:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008936:	f003 031f 	and.w	r3, r3, #31
 800893a:	69ba      	ldr	r2, [r7, #24]
 800893c:	4313      	orrs	r3, r2
 800893e:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8008940:	69bb      	ldr	r3, [r7, #24]
 8008942:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008946:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800894c:	69ba      	ldr	r2, [r7, #24]
 800894e:	4313      	orrs	r3, r2
 8008950:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008956:	2b00      	cmp	r3, #0
 8008958:	d108      	bne.n	800896c <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 800895a:	6a3b      	ldr	r3, [r7, #32]
 800895c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008960:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008966:	6a3a      	ldr	r2, [r7, #32]
 8008968:	4313      	orrs	r3, r2
 800896a:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008970:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8008974:	d004      	beq.n	8008980 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800897a:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 800897e:	d103      	bne.n	8008988 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008984:	2b40      	cmp	r3, #64	; 0x40
 8008986:	d108      	bne.n	800899a <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8008988:	6a3b      	ldr	r3, [r7, #32]
 800898a:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 800898e:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008994:	6a3a      	ldr	r2, [r7, #32]
 8008996:	4313      	orrs	r3, r2
 8008998:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800899e:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	2b04      	cmp	r3, #4
 80089a4:	d843      	bhi.n	8008a2e <HRTIM_TimingUnitWaveform_Config+0x226>
 80089a6:	a201      	add	r2, pc, #4	; (adr r2, 80089ac <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 80089a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ac:	080089c1 	.word	0x080089c1
 80089b0:	080089d7 	.word	0x080089d7
 80089b4:	080089ed 	.word	0x080089ed
 80089b8:	08008a03 	.word	0x08008a03
 80089bc:	08008a19 	.word	0x08008a19
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80089c6:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089cc:	005b      	lsls	r3, r3, #1
 80089ce:	69fa      	ldr	r2, [r7, #28]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	61fb      	str	r3, [r7, #28]
      break;
 80089d4:	e02c      	b.n	8008a30 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 80089d6:	69fb      	ldr	r3, [r7, #28]
 80089d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80089dc:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	69fa      	ldr	r2, [r7, #28]
 80089e6:	4313      	orrs	r3, r2
 80089e8:	61fb      	str	r3, [r7, #28]
      break;
 80089ea:	e021      	b.n	8008a30 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80089f2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f8:	00db      	lsls	r3, r3, #3
 80089fa:	69fa      	ldr	r2, [r7, #28]
 80089fc:	4313      	orrs	r3, r2
 80089fe:	61fb      	str	r3, [r7, #28]
      break;
 8008a00:	e016      	b.n	8008a30 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008a08:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0e:	011b      	lsls	r3, r3, #4
 8008a10:	69fa      	ldr	r2, [r7, #28]
 8008a12:	4313      	orrs	r3, r2
 8008a14:	61fb      	str	r3, [r7, #28]
      break;
 8008a16:	e00b      	b.n	8008a30 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008a1e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a24:	015b      	lsls	r3, r3, #5
 8008a26:	69fa      	ldr	r2, [r7, #28]
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	61fb      	str	r3, [r7, #28]
      break;
 8008a2c:	e000      	b.n	8008a30 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8008a2e:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681a      	ldr	r2, [r3, #0]
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	3301      	adds	r3, #1
 8008a38:	01db      	lsls	r3, r3, #7
 8008a3a:	4413      	add	r3, r2
 8008a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a3e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	01db      	lsls	r3, r3, #7
 8008a48:	4413      	add	r3, r2
 8008a4a:	33e8      	adds	r3, #232	; 0xe8
 8008a4c:	69ba      	ldr	r2, [r7, #24]
 8008a4e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	01db      	lsls	r3, r3, #7
 8008a58:	4413      	add	r3, r2
 8008a5a:	33e4      	adds	r3, #228	; 0xe4
 8008a5c:	6a3a      	ldr	r2, [r7, #32]
 8008a5e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	01db      	lsls	r3, r3, #7
 8008a68:	4413      	add	r3, r2
 8008a6a:	33d4      	adds	r3, #212	; 0xd4
 8008a6c:	697a      	ldr	r2, [r7, #20]
 8008a6e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	69fa      	ldr	r2, [r7, #28]
 8008a76:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8008a7a:	bf00      	nop
 8008a7c:	372c      	adds	r7, #44	; 0x2c
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr
 8008a86:	bf00      	nop

08008a88 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b089      	sub	sp, #36	; 0x24
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	607a      	str	r2, [r7, #4]
 8008a94:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8008a96:	2300      	movs	r3, #0
 8008a98:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	01db      	lsls	r3, r3, #7
 8008aa2:	4413      	add	r3, r2
 8008aa4:	33e4      	adds	r3, #228	; 0xe4
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	01db      	lsls	r3, r3, #7
 8008ab2:	4413      	add	r3, r2
 8008ab4:	33b8      	adds	r3, #184	; 0xb8
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	617b      	str	r3, [r7, #20]

  switch (Output)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ac0:	d04d      	beq.n	8008b5e <HRTIM_OutputConfig+0xd6>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ac8:	d85e      	bhi.n	8008b88 <HRTIM_OutputConfig+0x100>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ad0:	d032      	beq.n	8008b38 <HRTIM_OutputConfig+0xb0>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ad8:	d856      	bhi.n	8008b88 <HRTIM_OutputConfig+0x100>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2b80      	cmp	r3, #128	; 0x80
 8008ade:	d03e      	beq.n	8008b5e <HRTIM_OutputConfig+0xd6>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2b80      	cmp	r3, #128	; 0x80
 8008ae4:	d850      	bhi.n	8008b88 <HRTIM_OutputConfig+0x100>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2b40      	cmp	r3, #64	; 0x40
 8008aea:	d025      	beq.n	8008b38 <HRTIM_OutputConfig+0xb0>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2b40      	cmp	r3, #64	; 0x40
 8008af0:	d84a      	bhi.n	8008b88 <HRTIM_OutputConfig+0x100>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d01f      	beq.n	8008b38 <HRTIM_OutputConfig+0xb0>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d044      	beq.n	8008b88 <HRTIM_OutputConfig+0x100>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2b20      	cmp	r3, #32
 8008b02:	d841      	bhi.n	8008b88 <HRTIM_OutputConfig+0x100>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d33e      	bcc.n	8008b88 <HRTIM_OutputConfig+0x100>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	3b02      	subs	r3, #2
 8008b0e:	2201      	movs	r2, #1
 8008b10:	409a      	lsls	r2, r3
 8008b12:	4b48      	ldr	r3, [pc, #288]	; (8008c34 <HRTIM_OutputConfig+0x1ac>)
 8008b14:	4013      	ands	r3, r2
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	bf14      	ite	ne
 8008b1a:	2301      	movne	r3, #1
 8008b1c:	2300      	moveq	r3, #0
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d11c      	bne.n	8008b5e <HRTIM_OutputConfig+0xd6>
 8008b24:	f244 0304 	movw	r3, #16388	; 0x4004
 8008b28:	4013      	ands	r3, r2
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	bf14      	ite	ne
 8008b2e:	2301      	movne	r3, #1
 8008b30:	2300      	moveq	r3, #0
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d027      	beq.n	8008b88 <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6819      	ldr	r1, [r3, #0]
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	685a      	ldr	r2, [r3, #4]
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	01db      	lsls	r3, r3, #7
 8008b44:	440b      	add	r3, r1
 8008b46:	33bc      	adds	r3, #188	; 0xbc
 8008b48:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	6819      	ldr	r1, [r3, #0]
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	689a      	ldr	r2, [r3, #8]
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	01db      	lsls	r3, r3, #7
 8008b56:	440b      	add	r3, r1
 8008b58:	33c0      	adds	r3, #192	; 0xc0
 8008b5a:	601a      	str	r2, [r3, #0]
      break;
 8008b5c:	e015      	b.n	8008b8a <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	6819      	ldr	r1, [r3, #0]
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	685a      	ldr	r2, [r3, #4]
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	01db      	lsls	r3, r3, #7
 8008b6a:	440b      	add	r3, r1
 8008b6c:	33c4      	adds	r3, #196	; 0xc4
 8008b6e:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	6819      	ldr	r1, [r3, #0]
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	689a      	ldr	r2, [r3, #8]
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	01db      	lsls	r3, r3, #7
 8008b7c:	440b      	add	r3, r1
 8008b7e:	33c8      	adds	r3, #200	; 0xc8
 8008b80:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8008b82:	2310      	movs	r3, #16
 8008b84:	61bb      	str	r3, [r7, #24]
      break;
 8008b86:	e000      	b.n	8008b8a <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 8008b88:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8008b8a:	22fe      	movs	r2, #254	; 0xfe
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8008b92:	43db      	mvns	r3, r3
 8008b94:	69fa      	ldr	r2, [r7, #28]
 8008b96:	4013      	ands	r3, r2
 8008b98:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	69bb      	ldr	r3, [r7, #24]
 8008ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba4:	69fa      	ldr	r2, [r7, #28]
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	68da      	ldr	r2, [r3, #12]
 8008bae:	69bb      	ldr	r3, [r7, #24]
 8008bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb4:	69fa      	ldr	r2, [r7, #28]
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	691a      	ldr	r2, [r3, #16]
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc4:	69fa      	ldr	r2, [r7, #28]
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	695a      	ldr	r2, [r3, #20]
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8008bd4:	69fa      	ldr	r2, [r7, #28]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	699a      	ldr	r2, [r3, #24]
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	fa02 f303 	lsl.w	r3, r2, r3
 8008be4:	69fa      	ldr	r2, [r7, #28]
 8008be6:	4313      	orrs	r3, r2
 8008be8:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	691b      	ldr	r3, [r3, #16]
 8008bee:	2b08      	cmp	r3, #8
 8008bf0:	d111      	bne.n	8008c16 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d10c      	bne.n	8008c16 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d107      	bne.n	8008c16 <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	69da      	ldr	r2, [r3, #28]
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c10:	69fa      	ldr	r2, [r7, #28]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	01db      	lsls	r3, r3, #7
 8008c1e:	4413      	add	r3, r2
 8008c20:	33e4      	adds	r3, #228	; 0xe4
 8008c22:	69fa      	ldr	r2, [r7, #28]
 8008c24:	601a      	str	r2, [r3, #0]
}
 8008c26:	bf00      	nop
 8008c28:	3724      	adds	r7, #36	; 0x24
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop
 8008c34:	40000041 	.word	0x40000041

08008c38 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	2b05      	cmp	r3, #5
 8008c46:	d851      	bhi.n	8008cec <HRTIM_ForceRegistersUpdate+0xb4>
 8008c48:	a201      	add	r2, pc, #4	; (adr r2, 8008c50 <HRTIM_ForceRegistersUpdate+0x18>)
 8008c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c4e:	bf00      	nop
 8008c50:	08008c7f 	.word	0x08008c7f
 8008c54:	08008c95 	.word	0x08008c95
 8008c58:	08008cab 	.word	0x08008cab
 8008c5c:	08008cc1 	.word	0x08008cc1
 8008c60:	08008cd7 	.word	0x08008cd7
 8008c64:	08008c69 	.word	0x08008c69
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f042 0201 	orr.w	r2, r2, #1
 8008c78:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008c7c:	e037      	b.n	8008cee <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f042 0202 	orr.w	r2, r2, #2
 8008c8e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008c92:	e02c      	b.n	8008cee <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f042 0204 	orr.w	r2, r2, #4
 8008ca4:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008ca8:	e021      	b.n	8008cee <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f042 0208 	orr.w	r2, r2, #8
 8008cba:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008cbe:	e016      	b.n	8008cee <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f042 0210 	orr.w	r2, r2, #16
 8008cd0:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008cd4:	e00b      	b.n	8008cee <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f042 0220 	orr.w	r2, r2, #32
 8008ce6:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008cea:	e000      	b.n	8008cee <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8008cec:	bf00      	nop
  }
}
 8008cee:	bf00      	nop
 8008cf0:	370c      	adds	r7, #12
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr
 8008cfa:	bf00      	nop

08008cfc <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8008d0c:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8008d16:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f003 0301 	and.w	r3, r3, #1
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d00c      	beq.n	8008d3c <HRTIM_HRTIM_ISR+0x40>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	f003 0301 	and.w	r3, r3, #1
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d007      	beq.n	8008d3c <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2201      	movs	r2, #1
 8008d32:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f7ff fba7 	bl	800848a <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f003 0302 	and.w	r3, r3, #2
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d00c      	beq.n	8008d60 <HRTIM_HRTIM_ISR+0x64>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	f003 0302 	and.w	r3, r3, #2
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d007      	beq.n	8008d60 <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	2202      	movs	r2, #2
 8008d56:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f7ff fb9f 	bl	800849e <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f003 0304 	and.w	r3, r3, #4
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d00c      	beq.n	8008d84 <HRTIM_HRTIM_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	f003 0304 	and.w	r3, r3, #4
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d007      	beq.n	8008d84 <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2204      	movs	r2, #4
 8008d7a:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f7ff fb97 	bl	80084b2 <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f003 0308 	and.w	r3, r3, #8
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d00c      	beq.n	8008da8 <HRTIM_HRTIM_ISR+0xac>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	f003 0308 	and.w	r3, r3, #8
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d007      	beq.n	8008da8 <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	2208      	movs	r2, #8
 8008d9e:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f7ff fb8f 	bl	80084c6 <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f003 0310 	and.w	r3, r3, #16
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d00c      	beq.n	8008dcc <HRTIM_HRTIM_ISR+0xd0>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	f003 0310 	and.w	r3, r3, #16
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d007      	beq.n	8008dcc <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	2210      	movs	r2, #16
 8008dc2:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f7ff fb87 	bl	80084da <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f003 0320 	and.w	r3, r3, #32
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d00c      	beq.n	8008df0 <HRTIM_HRTIM_ISR+0xf4>
  {
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	f003 0320 	and.w	r3, r3, #32
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d007      	beq.n	8008df0 <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	2220      	movs	r2, #32
 8008de6:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f7ff fb7f 	bl	80084ee <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8008df0:	bf00      	nop
 8008df2:	3710      	adds	r7, #16
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b086      	sub	sp, #24
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8008e08:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8008e12:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	68db      	ldr	r3, [r3, #12]
 8008e22:	60bb      	str	r3, [r7, #8]

  /* Burst mode period event */
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00d      	beq.n	8008e4a <HRTIM_Master_ISR+0x52>
  {
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d008      	beq.n	8008e4a <HRTIM_Master_ISR+0x52>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008e40:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f7ff fb5c 	bl	8008502 <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f003 0301 	and.w	r3, r3, #1
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d00c      	beq.n	8008e6e <HRTIM_Master_ISR+0x76>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	f003 0301 	and.w	r3, r3, #1
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d007      	beq.n	8008e6e <HRTIM_Master_ISR+0x76>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	2201      	movs	r2, #1
 8008e64:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008e66:	2105      	movs	r1, #5
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f7ff fb74 	bl	8008556 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f003 0302 	and.w	r3, r3, #2
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d00c      	beq.n	8008e92 <HRTIM_Master_ISR+0x9a>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	f003 0302 	and.w	r3, r3, #2
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d007      	beq.n	8008e92 <HRTIM_Master_ISR+0x9a>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2202      	movs	r2, #2
 8008e88:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008e8a:	2105      	movs	r1, #5
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f7ff fb6d 	bl	800856c <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f003 0304 	and.w	r3, r3, #4
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d00c      	beq.n	8008eb6 <HRTIM_Master_ISR+0xbe>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	f003 0304 	and.w	r3, r3, #4
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d007      	beq.n	8008eb6 <HRTIM_Master_ISR+0xbe>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2204      	movs	r2, #4
 8008eac:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008eae:	2105      	movs	r1, #5
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f7ff fb66 	bl	8008582 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f003 0308 	and.w	r3, r3, #8
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d00c      	beq.n	8008eda <HRTIM_Master_ISR+0xe2>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	f003 0308 	and.w	r3, r3, #8
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d007      	beq.n	8008eda <HRTIM_Master_ISR+0xe2>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2208      	movs	r2, #8
 8008ed0:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008ed2:	2105      	movs	r1, #5
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f7ff fb5f 	bl	8008598 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f003 0310 	and.w	r3, r3, #16
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d00c      	beq.n	8008efe <HRTIM_Master_ISR+0x106>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	f003 0310 	and.w	r3, r3, #16
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d007      	beq.n	8008efe <HRTIM_Master_ISR+0x106>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	2210      	movs	r2, #16
 8008ef4:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008ef6:	2105      	movs	r1, #5
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f7ff fb21 	bl	8008540 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f003 0320 	and.w	r3, r3, #32
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d00b      	beq.n	8008f20 <HRTIM_Master_ISR+0x128>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	f003 0320 	and.w	r3, r3, #32
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d006      	beq.n	8008f20 <HRTIM_Master_ISR+0x128>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	2220      	movs	r2, #32
 8008f18:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f7ff fafb 	bl	8008516 <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d00c      	beq.n	8008f44 <HRTIM_Master_ISR+0x14c>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d007      	beq.n	8008f44 <HRTIM_Master_ISR+0x14c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	2240      	movs	r2, #64	; 0x40
 8008f3a:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008f3c:	2105      	movs	r1, #5
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f7ff faf3 	bl	800852a <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f44:	bf00      	nop
 8008f46:	3718      	adds	r7, #24
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	01db      	lsls	r3, r3, #7
 8008f60:	4413      	add	r3, r2
 8008f62:	3304      	adds	r3, #4
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	01db      	lsls	r3, r3, #7
 8008f70:	4413      	add	r3, r2
 8008f72:	338c      	adds	r3, #140	; 0x8c
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f003 0301 	and.w	r3, r3, #1
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d010      	beq.n	8008fa4 <HRTIM_Timer_ISR+0x58>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	f003 0301 	and.w	r3, r3, #1
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d00b      	beq.n	8008fa4 <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	01db      	lsls	r3, r3, #7
 8008f94:	4413      	add	r3, r2
 8008f96:	3388      	adds	r3, #136	; 0x88
 8008f98:	2201      	movs	r2, #1
 8008f9a:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 8008f9c:	6839      	ldr	r1, [r7, #0]
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f7ff fad9 	bl	8008556 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f003 0302 	and.w	r3, r3, #2
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d010      	beq.n	8008fd0 <HRTIM_Timer_ISR+0x84>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	f003 0302 	and.w	r3, r3, #2
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d00b      	beq.n	8008fd0 <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	01db      	lsls	r3, r3, #7
 8008fc0:	4413      	add	r3, r2
 8008fc2:	3388      	adds	r3, #136	; 0x88
 8008fc4:	2202      	movs	r2, #2
 8008fc6:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 8008fc8:	6839      	ldr	r1, [r7, #0]
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f7ff face 	bl	800856c <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f003 0304 	and.w	r3, r3, #4
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d010      	beq.n	8008ffc <HRTIM_Timer_ISR+0xb0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	f003 0304 	and.w	r3, r3, #4
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d00b      	beq.n	8008ffc <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	01db      	lsls	r3, r3, #7
 8008fec:	4413      	add	r3, r2
 8008fee:	3388      	adds	r3, #136	; 0x88
 8008ff0:	2204      	movs	r2, #4
 8008ff2:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 8008ff4:	6839      	ldr	r1, [r7, #0]
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f7ff fac3 	bl	8008582 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f003 0308 	and.w	r3, r3, #8
 8009002:	2b00      	cmp	r3, #0
 8009004:	d010      	beq.n	8009028 <HRTIM_Timer_ISR+0xdc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	f003 0308 	and.w	r3, r3, #8
 800900c:	2b00      	cmp	r3, #0
 800900e:	d00b      	beq.n	8009028 <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	01db      	lsls	r3, r3, #7
 8009018:	4413      	add	r3, r2
 800901a:	3388      	adds	r3, #136	; 0x88
 800901c:	2208      	movs	r2, #8
 800901e:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 8009020:	6839      	ldr	r1, [r7, #0]
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f7ff fab8 	bl	8008598 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f003 0310 	and.w	r3, r3, #16
 800902e:	2b00      	cmp	r3, #0
 8009030:	d010      	beq.n	8009054 <HRTIM_Timer_ISR+0x108>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	f003 0310 	and.w	r3, r3, #16
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00b      	beq.n	8009054 <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	01db      	lsls	r3, r3, #7
 8009044:	4413      	add	r3, r2
 8009046:	3388      	adds	r3, #136	; 0x88
 8009048:	2210      	movs	r2, #16
 800904a:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 800904c:	6839      	ldr	r1, [r7, #0]
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f7ff fa76 	bl	8008540 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800905a:	2b00      	cmp	r3, #0
 800905c:	d010      	beq.n	8009080 <HRTIM_Timer_ISR+0x134>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009064:	2b00      	cmp	r3, #0
 8009066:	d00b      	beq.n	8009080 <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	01db      	lsls	r3, r3, #7
 8009070:	4413      	add	r3, r2
 8009072:	3388      	adds	r3, #136	; 0x88
 8009074:	2240      	movs	r2, #64	; 0x40
 8009076:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 8009078:	6839      	ldr	r1, [r7, #0]
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f7ff fa55 	bl	800852a <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009086:	2b00      	cmp	r3, #0
 8009088:	d010      	beq.n	80090ac <HRTIM_Timer_ISR+0x160>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009090:	2b00      	cmp	r3, #0
 8009092:	d00b      	beq.n	80090ac <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	01db      	lsls	r3, r3, #7
 800909c:	4413      	add	r3, r2
 800909e:	3388      	adds	r3, #136	; 0x88
 80090a0:	2280      	movs	r2, #128	; 0x80
 80090a2:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 80090a4:	6839      	ldr	r1, [r7, #0]
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f7ff fa81 	bl	80085ae <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d011      	beq.n	80090da <HRTIM_Timer_ISR+0x18e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d00c      	beq.n	80090da <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	01db      	lsls	r3, r3, #7
 80090c8:	4413      	add	r3, r2
 80090ca:	3388      	adds	r3, #136	; 0x88
 80090cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80090d0:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 80090d2:	6839      	ldr	r1, [r7, #0]
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f7ff fa75 	bl	80085c4 <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d011      	beq.n	8009108 <HRTIM_Timer_ISR+0x1bc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d00c      	beq.n	8009108 <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	01db      	lsls	r3, r3, #7
 80090f6:	4413      	add	r3, r2
 80090f8:	3388      	adds	r3, #136	; 0x88
 80090fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090fe:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 8009100:	6839      	ldr	r1, [r7, #0]
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f7ff fa7f 	bl	8008606 <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800910e:	2b00      	cmp	r3, #0
 8009110:	d011      	beq.n	8009136 <HRTIM_Timer_ISR+0x1ea>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00c      	beq.n	8009136 <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	01db      	lsls	r3, r3, #7
 8009124:	4413      	add	r3, r2
 8009126:	3388      	adds	r3, #136	; 0x88
 8009128:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800912c:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 800912e:	6839      	ldr	r1, [r7, #0]
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f7ff fa73 	bl	800861c <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800913c:	2b00      	cmp	r3, #0
 800913e:	d011      	beq.n	8009164 <HRTIM_Timer_ISR+0x218>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009146:	2b00      	cmp	r3, #0
 8009148:	d00c      	beq.n	8009164 <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	01db      	lsls	r3, r3, #7
 8009152:	4413      	add	r3, r2
 8009154:	3388      	adds	r3, #136	; 0x88
 8009156:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800915a:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 800915c:	6839      	ldr	r1, [r7, #0]
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f7ff fa67 	bl	8008632 <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800916a:	2b00      	cmp	r3, #0
 800916c:	d011      	beq.n	8009192 <HRTIM_Timer_ISR+0x246>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009174:	2b00      	cmp	r3, #0
 8009176:	d00c      	beq.n	8009192 <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	01db      	lsls	r3, r3, #7
 8009180:	4413      	add	r3, r2
 8009182:	3388      	adds	r3, #136	; 0x88
 8009184:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009188:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 800918a:	6839      	ldr	r1, [r7, #0]
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f7ff fa5b 	bl	8008648 <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009198:	2b00      	cmp	r3, #0
 800919a:	d011      	beq.n	80091c0 <HRTIM_Timer_ISR+0x274>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d00c      	beq.n	80091c0 <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	01db      	lsls	r3, r3, #7
 80091ae:	4413      	add	r3, r2
 80091b0:	3388      	adds	r3, #136	; 0x88
 80091b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80091b6:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 80091b8:	6839      	ldr	r1, [r7, #0]
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f7ff fa18 	bl	80085f0 <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d011      	beq.n	80091ee <HRTIM_Timer_ISR+0x2a2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00c      	beq.n	80091ee <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	01db      	lsls	r3, r3, #7
 80091dc:	4413      	add	r3, r2
 80091de:	3388      	adds	r3, #136	; 0x88
 80091e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80091e4:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 80091e6:	6839      	ldr	r1, [r7, #0]
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f7ff f9f6 	bl	80085da <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80091ee:	bf00      	nop
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
	...

080091f8 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d101      	bne.n	800920a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8009206:	2301      	movs	r3, #1
 8009208:	e097      	b.n	800933a <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009216:	b2db      	uxtb	r3, r3
 8009218:	2b00      	cmp	r3, #0
 800921a:	d106      	bne.n	800922a <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f7fa f9fd 	bl	8003624 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2202      	movs	r2, #2
 800922e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	68db      	ldr	r3, [r3, #12]
 8009238:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	2b01      	cmp	r3, #1
 8009240:	d004      	beq.n	800924c <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009246:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800924a:	d103      	bne.n	8009254 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f023 031e 	bic.w	r3, r3, #30
 8009252:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	695b      	ldr	r3, [r3, #20]
 8009258:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800925c:	4293      	cmp	r3, r2
 800925e:	d003      	beq.n	8009268 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8009260:	68fa      	ldr	r2, [r7, #12]
 8009262:	4b38      	ldr	r3, [pc, #224]	; (8009344 <HAL_LPTIM_Init+0x14c>)
 8009264:	4013      	ands	r3, r2
 8009266:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8009268:	68fa      	ldr	r2, [r7, #12]
 800926a:	4b37      	ldr	r3, [pc, #220]	; (8009348 <HAL_LPTIM_Init+0x150>)
 800926c:	4013      	ands	r3, r2
 800926e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8009278:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800927e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8009284:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800928a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800928c:	68fa      	ldr	r2, [r7, #12]
 800928e:	4313      	orrs	r3, r2
 8009290:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d107      	bne.n	80092aa <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80092a2:	4313      	orrs	r3, r2
 80092a4:	68fa      	ldr	r2, [r7, #12]
 80092a6:	4313      	orrs	r3, r2
 80092a8:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d004      	beq.n	80092bc <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80092ba:	d107      	bne.n	80092cc <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80092c4:	4313      	orrs	r3, r2
 80092c6:	68fa      	ldr	r2, [r7, #12]
 80092c8:	4313      	orrs	r3, r2
 80092ca:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	695b      	ldr	r3, [r3, #20]
 80092d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d00a      	beq.n	80092ee <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80092e0:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80092e6:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80092e8:	68fa      	ldr	r2, [r7, #12]
 80092ea:	4313      	orrs	r3, r2
 80092ec:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	68fa      	ldr	r2, [r7, #12]
 80092f4:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a14      	ldr	r2, [pc, #80]	; (800934c <HAL_LPTIM_Init+0x154>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d004      	beq.n	800930a <HAL_LPTIM_Init+0x112>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a12      	ldr	r2, [pc, #72]	; (8009350 <HAL_LPTIM_Init+0x158>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d108      	bne.n	800931c <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	430a      	orrs	r2, r1
 8009318:	625a      	str	r2, [r3, #36]	; 0x24
 800931a:	e009      	b.n	8009330 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a0c      	ldr	r2, [pc, #48]	; (8009354 <HAL_LPTIM_Init+0x15c>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d104      	bne.n	8009330 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800932e:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2201      	movs	r2, #1
 8009334:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	ffff1f3f 	.word	0xffff1f3f
 8009348:	ff19f1fe 	.word	0xff19f1fe
 800934c:	40002400 	.word	0x40002400
 8009350:	58002400 	.word	0x58002400
 8009354:	58002800 	.word	0x58002800

08009358 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2202      	movs	r2, #2
 8009366:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	2b01      	cmp	r3, #1
 8009370:	d00c      	beq.n	800938c <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009376:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800937a:	d107      	bne.n	800938c <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	68da      	ldr	r2, [r3, #12]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 800938a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	691a      	ldr	r2, [r3, #16]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f042 0201 	orr.w	r2, r2, #1
 800939a:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2210      	movs	r2, #16
 80093a2:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	683a      	ldr	r2, [r7, #0]
 80093aa:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80093ac:	2110      	movs	r1, #16
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 f91e 	bl	80095f0 <LPTIM_WaitForFlag>
 80093b4:	4603      	mov	r3, r0
 80093b6:	2b03      	cmp	r3, #3
 80093b8:	d101      	bne.n	80093be <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 80093ba:	2303      	movs	r3, #3
 80093bc:	e02f      	b.n	800941e <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 f946 	bl	8009650 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 f905 	bl	80095d4 <HAL_LPTIM_GetState>
 80093ca:	4603      	mov	r3, r0
 80093cc:	2b03      	cmp	r3, #3
 80093ce:	d101      	bne.n	80093d4 <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 80093d0:	2303      	movs	r3, #3
 80093d2:	e024      	b.n	800941e <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	689a      	ldr	r2, [r3, #8]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f042 0210 	orr.w	r2, r2, #16
 80093e2:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	689a      	ldr	r2, [r3, #8]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f042 0202 	orr.w	r2, r2, #2
 80093f2:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	691a      	ldr	r2, [r3, #16]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f042 0201 	orr.w	r2, r2, #1
 8009402:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	691a      	ldr	r2, [r3, #16]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f042 0204 	orr.w	r2, r2, #4
 8009412:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2201      	movs	r2, #1
 8009418:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 800941c:	2300      	movs	r3, #0
}
 800941e:	4618      	mov	r0, r3
 8009420:	3708      	adds	r7, #8
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}

08009426 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8009426:	b580      	push	{r7, lr}
 8009428:	b082      	sub	sp, #8
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f003 0301 	and.w	r3, r3, #1
 8009438:	2b01      	cmp	r3, #1
 800943a:	d10d      	bne.n	8009458 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	f003 0301 	and.w	r3, r3, #1
 8009446:	2b01      	cmp	r3, #1
 8009448:	d106      	bne.n	8009458 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2201      	movs	r2, #1
 8009450:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 f882 	bl	800955c <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f003 0302 	and.w	r3, r3, #2
 8009462:	2b02      	cmp	r3, #2
 8009464:	d10d      	bne.n	8009482 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	f003 0302 	and.w	r3, r3, #2
 8009470:	2b02      	cmp	r3, #2
 8009472:	d106      	bne.n	8009482 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2202      	movs	r2, #2
 800947a:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f7fa fbc7 	bl	8003c10 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f003 0304 	and.w	r3, r3, #4
 800948c:	2b04      	cmp	r3, #4
 800948e:	d10d      	bne.n	80094ac <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	f003 0304 	and.w	r3, r3, #4
 800949a:	2b04      	cmp	r3, #4
 800949c:	d106      	bne.n	80094ac <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	2204      	movs	r2, #4
 80094a4:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 f862 	bl	8009570 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f003 0308 	and.w	r3, r3, #8
 80094b6:	2b08      	cmp	r3, #8
 80094b8:	d10d      	bne.n	80094d6 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	f003 0308 	and.w	r3, r3, #8
 80094c4:	2b08      	cmp	r3, #8
 80094c6:	d106      	bne.n	80094d6 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	2208      	movs	r2, #8
 80094ce:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 f857 	bl	8009584 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f003 0310 	and.w	r3, r3, #16
 80094e0:	2b10      	cmp	r3, #16
 80094e2:	d10d      	bne.n	8009500 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	f003 0310 	and.w	r3, r3, #16
 80094ee:	2b10      	cmp	r3, #16
 80094f0:	d106      	bne.n	8009500 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2210      	movs	r2, #16
 80094f8:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 f84c 	bl	8009598 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f003 0320 	and.w	r3, r3, #32
 800950a:	2b20      	cmp	r3, #32
 800950c:	d10d      	bne.n	800952a <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	f003 0320 	and.w	r3, r3, #32
 8009518:	2b20      	cmp	r3, #32
 800951a:	d106      	bne.n	800952a <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2220      	movs	r2, #32
 8009522:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 f841 	bl	80095ac <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009534:	2b40      	cmp	r3, #64	; 0x40
 8009536:	d10d      	bne.n	8009554 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009542:	2b40      	cmp	r3, #64	; 0x40
 8009544:	d106      	bne.n	8009554 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2240      	movs	r2, #64	; 0x40
 800954c:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 f836 	bl	80095c0 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8009554:	bf00      	nop
 8009556:	3708      	adds	r7, #8
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8009564:	bf00      	nop
 8009566:	370c      	adds	r7, #12
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr

08009570 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009570:	b480      	push	{r7}
 8009572:	b083      	sub	sp, #12
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8009578:	bf00      	nop
 800957a:	370c      	adds	r7, #12
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 800958c:	bf00      	nop
 800958e:	370c      	adds	r7, #12
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr

08009598 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009598:	b480      	push	{r7}
 800959a:	b083      	sub	sp, #12
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 80095a0:	bf00      	nop
 80095a2:	370c      	adds	r7, #12
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 80095b4:	bf00      	nop
 80095b6:	370c      	adds	r7, #12
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 80095c8:	bf00      	nop
 80095ca:	370c      	adds	r7, #12
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80095e2:	b2db      	uxtb	r3, r3
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	370c      	adds	r7, #12
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr

080095f0 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b085      	sub	sp, #20
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 80095fa:	2300      	movs	r3, #0
 80095fc:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80095fe:	4b12      	ldr	r3, [pc, #72]	; (8009648 <LPTIM_WaitForFlag+0x58>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a12      	ldr	r2, [pc, #72]	; (800964c <LPTIM_WaitForFlag+0x5c>)
 8009604:	fba2 2303 	umull	r2, r3, r2, r3
 8009608:	0b9b      	lsrs	r3, r3, #14
 800960a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800960e:	fb02 f303 	mul.w	r3, r2, r3
 8009612:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	3b01      	subs	r3, #1
 8009618:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d101      	bne.n	8009624 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8009620:	2303      	movs	r3, #3
 8009622:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	4013      	ands	r3, r2
 800962e:	683a      	ldr	r2, [r7, #0]
 8009630:	429a      	cmp	r2, r3
 8009632:	d002      	beq.n	800963a <LPTIM_WaitForFlag+0x4a>
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d1ec      	bne.n	8009614 <LPTIM_WaitForFlag+0x24>

  return result;
 800963a:	7bfb      	ldrb	r3, [r7, #15]
}
 800963c:	4618      	mov	r0, r3
 800963e:	3714      	adds	r7, #20
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr
 8009648:	20000010 	.word	0x20000010
 800964c:	d1b71759 	.word	0xd1b71759

08009650 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b08c      	sub	sp, #48	; 0x30
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8009658:	2300      	movs	r3, #0
 800965a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800965c:	f3ef 8310 	mrs	r3, PRIMASK
 8009660:	60fb      	str	r3, [r7, #12]
  return(result);
 8009662:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8009664:	62bb      	str	r3, [r7, #40]	; 0x28
 8009666:	2301      	movs	r3, #1
 8009668:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	f383 8810 	msr	PRIMASK, r3
}
 8009670:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a81      	ldr	r2, [pc, #516]	; (800987c <LPTIM_Disable+0x22c>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d02d      	beq.n	80096d8 <LPTIM_Disable+0x88>
 800967c:	4a7f      	ldr	r2, [pc, #508]	; (800987c <LPTIM_Disable+0x22c>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d830      	bhi.n	80096e4 <LPTIM_Disable+0x94>
 8009682:	4a7f      	ldr	r2, [pc, #508]	; (8009880 <LPTIM_Disable+0x230>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d021      	beq.n	80096cc <LPTIM_Disable+0x7c>
 8009688:	4a7d      	ldr	r2, [pc, #500]	; (8009880 <LPTIM_Disable+0x230>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d82a      	bhi.n	80096e4 <LPTIM_Disable+0x94>
 800968e:	4a7d      	ldr	r2, [pc, #500]	; (8009884 <LPTIM_Disable+0x234>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d015      	beq.n	80096c0 <LPTIM_Disable+0x70>
 8009694:	4a7b      	ldr	r2, [pc, #492]	; (8009884 <LPTIM_Disable+0x234>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d824      	bhi.n	80096e4 <LPTIM_Disable+0x94>
 800969a:	4a7b      	ldr	r2, [pc, #492]	; (8009888 <LPTIM_Disable+0x238>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d003      	beq.n	80096a8 <LPTIM_Disable+0x58>
 80096a0:	4a7a      	ldr	r2, [pc, #488]	; (800988c <LPTIM_Disable+0x23c>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d006      	beq.n	80096b4 <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 80096a6:	e01d      	b.n	80096e4 <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 80096a8:	4b79      	ldr	r3, [pc, #484]	; (8009890 <LPTIM_Disable+0x240>)
 80096aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096ac:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80096b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80096b2:	e018      	b.n	80096e6 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 80096b4:	4b76      	ldr	r3, [pc, #472]	; (8009890 <LPTIM_Disable+0x240>)
 80096b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096b8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80096bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80096be:	e012      	b.n	80096e6 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 80096c0:	4b73      	ldr	r3, [pc, #460]	; (8009890 <LPTIM_Disable+0x240>)
 80096c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80096c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80096ca:	e00c      	b.n	80096e6 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 80096cc:	4b70      	ldr	r3, [pc, #448]	; (8009890 <LPTIM_Disable+0x240>)
 80096ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096d0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80096d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80096d6:	e006      	b.n	80096e6 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 80096d8:	4b6d      	ldr	r3, [pc, #436]	; (8009890 <LPTIM_Disable+0x240>)
 80096da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80096e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80096e2:	e000      	b.n	80096e6 <LPTIM_Disable+0x96>
      break;
 80096e4:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	695b      	ldr	r3, [r3, #20]
 80096fc:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	699b      	ldr	r3, [r3, #24]
 8009704:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800970c:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4a5a      	ldr	r2, [pc, #360]	; (800987c <LPTIM_Disable+0x22c>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d059      	beq.n	80097cc <LPTIM_Disable+0x17c>
 8009718:	4a58      	ldr	r2, [pc, #352]	; (800987c <LPTIM_Disable+0x22c>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d867      	bhi.n	80097ee <LPTIM_Disable+0x19e>
 800971e:	4a58      	ldr	r2, [pc, #352]	; (8009880 <LPTIM_Disable+0x230>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d042      	beq.n	80097aa <LPTIM_Disable+0x15a>
 8009724:	4a56      	ldr	r2, [pc, #344]	; (8009880 <LPTIM_Disable+0x230>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d861      	bhi.n	80097ee <LPTIM_Disable+0x19e>
 800972a:	4a56      	ldr	r2, [pc, #344]	; (8009884 <LPTIM_Disable+0x234>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d02b      	beq.n	8009788 <LPTIM_Disable+0x138>
 8009730:	4a54      	ldr	r2, [pc, #336]	; (8009884 <LPTIM_Disable+0x234>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d85b      	bhi.n	80097ee <LPTIM_Disable+0x19e>
 8009736:	4a54      	ldr	r2, [pc, #336]	; (8009888 <LPTIM_Disable+0x238>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d003      	beq.n	8009744 <LPTIM_Disable+0xf4>
 800973c:	4a53      	ldr	r2, [pc, #332]	; (800988c <LPTIM_Disable+0x23c>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d011      	beq.n	8009766 <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8009742:	e054      	b.n	80097ee <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8009744:	4b52      	ldr	r3, [pc, #328]	; (8009890 <LPTIM_Disable+0x240>)
 8009746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800974a:	4a51      	ldr	r2, [pc, #324]	; (8009890 <LPTIM_Disable+0x240>)
 800974c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8009754:	4b4e      	ldr	r3, [pc, #312]	; (8009890 <LPTIM_Disable+0x240>)
 8009756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800975a:	4a4d      	ldr	r2, [pc, #308]	; (8009890 <LPTIM_Disable+0x240>)
 800975c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      break;
 8009764:	e044      	b.n	80097f0 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8009766:	4b4a      	ldr	r3, [pc, #296]	; (8009890 <LPTIM_Disable+0x240>)
 8009768:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800976c:	4a48      	ldr	r2, [pc, #288]	; (8009890 <LPTIM_Disable+0x240>)
 800976e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009772:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8009776:	4b46      	ldr	r3, [pc, #280]	; (8009890 <LPTIM_Disable+0x240>)
 8009778:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800977c:	4a44      	ldr	r2, [pc, #272]	; (8009890 <LPTIM_Disable+0x240>)
 800977e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009782:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8009786:	e033      	b.n	80097f0 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8009788:	4b41      	ldr	r3, [pc, #260]	; (8009890 <LPTIM_Disable+0x240>)
 800978a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800978e:	4a40      	ldr	r2, [pc, #256]	; (8009890 <LPTIM_Disable+0x240>)
 8009790:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009794:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8009798:	4b3d      	ldr	r3, [pc, #244]	; (8009890 <LPTIM_Disable+0x240>)
 800979a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800979e:	4a3c      	ldr	r2, [pc, #240]	; (8009890 <LPTIM_Disable+0x240>)
 80097a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80097a4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 80097a8:	e022      	b.n	80097f0 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 80097aa:	4b39      	ldr	r3, [pc, #228]	; (8009890 <LPTIM_Disable+0x240>)
 80097ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80097b0:	4a37      	ldr	r2, [pc, #220]	; (8009890 <LPTIM_Disable+0x240>)
 80097b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80097b6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 80097ba:	4b35      	ldr	r3, [pc, #212]	; (8009890 <LPTIM_Disable+0x240>)
 80097bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80097c0:	4a33      	ldr	r2, [pc, #204]	; (8009890 <LPTIM_Disable+0x240>)
 80097c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80097c6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 80097ca:	e011      	b.n	80097f0 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 80097cc:	4b30      	ldr	r3, [pc, #192]	; (8009890 <LPTIM_Disable+0x240>)
 80097ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80097d2:	4a2f      	ldr	r2, [pc, #188]	; (8009890 <LPTIM_Disable+0x240>)
 80097d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80097d8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 80097dc:	4b2c      	ldr	r3, [pc, #176]	; (8009890 <LPTIM_Disable+0x240>)
 80097de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80097e2:	4a2b      	ldr	r2, [pc, #172]	; (8009890 <LPTIM_Disable+0x240>)
 80097e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097e8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 80097ec:	e000      	b.n	80097f0 <LPTIM_Disable+0x1a0>
      break;
 80097ee:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 80097f0:	69fb      	ldr	r3, [r7, #28]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d103      	bne.n	80097fe <LPTIM_Disable+0x1ae>
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	f000 80d1 	beq.w	80099a0 <LPTIM_Disable+0x350>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a1e      	ldr	r2, [pc, #120]	; (800987c <LPTIM_Disable+0x22c>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d031      	beq.n	800986c <LPTIM_Disable+0x21c>
 8009808:	4a1c      	ldr	r2, [pc, #112]	; (800987c <LPTIM_Disable+0x22c>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d842      	bhi.n	8009894 <LPTIM_Disable+0x244>
 800980e:	4a1c      	ldr	r2, [pc, #112]	; (8009880 <LPTIM_Disable+0x230>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d024      	beq.n	800985e <LPTIM_Disable+0x20e>
 8009814:	4a1a      	ldr	r2, [pc, #104]	; (8009880 <LPTIM_Disable+0x230>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d83c      	bhi.n	8009894 <LPTIM_Disable+0x244>
 800981a:	4a1a      	ldr	r2, [pc, #104]	; (8009884 <LPTIM_Disable+0x234>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d017      	beq.n	8009850 <LPTIM_Disable+0x200>
 8009820:	4a18      	ldr	r2, [pc, #96]	; (8009884 <LPTIM_Disable+0x234>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d836      	bhi.n	8009894 <LPTIM_Disable+0x244>
 8009826:	4a18      	ldr	r2, [pc, #96]	; (8009888 <LPTIM_Disable+0x238>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d003      	beq.n	8009834 <LPTIM_Disable+0x1e4>
 800982c:	4a17      	ldr	r2, [pc, #92]	; (800988c <LPTIM_Disable+0x23c>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d007      	beq.n	8009842 <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8009832:	e02f      	b.n	8009894 <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 8009834:	4b16      	ldr	r3, [pc, #88]	; (8009890 <LPTIM_Disable+0x240>)
 8009836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009838:	4a15      	ldr	r2, [pc, #84]	; (8009890 <LPTIM_Disable+0x240>)
 800983a:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800983e:	6553      	str	r3, [r2, #84]	; 0x54
        break;
 8009840:	e029      	b.n	8009896 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 8009842:	4b13      	ldr	r3, [pc, #76]	; (8009890 <LPTIM_Disable+0x240>)
 8009844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009846:	4a12      	ldr	r2, [pc, #72]	; (8009890 <LPTIM_Disable+0x240>)
 8009848:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800984c:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 800984e:	e022      	b.n	8009896 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 8009850:	4b0f      	ldr	r3, [pc, #60]	; (8009890 <LPTIM_Disable+0x240>)
 8009852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009854:	4a0e      	ldr	r2, [pc, #56]	; (8009890 <LPTIM_Disable+0x240>)
 8009856:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800985a:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 800985c:	e01b      	b.n	8009896 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 800985e:	4b0c      	ldr	r3, [pc, #48]	; (8009890 <LPTIM_Disable+0x240>)
 8009860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009862:	4a0b      	ldr	r2, [pc, #44]	; (8009890 <LPTIM_Disable+0x240>)
 8009864:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009868:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 800986a:	e014      	b.n	8009896 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 800986c:	4b08      	ldr	r3, [pc, #32]	; (8009890 <LPTIM_Disable+0x240>)
 800986e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009870:	4a07      	ldr	r2, [pc, #28]	; (8009890 <LPTIM_Disable+0x240>)
 8009872:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009876:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8009878:	e00d      	b.n	8009896 <LPTIM_Disable+0x246>
 800987a:	bf00      	nop
 800987c:	58003000 	.word	0x58003000
 8009880:	58002c00 	.word	0x58002c00
 8009884:	58002800 	.word	0x58002800
 8009888:	40002400 	.word	0x40002400
 800988c:	58002400 	.word	0x58002400
 8009890:	58024400 	.word	0x58024400
        break;
 8009894:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d01a      	beq.n	80098d2 <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	691a      	ldr	r2, [r3, #16]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f042 0201 	orr.w	r2, r2, #1
 80098aa:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	69fa      	ldr	r2, [r7, #28]
 80098b2:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80098b4:	2108      	movs	r1, #8
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f7ff fe9a 	bl	80095f0 <LPTIM_WaitForFlag>
 80098bc:	4603      	mov	r3, r0
 80098be:	2b03      	cmp	r3, #3
 80098c0:	d103      	bne.n	80098ca <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2203      	movs	r2, #3
 80098c6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	2208      	movs	r2, #8
 80098d0:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d01a      	beq.n	800990e <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	691a      	ldr	r2, [r3, #16]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f042 0201 	orr.w	r2, r2, #1
 80098e6:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	69ba      	ldr	r2, [r7, #24]
 80098ee:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80098f0:	2110      	movs	r1, #16
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f7ff fe7c 	bl	80095f0 <LPTIM_WaitForFlag>
 80098f8:	4603      	mov	r3, r0
 80098fa:	2b03      	cmp	r3, #3
 80098fc:	d103      	bne.n	8009906 <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2203      	movs	r2, #3
 8009902:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	2210      	movs	r2, #16
 800990c:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4a32      	ldr	r2, [pc, #200]	; (80099dc <LPTIM_Disable+0x38c>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d039      	beq.n	800998c <LPTIM_Disable+0x33c>
 8009918:	4a30      	ldr	r2, [pc, #192]	; (80099dc <LPTIM_Disable+0x38c>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d83f      	bhi.n	800999e <LPTIM_Disable+0x34e>
 800991e:	4a30      	ldr	r2, [pc, #192]	; (80099e0 <LPTIM_Disable+0x390>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d02a      	beq.n	800997a <LPTIM_Disable+0x32a>
 8009924:	4a2e      	ldr	r2, [pc, #184]	; (80099e0 <LPTIM_Disable+0x390>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d839      	bhi.n	800999e <LPTIM_Disable+0x34e>
 800992a:	4a2e      	ldr	r2, [pc, #184]	; (80099e4 <LPTIM_Disable+0x394>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d01b      	beq.n	8009968 <LPTIM_Disable+0x318>
 8009930:	4a2c      	ldr	r2, [pc, #176]	; (80099e4 <LPTIM_Disable+0x394>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d833      	bhi.n	800999e <LPTIM_Disable+0x34e>
 8009936:	4a2c      	ldr	r2, [pc, #176]	; (80099e8 <LPTIM_Disable+0x398>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d003      	beq.n	8009944 <LPTIM_Disable+0x2f4>
 800993c:	4a2b      	ldr	r2, [pc, #172]	; (80099ec <LPTIM_Disable+0x39c>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d009      	beq.n	8009956 <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8009942:	e02c      	b.n	800999e <LPTIM_Disable+0x34e>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8009944:	4b2a      	ldr	r3, [pc, #168]	; (80099f0 <LPTIM_Disable+0x3a0>)
 8009946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009948:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800994c:	4928      	ldr	r1, [pc, #160]	; (80099f0 <LPTIM_Disable+0x3a0>)
 800994e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009950:	4313      	orrs	r3, r2
 8009952:	654b      	str	r3, [r1, #84]	; 0x54
        break;
 8009954:	e024      	b.n	80099a0 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8009956:	4b26      	ldr	r3, [pc, #152]	; (80099f0 <LPTIM_Disable+0x3a0>)
 8009958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800995a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800995e:	4924      	ldr	r1, [pc, #144]	; (80099f0 <LPTIM_Disable+0x3a0>)
 8009960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009962:	4313      	orrs	r3, r2
 8009964:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009966:	e01b      	b.n	80099a0 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8009968:	4b21      	ldr	r3, [pc, #132]	; (80099f0 <LPTIM_Disable+0x3a0>)
 800996a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800996c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009970:	491f      	ldr	r1, [pc, #124]	; (80099f0 <LPTIM_Disable+0x3a0>)
 8009972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009974:	4313      	orrs	r3, r2
 8009976:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009978:	e012      	b.n	80099a0 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 800997a:	4b1d      	ldr	r3, [pc, #116]	; (80099f0 <LPTIM_Disable+0x3a0>)
 800997c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800997e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009982:	491b      	ldr	r1, [pc, #108]	; (80099f0 <LPTIM_Disable+0x3a0>)
 8009984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009986:	4313      	orrs	r3, r2
 8009988:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 800998a:	e009      	b.n	80099a0 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 800998c:	4b18      	ldr	r3, [pc, #96]	; (80099f0 <LPTIM_Disable+0x3a0>)
 800998e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009990:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009994:	4916      	ldr	r1, [pc, #88]	; (80099f0 <LPTIM_Disable+0x3a0>)
 8009996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009998:	4313      	orrs	r3, r2
 800999a:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 800999c:	e000      	b.n	80099a0 <LPTIM_Disable+0x350>
        break;
 800999e:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	691a      	ldr	r2, [r3, #16]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f022 0201 	bic.w	r2, r2, #1
 80099ae:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099b6:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	6a3a      	ldr	r2, [r7, #32]
 80099be:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	697a      	ldr	r2, [r7, #20]
 80099c6:	625a      	str	r2, [r3, #36]	; 0x24
 80099c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ca:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	f383 8810 	msr	PRIMASK, r3
}
 80099d2:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80099d4:	bf00      	nop
 80099d6:	3730      	adds	r7, #48	; 0x30
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	58003000 	.word	0x58003000
 80099e0:	58002c00 	.word	0x58002c00
 80099e4:	58002800 	.word	0x58002800
 80099e8:	40002400 	.word	0x40002400
 80099ec:	58002400 	.word	0x58002400
 80099f0:	58024400 	.word	0x58024400

080099f4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 80099f4:	b480      	push	{r7}
 80099f6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 80099f8:	4b05      	ldr	r3, [pc, #20]	; (8009a10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a04      	ldr	r2, [pc, #16]	; (8009a10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80099fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a02:	6013      	str	r3, [r2, #0]
}
 8009a04:	bf00      	nop
 8009a06:	46bd      	mov	sp, r7
 8009a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0c:	4770      	bx	lr
 8009a0e:	bf00      	nop
 8009a10:	58024800 	.word	0x58024800

08009a14 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009a1c:	4b19      	ldr	r3, [pc, #100]	; (8009a84 <HAL_PWREx_ConfigSupply+0x70>)
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	f003 0304 	and.w	r3, r3, #4
 8009a24:	2b04      	cmp	r3, #4
 8009a26:	d00a      	beq.n	8009a3e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009a28:	4b16      	ldr	r3, [pc, #88]	; (8009a84 <HAL_PWREx_ConfigSupply+0x70>)
 8009a2a:	68db      	ldr	r3, [r3, #12]
 8009a2c:	f003 0307 	and.w	r3, r3, #7
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d001      	beq.n	8009a3a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009a36:	2301      	movs	r3, #1
 8009a38:	e01f      	b.n	8009a7a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	e01d      	b.n	8009a7a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009a3e:	4b11      	ldr	r3, [pc, #68]	; (8009a84 <HAL_PWREx_ConfigSupply+0x70>)
 8009a40:	68db      	ldr	r3, [r3, #12]
 8009a42:	f023 0207 	bic.w	r2, r3, #7
 8009a46:	490f      	ldr	r1, [pc, #60]	; (8009a84 <HAL_PWREx_ConfigSupply+0x70>)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009a4e:	f7fa fafd 	bl	800404c <HAL_GetTick>
 8009a52:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009a54:	e009      	b.n	8009a6a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009a56:	f7fa faf9 	bl	800404c <HAL_GetTick>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	1ad3      	subs	r3, r2, r3
 8009a60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a64:	d901      	bls.n	8009a6a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009a66:	2301      	movs	r3, #1
 8009a68:	e007      	b.n	8009a7a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009a6a:	4b06      	ldr	r3, [pc, #24]	; (8009a84 <HAL_PWREx_ConfigSupply+0x70>)
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a76:	d1ee      	bne.n	8009a56 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009a78:	2300      	movs	r3, #0
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3710      	adds	r7, #16
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop
 8009a84:	58024800 	.word	0x58024800

08009a88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b08c      	sub	sp, #48	; 0x30
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d102      	bne.n	8009a9c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009a96:	2301      	movs	r3, #1
 8009a98:	f000 bc48 	b.w	800a32c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f003 0301 	and.w	r3, r3, #1
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	f000 8088 	beq.w	8009bba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009aaa:	4b99      	ldr	r3, [pc, #612]	; (8009d10 <HAL_RCC_OscConfig+0x288>)
 8009aac:	691b      	ldr	r3, [r3, #16]
 8009aae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009ab4:	4b96      	ldr	r3, [pc, #600]	; (8009d10 <HAL_RCC_OscConfig+0x288>)
 8009ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ab8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009abc:	2b10      	cmp	r3, #16
 8009abe:	d007      	beq.n	8009ad0 <HAL_RCC_OscConfig+0x48>
 8009ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac2:	2b18      	cmp	r3, #24
 8009ac4:	d111      	bne.n	8009aea <HAL_RCC_OscConfig+0x62>
 8009ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac8:	f003 0303 	and.w	r3, r3, #3
 8009acc:	2b02      	cmp	r3, #2
 8009ace:	d10c      	bne.n	8009aea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ad0:	4b8f      	ldr	r3, [pc, #572]	; (8009d10 <HAL_RCC_OscConfig+0x288>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d06d      	beq.n	8009bb8 <HAL_RCC_OscConfig+0x130>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d169      	bne.n	8009bb8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	f000 bc21 	b.w	800a32c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009af2:	d106      	bne.n	8009b02 <HAL_RCC_OscConfig+0x7a>
 8009af4:	4b86      	ldr	r3, [pc, #536]	; (8009d10 <HAL_RCC_OscConfig+0x288>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a85      	ldr	r2, [pc, #532]	; (8009d10 <HAL_RCC_OscConfig+0x288>)
 8009afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009afe:	6013      	str	r3, [r2, #0]
 8009b00:	e02e      	b.n	8009b60 <HAL_RCC_OscConfig+0xd8>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d10c      	bne.n	8009b24 <HAL_RCC_OscConfig+0x9c>
 8009b0a:	4b81      	ldr	r3, [pc, #516]	; (8009d10 <HAL_RCC_OscConfig+0x288>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a80      	ldr	r2, [pc, #512]	; (8009d10 <HAL_RCC_OscConfig+0x288>)
 8009b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b14:	6013      	str	r3, [r2, #0]
 8009b16:	4b7e      	ldr	r3, [pc, #504]	; (8009d10 <HAL_RCC_OscConfig+0x288>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a7d      	ldr	r2, [pc, #500]	; (8009d10 <HAL_RCC_OscConfig+0x288>)
 8009b1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b20:	6013      	str	r3, [r2, #0]
 8009b22:	e01d      	b.n	8009b60 <HAL_RCC_OscConfig+0xd8>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009b2c:	d10c      	bne.n	8009b48 <HAL_RCC_OscConfig+0xc0>
 8009b2e:	4b78      	ldr	r3, [pc, #480]	; (8009d10 <HAL_RCC_OscConfig+0x288>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a77      	ldr	r2, [pc, #476]	; (8009d10 <HAL_RCC_OscConfig+0x288>)
 8009b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009b38:	6013      	str	r3, [r2, #0]
 8009b3a:	4b75      	ldr	r3, [pc, #468]	; (8009d10 <HAL_RCC_OscConfig+0x288>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a74      	ldr	r2, [pc, #464]	; (8009d10 <HAL_RCC_OscConfig+0x288>)
 8009b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b44:	6013      	str	r3, [r2, #0]
 8009b46:	e00b      	b.n	8009b60 <HAL_RCC_OscConfig+0xd8>
 8009b48:	4b71      	ldr	r3, [pc, #452]	; (8009d10 <HAL_RCC_OscConfig+0x288>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a70      	ldr	r2, [pc, #448]	; (8009d10 <HAL_RCC_OscConfig+0x288>)
 8009b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b52:	6013      	str	r3, [r2, #0]
 8009b54:	4b6e      	ldr	r3, [pc, #440]	; (8009d10 <HAL_RCC_OscConfig+0x288>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a6d      	ldr	r2, [pc, #436]	; (8009d10 <HAL_RCC_OscConfig+0x288>)
 8009b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d013      	beq.n	8009b90 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b68:	f7fa fa70 	bl	800404c <HAL_GetTick>
 8009b6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009b6e:	e008      	b.n	8009b82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009b70:	f7fa fa6c 	bl	800404c <HAL_GetTick>
 8009b74:	4602      	mov	r2, r0
 8009b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b78:	1ad3      	subs	r3, r2, r3
 8009b7a:	2b64      	cmp	r3, #100	; 0x64
 8009b7c:	d901      	bls.n	8009b82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009b7e:	2303      	movs	r3, #3
 8009b80:	e3d4      	b.n	800a32c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009b82:	4b63      	ldr	r3, [pc, #396]	; (8009d10 <HAL_RCC_OscConfig+0x288>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d0f0      	beq.n	8009b70 <HAL_RCC_OscConfig+0xe8>
 8009b8e:	e014      	b.n	8009bba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b90:	f7fa fa5c 	bl	800404c <HAL_GetTick>
 8009b94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009b96:	e008      	b.n	8009baa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009b98:	f7fa fa58 	bl	800404c <HAL_GetTick>
 8009b9c:	4602      	mov	r2, r0
 8009b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba0:	1ad3      	subs	r3, r2, r3
 8009ba2:	2b64      	cmp	r3, #100	; 0x64
 8009ba4:	d901      	bls.n	8009baa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009ba6:	2303      	movs	r3, #3
 8009ba8:	e3c0      	b.n	800a32c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009baa:	4b59      	ldr	r3, [pc, #356]	; (8009d10 <HAL_RCC_OscConfig+0x288>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d1f0      	bne.n	8009b98 <HAL_RCC_OscConfig+0x110>
 8009bb6:	e000      	b.n	8009bba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f003 0302 	and.w	r3, r3, #2
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	f000 80ca 	beq.w	8009d5c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009bc8:	4b51      	ldr	r3, [pc, #324]	; (8009d10 <HAL_RCC_OscConfig+0x288>)
 8009bca:	691b      	ldr	r3, [r3, #16]
 8009bcc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009bd0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009bd2:	4b4f      	ldr	r3, [pc, #316]	; (8009d10 <HAL_RCC_OscConfig+0x288>)
 8009bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009bd8:	6a3b      	ldr	r3, [r7, #32]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d007      	beq.n	8009bee <HAL_RCC_OscConfig+0x166>
 8009bde:	6a3b      	ldr	r3, [r7, #32]
 8009be0:	2b18      	cmp	r3, #24
 8009be2:	d156      	bne.n	8009c92 <HAL_RCC_OscConfig+0x20a>
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	f003 0303 	and.w	r3, r3, #3
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d151      	bne.n	8009c92 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009bee:	4b48      	ldr	r3, [pc, #288]	; (8009d10 <HAL_RCC_OscConfig+0x288>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f003 0304 	and.w	r3, r3, #4
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d005      	beq.n	8009c06 <HAL_RCC_OscConfig+0x17e>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	68db      	ldr	r3, [r3, #12]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d101      	bne.n	8009c06 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8009c02:	2301      	movs	r3, #1
 8009c04:	e392      	b.n	800a32c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009c06:	4b42      	ldr	r3, [pc, #264]	; (8009d10 <HAL_RCC_OscConfig+0x288>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f023 0219 	bic.w	r2, r3, #25
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	68db      	ldr	r3, [r3, #12]
 8009c12:	493f      	ldr	r1, [pc, #252]	; (8009d10 <HAL_RCC_OscConfig+0x288>)
 8009c14:	4313      	orrs	r3, r2
 8009c16:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c18:	f7fa fa18 	bl	800404c <HAL_GetTick>
 8009c1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c1e:	e008      	b.n	8009c32 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c20:	f7fa fa14 	bl	800404c <HAL_GetTick>
 8009c24:	4602      	mov	r2, r0
 8009c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c28:	1ad3      	subs	r3, r2, r3
 8009c2a:	2b02      	cmp	r3, #2
 8009c2c:	d901      	bls.n	8009c32 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009c2e:	2303      	movs	r3, #3
 8009c30:	e37c      	b.n	800a32c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c32:	4b37      	ldr	r3, [pc, #220]	; (8009d10 <HAL_RCC_OscConfig+0x288>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f003 0304 	and.w	r3, r3, #4
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d0f0      	beq.n	8009c20 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c3e:	f7fa fa35 	bl	80040ac <HAL_GetREVID>
 8009c42:	4603      	mov	r3, r0
 8009c44:	f241 0203 	movw	r2, #4099	; 0x1003
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d817      	bhi.n	8009c7c <HAL_RCC_OscConfig+0x1f4>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	691b      	ldr	r3, [r3, #16]
 8009c50:	2b40      	cmp	r3, #64	; 0x40
 8009c52:	d108      	bne.n	8009c66 <HAL_RCC_OscConfig+0x1de>
 8009c54:	4b2e      	ldr	r3, [pc, #184]	; (8009d10 <HAL_RCC_OscConfig+0x288>)
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009c5c:	4a2c      	ldr	r2, [pc, #176]	; (8009d10 <HAL_RCC_OscConfig+0x288>)
 8009c5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c62:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c64:	e07a      	b.n	8009d5c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c66:	4b2a      	ldr	r3, [pc, #168]	; (8009d10 <HAL_RCC_OscConfig+0x288>)
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	691b      	ldr	r3, [r3, #16]
 8009c72:	031b      	lsls	r3, r3, #12
 8009c74:	4926      	ldr	r1, [pc, #152]	; (8009d10 <HAL_RCC_OscConfig+0x288>)
 8009c76:	4313      	orrs	r3, r2
 8009c78:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c7a:	e06f      	b.n	8009d5c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c7c:	4b24      	ldr	r3, [pc, #144]	; (8009d10 <HAL_RCC_OscConfig+0x288>)
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	691b      	ldr	r3, [r3, #16]
 8009c88:	061b      	lsls	r3, r3, #24
 8009c8a:	4921      	ldr	r1, [pc, #132]	; (8009d10 <HAL_RCC_OscConfig+0x288>)
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c90:	e064      	b.n	8009d5c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d047      	beq.n	8009d2a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009c9a:	4b1d      	ldr	r3, [pc, #116]	; (8009d10 <HAL_RCC_OscConfig+0x288>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f023 0219 	bic.w	r2, r3, #25
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	68db      	ldr	r3, [r3, #12]
 8009ca6:	491a      	ldr	r1, [pc, #104]	; (8009d10 <HAL_RCC_OscConfig+0x288>)
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cac:	f7fa f9ce 	bl	800404c <HAL_GetTick>
 8009cb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009cb2:	e008      	b.n	8009cc6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009cb4:	f7fa f9ca 	bl	800404c <HAL_GetTick>
 8009cb8:	4602      	mov	r2, r0
 8009cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cbc:	1ad3      	subs	r3, r2, r3
 8009cbe:	2b02      	cmp	r3, #2
 8009cc0:	d901      	bls.n	8009cc6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8009cc2:	2303      	movs	r3, #3
 8009cc4:	e332      	b.n	800a32c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009cc6:	4b12      	ldr	r3, [pc, #72]	; (8009d10 <HAL_RCC_OscConfig+0x288>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f003 0304 	and.w	r3, r3, #4
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d0f0      	beq.n	8009cb4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009cd2:	f7fa f9eb 	bl	80040ac <HAL_GetREVID>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	f241 0203 	movw	r2, #4099	; 0x1003
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d819      	bhi.n	8009d14 <HAL_RCC_OscConfig+0x28c>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	691b      	ldr	r3, [r3, #16]
 8009ce4:	2b40      	cmp	r3, #64	; 0x40
 8009ce6:	d108      	bne.n	8009cfa <HAL_RCC_OscConfig+0x272>
 8009ce8:	4b09      	ldr	r3, [pc, #36]	; (8009d10 <HAL_RCC_OscConfig+0x288>)
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009cf0:	4a07      	ldr	r2, [pc, #28]	; (8009d10 <HAL_RCC_OscConfig+0x288>)
 8009cf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cf6:	6053      	str	r3, [r2, #4]
 8009cf8:	e030      	b.n	8009d5c <HAL_RCC_OscConfig+0x2d4>
 8009cfa:	4b05      	ldr	r3, [pc, #20]	; (8009d10 <HAL_RCC_OscConfig+0x288>)
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	691b      	ldr	r3, [r3, #16]
 8009d06:	031b      	lsls	r3, r3, #12
 8009d08:	4901      	ldr	r1, [pc, #4]	; (8009d10 <HAL_RCC_OscConfig+0x288>)
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	604b      	str	r3, [r1, #4]
 8009d0e:	e025      	b.n	8009d5c <HAL_RCC_OscConfig+0x2d4>
 8009d10:	58024400 	.word	0x58024400
 8009d14:	4b9a      	ldr	r3, [pc, #616]	; (8009f80 <HAL_RCC_OscConfig+0x4f8>)
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	691b      	ldr	r3, [r3, #16]
 8009d20:	061b      	lsls	r3, r3, #24
 8009d22:	4997      	ldr	r1, [pc, #604]	; (8009f80 <HAL_RCC_OscConfig+0x4f8>)
 8009d24:	4313      	orrs	r3, r2
 8009d26:	604b      	str	r3, [r1, #4]
 8009d28:	e018      	b.n	8009d5c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009d2a:	4b95      	ldr	r3, [pc, #596]	; (8009f80 <HAL_RCC_OscConfig+0x4f8>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a94      	ldr	r2, [pc, #592]	; (8009f80 <HAL_RCC_OscConfig+0x4f8>)
 8009d30:	f023 0301 	bic.w	r3, r3, #1
 8009d34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d36:	f7fa f989 	bl	800404c <HAL_GetTick>
 8009d3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009d3c:	e008      	b.n	8009d50 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d3e:	f7fa f985 	bl	800404c <HAL_GetTick>
 8009d42:	4602      	mov	r2, r0
 8009d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d46:	1ad3      	subs	r3, r2, r3
 8009d48:	2b02      	cmp	r3, #2
 8009d4a:	d901      	bls.n	8009d50 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8009d4c:	2303      	movs	r3, #3
 8009d4e:	e2ed      	b.n	800a32c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009d50:	4b8b      	ldr	r3, [pc, #556]	; (8009f80 <HAL_RCC_OscConfig+0x4f8>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f003 0304 	and.w	r3, r3, #4
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d1f0      	bne.n	8009d3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f003 0310 	and.w	r3, r3, #16
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	f000 80a9 	beq.w	8009ebc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d6a:	4b85      	ldr	r3, [pc, #532]	; (8009f80 <HAL_RCC_OscConfig+0x4f8>)
 8009d6c:	691b      	ldr	r3, [r3, #16]
 8009d6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d72:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009d74:	4b82      	ldr	r3, [pc, #520]	; (8009f80 <HAL_RCC_OscConfig+0x4f8>)
 8009d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d78:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009d7a:	69bb      	ldr	r3, [r7, #24]
 8009d7c:	2b08      	cmp	r3, #8
 8009d7e:	d007      	beq.n	8009d90 <HAL_RCC_OscConfig+0x308>
 8009d80:	69bb      	ldr	r3, [r7, #24]
 8009d82:	2b18      	cmp	r3, #24
 8009d84:	d13a      	bne.n	8009dfc <HAL_RCC_OscConfig+0x374>
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	f003 0303 	and.w	r3, r3, #3
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d135      	bne.n	8009dfc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009d90:	4b7b      	ldr	r3, [pc, #492]	; (8009f80 <HAL_RCC_OscConfig+0x4f8>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d005      	beq.n	8009da8 <HAL_RCC_OscConfig+0x320>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	69db      	ldr	r3, [r3, #28]
 8009da0:	2b80      	cmp	r3, #128	; 0x80
 8009da2:	d001      	beq.n	8009da8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009da4:	2301      	movs	r3, #1
 8009da6:	e2c1      	b.n	800a32c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009da8:	f7fa f980 	bl	80040ac <HAL_GetREVID>
 8009dac:	4603      	mov	r3, r0
 8009dae:	f241 0203 	movw	r2, #4099	; 0x1003
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d817      	bhi.n	8009de6 <HAL_RCC_OscConfig+0x35e>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a1b      	ldr	r3, [r3, #32]
 8009dba:	2b20      	cmp	r3, #32
 8009dbc:	d108      	bne.n	8009dd0 <HAL_RCC_OscConfig+0x348>
 8009dbe:	4b70      	ldr	r3, [pc, #448]	; (8009f80 <HAL_RCC_OscConfig+0x4f8>)
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009dc6:	4a6e      	ldr	r2, [pc, #440]	; (8009f80 <HAL_RCC_OscConfig+0x4f8>)
 8009dc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009dcc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009dce:	e075      	b.n	8009ebc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009dd0:	4b6b      	ldr	r3, [pc, #428]	; (8009f80 <HAL_RCC_OscConfig+0x4f8>)
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6a1b      	ldr	r3, [r3, #32]
 8009ddc:	069b      	lsls	r3, r3, #26
 8009dde:	4968      	ldr	r1, [pc, #416]	; (8009f80 <HAL_RCC_OscConfig+0x4f8>)
 8009de0:	4313      	orrs	r3, r2
 8009de2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009de4:	e06a      	b.n	8009ebc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009de6:	4b66      	ldr	r3, [pc, #408]	; (8009f80 <HAL_RCC_OscConfig+0x4f8>)
 8009de8:	68db      	ldr	r3, [r3, #12]
 8009dea:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6a1b      	ldr	r3, [r3, #32]
 8009df2:	061b      	lsls	r3, r3, #24
 8009df4:	4962      	ldr	r1, [pc, #392]	; (8009f80 <HAL_RCC_OscConfig+0x4f8>)
 8009df6:	4313      	orrs	r3, r2
 8009df8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009dfa:	e05f      	b.n	8009ebc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	69db      	ldr	r3, [r3, #28]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d042      	beq.n	8009e8a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009e04:	4b5e      	ldr	r3, [pc, #376]	; (8009f80 <HAL_RCC_OscConfig+0x4f8>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a5d      	ldr	r2, [pc, #372]	; (8009f80 <HAL_RCC_OscConfig+0x4f8>)
 8009e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e10:	f7fa f91c 	bl	800404c <HAL_GetTick>
 8009e14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009e16:	e008      	b.n	8009e2a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009e18:	f7fa f918 	bl	800404c <HAL_GetTick>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e20:	1ad3      	subs	r3, r2, r3
 8009e22:	2b02      	cmp	r3, #2
 8009e24:	d901      	bls.n	8009e2a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8009e26:	2303      	movs	r3, #3
 8009e28:	e280      	b.n	800a32c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009e2a:	4b55      	ldr	r3, [pc, #340]	; (8009f80 <HAL_RCC_OscConfig+0x4f8>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d0f0      	beq.n	8009e18 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009e36:	f7fa f939 	bl	80040ac <HAL_GetREVID>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	f241 0203 	movw	r2, #4099	; 0x1003
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d817      	bhi.n	8009e74 <HAL_RCC_OscConfig+0x3ec>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6a1b      	ldr	r3, [r3, #32]
 8009e48:	2b20      	cmp	r3, #32
 8009e4a:	d108      	bne.n	8009e5e <HAL_RCC_OscConfig+0x3d6>
 8009e4c:	4b4c      	ldr	r3, [pc, #304]	; (8009f80 <HAL_RCC_OscConfig+0x4f8>)
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009e54:	4a4a      	ldr	r2, [pc, #296]	; (8009f80 <HAL_RCC_OscConfig+0x4f8>)
 8009e56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e5a:	6053      	str	r3, [r2, #4]
 8009e5c:	e02e      	b.n	8009ebc <HAL_RCC_OscConfig+0x434>
 8009e5e:	4b48      	ldr	r3, [pc, #288]	; (8009f80 <HAL_RCC_OscConfig+0x4f8>)
 8009e60:	685b      	ldr	r3, [r3, #4]
 8009e62:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6a1b      	ldr	r3, [r3, #32]
 8009e6a:	069b      	lsls	r3, r3, #26
 8009e6c:	4944      	ldr	r1, [pc, #272]	; (8009f80 <HAL_RCC_OscConfig+0x4f8>)
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	604b      	str	r3, [r1, #4]
 8009e72:	e023      	b.n	8009ebc <HAL_RCC_OscConfig+0x434>
 8009e74:	4b42      	ldr	r3, [pc, #264]	; (8009f80 <HAL_RCC_OscConfig+0x4f8>)
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6a1b      	ldr	r3, [r3, #32]
 8009e80:	061b      	lsls	r3, r3, #24
 8009e82:	493f      	ldr	r1, [pc, #252]	; (8009f80 <HAL_RCC_OscConfig+0x4f8>)
 8009e84:	4313      	orrs	r3, r2
 8009e86:	60cb      	str	r3, [r1, #12]
 8009e88:	e018      	b.n	8009ebc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009e8a:	4b3d      	ldr	r3, [pc, #244]	; (8009f80 <HAL_RCC_OscConfig+0x4f8>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4a3c      	ldr	r2, [pc, #240]	; (8009f80 <HAL_RCC_OscConfig+0x4f8>)
 8009e90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e96:	f7fa f8d9 	bl	800404c <HAL_GetTick>
 8009e9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009e9c:	e008      	b.n	8009eb0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009e9e:	f7fa f8d5 	bl	800404c <HAL_GetTick>
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea6:	1ad3      	subs	r3, r2, r3
 8009ea8:	2b02      	cmp	r3, #2
 8009eaa:	d901      	bls.n	8009eb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009eac:	2303      	movs	r3, #3
 8009eae:	e23d      	b.n	800a32c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009eb0:	4b33      	ldr	r3, [pc, #204]	; (8009f80 <HAL_RCC_OscConfig+0x4f8>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d1f0      	bne.n	8009e9e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f003 0308 	and.w	r3, r3, #8
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d036      	beq.n	8009f36 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	695b      	ldr	r3, [r3, #20]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d019      	beq.n	8009f04 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009ed0:	4b2b      	ldr	r3, [pc, #172]	; (8009f80 <HAL_RCC_OscConfig+0x4f8>)
 8009ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ed4:	4a2a      	ldr	r2, [pc, #168]	; (8009f80 <HAL_RCC_OscConfig+0x4f8>)
 8009ed6:	f043 0301 	orr.w	r3, r3, #1
 8009eda:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009edc:	f7fa f8b6 	bl	800404c <HAL_GetTick>
 8009ee0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009ee2:	e008      	b.n	8009ef6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009ee4:	f7fa f8b2 	bl	800404c <HAL_GetTick>
 8009ee8:	4602      	mov	r2, r0
 8009eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eec:	1ad3      	subs	r3, r2, r3
 8009eee:	2b02      	cmp	r3, #2
 8009ef0:	d901      	bls.n	8009ef6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009ef2:	2303      	movs	r3, #3
 8009ef4:	e21a      	b.n	800a32c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009ef6:	4b22      	ldr	r3, [pc, #136]	; (8009f80 <HAL_RCC_OscConfig+0x4f8>)
 8009ef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009efa:	f003 0302 	and.w	r3, r3, #2
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d0f0      	beq.n	8009ee4 <HAL_RCC_OscConfig+0x45c>
 8009f02:	e018      	b.n	8009f36 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009f04:	4b1e      	ldr	r3, [pc, #120]	; (8009f80 <HAL_RCC_OscConfig+0x4f8>)
 8009f06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f08:	4a1d      	ldr	r2, [pc, #116]	; (8009f80 <HAL_RCC_OscConfig+0x4f8>)
 8009f0a:	f023 0301 	bic.w	r3, r3, #1
 8009f0e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f10:	f7fa f89c 	bl	800404c <HAL_GetTick>
 8009f14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009f16:	e008      	b.n	8009f2a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f18:	f7fa f898 	bl	800404c <HAL_GetTick>
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f20:	1ad3      	subs	r3, r2, r3
 8009f22:	2b02      	cmp	r3, #2
 8009f24:	d901      	bls.n	8009f2a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009f26:	2303      	movs	r3, #3
 8009f28:	e200      	b.n	800a32c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009f2a:	4b15      	ldr	r3, [pc, #84]	; (8009f80 <HAL_RCC_OscConfig+0x4f8>)
 8009f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f2e:	f003 0302 	and.w	r3, r3, #2
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d1f0      	bne.n	8009f18 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f003 0320 	and.w	r3, r3, #32
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d039      	beq.n	8009fb6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	699b      	ldr	r3, [r3, #24]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d01c      	beq.n	8009f84 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009f4a:	4b0d      	ldr	r3, [pc, #52]	; (8009f80 <HAL_RCC_OscConfig+0x4f8>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4a0c      	ldr	r2, [pc, #48]	; (8009f80 <HAL_RCC_OscConfig+0x4f8>)
 8009f50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009f54:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009f56:	f7fa f879 	bl	800404c <HAL_GetTick>
 8009f5a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009f5c:	e008      	b.n	8009f70 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009f5e:	f7fa f875 	bl	800404c <HAL_GetTick>
 8009f62:	4602      	mov	r2, r0
 8009f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f66:	1ad3      	subs	r3, r2, r3
 8009f68:	2b02      	cmp	r3, #2
 8009f6a:	d901      	bls.n	8009f70 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009f6c:	2303      	movs	r3, #3
 8009f6e:	e1dd      	b.n	800a32c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009f70:	4b03      	ldr	r3, [pc, #12]	; (8009f80 <HAL_RCC_OscConfig+0x4f8>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d0f0      	beq.n	8009f5e <HAL_RCC_OscConfig+0x4d6>
 8009f7c:	e01b      	b.n	8009fb6 <HAL_RCC_OscConfig+0x52e>
 8009f7e:	bf00      	nop
 8009f80:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009f84:	4b9b      	ldr	r3, [pc, #620]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4a9a      	ldr	r2, [pc, #616]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 8009f8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f8e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009f90:	f7fa f85c 	bl	800404c <HAL_GetTick>
 8009f94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009f96:	e008      	b.n	8009faa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009f98:	f7fa f858 	bl	800404c <HAL_GetTick>
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa0:	1ad3      	subs	r3, r2, r3
 8009fa2:	2b02      	cmp	r3, #2
 8009fa4:	d901      	bls.n	8009faa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009fa6:	2303      	movs	r3, #3
 8009fa8:	e1c0      	b.n	800a32c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009faa:	4b92      	ldr	r3, [pc, #584]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d1f0      	bne.n	8009f98 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f003 0304 	and.w	r3, r3, #4
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	f000 8081 	beq.w	800a0c6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009fc4:	4b8c      	ldr	r3, [pc, #560]	; (800a1f8 <HAL_RCC_OscConfig+0x770>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a8b      	ldr	r2, [pc, #556]	; (800a1f8 <HAL_RCC_OscConfig+0x770>)
 8009fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009fd0:	f7fa f83c 	bl	800404c <HAL_GetTick>
 8009fd4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009fd6:	e008      	b.n	8009fea <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009fd8:	f7fa f838 	bl	800404c <HAL_GetTick>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe0:	1ad3      	subs	r3, r2, r3
 8009fe2:	2b64      	cmp	r3, #100	; 0x64
 8009fe4:	d901      	bls.n	8009fea <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009fe6:	2303      	movs	r3, #3
 8009fe8:	e1a0      	b.n	800a32c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009fea:	4b83      	ldr	r3, [pc, #524]	; (800a1f8 <HAL_RCC_OscConfig+0x770>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d0f0      	beq.n	8009fd8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	d106      	bne.n	800a00c <HAL_RCC_OscConfig+0x584>
 8009ffe:	4b7d      	ldr	r3, [pc, #500]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a002:	4a7c      	ldr	r2, [pc, #496]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a004:	f043 0301 	orr.w	r3, r3, #1
 800a008:	6713      	str	r3, [r2, #112]	; 0x70
 800a00a:	e02d      	b.n	800a068 <HAL_RCC_OscConfig+0x5e0>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	689b      	ldr	r3, [r3, #8]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d10c      	bne.n	800a02e <HAL_RCC_OscConfig+0x5a6>
 800a014:	4b77      	ldr	r3, [pc, #476]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a018:	4a76      	ldr	r2, [pc, #472]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a01a:	f023 0301 	bic.w	r3, r3, #1
 800a01e:	6713      	str	r3, [r2, #112]	; 0x70
 800a020:	4b74      	ldr	r3, [pc, #464]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a024:	4a73      	ldr	r2, [pc, #460]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a026:	f023 0304 	bic.w	r3, r3, #4
 800a02a:	6713      	str	r3, [r2, #112]	; 0x70
 800a02c:	e01c      	b.n	800a068 <HAL_RCC_OscConfig+0x5e0>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	689b      	ldr	r3, [r3, #8]
 800a032:	2b05      	cmp	r3, #5
 800a034:	d10c      	bne.n	800a050 <HAL_RCC_OscConfig+0x5c8>
 800a036:	4b6f      	ldr	r3, [pc, #444]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a03a:	4a6e      	ldr	r2, [pc, #440]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a03c:	f043 0304 	orr.w	r3, r3, #4
 800a040:	6713      	str	r3, [r2, #112]	; 0x70
 800a042:	4b6c      	ldr	r3, [pc, #432]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a046:	4a6b      	ldr	r2, [pc, #428]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a048:	f043 0301 	orr.w	r3, r3, #1
 800a04c:	6713      	str	r3, [r2, #112]	; 0x70
 800a04e:	e00b      	b.n	800a068 <HAL_RCC_OscConfig+0x5e0>
 800a050:	4b68      	ldr	r3, [pc, #416]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a054:	4a67      	ldr	r2, [pc, #412]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a056:	f023 0301 	bic.w	r3, r3, #1
 800a05a:	6713      	str	r3, [r2, #112]	; 0x70
 800a05c:	4b65      	ldr	r3, [pc, #404]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a05e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a060:	4a64      	ldr	r2, [pc, #400]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a062:	f023 0304 	bic.w	r3, r3, #4
 800a066:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	689b      	ldr	r3, [r3, #8]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d015      	beq.n	800a09c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a070:	f7f9 ffec 	bl	800404c <HAL_GetTick>
 800a074:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a076:	e00a      	b.n	800a08e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a078:	f7f9 ffe8 	bl	800404c <HAL_GetTick>
 800a07c:	4602      	mov	r2, r0
 800a07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a080:	1ad3      	subs	r3, r2, r3
 800a082:	f241 3288 	movw	r2, #5000	; 0x1388
 800a086:	4293      	cmp	r3, r2
 800a088:	d901      	bls.n	800a08e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a08a:	2303      	movs	r3, #3
 800a08c:	e14e      	b.n	800a32c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a08e:	4b59      	ldr	r3, [pc, #356]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a092:	f003 0302 	and.w	r3, r3, #2
 800a096:	2b00      	cmp	r3, #0
 800a098:	d0ee      	beq.n	800a078 <HAL_RCC_OscConfig+0x5f0>
 800a09a:	e014      	b.n	800a0c6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a09c:	f7f9 ffd6 	bl	800404c <HAL_GetTick>
 800a0a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a0a2:	e00a      	b.n	800a0ba <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0a4:	f7f9 ffd2 	bl	800404c <HAL_GetTick>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ac:	1ad3      	subs	r3, r2, r3
 800a0ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d901      	bls.n	800a0ba <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a0b6:	2303      	movs	r3, #3
 800a0b8:	e138      	b.n	800a32c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a0ba:	4b4e      	ldr	r3, [pc, #312]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a0bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0be:	f003 0302 	and.w	r3, r3, #2
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d1ee      	bne.n	800a0a4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	f000 812d 	beq.w	800a32a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a0d0:	4b48      	ldr	r3, [pc, #288]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a0d2:	691b      	ldr	r3, [r3, #16]
 800a0d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a0d8:	2b18      	cmp	r3, #24
 800a0da:	f000 80bd 	beq.w	800a258 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e2:	2b02      	cmp	r3, #2
 800a0e4:	f040 809e 	bne.w	800a224 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a0e8:	4b42      	ldr	r3, [pc, #264]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4a41      	ldr	r2, [pc, #260]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a0ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a0f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0f4:	f7f9 ffaa 	bl	800404c <HAL_GetTick>
 800a0f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a0fa:	e008      	b.n	800a10e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a0fc:	f7f9 ffa6 	bl	800404c <HAL_GetTick>
 800a100:	4602      	mov	r2, r0
 800a102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a104:	1ad3      	subs	r3, r2, r3
 800a106:	2b02      	cmp	r3, #2
 800a108:	d901      	bls.n	800a10e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a10a:	2303      	movs	r3, #3
 800a10c:	e10e      	b.n	800a32c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a10e:	4b39      	ldr	r3, [pc, #228]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a116:	2b00      	cmp	r3, #0
 800a118:	d1f0      	bne.n	800a0fc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a11a:	4b36      	ldr	r3, [pc, #216]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a11c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a11e:	4b37      	ldr	r3, [pc, #220]	; (800a1fc <HAL_RCC_OscConfig+0x774>)
 800a120:	4013      	ands	r3, r2
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a126:	687a      	ldr	r2, [r7, #4]
 800a128:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a12a:	0112      	lsls	r2, r2, #4
 800a12c:	430a      	orrs	r2, r1
 800a12e:	4931      	ldr	r1, [pc, #196]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a130:	4313      	orrs	r3, r2
 800a132:	628b      	str	r3, [r1, #40]	; 0x28
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a138:	3b01      	subs	r3, #1
 800a13a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a142:	3b01      	subs	r3, #1
 800a144:	025b      	lsls	r3, r3, #9
 800a146:	b29b      	uxth	r3, r3
 800a148:	431a      	orrs	r2, r3
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a14e:	3b01      	subs	r3, #1
 800a150:	041b      	lsls	r3, r3, #16
 800a152:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a156:	431a      	orrs	r2, r3
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a15c:	3b01      	subs	r3, #1
 800a15e:	061b      	lsls	r3, r3, #24
 800a160:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a164:	4923      	ldr	r1, [pc, #140]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a166:	4313      	orrs	r3, r2
 800a168:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a16a:	4b22      	ldr	r3, [pc, #136]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a16e:	4a21      	ldr	r2, [pc, #132]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a170:	f023 0301 	bic.w	r3, r3, #1
 800a174:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a176:	4b1f      	ldr	r3, [pc, #124]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a178:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a17a:	4b21      	ldr	r3, [pc, #132]	; (800a200 <HAL_RCC_OscConfig+0x778>)
 800a17c:	4013      	ands	r3, r2
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a182:	00d2      	lsls	r2, r2, #3
 800a184:	491b      	ldr	r1, [pc, #108]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a186:	4313      	orrs	r3, r2
 800a188:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a18a:	4b1a      	ldr	r3, [pc, #104]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a18c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a18e:	f023 020c 	bic.w	r2, r3, #12
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a196:	4917      	ldr	r1, [pc, #92]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a198:	4313      	orrs	r3, r2
 800a19a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a19c:	4b15      	ldr	r3, [pc, #84]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a0:	f023 0202 	bic.w	r2, r3, #2
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1a8:	4912      	ldr	r1, [pc, #72]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a1ae:	4b11      	ldr	r3, [pc, #68]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a1b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b2:	4a10      	ldr	r2, [pc, #64]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a1b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a1b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1ba:	4b0e      	ldr	r3, [pc, #56]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a1bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1be:	4a0d      	ldr	r2, [pc, #52]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a1c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a1c6:	4b0b      	ldr	r3, [pc, #44]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a1c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ca:	4a0a      	ldr	r2, [pc, #40]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a1cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a1d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a1d2:	4b08      	ldr	r3, [pc, #32]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a1d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d6:	4a07      	ldr	r2, [pc, #28]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a1d8:	f043 0301 	orr.w	r3, r3, #1
 800a1dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a1de:	4b05      	ldr	r3, [pc, #20]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a04      	ldr	r2, [pc, #16]	; (800a1f4 <HAL_RCC_OscConfig+0x76c>)
 800a1e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a1e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1ea:	f7f9 ff2f 	bl	800404c <HAL_GetTick>
 800a1ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a1f0:	e011      	b.n	800a216 <HAL_RCC_OscConfig+0x78e>
 800a1f2:	bf00      	nop
 800a1f4:	58024400 	.word	0x58024400
 800a1f8:	58024800 	.word	0x58024800
 800a1fc:	fffffc0c 	.word	0xfffffc0c
 800a200:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a204:	f7f9 ff22 	bl	800404c <HAL_GetTick>
 800a208:	4602      	mov	r2, r0
 800a20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20c:	1ad3      	subs	r3, r2, r3
 800a20e:	2b02      	cmp	r3, #2
 800a210:	d901      	bls.n	800a216 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a212:	2303      	movs	r3, #3
 800a214:	e08a      	b.n	800a32c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a216:	4b47      	ldr	r3, [pc, #284]	; (800a334 <HAL_RCC_OscConfig+0x8ac>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d0f0      	beq.n	800a204 <HAL_RCC_OscConfig+0x77c>
 800a222:	e082      	b.n	800a32a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a224:	4b43      	ldr	r3, [pc, #268]	; (800a334 <HAL_RCC_OscConfig+0x8ac>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a42      	ldr	r2, [pc, #264]	; (800a334 <HAL_RCC_OscConfig+0x8ac>)
 800a22a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a22e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a230:	f7f9 ff0c 	bl	800404c <HAL_GetTick>
 800a234:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a236:	e008      	b.n	800a24a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a238:	f7f9 ff08 	bl	800404c <HAL_GetTick>
 800a23c:	4602      	mov	r2, r0
 800a23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a240:	1ad3      	subs	r3, r2, r3
 800a242:	2b02      	cmp	r3, #2
 800a244:	d901      	bls.n	800a24a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a246:	2303      	movs	r3, #3
 800a248:	e070      	b.n	800a32c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a24a:	4b3a      	ldr	r3, [pc, #232]	; (800a334 <HAL_RCC_OscConfig+0x8ac>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a252:	2b00      	cmp	r3, #0
 800a254:	d1f0      	bne.n	800a238 <HAL_RCC_OscConfig+0x7b0>
 800a256:	e068      	b.n	800a32a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a258:	4b36      	ldr	r3, [pc, #216]	; (800a334 <HAL_RCC_OscConfig+0x8ac>)
 800a25a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a25c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a25e:	4b35      	ldr	r3, [pc, #212]	; (800a334 <HAL_RCC_OscConfig+0x8ac>)
 800a260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a262:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d031      	beq.n	800a2d0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	f003 0203 	and.w	r2, r3, #3
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a276:	429a      	cmp	r2, r3
 800a278:	d12a      	bne.n	800a2d0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	091b      	lsrs	r3, r3, #4
 800a27e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a286:	429a      	cmp	r2, r3
 800a288:	d122      	bne.n	800a2d0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a294:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a296:	429a      	cmp	r2, r3
 800a298:	d11a      	bne.n	800a2d0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	0a5b      	lsrs	r3, r3, #9
 800a29e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2a6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d111      	bne.n	800a2d0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	0c1b      	lsrs	r3, r3, #16
 800a2b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d108      	bne.n	800a2d0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	0e1b      	lsrs	r3, r3, #24
 800a2c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2ca:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d001      	beq.n	800a2d4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	e02b      	b.n	800a32c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a2d4:	4b17      	ldr	r3, [pc, #92]	; (800a334 <HAL_RCC_OscConfig+0x8ac>)
 800a2d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2d8:	08db      	lsrs	r3, r3, #3
 800a2da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a2de:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2e4:	693a      	ldr	r2, [r7, #16]
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d01f      	beq.n	800a32a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a2ea:	4b12      	ldr	r3, [pc, #72]	; (800a334 <HAL_RCC_OscConfig+0x8ac>)
 800a2ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ee:	4a11      	ldr	r2, [pc, #68]	; (800a334 <HAL_RCC_OscConfig+0x8ac>)
 800a2f0:	f023 0301 	bic.w	r3, r3, #1
 800a2f4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a2f6:	f7f9 fea9 	bl	800404c <HAL_GetTick>
 800a2fa:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a2fc:	bf00      	nop
 800a2fe:	f7f9 fea5 	bl	800404c <HAL_GetTick>
 800a302:	4602      	mov	r2, r0
 800a304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a306:	4293      	cmp	r3, r2
 800a308:	d0f9      	beq.n	800a2fe <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a30a:	4b0a      	ldr	r3, [pc, #40]	; (800a334 <HAL_RCC_OscConfig+0x8ac>)
 800a30c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a30e:	4b0a      	ldr	r3, [pc, #40]	; (800a338 <HAL_RCC_OscConfig+0x8b0>)
 800a310:	4013      	ands	r3, r2
 800a312:	687a      	ldr	r2, [r7, #4]
 800a314:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a316:	00d2      	lsls	r2, r2, #3
 800a318:	4906      	ldr	r1, [pc, #24]	; (800a334 <HAL_RCC_OscConfig+0x8ac>)
 800a31a:	4313      	orrs	r3, r2
 800a31c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a31e:	4b05      	ldr	r3, [pc, #20]	; (800a334 <HAL_RCC_OscConfig+0x8ac>)
 800a320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a322:	4a04      	ldr	r2, [pc, #16]	; (800a334 <HAL_RCC_OscConfig+0x8ac>)
 800a324:	f043 0301 	orr.w	r3, r3, #1
 800a328:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a32a:	2300      	movs	r3, #0
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3730      	adds	r7, #48	; 0x30
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}
 800a334:	58024400 	.word	0x58024400
 800a338:	ffff0007 	.word	0xffff0007

0800a33c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b086      	sub	sp, #24
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d101      	bne.n	800a350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a34c:	2301      	movs	r3, #1
 800a34e:	e19c      	b.n	800a68a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a350:	4b8a      	ldr	r3, [pc, #552]	; (800a57c <HAL_RCC_ClockConfig+0x240>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f003 030f 	and.w	r3, r3, #15
 800a358:	683a      	ldr	r2, [r7, #0]
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d910      	bls.n	800a380 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a35e:	4b87      	ldr	r3, [pc, #540]	; (800a57c <HAL_RCC_ClockConfig+0x240>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f023 020f 	bic.w	r2, r3, #15
 800a366:	4985      	ldr	r1, [pc, #532]	; (800a57c <HAL_RCC_ClockConfig+0x240>)
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	4313      	orrs	r3, r2
 800a36c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a36e:	4b83      	ldr	r3, [pc, #524]	; (800a57c <HAL_RCC_ClockConfig+0x240>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f003 030f 	and.w	r3, r3, #15
 800a376:	683a      	ldr	r2, [r7, #0]
 800a378:	429a      	cmp	r2, r3
 800a37a:	d001      	beq.n	800a380 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a37c:	2301      	movs	r3, #1
 800a37e:	e184      	b.n	800a68a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f003 0304 	and.w	r3, r3, #4
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d010      	beq.n	800a3ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	691a      	ldr	r2, [r3, #16]
 800a390:	4b7b      	ldr	r3, [pc, #492]	; (800a580 <HAL_RCC_ClockConfig+0x244>)
 800a392:	699b      	ldr	r3, [r3, #24]
 800a394:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a398:	429a      	cmp	r2, r3
 800a39a:	d908      	bls.n	800a3ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a39c:	4b78      	ldr	r3, [pc, #480]	; (800a580 <HAL_RCC_ClockConfig+0x244>)
 800a39e:	699b      	ldr	r3, [r3, #24]
 800a3a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	691b      	ldr	r3, [r3, #16]
 800a3a8:	4975      	ldr	r1, [pc, #468]	; (800a580 <HAL_RCC_ClockConfig+0x244>)
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f003 0308 	and.w	r3, r3, #8
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d010      	beq.n	800a3dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	695a      	ldr	r2, [r3, #20]
 800a3be:	4b70      	ldr	r3, [pc, #448]	; (800a580 <HAL_RCC_ClockConfig+0x244>)
 800a3c0:	69db      	ldr	r3, [r3, #28]
 800a3c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d908      	bls.n	800a3dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a3ca:	4b6d      	ldr	r3, [pc, #436]	; (800a580 <HAL_RCC_ClockConfig+0x244>)
 800a3cc:	69db      	ldr	r3, [r3, #28]
 800a3ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	695b      	ldr	r3, [r3, #20]
 800a3d6:	496a      	ldr	r1, [pc, #424]	; (800a580 <HAL_RCC_ClockConfig+0x244>)
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f003 0310 	and.w	r3, r3, #16
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d010      	beq.n	800a40a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	699a      	ldr	r2, [r3, #24]
 800a3ec:	4b64      	ldr	r3, [pc, #400]	; (800a580 <HAL_RCC_ClockConfig+0x244>)
 800a3ee:	69db      	ldr	r3, [r3, #28]
 800a3f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d908      	bls.n	800a40a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a3f8:	4b61      	ldr	r3, [pc, #388]	; (800a580 <HAL_RCC_ClockConfig+0x244>)
 800a3fa:	69db      	ldr	r3, [r3, #28]
 800a3fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	699b      	ldr	r3, [r3, #24]
 800a404:	495e      	ldr	r1, [pc, #376]	; (800a580 <HAL_RCC_ClockConfig+0x244>)
 800a406:	4313      	orrs	r3, r2
 800a408:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f003 0320 	and.w	r3, r3, #32
 800a412:	2b00      	cmp	r3, #0
 800a414:	d010      	beq.n	800a438 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	69da      	ldr	r2, [r3, #28]
 800a41a:	4b59      	ldr	r3, [pc, #356]	; (800a580 <HAL_RCC_ClockConfig+0x244>)
 800a41c:	6a1b      	ldr	r3, [r3, #32]
 800a41e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a422:	429a      	cmp	r2, r3
 800a424:	d908      	bls.n	800a438 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a426:	4b56      	ldr	r3, [pc, #344]	; (800a580 <HAL_RCC_ClockConfig+0x244>)
 800a428:	6a1b      	ldr	r3, [r3, #32]
 800a42a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	69db      	ldr	r3, [r3, #28]
 800a432:	4953      	ldr	r1, [pc, #332]	; (800a580 <HAL_RCC_ClockConfig+0x244>)
 800a434:	4313      	orrs	r3, r2
 800a436:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f003 0302 	and.w	r3, r3, #2
 800a440:	2b00      	cmp	r3, #0
 800a442:	d010      	beq.n	800a466 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	68da      	ldr	r2, [r3, #12]
 800a448:	4b4d      	ldr	r3, [pc, #308]	; (800a580 <HAL_RCC_ClockConfig+0x244>)
 800a44a:	699b      	ldr	r3, [r3, #24]
 800a44c:	f003 030f 	and.w	r3, r3, #15
 800a450:	429a      	cmp	r2, r3
 800a452:	d908      	bls.n	800a466 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a454:	4b4a      	ldr	r3, [pc, #296]	; (800a580 <HAL_RCC_ClockConfig+0x244>)
 800a456:	699b      	ldr	r3, [r3, #24]
 800a458:	f023 020f 	bic.w	r2, r3, #15
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	68db      	ldr	r3, [r3, #12]
 800a460:	4947      	ldr	r1, [pc, #284]	; (800a580 <HAL_RCC_ClockConfig+0x244>)
 800a462:	4313      	orrs	r3, r2
 800a464:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f003 0301 	and.w	r3, r3, #1
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d055      	beq.n	800a51e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a472:	4b43      	ldr	r3, [pc, #268]	; (800a580 <HAL_RCC_ClockConfig+0x244>)
 800a474:	699b      	ldr	r3, [r3, #24]
 800a476:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	4940      	ldr	r1, [pc, #256]	; (800a580 <HAL_RCC_ClockConfig+0x244>)
 800a480:	4313      	orrs	r3, r2
 800a482:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	2b02      	cmp	r3, #2
 800a48a:	d107      	bne.n	800a49c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a48c:	4b3c      	ldr	r3, [pc, #240]	; (800a580 <HAL_RCC_ClockConfig+0x244>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a494:	2b00      	cmp	r3, #0
 800a496:	d121      	bne.n	800a4dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a498:	2301      	movs	r3, #1
 800a49a:	e0f6      	b.n	800a68a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	2b03      	cmp	r3, #3
 800a4a2:	d107      	bne.n	800a4b4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a4a4:	4b36      	ldr	r3, [pc, #216]	; (800a580 <HAL_RCC_ClockConfig+0x244>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d115      	bne.n	800a4dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	e0ea      	b.n	800a68a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	d107      	bne.n	800a4cc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a4bc:	4b30      	ldr	r3, [pc, #192]	; (800a580 <HAL_RCC_ClockConfig+0x244>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d109      	bne.n	800a4dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	e0de      	b.n	800a68a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a4cc:	4b2c      	ldr	r3, [pc, #176]	; (800a580 <HAL_RCC_ClockConfig+0x244>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f003 0304 	and.w	r3, r3, #4
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d101      	bne.n	800a4dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	e0d6      	b.n	800a68a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a4dc:	4b28      	ldr	r3, [pc, #160]	; (800a580 <HAL_RCC_ClockConfig+0x244>)
 800a4de:	691b      	ldr	r3, [r3, #16]
 800a4e0:	f023 0207 	bic.w	r2, r3, #7
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	4925      	ldr	r1, [pc, #148]	; (800a580 <HAL_RCC_ClockConfig+0x244>)
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4ee:	f7f9 fdad 	bl	800404c <HAL_GetTick>
 800a4f2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a4f4:	e00a      	b.n	800a50c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a4f6:	f7f9 fda9 	bl	800404c <HAL_GetTick>
 800a4fa:	4602      	mov	r2, r0
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	1ad3      	subs	r3, r2, r3
 800a500:	f241 3288 	movw	r2, #5000	; 0x1388
 800a504:	4293      	cmp	r3, r2
 800a506:	d901      	bls.n	800a50c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a508:	2303      	movs	r3, #3
 800a50a:	e0be      	b.n	800a68a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a50c:	4b1c      	ldr	r3, [pc, #112]	; (800a580 <HAL_RCC_ClockConfig+0x244>)
 800a50e:	691b      	ldr	r3, [r3, #16]
 800a510:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	00db      	lsls	r3, r3, #3
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d1eb      	bne.n	800a4f6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f003 0302 	and.w	r3, r3, #2
 800a526:	2b00      	cmp	r3, #0
 800a528:	d010      	beq.n	800a54c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	68da      	ldr	r2, [r3, #12]
 800a52e:	4b14      	ldr	r3, [pc, #80]	; (800a580 <HAL_RCC_ClockConfig+0x244>)
 800a530:	699b      	ldr	r3, [r3, #24]
 800a532:	f003 030f 	and.w	r3, r3, #15
 800a536:	429a      	cmp	r2, r3
 800a538:	d208      	bcs.n	800a54c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a53a:	4b11      	ldr	r3, [pc, #68]	; (800a580 <HAL_RCC_ClockConfig+0x244>)
 800a53c:	699b      	ldr	r3, [r3, #24]
 800a53e:	f023 020f 	bic.w	r2, r3, #15
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	68db      	ldr	r3, [r3, #12]
 800a546:	490e      	ldr	r1, [pc, #56]	; (800a580 <HAL_RCC_ClockConfig+0x244>)
 800a548:	4313      	orrs	r3, r2
 800a54a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a54c:	4b0b      	ldr	r3, [pc, #44]	; (800a57c <HAL_RCC_ClockConfig+0x240>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f003 030f 	and.w	r3, r3, #15
 800a554:	683a      	ldr	r2, [r7, #0]
 800a556:	429a      	cmp	r2, r3
 800a558:	d214      	bcs.n	800a584 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a55a:	4b08      	ldr	r3, [pc, #32]	; (800a57c <HAL_RCC_ClockConfig+0x240>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f023 020f 	bic.w	r2, r3, #15
 800a562:	4906      	ldr	r1, [pc, #24]	; (800a57c <HAL_RCC_ClockConfig+0x240>)
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	4313      	orrs	r3, r2
 800a568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a56a:	4b04      	ldr	r3, [pc, #16]	; (800a57c <HAL_RCC_ClockConfig+0x240>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f003 030f 	and.w	r3, r3, #15
 800a572:	683a      	ldr	r2, [r7, #0]
 800a574:	429a      	cmp	r2, r3
 800a576:	d005      	beq.n	800a584 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a578:	2301      	movs	r3, #1
 800a57a:	e086      	b.n	800a68a <HAL_RCC_ClockConfig+0x34e>
 800a57c:	52002000 	.word	0x52002000
 800a580:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f003 0304 	and.w	r3, r3, #4
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d010      	beq.n	800a5b2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	691a      	ldr	r2, [r3, #16]
 800a594:	4b3f      	ldr	r3, [pc, #252]	; (800a694 <HAL_RCC_ClockConfig+0x358>)
 800a596:	699b      	ldr	r3, [r3, #24]
 800a598:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d208      	bcs.n	800a5b2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a5a0:	4b3c      	ldr	r3, [pc, #240]	; (800a694 <HAL_RCC_ClockConfig+0x358>)
 800a5a2:	699b      	ldr	r3, [r3, #24]
 800a5a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	691b      	ldr	r3, [r3, #16]
 800a5ac:	4939      	ldr	r1, [pc, #228]	; (800a694 <HAL_RCC_ClockConfig+0x358>)
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f003 0308 	and.w	r3, r3, #8
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d010      	beq.n	800a5e0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	695a      	ldr	r2, [r3, #20]
 800a5c2:	4b34      	ldr	r3, [pc, #208]	; (800a694 <HAL_RCC_ClockConfig+0x358>)
 800a5c4:	69db      	ldr	r3, [r3, #28]
 800a5c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d208      	bcs.n	800a5e0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a5ce:	4b31      	ldr	r3, [pc, #196]	; (800a694 <HAL_RCC_ClockConfig+0x358>)
 800a5d0:	69db      	ldr	r3, [r3, #28]
 800a5d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	695b      	ldr	r3, [r3, #20]
 800a5da:	492e      	ldr	r1, [pc, #184]	; (800a694 <HAL_RCC_ClockConfig+0x358>)
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f003 0310 	and.w	r3, r3, #16
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d010      	beq.n	800a60e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	699a      	ldr	r2, [r3, #24]
 800a5f0:	4b28      	ldr	r3, [pc, #160]	; (800a694 <HAL_RCC_ClockConfig+0x358>)
 800a5f2:	69db      	ldr	r3, [r3, #28]
 800a5f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d208      	bcs.n	800a60e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a5fc:	4b25      	ldr	r3, [pc, #148]	; (800a694 <HAL_RCC_ClockConfig+0x358>)
 800a5fe:	69db      	ldr	r3, [r3, #28]
 800a600:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	699b      	ldr	r3, [r3, #24]
 800a608:	4922      	ldr	r1, [pc, #136]	; (800a694 <HAL_RCC_ClockConfig+0x358>)
 800a60a:	4313      	orrs	r3, r2
 800a60c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f003 0320 	and.w	r3, r3, #32
 800a616:	2b00      	cmp	r3, #0
 800a618:	d010      	beq.n	800a63c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	69da      	ldr	r2, [r3, #28]
 800a61e:	4b1d      	ldr	r3, [pc, #116]	; (800a694 <HAL_RCC_ClockConfig+0x358>)
 800a620:	6a1b      	ldr	r3, [r3, #32]
 800a622:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a626:	429a      	cmp	r2, r3
 800a628:	d208      	bcs.n	800a63c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a62a:	4b1a      	ldr	r3, [pc, #104]	; (800a694 <HAL_RCC_ClockConfig+0x358>)
 800a62c:	6a1b      	ldr	r3, [r3, #32]
 800a62e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	69db      	ldr	r3, [r3, #28]
 800a636:	4917      	ldr	r1, [pc, #92]	; (800a694 <HAL_RCC_ClockConfig+0x358>)
 800a638:	4313      	orrs	r3, r2
 800a63a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a63c:	f000 f844 	bl	800a6c8 <HAL_RCC_GetSysClockFreq>
 800a640:	4602      	mov	r2, r0
 800a642:	4b14      	ldr	r3, [pc, #80]	; (800a694 <HAL_RCC_ClockConfig+0x358>)
 800a644:	699b      	ldr	r3, [r3, #24]
 800a646:	0a1b      	lsrs	r3, r3, #8
 800a648:	f003 030f 	and.w	r3, r3, #15
 800a64c:	4912      	ldr	r1, [pc, #72]	; (800a698 <HAL_RCC_ClockConfig+0x35c>)
 800a64e:	5ccb      	ldrb	r3, [r1, r3]
 800a650:	f003 031f 	and.w	r3, r3, #31
 800a654:	fa22 f303 	lsr.w	r3, r2, r3
 800a658:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a65a:	4b0e      	ldr	r3, [pc, #56]	; (800a694 <HAL_RCC_ClockConfig+0x358>)
 800a65c:	699b      	ldr	r3, [r3, #24]
 800a65e:	f003 030f 	and.w	r3, r3, #15
 800a662:	4a0d      	ldr	r2, [pc, #52]	; (800a698 <HAL_RCC_ClockConfig+0x35c>)
 800a664:	5cd3      	ldrb	r3, [r2, r3]
 800a666:	f003 031f 	and.w	r3, r3, #31
 800a66a:	693a      	ldr	r2, [r7, #16]
 800a66c:	fa22 f303 	lsr.w	r3, r2, r3
 800a670:	4a0a      	ldr	r2, [pc, #40]	; (800a69c <HAL_RCC_ClockConfig+0x360>)
 800a672:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a674:	4a0a      	ldr	r2, [pc, #40]	; (800a6a0 <HAL_RCC_ClockConfig+0x364>)
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a67a:	4b0a      	ldr	r3, [pc, #40]	; (800a6a4 <HAL_RCC_ClockConfig+0x368>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4618      	mov	r0, r3
 800a680:	f7f9 fc9a 	bl	8003fb8 <HAL_InitTick>
 800a684:	4603      	mov	r3, r0
 800a686:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a688:	7bfb      	ldrb	r3, [r7, #15]
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3718      	adds	r7, #24
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop
 800a694:	58024400 	.word	0x58024400
 800a698:	0801efb4 	.word	0x0801efb4
 800a69c:	20000014 	.word	0x20000014
 800a6a0:	20000010 	.word	0x20000010
 800a6a4:	20000024 	.word	0x20000024

0800a6a8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 800a6ac:	4b05      	ldr	r3, [pc, #20]	; (800a6c4 <HAL_RCC_EnableCSS+0x1c>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a04      	ldr	r2, [pc, #16]	; (800a6c4 <HAL_RCC_EnableCSS+0x1c>)
 800a6b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a6b6:	6013      	str	r3, [r2, #0]
}
 800a6b8:	bf00      	nop
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr
 800a6c2:	bf00      	nop
 800a6c4:	58024400 	.word	0x58024400

0800a6c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b089      	sub	sp, #36	; 0x24
 800a6cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a6ce:	4bb3      	ldr	r3, [pc, #716]	; (800a99c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6d0:	691b      	ldr	r3, [r3, #16]
 800a6d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a6d6:	2b18      	cmp	r3, #24
 800a6d8:	f200 8155 	bhi.w	800a986 <HAL_RCC_GetSysClockFreq+0x2be>
 800a6dc:	a201      	add	r2, pc, #4	; (adr r2, 800a6e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a6de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6e2:	bf00      	nop
 800a6e4:	0800a749 	.word	0x0800a749
 800a6e8:	0800a987 	.word	0x0800a987
 800a6ec:	0800a987 	.word	0x0800a987
 800a6f0:	0800a987 	.word	0x0800a987
 800a6f4:	0800a987 	.word	0x0800a987
 800a6f8:	0800a987 	.word	0x0800a987
 800a6fc:	0800a987 	.word	0x0800a987
 800a700:	0800a987 	.word	0x0800a987
 800a704:	0800a76f 	.word	0x0800a76f
 800a708:	0800a987 	.word	0x0800a987
 800a70c:	0800a987 	.word	0x0800a987
 800a710:	0800a987 	.word	0x0800a987
 800a714:	0800a987 	.word	0x0800a987
 800a718:	0800a987 	.word	0x0800a987
 800a71c:	0800a987 	.word	0x0800a987
 800a720:	0800a987 	.word	0x0800a987
 800a724:	0800a775 	.word	0x0800a775
 800a728:	0800a987 	.word	0x0800a987
 800a72c:	0800a987 	.word	0x0800a987
 800a730:	0800a987 	.word	0x0800a987
 800a734:	0800a987 	.word	0x0800a987
 800a738:	0800a987 	.word	0x0800a987
 800a73c:	0800a987 	.word	0x0800a987
 800a740:	0800a987 	.word	0x0800a987
 800a744:	0800a77b 	.word	0x0800a77b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a748:	4b94      	ldr	r3, [pc, #592]	; (800a99c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f003 0320 	and.w	r3, r3, #32
 800a750:	2b00      	cmp	r3, #0
 800a752:	d009      	beq.n	800a768 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a754:	4b91      	ldr	r3, [pc, #580]	; (800a99c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	08db      	lsrs	r3, r3, #3
 800a75a:	f003 0303 	and.w	r3, r3, #3
 800a75e:	4a90      	ldr	r2, [pc, #576]	; (800a9a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a760:	fa22 f303 	lsr.w	r3, r2, r3
 800a764:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a766:	e111      	b.n	800a98c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a768:	4b8d      	ldr	r3, [pc, #564]	; (800a9a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a76a:	61bb      	str	r3, [r7, #24]
      break;
 800a76c:	e10e      	b.n	800a98c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a76e:	4b8d      	ldr	r3, [pc, #564]	; (800a9a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a770:	61bb      	str	r3, [r7, #24]
      break;
 800a772:	e10b      	b.n	800a98c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a774:	4b8c      	ldr	r3, [pc, #560]	; (800a9a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a776:	61bb      	str	r3, [r7, #24]
      break;
 800a778:	e108      	b.n	800a98c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a77a:	4b88      	ldr	r3, [pc, #544]	; (800a99c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a77c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a77e:	f003 0303 	and.w	r3, r3, #3
 800a782:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a784:	4b85      	ldr	r3, [pc, #532]	; (800a99c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a788:	091b      	lsrs	r3, r3, #4
 800a78a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a78e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a790:	4b82      	ldr	r3, [pc, #520]	; (800a99c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a794:	f003 0301 	and.w	r3, r3, #1
 800a798:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a79a:	4b80      	ldr	r3, [pc, #512]	; (800a99c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a79c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a79e:	08db      	lsrs	r3, r3, #3
 800a7a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a7a4:	68fa      	ldr	r2, [r7, #12]
 800a7a6:	fb02 f303 	mul.w	r3, r2, r3
 800a7aa:	ee07 3a90 	vmov	s15, r3
 800a7ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7b2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	f000 80e1 	beq.w	800a980 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	2b02      	cmp	r3, #2
 800a7c2:	f000 8083 	beq.w	800a8cc <HAL_RCC_GetSysClockFreq+0x204>
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	2b02      	cmp	r3, #2
 800a7ca:	f200 80a1 	bhi.w	800a910 <HAL_RCC_GetSysClockFreq+0x248>
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d003      	beq.n	800a7dc <HAL_RCC_GetSysClockFreq+0x114>
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d056      	beq.n	800a888 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a7da:	e099      	b.n	800a910 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7dc:	4b6f      	ldr	r3, [pc, #444]	; (800a99c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f003 0320 	and.w	r3, r3, #32
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d02d      	beq.n	800a844 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7e8:	4b6c      	ldr	r3, [pc, #432]	; (800a99c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	08db      	lsrs	r3, r3, #3
 800a7ee:	f003 0303 	and.w	r3, r3, #3
 800a7f2:	4a6b      	ldr	r2, [pc, #428]	; (800a9a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a7f4:	fa22 f303 	lsr.w	r3, r2, r3
 800a7f8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	ee07 3a90 	vmov	s15, r3
 800a800:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	ee07 3a90 	vmov	s15, r3
 800a80a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a80e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a812:	4b62      	ldr	r3, [pc, #392]	; (800a99c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a81a:	ee07 3a90 	vmov	s15, r3
 800a81e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a822:	ed97 6a02 	vldr	s12, [r7, #8]
 800a826:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a9ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800a82a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a82e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a832:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a83a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a83e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a842:	e087      	b.n	800a954 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	ee07 3a90 	vmov	s15, r3
 800a84a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a84e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a9b0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a856:	4b51      	ldr	r3, [pc, #324]	; (800a99c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a85a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a85e:	ee07 3a90 	vmov	s15, r3
 800a862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a866:	ed97 6a02 	vldr	s12, [r7, #8]
 800a86a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a9ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800a86e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a876:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a87a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a87e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a882:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a886:	e065      	b.n	800a954 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	ee07 3a90 	vmov	s15, r3
 800a88e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a892:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a9b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a89a:	4b40      	ldr	r3, [pc, #256]	; (800a99c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a89c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a89e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8a2:	ee07 3a90 	vmov	s15, r3
 800a8a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8aa:	ed97 6a02 	vldr	s12, [r7, #8]
 800a8ae:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a9ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800a8b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a8ca:	e043      	b.n	800a954 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	ee07 3a90 	vmov	s15, r3
 800a8d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8d6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a9b8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a8da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8de:	4b2f      	ldr	r3, [pc, #188]	; (800a99c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8e6:	ee07 3a90 	vmov	s15, r3
 800a8ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8ee:	ed97 6a02 	vldr	s12, [r7, #8]
 800a8f2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a9ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800a8f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a90a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a90e:	e021      	b.n	800a954 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	ee07 3a90 	vmov	s15, r3
 800a916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a91a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a9b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a91e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a922:	4b1e      	ldr	r3, [pc, #120]	; (800a99c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a92a:	ee07 3a90 	vmov	s15, r3
 800a92e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a932:	ed97 6a02 	vldr	s12, [r7, #8]
 800a936:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a9ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800a93a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a93e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a942:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a94a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a94e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a952:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a954:	4b11      	ldr	r3, [pc, #68]	; (800a99c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a958:	0a5b      	lsrs	r3, r3, #9
 800a95a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a95e:	3301      	adds	r3, #1
 800a960:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	ee07 3a90 	vmov	s15, r3
 800a968:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a96c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a970:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a974:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a978:	ee17 3a90 	vmov	r3, s15
 800a97c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a97e:	e005      	b.n	800a98c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a980:	2300      	movs	r3, #0
 800a982:	61bb      	str	r3, [r7, #24]
      break;
 800a984:	e002      	b.n	800a98c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a986:	4b07      	ldr	r3, [pc, #28]	; (800a9a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a988:	61bb      	str	r3, [r7, #24]
      break;
 800a98a:	bf00      	nop
  }

  return sysclockfreq;
 800a98c:	69bb      	ldr	r3, [r7, #24]
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3724      	adds	r7, #36	; 0x24
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr
 800a99a:	bf00      	nop
 800a99c:	58024400 	.word	0x58024400
 800a9a0:	03d09000 	.word	0x03d09000
 800a9a4:	003d0900 	.word	0x003d0900
 800a9a8:	00989680 	.word	0x00989680
 800a9ac:	46000000 	.word	0x46000000
 800a9b0:	4c742400 	.word	0x4c742400
 800a9b4:	4a742400 	.word	0x4a742400
 800a9b8:	4b189680 	.word	0x4b189680

0800a9bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b082      	sub	sp, #8
 800a9c0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a9c2:	f7ff fe81 	bl	800a6c8 <HAL_RCC_GetSysClockFreq>
 800a9c6:	4602      	mov	r2, r0
 800a9c8:	4b10      	ldr	r3, [pc, #64]	; (800aa0c <HAL_RCC_GetHCLKFreq+0x50>)
 800a9ca:	699b      	ldr	r3, [r3, #24]
 800a9cc:	0a1b      	lsrs	r3, r3, #8
 800a9ce:	f003 030f 	and.w	r3, r3, #15
 800a9d2:	490f      	ldr	r1, [pc, #60]	; (800aa10 <HAL_RCC_GetHCLKFreq+0x54>)
 800a9d4:	5ccb      	ldrb	r3, [r1, r3]
 800a9d6:	f003 031f 	and.w	r3, r3, #31
 800a9da:	fa22 f303 	lsr.w	r3, r2, r3
 800a9de:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a9e0:	4b0a      	ldr	r3, [pc, #40]	; (800aa0c <HAL_RCC_GetHCLKFreq+0x50>)
 800a9e2:	699b      	ldr	r3, [r3, #24]
 800a9e4:	f003 030f 	and.w	r3, r3, #15
 800a9e8:	4a09      	ldr	r2, [pc, #36]	; (800aa10 <HAL_RCC_GetHCLKFreq+0x54>)
 800a9ea:	5cd3      	ldrb	r3, [r2, r3]
 800a9ec:	f003 031f 	and.w	r3, r3, #31
 800a9f0:	687a      	ldr	r2, [r7, #4]
 800a9f2:	fa22 f303 	lsr.w	r3, r2, r3
 800a9f6:	4a07      	ldr	r2, [pc, #28]	; (800aa14 <HAL_RCC_GetHCLKFreq+0x58>)
 800a9f8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a9fa:	4a07      	ldr	r2, [pc, #28]	; (800aa18 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800aa00:	4b04      	ldr	r3, [pc, #16]	; (800aa14 <HAL_RCC_GetHCLKFreq+0x58>)
 800aa02:	681b      	ldr	r3, [r3, #0]
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3708      	adds	r7, #8
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}
 800aa0c:	58024400 	.word	0x58024400
 800aa10:	0801efb4 	.word	0x0801efb4
 800aa14:	20000014 	.word	0x20000014
 800aa18:	20000010 	.word	0x20000010

0800aa1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800aa20:	f7ff ffcc 	bl	800a9bc <HAL_RCC_GetHCLKFreq>
 800aa24:	4602      	mov	r2, r0
 800aa26:	4b06      	ldr	r3, [pc, #24]	; (800aa40 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aa28:	69db      	ldr	r3, [r3, #28]
 800aa2a:	091b      	lsrs	r3, r3, #4
 800aa2c:	f003 0307 	and.w	r3, r3, #7
 800aa30:	4904      	ldr	r1, [pc, #16]	; (800aa44 <HAL_RCC_GetPCLK1Freq+0x28>)
 800aa32:	5ccb      	ldrb	r3, [r1, r3]
 800aa34:	f003 031f 	and.w	r3, r3, #31
 800aa38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	bd80      	pop	{r7, pc}
 800aa40:	58024400 	.word	0x58024400
 800aa44:	0801efb4 	.word	0x0801efb4

0800aa48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800aa4c:	f7ff ffb6 	bl	800a9bc <HAL_RCC_GetHCLKFreq>
 800aa50:	4602      	mov	r2, r0
 800aa52:	4b06      	ldr	r3, [pc, #24]	; (800aa6c <HAL_RCC_GetPCLK2Freq+0x24>)
 800aa54:	69db      	ldr	r3, [r3, #28]
 800aa56:	0a1b      	lsrs	r3, r3, #8
 800aa58:	f003 0307 	and.w	r3, r3, #7
 800aa5c:	4904      	ldr	r1, [pc, #16]	; (800aa70 <HAL_RCC_GetPCLK2Freq+0x28>)
 800aa5e:	5ccb      	ldrb	r3, [r1, r3]
 800aa60:	f003 031f 	and.w	r3, r3, #31
 800aa64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	bd80      	pop	{r7, pc}
 800aa6c:	58024400 	.word	0x58024400
 800aa70:	0801efb4 	.word	0x0801efb4

0800aa74 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800aa78:	4b07      	ldr	r3, [pc, #28]	; (800aa98 <HAL_RCC_NMI_IRQHandler+0x24>)
 800aa7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa84:	d105      	bne.n	800aa92 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800aa86:	f000 f809 	bl	800aa9c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800aa8a:	4b03      	ldr	r3, [pc, #12]	; (800aa98 <HAL_RCC_NMI_IRQHandler+0x24>)
 800aa8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aa90:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800aa92:	bf00      	nop
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop
 800aa98:	58024400 	.word	0x58024400

0800aa9c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800aaa0:	bf00      	nop
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr
	...

0800aaac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aaac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aab0:	b0ca      	sub	sp, #296	; 0x128
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800aab8:	2300      	movs	r3, #0
 800aaba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800aabe:	2300      	movs	r3, #0
 800aac0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800aac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aacc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800aad0:	2500      	movs	r5, #0
 800aad2:	ea54 0305 	orrs.w	r3, r4, r5
 800aad6:	d049      	beq.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800aad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aadc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aade:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aae2:	d02f      	beq.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800aae4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aae8:	d828      	bhi.n	800ab3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800aaea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aaee:	d01a      	beq.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800aaf0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aaf4:	d822      	bhi.n	800ab3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d003      	beq.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800aafa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aafe:	d007      	beq.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ab00:	e01c      	b.n	800ab3c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab02:	4bb8      	ldr	r3, [pc, #736]	; (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab06:	4ab7      	ldr	r2, [pc, #732]	; (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ab0e:	e01a      	b.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ab10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab14:	3308      	adds	r3, #8
 800ab16:	2102      	movs	r1, #2
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f002 fbb7 	bl	800d28c <RCCEx_PLL2_Config>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ab24:	e00f      	b.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ab26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab2a:	3328      	adds	r3, #40	; 0x28
 800ab2c:	2102      	movs	r1, #2
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f002 fc5e 	bl	800d3f0 <RCCEx_PLL3_Config>
 800ab34:	4603      	mov	r3, r0
 800ab36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ab3a:	e004      	b.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ab42:	e000      	b.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ab44:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d10a      	bne.n	800ab64 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ab4e:	4ba5      	ldr	r3, [pc, #660]	; (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab52:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ab56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab5c:	4aa1      	ldr	r2, [pc, #644]	; (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab5e:	430b      	orrs	r3, r1
 800ab60:	6513      	str	r3, [r2, #80]	; 0x50
 800ab62:	e003      	b.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab68:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ab6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab74:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800ab78:	f04f 0900 	mov.w	r9, #0
 800ab7c:	ea58 0309 	orrs.w	r3, r8, r9
 800ab80:	d047      	beq.n	800ac12 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ab82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab88:	2b04      	cmp	r3, #4
 800ab8a:	d82a      	bhi.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ab8c:	a201      	add	r2, pc, #4	; (adr r2, 800ab94 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ab8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab92:	bf00      	nop
 800ab94:	0800aba9 	.word	0x0800aba9
 800ab98:	0800abb7 	.word	0x0800abb7
 800ab9c:	0800abcd 	.word	0x0800abcd
 800aba0:	0800abeb 	.word	0x0800abeb
 800aba4:	0800abeb 	.word	0x0800abeb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aba8:	4b8e      	ldr	r3, [pc, #568]	; (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800abaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abac:	4a8d      	ldr	r2, [pc, #564]	; (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800abae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800abb4:	e01a      	b.n	800abec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800abb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abba:	3308      	adds	r3, #8
 800abbc:	2100      	movs	r1, #0
 800abbe:	4618      	mov	r0, r3
 800abc0:	f002 fb64 	bl	800d28c <RCCEx_PLL2_Config>
 800abc4:	4603      	mov	r3, r0
 800abc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800abca:	e00f      	b.n	800abec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800abcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abd0:	3328      	adds	r3, #40	; 0x28
 800abd2:	2100      	movs	r1, #0
 800abd4:	4618      	mov	r0, r3
 800abd6:	f002 fc0b 	bl	800d3f0 <RCCEx_PLL3_Config>
 800abda:	4603      	mov	r3, r0
 800abdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800abe0:	e004      	b.n	800abec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800abe2:	2301      	movs	r3, #1
 800abe4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800abe8:	e000      	b.n	800abec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800abea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d10a      	bne.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800abf4:	4b7b      	ldr	r3, [pc, #492]	; (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800abf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abf8:	f023 0107 	bic.w	r1, r3, #7
 800abfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac02:	4a78      	ldr	r2, [pc, #480]	; (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac04:	430b      	orrs	r3, r1
 800ac06:	6513      	str	r3, [r2, #80]	; 0x50
 800ac08:	e003      	b.n	800ac12 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ac12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac1a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800ac1e:	f04f 0b00 	mov.w	fp, #0
 800ac22:	ea5a 030b 	orrs.w	r3, sl, fp
 800ac26:	d04c      	beq.n	800acc2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800ac28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac32:	d030      	beq.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800ac34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac38:	d829      	bhi.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ac3a:	2bc0      	cmp	r3, #192	; 0xc0
 800ac3c:	d02d      	beq.n	800ac9a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800ac3e:	2bc0      	cmp	r3, #192	; 0xc0
 800ac40:	d825      	bhi.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ac42:	2b80      	cmp	r3, #128	; 0x80
 800ac44:	d018      	beq.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800ac46:	2b80      	cmp	r3, #128	; 0x80
 800ac48:	d821      	bhi.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d002      	beq.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800ac4e:	2b40      	cmp	r3, #64	; 0x40
 800ac50:	d007      	beq.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800ac52:	e01c      	b.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac54:	4b63      	ldr	r3, [pc, #396]	; (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac58:	4a62      	ldr	r2, [pc, #392]	; (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ac60:	e01c      	b.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac66:	3308      	adds	r3, #8
 800ac68:	2100      	movs	r1, #0
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f002 fb0e 	bl	800d28c <RCCEx_PLL2_Config>
 800ac70:	4603      	mov	r3, r0
 800ac72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ac76:	e011      	b.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ac78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac7c:	3328      	adds	r3, #40	; 0x28
 800ac7e:	2100      	movs	r1, #0
 800ac80:	4618      	mov	r0, r3
 800ac82:	f002 fbb5 	bl	800d3f0 <RCCEx_PLL3_Config>
 800ac86:	4603      	mov	r3, r0
 800ac88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ac8c:	e006      	b.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ac94:	e002      	b.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ac96:	bf00      	nop
 800ac98:	e000      	b.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ac9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d10a      	bne.n	800acba <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800aca4:	4b4f      	ldr	r3, [pc, #316]	; (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aca8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800acac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acb2:	4a4c      	ldr	r2, [pc, #304]	; (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800acb4:	430b      	orrs	r3, r1
 800acb6:	6513      	str	r3, [r2, #80]	; 0x50
 800acb8:	e003      	b.n	800acc2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800acbe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800acc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acca:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800acce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800acd2:	2300      	movs	r3, #0
 800acd4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800acd8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800acdc:	460b      	mov	r3, r1
 800acde:	4313      	orrs	r3, r2
 800ace0:	d053      	beq.n	800ad8a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800ace2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ace6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800acea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800acee:	d035      	beq.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800acf0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800acf4:	d82e      	bhi.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800acf6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800acfa:	d031      	beq.n	800ad60 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800acfc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ad00:	d828      	bhi.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ad02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad06:	d01a      	beq.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800ad08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad0c:	d822      	bhi.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d003      	beq.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800ad12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad16:	d007      	beq.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800ad18:	e01c      	b.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad1a:	4b32      	ldr	r3, [pc, #200]	; (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ad1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad1e:	4a31      	ldr	r2, [pc, #196]	; (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ad20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ad26:	e01c      	b.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad2c:	3308      	adds	r3, #8
 800ad2e:	2100      	movs	r1, #0
 800ad30:	4618      	mov	r0, r3
 800ad32:	f002 faab 	bl	800d28c <RCCEx_PLL2_Config>
 800ad36:	4603      	mov	r3, r0
 800ad38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ad3c:	e011      	b.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ad3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad42:	3328      	adds	r3, #40	; 0x28
 800ad44:	2100      	movs	r1, #0
 800ad46:	4618      	mov	r0, r3
 800ad48:	f002 fb52 	bl	800d3f0 <RCCEx_PLL3_Config>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ad52:	e006      	b.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ad54:	2301      	movs	r3, #1
 800ad56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ad5a:	e002      	b.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ad5c:	bf00      	nop
 800ad5e:	e000      	b.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ad60:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d10b      	bne.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ad6a:	4b1e      	ldr	r3, [pc, #120]	; (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ad6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad6e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800ad72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ad7a:	4a1a      	ldr	r2, [pc, #104]	; (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ad7c:	430b      	orrs	r3, r1
 800ad7e:	6593      	str	r3, [r2, #88]	; 0x58
 800ad80:	e003      	b.n	800ad8a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ad8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad92:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800ad96:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800ada0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800ada4:	460b      	mov	r3, r1
 800ada6:	4313      	orrs	r3, r2
 800ada8:	d056      	beq.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800adaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800adb2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800adb6:	d038      	beq.n	800ae2a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800adb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800adbc:	d831      	bhi.n	800ae22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800adbe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800adc2:	d034      	beq.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800adc4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800adc8:	d82b      	bhi.n	800ae22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800adca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800adce:	d01d      	beq.n	800ae0c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800add0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800add4:	d825      	bhi.n	800ae22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800add6:	2b00      	cmp	r3, #0
 800add8:	d006      	beq.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800adda:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800adde:	d00a      	beq.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800ade0:	e01f      	b.n	800ae22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ade2:	bf00      	nop
 800ade4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ade8:	4ba2      	ldr	r3, [pc, #648]	; (800b074 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800adea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adec:	4aa1      	ldr	r2, [pc, #644]	; (800b074 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800adee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800adf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800adf4:	e01c      	b.n	800ae30 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800adf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adfa:	3308      	adds	r3, #8
 800adfc:	2100      	movs	r1, #0
 800adfe:	4618      	mov	r0, r3
 800ae00:	f002 fa44 	bl	800d28c <RCCEx_PLL2_Config>
 800ae04:	4603      	mov	r3, r0
 800ae06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ae0a:	e011      	b.n	800ae30 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ae0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae10:	3328      	adds	r3, #40	; 0x28
 800ae12:	2100      	movs	r1, #0
 800ae14:	4618      	mov	r0, r3
 800ae16:	f002 faeb 	bl	800d3f0 <RCCEx_PLL3_Config>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ae20:	e006      	b.n	800ae30 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ae22:	2301      	movs	r3, #1
 800ae24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ae28:	e002      	b.n	800ae30 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ae2a:	bf00      	nop
 800ae2c:	e000      	b.n	800ae30 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ae2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d10b      	bne.n	800ae50 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ae38:	4b8e      	ldr	r3, [pc, #568]	; (800b074 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae3c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800ae40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ae48:	4a8a      	ldr	r2, [pc, #552]	; (800b074 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae4a:	430b      	orrs	r3, r1
 800ae4c:	6593      	str	r3, [r2, #88]	; 0x58
 800ae4e:	e003      	b.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ae58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae60:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800ae64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ae68:	2300      	movs	r3, #0
 800ae6a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ae6e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800ae72:	460b      	mov	r3, r1
 800ae74:	4313      	orrs	r3, r2
 800ae76:	d03a      	beq.n	800aeee <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800ae78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae7e:	2b30      	cmp	r3, #48	; 0x30
 800ae80:	d01f      	beq.n	800aec2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800ae82:	2b30      	cmp	r3, #48	; 0x30
 800ae84:	d819      	bhi.n	800aeba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ae86:	2b20      	cmp	r3, #32
 800ae88:	d00c      	beq.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800ae8a:	2b20      	cmp	r3, #32
 800ae8c:	d815      	bhi.n	800aeba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d019      	beq.n	800aec6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800ae92:	2b10      	cmp	r3, #16
 800ae94:	d111      	bne.n	800aeba <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae96:	4b77      	ldr	r3, [pc, #476]	; (800b074 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae9a:	4a76      	ldr	r2, [pc, #472]	; (800b074 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aea0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800aea2:	e011      	b.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aea8:	3308      	adds	r3, #8
 800aeaa:	2102      	movs	r1, #2
 800aeac:	4618      	mov	r0, r3
 800aeae:	f002 f9ed 	bl	800d28c <RCCEx_PLL2_Config>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800aeb8:	e006      	b.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800aeba:	2301      	movs	r3, #1
 800aebc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aec0:	e002      	b.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800aec2:	bf00      	nop
 800aec4:	e000      	b.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800aec6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aec8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d10a      	bne.n	800aee6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800aed0:	4b68      	ldr	r3, [pc, #416]	; (800b074 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aed4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800aed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aedc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aede:	4a65      	ldr	r2, [pc, #404]	; (800b074 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aee0:	430b      	orrs	r3, r1
 800aee2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aee4:	e003      	b.n	800aeee <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aee6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aeea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800aeee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800aefa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800aefe:	2300      	movs	r3, #0
 800af00:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800af04:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800af08:	460b      	mov	r3, r1
 800af0a:	4313      	orrs	r3, r2
 800af0c:	d051      	beq.n	800afb2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800af0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af18:	d035      	beq.n	800af86 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800af1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af1e:	d82e      	bhi.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800af20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800af24:	d031      	beq.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800af26:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800af2a:	d828      	bhi.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800af2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af30:	d01a      	beq.n	800af68 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800af32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af36:	d822      	bhi.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d003      	beq.n	800af44 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800af3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af40:	d007      	beq.n	800af52 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800af42:	e01c      	b.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af44:	4b4b      	ldr	r3, [pc, #300]	; (800b074 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800af46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af48:	4a4a      	ldr	r2, [pc, #296]	; (800b074 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800af4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800af50:	e01c      	b.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af56:	3308      	adds	r3, #8
 800af58:	2100      	movs	r1, #0
 800af5a:	4618      	mov	r0, r3
 800af5c:	f002 f996 	bl	800d28c <RCCEx_PLL2_Config>
 800af60:	4603      	mov	r3, r0
 800af62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800af66:	e011      	b.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af6c:	3328      	adds	r3, #40	; 0x28
 800af6e:	2100      	movs	r1, #0
 800af70:	4618      	mov	r0, r3
 800af72:	f002 fa3d 	bl	800d3f0 <RCCEx_PLL3_Config>
 800af76:	4603      	mov	r3, r0
 800af78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800af7c:	e006      	b.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af7e:	2301      	movs	r3, #1
 800af80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800af84:	e002      	b.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800af86:	bf00      	nop
 800af88:	e000      	b.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800af8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af90:	2b00      	cmp	r3, #0
 800af92:	d10a      	bne.n	800afaa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800af94:	4b37      	ldr	r3, [pc, #220]	; (800b074 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800af96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af98:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800af9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800afa2:	4a34      	ldr	r2, [pc, #208]	; (800b074 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800afa4:	430b      	orrs	r3, r1
 800afa6:	6513      	str	r3, [r2, #80]	; 0x50
 800afa8:	e003      	b.n	800afb2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800afae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800afb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afba:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800afbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800afc2:	2300      	movs	r3, #0
 800afc4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800afc8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800afcc:	460b      	mov	r3, r1
 800afce:	4313      	orrs	r3, r2
 800afd0:	d056      	beq.n	800b080 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800afd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800afd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800afdc:	d033      	beq.n	800b046 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800afde:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800afe2:	d82c      	bhi.n	800b03e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800afe4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800afe8:	d02f      	beq.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800afea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800afee:	d826      	bhi.n	800b03e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800aff0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aff4:	d02b      	beq.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800aff6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800affa:	d820      	bhi.n	800b03e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800affc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b000:	d012      	beq.n	800b028 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b002:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b006:	d81a      	bhi.n	800b03e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d022      	beq.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b00c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b010:	d115      	bne.n	800b03e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b016:	3308      	adds	r3, #8
 800b018:	2101      	movs	r1, #1
 800b01a:	4618      	mov	r0, r3
 800b01c:	f002 f936 	bl	800d28c <RCCEx_PLL2_Config>
 800b020:	4603      	mov	r3, r0
 800b022:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b026:	e015      	b.n	800b054 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b02c:	3328      	adds	r3, #40	; 0x28
 800b02e:	2101      	movs	r1, #1
 800b030:	4618      	mov	r0, r3
 800b032:	f002 f9dd 	bl	800d3f0 <RCCEx_PLL3_Config>
 800b036:	4603      	mov	r3, r0
 800b038:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b03c:	e00a      	b.n	800b054 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b03e:	2301      	movs	r3, #1
 800b040:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b044:	e006      	b.n	800b054 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b046:	bf00      	nop
 800b048:	e004      	b.n	800b054 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b04a:	bf00      	nop
 800b04c:	e002      	b.n	800b054 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b04e:	bf00      	nop
 800b050:	e000      	b.n	800b054 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b052:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b054:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d10d      	bne.n	800b078 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b05c:	4b05      	ldr	r3, [pc, #20]	; (800b074 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b05e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b060:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b068:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b06a:	4a02      	ldr	r2, [pc, #8]	; (800b074 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b06c:	430b      	orrs	r3, r1
 800b06e:	6513      	str	r3, [r2, #80]	; 0x50
 800b070:	e006      	b.n	800b080 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b072:	bf00      	nop
 800b074:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b078:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b07c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b080:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b088:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b08c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b090:	2300      	movs	r3, #0
 800b092:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b096:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b09a:	460b      	mov	r3, r1
 800b09c:	4313      	orrs	r3, r2
 800b09e:	d055      	beq.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b0a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b0a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b0ac:	d033      	beq.n	800b116 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b0ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b0b2:	d82c      	bhi.n	800b10e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b0b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0b8:	d02f      	beq.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b0ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0be:	d826      	bhi.n	800b10e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b0c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b0c4:	d02b      	beq.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b0c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b0ca:	d820      	bhi.n	800b10e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b0cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0d0:	d012      	beq.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b0d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0d6:	d81a      	bhi.n	800b10e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d022      	beq.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b0dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b0e0:	d115      	bne.n	800b10e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b0e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0e6:	3308      	adds	r3, #8
 800b0e8:	2101      	movs	r1, #1
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f002 f8ce 	bl	800d28c <RCCEx_PLL2_Config>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b0f6:	e015      	b.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b0f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0fc:	3328      	adds	r3, #40	; 0x28
 800b0fe:	2101      	movs	r1, #1
 800b100:	4618      	mov	r0, r3
 800b102:	f002 f975 	bl	800d3f0 <RCCEx_PLL3_Config>
 800b106:	4603      	mov	r3, r0
 800b108:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b10c:	e00a      	b.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b10e:	2301      	movs	r3, #1
 800b110:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b114:	e006      	b.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b116:	bf00      	nop
 800b118:	e004      	b.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b11a:	bf00      	nop
 800b11c:	e002      	b.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b11e:	bf00      	nop
 800b120:	e000      	b.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b122:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b124:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d10b      	bne.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b12c:	4ba3      	ldr	r3, [pc, #652]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b12e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b130:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b134:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b138:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b13c:	4a9f      	ldr	r2, [pc, #636]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b13e:	430b      	orrs	r3, r1
 800b140:	6593      	str	r3, [r2, #88]	; 0x58
 800b142:	e003      	b.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b144:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b148:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b14c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b154:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b158:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b15c:	2300      	movs	r3, #0
 800b15e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b162:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b166:	460b      	mov	r3, r1
 800b168:	4313      	orrs	r3, r2
 800b16a:	d037      	beq.n	800b1dc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b16c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b172:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b176:	d00e      	beq.n	800b196 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b178:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b17c:	d816      	bhi.n	800b1ac <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d018      	beq.n	800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b182:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b186:	d111      	bne.n	800b1ac <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b188:	4b8c      	ldr	r3, [pc, #560]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b18c:	4a8b      	ldr	r2, [pc, #556]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b18e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b192:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b194:	e00f      	b.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b19a:	3308      	adds	r3, #8
 800b19c:	2101      	movs	r1, #1
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f002 f874 	bl	800d28c <RCCEx_PLL2_Config>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b1aa:	e004      	b.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b1b2:	e000      	b.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b1b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d10a      	bne.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b1be:	4b7f      	ldr	r3, [pc, #508]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1c2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b1c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1cc:	4a7b      	ldr	r2, [pc, #492]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1ce:	430b      	orrs	r3, r1
 800b1d0:	6513      	str	r3, [r2, #80]	; 0x50
 800b1d2:	e003      	b.n	800b1dc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b1dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b1e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b1f2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b1f6:	460b      	mov	r3, r1
 800b1f8:	4313      	orrs	r3, r2
 800b1fa:	d039      	beq.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b1fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b202:	2b03      	cmp	r3, #3
 800b204:	d81c      	bhi.n	800b240 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b206:	a201      	add	r2, pc, #4	; (adr r2, 800b20c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b20c:	0800b249 	.word	0x0800b249
 800b210:	0800b21d 	.word	0x0800b21d
 800b214:	0800b22b 	.word	0x0800b22b
 800b218:	0800b249 	.word	0x0800b249
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b21c:	4b67      	ldr	r3, [pc, #412]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b220:	4a66      	ldr	r2, [pc, #408]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b222:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b226:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b228:	e00f      	b.n	800b24a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b22a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b22e:	3308      	adds	r3, #8
 800b230:	2102      	movs	r1, #2
 800b232:	4618      	mov	r0, r3
 800b234:	f002 f82a 	bl	800d28c <RCCEx_PLL2_Config>
 800b238:	4603      	mov	r3, r0
 800b23a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b23e:	e004      	b.n	800b24a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b240:	2301      	movs	r3, #1
 800b242:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b246:	e000      	b.n	800b24a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b24a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d10a      	bne.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b252:	4b5a      	ldr	r3, [pc, #360]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b256:	f023 0103 	bic.w	r1, r3, #3
 800b25a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b25e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b260:	4a56      	ldr	r2, [pc, #344]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b262:	430b      	orrs	r3, r1
 800b264:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b266:	e003      	b.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b268:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b26c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b270:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b278:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b27c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b280:	2300      	movs	r3, #0
 800b282:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b286:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b28a:	460b      	mov	r3, r1
 800b28c:	4313      	orrs	r3, r2
 800b28e:	f000 809f 	beq.w	800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b292:	4b4b      	ldr	r3, [pc, #300]	; (800b3c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	4a4a      	ldr	r2, [pc, #296]	; (800b3c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b29c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b29e:	f7f8 fed5 	bl	800404c <HAL_GetTick>
 800b2a2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b2a6:	e00b      	b.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b2a8:	f7f8 fed0 	bl	800404c <HAL_GetTick>
 800b2ac:	4602      	mov	r2, r0
 800b2ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b2b2:	1ad3      	subs	r3, r2, r3
 800b2b4:	2b64      	cmp	r3, #100	; 0x64
 800b2b6:	d903      	bls.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b2b8:	2303      	movs	r3, #3
 800b2ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b2be:	e005      	b.n	800b2cc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b2c0:	4b3f      	ldr	r3, [pc, #252]	; (800b3c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d0ed      	beq.n	800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b2cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d179      	bne.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b2d4:	4b39      	ldr	r3, [pc, #228]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b2d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b2d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b2e0:	4053      	eors	r3, r2
 800b2e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d015      	beq.n	800b316 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b2ea:	4b34      	ldr	r3, [pc, #208]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b2ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b2f6:	4b31      	ldr	r3, [pc, #196]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b2f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2fa:	4a30      	ldr	r2, [pc, #192]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b2fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b300:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b302:	4b2e      	ldr	r3, [pc, #184]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b306:	4a2d      	ldr	r2, [pc, #180]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b308:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b30c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b30e:	4a2b      	ldr	r2, [pc, #172]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b310:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b314:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b31a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b31e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b322:	d118      	bne.n	800b356 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b324:	f7f8 fe92 	bl	800404c <HAL_GetTick>
 800b328:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b32c:	e00d      	b.n	800b34a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b32e:	f7f8 fe8d 	bl	800404c <HAL_GetTick>
 800b332:	4602      	mov	r2, r0
 800b334:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b338:	1ad2      	subs	r2, r2, r3
 800b33a:	f241 3388 	movw	r3, #5000	; 0x1388
 800b33e:	429a      	cmp	r2, r3
 800b340:	d903      	bls.n	800b34a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b342:	2303      	movs	r3, #3
 800b344:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b348:	e005      	b.n	800b356 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b34a:	4b1c      	ldr	r3, [pc, #112]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b34c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b34e:	f003 0302 	and.w	r3, r3, #2
 800b352:	2b00      	cmp	r3, #0
 800b354:	d0eb      	beq.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b356:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d129      	bne.n	800b3b2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b35e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b362:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b36a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b36e:	d10e      	bne.n	800b38e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b370:	4b12      	ldr	r3, [pc, #72]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b372:	691b      	ldr	r3, [r3, #16]
 800b374:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b378:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b37c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b380:	091a      	lsrs	r2, r3, #4
 800b382:	4b10      	ldr	r3, [pc, #64]	; (800b3c4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b384:	4013      	ands	r3, r2
 800b386:	4a0d      	ldr	r2, [pc, #52]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b388:	430b      	orrs	r3, r1
 800b38a:	6113      	str	r3, [r2, #16]
 800b38c:	e005      	b.n	800b39a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b38e:	4b0b      	ldr	r3, [pc, #44]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b390:	691b      	ldr	r3, [r3, #16]
 800b392:	4a0a      	ldr	r2, [pc, #40]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b394:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b398:	6113      	str	r3, [r2, #16]
 800b39a:	4b08      	ldr	r3, [pc, #32]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b39c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b39e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b3a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b3aa:	4a04      	ldr	r2, [pc, #16]	; (800b3bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b3ac:	430b      	orrs	r3, r1
 800b3ae:	6713      	str	r3, [r2, #112]	; 0x70
 800b3b0:	e00e      	b.n	800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b3b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b3ba:	e009      	b.n	800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b3bc:	58024400 	.word	0x58024400
 800b3c0:	58024800 	.word	0x58024800
 800b3c4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b3d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d8:	f002 0301 	and.w	r3, r2, #1
 800b3dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b3e6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b3ea:	460b      	mov	r3, r1
 800b3ec:	4313      	orrs	r3, r2
 800b3ee:	f000 8089 	beq.w	800b504 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b3f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3f8:	2b28      	cmp	r3, #40	; 0x28
 800b3fa:	d86b      	bhi.n	800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b3fc:	a201      	add	r2, pc, #4	; (adr r2, 800b404 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b3fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b402:	bf00      	nop
 800b404:	0800b4dd 	.word	0x0800b4dd
 800b408:	0800b4d5 	.word	0x0800b4d5
 800b40c:	0800b4d5 	.word	0x0800b4d5
 800b410:	0800b4d5 	.word	0x0800b4d5
 800b414:	0800b4d5 	.word	0x0800b4d5
 800b418:	0800b4d5 	.word	0x0800b4d5
 800b41c:	0800b4d5 	.word	0x0800b4d5
 800b420:	0800b4d5 	.word	0x0800b4d5
 800b424:	0800b4a9 	.word	0x0800b4a9
 800b428:	0800b4d5 	.word	0x0800b4d5
 800b42c:	0800b4d5 	.word	0x0800b4d5
 800b430:	0800b4d5 	.word	0x0800b4d5
 800b434:	0800b4d5 	.word	0x0800b4d5
 800b438:	0800b4d5 	.word	0x0800b4d5
 800b43c:	0800b4d5 	.word	0x0800b4d5
 800b440:	0800b4d5 	.word	0x0800b4d5
 800b444:	0800b4bf 	.word	0x0800b4bf
 800b448:	0800b4d5 	.word	0x0800b4d5
 800b44c:	0800b4d5 	.word	0x0800b4d5
 800b450:	0800b4d5 	.word	0x0800b4d5
 800b454:	0800b4d5 	.word	0x0800b4d5
 800b458:	0800b4d5 	.word	0x0800b4d5
 800b45c:	0800b4d5 	.word	0x0800b4d5
 800b460:	0800b4d5 	.word	0x0800b4d5
 800b464:	0800b4dd 	.word	0x0800b4dd
 800b468:	0800b4d5 	.word	0x0800b4d5
 800b46c:	0800b4d5 	.word	0x0800b4d5
 800b470:	0800b4d5 	.word	0x0800b4d5
 800b474:	0800b4d5 	.word	0x0800b4d5
 800b478:	0800b4d5 	.word	0x0800b4d5
 800b47c:	0800b4d5 	.word	0x0800b4d5
 800b480:	0800b4d5 	.word	0x0800b4d5
 800b484:	0800b4dd 	.word	0x0800b4dd
 800b488:	0800b4d5 	.word	0x0800b4d5
 800b48c:	0800b4d5 	.word	0x0800b4d5
 800b490:	0800b4d5 	.word	0x0800b4d5
 800b494:	0800b4d5 	.word	0x0800b4d5
 800b498:	0800b4d5 	.word	0x0800b4d5
 800b49c:	0800b4d5 	.word	0x0800b4d5
 800b4a0:	0800b4d5 	.word	0x0800b4d5
 800b4a4:	0800b4dd 	.word	0x0800b4dd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b4a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4ac:	3308      	adds	r3, #8
 800b4ae:	2101      	movs	r1, #1
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f001 feeb 	bl	800d28c <RCCEx_PLL2_Config>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b4bc:	e00f      	b.n	800b4de <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b4be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4c2:	3328      	adds	r3, #40	; 0x28
 800b4c4:	2101      	movs	r1, #1
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f001 ff92 	bl	800d3f0 <RCCEx_PLL3_Config>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b4d2:	e004      	b.n	800b4de <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b4da:	e000      	b.n	800b4de <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b4dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d10a      	bne.n	800b4fc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b4e6:	4bbf      	ldr	r3, [pc, #764]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b4e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4ea:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b4ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4f4:	4abb      	ldr	r2, [pc, #748]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b4f6:	430b      	orrs	r3, r1
 800b4f8:	6553      	str	r3, [r2, #84]	; 0x54
 800b4fa:	e003      	b.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b500:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50c:	f002 0302 	and.w	r3, r2, #2
 800b510:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b514:	2300      	movs	r3, #0
 800b516:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b51a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b51e:	460b      	mov	r3, r1
 800b520:	4313      	orrs	r3, r2
 800b522:	d041      	beq.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b528:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b52a:	2b05      	cmp	r3, #5
 800b52c:	d824      	bhi.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b52e:	a201      	add	r2, pc, #4	; (adr r2, 800b534 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b534:	0800b581 	.word	0x0800b581
 800b538:	0800b54d 	.word	0x0800b54d
 800b53c:	0800b563 	.word	0x0800b563
 800b540:	0800b581 	.word	0x0800b581
 800b544:	0800b581 	.word	0x0800b581
 800b548:	0800b581 	.word	0x0800b581
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b54c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b550:	3308      	adds	r3, #8
 800b552:	2101      	movs	r1, #1
 800b554:	4618      	mov	r0, r3
 800b556:	f001 fe99 	bl	800d28c <RCCEx_PLL2_Config>
 800b55a:	4603      	mov	r3, r0
 800b55c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b560:	e00f      	b.n	800b582 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b562:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b566:	3328      	adds	r3, #40	; 0x28
 800b568:	2101      	movs	r1, #1
 800b56a:	4618      	mov	r0, r3
 800b56c:	f001 ff40 	bl	800d3f0 <RCCEx_PLL3_Config>
 800b570:	4603      	mov	r3, r0
 800b572:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b576:	e004      	b.n	800b582 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b578:	2301      	movs	r3, #1
 800b57a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b57e:	e000      	b.n	800b582 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b580:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b582:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b586:	2b00      	cmp	r3, #0
 800b588:	d10a      	bne.n	800b5a0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b58a:	4b96      	ldr	r3, [pc, #600]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b58c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b58e:	f023 0107 	bic.w	r1, r3, #7
 800b592:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b596:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b598:	4a92      	ldr	r2, [pc, #584]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b59a:	430b      	orrs	r3, r1
 800b59c:	6553      	str	r3, [r2, #84]	; 0x54
 800b59e:	e003      	b.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b5a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b0:	f002 0304 	and.w	r3, r2, #4
 800b5b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b5be:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b5c2:	460b      	mov	r3, r1
 800b5c4:	4313      	orrs	r3, r2
 800b5c6:	d044      	beq.n	800b652 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b5c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b5d0:	2b05      	cmp	r3, #5
 800b5d2:	d825      	bhi.n	800b620 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b5d4:	a201      	add	r2, pc, #4	; (adr r2, 800b5dc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b5d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5da:	bf00      	nop
 800b5dc:	0800b629 	.word	0x0800b629
 800b5e0:	0800b5f5 	.word	0x0800b5f5
 800b5e4:	0800b60b 	.word	0x0800b60b
 800b5e8:	0800b629 	.word	0x0800b629
 800b5ec:	0800b629 	.word	0x0800b629
 800b5f0:	0800b629 	.word	0x0800b629
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b5f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5f8:	3308      	adds	r3, #8
 800b5fa:	2101      	movs	r1, #1
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f001 fe45 	bl	800d28c <RCCEx_PLL2_Config>
 800b602:	4603      	mov	r3, r0
 800b604:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b608:	e00f      	b.n	800b62a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b60a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b60e:	3328      	adds	r3, #40	; 0x28
 800b610:	2101      	movs	r1, #1
 800b612:	4618      	mov	r0, r3
 800b614:	f001 feec 	bl	800d3f0 <RCCEx_PLL3_Config>
 800b618:	4603      	mov	r3, r0
 800b61a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b61e:	e004      	b.n	800b62a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b620:	2301      	movs	r3, #1
 800b622:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b626:	e000      	b.n	800b62a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800b628:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b62a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d10b      	bne.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b632:	4b6c      	ldr	r3, [pc, #432]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b636:	f023 0107 	bic.w	r1, r3, #7
 800b63a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b63e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b642:	4a68      	ldr	r2, [pc, #416]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b644:	430b      	orrs	r3, r1
 800b646:	6593      	str	r3, [r2, #88]	; 0x58
 800b648:	e003      	b.n	800b652 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b64a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b64e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b652:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b65a:	f002 0320 	and.w	r3, r2, #32
 800b65e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b662:	2300      	movs	r3, #0
 800b664:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b668:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b66c:	460b      	mov	r3, r1
 800b66e:	4313      	orrs	r3, r2
 800b670:	d055      	beq.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b67a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b67e:	d033      	beq.n	800b6e8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800b680:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b684:	d82c      	bhi.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b68a:	d02f      	beq.n	800b6ec <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800b68c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b690:	d826      	bhi.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b692:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b696:	d02b      	beq.n	800b6f0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800b698:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b69c:	d820      	bhi.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b69e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6a2:	d012      	beq.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b6a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6a8:	d81a      	bhi.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d022      	beq.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800b6ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6b2:	d115      	bne.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b6b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6b8:	3308      	adds	r3, #8
 800b6ba:	2100      	movs	r1, #0
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f001 fde5 	bl	800d28c <RCCEx_PLL2_Config>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b6c8:	e015      	b.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b6ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6ce:	3328      	adds	r3, #40	; 0x28
 800b6d0:	2102      	movs	r1, #2
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f001 fe8c 	bl	800d3f0 <RCCEx_PLL3_Config>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b6de:	e00a      	b.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b6e6:	e006      	b.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b6e8:	bf00      	nop
 800b6ea:	e004      	b.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b6ec:	bf00      	nop
 800b6ee:	e002      	b.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b6f0:	bf00      	nop
 800b6f2:	e000      	b.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b6f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d10b      	bne.n	800b716 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b6fe:	4b39      	ldr	r3, [pc, #228]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b702:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b706:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b70a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b70e:	4a35      	ldr	r2, [pc, #212]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b710:	430b      	orrs	r3, r1
 800b712:	6553      	str	r3, [r2, #84]	; 0x54
 800b714:	e003      	b.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b716:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b71a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b71e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b726:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b72a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b72e:	2300      	movs	r3, #0
 800b730:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b734:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b738:	460b      	mov	r3, r1
 800b73a:	4313      	orrs	r3, r2
 800b73c:	d058      	beq.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b73e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b742:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b746:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b74a:	d033      	beq.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800b74c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b750:	d82c      	bhi.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b756:	d02f      	beq.n	800b7b8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800b758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b75c:	d826      	bhi.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b75e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b762:	d02b      	beq.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800b764:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b768:	d820      	bhi.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b76a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b76e:	d012      	beq.n	800b796 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b770:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b774:	d81a      	bhi.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b776:	2b00      	cmp	r3, #0
 800b778:	d022      	beq.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800b77a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b77e:	d115      	bne.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b784:	3308      	adds	r3, #8
 800b786:	2100      	movs	r1, #0
 800b788:	4618      	mov	r0, r3
 800b78a:	f001 fd7f 	bl	800d28c <RCCEx_PLL2_Config>
 800b78e:	4603      	mov	r3, r0
 800b790:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b794:	e015      	b.n	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b79a:	3328      	adds	r3, #40	; 0x28
 800b79c:	2102      	movs	r1, #2
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f001 fe26 	bl	800d3f0 <RCCEx_PLL3_Config>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b7aa:	e00a      	b.n	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b7b2:	e006      	b.n	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b7b4:	bf00      	nop
 800b7b6:	e004      	b.n	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b7b8:	bf00      	nop
 800b7ba:	e002      	b.n	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b7bc:	bf00      	nop
 800b7be:	e000      	b.n	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b7c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d10e      	bne.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b7ca:	4b06      	ldr	r3, [pc, #24]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b7cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7ce:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b7d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b7da:	4a02      	ldr	r2, [pc, #8]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b7dc:	430b      	orrs	r3, r1
 800b7de:	6593      	str	r3, [r2, #88]	; 0x58
 800b7e0:	e006      	b.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800b7e2:	bf00      	nop
 800b7e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b7f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b7fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b800:	2300      	movs	r3, #0
 800b802:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b806:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b80a:	460b      	mov	r3, r1
 800b80c:	4313      	orrs	r3, r2
 800b80e:	d055      	beq.n	800b8bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b810:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b814:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b818:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b81c:	d033      	beq.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800b81e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b822:	d82c      	bhi.n	800b87e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b824:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b828:	d02f      	beq.n	800b88a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800b82a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b82e:	d826      	bhi.n	800b87e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b830:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b834:	d02b      	beq.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800b836:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b83a:	d820      	bhi.n	800b87e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b83c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b840:	d012      	beq.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800b842:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b846:	d81a      	bhi.n	800b87e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d022      	beq.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800b84c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b850:	d115      	bne.n	800b87e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b856:	3308      	adds	r3, #8
 800b858:	2100      	movs	r1, #0
 800b85a:	4618      	mov	r0, r3
 800b85c:	f001 fd16 	bl	800d28c <RCCEx_PLL2_Config>
 800b860:	4603      	mov	r3, r0
 800b862:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b866:	e015      	b.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b868:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b86c:	3328      	adds	r3, #40	; 0x28
 800b86e:	2102      	movs	r1, #2
 800b870:	4618      	mov	r0, r3
 800b872:	f001 fdbd 	bl	800d3f0 <RCCEx_PLL3_Config>
 800b876:	4603      	mov	r3, r0
 800b878:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b87c:	e00a      	b.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b87e:	2301      	movs	r3, #1
 800b880:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b884:	e006      	b.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b886:	bf00      	nop
 800b888:	e004      	b.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b88a:	bf00      	nop
 800b88c:	e002      	b.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b88e:	bf00      	nop
 800b890:	e000      	b.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b892:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b894:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d10b      	bne.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b89c:	4ba1      	ldr	r3, [pc, #644]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b89e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8a0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b8a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b8ac:	4a9d      	ldr	r2, [pc, #628]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b8ae:	430b      	orrs	r3, r1
 800b8b0:	6593      	str	r3, [r2, #88]	; 0x58
 800b8b2:	e003      	b.n	800b8bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b8bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c4:	f002 0308 	and.w	r3, r2, #8
 800b8c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b8d2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b8d6:	460b      	mov	r3, r1
 800b8d8:	4313      	orrs	r3, r2
 800b8da:	d01e      	beq.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b8dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8e8:	d10c      	bne.n	800b904 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b8ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8ee:	3328      	adds	r3, #40	; 0x28
 800b8f0:	2102      	movs	r1, #2
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f001 fd7c 	bl	800d3f0 <RCCEx_PLL3_Config>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d002      	beq.n	800b904 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800b8fe:	2301      	movs	r3, #1
 800b900:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b904:	4b87      	ldr	r3, [pc, #540]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b908:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b90c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b910:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b914:	4a83      	ldr	r2, [pc, #524]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b916:	430b      	orrs	r3, r1
 800b918:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b91a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b922:	f002 0310 	and.w	r3, r2, #16
 800b926:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b92a:	2300      	movs	r3, #0
 800b92c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b930:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b934:	460b      	mov	r3, r1
 800b936:	4313      	orrs	r3, r2
 800b938:	d01e      	beq.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b93a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b93e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b946:	d10c      	bne.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b94c:	3328      	adds	r3, #40	; 0x28
 800b94e:	2102      	movs	r1, #2
 800b950:	4618      	mov	r0, r3
 800b952:	f001 fd4d 	bl	800d3f0 <RCCEx_PLL3_Config>
 800b956:	4603      	mov	r3, r0
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d002      	beq.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800b95c:	2301      	movs	r3, #1
 800b95e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b962:	4b70      	ldr	r3, [pc, #448]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b966:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b96a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b96e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b972:	4a6c      	ldr	r2, [pc, #432]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b974:	430b      	orrs	r3, r1
 800b976:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b978:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b980:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b984:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b988:	2300      	movs	r3, #0
 800b98a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b98e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b992:	460b      	mov	r3, r1
 800b994:	4313      	orrs	r3, r2
 800b996:	d03e      	beq.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b99c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b9a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9a4:	d022      	beq.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800b9a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9aa:	d81b      	bhi.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d003      	beq.n	800b9b8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800b9b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9b4:	d00b      	beq.n	800b9ce <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800b9b6:	e015      	b.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b9b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9bc:	3308      	adds	r3, #8
 800b9be:	2100      	movs	r1, #0
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f001 fc63 	bl	800d28c <RCCEx_PLL2_Config>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b9cc:	e00f      	b.n	800b9ee <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b9ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9d2:	3328      	adds	r3, #40	; 0x28
 800b9d4:	2102      	movs	r1, #2
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f001 fd0a 	bl	800d3f0 <RCCEx_PLL3_Config>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b9e2:	e004      	b.n	800b9ee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b9ea:	e000      	b.n	800b9ee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800b9ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d10b      	bne.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b9f6:	4b4b      	ldr	r3, [pc, #300]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b9f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9fa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b9fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ba06:	4a47      	ldr	r2, [pc, #284]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba08:	430b      	orrs	r3, r1
 800ba0a:	6593      	str	r3, [r2, #88]	; 0x58
 800ba0c:	e003      	b.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ba16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba1e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800ba22:	67bb      	str	r3, [r7, #120]	; 0x78
 800ba24:	2300      	movs	r3, #0
 800ba26:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ba28:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800ba2c:	460b      	mov	r3, r1
 800ba2e:	4313      	orrs	r3, r2
 800ba30:	d03b      	beq.n	800baaa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800ba32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba3a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ba3e:	d01f      	beq.n	800ba80 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800ba40:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ba44:	d818      	bhi.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800ba46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba4a:	d003      	beq.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800ba4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ba50:	d007      	beq.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800ba52:	e011      	b.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba54:	4b33      	ldr	r3, [pc, #204]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba58:	4a32      	ldr	r2, [pc, #200]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ba60:	e00f      	b.n	800ba82 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba66:	3328      	adds	r3, #40	; 0x28
 800ba68:	2101      	movs	r1, #1
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f001 fcc0 	bl	800d3f0 <RCCEx_PLL3_Config>
 800ba70:	4603      	mov	r3, r0
 800ba72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800ba76:	e004      	b.n	800ba82 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba78:	2301      	movs	r3, #1
 800ba7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba7e:	e000      	b.n	800ba82 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800ba80:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d10b      	bne.n	800baa2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ba8a:	4b26      	ldr	r3, [pc, #152]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba8e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ba92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba9a:	4a22      	ldr	r2, [pc, #136]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba9c:	430b      	orrs	r3, r1
 800ba9e:	6553      	str	r3, [r2, #84]	; 0x54
 800baa0:	e003      	b.n	800baaa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800baa6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800baaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800bab6:	673b      	str	r3, [r7, #112]	; 0x70
 800bab8:	2300      	movs	r3, #0
 800baba:	677b      	str	r3, [r7, #116]	; 0x74
 800babc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800bac0:	460b      	mov	r3, r1
 800bac2:	4313      	orrs	r3, r2
 800bac4:	d034      	beq.n	800bb30 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800bac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d003      	beq.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800bad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bad4:	d007      	beq.n	800bae6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800bad6:	e011      	b.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bad8:	4b12      	ldr	r3, [pc, #72]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800badc:	4a11      	ldr	r2, [pc, #68]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bae2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bae4:	e00e      	b.n	800bb04 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baea:	3308      	adds	r3, #8
 800baec:	2102      	movs	r1, #2
 800baee:	4618      	mov	r0, r3
 800baf0:	f001 fbcc 	bl	800d28c <RCCEx_PLL2_Config>
 800baf4:	4603      	mov	r3, r0
 800baf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bafa:	e003      	b.n	800bb04 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800bafc:	2301      	movs	r3, #1
 800bafe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bb02:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d10d      	bne.n	800bb28 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bb0c:	4b05      	ldr	r3, [pc, #20]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bb0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bb14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb1a:	4a02      	ldr	r2, [pc, #8]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bb1c:	430b      	orrs	r3, r1
 800bb1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bb20:	e006      	b.n	800bb30 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800bb22:	bf00      	nop
 800bb24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bb30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb38:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800bb3c:	66bb      	str	r3, [r7, #104]	; 0x68
 800bb3e:	2300      	movs	r3, #0
 800bb40:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bb42:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800bb46:	460b      	mov	r3, r1
 800bb48:	4313      	orrs	r3, r2
 800bb4a:	d00c      	beq.n	800bb66 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bb4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb50:	3328      	adds	r3, #40	; 0x28
 800bb52:	2102      	movs	r1, #2
 800bb54:	4618      	mov	r0, r3
 800bb56:	f001 fc4b 	bl	800d3f0 <RCCEx_PLL3_Config>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d002      	beq.n	800bb66 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800bb60:	2301      	movs	r3, #1
 800bb62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bb66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb6e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800bb72:	663b      	str	r3, [r7, #96]	; 0x60
 800bb74:	2300      	movs	r3, #0
 800bb76:	667b      	str	r3, [r7, #100]	; 0x64
 800bb78:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800bb7c:	460b      	mov	r3, r1
 800bb7e:	4313      	orrs	r3, r2
 800bb80:	d038      	beq.n	800bbf4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800bb82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb8e:	d018      	beq.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800bb90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb94:	d811      	bhi.n	800bbba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bb96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb9a:	d014      	beq.n	800bbc6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800bb9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bba0:	d80b      	bhi.n	800bbba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d011      	beq.n	800bbca <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800bba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbaa:	d106      	bne.n	800bbba <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbac:	4bc3      	ldr	r3, [pc, #780]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bbae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbb0:	4ac2      	ldr	r2, [pc, #776]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bbb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bbb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800bbb8:	e008      	b.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bbba:	2301      	movs	r3, #1
 800bbbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bbc0:	e004      	b.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bbc2:	bf00      	nop
 800bbc4:	e002      	b.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bbc6:	bf00      	nop
 800bbc8:	e000      	b.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bbca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbcc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d10b      	bne.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bbd4:	4bb9      	ldr	r3, [pc, #740]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bbd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbd8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bbdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bbe4:	4ab5      	ldr	r2, [pc, #724]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bbe6:	430b      	orrs	r3, r1
 800bbe8:	6553      	str	r3, [r2, #84]	; 0x54
 800bbea:	e003      	b.n	800bbf4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbf0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bbf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbfc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800bc00:	65bb      	str	r3, [r7, #88]	; 0x58
 800bc02:	2300      	movs	r3, #0
 800bc04:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc06:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800bc0a:	460b      	mov	r3, r1
 800bc0c:	4313      	orrs	r3, r2
 800bc0e:	d009      	beq.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bc10:	4baa      	ldr	r3, [pc, #680]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc14:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bc18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc1e:	4aa7      	ldr	r2, [pc, #668]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc20:	430b      	orrs	r3, r1
 800bc22:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800bc24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc2c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800bc30:	653b      	str	r3, [r7, #80]	; 0x50
 800bc32:	2300      	movs	r3, #0
 800bc34:	657b      	str	r3, [r7, #84]	; 0x54
 800bc36:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800bc3a:	460b      	mov	r3, r1
 800bc3c:	4313      	orrs	r3, r2
 800bc3e:	d00a      	beq.n	800bc56 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800bc40:	4b9e      	ldr	r3, [pc, #632]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc42:	691b      	ldr	r3, [r3, #16]
 800bc44:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800bc48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc4c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bc50:	4a9a      	ldr	r2, [pc, #616]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc52:	430b      	orrs	r3, r1
 800bc54:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bc56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc5e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800bc62:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc64:	2300      	movs	r3, #0
 800bc66:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc68:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	4313      	orrs	r3, r2
 800bc70:	d009      	beq.n	800bc86 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bc72:	4b92      	ldr	r3, [pc, #584]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc76:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800bc7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc80:	4a8e      	ldr	r2, [pc, #568]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc82:	430b      	orrs	r3, r1
 800bc84:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bc86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc8e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800bc92:	643b      	str	r3, [r7, #64]	; 0x40
 800bc94:	2300      	movs	r3, #0
 800bc96:	647b      	str	r3, [r7, #68]	; 0x44
 800bc98:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800bc9c:	460b      	mov	r3, r1
 800bc9e:	4313      	orrs	r3, r2
 800bca0:	d00e      	beq.n	800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bca2:	4b86      	ldr	r3, [pc, #536]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bca4:	691b      	ldr	r3, [r3, #16]
 800bca6:	4a85      	ldr	r2, [pc, #532]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bca8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bcac:	6113      	str	r3, [r2, #16]
 800bcae:	4b83      	ldr	r3, [pc, #524]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bcb0:	6919      	ldr	r1, [r3, #16]
 800bcb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcb6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800bcba:	4a80      	ldr	r2, [pc, #512]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bcbc:	430b      	orrs	r3, r1
 800bcbe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bcc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800bccc:	63bb      	str	r3, [r7, #56]	; 0x38
 800bcce:	2300      	movs	r3, #0
 800bcd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcd2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800bcd6:	460b      	mov	r3, r1
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	d009      	beq.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bcdc:	4b77      	ldr	r3, [pc, #476]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bcde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bce0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcea:	4a74      	ldr	r2, [pc, #464]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bcec:	430b      	orrs	r3, r1
 800bcee:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bcf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800bcfc:	633b      	str	r3, [r7, #48]	; 0x30
 800bcfe:	2300      	movs	r3, #0
 800bd00:	637b      	str	r3, [r7, #52]	; 0x34
 800bd02:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800bd06:	460b      	mov	r3, r1
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	d00a      	beq.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bd0c:	4b6b      	ldr	r3, [pc, #428]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bd0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd10:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800bd14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd1c:	4a67      	ldr	r2, [pc, #412]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bd1e:	430b      	orrs	r3, r1
 800bd20:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800bd22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd2a:	2100      	movs	r1, #0
 800bd2c:	62b9      	str	r1, [r7, #40]	; 0x28
 800bd2e:	f003 0301 	and.w	r3, r3, #1
 800bd32:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd34:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800bd38:	460b      	mov	r3, r1
 800bd3a:	4313      	orrs	r3, r2
 800bd3c:	d011      	beq.n	800bd62 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd42:	3308      	adds	r3, #8
 800bd44:	2100      	movs	r1, #0
 800bd46:	4618      	mov	r0, r3
 800bd48:	f001 faa0 	bl	800d28c <RCCEx_PLL2_Config>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bd52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d003      	beq.n	800bd62 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bd62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd6a:	2100      	movs	r1, #0
 800bd6c:	6239      	str	r1, [r7, #32]
 800bd6e:	f003 0302 	and.w	r3, r3, #2
 800bd72:	627b      	str	r3, [r7, #36]	; 0x24
 800bd74:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bd78:	460b      	mov	r3, r1
 800bd7a:	4313      	orrs	r3, r2
 800bd7c:	d011      	beq.n	800bda2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bd7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd82:	3308      	adds	r3, #8
 800bd84:	2101      	movs	r1, #1
 800bd86:	4618      	mov	r0, r3
 800bd88:	f001 fa80 	bl	800d28c <RCCEx_PLL2_Config>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bd92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d003      	beq.n	800bda2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bda2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bda6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdaa:	2100      	movs	r1, #0
 800bdac:	61b9      	str	r1, [r7, #24]
 800bdae:	f003 0304 	and.w	r3, r3, #4
 800bdb2:	61fb      	str	r3, [r7, #28]
 800bdb4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bdb8:	460b      	mov	r3, r1
 800bdba:	4313      	orrs	r3, r2
 800bdbc:	d011      	beq.n	800bde2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bdbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdc2:	3308      	adds	r3, #8
 800bdc4:	2102      	movs	r1, #2
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f001 fa60 	bl	800d28c <RCCEx_PLL2_Config>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bdd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d003      	beq.n	800bde2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdde:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bde2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bde6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdea:	2100      	movs	r1, #0
 800bdec:	6139      	str	r1, [r7, #16]
 800bdee:	f003 0308 	and.w	r3, r3, #8
 800bdf2:	617b      	str	r3, [r7, #20]
 800bdf4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bdf8:	460b      	mov	r3, r1
 800bdfa:	4313      	orrs	r3, r2
 800bdfc:	d011      	beq.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bdfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be02:	3328      	adds	r3, #40	; 0x28
 800be04:	2100      	movs	r1, #0
 800be06:	4618      	mov	r0, r3
 800be08:	f001 faf2 	bl	800d3f0 <RCCEx_PLL3_Config>
 800be0c:	4603      	mov	r3, r0
 800be0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800be12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be16:	2b00      	cmp	r3, #0
 800be18:	d003      	beq.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800be22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be2a:	2100      	movs	r1, #0
 800be2c:	60b9      	str	r1, [r7, #8]
 800be2e:	f003 0310 	and.w	r3, r3, #16
 800be32:	60fb      	str	r3, [r7, #12]
 800be34:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800be38:	460b      	mov	r3, r1
 800be3a:	4313      	orrs	r3, r2
 800be3c:	d011      	beq.n	800be62 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800be3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be42:	3328      	adds	r3, #40	; 0x28
 800be44:	2101      	movs	r1, #1
 800be46:	4618      	mov	r0, r3
 800be48:	f001 fad2 	bl	800d3f0 <RCCEx_PLL3_Config>
 800be4c:	4603      	mov	r3, r0
 800be4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800be52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be56:	2b00      	cmp	r3, #0
 800be58:	d003      	beq.n	800be62 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800be62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be6a:	2100      	movs	r1, #0
 800be6c:	6039      	str	r1, [r7, #0]
 800be6e:	f003 0320 	and.w	r3, r3, #32
 800be72:	607b      	str	r3, [r7, #4]
 800be74:	e9d7 1200 	ldrd	r1, r2, [r7]
 800be78:	460b      	mov	r3, r1
 800be7a:	4313      	orrs	r3, r2
 800be7c:	d011      	beq.n	800bea2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800be7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be82:	3328      	adds	r3, #40	; 0x28
 800be84:	2102      	movs	r1, #2
 800be86:	4618      	mov	r0, r3
 800be88:	f001 fab2 	bl	800d3f0 <RCCEx_PLL3_Config>
 800be8c:	4603      	mov	r3, r0
 800be8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800be92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be96:	2b00      	cmp	r3, #0
 800be98:	d003      	beq.n	800bea2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800bea2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d101      	bne.n	800beae <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800beaa:	2300      	movs	r3, #0
 800beac:	e000      	b.n	800beb0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800beae:	2301      	movs	r3, #1
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800beb6:	46bd      	mov	sp, r7
 800beb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bebc:	58024400 	.word	0x58024400

0800bec0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b090      	sub	sp, #64	; 0x40
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800beca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bece:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bed2:	430b      	orrs	r3, r1
 800bed4:	f040 8094 	bne.w	800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800bed8:	4b9e      	ldr	r3, [pc, #632]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800beda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bedc:	f003 0307 	and.w	r3, r3, #7
 800bee0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee4:	2b04      	cmp	r3, #4
 800bee6:	f200 8087 	bhi.w	800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800beea:	a201      	add	r2, pc, #4	; (adr r2, 800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800beec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bef0:	0800bf05 	.word	0x0800bf05
 800bef4:	0800bf2d 	.word	0x0800bf2d
 800bef8:	0800bf55 	.word	0x0800bf55
 800befc:	0800bff1 	.word	0x0800bff1
 800bf00:	0800bf7d 	.word	0x0800bf7d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bf04:	4b93      	ldr	r3, [pc, #588]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf10:	d108      	bne.n	800bf24 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bf12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf16:	4618      	mov	r0, r3
 800bf18:	f001 f810 	bl	800cf3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bf1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf20:	f000 bd45 	b.w	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf24:	2300      	movs	r3, #0
 800bf26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf28:	f000 bd41 	b.w	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf2c:	4b89      	ldr	r3, [pc, #548]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf38:	d108      	bne.n	800bf4c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf3a:	f107 0318 	add.w	r3, r7, #24
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f000 fd54 	bl	800c9ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bf44:	69bb      	ldr	r3, [r7, #24]
 800bf46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf48:	f000 bd31 	b.w	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf50:	f000 bd2d 	b.w	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bf54:	4b7f      	ldr	r3, [pc, #508]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf60:	d108      	bne.n	800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf62:	f107 030c 	add.w	r3, r7, #12
 800bf66:	4618      	mov	r0, r3
 800bf68:	f000 fe94 	bl	800cc94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf70:	f000 bd1d 	b.w	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf74:	2300      	movs	r3, #0
 800bf76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf78:	f000 bd19 	b.w	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bf7c:	4b75      	ldr	r3, [pc, #468]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bf84:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bf86:	4b73      	ldr	r3, [pc, #460]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f003 0304 	and.w	r3, r3, #4
 800bf8e:	2b04      	cmp	r3, #4
 800bf90:	d10c      	bne.n	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bf92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d109      	bne.n	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf98:	4b6e      	ldr	r3, [pc, #440]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	08db      	lsrs	r3, r3, #3
 800bf9e:	f003 0303 	and.w	r3, r3, #3
 800bfa2:	4a6d      	ldr	r2, [pc, #436]	; (800c158 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bfa4:	fa22 f303 	lsr.w	r3, r2, r3
 800bfa8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfaa:	e01f      	b.n	800bfec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bfac:	4b69      	ldr	r3, [pc, #420]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfb8:	d106      	bne.n	800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800bfba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bfc0:	d102      	bne.n	800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bfc2:	4b66      	ldr	r3, [pc, #408]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bfc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfc6:	e011      	b.n	800bfec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bfc8:	4b62      	ldr	r3, [pc, #392]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfd4:	d106      	bne.n	800bfe4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bfd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfdc:	d102      	bne.n	800bfe4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bfde:	4b60      	ldr	r3, [pc, #384]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bfe0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfe2:	e003      	b.n	800bfec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bfe8:	f000 bce1 	b.w	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bfec:	f000 bcdf 	b.w	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bff0:	4b5c      	ldr	r3, [pc, #368]	; (800c164 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800bff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bff4:	f000 bcdb 	b.w	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bff8:	2300      	movs	r3, #0
 800bffa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bffc:	f000 bcd7 	b.w	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c000:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c004:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c008:	430b      	orrs	r3, r1
 800c00a:	f040 80ad 	bne.w	800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c00e:	4b51      	ldr	r3, [pc, #324]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c012:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c016:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c01e:	d056      	beq.n	800c0ce <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c026:	f200 8090 	bhi.w	800c14a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c02c:	2bc0      	cmp	r3, #192	; 0xc0
 800c02e:	f000 8088 	beq.w	800c142 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c034:	2bc0      	cmp	r3, #192	; 0xc0
 800c036:	f200 8088 	bhi.w	800c14a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c03c:	2b80      	cmp	r3, #128	; 0x80
 800c03e:	d032      	beq.n	800c0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c042:	2b80      	cmp	r3, #128	; 0x80
 800c044:	f200 8081 	bhi.w	800c14a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d003      	beq.n	800c056 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c050:	2b40      	cmp	r3, #64	; 0x40
 800c052:	d014      	beq.n	800c07e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c054:	e079      	b.n	800c14a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c056:	4b3f      	ldr	r3, [pc, #252]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c05e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c062:	d108      	bne.n	800c076 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c068:	4618      	mov	r0, r3
 800c06a:	f000 ff67 	bl	800cf3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c070:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c072:	f000 bc9c 	b.w	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c076:	2300      	movs	r3, #0
 800c078:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c07a:	f000 bc98 	b.w	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c07e:	4b35      	ldr	r3, [pc, #212]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c086:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c08a:	d108      	bne.n	800c09e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c08c:	f107 0318 	add.w	r3, r7, #24
 800c090:	4618      	mov	r0, r3
 800c092:	f000 fcab 	bl	800c9ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c096:	69bb      	ldr	r3, [r7, #24]
 800c098:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c09a:	f000 bc88 	b.w	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0a2:	f000 bc84 	b.w	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c0a6:	4b2b      	ldr	r3, [pc, #172]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c0ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0b2:	d108      	bne.n	800c0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0b4:	f107 030c 	add.w	r3, r7, #12
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f000 fdeb 	bl	800cc94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0c2:	f000 bc74 	b.w	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0ca:	f000 bc70 	b.w	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c0ce:	4b21      	ldr	r3, [pc, #132]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c0d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c0d6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c0d8:	4b1e      	ldr	r3, [pc, #120]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f003 0304 	and.w	r3, r3, #4
 800c0e0:	2b04      	cmp	r3, #4
 800c0e2:	d10c      	bne.n	800c0fe <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c0e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d109      	bne.n	800c0fe <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c0ea:	4b1a      	ldr	r3, [pc, #104]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	08db      	lsrs	r3, r3, #3
 800c0f0:	f003 0303 	and.w	r3, r3, #3
 800c0f4:	4a18      	ldr	r2, [pc, #96]	; (800c158 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c0f6:	fa22 f303 	lsr.w	r3, r2, r3
 800c0fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0fc:	e01f      	b.n	800c13e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c0fe:	4b15      	ldr	r3, [pc, #84]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c106:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c10a:	d106      	bne.n	800c11a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c10c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c10e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c112:	d102      	bne.n	800c11a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c114:	4b11      	ldr	r3, [pc, #68]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c116:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c118:	e011      	b.n	800c13e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c11a:	4b0e      	ldr	r3, [pc, #56]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c122:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c126:	d106      	bne.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c12a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c12e:	d102      	bne.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c130:	4b0b      	ldr	r3, [pc, #44]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c132:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c134:	e003      	b.n	800c13e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c136:	2300      	movs	r3, #0
 800c138:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c13a:	f000 bc38 	b.w	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c13e:	f000 bc36 	b.w	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c142:	4b08      	ldr	r3, [pc, #32]	; (800c164 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c144:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c146:	f000 bc32 	b.w	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c14a:	2300      	movs	r3, #0
 800c14c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c14e:	f000 bc2e 	b.w	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c152:	bf00      	nop
 800c154:	58024400 	.word	0x58024400
 800c158:	03d09000 	.word	0x03d09000
 800c15c:	003d0900 	.word	0x003d0900
 800c160:	00989680 	.word	0x00989680
 800c164:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c16c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c170:	430b      	orrs	r3, r1
 800c172:	f040 809c 	bne.w	800c2ae <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c176:	4b9e      	ldr	r3, [pc, #632]	; (800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c17a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c17e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c182:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c186:	d054      	beq.n	800c232 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c18a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c18e:	f200 808b 	bhi.w	800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c194:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c198:	f000 8083 	beq.w	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c19e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c1a2:	f200 8081 	bhi.w	800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c1ac:	d02f      	beq.n	800c20e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c1b4:	d878      	bhi.n	800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d004      	beq.n	800c1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c1c2:	d012      	beq.n	800c1ea <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c1c4:	e070      	b.n	800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c1c6:	4b8a      	ldr	r3, [pc, #552]	; (800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c1ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c1d2:	d107      	bne.n	800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c1d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f000 feaf 	bl	800cf3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1e2:	e3e4      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1e8:	e3e1      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c1ea:	4b81      	ldr	r3, [pc, #516]	; (800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c1f6:	d107      	bne.n	800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1f8:	f107 0318 	add.w	r3, r7, #24
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f000 fbf5 	bl	800c9ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c202:	69bb      	ldr	r3, [r7, #24]
 800c204:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c206:	e3d2      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c208:	2300      	movs	r3, #0
 800c20a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c20c:	e3cf      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c20e:	4b78      	ldr	r3, [pc, #480]	; (800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c216:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c21a:	d107      	bne.n	800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c21c:	f107 030c 	add.w	r3, r7, #12
 800c220:	4618      	mov	r0, r3
 800c222:	f000 fd37 	bl	800cc94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c22a:	e3c0      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c22c:	2300      	movs	r3, #0
 800c22e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c230:	e3bd      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c232:	4b6f      	ldr	r3, [pc, #444]	; (800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c236:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c23a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c23c:	4b6c      	ldr	r3, [pc, #432]	; (800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f003 0304 	and.w	r3, r3, #4
 800c244:	2b04      	cmp	r3, #4
 800c246:	d10c      	bne.n	800c262 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d109      	bne.n	800c262 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c24e:	4b68      	ldr	r3, [pc, #416]	; (800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	08db      	lsrs	r3, r3, #3
 800c254:	f003 0303 	and.w	r3, r3, #3
 800c258:	4a66      	ldr	r2, [pc, #408]	; (800c3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c25a:	fa22 f303 	lsr.w	r3, r2, r3
 800c25e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c260:	e01e      	b.n	800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c262:	4b63      	ldr	r3, [pc, #396]	; (800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c26a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c26e:	d106      	bne.n	800c27e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c272:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c276:	d102      	bne.n	800c27e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c278:	4b5f      	ldr	r3, [pc, #380]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c27a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c27c:	e010      	b.n	800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c27e:	4b5c      	ldr	r3, [pc, #368]	; (800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c286:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c28a:	d106      	bne.n	800c29a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c28c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c28e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c292:	d102      	bne.n	800c29a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c294:	4b59      	ldr	r3, [pc, #356]	; (800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c296:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c298:	e002      	b.n	800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c29a:	2300      	movs	r3, #0
 800c29c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c29e:	e386      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c2a0:	e385      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c2a2:	4b57      	ldr	r3, [pc, #348]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c2a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2a6:	e382      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2ac:	e37f      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c2ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2b2:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c2b6:	430b      	orrs	r3, r1
 800c2b8:	f040 80a7 	bne.w	800c40a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c2bc:	4b4c      	ldr	r3, [pc, #304]	; (800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c2be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2c0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c2c4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c2cc:	d055      	beq.n	800c37a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c2d4:	f200 8096 	bhi.w	800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c2de:	f000 8084 	beq.w	800c3ea <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c2e8:	f200 808c 	bhi.w	800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c2f2:	d030      	beq.n	800c356 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c2fa:	f200 8083 	bhi.w	800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c300:	2b00      	cmp	r3, #0
 800c302:	d004      	beq.n	800c30e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c306:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c30a:	d012      	beq.n	800c332 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c30c:	e07a      	b.n	800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c30e:	4b38      	ldr	r3, [pc, #224]	; (800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c316:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c31a:	d107      	bne.n	800c32c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c31c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c320:	4618      	mov	r0, r3
 800c322:	f000 fe0b 	bl	800cf3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c328:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c32a:	e340      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c32c:	2300      	movs	r3, #0
 800c32e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c330:	e33d      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c332:	4b2f      	ldr	r3, [pc, #188]	; (800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c33a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c33e:	d107      	bne.n	800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c340:	f107 0318 	add.w	r3, r7, #24
 800c344:	4618      	mov	r0, r3
 800c346:	f000 fb51 	bl	800c9ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c34a:	69bb      	ldr	r3, [r7, #24]
 800c34c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c34e:	e32e      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c350:	2300      	movs	r3, #0
 800c352:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c354:	e32b      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c356:	4b26      	ldr	r3, [pc, #152]	; (800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c35e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c362:	d107      	bne.n	800c374 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c364:	f107 030c 	add.w	r3, r7, #12
 800c368:	4618      	mov	r0, r3
 800c36a:	f000 fc93 	bl	800cc94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c372:	e31c      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c374:	2300      	movs	r3, #0
 800c376:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c378:	e319      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c37a:	4b1d      	ldr	r3, [pc, #116]	; (800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c37c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c37e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c382:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c384:	4b1a      	ldr	r3, [pc, #104]	; (800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f003 0304 	and.w	r3, r3, #4
 800c38c:	2b04      	cmp	r3, #4
 800c38e:	d10c      	bne.n	800c3aa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c392:	2b00      	cmp	r3, #0
 800c394:	d109      	bne.n	800c3aa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c396:	4b16      	ldr	r3, [pc, #88]	; (800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	08db      	lsrs	r3, r3, #3
 800c39c:	f003 0303 	and.w	r3, r3, #3
 800c3a0:	4a14      	ldr	r2, [pc, #80]	; (800c3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c3a2:	fa22 f303 	lsr.w	r3, r2, r3
 800c3a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3a8:	e01e      	b.n	800c3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c3aa:	4b11      	ldr	r3, [pc, #68]	; (800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3b6:	d106      	bne.n	800c3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c3b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c3be:	d102      	bne.n	800c3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c3c0:	4b0d      	ldr	r3, [pc, #52]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c3c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3c4:	e010      	b.n	800c3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c3c6:	4b0a      	ldr	r3, [pc, #40]	; (800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3d2:	d106      	bne.n	800c3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c3d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3da:	d102      	bne.n	800c3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c3dc:	4b07      	ldr	r3, [pc, #28]	; (800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c3de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3e0:	e002      	b.n	800c3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c3e6:	e2e2      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c3e8:	e2e1      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c3ea:	4b05      	ldr	r3, [pc, #20]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3ee:	e2de      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c3f0:	58024400 	.word	0x58024400
 800c3f4:	03d09000 	.word	0x03d09000
 800c3f8:	003d0900 	.word	0x003d0900
 800c3fc:	00989680 	.word	0x00989680
 800c400:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c404:	2300      	movs	r3, #0
 800c406:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c408:	e2d1      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c40a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c40e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c412:	430b      	orrs	r3, r1
 800c414:	f040 809c 	bne.w	800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c418:	4b93      	ldr	r3, [pc, #588]	; (800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c41a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c41c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c420:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c424:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c428:	d054      	beq.n	800c4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c42a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c42c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c430:	f200 808b 	bhi.w	800c54a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c436:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c43a:	f000 8083 	beq.w	800c544 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c440:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c444:	f200 8081 	bhi.w	800c54a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c44a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c44e:	d02f      	beq.n	800c4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c452:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c456:	d878      	bhi.n	800c54a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d004      	beq.n	800c468 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c45e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c464:	d012      	beq.n	800c48c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c466:	e070      	b.n	800c54a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c468:	4b7f      	ldr	r3, [pc, #508]	; (800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c470:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c474:	d107      	bne.n	800c486 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c47a:	4618      	mov	r0, r3
 800c47c:	f000 fd5e 	bl	800cf3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c482:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c484:	e293      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c486:	2300      	movs	r3, #0
 800c488:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c48a:	e290      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c48c:	4b76      	ldr	r3, [pc, #472]	; (800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c494:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c498:	d107      	bne.n	800c4aa <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c49a:	f107 0318 	add.w	r3, r7, #24
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f000 faa4 	bl	800c9ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c4a4:	69bb      	ldr	r3, [r7, #24]
 800c4a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4a8:	e281      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4ae:	e27e      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c4b0:	4b6d      	ldr	r3, [pc, #436]	; (800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c4b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4bc:	d107      	bne.n	800c4ce <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c4be:	f107 030c 	add.w	r3, r7, #12
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f000 fbe6 	bl	800cc94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4cc:	e26f      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4d2:	e26c      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c4d4:	4b64      	ldr	r3, [pc, #400]	; (800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c4d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c4dc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c4de:	4b62      	ldr	r3, [pc, #392]	; (800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f003 0304 	and.w	r3, r3, #4
 800c4e6:	2b04      	cmp	r3, #4
 800c4e8:	d10c      	bne.n	800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c4ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d109      	bne.n	800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c4f0:	4b5d      	ldr	r3, [pc, #372]	; (800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	08db      	lsrs	r3, r3, #3
 800c4f6:	f003 0303 	and.w	r3, r3, #3
 800c4fa:	4a5c      	ldr	r2, [pc, #368]	; (800c66c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c4fc:	fa22 f303 	lsr.w	r3, r2, r3
 800c500:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c502:	e01e      	b.n	800c542 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c504:	4b58      	ldr	r3, [pc, #352]	; (800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c50c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c510:	d106      	bne.n	800c520 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c514:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c518:	d102      	bne.n	800c520 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c51a:	4b55      	ldr	r3, [pc, #340]	; (800c670 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c51c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c51e:	e010      	b.n	800c542 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c520:	4b51      	ldr	r3, [pc, #324]	; (800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c528:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c52c:	d106      	bne.n	800c53c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c52e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c530:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c534:	d102      	bne.n	800c53c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c536:	4b4f      	ldr	r3, [pc, #316]	; (800c674 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c538:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c53a:	e002      	b.n	800c542 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c53c:	2300      	movs	r3, #0
 800c53e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c540:	e235      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c542:	e234      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c544:	4b4c      	ldr	r3, [pc, #304]	; (800c678 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c546:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c548:	e231      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c54a:	2300      	movs	r3, #0
 800c54c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c54e:	e22e      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c550:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c554:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c558:	430b      	orrs	r3, r1
 800c55a:	f040 808f 	bne.w	800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c55e:	4b42      	ldr	r3, [pc, #264]	; (800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c562:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c566:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c56a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c56e:	d06b      	beq.n	800c648 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c572:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c576:	d874      	bhi.n	800c662 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c57a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c57e:	d056      	beq.n	800c62e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c582:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c586:	d86c      	bhi.n	800c662 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c58a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c58e:	d03b      	beq.n	800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c592:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c596:	d864      	bhi.n	800c662 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c59a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c59e:	d021      	beq.n	800c5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5a6:	d85c      	bhi.n	800c662 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d004      	beq.n	800c5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800c5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5b4:	d004      	beq.n	800c5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800c5b6:	e054      	b.n	800c662 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c5b8:	f7fe fa30 	bl	800aa1c <HAL_RCC_GetPCLK1Freq>
 800c5bc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c5be:	e1f6      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c5c0:	4b29      	ldr	r3, [pc, #164]	; (800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5cc:	d107      	bne.n	800c5de <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5ce:	f107 0318 	add.w	r3, r7, #24
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f000 fa0a 	bl	800c9ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c5d8:	69fb      	ldr	r3, [r7, #28]
 800c5da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5dc:	e1e7      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5e2:	e1e4      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c5e4:	4b20      	ldr	r3, [pc, #128]	; (800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c5ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5f0:	d107      	bne.n	800c602 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5f2:	f107 030c 	add.w	r3, r7, #12
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f000 fb4c 	bl	800cc94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c600:	e1d5      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c602:	2300      	movs	r3, #0
 800c604:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c606:	e1d2      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c608:	4b17      	ldr	r3, [pc, #92]	; (800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	f003 0304 	and.w	r3, r3, #4
 800c610:	2b04      	cmp	r3, #4
 800c612:	d109      	bne.n	800c628 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c614:	4b14      	ldr	r3, [pc, #80]	; (800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	08db      	lsrs	r3, r3, #3
 800c61a:	f003 0303 	and.w	r3, r3, #3
 800c61e:	4a13      	ldr	r2, [pc, #76]	; (800c66c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c620:	fa22 f303 	lsr.w	r3, r2, r3
 800c624:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c626:	e1c2      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c628:	2300      	movs	r3, #0
 800c62a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c62c:	e1bf      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c62e:	4b0e      	ldr	r3, [pc, #56]	; (800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c63a:	d102      	bne.n	800c642 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800c63c:	4b0c      	ldr	r3, [pc, #48]	; (800c670 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c63e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c640:	e1b5      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c642:	2300      	movs	r3, #0
 800c644:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c646:	e1b2      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c648:	4b07      	ldr	r3, [pc, #28]	; (800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c650:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c654:	d102      	bne.n	800c65c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800c656:	4b07      	ldr	r3, [pc, #28]	; (800c674 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c658:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c65a:	e1a8      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c65c:	2300      	movs	r3, #0
 800c65e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c660:	e1a5      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c662:	2300      	movs	r3, #0
 800c664:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c666:	e1a2      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c668:	58024400 	.word	0x58024400
 800c66c:	03d09000 	.word	0x03d09000
 800c670:	003d0900 	.word	0x003d0900
 800c674:	00989680 	.word	0x00989680
 800c678:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c67c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c680:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c684:	430b      	orrs	r3, r1
 800c686:	d173      	bne.n	800c770 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c688:	4b9c      	ldr	r3, [pc, #624]	; (800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c68a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c68c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c690:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c694:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c698:	d02f      	beq.n	800c6fa <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800c69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c69c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c6a0:	d863      	bhi.n	800c76a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800c6a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d004      	beq.n	800c6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800c6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6ae:	d012      	beq.n	800c6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800c6b0:	e05b      	b.n	800c76a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c6b2:	4b92      	ldr	r3, [pc, #584]	; (800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6be:	d107      	bne.n	800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6c0:	f107 0318 	add.w	r3, r7, #24
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f000 f991 	bl	800c9ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c6ca:	69bb      	ldr	r3, [r7, #24]
 800c6cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6ce:	e16e      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6d4:	e16b      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c6d6:	4b89      	ldr	r3, [pc, #548]	; (800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6e2:	d107      	bne.n	800c6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6e4:	f107 030c 	add.w	r3, r7, #12
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f000 fad3 	bl	800cc94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6f2:	e15c      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6f8:	e159      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c6fa:	4b80      	ldr	r3, [pc, #512]	; (800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c702:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c704:	4b7d      	ldr	r3, [pc, #500]	; (800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	f003 0304 	and.w	r3, r3, #4
 800c70c:	2b04      	cmp	r3, #4
 800c70e:	d10c      	bne.n	800c72a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800c710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c712:	2b00      	cmp	r3, #0
 800c714:	d109      	bne.n	800c72a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c716:	4b79      	ldr	r3, [pc, #484]	; (800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	08db      	lsrs	r3, r3, #3
 800c71c:	f003 0303 	and.w	r3, r3, #3
 800c720:	4a77      	ldr	r2, [pc, #476]	; (800c900 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c722:	fa22 f303 	lsr.w	r3, r2, r3
 800c726:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c728:	e01e      	b.n	800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c72a:	4b74      	ldr	r3, [pc, #464]	; (800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c736:	d106      	bne.n	800c746 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800c738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c73a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c73e:	d102      	bne.n	800c746 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c740:	4b70      	ldr	r3, [pc, #448]	; (800c904 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c742:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c744:	e010      	b.n	800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c746:	4b6d      	ldr	r3, [pc, #436]	; (800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c74e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c752:	d106      	bne.n	800c762 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800c754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c756:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c75a:	d102      	bne.n	800c762 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c75c:	4b6a      	ldr	r3, [pc, #424]	; (800c908 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c75e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c760:	e002      	b.n	800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c762:	2300      	movs	r3, #0
 800c764:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c766:	e122      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c768:	e121      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c76a:	2300      	movs	r3, #0
 800c76c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c76e:	e11e      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c770:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c774:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c778:	430b      	orrs	r3, r1
 800c77a:	d133      	bne.n	800c7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c77c:	4b5f      	ldr	r3, [pc, #380]	; (800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c77e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c784:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d004      	beq.n	800c796 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800c78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c78e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c792:	d012      	beq.n	800c7ba <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800c794:	e023      	b.n	800c7de <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c796:	4b59      	ldr	r3, [pc, #356]	; (800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c79e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c7a2:	d107      	bne.n	800c7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c7a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f000 fbc7 	bl	800cf3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7b2:	e0fc      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7b8:	e0f9      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c7ba:	4b50      	ldr	r3, [pc, #320]	; (800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c7c6:	d107      	bne.n	800c7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7c8:	f107 0318 	add.w	r3, r7, #24
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f000 f90d 	bl	800c9ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c7d2:	6a3b      	ldr	r3, [r7, #32]
 800c7d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7d6:	e0ea      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7dc:	e0e7      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7e2:	e0e4      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c7e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7e8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c7ec:	430b      	orrs	r3, r1
 800c7ee:	f040 808d 	bne.w	800c90c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c7f2:	4b42      	ldr	r3, [pc, #264]	; (800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c7f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7f6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c7fa:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c802:	d06b      	beq.n	800c8dc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800c804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c806:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c80a:	d874      	bhi.n	800c8f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c80e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c812:	d056      	beq.n	800c8c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800c814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c81a:	d86c      	bhi.n	800c8f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c81e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c822:	d03b      	beq.n	800c89c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800c824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c826:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c82a:	d864      	bhi.n	800c8f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c82e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c832:	d021      	beq.n	800c878 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800c834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c836:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c83a:	d85c      	bhi.n	800c8f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d004      	beq.n	800c84c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800c842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c844:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c848:	d004      	beq.n	800c854 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800c84a:	e054      	b.n	800c8f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c84c:	f000 f8b8 	bl	800c9c0 <HAL_RCCEx_GetD3PCLK1Freq>
 800c850:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c852:	e0ac      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c854:	4b29      	ldr	r3, [pc, #164]	; (800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c85c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c860:	d107      	bne.n	800c872 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c862:	f107 0318 	add.w	r3, r7, #24
 800c866:	4618      	mov	r0, r3
 800c868:	f000 f8c0 	bl	800c9ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c86c:	69fb      	ldr	r3, [r7, #28]
 800c86e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c870:	e09d      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c872:	2300      	movs	r3, #0
 800c874:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c876:	e09a      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c878:	4b20      	ldr	r3, [pc, #128]	; (800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c880:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c884:	d107      	bne.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c886:	f107 030c 	add.w	r3, r7, #12
 800c88a:	4618      	mov	r0, r3
 800c88c:	f000 fa02 	bl	800cc94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c894:	e08b      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c896:	2300      	movs	r3, #0
 800c898:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c89a:	e088      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c89c:	4b17      	ldr	r3, [pc, #92]	; (800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f003 0304 	and.w	r3, r3, #4
 800c8a4:	2b04      	cmp	r3, #4
 800c8a6:	d109      	bne.n	800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c8a8:	4b14      	ldr	r3, [pc, #80]	; (800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	08db      	lsrs	r3, r3, #3
 800c8ae:	f003 0303 	and.w	r3, r3, #3
 800c8b2:	4a13      	ldr	r2, [pc, #76]	; (800c900 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c8b4:	fa22 f303 	lsr.w	r3, r2, r3
 800c8b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8ba:	e078      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8c0:	e075      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c8c2:	4b0e      	ldr	r3, [pc, #56]	; (800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8ce:	d102      	bne.n	800c8d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800c8d0:	4b0c      	ldr	r3, [pc, #48]	; (800c904 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c8d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8d4:	e06b      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8da:	e068      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c8dc:	4b07      	ldr	r3, [pc, #28]	; (800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c8e8:	d102      	bne.n	800c8f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800c8ea:	4b07      	ldr	r3, [pc, #28]	; (800c908 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c8ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8ee:	e05e      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8f4:	e05b      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8fa:	e058      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c8fc:	58024400 	.word	0x58024400
 800c900:	03d09000 	.word	0x03d09000
 800c904:	003d0900 	.word	0x003d0900
 800c908:	00989680 	.word	0x00989680
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c90c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c910:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c914:	430b      	orrs	r3, r1
 800c916:	d148      	bne.n	800c9aa <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c918:	4b27      	ldr	r3, [pc, #156]	; (800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c91a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c91c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c920:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c924:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c928:	d02a      	beq.n	800c980 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800c92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c92c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c930:	d838      	bhi.n	800c9a4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800c932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c934:	2b00      	cmp	r3, #0
 800c936:	d004      	beq.n	800c942 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800c938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c93a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c93e:	d00d      	beq.n	800c95c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800c940:	e030      	b.n	800c9a4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c942:	4b1d      	ldr	r3, [pc, #116]	; (800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c94a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c94e:	d102      	bne.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800c950:	4b1a      	ldr	r3, [pc, #104]	; (800c9bc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800c952:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c954:	e02b      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c956:	2300      	movs	r3, #0
 800c958:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c95a:	e028      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c95c:	4b16      	ldr	r3, [pc, #88]	; (800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c964:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c968:	d107      	bne.n	800c97a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c96a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c96e:	4618      	mov	r0, r3
 800c970:	f000 fae4 	bl	800cf3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c976:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c978:	e019      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c97a:	2300      	movs	r3, #0
 800c97c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c97e:	e016      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c980:	4b0d      	ldr	r3, [pc, #52]	; (800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c988:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c98c:	d107      	bne.n	800c99e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c98e:	f107 0318 	add.w	r3, r7, #24
 800c992:	4618      	mov	r0, r3
 800c994:	f000 f82a 	bl	800c9ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c998:	69fb      	ldr	r3, [r7, #28]
 800c99a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c99c:	e007      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9a2:	e004      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9a8:	e001      	b.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c9ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3740      	adds	r7, #64	; 0x40
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}
 800c9b8:	58024400 	.word	0x58024400
 800c9bc:	00989680 	.word	0x00989680

0800c9c0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c9c4:	f7fd fffa 	bl	800a9bc <HAL_RCC_GetHCLKFreq>
 800c9c8:	4602      	mov	r2, r0
 800c9ca:	4b06      	ldr	r3, [pc, #24]	; (800c9e4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c9cc:	6a1b      	ldr	r3, [r3, #32]
 800c9ce:	091b      	lsrs	r3, r3, #4
 800c9d0:	f003 0307 	and.w	r3, r3, #7
 800c9d4:	4904      	ldr	r1, [pc, #16]	; (800c9e8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c9d6:	5ccb      	ldrb	r3, [r1, r3]
 800c9d8:	f003 031f 	and.w	r3, r3, #31
 800c9dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	bd80      	pop	{r7, pc}
 800c9e4:	58024400 	.word	0x58024400
 800c9e8:	0801efb4 	.word	0x0801efb4

0800c9ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b089      	sub	sp, #36	; 0x24
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c9f4:	4ba1      	ldr	r3, [pc, #644]	; (800cc7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9f8:	f003 0303 	and.w	r3, r3, #3
 800c9fc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c9fe:	4b9f      	ldr	r3, [pc, #636]	; (800cc7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca02:	0b1b      	lsrs	r3, r3, #12
 800ca04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca08:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ca0a:	4b9c      	ldr	r3, [pc, #624]	; (800cc7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca0e:	091b      	lsrs	r3, r3, #4
 800ca10:	f003 0301 	and.w	r3, r3, #1
 800ca14:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ca16:	4b99      	ldr	r3, [pc, #612]	; (800cc7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca1a:	08db      	lsrs	r3, r3, #3
 800ca1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ca20:	693a      	ldr	r2, [r7, #16]
 800ca22:	fb02 f303 	mul.w	r3, r2, r3
 800ca26:	ee07 3a90 	vmov	s15, r3
 800ca2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	f000 8111 	beq.w	800cc5c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ca3a:	69bb      	ldr	r3, [r7, #24]
 800ca3c:	2b02      	cmp	r3, #2
 800ca3e:	f000 8083 	beq.w	800cb48 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ca42:	69bb      	ldr	r3, [r7, #24]
 800ca44:	2b02      	cmp	r3, #2
 800ca46:	f200 80a1 	bhi.w	800cb8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ca4a:	69bb      	ldr	r3, [r7, #24]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d003      	beq.n	800ca58 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ca50:	69bb      	ldr	r3, [r7, #24]
 800ca52:	2b01      	cmp	r3, #1
 800ca54:	d056      	beq.n	800cb04 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ca56:	e099      	b.n	800cb8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca58:	4b88      	ldr	r3, [pc, #544]	; (800cc7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f003 0320 	and.w	r3, r3, #32
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d02d      	beq.n	800cac0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca64:	4b85      	ldr	r3, [pc, #532]	; (800cc7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	08db      	lsrs	r3, r3, #3
 800ca6a:	f003 0303 	and.w	r3, r3, #3
 800ca6e:	4a84      	ldr	r2, [pc, #528]	; (800cc80 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ca70:	fa22 f303 	lsr.w	r3, r2, r3
 800ca74:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca76:	68bb      	ldr	r3, [r7, #8]
 800ca78:	ee07 3a90 	vmov	s15, r3
 800ca7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca80:	697b      	ldr	r3, [r7, #20]
 800ca82:	ee07 3a90 	vmov	s15, r3
 800ca86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca8e:	4b7b      	ldr	r3, [pc, #492]	; (800cc7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca96:	ee07 3a90 	vmov	s15, r3
 800ca9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800caa2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cc84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800caa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800caaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800caae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800caba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cabe:	e087      	b.n	800cbd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	ee07 3a90 	vmov	s15, r3
 800cac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cc88 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800cace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cad2:	4b6a      	ldr	r3, [pc, #424]	; (800cc7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cada:	ee07 3a90 	vmov	s15, r3
 800cade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cae2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cae6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cc84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800caea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800caee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800caf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800caf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cafa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cafe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb02:	e065      	b.n	800cbd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	ee07 3a90 	vmov	s15, r3
 800cb0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb0e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cc8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cb12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb16:	4b59      	ldr	r3, [pc, #356]	; (800cc7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb1e:	ee07 3a90 	vmov	s15, r3
 800cb22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb26:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb2a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cc84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb46:	e043      	b.n	800cbd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb48:	697b      	ldr	r3, [r7, #20]
 800cb4a:	ee07 3a90 	vmov	s15, r3
 800cb4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb52:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cc90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cb56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb5a:	4b48      	ldr	r3, [pc, #288]	; (800cc7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb62:	ee07 3a90 	vmov	s15, r3
 800cb66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb6e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cc84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb8a:	e021      	b.n	800cbd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb8c:	697b      	ldr	r3, [r7, #20]
 800cb8e:	ee07 3a90 	vmov	s15, r3
 800cb92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb96:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cc8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cb9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb9e:	4b37      	ldr	r3, [pc, #220]	; (800cc7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cba6:	ee07 3a90 	vmov	s15, r3
 800cbaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbae:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbb2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cc84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cbb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cbce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cbd0:	4b2a      	ldr	r3, [pc, #168]	; (800cc7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbd4:	0a5b      	lsrs	r3, r3, #9
 800cbd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbda:	ee07 3a90 	vmov	s15, r3
 800cbde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbe2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cbe6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbea:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbf6:	ee17 2a90 	vmov	r2, s15
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800cbfe:	4b1f      	ldr	r3, [pc, #124]	; (800cc7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc02:	0c1b      	lsrs	r3, r3, #16
 800cc04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc08:	ee07 3a90 	vmov	s15, r3
 800cc0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc14:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc18:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc24:	ee17 2a90 	vmov	r2, s15
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cc2c:	4b13      	ldr	r3, [pc, #76]	; (800cc7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc30:	0e1b      	lsrs	r3, r3, #24
 800cc32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc36:	ee07 3a90 	vmov	s15, r3
 800cc3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc42:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc46:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc52:	ee17 2a90 	vmov	r2, s15
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cc5a:	e008      	b.n	800cc6e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2200      	movs	r2, #0
 800cc60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2200      	movs	r2, #0
 800cc66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	609a      	str	r2, [r3, #8]
}
 800cc6e:	bf00      	nop
 800cc70:	3724      	adds	r7, #36	; 0x24
 800cc72:	46bd      	mov	sp, r7
 800cc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc78:	4770      	bx	lr
 800cc7a:	bf00      	nop
 800cc7c:	58024400 	.word	0x58024400
 800cc80:	03d09000 	.word	0x03d09000
 800cc84:	46000000 	.word	0x46000000
 800cc88:	4c742400 	.word	0x4c742400
 800cc8c:	4a742400 	.word	0x4a742400
 800cc90:	4b189680 	.word	0x4b189680

0800cc94 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cc94:	b480      	push	{r7}
 800cc96:	b089      	sub	sp, #36	; 0x24
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cc9c:	4ba1      	ldr	r3, [pc, #644]	; (800cf24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cca0:	f003 0303 	and.w	r3, r3, #3
 800cca4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cca6:	4b9f      	ldr	r3, [pc, #636]	; (800cf24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccaa:	0d1b      	lsrs	r3, r3, #20
 800ccac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ccb0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ccb2:	4b9c      	ldr	r3, [pc, #624]	; (800cf24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccb6:	0a1b      	lsrs	r3, r3, #8
 800ccb8:	f003 0301 	and.w	r3, r3, #1
 800ccbc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ccbe:	4b99      	ldr	r3, [pc, #612]	; (800cf24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccc2:	08db      	lsrs	r3, r3, #3
 800ccc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ccc8:	693a      	ldr	r2, [r7, #16]
 800ccca:	fb02 f303 	mul.w	r3, r2, r3
 800ccce:	ee07 3a90 	vmov	s15, r3
 800ccd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccd6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	f000 8111 	beq.w	800cf04 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cce2:	69bb      	ldr	r3, [r7, #24]
 800cce4:	2b02      	cmp	r3, #2
 800cce6:	f000 8083 	beq.w	800cdf0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ccea:	69bb      	ldr	r3, [r7, #24]
 800ccec:	2b02      	cmp	r3, #2
 800ccee:	f200 80a1 	bhi.w	800ce34 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ccf2:	69bb      	ldr	r3, [r7, #24]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d003      	beq.n	800cd00 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ccf8:	69bb      	ldr	r3, [r7, #24]
 800ccfa:	2b01      	cmp	r3, #1
 800ccfc:	d056      	beq.n	800cdac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ccfe:	e099      	b.n	800ce34 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd00:	4b88      	ldr	r3, [pc, #544]	; (800cf24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	f003 0320 	and.w	r3, r3, #32
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d02d      	beq.n	800cd68 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd0c:	4b85      	ldr	r3, [pc, #532]	; (800cf24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	08db      	lsrs	r3, r3, #3
 800cd12:	f003 0303 	and.w	r3, r3, #3
 800cd16:	4a84      	ldr	r2, [pc, #528]	; (800cf28 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cd18:	fa22 f303 	lsr.w	r3, r2, r3
 800cd1c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd1e:	68bb      	ldr	r3, [r7, #8]
 800cd20:	ee07 3a90 	vmov	s15, r3
 800cd24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd28:	697b      	ldr	r3, [r7, #20]
 800cd2a:	ee07 3a90 	vmov	s15, r3
 800cd2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd36:	4b7b      	ldr	r3, [pc, #492]	; (800cf24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd3e:	ee07 3a90 	vmov	s15, r3
 800cd42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd46:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd4a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cf2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd62:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cd66:	e087      	b.n	800ce78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd68:	697b      	ldr	r3, [r7, #20]
 800cd6a:	ee07 3a90 	vmov	s15, r3
 800cd6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd72:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cf30 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cd76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd7a:	4b6a      	ldr	r3, [pc, #424]	; (800cf24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd82:	ee07 3a90 	vmov	s15, r3
 800cd86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd8a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd8e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cf2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cda2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cda6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cdaa:	e065      	b.n	800ce78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cdac:	697b      	ldr	r3, [r7, #20]
 800cdae:	ee07 3a90 	vmov	s15, r3
 800cdb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdb6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cf34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cdba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdbe:	4b59      	ldr	r3, [pc, #356]	; (800cf24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdc6:	ee07 3a90 	vmov	s15, r3
 800cdca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdce:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdd2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cf2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cdd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cde2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cde6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cdee:	e043      	b.n	800ce78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cdf0:	697b      	ldr	r3, [r7, #20]
 800cdf2:	ee07 3a90 	vmov	s15, r3
 800cdf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdfa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cf38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cdfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce02:	4b48      	ldr	r3, [pc, #288]	; (800cf24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce0a:	ee07 3a90 	vmov	s15, r3
 800ce0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce12:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce16:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cf2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ce1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce32:	e021      	b.n	800ce78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ce34:	697b      	ldr	r3, [r7, #20]
 800ce36:	ee07 3a90 	vmov	s15, r3
 800ce3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce3e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cf34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ce42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce46:	4b37      	ldr	r3, [pc, #220]	; (800cf24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce4e:	ee07 3a90 	vmov	s15, r3
 800ce52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce56:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce5a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cf2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ce5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce76:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ce78:	4b2a      	ldr	r3, [pc, #168]	; (800cf24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce7c:	0a5b      	lsrs	r3, r3, #9
 800ce7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce82:	ee07 3a90 	vmov	s15, r3
 800ce86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce92:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce9e:	ee17 2a90 	vmov	r2, s15
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800cea6:	4b1f      	ldr	r3, [pc, #124]	; (800cf24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceaa:	0c1b      	lsrs	r3, r3, #16
 800ceac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ceb0:	ee07 3a90 	vmov	s15, r3
 800ceb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ceb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cebc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cec0:	edd7 6a07 	vldr	s13, [r7, #28]
 800cec4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cec8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cecc:	ee17 2a90 	vmov	r2, s15
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ced4:	4b13      	ldr	r3, [pc, #76]	; (800cf24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ced6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ced8:	0e1b      	lsrs	r3, r3, #24
 800ceda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cede:	ee07 3a90 	vmov	s15, r3
 800cee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cee6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ceea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ceee:	edd7 6a07 	vldr	s13, [r7, #28]
 800cef2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cef6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cefa:	ee17 2a90 	vmov	r2, s15
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cf02:	e008      	b.n	800cf16 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2200      	movs	r2, #0
 800cf08:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2200      	movs	r2, #0
 800cf14:	609a      	str	r2, [r3, #8]
}
 800cf16:	bf00      	nop
 800cf18:	3724      	adds	r7, #36	; 0x24
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf20:	4770      	bx	lr
 800cf22:	bf00      	nop
 800cf24:	58024400 	.word	0x58024400
 800cf28:	03d09000 	.word	0x03d09000
 800cf2c:	46000000 	.word	0x46000000
 800cf30:	4c742400 	.word	0x4c742400
 800cf34:	4a742400 	.word	0x4a742400
 800cf38:	4b189680 	.word	0x4b189680

0800cf3c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b089      	sub	sp, #36	; 0x24
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cf44:	4ba0      	ldr	r3, [pc, #640]	; (800d1c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf48:	f003 0303 	and.w	r3, r3, #3
 800cf4c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cf4e:	4b9e      	ldr	r3, [pc, #632]	; (800d1c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf52:	091b      	lsrs	r3, r3, #4
 800cf54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf58:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cf5a:	4b9b      	ldr	r3, [pc, #620]	; (800d1c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf5e:	f003 0301 	and.w	r3, r3, #1
 800cf62:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cf64:	4b98      	ldr	r3, [pc, #608]	; (800d1c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf68:	08db      	lsrs	r3, r3, #3
 800cf6a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cf6e:	693a      	ldr	r2, [r7, #16]
 800cf70:	fb02 f303 	mul.w	r3, r2, r3
 800cf74:	ee07 3a90 	vmov	s15, r3
 800cf78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf7c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800cf80:	697b      	ldr	r3, [r7, #20]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	f000 8111 	beq.w	800d1aa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cf88:	69bb      	ldr	r3, [r7, #24]
 800cf8a:	2b02      	cmp	r3, #2
 800cf8c:	f000 8083 	beq.w	800d096 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cf90:	69bb      	ldr	r3, [r7, #24]
 800cf92:	2b02      	cmp	r3, #2
 800cf94:	f200 80a1 	bhi.w	800d0da <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cf98:	69bb      	ldr	r3, [r7, #24]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d003      	beq.n	800cfa6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800cf9e:	69bb      	ldr	r3, [r7, #24]
 800cfa0:	2b01      	cmp	r3, #1
 800cfa2:	d056      	beq.n	800d052 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800cfa4:	e099      	b.n	800d0da <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cfa6:	4b88      	ldr	r3, [pc, #544]	; (800d1c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	f003 0320 	and.w	r3, r3, #32
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d02d      	beq.n	800d00e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cfb2:	4b85      	ldr	r3, [pc, #532]	; (800d1c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	08db      	lsrs	r3, r3, #3
 800cfb8:	f003 0303 	and.w	r3, r3, #3
 800cfbc:	4a83      	ldr	r2, [pc, #524]	; (800d1cc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800cfbe:	fa22 f303 	lsr.w	r3, r2, r3
 800cfc2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cfc4:	68bb      	ldr	r3, [r7, #8]
 800cfc6:	ee07 3a90 	vmov	s15, r3
 800cfca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfce:	697b      	ldr	r3, [r7, #20]
 800cfd0:	ee07 3a90 	vmov	s15, r3
 800cfd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfdc:	4b7a      	ldr	r3, [pc, #488]	; (800d1c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cfde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfe4:	ee07 3a90 	vmov	s15, r3
 800cfe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfec:	ed97 6a03 	vldr	s12, [r7, #12]
 800cff0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d1d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cff4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cff8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cffc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d000:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d004:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d008:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d00c:	e087      	b.n	800d11e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	ee07 3a90 	vmov	s15, r3
 800d014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d018:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d1d4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d01c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d020:	4b69      	ldr	r3, [pc, #420]	; (800d1c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d028:	ee07 3a90 	vmov	s15, r3
 800d02c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d030:	ed97 6a03 	vldr	s12, [r7, #12]
 800d034:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d1d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d038:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d03c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d040:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d044:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d04c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d050:	e065      	b.n	800d11e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	ee07 3a90 	vmov	s15, r3
 800d058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d05c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d1d8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d060:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d064:	4b58      	ldr	r3, [pc, #352]	; (800d1c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d06c:	ee07 3a90 	vmov	s15, r3
 800d070:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d074:	ed97 6a03 	vldr	s12, [r7, #12]
 800d078:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d1d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d07c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d080:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d084:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d088:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d08c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d090:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d094:	e043      	b.n	800d11e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d096:	697b      	ldr	r3, [r7, #20]
 800d098:	ee07 3a90 	vmov	s15, r3
 800d09c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0a0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d1dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d0a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0a8:	4b47      	ldr	r3, [pc, #284]	; (800d1c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0b0:	ee07 3a90 	vmov	s15, r3
 800d0b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0b8:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0bc:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d1d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d0c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d0d8:	e021      	b.n	800d11e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	ee07 3a90 	vmov	s15, r3
 800d0e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0e4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d1d4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d0e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0ec:	4b36      	ldr	r3, [pc, #216]	; (800d1c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0f4:	ee07 3a90 	vmov	s15, r3
 800d0f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0fc:	ed97 6a03 	vldr	s12, [r7, #12]
 800d100:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d1d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d104:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d108:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d10c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d110:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d114:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d118:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d11c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d11e:	4b2a      	ldr	r3, [pc, #168]	; (800d1c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d122:	0a5b      	lsrs	r3, r3, #9
 800d124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d128:	ee07 3a90 	vmov	s15, r3
 800d12c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d130:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d134:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d138:	edd7 6a07 	vldr	s13, [r7, #28]
 800d13c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d144:	ee17 2a90 	vmov	r2, s15
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d14c:	4b1e      	ldr	r3, [pc, #120]	; (800d1c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d14e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d150:	0c1b      	lsrs	r3, r3, #16
 800d152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d156:	ee07 3a90 	vmov	s15, r3
 800d15a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d15e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d162:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d166:	edd7 6a07 	vldr	s13, [r7, #28]
 800d16a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d16e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d172:	ee17 2a90 	vmov	r2, s15
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d17a:	4b13      	ldr	r3, [pc, #76]	; (800d1c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d17c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d17e:	0e1b      	lsrs	r3, r3, #24
 800d180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d184:	ee07 3a90 	vmov	s15, r3
 800d188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d18c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d190:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d194:	edd7 6a07 	vldr	s13, [r7, #28]
 800d198:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d19c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1a0:	ee17 2a90 	vmov	r2, s15
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d1a8:	e008      	b.n	800d1bc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	609a      	str	r2, [r3, #8]
}
 800d1bc:	bf00      	nop
 800d1be:	3724      	adds	r7, #36	; 0x24
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c6:	4770      	bx	lr
 800d1c8:	58024400 	.word	0x58024400
 800d1cc:	03d09000 	.word	0x03d09000
 800d1d0:	46000000 	.word	0x46000000
 800d1d4:	4c742400 	.word	0x4c742400
 800d1d8:	4a742400 	.word	0x4a742400
 800d1dc:	4b189680 	.word	0x4b189680

0800d1e0 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b084      	sub	sp, #16
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800d1e8:	4b26      	ldr	r3, [pc, #152]	; (800d284 <HAL_RCCEx_CRSConfig+0xa4>)
 800d1ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d1ee:	4a25      	ldr	r2, [pc, #148]	; (800d284 <HAL_RCCEx_CRSConfig+0xa4>)
 800d1f0:	f043 0302 	orr.w	r3, r3, #2
 800d1f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 800d1f8:	4b22      	ldr	r3, [pc, #136]	; (800d284 <HAL_RCCEx_CRSConfig+0xa4>)
 800d1fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d1fe:	4a21      	ldr	r2, [pc, #132]	; (800d284 <HAL_RCCEx_CRSConfig+0xa4>)
 800d200:	f023 0302 	bic.w	r3, r3, #2
 800d204:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 800d208:	f7f6 ff50 	bl	80040ac <HAL_GetREVID>
 800d20c:	4603      	mov	r3, r0
 800d20e:	f241 0203 	movw	r2, #4099	; 0x1003
 800d212:	4293      	cmp	r3, r2
 800d214:	d80b      	bhi.n	800d22e <HAL_RCCEx_CRSConfig+0x4e>
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	685b      	ldr	r3, [r3, #4]
 800d21a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d21e:	d106      	bne.n	800d22e <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681a      	ldr	r2, [r3, #0]
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	689b      	ldr	r3, [r3, #8]
 800d228:	4313      	orrs	r3, r2
 800d22a:	60fb      	str	r3, [r7, #12]
 800d22c:	e008      	b.n	800d240 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681a      	ldr	r2, [r3, #0]
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	685b      	ldr	r3, [r3, #4]
 800d236:	431a      	orrs	r2, r3
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	689b      	ldr	r3, [r3, #8]
 800d23c:	4313      	orrs	r3, r2
 800d23e:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	68db      	ldr	r3, [r3, #12]
 800d244:	68fa      	ldr	r2, [r7, #12]
 800d246:	4313      	orrs	r3, r2
 800d248:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	691b      	ldr	r3, [r3, #16]
 800d24e:	041b      	lsls	r3, r3, #16
 800d250:	68fa      	ldr	r2, [r7, #12]
 800d252:	4313      	orrs	r3, r2
 800d254:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800d256:	4a0c      	ldr	r2, [pc, #48]	; (800d288 <HAL_RCCEx_CRSConfig+0xa8>)
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800d25c:	4b0a      	ldr	r3, [pc, #40]	; (800d288 <HAL_RCCEx_CRSConfig+0xa8>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	695b      	ldr	r3, [r3, #20]
 800d268:	021b      	lsls	r3, r3, #8
 800d26a:	4907      	ldr	r1, [pc, #28]	; (800d288 <HAL_RCCEx_CRSConfig+0xa8>)
 800d26c:	4313      	orrs	r3, r2
 800d26e:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800d270:	4b05      	ldr	r3, [pc, #20]	; (800d288 <HAL_RCCEx_CRSConfig+0xa8>)
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	4a04      	ldr	r2, [pc, #16]	; (800d288 <HAL_RCCEx_CRSConfig+0xa8>)
 800d276:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d27a:	6013      	str	r3, [r2, #0]
}
 800d27c:	bf00      	nop
 800d27e:	3710      	adds	r7, #16
 800d280:	46bd      	mov	sp, r7
 800d282:	bd80      	pop	{r7, pc}
 800d284:	58024400 	.word	0x58024400
 800d288:	40008400 	.word	0x40008400

0800d28c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b084      	sub	sp, #16
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d296:	2300      	movs	r3, #0
 800d298:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d29a:	4b53      	ldr	r3, [pc, #332]	; (800d3e8 <RCCEx_PLL2_Config+0x15c>)
 800d29c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d29e:	f003 0303 	and.w	r3, r3, #3
 800d2a2:	2b03      	cmp	r3, #3
 800d2a4:	d101      	bne.n	800d2aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	e099      	b.n	800d3de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d2aa:	4b4f      	ldr	r3, [pc, #316]	; (800d3e8 <RCCEx_PLL2_Config+0x15c>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	4a4e      	ldr	r2, [pc, #312]	; (800d3e8 <RCCEx_PLL2_Config+0x15c>)
 800d2b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d2b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d2b6:	f7f6 fec9 	bl	800404c <HAL_GetTick>
 800d2ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d2bc:	e008      	b.n	800d2d0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d2be:	f7f6 fec5 	bl	800404c <HAL_GetTick>
 800d2c2:	4602      	mov	r2, r0
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	1ad3      	subs	r3, r2, r3
 800d2c8:	2b02      	cmp	r3, #2
 800d2ca:	d901      	bls.n	800d2d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d2cc:	2303      	movs	r3, #3
 800d2ce:	e086      	b.n	800d3de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d2d0:	4b45      	ldr	r3, [pc, #276]	; (800d3e8 <RCCEx_PLL2_Config+0x15c>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d1f0      	bne.n	800d2be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d2dc:	4b42      	ldr	r3, [pc, #264]	; (800d3e8 <RCCEx_PLL2_Config+0x15c>)
 800d2de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	031b      	lsls	r3, r3, #12
 800d2ea:	493f      	ldr	r1, [pc, #252]	; (800d3e8 <RCCEx_PLL2_Config+0x15c>)
 800d2ec:	4313      	orrs	r3, r2
 800d2ee:	628b      	str	r3, [r1, #40]	; 0x28
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	685b      	ldr	r3, [r3, #4]
 800d2f4:	3b01      	subs	r3, #1
 800d2f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	689b      	ldr	r3, [r3, #8]
 800d2fe:	3b01      	subs	r3, #1
 800d300:	025b      	lsls	r3, r3, #9
 800d302:	b29b      	uxth	r3, r3
 800d304:	431a      	orrs	r2, r3
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	68db      	ldr	r3, [r3, #12]
 800d30a:	3b01      	subs	r3, #1
 800d30c:	041b      	lsls	r3, r3, #16
 800d30e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d312:	431a      	orrs	r2, r3
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	691b      	ldr	r3, [r3, #16]
 800d318:	3b01      	subs	r3, #1
 800d31a:	061b      	lsls	r3, r3, #24
 800d31c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d320:	4931      	ldr	r1, [pc, #196]	; (800d3e8 <RCCEx_PLL2_Config+0x15c>)
 800d322:	4313      	orrs	r3, r2
 800d324:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d326:	4b30      	ldr	r3, [pc, #192]	; (800d3e8 <RCCEx_PLL2_Config+0x15c>)
 800d328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d32a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	695b      	ldr	r3, [r3, #20]
 800d332:	492d      	ldr	r1, [pc, #180]	; (800d3e8 <RCCEx_PLL2_Config+0x15c>)
 800d334:	4313      	orrs	r3, r2
 800d336:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d338:	4b2b      	ldr	r3, [pc, #172]	; (800d3e8 <RCCEx_PLL2_Config+0x15c>)
 800d33a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d33c:	f023 0220 	bic.w	r2, r3, #32
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	699b      	ldr	r3, [r3, #24]
 800d344:	4928      	ldr	r1, [pc, #160]	; (800d3e8 <RCCEx_PLL2_Config+0x15c>)
 800d346:	4313      	orrs	r3, r2
 800d348:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d34a:	4b27      	ldr	r3, [pc, #156]	; (800d3e8 <RCCEx_PLL2_Config+0x15c>)
 800d34c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d34e:	4a26      	ldr	r2, [pc, #152]	; (800d3e8 <RCCEx_PLL2_Config+0x15c>)
 800d350:	f023 0310 	bic.w	r3, r3, #16
 800d354:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d356:	4b24      	ldr	r3, [pc, #144]	; (800d3e8 <RCCEx_PLL2_Config+0x15c>)
 800d358:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d35a:	4b24      	ldr	r3, [pc, #144]	; (800d3ec <RCCEx_PLL2_Config+0x160>)
 800d35c:	4013      	ands	r3, r2
 800d35e:	687a      	ldr	r2, [r7, #4]
 800d360:	69d2      	ldr	r2, [r2, #28]
 800d362:	00d2      	lsls	r2, r2, #3
 800d364:	4920      	ldr	r1, [pc, #128]	; (800d3e8 <RCCEx_PLL2_Config+0x15c>)
 800d366:	4313      	orrs	r3, r2
 800d368:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d36a:	4b1f      	ldr	r3, [pc, #124]	; (800d3e8 <RCCEx_PLL2_Config+0x15c>)
 800d36c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d36e:	4a1e      	ldr	r2, [pc, #120]	; (800d3e8 <RCCEx_PLL2_Config+0x15c>)
 800d370:	f043 0310 	orr.w	r3, r3, #16
 800d374:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d106      	bne.n	800d38a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d37c:	4b1a      	ldr	r3, [pc, #104]	; (800d3e8 <RCCEx_PLL2_Config+0x15c>)
 800d37e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d380:	4a19      	ldr	r2, [pc, #100]	; (800d3e8 <RCCEx_PLL2_Config+0x15c>)
 800d382:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d386:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d388:	e00f      	b.n	800d3aa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	2b01      	cmp	r3, #1
 800d38e:	d106      	bne.n	800d39e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d390:	4b15      	ldr	r3, [pc, #84]	; (800d3e8 <RCCEx_PLL2_Config+0x15c>)
 800d392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d394:	4a14      	ldr	r2, [pc, #80]	; (800d3e8 <RCCEx_PLL2_Config+0x15c>)
 800d396:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d39a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d39c:	e005      	b.n	800d3aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d39e:	4b12      	ldr	r3, [pc, #72]	; (800d3e8 <RCCEx_PLL2_Config+0x15c>)
 800d3a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3a2:	4a11      	ldr	r2, [pc, #68]	; (800d3e8 <RCCEx_PLL2_Config+0x15c>)
 800d3a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d3a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d3aa:	4b0f      	ldr	r3, [pc, #60]	; (800d3e8 <RCCEx_PLL2_Config+0x15c>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	4a0e      	ldr	r2, [pc, #56]	; (800d3e8 <RCCEx_PLL2_Config+0x15c>)
 800d3b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d3b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d3b6:	f7f6 fe49 	bl	800404c <HAL_GetTick>
 800d3ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d3bc:	e008      	b.n	800d3d0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d3be:	f7f6 fe45 	bl	800404c <HAL_GetTick>
 800d3c2:	4602      	mov	r2, r0
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	1ad3      	subs	r3, r2, r3
 800d3c8:	2b02      	cmp	r3, #2
 800d3ca:	d901      	bls.n	800d3d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d3cc:	2303      	movs	r3, #3
 800d3ce:	e006      	b.n	800d3de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d3d0:	4b05      	ldr	r3, [pc, #20]	; (800d3e8 <RCCEx_PLL2_Config+0x15c>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d0f0      	beq.n	800d3be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d3dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	3710      	adds	r7, #16
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}
 800d3e6:	bf00      	nop
 800d3e8:	58024400 	.word	0x58024400
 800d3ec:	ffff0007 	.word	0xffff0007

0800d3f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b084      	sub	sp, #16
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
 800d3f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d3fe:	4b53      	ldr	r3, [pc, #332]	; (800d54c <RCCEx_PLL3_Config+0x15c>)
 800d400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d402:	f003 0303 	and.w	r3, r3, #3
 800d406:	2b03      	cmp	r3, #3
 800d408:	d101      	bne.n	800d40e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d40a:	2301      	movs	r3, #1
 800d40c:	e099      	b.n	800d542 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d40e:	4b4f      	ldr	r3, [pc, #316]	; (800d54c <RCCEx_PLL3_Config+0x15c>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	4a4e      	ldr	r2, [pc, #312]	; (800d54c <RCCEx_PLL3_Config+0x15c>)
 800d414:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d418:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d41a:	f7f6 fe17 	bl	800404c <HAL_GetTick>
 800d41e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d420:	e008      	b.n	800d434 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d422:	f7f6 fe13 	bl	800404c <HAL_GetTick>
 800d426:	4602      	mov	r2, r0
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	1ad3      	subs	r3, r2, r3
 800d42c:	2b02      	cmp	r3, #2
 800d42e:	d901      	bls.n	800d434 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d430:	2303      	movs	r3, #3
 800d432:	e086      	b.n	800d542 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d434:	4b45      	ldr	r3, [pc, #276]	; (800d54c <RCCEx_PLL3_Config+0x15c>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d1f0      	bne.n	800d422 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d440:	4b42      	ldr	r3, [pc, #264]	; (800d54c <RCCEx_PLL3_Config+0x15c>)
 800d442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d444:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	051b      	lsls	r3, r3, #20
 800d44e:	493f      	ldr	r1, [pc, #252]	; (800d54c <RCCEx_PLL3_Config+0x15c>)
 800d450:	4313      	orrs	r3, r2
 800d452:	628b      	str	r3, [r1, #40]	; 0x28
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	685b      	ldr	r3, [r3, #4]
 800d458:	3b01      	subs	r3, #1
 800d45a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	689b      	ldr	r3, [r3, #8]
 800d462:	3b01      	subs	r3, #1
 800d464:	025b      	lsls	r3, r3, #9
 800d466:	b29b      	uxth	r3, r3
 800d468:	431a      	orrs	r2, r3
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	68db      	ldr	r3, [r3, #12]
 800d46e:	3b01      	subs	r3, #1
 800d470:	041b      	lsls	r3, r3, #16
 800d472:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d476:	431a      	orrs	r2, r3
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	691b      	ldr	r3, [r3, #16]
 800d47c:	3b01      	subs	r3, #1
 800d47e:	061b      	lsls	r3, r3, #24
 800d480:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d484:	4931      	ldr	r1, [pc, #196]	; (800d54c <RCCEx_PLL3_Config+0x15c>)
 800d486:	4313      	orrs	r3, r2
 800d488:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d48a:	4b30      	ldr	r3, [pc, #192]	; (800d54c <RCCEx_PLL3_Config+0x15c>)
 800d48c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d48e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	695b      	ldr	r3, [r3, #20]
 800d496:	492d      	ldr	r1, [pc, #180]	; (800d54c <RCCEx_PLL3_Config+0x15c>)
 800d498:	4313      	orrs	r3, r2
 800d49a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d49c:	4b2b      	ldr	r3, [pc, #172]	; (800d54c <RCCEx_PLL3_Config+0x15c>)
 800d49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	699b      	ldr	r3, [r3, #24]
 800d4a8:	4928      	ldr	r1, [pc, #160]	; (800d54c <RCCEx_PLL3_Config+0x15c>)
 800d4aa:	4313      	orrs	r3, r2
 800d4ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d4ae:	4b27      	ldr	r3, [pc, #156]	; (800d54c <RCCEx_PLL3_Config+0x15c>)
 800d4b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4b2:	4a26      	ldr	r2, [pc, #152]	; (800d54c <RCCEx_PLL3_Config+0x15c>)
 800d4b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d4b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d4ba:	4b24      	ldr	r3, [pc, #144]	; (800d54c <RCCEx_PLL3_Config+0x15c>)
 800d4bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d4be:	4b24      	ldr	r3, [pc, #144]	; (800d550 <RCCEx_PLL3_Config+0x160>)
 800d4c0:	4013      	ands	r3, r2
 800d4c2:	687a      	ldr	r2, [r7, #4]
 800d4c4:	69d2      	ldr	r2, [r2, #28]
 800d4c6:	00d2      	lsls	r2, r2, #3
 800d4c8:	4920      	ldr	r1, [pc, #128]	; (800d54c <RCCEx_PLL3_Config+0x15c>)
 800d4ca:	4313      	orrs	r3, r2
 800d4cc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d4ce:	4b1f      	ldr	r3, [pc, #124]	; (800d54c <RCCEx_PLL3_Config+0x15c>)
 800d4d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4d2:	4a1e      	ldr	r2, [pc, #120]	; (800d54c <RCCEx_PLL3_Config+0x15c>)
 800d4d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d4d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d106      	bne.n	800d4ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d4e0:	4b1a      	ldr	r3, [pc, #104]	; (800d54c <RCCEx_PLL3_Config+0x15c>)
 800d4e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4e4:	4a19      	ldr	r2, [pc, #100]	; (800d54c <RCCEx_PLL3_Config+0x15c>)
 800d4e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d4ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d4ec:	e00f      	b.n	800d50e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	2b01      	cmp	r3, #1
 800d4f2:	d106      	bne.n	800d502 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d4f4:	4b15      	ldr	r3, [pc, #84]	; (800d54c <RCCEx_PLL3_Config+0x15c>)
 800d4f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4f8:	4a14      	ldr	r2, [pc, #80]	; (800d54c <RCCEx_PLL3_Config+0x15c>)
 800d4fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d4fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d500:	e005      	b.n	800d50e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d502:	4b12      	ldr	r3, [pc, #72]	; (800d54c <RCCEx_PLL3_Config+0x15c>)
 800d504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d506:	4a11      	ldr	r2, [pc, #68]	; (800d54c <RCCEx_PLL3_Config+0x15c>)
 800d508:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d50c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d50e:	4b0f      	ldr	r3, [pc, #60]	; (800d54c <RCCEx_PLL3_Config+0x15c>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	4a0e      	ldr	r2, [pc, #56]	; (800d54c <RCCEx_PLL3_Config+0x15c>)
 800d514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d518:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d51a:	f7f6 fd97 	bl	800404c <HAL_GetTick>
 800d51e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d520:	e008      	b.n	800d534 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d522:	f7f6 fd93 	bl	800404c <HAL_GetTick>
 800d526:	4602      	mov	r2, r0
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	1ad3      	subs	r3, r2, r3
 800d52c:	2b02      	cmp	r3, #2
 800d52e:	d901      	bls.n	800d534 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d530:	2303      	movs	r3, #3
 800d532:	e006      	b.n	800d542 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d534:	4b05      	ldr	r3, [pc, #20]	; (800d54c <RCCEx_PLL3_Config+0x15c>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d0f0      	beq.n	800d522 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d540:	7bfb      	ldrb	r3, [r7, #15]
}
 800d542:	4618      	mov	r0, r3
 800d544:	3710      	adds	r7, #16
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}
 800d54a:	bf00      	nop
 800d54c:	58024400 	.word	0x58024400
 800d550:	ffff0007 	.word	0xffff0007

0800d554 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b082      	sub	sp, #8
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d101      	bne.n	800d566 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d562:	2301      	movs	r3, #1
 800d564:	e049      	b.n	800d5fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d56c:	b2db      	uxtb	r3, r3
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d106      	bne.n	800d580 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2200      	movs	r2, #0
 800d576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d57a:	6878      	ldr	r0, [r7, #4]
 800d57c:	f7f6 f896 	bl	80036ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2202      	movs	r2, #2
 800d584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681a      	ldr	r2, [r3, #0]
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	3304      	adds	r3, #4
 800d590:	4619      	mov	r1, r3
 800d592:	4610      	mov	r0, r2
 800d594:	f000 f92e 	bl	800d7f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2201      	movs	r2, #1
 800d59c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2201      	movs	r2, #1
 800d5a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2201      	movs	r2, #1
 800d5ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2201      	movs	r2, #1
 800d5b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2201      	movs	r2, #1
 800d5bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2201      	movs	r2, #1
 800d5c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2201      	movs	r2, #1
 800d5cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2201      	movs	r2, #1
 800d5d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2201      	movs	r2, #1
 800d5dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2201      	movs	r2, #1
 800d5e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2201      	movs	r2, #1
 800d5ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2201      	movs	r2, #1
 800d5f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d5f8:	2300      	movs	r3, #0
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3708      	adds	r7, #8
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
	...

0800d604 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b084      	sub	sp, #16
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
 800d60c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d60e:	2300      	movs	r3, #0
 800d610:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d618:	2b01      	cmp	r3, #1
 800d61a:	d101      	bne.n	800d620 <HAL_TIM_ConfigClockSource+0x1c>
 800d61c:	2302      	movs	r3, #2
 800d61e:	e0dc      	b.n	800d7da <HAL_TIM_ConfigClockSource+0x1d6>
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2201      	movs	r2, #1
 800d624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2202      	movs	r2, #2
 800d62c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	689b      	ldr	r3, [r3, #8]
 800d636:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d638:	68ba      	ldr	r2, [r7, #8]
 800d63a:	4b6a      	ldr	r3, [pc, #424]	; (800d7e4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d63c:	4013      	ands	r3, r2
 800d63e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d646:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	68ba      	ldr	r2, [r7, #8]
 800d64e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d650:	683b      	ldr	r3, [r7, #0]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	4a64      	ldr	r2, [pc, #400]	; (800d7e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d656:	4293      	cmp	r3, r2
 800d658:	f000 80a9 	beq.w	800d7ae <HAL_TIM_ConfigClockSource+0x1aa>
 800d65c:	4a62      	ldr	r2, [pc, #392]	; (800d7e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d65e:	4293      	cmp	r3, r2
 800d660:	f200 80ae 	bhi.w	800d7c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d664:	4a61      	ldr	r2, [pc, #388]	; (800d7ec <HAL_TIM_ConfigClockSource+0x1e8>)
 800d666:	4293      	cmp	r3, r2
 800d668:	f000 80a1 	beq.w	800d7ae <HAL_TIM_ConfigClockSource+0x1aa>
 800d66c:	4a5f      	ldr	r2, [pc, #380]	; (800d7ec <HAL_TIM_ConfigClockSource+0x1e8>)
 800d66e:	4293      	cmp	r3, r2
 800d670:	f200 80a6 	bhi.w	800d7c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d674:	4a5e      	ldr	r2, [pc, #376]	; (800d7f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d676:	4293      	cmp	r3, r2
 800d678:	f000 8099 	beq.w	800d7ae <HAL_TIM_ConfigClockSource+0x1aa>
 800d67c:	4a5c      	ldr	r2, [pc, #368]	; (800d7f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d67e:	4293      	cmp	r3, r2
 800d680:	f200 809e 	bhi.w	800d7c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d684:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d688:	f000 8091 	beq.w	800d7ae <HAL_TIM_ConfigClockSource+0x1aa>
 800d68c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d690:	f200 8096 	bhi.w	800d7c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d694:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d698:	f000 8089 	beq.w	800d7ae <HAL_TIM_ConfigClockSource+0x1aa>
 800d69c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d6a0:	f200 808e 	bhi.w	800d7c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d6a8:	d03e      	beq.n	800d728 <HAL_TIM_ConfigClockSource+0x124>
 800d6aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d6ae:	f200 8087 	bhi.w	800d7c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d6b6:	f000 8086 	beq.w	800d7c6 <HAL_TIM_ConfigClockSource+0x1c2>
 800d6ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d6be:	d87f      	bhi.n	800d7c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6c0:	2b70      	cmp	r3, #112	; 0x70
 800d6c2:	d01a      	beq.n	800d6fa <HAL_TIM_ConfigClockSource+0xf6>
 800d6c4:	2b70      	cmp	r3, #112	; 0x70
 800d6c6:	d87b      	bhi.n	800d7c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6c8:	2b60      	cmp	r3, #96	; 0x60
 800d6ca:	d050      	beq.n	800d76e <HAL_TIM_ConfigClockSource+0x16a>
 800d6cc:	2b60      	cmp	r3, #96	; 0x60
 800d6ce:	d877      	bhi.n	800d7c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6d0:	2b50      	cmp	r3, #80	; 0x50
 800d6d2:	d03c      	beq.n	800d74e <HAL_TIM_ConfigClockSource+0x14a>
 800d6d4:	2b50      	cmp	r3, #80	; 0x50
 800d6d6:	d873      	bhi.n	800d7c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6d8:	2b40      	cmp	r3, #64	; 0x40
 800d6da:	d058      	beq.n	800d78e <HAL_TIM_ConfigClockSource+0x18a>
 800d6dc:	2b40      	cmp	r3, #64	; 0x40
 800d6de:	d86f      	bhi.n	800d7c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6e0:	2b30      	cmp	r3, #48	; 0x30
 800d6e2:	d064      	beq.n	800d7ae <HAL_TIM_ConfigClockSource+0x1aa>
 800d6e4:	2b30      	cmp	r3, #48	; 0x30
 800d6e6:	d86b      	bhi.n	800d7c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6e8:	2b20      	cmp	r3, #32
 800d6ea:	d060      	beq.n	800d7ae <HAL_TIM_ConfigClockSource+0x1aa>
 800d6ec:	2b20      	cmp	r3, #32
 800d6ee:	d867      	bhi.n	800d7c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d05c      	beq.n	800d7ae <HAL_TIM_ConfigClockSource+0x1aa>
 800d6f4:	2b10      	cmp	r3, #16
 800d6f6:	d05a      	beq.n	800d7ae <HAL_TIM_ConfigClockSource+0x1aa>
 800d6f8:	e062      	b.n	800d7c0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d70a:	f000 f98b 	bl	800da24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	689b      	ldr	r3, [r3, #8]
 800d714:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d71c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	68ba      	ldr	r2, [r7, #8]
 800d724:	609a      	str	r2, [r3, #8]
      break;
 800d726:	e04f      	b.n	800d7c8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d738:	f000 f974 	bl	800da24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	689a      	ldr	r2, [r3, #8]
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d74a:	609a      	str	r2, [r3, #8]
      break;
 800d74c:	e03c      	b.n	800d7c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d75a:	461a      	mov	r2, r3
 800d75c:	f000 f8e4 	bl	800d928 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	2150      	movs	r1, #80	; 0x50
 800d766:	4618      	mov	r0, r3
 800d768:	f000 f93e 	bl	800d9e8 <TIM_ITRx_SetConfig>
      break;
 800d76c:	e02c      	b.n	800d7c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d77a:	461a      	mov	r2, r3
 800d77c:	f000 f903 	bl	800d986 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	2160      	movs	r1, #96	; 0x60
 800d786:	4618      	mov	r0, r3
 800d788:	f000 f92e 	bl	800d9e8 <TIM_ITRx_SetConfig>
      break;
 800d78c:	e01c      	b.n	800d7c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d79a:	461a      	mov	r2, r3
 800d79c:	f000 f8c4 	bl	800d928 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	2140      	movs	r1, #64	; 0x40
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f000 f91e 	bl	800d9e8 <TIM_ITRx_SetConfig>
      break;
 800d7ac:	e00c      	b.n	800d7c8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681a      	ldr	r2, [r3, #0]
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	4619      	mov	r1, r3
 800d7b8:	4610      	mov	r0, r2
 800d7ba:	f000 f915 	bl	800d9e8 <TIM_ITRx_SetConfig>
      break;
 800d7be:	e003      	b.n	800d7c8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	73fb      	strb	r3, [r7, #15]
      break;
 800d7c4:	e000      	b.n	800d7c8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d7c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2201      	movs	r2, #1
 800d7cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d7d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3710      	adds	r7, #16
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
 800d7e2:	bf00      	nop
 800d7e4:	ffceff88 	.word	0xffceff88
 800d7e8:	00100040 	.word	0x00100040
 800d7ec:	00100030 	.word	0x00100030
 800d7f0:	00100020 	.word	0x00100020

0800d7f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b085      	sub	sp, #20
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
 800d7fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	4a40      	ldr	r2, [pc, #256]	; (800d908 <TIM_Base_SetConfig+0x114>)
 800d808:	4293      	cmp	r3, r2
 800d80a:	d013      	beq.n	800d834 <TIM_Base_SetConfig+0x40>
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d812:	d00f      	beq.n	800d834 <TIM_Base_SetConfig+0x40>
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	4a3d      	ldr	r2, [pc, #244]	; (800d90c <TIM_Base_SetConfig+0x118>)
 800d818:	4293      	cmp	r3, r2
 800d81a:	d00b      	beq.n	800d834 <TIM_Base_SetConfig+0x40>
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	4a3c      	ldr	r2, [pc, #240]	; (800d910 <TIM_Base_SetConfig+0x11c>)
 800d820:	4293      	cmp	r3, r2
 800d822:	d007      	beq.n	800d834 <TIM_Base_SetConfig+0x40>
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	4a3b      	ldr	r2, [pc, #236]	; (800d914 <TIM_Base_SetConfig+0x120>)
 800d828:	4293      	cmp	r3, r2
 800d82a:	d003      	beq.n	800d834 <TIM_Base_SetConfig+0x40>
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	4a3a      	ldr	r2, [pc, #232]	; (800d918 <TIM_Base_SetConfig+0x124>)
 800d830:	4293      	cmp	r3, r2
 800d832:	d108      	bne.n	800d846 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d83a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	685b      	ldr	r3, [r3, #4]
 800d840:	68fa      	ldr	r2, [r7, #12]
 800d842:	4313      	orrs	r3, r2
 800d844:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	4a2f      	ldr	r2, [pc, #188]	; (800d908 <TIM_Base_SetConfig+0x114>)
 800d84a:	4293      	cmp	r3, r2
 800d84c:	d01f      	beq.n	800d88e <TIM_Base_SetConfig+0x9a>
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d854:	d01b      	beq.n	800d88e <TIM_Base_SetConfig+0x9a>
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	4a2c      	ldr	r2, [pc, #176]	; (800d90c <TIM_Base_SetConfig+0x118>)
 800d85a:	4293      	cmp	r3, r2
 800d85c:	d017      	beq.n	800d88e <TIM_Base_SetConfig+0x9a>
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	4a2b      	ldr	r2, [pc, #172]	; (800d910 <TIM_Base_SetConfig+0x11c>)
 800d862:	4293      	cmp	r3, r2
 800d864:	d013      	beq.n	800d88e <TIM_Base_SetConfig+0x9a>
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	4a2a      	ldr	r2, [pc, #168]	; (800d914 <TIM_Base_SetConfig+0x120>)
 800d86a:	4293      	cmp	r3, r2
 800d86c:	d00f      	beq.n	800d88e <TIM_Base_SetConfig+0x9a>
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	4a29      	ldr	r2, [pc, #164]	; (800d918 <TIM_Base_SetConfig+0x124>)
 800d872:	4293      	cmp	r3, r2
 800d874:	d00b      	beq.n	800d88e <TIM_Base_SetConfig+0x9a>
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	4a28      	ldr	r2, [pc, #160]	; (800d91c <TIM_Base_SetConfig+0x128>)
 800d87a:	4293      	cmp	r3, r2
 800d87c:	d007      	beq.n	800d88e <TIM_Base_SetConfig+0x9a>
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	4a27      	ldr	r2, [pc, #156]	; (800d920 <TIM_Base_SetConfig+0x12c>)
 800d882:	4293      	cmp	r3, r2
 800d884:	d003      	beq.n	800d88e <TIM_Base_SetConfig+0x9a>
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	4a26      	ldr	r2, [pc, #152]	; (800d924 <TIM_Base_SetConfig+0x130>)
 800d88a:	4293      	cmp	r3, r2
 800d88c:	d108      	bne.n	800d8a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d894:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	68db      	ldr	r3, [r3, #12]
 800d89a:	68fa      	ldr	r2, [r7, #12]
 800d89c:	4313      	orrs	r3, r2
 800d89e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	695b      	ldr	r3, [r3, #20]
 800d8aa:	4313      	orrs	r3, r2
 800d8ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	68fa      	ldr	r2, [r7, #12]
 800d8b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	689a      	ldr	r2, [r3, #8]
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	681a      	ldr	r2, [r3, #0]
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	4a10      	ldr	r2, [pc, #64]	; (800d908 <TIM_Base_SetConfig+0x114>)
 800d8c8:	4293      	cmp	r3, r2
 800d8ca:	d00f      	beq.n	800d8ec <TIM_Base_SetConfig+0xf8>
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	4a12      	ldr	r2, [pc, #72]	; (800d918 <TIM_Base_SetConfig+0x124>)
 800d8d0:	4293      	cmp	r3, r2
 800d8d2:	d00b      	beq.n	800d8ec <TIM_Base_SetConfig+0xf8>
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	4a11      	ldr	r2, [pc, #68]	; (800d91c <TIM_Base_SetConfig+0x128>)
 800d8d8:	4293      	cmp	r3, r2
 800d8da:	d007      	beq.n	800d8ec <TIM_Base_SetConfig+0xf8>
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	4a10      	ldr	r2, [pc, #64]	; (800d920 <TIM_Base_SetConfig+0x12c>)
 800d8e0:	4293      	cmp	r3, r2
 800d8e2:	d003      	beq.n	800d8ec <TIM_Base_SetConfig+0xf8>
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	4a0f      	ldr	r2, [pc, #60]	; (800d924 <TIM_Base_SetConfig+0x130>)
 800d8e8:	4293      	cmp	r3, r2
 800d8ea:	d103      	bne.n	800d8f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	691a      	ldr	r2, [r3, #16]
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2201      	movs	r2, #1
 800d8f8:	615a      	str	r2, [r3, #20]
}
 800d8fa:	bf00      	nop
 800d8fc:	3714      	adds	r7, #20
 800d8fe:	46bd      	mov	sp, r7
 800d900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d904:	4770      	bx	lr
 800d906:	bf00      	nop
 800d908:	40010000 	.word	0x40010000
 800d90c:	40000400 	.word	0x40000400
 800d910:	40000800 	.word	0x40000800
 800d914:	40000c00 	.word	0x40000c00
 800d918:	40010400 	.word	0x40010400
 800d91c:	40014000 	.word	0x40014000
 800d920:	40014400 	.word	0x40014400
 800d924:	40014800 	.word	0x40014800

0800d928 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d928:	b480      	push	{r7}
 800d92a:	b087      	sub	sp, #28
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	60f8      	str	r0, [r7, #12]
 800d930:	60b9      	str	r1, [r7, #8]
 800d932:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	6a1b      	ldr	r3, [r3, #32]
 800d938:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	6a1b      	ldr	r3, [r3, #32]
 800d93e:	f023 0201 	bic.w	r2, r3, #1
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	699b      	ldr	r3, [r3, #24]
 800d94a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d94c:	693b      	ldr	r3, [r7, #16]
 800d94e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d952:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	011b      	lsls	r3, r3, #4
 800d958:	693a      	ldr	r2, [r7, #16]
 800d95a:	4313      	orrs	r3, r2
 800d95c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d95e:	697b      	ldr	r3, [r7, #20]
 800d960:	f023 030a 	bic.w	r3, r3, #10
 800d964:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d966:	697a      	ldr	r2, [r7, #20]
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	4313      	orrs	r3, r2
 800d96c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	693a      	ldr	r2, [r7, #16]
 800d972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	697a      	ldr	r2, [r7, #20]
 800d978:	621a      	str	r2, [r3, #32]
}
 800d97a:	bf00      	nop
 800d97c:	371c      	adds	r7, #28
 800d97e:	46bd      	mov	sp, r7
 800d980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d984:	4770      	bx	lr

0800d986 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d986:	b480      	push	{r7}
 800d988:	b087      	sub	sp, #28
 800d98a:	af00      	add	r7, sp, #0
 800d98c:	60f8      	str	r0, [r7, #12]
 800d98e:	60b9      	str	r1, [r7, #8]
 800d990:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	6a1b      	ldr	r3, [r3, #32]
 800d996:	f023 0210 	bic.w	r2, r3, #16
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	699b      	ldr	r3, [r3, #24]
 800d9a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	6a1b      	ldr	r3, [r3, #32]
 800d9a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d9aa:	697b      	ldr	r3, [r7, #20]
 800d9ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d9b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	031b      	lsls	r3, r3, #12
 800d9b6:	697a      	ldr	r2, [r7, #20]
 800d9b8:	4313      	orrs	r3, r2
 800d9ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d9bc:	693b      	ldr	r3, [r7, #16]
 800d9be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d9c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d9c4:	68bb      	ldr	r3, [r7, #8]
 800d9c6:	011b      	lsls	r3, r3, #4
 800d9c8:	693a      	ldr	r2, [r7, #16]
 800d9ca:	4313      	orrs	r3, r2
 800d9cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	697a      	ldr	r2, [r7, #20]
 800d9d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	693a      	ldr	r2, [r7, #16]
 800d9d8:	621a      	str	r2, [r3, #32]
}
 800d9da:	bf00      	nop
 800d9dc:	371c      	adds	r7, #28
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e4:	4770      	bx	lr
	...

0800d9e8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d9e8:	b480      	push	{r7}
 800d9ea:	b085      	sub	sp, #20
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
 800d9f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	689b      	ldr	r3, [r3, #8]
 800d9f6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d9f8:	68fa      	ldr	r2, [r7, #12]
 800d9fa:	4b09      	ldr	r3, [pc, #36]	; (800da20 <TIM_ITRx_SetConfig+0x38>)
 800d9fc:	4013      	ands	r3, r2
 800d9fe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800da00:	683a      	ldr	r2, [r7, #0]
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	4313      	orrs	r3, r2
 800da06:	f043 0307 	orr.w	r3, r3, #7
 800da0a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	68fa      	ldr	r2, [r7, #12]
 800da10:	609a      	str	r2, [r3, #8]
}
 800da12:	bf00      	nop
 800da14:	3714      	adds	r7, #20
 800da16:	46bd      	mov	sp, r7
 800da18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1c:	4770      	bx	lr
 800da1e:	bf00      	nop
 800da20:	ffcfff8f 	.word	0xffcfff8f

0800da24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800da24:	b480      	push	{r7}
 800da26:	b087      	sub	sp, #28
 800da28:	af00      	add	r7, sp, #0
 800da2a:	60f8      	str	r0, [r7, #12]
 800da2c:	60b9      	str	r1, [r7, #8]
 800da2e:	607a      	str	r2, [r7, #4]
 800da30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	689b      	ldr	r3, [r3, #8]
 800da36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800da38:	697b      	ldr	r3, [r7, #20]
 800da3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800da3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	021a      	lsls	r2, r3, #8
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	431a      	orrs	r2, r3
 800da48:	68bb      	ldr	r3, [r7, #8]
 800da4a:	4313      	orrs	r3, r2
 800da4c:	697a      	ldr	r2, [r7, #20]
 800da4e:	4313      	orrs	r3, r2
 800da50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	697a      	ldr	r2, [r7, #20]
 800da56:	609a      	str	r2, [r3, #8]
}
 800da58:	bf00      	nop
 800da5a:	371c      	adds	r7, #28
 800da5c:	46bd      	mov	sp, r7
 800da5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da62:	4770      	bx	lr

0800da64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800da64:	b480      	push	{r7}
 800da66:	b085      	sub	sp, #20
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da74:	2b01      	cmp	r3, #1
 800da76:	d101      	bne.n	800da7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800da78:	2302      	movs	r3, #2
 800da7a:	e06d      	b.n	800db58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2201      	movs	r2, #1
 800da80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2202      	movs	r2, #2
 800da88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	685b      	ldr	r3, [r3, #4]
 800da92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	689b      	ldr	r3, [r3, #8]
 800da9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	4a30      	ldr	r2, [pc, #192]	; (800db64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800daa2:	4293      	cmp	r3, r2
 800daa4:	d004      	beq.n	800dab0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	4a2f      	ldr	r2, [pc, #188]	; (800db68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800daac:	4293      	cmp	r3, r2
 800daae:	d108      	bne.n	800dac2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800dab6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	685b      	ldr	r3, [r3, #4]
 800dabc:	68fa      	ldr	r2, [r7, #12]
 800dabe:	4313      	orrs	r3, r2
 800dac0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dac8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	68fa      	ldr	r2, [r7, #12]
 800dad0:	4313      	orrs	r3, r2
 800dad2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	68fa      	ldr	r2, [r7, #12]
 800dada:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	4a20      	ldr	r2, [pc, #128]	; (800db64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dae2:	4293      	cmp	r3, r2
 800dae4:	d022      	beq.n	800db2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800daee:	d01d      	beq.n	800db2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	4a1d      	ldr	r2, [pc, #116]	; (800db6c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800daf6:	4293      	cmp	r3, r2
 800daf8:	d018      	beq.n	800db2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	4a1c      	ldr	r2, [pc, #112]	; (800db70 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800db00:	4293      	cmp	r3, r2
 800db02:	d013      	beq.n	800db2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	4a1a      	ldr	r2, [pc, #104]	; (800db74 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800db0a:	4293      	cmp	r3, r2
 800db0c:	d00e      	beq.n	800db2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	4a15      	ldr	r2, [pc, #84]	; (800db68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800db14:	4293      	cmp	r3, r2
 800db16:	d009      	beq.n	800db2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	4a16      	ldr	r2, [pc, #88]	; (800db78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800db1e:	4293      	cmp	r3, r2
 800db20:	d004      	beq.n	800db2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	4a15      	ldr	r2, [pc, #84]	; (800db7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800db28:	4293      	cmp	r3, r2
 800db2a:	d10c      	bne.n	800db46 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800db32:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	689b      	ldr	r3, [r3, #8]
 800db38:	68ba      	ldr	r2, [r7, #8]
 800db3a:	4313      	orrs	r3, r2
 800db3c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	68ba      	ldr	r2, [r7, #8]
 800db44:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	2201      	movs	r2, #1
 800db4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2200      	movs	r2, #0
 800db52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800db56:	2300      	movs	r3, #0
}
 800db58:	4618      	mov	r0, r3
 800db5a:	3714      	adds	r7, #20
 800db5c:	46bd      	mov	sp, r7
 800db5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db62:	4770      	bx	lr
 800db64:	40010000 	.word	0x40010000
 800db68:	40010400 	.word	0x40010400
 800db6c:	40000400 	.word	0x40000400
 800db70:	40000800 	.word	0x40000800
 800db74:	40000c00 	.word	0x40000c00
 800db78:	40001800 	.word	0x40001800
 800db7c:	40014000 	.word	0x40014000

0800db80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b082      	sub	sp, #8
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d101      	bne.n	800db92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800db8e:	2301      	movs	r3, #1
 800db90:	e042      	b.n	800dc18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d106      	bne.n	800dbaa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2200      	movs	r2, #0
 800dba0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dba4:	6878      	ldr	r0, [r7, #4]
 800dba6:	f7f5 fdfd 	bl	80037a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	2224      	movs	r2, #36	; 0x24
 800dbae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	681a      	ldr	r2, [r3, #0]
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	f022 0201 	bic.w	r2, r2, #1
 800dbc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f000 f8ba 	bl	800dd3c <UART_SetConfig>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	2b01      	cmp	r3, #1
 800dbcc:	d101      	bne.n	800dbd2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800dbce:	2301      	movs	r3, #1
 800dbd0:	e022      	b.n	800dc18 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d002      	beq.n	800dbe0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800dbda:	6878      	ldr	r0, [r7, #4]
 800dbdc:	f000 fe16 	bl	800e80c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	685a      	ldr	r2, [r3, #4]
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dbee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	689a      	ldr	r2, [r3, #8]
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dbfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	681a      	ldr	r2, [r3, #0]
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	f042 0201 	orr.w	r2, r2, #1
 800dc0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dc10:	6878      	ldr	r0, [r7, #4]
 800dc12:	f000 fe9d 	bl	800e950 <UART_CheckIdleState>
 800dc16:	4603      	mov	r3, r0
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	3708      	adds	r7, #8
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bd80      	pop	{r7, pc}

0800dc20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b08a      	sub	sp, #40	; 0x28
 800dc24:	af02      	add	r7, sp, #8
 800dc26:	60f8      	str	r0, [r7, #12]
 800dc28:	60b9      	str	r1, [r7, #8]
 800dc2a:	603b      	str	r3, [r7, #0]
 800dc2c:	4613      	mov	r3, r2
 800dc2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc36:	2b20      	cmp	r3, #32
 800dc38:	d17b      	bne.n	800dd32 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d002      	beq.n	800dc46 <HAL_UART_Transmit+0x26>
 800dc40:	88fb      	ldrh	r3, [r7, #6]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d101      	bne.n	800dc4a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800dc46:	2301      	movs	r3, #1
 800dc48:	e074      	b.n	800dd34 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	2221      	movs	r2, #33	; 0x21
 800dc56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dc5a:	f7f6 f9f7 	bl	800404c <HAL_GetTick>
 800dc5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	88fa      	ldrh	r2, [r7, #6]
 800dc64:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	88fa      	ldrh	r2, [r7, #6]
 800dc6c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	689b      	ldr	r3, [r3, #8]
 800dc74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc78:	d108      	bne.n	800dc8c <HAL_UART_Transmit+0x6c>
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	691b      	ldr	r3, [r3, #16]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d104      	bne.n	800dc8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800dc82:	2300      	movs	r3, #0
 800dc84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	61bb      	str	r3, [r7, #24]
 800dc8a:	e003      	b.n	800dc94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dc90:	2300      	movs	r3, #0
 800dc92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800dc94:	e030      	b.n	800dcf8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	9300      	str	r3, [sp, #0]
 800dc9a:	697b      	ldr	r3, [r7, #20]
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	2180      	movs	r1, #128	; 0x80
 800dca0:	68f8      	ldr	r0, [r7, #12]
 800dca2:	f000 feff 	bl	800eaa4 <UART_WaitOnFlagUntilTimeout>
 800dca6:	4603      	mov	r3, r0
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d005      	beq.n	800dcb8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	2220      	movs	r2, #32
 800dcb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800dcb4:	2303      	movs	r3, #3
 800dcb6:	e03d      	b.n	800dd34 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800dcb8:	69fb      	ldr	r3, [r7, #28]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d10b      	bne.n	800dcd6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800dcbe:	69bb      	ldr	r3, [r7, #24]
 800dcc0:	881b      	ldrh	r3, [r3, #0]
 800dcc2:	461a      	mov	r2, r3
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dccc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800dcce:	69bb      	ldr	r3, [r7, #24]
 800dcd0:	3302      	adds	r3, #2
 800dcd2:	61bb      	str	r3, [r7, #24]
 800dcd4:	e007      	b.n	800dce6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800dcd6:	69fb      	ldr	r3, [r7, #28]
 800dcd8:	781a      	ldrb	r2, [r3, #0]
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800dce0:	69fb      	ldr	r3, [r7, #28]
 800dce2:	3301      	adds	r3, #1
 800dce4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dcec:	b29b      	uxth	r3, r3
 800dcee:	3b01      	subs	r3, #1
 800dcf0:	b29a      	uxth	r2, r3
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dcfe:	b29b      	uxth	r3, r3
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d1c8      	bne.n	800dc96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	9300      	str	r3, [sp, #0]
 800dd08:	697b      	ldr	r3, [r7, #20]
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	2140      	movs	r1, #64	; 0x40
 800dd0e:	68f8      	ldr	r0, [r7, #12]
 800dd10:	f000 fec8 	bl	800eaa4 <UART_WaitOnFlagUntilTimeout>
 800dd14:	4603      	mov	r3, r0
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d005      	beq.n	800dd26 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	2220      	movs	r2, #32
 800dd1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800dd22:	2303      	movs	r3, #3
 800dd24:	e006      	b.n	800dd34 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	2220      	movs	r2, #32
 800dd2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800dd2e:	2300      	movs	r3, #0
 800dd30:	e000      	b.n	800dd34 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800dd32:	2302      	movs	r3, #2
  }
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	3720      	adds	r7, #32
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}

0800dd3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dd3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dd40:	b092      	sub	sp, #72	; 0x48
 800dd42:	af00      	add	r7, sp, #0
 800dd44:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dd46:	2300      	movs	r3, #0
 800dd48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	689a      	ldr	r2, [r3, #8]
 800dd50:	697b      	ldr	r3, [r7, #20]
 800dd52:	691b      	ldr	r3, [r3, #16]
 800dd54:	431a      	orrs	r2, r3
 800dd56:	697b      	ldr	r3, [r7, #20]
 800dd58:	695b      	ldr	r3, [r3, #20]
 800dd5a:	431a      	orrs	r2, r3
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	69db      	ldr	r3, [r3, #28]
 800dd60:	4313      	orrs	r3, r2
 800dd62:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dd64:	697b      	ldr	r3, [r7, #20]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	681a      	ldr	r2, [r3, #0]
 800dd6a:	4bbe      	ldr	r3, [pc, #760]	; (800e064 <UART_SetConfig+0x328>)
 800dd6c:	4013      	ands	r3, r2
 800dd6e:	697a      	ldr	r2, [r7, #20]
 800dd70:	6812      	ldr	r2, [r2, #0]
 800dd72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dd74:	430b      	orrs	r3, r1
 800dd76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dd78:	697b      	ldr	r3, [r7, #20]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	685b      	ldr	r3, [r3, #4]
 800dd7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	68da      	ldr	r2, [r3, #12]
 800dd86:	697b      	ldr	r3, [r7, #20]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	430a      	orrs	r2, r1
 800dd8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dd8e:	697b      	ldr	r3, [r7, #20]
 800dd90:	699b      	ldr	r3, [r3, #24]
 800dd92:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dd94:	697b      	ldr	r3, [r7, #20]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	4ab3      	ldr	r2, [pc, #716]	; (800e068 <UART_SetConfig+0x32c>)
 800dd9a:	4293      	cmp	r3, r2
 800dd9c:	d004      	beq.n	800dda8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800dd9e:	697b      	ldr	r3, [r7, #20]
 800dda0:	6a1b      	ldr	r3, [r3, #32]
 800dda2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dda4:	4313      	orrs	r3, r2
 800dda6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dda8:	697b      	ldr	r3, [r7, #20]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	689a      	ldr	r2, [r3, #8]
 800ddae:	4baf      	ldr	r3, [pc, #700]	; (800e06c <UART_SetConfig+0x330>)
 800ddb0:	4013      	ands	r3, r2
 800ddb2:	697a      	ldr	r2, [r7, #20]
 800ddb4:	6812      	ldr	r2, [r2, #0]
 800ddb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ddb8:	430b      	orrs	r3, r1
 800ddba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddc2:	f023 010f 	bic.w	r1, r3, #15
 800ddc6:	697b      	ldr	r3, [r7, #20]
 800ddc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	430a      	orrs	r2, r1
 800ddd0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	4aa6      	ldr	r2, [pc, #664]	; (800e070 <UART_SetConfig+0x334>)
 800ddd8:	4293      	cmp	r3, r2
 800ddda:	d177      	bne.n	800decc <UART_SetConfig+0x190>
 800dddc:	4ba5      	ldr	r3, [pc, #660]	; (800e074 <UART_SetConfig+0x338>)
 800ddde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dde0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dde4:	2b28      	cmp	r3, #40	; 0x28
 800dde6:	d86d      	bhi.n	800dec4 <UART_SetConfig+0x188>
 800dde8:	a201      	add	r2, pc, #4	; (adr r2, 800ddf0 <UART_SetConfig+0xb4>)
 800ddea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddee:	bf00      	nop
 800ddf0:	0800de95 	.word	0x0800de95
 800ddf4:	0800dec5 	.word	0x0800dec5
 800ddf8:	0800dec5 	.word	0x0800dec5
 800ddfc:	0800dec5 	.word	0x0800dec5
 800de00:	0800dec5 	.word	0x0800dec5
 800de04:	0800dec5 	.word	0x0800dec5
 800de08:	0800dec5 	.word	0x0800dec5
 800de0c:	0800dec5 	.word	0x0800dec5
 800de10:	0800de9d 	.word	0x0800de9d
 800de14:	0800dec5 	.word	0x0800dec5
 800de18:	0800dec5 	.word	0x0800dec5
 800de1c:	0800dec5 	.word	0x0800dec5
 800de20:	0800dec5 	.word	0x0800dec5
 800de24:	0800dec5 	.word	0x0800dec5
 800de28:	0800dec5 	.word	0x0800dec5
 800de2c:	0800dec5 	.word	0x0800dec5
 800de30:	0800dea5 	.word	0x0800dea5
 800de34:	0800dec5 	.word	0x0800dec5
 800de38:	0800dec5 	.word	0x0800dec5
 800de3c:	0800dec5 	.word	0x0800dec5
 800de40:	0800dec5 	.word	0x0800dec5
 800de44:	0800dec5 	.word	0x0800dec5
 800de48:	0800dec5 	.word	0x0800dec5
 800de4c:	0800dec5 	.word	0x0800dec5
 800de50:	0800dead 	.word	0x0800dead
 800de54:	0800dec5 	.word	0x0800dec5
 800de58:	0800dec5 	.word	0x0800dec5
 800de5c:	0800dec5 	.word	0x0800dec5
 800de60:	0800dec5 	.word	0x0800dec5
 800de64:	0800dec5 	.word	0x0800dec5
 800de68:	0800dec5 	.word	0x0800dec5
 800de6c:	0800dec5 	.word	0x0800dec5
 800de70:	0800deb5 	.word	0x0800deb5
 800de74:	0800dec5 	.word	0x0800dec5
 800de78:	0800dec5 	.word	0x0800dec5
 800de7c:	0800dec5 	.word	0x0800dec5
 800de80:	0800dec5 	.word	0x0800dec5
 800de84:	0800dec5 	.word	0x0800dec5
 800de88:	0800dec5 	.word	0x0800dec5
 800de8c:	0800dec5 	.word	0x0800dec5
 800de90:	0800debd 	.word	0x0800debd
 800de94:	2301      	movs	r3, #1
 800de96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de9a:	e222      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800de9c:	2304      	movs	r3, #4
 800de9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dea2:	e21e      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800dea4:	2308      	movs	r3, #8
 800dea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deaa:	e21a      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800deac:	2310      	movs	r3, #16
 800deae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deb2:	e216      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800deb4:	2320      	movs	r3, #32
 800deb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deba:	e212      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800debc:	2340      	movs	r3, #64	; 0x40
 800debe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dec2:	e20e      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800dec4:	2380      	movs	r3, #128	; 0x80
 800dec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deca:	e20a      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800decc:	697b      	ldr	r3, [r7, #20]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	4a69      	ldr	r2, [pc, #420]	; (800e078 <UART_SetConfig+0x33c>)
 800ded2:	4293      	cmp	r3, r2
 800ded4:	d130      	bne.n	800df38 <UART_SetConfig+0x1fc>
 800ded6:	4b67      	ldr	r3, [pc, #412]	; (800e074 <UART_SetConfig+0x338>)
 800ded8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800deda:	f003 0307 	and.w	r3, r3, #7
 800dede:	2b05      	cmp	r3, #5
 800dee0:	d826      	bhi.n	800df30 <UART_SetConfig+0x1f4>
 800dee2:	a201      	add	r2, pc, #4	; (adr r2, 800dee8 <UART_SetConfig+0x1ac>)
 800dee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dee8:	0800df01 	.word	0x0800df01
 800deec:	0800df09 	.word	0x0800df09
 800def0:	0800df11 	.word	0x0800df11
 800def4:	0800df19 	.word	0x0800df19
 800def8:	0800df21 	.word	0x0800df21
 800defc:	0800df29 	.word	0x0800df29
 800df00:	2300      	movs	r3, #0
 800df02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df06:	e1ec      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800df08:	2304      	movs	r3, #4
 800df0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df0e:	e1e8      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800df10:	2308      	movs	r3, #8
 800df12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df16:	e1e4      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800df18:	2310      	movs	r3, #16
 800df1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df1e:	e1e0      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800df20:	2320      	movs	r3, #32
 800df22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df26:	e1dc      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800df28:	2340      	movs	r3, #64	; 0x40
 800df2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df2e:	e1d8      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800df30:	2380      	movs	r3, #128	; 0x80
 800df32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df36:	e1d4      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800df38:	697b      	ldr	r3, [r7, #20]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	4a4f      	ldr	r2, [pc, #316]	; (800e07c <UART_SetConfig+0x340>)
 800df3e:	4293      	cmp	r3, r2
 800df40:	d130      	bne.n	800dfa4 <UART_SetConfig+0x268>
 800df42:	4b4c      	ldr	r3, [pc, #304]	; (800e074 <UART_SetConfig+0x338>)
 800df44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df46:	f003 0307 	and.w	r3, r3, #7
 800df4a:	2b05      	cmp	r3, #5
 800df4c:	d826      	bhi.n	800df9c <UART_SetConfig+0x260>
 800df4e:	a201      	add	r2, pc, #4	; (adr r2, 800df54 <UART_SetConfig+0x218>)
 800df50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df54:	0800df6d 	.word	0x0800df6d
 800df58:	0800df75 	.word	0x0800df75
 800df5c:	0800df7d 	.word	0x0800df7d
 800df60:	0800df85 	.word	0x0800df85
 800df64:	0800df8d 	.word	0x0800df8d
 800df68:	0800df95 	.word	0x0800df95
 800df6c:	2300      	movs	r3, #0
 800df6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df72:	e1b6      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800df74:	2304      	movs	r3, #4
 800df76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df7a:	e1b2      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800df7c:	2308      	movs	r3, #8
 800df7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df82:	e1ae      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800df84:	2310      	movs	r3, #16
 800df86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df8a:	e1aa      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800df8c:	2320      	movs	r3, #32
 800df8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df92:	e1a6      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800df94:	2340      	movs	r3, #64	; 0x40
 800df96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df9a:	e1a2      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800df9c:	2380      	movs	r3, #128	; 0x80
 800df9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfa2:	e19e      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800dfa4:	697b      	ldr	r3, [r7, #20]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	4a35      	ldr	r2, [pc, #212]	; (800e080 <UART_SetConfig+0x344>)
 800dfaa:	4293      	cmp	r3, r2
 800dfac:	d130      	bne.n	800e010 <UART_SetConfig+0x2d4>
 800dfae:	4b31      	ldr	r3, [pc, #196]	; (800e074 <UART_SetConfig+0x338>)
 800dfb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfb2:	f003 0307 	and.w	r3, r3, #7
 800dfb6:	2b05      	cmp	r3, #5
 800dfb8:	d826      	bhi.n	800e008 <UART_SetConfig+0x2cc>
 800dfba:	a201      	add	r2, pc, #4	; (adr r2, 800dfc0 <UART_SetConfig+0x284>)
 800dfbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfc0:	0800dfd9 	.word	0x0800dfd9
 800dfc4:	0800dfe1 	.word	0x0800dfe1
 800dfc8:	0800dfe9 	.word	0x0800dfe9
 800dfcc:	0800dff1 	.word	0x0800dff1
 800dfd0:	0800dff9 	.word	0x0800dff9
 800dfd4:	0800e001 	.word	0x0800e001
 800dfd8:	2300      	movs	r3, #0
 800dfda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfde:	e180      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800dfe0:	2304      	movs	r3, #4
 800dfe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfe6:	e17c      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800dfe8:	2308      	movs	r3, #8
 800dfea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfee:	e178      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800dff0:	2310      	movs	r3, #16
 800dff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dff6:	e174      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800dff8:	2320      	movs	r3, #32
 800dffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dffe:	e170      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800e000:	2340      	movs	r3, #64	; 0x40
 800e002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e006:	e16c      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800e008:	2380      	movs	r3, #128	; 0x80
 800e00a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e00e:	e168      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800e010:	697b      	ldr	r3, [r7, #20]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	4a1b      	ldr	r2, [pc, #108]	; (800e084 <UART_SetConfig+0x348>)
 800e016:	4293      	cmp	r3, r2
 800e018:	d142      	bne.n	800e0a0 <UART_SetConfig+0x364>
 800e01a:	4b16      	ldr	r3, [pc, #88]	; (800e074 <UART_SetConfig+0x338>)
 800e01c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e01e:	f003 0307 	and.w	r3, r3, #7
 800e022:	2b05      	cmp	r3, #5
 800e024:	d838      	bhi.n	800e098 <UART_SetConfig+0x35c>
 800e026:	a201      	add	r2, pc, #4	; (adr r2, 800e02c <UART_SetConfig+0x2f0>)
 800e028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e02c:	0800e045 	.word	0x0800e045
 800e030:	0800e04d 	.word	0x0800e04d
 800e034:	0800e055 	.word	0x0800e055
 800e038:	0800e05d 	.word	0x0800e05d
 800e03c:	0800e089 	.word	0x0800e089
 800e040:	0800e091 	.word	0x0800e091
 800e044:	2300      	movs	r3, #0
 800e046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e04a:	e14a      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800e04c:	2304      	movs	r3, #4
 800e04e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e052:	e146      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800e054:	2308      	movs	r3, #8
 800e056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e05a:	e142      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800e05c:	2310      	movs	r3, #16
 800e05e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e062:	e13e      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800e064:	cfff69f3 	.word	0xcfff69f3
 800e068:	58000c00 	.word	0x58000c00
 800e06c:	11fff4ff 	.word	0x11fff4ff
 800e070:	40011000 	.word	0x40011000
 800e074:	58024400 	.word	0x58024400
 800e078:	40004400 	.word	0x40004400
 800e07c:	40004800 	.word	0x40004800
 800e080:	40004c00 	.word	0x40004c00
 800e084:	40005000 	.word	0x40005000
 800e088:	2320      	movs	r3, #32
 800e08a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e08e:	e128      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800e090:	2340      	movs	r3, #64	; 0x40
 800e092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e096:	e124      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800e098:	2380      	movs	r3, #128	; 0x80
 800e09a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e09e:	e120      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800e0a0:	697b      	ldr	r3, [r7, #20]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	4acb      	ldr	r2, [pc, #812]	; (800e3d4 <UART_SetConfig+0x698>)
 800e0a6:	4293      	cmp	r3, r2
 800e0a8:	d176      	bne.n	800e198 <UART_SetConfig+0x45c>
 800e0aa:	4bcb      	ldr	r3, [pc, #812]	; (800e3d8 <UART_SetConfig+0x69c>)
 800e0ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e0b2:	2b28      	cmp	r3, #40	; 0x28
 800e0b4:	d86c      	bhi.n	800e190 <UART_SetConfig+0x454>
 800e0b6:	a201      	add	r2, pc, #4	; (adr r2, 800e0bc <UART_SetConfig+0x380>)
 800e0b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0bc:	0800e161 	.word	0x0800e161
 800e0c0:	0800e191 	.word	0x0800e191
 800e0c4:	0800e191 	.word	0x0800e191
 800e0c8:	0800e191 	.word	0x0800e191
 800e0cc:	0800e191 	.word	0x0800e191
 800e0d0:	0800e191 	.word	0x0800e191
 800e0d4:	0800e191 	.word	0x0800e191
 800e0d8:	0800e191 	.word	0x0800e191
 800e0dc:	0800e169 	.word	0x0800e169
 800e0e0:	0800e191 	.word	0x0800e191
 800e0e4:	0800e191 	.word	0x0800e191
 800e0e8:	0800e191 	.word	0x0800e191
 800e0ec:	0800e191 	.word	0x0800e191
 800e0f0:	0800e191 	.word	0x0800e191
 800e0f4:	0800e191 	.word	0x0800e191
 800e0f8:	0800e191 	.word	0x0800e191
 800e0fc:	0800e171 	.word	0x0800e171
 800e100:	0800e191 	.word	0x0800e191
 800e104:	0800e191 	.word	0x0800e191
 800e108:	0800e191 	.word	0x0800e191
 800e10c:	0800e191 	.word	0x0800e191
 800e110:	0800e191 	.word	0x0800e191
 800e114:	0800e191 	.word	0x0800e191
 800e118:	0800e191 	.word	0x0800e191
 800e11c:	0800e179 	.word	0x0800e179
 800e120:	0800e191 	.word	0x0800e191
 800e124:	0800e191 	.word	0x0800e191
 800e128:	0800e191 	.word	0x0800e191
 800e12c:	0800e191 	.word	0x0800e191
 800e130:	0800e191 	.word	0x0800e191
 800e134:	0800e191 	.word	0x0800e191
 800e138:	0800e191 	.word	0x0800e191
 800e13c:	0800e181 	.word	0x0800e181
 800e140:	0800e191 	.word	0x0800e191
 800e144:	0800e191 	.word	0x0800e191
 800e148:	0800e191 	.word	0x0800e191
 800e14c:	0800e191 	.word	0x0800e191
 800e150:	0800e191 	.word	0x0800e191
 800e154:	0800e191 	.word	0x0800e191
 800e158:	0800e191 	.word	0x0800e191
 800e15c:	0800e189 	.word	0x0800e189
 800e160:	2301      	movs	r3, #1
 800e162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e166:	e0bc      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800e168:	2304      	movs	r3, #4
 800e16a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e16e:	e0b8      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800e170:	2308      	movs	r3, #8
 800e172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e176:	e0b4      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800e178:	2310      	movs	r3, #16
 800e17a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e17e:	e0b0      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800e180:	2320      	movs	r3, #32
 800e182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e186:	e0ac      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800e188:	2340      	movs	r3, #64	; 0x40
 800e18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e18e:	e0a8      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800e190:	2380      	movs	r3, #128	; 0x80
 800e192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e196:	e0a4      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	4a8f      	ldr	r2, [pc, #572]	; (800e3dc <UART_SetConfig+0x6a0>)
 800e19e:	4293      	cmp	r3, r2
 800e1a0:	d130      	bne.n	800e204 <UART_SetConfig+0x4c8>
 800e1a2:	4b8d      	ldr	r3, [pc, #564]	; (800e3d8 <UART_SetConfig+0x69c>)
 800e1a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1a6:	f003 0307 	and.w	r3, r3, #7
 800e1aa:	2b05      	cmp	r3, #5
 800e1ac:	d826      	bhi.n	800e1fc <UART_SetConfig+0x4c0>
 800e1ae:	a201      	add	r2, pc, #4	; (adr r2, 800e1b4 <UART_SetConfig+0x478>)
 800e1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1b4:	0800e1cd 	.word	0x0800e1cd
 800e1b8:	0800e1d5 	.word	0x0800e1d5
 800e1bc:	0800e1dd 	.word	0x0800e1dd
 800e1c0:	0800e1e5 	.word	0x0800e1e5
 800e1c4:	0800e1ed 	.word	0x0800e1ed
 800e1c8:	0800e1f5 	.word	0x0800e1f5
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1d2:	e086      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800e1d4:	2304      	movs	r3, #4
 800e1d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1da:	e082      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800e1dc:	2308      	movs	r3, #8
 800e1de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1e2:	e07e      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800e1e4:	2310      	movs	r3, #16
 800e1e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ea:	e07a      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800e1ec:	2320      	movs	r3, #32
 800e1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1f2:	e076      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800e1f4:	2340      	movs	r3, #64	; 0x40
 800e1f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1fa:	e072      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800e1fc:	2380      	movs	r3, #128	; 0x80
 800e1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e202:	e06e      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800e204:	697b      	ldr	r3, [r7, #20]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	4a75      	ldr	r2, [pc, #468]	; (800e3e0 <UART_SetConfig+0x6a4>)
 800e20a:	4293      	cmp	r3, r2
 800e20c:	d130      	bne.n	800e270 <UART_SetConfig+0x534>
 800e20e:	4b72      	ldr	r3, [pc, #456]	; (800e3d8 <UART_SetConfig+0x69c>)
 800e210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e212:	f003 0307 	and.w	r3, r3, #7
 800e216:	2b05      	cmp	r3, #5
 800e218:	d826      	bhi.n	800e268 <UART_SetConfig+0x52c>
 800e21a:	a201      	add	r2, pc, #4	; (adr r2, 800e220 <UART_SetConfig+0x4e4>)
 800e21c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e220:	0800e239 	.word	0x0800e239
 800e224:	0800e241 	.word	0x0800e241
 800e228:	0800e249 	.word	0x0800e249
 800e22c:	0800e251 	.word	0x0800e251
 800e230:	0800e259 	.word	0x0800e259
 800e234:	0800e261 	.word	0x0800e261
 800e238:	2300      	movs	r3, #0
 800e23a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e23e:	e050      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800e240:	2304      	movs	r3, #4
 800e242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e246:	e04c      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800e248:	2308      	movs	r3, #8
 800e24a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e24e:	e048      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800e250:	2310      	movs	r3, #16
 800e252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e256:	e044      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800e258:	2320      	movs	r3, #32
 800e25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e25e:	e040      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800e260:	2340      	movs	r3, #64	; 0x40
 800e262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e266:	e03c      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800e268:	2380      	movs	r3, #128	; 0x80
 800e26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e26e:	e038      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800e270:	697b      	ldr	r3, [r7, #20]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	4a5b      	ldr	r2, [pc, #364]	; (800e3e4 <UART_SetConfig+0x6a8>)
 800e276:	4293      	cmp	r3, r2
 800e278:	d130      	bne.n	800e2dc <UART_SetConfig+0x5a0>
 800e27a:	4b57      	ldr	r3, [pc, #348]	; (800e3d8 <UART_SetConfig+0x69c>)
 800e27c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e27e:	f003 0307 	and.w	r3, r3, #7
 800e282:	2b05      	cmp	r3, #5
 800e284:	d826      	bhi.n	800e2d4 <UART_SetConfig+0x598>
 800e286:	a201      	add	r2, pc, #4	; (adr r2, 800e28c <UART_SetConfig+0x550>)
 800e288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e28c:	0800e2a5 	.word	0x0800e2a5
 800e290:	0800e2ad 	.word	0x0800e2ad
 800e294:	0800e2b5 	.word	0x0800e2b5
 800e298:	0800e2bd 	.word	0x0800e2bd
 800e29c:	0800e2c5 	.word	0x0800e2c5
 800e2a0:	0800e2cd 	.word	0x0800e2cd
 800e2a4:	2302      	movs	r3, #2
 800e2a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2aa:	e01a      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800e2ac:	2304      	movs	r3, #4
 800e2ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2b2:	e016      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800e2b4:	2308      	movs	r3, #8
 800e2b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ba:	e012      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800e2bc:	2310      	movs	r3, #16
 800e2be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2c2:	e00e      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800e2c4:	2320      	movs	r3, #32
 800e2c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ca:	e00a      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800e2cc:	2340      	movs	r3, #64	; 0x40
 800e2ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2d2:	e006      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800e2d4:	2380      	movs	r3, #128	; 0x80
 800e2d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2da:	e002      	b.n	800e2e2 <UART_SetConfig+0x5a6>
 800e2dc:	2380      	movs	r3, #128	; 0x80
 800e2de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e2e2:	697b      	ldr	r3, [r7, #20]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	4a3f      	ldr	r2, [pc, #252]	; (800e3e4 <UART_SetConfig+0x6a8>)
 800e2e8:	4293      	cmp	r3, r2
 800e2ea:	f040 80f8 	bne.w	800e4de <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e2ee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e2f2:	2b20      	cmp	r3, #32
 800e2f4:	dc46      	bgt.n	800e384 <UART_SetConfig+0x648>
 800e2f6:	2b02      	cmp	r3, #2
 800e2f8:	f2c0 8082 	blt.w	800e400 <UART_SetConfig+0x6c4>
 800e2fc:	3b02      	subs	r3, #2
 800e2fe:	2b1e      	cmp	r3, #30
 800e300:	d87e      	bhi.n	800e400 <UART_SetConfig+0x6c4>
 800e302:	a201      	add	r2, pc, #4	; (adr r2, 800e308 <UART_SetConfig+0x5cc>)
 800e304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e308:	0800e38b 	.word	0x0800e38b
 800e30c:	0800e401 	.word	0x0800e401
 800e310:	0800e393 	.word	0x0800e393
 800e314:	0800e401 	.word	0x0800e401
 800e318:	0800e401 	.word	0x0800e401
 800e31c:	0800e401 	.word	0x0800e401
 800e320:	0800e3a3 	.word	0x0800e3a3
 800e324:	0800e401 	.word	0x0800e401
 800e328:	0800e401 	.word	0x0800e401
 800e32c:	0800e401 	.word	0x0800e401
 800e330:	0800e401 	.word	0x0800e401
 800e334:	0800e401 	.word	0x0800e401
 800e338:	0800e401 	.word	0x0800e401
 800e33c:	0800e401 	.word	0x0800e401
 800e340:	0800e3b3 	.word	0x0800e3b3
 800e344:	0800e401 	.word	0x0800e401
 800e348:	0800e401 	.word	0x0800e401
 800e34c:	0800e401 	.word	0x0800e401
 800e350:	0800e401 	.word	0x0800e401
 800e354:	0800e401 	.word	0x0800e401
 800e358:	0800e401 	.word	0x0800e401
 800e35c:	0800e401 	.word	0x0800e401
 800e360:	0800e401 	.word	0x0800e401
 800e364:	0800e401 	.word	0x0800e401
 800e368:	0800e401 	.word	0x0800e401
 800e36c:	0800e401 	.word	0x0800e401
 800e370:	0800e401 	.word	0x0800e401
 800e374:	0800e401 	.word	0x0800e401
 800e378:	0800e401 	.word	0x0800e401
 800e37c:	0800e401 	.word	0x0800e401
 800e380:	0800e3f3 	.word	0x0800e3f3
 800e384:	2b40      	cmp	r3, #64	; 0x40
 800e386:	d037      	beq.n	800e3f8 <UART_SetConfig+0x6bc>
 800e388:	e03a      	b.n	800e400 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e38a:	f7fe fb19 	bl	800c9c0 <HAL_RCCEx_GetD3PCLK1Freq>
 800e38e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e390:	e03c      	b.n	800e40c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e396:	4618      	mov	r0, r3
 800e398:	f7fe fb28 	bl	800c9ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e39e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3a0:	e034      	b.n	800e40c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e3a2:	f107 0318 	add.w	r3, r7, #24
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f7fe fc74 	bl	800cc94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e3ac:	69fb      	ldr	r3, [r7, #28]
 800e3ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3b0:	e02c      	b.n	800e40c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e3b2:	4b09      	ldr	r3, [pc, #36]	; (800e3d8 <UART_SetConfig+0x69c>)
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	f003 0320 	and.w	r3, r3, #32
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d016      	beq.n	800e3ec <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e3be:	4b06      	ldr	r3, [pc, #24]	; (800e3d8 <UART_SetConfig+0x69c>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	08db      	lsrs	r3, r3, #3
 800e3c4:	f003 0303 	and.w	r3, r3, #3
 800e3c8:	4a07      	ldr	r2, [pc, #28]	; (800e3e8 <UART_SetConfig+0x6ac>)
 800e3ca:	fa22 f303 	lsr.w	r3, r2, r3
 800e3ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e3d0:	e01c      	b.n	800e40c <UART_SetConfig+0x6d0>
 800e3d2:	bf00      	nop
 800e3d4:	40011400 	.word	0x40011400
 800e3d8:	58024400 	.word	0x58024400
 800e3dc:	40007800 	.word	0x40007800
 800e3e0:	40007c00 	.word	0x40007c00
 800e3e4:	58000c00 	.word	0x58000c00
 800e3e8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e3ec:	4b9d      	ldr	r3, [pc, #628]	; (800e664 <UART_SetConfig+0x928>)
 800e3ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3f0:	e00c      	b.n	800e40c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e3f2:	4b9d      	ldr	r3, [pc, #628]	; (800e668 <UART_SetConfig+0x92c>)
 800e3f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3f6:	e009      	b.n	800e40c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e3f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e3fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3fe:	e005      	b.n	800e40c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e400:	2300      	movs	r3, #0
 800e402:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e404:	2301      	movs	r3, #1
 800e406:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e40a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e40c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e40e:	2b00      	cmp	r3, #0
 800e410:	f000 81de 	beq.w	800e7d0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e414:	697b      	ldr	r3, [r7, #20]
 800e416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e418:	4a94      	ldr	r2, [pc, #592]	; (800e66c <UART_SetConfig+0x930>)
 800e41a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e41e:	461a      	mov	r2, r3
 800e420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e422:	fbb3 f3f2 	udiv	r3, r3, r2
 800e426:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e428:	697b      	ldr	r3, [r7, #20]
 800e42a:	685a      	ldr	r2, [r3, #4]
 800e42c:	4613      	mov	r3, r2
 800e42e:	005b      	lsls	r3, r3, #1
 800e430:	4413      	add	r3, r2
 800e432:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e434:	429a      	cmp	r2, r3
 800e436:	d305      	bcc.n	800e444 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e438:	697b      	ldr	r3, [r7, #20]
 800e43a:	685b      	ldr	r3, [r3, #4]
 800e43c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e43e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e440:	429a      	cmp	r2, r3
 800e442:	d903      	bls.n	800e44c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e444:	2301      	movs	r3, #1
 800e446:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e44a:	e1c1      	b.n	800e7d0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e44c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e44e:	2200      	movs	r2, #0
 800e450:	60bb      	str	r3, [r7, #8]
 800e452:	60fa      	str	r2, [r7, #12]
 800e454:	697b      	ldr	r3, [r7, #20]
 800e456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e458:	4a84      	ldr	r2, [pc, #528]	; (800e66c <UART_SetConfig+0x930>)
 800e45a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e45e:	b29b      	uxth	r3, r3
 800e460:	2200      	movs	r2, #0
 800e462:	603b      	str	r3, [r7, #0]
 800e464:	607a      	str	r2, [r7, #4]
 800e466:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e46a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e46e:	f7f3 fd47 	bl	8001f00 <__aeabi_uldivmod>
 800e472:	4602      	mov	r2, r0
 800e474:	460b      	mov	r3, r1
 800e476:	4610      	mov	r0, r2
 800e478:	4619      	mov	r1, r3
 800e47a:	f04f 0200 	mov.w	r2, #0
 800e47e:	f04f 0300 	mov.w	r3, #0
 800e482:	020b      	lsls	r3, r1, #8
 800e484:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e488:	0202      	lsls	r2, r0, #8
 800e48a:	6979      	ldr	r1, [r7, #20]
 800e48c:	6849      	ldr	r1, [r1, #4]
 800e48e:	0849      	lsrs	r1, r1, #1
 800e490:	2000      	movs	r0, #0
 800e492:	460c      	mov	r4, r1
 800e494:	4605      	mov	r5, r0
 800e496:	eb12 0804 	adds.w	r8, r2, r4
 800e49a:	eb43 0905 	adc.w	r9, r3, r5
 800e49e:	697b      	ldr	r3, [r7, #20]
 800e4a0:	685b      	ldr	r3, [r3, #4]
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	469a      	mov	sl, r3
 800e4a6:	4693      	mov	fp, r2
 800e4a8:	4652      	mov	r2, sl
 800e4aa:	465b      	mov	r3, fp
 800e4ac:	4640      	mov	r0, r8
 800e4ae:	4649      	mov	r1, r9
 800e4b0:	f7f3 fd26 	bl	8001f00 <__aeabi_uldivmod>
 800e4b4:	4602      	mov	r2, r0
 800e4b6:	460b      	mov	r3, r1
 800e4b8:	4613      	mov	r3, r2
 800e4ba:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e4c2:	d308      	bcc.n	800e4d6 <UART_SetConfig+0x79a>
 800e4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e4ca:	d204      	bcs.n	800e4d6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e4cc:	697b      	ldr	r3, [r7, #20]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e4d2:	60da      	str	r2, [r3, #12]
 800e4d4:	e17c      	b.n	800e7d0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e4d6:	2301      	movs	r3, #1
 800e4d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e4dc:	e178      	b.n	800e7d0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e4de:	697b      	ldr	r3, [r7, #20]
 800e4e0:	69db      	ldr	r3, [r3, #28]
 800e4e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e4e6:	f040 80c5 	bne.w	800e674 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e4ea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e4ee:	2b20      	cmp	r3, #32
 800e4f0:	dc48      	bgt.n	800e584 <UART_SetConfig+0x848>
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	db7b      	blt.n	800e5ee <UART_SetConfig+0x8b2>
 800e4f6:	2b20      	cmp	r3, #32
 800e4f8:	d879      	bhi.n	800e5ee <UART_SetConfig+0x8b2>
 800e4fa:	a201      	add	r2, pc, #4	; (adr r2, 800e500 <UART_SetConfig+0x7c4>)
 800e4fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e500:	0800e58b 	.word	0x0800e58b
 800e504:	0800e593 	.word	0x0800e593
 800e508:	0800e5ef 	.word	0x0800e5ef
 800e50c:	0800e5ef 	.word	0x0800e5ef
 800e510:	0800e59b 	.word	0x0800e59b
 800e514:	0800e5ef 	.word	0x0800e5ef
 800e518:	0800e5ef 	.word	0x0800e5ef
 800e51c:	0800e5ef 	.word	0x0800e5ef
 800e520:	0800e5ab 	.word	0x0800e5ab
 800e524:	0800e5ef 	.word	0x0800e5ef
 800e528:	0800e5ef 	.word	0x0800e5ef
 800e52c:	0800e5ef 	.word	0x0800e5ef
 800e530:	0800e5ef 	.word	0x0800e5ef
 800e534:	0800e5ef 	.word	0x0800e5ef
 800e538:	0800e5ef 	.word	0x0800e5ef
 800e53c:	0800e5ef 	.word	0x0800e5ef
 800e540:	0800e5bb 	.word	0x0800e5bb
 800e544:	0800e5ef 	.word	0x0800e5ef
 800e548:	0800e5ef 	.word	0x0800e5ef
 800e54c:	0800e5ef 	.word	0x0800e5ef
 800e550:	0800e5ef 	.word	0x0800e5ef
 800e554:	0800e5ef 	.word	0x0800e5ef
 800e558:	0800e5ef 	.word	0x0800e5ef
 800e55c:	0800e5ef 	.word	0x0800e5ef
 800e560:	0800e5ef 	.word	0x0800e5ef
 800e564:	0800e5ef 	.word	0x0800e5ef
 800e568:	0800e5ef 	.word	0x0800e5ef
 800e56c:	0800e5ef 	.word	0x0800e5ef
 800e570:	0800e5ef 	.word	0x0800e5ef
 800e574:	0800e5ef 	.word	0x0800e5ef
 800e578:	0800e5ef 	.word	0x0800e5ef
 800e57c:	0800e5ef 	.word	0x0800e5ef
 800e580:	0800e5e1 	.word	0x0800e5e1
 800e584:	2b40      	cmp	r3, #64	; 0x40
 800e586:	d02e      	beq.n	800e5e6 <UART_SetConfig+0x8aa>
 800e588:	e031      	b.n	800e5ee <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e58a:	f7fc fa47 	bl	800aa1c <HAL_RCC_GetPCLK1Freq>
 800e58e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e590:	e033      	b.n	800e5fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e592:	f7fc fa59 	bl	800aa48 <HAL_RCC_GetPCLK2Freq>
 800e596:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e598:	e02f      	b.n	800e5fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e59a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e59e:	4618      	mov	r0, r3
 800e5a0:	f7fe fa24 	bl	800c9ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5a8:	e027      	b.n	800e5fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e5aa:	f107 0318 	add.w	r3, r7, #24
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f7fe fb70 	bl	800cc94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e5b4:	69fb      	ldr	r3, [r7, #28]
 800e5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5b8:	e01f      	b.n	800e5fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e5ba:	4b2d      	ldr	r3, [pc, #180]	; (800e670 <UART_SetConfig+0x934>)
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	f003 0320 	and.w	r3, r3, #32
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d009      	beq.n	800e5da <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e5c6:	4b2a      	ldr	r3, [pc, #168]	; (800e670 <UART_SetConfig+0x934>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	08db      	lsrs	r3, r3, #3
 800e5cc:	f003 0303 	and.w	r3, r3, #3
 800e5d0:	4a24      	ldr	r2, [pc, #144]	; (800e664 <UART_SetConfig+0x928>)
 800e5d2:	fa22 f303 	lsr.w	r3, r2, r3
 800e5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e5d8:	e00f      	b.n	800e5fa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e5da:	4b22      	ldr	r3, [pc, #136]	; (800e664 <UART_SetConfig+0x928>)
 800e5dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5de:	e00c      	b.n	800e5fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e5e0:	4b21      	ldr	r3, [pc, #132]	; (800e668 <UART_SetConfig+0x92c>)
 800e5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5e4:	e009      	b.n	800e5fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e5e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e5ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5ec:	e005      	b.n	800e5fa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e5f2:	2301      	movs	r3, #1
 800e5f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e5f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e5fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	f000 80e7 	beq.w	800e7d0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e602:	697b      	ldr	r3, [r7, #20]
 800e604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e606:	4a19      	ldr	r2, [pc, #100]	; (800e66c <UART_SetConfig+0x930>)
 800e608:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e60c:	461a      	mov	r2, r3
 800e60e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e610:	fbb3 f3f2 	udiv	r3, r3, r2
 800e614:	005a      	lsls	r2, r3, #1
 800e616:	697b      	ldr	r3, [r7, #20]
 800e618:	685b      	ldr	r3, [r3, #4]
 800e61a:	085b      	lsrs	r3, r3, #1
 800e61c:	441a      	add	r2, r3
 800e61e:	697b      	ldr	r3, [r7, #20]
 800e620:	685b      	ldr	r3, [r3, #4]
 800e622:	fbb2 f3f3 	udiv	r3, r2, r3
 800e626:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e62a:	2b0f      	cmp	r3, #15
 800e62c:	d916      	bls.n	800e65c <UART_SetConfig+0x920>
 800e62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e634:	d212      	bcs.n	800e65c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e638:	b29b      	uxth	r3, r3
 800e63a:	f023 030f 	bic.w	r3, r3, #15
 800e63e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e642:	085b      	lsrs	r3, r3, #1
 800e644:	b29b      	uxth	r3, r3
 800e646:	f003 0307 	and.w	r3, r3, #7
 800e64a:	b29a      	uxth	r2, r3
 800e64c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e64e:	4313      	orrs	r3, r2
 800e650:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e652:	697b      	ldr	r3, [r7, #20]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e658:	60da      	str	r2, [r3, #12]
 800e65a:	e0b9      	b.n	800e7d0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e65c:	2301      	movs	r3, #1
 800e65e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e662:	e0b5      	b.n	800e7d0 <UART_SetConfig+0xa94>
 800e664:	03d09000 	.word	0x03d09000
 800e668:	003d0900 	.word	0x003d0900
 800e66c:	0801efc4 	.word	0x0801efc4
 800e670:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e674:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e678:	2b20      	cmp	r3, #32
 800e67a:	dc49      	bgt.n	800e710 <UART_SetConfig+0x9d4>
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	db7c      	blt.n	800e77a <UART_SetConfig+0xa3e>
 800e680:	2b20      	cmp	r3, #32
 800e682:	d87a      	bhi.n	800e77a <UART_SetConfig+0xa3e>
 800e684:	a201      	add	r2, pc, #4	; (adr r2, 800e68c <UART_SetConfig+0x950>)
 800e686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e68a:	bf00      	nop
 800e68c:	0800e717 	.word	0x0800e717
 800e690:	0800e71f 	.word	0x0800e71f
 800e694:	0800e77b 	.word	0x0800e77b
 800e698:	0800e77b 	.word	0x0800e77b
 800e69c:	0800e727 	.word	0x0800e727
 800e6a0:	0800e77b 	.word	0x0800e77b
 800e6a4:	0800e77b 	.word	0x0800e77b
 800e6a8:	0800e77b 	.word	0x0800e77b
 800e6ac:	0800e737 	.word	0x0800e737
 800e6b0:	0800e77b 	.word	0x0800e77b
 800e6b4:	0800e77b 	.word	0x0800e77b
 800e6b8:	0800e77b 	.word	0x0800e77b
 800e6bc:	0800e77b 	.word	0x0800e77b
 800e6c0:	0800e77b 	.word	0x0800e77b
 800e6c4:	0800e77b 	.word	0x0800e77b
 800e6c8:	0800e77b 	.word	0x0800e77b
 800e6cc:	0800e747 	.word	0x0800e747
 800e6d0:	0800e77b 	.word	0x0800e77b
 800e6d4:	0800e77b 	.word	0x0800e77b
 800e6d8:	0800e77b 	.word	0x0800e77b
 800e6dc:	0800e77b 	.word	0x0800e77b
 800e6e0:	0800e77b 	.word	0x0800e77b
 800e6e4:	0800e77b 	.word	0x0800e77b
 800e6e8:	0800e77b 	.word	0x0800e77b
 800e6ec:	0800e77b 	.word	0x0800e77b
 800e6f0:	0800e77b 	.word	0x0800e77b
 800e6f4:	0800e77b 	.word	0x0800e77b
 800e6f8:	0800e77b 	.word	0x0800e77b
 800e6fc:	0800e77b 	.word	0x0800e77b
 800e700:	0800e77b 	.word	0x0800e77b
 800e704:	0800e77b 	.word	0x0800e77b
 800e708:	0800e77b 	.word	0x0800e77b
 800e70c:	0800e76d 	.word	0x0800e76d
 800e710:	2b40      	cmp	r3, #64	; 0x40
 800e712:	d02e      	beq.n	800e772 <UART_SetConfig+0xa36>
 800e714:	e031      	b.n	800e77a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e716:	f7fc f981 	bl	800aa1c <HAL_RCC_GetPCLK1Freq>
 800e71a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e71c:	e033      	b.n	800e786 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e71e:	f7fc f993 	bl	800aa48 <HAL_RCC_GetPCLK2Freq>
 800e722:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e724:	e02f      	b.n	800e786 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e72a:	4618      	mov	r0, r3
 800e72c:	f7fe f95e 	bl	800c9ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e732:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e734:	e027      	b.n	800e786 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e736:	f107 0318 	add.w	r3, r7, #24
 800e73a:	4618      	mov	r0, r3
 800e73c:	f7fe faaa 	bl	800cc94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e740:	69fb      	ldr	r3, [r7, #28]
 800e742:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e744:	e01f      	b.n	800e786 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e746:	4b2d      	ldr	r3, [pc, #180]	; (800e7fc <UART_SetConfig+0xac0>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	f003 0320 	and.w	r3, r3, #32
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d009      	beq.n	800e766 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e752:	4b2a      	ldr	r3, [pc, #168]	; (800e7fc <UART_SetConfig+0xac0>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	08db      	lsrs	r3, r3, #3
 800e758:	f003 0303 	and.w	r3, r3, #3
 800e75c:	4a28      	ldr	r2, [pc, #160]	; (800e800 <UART_SetConfig+0xac4>)
 800e75e:	fa22 f303 	lsr.w	r3, r2, r3
 800e762:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e764:	e00f      	b.n	800e786 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e766:	4b26      	ldr	r3, [pc, #152]	; (800e800 <UART_SetConfig+0xac4>)
 800e768:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e76a:	e00c      	b.n	800e786 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e76c:	4b25      	ldr	r3, [pc, #148]	; (800e804 <UART_SetConfig+0xac8>)
 800e76e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e770:	e009      	b.n	800e786 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e776:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e778:	e005      	b.n	800e786 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e77a:	2300      	movs	r3, #0
 800e77c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e77e:	2301      	movs	r3, #1
 800e780:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e784:	bf00      	nop
    }

    if (pclk != 0U)
 800e786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d021      	beq.n	800e7d0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e790:	4a1d      	ldr	r2, [pc, #116]	; (800e808 <UART_SetConfig+0xacc>)
 800e792:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e796:	461a      	mov	r2, r3
 800e798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e79a:	fbb3 f2f2 	udiv	r2, r3, r2
 800e79e:	697b      	ldr	r3, [r7, #20]
 800e7a0:	685b      	ldr	r3, [r3, #4]
 800e7a2:	085b      	lsrs	r3, r3, #1
 800e7a4:	441a      	add	r2, r3
 800e7a6:	697b      	ldr	r3, [r7, #20]
 800e7a8:	685b      	ldr	r3, [r3, #4]
 800e7aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800e7ae:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7b2:	2b0f      	cmp	r3, #15
 800e7b4:	d909      	bls.n	800e7ca <UART_SetConfig+0xa8e>
 800e7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e7bc:	d205      	bcs.n	800e7ca <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7c0:	b29a      	uxth	r2, r3
 800e7c2:	697b      	ldr	r3, [r7, #20]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	60da      	str	r2, [r3, #12]
 800e7c8:	e002      	b.n	800e7d0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e7ca:	2301      	movs	r3, #1
 800e7cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	2201      	movs	r2, #1
 800e7d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e7d8:	697b      	ldr	r3, [r7, #20]
 800e7da:	2201      	movs	r2, #1
 800e7dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e7e6:	697b      	ldr	r3, [r7, #20]
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e7ec:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	3748      	adds	r7, #72	; 0x48
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e7fa:	bf00      	nop
 800e7fc:	58024400 	.word	0x58024400
 800e800:	03d09000 	.word	0x03d09000
 800e804:	003d0900 	.word	0x003d0900
 800e808:	0801efc4 	.word	0x0801efc4

0800e80c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e80c:	b480      	push	{r7}
 800e80e:	b083      	sub	sp, #12
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e818:	f003 0301 	and.w	r3, r3, #1
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d00a      	beq.n	800e836 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	685b      	ldr	r3, [r3, #4]
 800e826:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	430a      	orrs	r2, r1
 800e834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e83a:	f003 0302 	and.w	r3, r3, #2
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d00a      	beq.n	800e858 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	685b      	ldr	r3, [r3, #4]
 800e848:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	430a      	orrs	r2, r1
 800e856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e85c:	f003 0304 	and.w	r3, r3, #4
 800e860:	2b00      	cmp	r3, #0
 800e862:	d00a      	beq.n	800e87a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	685b      	ldr	r3, [r3, #4]
 800e86a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	430a      	orrs	r2, r1
 800e878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e87e:	f003 0308 	and.w	r3, r3, #8
 800e882:	2b00      	cmp	r3, #0
 800e884:	d00a      	beq.n	800e89c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	685b      	ldr	r3, [r3, #4]
 800e88c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	430a      	orrs	r2, r1
 800e89a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8a0:	f003 0310 	and.w	r3, r3, #16
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d00a      	beq.n	800e8be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	689b      	ldr	r3, [r3, #8]
 800e8ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	430a      	orrs	r2, r1
 800e8bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8c2:	f003 0320 	and.w	r3, r3, #32
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d00a      	beq.n	800e8e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	689b      	ldr	r3, [r3, #8]
 800e8d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	430a      	orrs	r2, r1
 800e8de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d01a      	beq.n	800e922 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	685b      	ldr	r3, [r3, #4]
 800e8f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	430a      	orrs	r2, r1
 800e900:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e906:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e90a:	d10a      	bne.n	800e922 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	685b      	ldr	r3, [r3, #4]
 800e912:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	430a      	orrs	r2, r1
 800e920:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d00a      	beq.n	800e944 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	685b      	ldr	r3, [r3, #4]
 800e934:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	430a      	orrs	r2, r1
 800e942:	605a      	str	r2, [r3, #4]
  }
}
 800e944:	bf00      	nop
 800e946:	370c      	adds	r7, #12
 800e948:	46bd      	mov	sp, r7
 800e94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94e:	4770      	bx	lr

0800e950 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b098      	sub	sp, #96	; 0x60
 800e954:	af02      	add	r7, sp, #8
 800e956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2200      	movs	r2, #0
 800e95c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e960:	f7f5 fb74 	bl	800404c <HAL_GetTick>
 800e964:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	f003 0308 	and.w	r3, r3, #8
 800e970:	2b08      	cmp	r3, #8
 800e972:	d12f      	bne.n	800e9d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e974:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e978:	9300      	str	r3, [sp, #0]
 800e97a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e97c:	2200      	movs	r2, #0
 800e97e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e982:	6878      	ldr	r0, [r7, #4]
 800e984:	f000 f88e 	bl	800eaa4 <UART_WaitOnFlagUntilTimeout>
 800e988:	4603      	mov	r3, r0
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d022      	beq.n	800e9d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e996:	e853 3f00 	ldrex	r3, [r3]
 800e99a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e99c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e99e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e9a2:	653b      	str	r3, [r7, #80]	; 0x50
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	461a      	mov	r2, r3
 800e9aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9ac:	647b      	str	r3, [r7, #68]	; 0x44
 800e9ae:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e9b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e9b4:	e841 2300 	strex	r3, r2, [r1]
 800e9b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e9ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d1e6      	bne.n	800e98e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2220      	movs	r2, #32
 800e9c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e9d0:	2303      	movs	r3, #3
 800e9d2:	e063      	b.n	800ea9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	f003 0304 	and.w	r3, r3, #4
 800e9de:	2b04      	cmp	r3, #4
 800e9e0:	d149      	bne.n	800ea76 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e9e2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e9e6:	9300      	str	r3, [sp, #0]
 800e9e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e9f0:	6878      	ldr	r0, [r7, #4]
 800e9f2:	f000 f857 	bl	800eaa4 <UART_WaitOnFlagUntilTimeout>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d03c      	beq.n	800ea76 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea04:	e853 3f00 	ldrex	r3, [r3]
 800ea08:	623b      	str	r3, [r7, #32]
   return(result);
 800ea0a:	6a3b      	ldr	r3, [r7, #32]
 800ea0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ea10:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	461a      	mov	r2, r3
 800ea18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea1a:	633b      	str	r3, [r7, #48]	; 0x30
 800ea1c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea22:	e841 2300 	strex	r3, r2, [r1]
 800ea26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ea28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d1e6      	bne.n	800e9fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	3308      	adds	r3, #8
 800ea34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea36:	693b      	ldr	r3, [r7, #16]
 800ea38:	e853 3f00 	ldrex	r3, [r3]
 800ea3c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	f023 0301 	bic.w	r3, r3, #1
 800ea44:	64bb      	str	r3, [r7, #72]	; 0x48
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	3308      	adds	r3, #8
 800ea4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea4e:	61fa      	str	r2, [r7, #28]
 800ea50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea52:	69b9      	ldr	r1, [r7, #24]
 800ea54:	69fa      	ldr	r2, [r7, #28]
 800ea56:	e841 2300 	strex	r3, r2, [r1]
 800ea5a:	617b      	str	r3, [r7, #20]
   return(result);
 800ea5c:	697b      	ldr	r3, [r7, #20]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d1e5      	bne.n	800ea2e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	2220      	movs	r2, #32
 800ea66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ea72:	2303      	movs	r3, #3
 800ea74:	e012      	b.n	800ea9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	2220      	movs	r2, #32
 800ea7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	2220      	movs	r2, #32
 800ea82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	2200      	movs	r2, #0
 800ea8a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2200      	movs	r2, #0
 800ea90:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	2200      	movs	r2, #0
 800ea96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ea9a:	2300      	movs	r3, #0
}
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	3758      	adds	r7, #88	; 0x58
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}

0800eaa4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b084      	sub	sp, #16
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	60f8      	str	r0, [r7, #12]
 800eaac:	60b9      	str	r1, [r7, #8]
 800eaae:	603b      	str	r3, [r7, #0]
 800eab0:	4613      	mov	r3, r2
 800eab2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eab4:	e049      	b.n	800eb4a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eab6:	69bb      	ldr	r3, [r7, #24]
 800eab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eabc:	d045      	beq.n	800eb4a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eabe:	f7f5 fac5 	bl	800404c <HAL_GetTick>
 800eac2:	4602      	mov	r2, r0
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	1ad3      	subs	r3, r2, r3
 800eac8:	69ba      	ldr	r2, [r7, #24]
 800eaca:	429a      	cmp	r2, r3
 800eacc:	d302      	bcc.n	800ead4 <UART_WaitOnFlagUntilTimeout+0x30>
 800eace:	69bb      	ldr	r3, [r7, #24]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d101      	bne.n	800ead8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ead4:	2303      	movs	r3, #3
 800ead6:	e048      	b.n	800eb6a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	f003 0304 	and.w	r3, r3, #4
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d031      	beq.n	800eb4a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	69db      	ldr	r3, [r3, #28]
 800eaec:	f003 0308 	and.w	r3, r3, #8
 800eaf0:	2b08      	cmp	r3, #8
 800eaf2:	d110      	bne.n	800eb16 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	2208      	movs	r2, #8
 800eafa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800eafc:	68f8      	ldr	r0, [r7, #12]
 800eafe:	f000 f839 	bl	800eb74 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	2208      	movs	r2, #8
 800eb06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800eb12:	2301      	movs	r3, #1
 800eb14:	e029      	b.n	800eb6a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	69db      	ldr	r3, [r3, #28]
 800eb1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eb20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eb24:	d111      	bne.n	800eb4a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eb2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800eb30:	68f8      	ldr	r0, [r7, #12]
 800eb32:	f000 f81f 	bl	800eb74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	2220      	movs	r2, #32
 800eb3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	2200      	movs	r2, #0
 800eb42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800eb46:	2303      	movs	r3, #3
 800eb48:	e00f      	b.n	800eb6a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	69da      	ldr	r2, [r3, #28]
 800eb50:	68bb      	ldr	r3, [r7, #8]
 800eb52:	4013      	ands	r3, r2
 800eb54:	68ba      	ldr	r2, [r7, #8]
 800eb56:	429a      	cmp	r2, r3
 800eb58:	bf0c      	ite	eq
 800eb5a:	2301      	moveq	r3, #1
 800eb5c:	2300      	movne	r3, #0
 800eb5e:	b2db      	uxtb	r3, r3
 800eb60:	461a      	mov	r2, r3
 800eb62:	79fb      	ldrb	r3, [r7, #7]
 800eb64:	429a      	cmp	r2, r3
 800eb66:	d0a6      	beq.n	800eab6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800eb68:	2300      	movs	r3, #0
}
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	3710      	adds	r7, #16
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	bd80      	pop	{r7, pc}
	...

0800eb74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800eb74:	b480      	push	{r7}
 800eb76:	b095      	sub	sp, #84	; 0x54
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb84:	e853 3f00 	ldrex	r3, [r3]
 800eb88:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800eb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eb90:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	461a      	mov	r2, r3
 800eb98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb9a:	643b      	str	r3, [r7, #64]	; 0x40
 800eb9c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eba0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eba2:	e841 2300 	strex	r3, r2, [r1]
 800eba6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d1e6      	bne.n	800eb7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	3308      	adds	r3, #8
 800ebb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebb6:	6a3b      	ldr	r3, [r7, #32]
 800ebb8:	e853 3f00 	ldrex	r3, [r3]
 800ebbc:	61fb      	str	r3, [r7, #28]
   return(result);
 800ebbe:	69fa      	ldr	r2, [r7, #28]
 800ebc0:	4b1e      	ldr	r3, [pc, #120]	; (800ec3c <UART_EndRxTransfer+0xc8>)
 800ebc2:	4013      	ands	r3, r2
 800ebc4:	64bb      	str	r3, [r7, #72]	; 0x48
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	3308      	adds	r3, #8
 800ebcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ebce:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ebd0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ebd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ebd6:	e841 2300 	strex	r3, r2, [r1]
 800ebda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ebdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d1e5      	bne.n	800ebae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebe6:	2b01      	cmp	r3, #1
 800ebe8:	d118      	bne.n	800ec1c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	e853 3f00 	ldrex	r3, [r3]
 800ebf6:	60bb      	str	r3, [r7, #8]
   return(result);
 800ebf8:	68bb      	ldr	r3, [r7, #8]
 800ebfa:	f023 0310 	bic.w	r3, r3, #16
 800ebfe:	647b      	str	r3, [r7, #68]	; 0x44
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	461a      	mov	r2, r3
 800ec06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec08:	61bb      	str	r3, [r7, #24]
 800ec0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec0c:	6979      	ldr	r1, [r7, #20]
 800ec0e:	69ba      	ldr	r2, [r7, #24]
 800ec10:	e841 2300 	strex	r3, r2, [r1]
 800ec14:	613b      	str	r3, [r7, #16]
   return(result);
 800ec16:	693b      	ldr	r3, [r7, #16]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d1e6      	bne.n	800ebea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	2220      	movs	r2, #32
 800ec20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	2200      	movs	r2, #0
 800ec28:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ec30:	bf00      	nop
 800ec32:	3754      	adds	r7, #84	; 0x54
 800ec34:	46bd      	mov	sp, r7
 800ec36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3a:	4770      	bx	lr
 800ec3c:	effffffe 	.word	0xeffffffe

0800ec40 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ec40:	b480      	push	{r7}
 800ec42:	b085      	sub	sp, #20
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ec4e:	2b01      	cmp	r3, #1
 800ec50:	d101      	bne.n	800ec56 <HAL_UARTEx_DisableFifoMode+0x16>
 800ec52:	2302      	movs	r3, #2
 800ec54:	e027      	b.n	800eca6 <HAL_UARTEx_DisableFifoMode+0x66>
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2201      	movs	r2, #1
 800ec5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2224      	movs	r2, #36	; 0x24
 800ec62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	681a      	ldr	r2, [r3, #0]
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	f022 0201 	bic.w	r2, r2, #1
 800ec7c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ec84:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	2200      	movs	r2, #0
 800ec8a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	68fa      	ldr	r2, [r7, #12]
 800ec92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	2220      	movs	r2, #32
 800ec98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2200      	movs	r2, #0
 800eca0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800eca4:	2300      	movs	r3, #0
}
 800eca6:	4618      	mov	r0, r3
 800eca8:	3714      	adds	r7, #20
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb0:	4770      	bx	lr

0800ecb2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ecb2:	b580      	push	{r7, lr}
 800ecb4:	b084      	sub	sp, #16
 800ecb6:	af00      	add	r7, sp, #0
 800ecb8:	6078      	str	r0, [r7, #4]
 800ecba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ecc2:	2b01      	cmp	r3, #1
 800ecc4:	d101      	bne.n	800ecca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ecc6:	2302      	movs	r3, #2
 800ecc8:	e02d      	b.n	800ed26 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	2201      	movs	r2, #1
 800ecce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2224      	movs	r2, #36	; 0x24
 800ecd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	681a      	ldr	r2, [r3, #0]
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	f022 0201 	bic.w	r2, r2, #1
 800ecf0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	689b      	ldr	r3, [r3, #8]
 800ecf8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	683a      	ldr	r2, [r7, #0]
 800ed02:	430a      	orrs	r2, r1
 800ed04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ed06:	6878      	ldr	r0, [r7, #4]
 800ed08:	f000 f850 	bl	800edac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	68fa      	ldr	r2, [r7, #12]
 800ed12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	2220      	movs	r2, #32
 800ed18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2200      	movs	r2, #0
 800ed20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ed24:	2300      	movs	r3, #0
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	3710      	adds	r7, #16
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}

0800ed2e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ed2e:	b580      	push	{r7, lr}
 800ed30:	b084      	sub	sp, #16
 800ed32:	af00      	add	r7, sp, #0
 800ed34:	6078      	str	r0, [r7, #4]
 800ed36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ed3e:	2b01      	cmp	r3, #1
 800ed40:	d101      	bne.n	800ed46 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ed42:	2302      	movs	r3, #2
 800ed44:	e02d      	b.n	800eda2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2201      	movs	r2, #1
 800ed4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	2224      	movs	r2, #36	; 0x24
 800ed52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	681a      	ldr	r2, [r3, #0]
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	f022 0201 	bic.w	r2, r2, #1
 800ed6c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	689b      	ldr	r3, [r3, #8]
 800ed74:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	683a      	ldr	r2, [r7, #0]
 800ed7e:	430a      	orrs	r2, r1
 800ed80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ed82:	6878      	ldr	r0, [r7, #4]
 800ed84:	f000 f812 	bl	800edac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	68fa      	ldr	r2, [r7, #12]
 800ed8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2220      	movs	r2, #32
 800ed94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800eda0:	2300      	movs	r3, #0
}
 800eda2:	4618      	mov	r0, r3
 800eda4:	3710      	adds	r7, #16
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bd80      	pop	{r7, pc}
	...

0800edac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800edac:	b480      	push	{r7}
 800edae:	b085      	sub	sp, #20
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d108      	bne.n	800edce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2201      	movs	r2, #1
 800edc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2201      	movs	r2, #1
 800edc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800edcc:	e031      	b.n	800ee32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800edce:	2310      	movs	r3, #16
 800edd0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800edd2:	2310      	movs	r3, #16
 800edd4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	689b      	ldr	r3, [r3, #8]
 800eddc:	0e5b      	lsrs	r3, r3, #25
 800edde:	b2db      	uxtb	r3, r3
 800ede0:	f003 0307 	and.w	r3, r3, #7
 800ede4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	689b      	ldr	r3, [r3, #8]
 800edec:	0f5b      	lsrs	r3, r3, #29
 800edee:	b2db      	uxtb	r3, r3
 800edf0:	f003 0307 	and.w	r3, r3, #7
 800edf4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800edf6:	7bbb      	ldrb	r3, [r7, #14]
 800edf8:	7b3a      	ldrb	r2, [r7, #12]
 800edfa:	4911      	ldr	r1, [pc, #68]	; (800ee40 <UARTEx_SetNbDataToProcess+0x94>)
 800edfc:	5c8a      	ldrb	r2, [r1, r2]
 800edfe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ee02:	7b3a      	ldrb	r2, [r7, #12]
 800ee04:	490f      	ldr	r1, [pc, #60]	; (800ee44 <UARTEx_SetNbDataToProcess+0x98>)
 800ee06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ee08:	fb93 f3f2 	sdiv	r3, r3, r2
 800ee0c:	b29a      	uxth	r2, r3
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ee14:	7bfb      	ldrb	r3, [r7, #15]
 800ee16:	7b7a      	ldrb	r2, [r7, #13]
 800ee18:	4909      	ldr	r1, [pc, #36]	; (800ee40 <UARTEx_SetNbDataToProcess+0x94>)
 800ee1a:	5c8a      	ldrb	r2, [r1, r2]
 800ee1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ee20:	7b7a      	ldrb	r2, [r7, #13]
 800ee22:	4908      	ldr	r1, [pc, #32]	; (800ee44 <UARTEx_SetNbDataToProcess+0x98>)
 800ee24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ee26:	fb93 f3f2 	sdiv	r3, r3, r2
 800ee2a:	b29a      	uxth	r2, r3
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ee32:	bf00      	nop
 800ee34:	3714      	adds	r7, #20
 800ee36:	46bd      	mov	sp, r7
 800ee38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3c:	4770      	bx	lr
 800ee3e:	bf00      	nop
 800ee40:	0801efdc 	.word	0x0801efdc
 800ee44:	0801efe4 	.word	0x0801efe4

0800ee48 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b084      	sub	sp, #16
 800ee4c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800ee4e:	4b87      	ldr	r3, [pc, #540]	; (800f06c <MX_LWIP_Init+0x224>)
 800ee50:	22c0      	movs	r2, #192	; 0xc0
 800ee52:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800ee54:	4b85      	ldr	r3, [pc, #532]	; (800f06c <MX_LWIP_Init+0x224>)
 800ee56:	22a8      	movs	r2, #168	; 0xa8
 800ee58:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800ee5a:	4b84      	ldr	r3, [pc, #528]	; (800f06c <MX_LWIP_Init+0x224>)
 800ee5c:	2201      	movs	r2, #1
 800ee5e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 800ee60:	4b82      	ldr	r3, [pc, #520]	; (800f06c <MX_LWIP_Init+0x224>)
 800ee62:	220a      	movs	r2, #10
 800ee64:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800ee66:	4b82      	ldr	r3, [pc, #520]	; (800f070 <MX_LWIP_Init+0x228>)
 800ee68:	22ff      	movs	r2, #255	; 0xff
 800ee6a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800ee6c:	4b80      	ldr	r3, [pc, #512]	; (800f070 <MX_LWIP_Init+0x228>)
 800ee6e:	22ff      	movs	r2, #255	; 0xff
 800ee70:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 800ee72:	4b7f      	ldr	r3, [pc, #508]	; (800f070 <MX_LWIP_Init+0x228>)
 800ee74:	2200      	movs	r2, #0
 800ee76:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800ee78:	4b7d      	ldr	r3, [pc, #500]	; (800f070 <MX_LWIP_Init+0x228>)
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800ee7e:	4b7d      	ldr	r3, [pc, #500]	; (800f074 <MX_LWIP_Init+0x22c>)
 800ee80:	22c0      	movs	r2, #192	; 0xc0
 800ee82:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800ee84:	4b7b      	ldr	r3, [pc, #492]	; (800f074 <MX_LWIP_Init+0x22c>)
 800ee86:	22a8      	movs	r2, #168	; 0xa8
 800ee88:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800ee8a:	4b7a      	ldr	r3, [pc, #488]	; (800f074 <MX_LWIP_Init+0x22c>)
 800ee8c:	2201      	movs	r2, #1
 800ee8e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800ee90:	4b78      	ldr	r3, [pc, #480]	; (800f074 <MX_LWIP_Init+0x22c>)
 800ee92:	2201      	movs	r2, #1
 800ee94:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800ee96:	f000 fd31 	bl	800f8fc <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800ee9a:	4b74      	ldr	r3, [pc, #464]	; (800f06c <MX_LWIP_Init+0x224>)
 800ee9c:	781b      	ldrb	r3, [r3, #0]
 800ee9e:	061a      	lsls	r2, r3, #24
 800eea0:	4b72      	ldr	r3, [pc, #456]	; (800f06c <MX_LWIP_Init+0x224>)
 800eea2:	785b      	ldrb	r3, [r3, #1]
 800eea4:	041b      	lsls	r3, r3, #16
 800eea6:	431a      	orrs	r2, r3
 800eea8:	4b70      	ldr	r3, [pc, #448]	; (800f06c <MX_LWIP_Init+0x224>)
 800eeaa:	789b      	ldrb	r3, [r3, #2]
 800eeac:	021b      	lsls	r3, r3, #8
 800eeae:	4313      	orrs	r3, r2
 800eeb0:	4a6e      	ldr	r2, [pc, #440]	; (800f06c <MX_LWIP_Init+0x224>)
 800eeb2:	78d2      	ldrb	r2, [r2, #3]
 800eeb4:	4313      	orrs	r3, r2
 800eeb6:	061a      	lsls	r2, r3, #24
 800eeb8:	4b6c      	ldr	r3, [pc, #432]	; (800f06c <MX_LWIP_Init+0x224>)
 800eeba:	781b      	ldrb	r3, [r3, #0]
 800eebc:	0619      	lsls	r1, r3, #24
 800eebe:	4b6b      	ldr	r3, [pc, #428]	; (800f06c <MX_LWIP_Init+0x224>)
 800eec0:	785b      	ldrb	r3, [r3, #1]
 800eec2:	041b      	lsls	r3, r3, #16
 800eec4:	4319      	orrs	r1, r3
 800eec6:	4b69      	ldr	r3, [pc, #420]	; (800f06c <MX_LWIP_Init+0x224>)
 800eec8:	789b      	ldrb	r3, [r3, #2]
 800eeca:	021b      	lsls	r3, r3, #8
 800eecc:	430b      	orrs	r3, r1
 800eece:	4967      	ldr	r1, [pc, #412]	; (800f06c <MX_LWIP_Init+0x224>)
 800eed0:	78c9      	ldrb	r1, [r1, #3]
 800eed2:	430b      	orrs	r3, r1
 800eed4:	021b      	lsls	r3, r3, #8
 800eed6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eeda:	431a      	orrs	r2, r3
 800eedc:	4b63      	ldr	r3, [pc, #396]	; (800f06c <MX_LWIP_Init+0x224>)
 800eede:	781b      	ldrb	r3, [r3, #0]
 800eee0:	0619      	lsls	r1, r3, #24
 800eee2:	4b62      	ldr	r3, [pc, #392]	; (800f06c <MX_LWIP_Init+0x224>)
 800eee4:	785b      	ldrb	r3, [r3, #1]
 800eee6:	041b      	lsls	r3, r3, #16
 800eee8:	4319      	orrs	r1, r3
 800eeea:	4b60      	ldr	r3, [pc, #384]	; (800f06c <MX_LWIP_Init+0x224>)
 800eeec:	789b      	ldrb	r3, [r3, #2]
 800eeee:	021b      	lsls	r3, r3, #8
 800eef0:	430b      	orrs	r3, r1
 800eef2:	495e      	ldr	r1, [pc, #376]	; (800f06c <MX_LWIP_Init+0x224>)
 800eef4:	78c9      	ldrb	r1, [r1, #3]
 800eef6:	430b      	orrs	r3, r1
 800eef8:	0a1b      	lsrs	r3, r3, #8
 800eefa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800eefe:	431a      	orrs	r2, r3
 800ef00:	4b5a      	ldr	r3, [pc, #360]	; (800f06c <MX_LWIP_Init+0x224>)
 800ef02:	781b      	ldrb	r3, [r3, #0]
 800ef04:	0619      	lsls	r1, r3, #24
 800ef06:	4b59      	ldr	r3, [pc, #356]	; (800f06c <MX_LWIP_Init+0x224>)
 800ef08:	785b      	ldrb	r3, [r3, #1]
 800ef0a:	041b      	lsls	r3, r3, #16
 800ef0c:	4319      	orrs	r1, r3
 800ef0e:	4b57      	ldr	r3, [pc, #348]	; (800f06c <MX_LWIP_Init+0x224>)
 800ef10:	789b      	ldrb	r3, [r3, #2]
 800ef12:	021b      	lsls	r3, r3, #8
 800ef14:	430b      	orrs	r3, r1
 800ef16:	4955      	ldr	r1, [pc, #340]	; (800f06c <MX_LWIP_Init+0x224>)
 800ef18:	78c9      	ldrb	r1, [r1, #3]
 800ef1a:	430b      	orrs	r3, r1
 800ef1c:	0e1b      	lsrs	r3, r3, #24
 800ef1e:	4313      	orrs	r3, r2
 800ef20:	4a55      	ldr	r2, [pc, #340]	; (800f078 <MX_LWIP_Init+0x230>)
 800ef22:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800ef24:	4b52      	ldr	r3, [pc, #328]	; (800f070 <MX_LWIP_Init+0x228>)
 800ef26:	781b      	ldrb	r3, [r3, #0]
 800ef28:	061a      	lsls	r2, r3, #24
 800ef2a:	4b51      	ldr	r3, [pc, #324]	; (800f070 <MX_LWIP_Init+0x228>)
 800ef2c:	785b      	ldrb	r3, [r3, #1]
 800ef2e:	041b      	lsls	r3, r3, #16
 800ef30:	431a      	orrs	r2, r3
 800ef32:	4b4f      	ldr	r3, [pc, #316]	; (800f070 <MX_LWIP_Init+0x228>)
 800ef34:	789b      	ldrb	r3, [r3, #2]
 800ef36:	021b      	lsls	r3, r3, #8
 800ef38:	4313      	orrs	r3, r2
 800ef3a:	4a4d      	ldr	r2, [pc, #308]	; (800f070 <MX_LWIP_Init+0x228>)
 800ef3c:	78d2      	ldrb	r2, [r2, #3]
 800ef3e:	4313      	orrs	r3, r2
 800ef40:	061a      	lsls	r2, r3, #24
 800ef42:	4b4b      	ldr	r3, [pc, #300]	; (800f070 <MX_LWIP_Init+0x228>)
 800ef44:	781b      	ldrb	r3, [r3, #0]
 800ef46:	0619      	lsls	r1, r3, #24
 800ef48:	4b49      	ldr	r3, [pc, #292]	; (800f070 <MX_LWIP_Init+0x228>)
 800ef4a:	785b      	ldrb	r3, [r3, #1]
 800ef4c:	041b      	lsls	r3, r3, #16
 800ef4e:	4319      	orrs	r1, r3
 800ef50:	4b47      	ldr	r3, [pc, #284]	; (800f070 <MX_LWIP_Init+0x228>)
 800ef52:	789b      	ldrb	r3, [r3, #2]
 800ef54:	021b      	lsls	r3, r3, #8
 800ef56:	430b      	orrs	r3, r1
 800ef58:	4945      	ldr	r1, [pc, #276]	; (800f070 <MX_LWIP_Init+0x228>)
 800ef5a:	78c9      	ldrb	r1, [r1, #3]
 800ef5c:	430b      	orrs	r3, r1
 800ef5e:	021b      	lsls	r3, r3, #8
 800ef60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ef64:	431a      	orrs	r2, r3
 800ef66:	4b42      	ldr	r3, [pc, #264]	; (800f070 <MX_LWIP_Init+0x228>)
 800ef68:	781b      	ldrb	r3, [r3, #0]
 800ef6a:	0619      	lsls	r1, r3, #24
 800ef6c:	4b40      	ldr	r3, [pc, #256]	; (800f070 <MX_LWIP_Init+0x228>)
 800ef6e:	785b      	ldrb	r3, [r3, #1]
 800ef70:	041b      	lsls	r3, r3, #16
 800ef72:	4319      	orrs	r1, r3
 800ef74:	4b3e      	ldr	r3, [pc, #248]	; (800f070 <MX_LWIP_Init+0x228>)
 800ef76:	789b      	ldrb	r3, [r3, #2]
 800ef78:	021b      	lsls	r3, r3, #8
 800ef7a:	430b      	orrs	r3, r1
 800ef7c:	493c      	ldr	r1, [pc, #240]	; (800f070 <MX_LWIP_Init+0x228>)
 800ef7e:	78c9      	ldrb	r1, [r1, #3]
 800ef80:	430b      	orrs	r3, r1
 800ef82:	0a1b      	lsrs	r3, r3, #8
 800ef84:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ef88:	431a      	orrs	r2, r3
 800ef8a:	4b39      	ldr	r3, [pc, #228]	; (800f070 <MX_LWIP_Init+0x228>)
 800ef8c:	781b      	ldrb	r3, [r3, #0]
 800ef8e:	0619      	lsls	r1, r3, #24
 800ef90:	4b37      	ldr	r3, [pc, #220]	; (800f070 <MX_LWIP_Init+0x228>)
 800ef92:	785b      	ldrb	r3, [r3, #1]
 800ef94:	041b      	lsls	r3, r3, #16
 800ef96:	4319      	orrs	r1, r3
 800ef98:	4b35      	ldr	r3, [pc, #212]	; (800f070 <MX_LWIP_Init+0x228>)
 800ef9a:	789b      	ldrb	r3, [r3, #2]
 800ef9c:	021b      	lsls	r3, r3, #8
 800ef9e:	430b      	orrs	r3, r1
 800efa0:	4933      	ldr	r1, [pc, #204]	; (800f070 <MX_LWIP_Init+0x228>)
 800efa2:	78c9      	ldrb	r1, [r1, #3]
 800efa4:	430b      	orrs	r3, r1
 800efa6:	0e1b      	lsrs	r3, r3, #24
 800efa8:	4313      	orrs	r3, r2
 800efaa:	4a34      	ldr	r2, [pc, #208]	; (800f07c <MX_LWIP_Init+0x234>)
 800efac:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800efae:	4b31      	ldr	r3, [pc, #196]	; (800f074 <MX_LWIP_Init+0x22c>)
 800efb0:	781b      	ldrb	r3, [r3, #0]
 800efb2:	061a      	lsls	r2, r3, #24
 800efb4:	4b2f      	ldr	r3, [pc, #188]	; (800f074 <MX_LWIP_Init+0x22c>)
 800efb6:	785b      	ldrb	r3, [r3, #1]
 800efb8:	041b      	lsls	r3, r3, #16
 800efba:	431a      	orrs	r2, r3
 800efbc:	4b2d      	ldr	r3, [pc, #180]	; (800f074 <MX_LWIP_Init+0x22c>)
 800efbe:	789b      	ldrb	r3, [r3, #2]
 800efc0:	021b      	lsls	r3, r3, #8
 800efc2:	4313      	orrs	r3, r2
 800efc4:	4a2b      	ldr	r2, [pc, #172]	; (800f074 <MX_LWIP_Init+0x22c>)
 800efc6:	78d2      	ldrb	r2, [r2, #3]
 800efc8:	4313      	orrs	r3, r2
 800efca:	061a      	lsls	r2, r3, #24
 800efcc:	4b29      	ldr	r3, [pc, #164]	; (800f074 <MX_LWIP_Init+0x22c>)
 800efce:	781b      	ldrb	r3, [r3, #0]
 800efd0:	0619      	lsls	r1, r3, #24
 800efd2:	4b28      	ldr	r3, [pc, #160]	; (800f074 <MX_LWIP_Init+0x22c>)
 800efd4:	785b      	ldrb	r3, [r3, #1]
 800efd6:	041b      	lsls	r3, r3, #16
 800efd8:	4319      	orrs	r1, r3
 800efda:	4b26      	ldr	r3, [pc, #152]	; (800f074 <MX_LWIP_Init+0x22c>)
 800efdc:	789b      	ldrb	r3, [r3, #2]
 800efde:	021b      	lsls	r3, r3, #8
 800efe0:	430b      	orrs	r3, r1
 800efe2:	4924      	ldr	r1, [pc, #144]	; (800f074 <MX_LWIP_Init+0x22c>)
 800efe4:	78c9      	ldrb	r1, [r1, #3]
 800efe6:	430b      	orrs	r3, r1
 800efe8:	021b      	lsls	r3, r3, #8
 800efea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800efee:	431a      	orrs	r2, r3
 800eff0:	4b20      	ldr	r3, [pc, #128]	; (800f074 <MX_LWIP_Init+0x22c>)
 800eff2:	781b      	ldrb	r3, [r3, #0]
 800eff4:	0619      	lsls	r1, r3, #24
 800eff6:	4b1f      	ldr	r3, [pc, #124]	; (800f074 <MX_LWIP_Init+0x22c>)
 800eff8:	785b      	ldrb	r3, [r3, #1]
 800effa:	041b      	lsls	r3, r3, #16
 800effc:	4319      	orrs	r1, r3
 800effe:	4b1d      	ldr	r3, [pc, #116]	; (800f074 <MX_LWIP_Init+0x22c>)
 800f000:	789b      	ldrb	r3, [r3, #2]
 800f002:	021b      	lsls	r3, r3, #8
 800f004:	430b      	orrs	r3, r1
 800f006:	491b      	ldr	r1, [pc, #108]	; (800f074 <MX_LWIP_Init+0x22c>)
 800f008:	78c9      	ldrb	r1, [r1, #3]
 800f00a:	430b      	orrs	r3, r1
 800f00c:	0a1b      	lsrs	r3, r3, #8
 800f00e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f012:	431a      	orrs	r2, r3
 800f014:	4b17      	ldr	r3, [pc, #92]	; (800f074 <MX_LWIP_Init+0x22c>)
 800f016:	781b      	ldrb	r3, [r3, #0]
 800f018:	0619      	lsls	r1, r3, #24
 800f01a:	4b16      	ldr	r3, [pc, #88]	; (800f074 <MX_LWIP_Init+0x22c>)
 800f01c:	785b      	ldrb	r3, [r3, #1]
 800f01e:	041b      	lsls	r3, r3, #16
 800f020:	4319      	orrs	r1, r3
 800f022:	4b14      	ldr	r3, [pc, #80]	; (800f074 <MX_LWIP_Init+0x22c>)
 800f024:	789b      	ldrb	r3, [r3, #2]
 800f026:	021b      	lsls	r3, r3, #8
 800f028:	430b      	orrs	r3, r1
 800f02a:	4912      	ldr	r1, [pc, #72]	; (800f074 <MX_LWIP_Init+0x22c>)
 800f02c:	78c9      	ldrb	r1, [r1, #3]
 800f02e:	430b      	orrs	r3, r1
 800f030:	0e1b      	lsrs	r3, r3, #24
 800f032:	4313      	orrs	r3, r2
 800f034:	4a12      	ldr	r2, [pc, #72]	; (800f080 <MX_LWIP_Init+0x238>)
 800f036:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800f038:	4b12      	ldr	r3, [pc, #72]	; (800f084 <MX_LWIP_Init+0x23c>)
 800f03a:	9302      	str	r3, [sp, #8]
 800f03c:	4b12      	ldr	r3, [pc, #72]	; (800f088 <MX_LWIP_Init+0x240>)
 800f03e:	9301      	str	r3, [sp, #4]
 800f040:	2300      	movs	r3, #0
 800f042:	9300      	str	r3, [sp, #0]
 800f044:	4b0e      	ldr	r3, [pc, #56]	; (800f080 <MX_LWIP_Init+0x238>)
 800f046:	4a0d      	ldr	r2, [pc, #52]	; (800f07c <MX_LWIP_Init+0x234>)
 800f048:	490b      	ldr	r1, [pc, #44]	; (800f078 <MX_LWIP_Init+0x230>)
 800f04a:	4810      	ldr	r0, [pc, #64]	; (800f08c <MX_LWIP_Init+0x244>)
 800f04c:	f001 f92c 	bl	80102a8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800f050:	480e      	ldr	r0, [pc, #56]	; (800f08c <MX_LWIP_Init+0x244>)
 800f052:	f001 fadb 	bl	801060c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800f056:	480d      	ldr	r0, [pc, #52]	; (800f08c <MX_LWIP_Init+0x244>)
 800f058:	f001 fae8 	bl	801062c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800f05c:	490c      	ldr	r1, [pc, #48]	; (800f090 <MX_LWIP_Init+0x248>)
 800f05e:	480b      	ldr	r0, [pc, #44]	; (800f08c <MX_LWIP_Init+0x244>)
 800f060:	f001 fbe6 	bl	8010830 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800f064:	bf00      	nop
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}
 800f06a:	bf00      	nop
 800f06c:	200006e0 	.word	0x200006e0
 800f070:	200006e4 	.word	0x200006e4
 800f074:	200006e8 	.word	0x200006e8
 800f078:	200006d4 	.word	0x200006d4
 800f07c:	200006d8 	.word	0x200006d8
 800f080:	200006dc 	.word	0x200006dc
 800f084:	0801907d 	.word	0x0801907d
 800f088:	0800f2d9 	.word	0x0800f2d9
 800f08c:	200006a0 	.word	0x200006a0
 800f090:	0800f095 	.word	0x0800f095

0800f094 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800f094:	b480      	push	{r7}
 800f096:	b083      	sub	sp, #12
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800f09c:	bf00      	nop
 800f09e:	370c      	adds	r7, #12
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a6:	4770      	bx	lr

0800f0a8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b084      	sub	sp, #16
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800f0b4:	4b3f      	ldr	r3, [pc, #252]	; (800f1b4 <low_level_init+0x10c>)
 800f0b6:	4a40      	ldr	r2, [pc, #256]	; (800f1b8 <low_level_init+0x110>)
 800f0b8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800f0be:	2380      	movs	r3, #128	; 0x80
 800f0c0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800f0c2:	23e1      	movs	r3, #225	; 0xe1
 800f0c4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800f0d2:	4a38      	ldr	r2, [pc, #224]	; (800f1b4 <low_level_init+0x10c>)
 800f0d4:	f107 0308 	add.w	r3, r7, #8
 800f0d8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800f0da:	4b36      	ldr	r3, [pc, #216]	; (800f1b4 <low_level_init+0x10c>)
 800f0dc:	2201      	movs	r2, #1
 800f0de:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800f0e0:	4b34      	ldr	r3, [pc, #208]	; (800f1b4 <low_level_init+0x10c>)
 800f0e2:	4a36      	ldr	r2, [pc, #216]	; (800f1bc <low_level_init+0x114>)
 800f0e4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800f0e6:	4b33      	ldr	r3, [pc, #204]	; (800f1b4 <low_level_init+0x10c>)
 800f0e8:	4a35      	ldr	r2, [pc, #212]	; (800f1c0 <low_level_init+0x118>)
 800f0ea:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800f0ec:	4b31      	ldr	r3, [pc, #196]	; (800f1b4 <low_level_init+0x10c>)
 800f0ee:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800f0f2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800f0f4:	482f      	ldr	r0, [pc, #188]	; (800f1b4 <low_level_init+0x10c>)
 800f0f6:	f7f7 f8d9 	bl	80062ac <HAL_ETH_Init>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800f0fe:	2238      	movs	r2, #56	; 0x38
 800f100:	2100      	movs	r1, #0
 800f102:	4830      	ldr	r0, [pc, #192]	; (800f1c4 <low_level_init+0x11c>)
 800f104:	f00a ff22 	bl	8019f4c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800f108:	4b2e      	ldr	r3, [pc, #184]	; (800f1c4 <low_level_init+0x11c>)
 800f10a:	2221      	movs	r2, #33	; 0x21
 800f10c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800f10e:	4b2d      	ldr	r3, [pc, #180]	; (800f1c4 <low_level_init+0x11c>)
 800f110:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800f114:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800f116:	4b2b      	ldr	r3, [pc, #172]	; (800f1c4 <low_level_init+0x11c>)
 800f118:	2200      	movs	r2, #0
 800f11a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800f11c:	482a      	ldr	r0, [pc, #168]	; (800f1c8 <low_level_init+0x120>)
 800f11e:	f000 ff8b 	bl	8010038 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	2206      	movs	r2, #6
 800f126:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800f12a:	4b22      	ldr	r3, [pc, #136]	; (800f1b4 <low_level_init+0x10c>)
 800f12c:	685b      	ldr	r3, [r3, #4]
 800f12e:	781a      	ldrb	r2, [r3, #0]
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800f136:	4b1f      	ldr	r3, [pc, #124]	; (800f1b4 <low_level_init+0x10c>)
 800f138:	685b      	ldr	r3, [r3, #4]
 800f13a:	785a      	ldrb	r2, [r3, #1]
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800f142:	4b1c      	ldr	r3, [pc, #112]	; (800f1b4 <low_level_init+0x10c>)
 800f144:	685b      	ldr	r3, [r3, #4]
 800f146:	789a      	ldrb	r2, [r3, #2]
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800f14e:	4b19      	ldr	r3, [pc, #100]	; (800f1b4 <low_level_init+0x10c>)
 800f150:	685b      	ldr	r3, [r3, #4]
 800f152:	78da      	ldrb	r2, [r3, #3]
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800f15a:	4b16      	ldr	r3, [pc, #88]	; (800f1b4 <low_level_init+0x10c>)
 800f15c:	685b      	ldr	r3, [r3, #4]
 800f15e:	791a      	ldrb	r2, [r3, #4]
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800f166:	4b13      	ldr	r3, [pc, #76]	; (800f1b4 <low_level_init+0x10c>)
 800f168:	685b      	ldr	r3, [r3, #4]
 800f16a:	795a      	ldrb	r2, [r3, #5]
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800f178:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f180:	f043 030a 	orr.w	r3, r3, #10
 800f184:	b2da      	uxtb	r2, r3
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800f18c:	490f      	ldr	r1, [pc, #60]	; (800f1cc <low_level_init+0x124>)
 800f18e:	4810      	ldr	r0, [pc, #64]	; (800f1d0 <low_level_init+0x128>)
 800f190:	f7f4 fd75 	bl	8003c7e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800f194:	480e      	ldr	r0, [pc, #56]	; (800f1d0 <low_level_init+0x128>)
 800f196:	f7f4 fda4 	bl	8003ce2 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800f19a:	7bfb      	ldrb	r3, [r7, #15]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d103      	bne.n	800f1a8 <low_level_init+0x100>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800f1a0:	6878      	ldr	r0, [r7, #4]
 800f1a2:	f000 fa05 	bl	800f5b0 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800f1a6:	e001      	b.n	800f1ac <low_level_init+0x104>
    Error_Handler();
 800f1a8:	f7f4 f89e 	bl	80032e8 <Error_Handler>
}
 800f1ac:	bf00      	nop
 800f1ae:	3710      	adds	r7, #16
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd80      	pop	{r7, pc}
 800f1b4:	200006f4 	.word	0x200006f4
 800f1b8:	40028000 	.word	0x40028000
 800f1bc:	30040060 	.word	0x30040060
 800f1c0:	30040000 	.word	0x30040000
 800f1c4:	200007a4 	.word	0x200007a4
 800f1c8:	0801efec 	.word	0x0801efec
 800f1cc:	20000044 	.word	0x20000044
 800f1d0:	200007dc 	.word	0x200007dc

0800f1d4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b092      	sub	sp, #72	; 0x48
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
 800f1dc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800f1de:	2300      	movs	r3, #0
 800f1e0:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800f1ec:	f107 030c 	add.w	r3, r7, #12
 800f1f0:	2230      	movs	r2, #48	; 0x30
 800f1f2:	2100      	movs	r1, #0
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f00a fea9 	bl	8019f4c <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800f1fa:	f107 030c 	add.w	r3, r7, #12
 800f1fe:	2230      	movs	r2, #48	; 0x30
 800f200:	2100      	movs	r1, #0
 800f202:	4618      	mov	r0, r3
 800f204:	f00a fea2 	bl	8019f4c <memset>

  for(q = p; q != NULL; q = q->next)
 800f208:	683b      	ldr	r3, [r7, #0]
 800f20a:	643b      	str	r3, [r7, #64]	; 0x40
 800f20c:	e045      	b.n	800f29a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800f20e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f210:	2b03      	cmp	r3, #3
 800f212:	d902      	bls.n	800f21a <low_level_output+0x46>
      return ERR_IF;
 800f214:	f06f 030b 	mvn.w	r3, #11
 800f218:	e055      	b.n	800f2c6 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800f21a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f21c:	6859      	ldr	r1, [r3, #4]
 800f21e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f220:	4613      	mov	r3, r2
 800f222:	005b      	lsls	r3, r3, #1
 800f224:	4413      	add	r3, r2
 800f226:	009b      	lsls	r3, r3, #2
 800f228:	3348      	adds	r3, #72	; 0x48
 800f22a:	443b      	add	r3, r7
 800f22c:	3b3c      	subs	r3, #60	; 0x3c
 800f22e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800f230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f232:	895b      	ldrh	r3, [r3, #10]
 800f234:	4619      	mov	r1, r3
 800f236:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f238:	4613      	mov	r3, r2
 800f23a:	005b      	lsls	r3, r3, #1
 800f23c:	4413      	add	r3, r2
 800f23e:	009b      	lsls	r3, r3, #2
 800f240:	3348      	adds	r3, #72	; 0x48
 800f242:	443b      	add	r3, r7
 800f244:	3b38      	subs	r3, #56	; 0x38
 800f246:	6019      	str	r1, [r3, #0]

    if(i>0)
 800f248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d011      	beq.n	800f272 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800f24e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f250:	1e5a      	subs	r2, r3, #1
 800f252:	f107 000c 	add.w	r0, r7, #12
 800f256:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f258:	460b      	mov	r3, r1
 800f25a:	005b      	lsls	r3, r3, #1
 800f25c:	440b      	add	r3, r1
 800f25e:	009b      	lsls	r3, r3, #2
 800f260:	18c1      	adds	r1, r0, r3
 800f262:	4613      	mov	r3, r2
 800f264:	005b      	lsls	r3, r3, #1
 800f266:	4413      	add	r3, r2
 800f268:	009b      	lsls	r3, r3, #2
 800f26a:	3348      	adds	r3, #72	; 0x48
 800f26c:	443b      	add	r3, r7
 800f26e:	3b34      	subs	r3, #52	; 0x34
 800f270:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800f272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d109      	bne.n	800f28e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800f27a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f27c:	4613      	mov	r3, r2
 800f27e:	005b      	lsls	r3, r3, #1
 800f280:	4413      	add	r3, r2
 800f282:	009b      	lsls	r3, r3, #2
 800f284:	3348      	adds	r3, #72	; 0x48
 800f286:	443b      	add	r3, r7
 800f288:	3b34      	subs	r3, #52	; 0x34
 800f28a:	2200      	movs	r2, #0
 800f28c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800f28e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f290:	3301      	adds	r3, #1
 800f292:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800f294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	643b      	str	r3, [r7, #64]	; 0x40
 800f29a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d1b6      	bne.n	800f20e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800f2a0:	683b      	ldr	r3, [r7, #0]
 800f2a2:	891b      	ldrh	r3, [r3, #8]
 800f2a4:	461a      	mov	r2, r3
 800f2a6:	4b0a      	ldr	r3, [pc, #40]	; (800f2d0 <low_level_output+0xfc>)
 800f2a8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800f2aa:	4a09      	ldr	r2, [pc, #36]	; (800f2d0 <low_level_output+0xfc>)
 800f2ac:	f107 030c 	add.w	r3, r7, #12
 800f2b0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800f2b2:	4a07      	ldr	r2, [pc, #28]	; (800f2d0 <low_level_output+0xfc>)
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800f2b8:	2214      	movs	r2, #20
 800f2ba:	4905      	ldr	r1, [pc, #20]	; (800f2d0 <low_level_output+0xfc>)
 800f2bc:	4805      	ldr	r0, [pc, #20]	; (800f2d4 <low_level_output+0x100>)
 800f2be:	f7f7 f98d 	bl	80065dc <HAL_ETH_Transmit>

  return errval;
 800f2c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	3748      	adds	r7, #72	; 0x48
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	bd80      	pop	{r7, pc}
 800f2ce:	bf00      	nop
 800f2d0:	200007a4 	.word	0x200007a4
 800f2d4:	200006f4 	.word	0x200006f4

0800f2d8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b082      	sub	sp, #8
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d106      	bne.n	800f2f4 <ethernetif_init+0x1c>
 800f2e6:	4b0e      	ldr	r3, [pc, #56]	; (800f320 <ethernetif_init+0x48>)
 800f2e8:	f240 1285 	movw	r2, #389	; 0x185
 800f2ec:	490d      	ldr	r1, [pc, #52]	; (800f324 <ethernetif_init+0x4c>)
 800f2ee:	480e      	ldr	r0, [pc, #56]	; (800f328 <ethernetif_init+0x50>)
 800f2f0:	f00a fcd6 	bl	8019ca0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	2273      	movs	r2, #115	; 0x73
 800f2f8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2274      	movs	r2, #116	; 0x74
 800f300:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	4a09      	ldr	r2, [pc, #36]	; (800f32c <ethernetif_init+0x54>)
 800f308:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	4a08      	ldr	r2, [pc, #32]	; (800f330 <ethernetif_init+0x58>)
 800f30e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800f310:	6878      	ldr	r0, [r7, #4]
 800f312:	f7ff fec9 	bl	800f0a8 <low_level_init>

  return ERR_OK;
 800f316:	2300      	movs	r3, #0
}
 800f318:	4618      	mov	r0, r3
 800f31a:	3708      	adds	r7, #8
 800f31c:	46bd      	mov	sp, r7
 800f31e:	bd80      	pop	{r7, pc}
 800f320:	0801c5d4 	.word	0x0801c5d4
 800f324:	0801c5f0 	.word	0x0801c5f0
 800f328:	0801c600 	.word	0x0801c600
 800f32c:	080174e9 	.word	0x080174e9
 800f330:	0800f1d5 	.word	0x0800f1d5

0800f334 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b084      	sub	sp, #16
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800f340:	68f9      	ldr	r1, [r7, #12]
 800f342:	4807      	ldr	r0, [pc, #28]	; (800f360 <pbuf_free_custom+0x2c>)
 800f344:	f000 ff5a 	bl	80101fc <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800f348:	4b06      	ldr	r3, [pc, #24]	; (800f364 <pbuf_free_custom+0x30>)
 800f34a:	781b      	ldrb	r3, [r3, #0]
 800f34c:	2b01      	cmp	r3, #1
 800f34e:	d102      	bne.n	800f356 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800f350:	4b04      	ldr	r3, [pc, #16]	; (800f364 <pbuf_free_custom+0x30>)
 800f352:	2200      	movs	r2, #0
 800f354:	701a      	strb	r2, [r3, #0]
  }
}
 800f356:	bf00      	nop
 800f358:	3710      	adds	r7, #16
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}
 800f35e:	bf00      	nop
 800f360:	0801efec 	.word	0x0801efec
 800f364:	200006f0 	.word	0x200006f0

0800f368 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800f36c:	f7f4 fe6e 	bl	800404c <HAL_GetTick>
 800f370:	4603      	mov	r3, r0
}
 800f372:	4618      	mov	r0, r3
 800f374:	bd80      	pop	{r7, pc}
	...

0800f378 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b08e      	sub	sp, #56	; 0x38
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f384:	2200      	movs	r2, #0
 800f386:	601a      	str	r2, [r3, #0]
 800f388:	605a      	str	r2, [r3, #4]
 800f38a:	609a      	str	r2, [r3, #8]
 800f38c:	60da      	str	r2, [r3, #12]
 800f38e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	4a59      	ldr	r2, [pc, #356]	; (800f4fc <HAL_ETH_MspInit+0x184>)
 800f396:	4293      	cmp	r3, r2
 800f398:	f040 80ab 	bne.w	800f4f2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800f39c:	4b58      	ldr	r3, [pc, #352]	; (800f500 <HAL_ETH_MspInit+0x188>)
 800f39e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f3a2:	4a57      	ldr	r2, [pc, #348]	; (800f500 <HAL_ETH_MspInit+0x188>)
 800f3a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f3a8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f3ac:	4b54      	ldr	r3, [pc, #336]	; (800f500 <HAL_ETH_MspInit+0x188>)
 800f3ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f3b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f3b6:	623b      	str	r3, [r7, #32]
 800f3b8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800f3ba:	4b51      	ldr	r3, [pc, #324]	; (800f500 <HAL_ETH_MspInit+0x188>)
 800f3bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f3c0:	4a4f      	ldr	r2, [pc, #316]	; (800f500 <HAL_ETH_MspInit+0x188>)
 800f3c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f3c6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f3ca:	4b4d      	ldr	r3, [pc, #308]	; (800f500 <HAL_ETH_MspInit+0x188>)
 800f3cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f3d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f3d4:	61fb      	str	r3, [r7, #28]
 800f3d6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800f3d8:	4b49      	ldr	r3, [pc, #292]	; (800f500 <HAL_ETH_MspInit+0x188>)
 800f3da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f3de:	4a48      	ldr	r2, [pc, #288]	; (800f500 <HAL_ETH_MspInit+0x188>)
 800f3e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f3e4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f3e8:	4b45      	ldr	r3, [pc, #276]	; (800f500 <HAL_ETH_MspInit+0x188>)
 800f3ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f3ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f3f2:	61bb      	str	r3, [r7, #24]
 800f3f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f3f6:	4b42      	ldr	r3, [pc, #264]	; (800f500 <HAL_ETH_MspInit+0x188>)
 800f3f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f3fc:	4a40      	ldr	r2, [pc, #256]	; (800f500 <HAL_ETH_MspInit+0x188>)
 800f3fe:	f043 0304 	orr.w	r3, r3, #4
 800f402:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f406:	4b3e      	ldr	r3, [pc, #248]	; (800f500 <HAL_ETH_MspInit+0x188>)
 800f408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f40c:	f003 0304 	and.w	r3, r3, #4
 800f410:	617b      	str	r3, [r7, #20]
 800f412:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f414:	4b3a      	ldr	r3, [pc, #232]	; (800f500 <HAL_ETH_MspInit+0x188>)
 800f416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f41a:	4a39      	ldr	r2, [pc, #228]	; (800f500 <HAL_ETH_MspInit+0x188>)
 800f41c:	f043 0301 	orr.w	r3, r3, #1
 800f420:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f424:	4b36      	ldr	r3, [pc, #216]	; (800f500 <HAL_ETH_MspInit+0x188>)
 800f426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f42a:	f003 0301 	and.w	r3, r3, #1
 800f42e:	613b      	str	r3, [r7, #16]
 800f430:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f432:	4b33      	ldr	r3, [pc, #204]	; (800f500 <HAL_ETH_MspInit+0x188>)
 800f434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f438:	4a31      	ldr	r2, [pc, #196]	; (800f500 <HAL_ETH_MspInit+0x188>)
 800f43a:	f043 0302 	orr.w	r3, r3, #2
 800f43e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f442:	4b2f      	ldr	r3, [pc, #188]	; (800f500 <HAL_ETH_MspInit+0x188>)
 800f444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f448:	f003 0302 	and.w	r3, r3, #2
 800f44c:	60fb      	str	r3, [r7, #12]
 800f44e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800f450:	4b2b      	ldr	r3, [pc, #172]	; (800f500 <HAL_ETH_MspInit+0x188>)
 800f452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f456:	4a2a      	ldr	r2, [pc, #168]	; (800f500 <HAL_ETH_MspInit+0x188>)
 800f458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f45c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f460:	4b27      	ldr	r3, [pc, #156]	; (800f500 <HAL_ETH_MspInit+0x188>)
 800f462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f46a:	60bb      	str	r3, [r7, #8]
 800f46c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800f46e:	2332      	movs	r3, #50	; 0x32
 800f470:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f472:	2302      	movs	r3, #2
 800f474:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f476:	2300      	movs	r3, #0
 800f478:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f47a:	2300      	movs	r3, #0
 800f47c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f47e:	230b      	movs	r3, #11
 800f480:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f486:	4619      	mov	r1, r3
 800f488:	481e      	ldr	r0, [pc, #120]	; (800f504 <HAL_ETH_MspInit+0x18c>)
 800f48a:	f7f8 fa0f 	bl	80078ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800f48e:	2386      	movs	r3, #134	; 0x86
 800f490:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f492:	2302      	movs	r3, #2
 800f494:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f496:	2300      	movs	r3, #0
 800f498:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f49a:	2300      	movs	r3, #0
 800f49c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f49e:	230b      	movs	r3, #11
 800f4a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f4a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f4a6:	4619      	mov	r1, r3
 800f4a8:	4817      	ldr	r0, [pc, #92]	; (800f508 <HAL_ETH_MspInit+0x190>)
 800f4aa:	f7f8 f9ff 	bl	80078ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800f4ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f4b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f4b4:	2302      	movs	r3, #2
 800f4b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f4bc:	2300      	movs	r3, #0
 800f4be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f4c0:	230b      	movs	r3, #11
 800f4c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f4c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f4c8:	4619      	mov	r1, r3
 800f4ca:	4810      	ldr	r0, [pc, #64]	; (800f50c <HAL_ETH_MspInit+0x194>)
 800f4cc:	f7f8 f9ee 	bl	80078ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800f4d0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800f4d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f4d6:	2302      	movs	r3, #2
 800f4d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f4da:	2300      	movs	r3, #0
 800f4dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f4de:	2300      	movs	r3, #0
 800f4e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f4e2:	230b      	movs	r3, #11
 800f4e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f4e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f4ea:	4619      	mov	r1, r3
 800f4ec:	4808      	ldr	r0, [pc, #32]	; (800f510 <HAL_ETH_MspInit+0x198>)
 800f4ee:	f7f8 f9dd 	bl	80078ac <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800f4f2:	bf00      	nop
 800f4f4:	3738      	adds	r7, #56	; 0x38
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}
 800f4fa:	bf00      	nop
 800f4fc:	40028000 	.word	0x40028000
 800f500:	58024400 	.word	0x58024400
 800f504:	58020800 	.word	0x58020800
 800f508:	58020000 	.word	0x58020000
 800f50c:	58020400 	.word	0x58020400
 800f510:	58021800 	.word	0x58021800

0800f514 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800f518:	4802      	ldr	r0, [pc, #8]	; (800f524 <ETH_PHY_IO_Init+0x10>)
 800f51a:	f7f7 fbfb 	bl	8006d14 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800f51e:	2300      	movs	r3, #0
}
 800f520:	4618      	mov	r0, r3
 800f522:	bd80      	pop	{r7, pc}
 800f524:	200006f4 	.word	0x200006f4

0800f528 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800f528:	b480      	push	{r7}
 800f52a:	af00      	add	r7, sp, #0
  return 0;
 800f52c:	2300      	movs	r3, #0
}
 800f52e:	4618      	mov	r0, r3
 800f530:	46bd      	mov	sp, r7
 800f532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f536:	4770      	bx	lr

0800f538 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	b084      	sub	sp, #16
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	60f8      	str	r0, [r7, #12]
 800f540:	60b9      	str	r1, [r7, #8]
 800f542:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	68ba      	ldr	r2, [r7, #8]
 800f548:	68f9      	ldr	r1, [r7, #12]
 800f54a:	4807      	ldr	r0, [pc, #28]	; (800f568 <ETH_PHY_IO_ReadReg+0x30>)
 800f54c:	f7f7 f94b 	bl	80067e6 <HAL_ETH_ReadPHYRegister>
 800f550:	4603      	mov	r3, r0
 800f552:	2b00      	cmp	r3, #0
 800f554:	d002      	beq.n	800f55c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800f556:	f04f 33ff 	mov.w	r3, #4294967295
 800f55a:	e000      	b.n	800f55e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800f55c:	2300      	movs	r3, #0
}
 800f55e:	4618      	mov	r0, r3
 800f560:	3710      	adds	r7, #16
 800f562:	46bd      	mov	sp, r7
 800f564:	bd80      	pop	{r7, pc}
 800f566:	bf00      	nop
 800f568:	200006f4 	.word	0x200006f4

0800f56c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b084      	sub	sp, #16
 800f570:	af00      	add	r7, sp, #0
 800f572:	60f8      	str	r0, [r7, #12]
 800f574:	60b9      	str	r1, [r7, #8]
 800f576:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	68ba      	ldr	r2, [r7, #8]
 800f57c:	68f9      	ldr	r1, [r7, #12]
 800f57e:	4807      	ldr	r0, [pc, #28]	; (800f59c <ETH_PHY_IO_WriteReg+0x30>)
 800f580:	f7f7 f986 	bl	8006890 <HAL_ETH_WritePHYRegister>
 800f584:	4603      	mov	r3, r0
 800f586:	2b00      	cmp	r3, #0
 800f588:	d002      	beq.n	800f590 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800f58a:	f04f 33ff 	mov.w	r3, #4294967295
 800f58e:	e000      	b.n	800f592 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800f590:	2300      	movs	r3, #0
}
 800f592:	4618      	mov	r0, r3
 800f594:	3710      	adds	r7, #16
 800f596:	46bd      	mov	sp, r7
 800f598:	bd80      	pop	{r7, pc}
 800f59a:	bf00      	nop
 800f59c:	200006f4 	.word	0x200006f4

0800f5a0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800f5a4:	f7f4 fd52 	bl	800404c <HAL_GetTick>
 800f5a8:	4603      	mov	r3, r0
}
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	bd80      	pop	{r7, pc}
	...

0800f5b0 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b0a0      	sub	sp, #128	; 0x80
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800f5b8:	f107 030c 	add.w	r3, r7, #12
 800f5bc:	2264      	movs	r2, #100	; 0x64
 800f5be:	2100      	movs	r1, #0
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	f00a fcc3 	bl	8019f4c <memset>
  int32_t PHYLinkState = 0;
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	67bb      	str	r3, [r7, #120]	; 0x78
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800f5d6:	483a      	ldr	r0, [pc, #232]	; (800f6c0 <ethernet_link_check_state+0x110>)
 800f5d8:	f7f4 fc2b 	bl	8003e32 <LAN8742_GetLinkState>
 800f5dc:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f5e4:	089b      	lsrs	r3, r3, #2
 800f5e6:	f003 0301 	and.w	r3, r3, #1
 800f5ea:	b2db      	uxtb	r3, r3
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d00c      	beq.n	800f60a <ethernet_link_check_state+0x5a>
 800f5f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f5f2:	2b01      	cmp	r3, #1
 800f5f4:	dc09      	bgt.n	800f60a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800f5f6:	4833      	ldr	r0, [pc, #204]	; (800f6c4 <ethernet_link_check_state+0x114>)
 800f5f8:	f7f6 ffa0 	bl	800653c <HAL_ETH_Stop>
    netif_set_down(netif);
 800f5fc:	6878      	ldr	r0, [r7, #4]
 800f5fe:	f001 f881 	bl	8010704 <netif_set_down>
    netif_set_link_down(netif);
 800f602:	6878      	ldr	r0, [r7, #4]
 800f604:	f001 f8e4 	bl	80107d0 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800f608:	e055      	b.n	800f6b6 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f610:	f003 0304 	and.w	r3, r3, #4
 800f614:	2b00      	cmp	r3, #0
 800f616:	d14e      	bne.n	800f6b6 <ethernet_link_check_state+0x106>
 800f618:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f61a:	2b01      	cmp	r3, #1
 800f61c:	dd4b      	ble.n	800f6b6 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800f61e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f620:	3b02      	subs	r3, #2
 800f622:	2b03      	cmp	r3, #3
 800f624:	d82a      	bhi.n	800f67c <ethernet_link_check_state+0xcc>
 800f626:	a201      	add	r2, pc, #4	; (adr r2, 800f62c <ethernet_link_check_state+0x7c>)
 800f628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f62c:	0800f63d 	.word	0x0800f63d
 800f630:	0800f64f 	.word	0x0800f64f
 800f634:	0800f65f 	.word	0x0800f65f
 800f638:	0800f66f 	.word	0x0800f66f
      duplex = ETH_FULLDUPLEX_MODE;
 800f63c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f640:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800f642:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f646:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800f648:	2301      	movs	r3, #1
 800f64a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800f64c:	e017      	b.n	800f67e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800f64e:	2300      	movs	r3, #0
 800f650:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800f652:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f656:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800f658:	2301      	movs	r3, #1
 800f65a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800f65c:	e00f      	b.n	800f67e <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800f65e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f662:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800f664:	2300      	movs	r3, #0
 800f666:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800f668:	2301      	movs	r3, #1
 800f66a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800f66c:	e007      	b.n	800f67e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800f66e:	2300      	movs	r3, #0
 800f670:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800f672:	2300      	movs	r3, #0
 800f674:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800f676:	2301      	movs	r3, #1
 800f678:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800f67a:	e000      	b.n	800f67e <ethernet_link_check_state+0xce>
      break;
 800f67c:	bf00      	nop
    if(linkchanged)
 800f67e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f680:	2b00      	cmp	r3, #0
 800f682:	d018      	beq.n	800f6b6 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800f684:	f107 030c 	add.w	r3, r7, #12
 800f688:	4619      	mov	r1, r3
 800f68a:	480e      	ldr	r0, [pc, #56]	; (800f6c4 <ethernet_link_check_state+0x114>)
 800f68c:	f7f7 f954 	bl	8006938 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800f690:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f692:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800f694:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f696:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800f698:	f107 030c 	add.w	r3, r7, #12
 800f69c:	4619      	mov	r1, r3
 800f69e:	4809      	ldr	r0, [pc, #36]	; (800f6c4 <ethernet_link_check_state+0x114>)
 800f6a0:	f7f7 fb1e 	bl	8006ce0 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800f6a4:	4807      	ldr	r0, [pc, #28]	; (800f6c4 <ethernet_link_check_state+0x114>)
 800f6a6:	f7f6 fee7 	bl	8006478 <HAL_ETH_Start>
      netif_set_up(netif);
 800f6aa:	6878      	ldr	r0, [r7, #4]
 800f6ac:	f000 ffbe 	bl	801062c <netif_set_up>
      netif_set_link_up(netif);
 800f6b0:	6878      	ldr	r0, [r7, #4]
 800f6b2:	f001 f859 	bl	8010768 <netif_set_link_up>
}
 800f6b6:	bf00      	nop
 800f6b8:	3780      	adds	r7, #128	; 0x80
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}
 800f6be:	bf00      	nop
 800f6c0:	200007dc 	.word	0x200007dc
 800f6c4:	200006f4 	.word	0x200006f4

0800f6c8 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b086      	sub	sp, #24
 800f6cc:	af02      	add	r7, sp, #8
 800f6ce:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800f6d0:	4812      	ldr	r0, [pc, #72]	; (800f71c <HAL_ETH_RxAllocateCallback+0x54>)
 800f6d2:	f000 fd25 	bl	8010120 <memp_malloc_pool>
 800f6d6:	60f8      	str	r0, [r7, #12]
  if (p)
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d014      	beq.n	800f708 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	f103 0220 	add.w	r2, r3, #32
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	4a0d      	ldr	r2, [pc, #52]	; (800f720 <HAL_ETH_RxAllocateCallback+0x58>)
 800f6ec:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800f6f6:	9201      	str	r2, [sp, #4]
 800f6f8:	9300      	str	r3, [sp, #0]
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	2241      	movs	r2, #65	; 0x41
 800f6fe:	2100      	movs	r1, #0
 800f700:	2000      	movs	r0, #0
 800f702:	f001 fa3d 	bl	8010b80 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800f706:	e005      	b.n	800f714 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800f708:	4b06      	ldr	r3, [pc, #24]	; (800f724 <HAL_ETH_RxAllocateCallback+0x5c>)
 800f70a:	2201      	movs	r2, #1
 800f70c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	2200      	movs	r2, #0
 800f712:	601a      	str	r2, [r3, #0]
}
 800f714:	bf00      	nop
 800f716:	3710      	adds	r7, #16
 800f718:	46bd      	mov	sp, r7
 800f71a:	bd80      	pop	{r7, pc}
 800f71c:	0801efec 	.word	0x0801efec
 800f720:	0800f335 	.word	0x0800f335
 800f724:	200006f0 	.word	0x200006f0

0800f728 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800f728:	b480      	push	{r7}
 800f72a:	b083      	sub	sp, #12
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	4603      	mov	r3, r0
 800f730:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800f732:	88fb      	ldrh	r3, [r7, #6]
 800f734:	021b      	lsls	r3, r3, #8
 800f736:	b21a      	sxth	r2, r3
 800f738:	88fb      	ldrh	r3, [r7, #6]
 800f73a:	0a1b      	lsrs	r3, r3, #8
 800f73c:	b29b      	uxth	r3, r3
 800f73e:	b21b      	sxth	r3, r3
 800f740:	4313      	orrs	r3, r2
 800f742:	b21b      	sxth	r3, r3
 800f744:	b29b      	uxth	r3, r3
}
 800f746:	4618      	mov	r0, r3
 800f748:	370c      	adds	r7, #12
 800f74a:	46bd      	mov	sp, r7
 800f74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f750:	4770      	bx	lr

0800f752 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800f752:	b480      	push	{r7}
 800f754:	b083      	sub	sp, #12
 800f756:	af00      	add	r7, sp, #0
 800f758:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	061a      	lsls	r2, r3, #24
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	021b      	lsls	r3, r3, #8
 800f762:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f766:	431a      	orrs	r2, r3
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	0a1b      	lsrs	r3, r3, #8
 800f76c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f770:	431a      	orrs	r2, r3
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	0e1b      	lsrs	r3, r3, #24
 800f776:	4313      	orrs	r3, r2
}
 800f778:	4618      	mov	r0, r3
 800f77a:	370c      	adds	r7, #12
 800f77c:	46bd      	mov	sp, r7
 800f77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f782:	4770      	bx	lr

0800f784 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800f784:	b480      	push	{r7}
 800f786:	b089      	sub	sp, #36	; 0x24
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
 800f78c:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800f792:	2300      	movs	r3, #0
 800f794:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800f796:	2300      	movs	r3, #0
 800f798:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800f79a:	69fb      	ldr	r3, [r7, #28]
 800f79c:	f003 0301 	and.w	r3, r3, #1
 800f7a0:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800f7a2:	693b      	ldr	r3, [r7, #16]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d00d      	beq.n	800f7c4 <lwip_standard_chksum+0x40>
 800f7a8:	683b      	ldr	r3, [r7, #0]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	dd0a      	ble.n	800f7c4 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800f7ae:	69fa      	ldr	r2, [r7, #28]
 800f7b0:	1c53      	adds	r3, r2, #1
 800f7b2:	61fb      	str	r3, [r7, #28]
 800f7b4:	f107 030e 	add.w	r3, r7, #14
 800f7b8:	3301      	adds	r3, #1
 800f7ba:	7812      	ldrb	r2, [r2, #0]
 800f7bc:	701a      	strb	r2, [r3, #0]
    len--;
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	3b01      	subs	r3, #1
 800f7c2:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800f7c4:	69fb      	ldr	r3, [r7, #28]
 800f7c6:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800f7c8:	e00a      	b.n	800f7e0 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800f7ca:	69bb      	ldr	r3, [r7, #24]
 800f7cc:	1c9a      	adds	r2, r3, #2
 800f7ce:	61ba      	str	r2, [r7, #24]
 800f7d0:	881b      	ldrh	r3, [r3, #0]
 800f7d2:	461a      	mov	r2, r3
 800f7d4:	697b      	ldr	r3, [r7, #20]
 800f7d6:	4413      	add	r3, r2
 800f7d8:	617b      	str	r3, [r7, #20]
    len -= 2;
 800f7da:	683b      	ldr	r3, [r7, #0]
 800f7dc:	3b02      	subs	r3, #2
 800f7de:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	2b01      	cmp	r3, #1
 800f7e4:	dcf1      	bgt.n	800f7ca <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800f7e6:	683b      	ldr	r3, [r7, #0]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	dd04      	ble.n	800f7f6 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800f7ec:	f107 030e 	add.w	r3, r7, #14
 800f7f0:	69ba      	ldr	r2, [r7, #24]
 800f7f2:	7812      	ldrb	r2, [r2, #0]
 800f7f4:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800f7f6:	89fb      	ldrh	r3, [r7, #14]
 800f7f8:	461a      	mov	r2, r3
 800f7fa:	697b      	ldr	r3, [r7, #20]
 800f7fc:	4413      	add	r3, r2
 800f7fe:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800f800:	697b      	ldr	r3, [r7, #20]
 800f802:	0c1a      	lsrs	r2, r3, #16
 800f804:	697b      	ldr	r3, [r7, #20]
 800f806:	b29b      	uxth	r3, r3
 800f808:	4413      	add	r3, r2
 800f80a:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800f80c:	697b      	ldr	r3, [r7, #20]
 800f80e:	0c1a      	lsrs	r2, r3, #16
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	b29b      	uxth	r3, r3
 800f814:	4413      	add	r3, r2
 800f816:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800f818:	693b      	ldr	r3, [r7, #16]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d007      	beq.n	800f82e <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800f81e:	697b      	ldr	r3, [r7, #20]
 800f820:	021b      	lsls	r3, r3, #8
 800f822:	b29a      	uxth	r2, r3
 800f824:	697b      	ldr	r3, [r7, #20]
 800f826:	0a1b      	lsrs	r3, r3, #8
 800f828:	b2db      	uxtb	r3, r3
 800f82a:	4313      	orrs	r3, r2
 800f82c:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800f82e:	697b      	ldr	r3, [r7, #20]
 800f830:	b29b      	uxth	r3, r3
}
 800f832:	4618      	mov	r0, r3
 800f834:	3724      	adds	r7, #36	; 0x24
 800f836:	46bd      	mov	sp, r7
 800f838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83c:	4770      	bx	lr

0800f83e <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800f83e:	b580      	push	{r7, lr}
 800f840:	b082      	sub	sp, #8
 800f842:	af00      	add	r7, sp, #0
 800f844:	6078      	str	r0, [r7, #4]
 800f846:	460b      	mov	r3, r1
 800f848:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800f84a:	887b      	ldrh	r3, [r7, #2]
 800f84c:	4619      	mov	r1, r3
 800f84e:	6878      	ldr	r0, [r7, #4]
 800f850:	f7ff ff98 	bl	800f784 <lwip_standard_chksum>
 800f854:	4603      	mov	r3, r0
 800f856:	43db      	mvns	r3, r3
 800f858:	b29b      	uxth	r3, r3
}
 800f85a:	4618      	mov	r0, r3
 800f85c:	3708      	adds	r7, #8
 800f85e:	46bd      	mov	sp, r7
 800f860:	bd80      	pop	{r7, pc}

0800f862 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800f862:	b580      	push	{r7, lr}
 800f864:	b086      	sub	sp, #24
 800f866:	af00      	add	r7, sp, #0
 800f868:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800f86a:	2300      	movs	r3, #0
 800f86c:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800f86e:	2300      	movs	r3, #0
 800f870:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	613b      	str	r3, [r7, #16]
 800f876:	e02b      	b.n	800f8d0 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800f878:	693b      	ldr	r3, [r7, #16]
 800f87a:	685a      	ldr	r2, [r3, #4]
 800f87c:	693b      	ldr	r3, [r7, #16]
 800f87e:	895b      	ldrh	r3, [r3, #10]
 800f880:	4619      	mov	r1, r3
 800f882:	4610      	mov	r0, r2
 800f884:	f7ff ff7e 	bl	800f784 <lwip_standard_chksum>
 800f888:	4603      	mov	r3, r0
 800f88a:	461a      	mov	r2, r3
 800f88c:	697b      	ldr	r3, [r7, #20]
 800f88e:	4413      	add	r3, r2
 800f890:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800f892:	697b      	ldr	r3, [r7, #20]
 800f894:	0c1a      	lsrs	r2, r3, #16
 800f896:	697b      	ldr	r3, [r7, #20]
 800f898:	b29b      	uxth	r3, r3
 800f89a:	4413      	add	r3, r2
 800f89c:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800f89e:	693b      	ldr	r3, [r7, #16]
 800f8a0:	895b      	ldrh	r3, [r3, #10]
 800f8a2:	f003 0301 	and.w	r3, r3, #1
 800f8a6:	b29b      	uxth	r3, r3
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d00e      	beq.n	800f8ca <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	bf0c      	ite	eq
 800f8b2:	2301      	moveq	r3, #1
 800f8b4:	2300      	movne	r3, #0
 800f8b6:	b2db      	uxtb	r3, r3
 800f8b8:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800f8ba:	697b      	ldr	r3, [r7, #20]
 800f8bc:	021b      	lsls	r3, r3, #8
 800f8be:	b29a      	uxth	r2, r3
 800f8c0:	697b      	ldr	r3, [r7, #20]
 800f8c2:	0a1b      	lsrs	r3, r3, #8
 800f8c4:	b2db      	uxtb	r3, r3
 800f8c6:	4313      	orrs	r3, r2
 800f8c8:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800f8ca:	693b      	ldr	r3, [r7, #16]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	613b      	str	r3, [r7, #16]
 800f8d0:	693b      	ldr	r3, [r7, #16]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d1d0      	bne.n	800f878 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d007      	beq.n	800f8ec <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800f8dc:	697b      	ldr	r3, [r7, #20]
 800f8de:	021b      	lsls	r3, r3, #8
 800f8e0:	b29a      	uxth	r2, r3
 800f8e2:	697b      	ldr	r3, [r7, #20]
 800f8e4:	0a1b      	lsrs	r3, r3, #8
 800f8e6:	b2db      	uxtb	r3, r3
 800f8e8:	4313      	orrs	r3, r2
 800f8ea:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800f8ec:	697b      	ldr	r3, [r7, #20]
 800f8ee:	b29b      	uxth	r3, r3
 800f8f0:	43db      	mvns	r3, r3
 800f8f2:	b29b      	uxth	r3, r3
}
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	3718      	adds	r7, #24
 800f8f8:	46bd      	mov	sp, r7
 800f8fa:	bd80      	pop	{r7, pc}

0800f8fc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b082      	sub	sp, #8
 800f900:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800f902:	2300      	movs	r3, #0
 800f904:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800f906:	f000 f8d3 	bl	800fab0 <mem_init>
  memp_init();
 800f90a:	f000 fbc5 	bl	8010098 <memp_init>
  pbuf_init();
  netif_init();
 800f90e:	f000 fcc3 	bl	8010298 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800f912:	f006 ffe3 	bl	80168dc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800f916:	f001 fd79 	bl	801140c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800f91a:	f006 ff97 	bl	801684c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800f91e:	bf00      	nop
 800f920:	3708      	adds	r7, #8
 800f922:	46bd      	mov	sp, r7
 800f924:	bd80      	pop	{r7, pc}
	...

0800f928 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800f928:	b480      	push	{r7}
 800f92a:	b083      	sub	sp, #12
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 800f930:	4b04      	ldr	r3, [pc, #16]	; (800f944 <ptr_to_mem+0x1c>)
 800f932:	681a      	ldr	r2, [r3, #0]
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	4413      	add	r3, r2
}
 800f938:	4618      	mov	r0, r3
 800f93a:	370c      	adds	r7, #12
 800f93c:	46bd      	mov	sp, r7
 800f93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f942:	4770      	bx	lr
 800f944:	20000814 	.word	0x20000814

0800f948 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800f948:	b480      	push	{r7}
 800f94a:	b083      	sub	sp, #12
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800f950:	4b04      	ldr	r3, [pc, #16]	; (800f964 <mem_to_ptr+0x1c>)
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	687a      	ldr	r2, [r7, #4]
 800f956:	1ad3      	subs	r3, r2, r3
}
 800f958:	4618      	mov	r0, r3
 800f95a:	370c      	adds	r7, #12
 800f95c:	46bd      	mov	sp, r7
 800f95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f962:	4770      	bx	lr
 800f964:	20000814 	.word	0x20000814

0800f968 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800f968:	b590      	push	{r4, r7, lr}
 800f96a:	b085      	sub	sp, #20
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800f970:	4b45      	ldr	r3, [pc, #276]	; (800fa88 <plug_holes+0x120>)
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	687a      	ldr	r2, [r7, #4]
 800f976:	429a      	cmp	r2, r3
 800f978:	d206      	bcs.n	800f988 <plug_holes+0x20>
 800f97a:	4b44      	ldr	r3, [pc, #272]	; (800fa8c <plug_holes+0x124>)
 800f97c:	f240 12df 	movw	r2, #479	; 0x1df
 800f980:	4943      	ldr	r1, [pc, #268]	; (800fa90 <plug_holes+0x128>)
 800f982:	4844      	ldr	r0, [pc, #272]	; (800fa94 <plug_holes+0x12c>)
 800f984:	f00a f98c 	bl	8019ca0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800f988:	4b43      	ldr	r3, [pc, #268]	; (800fa98 <plug_holes+0x130>)
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	687a      	ldr	r2, [r7, #4]
 800f98e:	429a      	cmp	r2, r3
 800f990:	d306      	bcc.n	800f9a0 <plug_holes+0x38>
 800f992:	4b3e      	ldr	r3, [pc, #248]	; (800fa8c <plug_holes+0x124>)
 800f994:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f998:	4940      	ldr	r1, [pc, #256]	; (800fa9c <plug_holes+0x134>)
 800f99a:	483e      	ldr	r0, [pc, #248]	; (800fa94 <plug_holes+0x12c>)
 800f99c:	f00a f980 	bl	8019ca0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	7a1b      	ldrb	r3, [r3, #8]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d006      	beq.n	800f9b6 <plug_holes+0x4e>
 800f9a8:	4b38      	ldr	r3, [pc, #224]	; (800fa8c <plug_holes+0x124>)
 800f9aa:	f240 12e1 	movw	r2, #481	; 0x1e1
 800f9ae:	493c      	ldr	r1, [pc, #240]	; (800faa0 <plug_holes+0x138>)
 800f9b0:	4838      	ldr	r0, [pc, #224]	; (800fa94 <plug_holes+0x12c>)
 800f9b2:	f00a f975 	bl	8019ca0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	4a3a      	ldr	r2, [pc, #232]	; (800faa4 <plug_holes+0x13c>)
 800f9bc:	4293      	cmp	r3, r2
 800f9be:	d906      	bls.n	800f9ce <plug_holes+0x66>
 800f9c0:	4b32      	ldr	r3, [pc, #200]	; (800fa8c <plug_holes+0x124>)
 800f9c2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800f9c6:	4938      	ldr	r1, [pc, #224]	; (800faa8 <plug_holes+0x140>)
 800f9c8:	4832      	ldr	r0, [pc, #200]	; (800fa94 <plug_holes+0x12c>)
 800f9ca:	f00a f969 	bl	8019ca0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	f7ff ffa8 	bl	800f928 <ptr_to_mem>
 800f9d8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800f9da:	687a      	ldr	r2, [r7, #4]
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	429a      	cmp	r2, r3
 800f9e0:	d024      	beq.n	800fa2c <plug_holes+0xc4>
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	7a1b      	ldrb	r3, [r3, #8]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d120      	bne.n	800fa2c <plug_holes+0xc4>
 800f9ea:	4b2b      	ldr	r3, [pc, #172]	; (800fa98 <plug_holes+0x130>)
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	68fa      	ldr	r2, [r7, #12]
 800f9f0:	429a      	cmp	r2, r3
 800f9f2:	d01b      	beq.n	800fa2c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800f9f4:	4b2d      	ldr	r3, [pc, #180]	; (800faac <plug_holes+0x144>)
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	68fa      	ldr	r2, [r7, #12]
 800f9fa:	429a      	cmp	r2, r3
 800f9fc:	d102      	bne.n	800fa04 <plug_holes+0x9c>
      lfree = mem;
 800f9fe:	4a2b      	ldr	r2, [pc, #172]	; (800faac <plug_holes+0x144>)
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	681a      	ldr	r2, [r3, #0]
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	4a24      	ldr	r2, [pc, #144]	; (800faa4 <plug_holes+0x13c>)
 800fa12:	4293      	cmp	r3, r2
 800fa14:	d00a      	beq.n	800fa2c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	f7ff ff84 	bl	800f928 <ptr_to_mem>
 800fa20:	4604      	mov	r4, r0
 800fa22:	6878      	ldr	r0, [r7, #4]
 800fa24:	f7ff ff90 	bl	800f948 <mem_to_ptr>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	685b      	ldr	r3, [r3, #4]
 800fa30:	4618      	mov	r0, r3
 800fa32:	f7ff ff79 	bl	800f928 <ptr_to_mem>
 800fa36:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800fa38:	68ba      	ldr	r2, [r7, #8]
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	429a      	cmp	r2, r3
 800fa3e:	d01f      	beq.n	800fa80 <plug_holes+0x118>
 800fa40:	68bb      	ldr	r3, [r7, #8]
 800fa42:	7a1b      	ldrb	r3, [r3, #8]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d11b      	bne.n	800fa80 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800fa48:	4b18      	ldr	r3, [pc, #96]	; (800faac <plug_holes+0x144>)
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	687a      	ldr	r2, [r7, #4]
 800fa4e:	429a      	cmp	r2, r3
 800fa50:	d102      	bne.n	800fa58 <plug_holes+0xf0>
      lfree = pmem;
 800fa52:	4a16      	ldr	r2, [pc, #88]	; (800faac <plug_holes+0x144>)
 800fa54:	68bb      	ldr	r3, [r7, #8]
 800fa56:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	681a      	ldr	r2, [r3, #0]
 800fa5c:	68bb      	ldr	r3, [r7, #8]
 800fa5e:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	4a0f      	ldr	r2, [pc, #60]	; (800faa4 <plug_holes+0x13c>)
 800fa66:	4293      	cmp	r3, r2
 800fa68:	d00a      	beq.n	800fa80 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	4618      	mov	r0, r3
 800fa70:	f7ff ff5a 	bl	800f928 <ptr_to_mem>
 800fa74:	4604      	mov	r4, r0
 800fa76:	68b8      	ldr	r0, [r7, #8]
 800fa78:	f7ff ff66 	bl	800f948 <mem_to_ptr>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	6063      	str	r3, [r4, #4]
    }
  }
}
 800fa80:	bf00      	nop
 800fa82:	3714      	adds	r7, #20
 800fa84:	46bd      	mov	sp, r7
 800fa86:	bd90      	pop	{r4, r7, pc}
 800fa88:	20000814 	.word	0x20000814
 800fa8c:	0801c628 	.word	0x0801c628
 800fa90:	0801c658 	.word	0x0801c658
 800fa94:	0801c670 	.word	0x0801c670
 800fa98:	20000818 	.word	0x20000818
 800fa9c:	0801c698 	.word	0x0801c698
 800faa0:	0801c6b4 	.word	0x0801c6b4
 800faa4:	0001ffe8 	.word	0x0001ffe8
 800faa8:	0801c6d0 	.word	0x0801c6d0
 800faac:	2000081c 	.word	0x2000081c

0800fab0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	b082      	sub	sp, #8
 800fab4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800fab6:	4b14      	ldr	r3, [pc, #80]	; (800fb08 <mem_init+0x58>)
 800fab8:	4a14      	ldr	r2, [pc, #80]	; (800fb0c <mem_init+0x5c>)
 800faba:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800fabc:	4b12      	ldr	r3, [pc, #72]	; (800fb08 <mem_init+0x58>)
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	4a12      	ldr	r2, [pc, #72]	; (800fb10 <mem_init+0x60>)
 800fac6:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	2200      	movs	r2, #0
 800facc:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2200      	movs	r2, #0
 800fad2:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800fad4:	480e      	ldr	r0, [pc, #56]	; (800fb10 <mem_init+0x60>)
 800fad6:	f7ff ff27 	bl	800f928 <ptr_to_mem>
 800fada:	4603      	mov	r3, r0
 800fadc:	4a0d      	ldr	r2, [pc, #52]	; (800fb14 <mem_init+0x64>)
 800fade:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800fae0:	4b0c      	ldr	r3, [pc, #48]	; (800fb14 <mem_init+0x64>)
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	2201      	movs	r2, #1
 800fae6:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 800fae8:	4b0a      	ldr	r3, [pc, #40]	; (800fb14 <mem_init+0x64>)
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	4a08      	ldr	r2, [pc, #32]	; (800fb10 <mem_init+0x60>)
 800faee:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800faf0:	4b08      	ldr	r3, [pc, #32]	; (800fb14 <mem_init+0x64>)
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	4a06      	ldr	r2, [pc, #24]	; (800fb10 <mem_init+0x60>)
 800faf6:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800faf8:	4b03      	ldr	r3, [pc, #12]	; (800fb08 <mem_init+0x58>)
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	4a06      	ldr	r2, [pc, #24]	; (800fb18 <mem_init+0x68>)
 800fafe:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800fb00:	bf00      	nop
 800fb02:	3708      	adds	r7, #8
 800fb04:	46bd      	mov	sp, r7
 800fb06:	bd80      	pop	{r7, pc}
 800fb08:	20000814 	.word	0x20000814
 800fb0c:	30020000 	.word	0x30020000
 800fb10:	0001ffe8 	.word	0x0001ffe8
 800fb14:	20000818 	.word	0x20000818
 800fb18:	2000081c 	.word	0x2000081c

0800fb1c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b086      	sub	sp, #24
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800fb24:	6878      	ldr	r0, [r7, #4]
 800fb26:	f7ff ff0f 	bl	800f948 <mem_to_ptr>
 800fb2a:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	4618      	mov	r0, r3
 800fb32:	f7ff fef9 	bl	800f928 <ptr_to_mem>
 800fb36:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	685b      	ldr	r3, [r3, #4]
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f7ff fef3 	bl	800f928 <ptr_to_mem>
 800fb42:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	4a11      	ldr	r2, [pc, #68]	; (800fb90 <mem_link_valid+0x74>)
 800fb4a:	4293      	cmp	r3, r2
 800fb4c:	d818      	bhi.n	800fb80 <mem_link_valid+0x64>
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	685b      	ldr	r3, [r3, #4]
 800fb52:	4a0f      	ldr	r2, [pc, #60]	; (800fb90 <mem_link_valid+0x74>)
 800fb54:	4293      	cmp	r3, r2
 800fb56:	d813      	bhi.n	800fb80 <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800fb5c:	697a      	ldr	r2, [r7, #20]
 800fb5e:	429a      	cmp	r2, r3
 800fb60:	d004      	beq.n	800fb6c <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	697a      	ldr	r2, [r7, #20]
 800fb68:	429a      	cmp	r2, r3
 800fb6a:	d109      	bne.n	800fb80 <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800fb6c:	4b09      	ldr	r3, [pc, #36]	; (800fb94 <mem_link_valid+0x78>)
 800fb6e:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fb70:	693a      	ldr	r2, [r7, #16]
 800fb72:	429a      	cmp	r2, r3
 800fb74:	d006      	beq.n	800fb84 <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800fb76:	693b      	ldr	r3, [r7, #16]
 800fb78:	685b      	ldr	r3, [r3, #4]
 800fb7a:	697a      	ldr	r2, [r7, #20]
 800fb7c:	429a      	cmp	r2, r3
 800fb7e:	d001      	beq.n	800fb84 <mem_link_valid+0x68>
    return 0;
 800fb80:	2300      	movs	r3, #0
 800fb82:	e000      	b.n	800fb86 <mem_link_valid+0x6a>
  }
  return 1;
 800fb84:	2301      	movs	r3, #1
}
 800fb86:	4618      	mov	r0, r3
 800fb88:	3718      	adds	r7, #24
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	bd80      	pop	{r7, pc}
 800fb8e:	bf00      	nop
 800fb90:	0001ffe8 	.word	0x0001ffe8
 800fb94:	20000818 	.word	0x20000818

0800fb98 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b084      	sub	sp, #16
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d04c      	beq.n	800fc40 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	f003 0303 	and.w	r3, r3, #3
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d007      	beq.n	800fbc0 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800fbb0:	4b25      	ldr	r3, [pc, #148]	; (800fc48 <mem_free+0xb0>)
 800fbb2:	f240 2273 	movw	r2, #627	; 0x273
 800fbb6:	4925      	ldr	r1, [pc, #148]	; (800fc4c <mem_free+0xb4>)
 800fbb8:	4825      	ldr	r0, [pc, #148]	; (800fc50 <mem_free+0xb8>)
 800fbba:	f00a f871 	bl	8019ca0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800fbbe:	e040      	b.n	800fc42 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	3b0c      	subs	r3, #12
 800fbc4:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800fbc6:	4b23      	ldr	r3, [pc, #140]	; (800fc54 <mem_free+0xbc>)
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	68fa      	ldr	r2, [r7, #12]
 800fbcc:	429a      	cmp	r2, r3
 800fbce:	d306      	bcc.n	800fbde <mem_free+0x46>
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	f103 020c 	add.w	r2, r3, #12
 800fbd6:	4b20      	ldr	r3, [pc, #128]	; (800fc58 <mem_free+0xc0>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	429a      	cmp	r2, r3
 800fbdc:	d907      	bls.n	800fbee <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800fbde:	4b1a      	ldr	r3, [pc, #104]	; (800fc48 <mem_free+0xb0>)
 800fbe0:	f240 227f 	movw	r2, #639	; 0x27f
 800fbe4:	491d      	ldr	r1, [pc, #116]	; (800fc5c <mem_free+0xc4>)
 800fbe6:	481a      	ldr	r0, [pc, #104]	; (800fc50 <mem_free+0xb8>)
 800fbe8:	f00a f85a 	bl	8019ca0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800fbec:	e029      	b.n	800fc42 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	7a1b      	ldrb	r3, [r3, #8]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d107      	bne.n	800fc06 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800fbf6:	4b14      	ldr	r3, [pc, #80]	; (800fc48 <mem_free+0xb0>)
 800fbf8:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800fbfc:	4918      	ldr	r1, [pc, #96]	; (800fc60 <mem_free+0xc8>)
 800fbfe:	4814      	ldr	r0, [pc, #80]	; (800fc50 <mem_free+0xb8>)
 800fc00:	f00a f84e 	bl	8019ca0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800fc04:	e01d      	b.n	800fc42 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800fc06:	68f8      	ldr	r0, [r7, #12]
 800fc08:	f7ff ff88 	bl	800fb1c <mem_link_valid>
 800fc0c:	4603      	mov	r3, r0
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d107      	bne.n	800fc22 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800fc12:	4b0d      	ldr	r3, [pc, #52]	; (800fc48 <mem_free+0xb0>)
 800fc14:	f240 2295 	movw	r2, #661	; 0x295
 800fc18:	4912      	ldr	r1, [pc, #72]	; (800fc64 <mem_free+0xcc>)
 800fc1a:	480d      	ldr	r0, [pc, #52]	; (800fc50 <mem_free+0xb8>)
 800fc1c:	f00a f840 	bl	8019ca0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800fc20:	e00f      	b.n	800fc42 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	2200      	movs	r2, #0
 800fc26:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 800fc28:	4b0f      	ldr	r3, [pc, #60]	; (800fc68 <mem_free+0xd0>)
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	68fa      	ldr	r2, [r7, #12]
 800fc2e:	429a      	cmp	r2, r3
 800fc30:	d202      	bcs.n	800fc38 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800fc32:	4a0d      	ldr	r2, [pc, #52]	; (800fc68 <mem_free+0xd0>)
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800fc38:	68f8      	ldr	r0, [r7, #12]
 800fc3a:	f7ff fe95 	bl	800f968 <plug_holes>
 800fc3e:	e000      	b.n	800fc42 <mem_free+0xaa>
    return;
 800fc40:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800fc42:	3710      	adds	r7, #16
 800fc44:	46bd      	mov	sp, r7
 800fc46:	bd80      	pop	{r7, pc}
 800fc48:	0801c628 	.word	0x0801c628
 800fc4c:	0801c6fc 	.word	0x0801c6fc
 800fc50:	0801c670 	.word	0x0801c670
 800fc54:	20000814 	.word	0x20000814
 800fc58:	20000818 	.word	0x20000818
 800fc5c:	0801c720 	.word	0x0801c720
 800fc60:	0801c73c 	.word	0x0801c73c
 800fc64:	0801c764 	.word	0x0801c764
 800fc68:	2000081c 	.word	0x2000081c

0800fc6c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b08a      	sub	sp, #40	; 0x28
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
 800fc74:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800fc76:	683b      	ldr	r3, [r7, #0]
 800fc78:	3303      	adds	r3, #3
 800fc7a:	f023 0303 	bic.w	r3, r3, #3
 800fc7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 800fc80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc82:	2b0b      	cmp	r3, #11
 800fc84:	d801      	bhi.n	800fc8a <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800fc86:	230c      	movs	r3, #12
 800fc88:	627b      	str	r3, [r7, #36]	; 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800fc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc8c:	4a68      	ldr	r2, [pc, #416]	; (800fe30 <mem_trim+0x1c4>)
 800fc8e:	4293      	cmp	r3, r2
 800fc90:	d803      	bhi.n	800fc9a <mem_trim+0x2e>
 800fc92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc94:	683b      	ldr	r3, [r7, #0]
 800fc96:	429a      	cmp	r2, r3
 800fc98:	d201      	bcs.n	800fc9e <mem_trim+0x32>
    return NULL;
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	e0c4      	b.n	800fe28 <mem_trim+0x1bc>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800fc9e:	4b65      	ldr	r3, [pc, #404]	; (800fe34 <mem_trim+0x1c8>)
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	687a      	ldr	r2, [r7, #4]
 800fca4:	429a      	cmp	r2, r3
 800fca6:	d304      	bcc.n	800fcb2 <mem_trim+0x46>
 800fca8:	4b63      	ldr	r3, [pc, #396]	; (800fe38 <mem_trim+0x1cc>)
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	687a      	ldr	r2, [r7, #4]
 800fcae:	429a      	cmp	r2, r3
 800fcb0:	d306      	bcc.n	800fcc0 <mem_trim+0x54>
 800fcb2:	4b62      	ldr	r3, [pc, #392]	; (800fe3c <mem_trim+0x1d0>)
 800fcb4:	f240 22d1 	movw	r2, #721	; 0x2d1
 800fcb8:	4961      	ldr	r1, [pc, #388]	; (800fe40 <mem_trim+0x1d4>)
 800fcba:	4862      	ldr	r0, [pc, #392]	; (800fe44 <mem_trim+0x1d8>)
 800fcbc:	f009 fff0 	bl	8019ca0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800fcc0:	4b5c      	ldr	r3, [pc, #368]	; (800fe34 <mem_trim+0x1c8>)
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	687a      	ldr	r2, [r7, #4]
 800fcc6:	429a      	cmp	r2, r3
 800fcc8:	d304      	bcc.n	800fcd4 <mem_trim+0x68>
 800fcca:	4b5b      	ldr	r3, [pc, #364]	; (800fe38 <mem_trim+0x1cc>)
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	687a      	ldr	r2, [r7, #4]
 800fcd0:	429a      	cmp	r2, r3
 800fcd2:	d301      	bcc.n	800fcd8 <mem_trim+0x6c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	e0a7      	b.n	800fe28 <mem_trim+0x1bc>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	3b0c      	subs	r3, #12
 800fcdc:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800fcde:	6a38      	ldr	r0, [r7, #32]
 800fce0:	f7ff fe32 	bl	800f948 <mem_to_ptr>
 800fce4:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800fce6:	6a3b      	ldr	r3, [r7, #32]
 800fce8:	681a      	ldr	r2, [r3, #0]
 800fcea:	69fb      	ldr	r3, [r7, #28]
 800fcec:	1ad3      	subs	r3, r2, r3
 800fcee:	3b0c      	subs	r3, #12
 800fcf0:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800fcf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fcf4:	69bb      	ldr	r3, [r7, #24]
 800fcf6:	429a      	cmp	r2, r3
 800fcf8:	d906      	bls.n	800fd08 <mem_trim+0x9c>
 800fcfa:	4b50      	ldr	r3, [pc, #320]	; (800fe3c <mem_trim+0x1d0>)
 800fcfc:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800fd00:	4951      	ldr	r1, [pc, #324]	; (800fe48 <mem_trim+0x1dc>)
 800fd02:	4850      	ldr	r0, [pc, #320]	; (800fe44 <mem_trim+0x1d8>)
 800fd04:	f009 ffcc 	bl	8019ca0 <iprintf>
  if (newsize > size) {
 800fd08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd0a:	69bb      	ldr	r3, [r7, #24]
 800fd0c:	429a      	cmp	r2, r3
 800fd0e:	d901      	bls.n	800fd14 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 800fd10:	2300      	movs	r3, #0
 800fd12:	e089      	b.n	800fe28 <mem_trim+0x1bc>
  }
  if (newsize == size) {
 800fd14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd16:	69bb      	ldr	r3, [r7, #24]
 800fd18:	429a      	cmp	r2, r3
 800fd1a:	d101      	bne.n	800fd20 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	e083      	b.n	800fe28 <mem_trim+0x1bc>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800fd20:	6a3b      	ldr	r3, [r7, #32]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	4618      	mov	r0, r3
 800fd26:	f7ff fdff 	bl	800f928 <ptr_to_mem>
 800fd2a:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 800fd2c:	697b      	ldr	r3, [r7, #20]
 800fd2e:	7a1b      	ldrb	r3, [r3, #8]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d13c      	bne.n	800fdae <mem_trim+0x142>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800fd34:	6a3b      	ldr	r3, [r7, #32]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	4a3d      	ldr	r2, [pc, #244]	; (800fe30 <mem_trim+0x1c4>)
 800fd3a:	4293      	cmp	r3, r2
 800fd3c:	d106      	bne.n	800fd4c <mem_trim+0xe0>
 800fd3e:	4b3f      	ldr	r3, [pc, #252]	; (800fe3c <mem_trim+0x1d0>)
 800fd40:	f240 22f5 	movw	r2, #757	; 0x2f5
 800fd44:	4941      	ldr	r1, [pc, #260]	; (800fe4c <mem_trim+0x1e0>)
 800fd46:	483f      	ldr	r0, [pc, #252]	; (800fe44 <mem_trim+0x1d8>)
 800fd48:	f009 ffaa 	bl	8019ca0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800fd4c:	697b      	ldr	r3, [r7, #20]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800fd52:	69fa      	ldr	r2, [r7, #28]
 800fd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd56:	4413      	add	r3, r2
 800fd58:	330c      	adds	r3, #12
 800fd5a:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 800fd5c:	4b3c      	ldr	r3, [pc, #240]	; (800fe50 <mem_trim+0x1e4>)
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	697a      	ldr	r2, [r7, #20]
 800fd62:	429a      	cmp	r2, r3
 800fd64:	d105      	bne.n	800fd72 <mem_trim+0x106>
      lfree = ptr_to_mem(ptr2);
 800fd66:	6938      	ldr	r0, [r7, #16]
 800fd68:	f7ff fdde 	bl	800f928 <ptr_to_mem>
 800fd6c:	4603      	mov	r3, r0
 800fd6e:	4a38      	ldr	r2, [pc, #224]	; (800fe50 <mem_trim+0x1e4>)
 800fd70:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800fd72:	6938      	ldr	r0, [r7, #16]
 800fd74:	f7ff fdd8 	bl	800f928 <ptr_to_mem>
 800fd78:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 800fd7a:	697b      	ldr	r3, [r7, #20]
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 800fd80:	697b      	ldr	r3, [r7, #20]
 800fd82:	68fa      	ldr	r2, [r7, #12]
 800fd84:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800fd86:	697b      	ldr	r3, [r7, #20]
 800fd88:	69fa      	ldr	r2, [r7, #28]
 800fd8a:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 800fd8c:	6a3b      	ldr	r3, [r7, #32]
 800fd8e:	693a      	ldr	r2, [r7, #16]
 800fd90:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800fd92:	697b      	ldr	r3, [r7, #20]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	4a26      	ldr	r2, [pc, #152]	; (800fe30 <mem_trim+0x1c4>)
 800fd98:	4293      	cmp	r3, r2
 800fd9a:	d044      	beq.n	800fe26 <mem_trim+0x1ba>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800fd9c:	697b      	ldr	r3, [r7, #20]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	4618      	mov	r0, r3
 800fda2:	f7ff fdc1 	bl	800f928 <ptr_to_mem>
 800fda6:	4602      	mov	r2, r0
 800fda8:	693b      	ldr	r3, [r7, #16]
 800fdaa:	6053      	str	r3, [r2, #4]
 800fdac:	e03b      	b.n	800fe26 <mem_trim+0x1ba>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800fdae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdb0:	3318      	adds	r3, #24
 800fdb2:	69ba      	ldr	r2, [r7, #24]
 800fdb4:	429a      	cmp	r2, r3
 800fdb6:	d336      	bcc.n	800fe26 <mem_trim+0x1ba>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800fdb8:	69fa      	ldr	r2, [r7, #28]
 800fdba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdbc:	4413      	add	r3, r2
 800fdbe:	330c      	adds	r3, #12
 800fdc0:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800fdc2:	6a3b      	ldr	r3, [r7, #32]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	4a1a      	ldr	r2, [pc, #104]	; (800fe30 <mem_trim+0x1c4>)
 800fdc8:	4293      	cmp	r3, r2
 800fdca:	d106      	bne.n	800fdda <mem_trim+0x16e>
 800fdcc:	4b1b      	ldr	r3, [pc, #108]	; (800fe3c <mem_trim+0x1d0>)
 800fdce:	f240 3216 	movw	r2, #790	; 0x316
 800fdd2:	491e      	ldr	r1, [pc, #120]	; (800fe4c <mem_trim+0x1e0>)
 800fdd4:	481b      	ldr	r0, [pc, #108]	; (800fe44 <mem_trim+0x1d8>)
 800fdd6:	f009 ff63 	bl	8019ca0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800fdda:	6938      	ldr	r0, [r7, #16]
 800fddc:	f7ff fda4 	bl	800f928 <ptr_to_mem>
 800fde0:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 800fde2:	4b1b      	ldr	r3, [pc, #108]	; (800fe50 <mem_trim+0x1e4>)
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	697a      	ldr	r2, [r7, #20]
 800fde8:	429a      	cmp	r2, r3
 800fdea:	d202      	bcs.n	800fdf2 <mem_trim+0x186>
      lfree = mem2;
 800fdec:	4a18      	ldr	r2, [pc, #96]	; (800fe50 <mem_trim+0x1e4>)
 800fdee:	697b      	ldr	r3, [r7, #20]
 800fdf0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800fdf2:	697b      	ldr	r3, [r7, #20]
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 800fdf8:	6a3b      	ldr	r3, [r7, #32]
 800fdfa:	681a      	ldr	r2, [r3, #0]
 800fdfc:	697b      	ldr	r3, [r7, #20]
 800fdfe:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 800fe00:	697b      	ldr	r3, [r7, #20]
 800fe02:	69fa      	ldr	r2, [r7, #28]
 800fe04:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 800fe06:	6a3b      	ldr	r3, [r7, #32]
 800fe08:	693a      	ldr	r2, [r7, #16]
 800fe0a:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800fe0c:	697b      	ldr	r3, [r7, #20]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	4a07      	ldr	r2, [pc, #28]	; (800fe30 <mem_trim+0x1c4>)
 800fe12:	4293      	cmp	r3, r2
 800fe14:	d007      	beq.n	800fe26 <mem_trim+0x1ba>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800fe16:	697b      	ldr	r3, [r7, #20]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	f7ff fd84 	bl	800f928 <ptr_to_mem>
 800fe20:	4602      	mov	r2, r0
 800fe22:	693b      	ldr	r3, [r7, #16]
 800fe24:	6053      	str	r3, [r2, #4]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800fe26:	687b      	ldr	r3, [r7, #4]
}
 800fe28:	4618      	mov	r0, r3
 800fe2a:	3728      	adds	r7, #40	; 0x28
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	bd80      	pop	{r7, pc}
 800fe30:	0001ffe8 	.word	0x0001ffe8
 800fe34:	20000814 	.word	0x20000814
 800fe38:	20000818 	.word	0x20000818
 800fe3c:	0801c628 	.word	0x0801c628
 800fe40:	0801c798 	.word	0x0801c798
 800fe44:	0801c670 	.word	0x0801c670
 800fe48:	0801c7b0 	.word	0x0801c7b0
 800fe4c:	0801c7d0 	.word	0x0801c7d0
 800fe50:	2000081c 	.word	0x2000081c

0800fe54 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b088      	sub	sp, #32
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d101      	bne.n	800fe66 <mem_malloc+0x12>
    return NULL;
 800fe62:	2300      	movs	r3, #0
 800fe64:	e0d0      	b.n	8010008 <mem_malloc+0x1b4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	3303      	adds	r3, #3
 800fe6a:	f023 0303 	bic.w	r3, r3, #3
 800fe6e:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 800fe70:	69bb      	ldr	r3, [r7, #24]
 800fe72:	2b0b      	cmp	r3, #11
 800fe74:	d801      	bhi.n	800fe7a <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800fe76:	230c      	movs	r3, #12
 800fe78:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800fe7a:	69bb      	ldr	r3, [r7, #24]
 800fe7c:	4a64      	ldr	r2, [pc, #400]	; (8010010 <mem_malloc+0x1bc>)
 800fe7e:	4293      	cmp	r3, r2
 800fe80:	d803      	bhi.n	800fe8a <mem_malloc+0x36>
 800fe82:	69ba      	ldr	r2, [r7, #24]
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	429a      	cmp	r2, r3
 800fe88:	d201      	bcs.n	800fe8e <mem_malloc+0x3a>
    return NULL;
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	e0bc      	b.n	8010008 <mem_malloc+0x1b4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800fe8e:	4b61      	ldr	r3, [pc, #388]	; (8010014 <mem_malloc+0x1c0>)
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	4618      	mov	r0, r3
 800fe94:	f7ff fd58 	bl	800f948 <mem_to_ptr>
 800fe98:	61f8      	str	r0, [r7, #28]
 800fe9a:	e0ad      	b.n	800fff8 <mem_malloc+0x1a4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800fe9c:	69f8      	ldr	r0, [r7, #28]
 800fe9e:	f7ff fd43 	bl	800f928 <ptr_to_mem>
 800fea2:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800fea4:	693b      	ldr	r3, [r7, #16]
 800fea6:	7a1b      	ldrb	r3, [r3, #8]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	f040 809f 	bne.w	800ffec <mem_malloc+0x198>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800feae:	693b      	ldr	r3, [r7, #16]
 800feb0:	681a      	ldr	r2, [r3, #0]
 800feb2:	69fb      	ldr	r3, [r7, #28]
 800feb4:	1ad3      	subs	r3, r2, r3
 800feb6:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 800feb8:	69ba      	ldr	r2, [r7, #24]
 800feba:	429a      	cmp	r2, r3
 800febc:	f200 8096 	bhi.w	800ffec <mem_malloc+0x198>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800fec0:	693b      	ldr	r3, [r7, #16]
 800fec2:	681a      	ldr	r2, [r3, #0]
 800fec4:	69fb      	ldr	r3, [r7, #28]
 800fec6:	1ad3      	subs	r3, r2, r3
 800fec8:	f1a3 020c 	sub.w	r2, r3, #12
 800fecc:	69bb      	ldr	r3, [r7, #24]
 800fece:	3318      	adds	r3, #24
 800fed0:	429a      	cmp	r2, r3
 800fed2:	d331      	bcc.n	800ff38 <mem_malloc+0xe4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800fed4:	69fa      	ldr	r2, [r7, #28]
 800fed6:	69bb      	ldr	r3, [r7, #24]
 800fed8:	4413      	add	r3, r2
 800feda:	330c      	adds	r3, #12
 800fedc:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	4a4b      	ldr	r2, [pc, #300]	; (8010010 <mem_malloc+0x1bc>)
 800fee2:	4293      	cmp	r3, r2
 800fee4:	d106      	bne.n	800fef4 <mem_malloc+0xa0>
 800fee6:	4b4c      	ldr	r3, [pc, #304]	; (8010018 <mem_malloc+0x1c4>)
 800fee8:	f240 3287 	movw	r2, #903	; 0x387
 800feec:	494b      	ldr	r1, [pc, #300]	; (801001c <mem_malloc+0x1c8>)
 800feee:	484c      	ldr	r0, [pc, #304]	; (8010020 <mem_malloc+0x1cc>)
 800fef0:	f009 fed6 	bl	8019ca0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800fef4:	68f8      	ldr	r0, [r7, #12]
 800fef6:	f7ff fd17 	bl	800f928 <ptr_to_mem>
 800fefa:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 800fefc:	68bb      	ldr	r3, [r7, #8]
 800fefe:	2200      	movs	r2, #0
 800ff00:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 800ff02:	693b      	ldr	r3, [r7, #16]
 800ff04:	681a      	ldr	r2, [r3, #0]
 800ff06:	68bb      	ldr	r3, [r7, #8]
 800ff08:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 800ff0a:	68bb      	ldr	r3, [r7, #8]
 800ff0c:	69fa      	ldr	r2, [r7, #28]
 800ff0e:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800ff10:	693b      	ldr	r3, [r7, #16]
 800ff12:	68fa      	ldr	r2, [r7, #12]
 800ff14:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 800ff16:	693b      	ldr	r3, [r7, #16]
 800ff18:	2201      	movs	r2, #1
 800ff1a:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800ff1c:	68bb      	ldr	r3, [r7, #8]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	4a3b      	ldr	r2, [pc, #236]	; (8010010 <mem_malloc+0x1bc>)
 800ff22:	4293      	cmp	r3, r2
 800ff24:	d00b      	beq.n	800ff3e <mem_malloc+0xea>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800ff26:	68bb      	ldr	r3, [r7, #8]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	f7ff fcfc 	bl	800f928 <ptr_to_mem>
 800ff30:	4602      	mov	r2, r0
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	6053      	str	r3, [r2, #4]
 800ff36:	e002      	b.n	800ff3e <mem_malloc+0xea>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800ff38:	693b      	ldr	r3, [r7, #16]
 800ff3a:	2201      	movs	r2, #1
 800ff3c:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ff3e:	4b35      	ldr	r3, [pc, #212]	; (8010014 <mem_malloc+0x1c0>)
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	693a      	ldr	r2, [r7, #16]
 800ff44:	429a      	cmp	r2, r3
 800ff46:	d127      	bne.n	800ff98 <mem_malloc+0x144>
          struct mem *cur = lfree;
 800ff48:	4b32      	ldr	r3, [pc, #200]	; (8010014 <mem_malloc+0x1c0>)
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ff4e:	e005      	b.n	800ff5c <mem_malloc+0x108>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800ff50:	697b      	ldr	r3, [r7, #20]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	4618      	mov	r0, r3
 800ff56:	f7ff fce7 	bl	800f928 <ptr_to_mem>
 800ff5a:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 800ff5c:	697b      	ldr	r3, [r7, #20]
 800ff5e:	7a1b      	ldrb	r3, [r3, #8]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d004      	beq.n	800ff6e <mem_malloc+0x11a>
 800ff64:	4b2f      	ldr	r3, [pc, #188]	; (8010024 <mem_malloc+0x1d0>)
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	697a      	ldr	r2, [r7, #20]
 800ff6a:	429a      	cmp	r2, r3
 800ff6c:	d1f0      	bne.n	800ff50 <mem_malloc+0xfc>
          }
          lfree = cur;
 800ff6e:	4a29      	ldr	r2, [pc, #164]	; (8010014 <mem_malloc+0x1c0>)
 800ff70:	697b      	ldr	r3, [r7, #20]
 800ff72:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ff74:	4b27      	ldr	r3, [pc, #156]	; (8010014 <mem_malloc+0x1c0>)
 800ff76:	681a      	ldr	r2, [r3, #0]
 800ff78:	4b2a      	ldr	r3, [pc, #168]	; (8010024 <mem_malloc+0x1d0>)
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	429a      	cmp	r2, r3
 800ff7e:	d00b      	beq.n	800ff98 <mem_malloc+0x144>
 800ff80:	4b24      	ldr	r3, [pc, #144]	; (8010014 <mem_malloc+0x1c0>)
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	7a1b      	ldrb	r3, [r3, #8]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d006      	beq.n	800ff98 <mem_malloc+0x144>
 800ff8a:	4b23      	ldr	r3, [pc, #140]	; (8010018 <mem_malloc+0x1c4>)
 800ff8c:	f240 32b5 	movw	r2, #949	; 0x3b5
 800ff90:	4925      	ldr	r1, [pc, #148]	; (8010028 <mem_malloc+0x1d4>)
 800ff92:	4823      	ldr	r0, [pc, #140]	; (8010020 <mem_malloc+0x1cc>)
 800ff94:	f009 fe84 	bl	8019ca0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ff98:	693a      	ldr	r2, [r7, #16]
 800ff9a:	69bb      	ldr	r3, [r7, #24]
 800ff9c:	4413      	add	r3, r2
 800ff9e:	330c      	adds	r3, #12
 800ffa0:	4a20      	ldr	r2, [pc, #128]	; (8010024 <mem_malloc+0x1d0>)
 800ffa2:	6812      	ldr	r2, [r2, #0]
 800ffa4:	4293      	cmp	r3, r2
 800ffa6:	d906      	bls.n	800ffb6 <mem_malloc+0x162>
 800ffa8:	4b1b      	ldr	r3, [pc, #108]	; (8010018 <mem_malloc+0x1c4>)
 800ffaa:	f240 32b9 	movw	r2, #953	; 0x3b9
 800ffae:	491f      	ldr	r1, [pc, #124]	; (801002c <mem_malloc+0x1d8>)
 800ffb0:	481b      	ldr	r0, [pc, #108]	; (8010020 <mem_malloc+0x1cc>)
 800ffb2:	f009 fe75 	bl	8019ca0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ffb6:	693b      	ldr	r3, [r7, #16]
 800ffb8:	f003 0303 	and.w	r3, r3, #3
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d006      	beq.n	800ffce <mem_malloc+0x17a>
 800ffc0:	4b15      	ldr	r3, [pc, #84]	; (8010018 <mem_malloc+0x1c4>)
 800ffc2:	f240 32bb 	movw	r2, #955	; 0x3bb
 800ffc6:	491a      	ldr	r1, [pc, #104]	; (8010030 <mem_malloc+0x1dc>)
 800ffc8:	4815      	ldr	r0, [pc, #84]	; (8010020 <mem_malloc+0x1cc>)
 800ffca:	f009 fe69 	bl	8019ca0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800ffce:	693b      	ldr	r3, [r7, #16]
 800ffd0:	f003 0303 	and.w	r3, r3, #3
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d006      	beq.n	800ffe6 <mem_malloc+0x192>
 800ffd8:	4b0f      	ldr	r3, [pc, #60]	; (8010018 <mem_malloc+0x1c4>)
 800ffda:	f240 32bd 	movw	r2, #957	; 0x3bd
 800ffde:	4915      	ldr	r1, [pc, #84]	; (8010034 <mem_malloc+0x1e0>)
 800ffe0:	480f      	ldr	r0, [pc, #60]	; (8010020 <mem_malloc+0x1cc>)
 800ffe2:	f009 fe5d 	bl	8019ca0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800ffe6:	693b      	ldr	r3, [r7, #16]
 800ffe8:	330c      	adds	r3, #12
 800ffea:	e00d      	b.n	8010008 <mem_malloc+0x1b4>
         ptr = ptr_to_mem(ptr)->next) {
 800ffec:	69f8      	ldr	r0, [r7, #28]
 800ffee:	f7ff fc9b 	bl	800f928 <ptr_to_mem>
 800fff2:	4603      	mov	r3, r0
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800fff8:	69ba      	ldr	r2, [r7, #24]
 800fffa:	4b05      	ldr	r3, [pc, #20]	; (8010010 <mem_malloc+0x1bc>)
 800fffc:	1a9b      	subs	r3, r3, r2
 800fffe:	69fa      	ldr	r2, [r7, #28]
 8010000:	429a      	cmp	r2, r3
 8010002:	f4ff af4b 	bcc.w	800fe9c <mem_malloc+0x48>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8010006:	2300      	movs	r3, #0
}
 8010008:	4618      	mov	r0, r3
 801000a:	3720      	adds	r7, #32
 801000c:	46bd      	mov	sp, r7
 801000e:	bd80      	pop	{r7, pc}
 8010010:	0001ffe8 	.word	0x0001ffe8
 8010014:	2000081c 	.word	0x2000081c
 8010018:	0801c628 	.word	0x0801c628
 801001c:	0801c7d0 	.word	0x0801c7d0
 8010020:	0801c670 	.word	0x0801c670
 8010024:	20000818 	.word	0x20000818
 8010028:	0801c7e4 	.word	0x0801c7e4
 801002c:	0801c800 	.word	0x0801c800
 8010030:	0801c830 	.word	0x0801c830
 8010034:	0801c860 	.word	0x0801c860

08010038 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8010038:	b480      	push	{r7}
 801003a:	b085      	sub	sp, #20
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	689b      	ldr	r3, [r3, #8]
 8010044:	2200      	movs	r2, #0
 8010046:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	685b      	ldr	r3, [r3, #4]
 801004c:	3303      	adds	r3, #3
 801004e:	f023 0303 	bic.w	r3, r3, #3
 8010052:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8010054:	2300      	movs	r3, #0
 8010056:	60fb      	str	r3, [r7, #12]
 8010058:	e011      	b.n	801007e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	689b      	ldr	r3, [r3, #8]
 801005e:	681a      	ldr	r2, [r3, #0]
 8010060:	68bb      	ldr	r3, [r7, #8]
 8010062:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	689b      	ldr	r3, [r3, #8]
 8010068:	68ba      	ldr	r2, [r7, #8]
 801006a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	881b      	ldrh	r3, [r3, #0]
 8010070:	461a      	mov	r2, r3
 8010072:	68bb      	ldr	r3, [r7, #8]
 8010074:	4413      	add	r3, r2
 8010076:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	3301      	adds	r3, #1
 801007c:	60fb      	str	r3, [r7, #12]
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	885b      	ldrh	r3, [r3, #2]
 8010082:	461a      	mov	r2, r3
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	4293      	cmp	r3, r2
 8010088:	dbe7      	blt.n	801005a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801008a:	bf00      	nop
 801008c:	bf00      	nop
 801008e:	3714      	adds	r7, #20
 8010090:	46bd      	mov	sp, r7
 8010092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010096:	4770      	bx	lr

08010098 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b082      	sub	sp, #8
 801009c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801009e:	2300      	movs	r3, #0
 80100a0:	80fb      	strh	r3, [r7, #6]
 80100a2:	e009      	b.n	80100b8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80100a4:	88fb      	ldrh	r3, [r7, #6]
 80100a6:	4a08      	ldr	r2, [pc, #32]	; (80100c8 <memp_init+0x30>)
 80100a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80100ac:	4618      	mov	r0, r3
 80100ae:	f7ff ffc3 	bl	8010038 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80100b2:	88fb      	ldrh	r3, [r7, #6]
 80100b4:	3301      	adds	r3, #1
 80100b6:	80fb      	strh	r3, [r7, #6]
 80100b8:	88fb      	ldrh	r3, [r7, #6]
 80100ba:	2b08      	cmp	r3, #8
 80100bc:	d9f2      	bls.n	80100a4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80100be:	bf00      	nop
 80100c0:	bf00      	nop
 80100c2:	3708      	adds	r7, #8
 80100c4:	46bd      	mov	sp, r7
 80100c6:	bd80      	pop	{r7, pc}
 80100c8:	0801f064 	.word	0x0801f064

080100cc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b084      	sub	sp, #16
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	689b      	ldr	r3, [r3, #8]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d012      	beq.n	8010108 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	689b      	ldr	r3, [r3, #8]
 80100e6:	68fa      	ldr	r2, [r7, #12]
 80100e8:	6812      	ldr	r2, [r2, #0]
 80100ea:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	f003 0303 	and.w	r3, r3, #3
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d006      	beq.n	8010104 <do_memp_malloc_pool+0x38>
 80100f6:	4b07      	ldr	r3, [pc, #28]	; (8010114 <do_memp_malloc_pool+0x48>)
 80100f8:	f44f 728c 	mov.w	r2, #280	; 0x118
 80100fc:	4906      	ldr	r1, [pc, #24]	; (8010118 <do_memp_malloc_pool+0x4c>)
 80100fe:	4807      	ldr	r0, [pc, #28]	; (801011c <do_memp_malloc_pool+0x50>)
 8010100:	f009 fdce 	bl	8019ca0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	e000      	b.n	801010a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8010108:	2300      	movs	r3, #0
}
 801010a:	4618      	mov	r0, r3
 801010c:	3710      	adds	r7, #16
 801010e:	46bd      	mov	sp, r7
 8010110:	bd80      	pop	{r7, pc}
 8010112:	bf00      	nop
 8010114:	0801c884 	.word	0x0801c884
 8010118:	0801c8b4 	.word	0x0801c8b4
 801011c:	0801c8d8 	.word	0x0801c8d8

08010120 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b082      	sub	sp, #8
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d106      	bne.n	801013c <memp_malloc_pool+0x1c>
 801012e:	4b0a      	ldr	r3, [pc, #40]	; (8010158 <memp_malloc_pool+0x38>)
 8010130:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8010134:	4909      	ldr	r1, [pc, #36]	; (801015c <memp_malloc_pool+0x3c>)
 8010136:	480a      	ldr	r0, [pc, #40]	; (8010160 <memp_malloc_pool+0x40>)
 8010138:	f009 fdb2 	bl	8019ca0 <iprintf>
  if (desc == NULL) {
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d101      	bne.n	8010146 <memp_malloc_pool+0x26>
    return NULL;
 8010142:	2300      	movs	r3, #0
 8010144:	e003      	b.n	801014e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8010146:	6878      	ldr	r0, [r7, #4]
 8010148:	f7ff ffc0 	bl	80100cc <do_memp_malloc_pool>
 801014c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801014e:	4618      	mov	r0, r3
 8010150:	3708      	adds	r7, #8
 8010152:	46bd      	mov	sp, r7
 8010154:	bd80      	pop	{r7, pc}
 8010156:	bf00      	nop
 8010158:	0801c884 	.word	0x0801c884
 801015c:	0801c900 	.word	0x0801c900
 8010160:	0801c8d8 	.word	0x0801c8d8

08010164 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8010164:	b580      	push	{r7, lr}
 8010166:	b084      	sub	sp, #16
 8010168:	af00      	add	r7, sp, #0
 801016a:	4603      	mov	r3, r0
 801016c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801016e:	79fb      	ldrb	r3, [r7, #7]
 8010170:	2b08      	cmp	r3, #8
 8010172:	d908      	bls.n	8010186 <memp_malloc+0x22>
 8010174:	4b0a      	ldr	r3, [pc, #40]	; (80101a0 <memp_malloc+0x3c>)
 8010176:	f240 1257 	movw	r2, #343	; 0x157
 801017a:	490a      	ldr	r1, [pc, #40]	; (80101a4 <memp_malloc+0x40>)
 801017c:	480a      	ldr	r0, [pc, #40]	; (80101a8 <memp_malloc+0x44>)
 801017e:	f009 fd8f 	bl	8019ca0 <iprintf>
 8010182:	2300      	movs	r3, #0
 8010184:	e008      	b.n	8010198 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8010186:	79fb      	ldrb	r3, [r7, #7]
 8010188:	4a08      	ldr	r2, [pc, #32]	; (80101ac <memp_malloc+0x48>)
 801018a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801018e:	4618      	mov	r0, r3
 8010190:	f7ff ff9c 	bl	80100cc <do_memp_malloc_pool>
 8010194:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8010196:	68fb      	ldr	r3, [r7, #12]
}
 8010198:	4618      	mov	r0, r3
 801019a:	3710      	adds	r7, #16
 801019c:	46bd      	mov	sp, r7
 801019e:	bd80      	pop	{r7, pc}
 80101a0:	0801c884 	.word	0x0801c884
 80101a4:	0801c914 	.word	0x0801c914
 80101a8:	0801c8d8 	.word	0x0801c8d8
 80101ac:	0801f064 	.word	0x0801f064

080101b0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b084      	sub	sp, #16
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
 80101b8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80101ba:	683b      	ldr	r3, [r7, #0]
 80101bc:	f003 0303 	and.w	r3, r3, #3
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d006      	beq.n	80101d2 <do_memp_free_pool+0x22>
 80101c4:	4b0a      	ldr	r3, [pc, #40]	; (80101f0 <do_memp_free_pool+0x40>)
 80101c6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80101ca:	490a      	ldr	r1, [pc, #40]	; (80101f4 <do_memp_free_pool+0x44>)
 80101cc:	480a      	ldr	r0, [pc, #40]	; (80101f8 <do_memp_free_pool+0x48>)
 80101ce:	f009 fd67 	bl	8019ca0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80101d2:	683b      	ldr	r3, [r7, #0]
 80101d4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	689b      	ldr	r3, [r3, #8]
 80101da:	681a      	ldr	r2, [r3, #0]
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	689b      	ldr	r3, [r3, #8]
 80101e4:	68fa      	ldr	r2, [r7, #12]
 80101e6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80101e8:	bf00      	nop
 80101ea:	3710      	adds	r7, #16
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bd80      	pop	{r7, pc}
 80101f0:	0801c884 	.word	0x0801c884
 80101f4:	0801c934 	.word	0x0801c934
 80101f8:	0801c8d8 	.word	0x0801c8d8

080101fc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b082      	sub	sp, #8
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
 8010204:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d106      	bne.n	801021a <memp_free_pool+0x1e>
 801020c:	4b0a      	ldr	r3, [pc, #40]	; (8010238 <memp_free_pool+0x3c>)
 801020e:	f240 1295 	movw	r2, #405	; 0x195
 8010212:	490a      	ldr	r1, [pc, #40]	; (801023c <memp_free_pool+0x40>)
 8010214:	480a      	ldr	r0, [pc, #40]	; (8010240 <memp_free_pool+0x44>)
 8010216:	f009 fd43 	bl	8019ca0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d007      	beq.n	8010230 <memp_free_pool+0x34>
 8010220:	683b      	ldr	r3, [r7, #0]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d004      	beq.n	8010230 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8010226:	6839      	ldr	r1, [r7, #0]
 8010228:	6878      	ldr	r0, [r7, #4]
 801022a:	f7ff ffc1 	bl	80101b0 <do_memp_free_pool>
 801022e:	e000      	b.n	8010232 <memp_free_pool+0x36>
    return;
 8010230:	bf00      	nop
}
 8010232:	3708      	adds	r7, #8
 8010234:	46bd      	mov	sp, r7
 8010236:	bd80      	pop	{r7, pc}
 8010238:	0801c884 	.word	0x0801c884
 801023c:	0801c900 	.word	0x0801c900
 8010240:	0801c8d8 	.word	0x0801c8d8

08010244 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8010244:	b580      	push	{r7, lr}
 8010246:	b082      	sub	sp, #8
 8010248:	af00      	add	r7, sp, #0
 801024a:	4603      	mov	r3, r0
 801024c:	6039      	str	r1, [r7, #0]
 801024e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8010250:	79fb      	ldrb	r3, [r7, #7]
 8010252:	2b08      	cmp	r3, #8
 8010254:	d907      	bls.n	8010266 <memp_free+0x22>
 8010256:	4b0c      	ldr	r3, [pc, #48]	; (8010288 <memp_free+0x44>)
 8010258:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 801025c:	490b      	ldr	r1, [pc, #44]	; (801028c <memp_free+0x48>)
 801025e:	480c      	ldr	r0, [pc, #48]	; (8010290 <memp_free+0x4c>)
 8010260:	f009 fd1e 	bl	8019ca0 <iprintf>
 8010264:	e00c      	b.n	8010280 <memp_free+0x3c>

  if (mem == NULL) {
 8010266:	683b      	ldr	r3, [r7, #0]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d008      	beq.n	801027e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801026c:	79fb      	ldrb	r3, [r7, #7]
 801026e:	4a09      	ldr	r2, [pc, #36]	; (8010294 <memp_free+0x50>)
 8010270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010274:	6839      	ldr	r1, [r7, #0]
 8010276:	4618      	mov	r0, r3
 8010278:	f7ff ff9a 	bl	80101b0 <do_memp_free_pool>
 801027c:	e000      	b.n	8010280 <memp_free+0x3c>
    return;
 801027e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8010280:	3708      	adds	r7, #8
 8010282:	46bd      	mov	sp, r7
 8010284:	bd80      	pop	{r7, pc}
 8010286:	bf00      	nop
 8010288:	0801c884 	.word	0x0801c884
 801028c:	0801c954 	.word	0x0801c954
 8010290:	0801c8d8 	.word	0x0801c8d8
 8010294:	0801f064 	.word	0x0801f064

08010298 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8010298:	b480      	push	{r7}
 801029a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 801029c:	bf00      	nop
 801029e:	46bd      	mov	sp, r7
 80102a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a4:	4770      	bx	lr
	...

080102a8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	b086      	sub	sp, #24
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	60f8      	str	r0, [r7, #12]
 80102b0:	60b9      	str	r1, [r7, #8]
 80102b2:	607a      	str	r2, [r7, #4]
 80102b4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d108      	bne.n	80102ce <netif_add+0x26>
 80102bc:	4b57      	ldr	r3, [pc, #348]	; (801041c <netif_add+0x174>)
 80102be:	f240 1227 	movw	r2, #295	; 0x127
 80102c2:	4957      	ldr	r1, [pc, #348]	; (8010420 <netif_add+0x178>)
 80102c4:	4857      	ldr	r0, [pc, #348]	; (8010424 <netif_add+0x17c>)
 80102c6:	f009 fceb 	bl	8019ca0 <iprintf>
 80102ca:	2300      	movs	r3, #0
 80102cc:	e0a2      	b.n	8010414 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80102ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d108      	bne.n	80102e6 <netif_add+0x3e>
 80102d4:	4b51      	ldr	r3, [pc, #324]	; (801041c <netif_add+0x174>)
 80102d6:	f44f 7294 	mov.w	r2, #296	; 0x128
 80102da:	4953      	ldr	r1, [pc, #332]	; (8010428 <netif_add+0x180>)
 80102dc:	4851      	ldr	r0, [pc, #324]	; (8010424 <netif_add+0x17c>)
 80102de:	f009 fcdf 	bl	8019ca0 <iprintf>
 80102e2:	2300      	movs	r3, #0
 80102e4:	e096      	b.n	8010414 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80102e6:	68bb      	ldr	r3, [r7, #8]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d101      	bne.n	80102f0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80102ec:	4b4f      	ldr	r3, [pc, #316]	; (801042c <netif_add+0x184>)
 80102ee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d101      	bne.n	80102fa <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80102f6:	4b4d      	ldr	r3, [pc, #308]	; (801042c <netif_add+0x184>)
 80102f8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80102fa:	683b      	ldr	r3, [r7, #0]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d101      	bne.n	8010304 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8010300:	4b4a      	ldr	r3, [pc, #296]	; (801042c <netif_add+0x184>)
 8010302:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	2200      	movs	r2, #0
 8010308:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	2200      	movs	r2, #0
 801030e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	2200      	movs	r2, #0
 8010314:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	4a45      	ldr	r2, [pc, #276]	; (8010430 <netif_add+0x188>)
 801031a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	2200      	movs	r2, #0
 8010320:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	2200      	movs	r2, #0
 8010326:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	2200      	movs	r2, #0
 801032e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	6a3a      	ldr	r2, [r7, #32]
 8010334:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8010336:	4b3f      	ldr	r3, [pc, #252]	; (8010434 <netif_add+0x18c>)
 8010338:	781a      	ldrb	r2, [r3, #0]
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010344:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	687a      	ldr	r2, [r7, #4]
 801034a:	68b9      	ldr	r1, [r7, #8]
 801034c:	68f8      	ldr	r0, [r7, #12]
 801034e:	f000 f913 	bl	8010578 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8010352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010354:	68f8      	ldr	r0, [r7, #12]
 8010356:	4798      	blx	r3
 8010358:	4603      	mov	r3, r0
 801035a:	2b00      	cmp	r3, #0
 801035c:	d001      	beq.n	8010362 <netif_add+0xba>
    return NULL;
 801035e:	2300      	movs	r3, #0
 8010360:	e058      	b.n	8010414 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010368:	2bff      	cmp	r3, #255	; 0xff
 801036a:	d103      	bne.n	8010374 <netif_add+0xcc>
        netif->num = 0;
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	2200      	movs	r2, #0
 8010370:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8010374:	2300      	movs	r3, #0
 8010376:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010378:	4b2f      	ldr	r3, [pc, #188]	; (8010438 <netif_add+0x190>)
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	617b      	str	r3, [r7, #20]
 801037e:	e02b      	b.n	80103d8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8010380:	697a      	ldr	r2, [r7, #20]
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	429a      	cmp	r2, r3
 8010386:	d106      	bne.n	8010396 <netif_add+0xee>
 8010388:	4b24      	ldr	r3, [pc, #144]	; (801041c <netif_add+0x174>)
 801038a:	f240 128b 	movw	r2, #395	; 0x18b
 801038e:	492b      	ldr	r1, [pc, #172]	; (801043c <netif_add+0x194>)
 8010390:	4824      	ldr	r0, [pc, #144]	; (8010424 <netif_add+0x17c>)
 8010392:	f009 fc85 	bl	8019ca0 <iprintf>
        num_netifs++;
 8010396:	693b      	ldr	r3, [r7, #16]
 8010398:	3301      	adds	r3, #1
 801039a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801039c:	693b      	ldr	r3, [r7, #16]
 801039e:	2bff      	cmp	r3, #255	; 0xff
 80103a0:	dd06      	ble.n	80103b0 <netif_add+0x108>
 80103a2:	4b1e      	ldr	r3, [pc, #120]	; (801041c <netif_add+0x174>)
 80103a4:	f240 128d 	movw	r2, #397	; 0x18d
 80103a8:	4925      	ldr	r1, [pc, #148]	; (8010440 <netif_add+0x198>)
 80103aa:	481e      	ldr	r0, [pc, #120]	; (8010424 <netif_add+0x17c>)
 80103ac:	f009 fc78 	bl	8019ca0 <iprintf>
        if (netif2->num == netif->num) {
 80103b0:	697b      	ldr	r3, [r7, #20]
 80103b2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80103bc:	429a      	cmp	r2, r3
 80103be:	d108      	bne.n	80103d2 <netif_add+0x12a>
          netif->num++;
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80103c6:	3301      	adds	r3, #1
 80103c8:	b2da      	uxtb	r2, r3
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80103d0:	e005      	b.n	80103de <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80103d2:	697b      	ldr	r3, [r7, #20]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	617b      	str	r3, [r7, #20]
 80103d8:	697b      	ldr	r3, [r7, #20]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d1d0      	bne.n	8010380 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80103de:	697b      	ldr	r3, [r7, #20]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d1be      	bne.n	8010362 <netif_add+0xba>
  }
  if (netif->num == 254) {
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80103ea:	2bfe      	cmp	r3, #254	; 0xfe
 80103ec:	d103      	bne.n	80103f6 <netif_add+0x14e>
    netif_num = 0;
 80103ee:	4b11      	ldr	r3, [pc, #68]	; (8010434 <netif_add+0x18c>)
 80103f0:	2200      	movs	r2, #0
 80103f2:	701a      	strb	r2, [r3, #0]
 80103f4:	e006      	b.n	8010404 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80103fc:	3301      	adds	r3, #1
 80103fe:	b2da      	uxtb	r2, r3
 8010400:	4b0c      	ldr	r3, [pc, #48]	; (8010434 <netif_add+0x18c>)
 8010402:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8010404:	4b0c      	ldr	r3, [pc, #48]	; (8010438 <netif_add+0x190>)
 8010406:	681a      	ldr	r2, [r3, #0]
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801040c:	4a0a      	ldr	r2, [pc, #40]	; (8010438 <netif_add+0x190>)
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8010412:	68fb      	ldr	r3, [r7, #12]
}
 8010414:	4618      	mov	r0, r3
 8010416:	3718      	adds	r7, #24
 8010418:	46bd      	mov	sp, r7
 801041a:	bd80      	pop	{r7, pc}
 801041c:	0801c970 	.word	0x0801c970
 8010420:	0801ca04 	.word	0x0801ca04
 8010424:	0801c9c0 	.word	0x0801c9c0
 8010428:	0801ca20 	.word	0x0801ca20
 801042c:	0801f0c8 	.word	0x0801f0c8
 8010430:	08010853 	.word	0x08010853
 8010434:	200070d4 	.word	0x200070d4
 8010438:	200070cc 	.word	0x200070cc
 801043c:	0801ca44 	.word	0x0801ca44
 8010440:	0801ca58 	.word	0x0801ca58

08010444 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b082      	sub	sp, #8
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
 801044c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801044e:	6839      	ldr	r1, [r7, #0]
 8010450:	6878      	ldr	r0, [r7, #4]
 8010452:	f002 fb27 	bl	8012aa4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8010456:	6839      	ldr	r1, [r7, #0]
 8010458:	6878      	ldr	r0, [r7, #4]
 801045a:	f006 fbc9 	bl	8016bf0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801045e:	bf00      	nop
 8010460:	3708      	adds	r7, #8
 8010462:	46bd      	mov	sp, r7
 8010464:	bd80      	pop	{r7, pc}
	...

08010468 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8010468:	b580      	push	{r7, lr}
 801046a:	b086      	sub	sp, #24
 801046c:	af00      	add	r7, sp, #0
 801046e:	60f8      	str	r0, [r7, #12]
 8010470:	60b9      	str	r1, [r7, #8]
 8010472:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8010474:	68bb      	ldr	r3, [r7, #8]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d106      	bne.n	8010488 <netif_do_set_ipaddr+0x20>
 801047a:	4b1d      	ldr	r3, [pc, #116]	; (80104f0 <netif_do_set_ipaddr+0x88>)
 801047c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8010480:	491c      	ldr	r1, [pc, #112]	; (80104f4 <netif_do_set_ipaddr+0x8c>)
 8010482:	481d      	ldr	r0, [pc, #116]	; (80104f8 <netif_do_set_ipaddr+0x90>)
 8010484:	f009 fc0c 	bl	8019ca0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d106      	bne.n	801049c <netif_do_set_ipaddr+0x34>
 801048e:	4b18      	ldr	r3, [pc, #96]	; (80104f0 <netif_do_set_ipaddr+0x88>)
 8010490:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8010494:	4917      	ldr	r1, [pc, #92]	; (80104f4 <netif_do_set_ipaddr+0x8c>)
 8010496:	4818      	ldr	r0, [pc, #96]	; (80104f8 <netif_do_set_ipaddr+0x90>)
 8010498:	f009 fc02 	bl	8019ca0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 801049c:	68bb      	ldr	r3, [r7, #8]
 801049e:	681a      	ldr	r2, [r3, #0]
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	3304      	adds	r3, #4
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	429a      	cmp	r2, r3
 80104a8:	d01c      	beq.n	80104e4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80104aa:	68bb      	ldr	r3, [r7, #8]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	3304      	adds	r3, #4
 80104b4:	681a      	ldr	r2, [r3, #0]
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80104ba:	f107 0314 	add.w	r3, r7, #20
 80104be:	4619      	mov	r1, r3
 80104c0:	6878      	ldr	r0, [r7, #4]
 80104c2:	f7ff ffbf 	bl	8010444 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80104c6:	68bb      	ldr	r3, [r7, #8]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d002      	beq.n	80104d2 <netif_do_set_ipaddr+0x6a>
 80104cc:	68bb      	ldr	r3, [r7, #8]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	e000      	b.n	80104d4 <netif_do_set_ipaddr+0x6c>
 80104d2:	2300      	movs	r3, #0
 80104d4:	68fa      	ldr	r2, [r7, #12]
 80104d6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80104d8:	2101      	movs	r1, #1
 80104da:	68f8      	ldr	r0, [r7, #12]
 80104dc:	f000 f8d2 	bl	8010684 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80104e0:	2301      	movs	r3, #1
 80104e2:	e000      	b.n	80104e6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80104e4:	2300      	movs	r3, #0
}
 80104e6:	4618      	mov	r0, r3
 80104e8:	3718      	adds	r7, #24
 80104ea:	46bd      	mov	sp, r7
 80104ec:	bd80      	pop	{r7, pc}
 80104ee:	bf00      	nop
 80104f0:	0801c970 	.word	0x0801c970
 80104f4:	0801ca88 	.word	0x0801ca88
 80104f8:	0801c9c0 	.word	0x0801c9c0

080104fc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80104fc:	b480      	push	{r7}
 80104fe:	b085      	sub	sp, #20
 8010500:	af00      	add	r7, sp, #0
 8010502:	60f8      	str	r0, [r7, #12]
 8010504:	60b9      	str	r1, [r7, #8]
 8010506:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8010508:	68bb      	ldr	r3, [r7, #8]
 801050a:	681a      	ldr	r2, [r3, #0]
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	3308      	adds	r3, #8
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	429a      	cmp	r2, r3
 8010514:	d00a      	beq.n	801052c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8010516:	68bb      	ldr	r3, [r7, #8]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d002      	beq.n	8010522 <netif_do_set_netmask+0x26>
 801051c:	68bb      	ldr	r3, [r7, #8]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	e000      	b.n	8010524 <netif_do_set_netmask+0x28>
 8010522:	2300      	movs	r3, #0
 8010524:	68fa      	ldr	r2, [r7, #12]
 8010526:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8010528:	2301      	movs	r3, #1
 801052a:	e000      	b.n	801052e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 801052c:	2300      	movs	r3, #0
}
 801052e:	4618      	mov	r0, r3
 8010530:	3714      	adds	r7, #20
 8010532:	46bd      	mov	sp, r7
 8010534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010538:	4770      	bx	lr

0801053a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801053a:	b480      	push	{r7}
 801053c:	b085      	sub	sp, #20
 801053e:	af00      	add	r7, sp, #0
 8010540:	60f8      	str	r0, [r7, #12]
 8010542:	60b9      	str	r1, [r7, #8]
 8010544:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8010546:	68bb      	ldr	r3, [r7, #8]
 8010548:	681a      	ldr	r2, [r3, #0]
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	330c      	adds	r3, #12
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	429a      	cmp	r2, r3
 8010552:	d00a      	beq.n	801056a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010554:	68bb      	ldr	r3, [r7, #8]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d002      	beq.n	8010560 <netif_do_set_gw+0x26>
 801055a:	68bb      	ldr	r3, [r7, #8]
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	e000      	b.n	8010562 <netif_do_set_gw+0x28>
 8010560:	2300      	movs	r3, #0
 8010562:	68fa      	ldr	r2, [r7, #12]
 8010564:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8010566:	2301      	movs	r3, #1
 8010568:	e000      	b.n	801056c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801056a:	2300      	movs	r3, #0
}
 801056c:	4618      	mov	r0, r3
 801056e:	3714      	adds	r7, #20
 8010570:	46bd      	mov	sp, r7
 8010572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010576:	4770      	bx	lr

08010578 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8010578:	b580      	push	{r7, lr}
 801057a:	b088      	sub	sp, #32
 801057c:	af00      	add	r7, sp, #0
 801057e:	60f8      	str	r0, [r7, #12]
 8010580:	60b9      	str	r1, [r7, #8]
 8010582:	607a      	str	r2, [r7, #4]
 8010584:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8010586:	2300      	movs	r3, #0
 8010588:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801058a:	2300      	movs	r3, #0
 801058c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801058e:	68bb      	ldr	r3, [r7, #8]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d101      	bne.n	8010598 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8010594:	4b1c      	ldr	r3, [pc, #112]	; (8010608 <netif_set_addr+0x90>)
 8010596:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d101      	bne.n	80105a2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801059e:	4b1a      	ldr	r3, [pc, #104]	; (8010608 <netif_set_addr+0x90>)
 80105a0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80105a2:	683b      	ldr	r3, [r7, #0]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d101      	bne.n	80105ac <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80105a8:	4b17      	ldr	r3, [pc, #92]	; (8010608 <netif_set_addr+0x90>)
 80105aa:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80105ac:	68bb      	ldr	r3, [r7, #8]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d003      	beq.n	80105ba <netif_set_addr+0x42>
 80105b2:	68bb      	ldr	r3, [r7, #8]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d101      	bne.n	80105be <netif_set_addr+0x46>
 80105ba:	2301      	movs	r3, #1
 80105bc:	e000      	b.n	80105c0 <netif_set_addr+0x48>
 80105be:	2300      	movs	r3, #0
 80105c0:	617b      	str	r3, [r7, #20]
  if (remove) {
 80105c2:	697b      	ldr	r3, [r7, #20]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d006      	beq.n	80105d6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80105c8:	f107 0310 	add.w	r3, r7, #16
 80105cc:	461a      	mov	r2, r3
 80105ce:	68b9      	ldr	r1, [r7, #8]
 80105d0:	68f8      	ldr	r0, [r7, #12]
 80105d2:	f7ff ff49 	bl	8010468 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80105d6:	69fa      	ldr	r2, [r7, #28]
 80105d8:	6879      	ldr	r1, [r7, #4]
 80105da:	68f8      	ldr	r0, [r7, #12]
 80105dc:	f7ff ff8e 	bl	80104fc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80105e0:	69ba      	ldr	r2, [r7, #24]
 80105e2:	6839      	ldr	r1, [r7, #0]
 80105e4:	68f8      	ldr	r0, [r7, #12]
 80105e6:	f7ff ffa8 	bl	801053a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80105ea:	697b      	ldr	r3, [r7, #20]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d106      	bne.n	80105fe <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80105f0:	f107 0310 	add.w	r3, r7, #16
 80105f4:	461a      	mov	r2, r3
 80105f6:	68b9      	ldr	r1, [r7, #8]
 80105f8:	68f8      	ldr	r0, [r7, #12]
 80105fa:	f7ff ff35 	bl	8010468 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80105fe:	bf00      	nop
 8010600:	3720      	adds	r7, #32
 8010602:	46bd      	mov	sp, r7
 8010604:	bd80      	pop	{r7, pc}
 8010606:	bf00      	nop
 8010608:	0801f0c8 	.word	0x0801f0c8

0801060c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801060c:	b480      	push	{r7}
 801060e:	b083      	sub	sp, #12
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010614:	4a04      	ldr	r2, [pc, #16]	; (8010628 <netif_set_default+0x1c>)
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801061a:	bf00      	nop
 801061c:	370c      	adds	r7, #12
 801061e:	46bd      	mov	sp, r7
 8010620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010624:	4770      	bx	lr
 8010626:	bf00      	nop
 8010628:	200070d0 	.word	0x200070d0

0801062c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801062c:	b580      	push	{r7, lr}
 801062e:	b082      	sub	sp, #8
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d107      	bne.n	801064a <netif_set_up+0x1e>
 801063a:	4b0f      	ldr	r3, [pc, #60]	; (8010678 <netif_set_up+0x4c>)
 801063c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8010640:	490e      	ldr	r1, [pc, #56]	; (801067c <netif_set_up+0x50>)
 8010642:	480f      	ldr	r0, [pc, #60]	; (8010680 <netif_set_up+0x54>)
 8010644:	f009 fb2c 	bl	8019ca0 <iprintf>
 8010648:	e013      	b.n	8010672 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010650:	f003 0301 	and.w	r3, r3, #1
 8010654:	2b00      	cmp	r3, #0
 8010656:	d10c      	bne.n	8010672 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801065e:	f043 0301 	orr.w	r3, r3, #1
 8010662:	b2da      	uxtb	r2, r3
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801066a:	2103      	movs	r1, #3
 801066c:	6878      	ldr	r0, [r7, #4]
 801066e:	f000 f809 	bl	8010684 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8010672:	3708      	adds	r7, #8
 8010674:	46bd      	mov	sp, r7
 8010676:	bd80      	pop	{r7, pc}
 8010678:	0801c970 	.word	0x0801c970
 801067c:	0801caf8 	.word	0x0801caf8
 8010680:	0801c9c0 	.word	0x0801c9c0

08010684 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8010684:	b580      	push	{r7, lr}
 8010686:	b082      	sub	sp, #8
 8010688:	af00      	add	r7, sp, #0
 801068a:	6078      	str	r0, [r7, #4]
 801068c:	460b      	mov	r3, r1
 801068e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	2b00      	cmp	r3, #0
 8010694:	d106      	bne.n	80106a4 <netif_issue_reports+0x20>
 8010696:	4b18      	ldr	r3, [pc, #96]	; (80106f8 <netif_issue_reports+0x74>)
 8010698:	f240 326d 	movw	r2, #877	; 0x36d
 801069c:	4917      	ldr	r1, [pc, #92]	; (80106fc <netif_issue_reports+0x78>)
 801069e:	4818      	ldr	r0, [pc, #96]	; (8010700 <netif_issue_reports+0x7c>)
 80106a0:	f009 fafe 	bl	8019ca0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80106aa:	f003 0304 	and.w	r3, r3, #4
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d01e      	beq.n	80106f0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80106b8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d017      	beq.n	80106f0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80106c0:	78fb      	ldrb	r3, [r7, #3]
 80106c2:	f003 0301 	and.w	r3, r3, #1
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d013      	beq.n	80106f2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	3304      	adds	r3, #4
 80106ce:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d00e      	beq.n	80106f2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80106da:	f003 0308 	and.w	r3, r3, #8
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d007      	beq.n	80106f2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	3304      	adds	r3, #4
 80106e6:	4619      	mov	r1, r3
 80106e8:	6878      	ldr	r0, [r7, #4]
 80106ea:	f007 f9eb 	bl	8017ac4 <etharp_request>
 80106ee:	e000      	b.n	80106f2 <netif_issue_reports+0x6e>
    return;
 80106f0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80106f2:	3708      	adds	r7, #8
 80106f4:	46bd      	mov	sp, r7
 80106f6:	bd80      	pop	{r7, pc}
 80106f8:	0801c970 	.word	0x0801c970
 80106fc:	0801cb14 	.word	0x0801cb14
 8010700:	0801c9c0 	.word	0x0801c9c0

08010704 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010704:	b580      	push	{r7, lr}
 8010706:	b082      	sub	sp, #8
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d107      	bne.n	8010722 <netif_set_down+0x1e>
 8010712:	4b12      	ldr	r3, [pc, #72]	; (801075c <netif_set_down+0x58>)
 8010714:	f240 329b 	movw	r2, #923	; 0x39b
 8010718:	4911      	ldr	r1, [pc, #68]	; (8010760 <netif_set_down+0x5c>)
 801071a:	4812      	ldr	r0, [pc, #72]	; (8010764 <netif_set_down+0x60>)
 801071c:	f009 fac0 	bl	8019ca0 <iprintf>
 8010720:	e019      	b.n	8010756 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010728:	f003 0301 	and.w	r3, r3, #1
 801072c:	2b00      	cmp	r3, #0
 801072e:	d012      	beq.n	8010756 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010736:	f023 0301 	bic.w	r3, r3, #1
 801073a:	b2da      	uxtb	r2, r3
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010748:	f003 0308 	and.w	r3, r3, #8
 801074c:	2b00      	cmp	r3, #0
 801074e:	d002      	beq.n	8010756 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8010750:	6878      	ldr	r0, [r7, #4]
 8010752:	f006 fd75 	bl	8017240 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8010756:	3708      	adds	r7, #8
 8010758:	46bd      	mov	sp, r7
 801075a:	bd80      	pop	{r7, pc}
 801075c:	0801c970 	.word	0x0801c970
 8010760:	0801cb38 	.word	0x0801cb38
 8010764:	0801c9c0 	.word	0x0801c9c0

08010768 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8010768:	b580      	push	{r7, lr}
 801076a:	b082      	sub	sp, #8
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d107      	bne.n	8010786 <netif_set_link_up+0x1e>
 8010776:	4b13      	ldr	r3, [pc, #76]	; (80107c4 <netif_set_link_up+0x5c>)
 8010778:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 801077c:	4912      	ldr	r1, [pc, #72]	; (80107c8 <netif_set_link_up+0x60>)
 801077e:	4813      	ldr	r0, [pc, #76]	; (80107cc <netif_set_link_up+0x64>)
 8010780:	f009 fa8e 	bl	8019ca0 <iprintf>
 8010784:	e01b      	b.n	80107be <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801078c:	f003 0304 	and.w	r3, r3, #4
 8010790:	2b00      	cmp	r3, #0
 8010792:	d114      	bne.n	80107be <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801079a:	f043 0304 	orr.w	r3, r3, #4
 801079e:	b2da      	uxtb	r2, r3
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80107a6:	2103      	movs	r1, #3
 80107a8:	6878      	ldr	r0, [r7, #4]
 80107aa:	f7ff ff6b 	bl	8010684 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	69db      	ldr	r3, [r3, #28]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d003      	beq.n	80107be <netif_set_link_up+0x56>
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	69db      	ldr	r3, [r3, #28]
 80107ba:	6878      	ldr	r0, [r7, #4]
 80107bc:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80107be:	3708      	adds	r7, #8
 80107c0:	46bd      	mov	sp, r7
 80107c2:	bd80      	pop	{r7, pc}
 80107c4:	0801c970 	.word	0x0801c970
 80107c8:	0801cb58 	.word	0x0801cb58
 80107cc:	0801c9c0 	.word	0x0801c9c0

080107d0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b082      	sub	sp, #8
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d107      	bne.n	80107ee <netif_set_link_down+0x1e>
 80107de:	4b11      	ldr	r3, [pc, #68]	; (8010824 <netif_set_link_down+0x54>)
 80107e0:	f240 4206 	movw	r2, #1030	; 0x406
 80107e4:	4910      	ldr	r1, [pc, #64]	; (8010828 <netif_set_link_down+0x58>)
 80107e6:	4811      	ldr	r0, [pc, #68]	; (801082c <netif_set_link_down+0x5c>)
 80107e8:	f009 fa5a 	bl	8019ca0 <iprintf>
 80107ec:	e017      	b.n	801081e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80107f4:	f003 0304 	and.w	r3, r3, #4
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d010      	beq.n	801081e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010802:	f023 0304 	bic.w	r3, r3, #4
 8010806:	b2da      	uxtb	r2, r3
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	69db      	ldr	r3, [r3, #28]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d003      	beq.n	801081e <netif_set_link_down+0x4e>
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	69db      	ldr	r3, [r3, #28]
 801081a:	6878      	ldr	r0, [r7, #4]
 801081c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801081e:	3708      	adds	r7, #8
 8010820:	46bd      	mov	sp, r7
 8010822:	bd80      	pop	{r7, pc}
 8010824:	0801c970 	.word	0x0801c970
 8010828:	0801cb7c 	.word	0x0801cb7c
 801082c:	0801c9c0 	.word	0x0801c9c0

08010830 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8010830:	b480      	push	{r7}
 8010832:	b083      	sub	sp, #12
 8010834:	af00      	add	r7, sp, #0
 8010836:	6078      	str	r0, [r7, #4]
 8010838:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d002      	beq.n	8010846 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	683a      	ldr	r2, [r7, #0]
 8010844:	61da      	str	r2, [r3, #28]
  }
}
 8010846:	bf00      	nop
 8010848:	370c      	adds	r7, #12
 801084a:	46bd      	mov	sp, r7
 801084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010850:	4770      	bx	lr

08010852 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8010852:	b480      	push	{r7}
 8010854:	b085      	sub	sp, #20
 8010856:	af00      	add	r7, sp, #0
 8010858:	60f8      	str	r0, [r7, #12]
 801085a:	60b9      	str	r1, [r7, #8]
 801085c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801085e:	f06f 030b 	mvn.w	r3, #11
}
 8010862:	4618      	mov	r0, r3
 8010864:	3714      	adds	r7, #20
 8010866:	46bd      	mov	sp, r7
 8010868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801086c:	4770      	bx	lr
	...

08010870 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8010870:	b480      	push	{r7}
 8010872:	b085      	sub	sp, #20
 8010874:	af00      	add	r7, sp, #0
 8010876:	4603      	mov	r3, r0
 8010878:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801087a:	79fb      	ldrb	r3, [r7, #7]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d013      	beq.n	80108a8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8010880:	4b0d      	ldr	r3, [pc, #52]	; (80108b8 <netif_get_by_index+0x48>)
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	60fb      	str	r3, [r7, #12]
 8010886:	e00c      	b.n	80108a2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801088e:	3301      	adds	r3, #1
 8010890:	b2db      	uxtb	r3, r3
 8010892:	79fa      	ldrb	r2, [r7, #7]
 8010894:	429a      	cmp	r2, r3
 8010896:	d101      	bne.n	801089c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	e006      	b.n	80108aa <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	60fb      	str	r3, [r7, #12]
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d1ef      	bne.n	8010888 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80108a8:	2300      	movs	r3, #0
}
 80108aa:	4618      	mov	r0, r3
 80108ac:	3714      	adds	r7, #20
 80108ae:	46bd      	mov	sp, r7
 80108b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b4:	4770      	bx	lr
 80108b6:	bf00      	nop
 80108b8:	200070cc 	.word	0x200070cc

080108bc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80108bc:	b480      	push	{r7}
 80108be:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80108c0:	4b03      	ldr	r3, [pc, #12]	; (80108d0 <pbuf_pool_is_empty+0x14>)
 80108c2:	2201      	movs	r2, #1
 80108c4:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80108c6:	bf00      	nop
 80108c8:	46bd      	mov	sp, r7
 80108ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ce:	4770      	bx	lr
 80108d0:	200070d5 	.word	0x200070d5

080108d4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80108d4:	b480      	push	{r7}
 80108d6:	b085      	sub	sp, #20
 80108d8:	af00      	add	r7, sp, #0
 80108da:	60f8      	str	r0, [r7, #12]
 80108dc:	60b9      	str	r1, [r7, #8]
 80108de:	4611      	mov	r1, r2
 80108e0:	461a      	mov	r2, r3
 80108e2:	460b      	mov	r3, r1
 80108e4:	80fb      	strh	r3, [r7, #6]
 80108e6:	4613      	mov	r3, r2
 80108e8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	2200      	movs	r2, #0
 80108ee:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	68ba      	ldr	r2, [r7, #8]
 80108f4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	88fa      	ldrh	r2, [r7, #6]
 80108fa:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	88ba      	ldrh	r2, [r7, #4]
 8010900:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8010902:	8b3b      	ldrh	r3, [r7, #24]
 8010904:	b2da      	uxtb	r2, r3
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	7f3a      	ldrb	r2, [r7, #28]
 801090e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	2201      	movs	r2, #1
 8010914:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	2200      	movs	r2, #0
 801091a:	73da      	strb	r2, [r3, #15]
}
 801091c:	bf00      	nop
 801091e:	3714      	adds	r7, #20
 8010920:	46bd      	mov	sp, r7
 8010922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010926:	4770      	bx	lr

08010928 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b08c      	sub	sp, #48	; 0x30
 801092c:	af02      	add	r7, sp, #8
 801092e:	4603      	mov	r3, r0
 8010930:	71fb      	strb	r3, [r7, #7]
 8010932:	460b      	mov	r3, r1
 8010934:	80bb      	strh	r3, [r7, #4]
 8010936:	4613      	mov	r3, r2
 8010938:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801093a:	79fb      	ldrb	r3, [r7, #7]
 801093c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801093e:	887b      	ldrh	r3, [r7, #2]
 8010940:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010944:	f000 8082 	beq.w	8010a4c <pbuf_alloc+0x124>
 8010948:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801094c:	f300 80c9 	bgt.w	8010ae2 <pbuf_alloc+0x1ba>
 8010950:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010954:	d010      	beq.n	8010978 <pbuf_alloc+0x50>
 8010956:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801095a:	f300 80c2 	bgt.w	8010ae2 <pbuf_alloc+0x1ba>
 801095e:	2b01      	cmp	r3, #1
 8010960:	d002      	beq.n	8010968 <pbuf_alloc+0x40>
 8010962:	2b41      	cmp	r3, #65	; 0x41
 8010964:	f040 80bd 	bne.w	8010ae2 <pbuf_alloc+0x1ba>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8010968:	887a      	ldrh	r2, [r7, #2]
 801096a:	88bb      	ldrh	r3, [r7, #4]
 801096c:	4619      	mov	r1, r3
 801096e:	2000      	movs	r0, #0
 8010970:	f000 f8d2 	bl	8010b18 <pbuf_alloc_reference>
 8010974:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8010976:	e0be      	b.n	8010af6 <pbuf_alloc+0x1ce>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8010978:	2300      	movs	r3, #0
 801097a:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 801097c:	2300      	movs	r3, #0
 801097e:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8010980:	88bb      	ldrh	r3, [r7, #4]
 8010982:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8010984:	2008      	movs	r0, #8
 8010986:	f7ff fbed 	bl	8010164 <memp_malloc>
 801098a:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801098c:	693b      	ldr	r3, [r7, #16]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d109      	bne.n	80109a6 <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 8010992:	f7ff ff93 	bl	80108bc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8010996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010998:	2b00      	cmp	r3, #0
 801099a:	d002      	beq.n	80109a2 <pbuf_alloc+0x7a>
            pbuf_free(p);
 801099c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801099e:	f000 faa7 	bl	8010ef0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80109a2:	2300      	movs	r3, #0
 80109a4:	e0a8      	b.n	8010af8 <pbuf_alloc+0x1d0>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80109a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80109a8:	3303      	adds	r3, #3
 80109aa:	b29b      	uxth	r3, r3
 80109ac:	f023 0303 	bic.w	r3, r3, #3
 80109b0:	b29a      	uxth	r2, r3
 80109b2:	f240 53ec 	movw	r3, #1516	; 0x5ec
 80109b6:	1a9b      	subs	r3, r3, r2
 80109b8:	b29b      	uxth	r3, r3
 80109ba:	8b7a      	ldrh	r2, [r7, #26]
 80109bc:	4293      	cmp	r3, r2
 80109be:	bf28      	it	cs
 80109c0:	4613      	movcs	r3, r2
 80109c2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80109c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80109c6:	3310      	adds	r3, #16
 80109c8:	693a      	ldr	r2, [r7, #16]
 80109ca:	4413      	add	r3, r2
 80109cc:	3303      	adds	r3, #3
 80109ce:	f023 0303 	bic.w	r3, r3, #3
 80109d2:	4618      	mov	r0, r3
 80109d4:	89f9      	ldrh	r1, [r7, #14]
 80109d6:	8b7a      	ldrh	r2, [r7, #26]
 80109d8:	2300      	movs	r3, #0
 80109da:	9301      	str	r3, [sp, #4]
 80109dc:	887b      	ldrh	r3, [r7, #2]
 80109de:	9300      	str	r3, [sp, #0]
 80109e0:	460b      	mov	r3, r1
 80109e2:	4601      	mov	r1, r0
 80109e4:	6938      	ldr	r0, [r7, #16]
 80109e6:	f7ff ff75 	bl	80108d4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80109ea:	693b      	ldr	r3, [r7, #16]
 80109ec:	685b      	ldr	r3, [r3, #4]
 80109ee:	f003 0303 	and.w	r3, r3, #3
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d006      	beq.n	8010a04 <pbuf_alloc+0xdc>
 80109f6:	4b42      	ldr	r3, [pc, #264]	; (8010b00 <pbuf_alloc+0x1d8>)
 80109f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80109fc:	4941      	ldr	r1, [pc, #260]	; (8010b04 <pbuf_alloc+0x1dc>)
 80109fe:	4842      	ldr	r0, [pc, #264]	; (8010b08 <pbuf_alloc+0x1e0>)
 8010a00:	f009 f94e 	bl	8019ca0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8010a04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010a06:	3303      	adds	r3, #3
 8010a08:	f023 0303 	bic.w	r3, r3, #3
 8010a0c:	f240 52ec 	movw	r2, #1516	; 0x5ec
 8010a10:	4293      	cmp	r3, r2
 8010a12:	d106      	bne.n	8010a22 <pbuf_alloc+0xfa>
 8010a14:	4b3a      	ldr	r3, [pc, #232]	; (8010b00 <pbuf_alloc+0x1d8>)
 8010a16:	f44f 7281 	mov.w	r2, #258	; 0x102
 8010a1a:	493c      	ldr	r1, [pc, #240]	; (8010b0c <pbuf_alloc+0x1e4>)
 8010a1c:	483a      	ldr	r0, [pc, #232]	; (8010b08 <pbuf_alloc+0x1e0>)
 8010a1e:	f009 f93f 	bl	8019ca0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8010a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d102      	bne.n	8010a2e <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8010a28:	693b      	ldr	r3, [r7, #16]
 8010a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8010a2c:	e002      	b.n	8010a34 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8010a2e:	69fb      	ldr	r3, [r7, #28]
 8010a30:	693a      	ldr	r2, [r7, #16]
 8010a32:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8010a34:	693b      	ldr	r3, [r7, #16]
 8010a36:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8010a38:	8b7a      	ldrh	r2, [r7, #26]
 8010a3a:	89fb      	ldrh	r3, [r7, #14]
 8010a3c:	1ad3      	subs	r3, r2, r3
 8010a3e:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8010a40:	2300      	movs	r3, #0
 8010a42:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8010a44:	8b7b      	ldrh	r3, [r7, #26]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d19c      	bne.n	8010984 <pbuf_alloc+0x5c>
      break;
 8010a4a:	e054      	b.n	8010af6 <pbuf_alloc+0x1ce>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8010a4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010a4e:	3303      	adds	r3, #3
 8010a50:	b29b      	uxth	r3, r3
 8010a52:	f023 0303 	bic.w	r3, r3, #3
 8010a56:	b29a      	uxth	r2, r3
 8010a58:	88bb      	ldrh	r3, [r7, #4]
 8010a5a:	3303      	adds	r3, #3
 8010a5c:	b29b      	uxth	r3, r3
 8010a5e:	f023 0303 	bic.w	r3, r3, #3
 8010a62:	b29b      	uxth	r3, r3
 8010a64:	4413      	add	r3, r2
 8010a66:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8010a68:	8b3b      	ldrh	r3, [r7, #24]
 8010a6a:	3310      	adds	r3, #16
 8010a6c:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010a6e:	8b3a      	ldrh	r2, [r7, #24]
 8010a70:	88bb      	ldrh	r3, [r7, #4]
 8010a72:	3303      	adds	r3, #3
 8010a74:	f023 0303 	bic.w	r3, r3, #3
 8010a78:	429a      	cmp	r2, r3
 8010a7a:	d306      	bcc.n	8010a8a <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8010a7c:	88bb      	ldrh	r3, [r7, #4]
 8010a7e:	3303      	adds	r3, #3
 8010a80:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010a84:	697a      	ldr	r2, [r7, #20]
 8010a86:	429a      	cmp	r2, r3
 8010a88:	d201      	bcs.n	8010a8e <pbuf_alloc+0x166>
        return NULL;
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	e034      	b.n	8010af8 <pbuf_alloc+0x1d0>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8010a8e:	6978      	ldr	r0, [r7, #20]
 8010a90:	f7ff f9e0 	bl	800fe54 <mem_malloc>
 8010a94:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8010a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d101      	bne.n	8010aa0 <pbuf_alloc+0x178>
        return NULL;
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	e02b      	b.n	8010af8 <pbuf_alloc+0x1d0>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8010aa0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010aa2:	3310      	adds	r3, #16
 8010aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010aa6:	4413      	add	r3, r2
 8010aa8:	3303      	adds	r3, #3
 8010aaa:	f023 0303 	bic.w	r3, r3, #3
 8010aae:	4618      	mov	r0, r3
 8010ab0:	88b9      	ldrh	r1, [r7, #4]
 8010ab2:	88ba      	ldrh	r2, [r7, #4]
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	9301      	str	r3, [sp, #4]
 8010ab8:	887b      	ldrh	r3, [r7, #2]
 8010aba:	9300      	str	r3, [sp, #0]
 8010abc:	460b      	mov	r3, r1
 8010abe:	4601      	mov	r1, r0
 8010ac0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010ac2:	f7ff ff07 	bl	80108d4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8010ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ac8:	685b      	ldr	r3, [r3, #4]
 8010aca:	f003 0303 	and.w	r3, r3, #3
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d010      	beq.n	8010af4 <pbuf_alloc+0x1cc>
 8010ad2:	4b0b      	ldr	r3, [pc, #44]	; (8010b00 <pbuf_alloc+0x1d8>)
 8010ad4:	f44f 7291 	mov.w	r2, #290	; 0x122
 8010ad8:	490d      	ldr	r1, [pc, #52]	; (8010b10 <pbuf_alloc+0x1e8>)
 8010ada:	480b      	ldr	r0, [pc, #44]	; (8010b08 <pbuf_alloc+0x1e0>)
 8010adc:	f009 f8e0 	bl	8019ca0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8010ae0:	e008      	b.n	8010af4 <pbuf_alloc+0x1cc>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8010ae2:	4b07      	ldr	r3, [pc, #28]	; (8010b00 <pbuf_alloc+0x1d8>)
 8010ae4:	f240 1227 	movw	r2, #295	; 0x127
 8010ae8:	490a      	ldr	r1, [pc, #40]	; (8010b14 <pbuf_alloc+0x1ec>)
 8010aea:	4807      	ldr	r0, [pc, #28]	; (8010b08 <pbuf_alloc+0x1e0>)
 8010aec:	f009 f8d8 	bl	8019ca0 <iprintf>
      return NULL;
 8010af0:	2300      	movs	r3, #0
 8010af2:	e001      	b.n	8010af8 <pbuf_alloc+0x1d0>
      break;
 8010af4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8010af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010af8:	4618      	mov	r0, r3
 8010afa:	3728      	adds	r7, #40	; 0x28
 8010afc:	46bd      	mov	sp, r7
 8010afe:	bd80      	pop	{r7, pc}
 8010b00:	0801cba0 	.word	0x0801cba0
 8010b04:	0801cbd0 	.word	0x0801cbd0
 8010b08:	0801cc00 	.word	0x0801cc00
 8010b0c:	0801cc28 	.word	0x0801cc28
 8010b10:	0801cc5c 	.word	0x0801cc5c
 8010b14:	0801cc88 	.word	0x0801cc88

08010b18 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b086      	sub	sp, #24
 8010b1c:	af02      	add	r7, sp, #8
 8010b1e:	6078      	str	r0, [r7, #4]
 8010b20:	460b      	mov	r3, r1
 8010b22:	807b      	strh	r3, [r7, #2]
 8010b24:	4613      	mov	r3, r2
 8010b26:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8010b28:	883b      	ldrh	r3, [r7, #0]
 8010b2a:	2b41      	cmp	r3, #65	; 0x41
 8010b2c:	d009      	beq.n	8010b42 <pbuf_alloc_reference+0x2a>
 8010b2e:	883b      	ldrh	r3, [r7, #0]
 8010b30:	2b01      	cmp	r3, #1
 8010b32:	d006      	beq.n	8010b42 <pbuf_alloc_reference+0x2a>
 8010b34:	4b0f      	ldr	r3, [pc, #60]	; (8010b74 <pbuf_alloc_reference+0x5c>)
 8010b36:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8010b3a:	490f      	ldr	r1, [pc, #60]	; (8010b78 <pbuf_alloc_reference+0x60>)
 8010b3c:	480f      	ldr	r0, [pc, #60]	; (8010b7c <pbuf_alloc_reference+0x64>)
 8010b3e:	f009 f8af 	bl	8019ca0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8010b42:	2007      	movs	r0, #7
 8010b44:	f7ff fb0e 	bl	8010164 <memp_malloc>
 8010b48:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d101      	bne.n	8010b54 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8010b50:	2300      	movs	r3, #0
 8010b52:	e00b      	b.n	8010b6c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8010b54:	8879      	ldrh	r1, [r7, #2]
 8010b56:	887a      	ldrh	r2, [r7, #2]
 8010b58:	2300      	movs	r3, #0
 8010b5a:	9301      	str	r3, [sp, #4]
 8010b5c:	883b      	ldrh	r3, [r7, #0]
 8010b5e:	9300      	str	r3, [sp, #0]
 8010b60:	460b      	mov	r3, r1
 8010b62:	6879      	ldr	r1, [r7, #4]
 8010b64:	68f8      	ldr	r0, [r7, #12]
 8010b66:	f7ff feb5 	bl	80108d4 <pbuf_init_alloced_pbuf>
  return p;
 8010b6a:	68fb      	ldr	r3, [r7, #12]
}
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	3710      	adds	r7, #16
 8010b70:	46bd      	mov	sp, r7
 8010b72:	bd80      	pop	{r7, pc}
 8010b74:	0801cba0 	.word	0x0801cba0
 8010b78:	0801cca4 	.word	0x0801cca4
 8010b7c:	0801cc00 	.word	0x0801cc00

08010b80 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8010b80:	b580      	push	{r7, lr}
 8010b82:	b088      	sub	sp, #32
 8010b84:	af02      	add	r7, sp, #8
 8010b86:	607b      	str	r3, [r7, #4]
 8010b88:	4603      	mov	r3, r0
 8010b8a:	73fb      	strb	r3, [r7, #15]
 8010b8c:	460b      	mov	r3, r1
 8010b8e:	81bb      	strh	r3, [r7, #12]
 8010b90:	4613      	mov	r3, r2
 8010b92:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8010b94:	7bfb      	ldrb	r3, [r7, #15]
 8010b96:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8010b98:	8a7b      	ldrh	r3, [r7, #18]
 8010b9a:	3303      	adds	r3, #3
 8010b9c:	f023 0203 	bic.w	r2, r3, #3
 8010ba0:	89bb      	ldrh	r3, [r7, #12]
 8010ba2:	441a      	add	r2, r3
 8010ba4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010ba6:	429a      	cmp	r2, r3
 8010ba8:	d901      	bls.n	8010bae <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8010baa:	2300      	movs	r3, #0
 8010bac:	e018      	b.n	8010be0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8010bae:	6a3b      	ldr	r3, [r7, #32]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d007      	beq.n	8010bc4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8010bb4:	8a7b      	ldrh	r3, [r7, #18]
 8010bb6:	3303      	adds	r3, #3
 8010bb8:	f023 0303 	bic.w	r3, r3, #3
 8010bbc:	6a3a      	ldr	r2, [r7, #32]
 8010bbe:	4413      	add	r3, r2
 8010bc0:	617b      	str	r3, [r7, #20]
 8010bc2:	e001      	b.n	8010bc8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8010bc8:	6878      	ldr	r0, [r7, #4]
 8010bca:	89b9      	ldrh	r1, [r7, #12]
 8010bcc:	89ba      	ldrh	r2, [r7, #12]
 8010bce:	2302      	movs	r3, #2
 8010bd0:	9301      	str	r3, [sp, #4]
 8010bd2:	897b      	ldrh	r3, [r7, #10]
 8010bd4:	9300      	str	r3, [sp, #0]
 8010bd6:	460b      	mov	r3, r1
 8010bd8:	6979      	ldr	r1, [r7, #20]
 8010bda:	f7ff fe7b 	bl	80108d4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8010bde:	687b      	ldr	r3, [r7, #4]
}
 8010be0:	4618      	mov	r0, r3
 8010be2:	3718      	adds	r7, #24
 8010be4:	46bd      	mov	sp, r7
 8010be6:	bd80      	pop	{r7, pc}

08010be8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b084      	sub	sp, #16
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	6078      	str	r0, [r7, #4]
 8010bf0:	460b      	mov	r3, r1
 8010bf2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d106      	bne.n	8010c08 <pbuf_realloc+0x20>
 8010bfa:	4b39      	ldr	r3, [pc, #228]	; (8010ce0 <pbuf_realloc+0xf8>)
 8010bfc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8010c00:	4938      	ldr	r1, [pc, #224]	; (8010ce4 <pbuf_realloc+0xfc>)
 8010c02:	4839      	ldr	r0, [pc, #228]	; (8010ce8 <pbuf_realloc+0x100>)
 8010c04:	f009 f84c 	bl	8019ca0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	891b      	ldrh	r3, [r3, #8]
 8010c0c:	887a      	ldrh	r2, [r7, #2]
 8010c0e:	429a      	cmp	r2, r3
 8010c10:	d261      	bcs.n	8010cd6 <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	891a      	ldrh	r2, [r3, #8]
 8010c16:	887b      	ldrh	r3, [r7, #2]
 8010c18:	1ad3      	subs	r3, r2, r3
 8010c1a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8010c1c:	887b      	ldrh	r3, [r7, #2]
 8010c1e:	817b      	strh	r3, [r7, #10]
  q = p;
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8010c24:	e018      	b.n	8010c58 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	895b      	ldrh	r3, [r3, #10]
 8010c2a:	897a      	ldrh	r2, [r7, #10]
 8010c2c:	1ad3      	subs	r3, r2, r3
 8010c2e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	891a      	ldrh	r2, [r3, #8]
 8010c34:	893b      	ldrh	r3, [r7, #8]
 8010c36:	1ad3      	subs	r3, r2, r3
 8010c38:	b29a      	uxth	r2, r3
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d106      	bne.n	8010c58 <pbuf_realloc+0x70>
 8010c4a:	4b25      	ldr	r3, [pc, #148]	; (8010ce0 <pbuf_realloc+0xf8>)
 8010c4c:	f240 12af 	movw	r2, #431	; 0x1af
 8010c50:	4926      	ldr	r1, [pc, #152]	; (8010cec <pbuf_realloc+0x104>)
 8010c52:	4825      	ldr	r0, [pc, #148]	; (8010ce8 <pbuf_realloc+0x100>)
 8010c54:	f009 f824 	bl	8019ca0 <iprintf>
  while (rem_len > q->len) {
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	895b      	ldrh	r3, [r3, #10]
 8010c5c:	897a      	ldrh	r2, [r7, #10]
 8010c5e:	429a      	cmp	r2, r3
 8010c60:	d8e1      	bhi.n	8010c26 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	7b1b      	ldrb	r3, [r3, #12]
 8010c66:	f003 030f 	and.w	r3, r3, #15
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d11f      	bne.n	8010cae <pbuf_realloc+0xc6>
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	895b      	ldrh	r3, [r3, #10]
 8010c72:	897a      	ldrh	r2, [r7, #10]
 8010c74:	429a      	cmp	r2, r3
 8010c76:	d01a      	beq.n	8010cae <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	7b5b      	ldrb	r3, [r3, #13]
 8010c7c:	f003 0302 	and.w	r3, r3, #2
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d114      	bne.n	8010cae <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	685a      	ldr	r2, [r3, #4]
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	1ad2      	subs	r2, r2, r3
 8010c8c:	897b      	ldrh	r3, [r7, #10]
 8010c8e:	4413      	add	r3, r2
 8010c90:	4619      	mov	r1, r3
 8010c92:	68f8      	ldr	r0, [r7, #12]
 8010c94:	f7fe ffea 	bl	800fc6c <mem_trim>
 8010c98:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d106      	bne.n	8010cae <pbuf_realloc+0xc6>
 8010ca0:	4b0f      	ldr	r3, [pc, #60]	; (8010ce0 <pbuf_realloc+0xf8>)
 8010ca2:	f240 12bd 	movw	r2, #445	; 0x1bd
 8010ca6:	4912      	ldr	r1, [pc, #72]	; (8010cf0 <pbuf_realloc+0x108>)
 8010ca8:	480f      	ldr	r0, [pc, #60]	; (8010ce8 <pbuf_realloc+0x100>)
 8010caa:	f008 fff9 	bl	8019ca0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	897a      	ldrh	r2, [r7, #10]
 8010cb2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	895a      	ldrh	r2, [r3, #10]
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d004      	beq.n	8010cce <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f000 f911 	bl	8010ef0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	2200      	movs	r2, #0
 8010cd2:	601a      	str	r2, [r3, #0]
 8010cd4:	e000      	b.n	8010cd8 <pbuf_realloc+0xf0>
    return;
 8010cd6:	bf00      	nop

}
 8010cd8:	3710      	adds	r7, #16
 8010cda:	46bd      	mov	sp, r7
 8010cdc:	bd80      	pop	{r7, pc}
 8010cde:	bf00      	nop
 8010ce0:	0801cba0 	.word	0x0801cba0
 8010ce4:	0801ccb8 	.word	0x0801ccb8
 8010ce8:	0801cc00 	.word	0x0801cc00
 8010cec:	0801ccd0 	.word	0x0801ccd0
 8010cf0:	0801cce8 	.word	0x0801cce8

08010cf4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	b086      	sub	sp, #24
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	60f8      	str	r0, [r7, #12]
 8010cfc:	60b9      	str	r1, [r7, #8]
 8010cfe:	4613      	mov	r3, r2
 8010d00:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d106      	bne.n	8010d16 <pbuf_add_header_impl+0x22>
 8010d08:	4b2b      	ldr	r3, [pc, #172]	; (8010db8 <pbuf_add_header_impl+0xc4>)
 8010d0a:	f240 12df 	movw	r2, #479	; 0x1df
 8010d0e:	492b      	ldr	r1, [pc, #172]	; (8010dbc <pbuf_add_header_impl+0xc8>)
 8010d10:	482b      	ldr	r0, [pc, #172]	; (8010dc0 <pbuf_add_header_impl+0xcc>)
 8010d12:	f008 ffc5 	bl	8019ca0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d003      	beq.n	8010d24 <pbuf_add_header_impl+0x30>
 8010d1c:	68bb      	ldr	r3, [r7, #8]
 8010d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010d22:	d301      	bcc.n	8010d28 <pbuf_add_header_impl+0x34>
    return 1;
 8010d24:	2301      	movs	r3, #1
 8010d26:	e043      	b.n	8010db0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8010d28:	68bb      	ldr	r3, [r7, #8]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d101      	bne.n	8010d32 <pbuf_add_header_impl+0x3e>
    return 0;
 8010d2e:	2300      	movs	r3, #0
 8010d30:	e03e      	b.n	8010db0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8010d32:	68bb      	ldr	r3, [r7, #8]
 8010d34:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	891a      	ldrh	r2, [r3, #8]
 8010d3a:	8a7b      	ldrh	r3, [r7, #18]
 8010d3c:	4413      	add	r3, r2
 8010d3e:	b29b      	uxth	r3, r3
 8010d40:	8a7a      	ldrh	r2, [r7, #18]
 8010d42:	429a      	cmp	r2, r3
 8010d44:	d901      	bls.n	8010d4a <pbuf_add_header_impl+0x56>
    return 1;
 8010d46:	2301      	movs	r3, #1
 8010d48:	e032      	b.n	8010db0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	7b1b      	ldrb	r3, [r3, #12]
 8010d4e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8010d50:	8a3b      	ldrh	r3, [r7, #16]
 8010d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d00c      	beq.n	8010d74 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	685a      	ldr	r2, [r3, #4]
 8010d5e:	68bb      	ldr	r3, [r7, #8]
 8010d60:	425b      	negs	r3, r3
 8010d62:	4413      	add	r3, r2
 8010d64:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	3310      	adds	r3, #16
 8010d6a:	697a      	ldr	r2, [r7, #20]
 8010d6c:	429a      	cmp	r2, r3
 8010d6e:	d20d      	bcs.n	8010d8c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8010d70:	2301      	movs	r3, #1
 8010d72:	e01d      	b.n	8010db0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8010d74:	79fb      	ldrb	r3, [r7, #7]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d006      	beq.n	8010d88 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	685a      	ldr	r2, [r3, #4]
 8010d7e:	68bb      	ldr	r3, [r7, #8]
 8010d80:	425b      	negs	r3, r3
 8010d82:	4413      	add	r3, r2
 8010d84:	617b      	str	r3, [r7, #20]
 8010d86:	e001      	b.n	8010d8c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8010d88:	2301      	movs	r3, #1
 8010d8a:	e011      	b.n	8010db0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	697a      	ldr	r2, [r7, #20]
 8010d90:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	895a      	ldrh	r2, [r3, #10]
 8010d96:	8a7b      	ldrh	r3, [r7, #18]
 8010d98:	4413      	add	r3, r2
 8010d9a:	b29a      	uxth	r2, r3
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	891a      	ldrh	r2, [r3, #8]
 8010da4:	8a7b      	ldrh	r3, [r7, #18]
 8010da6:	4413      	add	r3, r2
 8010da8:	b29a      	uxth	r2, r3
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	811a      	strh	r2, [r3, #8]


  return 0;
 8010dae:	2300      	movs	r3, #0
}
 8010db0:	4618      	mov	r0, r3
 8010db2:	3718      	adds	r7, #24
 8010db4:	46bd      	mov	sp, r7
 8010db6:	bd80      	pop	{r7, pc}
 8010db8:	0801cba0 	.word	0x0801cba0
 8010dbc:	0801cd04 	.word	0x0801cd04
 8010dc0:	0801cc00 	.word	0x0801cc00

08010dc4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b082      	sub	sp, #8
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
 8010dcc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8010dce:	2200      	movs	r2, #0
 8010dd0:	6839      	ldr	r1, [r7, #0]
 8010dd2:	6878      	ldr	r0, [r7, #4]
 8010dd4:	f7ff ff8e 	bl	8010cf4 <pbuf_add_header_impl>
 8010dd8:	4603      	mov	r3, r0
}
 8010dda:	4618      	mov	r0, r3
 8010ddc:	3708      	adds	r7, #8
 8010dde:	46bd      	mov	sp, r7
 8010de0:	bd80      	pop	{r7, pc}
	...

08010de4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b084      	sub	sp, #16
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	6078      	str	r0, [r7, #4]
 8010dec:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d106      	bne.n	8010e02 <pbuf_remove_header+0x1e>
 8010df4:	4b20      	ldr	r3, [pc, #128]	; (8010e78 <pbuf_remove_header+0x94>)
 8010df6:	f240 224b 	movw	r2, #587	; 0x24b
 8010dfa:	4920      	ldr	r1, [pc, #128]	; (8010e7c <pbuf_remove_header+0x98>)
 8010dfc:	4820      	ldr	r0, [pc, #128]	; (8010e80 <pbuf_remove_header+0x9c>)
 8010dfe:	f008 ff4f 	bl	8019ca0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d003      	beq.n	8010e10 <pbuf_remove_header+0x2c>
 8010e08:	683b      	ldr	r3, [r7, #0]
 8010e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010e0e:	d301      	bcc.n	8010e14 <pbuf_remove_header+0x30>
    return 1;
 8010e10:	2301      	movs	r3, #1
 8010e12:	e02c      	b.n	8010e6e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8010e14:	683b      	ldr	r3, [r7, #0]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d101      	bne.n	8010e1e <pbuf_remove_header+0x3a>
    return 0;
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	e027      	b.n	8010e6e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8010e1e:	683b      	ldr	r3, [r7, #0]
 8010e20:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	895b      	ldrh	r3, [r3, #10]
 8010e26:	89fa      	ldrh	r2, [r7, #14]
 8010e28:	429a      	cmp	r2, r3
 8010e2a:	d908      	bls.n	8010e3e <pbuf_remove_header+0x5a>
 8010e2c:	4b12      	ldr	r3, [pc, #72]	; (8010e78 <pbuf_remove_header+0x94>)
 8010e2e:	f240 2255 	movw	r2, #597	; 0x255
 8010e32:	4914      	ldr	r1, [pc, #80]	; (8010e84 <pbuf_remove_header+0xa0>)
 8010e34:	4812      	ldr	r0, [pc, #72]	; (8010e80 <pbuf_remove_header+0x9c>)
 8010e36:	f008 ff33 	bl	8019ca0 <iprintf>
 8010e3a:	2301      	movs	r3, #1
 8010e3c:	e017      	b.n	8010e6e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	685b      	ldr	r3, [r3, #4]
 8010e42:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	685a      	ldr	r2, [r3, #4]
 8010e48:	683b      	ldr	r3, [r7, #0]
 8010e4a:	441a      	add	r2, r3
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	895a      	ldrh	r2, [r3, #10]
 8010e54:	89fb      	ldrh	r3, [r7, #14]
 8010e56:	1ad3      	subs	r3, r2, r3
 8010e58:	b29a      	uxth	r2, r3
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	891a      	ldrh	r2, [r3, #8]
 8010e62:	89fb      	ldrh	r3, [r7, #14]
 8010e64:	1ad3      	subs	r3, r2, r3
 8010e66:	b29a      	uxth	r2, r3
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8010e6c:	2300      	movs	r3, #0
}
 8010e6e:	4618      	mov	r0, r3
 8010e70:	3710      	adds	r7, #16
 8010e72:	46bd      	mov	sp, r7
 8010e74:	bd80      	pop	{r7, pc}
 8010e76:	bf00      	nop
 8010e78:	0801cba0 	.word	0x0801cba0
 8010e7c:	0801cd04 	.word	0x0801cd04
 8010e80:	0801cc00 	.word	0x0801cc00
 8010e84:	0801cd10 	.word	0x0801cd10

08010e88 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b082      	sub	sp, #8
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]
 8010e90:	460b      	mov	r3, r1
 8010e92:	807b      	strh	r3, [r7, #2]
 8010e94:	4613      	mov	r3, r2
 8010e96:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8010e98:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	da08      	bge.n	8010eb2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8010ea0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010ea4:	425b      	negs	r3, r3
 8010ea6:	4619      	mov	r1, r3
 8010ea8:	6878      	ldr	r0, [r7, #4]
 8010eaa:	f7ff ff9b 	bl	8010de4 <pbuf_remove_header>
 8010eae:	4603      	mov	r3, r0
 8010eb0:	e007      	b.n	8010ec2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8010eb2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010eb6:	787a      	ldrb	r2, [r7, #1]
 8010eb8:	4619      	mov	r1, r3
 8010eba:	6878      	ldr	r0, [r7, #4]
 8010ebc:	f7ff ff1a 	bl	8010cf4 <pbuf_add_header_impl>
 8010ec0:	4603      	mov	r3, r0
  }
}
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	3708      	adds	r7, #8
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	bd80      	pop	{r7, pc}

08010eca <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8010eca:	b580      	push	{r7, lr}
 8010ecc:	b082      	sub	sp, #8
 8010ece:	af00      	add	r7, sp, #0
 8010ed0:	6078      	str	r0, [r7, #4]
 8010ed2:	460b      	mov	r3, r1
 8010ed4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8010ed6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010eda:	2201      	movs	r2, #1
 8010edc:	4619      	mov	r1, r3
 8010ede:	6878      	ldr	r0, [r7, #4]
 8010ee0:	f7ff ffd2 	bl	8010e88 <pbuf_header_impl>
 8010ee4:	4603      	mov	r3, r0
}
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	3708      	adds	r7, #8
 8010eea:	46bd      	mov	sp, r7
 8010eec:	bd80      	pop	{r7, pc}
	...

08010ef0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b086      	sub	sp, #24
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d10b      	bne.n	8010f16 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d106      	bne.n	8010f12 <pbuf_free+0x22>
 8010f04:	4b38      	ldr	r3, [pc, #224]	; (8010fe8 <pbuf_free+0xf8>)
 8010f06:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8010f0a:	4938      	ldr	r1, [pc, #224]	; (8010fec <pbuf_free+0xfc>)
 8010f0c:	4838      	ldr	r0, [pc, #224]	; (8010ff0 <pbuf_free+0x100>)
 8010f0e:	f008 fec7 	bl	8019ca0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8010f12:	2300      	movs	r3, #0
 8010f14:	e063      	b.n	8010fde <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8010f16:	2300      	movs	r3, #0
 8010f18:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8010f1a:	e05c      	b.n	8010fd6 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	7b9b      	ldrb	r3, [r3, #14]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d106      	bne.n	8010f32 <pbuf_free+0x42>
 8010f24:	4b30      	ldr	r3, [pc, #192]	; (8010fe8 <pbuf_free+0xf8>)
 8010f26:	f240 22f1 	movw	r2, #753	; 0x2f1
 8010f2a:	4932      	ldr	r1, [pc, #200]	; (8010ff4 <pbuf_free+0x104>)
 8010f2c:	4830      	ldr	r0, [pc, #192]	; (8010ff0 <pbuf_free+0x100>)
 8010f2e:	f008 feb7 	bl	8019ca0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	7b9b      	ldrb	r3, [r3, #14]
 8010f36:	3b01      	subs	r3, #1
 8010f38:	b2da      	uxtb	r2, r3
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	739a      	strb	r2, [r3, #14]
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	7b9b      	ldrb	r3, [r3, #14]
 8010f42:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8010f44:	7dbb      	ldrb	r3, [r7, #22]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d143      	bne.n	8010fd2 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	7b1b      	ldrb	r3, [r3, #12]
 8010f54:	f003 030f 	and.w	r3, r3, #15
 8010f58:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	7b5b      	ldrb	r3, [r3, #13]
 8010f5e:	f003 0302 	and.w	r3, r3, #2
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d011      	beq.n	8010f8a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8010f6a:	68bb      	ldr	r3, [r7, #8]
 8010f6c:	691b      	ldr	r3, [r3, #16]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d106      	bne.n	8010f80 <pbuf_free+0x90>
 8010f72:	4b1d      	ldr	r3, [pc, #116]	; (8010fe8 <pbuf_free+0xf8>)
 8010f74:	f240 22ff 	movw	r2, #767	; 0x2ff
 8010f78:	491f      	ldr	r1, [pc, #124]	; (8010ff8 <pbuf_free+0x108>)
 8010f7a:	481d      	ldr	r0, [pc, #116]	; (8010ff0 <pbuf_free+0x100>)
 8010f7c:	f008 fe90 	bl	8019ca0 <iprintf>
        pc->custom_free_function(p);
 8010f80:	68bb      	ldr	r3, [r7, #8]
 8010f82:	691b      	ldr	r3, [r3, #16]
 8010f84:	6878      	ldr	r0, [r7, #4]
 8010f86:	4798      	blx	r3
 8010f88:	e01d      	b.n	8010fc6 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8010f8a:	7bfb      	ldrb	r3, [r7, #15]
 8010f8c:	2b02      	cmp	r3, #2
 8010f8e:	d104      	bne.n	8010f9a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8010f90:	6879      	ldr	r1, [r7, #4]
 8010f92:	2008      	movs	r0, #8
 8010f94:	f7ff f956 	bl	8010244 <memp_free>
 8010f98:	e015      	b.n	8010fc6 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8010f9a:	7bfb      	ldrb	r3, [r7, #15]
 8010f9c:	2b01      	cmp	r3, #1
 8010f9e:	d104      	bne.n	8010faa <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8010fa0:	6879      	ldr	r1, [r7, #4]
 8010fa2:	2007      	movs	r0, #7
 8010fa4:	f7ff f94e 	bl	8010244 <memp_free>
 8010fa8:	e00d      	b.n	8010fc6 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8010faa:	7bfb      	ldrb	r3, [r7, #15]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d103      	bne.n	8010fb8 <pbuf_free+0xc8>
          mem_free(p);
 8010fb0:	6878      	ldr	r0, [r7, #4]
 8010fb2:	f7fe fdf1 	bl	800fb98 <mem_free>
 8010fb6:	e006      	b.n	8010fc6 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8010fb8:	4b0b      	ldr	r3, [pc, #44]	; (8010fe8 <pbuf_free+0xf8>)
 8010fba:	f240 320f 	movw	r2, #783	; 0x30f
 8010fbe:	490f      	ldr	r1, [pc, #60]	; (8010ffc <pbuf_free+0x10c>)
 8010fc0:	480b      	ldr	r0, [pc, #44]	; (8010ff0 <pbuf_free+0x100>)
 8010fc2:	f008 fe6d 	bl	8019ca0 <iprintf>
        }
      }
      count++;
 8010fc6:	7dfb      	ldrb	r3, [r7, #23]
 8010fc8:	3301      	adds	r3, #1
 8010fca:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8010fcc:	693b      	ldr	r3, [r7, #16]
 8010fce:	607b      	str	r3, [r7, #4]
 8010fd0:	e001      	b.n	8010fd6 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d19f      	bne.n	8010f1c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8010fdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8010fde:	4618      	mov	r0, r3
 8010fe0:	3718      	adds	r7, #24
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	bd80      	pop	{r7, pc}
 8010fe6:	bf00      	nop
 8010fe8:	0801cba0 	.word	0x0801cba0
 8010fec:	0801cd04 	.word	0x0801cd04
 8010ff0:	0801cc00 	.word	0x0801cc00
 8010ff4:	0801cd30 	.word	0x0801cd30
 8010ff8:	0801cd48 	.word	0x0801cd48
 8010ffc:	0801cd6c 	.word	0x0801cd6c

08011000 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8011000:	b480      	push	{r7}
 8011002:	b085      	sub	sp, #20
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8011008:	2300      	movs	r3, #0
 801100a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801100c:	e005      	b.n	801101a <pbuf_clen+0x1a>
    ++len;
 801100e:	89fb      	ldrh	r3, [r7, #14]
 8011010:	3301      	adds	r3, #1
 8011012:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d1f6      	bne.n	801100e <pbuf_clen+0xe>
  }
  return len;
 8011020:	89fb      	ldrh	r3, [r7, #14]
}
 8011022:	4618      	mov	r0, r3
 8011024:	3714      	adds	r7, #20
 8011026:	46bd      	mov	sp, r7
 8011028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801102c:	4770      	bx	lr
	...

08011030 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8011030:	b580      	push	{r7, lr}
 8011032:	b082      	sub	sp, #8
 8011034:	af00      	add	r7, sp, #0
 8011036:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d010      	beq.n	8011060 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	7b9b      	ldrb	r3, [r3, #14]
 8011042:	3301      	adds	r3, #1
 8011044:	b2da      	uxtb	r2, r3
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	7b9b      	ldrb	r3, [r3, #14]
 801104e:	2b00      	cmp	r3, #0
 8011050:	d106      	bne.n	8011060 <pbuf_ref+0x30>
 8011052:	4b05      	ldr	r3, [pc, #20]	; (8011068 <pbuf_ref+0x38>)
 8011054:	f240 3242 	movw	r2, #834	; 0x342
 8011058:	4904      	ldr	r1, [pc, #16]	; (801106c <pbuf_ref+0x3c>)
 801105a:	4805      	ldr	r0, [pc, #20]	; (8011070 <pbuf_ref+0x40>)
 801105c:	f008 fe20 	bl	8019ca0 <iprintf>
  }
}
 8011060:	bf00      	nop
 8011062:	3708      	adds	r7, #8
 8011064:	46bd      	mov	sp, r7
 8011066:	bd80      	pop	{r7, pc}
 8011068:	0801cba0 	.word	0x0801cba0
 801106c:	0801cd80 	.word	0x0801cd80
 8011070:	0801cc00 	.word	0x0801cc00

08011074 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8011074:	b580      	push	{r7, lr}
 8011076:	b084      	sub	sp, #16
 8011078:	af00      	add	r7, sp, #0
 801107a:	6078      	str	r0, [r7, #4]
 801107c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d002      	beq.n	801108a <pbuf_cat+0x16>
 8011084:	683b      	ldr	r3, [r7, #0]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d107      	bne.n	801109a <pbuf_cat+0x26>
 801108a:	4b20      	ldr	r3, [pc, #128]	; (801110c <pbuf_cat+0x98>)
 801108c:	f240 3259 	movw	r2, #857	; 0x359
 8011090:	491f      	ldr	r1, [pc, #124]	; (8011110 <pbuf_cat+0x9c>)
 8011092:	4820      	ldr	r0, [pc, #128]	; (8011114 <pbuf_cat+0xa0>)
 8011094:	f008 fe04 	bl	8019ca0 <iprintf>
 8011098:	e034      	b.n	8011104 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	60fb      	str	r3, [r7, #12]
 801109e:	e00a      	b.n	80110b6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	891a      	ldrh	r2, [r3, #8]
 80110a4:	683b      	ldr	r3, [r7, #0]
 80110a6:	891b      	ldrh	r3, [r3, #8]
 80110a8:	4413      	add	r3, r2
 80110aa:	b29a      	uxth	r2, r3
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	60fb      	str	r3, [r7, #12]
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d1f0      	bne.n	80110a0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	891a      	ldrh	r2, [r3, #8]
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	895b      	ldrh	r3, [r3, #10]
 80110c6:	429a      	cmp	r2, r3
 80110c8:	d006      	beq.n	80110d8 <pbuf_cat+0x64>
 80110ca:	4b10      	ldr	r3, [pc, #64]	; (801110c <pbuf_cat+0x98>)
 80110cc:	f240 3262 	movw	r2, #866	; 0x362
 80110d0:	4911      	ldr	r1, [pc, #68]	; (8011118 <pbuf_cat+0xa4>)
 80110d2:	4810      	ldr	r0, [pc, #64]	; (8011114 <pbuf_cat+0xa0>)
 80110d4:	f008 fde4 	bl	8019ca0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d006      	beq.n	80110ee <pbuf_cat+0x7a>
 80110e0:	4b0a      	ldr	r3, [pc, #40]	; (801110c <pbuf_cat+0x98>)
 80110e2:	f240 3263 	movw	r2, #867	; 0x363
 80110e6:	490d      	ldr	r1, [pc, #52]	; (801111c <pbuf_cat+0xa8>)
 80110e8:	480a      	ldr	r0, [pc, #40]	; (8011114 <pbuf_cat+0xa0>)
 80110ea:	f008 fdd9 	bl	8019ca0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	891a      	ldrh	r2, [r3, #8]
 80110f2:	683b      	ldr	r3, [r7, #0]
 80110f4:	891b      	ldrh	r3, [r3, #8]
 80110f6:	4413      	add	r3, r2
 80110f8:	b29a      	uxth	r2, r3
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	683a      	ldr	r2, [r7, #0]
 8011102:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8011104:	3710      	adds	r7, #16
 8011106:	46bd      	mov	sp, r7
 8011108:	bd80      	pop	{r7, pc}
 801110a:	bf00      	nop
 801110c:	0801cba0 	.word	0x0801cba0
 8011110:	0801cd94 	.word	0x0801cd94
 8011114:	0801cc00 	.word	0x0801cc00
 8011118:	0801cdcc 	.word	0x0801cdcc
 801111c:	0801cdfc 	.word	0x0801cdfc

08011120 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8011120:	b580      	push	{r7, lr}
 8011122:	b086      	sub	sp, #24
 8011124:	af00      	add	r7, sp, #0
 8011126:	6078      	str	r0, [r7, #4]
 8011128:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801112a:	2300      	movs	r3, #0
 801112c:	617b      	str	r3, [r7, #20]
 801112e:	2300      	movs	r3, #0
 8011130:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	2b00      	cmp	r3, #0
 8011136:	d008      	beq.n	801114a <pbuf_copy+0x2a>
 8011138:	683b      	ldr	r3, [r7, #0]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d005      	beq.n	801114a <pbuf_copy+0x2a>
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	891a      	ldrh	r2, [r3, #8]
 8011142:	683b      	ldr	r3, [r7, #0]
 8011144:	891b      	ldrh	r3, [r3, #8]
 8011146:	429a      	cmp	r2, r3
 8011148:	d209      	bcs.n	801115e <pbuf_copy+0x3e>
 801114a:	4b57      	ldr	r3, [pc, #348]	; (80112a8 <pbuf_copy+0x188>)
 801114c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8011150:	4956      	ldr	r1, [pc, #344]	; (80112ac <pbuf_copy+0x18c>)
 8011152:	4857      	ldr	r0, [pc, #348]	; (80112b0 <pbuf_copy+0x190>)
 8011154:	f008 fda4 	bl	8019ca0 <iprintf>
 8011158:	f06f 030f 	mvn.w	r3, #15
 801115c:	e09f      	b.n	801129e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	895b      	ldrh	r3, [r3, #10]
 8011162:	461a      	mov	r2, r3
 8011164:	697b      	ldr	r3, [r7, #20]
 8011166:	1ad2      	subs	r2, r2, r3
 8011168:	683b      	ldr	r3, [r7, #0]
 801116a:	895b      	ldrh	r3, [r3, #10]
 801116c:	4619      	mov	r1, r3
 801116e:	693b      	ldr	r3, [r7, #16]
 8011170:	1acb      	subs	r3, r1, r3
 8011172:	429a      	cmp	r2, r3
 8011174:	d306      	bcc.n	8011184 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8011176:	683b      	ldr	r3, [r7, #0]
 8011178:	895b      	ldrh	r3, [r3, #10]
 801117a:	461a      	mov	r2, r3
 801117c:	693b      	ldr	r3, [r7, #16]
 801117e:	1ad3      	subs	r3, r2, r3
 8011180:	60fb      	str	r3, [r7, #12]
 8011182:	e005      	b.n	8011190 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	895b      	ldrh	r3, [r3, #10]
 8011188:	461a      	mov	r2, r3
 801118a:	697b      	ldr	r3, [r7, #20]
 801118c:	1ad3      	subs	r3, r2, r3
 801118e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	685a      	ldr	r2, [r3, #4]
 8011194:	697b      	ldr	r3, [r7, #20]
 8011196:	18d0      	adds	r0, r2, r3
 8011198:	683b      	ldr	r3, [r7, #0]
 801119a:	685a      	ldr	r2, [r3, #4]
 801119c:	693b      	ldr	r3, [r7, #16]
 801119e:	4413      	add	r3, r2
 80111a0:	68fa      	ldr	r2, [r7, #12]
 80111a2:	4619      	mov	r1, r3
 80111a4:	f008 ff4b 	bl	801a03e <memcpy>
    offset_to += len;
 80111a8:	697a      	ldr	r2, [r7, #20]
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	4413      	add	r3, r2
 80111ae:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80111b0:	693a      	ldr	r2, [r7, #16]
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	4413      	add	r3, r2
 80111b6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	895b      	ldrh	r3, [r3, #10]
 80111bc:	461a      	mov	r2, r3
 80111be:	697b      	ldr	r3, [r7, #20]
 80111c0:	4293      	cmp	r3, r2
 80111c2:	d906      	bls.n	80111d2 <pbuf_copy+0xb2>
 80111c4:	4b38      	ldr	r3, [pc, #224]	; (80112a8 <pbuf_copy+0x188>)
 80111c6:	f240 32d9 	movw	r2, #985	; 0x3d9
 80111ca:	493a      	ldr	r1, [pc, #232]	; (80112b4 <pbuf_copy+0x194>)
 80111cc:	4838      	ldr	r0, [pc, #224]	; (80112b0 <pbuf_copy+0x190>)
 80111ce:	f008 fd67 	bl	8019ca0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80111d2:	683b      	ldr	r3, [r7, #0]
 80111d4:	895b      	ldrh	r3, [r3, #10]
 80111d6:	461a      	mov	r2, r3
 80111d8:	693b      	ldr	r3, [r7, #16]
 80111da:	4293      	cmp	r3, r2
 80111dc:	d906      	bls.n	80111ec <pbuf_copy+0xcc>
 80111de:	4b32      	ldr	r3, [pc, #200]	; (80112a8 <pbuf_copy+0x188>)
 80111e0:	f240 32da 	movw	r2, #986	; 0x3da
 80111e4:	4934      	ldr	r1, [pc, #208]	; (80112b8 <pbuf_copy+0x198>)
 80111e6:	4832      	ldr	r0, [pc, #200]	; (80112b0 <pbuf_copy+0x190>)
 80111e8:	f008 fd5a 	bl	8019ca0 <iprintf>
    if (offset_from >= p_from->len) {
 80111ec:	683b      	ldr	r3, [r7, #0]
 80111ee:	895b      	ldrh	r3, [r3, #10]
 80111f0:	461a      	mov	r2, r3
 80111f2:	693b      	ldr	r3, [r7, #16]
 80111f4:	4293      	cmp	r3, r2
 80111f6:	d304      	bcc.n	8011202 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80111f8:	2300      	movs	r3, #0
 80111fa:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80111fc:	683b      	ldr	r3, [r7, #0]
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	895b      	ldrh	r3, [r3, #10]
 8011206:	461a      	mov	r2, r3
 8011208:	697b      	ldr	r3, [r7, #20]
 801120a:	4293      	cmp	r3, r2
 801120c:	d114      	bne.n	8011238 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801120e:	2300      	movs	r3, #0
 8011210:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	2b00      	cmp	r3, #0
 801121c:	d10c      	bne.n	8011238 <pbuf_copy+0x118>
 801121e:	683b      	ldr	r3, [r7, #0]
 8011220:	2b00      	cmp	r3, #0
 8011222:	d009      	beq.n	8011238 <pbuf_copy+0x118>
 8011224:	4b20      	ldr	r3, [pc, #128]	; (80112a8 <pbuf_copy+0x188>)
 8011226:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801122a:	4924      	ldr	r1, [pc, #144]	; (80112bc <pbuf_copy+0x19c>)
 801122c:	4820      	ldr	r0, [pc, #128]	; (80112b0 <pbuf_copy+0x190>)
 801122e:	f008 fd37 	bl	8019ca0 <iprintf>
 8011232:	f06f 030f 	mvn.w	r3, #15
 8011236:	e032      	b.n	801129e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8011238:	683b      	ldr	r3, [r7, #0]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d013      	beq.n	8011266 <pbuf_copy+0x146>
 801123e:	683b      	ldr	r3, [r7, #0]
 8011240:	895a      	ldrh	r2, [r3, #10]
 8011242:	683b      	ldr	r3, [r7, #0]
 8011244:	891b      	ldrh	r3, [r3, #8]
 8011246:	429a      	cmp	r2, r3
 8011248:	d10d      	bne.n	8011266 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801124a:	683b      	ldr	r3, [r7, #0]
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d009      	beq.n	8011266 <pbuf_copy+0x146>
 8011252:	4b15      	ldr	r3, [pc, #84]	; (80112a8 <pbuf_copy+0x188>)
 8011254:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8011258:	4919      	ldr	r1, [pc, #100]	; (80112c0 <pbuf_copy+0x1a0>)
 801125a:	4815      	ldr	r0, [pc, #84]	; (80112b0 <pbuf_copy+0x190>)
 801125c:	f008 fd20 	bl	8019ca0 <iprintf>
 8011260:	f06f 0305 	mvn.w	r3, #5
 8011264:	e01b      	b.n	801129e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d013      	beq.n	8011294 <pbuf_copy+0x174>
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	895a      	ldrh	r2, [r3, #10]
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	891b      	ldrh	r3, [r3, #8]
 8011274:	429a      	cmp	r2, r3
 8011276:	d10d      	bne.n	8011294 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d009      	beq.n	8011294 <pbuf_copy+0x174>
 8011280:	4b09      	ldr	r3, [pc, #36]	; (80112a8 <pbuf_copy+0x188>)
 8011282:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8011286:	490e      	ldr	r1, [pc, #56]	; (80112c0 <pbuf_copy+0x1a0>)
 8011288:	4809      	ldr	r0, [pc, #36]	; (80112b0 <pbuf_copy+0x190>)
 801128a:	f008 fd09 	bl	8019ca0 <iprintf>
 801128e:	f06f 0305 	mvn.w	r3, #5
 8011292:	e004      	b.n	801129e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8011294:	683b      	ldr	r3, [r7, #0]
 8011296:	2b00      	cmp	r3, #0
 8011298:	f47f af61 	bne.w	801115e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801129c:	2300      	movs	r3, #0
}
 801129e:	4618      	mov	r0, r3
 80112a0:	3718      	adds	r7, #24
 80112a2:	46bd      	mov	sp, r7
 80112a4:	bd80      	pop	{r7, pc}
 80112a6:	bf00      	nop
 80112a8:	0801cba0 	.word	0x0801cba0
 80112ac:	0801ce48 	.word	0x0801ce48
 80112b0:	0801cc00 	.word	0x0801cc00
 80112b4:	0801ce78 	.word	0x0801ce78
 80112b8:	0801ce90 	.word	0x0801ce90
 80112bc:	0801ceac 	.word	0x0801ceac
 80112c0:	0801cebc 	.word	0x0801cebc

080112c4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80112c4:	b580      	push	{r7, lr}
 80112c6:	b088      	sub	sp, #32
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	60f8      	str	r0, [r7, #12]
 80112cc:	60b9      	str	r1, [r7, #8]
 80112ce:	4611      	mov	r1, r2
 80112d0:	461a      	mov	r2, r3
 80112d2:	460b      	mov	r3, r1
 80112d4:	80fb      	strh	r3, [r7, #6]
 80112d6:	4613      	mov	r3, r2
 80112d8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80112da:	2300      	movs	r3, #0
 80112dc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80112de:	2300      	movs	r3, #0
 80112e0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d108      	bne.n	80112fa <pbuf_copy_partial+0x36>
 80112e8:	4b2b      	ldr	r3, [pc, #172]	; (8011398 <pbuf_copy_partial+0xd4>)
 80112ea:	f240 420a 	movw	r2, #1034	; 0x40a
 80112ee:	492b      	ldr	r1, [pc, #172]	; (801139c <pbuf_copy_partial+0xd8>)
 80112f0:	482b      	ldr	r0, [pc, #172]	; (80113a0 <pbuf_copy_partial+0xdc>)
 80112f2:	f008 fcd5 	bl	8019ca0 <iprintf>
 80112f6:	2300      	movs	r3, #0
 80112f8:	e04a      	b.n	8011390 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80112fa:	68bb      	ldr	r3, [r7, #8]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d108      	bne.n	8011312 <pbuf_copy_partial+0x4e>
 8011300:	4b25      	ldr	r3, [pc, #148]	; (8011398 <pbuf_copy_partial+0xd4>)
 8011302:	f240 420b 	movw	r2, #1035	; 0x40b
 8011306:	4927      	ldr	r1, [pc, #156]	; (80113a4 <pbuf_copy_partial+0xe0>)
 8011308:	4825      	ldr	r0, [pc, #148]	; (80113a0 <pbuf_copy_partial+0xdc>)
 801130a:	f008 fcc9 	bl	8019ca0 <iprintf>
 801130e:	2300      	movs	r3, #0
 8011310:	e03e      	b.n	8011390 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	61fb      	str	r3, [r7, #28]
 8011316:	e034      	b.n	8011382 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8011318:	88bb      	ldrh	r3, [r7, #4]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d00a      	beq.n	8011334 <pbuf_copy_partial+0x70>
 801131e:	69fb      	ldr	r3, [r7, #28]
 8011320:	895b      	ldrh	r3, [r3, #10]
 8011322:	88ba      	ldrh	r2, [r7, #4]
 8011324:	429a      	cmp	r2, r3
 8011326:	d305      	bcc.n	8011334 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8011328:	69fb      	ldr	r3, [r7, #28]
 801132a:	895b      	ldrh	r3, [r3, #10]
 801132c:	88ba      	ldrh	r2, [r7, #4]
 801132e:	1ad3      	subs	r3, r2, r3
 8011330:	80bb      	strh	r3, [r7, #4]
 8011332:	e023      	b.n	801137c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8011334:	69fb      	ldr	r3, [r7, #28]
 8011336:	895a      	ldrh	r2, [r3, #10]
 8011338:	88bb      	ldrh	r3, [r7, #4]
 801133a:	1ad3      	subs	r3, r2, r3
 801133c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801133e:	8b3a      	ldrh	r2, [r7, #24]
 8011340:	88fb      	ldrh	r3, [r7, #6]
 8011342:	429a      	cmp	r2, r3
 8011344:	d901      	bls.n	801134a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8011346:	88fb      	ldrh	r3, [r7, #6]
 8011348:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801134a:	8b7b      	ldrh	r3, [r7, #26]
 801134c:	68ba      	ldr	r2, [r7, #8]
 801134e:	18d0      	adds	r0, r2, r3
 8011350:	69fb      	ldr	r3, [r7, #28]
 8011352:	685a      	ldr	r2, [r3, #4]
 8011354:	88bb      	ldrh	r3, [r7, #4]
 8011356:	4413      	add	r3, r2
 8011358:	8b3a      	ldrh	r2, [r7, #24]
 801135a:	4619      	mov	r1, r3
 801135c:	f008 fe6f 	bl	801a03e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8011360:	8afa      	ldrh	r2, [r7, #22]
 8011362:	8b3b      	ldrh	r3, [r7, #24]
 8011364:	4413      	add	r3, r2
 8011366:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8011368:	8b7a      	ldrh	r2, [r7, #26]
 801136a:	8b3b      	ldrh	r3, [r7, #24]
 801136c:	4413      	add	r3, r2
 801136e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8011370:	88fa      	ldrh	r2, [r7, #6]
 8011372:	8b3b      	ldrh	r3, [r7, #24]
 8011374:	1ad3      	subs	r3, r2, r3
 8011376:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8011378:	2300      	movs	r3, #0
 801137a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801137c:	69fb      	ldr	r3, [r7, #28]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	61fb      	str	r3, [r7, #28]
 8011382:	88fb      	ldrh	r3, [r7, #6]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d002      	beq.n	801138e <pbuf_copy_partial+0xca>
 8011388:	69fb      	ldr	r3, [r7, #28]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d1c4      	bne.n	8011318 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801138e:	8afb      	ldrh	r3, [r7, #22]
}
 8011390:	4618      	mov	r0, r3
 8011392:	3720      	adds	r7, #32
 8011394:	46bd      	mov	sp, r7
 8011396:	bd80      	pop	{r7, pc}
 8011398:	0801cba0 	.word	0x0801cba0
 801139c:	0801cee8 	.word	0x0801cee8
 80113a0:	0801cc00 	.word	0x0801cc00
 80113a4:	0801cf08 	.word	0x0801cf08

080113a8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b084      	sub	sp, #16
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	4603      	mov	r3, r0
 80113b0:	603a      	str	r2, [r7, #0]
 80113b2:	71fb      	strb	r3, [r7, #7]
 80113b4:	460b      	mov	r3, r1
 80113b6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80113b8:	683b      	ldr	r3, [r7, #0]
 80113ba:	8919      	ldrh	r1, [r3, #8]
 80113bc:	88ba      	ldrh	r2, [r7, #4]
 80113be:	79fb      	ldrb	r3, [r7, #7]
 80113c0:	4618      	mov	r0, r3
 80113c2:	f7ff fab1 	bl	8010928 <pbuf_alloc>
 80113c6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d101      	bne.n	80113d2 <pbuf_clone+0x2a>
    return NULL;
 80113ce:	2300      	movs	r3, #0
 80113d0:	e011      	b.n	80113f6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80113d2:	6839      	ldr	r1, [r7, #0]
 80113d4:	68f8      	ldr	r0, [r7, #12]
 80113d6:	f7ff fea3 	bl	8011120 <pbuf_copy>
 80113da:	4603      	mov	r3, r0
 80113dc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80113de:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d006      	beq.n	80113f4 <pbuf_clone+0x4c>
 80113e6:	4b06      	ldr	r3, [pc, #24]	; (8011400 <pbuf_clone+0x58>)
 80113e8:	f240 5224 	movw	r2, #1316	; 0x524
 80113ec:	4905      	ldr	r1, [pc, #20]	; (8011404 <pbuf_clone+0x5c>)
 80113ee:	4806      	ldr	r0, [pc, #24]	; (8011408 <pbuf_clone+0x60>)
 80113f0:	f008 fc56 	bl	8019ca0 <iprintf>
  return q;
 80113f4:	68fb      	ldr	r3, [r7, #12]
}
 80113f6:	4618      	mov	r0, r3
 80113f8:	3710      	adds	r7, #16
 80113fa:	46bd      	mov	sp, r7
 80113fc:	bd80      	pop	{r7, pc}
 80113fe:	bf00      	nop
 8011400:	0801cba0 	.word	0x0801cba0
 8011404:	0801d014 	.word	0x0801d014
 8011408:	0801cc00 	.word	0x0801cc00

0801140c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801140c:	b580      	push	{r7, lr}
 801140e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011410:	f007 ff0a 	bl	8019228 <rand>
 8011414:	4603      	mov	r3, r0
 8011416:	b29b      	uxth	r3, r3
 8011418:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801141c:	b29b      	uxth	r3, r3
 801141e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011422:	b29a      	uxth	r2, r3
 8011424:	4b01      	ldr	r3, [pc, #4]	; (801142c <tcp_init+0x20>)
 8011426:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011428:	bf00      	nop
 801142a:	bd80      	pop	{r7, pc}
 801142c:	20000058 	.word	0x20000058

08011430 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b082      	sub	sp, #8
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	7d1b      	ldrb	r3, [r3, #20]
 801143c:	2b01      	cmp	r3, #1
 801143e:	d105      	bne.n	801144c <tcp_free+0x1c>
 8011440:	4b06      	ldr	r3, [pc, #24]	; (801145c <tcp_free+0x2c>)
 8011442:	22d4      	movs	r2, #212	; 0xd4
 8011444:	4906      	ldr	r1, [pc, #24]	; (8011460 <tcp_free+0x30>)
 8011446:	4807      	ldr	r0, [pc, #28]	; (8011464 <tcp_free+0x34>)
 8011448:	f008 fc2a 	bl	8019ca0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 801144c:	6879      	ldr	r1, [r7, #4]
 801144e:	2001      	movs	r0, #1
 8011450:	f7fe fef8 	bl	8010244 <memp_free>
}
 8011454:	bf00      	nop
 8011456:	3708      	adds	r7, #8
 8011458:	46bd      	mov	sp, r7
 801145a:	bd80      	pop	{r7, pc}
 801145c:	0801d0a0 	.word	0x0801d0a0
 8011460:	0801d0d0 	.word	0x0801d0d0
 8011464:	0801d0e4 	.word	0x0801d0e4

08011468 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8011468:	b580      	push	{r7, lr}
 801146a:	b082      	sub	sp, #8
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	7d1b      	ldrb	r3, [r3, #20]
 8011474:	2b01      	cmp	r3, #1
 8011476:	d105      	bne.n	8011484 <tcp_free_listen+0x1c>
 8011478:	4b06      	ldr	r3, [pc, #24]	; (8011494 <tcp_free_listen+0x2c>)
 801147a:	22df      	movs	r2, #223	; 0xdf
 801147c:	4906      	ldr	r1, [pc, #24]	; (8011498 <tcp_free_listen+0x30>)
 801147e:	4807      	ldr	r0, [pc, #28]	; (801149c <tcp_free_listen+0x34>)
 8011480:	f008 fc0e 	bl	8019ca0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8011484:	6879      	ldr	r1, [r7, #4]
 8011486:	2002      	movs	r0, #2
 8011488:	f7fe fedc 	bl	8010244 <memp_free>
}
 801148c:	bf00      	nop
 801148e:	3708      	adds	r7, #8
 8011490:	46bd      	mov	sp, r7
 8011492:	bd80      	pop	{r7, pc}
 8011494:	0801d0a0 	.word	0x0801d0a0
 8011498:	0801d10c 	.word	0x0801d10c
 801149c:	0801d0e4 	.word	0x0801d0e4

080114a0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80114a0:	b580      	push	{r7, lr}
 80114a2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80114a4:	f000 fea4 	bl	80121f0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80114a8:	4b07      	ldr	r3, [pc, #28]	; (80114c8 <tcp_tmr+0x28>)
 80114aa:	781b      	ldrb	r3, [r3, #0]
 80114ac:	3301      	adds	r3, #1
 80114ae:	b2da      	uxtb	r2, r3
 80114b0:	4b05      	ldr	r3, [pc, #20]	; (80114c8 <tcp_tmr+0x28>)
 80114b2:	701a      	strb	r2, [r3, #0]
 80114b4:	4b04      	ldr	r3, [pc, #16]	; (80114c8 <tcp_tmr+0x28>)
 80114b6:	781b      	ldrb	r3, [r3, #0]
 80114b8:	f003 0301 	and.w	r3, r3, #1
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d001      	beq.n	80114c4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80114c0:	f000 fb56 	bl	8011b70 <tcp_slowtmr>
  }
}
 80114c4:	bf00      	nop
 80114c6:	bd80      	pop	{r7, pc}
 80114c8:	200070ed 	.word	0x200070ed

080114cc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80114cc:	b580      	push	{r7, lr}
 80114ce:	b084      	sub	sp, #16
 80114d0:	af00      	add	r7, sp, #0
 80114d2:	6078      	str	r0, [r7, #4]
 80114d4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80114d6:	683b      	ldr	r3, [r7, #0]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d105      	bne.n	80114e8 <tcp_remove_listener+0x1c>
 80114dc:	4b0d      	ldr	r3, [pc, #52]	; (8011514 <tcp_remove_listener+0x48>)
 80114de:	22ff      	movs	r2, #255	; 0xff
 80114e0:	490d      	ldr	r1, [pc, #52]	; (8011518 <tcp_remove_listener+0x4c>)
 80114e2:	480e      	ldr	r0, [pc, #56]	; (801151c <tcp_remove_listener+0x50>)
 80114e4:	f008 fbdc 	bl	8019ca0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	60fb      	str	r3, [r7, #12]
 80114ec:	e00a      	b.n	8011504 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80114f2:	683a      	ldr	r2, [r7, #0]
 80114f4:	429a      	cmp	r2, r3
 80114f6:	d102      	bne.n	80114fe <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	2200      	movs	r2, #0
 80114fc:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	68db      	ldr	r3, [r3, #12]
 8011502:	60fb      	str	r3, [r7, #12]
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	2b00      	cmp	r3, #0
 8011508:	d1f1      	bne.n	80114ee <tcp_remove_listener+0x22>
    }
  }
}
 801150a:	bf00      	nop
 801150c:	bf00      	nop
 801150e:	3710      	adds	r7, #16
 8011510:	46bd      	mov	sp, r7
 8011512:	bd80      	pop	{r7, pc}
 8011514:	0801d0a0 	.word	0x0801d0a0
 8011518:	0801d128 	.word	0x0801d128
 801151c:	0801d0e4 	.word	0x0801d0e4

08011520 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8011520:	b580      	push	{r7, lr}
 8011522:	b084      	sub	sp, #16
 8011524:	af00      	add	r7, sp, #0
 8011526:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d106      	bne.n	801153c <tcp_listen_closed+0x1c>
 801152e:	4b14      	ldr	r3, [pc, #80]	; (8011580 <tcp_listen_closed+0x60>)
 8011530:	f240 1211 	movw	r2, #273	; 0x111
 8011534:	4913      	ldr	r1, [pc, #76]	; (8011584 <tcp_listen_closed+0x64>)
 8011536:	4814      	ldr	r0, [pc, #80]	; (8011588 <tcp_listen_closed+0x68>)
 8011538:	f008 fbb2 	bl	8019ca0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	7d1b      	ldrb	r3, [r3, #20]
 8011540:	2b01      	cmp	r3, #1
 8011542:	d006      	beq.n	8011552 <tcp_listen_closed+0x32>
 8011544:	4b0e      	ldr	r3, [pc, #56]	; (8011580 <tcp_listen_closed+0x60>)
 8011546:	f44f 7289 	mov.w	r2, #274	; 0x112
 801154a:	4910      	ldr	r1, [pc, #64]	; (801158c <tcp_listen_closed+0x6c>)
 801154c:	480e      	ldr	r0, [pc, #56]	; (8011588 <tcp_listen_closed+0x68>)
 801154e:	f008 fba7 	bl	8019ca0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011552:	2301      	movs	r3, #1
 8011554:	60fb      	str	r3, [r7, #12]
 8011556:	e00b      	b.n	8011570 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8011558:	4a0d      	ldr	r2, [pc, #52]	; (8011590 <tcp_listen_closed+0x70>)
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	6879      	ldr	r1, [r7, #4]
 8011564:	4618      	mov	r0, r3
 8011566:	f7ff ffb1 	bl	80114cc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	3301      	adds	r3, #1
 801156e:	60fb      	str	r3, [r7, #12]
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	2b03      	cmp	r3, #3
 8011574:	d9f0      	bls.n	8011558 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8011576:	bf00      	nop
 8011578:	bf00      	nop
 801157a:	3710      	adds	r7, #16
 801157c:	46bd      	mov	sp, r7
 801157e:	bd80      	pop	{r7, pc}
 8011580:	0801d0a0 	.word	0x0801d0a0
 8011584:	0801d150 	.word	0x0801d150
 8011588:	0801d0e4 	.word	0x0801d0e4
 801158c:	0801d15c 	.word	0x0801d15c
 8011590:	0801f0a0 	.word	0x0801f0a0

08011594 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8011594:	b5b0      	push	{r4, r5, r7, lr}
 8011596:	b088      	sub	sp, #32
 8011598:	af04      	add	r7, sp, #16
 801159a:	6078      	str	r0, [r7, #4]
 801159c:	460b      	mov	r3, r1
 801159e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d106      	bne.n	80115b4 <tcp_close_shutdown+0x20>
 80115a6:	4b63      	ldr	r3, [pc, #396]	; (8011734 <tcp_close_shutdown+0x1a0>)
 80115a8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80115ac:	4962      	ldr	r1, [pc, #392]	; (8011738 <tcp_close_shutdown+0x1a4>)
 80115ae:	4863      	ldr	r0, [pc, #396]	; (801173c <tcp_close_shutdown+0x1a8>)
 80115b0:	f008 fb76 	bl	8019ca0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80115b4:	78fb      	ldrb	r3, [r7, #3]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d067      	beq.n	801168a <tcp_close_shutdown+0xf6>
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	7d1b      	ldrb	r3, [r3, #20]
 80115be:	2b04      	cmp	r3, #4
 80115c0:	d003      	beq.n	80115ca <tcp_close_shutdown+0x36>
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	7d1b      	ldrb	r3, [r3, #20]
 80115c6:	2b07      	cmp	r3, #7
 80115c8:	d15f      	bne.n	801168a <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d105      	bne.n	80115de <tcp_close_shutdown+0x4a>
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80115d6:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80115da:	4293      	cmp	r3, r2
 80115dc:	d055      	beq.n	801168a <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	8b5b      	ldrh	r3, [r3, #26]
 80115e2:	f003 0310 	and.w	r3, r3, #16
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d106      	bne.n	80115f8 <tcp_close_shutdown+0x64>
 80115ea:	4b52      	ldr	r3, [pc, #328]	; (8011734 <tcp_close_shutdown+0x1a0>)
 80115ec:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80115f0:	4953      	ldr	r1, [pc, #332]	; (8011740 <tcp_close_shutdown+0x1ac>)
 80115f2:	4852      	ldr	r0, [pc, #328]	; (801173c <tcp_close_shutdown+0x1a8>)
 80115f4:	f008 fb54 	bl	8019ca0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011600:	687d      	ldr	r5, [r7, #4]
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	3304      	adds	r3, #4
 8011606:	687a      	ldr	r2, [r7, #4]
 8011608:	8ad2      	ldrh	r2, [r2, #22]
 801160a:	6879      	ldr	r1, [r7, #4]
 801160c:	8b09      	ldrh	r1, [r1, #24]
 801160e:	9102      	str	r1, [sp, #8]
 8011610:	9201      	str	r2, [sp, #4]
 8011612:	9300      	str	r3, [sp, #0]
 8011614:	462b      	mov	r3, r5
 8011616:	4622      	mov	r2, r4
 8011618:	4601      	mov	r1, r0
 801161a:	6878      	ldr	r0, [r7, #4]
 801161c:	f004 fe94 	bl	8016348 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8011620:	6878      	ldr	r0, [r7, #4]
 8011622:	f001 f8c9 	bl	80127b8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011626:	4b47      	ldr	r3, [pc, #284]	; (8011744 <tcp_close_shutdown+0x1b0>)
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	687a      	ldr	r2, [r7, #4]
 801162c:	429a      	cmp	r2, r3
 801162e:	d105      	bne.n	801163c <tcp_close_shutdown+0xa8>
 8011630:	4b44      	ldr	r3, [pc, #272]	; (8011744 <tcp_close_shutdown+0x1b0>)
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	68db      	ldr	r3, [r3, #12]
 8011636:	4a43      	ldr	r2, [pc, #268]	; (8011744 <tcp_close_shutdown+0x1b0>)
 8011638:	6013      	str	r3, [r2, #0]
 801163a:	e013      	b.n	8011664 <tcp_close_shutdown+0xd0>
 801163c:	4b41      	ldr	r3, [pc, #260]	; (8011744 <tcp_close_shutdown+0x1b0>)
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	60fb      	str	r3, [r7, #12]
 8011642:	e00c      	b.n	801165e <tcp_close_shutdown+0xca>
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	68db      	ldr	r3, [r3, #12]
 8011648:	687a      	ldr	r2, [r7, #4]
 801164a:	429a      	cmp	r2, r3
 801164c:	d104      	bne.n	8011658 <tcp_close_shutdown+0xc4>
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	68da      	ldr	r2, [r3, #12]
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	60da      	str	r2, [r3, #12]
 8011656:	e005      	b.n	8011664 <tcp_close_shutdown+0xd0>
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	68db      	ldr	r3, [r3, #12]
 801165c:	60fb      	str	r3, [r7, #12]
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d1ef      	bne.n	8011644 <tcp_close_shutdown+0xb0>
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	2200      	movs	r2, #0
 8011668:	60da      	str	r2, [r3, #12]
 801166a:	4b37      	ldr	r3, [pc, #220]	; (8011748 <tcp_close_shutdown+0x1b4>)
 801166c:	2201      	movs	r2, #1
 801166e:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8011670:	4b36      	ldr	r3, [pc, #216]	; (801174c <tcp_close_shutdown+0x1b8>)
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	687a      	ldr	r2, [r7, #4]
 8011676:	429a      	cmp	r2, r3
 8011678:	d102      	bne.n	8011680 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801167a:	f003 fd61 	bl	8015140 <tcp_trigger_input_pcb_close>
 801167e:	e002      	b.n	8011686 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 8011680:	6878      	ldr	r0, [r7, #4]
 8011682:	f7ff fed5 	bl	8011430 <tcp_free>
      }
      return ERR_OK;
 8011686:	2300      	movs	r3, #0
 8011688:	e050      	b.n	801172c <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	7d1b      	ldrb	r3, [r3, #20]
 801168e:	2b02      	cmp	r3, #2
 8011690:	d03b      	beq.n	801170a <tcp_close_shutdown+0x176>
 8011692:	2b02      	cmp	r3, #2
 8011694:	dc44      	bgt.n	8011720 <tcp_close_shutdown+0x18c>
 8011696:	2b00      	cmp	r3, #0
 8011698:	d002      	beq.n	80116a0 <tcp_close_shutdown+0x10c>
 801169a:	2b01      	cmp	r3, #1
 801169c:	d02a      	beq.n	80116f4 <tcp_close_shutdown+0x160>
 801169e:	e03f      	b.n	8011720 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	8adb      	ldrh	r3, [r3, #22]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d021      	beq.n	80116ec <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80116a8:	4b29      	ldr	r3, [pc, #164]	; (8011750 <tcp_close_shutdown+0x1bc>)
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	687a      	ldr	r2, [r7, #4]
 80116ae:	429a      	cmp	r2, r3
 80116b0:	d105      	bne.n	80116be <tcp_close_shutdown+0x12a>
 80116b2:	4b27      	ldr	r3, [pc, #156]	; (8011750 <tcp_close_shutdown+0x1bc>)
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	68db      	ldr	r3, [r3, #12]
 80116b8:	4a25      	ldr	r2, [pc, #148]	; (8011750 <tcp_close_shutdown+0x1bc>)
 80116ba:	6013      	str	r3, [r2, #0]
 80116bc:	e013      	b.n	80116e6 <tcp_close_shutdown+0x152>
 80116be:	4b24      	ldr	r3, [pc, #144]	; (8011750 <tcp_close_shutdown+0x1bc>)
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	60bb      	str	r3, [r7, #8]
 80116c4:	e00c      	b.n	80116e0 <tcp_close_shutdown+0x14c>
 80116c6:	68bb      	ldr	r3, [r7, #8]
 80116c8:	68db      	ldr	r3, [r3, #12]
 80116ca:	687a      	ldr	r2, [r7, #4]
 80116cc:	429a      	cmp	r2, r3
 80116ce:	d104      	bne.n	80116da <tcp_close_shutdown+0x146>
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	68da      	ldr	r2, [r3, #12]
 80116d4:	68bb      	ldr	r3, [r7, #8]
 80116d6:	60da      	str	r2, [r3, #12]
 80116d8:	e005      	b.n	80116e6 <tcp_close_shutdown+0x152>
 80116da:	68bb      	ldr	r3, [r7, #8]
 80116dc:	68db      	ldr	r3, [r3, #12]
 80116de:	60bb      	str	r3, [r7, #8]
 80116e0:	68bb      	ldr	r3, [r7, #8]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d1ef      	bne.n	80116c6 <tcp_close_shutdown+0x132>
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	2200      	movs	r2, #0
 80116ea:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80116ec:	6878      	ldr	r0, [r7, #4]
 80116ee:	f7ff fe9f 	bl	8011430 <tcp_free>
      break;
 80116f2:	e01a      	b.n	801172a <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 80116f4:	6878      	ldr	r0, [r7, #4]
 80116f6:	f7ff ff13 	bl	8011520 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80116fa:	6879      	ldr	r1, [r7, #4]
 80116fc:	4815      	ldr	r0, [pc, #84]	; (8011754 <tcp_close_shutdown+0x1c0>)
 80116fe:	f001 f8ab 	bl	8012858 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8011702:	6878      	ldr	r0, [r7, #4]
 8011704:	f7ff feb0 	bl	8011468 <tcp_free_listen>
      break;
 8011708:	e00f      	b.n	801172a <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801170a:	6879      	ldr	r1, [r7, #4]
 801170c:	480d      	ldr	r0, [pc, #52]	; (8011744 <tcp_close_shutdown+0x1b0>)
 801170e:	f001 f8a3 	bl	8012858 <tcp_pcb_remove>
 8011712:	4b0d      	ldr	r3, [pc, #52]	; (8011748 <tcp_close_shutdown+0x1b4>)
 8011714:	2201      	movs	r2, #1
 8011716:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8011718:	6878      	ldr	r0, [r7, #4]
 801171a:	f7ff fe89 	bl	8011430 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801171e:	e004      	b.n	801172a <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 8011720:	6878      	ldr	r0, [r7, #4]
 8011722:	f000 f819 	bl	8011758 <tcp_close_shutdown_fin>
 8011726:	4603      	mov	r3, r0
 8011728:	e000      	b.n	801172c <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 801172a:	2300      	movs	r3, #0
}
 801172c:	4618      	mov	r0, r3
 801172e:	3710      	adds	r7, #16
 8011730:	46bd      	mov	sp, r7
 8011732:	bdb0      	pop	{r4, r5, r7, pc}
 8011734:	0801d0a0 	.word	0x0801d0a0
 8011738:	0801d174 	.word	0x0801d174
 801173c:	0801d0e4 	.word	0x0801d0e4
 8011740:	0801d194 	.word	0x0801d194
 8011744:	200070e4 	.word	0x200070e4
 8011748:	200070ec 	.word	0x200070ec
 801174c:	20007124 	.word	0x20007124
 8011750:	200070dc 	.word	0x200070dc
 8011754:	200070e0 	.word	0x200070e0

08011758 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8011758:	b580      	push	{r7, lr}
 801175a:	b084      	sub	sp, #16
 801175c:	af00      	add	r7, sp, #0
 801175e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d106      	bne.n	8011774 <tcp_close_shutdown_fin+0x1c>
 8011766:	4b2e      	ldr	r3, [pc, #184]	; (8011820 <tcp_close_shutdown_fin+0xc8>)
 8011768:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 801176c:	492d      	ldr	r1, [pc, #180]	; (8011824 <tcp_close_shutdown_fin+0xcc>)
 801176e:	482e      	ldr	r0, [pc, #184]	; (8011828 <tcp_close_shutdown_fin+0xd0>)
 8011770:	f008 fa96 	bl	8019ca0 <iprintf>

  switch (pcb->state) {
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	7d1b      	ldrb	r3, [r3, #20]
 8011778:	2b07      	cmp	r3, #7
 801177a:	d020      	beq.n	80117be <tcp_close_shutdown_fin+0x66>
 801177c:	2b07      	cmp	r3, #7
 801177e:	dc2b      	bgt.n	80117d8 <tcp_close_shutdown_fin+0x80>
 8011780:	2b03      	cmp	r3, #3
 8011782:	d002      	beq.n	801178a <tcp_close_shutdown_fin+0x32>
 8011784:	2b04      	cmp	r3, #4
 8011786:	d00d      	beq.n	80117a4 <tcp_close_shutdown_fin+0x4c>
 8011788:	e026      	b.n	80117d8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801178a:	6878      	ldr	r0, [r7, #4]
 801178c:	f003 feea 	bl	8015564 <tcp_send_fin>
 8011790:	4603      	mov	r3, r0
 8011792:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011794:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d11f      	bne.n	80117dc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	2205      	movs	r2, #5
 80117a0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80117a2:	e01b      	b.n	80117dc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80117a4:	6878      	ldr	r0, [r7, #4]
 80117a6:	f003 fedd 	bl	8015564 <tcp_send_fin>
 80117aa:	4603      	mov	r3, r0
 80117ac:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80117ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d114      	bne.n	80117e0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	2205      	movs	r2, #5
 80117ba:	751a      	strb	r2, [r3, #20]
      }
      break;
 80117bc:	e010      	b.n	80117e0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80117be:	6878      	ldr	r0, [r7, #4]
 80117c0:	f003 fed0 	bl	8015564 <tcp_send_fin>
 80117c4:	4603      	mov	r3, r0
 80117c6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80117c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d109      	bne.n	80117e4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	2209      	movs	r2, #9
 80117d4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80117d6:	e005      	b.n	80117e4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80117d8:	2300      	movs	r3, #0
 80117da:	e01c      	b.n	8011816 <tcp_close_shutdown_fin+0xbe>
      break;
 80117dc:	bf00      	nop
 80117de:	e002      	b.n	80117e6 <tcp_close_shutdown_fin+0x8e>
      break;
 80117e0:	bf00      	nop
 80117e2:	e000      	b.n	80117e6 <tcp_close_shutdown_fin+0x8e>
      break;
 80117e4:	bf00      	nop
  }

  if (err == ERR_OK) {
 80117e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d103      	bne.n	80117f6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80117ee:	6878      	ldr	r0, [r7, #4]
 80117f0:	f003 fff6 	bl	80157e0 <tcp_output>
 80117f4:	e00d      	b.n	8011812 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80117f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80117fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117fe:	d108      	bne.n	8011812 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	8b5b      	ldrh	r3, [r3, #26]
 8011804:	f043 0308 	orr.w	r3, r3, #8
 8011808:	b29a      	uxth	r2, r3
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801180e:	2300      	movs	r3, #0
 8011810:	e001      	b.n	8011816 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8011812:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011816:	4618      	mov	r0, r3
 8011818:	3710      	adds	r7, #16
 801181a:	46bd      	mov	sp, r7
 801181c:	bd80      	pop	{r7, pc}
 801181e:	bf00      	nop
 8011820:	0801d0a0 	.word	0x0801d0a0
 8011824:	0801d150 	.word	0x0801d150
 8011828:	0801d0e4 	.word	0x0801d0e4

0801182c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801182c:	b580      	push	{r7, lr}
 801182e:	b082      	sub	sp, #8
 8011830:	af00      	add	r7, sp, #0
 8011832:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d109      	bne.n	801184e <tcp_close+0x22>
 801183a:	4b0f      	ldr	r3, [pc, #60]	; (8011878 <tcp_close+0x4c>)
 801183c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8011840:	490e      	ldr	r1, [pc, #56]	; (801187c <tcp_close+0x50>)
 8011842:	480f      	ldr	r0, [pc, #60]	; (8011880 <tcp_close+0x54>)
 8011844:	f008 fa2c 	bl	8019ca0 <iprintf>
 8011848:	f06f 030f 	mvn.w	r3, #15
 801184c:	e00f      	b.n	801186e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	7d1b      	ldrb	r3, [r3, #20]
 8011852:	2b01      	cmp	r3, #1
 8011854:	d006      	beq.n	8011864 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	8b5b      	ldrh	r3, [r3, #26]
 801185a:	f043 0310 	orr.w	r3, r3, #16
 801185e:	b29a      	uxth	r2, r3
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8011864:	2101      	movs	r1, #1
 8011866:	6878      	ldr	r0, [r7, #4]
 8011868:	f7ff fe94 	bl	8011594 <tcp_close_shutdown>
 801186c:	4603      	mov	r3, r0
}
 801186e:	4618      	mov	r0, r3
 8011870:	3708      	adds	r7, #8
 8011872:	46bd      	mov	sp, r7
 8011874:	bd80      	pop	{r7, pc}
 8011876:	bf00      	nop
 8011878:	0801d0a0 	.word	0x0801d0a0
 801187c:	0801d1b0 	.word	0x0801d1b0
 8011880:	0801d0e4 	.word	0x0801d0e4

08011884 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8011884:	b580      	push	{r7, lr}
 8011886:	b08e      	sub	sp, #56	; 0x38
 8011888:	af04      	add	r7, sp, #16
 801188a:	6078      	str	r0, [r7, #4]
 801188c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d107      	bne.n	80118a4 <tcp_abandon+0x20>
 8011894:	4b52      	ldr	r3, [pc, #328]	; (80119e0 <tcp_abandon+0x15c>)
 8011896:	f240 223d 	movw	r2, #573	; 0x23d
 801189a:	4952      	ldr	r1, [pc, #328]	; (80119e4 <tcp_abandon+0x160>)
 801189c:	4852      	ldr	r0, [pc, #328]	; (80119e8 <tcp_abandon+0x164>)
 801189e:	f008 f9ff 	bl	8019ca0 <iprintf>
 80118a2:	e099      	b.n	80119d8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	7d1b      	ldrb	r3, [r3, #20]
 80118a8:	2b01      	cmp	r3, #1
 80118aa:	d106      	bne.n	80118ba <tcp_abandon+0x36>
 80118ac:	4b4c      	ldr	r3, [pc, #304]	; (80119e0 <tcp_abandon+0x15c>)
 80118ae:	f44f 7210 	mov.w	r2, #576	; 0x240
 80118b2:	494e      	ldr	r1, [pc, #312]	; (80119ec <tcp_abandon+0x168>)
 80118b4:	484c      	ldr	r0, [pc, #304]	; (80119e8 <tcp_abandon+0x164>)
 80118b6:	f008 f9f3 	bl	8019ca0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	7d1b      	ldrb	r3, [r3, #20]
 80118be:	2b0a      	cmp	r3, #10
 80118c0:	d107      	bne.n	80118d2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80118c2:	6879      	ldr	r1, [r7, #4]
 80118c4:	484a      	ldr	r0, [pc, #296]	; (80119f0 <tcp_abandon+0x16c>)
 80118c6:	f000 ffc7 	bl	8012858 <tcp_pcb_remove>
    tcp_free(pcb);
 80118ca:	6878      	ldr	r0, [r7, #4]
 80118cc:	f7ff fdb0 	bl	8011430 <tcp_free>
 80118d0:	e082      	b.n	80119d8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80118d2:	2300      	movs	r3, #0
 80118d4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80118d6:	2300      	movs	r3, #0
 80118d8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80118de:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118e4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80118ec:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	691b      	ldr	r3, [r3, #16]
 80118f2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	7d1b      	ldrb	r3, [r3, #20]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d126      	bne.n	801194a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	8adb      	ldrh	r3, [r3, #22]
 8011900:	2b00      	cmp	r3, #0
 8011902:	d02e      	beq.n	8011962 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011904:	4b3b      	ldr	r3, [pc, #236]	; (80119f4 <tcp_abandon+0x170>)
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	687a      	ldr	r2, [r7, #4]
 801190a:	429a      	cmp	r2, r3
 801190c:	d105      	bne.n	801191a <tcp_abandon+0x96>
 801190e:	4b39      	ldr	r3, [pc, #228]	; (80119f4 <tcp_abandon+0x170>)
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	68db      	ldr	r3, [r3, #12]
 8011914:	4a37      	ldr	r2, [pc, #220]	; (80119f4 <tcp_abandon+0x170>)
 8011916:	6013      	str	r3, [r2, #0]
 8011918:	e013      	b.n	8011942 <tcp_abandon+0xbe>
 801191a:	4b36      	ldr	r3, [pc, #216]	; (80119f4 <tcp_abandon+0x170>)
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	61fb      	str	r3, [r7, #28]
 8011920:	e00c      	b.n	801193c <tcp_abandon+0xb8>
 8011922:	69fb      	ldr	r3, [r7, #28]
 8011924:	68db      	ldr	r3, [r3, #12]
 8011926:	687a      	ldr	r2, [r7, #4]
 8011928:	429a      	cmp	r2, r3
 801192a:	d104      	bne.n	8011936 <tcp_abandon+0xb2>
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	68da      	ldr	r2, [r3, #12]
 8011930:	69fb      	ldr	r3, [r7, #28]
 8011932:	60da      	str	r2, [r3, #12]
 8011934:	e005      	b.n	8011942 <tcp_abandon+0xbe>
 8011936:	69fb      	ldr	r3, [r7, #28]
 8011938:	68db      	ldr	r3, [r3, #12]
 801193a:	61fb      	str	r3, [r7, #28]
 801193c:	69fb      	ldr	r3, [r7, #28]
 801193e:	2b00      	cmp	r3, #0
 8011940:	d1ef      	bne.n	8011922 <tcp_abandon+0x9e>
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	2200      	movs	r2, #0
 8011946:	60da      	str	r2, [r3, #12]
 8011948:	e00b      	b.n	8011962 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801194a:	683b      	ldr	r3, [r7, #0]
 801194c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	8adb      	ldrh	r3, [r3, #22]
 8011952:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011954:	6879      	ldr	r1, [r7, #4]
 8011956:	4828      	ldr	r0, [pc, #160]	; (80119f8 <tcp_abandon+0x174>)
 8011958:	f000 ff7e 	bl	8012858 <tcp_pcb_remove>
 801195c:	4b27      	ldr	r3, [pc, #156]	; (80119fc <tcp_abandon+0x178>)
 801195e:	2201      	movs	r2, #1
 8011960:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011966:	2b00      	cmp	r3, #0
 8011968:	d004      	beq.n	8011974 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801196e:	4618      	mov	r0, r3
 8011970:	f000 fd20 	bl	80123b4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011978:	2b00      	cmp	r3, #0
 801197a:	d004      	beq.n	8011986 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011980:	4618      	mov	r0, r3
 8011982:	f000 fd17 	bl	80123b4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801198a:	2b00      	cmp	r3, #0
 801198c:	d004      	beq.n	8011998 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011992:	4618      	mov	r0, r3
 8011994:	f000 fd0e 	bl	80123b4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8011998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801199a:	2b00      	cmp	r3, #0
 801199c:	d00e      	beq.n	80119bc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801199e:	6879      	ldr	r1, [r7, #4]
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	3304      	adds	r3, #4
 80119a4:	687a      	ldr	r2, [r7, #4]
 80119a6:	8b12      	ldrh	r2, [r2, #24]
 80119a8:	9202      	str	r2, [sp, #8]
 80119aa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80119ac:	9201      	str	r2, [sp, #4]
 80119ae:	9300      	str	r3, [sp, #0]
 80119b0:	460b      	mov	r3, r1
 80119b2:	697a      	ldr	r2, [r7, #20]
 80119b4:	69b9      	ldr	r1, [r7, #24]
 80119b6:	6878      	ldr	r0, [r7, #4]
 80119b8:	f004 fcc6 	bl	8016348 <tcp_rst>
    }
    last_state = pcb->state;
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	7d1b      	ldrb	r3, [r3, #20]
 80119c0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80119c2:	6878      	ldr	r0, [r7, #4]
 80119c4:	f7ff fd34 	bl	8011430 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80119c8:	693b      	ldr	r3, [r7, #16]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d004      	beq.n	80119d8 <tcp_abandon+0x154>
 80119ce:	693b      	ldr	r3, [r7, #16]
 80119d0:	f06f 010c 	mvn.w	r1, #12
 80119d4:	68f8      	ldr	r0, [r7, #12]
 80119d6:	4798      	blx	r3
  }
}
 80119d8:	3728      	adds	r7, #40	; 0x28
 80119da:	46bd      	mov	sp, r7
 80119dc:	bd80      	pop	{r7, pc}
 80119de:	bf00      	nop
 80119e0:	0801d0a0 	.word	0x0801d0a0
 80119e4:	0801d1e4 	.word	0x0801d1e4
 80119e8:	0801d0e4 	.word	0x0801d0e4
 80119ec:	0801d200 	.word	0x0801d200
 80119f0:	200070e8 	.word	0x200070e8
 80119f4:	200070dc 	.word	0x200070dc
 80119f8:	200070e4 	.word	0x200070e4
 80119fc:	200070ec 	.word	0x200070ec

08011a00 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8011a00:	b580      	push	{r7, lr}
 8011a02:	b082      	sub	sp, #8
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8011a08:	2101      	movs	r1, #1
 8011a0a:	6878      	ldr	r0, [r7, #4]
 8011a0c:	f7ff ff3a 	bl	8011884 <tcp_abandon>
}
 8011a10:	bf00      	nop
 8011a12:	3708      	adds	r7, #8
 8011a14:	46bd      	mov	sp, r7
 8011a16:	bd80      	pop	{r7, pc}

08011a18 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b084      	sub	sp, #16
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d106      	bne.n	8011a34 <tcp_update_rcv_ann_wnd+0x1c>
 8011a26:	4b25      	ldr	r3, [pc, #148]	; (8011abc <tcp_update_rcv_ann_wnd+0xa4>)
 8011a28:	f240 32a6 	movw	r2, #934	; 0x3a6
 8011a2c:	4924      	ldr	r1, [pc, #144]	; (8011ac0 <tcp_update_rcv_ann_wnd+0xa8>)
 8011a2e:	4825      	ldr	r0, [pc, #148]	; (8011ac4 <tcp_update_rcv_ann_wnd+0xac>)
 8011a30:	f008 f936 	bl	8019ca0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a38:	687a      	ldr	r2, [r7, #4]
 8011a3a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8011a3c:	4413      	add	r3, r2
 8011a3e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a44:	687a      	ldr	r2, [r7, #4]
 8011a46:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8011a48:	f640 3168 	movw	r1, #2920	; 0xb68
 8011a4c:	428a      	cmp	r2, r1
 8011a4e:	bf28      	it	cs
 8011a50:	460a      	movcs	r2, r1
 8011a52:	b292      	uxth	r2, r2
 8011a54:	4413      	add	r3, r2
 8011a56:	68fa      	ldr	r2, [r7, #12]
 8011a58:	1ad3      	subs	r3, r2, r3
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	db08      	blt.n	8011a70 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a6a:	68fa      	ldr	r2, [r7, #12]
 8011a6c:	1ad3      	subs	r3, r2, r3
 8011a6e:	e020      	b.n	8011ab2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a78:	1ad3      	subs	r3, r2, r3
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	dd03      	ble.n	8011a86 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	2200      	movs	r2, #0
 8011a82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011a84:	e014      	b.n	8011ab0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a8e:	1ad3      	subs	r3, r2, r3
 8011a90:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8011a92:	68bb      	ldr	r3, [r7, #8]
 8011a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011a98:	d306      	bcc.n	8011aa8 <tcp_update_rcv_ann_wnd+0x90>
 8011a9a:	4b08      	ldr	r3, [pc, #32]	; (8011abc <tcp_update_rcv_ann_wnd+0xa4>)
 8011a9c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8011aa0:	4909      	ldr	r1, [pc, #36]	; (8011ac8 <tcp_update_rcv_ann_wnd+0xb0>)
 8011aa2:	4808      	ldr	r0, [pc, #32]	; (8011ac4 <tcp_update_rcv_ann_wnd+0xac>)
 8011aa4:	f008 f8fc 	bl	8019ca0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8011aa8:	68bb      	ldr	r3, [r7, #8]
 8011aaa:	b29a      	uxth	r2, r3
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8011ab0:	2300      	movs	r3, #0
  }
}
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	3710      	adds	r7, #16
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	bd80      	pop	{r7, pc}
 8011aba:	bf00      	nop
 8011abc:	0801d0a0 	.word	0x0801d0a0
 8011ac0:	0801d2fc 	.word	0x0801d2fc
 8011ac4:	0801d0e4 	.word	0x0801d0e4
 8011ac8:	0801d320 	.word	0x0801d320

08011acc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b084      	sub	sp, #16
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	6078      	str	r0, [r7, #4]
 8011ad4:	460b      	mov	r3, r1
 8011ad6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d107      	bne.n	8011aee <tcp_recved+0x22>
 8011ade:	4b20      	ldr	r3, [pc, #128]	; (8011b60 <tcp_recved+0x94>)
 8011ae0:	f240 32cf 	movw	r2, #975	; 0x3cf
 8011ae4:	491f      	ldr	r1, [pc, #124]	; (8011b64 <tcp_recved+0x98>)
 8011ae6:	4820      	ldr	r0, [pc, #128]	; (8011b68 <tcp_recved+0x9c>)
 8011ae8:	f008 f8da 	bl	8019ca0 <iprintf>
 8011aec:	e034      	b.n	8011b58 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	7d1b      	ldrb	r3, [r3, #20]
 8011af2:	2b01      	cmp	r3, #1
 8011af4:	d106      	bne.n	8011b04 <tcp_recved+0x38>
 8011af6:	4b1a      	ldr	r3, [pc, #104]	; (8011b60 <tcp_recved+0x94>)
 8011af8:	f240 32d2 	movw	r2, #978	; 0x3d2
 8011afc:	491b      	ldr	r1, [pc, #108]	; (8011b6c <tcp_recved+0xa0>)
 8011afe:	481a      	ldr	r0, [pc, #104]	; (8011b68 <tcp_recved+0x9c>)
 8011b00:	f008 f8ce 	bl	8019ca0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011b08:	887b      	ldrh	r3, [r7, #2]
 8011b0a:	4413      	add	r3, r2
 8011b0c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8011b0e:	89fb      	ldrh	r3, [r7, #14]
 8011b10:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8011b14:	4293      	cmp	r3, r2
 8011b16:	d804      	bhi.n	8011b22 <tcp_recved+0x56>
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011b1c:	89fa      	ldrh	r2, [r7, #14]
 8011b1e:	429a      	cmp	r2, r3
 8011b20:	d204      	bcs.n	8011b2c <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8011b28:	851a      	strh	r2, [r3, #40]	; 0x28
 8011b2a:	e002      	b.n	8011b32 <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	89fa      	ldrh	r2, [r7, #14]
 8011b30:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8011b32:	6878      	ldr	r0, [r7, #4]
 8011b34:	f7ff ff70 	bl	8011a18 <tcp_update_rcv_ann_wnd>
 8011b38:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8011b3a:	68bb      	ldr	r3, [r7, #8]
 8011b3c:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8011b40:	4293      	cmp	r3, r2
 8011b42:	d909      	bls.n	8011b58 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	8b5b      	ldrh	r3, [r3, #26]
 8011b48:	f043 0302 	orr.w	r3, r3, #2
 8011b4c:	b29a      	uxth	r2, r3
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011b52:	6878      	ldr	r0, [r7, #4]
 8011b54:	f003 fe44 	bl	80157e0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8011b58:	3710      	adds	r7, #16
 8011b5a:	46bd      	mov	sp, r7
 8011b5c:	bd80      	pop	{r7, pc}
 8011b5e:	bf00      	nop
 8011b60:	0801d0a0 	.word	0x0801d0a0
 8011b64:	0801d33c 	.word	0x0801d33c
 8011b68:	0801d0e4 	.word	0x0801d0e4
 8011b6c:	0801d354 	.word	0x0801d354

08011b70 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8011b70:	b5b0      	push	{r4, r5, r7, lr}
 8011b72:	b090      	sub	sp, #64	; 0x40
 8011b74:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8011b76:	2300      	movs	r3, #0
 8011b78:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8011b7c:	4b94      	ldr	r3, [pc, #592]	; (8011dd0 <tcp_slowtmr+0x260>)
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	3301      	adds	r3, #1
 8011b82:	4a93      	ldr	r2, [pc, #588]	; (8011dd0 <tcp_slowtmr+0x260>)
 8011b84:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8011b86:	4b93      	ldr	r3, [pc, #588]	; (8011dd4 <tcp_slowtmr+0x264>)
 8011b88:	781b      	ldrb	r3, [r3, #0]
 8011b8a:	3301      	adds	r3, #1
 8011b8c:	b2da      	uxtb	r2, r3
 8011b8e:	4b91      	ldr	r3, [pc, #580]	; (8011dd4 <tcp_slowtmr+0x264>)
 8011b90:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8011b92:	2300      	movs	r3, #0
 8011b94:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8011b96:	4b90      	ldr	r3, [pc, #576]	; (8011dd8 <tcp_slowtmr+0x268>)
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8011b9c:	e29d      	b.n	80120da <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8011b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ba0:	7d1b      	ldrb	r3, [r3, #20]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d106      	bne.n	8011bb4 <tcp_slowtmr+0x44>
 8011ba6:	4b8d      	ldr	r3, [pc, #564]	; (8011ddc <tcp_slowtmr+0x26c>)
 8011ba8:	f240 42be 	movw	r2, #1214	; 0x4be
 8011bac:	498c      	ldr	r1, [pc, #560]	; (8011de0 <tcp_slowtmr+0x270>)
 8011bae:	488d      	ldr	r0, [pc, #564]	; (8011de4 <tcp_slowtmr+0x274>)
 8011bb0:	f008 f876 	bl	8019ca0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8011bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bb6:	7d1b      	ldrb	r3, [r3, #20]
 8011bb8:	2b01      	cmp	r3, #1
 8011bba:	d106      	bne.n	8011bca <tcp_slowtmr+0x5a>
 8011bbc:	4b87      	ldr	r3, [pc, #540]	; (8011ddc <tcp_slowtmr+0x26c>)
 8011bbe:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8011bc2:	4989      	ldr	r1, [pc, #548]	; (8011de8 <tcp_slowtmr+0x278>)
 8011bc4:	4887      	ldr	r0, [pc, #540]	; (8011de4 <tcp_slowtmr+0x274>)
 8011bc6:	f008 f86b 	bl	8019ca0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8011bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bcc:	7d1b      	ldrb	r3, [r3, #20]
 8011bce:	2b0a      	cmp	r3, #10
 8011bd0:	d106      	bne.n	8011be0 <tcp_slowtmr+0x70>
 8011bd2:	4b82      	ldr	r3, [pc, #520]	; (8011ddc <tcp_slowtmr+0x26c>)
 8011bd4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8011bd8:	4984      	ldr	r1, [pc, #528]	; (8011dec <tcp_slowtmr+0x27c>)
 8011bda:	4882      	ldr	r0, [pc, #520]	; (8011de4 <tcp_slowtmr+0x274>)
 8011bdc:	f008 f860 	bl	8019ca0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8011be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011be2:	7f9a      	ldrb	r2, [r3, #30]
 8011be4:	4b7b      	ldr	r3, [pc, #492]	; (8011dd4 <tcp_slowtmr+0x264>)
 8011be6:	781b      	ldrb	r3, [r3, #0]
 8011be8:	429a      	cmp	r2, r3
 8011bea:	d105      	bne.n	8011bf8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8011bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bee:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bf2:	68db      	ldr	r3, [r3, #12]
 8011bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8011bf6:	e270      	b.n	80120da <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8011bf8:	4b76      	ldr	r3, [pc, #472]	; (8011dd4 <tcp_slowtmr+0x264>)
 8011bfa:	781a      	ldrb	r2, [r3, #0]
 8011bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bfe:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8011c00:	2300      	movs	r3, #0
 8011c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8011c06:	2300      	movs	r3, #0
 8011c08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8011c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c0e:	7d1b      	ldrb	r3, [r3, #20]
 8011c10:	2b02      	cmp	r3, #2
 8011c12:	d10a      	bne.n	8011c2a <tcp_slowtmr+0xba>
 8011c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011c1a:	2b05      	cmp	r3, #5
 8011c1c:	d905      	bls.n	8011c2a <tcp_slowtmr+0xba>
      ++pcb_remove;
 8011c1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c22:	3301      	adds	r3, #1
 8011c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011c28:	e11e      	b.n	8011e68 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8011c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011c30:	2b0b      	cmp	r3, #11
 8011c32:	d905      	bls.n	8011c40 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8011c34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c38:	3301      	adds	r3, #1
 8011c3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011c3e:	e113      	b.n	8011e68 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8011c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c42:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d075      	beq.n	8011d36 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8011c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d006      	beq.n	8011c60 <tcp_slowtmr+0xf0>
 8011c52:	4b62      	ldr	r3, [pc, #392]	; (8011ddc <tcp_slowtmr+0x26c>)
 8011c54:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8011c58:	4965      	ldr	r1, [pc, #404]	; (8011df0 <tcp_slowtmr+0x280>)
 8011c5a:	4862      	ldr	r0, [pc, #392]	; (8011de4 <tcp_slowtmr+0x274>)
 8011c5c:	f008 f820 	bl	8019ca0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8011c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d106      	bne.n	8011c76 <tcp_slowtmr+0x106>
 8011c68:	4b5c      	ldr	r3, [pc, #368]	; (8011ddc <tcp_slowtmr+0x26c>)
 8011c6a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8011c6e:	4961      	ldr	r1, [pc, #388]	; (8011df4 <tcp_slowtmr+0x284>)
 8011c70:	485c      	ldr	r0, [pc, #368]	; (8011de4 <tcp_slowtmr+0x274>)
 8011c72:	f008 f815 	bl	8019ca0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8011c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c78:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011c7c:	2b0b      	cmp	r3, #11
 8011c7e:	d905      	bls.n	8011c8c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8011c80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c84:	3301      	adds	r3, #1
 8011c86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011c8a:	e0ed      	b.n	8011e68 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8011c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c8e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011c92:	3b01      	subs	r3, #1
 8011c94:	4a58      	ldr	r2, [pc, #352]	; (8011df8 <tcp_slowtmr+0x288>)
 8011c96:	5cd3      	ldrb	r3, [r2, r3]
 8011c98:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8011c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c9c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011ca0:	7c7a      	ldrb	r2, [r7, #17]
 8011ca2:	429a      	cmp	r2, r3
 8011ca4:	d907      	bls.n	8011cb6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8011ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ca8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011cac:	3301      	adds	r3, #1
 8011cae:	b2da      	uxtb	r2, r3
 8011cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cb2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8011cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cb8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011cbc:	7c7a      	ldrb	r2, [r7, #17]
 8011cbe:	429a      	cmp	r2, r3
 8011cc0:	f200 80d2 	bhi.w	8011e68 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8011cc4:	2301      	movs	r3, #1
 8011cc6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8011cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d108      	bne.n	8011ce4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8011cd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011cd4:	f004 fc2c 	bl	8016530 <tcp_zero_window_probe>
 8011cd8:	4603      	mov	r3, r0
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d014      	beq.n	8011d08 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8011cde:	2300      	movs	r3, #0
 8011ce0:	623b      	str	r3, [r7, #32]
 8011ce2:	e011      	b.n	8011d08 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8011ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ce6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011cea:	4619      	mov	r1, r3
 8011cec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011cee:	f003 faf1 	bl	80152d4 <tcp_split_unsent_seg>
 8011cf2:	4603      	mov	r3, r0
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d107      	bne.n	8011d08 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8011cf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011cfa:	f003 fd71 	bl	80157e0 <tcp_output>
 8011cfe:	4603      	mov	r3, r0
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d101      	bne.n	8011d08 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8011d04:	2300      	movs	r3, #0
 8011d06:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8011d08:	6a3b      	ldr	r3, [r7, #32]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	f000 80ac 	beq.w	8011e68 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8011d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d12:	2200      	movs	r2, #0
 8011d14:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8011d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d1a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011d1e:	2b06      	cmp	r3, #6
 8011d20:	f200 80a2 	bhi.w	8011e68 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8011d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d26:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011d2a:	3301      	adds	r3, #1
 8011d2c:	b2da      	uxtb	r2, r3
 8011d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d30:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8011d34:	e098      	b.n	8011e68 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8011d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d38:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	db0f      	blt.n	8011d60 <tcp_slowtmr+0x1f0>
 8011d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d42:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011d46:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011d4a:	4293      	cmp	r3, r2
 8011d4c:	d008      	beq.n	8011d60 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8011d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d50:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011d54:	b29b      	uxth	r3, r3
 8011d56:	3301      	adds	r3, #1
 8011d58:	b29b      	uxth	r3, r3
 8011d5a:	b21a      	sxth	r2, r3
 8011d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d5e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8011d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d62:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8011d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d68:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011d6c:	429a      	cmp	r2, r3
 8011d6e:	db7b      	blt.n	8011e68 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8011d70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011d72:	f004 f829 	bl	8015dc8 <tcp_rexmit_rto_prepare>
 8011d76:	4603      	mov	r3, r0
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d007      	beq.n	8011d8c <tcp_slowtmr+0x21c>
 8011d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d171      	bne.n	8011e68 <tcp_slowtmr+0x2f8>
 8011d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d06d      	beq.n	8011e68 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8011d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d8e:	7d1b      	ldrb	r3, [r3, #20]
 8011d90:	2b02      	cmp	r3, #2
 8011d92:	d03a      	beq.n	8011e0a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8011d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011d9a:	2b0c      	cmp	r3, #12
 8011d9c:	bf28      	it	cs
 8011d9e:	230c      	movcs	r3, #12
 8011da0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8011da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011da4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011da8:	10db      	asrs	r3, r3, #3
 8011daa:	b21b      	sxth	r3, r3
 8011dac:	461a      	mov	r2, r3
 8011dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011db0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011db4:	4413      	add	r3, r2
 8011db6:	7efa      	ldrb	r2, [r7, #27]
 8011db8:	4910      	ldr	r1, [pc, #64]	; (8011dfc <tcp_slowtmr+0x28c>)
 8011dba:	5c8a      	ldrb	r2, [r1, r2]
 8011dbc:	4093      	lsls	r3, r2
 8011dbe:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8011dc0:	697b      	ldr	r3, [r7, #20]
 8011dc2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8011dc6:	4293      	cmp	r3, r2
 8011dc8:	dc1a      	bgt.n	8011e00 <tcp_slowtmr+0x290>
 8011dca:	697b      	ldr	r3, [r7, #20]
 8011dcc:	b21a      	sxth	r2, r3
 8011dce:	e019      	b.n	8011e04 <tcp_slowtmr+0x294>
 8011dd0:	200070d8 	.word	0x200070d8
 8011dd4:	200070ee 	.word	0x200070ee
 8011dd8:	200070e4 	.word	0x200070e4
 8011ddc:	0801d0a0 	.word	0x0801d0a0
 8011de0:	0801d3e4 	.word	0x0801d3e4
 8011de4:	0801d0e4 	.word	0x0801d0e4
 8011de8:	0801d410 	.word	0x0801d410
 8011dec:	0801d43c 	.word	0x0801d43c
 8011df0:	0801d46c 	.word	0x0801d46c
 8011df4:	0801d4a0 	.word	0x0801d4a0
 8011df8:	0801f098 	.word	0x0801f098
 8011dfc:	0801f088 	.word	0x0801f088
 8011e00:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8011e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e0c:	2200      	movs	r2, #0
 8011e0e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8011e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e12:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e18:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011e1c:	4293      	cmp	r3, r2
 8011e1e:	bf28      	it	cs
 8011e20:	4613      	movcs	r3, r2
 8011e22:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8011e24:	8a7b      	ldrh	r3, [r7, #18]
 8011e26:	085b      	lsrs	r3, r3, #1
 8011e28:	b29a      	uxth	r2, r3
 8011e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e2c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8011e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e32:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e3a:	005b      	lsls	r3, r3, #1
 8011e3c:	b29b      	uxth	r3, r3
 8011e3e:	429a      	cmp	r2, r3
 8011e40:	d206      	bcs.n	8011e50 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8011e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e46:	005b      	lsls	r3, r3, #1
 8011e48:	b29a      	uxth	r2, r3
 8011e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e4c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8011e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e52:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8011e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e56:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8011e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e5c:	2200      	movs	r2, #0
 8011e5e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8011e62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011e64:	f004 f820 	bl	8015ea8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8011e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e6a:	7d1b      	ldrb	r3, [r3, #20]
 8011e6c:	2b06      	cmp	r3, #6
 8011e6e:	d111      	bne.n	8011e94 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8011e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e72:	8b5b      	ldrh	r3, [r3, #26]
 8011e74:	f003 0310 	and.w	r3, r3, #16
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d00b      	beq.n	8011e94 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011e7c:	4b9c      	ldr	r3, [pc, #624]	; (80120f0 <tcp_slowtmr+0x580>)
 8011e7e:	681a      	ldr	r2, [r3, #0]
 8011e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e82:	6a1b      	ldr	r3, [r3, #32]
 8011e84:	1ad3      	subs	r3, r2, r3
 8011e86:	2b28      	cmp	r3, #40	; 0x28
 8011e88:	d904      	bls.n	8011e94 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8011e8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e8e:	3301      	adds	r3, #1
 8011e90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e96:	7a5b      	ldrb	r3, [r3, #9]
 8011e98:	f003 0308 	and.w	r3, r3, #8
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d04a      	beq.n	8011f36 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8011ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ea2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011ea4:	2b04      	cmp	r3, #4
 8011ea6:	d003      	beq.n	8011eb0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8011ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eaa:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8011eac:	2b07      	cmp	r3, #7
 8011eae:	d142      	bne.n	8011f36 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011eb0:	4b8f      	ldr	r3, [pc, #572]	; (80120f0 <tcp_slowtmr+0x580>)
 8011eb2:	681a      	ldr	r2, [r3, #0]
 8011eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eb6:	6a1b      	ldr	r3, [r3, #32]
 8011eb8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8011eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ebc:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011ec0:	4b8c      	ldr	r3, [pc, #560]	; (80120f4 <tcp_slowtmr+0x584>)
 8011ec2:	440b      	add	r3, r1
 8011ec4:	498c      	ldr	r1, [pc, #560]	; (80120f8 <tcp_slowtmr+0x588>)
 8011ec6:	fba1 1303 	umull	r1, r3, r1, r3
 8011eca:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011ecc:	429a      	cmp	r2, r3
 8011ece:	d90a      	bls.n	8011ee6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8011ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ed4:	3301      	adds	r3, #1
 8011ed6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8011eda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011ede:	3301      	adds	r3, #1
 8011ee0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011ee4:	e027      	b.n	8011f36 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011ee6:	4b82      	ldr	r3, [pc, #520]	; (80120f0 <tcp_slowtmr+0x580>)
 8011ee8:	681a      	ldr	r2, [r3, #0]
 8011eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eec:	6a1b      	ldr	r3, [r3, #32]
 8011eee:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ef2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ef8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011efc:	4618      	mov	r0, r3
 8011efe:	4b7f      	ldr	r3, [pc, #508]	; (80120fc <tcp_slowtmr+0x58c>)
 8011f00:	fb00 f303 	mul.w	r3, r0, r3
 8011f04:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8011f06:	497c      	ldr	r1, [pc, #496]	; (80120f8 <tcp_slowtmr+0x588>)
 8011f08:	fba1 1303 	umull	r1, r3, r1, r3
 8011f0c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011f0e:	429a      	cmp	r2, r3
 8011f10:	d911      	bls.n	8011f36 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8011f12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011f14:	f004 facc 	bl	80164b0 <tcp_keepalive>
 8011f18:	4603      	mov	r3, r0
 8011f1a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8011f1e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d107      	bne.n	8011f36 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8011f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f28:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011f2c:	3301      	adds	r3, #1
 8011f2e:	b2da      	uxtb	r2, r3
 8011f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f32:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8011f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d011      	beq.n	8011f62 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8011f3e:	4b6c      	ldr	r3, [pc, #432]	; (80120f0 <tcp_slowtmr+0x580>)
 8011f40:	681a      	ldr	r2, [r3, #0]
 8011f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f44:	6a1b      	ldr	r3, [r3, #32]
 8011f46:	1ad2      	subs	r2, r2, r3
 8011f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f4a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011f4e:	4619      	mov	r1, r3
 8011f50:	460b      	mov	r3, r1
 8011f52:	005b      	lsls	r3, r3, #1
 8011f54:	440b      	add	r3, r1
 8011f56:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011f58:	429a      	cmp	r2, r3
 8011f5a:	d302      	bcc.n	8011f62 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8011f5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011f5e:	f000 fddf 	bl	8012b20 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8011f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f64:	7d1b      	ldrb	r3, [r3, #20]
 8011f66:	2b03      	cmp	r3, #3
 8011f68:	d10b      	bne.n	8011f82 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011f6a:	4b61      	ldr	r3, [pc, #388]	; (80120f0 <tcp_slowtmr+0x580>)
 8011f6c:	681a      	ldr	r2, [r3, #0]
 8011f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f70:	6a1b      	ldr	r3, [r3, #32]
 8011f72:	1ad3      	subs	r3, r2, r3
 8011f74:	2b28      	cmp	r3, #40	; 0x28
 8011f76:	d904      	bls.n	8011f82 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8011f78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011f7c:	3301      	adds	r3, #1
 8011f7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8011f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f84:	7d1b      	ldrb	r3, [r3, #20]
 8011f86:	2b09      	cmp	r3, #9
 8011f88:	d10b      	bne.n	8011fa2 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011f8a:	4b59      	ldr	r3, [pc, #356]	; (80120f0 <tcp_slowtmr+0x580>)
 8011f8c:	681a      	ldr	r2, [r3, #0]
 8011f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f90:	6a1b      	ldr	r3, [r3, #32]
 8011f92:	1ad3      	subs	r3, r2, r3
 8011f94:	2bf0      	cmp	r3, #240	; 0xf0
 8011f96:	d904      	bls.n	8011fa2 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8011f98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011f9c:	3301      	adds	r3, #1
 8011f9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011fa2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d060      	beq.n	801206c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8011faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011fb0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8011fb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011fb4:	f000 fc00 	bl	80127b8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8011fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d010      	beq.n	8011fe0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8011fbe:	4b50      	ldr	r3, [pc, #320]	; (8012100 <tcp_slowtmr+0x590>)
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011fc4:	429a      	cmp	r2, r3
 8011fc6:	d106      	bne.n	8011fd6 <tcp_slowtmr+0x466>
 8011fc8:	4b4e      	ldr	r3, [pc, #312]	; (8012104 <tcp_slowtmr+0x594>)
 8011fca:	f240 526d 	movw	r2, #1389	; 0x56d
 8011fce:	494e      	ldr	r1, [pc, #312]	; (8012108 <tcp_slowtmr+0x598>)
 8011fd0:	484e      	ldr	r0, [pc, #312]	; (801210c <tcp_slowtmr+0x59c>)
 8011fd2:	f007 fe65 	bl	8019ca0 <iprintf>
        prev->next = pcb->next;
 8011fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fd8:	68da      	ldr	r2, [r3, #12]
 8011fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fdc:	60da      	str	r2, [r3, #12]
 8011fde:	e00f      	b.n	8012000 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8011fe0:	4b47      	ldr	r3, [pc, #284]	; (8012100 <tcp_slowtmr+0x590>)
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011fe6:	429a      	cmp	r2, r3
 8011fe8:	d006      	beq.n	8011ff8 <tcp_slowtmr+0x488>
 8011fea:	4b46      	ldr	r3, [pc, #280]	; (8012104 <tcp_slowtmr+0x594>)
 8011fec:	f240 5271 	movw	r2, #1393	; 0x571
 8011ff0:	4947      	ldr	r1, [pc, #284]	; (8012110 <tcp_slowtmr+0x5a0>)
 8011ff2:	4846      	ldr	r0, [pc, #280]	; (801210c <tcp_slowtmr+0x59c>)
 8011ff4:	f007 fe54 	bl	8019ca0 <iprintf>
        tcp_active_pcbs = pcb->next;
 8011ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ffa:	68db      	ldr	r3, [r3, #12]
 8011ffc:	4a40      	ldr	r2, [pc, #256]	; (8012100 <tcp_slowtmr+0x590>)
 8011ffe:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8012000:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012004:	2b00      	cmp	r3, #0
 8012006:	d013      	beq.n	8012030 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801200a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801200c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801200e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8012010:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8012012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012014:	3304      	adds	r3, #4
 8012016:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012018:	8ad2      	ldrh	r2, [r2, #22]
 801201a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801201c:	8b09      	ldrh	r1, [r1, #24]
 801201e:	9102      	str	r1, [sp, #8]
 8012020:	9201      	str	r2, [sp, #4]
 8012022:	9300      	str	r3, [sp, #0]
 8012024:	462b      	mov	r3, r5
 8012026:	4622      	mov	r2, r4
 8012028:	4601      	mov	r1, r0
 801202a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801202c:	f004 f98c 	bl	8016348 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8012030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012032:	691b      	ldr	r3, [r3, #16]
 8012034:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8012036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012038:	7d1b      	ldrb	r3, [r3, #20]
 801203a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801203c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801203e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8012040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012042:	68db      	ldr	r3, [r3, #12]
 8012044:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012046:	6838      	ldr	r0, [r7, #0]
 8012048:	f7ff f9f2 	bl	8011430 <tcp_free>

      tcp_active_pcbs_changed = 0;
 801204c:	4b31      	ldr	r3, [pc, #196]	; (8012114 <tcp_slowtmr+0x5a4>)
 801204e:	2200      	movs	r2, #0
 8012050:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	2b00      	cmp	r3, #0
 8012056:	d004      	beq.n	8012062 <tcp_slowtmr+0x4f2>
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	f06f 010c 	mvn.w	r1, #12
 801205e:	68b8      	ldr	r0, [r7, #8]
 8012060:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8012062:	4b2c      	ldr	r3, [pc, #176]	; (8012114 <tcp_slowtmr+0x5a4>)
 8012064:	781b      	ldrb	r3, [r3, #0]
 8012066:	2b00      	cmp	r3, #0
 8012068:	d037      	beq.n	80120da <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 801206a:	e592      	b.n	8011b92 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801206c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801206e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012072:	68db      	ldr	r3, [r3, #12]
 8012074:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8012076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012078:	7f1b      	ldrb	r3, [r3, #28]
 801207a:	3301      	adds	r3, #1
 801207c:	b2da      	uxtb	r2, r3
 801207e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012080:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8012082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012084:	7f1a      	ldrb	r2, [r3, #28]
 8012086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012088:	7f5b      	ldrb	r3, [r3, #29]
 801208a:	429a      	cmp	r2, r3
 801208c:	d325      	bcc.n	80120da <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 801208e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012090:	2200      	movs	r2, #0
 8012092:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8012094:	4b1f      	ldr	r3, [pc, #124]	; (8012114 <tcp_slowtmr+0x5a4>)
 8012096:	2200      	movs	r2, #0
 8012098:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801209a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801209c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d00b      	beq.n	80120bc <tcp_slowtmr+0x54c>
 80120a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80120aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80120ac:	6912      	ldr	r2, [r2, #16]
 80120ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80120b0:	4610      	mov	r0, r2
 80120b2:	4798      	blx	r3
 80120b4:	4603      	mov	r3, r0
 80120b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80120ba:	e002      	b.n	80120c2 <tcp_slowtmr+0x552>
 80120bc:	2300      	movs	r3, #0
 80120be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80120c2:	4b14      	ldr	r3, [pc, #80]	; (8012114 <tcp_slowtmr+0x5a4>)
 80120c4:	781b      	ldrb	r3, [r3, #0]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d000      	beq.n	80120cc <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 80120ca:	e562      	b.n	8011b92 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80120cc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d102      	bne.n	80120da <tcp_slowtmr+0x56a>
          tcp_output(prev);
 80120d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80120d6:	f003 fb83 	bl	80157e0 <tcp_output>
  while (pcb != NULL) {
 80120da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120dc:	2b00      	cmp	r3, #0
 80120de:	f47f ad5e 	bne.w	8011b9e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80120e2:	2300      	movs	r3, #0
 80120e4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80120e6:	4b0c      	ldr	r3, [pc, #48]	; (8012118 <tcp_slowtmr+0x5a8>)
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80120ec:	e069      	b.n	80121c2 <tcp_slowtmr+0x652>
 80120ee:	bf00      	nop
 80120f0:	200070d8 	.word	0x200070d8
 80120f4:	000a4cb8 	.word	0x000a4cb8
 80120f8:	10624dd3 	.word	0x10624dd3
 80120fc:	000124f8 	.word	0x000124f8
 8012100:	200070e4 	.word	0x200070e4
 8012104:	0801d0a0 	.word	0x0801d0a0
 8012108:	0801d4d8 	.word	0x0801d4d8
 801210c:	0801d0e4 	.word	0x0801d0e4
 8012110:	0801d504 	.word	0x0801d504
 8012114:	200070ec 	.word	0x200070ec
 8012118:	200070e8 	.word	0x200070e8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801211c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801211e:	7d1b      	ldrb	r3, [r3, #20]
 8012120:	2b0a      	cmp	r3, #10
 8012122:	d006      	beq.n	8012132 <tcp_slowtmr+0x5c2>
 8012124:	4b2b      	ldr	r3, [pc, #172]	; (80121d4 <tcp_slowtmr+0x664>)
 8012126:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801212a:	492b      	ldr	r1, [pc, #172]	; (80121d8 <tcp_slowtmr+0x668>)
 801212c:	482b      	ldr	r0, [pc, #172]	; (80121dc <tcp_slowtmr+0x66c>)
 801212e:	f007 fdb7 	bl	8019ca0 <iprintf>
    pcb_remove = 0;
 8012132:	2300      	movs	r3, #0
 8012134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012138:	4b29      	ldr	r3, [pc, #164]	; (80121e0 <tcp_slowtmr+0x670>)
 801213a:	681a      	ldr	r2, [r3, #0]
 801213c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801213e:	6a1b      	ldr	r3, [r3, #32]
 8012140:	1ad3      	subs	r3, r2, r3
 8012142:	2bf0      	cmp	r3, #240	; 0xf0
 8012144:	d904      	bls.n	8012150 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8012146:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801214a:	3301      	adds	r3, #1
 801214c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012154:	2b00      	cmp	r3, #0
 8012156:	d02f      	beq.n	80121b8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8012158:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801215a:	f000 fb2d 	bl	80127b8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801215e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012160:	2b00      	cmp	r3, #0
 8012162:	d010      	beq.n	8012186 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8012164:	4b1f      	ldr	r3, [pc, #124]	; (80121e4 <tcp_slowtmr+0x674>)
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801216a:	429a      	cmp	r2, r3
 801216c:	d106      	bne.n	801217c <tcp_slowtmr+0x60c>
 801216e:	4b19      	ldr	r3, [pc, #100]	; (80121d4 <tcp_slowtmr+0x664>)
 8012170:	f240 52af 	movw	r2, #1455	; 0x5af
 8012174:	491c      	ldr	r1, [pc, #112]	; (80121e8 <tcp_slowtmr+0x678>)
 8012176:	4819      	ldr	r0, [pc, #100]	; (80121dc <tcp_slowtmr+0x66c>)
 8012178:	f007 fd92 	bl	8019ca0 <iprintf>
        prev->next = pcb->next;
 801217c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801217e:	68da      	ldr	r2, [r3, #12]
 8012180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012182:	60da      	str	r2, [r3, #12]
 8012184:	e00f      	b.n	80121a6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8012186:	4b17      	ldr	r3, [pc, #92]	; (80121e4 <tcp_slowtmr+0x674>)
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801218c:	429a      	cmp	r2, r3
 801218e:	d006      	beq.n	801219e <tcp_slowtmr+0x62e>
 8012190:	4b10      	ldr	r3, [pc, #64]	; (80121d4 <tcp_slowtmr+0x664>)
 8012192:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8012196:	4915      	ldr	r1, [pc, #84]	; (80121ec <tcp_slowtmr+0x67c>)
 8012198:	4810      	ldr	r0, [pc, #64]	; (80121dc <tcp_slowtmr+0x66c>)
 801219a:	f007 fd81 	bl	8019ca0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801219e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121a0:	68db      	ldr	r3, [r3, #12]
 80121a2:	4a10      	ldr	r2, [pc, #64]	; (80121e4 <tcp_slowtmr+0x674>)
 80121a4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80121a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121a8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80121aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121ac:	68db      	ldr	r3, [r3, #12]
 80121ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80121b0:	69f8      	ldr	r0, [r7, #28]
 80121b2:	f7ff f93d 	bl	8011430 <tcp_free>
 80121b6:	e004      	b.n	80121c2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80121b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121ba:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80121bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121be:	68db      	ldr	r3, [r3, #12]
 80121c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80121c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d1a9      	bne.n	801211c <tcp_slowtmr+0x5ac>
    }
  }
}
 80121c8:	bf00      	nop
 80121ca:	bf00      	nop
 80121cc:	3730      	adds	r7, #48	; 0x30
 80121ce:	46bd      	mov	sp, r7
 80121d0:	bdb0      	pop	{r4, r5, r7, pc}
 80121d2:	bf00      	nop
 80121d4:	0801d0a0 	.word	0x0801d0a0
 80121d8:	0801d530 	.word	0x0801d530
 80121dc:	0801d0e4 	.word	0x0801d0e4
 80121e0:	200070d8 	.word	0x200070d8
 80121e4:	200070e8 	.word	0x200070e8
 80121e8:	0801d560 	.word	0x0801d560
 80121ec:	0801d588 	.word	0x0801d588

080121f0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80121f0:	b580      	push	{r7, lr}
 80121f2:	b082      	sub	sp, #8
 80121f4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80121f6:	4b2d      	ldr	r3, [pc, #180]	; (80122ac <tcp_fasttmr+0xbc>)
 80121f8:	781b      	ldrb	r3, [r3, #0]
 80121fa:	3301      	adds	r3, #1
 80121fc:	b2da      	uxtb	r2, r3
 80121fe:	4b2b      	ldr	r3, [pc, #172]	; (80122ac <tcp_fasttmr+0xbc>)
 8012200:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8012202:	4b2b      	ldr	r3, [pc, #172]	; (80122b0 <tcp_fasttmr+0xc0>)
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012208:	e048      	b.n	801229c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	7f9a      	ldrb	r2, [r3, #30]
 801220e:	4b27      	ldr	r3, [pc, #156]	; (80122ac <tcp_fasttmr+0xbc>)
 8012210:	781b      	ldrb	r3, [r3, #0]
 8012212:	429a      	cmp	r2, r3
 8012214:	d03f      	beq.n	8012296 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8012216:	4b25      	ldr	r3, [pc, #148]	; (80122ac <tcp_fasttmr+0xbc>)
 8012218:	781a      	ldrb	r2, [r3, #0]
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	8b5b      	ldrh	r3, [r3, #26]
 8012222:	f003 0301 	and.w	r3, r3, #1
 8012226:	2b00      	cmp	r3, #0
 8012228:	d010      	beq.n	801224c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	8b5b      	ldrh	r3, [r3, #26]
 801222e:	f043 0302 	orr.w	r3, r3, #2
 8012232:	b29a      	uxth	r2, r3
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8012238:	6878      	ldr	r0, [r7, #4]
 801223a:	f003 fad1 	bl	80157e0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	8b5b      	ldrh	r3, [r3, #26]
 8012242:	f023 0303 	bic.w	r3, r3, #3
 8012246:	b29a      	uxth	r2, r3
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	8b5b      	ldrh	r3, [r3, #26]
 8012250:	f003 0308 	and.w	r3, r3, #8
 8012254:	2b00      	cmp	r3, #0
 8012256:	d009      	beq.n	801226c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	8b5b      	ldrh	r3, [r3, #26]
 801225c:	f023 0308 	bic.w	r3, r3, #8
 8012260:	b29a      	uxth	r2, r3
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8012266:	6878      	ldr	r0, [r7, #4]
 8012268:	f7ff fa76 	bl	8011758 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	68db      	ldr	r3, [r3, #12]
 8012270:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012276:	2b00      	cmp	r3, #0
 8012278:	d00a      	beq.n	8012290 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801227a:	4b0e      	ldr	r3, [pc, #56]	; (80122b4 <tcp_fasttmr+0xc4>)
 801227c:	2200      	movs	r2, #0
 801227e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8012280:	6878      	ldr	r0, [r7, #4]
 8012282:	f000 f819 	bl	80122b8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8012286:	4b0b      	ldr	r3, [pc, #44]	; (80122b4 <tcp_fasttmr+0xc4>)
 8012288:	781b      	ldrb	r3, [r3, #0]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d000      	beq.n	8012290 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801228e:	e7b8      	b.n	8012202 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8012290:	683b      	ldr	r3, [r7, #0]
 8012292:	607b      	str	r3, [r7, #4]
 8012294:	e002      	b.n	801229c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	68db      	ldr	r3, [r3, #12]
 801229a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d1b3      	bne.n	801220a <tcp_fasttmr+0x1a>
    }
  }
}
 80122a2:	bf00      	nop
 80122a4:	bf00      	nop
 80122a6:	3708      	adds	r7, #8
 80122a8:	46bd      	mov	sp, r7
 80122aa:	bd80      	pop	{r7, pc}
 80122ac:	200070ee 	.word	0x200070ee
 80122b0:	200070e4 	.word	0x200070e4
 80122b4:	200070ec 	.word	0x200070ec

080122b8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80122b8:	b590      	push	{r4, r7, lr}
 80122ba:	b085      	sub	sp, #20
 80122bc:	af00      	add	r7, sp, #0
 80122be:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d109      	bne.n	80122da <tcp_process_refused_data+0x22>
 80122c6:	4b38      	ldr	r3, [pc, #224]	; (80123a8 <tcp_process_refused_data+0xf0>)
 80122c8:	f240 6209 	movw	r2, #1545	; 0x609
 80122cc:	4937      	ldr	r1, [pc, #220]	; (80123ac <tcp_process_refused_data+0xf4>)
 80122ce:	4838      	ldr	r0, [pc, #224]	; (80123b0 <tcp_process_refused_data+0xf8>)
 80122d0:	f007 fce6 	bl	8019ca0 <iprintf>
 80122d4:	f06f 030f 	mvn.w	r3, #15
 80122d8:	e061      	b.n	801239e <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80122de:	7b5b      	ldrb	r3, [r3, #13]
 80122e0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80122e6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	2200      	movs	r2, #0
 80122ec:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d00b      	beq.n	8012310 <tcp_process_refused_data+0x58>
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	6918      	ldr	r0, [r3, #16]
 8012302:	2300      	movs	r3, #0
 8012304:	68ba      	ldr	r2, [r7, #8]
 8012306:	6879      	ldr	r1, [r7, #4]
 8012308:	47a0      	blx	r4
 801230a:	4603      	mov	r3, r0
 801230c:	73fb      	strb	r3, [r7, #15]
 801230e:	e007      	b.n	8012320 <tcp_process_refused_data+0x68>
 8012310:	2300      	movs	r3, #0
 8012312:	68ba      	ldr	r2, [r7, #8]
 8012314:	6879      	ldr	r1, [r7, #4]
 8012316:	2000      	movs	r0, #0
 8012318:	f000 f8a6 	bl	8012468 <tcp_recv_null>
 801231c:	4603      	mov	r3, r0
 801231e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8012320:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d12b      	bne.n	8012380 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8012328:	7bbb      	ldrb	r3, [r7, #14]
 801232a:	f003 0320 	and.w	r3, r3, #32
 801232e:	2b00      	cmp	r3, #0
 8012330:	d034      	beq.n	801239c <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012336:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801233a:	4293      	cmp	r3, r2
 801233c:	d005      	beq.n	801234a <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012342:	3301      	adds	r3, #1
 8012344:	b29a      	uxth	r2, r3
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012350:	2b00      	cmp	r3, #0
 8012352:	d00b      	beq.n	801236c <tcp_process_refused_data+0xb4>
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	6918      	ldr	r0, [r3, #16]
 801235e:	2300      	movs	r3, #0
 8012360:	2200      	movs	r2, #0
 8012362:	6879      	ldr	r1, [r7, #4]
 8012364:	47a0      	blx	r4
 8012366:	4603      	mov	r3, r0
 8012368:	73fb      	strb	r3, [r7, #15]
 801236a:	e001      	b.n	8012370 <tcp_process_refused_data+0xb8>
 801236c:	2300      	movs	r3, #0
 801236e:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8012370:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012374:	f113 0f0d 	cmn.w	r3, #13
 8012378:	d110      	bne.n	801239c <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 801237a:	f06f 030c 	mvn.w	r3, #12
 801237e:	e00e      	b.n	801239e <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8012380:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012384:	f113 0f0d 	cmn.w	r3, #13
 8012388:	d102      	bne.n	8012390 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801238a:	f06f 030c 	mvn.w	r3, #12
 801238e:	e006      	b.n	801239e <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	68ba      	ldr	r2, [r7, #8]
 8012394:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8012396:	f06f 0304 	mvn.w	r3, #4
 801239a:	e000      	b.n	801239e <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 801239c:	2300      	movs	r3, #0
}
 801239e:	4618      	mov	r0, r3
 80123a0:	3714      	adds	r7, #20
 80123a2:	46bd      	mov	sp, r7
 80123a4:	bd90      	pop	{r4, r7, pc}
 80123a6:	bf00      	nop
 80123a8:	0801d0a0 	.word	0x0801d0a0
 80123ac:	0801d5b0 	.word	0x0801d5b0
 80123b0:	0801d0e4 	.word	0x0801d0e4

080123b4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b084      	sub	sp, #16
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80123bc:	e007      	b.n	80123ce <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80123c4:	6878      	ldr	r0, [r7, #4]
 80123c6:	f000 f80a 	bl	80123de <tcp_seg_free>
    seg = next;
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d1f4      	bne.n	80123be <tcp_segs_free+0xa>
  }
}
 80123d4:	bf00      	nop
 80123d6:	bf00      	nop
 80123d8:	3710      	adds	r7, #16
 80123da:	46bd      	mov	sp, r7
 80123dc:	bd80      	pop	{r7, pc}

080123de <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80123de:	b580      	push	{r7, lr}
 80123e0:	b082      	sub	sp, #8
 80123e2:	af00      	add	r7, sp, #0
 80123e4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d00c      	beq.n	8012406 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	685b      	ldr	r3, [r3, #4]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d004      	beq.n	80123fe <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	685b      	ldr	r3, [r3, #4]
 80123f8:	4618      	mov	r0, r3
 80123fa:	f7fe fd79 	bl	8010ef0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80123fe:	6879      	ldr	r1, [r7, #4]
 8012400:	2003      	movs	r0, #3
 8012402:	f7fd ff1f 	bl	8010244 <memp_free>
  }
}
 8012406:	bf00      	nop
 8012408:	3708      	adds	r7, #8
 801240a:	46bd      	mov	sp, r7
 801240c:	bd80      	pop	{r7, pc}
	...

08012410 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8012410:	b580      	push	{r7, lr}
 8012412:	b084      	sub	sp, #16
 8012414:	af00      	add	r7, sp, #0
 8012416:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d106      	bne.n	801242c <tcp_seg_copy+0x1c>
 801241e:	4b0f      	ldr	r3, [pc, #60]	; (801245c <tcp_seg_copy+0x4c>)
 8012420:	f240 6282 	movw	r2, #1666	; 0x682
 8012424:	490e      	ldr	r1, [pc, #56]	; (8012460 <tcp_seg_copy+0x50>)
 8012426:	480f      	ldr	r0, [pc, #60]	; (8012464 <tcp_seg_copy+0x54>)
 8012428:	f007 fc3a 	bl	8019ca0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801242c:	2003      	movs	r0, #3
 801242e:	f7fd fe99 	bl	8010164 <memp_malloc>
 8012432:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d101      	bne.n	801243e <tcp_seg_copy+0x2e>
    return NULL;
 801243a:	2300      	movs	r3, #0
 801243c:	e00a      	b.n	8012454 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801243e:	2210      	movs	r2, #16
 8012440:	6879      	ldr	r1, [r7, #4]
 8012442:	68f8      	ldr	r0, [r7, #12]
 8012444:	f007 fdfb 	bl	801a03e <memcpy>
  pbuf_ref(cseg->p);
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	685b      	ldr	r3, [r3, #4]
 801244c:	4618      	mov	r0, r3
 801244e:	f7fe fdef 	bl	8011030 <pbuf_ref>
  return cseg;
 8012452:	68fb      	ldr	r3, [r7, #12]
}
 8012454:	4618      	mov	r0, r3
 8012456:	3710      	adds	r7, #16
 8012458:	46bd      	mov	sp, r7
 801245a:	bd80      	pop	{r7, pc}
 801245c:	0801d0a0 	.word	0x0801d0a0
 8012460:	0801d5f4 	.word	0x0801d5f4
 8012464:	0801d0e4 	.word	0x0801d0e4

08012468 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8012468:	b580      	push	{r7, lr}
 801246a:	b084      	sub	sp, #16
 801246c:	af00      	add	r7, sp, #0
 801246e:	60f8      	str	r0, [r7, #12]
 8012470:	60b9      	str	r1, [r7, #8]
 8012472:	607a      	str	r2, [r7, #4]
 8012474:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8012476:	68bb      	ldr	r3, [r7, #8]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d109      	bne.n	8012490 <tcp_recv_null+0x28>
 801247c:	4b12      	ldr	r3, [pc, #72]	; (80124c8 <tcp_recv_null+0x60>)
 801247e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012482:	4912      	ldr	r1, [pc, #72]	; (80124cc <tcp_recv_null+0x64>)
 8012484:	4812      	ldr	r0, [pc, #72]	; (80124d0 <tcp_recv_null+0x68>)
 8012486:	f007 fc0b 	bl	8019ca0 <iprintf>
 801248a:	f06f 030f 	mvn.w	r3, #15
 801248e:	e016      	b.n	80124be <tcp_recv_null+0x56>

  if (p != NULL) {
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d009      	beq.n	80124aa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	891b      	ldrh	r3, [r3, #8]
 801249a:	4619      	mov	r1, r3
 801249c:	68b8      	ldr	r0, [r7, #8]
 801249e:	f7ff fb15 	bl	8011acc <tcp_recved>
    pbuf_free(p);
 80124a2:	6878      	ldr	r0, [r7, #4]
 80124a4:	f7fe fd24 	bl	8010ef0 <pbuf_free>
 80124a8:	e008      	b.n	80124bc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80124aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d104      	bne.n	80124bc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80124b2:	68b8      	ldr	r0, [r7, #8]
 80124b4:	f7ff f9ba 	bl	801182c <tcp_close>
 80124b8:	4603      	mov	r3, r0
 80124ba:	e000      	b.n	80124be <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80124bc:	2300      	movs	r3, #0
}
 80124be:	4618      	mov	r0, r3
 80124c0:	3710      	adds	r7, #16
 80124c2:	46bd      	mov	sp, r7
 80124c4:	bd80      	pop	{r7, pc}
 80124c6:	bf00      	nop
 80124c8:	0801d0a0 	.word	0x0801d0a0
 80124cc:	0801d610 	.word	0x0801d610
 80124d0:	0801d0e4 	.word	0x0801d0e4

080124d4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b086      	sub	sp, #24
 80124d8:	af00      	add	r7, sp, #0
 80124da:	4603      	mov	r3, r0
 80124dc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80124de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	db01      	blt.n	80124ea <tcp_kill_prio+0x16>
 80124e6:	79fb      	ldrb	r3, [r7, #7]
 80124e8:	e000      	b.n	80124ec <tcp_kill_prio+0x18>
 80124ea:	237f      	movs	r3, #127	; 0x7f
 80124ec:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80124ee:	7afb      	ldrb	r3, [r7, #11]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d034      	beq.n	801255e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80124f4:	7afb      	ldrb	r3, [r7, #11]
 80124f6:	3b01      	subs	r3, #1
 80124f8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80124fa:	2300      	movs	r3, #0
 80124fc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80124fe:	2300      	movs	r3, #0
 8012500:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012502:	4b19      	ldr	r3, [pc, #100]	; (8012568 <tcp_kill_prio+0x94>)
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	617b      	str	r3, [r7, #20]
 8012508:	e01f      	b.n	801254a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801250a:	697b      	ldr	r3, [r7, #20]
 801250c:	7d5b      	ldrb	r3, [r3, #21]
 801250e:	7afa      	ldrb	r2, [r7, #11]
 8012510:	429a      	cmp	r2, r3
 8012512:	d80c      	bhi.n	801252e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012514:	697b      	ldr	r3, [r7, #20]
 8012516:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8012518:	7afa      	ldrb	r2, [r7, #11]
 801251a:	429a      	cmp	r2, r3
 801251c:	d112      	bne.n	8012544 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801251e:	4b13      	ldr	r3, [pc, #76]	; (801256c <tcp_kill_prio+0x98>)
 8012520:	681a      	ldr	r2, [r3, #0]
 8012522:	697b      	ldr	r3, [r7, #20]
 8012524:	6a1b      	ldr	r3, [r3, #32]
 8012526:	1ad3      	subs	r3, r2, r3
 8012528:	68fa      	ldr	r2, [r7, #12]
 801252a:	429a      	cmp	r2, r3
 801252c:	d80a      	bhi.n	8012544 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801252e:	4b0f      	ldr	r3, [pc, #60]	; (801256c <tcp_kill_prio+0x98>)
 8012530:	681a      	ldr	r2, [r3, #0]
 8012532:	697b      	ldr	r3, [r7, #20]
 8012534:	6a1b      	ldr	r3, [r3, #32]
 8012536:	1ad3      	subs	r3, r2, r3
 8012538:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801253a:	697b      	ldr	r3, [r7, #20]
 801253c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801253e:	697b      	ldr	r3, [r7, #20]
 8012540:	7d5b      	ldrb	r3, [r3, #21]
 8012542:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012544:	697b      	ldr	r3, [r7, #20]
 8012546:	68db      	ldr	r3, [r3, #12]
 8012548:	617b      	str	r3, [r7, #20]
 801254a:	697b      	ldr	r3, [r7, #20]
 801254c:	2b00      	cmp	r3, #0
 801254e:	d1dc      	bne.n	801250a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8012550:	693b      	ldr	r3, [r7, #16]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d004      	beq.n	8012560 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012556:	6938      	ldr	r0, [r7, #16]
 8012558:	f7ff fa52 	bl	8011a00 <tcp_abort>
 801255c:	e000      	b.n	8012560 <tcp_kill_prio+0x8c>
    return;
 801255e:	bf00      	nop
  }
}
 8012560:	3718      	adds	r7, #24
 8012562:	46bd      	mov	sp, r7
 8012564:	bd80      	pop	{r7, pc}
 8012566:	bf00      	nop
 8012568:	200070e4 	.word	0x200070e4
 801256c:	200070d8 	.word	0x200070d8

08012570 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8012570:	b580      	push	{r7, lr}
 8012572:	b086      	sub	sp, #24
 8012574:	af00      	add	r7, sp, #0
 8012576:	4603      	mov	r3, r0
 8012578:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801257a:	79fb      	ldrb	r3, [r7, #7]
 801257c:	2b08      	cmp	r3, #8
 801257e:	d009      	beq.n	8012594 <tcp_kill_state+0x24>
 8012580:	79fb      	ldrb	r3, [r7, #7]
 8012582:	2b09      	cmp	r3, #9
 8012584:	d006      	beq.n	8012594 <tcp_kill_state+0x24>
 8012586:	4b1a      	ldr	r3, [pc, #104]	; (80125f0 <tcp_kill_state+0x80>)
 8012588:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801258c:	4919      	ldr	r1, [pc, #100]	; (80125f4 <tcp_kill_state+0x84>)
 801258e:	481a      	ldr	r0, [pc, #104]	; (80125f8 <tcp_kill_state+0x88>)
 8012590:	f007 fb86 	bl	8019ca0 <iprintf>

  inactivity = 0;
 8012594:	2300      	movs	r3, #0
 8012596:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012598:	2300      	movs	r3, #0
 801259a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801259c:	4b17      	ldr	r3, [pc, #92]	; (80125fc <tcp_kill_state+0x8c>)
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	617b      	str	r3, [r7, #20]
 80125a2:	e017      	b.n	80125d4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80125a4:	697b      	ldr	r3, [r7, #20]
 80125a6:	7d1b      	ldrb	r3, [r3, #20]
 80125a8:	79fa      	ldrb	r2, [r7, #7]
 80125aa:	429a      	cmp	r2, r3
 80125ac:	d10f      	bne.n	80125ce <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80125ae:	4b14      	ldr	r3, [pc, #80]	; (8012600 <tcp_kill_state+0x90>)
 80125b0:	681a      	ldr	r2, [r3, #0]
 80125b2:	697b      	ldr	r3, [r7, #20]
 80125b4:	6a1b      	ldr	r3, [r3, #32]
 80125b6:	1ad3      	subs	r3, r2, r3
 80125b8:	68fa      	ldr	r2, [r7, #12]
 80125ba:	429a      	cmp	r2, r3
 80125bc:	d807      	bhi.n	80125ce <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80125be:	4b10      	ldr	r3, [pc, #64]	; (8012600 <tcp_kill_state+0x90>)
 80125c0:	681a      	ldr	r2, [r3, #0]
 80125c2:	697b      	ldr	r3, [r7, #20]
 80125c4:	6a1b      	ldr	r3, [r3, #32]
 80125c6:	1ad3      	subs	r3, r2, r3
 80125c8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80125ca:	697b      	ldr	r3, [r7, #20]
 80125cc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80125ce:	697b      	ldr	r3, [r7, #20]
 80125d0:	68db      	ldr	r3, [r3, #12]
 80125d2:	617b      	str	r3, [r7, #20]
 80125d4:	697b      	ldr	r3, [r7, #20]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d1e4      	bne.n	80125a4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80125da:	693b      	ldr	r3, [r7, #16]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d003      	beq.n	80125e8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80125e0:	2100      	movs	r1, #0
 80125e2:	6938      	ldr	r0, [r7, #16]
 80125e4:	f7ff f94e 	bl	8011884 <tcp_abandon>
  }
}
 80125e8:	bf00      	nop
 80125ea:	3718      	adds	r7, #24
 80125ec:	46bd      	mov	sp, r7
 80125ee:	bd80      	pop	{r7, pc}
 80125f0:	0801d0a0 	.word	0x0801d0a0
 80125f4:	0801d62c 	.word	0x0801d62c
 80125f8:	0801d0e4 	.word	0x0801d0e4
 80125fc:	200070e4 	.word	0x200070e4
 8012600:	200070d8 	.word	0x200070d8

08012604 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8012604:	b580      	push	{r7, lr}
 8012606:	b084      	sub	sp, #16
 8012608:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801260a:	2300      	movs	r3, #0
 801260c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801260e:	2300      	movs	r3, #0
 8012610:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012612:	4b12      	ldr	r3, [pc, #72]	; (801265c <tcp_kill_timewait+0x58>)
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	60fb      	str	r3, [r7, #12]
 8012618:	e012      	b.n	8012640 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801261a:	4b11      	ldr	r3, [pc, #68]	; (8012660 <tcp_kill_timewait+0x5c>)
 801261c:	681a      	ldr	r2, [r3, #0]
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	6a1b      	ldr	r3, [r3, #32]
 8012622:	1ad3      	subs	r3, r2, r3
 8012624:	687a      	ldr	r2, [r7, #4]
 8012626:	429a      	cmp	r2, r3
 8012628:	d807      	bhi.n	801263a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801262a:	4b0d      	ldr	r3, [pc, #52]	; (8012660 <tcp_kill_timewait+0x5c>)
 801262c:	681a      	ldr	r2, [r3, #0]
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	6a1b      	ldr	r3, [r3, #32]
 8012632:	1ad3      	subs	r3, r2, r3
 8012634:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	68db      	ldr	r3, [r3, #12]
 801263e:	60fb      	str	r3, [r7, #12]
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	2b00      	cmp	r3, #0
 8012644:	d1e9      	bne.n	801261a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8012646:	68bb      	ldr	r3, [r7, #8]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d002      	beq.n	8012652 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801264c:	68b8      	ldr	r0, [r7, #8]
 801264e:	f7ff f9d7 	bl	8011a00 <tcp_abort>
  }
}
 8012652:	bf00      	nop
 8012654:	3710      	adds	r7, #16
 8012656:	46bd      	mov	sp, r7
 8012658:	bd80      	pop	{r7, pc}
 801265a:	bf00      	nop
 801265c:	200070e8 	.word	0x200070e8
 8012660:	200070d8 	.word	0x200070d8

08012664 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8012664:	b580      	push	{r7, lr}
 8012666:	b082      	sub	sp, #8
 8012668:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801266a:	4b10      	ldr	r3, [pc, #64]	; (80126ac <tcp_handle_closepend+0x48>)
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012670:	e014      	b.n	801269c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	68db      	ldr	r3, [r3, #12]
 8012676:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	8b5b      	ldrh	r3, [r3, #26]
 801267c:	f003 0308 	and.w	r3, r3, #8
 8012680:	2b00      	cmp	r3, #0
 8012682:	d009      	beq.n	8012698 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	8b5b      	ldrh	r3, [r3, #26]
 8012688:	f023 0308 	bic.w	r3, r3, #8
 801268c:	b29a      	uxth	r2, r3
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8012692:	6878      	ldr	r0, [r7, #4]
 8012694:	f7ff f860 	bl	8011758 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8012698:	683b      	ldr	r3, [r7, #0]
 801269a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d1e7      	bne.n	8012672 <tcp_handle_closepend+0xe>
  }
}
 80126a2:	bf00      	nop
 80126a4:	bf00      	nop
 80126a6:	3708      	adds	r7, #8
 80126a8:	46bd      	mov	sp, r7
 80126aa:	bd80      	pop	{r7, pc}
 80126ac:	200070e4 	.word	0x200070e4

080126b0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b084      	sub	sp, #16
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	4603      	mov	r3, r0
 80126b8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80126ba:	2001      	movs	r0, #1
 80126bc:	f7fd fd52 	bl	8010164 <memp_malloc>
 80126c0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d126      	bne.n	8012716 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80126c8:	f7ff ffcc 	bl	8012664 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80126cc:	f7ff ff9a 	bl	8012604 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80126d0:	2001      	movs	r0, #1
 80126d2:	f7fd fd47 	bl	8010164 <memp_malloc>
 80126d6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d11b      	bne.n	8012716 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80126de:	2009      	movs	r0, #9
 80126e0:	f7ff ff46 	bl	8012570 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80126e4:	2001      	movs	r0, #1
 80126e6:	f7fd fd3d 	bl	8010164 <memp_malloc>
 80126ea:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d111      	bne.n	8012716 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80126f2:	2008      	movs	r0, #8
 80126f4:	f7ff ff3c 	bl	8012570 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80126f8:	2001      	movs	r0, #1
 80126fa:	f7fd fd33 	bl	8010164 <memp_malloc>
 80126fe:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	2b00      	cmp	r3, #0
 8012704:	d107      	bne.n	8012716 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8012706:	79fb      	ldrb	r3, [r7, #7]
 8012708:	4618      	mov	r0, r3
 801270a:	f7ff fee3 	bl	80124d4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801270e:	2001      	movs	r0, #1
 8012710:	f7fd fd28 	bl	8010164 <memp_malloc>
 8012714:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	2b00      	cmp	r3, #0
 801271a:	d03f      	beq.n	801279c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801271c:	229c      	movs	r2, #156	; 0x9c
 801271e:	2100      	movs	r1, #0
 8012720:	68f8      	ldr	r0, [r7, #12]
 8012722:	f007 fc13 	bl	8019f4c <memset>
    pcb->prio = prio;
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	79fa      	ldrb	r2, [r7, #7]
 801272a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8012732:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801273c:	855a      	strh	r2, [r3, #42]	; 0x2a
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	22ff      	movs	r2, #255	; 0xff
 801274a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012752:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	2206      	movs	r2, #6
 8012758:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	2206      	movs	r2, #6
 8012760:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012768:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	2201      	movs	r2, #1
 801276e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8012772:	4b0d      	ldr	r3, [pc, #52]	; (80127a8 <tcp_alloc+0xf8>)
 8012774:	681a      	ldr	r2, [r3, #0]
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801277a:	4b0c      	ldr	r3, [pc, #48]	; (80127ac <tcp_alloc+0xfc>)
 801277c:	781a      	ldrb	r2, [r3, #0]
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8012788:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	4a08      	ldr	r2, [pc, #32]	; (80127b0 <tcp_alloc+0x100>)
 8012790:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	4a07      	ldr	r2, [pc, #28]	; (80127b4 <tcp_alloc+0x104>)
 8012798:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801279c:	68fb      	ldr	r3, [r7, #12]
}
 801279e:	4618      	mov	r0, r3
 80127a0:	3710      	adds	r7, #16
 80127a2:	46bd      	mov	sp, r7
 80127a4:	bd80      	pop	{r7, pc}
 80127a6:	bf00      	nop
 80127a8:	200070d8 	.word	0x200070d8
 80127ac:	200070ee 	.word	0x200070ee
 80127b0:	08012469 	.word	0x08012469
 80127b4:	006ddd00 	.word	0x006ddd00

080127b8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80127b8:	b580      	push	{r7, lr}
 80127ba:	b082      	sub	sp, #8
 80127bc:	af00      	add	r7, sp, #0
 80127be:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d107      	bne.n	80127d6 <tcp_pcb_purge+0x1e>
 80127c6:	4b21      	ldr	r3, [pc, #132]	; (801284c <tcp_pcb_purge+0x94>)
 80127c8:	f640 0251 	movw	r2, #2129	; 0x851
 80127cc:	4920      	ldr	r1, [pc, #128]	; (8012850 <tcp_pcb_purge+0x98>)
 80127ce:	4821      	ldr	r0, [pc, #132]	; (8012854 <tcp_pcb_purge+0x9c>)
 80127d0:	f007 fa66 	bl	8019ca0 <iprintf>
 80127d4:	e037      	b.n	8012846 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	7d1b      	ldrb	r3, [r3, #20]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d033      	beq.n	8012846 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80127e2:	2b0a      	cmp	r3, #10
 80127e4:	d02f      	beq.n	8012846 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80127ea:	2b01      	cmp	r3, #1
 80127ec:	d02b      	beq.n	8012846 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d007      	beq.n	8012806 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80127fa:	4618      	mov	r0, r3
 80127fc:	f7fe fb78 	bl	8010ef0 <pbuf_free>
      pcb->refused_data = NULL;
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	2200      	movs	r2, #0
 8012804:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801280a:	2b00      	cmp	r3, #0
 801280c:	d002      	beq.n	8012814 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801280e:	6878      	ldr	r0, [r7, #4]
 8012810:	f000 f986 	bl	8012b20 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801281a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012820:	4618      	mov	r0, r3
 8012822:	f7ff fdc7 	bl	80123b4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801282a:	4618      	mov	r0, r3
 801282c:	f7ff fdc2 	bl	80123b4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	2200      	movs	r2, #0
 8012834:	66da      	str	r2, [r3, #108]	; 0x6c
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	2200      	movs	r2, #0
 8012842:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8012846:	3708      	adds	r7, #8
 8012848:	46bd      	mov	sp, r7
 801284a:	bd80      	pop	{r7, pc}
 801284c:	0801d0a0 	.word	0x0801d0a0
 8012850:	0801d6ec 	.word	0x0801d6ec
 8012854:	0801d0e4 	.word	0x0801d0e4

08012858 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8012858:	b580      	push	{r7, lr}
 801285a:	b084      	sub	sp, #16
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
 8012860:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8012862:	683b      	ldr	r3, [r7, #0]
 8012864:	2b00      	cmp	r3, #0
 8012866:	d106      	bne.n	8012876 <tcp_pcb_remove+0x1e>
 8012868:	4b3e      	ldr	r3, [pc, #248]	; (8012964 <tcp_pcb_remove+0x10c>)
 801286a:	f640 0283 	movw	r2, #2179	; 0x883
 801286e:	493e      	ldr	r1, [pc, #248]	; (8012968 <tcp_pcb_remove+0x110>)
 8012870:	483e      	ldr	r0, [pc, #248]	; (801296c <tcp_pcb_remove+0x114>)
 8012872:	f007 fa15 	bl	8019ca0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	2b00      	cmp	r3, #0
 801287a:	d106      	bne.n	801288a <tcp_pcb_remove+0x32>
 801287c:	4b39      	ldr	r3, [pc, #228]	; (8012964 <tcp_pcb_remove+0x10c>)
 801287e:	f640 0284 	movw	r2, #2180	; 0x884
 8012882:	493b      	ldr	r1, [pc, #236]	; (8012970 <tcp_pcb_remove+0x118>)
 8012884:	4839      	ldr	r0, [pc, #228]	; (801296c <tcp_pcb_remove+0x114>)
 8012886:	f007 fa0b 	bl	8019ca0 <iprintf>

  TCP_RMV(pcblist, pcb);
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	683a      	ldr	r2, [r7, #0]
 8012890:	429a      	cmp	r2, r3
 8012892:	d105      	bne.n	80128a0 <tcp_pcb_remove+0x48>
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	68da      	ldr	r2, [r3, #12]
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	601a      	str	r2, [r3, #0]
 801289e:	e013      	b.n	80128c8 <tcp_pcb_remove+0x70>
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	60fb      	str	r3, [r7, #12]
 80128a6:	e00c      	b.n	80128c2 <tcp_pcb_remove+0x6a>
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	68db      	ldr	r3, [r3, #12]
 80128ac:	683a      	ldr	r2, [r7, #0]
 80128ae:	429a      	cmp	r2, r3
 80128b0:	d104      	bne.n	80128bc <tcp_pcb_remove+0x64>
 80128b2:	683b      	ldr	r3, [r7, #0]
 80128b4:	68da      	ldr	r2, [r3, #12]
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	60da      	str	r2, [r3, #12]
 80128ba:	e005      	b.n	80128c8 <tcp_pcb_remove+0x70>
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	68db      	ldr	r3, [r3, #12]
 80128c0:	60fb      	str	r3, [r7, #12]
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d1ef      	bne.n	80128a8 <tcp_pcb_remove+0x50>
 80128c8:	683b      	ldr	r3, [r7, #0]
 80128ca:	2200      	movs	r2, #0
 80128cc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80128ce:	6838      	ldr	r0, [r7, #0]
 80128d0:	f7ff ff72 	bl	80127b8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80128d4:	683b      	ldr	r3, [r7, #0]
 80128d6:	7d1b      	ldrb	r3, [r3, #20]
 80128d8:	2b0a      	cmp	r3, #10
 80128da:	d013      	beq.n	8012904 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80128dc:	683b      	ldr	r3, [r7, #0]
 80128de:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80128e0:	2b01      	cmp	r3, #1
 80128e2:	d00f      	beq.n	8012904 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80128e4:	683b      	ldr	r3, [r7, #0]
 80128e6:	8b5b      	ldrh	r3, [r3, #26]
 80128e8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d009      	beq.n	8012904 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80128f0:	683b      	ldr	r3, [r7, #0]
 80128f2:	8b5b      	ldrh	r3, [r3, #26]
 80128f4:	f043 0302 	orr.w	r3, r3, #2
 80128f8:	b29a      	uxth	r2, r3
 80128fa:	683b      	ldr	r3, [r7, #0]
 80128fc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80128fe:	6838      	ldr	r0, [r7, #0]
 8012900:	f002 ff6e 	bl	80157e0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8012904:	683b      	ldr	r3, [r7, #0]
 8012906:	7d1b      	ldrb	r3, [r3, #20]
 8012908:	2b01      	cmp	r3, #1
 801290a:	d020      	beq.n	801294e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801290c:	683b      	ldr	r3, [r7, #0]
 801290e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012910:	2b00      	cmp	r3, #0
 8012912:	d006      	beq.n	8012922 <tcp_pcb_remove+0xca>
 8012914:	4b13      	ldr	r3, [pc, #76]	; (8012964 <tcp_pcb_remove+0x10c>)
 8012916:	f640 0293 	movw	r2, #2195	; 0x893
 801291a:	4916      	ldr	r1, [pc, #88]	; (8012974 <tcp_pcb_remove+0x11c>)
 801291c:	4813      	ldr	r0, [pc, #76]	; (801296c <tcp_pcb_remove+0x114>)
 801291e:	f007 f9bf 	bl	8019ca0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8012922:	683b      	ldr	r3, [r7, #0]
 8012924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012926:	2b00      	cmp	r3, #0
 8012928:	d006      	beq.n	8012938 <tcp_pcb_remove+0xe0>
 801292a:	4b0e      	ldr	r3, [pc, #56]	; (8012964 <tcp_pcb_remove+0x10c>)
 801292c:	f640 0294 	movw	r2, #2196	; 0x894
 8012930:	4911      	ldr	r1, [pc, #68]	; (8012978 <tcp_pcb_remove+0x120>)
 8012932:	480e      	ldr	r0, [pc, #56]	; (801296c <tcp_pcb_remove+0x114>)
 8012934:	f007 f9b4 	bl	8019ca0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8012938:	683b      	ldr	r3, [r7, #0]
 801293a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801293c:	2b00      	cmp	r3, #0
 801293e:	d006      	beq.n	801294e <tcp_pcb_remove+0xf6>
 8012940:	4b08      	ldr	r3, [pc, #32]	; (8012964 <tcp_pcb_remove+0x10c>)
 8012942:	f640 0296 	movw	r2, #2198	; 0x896
 8012946:	490d      	ldr	r1, [pc, #52]	; (801297c <tcp_pcb_remove+0x124>)
 8012948:	4808      	ldr	r0, [pc, #32]	; (801296c <tcp_pcb_remove+0x114>)
 801294a:	f007 f9a9 	bl	8019ca0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801294e:	683b      	ldr	r3, [r7, #0]
 8012950:	2200      	movs	r2, #0
 8012952:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8012954:	683b      	ldr	r3, [r7, #0]
 8012956:	2200      	movs	r2, #0
 8012958:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801295a:	bf00      	nop
 801295c:	3710      	adds	r7, #16
 801295e:	46bd      	mov	sp, r7
 8012960:	bd80      	pop	{r7, pc}
 8012962:	bf00      	nop
 8012964:	0801d0a0 	.word	0x0801d0a0
 8012968:	0801d708 	.word	0x0801d708
 801296c:	0801d0e4 	.word	0x0801d0e4
 8012970:	0801d724 	.word	0x0801d724
 8012974:	0801d744 	.word	0x0801d744
 8012978:	0801d75c 	.word	0x0801d75c
 801297c:	0801d778 	.word	0x0801d778

08012980 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8012980:	b580      	push	{r7, lr}
 8012982:	b082      	sub	sp, #8
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	2b00      	cmp	r3, #0
 801298c:	d106      	bne.n	801299c <tcp_next_iss+0x1c>
 801298e:	4b0a      	ldr	r3, [pc, #40]	; (80129b8 <tcp_next_iss+0x38>)
 8012990:	f640 02af 	movw	r2, #2223	; 0x8af
 8012994:	4909      	ldr	r1, [pc, #36]	; (80129bc <tcp_next_iss+0x3c>)
 8012996:	480a      	ldr	r0, [pc, #40]	; (80129c0 <tcp_next_iss+0x40>)
 8012998:	f007 f982 	bl	8019ca0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801299c:	4b09      	ldr	r3, [pc, #36]	; (80129c4 <tcp_next_iss+0x44>)
 801299e:	681a      	ldr	r2, [r3, #0]
 80129a0:	4b09      	ldr	r3, [pc, #36]	; (80129c8 <tcp_next_iss+0x48>)
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	4413      	add	r3, r2
 80129a6:	4a07      	ldr	r2, [pc, #28]	; (80129c4 <tcp_next_iss+0x44>)
 80129a8:	6013      	str	r3, [r2, #0]
  return iss;
 80129aa:	4b06      	ldr	r3, [pc, #24]	; (80129c4 <tcp_next_iss+0x44>)
 80129ac:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80129ae:	4618      	mov	r0, r3
 80129b0:	3708      	adds	r7, #8
 80129b2:	46bd      	mov	sp, r7
 80129b4:	bd80      	pop	{r7, pc}
 80129b6:	bf00      	nop
 80129b8:	0801d0a0 	.word	0x0801d0a0
 80129bc:	0801d790 	.word	0x0801d790
 80129c0:	0801d0e4 	.word	0x0801d0e4
 80129c4:	2000005c 	.word	0x2000005c
 80129c8:	200070d8 	.word	0x200070d8

080129cc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80129cc:	b580      	push	{r7, lr}
 80129ce:	b086      	sub	sp, #24
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	4603      	mov	r3, r0
 80129d4:	60b9      	str	r1, [r7, #8]
 80129d6:	607a      	str	r2, [r7, #4]
 80129d8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d106      	bne.n	80129ee <tcp_eff_send_mss_netif+0x22>
 80129e0:	4b14      	ldr	r3, [pc, #80]	; (8012a34 <tcp_eff_send_mss_netif+0x68>)
 80129e2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80129e6:	4914      	ldr	r1, [pc, #80]	; (8012a38 <tcp_eff_send_mss_netif+0x6c>)
 80129e8:	4814      	ldr	r0, [pc, #80]	; (8012a3c <tcp_eff_send_mss_netif+0x70>)
 80129ea:	f007 f959 	bl	8019ca0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80129ee:	68bb      	ldr	r3, [r7, #8]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d101      	bne.n	80129f8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80129f4:	89fb      	ldrh	r3, [r7, #14]
 80129f6:	e019      	b.n	8012a2c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80129f8:	68bb      	ldr	r3, [r7, #8]
 80129fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80129fc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80129fe:	8afb      	ldrh	r3, [r7, #22]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d012      	beq.n	8012a2a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8012a04:	2328      	movs	r3, #40	; 0x28
 8012a06:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8012a08:	8afa      	ldrh	r2, [r7, #22]
 8012a0a:	8abb      	ldrh	r3, [r7, #20]
 8012a0c:	429a      	cmp	r2, r3
 8012a0e:	d904      	bls.n	8012a1a <tcp_eff_send_mss_netif+0x4e>
 8012a10:	8afa      	ldrh	r2, [r7, #22]
 8012a12:	8abb      	ldrh	r3, [r7, #20]
 8012a14:	1ad3      	subs	r3, r2, r3
 8012a16:	b29b      	uxth	r3, r3
 8012a18:	e000      	b.n	8012a1c <tcp_eff_send_mss_netif+0x50>
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8012a1e:	8a7a      	ldrh	r2, [r7, #18]
 8012a20:	89fb      	ldrh	r3, [r7, #14]
 8012a22:	4293      	cmp	r3, r2
 8012a24:	bf28      	it	cs
 8012a26:	4613      	movcs	r3, r2
 8012a28:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8012a2a:	89fb      	ldrh	r3, [r7, #14]
}
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	3718      	adds	r7, #24
 8012a30:	46bd      	mov	sp, r7
 8012a32:	bd80      	pop	{r7, pc}
 8012a34:	0801d0a0 	.word	0x0801d0a0
 8012a38:	0801d7ac 	.word	0x0801d7ac
 8012a3c:	0801d0e4 	.word	0x0801d0e4

08012a40 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8012a40:	b580      	push	{r7, lr}
 8012a42:	b084      	sub	sp, #16
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	6078      	str	r0, [r7, #4]
 8012a48:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8012a4a:	683b      	ldr	r3, [r7, #0]
 8012a4c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d119      	bne.n	8012a88 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8012a54:	4b10      	ldr	r3, [pc, #64]	; (8012a98 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8012a56:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8012a5a:	4910      	ldr	r1, [pc, #64]	; (8012a9c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8012a5c:	4810      	ldr	r0, [pc, #64]	; (8012aa0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8012a5e:	f007 f91f 	bl	8019ca0 <iprintf>

  while (pcb != NULL) {
 8012a62:	e011      	b.n	8012a88 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	681a      	ldr	r2, [r3, #0]
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	429a      	cmp	r2, r3
 8012a6e:	d108      	bne.n	8012a82 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	68db      	ldr	r3, [r3, #12]
 8012a74:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8012a76:	68f8      	ldr	r0, [r7, #12]
 8012a78:	f7fe ffc2 	bl	8011a00 <tcp_abort>
      pcb = next;
 8012a7c:	68bb      	ldr	r3, [r7, #8]
 8012a7e:	60fb      	str	r3, [r7, #12]
 8012a80:	e002      	b.n	8012a88 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	68db      	ldr	r3, [r3, #12]
 8012a86:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d1ea      	bne.n	8012a64 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8012a8e:	bf00      	nop
 8012a90:	bf00      	nop
 8012a92:	3710      	adds	r7, #16
 8012a94:	46bd      	mov	sp, r7
 8012a96:	bd80      	pop	{r7, pc}
 8012a98:	0801d0a0 	.word	0x0801d0a0
 8012a9c:	0801d7d4 	.word	0x0801d7d4
 8012aa0:	0801d0e4 	.word	0x0801d0e4

08012aa4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012aa4:	b580      	push	{r7, lr}
 8012aa6:	b084      	sub	sp, #16
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	6078      	str	r0, [r7, #4]
 8012aac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d02a      	beq.n	8012b0a <tcp_netif_ip_addr_changed+0x66>
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d026      	beq.n	8012b0a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8012abc:	4b15      	ldr	r3, [pc, #84]	; (8012b14 <tcp_netif_ip_addr_changed+0x70>)
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	4619      	mov	r1, r3
 8012ac2:	6878      	ldr	r0, [r7, #4]
 8012ac4:	f7ff ffbc 	bl	8012a40 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8012ac8:	4b13      	ldr	r3, [pc, #76]	; (8012b18 <tcp_netif_ip_addr_changed+0x74>)
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	4619      	mov	r1, r3
 8012ace:	6878      	ldr	r0, [r7, #4]
 8012ad0:	f7ff ffb6 	bl	8012a40 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8012ad4:	683b      	ldr	r3, [r7, #0]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d017      	beq.n	8012b0a <tcp_netif_ip_addr_changed+0x66>
 8012ada:	683b      	ldr	r3, [r7, #0]
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d013      	beq.n	8012b0a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012ae2:	4b0e      	ldr	r3, [pc, #56]	; (8012b1c <tcp_netif_ip_addr_changed+0x78>)
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	60fb      	str	r3, [r7, #12]
 8012ae8:	e00c      	b.n	8012b04 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	681a      	ldr	r2, [r3, #0]
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	429a      	cmp	r2, r3
 8012af4:	d103      	bne.n	8012afe <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8012af6:	683b      	ldr	r3, [r7, #0]
 8012af8:	681a      	ldr	r2, [r3, #0]
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	68db      	ldr	r3, [r3, #12]
 8012b02:	60fb      	str	r3, [r7, #12]
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d1ef      	bne.n	8012aea <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8012b0a:	bf00      	nop
 8012b0c:	3710      	adds	r7, #16
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	bd80      	pop	{r7, pc}
 8012b12:	bf00      	nop
 8012b14:	200070e4 	.word	0x200070e4
 8012b18:	200070dc 	.word	0x200070dc
 8012b1c:	200070e0 	.word	0x200070e0

08012b20 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8012b20:	b580      	push	{r7, lr}
 8012b22:	b082      	sub	sp, #8
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d007      	beq.n	8012b40 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b34:	4618      	mov	r0, r3
 8012b36:	f7ff fc3d 	bl	80123b4 <tcp_segs_free>
    pcb->ooseq = NULL;
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	2200      	movs	r2, #0
 8012b3e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8012b40:	bf00      	nop
 8012b42:	3708      	adds	r7, #8
 8012b44:	46bd      	mov	sp, r7
 8012b46:	bd80      	pop	{r7, pc}

08012b48 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8012b48:	b590      	push	{r4, r7, lr}
 8012b4a:	b08d      	sub	sp, #52	; 0x34
 8012b4c:	af04      	add	r7, sp, #16
 8012b4e:	6078      	str	r0, [r7, #4]
 8012b50:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d105      	bne.n	8012b64 <tcp_input+0x1c>
 8012b58:	4b9b      	ldr	r3, [pc, #620]	; (8012dc8 <tcp_input+0x280>)
 8012b5a:	2283      	movs	r2, #131	; 0x83
 8012b5c:	499b      	ldr	r1, [pc, #620]	; (8012dcc <tcp_input+0x284>)
 8012b5e:	489c      	ldr	r0, [pc, #624]	; (8012dd0 <tcp_input+0x288>)
 8012b60:	f007 f89e 	bl	8019ca0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	685b      	ldr	r3, [r3, #4]
 8012b68:	4a9a      	ldr	r2, [pc, #616]	; (8012dd4 <tcp_input+0x28c>)
 8012b6a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	895b      	ldrh	r3, [r3, #10]
 8012b70:	2b13      	cmp	r3, #19
 8012b72:	f240 83d1 	bls.w	8013318 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012b76:	4b98      	ldr	r3, [pc, #608]	; (8012dd8 <tcp_input+0x290>)
 8012b78:	695b      	ldr	r3, [r3, #20]
 8012b7a:	4a97      	ldr	r2, [pc, #604]	; (8012dd8 <tcp_input+0x290>)
 8012b7c:	6812      	ldr	r2, [r2, #0]
 8012b7e:	4611      	mov	r1, r2
 8012b80:	4618      	mov	r0, r3
 8012b82:	f005 fbfb 	bl	801837c <ip4_addr_isbroadcast_u32>
 8012b86:	4603      	mov	r3, r0
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	f040 83c7 	bne.w	801331c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8012b8e:	4b92      	ldr	r3, [pc, #584]	; (8012dd8 <tcp_input+0x290>)
 8012b90:	695b      	ldr	r3, [r3, #20]
 8012b92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012b96:	2be0      	cmp	r3, #224	; 0xe0
 8012b98:	f000 83c0 	beq.w	801331c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8012b9c:	4b8d      	ldr	r3, [pc, #564]	; (8012dd4 <tcp_input+0x28c>)
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	899b      	ldrh	r3, [r3, #12]
 8012ba2:	b29b      	uxth	r3, r3
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	f7fc fdbf 	bl	800f728 <lwip_htons>
 8012baa:	4603      	mov	r3, r0
 8012bac:	0b1b      	lsrs	r3, r3, #12
 8012bae:	b29b      	uxth	r3, r3
 8012bb0:	b2db      	uxtb	r3, r3
 8012bb2:	009b      	lsls	r3, r3, #2
 8012bb4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8012bb6:	7cbb      	ldrb	r3, [r7, #18]
 8012bb8:	2b13      	cmp	r3, #19
 8012bba:	f240 83b1 	bls.w	8013320 <tcp_input+0x7d8>
 8012bbe:	7cbb      	ldrb	r3, [r7, #18]
 8012bc0:	b29a      	uxth	r2, r3
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	891b      	ldrh	r3, [r3, #8]
 8012bc6:	429a      	cmp	r2, r3
 8012bc8:	f200 83aa 	bhi.w	8013320 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8012bcc:	7cbb      	ldrb	r3, [r7, #18]
 8012bce:	b29b      	uxth	r3, r3
 8012bd0:	3b14      	subs	r3, #20
 8012bd2:	b29a      	uxth	r2, r3
 8012bd4:	4b81      	ldr	r3, [pc, #516]	; (8012ddc <tcp_input+0x294>)
 8012bd6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8012bd8:	4b81      	ldr	r3, [pc, #516]	; (8012de0 <tcp_input+0x298>)
 8012bda:	2200      	movs	r2, #0
 8012bdc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	895a      	ldrh	r2, [r3, #10]
 8012be2:	7cbb      	ldrb	r3, [r7, #18]
 8012be4:	b29b      	uxth	r3, r3
 8012be6:	429a      	cmp	r2, r3
 8012be8:	d309      	bcc.n	8012bfe <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8012bea:	4b7c      	ldr	r3, [pc, #496]	; (8012ddc <tcp_input+0x294>)
 8012bec:	881a      	ldrh	r2, [r3, #0]
 8012bee:	4b7d      	ldr	r3, [pc, #500]	; (8012de4 <tcp_input+0x29c>)
 8012bf0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8012bf2:	7cbb      	ldrb	r3, [r7, #18]
 8012bf4:	4619      	mov	r1, r3
 8012bf6:	6878      	ldr	r0, [r7, #4]
 8012bf8:	f7fe f8f4 	bl	8010de4 <pbuf_remove_header>
 8012bfc:	e04e      	b.n	8012c9c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d105      	bne.n	8012c12 <tcp_input+0xca>
 8012c06:	4b70      	ldr	r3, [pc, #448]	; (8012dc8 <tcp_input+0x280>)
 8012c08:	22c2      	movs	r2, #194	; 0xc2
 8012c0a:	4977      	ldr	r1, [pc, #476]	; (8012de8 <tcp_input+0x2a0>)
 8012c0c:	4870      	ldr	r0, [pc, #448]	; (8012dd0 <tcp_input+0x288>)
 8012c0e:	f007 f847 	bl	8019ca0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8012c12:	2114      	movs	r1, #20
 8012c14:	6878      	ldr	r0, [r7, #4]
 8012c16:	f7fe f8e5 	bl	8010de4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	895a      	ldrh	r2, [r3, #10]
 8012c1e:	4b71      	ldr	r3, [pc, #452]	; (8012de4 <tcp_input+0x29c>)
 8012c20:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8012c22:	4b6e      	ldr	r3, [pc, #440]	; (8012ddc <tcp_input+0x294>)
 8012c24:	881a      	ldrh	r2, [r3, #0]
 8012c26:	4b6f      	ldr	r3, [pc, #444]	; (8012de4 <tcp_input+0x29c>)
 8012c28:	881b      	ldrh	r3, [r3, #0]
 8012c2a:	1ad3      	subs	r3, r2, r3
 8012c2c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8012c2e:	4b6d      	ldr	r3, [pc, #436]	; (8012de4 <tcp_input+0x29c>)
 8012c30:	881b      	ldrh	r3, [r3, #0]
 8012c32:	4619      	mov	r1, r3
 8012c34:	6878      	ldr	r0, [r7, #4]
 8012c36:	f7fe f8d5 	bl	8010de4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	895b      	ldrh	r3, [r3, #10]
 8012c40:	8a3a      	ldrh	r2, [r7, #16]
 8012c42:	429a      	cmp	r2, r3
 8012c44:	f200 836e 	bhi.w	8013324 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	685b      	ldr	r3, [r3, #4]
 8012c4e:	4a64      	ldr	r2, [pc, #400]	; (8012de0 <tcp_input+0x298>)
 8012c50:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	8a3a      	ldrh	r2, [r7, #16]
 8012c58:	4611      	mov	r1, r2
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	f7fe f8c2 	bl	8010de4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	891a      	ldrh	r2, [r3, #8]
 8012c64:	8a3b      	ldrh	r3, [r7, #16]
 8012c66:	1ad3      	subs	r3, r2, r3
 8012c68:	b29a      	uxth	r2, r3
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	895b      	ldrh	r3, [r3, #10]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d005      	beq.n	8012c82 <tcp_input+0x13a>
 8012c76:	4b54      	ldr	r3, [pc, #336]	; (8012dc8 <tcp_input+0x280>)
 8012c78:	22df      	movs	r2, #223	; 0xdf
 8012c7a:	495c      	ldr	r1, [pc, #368]	; (8012dec <tcp_input+0x2a4>)
 8012c7c:	4854      	ldr	r0, [pc, #336]	; (8012dd0 <tcp_input+0x288>)
 8012c7e:	f007 f80f 	bl	8019ca0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	891a      	ldrh	r2, [r3, #8]
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	891b      	ldrh	r3, [r3, #8]
 8012c8c:	429a      	cmp	r2, r3
 8012c8e:	d005      	beq.n	8012c9c <tcp_input+0x154>
 8012c90:	4b4d      	ldr	r3, [pc, #308]	; (8012dc8 <tcp_input+0x280>)
 8012c92:	22e0      	movs	r2, #224	; 0xe0
 8012c94:	4956      	ldr	r1, [pc, #344]	; (8012df0 <tcp_input+0x2a8>)
 8012c96:	484e      	ldr	r0, [pc, #312]	; (8012dd0 <tcp_input+0x288>)
 8012c98:	f007 f802 	bl	8019ca0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8012c9c:	4b4d      	ldr	r3, [pc, #308]	; (8012dd4 <tcp_input+0x28c>)
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	881b      	ldrh	r3, [r3, #0]
 8012ca2:	b29b      	uxth	r3, r3
 8012ca4:	4a4b      	ldr	r2, [pc, #300]	; (8012dd4 <tcp_input+0x28c>)
 8012ca6:	6814      	ldr	r4, [r2, #0]
 8012ca8:	4618      	mov	r0, r3
 8012caa:	f7fc fd3d 	bl	800f728 <lwip_htons>
 8012cae:	4603      	mov	r3, r0
 8012cb0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8012cb2:	4b48      	ldr	r3, [pc, #288]	; (8012dd4 <tcp_input+0x28c>)
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	885b      	ldrh	r3, [r3, #2]
 8012cb8:	b29b      	uxth	r3, r3
 8012cba:	4a46      	ldr	r2, [pc, #280]	; (8012dd4 <tcp_input+0x28c>)
 8012cbc:	6814      	ldr	r4, [r2, #0]
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	f7fc fd32 	bl	800f728 <lwip_htons>
 8012cc4:	4603      	mov	r3, r0
 8012cc6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8012cc8:	4b42      	ldr	r3, [pc, #264]	; (8012dd4 <tcp_input+0x28c>)
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	685b      	ldr	r3, [r3, #4]
 8012cce:	4a41      	ldr	r2, [pc, #260]	; (8012dd4 <tcp_input+0x28c>)
 8012cd0:	6814      	ldr	r4, [r2, #0]
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	f7fc fd3d 	bl	800f752 <lwip_htonl>
 8012cd8:	4603      	mov	r3, r0
 8012cda:	6063      	str	r3, [r4, #4]
 8012cdc:	6863      	ldr	r3, [r4, #4]
 8012cde:	4a45      	ldr	r2, [pc, #276]	; (8012df4 <tcp_input+0x2ac>)
 8012ce0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8012ce2:	4b3c      	ldr	r3, [pc, #240]	; (8012dd4 <tcp_input+0x28c>)
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	689b      	ldr	r3, [r3, #8]
 8012ce8:	4a3a      	ldr	r2, [pc, #232]	; (8012dd4 <tcp_input+0x28c>)
 8012cea:	6814      	ldr	r4, [r2, #0]
 8012cec:	4618      	mov	r0, r3
 8012cee:	f7fc fd30 	bl	800f752 <lwip_htonl>
 8012cf2:	4603      	mov	r3, r0
 8012cf4:	60a3      	str	r3, [r4, #8]
 8012cf6:	68a3      	ldr	r3, [r4, #8]
 8012cf8:	4a3f      	ldr	r2, [pc, #252]	; (8012df8 <tcp_input+0x2b0>)
 8012cfa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8012cfc:	4b35      	ldr	r3, [pc, #212]	; (8012dd4 <tcp_input+0x28c>)
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	89db      	ldrh	r3, [r3, #14]
 8012d02:	b29b      	uxth	r3, r3
 8012d04:	4a33      	ldr	r2, [pc, #204]	; (8012dd4 <tcp_input+0x28c>)
 8012d06:	6814      	ldr	r4, [r2, #0]
 8012d08:	4618      	mov	r0, r3
 8012d0a:	f7fc fd0d 	bl	800f728 <lwip_htons>
 8012d0e:	4603      	mov	r3, r0
 8012d10:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8012d12:	4b30      	ldr	r3, [pc, #192]	; (8012dd4 <tcp_input+0x28c>)
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	899b      	ldrh	r3, [r3, #12]
 8012d18:	b29b      	uxth	r3, r3
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	f7fc fd04 	bl	800f728 <lwip_htons>
 8012d20:	4603      	mov	r3, r0
 8012d22:	b2db      	uxtb	r3, r3
 8012d24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012d28:	b2da      	uxtb	r2, r3
 8012d2a:	4b34      	ldr	r3, [pc, #208]	; (8012dfc <tcp_input+0x2b4>)
 8012d2c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	891a      	ldrh	r2, [r3, #8]
 8012d32:	4b33      	ldr	r3, [pc, #204]	; (8012e00 <tcp_input+0x2b8>)
 8012d34:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8012d36:	4b31      	ldr	r3, [pc, #196]	; (8012dfc <tcp_input+0x2b4>)
 8012d38:	781b      	ldrb	r3, [r3, #0]
 8012d3a:	f003 0303 	and.w	r3, r3, #3
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d00c      	beq.n	8012d5c <tcp_input+0x214>
    tcplen++;
 8012d42:	4b2f      	ldr	r3, [pc, #188]	; (8012e00 <tcp_input+0x2b8>)
 8012d44:	881b      	ldrh	r3, [r3, #0]
 8012d46:	3301      	adds	r3, #1
 8012d48:	b29a      	uxth	r2, r3
 8012d4a:	4b2d      	ldr	r3, [pc, #180]	; (8012e00 <tcp_input+0x2b8>)
 8012d4c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	891a      	ldrh	r2, [r3, #8]
 8012d52:	4b2b      	ldr	r3, [pc, #172]	; (8012e00 <tcp_input+0x2b8>)
 8012d54:	881b      	ldrh	r3, [r3, #0]
 8012d56:	429a      	cmp	r2, r3
 8012d58:	f200 82e6 	bhi.w	8013328 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012d5c:	2300      	movs	r3, #0
 8012d5e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d60:	4b28      	ldr	r3, [pc, #160]	; (8012e04 <tcp_input+0x2bc>)
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	61fb      	str	r3, [r7, #28]
 8012d66:	e09d      	b.n	8012ea4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012d68:	69fb      	ldr	r3, [r7, #28]
 8012d6a:	7d1b      	ldrb	r3, [r3, #20]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d105      	bne.n	8012d7c <tcp_input+0x234>
 8012d70:	4b15      	ldr	r3, [pc, #84]	; (8012dc8 <tcp_input+0x280>)
 8012d72:	22fb      	movs	r2, #251	; 0xfb
 8012d74:	4924      	ldr	r1, [pc, #144]	; (8012e08 <tcp_input+0x2c0>)
 8012d76:	4816      	ldr	r0, [pc, #88]	; (8012dd0 <tcp_input+0x288>)
 8012d78:	f006 ff92 	bl	8019ca0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012d7c:	69fb      	ldr	r3, [r7, #28]
 8012d7e:	7d1b      	ldrb	r3, [r3, #20]
 8012d80:	2b0a      	cmp	r3, #10
 8012d82:	d105      	bne.n	8012d90 <tcp_input+0x248>
 8012d84:	4b10      	ldr	r3, [pc, #64]	; (8012dc8 <tcp_input+0x280>)
 8012d86:	22fc      	movs	r2, #252	; 0xfc
 8012d88:	4920      	ldr	r1, [pc, #128]	; (8012e0c <tcp_input+0x2c4>)
 8012d8a:	4811      	ldr	r0, [pc, #68]	; (8012dd0 <tcp_input+0x288>)
 8012d8c:	f006 ff88 	bl	8019ca0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012d90:	69fb      	ldr	r3, [r7, #28]
 8012d92:	7d1b      	ldrb	r3, [r3, #20]
 8012d94:	2b01      	cmp	r3, #1
 8012d96:	d105      	bne.n	8012da4 <tcp_input+0x25c>
 8012d98:	4b0b      	ldr	r3, [pc, #44]	; (8012dc8 <tcp_input+0x280>)
 8012d9a:	22fd      	movs	r2, #253	; 0xfd
 8012d9c:	491c      	ldr	r1, [pc, #112]	; (8012e10 <tcp_input+0x2c8>)
 8012d9e:	480c      	ldr	r0, [pc, #48]	; (8012dd0 <tcp_input+0x288>)
 8012da0:	f006 ff7e 	bl	8019ca0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012da4:	69fb      	ldr	r3, [r7, #28]
 8012da6:	7a1b      	ldrb	r3, [r3, #8]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d033      	beq.n	8012e14 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012dac:	69fb      	ldr	r3, [r7, #28]
 8012dae:	7a1a      	ldrb	r2, [r3, #8]
 8012db0:	4b09      	ldr	r3, [pc, #36]	; (8012dd8 <tcp_input+0x290>)
 8012db2:	685b      	ldr	r3, [r3, #4]
 8012db4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012db8:	3301      	adds	r3, #1
 8012dba:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012dbc:	429a      	cmp	r2, r3
 8012dbe:	d029      	beq.n	8012e14 <tcp_input+0x2cc>
      prev = pcb;
 8012dc0:	69fb      	ldr	r3, [r7, #28]
 8012dc2:	61bb      	str	r3, [r7, #24]
      continue;
 8012dc4:	e06b      	b.n	8012e9e <tcp_input+0x356>
 8012dc6:	bf00      	nop
 8012dc8:	0801d808 	.word	0x0801d808
 8012dcc:	0801d83c 	.word	0x0801d83c
 8012dd0:	0801d854 	.word	0x0801d854
 8012dd4:	20007100 	.word	0x20007100
 8012dd8:	200007fc 	.word	0x200007fc
 8012ddc:	20007104 	.word	0x20007104
 8012de0:	20007108 	.word	0x20007108
 8012de4:	20007106 	.word	0x20007106
 8012de8:	0801d87c 	.word	0x0801d87c
 8012dec:	0801d88c 	.word	0x0801d88c
 8012df0:	0801d898 	.word	0x0801d898
 8012df4:	20007110 	.word	0x20007110
 8012df8:	20007114 	.word	0x20007114
 8012dfc:	2000711c 	.word	0x2000711c
 8012e00:	2000711a 	.word	0x2000711a
 8012e04:	200070e4 	.word	0x200070e4
 8012e08:	0801d8b8 	.word	0x0801d8b8
 8012e0c:	0801d8e0 	.word	0x0801d8e0
 8012e10:	0801d90c 	.word	0x0801d90c
    }

    if (pcb->remote_port == tcphdr->src &&
 8012e14:	69fb      	ldr	r3, [r7, #28]
 8012e16:	8b1a      	ldrh	r2, [r3, #24]
 8012e18:	4b72      	ldr	r3, [pc, #456]	; (8012fe4 <tcp_input+0x49c>)
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	881b      	ldrh	r3, [r3, #0]
 8012e1e:	b29b      	uxth	r3, r3
 8012e20:	429a      	cmp	r2, r3
 8012e22:	d13a      	bne.n	8012e9a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8012e24:	69fb      	ldr	r3, [r7, #28]
 8012e26:	8ada      	ldrh	r2, [r3, #22]
 8012e28:	4b6e      	ldr	r3, [pc, #440]	; (8012fe4 <tcp_input+0x49c>)
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	885b      	ldrh	r3, [r3, #2]
 8012e2e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012e30:	429a      	cmp	r2, r3
 8012e32:	d132      	bne.n	8012e9a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012e34:	69fb      	ldr	r3, [r7, #28]
 8012e36:	685a      	ldr	r2, [r3, #4]
 8012e38:	4b6b      	ldr	r3, [pc, #428]	; (8012fe8 <tcp_input+0x4a0>)
 8012e3a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012e3c:	429a      	cmp	r2, r3
 8012e3e:	d12c      	bne.n	8012e9a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012e40:	69fb      	ldr	r3, [r7, #28]
 8012e42:	681a      	ldr	r2, [r3, #0]
 8012e44:	4b68      	ldr	r3, [pc, #416]	; (8012fe8 <tcp_input+0x4a0>)
 8012e46:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012e48:	429a      	cmp	r2, r3
 8012e4a:	d126      	bne.n	8012e9a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012e4c:	69fb      	ldr	r3, [r7, #28]
 8012e4e:	68db      	ldr	r3, [r3, #12]
 8012e50:	69fa      	ldr	r2, [r7, #28]
 8012e52:	429a      	cmp	r2, r3
 8012e54:	d106      	bne.n	8012e64 <tcp_input+0x31c>
 8012e56:	4b65      	ldr	r3, [pc, #404]	; (8012fec <tcp_input+0x4a4>)
 8012e58:	f240 120d 	movw	r2, #269	; 0x10d
 8012e5c:	4964      	ldr	r1, [pc, #400]	; (8012ff0 <tcp_input+0x4a8>)
 8012e5e:	4865      	ldr	r0, [pc, #404]	; (8012ff4 <tcp_input+0x4ac>)
 8012e60:	f006 ff1e 	bl	8019ca0 <iprintf>
      if (prev != NULL) {
 8012e64:	69bb      	ldr	r3, [r7, #24]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d00a      	beq.n	8012e80 <tcp_input+0x338>
        prev->next = pcb->next;
 8012e6a:	69fb      	ldr	r3, [r7, #28]
 8012e6c:	68da      	ldr	r2, [r3, #12]
 8012e6e:	69bb      	ldr	r3, [r7, #24]
 8012e70:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012e72:	4b61      	ldr	r3, [pc, #388]	; (8012ff8 <tcp_input+0x4b0>)
 8012e74:	681a      	ldr	r2, [r3, #0]
 8012e76:	69fb      	ldr	r3, [r7, #28]
 8012e78:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8012e7a:	4a5f      	ldr	r2, [pc, #380]	; (8012ff8 <tcp_input+0x4b0>)
 8012e7c:	69fb      	ldr	r3, [r7, #28]
 8012e7e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012e80:	69fb      	ldr	r3, [r7, #28]
 8012e82:	68db      	ldr	r3, [r3, #12]
 8012e84:	69fa      	ldr	r2, [r7, #28]
 8012e86:	429a      	cmp	r2, r3
 8012e88:	d111      	bne.n	8012eae <tcp_input+0x366>
 8012e8a:	4b58      	ldr	r3, [pc, #352]	; (8012fec <tcp_input+0x4a4>)
 8012e8c:	f240 1215 	movw	r2, #277	; 0x115
 8012e90:	495a      	ldr	r1, [pc, #360]	; (8012ffc <tcp_input+0x4b4>)
 8012e92:	4858      	ldr	r0, [pc, #352]	; (8012ff4 <tcp_input+0x4ac>)
 8012e94:	f006 ff04 	bl	8019ca0 <iprintf>
      break;
 8012e98:	e009      	b.n	8012eae <tcp_input+0x366>
    }
    prev = pcb;
 8012e9a:	69fb      	ldr	r3, [r7, #28]
 8012e9c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012e9e:	69fb      	ldr	r3, [r7, #28]
 8012ea0:	68db      	ldr	r3, [r3, #12]
 8012ea2:	61fb      	str	r3, [r7, #28]
 8012ea4:	69fb      	ldr	r3, [r7, #28]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	f47f af5e 	bne.w	8012d68 <tcp_input+0x220>
 8012eac:	e000      	b.n	8012eb0 <tcp_input+0x368>
      break;
 8012eae:	bf00      	nop
  }

  if (pcb == NULL) {
 8012eb0:	69fb      	ldr	r3, [r7, #28]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	f040 80aa 	bne.w	801300c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012eb8:	4b51      	ldr	r3, [pc, #324]	; (8013000 <tcp_input+0x4b8>)
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	61fb      	str	r3, [r7, #28]
 8012ebe:	e03f      	b.n	8012f40 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012ec0:	69fb      	ldr	r3, [r7, #28]
 8012ec2:	7d1b      	ldrb	r3, [r3, #20]
 8012ec4:	2b0a      	cmp	r3, #10
 8012ec6:	d006      	beq.n	8012ed6 <tcp_input+0x38e>
 8012ec8:	4b48      	ldr	r3, [pc, #288]	; (8012fec <tcp_input+0x4a4>)
 8012eca:	f240 121f 	movw	r2, #287	; 0x11f
 8012ece:	494d      	ldr	r1, [pc, #308]	; (8013004 <tcp_input+0x4bc>)
 8012ed0:	4848      	ldr	r0, [pc, #288]	; (8012ff4 <tcp_input+0x4ac>)
 8012ed2:	f006 fee5 	bl	8019ca0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012ed6:	69fb      	ldr	r3, [r7, #28]
 8012ed8:	7a1b      	ldrb	r3, [r3, #8]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d009      	beq.n	8012ef2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012ede:	69fb      	ldr	r3, [r7, #28]
 8012ee0:	7a1a      	ldrb	r2, [r3, #8]
 8012ee2:	4b41      	ldr	r3, [pc, #260]	; (8012fe8 <tcp_input+0x4a0>)
 8012ee4:	685b      	ldr	r3, [r3, #4]
 8012ee6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012eea:	3301      	adds	r3, #1
 8012eec:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012eee:	429a      	cmp	r2, r3
 8012ef0:	d122      	bne.n	8012f38 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8012ef2:	69fb      	ldr	r3, [r7, #28]
 8012ef4:	8b1a      	ldrh	r2, [r3, #24]
 8012ef6:	4b3b      	ldr	r3, [pc, #236]	; (8012fe4 <tcp_input+0x49c>)
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	881b      	ldrh	r3, [r3, #0]
 8012efc:	b29b      	uxth	r3, r3
 8012efe:	429a      	cmp	r2, r3
 8012f00:	d11b      	bne.n	8012f3a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8012f02:	69fb      	ldr	r3, [r7, #28]
 8012f04:	8ada      	ldrh	r2, [r3, #22]
 8012f06:	4b37      	ldr	r3, [pc, #220]	; (8012fe4 <tcp_input+0x49c>)
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	885b      	ldrh	r3, [r3, #2]
 8012f0c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8012f0e:	429a      	cmp	r2, r3
 8012f10:	d113      	bne.n	8012f3a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012f12:	69fb      	ldr	r3, [r7, #28]
 8012f14:	685a      	ldr	r2, [r3, #4]
 8012f16:	4b34      	ldr	r3, [pc, #208]	; (8012fe8 <tcp_input+0x4a0>)
 8012f18:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8012f1a:	429a      	cmp	r2, r3
 8012f1c:	d10d      	bne.n	8012f3a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012f1e:	69fb      	ldr	r3, [r7, #28]
 8012f20:	681a      	ldr	r2, [r3, #0]
 8012f22:	4b31      	ldr	r3, [pc, #196]	; (8012fe8 <tcp_input+0x4a0>)
 8012f24:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012f26:	429a      	cmp	r2, r3
 8012f28:	d107      	bne.n	8012f3a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8012f2a:	69f8      	ldr	r0, [r7, #28]
 8012f2c:	f000 fb56 	bl	80135dc <tcp_timewait_input>
        }
        pbuf_free(p);
 8012f30:	6878      	ldr	r0, [r7, #4]
 8012f32:	f7fd ffdd 	bl	8010ef0 <pbuf_free>
        return;
 8012f36:	e1fd      	b.n	8013334 <tcp_input+0x7ec>
        continue;
 8012f38:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f3a:	69fb      	ldr	r3, [r7, #28]
 8012f3c:	68db      	ldr	r3, [r3, #12]
 8012f3e:	61fb      	str	r3, [r7, #28]
 8012f40:	69fb      	ldr	r3, [r7, #28]
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d1bc      	bne.n	8012ec0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8012f46:	2300      	movs	r3, #0
 8012f48:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012f4a:	4b2f      	ldr	r3, [pc, #188]	; (8013008 <tcp_input+0x4c0>)
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	617b      	str	r3, [r7, #20]
 8012f50:	e02a      	b.n	8012fa8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012f52:	697b      	ldr	r3, [r7, #20]
 8012f54:	7a1b      	ldrb	r3, [r3, #8]
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d00c      	beq.n	8012f74 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012f5a:	697b      	ldr	r3, [r7, #20]
 8012f5c:	7a1a      	ldrb	r2, [r3, #8]
 8012f5e:	4b22      	ldr	r3, [pc, #136]	; (8012fe8 <tcp_input+0x4a0>)
 8012f60:	685b      	ldr	r3, [r3, #4]
 8012f62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012f66:	3301      	adds	r3, #1
 8012f68:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012f6a:	429a      	cmp	r2, r3
 8012f6c:	d002      	beq.n	8012f74 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8012f6e:	697b      	ldr	r3, [r7, #20]
 8012f70:	61bb      	str	r3, [r7, #24]
        continue;
 8012f72:	e016      	b.n	8012fa2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8012f74:	697b      	ldr	r3, [r7, #20]
 8012f76:	8ada      	ldrh	r2, [r3, #22]
 8012f78:	4b1a      	ldr	r3, [pc, #104]	; (8012fe4 <tcp_input+0x49c>)
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	885b      	ldrh	r3, [r3, #2]
 8012f7e:	b29b      	uxth	r3, r3
 8012f80:	429a      	cmp	r2, r3
 8012f82:	d10c      	bne.n	8012f9e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012f84:	697b      	ldr	r3, [r7, #20]
 8012f86:	681a      	ldr	r2, [r3, #0]
 8012f88:	4b17      	ldr	r3, [pc, #92]	; (8012fe8 <tcp_input+0x4a0>)
 8012f8a:	695b      	ldr	r3, [r3, #20]
 8012f8c:	429a      	cmp	r2, r3
 8012f8e:	d00f      	beq.n	8012fb0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012f90:	697b      	ldr	r3, [r7, #20]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d00d      	beq.n	8012fb2 <tcp_input+0x46a>
 8012f96:	697b      	ldr	r3, [r7, #20]
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d009      	beq.n	8012fb2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8012f9e:	697b      	ldr	r3, [r7, #20]
 8012fa0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012fa2:	697b      	ldr	r3, [r7, #20]
 8012fa4:	68db      	ldr	r3, [r3, #12]
 8012fa6:	617b      	str	r3, [r7, #20]
 8012fa8:	697b      	ldr	r3, [r7, #20]
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d1d1      	bne.n	8012f52 <tcp_input+0x40a>
 8012fae:	e000      	b.n	8012fb2 <tcp_input+0x46a>
            break;
 8012fb0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8012fb2:	697b      	ldr	r3, [r7, #20]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d029      	beq.n	801300c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8012fb8:	69bb      	ldr	r3, [r7, #24]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d00a      	beq.n	8012fd4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8012fbe:	697b      	ldr	r3, [r7, #20]
 8012fc0:	68da      	ldr	r2, [r3, #12]
 8012fc2:	69bb      	ldr	r3, [r7, #24]
 8012fc4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8012fc6:	4b10      	ldr	r3, [pc, #64]	; (8013008 <tcp_input+0x4c0>)
 8012fc8:	681a      	ldr	r2, [r3, #0]
 8012fca:	697b      	ldr	r3, [r7, #20]
 8012fcc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8012fce:	4a0e      	ldr	r2, [pc, #56]	; (8013008 <tcp_input+0x4c0>)
 8012fd0:	697b      	ldr	r3, [r7, #20]
 8012fd2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8012fd4:	6978      	ldr	r0, [r7, #20]
 8012fd6:	f000 fa03 	bl	80133e0 <tcp_listen_input>
      }
      pbuf_free(p);
 8012fda:	6878      	ldr	r0, [r7, #4]
 8012fdc:	f7fd ff88 	bl	8010ef0 <pbuf_free>
      return;
 8012fe0:	e1a8      	b.n	8013334 <tcp_input+0x7ec>
 8012fe2:	bf00      	nop
 8012fe4:	20007100 	.word	0x20007100
 8012fe8:	200007fc 	.word	0x200007fc
 8012fec:	0801d808 	.word	0x0801d808
 8012ff0:	0801d934 	.word	0x0801d934
 8012ff4:	0801d854 	.word	0x0801d854
 8012ff8:	200070e4 	.word	0x200070e4
 8012ffc:	0801d960 	.word	0x0801d960
 8013000:	200070e8 	.word	0x200070e8
 8013004:	0801d98c 	.word	0x0801d98c
 8013008:	200070e0 	.word	0x200070e0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801300c:	69fb      	ldr	r3, [r7, #28]
 801300e:	2b00      	cmp	r3, #0
 8013010:	f000 8158 	beq.w	80132c4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8013014:	4b95      	ldr	r3, [pc, #596]	; (801326c <tcp_input+0x724>)
 8013016:	2200      	movs	r2, #0
 8013018:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	891a      	ldrh	r2, [r3, #8]
 801301e:	4b93      	ldr	r3, [pc, #588]	; (801326c <tcp_input+0x724>)
 8013020:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8013022:	4a92      	ldr	r2, [pc, #584]	; (801326c <tcp_input+0x724>)
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8013028:	4b91      	ldr	r3, [pc, #580]	; (8013270 <tcp_input+0x728>)
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	4a8f      	ldr	r2, [pc, #572]	; (801326c <tcp_input+0x724>)
 801302e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8013030:	4b90      	ldr	r3, [pc, #576]	; (8013274 <tcp_input+0x72c>)
 8013032:	2200      	movs	r2, #0
 8013034:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8013036:	4b90      	ldr	r3, [pc, #576]	; (8013278 <tcp_input+0x730>)
 8013038:	2200      	movs	r2, #0
 801303a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801303c:	4b8f      	ldr	r3, [pc, #572]	; (801327c <tcp_input+0x734>)
 801303e:	2200      	movs	r2, #0
 8013040:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8013042:	4b8f      	ldr	r3, [pc, #572]	; (8013280 <tcp_input+0x738>)
 8013044:	781b      	ldrb	r3, [r3, #0]
 8013046:	f003 0308 	and.w	r3, r3, #8
 801304a:	2b00      	cmp	r3, #0
 801304c:	d006      	beq.n	801305c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	7b5b      	ldrb	r3, [r3, #13]
 8013052:	f043 0301 	orr.w	r3, r3, #1
 8013056:	b2da      	uxtb	r2, r3
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801305c:	69fb      	ldr	r3, [r7, #28]
 801305e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013060:	2b00      	cmp	r3, #0
 8013062:	d017      	beq.n	8013094 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013064:	69f8      	ldr	r0, [r7, #28]
 8013066:	f7ff f927 	bl	80122b8 <tcp_process_refused_data>
 801306a:	4603      	mov	r3, r0
 801306c:	f113 0f0d 	cmn.w	r3, #13
 8013070:	d007      	beq.n	8013082 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013072:	69fb      	ldr	r3, [r7, #28]
 8013074:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013076:	2b00      	cmp	r3, #0
 8013078:	d00c      	beq.n	8013094 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801307a:	4b82      	ldr	r3, [pc, #520]	; (8013284 <tcp_input+0x73c>)
 801307c:	881b      	ldrh	r3, [r3, #0]
 801307e:	2b00      	cmp	r3, #0
 8013080:	d008      	beq.n	8013094 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8013082:	69fb      	ldr	r3, [r7, #28]
 8013084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013086:	2b00      	cmp	r3, #0
 8013088:	f040 80e4 	bne.w	8013254 <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801308c:	69f8      	ldr	r0, [r7, #28]
 801308e:	f003 f9ad 	bl	80163ec <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8013092:	e0df      	b.n	8013254 <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 8013094:	4a7c      	ldr	r2, [pc, #496]	; (8013288 <tcp_input+0x740>)
 8013096:	69fb      	ldr	r3, [r7, #28]
 8013098:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801309a:	69f8      	ldr	r0, [r7, #28]
 801309c:	f000 fb18 	bl	80136d0 <tcp_process>
 80130a0:	4603      	mov	r3, r0
 80130a2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80130a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80130a8:	f113 0f0d 	cmn.w	r3, #13
 80130ac:	f000 80d4 	beq.w	8013258 <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 80130b0:	4b71      	ldr	r3, [pc, #452]	; (8013278 <tcp_input+0x730>)
 80130b2:	781b      	ldrb	r3, [r3, #0]
 80130b4:	f003 0308 	and.w	r3, r3, #8
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d015      	beq.n	80130e8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80130bc:	69fb      	ldr	r3, [r7, #28]
 80130be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d008      	beq.n	80130d8 <tcp_input+0x590>
 80130c6:	69fb      	ldr	r3, [r7, #28]
 80130c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80130cc:	69fa      	ldr	r2, [r7, #28]
 80130ce:	6912      	ldr	r2, [r2, #16]
 80130d0:	f06f 010d 	mvn.w	r1, #13
 80130d4:	4610      	mov	r0, r2
 80130d6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80130d8:	69f9      	ldr	r1, [r7, #28]
 80130da:	486c      	ldr	r0, [pc, #432]	; (801328c <tcp_input+0x744>)
 80130dc:	f7ff fbbc 	bl	8012858 <tcp_pcb_remove>
        tcp_free(pcb);
 80130e0:	69f8      	ldr	r0, [r7, #28]
 80130e2:	f7fe f9a5 	bl	8011430 <tcp_free>
 80130e6:	e0da      	b.n	801329e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80130e8:	2300      	movs	r3, #0
 80130ea:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80130ec:	4b63      	ldr	r3, [pc, #396]	; (801327c <tcp_input+0x734>)
 80130ee:	881b      	ldrh	r3, [r3, #0]
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d01d      	beq.n	8013130 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80130f4:	4b61      	ldr	r3, [pc, #388]	; (801327c <tcp_input+0x734>)
 80130f6:	881b      	ldrh	r3, [r3, #0]
 80130f8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80130fa:	69fb      	ldr	r3, [r7, #28]
 80130fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013100:	2b00      	cmp	r3, #0
 8013102:	d00a      	beq.n	801311a <tcp_input+0x5d2>
 8013104:	69fb      	ldr	r3, [r7, #28]
 8013106:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801310a:	69fa      	ldr	r2, [r7, #28]
 801310c:	6910      	ldr	r0, [r2, #16]
 801310e:	89fa      	ldrh	r2, [r7, #14]
 8013110:	69f9      	ldr	r1, [r7, #28]
 8013112:	4798      	blx	r3
 8013114:	4603      	mov	r3, r0
 8013116:	74fb      	strb	r3, [r7, #19]
 8013118:	e001      	b.n	801311e <tcp_input+0x5d6>
 801311a:	2300      	movs	r3, #0
 801311c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801311e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013122:	f113 0f0d 	cmn.w	r3, #13
 8013126:	f000 8099 	beq.w	801325c <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 801312a:	4b54      	ldr	r3, [pc, #336]	; (801327c <tcp_input+0x734>)
 801312c:	2200      	movs	r2, #0
 801312e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8013130:	69f8      	ldr	r0, [r7, #28]
 8013132:	f000 f915 	bl	8013360 <tcp_input_delayed_close>
 8013136:	4603      	mov	r3, r0
 8013138:	2b00      	cmp	r3, #0
 801313a:	f040 8091 	bne.w	8013260 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801313e:	4b4d      	ldr	r3, [pc, #308]	; (8013274 <tcp_input+0x72c>)
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	2b00      	cmp	r3, #0
 8013144:	d041      	beq.n	80131ca <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8013146:	69fb      	ldr	r3, [r7, #28]
 8013148:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801314a:	2b00      	cmp	r3, #0
 801314c:	d006      	beq.n	801315c <tcp_input+0x614>
 801314e:	4b50      	ldr	r3, [pc, #320]	; (8013290 <tcp_input+0x748>)
 8013150:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013154:	494f      	ldr	r1, [pc, #316]	; (8013294 <tcp_input+0x74c>)
 8013156:	4850      	ldr	r0, [pc, #320]	; (8013298 <tcp_input+0x750>)
 8013158:	f006 fda2 	bl	8019ca0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801315c:	69fb      	ldr	r3, [r7, #28]
 801315e:	8b5b      	ldrh	r3, [r3, #26]
 8013160:	f003 0310 	and.w	r3, r3, #16
 8013164:	2b00      	cmp	r3, #0
 8013166:	d008      	beq.n	801317a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8013168:	4b42      	ldr	r3, [pc, #264]	; (8013274 <tcp_input+0x72c>)
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	4618      	mov	r0, r3
 801316e:	f7fd febf 	bl	8010ef0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8013172:	69f8      	ldr	r0, [r7, #28]
 8013174:	f7fe fc44 	bl	8011a00 <tcp_abort>
            goto aborted;
 8013178:	e091      	b.n	801329e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801317a:	69fb      	ldr	r3, [r7, #28]
 801317c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013180:	2b00      	cmp	r3, #0
 8013182:	d00c      	beq.n	801319e <tcp_input+0x656>
 8013184:	69fb      	ldr	r3, [r7, #28]
 8013186:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801318a:	69fb      	ldr	r3, [r7, #28]
 801318c:	6918      	ldr	r0, [r3, #16]
 801318e:	4b39      	ldr	r3, [pc, #228]	; (8013274 <tcp_input+0x72c>)
 8013190:	681a      	ldr	r2, [r3, #0]
 8013192:	2300      	movs	r3, #0
 8013194:	69f9      	ldr	r1, [r7, #28]
 8013196:	47a0      	blx	r4
 8013198:	4603      	mov	r3, r0
 801319a:	74fb      	strb	r3, [r7, #19]
 801319c:	e008      	b.n	80131b0 <tcp_input+0x668>
 801319e:	4b35      	ldr	r3, [pc, #212]	; (8013274 <tcp_input+0x72c>)
 80131a0:	681a      	ldr	r2, [r3, #0]
 80131a2:	2300      	movs	r3, #0
 80131a4:	69f9      	ldr	r1, [r7, #28]
 80131a6:	2000      	movs	r0, #0
 80131a8:	f7ff f95e 	bl	8012468 <tcp_recv_null>
 80131ac:	4603      	mov	r3, r0
 80131ae:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80131b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80131b4:	f113 0f0d 	cmn.w	r3, #13
 80131b8:	d054      	beq.n	8013264 <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80131ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d003      	beq.n	80131ca <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80131c2:	4b2c      	ldr	r3, [pc, #176]	; (8013274 <tcp_input+0x72c>)
 80131c4:	681a      	ldr	r2, [r3, #0]
 80131c6:	69fb      	ldr	r3, [r7, #28]
 80131c8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80131ca:	4b2b      	ldr	r3, [pc, #172]	; (8013278 <tcp_input+0x730>)
 80131cc:	781b      	ldrb	r3, [r3, #0]
 80131ce:	f003 0320 	and.w	r3, r3, #32
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d031      	beq.n	801323a <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 80131d6:	69fb      	ldr	r3, [r7, #28]
 80131d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d009      	beq.n	80131f2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80131de:	69fb      	ldr	r3, [r7, #28]
 80131e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80131e2:	7b5a      	ldrb	r2, [r3, #13]
 80131e4:	69fb      	ldr	r3, [r7, #28]
 80131e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80131e8:	f042 0220 	orr.w	r2, r2, #32
 80131ec:	b2d2      	uxtb	r2, r2
 80131ee:	735a      	strb	r2, [r3, #13]
 80131f0:	e023      	b.n	801323a <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80131f2:	69fb      	ldr	r3, [r7, #28]
 80131f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80131f6:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80131fa:	4293      	cmp	r3, r2
 80131fc:	d005      	beq.n	801320a <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 80131fe:	69fb      	ldr	r3, [r7, #28]
 8013200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013202:	3301      	adds	r3, #1
 8013204:	b29a      	uxth	r2, r3
 8013206:	69fb      	ldr	r3, [r7, #28]
 8013208:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801320a:	69fb      	ldr	r3, [r7, #28]
 801320c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013210:	2b00      	cmp	r3, #0
 8013212:	d00b      	beq.n	801322c <tcp_input+0x6e4>
 8013214:	69fb      	ldr	r3, [r7, #28]
 8013216:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801321a:	69fb      	ldr	r3, [r7, #28]
 801321c:	6918      	ldr	r0, [r3, #16]
 801321e:	2300      	movs	r3, #0
 8013220:	2200      	movs	r2, #0
 8013222:	69f9      	ldr	r1, [r7, #28]
 8013224:	47a0      	blx	r4
 8013226:	4603      	mov	r3, r0
 8013228:	74fb      	strb	r3, [r7, #19]
 801322a:	e001      	b.n	8013230 <tcp_input+0x6e8>
 801322c:	2300      	movs	r3, #0
 801322e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013230:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013234:	f113 0f0d 	cmn.w	r3, #13
 8013238:	d016      	beq.n	8013268 <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801323a:	4b13      	ldr	r3, [pc, #76]	; (8013288 <tcp_input+0x740>)
 801323c:	2200      	movs	r2, #0
 801323e:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8013240:	69f8      	ldr	r0, [r7, #28]
 8013242:	f000 f88d 	bl	8013360 <tcp_input_delayed_close>
 8013246:	4603      	mov	r3, r0
 8013248:	2b00      	cmp	r3, #0
 801324a:	d127      	bne.n	801329c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801324c:	69f8      	ldr	r0, [r7, #28]
 801324e:	f002 fac7 	bl	80157e0 <tcp_output>
 8013252:	e024      	b.n	801329e <tcp_input+0x756>
        goto aborted;
 8013254:	bf00      	nop
 8013256:	e022      	b.n	801329e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8013258:	bf00      	nop
 801325a:	e020      	b.n	801329e <tcp_input+0x756>
              goto aborted;
 801325c:	bf00      	nop
 801325e:	e01e      	b.n	801329e <tcp_input+0x756>
          goto aborted;
 8013260:	bf00      	nop
 8013262:	e01c      	b.n	801329e <tcp_input+0x756>
            goto aborted;
 8013264:	bf00      	nop
 8013266:	e01a      	b.n	801329e <tcp_input+0x756>
              goto aborted;
 8013268:	bf00      	nop
 801326a:	e018      	b.n	801329e <tcp_input+0x756>
 801326c:	200070f0 	.word	0x200070f0
 8013270:	20007100 	.word	0x20007100
 8013274:	20007120 	.word	0x20007120
 8013278:	2000711d 	.word	0x2000711d
 801327c:	20007118 	.word	0x20007118
 8013280:	2000711c 	.word	0x2000711c
 8013284:	2000711a 	.word	0x2000711a
 8013288:	20007124 	.word	0x20007124
 801328c:	200070e4 	.word	0x200070e4
 8013290:	0801d808 	.word	0x0801d808
 8013294:	0801d9bc 	.word	0x0801d9bc
 8013298:	0801d854 	.word	0x0801d854
          goto aborted;
 801329c:	bf00      	nop
    tcp_input_pcb = NULL;
 801329e:	4b27      	ldr	r3, [pc, #156]	; (801333c <tcp_input+0x7f4>)
 80132a0:	2200      	movs	r2, #0
 80132a2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80132a4:	4b26      	ldr	r3, [pc, #152]	; (8013340 <tcp_input+0x7f8>)
 80132a6:	2200      	movs	r2, #0
 80132a8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80132aa:	4b26      	ldr	r3, [pc, #152]	; (8013344 <tcp_input+0x7fc>)
 80132ac:	685b      	ldr	r3, [r3, #4]
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d03f      	beq.n	8013332 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80132b2:	4b24      	ldr	r3, [pc, #144]	; (8013344 <tcp_input+0x7fc>)
 80132b4:	685b      	ldr	r3, [r3, #4]
 80132b6:	4618      	mov	r0, r3
 80132b8:	f7fd fe1a 	bl	8010ef0 <pbuf_free>
      inseg.p = NULL;
 80132bc:	4b21      	ldr	r3, [pc, #132]	; (8013344 <tcp_input+0x7fc>)
 80132be:	2200      	movs	r2, #0
 80132c0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80132c2:	e036      	b.n	8013332 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80132c4:	4b20      	ldr	r3, [pc, #128]	; (8013348 <tcp_input+0x800>)
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	899b      	ldrh	r3, [r3, #12]
 80132ca:	b29b      	uxth	r3, r3
 80132cc:	4618      	mov	r0, r3
 80132ce:	f7fc fa2b 	bl	800f728 <lwip_htons>
 80132d2:	4603      	mov	r3, r0
 80132d4:	b2db      	uxtb	r3, r3
 80132d6:	f003 0304 	and.w	r3, r3, #4
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d118      	bne.n	8013310 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80132de:	4b1b      	ldr	r3, [pc, #108]	; (801334c <tcp_input+0x804>)
 80132e0:	6819      	ldr	r1, [r3, #0]
 80132e2:	4b1b      	ldr	r3, [pc, #108]	; (8013350 <tcp_input+0x808>)
 80132e4:	881b      	ldrh	r3, [r3, #0]
 80132e6:	461a      	mov	r2, r3
 80132e8:	4b1a      	ldr	r3, [pc, #104]	; (8013354 <tcp_input+0x80c>)
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80132ee:	4b16      	ldr	r3, [pc, #88]	; (8013348 <tcp_input+0x800>)
 80132f0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80132f2:	885b      	ldrh	r3, [r3, #2]
 80132f4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80132f6:	4a14      	ldr	r2, [pc, #80]	; (8013348 <tcp_input+0x800>)
 80132f8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80132fa:	8812      	ldrh	r2, [r2, #0]
 80132fc:	b292      	uxth	r2, r2
 80132fe:	9202      	str	r2, [sp, #8]
 8013300:	9301      	str	r3, [sp, #4]
 8013302:	4b15      	ldr	r3, [pc, #84]	; (8013358 <tcp_input+0x810>)
 8013304:	9300      	str	r3, [sp, #0]
 8013306:	4b15      	ldr	r3, [pc, #84]	; (801335c <tcp_input+0x814>)
 8013308:	4602      	mov	r2, r0
 801330a:	2000      	movs	r0, #0
 801330c:	f003 f81c 	bl	8016348 <tcp_rst>
    pbuf_free(p);
 8013310:	6878      	ldr	r0, [r7, #4]
 8013312:	f7fd fded 	bl	8010ef0 <pbuf_free>
  return;
 8013316:	e00c      	b.n	8013332 <tcp_input+0x7ea>
    goto dropped;
 8013318:	bf00      	nop
 801331a:	e006      	b.n	801332a <tcp_input+0x7e2>
    goto dropped;
 801331c:	bf00      	nop
 801331e:	e004      	b.n	801332a <tcp_input+0x7e2>
    goto dropped;
 8013320:	bf00      	nop
 8013322:	e002      	b.n	801332a <tcp_input+0x7e2>
      goto dropped;
 8013324:	bf00      	nop
 8013326:	e000      	b.n	801332a <tcp_input+0x7e2>
      goto dropped;
 8013328:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801332a:	6878      	ldr	r0, [r7, #4]
 801332c:	f7fd fde0 	bl	8010ef0 <pbuf_free>
 8013330:	e000      	b.n	8013334 <tcp_input+0x7ec>
  return;
 8013332:	bf00      	nop
}
 8013334:	3724      	adds	r7, #36	; 0x24
 8013336:	46bd      	mov	sp, r7
 8013338:	bd90      	pop	{r4, r7, pc}
 801333a:	bf00      	nop
 801333c:	20007124 	.word	0x20007124
 8013340:	20007120 	.word	0x20007120
 8013344:	200070f0 	.word	0x200070f0
 8013348:	20007100 	.word	0x20007100
 801334c:	20007114 	.word	0x20007114
 8013350:	2000711a 	.word	0x2000711a
 8013354:	20007110 	.word	0x20007110
 8013358:	2000080c 	.word	0x2000080c
 801335c:	20000810 	.word	0x20000810

08013360 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8013360:	b580      	push	{r7, lr}
 8013362:	b082      	sub	sp, #8
 8013364:	af00      	add	r7, sp, #0
 8013366:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	2b00      	cmp	r3, #0
 801336c:	d106      	bne.n	801337c <tcp_input_delayed_close+0x1c>
 801336e:	4b17      	ldr	r3, [pc, #92]	; (80133cc <tcp_input_delayed_close+0x6c>)
 8013370:	f240 225a 	movw	r2, #602	; 0x25a
 8013374:	4916      	ldr	r1, [pc, #88]	; (80133d0 <tcp_input_delayed_close+0x70>)
 8013376:	4817      	ldr	r0, [pc, #92]	; (80133d4 <tcp_input_delayed_close+0x74>)
 8013378:	f006 fc92 	bl	8019ca0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801337c:	4b16      	ldr	r3, [pc, #88]	; (80133d8 <tcp_input_delayed_close+0x78>)
 801337e:	781b      	ldrb	r3, [r3, #0]
 8013380:	f003 0310 	and.w	r3, r3, #16
 8013384:	2b00      	cmp	r3, #0
 8013386:	d01c      	beq.n	80133c2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	8b5b      	ldrh	r3, [r3, #26]
 801338c:	f003 0310 	and.w	r3, r3, #16
 8013390:	2b00      	cmp	r3, #0
 8013392:	d10d      	bne.n	80133b0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801339a:	2b00      	cmp	r3, #0
 801339c:	d008      	beq.n	80133b0 <tcp_input_delayed_close+0x50>
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80133a4:	687a      	ldr	r2, [r7, #4]
 80133a6:	6912      	ldr	r2, [r2, #16]
 80133a8:	f06f 010e 	mvn.w	r1, #14
 80133ac:	4610      	mov	r0, r2
 80133ae:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80133b0:	6879      	ldr	r1, [r7, #4]
 80133b2:	480a      	ldr	r0, [pc, #40]	; (80133dc <tcp_input_delayed_close+0x7c>)
 80133b4:	f7ff fa50 	bl	8012858 <tcp_pcb_remove>
    tcp_free(pcb);
 80133b8:	6878      	ldr	r0, [r7, #4]
 80133ba:	f7fe f839 	bl	8011430 <tcp_free>
    return 1;
 80133be:	2301      	movs	r3, #1
 80133c0:	e000      	b.n	80133c4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80133c2:	2300      	movs	r3, #0
}
 80133c4:	4618      	mov	r0, r3
 80133c6:	3708      	adds	r7, #8
 80133c8:	46bd      	mov	sp, r7
 80133ca:	bd80      	pop	{r7, pc}
 80133cc:	0801d808 	.word	0x0801d808
 80133d0:	0801d9d8 	.word	0x0801d9d8
 80133d4:	0801d854 	.word	0x0801d854
 80133d8:	2000711d 	.word	0x2000711d
 80133dc:	200070e4 	.word	0x200070e4

080133e0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80133e0:	b590      	push	{r4, r7, lr}
 80133e2:	b08b      	sub	sp, #44	; 0x2c
 80133e4:	af04      	add	r7, sp, #16
 80133e6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80133e8:	4b6f      	ldr	r3, [pc, #444]	; (80135a8 <tcp_listen_input+0x1c8>)
 80133ea:	781b      	ldrb	r3, [r3, #0]
 80133ec:	f003 0304 	and.w	r3, r3, #4
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	f040 80d2 	bne.w	801359a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d106      	bne.n	801340a <tcp_listen_input+0x2a>
 80133fc:	4b6b      	ldr	r3, [pc, #428]	; (80135ac <tcp_listen_input+0x1cc>)
 80133fe:	f240 2281 	movw	r2, #641	; 0x281
 8013402:	496b      	ldr	r1, [pc, #428]	; (80135b0 <tcp_listen_input+0x1d0>)
 8013404:	486b      	ldr	r0, [pc, #428]	; (80135b4 <tcp_listen_input+0x1d4>)
 8013406:	f006 fc4b 	bl	8019ca0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801340a:	4b67      	ldr	r3, [pc, #412]	; (80135a8 <tcp_listen_input+0x1c8>)
 801340c:	781b      	ldrb	r3, [r3, #0]
 801340e:	f003 0310 	and.w	r3, r3, #16
 8013412:	2b00      	cmp	r3, #0
 8013414:	d019      	beq.n	801344a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013416:	4b68      	ldr	r3, [pc, #416]	; (80135b8 <tcp_listen_input+0x1d8>)
 8013418:	6819      	ldr	r1, [r3, #0]
 801341a:	4b68      	ldr	r3, [pc, #416]	; (80135bc <tcp_listen_input+0x1dc>)
 801341c:	881b      	ldrh	r3, [r3, #0]
 801341e:	461a      	mov	r2, r3
 8013420:	4b67      	ldr	r3, [pc, #412]	; (80135c0 <tcp_listen_input+0x1e0>)
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013426:	4b67      	ldr	r3, [pc, #412]	; (80135c4 <tcp_listen_input+0x1e4>)
 8013428:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801342a:	885b      	ldrh	r3, [r3, #2]
 801342c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801342e:	4a65      	ldr	r2, [pc, #404]	; (80135c4 <tcp_listen_input+0x1e4>)
 8013430:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013432:	8812      	ldrh	r2, [r2, #0]
 8013434:	b292      	uxth	r2, r2
 8013436:	9202      	str	r2, [sp, #8]
 8013438:	9301      	str	r3, [sp, #4]
 801343a:	4b63      	ldr	r3, [pc, #396]	; (80135c8 <tcp_listen_input+0x1e8>)
 801343c:	9300      	str	r3, [sp, #0]
 801343e:	4b63      	ldr	r3, [pc, #396]	; (80135cc <tcp_listen_input+0x1ec>)
 8013440:	4602      	mov	r2, r0
 8013442:	6878      	ldr	r0, [r7, #4]
 8013444:	f002 ff80 	bl	8016348 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8013448:	e0a9      	b.n	801359e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801344a:	4b57      	ldr	r3, [pc, #348]	; (80135a8 <tcp_listen_input+0x1c8>)
 801344c:	781b      	ldrb	r3, [r3, #0]
 801344e:	f003 0302 	and.w	r3, r3, #2
 8013452:	2b00      	cmp	r3, #0
 8013454:	f000 80a3 	beq.w	801359e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	7d5b      	ldrb	r3, [r3, #21]
 801345c:	4618      	mov	r0, r3
 801345e:	f7ff f927 	bl	80126b0 <tcp_alloc>
 8013462:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8013464:	697b      	ldr	r3, [r7, #20]
 8013466:	2b00      	cmp	r3, #0
 8013468:	d111      	bne.n	801348e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	699b      	ldr	r3, [r3, #24]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d00a      	beq.n	8013488 <tcp_listen_input+0xa8>
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	699b      	ldr	r3, [r3, #24]
 8013476:	687a      	ldr	r2, [r7, #4]
 8013478:	6910      	ldr	r0, [r2, #16]
 801347a:	f04f 32ff 	mov.w	r2, #4294967295
 801347e:	2100      	movs	r1, #0
 8013480:	4798      	blx	r3
 8013482:	4603      	mov	r3, r0
 8013484:	73bb      	strb	r3, [r7, #14]
      return;
 8013486:	e08b      	b.n	80135a0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013488:	23f0      	movs	r3, #240	; 0xf0
 801348a:	73bb      	strb	r3, [r7, #14]
      return;
 801348c:	e088      	b.n	80135a0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801348e:	4b50      	ldr	r3, [pc, #320]	; (80135d0 <tcp_listen_input+0x1f0>)
 8013490:	695a      	ldr	r2, [r3, #20]
 8013492:	697b      	ldr	r3, [r7, #20]
 8013494:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8013496:	4b4e      	ldr	r3, [pc, #312]	; (80135d0 <tcp_listen_input+0x1f0>)
 8013498:	691a      	ldr	r2, [r3, #16]
 801349a:	697b      	ldr	r3, [r7, #20]
 801349c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	8ada      	ldrh	r2, [r3, #22]
 80134a2:	697b      	ldr	r3, [r7, #20]
 80134a4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80134a6:	4b47      	ldr	r3, [pc, #284]	; (80135c4 <tcp_listen_input+0x1e4>)
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	881b      	ldrh	r3, [r3, #0]
 80134ac:	b29a      	uxth	r2, r3
 80134ae:	697b      	ldr	r3, [r7, #20]
 80134b0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80134b2:	697b      	ldr	r3, [r7, #20]
 80134b4:	2203      	movs	r2, #3
 80134b6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80134b8:	4b41      	ldr	r3, [pc, #260]	; (80135c0 <tcp_listen_input+0x1e0>)
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	1c5a      	adds	r2, r3, #1
 80134be:	697b      	ldr	r3, [r7, #20]
 80134c0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80134c2:	697b      	ldr	r3, [r7, #20]
 80134c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80134c6:	697b      	ldr	r3, [r7, #20]
 80134c8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80134ca:	6978      	ldr	r0, [r7, #20]
 80134cc:	f7ff fa58 	bl	8012980 <tcp_next_iss>
 80134d0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80134d2:	697b      	ldr	r3, [r7, #20]
 80134d4:	693a      	ldr	r2, [r7, #16]
 80134d6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80134d8:	697b      	ldr	r3, [r7, #20]
 80134da:	693a      	ldr	r2, [r7, #16]
 80134dc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80134de:	697b      	ldr	r3, [r7, #20]
 80134e0:	693a      	ldr	r2, [r7, #16]
 80134e2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80134e4:	697b      	ldr	r3, [r7, #20]
 80134e6:	693a      	ldr	r2, [r7, #16]
 80134e8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80134ea:	4b35      	ldr	r3, [pc, #212]	; (80135c0 <tcp_listen_input+0x1e0>)
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	1e5a      	subs	r2, r3, #1
 80134f0:	697b      	ldr	r3, [r7, #20]
 80134f2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	691a      	ldr	r2, [r3, #16]
 80134f8:	697b      	ldr	r3, [r7, #20]
 80134fa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80134fc:	697b      	ldr	r3, [r7, #20]
 80134fe:	687a      	ldr	r2, [r7, #4]
 8013500:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	7a5b      	ldrb	r3, [r3, #9]
 8013506:	f003 030c 	and.w	r3, r3, #12
 801350a:	b2da      	uxtb	r2, r3
 801350c:	697b      	ldr	r3, [r7, #20]
 801350e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	7a1a      	ldrb	r2, [r3, #8]
 8013514:	697b      	ldr	r3, [r7, #20]
 8013516:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8013518:	4b2e      	ldr	r3, [pc, #184]	; (80135d4 <tcp_listen_input+0x1f4>)
 801351a:	681a      	ldr	r2, [r3, #0]
 801351c:	697b      	ldr	r3, [r7, #20]
 801351e:	60da      	str	r2, [r3, #12]
 8013520:	4a2c      	ldr	r2, [pc, #176]	; (80135d4 <tcp_listen_input+0x1f4>)
 8013522:	697b      	ldr	r3, [r7, #20]
 8013524:	6013      	str	r3, [r2, #0]
 8013526:	f003 f8d1 	bl	80166cc <tcp_timer_needed>
 801352a:	4b2b      	ldr	r3, [pc, #172]	; (80135d8 <tcp_listen_input+0x1f8>)
 801352c:	2201      	movs	r2, #1
 801352e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8013530:	6978      	ldr	r0, [r7, #20]
 8013532:	f001 fd8f 	bl	8015054 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8013536:	4b23      	ldr	r3, [pc, #140]	; (80135c4 <tcp_listen_input+0x1e4>)
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	89db      	ldrh	r3, [r3, #14]
 801353c:	b29a      	uxth	r2, r3
 801353e:	697b      	ldr	r3, [r7, #20]
 8013540:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8013544:	697b      	ldr	r3, [r7, #20]
 8013546:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801354a:	697b      	ldr	r3, [r7, #20]
 801354c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8013550:	697b      	ldr	r3, [r7, #20]
 8013552:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8013554:	697b      	ldr	r3, [r7, #20]
 8013556:	3304      	adds	r3, #4
 8013558:	4618      	mov	r0, r3
 801355a:	f004 fc79 	bl	8017e50 <ip4_route>
 801355e:	4601      	mov	r1, r0
 8013560:	697b      	ldr	r3, [r7, #20]
 8013562:	3304      	adds	r3, #4
 8013564:	461a      	mov	r2, r3
 8013566:	4620      	mov	r0, r4
 8013568:	f7ff fa30 	bl	80129cc <tcp_eff_send_mss_netif>
 801356c:	4603      	mov	r3, r0
 801356e:	461a      	mov	r2, r3
 8013570:	697b      	ldr	r3, [r7, #20]
 8013572:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8013574:	2112      	movs	r1, #18
 8013576:	6978      	ldr	r0, [r7, #20]
 8013578:	f002 f844 	bl	8015604 <tcp_enqueue_flags>
 801357c:	4603      	mov	r3, r0
 801357e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8013580:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d004      	beq.n	8013592 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8013588:	2100      	movs	r1, #0
 801358a:	6978      	ldr	r0, [r7, #20]
 801358c:	f7fe f97a 	bl	8011884 <tcp_abandon>
      return;
 8013590:	e006      	b.n	80135a0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8013592:	6978      	ldr	r0, [r7, #20]
 8013594:	f002 f924 	bl	80157e0 <tcp_output>
  return;
 8013598:	e001      	b.n	801359e <tcp_listen_input+0x1be>
    return;
 801359a:	bf00      	nop
 801359c:	e000      	b.n	80135a0 <tcp_listen_input+0x1c0>
  return;
 801359e:	bf00      	nop
}
 80135a0:	371c      	adds	r7, #28
 80135a2:	46bd      	mov	sp, r7
 80135a4:	bd90      	pop	{r4, r7, pc}
 80135a6:	bf00      	nop
 80135a8:	2000711c 	.word	0x2000711c
 80135ac:	0801d808 	.word	0x0801d808
 80135b0:	0801da00 	.word	0x0801da00
 80135b4:	0801d854 	.word	0x0801d854
 80135b8:	20007114 	.word	0x20007114
 80135bc:	2000711a 	.word	0x2000711a
 80135c0:	20007110 	.word	0x20007110
 80135c4:	20007100 	.word	0x20007100
 80135c8:	2000080c 	.word	0x2000080c
 80135cc:	20000810 	.word	0x20000810
 80135d0:	200007fc 	.word	0x200007fc
 80135d4:	200070e4 	.word	0x200070e4
 80135d8:	200070ec 	.word	0x200070ec

080135dc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80135dc:	b580      	push	{r7, lr}
 80135de:	b086      	sub	sp, #24
 80135e0:	af04      	add	r7, sp, #16
 80135e2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80135e4:	4b2f      	ldr	r3, [pc, #188]	; (80136a4 <tcp_timewait_input+0xc8>)
 80135e6:	781b      	ldrb	r3, [r3, #0]
 80135e8:	f003 0304 	and.w	r3, r3, #4
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d153      	bne.n	8013698 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d106      	bne.n	8013604 <tcp_timewait_input+0x28>
 80135f6:	4b2c      	ldr	r3, [pc, #176]	; (80136a8 <tcp_timewait_input+0xcc>)
 80135f8:	f240 22ee 	movw	r2, #750	; 0x2ee
 80135fc:	492b      	ldr	r1, [pc, #172]	; (80136ac <tcp_timewait_input+0xd0>)
 80135fe:	482c      	ldr	r0, [pc, #176]	; (80136b0 <tcp_timewait_input+0xd4>)
 8013600:	f006 fb4e 	bl	8019ca0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8013604:	4b27      	ldr	r3, [pc, #156]	; (80136a4 <tcp_timewait_input+0xc8>)
 8013606:	781b      	ldrb	r3, [r3, #0]
 8013608:	f003 0302 	and.w	r3, r3, #2
 801360c:	2b00      	cmp	r3, #0
 801360e:	d02a      	beq.n	8013666 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8013610:	4b28      	ldr	r3, [pc, #160]	; (80136b4 <tcp_timewait_input+0xd8>)
 8013612:	681a      	ldr	r2, [r3, #0]
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013618:	1ad3      	subs	r3, r2, r3
 801361a:	2b00      	cmp	r3, #0
 801361c:	db2d      	blt.n	801367a <tcp_timewait_input+0x9e>
 801361e:	4b25      	ldr	r3, [pc, #148]	; (80136b4 <tcp_timewait_input+0xd8>)
 8013620:	681a      	ldr	r2, [r3, #0]
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013626:	6879      	ldr	r1, [r7, #4]
 8013628:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801362a:	440b      	add	r3, r1
 801362c:	1ad3      	subs	r3, r2, r3
 801362e:	2b00      	cmp	r3, #0
 8013630:	dc23      	bgt.n	801367a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013632:	4b21      	ldr	r3, [pc, #132]	; (80136b8 <tcp_timewait_input+0xdc>)
 8013634:	6819      	ldr	r1, [r3, #0]
 8013636:	4b21      	ldr	r3, [pc, #132]	; (80136bc <tcp_timewait_input+0xe0>)
 8013638:	881b      	ldrh	r3, [r3, #0]
 801363a:	461a      	mov	r2, r3
 801363c:	4b1d      	ldr	r3, [pc, #116]	; (80136b4 <tcp_timewait_input+0xd8>)
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013642:	4b1f      	ldr	r3, [pc, #124]	; (80136c0 <tcp_timewait_input+0xe4>)
 8013644:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013646:	885b      	ldrh	r3, [r3, #2]
 8013648:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801364a:	4a1d      	ldr	r2, [pc, #116]	; (80136c0 <tcp_timewait_input+0xe4>)
 801364c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801364e:	8812      	ldrh	r2, [r2, #0]
 8013650:	b292      	uxth	r2, r2
 8013652:	9202      	str	r2, [sp, #8]
 8013654:	9301      	str	r3, [sp, #4]
 8013656:	4b1b      	ldr	r3, [pc, #108]	; (80136c4 <tcp_timewait_input+0xe8>)
 8013658:	9300      	str	r3, [sp, #0]
 801365a:	4b1b      	ldr	r3, [pc, #108]	; (80136c8 <tcp_timewait_input+0xec>)
 801365c:	4602      	mov	r2, r0
 801365e:	6878      	ldr	r0, [r7, #4]
 8013660:	f002 fe72 	bl	8016348 <tcp_rst>
      return;
 8013664:	e01b      	b.n	801369e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8013666:	4b0f      	ldr	r3, [pc, #60]	; (80136a4 <tcp_timewait_input+0xc8>)
 8013668:	781b      	ldrb	r3, [r3, #0]
 801366a:	f003 0301 	and.w	r3, r3, #1
 801366e:	2b00      	cmp	r3, #0
 8013670:	d003      	beq.n	801367a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8013672:	4b16      	ldr	r3, [pc, #88]	; (80136cc <tcp_timewait_input+0xf0>)
 8013674:	681a      	ldr	r2, [r3, #0]
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801367a:	4b10      	ldr	r3, [pc, #64]	; (80136bc <tcp_timewait_input+0xe0>)
 801367c:	881b      	ldrh	r3, [r3, #0]
 801367e:	2b00      	cmp	r3, #0
 8013680:	d00c      	beq.n	801369c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	8b5b      	ldrh	r3, [r3, #26]
 8013686:	f043 0302 	orr.w	r3, r3, #2
 801368a:	b29a      	uxth	r2, r3
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013690:	6878      	ldr	r0, [r7, #4]
 8013692:	f002 f8a5 	bl	80157e0 <tcp_output>
  }
  return;
 8013696:	e001      	b.n	801369c <tcp_timewait_input+0xc0>
    return;
 8013698:	bf00      	nop
 801369a:	e000      	b.n	801369e <tcp_timewait_input+0xc2>
  return;
 801369c:	bf00      	nop
}
 801369e:	3708      	adds	r7, #8
 80136a0:	46bd      	mov	sp, r7
 80136a2:	bd80      	pop	{r7, pc}
 80136a4:	2000711c 	.word	0x2000711c
 80136a8:	0801d808 	.word	0x0801d808
 80136ac:	0801da20 	.word	0x0801da20
 80136b0:	0801d854 	.word	0x0801d854
 80136b4:	20007110 	.word	0x20007110
 80136b8:	20007114 	.word	0x20007114
 80136bc:	2000711a 	.word	0x2000711a
 80136c0:	20007100 	.word	0x20007100
 80136c4:	2000080c 	.word	0x2000080c
 80136c8:	20000810 	.word	0x20000810
 80136cc:	200070d8 	.word	0x200070d8

080136d0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80136d0:	b590      	push	{r4, r7, lr}
 80136d2:	b08d      	sub	sp, #52	; 0x34
 80136d4:	af04      	add	r7, sp, #16
 80136d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80136d8:	2300      	movs	r3, #0
 80136da:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80136dc:	2300      	movs	r3, #0
 80136de:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d106      	bne.n	80136f4 <tcp_process+0x24>
 80136e6:	4b9d      	ldr	r3, [pc, #628]	; (801395c <tcp_process+0x28c>)
 80136e8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80136ec:	499c      	ldr	r1, [pc, #624]	; (8013960 <tcp_process+0x290>)
 80136ee:	489d      	ldr	r0, [pc, #628]	; (8013964 <tcp_process+0x294>)
 80136f0:	f006 fad6 	bl	8019ca0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80136f4:	4b9c      	ldr	r3, [pc, #624]	; (8013968 <tcp_process+0x298>)
 80136f6:	781b      	ldrb	r3, [r3, #0]
 80136f8:	f003 0304 	and.w	r3, r3, #4
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d04e      	beq.n	801379e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	7d1b      	ldrb	r3, [r3, #20]
 8013704:	2b02      	cmp	r3, #2
 8013706:	d108      	bne.n	801371a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801370c:	4b97      	ldr	r3, [pc, #604]	; (801396c <tcp_process+0x29c>)
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	429a      	cmp	r2, r3
 8013712:	d123      	bne.n	801375c <tcp_process+0x8c>
        acceptable = 1;
 8013714:	2301      	movs	r3, #1
 8013716:	76fb      	strb	r3, [r7, #27]
 8013718:	e020      	b.n	801375c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801371e:	4b94      	ldr	r3, [pc, #592]	; (8013970 <tcp_process+0x2a0>)
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	429a      	cmp	r2, r3
 8013724:	d102      	bne.n	801372c <tcp_process+0x5c>
        acceptable = 1;
 8013726:	2301      	movs	r3, #1
 8013728:	76fb      	strb	r3, [r7, #27]
 801372a:	e017      	b.n	801375c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801372c:	4b90      	ldr	r3, [pc, #576]	; (8013970 <tcp_process+0x2a0>)
 801372e:	681a      	ldr	r2, [r3, #0]
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013734:	1ad3      	subs	r3, r2, r3
 8013736:	2b00      	cmp	r3, #0
 8013738:	db10      	blt.n	801375c <tcp_process+0x8c>
 801373a:	4b8d      	ldr	r3, [pc, #564]	; (8013970 <tcp_process+0x2a0>)
 801373c:	681a      	ldr	r2, [r3, #0]
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013742:	6879      	ldr	r1, [r7, #4]
 8013744:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013746:	440b      	add	r3, r1
 8013748:	1ad3      	subs	r3, r2, r3
 801374a:	2b00      	cmp	r3, #0
 801374c:	dc06      	bgt.n	801375c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	8b5b      	ldrh	r3, [r3, #26]
 8013752:	f043 0302 	orr.w	r3, r3, #2
 8013756:	b29a      	uxth	r2, r3
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801375c:	7efb      	ldrb	r3, [r7, #27]
 801375e:	2b00      	cmp	r3, #0
 8013760:	d01b      	beq.n	801379a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	7d1b      	ldrb	r3, [r3, #20]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d106      	bne.n	8013778 <tcp_process+0xa8>
 801376a:	4b7c      	ldr	r3, [pc, #496]	; (801395c <tcp_process+0x28c>)
 801376c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8013770:	4980      	ldr	r1, [pc, #512]	; (8013974 <tcp_process+0x2a4>)
 8013772:	487c      	ldr	r0, [pc, #496]	; (8013964 <tcp_process+0x294>)
 8013774:	f006 fa94 	bl	8019ca0 <iprintf>
      recv_flags |= TF_RESET;
 8013778:	4b7f      	ldr	r3, [pc, #508]	; (8013978 <tcp_process+0x2a8>)
 801377a:	781b      	ldrb	r3, [r3, #0]
 801377c:	f043 0308 	orr.w	r3, r3, #8
 8013780:	b2da      	uxtb	r2, r3
 8013782:	4b7d      	ldr	r3, [pc, #500]	; (8013978 <tcp_process+0x2a8>)
 8013784:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	8b5b      	ldrh	r3, [r3, #26]
 801378a:	f023 0301 	bic.w	r3, r3, #1
 801378e:	b29a      	uxth	r2, r3
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8013794:	f06f 030d 	mvn.w	r3, #13
 8013798:	e37a      	b.n	8013e90 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801379a:	2300      	movs	r3, #0
 801379c:	e378      	b.n	8013e90 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801379e:	4b72      	ldr	r3, [pc, #456]	; (8013968 <tcp_process+0x298>)
 80137a0:	781b      	ldrb	r3, [r3, #0]
 80137a2:	f003 0302 	and.w	r3, r3, #2
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d010      	beq.n	80137cc <tcp_process+0xfc>
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	7d1b      	ldrb	r3, [r3, #20]
 80137ae:	2b02      	cmp	r3, #2
 80137b0:	d00c      	beq.n	80137cc <tcp_process+0xfc>
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	7d1b      	ldrb	r3, [r3, #20]
 80137b6:	2b03      	cmp	r3, #3
 80137b8:	d008      	beq.n	80137cc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	8b5b      	ldrh	r3, [r3, #26]
 80137be:	f043 0302 	orr.w	r3, r3, #2
 80137c2:	b29a      	uxth	r2, r3
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80137c8:	2300      	movs	r3, #0
 80137ca:	e361      	b.n	8013e90 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	8b5b      	ldrh	r3, [r3, #26]
 80137d0:	f003 0310 	and.w	r3, r3, #16
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d103      	bne.n	80137e0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80137d8:	4b68      	ldr	r3, [pc, #416]	; (801397c <tcp_process+0x2ac>)
 80137da:	681a      	ldr	r2, [r3, #0]
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	2200      	movs	r2, #0
 80137e4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	2200      	movs	r2, #0
 80137ec:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80137f0:	6878      	ldr	r0, [r7, #4]
 80137f2:	f001 fc2f 	bl	8015054 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	7d1b      	ldrb	r3, [r3, #20]
 80137fa:	3b02      	subs	r3, #2
 80137fc:	2b07      	cmp	r3, #7
 80137fe:	f200 8337 	bhi.w	8013e70 <tcp_process+0x7a0>
 8013802:	a201      	add	r2, pc, #4	; (adr r2, 8013808 <tcp_process+0x138>)
 8013804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013808:	08013829 	.word	0x08013829
 801380c:	08013a59 	.word	0x08013a59
 8013810:	08013bd1 	.word	0x08013bd1
 8013814:	08013bfb 	.word	0x08013bfb
 8013818:	08013d1f 	.word	0x08013d1f
 801381c:	08013bd1 	.word	0x08013bd1
 8013820:	08013dab 	.word	0x08013dab
 8013824:	08013e3b 	.word	0x08013e3b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8013828:	4b4f      	ldr	r3, [pc, #316]	; (8013968 <tcp_process+0x298>)
 801382a:	781b      	ldrb	r3, [r3, #0]
 801382c:	f003 0310 	and.w	r3, r3, #16
 8013830:	2b00      	cmp	r3, #0
 8013832:	f000 80e4 	beq.w	80139fe <tcp_process+0x32e>
 8013836:	4b4c      	ldr	r3, [pc, #304]	; (8013968 <tcp_process+0x298>)
 8013838:	781b      	ldrb	r3, [r3, #0]
 801383a:	f003 0302 	and.w	r3, r3, #2
 801383e:	2b00      	cmp	r3, #0
 8013840:	f000 80dd 	beq.w	80139fe <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013848:	1c5a      	adds	r2, r3, #1
 801384a:	4b48      	ldr	r3, [pc, #288]	; (801396c <tcp_process+0x29c>)
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	429a      	cmp	r2, r3
 8013850:	f040 80d5 	bne.w	80139fe <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8013854:	4b46      	ldr	r3, [pc, #280]	; (8013970 <tcp_process+0x2a0>)
 8013856:	681b      	ldr	r3, [r3, #0]
 8013858:	1c5a      	adds	r2, r3, #1
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8013866:	4b41      	ldr	r3, [pc, #260]	; (801396c <tcp_process+0x29c>)
 8013868:	681a      	ldr	r2, [r3, #0]
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801386e:	4b44      	ldr	r3, [pc, #272]	; (8013980 <tcp_process+0x2b0>)
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	89db      	ldrh	r3, [r3, #14]
 8013874:	b29a      	uxth	r2, r3
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8013888:	4b39      	ldr	r3, [pc, #228]	; (8013970 <tcp_process+0x2a0>)
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	1e5a      	subs	r2, r3, #1
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	2204      	movs	r2, #4
 8013896:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	3304      	adds	r3, #4
 80138a0:	4618      	mov	r0, r3
 80138a2:	f004 fad5 	bl	8017e50 <ip4_route>
 80138a6:	4601      	mov	r1, r0
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	3304      	adds	r3, #4
 80138ac:	461a      	mov	r2, r3
 80138ae:	4620      	mov	r0, r4
 80138b0:	f7ff f88c 	bl	80129cc <tcp_eff_send_mss_netif>
 80138b4:	4603      	mov	r3, r0
 80138b6:	461a      	mov	r2, r3
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80138c0:	009a      	lsls	r2, r3, #2
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80138c6:	005b      	lsls	r3, r3, #1
 80138c8:	f241 111c 	movw	r1, #4380	; 0x111c
 80138cc:	428b      	cmp	r3, r1
 80138ce:	bf38      	it	cc
 80138d0:	460b      	movcc	r3, r1
 80138d2:	429a      	cmp	r2, r3
 80138d4:	d204      	bcs.n	80138e0 <tcp_process+0x210>
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80138da:	009b      	lsls	r3, r3, #2
 80138dc:	b29b      	uxth	r3, r3
 80138de:	e00d      	b.n	80138fc <tcp_process+0x22c>
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80138e4:	005b      	lsls	r3, r3, #1
 80138e6:	f241 121c 	movw	r2, #4380	; 0x111c
 80138ea:	4293      	cmp	r3, r2
 80138ec:	d904      	bls.n	80138f8 <tcp_process+0x228>
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80138f2:	005b      	lsls	r3, r3, #1
 80138f4:	b29b      	uxth	r3, r3
 80138f6:	e001      	b.n	80138fc <tcp_process+0x22c>
 80138f8:	f241 131c 	movw	r3, #4380	; 0x111c
 80138fc:	687a      	ldr	r2, [r7, #4]
 80138fe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013908:	2b00      	cmp	r3, #0
 801390a:	d106      	bne.n	801391a <tcp_process+0x24a>
 801390c:	4b13      	ldr	r3, [pc, #76]	; (801395c <tcp_process+0x28c>)
 801390e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8013912:	491c      	ldr	r1, [pc, #112]	; (8013984 <tcp_process+0x2b4>)
 8013914:	4813      	ldr	r0, [pc, #76]	; (8013964 <tcp_process+0x294>)
 8013916:	f006 f9c3 	bl	8019ca0 <iprintf>
        --pcb->snd_queuelen;
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013920:	3b01      	subs	r3, #1
 8013922:	b29a      	uxth	r2, r3
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801392e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8013930:	69fb      	ldr	r3, [r7, #28]
 8013932:	2b00      	cmp	r3, #0
 8013934:	d12a      	bne.n	801398c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801393a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801393c:	69fb      	ldr	r3, [r7, #28]
 801393e:	2b00      	cmp	r3, #0
 8013940:	d106      	bne.n	8013950 <tcp_process+0x280>
 8013942:	4b06      	ldr	r3, [pc, #24]	; (801395c <tcp_process+0x28c>)
 8013944:	f44f 725d 	mov.w	r2, #884	; 0x374
 8013948:	490f      	ldr	r1, [pc, #60]	; (8013988 <tcp_process+0x2b8>)
 801394a:	4806      	ldr	r0, [pc, #24]	; (8013964 <tcp_process+0x294>)
 801394c:	f006 f9a8 	bl	8019ca0 <iprintf>
          pcb->unsent = rseg->next;
 8013950:	69fb      	ldr	r3, [r7, #28]
 8013952:	681a      	ldr	r2, [r3, #0]
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	66da      	str	r2, [r3, #108]	; 0x6c
 8013958:	e01c      	b.n	8013994 <tcp_process+0x2c4>
 801395a:	bf00      	nop
 801395c:	0801d808 	.word	0x0801d808
 8013960:	0801da40 	.word	0x0801da40
 8013964:	0801d854 	.word	0x0801d854
 8013968:	2000711c 	.word	0x2000711c
 801396c:	20007114 	.word	0x20007114
 8013970:	20007110 	.word	0x20007110
 8013974:	0801da5c 	.word	0x0801da5c
 8013978:	2000711d 	.word	0x2000711d
 801397c:	200070d8 	.word	0x200070d8
 8013980:	20007100 	.word	0x20007100
 8013984:	0801da7c 	.word	0x0801da7c
 8013988:	0801da94 	.word	0x0801da94
        } else {
          pcb->unacked = rseg->next;
 801398c:	69fb      	ldr	r3, [r7, #28]
 801398e:	681a      	ldr	r2, [r3, #0]
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8013994:	69f8      	ldr	r0, [r7, #28]
 8013996:	f7fe fd22 	bl	80123de <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d104      	bne.n	80139ac <tcp_process+0x2dc>
          pcb->rtime = -1;
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80139a8:	861a      	strh	r2, [r3, #48]	; 0x30
 80139aa:	e006      	b.n	80139ba <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	2200      	movs	r2, #0
 80139b0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	2200      	movs	r2, #0
 80139b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d00a      	beq.n	80139da <tcp_process+0x30a>
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80139ca:	687a      	ldr	r2, [r7, #4]
 80139cc:	6910      	ldr	r0, [r2, #16]
 80139ce:	2200      	movs	r2, #0
 80139d0:	6879      	ldr	r1, [r7, #4]
 80139d2:	4798      	blx	r3
 80139d4:	4603      	mov	r3, r0
 80139d6:	76bb      	strb	r3, [r7, #26]
 80139d8:	e001      	b.n	80139de <tcp_process+0x30e>
 80139da:	2300      	movs	r3, #0
 80139dc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80139de:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80139e2:	f113 0f0d 	cmn.w	r3, #13
 80139e6:	d102      	bne.n	80139ee <tcp_process+0x31e>
          return ERR_ABRT;
 80139e8:	f06f 030c 	mvn.w	r3, #12
 80139ec:	e250      	b.n	8013e90 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	8b5b      	ldrh	r3, [r3, #26]
 80139f2:	f043 0302 	orr.w	r3, r3, #2
 80139f6:	b29a      	uxth	r2, r3
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80139fc:	e23a      	b.n	8013e74 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80139fe:	4b98      	ldr	r3, [pc, #608]	; (8013c60 <tcp_process+0x590>)
 8013a00:	781b      	ldrb	r3, [r3, #0]
 8013a02:	f003 0310 	and.w	r3, r3, #16
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	f000 8234 	beq.w	8013e74 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013a0c:	4b95      	ldr	r3, [pc, #596]	; (8013c64 <tcp_process+0x594>)
 8013a0e:	6819      	ldr	r1, [r3, #0]
 8013a10:	4b95      	ldr	r3, [pc, #596]	; (8013c68 <tcp_process+0x598>)
 8013a12:	881b      	ldrh	r3, [r3, #0]
 8013a14:	461a      	mov	r2, r3
 8013a16:	4b95      	ldr	r3, [pc, #596]	; (8013c6c <tcp_process+0x59c>)
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013a1c:	4b94      	ldr	r3, [pc, #592]	; (8013c70 <tcp_process+0x5a0>)
 8013a1e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013a20:	885b      	ldrh	r3, [r3, #2]
 8013a22:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013a24:	4a92      	ldr	r2, [pc, #584]	; (8013c70 <tcp_process+0x5a0>)
 8013a26:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013a28:	8812      	ldrh	r2, [r2, #0]
 8013a2a:	b292      	uxth	r2, r2
 8013a2c:	9202      	str	r2, [sp, #8]
 8013a2e:	9301      	str	r3, [sp, #4]
 8013a30:	4b90      	ldr	r3, [pc, #576]	; (8013c74 <tcp_process+0x5a4>)
 8013a32:	9300      	str	r3, [sp, #0]
 8013a34:	4b90      	ldr	r3, [pc, #576]	; (8013c78 <tcp_process+0x5a8>)
 8013a36:	4602      	mov	r2, r0
 8013a38:	6878      	ldr	r0, [r7, #4]
 8013a3a:	f002 fc85 	bl	8016348 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013a44:	2b05      	cmp	r3, #5
 8013a46:	f200 8215 	bhi.w	8013e74 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	2200      	movs	r2, #0
 8013a4e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8013a50:	6878      	ldr	r0, [r7, #4]
 8013a52:	f002 fa51 	bl	8015ef8 <tcp_rexmit_rto>
      break;
 8013a56:	e20d      	b.n	8013e74 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8013a58:	4b81      	ldr	r3, [pc, #516]	; (8013c60 <tcp_process+0x590>)
 8013a5a:	781b      	ldrb	r3, [r3, #0]
 8013a5c:	f003 0310 	and.w	r3, r3, #16
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	f000 80a1 	beq.w	8013ba8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013a66:	4b7f      	ldr	r3, [pc, #508]	; (8013c64 <tcp_process+0x594>)
 8013a68:	681a      	ldr	r2, [r3, #0]
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a6e:	1ad3      	subs	r3, r2, r3
 8013a70:	3b01      	subs	r3, #1
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	db7e      	blt.n	8013b74 <tcp_process+0x4a4>
 8013a76:	4b7b      	ldr	r3, [pc, #492]	; (8013c64 <tcp_process+0x594>)
 8013a78:	681a      	ldr	r2, [r3, #0]
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013a7e:	1ad3      	subs	r3, r2, r3
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	dc77      	bgt.n	8013b74 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	2204      	movs	r2, #4
 8013a88:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d102      	bne.n	8013a98 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8013a92:	23fa      	movs	r3, #250	; 0xfa
 8013a94:	76bb      	strb	r3, [r7, #26]
 8013a96:	e01d      	b.n	8013ad4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a9c:	699b      	ldr	r3, [r3, #24]
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d106      	bne.n	8013ab0 <tcp_process+0x3e0>
 8013aa2:	4b76      	ldr	r3, [pc, #472]	; (8013c7c <tcp_process+0x5ac>)
 8013aa4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8013aa8:	4975      	ldr	r1, [pc, #468]	; (8013c80 <tcp_process+0x5b0>)
 8013aaa:	4876      	ldr	r0, [pc, #472]	; (8013c84 <tcp_process+0x5b4>)
 8013aac:	f006 f8f8 	bl	8019ca0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013ab4:	699b      	ldr	r3, [r3, #24]
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d00a      	beq.n	8013ad0 <tcp_process+0x400>
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013abe:	699b      	ldr	r3, [r3, #24]
 8013ac0:	687a      	ldr	r2, [r7, #4]
 8013ac2:	6910      	ldr	r0, [r2, #16]
 8013ac4:	2200      	movs	r2, #0
 8013ac6:	6879      	ldr	r1, [r7, #4]
 8013ac8:	4798      	blx	r3
 8013aca:	4603      	mov	r3, r0
 8013acc:	76bb      	strb	r3, [r7, #26]
 8013ace:	e001      	b.n	8013ad4 <tcp_process+0x404>
 8013ad0:	23f0      	movs	r3, #240	; 0xf0
 8013ad2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8013ad4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d00a      	beq.n	8013af2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8013adc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013ae0:	f113 0f0d 	cmn.w	r3, #13
 8013ae4:	d002      	beq.n	8013aec <tcp_process+0x41c>
              tcp_abort(pcb);
 8013ae6:	6878      	ldr	r0, [r7, #4]
 8013ae8:	f7fd ff8a 	bl	8011a00 <tcp_abort>
            }
            return ERR_ABRT;
 8013aec:	f06f 030c 	mvn.w	r3, #12
 8013af0:	e1ce      	b.n	8013e90 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8013af2:	6878      	ldr	r0, [r7, #4]
 8013af4:	f000 fae0 	bl	80140b8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8013af8:	4b63      	ldr	r3, [pc, #396]	; (8013c88 <tcp_process+0x5b8>)
 8013afa:	881b      	ldrh	r3, [r3, #0]
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d005      	beq.n	8013b0c <tcp_process+0x43c>
            recv_acked--;
 8013b00:	4b61      	ldr	r3, [pc, #388]	; (8013c88 <tcp_process+0x5b8>)
 8013b02:	881b      	ldrh	r3, [r3, #0]
 8013b04:	3b01      	subs	r3, #1
 8013b06:	b29a      	uxth	r2, r3
 8013b08:	4b5f      	ldr	r3, [pc, #380]	; (8013c88 <tcp_process+0x5b8>)
 8013b0a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b10:	009a      	lsls	r2, r3, #2
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b16:	005b      	lsls	r3, r3, #1
 8013b18:	f241 111c 	movw	r1, #4380	; 0x111c
 8013b1c:	428b      	cmp	r3, r1
 8013b1e:	bf38      	it	cc
 8013b20:	460b      	movcc	r3, r1
 8013b22:	429a      	cmp	r2, r3
 8013b24:	d204      	bcs.n	8013b30 <tcp_process+0x460>
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b2a:	009b      	lsls	r3, r3, #2
 8013b2c:	b29b      	uxth	r3, r3
 8013b2e:	e00d      	b.n	8013b4c <tcp_process+0x47c>
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b34:	005b      	lsls	r3, r3, #1
 8013b36:	f241 121c 	movw	r2, #4380	; 0x111c
 8013b3a:	4293      	cmp	r3, r2
 8013b3c:	d904      	bls.n	8013b48 <tcp_process+0x478>
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b42:	005b      	lsls	r3, r3, #1
 8013b44:	b29b      	uxth	r3, r3
 8013b46:	e001      	b.n	8013b4c <tcp_process+0x47c>
 8013b48:	f241 131c 	movw	r3, #4380	; 0x111c
 8013b4c:	687a      	ldr	r2, [r7, #4]
 8013b4e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8013b52:	4b4e      	ldr	r3, [pc, #312]	; (8013c8c <tcp_process+0x5bc>)
 8013b54:	781b      	ldrb	r3, [r3, #0]
 8013b56:	f003 0320 	and.w	r3, r3, #32
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d037      	beq.n	8013bce <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	8b5b      	ldrh	r3, [r3, #26]
 8013b62:	f043 0302 	orr.w	r3, r3, #2
 8013b66:	b29a      	uxth	r2, r3
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	2207      	movs	r2, #7
 8013b70:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8013b72:	e02c      	b.n	8013bce <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013b74:	4b3b      	ldr	r3, [pc, #236]	; (8013c64 <tcp_process+0x594>)
 8013b76:	6819      	ldr	r1, [r3, #0]
 8013b78:	4b3b      	ldr	r3, [pc, #236]	; (8013c68 <tcp_process+0x598>)
 8013b7a:	881b      	ldrh	r3, [r3, #0]
 8013b7c:	461a      	mov	r2, r3
 8013b7e:	4b3b      	ldr	r3, [pc, #236]	; (8013c6c <tcp_process+0x59c>)
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013b84:	4b3a      	ldr	r3, [pc, #232]	; (8013c70 <tcp_process+0x5a0>)
 8013b86:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013b88:	885b      	ldrh	r3, [r3, #2]
 8013b8a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013b8c:	4a38      	ldr	r2, [pc, #224]	; (8013c70 <tcp_process+0x5a0>)
 8013b8e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013b90:	8812      	ldrh	r2, [r2, #0]
 8013b92:	b292      	uxth	r2, r2
 8013b94:	9202      	str	r2, [sp, #8]
 8013b96:	9301      	str	r3, [sp, #4]
 8013b98:	4b36      	ldr	r3, [pc, #216]	; (8013c74 <tcp_process+0x5a4>)
 8013b9a:	9300      	str	r3, [sp, #0]
 8013b9c:	4b36      	ldr	r3, [pc, #216]	; (8013c78 <tcp_process+0x5a8>)
 8013b9e:	4602      	mov	r2, r0
 8013ba0:	6878      	ldr	r0, [r7, #4]
 8013ba2:	f002 fbd1 	bl	8016348 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8013ba6:	e167      	b.n	8013e78 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8013ba8:	4b2d      	ldr	r3, [pc, #180]	; (8013c60 <tcp_process+0x590>)
 8013baa:	781b      	ldrb	r3, [r3, #0]
 8013bac:	f003 0302 	and.w	r3, r3, #2
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	f000 8161 	beq.w	8013e78 <tcp_process+0x7a8>
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bba:	1e5a      	subs	r2, r3, #1
 8013bbc:	4b2b      	ldr	r3, [pc, #172]	; (8013c6c <tcp_process+0x59c>)
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	429a      	cmp	r2, r3
 8013bc2:	f040 8159 	bne.w	8013e78 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8013bc6:	6878      	ldr	r0, [r7, #4]
 8013bc8:	f002 f9b8 	bl	8015f3c <tcp_rexmit>
      break;
 8013bcc:	e154      	b.n	8013e78 <tcp_process+0x7a8>
 8013bce:	e153      	b.n	8013e78 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8013bd0:	6878      	ldr	r0, [r7, #4]
 8013bd2:	f000 fa71 	bl	80140b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8013bd6:	4b2d      	ldr	r3, [pc, #180]	; (8013c8c <tcp_process+0x5bc>)
 8013bd8:	781b      	ldrb	r3, [r3, #0]
 8013bda:	f003 0320 	and.w	r3, r3, #32
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	f000 814c 	beq.w	8013e7c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	8b5b      	ldrh	r3, [r3, #26]
 8013be8:	f043 0302 	orr.w	r3, r3, #2
 8013bec:	b29a      	uxth	r2, r3
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	2207      	movs	r2, #7
 8013bf6:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013bf8:	e140      	b.n	8013e7c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8013bfa:	6878      	ldr	r0, [r7, #4]
 8013bfc:	f000 fa5c 	bl	80140b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013c00:	4b22      	ldr	r3, [pc, #136]	; (8013c8c <tcp_process+0x5bc>)
 8013c02:	781b      	ldrb	r3, [r3, #0]
 8013c04:	f003 0320 	and.w	r3, r3, #32
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d071      	beq.n	8013cf0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013c0c:	4b14      	ldr	r3, [pc, #80]	; (8013c60 <tcp_process+0x590>)
 8013c0e:	781b      	ldrb	r3, [r3, #0]
 8013c10:	f003 0310 	and.w	r3, r3, #16
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d060      	beq.n	8013cda <tcp_process+0x60a>
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013c1c:	4b11      	ldr	r3, [pc, #68]	; (8013c64 <tcp_process+0x594>)
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	429a      	cmp	r2, r3
 8013c22:	d15a      	bne.n	8013cda <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d156      	bne.n	8013cda <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	8b5b      	ldrh	r3, [r3, #26]
 8013c30:	f043 0302 	orr.w	r3, r3, #2
 8013c34:	b29a      	uxth	r2, r3
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8013c3a:	6878      	ldr	r0, [r7, #4]
 8013c3c:	f7fe fdbc 	bl	80127b8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8013c40:	4b13      	ldr	r3, [pc, #76]	; (8013c90 <tcp_process+0x5c0>)
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	687a      	ldr	r2, [r7, #4]
 8013c46:	429a      	cmp	r2, r3
 8013c48:	d105      	bne.n	8013c56 <tcp_process+0x586>
 8013c4a:	4b11      	ldr	r3, [pc, #68]	; (8013c90 <tcp_process+0x5c0>)
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	68db      	ldr	r3, [r3, #12]
 8013c50:	4a0f      	ldr	r2, [pc, #60]	; (8013c90 <tcp_process+0x5c0>)
 8013c52:	6013      	str	r3, [r2, #0]
 8013c54:	e02e      	b.n	8013cb4 <tcp_process+0x5e4>
 8013c56:	4b0e      	ldr	r3, [pc, #56]	; (8013c90 <tcp_process+0x5c0>)
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	617b      	str	r3, [r7, #20]
 8013c5c:	e027      	b.n	8013cae <tcp_process+0x5de>
 8013c5e:	bf00      	nop
 8013c60:	2000711c 	.word	0x2000711c
 8013c64:	20007114 	.word	0x20007114
 8013c68:	2000711a 	.word	0x2000711a
 8013c6c:	20007110 	.word	0x20007110
 8013c70:	20007100 	.word	0x20007100
 8013c74:	2000080c 	.word	0x2000080c
 8013c78:	20000810 	.word	0x20000810
 8013c7c:	0801d808 	.word	0x0801d808
 8013c80:	0801daa8 	.word	0x0801daa8
 8013c84:	0801d854 	.word	0x0801d854
 8013c88:	20007118 	.word	0x20007118
 8013c8c:	2000711d 	.word	0x2000711d
 8013c90:	200070e4 	.word	0x200070e4
 8013c94:	697b      	ldr	r3, [r7, #20]
 8013c96:	68db      	ldr	r3, [r3, #12]
 8013c98:	687a      	ldr	r2, [r7, #4]
 8013c9a:	429a      	cmp	r2, r3
 8013c9c:	d104      	bne.n	8013ca8 <tcp_process+0x5d8>
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	68da      	ldr	r2, [r3, #12]
 8013ca2:	697b      	ldr	r3, [r7, #20]
 8013ca4:	60da      	str	r2, [r3, #12]
 8013ca6:	e005      	b.n	8013cb4 <tcp_process+0x5e4>
 8013ca8:	697b      	ldr	r3, [r7, #20]
 8013caa:	68db      	ldr	r3, [r3, #12]
 8013cac:	617b      	str	r3, [r7, #20]
 8013cae:	697b      	ldr	r3, [r7, #20]
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d1ef      	bne.n	8013c94 <tcp_process+0x5c4>
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	2200      	movs	r2, #0
 8013cb8:	60da      	str	r2, [r3, #12]
 8013cba:	4b77      	ldr	r3, [pc, #476]	; (8013e98 <tcp_process+0x7c8>)
 8013cbc:	2201      	movs	r2, #1
 8013cbe:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	220a      	movs	r2, #10
 8013cc4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8013cc6:	4b75      	ldr	r3, [pc, #468]	; (8013e9c <tcp_process+0x7cc>)
 8013cc8:	681a      	ldr	r2, [r3, #0]
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	60da      	str	r2, [r3, #12]
 8013cce:	4a73      	ldr	r2, [pc, #460]	; (8013e9c <tcp_process+0x7cc>)
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	6013      	str	r3, [r2, #0]
 8013cd4:	f002 fcfa 	bl	80166cc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8013cd8:	e0d2      	b.n	8013e80 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	8b5b      	ldrh	r3, [r3, #26]
 8013cde:	f043 0302 	orr.w	r3, r3, #2
 8013ce2:	b29a      	uxth	r2, r3
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	2208      	movs	r2, #8
 8013cec:	751a      	strb	r2, [r3, #20]
      break;
 8013cee:	e0c7      	b.n	8013e80 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013cf0:	4b6b      	ldr	r3, [pc, #428]	; (8013ea0 <tcp_process+0x7d0>)
 8013cf2:	781b      	ldrb	r3, [r3, #0]
 8013cf4:	f003 0310 	and.w	r3, r3, #16
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	f000 80c1 	beq.w	8013e80 <tcp_process+0x7b0>
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013d02:	4b68      	ldr	r3, [pc, #416]	; (8013ea4 <tcp_process+0x7d4>)
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	429a      	cmp	r2, r3
 8013d08:	f040 80ba 	bne.w	8013e80 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	f040 80b5 	bne.w	8013e80 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	2206      	movs	r2, #6
 8013d1a:	751a      	strb	r2, [r3, #20]
      break;
 8013d1c:	e0b0      	b.n	8013e80 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8013d1e:	6878      	ldr	r0, [r7, #4]
 8013d20:	f000 f9ca 	bl	80140b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013d24:	4b60      	ldr	r3, [pc, #384]	; (8013ea8 <tcp_process+0x7d8>)
 8013d26:	781b      	ldrb	r3, [r3, #0]
 8013d28:	f003 0320 	and.w	r3, r3, #32
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	f000 80a9 	beq.w	8013e84 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	8b5b      	ldrh	r3, [r3, #26]
 8013d36:	f043 0302 	orr.w	r3, r3, #2
 8013d3a:	b29a      	uxth	r2, r3
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013d40:	6878      	ldr	r0, [r7, #4]
 8013d42:	f7fe fd39 	bl	80127b8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013d46:	4b59      	ldr	r3, [pc, #356]	; (8013eac <tcp_process+0x7dc>)
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	687a      	ldr	r2, [r7, #4]
 8013d4c:	429a      	cmp	r2, r3
 8013d4e:	d105      	bne.n	8013d5c <tcp_process+0x68c>
 8013d50:	4b56      	ldr	r3, [pc, #344]	; (8013eac <tcp_process+0x7dc>)
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	68db      	ldr	r3, [r3, #12]
 8013d56:	4a55      	ldr	r2, [pc, #340]	; (8013eac <tcp_process+0x7dc>)
 8013d58:	6013      	str	r3, [r2, #0]
 8013d5a:	e013      	b.n	8013d84 <tcp_process+0x6b4>
 8013d5c:	4b53      	ldr	r3, [pc, #332]	; (8013eac <tcp_process+0x7dc>)
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	613b      	str	r3, [r7, #16]
 8013d62:	e00c      	b.n	8013d7e <tcp_process+0x6ae>
 8013d64:	693b      	ldr	r3, [r7, #16]
 8013d66:	68db      	ldr	r3, [r3, #12]
 8013d68:	687a      	ldr	r2, [r7, #4]
 8013d6a:	429a      	cmp	r2, r3
 8013d6c:	d104      	bne.n	8013d78 <tcp_process+0x6a8>
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	68da      	ldr	r2, [r3, #12]
 8013d72:	693b      	ldr	r3, [r7, #16]
 8013d74:	60da      	str	r2, [r3, #12]
 8013d76:	e005      	b.n	8013d84 <tcp_process+0x6b4>
 8013d78:	693b      	ldr	r3, [r7, #16]
 8013d7a:	68db      	ldr	r3, [r3, #12]
 8013d7c:	613b      	str	r3, [r7, #16]
 8013d7e:	693b      	ldr	r3, [r7, #16]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d1ef      	bne.n	8013d64 <tcp_process+0x694>
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	2200      	movs	r2, #0
 8013d88:	60da      	str	r2, [r3, #12]
 8013d8a:	4b43      	ldr	r3, [pc, #268]	; (8013e98 <tcp_process+0x7c8>)
 8013d8c:	2201      	movs	r2, #1
 8013d8e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	220a      	movs	r2, #10
 8013d94:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013d96:	4b41      	ldr	r3, [pc, #260]	; (8013e9c <tcp_process+0x7cc>)
 8013d98:	681a      	ldr	r2, [r3, #0]
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	60da      	str	r2, [r3, #12]
 8013d9e:	4a3f      	ldr	r2, [pc, #252]	; (8013e9c <tcp_process+0x7cc>)
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	6013      	str	r3, [r2, #0]
 8013da4:	f002 fc92 	bl	80166cc <tcp_timer_needed>
      }
      break;
 8013da8:	e06c      	b.n	8013e84 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8013daa:	6878      	ldr	r0, [r7, #4]
 8013dac:	f000 f984 	bl	80140b8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013db0:	4b3b      	ldr	r3, [pc, #236]	; (8013ea0 <tcp_process+0x7d0>)
 8013db2:	781b      	ldrb	r3, [r3, #0]
 8013db4:	f003 0310 	and.w	r3, r3, #16
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d065      	beq.n	8013e88 <tcp_process+0x7b8>
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013dc0:	4b38      	ldr	r3, [pc, #224]	; (8013ea4 <tcp_process+0x7d4>)
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	429a      	cmp	r2, r3
 8013dc6:	d15f      	bne.n	8013e88 <tcp_process+0x7b8>
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d15b      	bne.n	8013e88 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8013dd0:	6878      	ldr	r0, [r7, #4]
 8013dd2:	f7fe fcf1 	bl	80127b8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013dd6:	4b35      	ldr	r3, [pc, #212]	; (8013eac <tcp_process+0x7dc>)
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	687a      	ldr	r2, [r7, #4]
 8013ddc:	429a      	cmp	r2, r3
 8013dde:	d105      	bne.n	8013dec <tcp_process+0x71c>
 8013de0:	4b32      	ldr	r3, [pc, #200]	; (8013eac <tcp_process+0x7dc>)
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	68db      	ldr	r3, [r3, #12]
 8013de6:	4a31      	ldr	r2, [pc, #196]	; (8013eac <tcp_process+0x7dc>)
 8013de8:	6013      	str	r3, [r2, #0]
 8013dea:	e013      	b.n	8013e14 <tcp_process+0x744>
 8013dec:	4b2f      	ldr	r3, [pc, #188]	; (8013eac <tcp_process+0x7dc>)
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	60fb      	str	r3, [r7, #12]
 8013df2:	e00c      	b.n	8013e0e <tcp_process+0x73e>
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	68db      	ldr	r3, [r3, #12]
 8013df8:	687a      	ldr	r2, [r7, #4]
 8013dfa:	429a      	cmp	r2, r3
 8013dfc:	d104      	bne.n	8013e08 <tcp_process+0x738>
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	68da      	ldr	r2, [r3, #12]
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	60da      	str	r2, [r3, #12]
 8013e06:	e005      	b.n	8013e14 <tcp_process+0x744>
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	68db      	ldr	r3, [r3, #12]
 8013e0c:	60fb      	str	r3, [r7, #12]
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d1ef      	bne.n	8013df4 <tcp_process+0x724>
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	2200      	movs	r2, #0
 8013e18:	60da      	str	r2, [r3, #12]
 8013e1a:	4b1f      	ldr	r3, [pc, #124]	; (8013e98 <tcp_process+0x7c8>)
 8013e1c:	2201      	movs	r2, #1
 8013e1e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	220a      	movs	r2, #10
 8013e24:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013e26:	4b1d      	ldr	r3, [pc, #116]	; (8013e9c <tcp_process+0x7cc>)
 8013e28:	681a      	ldr	r2, [r3, #0]
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	60da      	str	r2, [r3, #12]
 8013e2e:	4a1b      	ldr	r2, [pc, #108]	; (8013e9c <tcp_process+0x7cc>)
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	6013      	str	r3, [r2, #0]
 8013e34:	f002 fc4a 	bl	80166cc <tcp_timer_needed>
      }
      break;
 8013e38:	e026      	b.n	8013e88 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8013e3a:	6878      	ldr	r0, [r7, #4]
 8013e3c:	f000 f93c 	bl	80140b8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013e40:	4b17      	ldr	r3, [pc, #92]	; (8013ea0 <tcp_process+0x7d0>)
 8013e42:	781b      	ldrb	r3, [r3, #0]
 8013e44:	f003 0310 	and.w	r3, r3, #16
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d01f      	beq.n	8013e8c <tcp_process+0x7bc>
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013e50:	4b14      	ldr	r3, [pc, #80]	; (8013ea4 <tcp_process+0x7d4>)
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	429a      	cmp	r2, r3
 8013e56:	d119      	bne.n	8013e8c <tcp_process+0x7bc>
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d115      	bne.n	8013e8c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8013e60:	4b11      	ldr	r3, [pc, #68]	; (8013ea8 <tcp_process+0x7d8>)
 8013e62:	781b      	ldrb	r3, [r3, #0]
 8013e64:	f043 0310 	orr.w	r3, r3, #16
 8013e68:	b2da      	uxtb	r2, r3
 8013e6a:	4b0f      	ldr	r3, [pc, #60]	; (8013ea8 <tcp_process+0x7d8>)
 8013e6c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8013e6e:	e00d      	b.n	8013e8c <tcp_process+0x7bc>
    default:
      break;
 8013e70:	bf00      	nop
 8013e72:	e00c      	b.n	8013e8e <tcp_process+0x7be>
      break;
 8013e74:	bf00      	nop
 8013e76:	e00a      	b.n	8013e8e <tcp_process+0x7be>
      break;
 8013e78:	bf00      	nop
 8013e7a:	e008      	b.n	8013e8e <tcp_process+0x7be>
      break;
 8013e7c:	bf00      	nop
 8013e7e:	e006      	b.n	8013e8e <tcp_process+0x7be>
      break;
 8013e80:	bf00      	nop
 8013e82:	e004      	b.n	8013e8e <tcp_process+0x7be>
      break;
 8013e84:	bf00      	nop
 8013e86:	e002      	b.n	8013e8e <tcp_process+0x7be>
      break;
 8013e88:	bf00      	nop
 8013e8a:	e000      	b.n	8013e8e <tcp_process+0x7be>
      break;
 8013e8c:	bf00      	nop
  }
  return ERR_OK;
 8013e8e:	2300      	movs	r3, #0
}
 8013e90:	4618      	mov	r0, r3
 8013e92:	3724      	adds	r7, #36	; 0x24
 8013e94:	46bd      	mov	sp, r7
 8013e96:	bd90      	pop	{r4, r7, pc}
 8013e98:	200070ec 	.word	0x200070ec
 8013e9c:	200070e8 	.word	0x200070e8
 8013ea0:	2000711c 	.word	0x2000711c
 8013ea4:	20007114 	.word	0x20007114
 8013ea8:	2000711d 	.word	0x2000711d
 8013eac:	200070e4 	.word	0x200070e4

08013eb0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8013eb0:	b590      	push	{r4, r7, lr}
 8013eb2:	b085      	sub	sp, #20
 8013eb4:	af00      	add	r7, sp, #0
 8013eb6:	6078      	str	r0, [r7, #4]
 8013eb8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d106      	bne.n	8013ece <tcp_oos_insert_segment+0x1e>
 8013ec0:	4b3b      	ldr	r3, [pc, #236]	; (8013fb0 <tcp_oos_insert_segment+0x100>)
 8013ec2:	f240 421f 	movw	r2, #1055	; 0x41f
 8013ec6:	493b      	ldr	r1, [pc, #236]	; (8013fb4 <tcp_oos_insert_segment+0x104>)
 8013ec8:	483b      	ldr	r0, [pc, #236]	; (8013fb8 <tcp_oos_insert_segment+0x108>)
 8013eca:	f005 fee9 	bl	8019ca0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	68db      	ldr	r3, [r3, #12]
 8013ed2:	899b      	ldrh	r3, [r3, #12]
 8013ed4:	b29b      	uxth	r3, r3
 8013ed6:	4618      	mov	r0, r3
 8013ed8:	f7fb fc26 	bl	800f728 <lwip_htons>
 8013edc:	4603      	mov	r3, r0
 8013ede:	b2db      	uxtb	r3, r3
 8013ee0:	f003 0301 	and.w	r3, r3, #1
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d028      	beq.n	8013f3a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8013ee8:	6838      	ldr	r0, [r7, #0]
 8013eea:	f7fe fa63 	bl	80123b4 <tcp_segs_free>
    next = NULL;
 8013eee:	2300      	movs	r3, #0
 8013ef0:	603b      	str	r3, [r7, #0]
 8013ef2:	e056      	b.n	8013fa2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013ef4:	683b      	ldr	r3, [r7, #0]
 8013ef6:	68db      	ldr	r3, [r3, #12]
 8013ef8:	899b      	ldrh	r3, [r3, #12]
 8013efa:	b29b      	uxth	r3, r3
 8013efc:	4618      	mov	r0, r3
 8013efe:	f7fb fc13 	bl	800f728 <lwip_htons>
 8013f02:	4603      	mov	r3, r0
 8013f04:	b2db      	uxtb	r3, r3
 8013f06:	f003 0301 	and.w	r3, r3, #1
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d00d      	beq.n	8013f2a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	68db      	ldr	r3, [r3, #12]
 8013f12:	899b      	ldrh	r3, [r3, #12]
 8013f14:	b29c      	uxth	r4, r3
 8013f16:	2001      	movs	r0, #1
 8013f18:	f7fb fc06 	bl	800f728 <lwip_htons>
 8013f1c:	4603      	mov	r3, r0
 8013f1e:	461a      	mov	r2, r3
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	68db      	ldr	r3, [r3, #12]
 8013f24:	4322      	orrs	r2, r4
 8013f26:	b292      	uxth	r2, r2
 8013f28:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8013f2a:	683b      	ldr	r3, [r7, #0]
 8013f2c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8013f2e:	683b      	ldr	r3, [r7, #0]
 8013f30:	681b      	ldr	r3, [r3, #0]
 8013f32:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8013f34:	68f8      	ldr	r0, [r7, #12]
 8013f36:	f7fe fa52 	bl	80123de <tcp_seg_free>
    while (next &&
 8013f3a:	683b      	ldr	r3, [r7, #0]
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d00e      	beq.n	8013f5e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	891b      	ldrh	r3, [r3, #8]
 8013f44:	461a      	mov	r2, r3
 8013f46:	4b1d      	ldr	r3, [pc, #116]	; (8013fbc <tcp_oos_insert_segment+0x10c>)
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	441a      	add	r2, r3
 8013f4c:	683b      	ldr	r3, [r7, #0]
 8013f4e:	68db      	ldr	r3, [r3, #12]
 8013f50:	685b      	ldr	r3, [r3, #4]
 8013f52:	6839      	ldr	r1, [r7, #0]
 8013f54:	8909      	ldrh	r1, [r1, #8]
 8013f56:	440b      	add	r3, r1
 8013f58:	1ad3      	subs	r3, r2, r3
    while (next &&
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	daca      	bge.n	8013ef4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8013f5e:	683b      	ldr	r3, [r7, #0]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d01e      	beq.n	8013fa2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	891b      	ldrh	r3, [r3, #8]
 8013f68:	461a      	mov	r2, r3
 8013f6a:	4b14      	ldr	r3, [pc, #80]	; (8013fbc <tcp_oos_insert_segment+0x10c>)
 8013f6c:	681b      	ldr	r3, [r3, #0]
 8013f6e:	441a      	add	r2, r3
 8013f70:	683b      	ldr	r3, [r7, #0]
 8013f72:	68db      	ldr	r3, [r3, #12]
 8013f74:	685b      	ldr	r3, [r3, #4]
 8013f76:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	dd12      	ble.n	8013fa2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013f7c:	683b      	ldr	r3, [r7, #0]
 8013f7e:	68db      	ldr	r3, [r3, #12]
 8013f80:	685b      	ldr	r3, [r3, #4]
 8013f82:	b29a      	uxth	r2, r3
 8013f84:	4b0d      	ldr	r3, [pc, #52]	; (8013fbc <tcp_oos_insert_segment+0x10c>)
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	b29b      	uxth	r3, r3
 8013f8a:	1ad3      	subs	r3, r2, r3
 8013f8c:	b29a      	uxth	r2, r3
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	685a      	ldr	r2, [r3, #4]
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	891b      	ldrh	r3, [r3, #8]
 8013f9a:	4619      	mov	r1, r3
 8013f9c:	4610      	mov	r0, r2
 8013f9e:	f7fc fe23 	bl	8010be8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	683a      	ldr	r2, [r7, #0]
 8013fa6:	601a      	str	r2, [r3, #0]
}
 8013fa8:	bf00      	nop
 8013faa:	3714      	adds	r7, #20
 8013fac:	46bd      	mov	sp, r7
 8013fae:	bd90      	pop	{r4, r7, pc}
 8013fb0:	0801d808 	.word	0x0801d808
 8013fb4:	0801dac8 	.word	0x0801dac8
 8013fb8:	0801d854 	.word	0x0801d854
 8013fbc:	20007110 	.word	0x20007110

08013fc0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8013fc0:	b5b0      	push	{r4, r5, r7, lr}
 8013fc2:	b086      	sub	sp, #24
 8013fc4:	af00      	add	r7, sp, #0
 8013fc6:	60f8      	str	r0, [r7, #12]
 8013fc8:	60b9      	str	r1, [r7, #8]
 8013fca:	607a      	str	r2, [r7, #4]
 8013fcc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8013fce:	e03e      	b.n	801404e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8013fd0:	68bb      	ldr	r3, [r7, #8]
 8013fd2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8013fd4:	68bb      	ldr	r3, [r7, #8]
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8013fda:	697b      	ldr	r3, [r7, #20]
 8013fdc:	685b      	ldr	r3, [r3, #4]
 8013fde:	4618      	mov	r0, r3
 8013fe0:	f7fd f80e 	bl	8011000 <pbuf_clen>
 8013fe4:	4603      	mov	r3, r0
 8013fe6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013fee:	8a7a      	ldrh	r2, [r7, #18]
 8013ff0:	429a      	cmp	r2, r3
 8013ff2:	d906      	bls.n	8014002 <tcp_free_acked_segments+0x42>
 8013ff4:	4b2a      	ldr	r3, [pc, #168]	; (80140a0 <tcp_free_acked_segments+0xe0>)
 8013ff6:	f240 4257 	movw	r2, #1111	; 0x457
 8013ffa:	492a      	ldr	r1, [pc, #168]	; (80140a4 <tcp_free_acked_segments+0xe4>)
 8013ffc:	482a      	ldr	r0, [pc, #168]	; (80140a8 <tcp_free_acked_segments+0xe8>)
 8013ffe:	f005 fe4f 	bl	8019ca0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8014008:	8a7b      	ldrh	r3, [r7, #18]
 801400a:	1ad3      	subs	r3, r2, r3
 801400c:	b29a      	uxth	r2, r3
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8014014:	697b      	ldr	r3, [r7, #20]
 8014016:	891a      	ldrh	r2, [r3, #8]
 8014018:	4b24      	ldr	r3, [pc, #144]	; (80140ac <tcp_free_acked_segments+0xec>)
 801401a:	881b      	ldrh	r3, [r3, #0]
 801401c:	4413      	add	r3, r2
 801401e:	b29a      	uxth	r2, r3
 8014020:	4b22      	ldr	r3, [pc, #136]	; (80140ac <tcp_free_acked_segments+0xec>)
 8014022:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8014024:	6978      	ldr	r0, [r7, #20]
 8014026:	f7fe f9da 	bl	80123de <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801402a:	68fb      	ldr	r3, [r7, #12]
 801402c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014030:	2b00      	cmp	r3, #0
 8014032:	d00c      	beq.n	801404e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8014034:	68bb      	ldr	r3, [r7, #8]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d109      	bne.n	801404e <tcp_free_acked_segments+0x8e>
 801403a:	683b      	ldr	r3, [r7, #0]
 801403c:	2b00      	cmp	r3, #0
 801403e:	d106      	bne.n	801404e <tcp_free_acked_segments+0x8e>
 8014040:	4b17      	ldr	r3, [pc, #92]	; (80140a0 <tcp_free_acked_segments+0xe0>)
 8014042:	f240 4261 	movw	r2, #1121	; 0x461
 8014046:	491a      	ldr	r1, [pc, #104]	; (80140b0 <tcp_free_acked_segments+0xf0>)
 8014048:	4817      	ldr	r0, [pc, #92]	; (80140a8 <tcp_free_acked_segments+0xe8>)
 801404a:	f005 fe29 	bl	8019ca0 <iprintf>
  while (seg_list != NULL &&
 801404e:	68bb      	ldr	r3, [r7, #8]
 8014050:	2b00      	cmp	r3, #0
 8014052:	d020      	beq.n	8014096 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8014054:	68bb      	ldr	r3, [r7, #8]
 8014056:	68db      	ldr	r3, [r3, #12]
 8014058:	685b      	ldr	r3, [r3, #4]
 801405a:	4618      	mov	r0, r3
 801405c:	f7fb fb79 	bl	800f752 <lwip_htonl>
 8014060:	4604      	mov	r4, r0
 8014062:	68bb      	ldr	r3, [r7, #8]
 8014064:	891b      	ldrh	r3, [r3, #8]
 8014066:	461d      	mov	r5, r3
 8014068:	68bb      	ldr	r3, [r7, #8]
 801406a:	68db      	ldr	r3, [r3, #12]
 801406c:	899b      	ldrh	r3, [r3, #12]
 801406e:	b29b      	uxth	r3, r3
 8014070:	4618      	mov	r0, r3
 8014072:	f7fb fb59 	bl	800f728 <lwip_htons>
 8014076:	4603      	mov	r3, r0
 8014078:	b2db      	uxtb	r3, r3
 801407a:	f003 0303 	and.w	r3, r3, #3
 801407e:	2b00      	cmp	r3, #0
 8014080:	d001      	beq.n	8014086 <tcp_free_acked_segments+0xc6>
 8014082:	2301      	movs	r3, #1
 8014084:	e000      	b.n	8014088 <tcp_free_acked_segments+0xc8>
 8014086:	2300      	movs	r3, #0
 8014088:	442b      	add	r3, r5
 801408a:	18e2      	adds	r2, r4, r3
 801408c:	4b09      	ldr	r3, [pc, #36]	; (80140b4 <tcp_free_acked_segments+0xf4>)
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8014092:	2b00      	cmp	r3, #0
 8014094:	dd9c      	ble.n	8013fd0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8014096:	68bb      	ldr	r3, [r7, #8]
}
 8014098:	4618      	mov	r0, r3
 801409a:	3718      	adds	r7, #24
 801409c:	46bd      	mov	sp, r7
 801409e:	bdb0      	pop	{r4, r5, r7, pc}
 80140a0:	0801d808 	.word	0x0801d808
 80140a4:	0801daf0 	.word	0x0801daf0
 80140a8:	0801d854 	.word	0x0801d854
 80140ac:	20007118 	.word	0x20007118
 80140b0:	0801db18 	.word	0x0801db18
 80140b4:	20007114 	.word	0x20007114

080140b8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80140b8:	b5b0      	push	{r4, r5, r7, lr}
 80140ba:	b094      	sub	sp, #80	; 0x50
 80140bc:	af00      	add	r7, sp, #0
 80140be:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80140c0:	2300      	movs	r3, #0
 80140c2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d106      	bne.n	80140d8 <tcp_receive+0x20>
 80140ca:	4b91      	ldr	r3, [pc, #580]	; (8014310 <tcp_receive+0x258>)
 80140cc:	f240 427b 	movw	r2, #1147	; 0x47b
 80140d0:	4990      	ldr	r1, [pc, #576]	; (8014314 <tcp_receive+0x25c>)
 80140d2:	4891      	ldr	r0, [pc, #580]	; (8014318 <tcp_receive+0x260>)
 80140d4:	f005 fde4 	bl	8019ca0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	7d1b      	ldrb	r3, [r3, #20]
 80140dc:	2b03      	cmp	r3, #3
 80140de:	d806      	bhi.n	80140ee <tcp_receive+0x36>
 80140e0:	4b8b      	ldr	r3, [pc, #556]	; (8014310 <tcp_receive+0x258>)
 80140e2:	f240 427c 	movw	r2, #1148	; 0x47c
 80140e6:	498d      	ldr	r1, [pc, #564]	; (801431c <tcp_receive+0x264>)
 80140e8:	488b      	ldr	r0, [pc, #556]	; (8014318 <tcp_receive+0x260>)
 80140ea:	f005 fdd9 	bl	8019ca0 <iprintf>

  if (flags & TCP_ACK) {
 80140ee:	4b8c      	ldr	r3, [pc, #560]	; (8014320 <tcp_receive+0x268>)
 80140f0:	781b      	ldrb	r3, [r3, #0]
 80140f2:	f003 0310 	and.w	r3, r3, #16
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	f000 8264 	beq.w	80145c4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014102:	461a      	mov	r2, r3
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014108:	4413      	add	r3, r2
 801410a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014110:	4b84      	ldr	r3, [pc, #528]	; (8014324 <tcp_receive+0x26c>)
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	1ad3      	subs	r3, r2, r3
 8014116:	2b00      	cmp	r3, #0
 8014118:	db1b      	blt.n	8014152 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801411e:	4b81      	ldr	r3, [pc, #516]	; (8014324 <tcp_receive+0x26c>)
 8014120:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014122:	429a      	cmp	r2, r3
 8014124:	d106      	bne.n	8014134 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801412a:	4b7f      	ldr	r3, [pc, #508]	; (8014328 <tcp_receive+0x270>)
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	1ad3      	subs	r3, r2, r3
 8014130:	2b00      	cmp	r3, #0
 8014132:	db0e      	blt.n	8014152 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014138:	4b7b      	ldr	r3, [pc, #492]	; (8014328 <tcp_receive+0x270>)
 801413a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801413c:	429a      	cmp	r2, r3
 801413e:	d125      	bne.n	801418c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014140:	4b7a      	ldr	r3, [pc, #488]	; (801432c <tcp_receive+0x274>)
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	89db      	ldrh	r3, [r3, #14]
 8014146:	b29a      	uxth	r2, r3
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801414e:	429a      	cmp	r2, r3
 8014150:	d91c      	bls.n	801418c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8014152:	4b76      	ldr	r3, [pc, #472]	; (801432c <tcp_receive+0x274>)
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	89db      	ldrh	r3, [r3, #14]
 8014158:	b29a      	uxth	r2, r3
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801416c:	429a      	cmp	r2, r3
 801416e:	d205      	bcs.n	801417c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801417c:	4b69      	ldr	r3, [pc, #420]	; (8014324 <tcp_receive+0x26c>)
 801417e:	681a      	ldr	r2, [r3, #0]
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8014184:	4b68      	ldr	r3, [pc, #416]	; (8014328 <tcp_receive+0x270>)
 8014186:	681a      	ldr	r2, [r3, #0]
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801418c:	4b66      	ldr	r3, [pc, #408]	; (8014328 <tcp_receive+0x270>)
 801418e:	681a      	ldr	r2, [r3, #0]
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014194:	1ad3      	subs	r3, r2, r3
 8014196:	2b00      	cmp	r3, #0
 8014198:	dc58      	bgt.n	801424c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801419a:	4b65      	ldr	r3, [pc, #404]	; (8014330 <tcp_receive+0x278>)
 801419c:	881b      	ldrh	r3, [r3, #0]
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d14b      	bne.n	801423a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80141a6:	687a      	ldr	r2, [r7, #4]
 80141a8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80141ac:	4413      	add	r3, r2
 80141ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80141b0:	429a      	cmp	r2, r3
 80141b2:	d142      	bne.n	801423a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	db3d      	blt.n	801423a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80141c2:	4b59      	ldr	r3, [pc, #356]	; (8014328 <tcp_receive+0x270>)
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	429a      	cmp	r2, r3
 80141c8:	d137      	bne.n	801423a <tcp_receive+0x182>
              found_dupack = 1;
 80141ca:	2301      	movs	r3, #1
 80141cc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80141d4:	2bff      	cmp	r3, #255	; 0xff
 80141d6:	d007      	beq.n	80141e8 <tcp_receive+0x130>
                ++pcb->dupacks;
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80141de:	3301      	adds	r3, #1
 80141e0:	b2da      	uxtb	r2, r3
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80141ee:	2b03      	cmp	r3, #3
 80141f0:	d91b      	bls.n	801422a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80141fc:	4413      	add	r3, r2
 80141fe:	b29a      	uxth	r2, r3
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014206:	429a      	cmp	r2, r3
 8014208:	d30a      	bcc.n	8014220 <tcp_receive+0x168>
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014214:	4413      	add	r3, r2
 8014216:	b29a      	uxth	r2, r3
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801421e:	e004      	b.n	801422a <tcp_receive+0x172>
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014226:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014230:	2b02      	cmp	r3, #2
 8014232:	d902      	bls.n	801423a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8014234:	6878      	ldr	r0, [r7, #4]
 8014236:	f001 feed 	bl	8016014 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801423a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801423c:	2b00      	cmp	r3, #0
 801423e:	f040 8161 	bne.w	8014504 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	2200      	movs	r2, #0
 8014246:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801424a:	e15b      	b.n	8014504 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801424c:	4b36      	ldr	r3, [pc, #216]	; (8014328 <tcp_receive+0x270>)
 801424e:	681a      	ldr	r2, [r3, #0]
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014254:	1ad3      	subs	r3, r2, r3
 8014256:	3b01      	subs	r3, #1
 8014258:	2b00      	cmp	r3, #0
 801425a:	f2c0 814e 	blt.w	80144fa <tcp_receive+0x442>
 801425e:	4b32      	ldr	r3, [pc, #200]	; (8014328 <tcp_receive+0x270>)
 8014260:	681a      	ldr	r2, [r3, #0]
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014266:	1ad3      	subs	r3, r2, r3
 8014268:	2b00      	cmp	r3, #0
 801426a:	f300 8146 	bgt.w	80144fa <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	8b5b      	ldrh	r3, [r3, #26]
 8014272:	f003 0304 	and.w	r3, r3, #4
 8014276:	2b00      	cmp	r3, #0
 8014278:	d010      	beq.n	801429c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	8b5b      	ldrh	r3, [r3, #26]
 801427e:	f023 0304 	bic.w	r3, r3, #4
 8014282:	b29a      	uxth	r2, r3
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	2200      	movs	r2, #0
 8014298:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	2200      	movs	r2, #0
 80142a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80142aa:	10db      	asrs	r3, r3, #3
 80142ac:	b21b      	sxth	r3, r3
 80142ae:	b29a      	uxth	r2, r3
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80142b6:	b29b      	uxth	r3, r3
 80142b8:	4413      	add	r3, r2
 80142ba:	b29b      	uxth	r3, r3
 80142bc:	b21a      	sxth	r2, r3
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80142c4:	4b18      	ldr	r3, [pc, #96]	; (8014328 <tcp_receive+0x270>)
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	b29a      	uxth	r2, r3
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80142ce:	b29b      	uxth	r3, r3
 80142d0:	1ad3      	subs	r3, r2, r3
 80142d2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	2200      	movs	r2, #0
 80142d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80142dc:	4b12      	ldr	r3, [pc, #72]	; (8014328 <tcp_receive+0x270>)
 80142de:	681a      	ldr	r2, [r3, #0]
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	7d1b      	ldrb	r3, [r3, #20]
 80142e8:	2b03      	cmp	r3, #3
 80142ea:	f240 8097 	bls.w	801441c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80142fa:	429a      	cmp	r2, r3
 80142fc:	d245      	bcs.n	801438a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	8b5b      	ldrh	r3, [r3, #26]
 8014302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014306:	2b00      	cmp	r3, #0
 8014308:	d014      	beq.n	8014334 <tcp_receive+0x27c>
 801430a:	2301      	movs	r3, #1
 801430c:	e013      	b.n	8014336 <tcp_receive+0x27e>
 801430e:	bf00      	nop
 8014310:	0801d808 	.word	0x0801d808
 8014314:	0801db38 	.word	0x0801db38
 8014318:	0801d854 	.word	0x0801d854
 801431c:	0801db54 	.word	0x0801db54
 8014320:	2000711c 	.word	0x2000711c
 8014324:	20007110 	.word	0x20007110
 8014328:	20007114 	.word	0x20007114
 801432c:	20007100 	.word	0x20007100
 8014330:	2000711a 	.word	0x2000711a
 8014334:	2302      	movs	r3, #2
 8014336:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801433a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801433e:	b29a      	uxth	r2, r3
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014344:	fb12 f303 	smulbb	r3, r2, r3
 8014348:	b29b      	uxth	r3, r3
 801434a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801434c:	4293      	cmp	r3, r2
 801434e:	bf28      	it	cs
 8014350:	4613      	movcs	r3, r2
 8014352:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801435a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801435c:	4413      	add	r3, r2
 801435e:	b29a      	uxth	r2, r3
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014366:	429a      	cmp	r2, r3
 8014368:	d309      	bcc.n	801437e <tcp_receive+0x2c6>
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014370:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014372:	4413      	add	r3, r2
 8014374:	b29a      	uxth	r2, r3
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801437c:	e04e      	b.n	801441c <tcp_receive+0x364>
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014384:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014388:	e048      	b.n	801441c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014390:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014392:	4413      	add	r3, r2
 8014394:	b29a      	uxth	r2, r3
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801439c:	429a      	cmp	r2, r3
 801439e:	d309      	bcc.n	80143b4 <tcp_receive+0x2fc>
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80143a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80143a8:	4413      	add	r3, r2
 80143aa:	b29a      	uxth	r2, r3
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80143b2:	e004      	b.n	80143be <tcp_receive+0x306>
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80143ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80143ca:	429a      	cmp	r2, r3
 80143cc:	d326      	bcc.n	801441c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80143da:	1ad3      	subs	r3, r2, r3
 80143dc:	b29a      	uxth	r2, r3
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80143ee:	4413      	add	r3, r2
 80143f0:	b29a      	uxth	r2, r3
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80143f8:	429a      	cmp	r2, r3
 80143fa:	d30a      	bcc.n	8014412 <tcp_receive+0x35a>
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014406:	4413      	add	r3, r2
 8014408:	b29a      	uxth	r2, r3
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014410:	e004      	b.n	801441c <tcp_receive+0x364>
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014418:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014424:	4a98      	ldr	r2, [pc, #608]	; (8014688 <tcp_receive+0x5d0>)
 8014426:	6878      	ldr	r0, [r7, #4]
 8014428:	f7ff fdca 	bl	8013fc0 <tcp_free_acked_segments>
 801442c:	4602      	mov	r2, r0
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801443a:	4a94      	ldr	r2, [pc, #592]	; (801468c <tcp_receive+0x5d4>)
 801443c:	6878      	ldr	r0, [r7, #4]
 801443e:	f7ff fdbf 	bl	8013fc0 <tcp_free_acked_segments>
 8014442:	4602      	mov	r2, r0
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801444c:	2b00      	cmp	r3, #0
 801444e:	d104      	bne.n	801445a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014456:	861a      	strh	r2, [r3, #48]	; 0x30
 8014458:	e002      	b.n	8014460 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	2200      	movs	r2, #0
 801445e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	2200      	movs	r2, #0
 8014464:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801446a:	2b00      	cmp	r3, #0
 801446c:	d103      	bne.n	8014476 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	2200      	movs	r2, #0
 8014472:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801447c:	4b84      	ldr	r3, [pc, #528]	; (8014690 <tcp_receive+0x5d8>)
 801447e:	881b      	ldrh	r3, [r3, #0]
 8014480:	4413      	add	r3, r2
 8014482:	b29a      	uxth	r2, r3
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	8b5b      	ldrh	r3, [r3, #26]
 801448e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014492:	2b00      	cmp	r3, #0
 8014494:	d035      	beq.n	8014502 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801449a:	2b00      	cmp	r3, #0
 801449c:	d118      	bne.n	80144d0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d00c      	beq.n	80144c0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80144ae:	68db      	ldr	r3, [r3, #12]
 80144b0:	685b      	ldr	r3, [r3, #4]
 80144b2:	4618      	mov	r0, r3
 80144b4:	f7fb f94d 	bl	800f752 <lwip_htonl>
 80144b8:	4603      	mov	r3, r0
 80144ba:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80144bc:	2b00      	cmp	r3, #0
 80144be:	dc20      	bgt.n	8014502 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	8b5b      	ldrh	r3, [r3, #26]
 80144c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80144c8:	b29a      	uxth	r2, r3
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80144ce:	e018      	b.n	8014502 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80144d8:	68db      	ldr	r3, [r3, #12]
 80144da:	685b      	ldr	r3, [r3, #4]
 80144dc:	4618      	mov	r0, r3
 80144de:	f7fb f938 	bl	800f752 <lwip_htonl>
 80144e2:	4603      	mov	r3, r0
 80144e4:	1ae3      	subs	r3, r4, r3
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	dc0b      	bgt.n	8014502 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	8b5b      	ldrh	r3, [r3, #26]
 80144ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80144f2:	b29a      	uxth	r2, r3
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80144f8:	e003      	b.n	8014502 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80144fa:	6878      	ldr	r0, [r7, #4]
 80144fc:	f001 ff76 	bl	80163ec <tcp_send_empty_ack>
 8014500:	e000      	b.n	8014504 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014502:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014508:	2b00      	cmp	r3, #0
 801450a:	d05b      	beq.n	80145c4 <tcp_receive+0x50c>
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014510:	4b60      	ldr	r3, [pc, #384]	; (8014694 <tcp_receive+0x5dc>)
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	1ad3      	subs	r3, r2, r3
 8014516:	2b00      	cmp	r3, #0
 8014518:	da54      	bge.n	80145c4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801451a:	4b5f      	ldr	r3, [pc, #380]	; (8014698 <tcp_receive+0x5e0>)
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	b29a      	uxth	r2, r3
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014524:	b29b      	uxth	r3, r3
 8014526:	1ad3      	subs	r3, r2, r3
 8014528:	b29b      	uxth	r3, r3
 801452a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801452e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014538:	10db      	asrs	r3, r3, #3
 801453a:	b21b      	sxth	r3, r3
 801453c:	b29b      	uxth	r3, r3
 801453e:	1ad3      	subs	r3, r2, r3
 8014540:	b29b      	uxth	r3, r3
 8014542:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801454c:	b29a      	uxth	r2, r3
 801454e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014552:	4413      	add	r3, r2
 8014554:	b29b      	uxth	r3, r3
 8014556:	b21a      	sxth	r2, r3
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801455c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014560:	2b00      	cmp	r3, #0
 8014562:	da05      	bge.n	8014570 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8014564:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014568:	425b      	negs	r3, r3
 801456a:	b29b      	uxth	r3, r3
 801456c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8014570:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801457a:	109b      	asrs	r3, r3, #2
 801457c:	b21b      	sxth	r3, r3
 801457e:	b29b      	uxth	r3, r3
 8014580:	1ad3      	subs	r3, r2, r3
 8014582:	b29b      	uxth	r3, r3
 8014584:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801458e:	b29a      	uxth	r2, r3
 8014590:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014594:	4413      	add	r3, r2
 8014596:	b29b      	uxth	r3, r3
 8014598:	b21a      	sxth	r2, r3
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80145a4:	10db      	asrs	r3, r3, #3
 80145a6:	b21b      	sxth	r3, r3
 80145a8:	b29a      	uxth	r2, r3
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80145b0:	b29b      	uxth	r3, r3
 80145b2:	4413      	add	r3, r2
 80145b4:	b29b      	uxth	r3, r3
 80145b6:	b21a      	sxth	r2, r3
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	2200      	movs	r2, #0
 80145c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80145c4:	4b35      	ldr	r3, [pc, #212]	; (801469c <tcp_receive+0x5e4>)
 80145c6:	881b      	ldrh	r3, [r3, #0]
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	f000 84e2 	beq.w	8014f92 <tcp_receive+0xeda>
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	7d1b      	ldrb	r3, [r3, #20]
 80145d2:	2b06      	cmp	r3, #6
 80145d4:	f200 84dd 	bhi.w	8014f92 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80145dc:	4b30      	ldr	r3, [pc, #192]	; (80146a0 <tcp_receive+0x5e8>)
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	1ad3      	subs	r3, r2, r3
 80145e2:	3b01      	subs	r3, #1
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	f2c0 808f 	blt.w	8014708 <tcp_receive+0x650>
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80145ee:	4b2b      	ldr	r3, [pc, #172]	; (801469c <tcp_receive+0x5e4>)
 80145f0:	881b      	ldrh	r3, [r3, #0]
 80145f2:	4619      	mov	r1, r3
 80145f4:	4b2a      	ldr	r3, [pc, #168]	; (80146a0 <tcp_receive+0x5e8>)
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	440b      	add	r3, r1
 80145fa:	1ad3      	subs	r3, r2, r3
 80145fc:	3301      	adds	r3, #1
 80145fe:	2b00      	cmp	r3, #0
 8014600:	f300 8082 	bgt.w	8014708 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8014604:	4b27      	ldr	r3, [pc, #156]	; (80146a4 <tcp_receive+0x5ec>)
 8014606:	685b      	ldr	r3, [r3, #4]
 8014608:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801460e:	4b24      	ldr	r3, [pc, #144]	; (80146a0 <tcp_receive+0x5e8>)
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	1ad3      	subs	r3, r2, r3
 8014614:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8014616:	4b23      	ldr	r3, [pc, #140]	; (80146a4 <tcp_receive+0x5ec>)
 8014618:	685b      	ldr	r3, [r3, #4]
 801461a:	2b00      	cmp	r3, #0
 801461c:	d106      	bne.n	801462c <tcp_receive+0x574>
 801461e:	4b22      	ldr	r3, [pc, #136]	; (80146a8 <tcp_receive+0x5f0>)
 8014620:	f240 5294 	movw	r2, #1428	; 0x594
 8014624:	4921      	ldr	r1, [pc, #132]	; (80146ac <tcp_receive+0x5f4>)
 8014626:	4822      	ldr	r0, [pc, #136]	; (80146b0 <tcp_receive+0x5f8>)
 8014628:	f005 fb3a 	bl	8019ca0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801462e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8014632:	4293      	cmp	r3, r2
 8014634:	d906      	bls.n	8014644 <tcp_receive+0x58c>
 8014636:	4b1c      	ldr	r3, [pc, #112]	; (80146a8 <tcp_receive+0x5f0>)
 8014638:	f240 5295 	movw	r2, #1429	; 0x595
 801463c:	491d      	ldr	r1, [pc, #116]	; (80146b4 <tcp_receive+0x5fc>)
 801463e:	481c      	ldr	r0, [pc, #112]	; (80146b0 <tcp_receive+0x5f8>)
 8014640:	f005 fb2e 	bl	8019ca0 <iprintf>
      off = (u16_t)off32;
 8014644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014646:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801464a:	4b16      	ldr	r3, [pc, #88]	; (80146a4 <tcp_receive+0x5ec>)
 801464c:	685b      	ldr	r3, [r3, #4]
 801464e:	891b      	ldrh	r3, [r3, #8]
 8014650:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014654:	429a      	cmp	r2, r3
 8014656:	d906      	bls.n	8014666 <tcp_receive+0x5ae>
 8014658:	4b13      	ldr	r3, [pc, #76]	; (80146a8 <tcp_receive+0x5f0>)
 801465a:	f240 5297 	movw	r2, #1431	; 0x597
 801465e:	4916      	ldr	r1, [pc, #88]	; (80146b8 <tcp_receive+0x600>)
 8014660:	4813      	ldr	r0, [pc, #76]	; (80146b0 <tcp_receive+0x5f8>)
 8014662:	f005 fb1d 	bl	8019ca0 <iprintf>
      inseg.len -= off;
 8014666:	4b0f      	ldr	r3, [pc, #60]	; (80146a4 <tcp_receive+0x5ec>)
 8014668:	891a      	ldrh	r2, [r3, #8]
 801466a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801466e:	1ad3      	subs	r3, r2, r3
 8014670:	b29a      	uxth	r2, r3
 8014672:	4b0c      	ldr	r3, [pc, #48]	; (80146a4 <tcp_receive+0x5ec>)
 8014674:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8014676:	4b0b      	ldr	r3, [pc, #44]	; (80146a4 <tcp_receive+0x5ec>)
 8014678:	685b      	ldr	r3, [r3, #4]
 801467a:	891a      	ldrh	r2, [r3, #8]
 801467c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014680:	1ad3      	subs	r3, r2, r3
 8014682:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8014684:	e02a      	b.n	80146dc <tcp_receive+0x624>
 8014686:	bf00      	nop
 8014688:	0801db70 	.word	0x0801db70
 801468c:	0801db78 	.word	0x0801db78
 8014690:	20007118 	.word	0x20007118
 8014694:	20007114 	.word	0x20007114
 8014698:	200070d8 	.word	0x200070d8
 801469c:	2000711a 	.word	0x2000711a
 80146a0:	20007110 	.word	0x20007110
 80146a4:	200070f0 	.word	0x200070f0
 80146a8:	0801d808 	.word	0x0801d808
 80146ac:	0801db80 	.word	0x0801db80
 80146b0:	0801d854 	.word	0x0801d854
 80146b4:	0801db90 	.word	0x0801db90
 80146b8:	0801dba0 	.word	0x0801dba0
        off -= p->len;
 80146bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80146be:	895b      	ldrh	r3, [r3, #10]
 80146c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80146c4:	1ad3      	subs	r3, r2, r3
 80146c6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80146ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80146cc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80146ce:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80146d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80146d2:	2200      	movs	r2, #0
 80146d4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80146d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80146dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80146de:	895b      	ldrh	r3, [r3, #10]
 80146e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80146e4:	429a      	cmp	r2, r3
 80146e6:	d8e9      	bhi.n	80146bc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80146e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80146ec:	4619      	mov	r1, r3
 80146ee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80146f0:	f7fc fb78 	bl	8010de4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146f8:	4a91      	ldr	r2, [pc, #580]	; (8014940 <tcp_receive+0x888>)
 80146fa:	6013      	str	r3, [r2, #0]
 80146fc:	4b91      	ldr	r3, [pc, #580]	; (8014944 <tcp_receive+0x88c>)
 80146fe:	68db      	ldr	r3, [r3, #12]
 8014700:	4a8f      	ldr	r2, [pc, #572]	; (8014940 <tcp_receive+0x888>)
 8014702:	6812      	ldr	r2, [r2, #0]
 8014704:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014706:	e00d      	b.n	8014724 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8014708:	4b8d      	ldr	r3, [pc, #564]	; (8014940 <tcp_receive+0x888>)
 801470a:	681a      	ldr	r2, [r3, #0]
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014710:	1ad3      	subs	r3, r2, r3
 8014712:	2b00      	cmp	r3, #0
 8014714:	da06      	bge.n	8014724 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	8b5b      	ldrh	r3, [r3, #26]
 801471a:	f043 0302 	orr.w	r3, r3, #2
 801471e:	b29a      	uxth	r2, r3
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014724:	4b86      	ldr	r3, [pc, #536]	; (8014940 <tcp_receive+0x888>)
 8014726:	681a      	ldr	r2, [r3, #0]
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801472c:	1ad3      	subs	r3, r2, r3
 801472e:	2b00      	cmp	r3, #0
 8014730:	f2c0 842a 	blt.w	8014f88 <tcp_receive+0xed0>
 8014734:	4b82      	ldr	r3, [pc, #520]	; (8014940 <tcp_receive+0x888>)
 8014736:	681a      	ldr	r2, [r3, #0]
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801473c:	6879      	ldr	r1, [r7, #4]
 801473e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014740:	440b      	add	r3, r1
 8014742:	1ad3      	subs	r3, r2, r3
 8014744:	3301      	adds	r3, #1
 8014746:	2b00      	cmp	r3, #0
 8014748:	f300 841e 	bgt.w	8014f88 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014750:	4b7b      	ldr	r3, [pc, #492]	; (8014940 <tcp_receive+0x888>)
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	429a      	cmp	r2, r3
 8014756:	f040 829a 	bne.w	8014c8e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801475a:	4b7a      	ldr	r3, [pc, #488]	; (8014944 <tcp_receive+0x88c>)
 801475c:	891c      	ldrh	r4, [r3, #8]
 801475e:	4b79      	ldr	r3, [pc, #484]	; (8014944 <tcp_receive+0x88c>)
 8014760:	68db      	ldr	r3, [r3, #12]
 8014762:	899b      	ldrh	r3, [r3, #12]
 8014764:	b29b      	uxth	r3, r3
 8014766:	4618      	mov	r0, r3
 8014768:	f7fa ffde 	bl	800f728 <lwip_htons>
 801476c:	4603      	mov	r3, r0
 801476e:	b2db      	uxtb	r3, r3
 8014770:	f003 0303 	and.w	r3, r3, #3
 8014774:	2b00      	cmp	r3, #0
 8014776:	d001      	beq.n	801477c <tcp_receive+0x6c4>
 8014778:	2301      	movs	r3, #1
 801477a:	e000      	b.n	801477e <tcp_receive+0x6c6>
 801477c:	2300      	movs	r3, #0
 801477e:	4423      	add	r3, r4
 8014780:	b29a      	uxth	r2, r3
 8014782:	4b71      	ldr	r3, [pc, #452]	; (8014948 <tcp_receive+0x890>)
 8014784:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801478a:	4b6f      	ldr	r3, [pc, #444]	; (8014948 <tcp_receive+0x890>)
 801478c:	881b      	ldrh	r3, [r3, #0]
 801478e:	429a      	cmp	r2, r3
 8014790:	d275      	bcs.n	801487e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014792:	4b6c      	ldr	r3, [pc, #432]	; (8014944 <tcp_receive+0x88c>)
 8014794:	68db      	ldr	r3, [r3, #12]
 8014796:	899b      	ldrh	r3, [r3, #12]
 8014798:	b29b      	uxth	r3, r3
 801479a:	4618      	mov	r0, r3
 801479c:	f7fa ffc4 	bl	800f728 <lwip_htons>
 80147a0:	4603      	mov	r3, r0
 80147a2:	b2db      	uxtb	r3, r3
 80147a4:	f003 0301 	and.w	r3, r3, #1
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d01f      	beq.n	80147ec <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80147ac:	4b65      	ldr	r3, [pc, #404]	; (8014944 <tcp_receive+0x88c>)
 80147ae:	68db      	ldr	r3, [r3, #12]
 80147b0:	899b      	ldrh	r3, [r3, #12]
 80147b2:	b29b      	uxth	r3, r3
 80147b4:	b21b      	sxth	r3, r3
 80147b6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80147ba:	b21c      	sxth	r4, r3
 80147bc:	4b61      	ldr	r3, [pc, #388]	; (8014944 <tcp_receive+0x88c>)
 80147be:	68db      	ldr	r3, [r3, #12]
 80147c0:	899b      	ldrh	r3, [r3, #12]
 80147c2:	b29b      	uxth	r3, r3
 80147c4:	4618      	mov	r0, r3
 80147c6:	f7fa ffaf 	bl	800f728 <lwip_htons>
 80147ca:	4603      	mov	r3, r0
 80147cc:	b2db      	uxtb	r3, r3
 80147ce:	b29b      	uxth	r3, r3
 80147d0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80147d4:	b29b      	uxth	r3, r3
 80147d6:	4618      	mov	r0, r3
 80147d8:	f7fa ffa6 	bl	800f728 <lwip_htons>
 80147dc:	4603      	mov	r3, r0
 80147de:	b21b      	sxth	r3, r3
 80147e0:	4323      	orrs	r3, r4
 80147e2:	b21a      	sxth	r2, r3
 80147e4:	4b57      	ldr	r3, [pc, #348]	; (8014944 <tcp_receive+0x88c>)
 80147e6:	68db      	ldr	r3, [r3, #12]
 80147e8:	b292      	uxth	r2, r2
 80147ea:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80147f0:	4b54      	ldr	r3, [pc, #336]	; (8014944 <tcp_receive+0x88c>)
 80147f2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80147f4:	4b53      	ldr	r3, [pc, #332]	; (8014944 <tcp_receive+0x88c>)
 80147f6:	68db      	ldr	r3, [r3, #12]
 80147f8:	899b      	ldrh	r3, [r3, #12]
 80147fa:	b29b      	uxth	r3, r3
 80147fc:	4618      	mov	r0, r3
 80147fe:	f7fa ff93 	bl	800f728 <lwip_htons>
 8014802:	4603      	mov	r3, r0
 8014804:	b2db      	uxtb	r3, r3
 8014806:	f003 0302 	and.w	r3, r3, #2
 801480a:	2b00      	cmp	r3, #0
 801480c:	d005      	beq.n	801481a <tcp_receive+0x762>
            inseg.len -= 1;
 801480e:	4b4d      	ldr	r3, [pc, #308]	; (8014944 <tcp_receive+0x88c>)
 8014810:	891b      	ldrh	r3, [r3, #8]
 8014812:	3b01      	subs	r3, #1
 8014814:	b29a      	uxth	r2, r3
 8014816:	4b4b      	ldr	r3, [pc, #300]	; (8014944 <tcp_receive+0x88c>)
 8014818:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801481a:	4b4a      	ldr	r3, [pc, #296]	; (8014944 <tcp_receive+0x88c>)
 801481c:	685b      	ldr	r3, [r3, #4]
 801481e:	4a49      	ldr	r2, [pc, #292]	; (8014944 <tcp_receive+0x88c>)
 8014820:	8912      	ldrh	r2, [r2, #8]
 8014822:	4611      	mov	r1, r2
 8014824:	4618      	mov	r0, r3
 8014826:	f7fc f9df 	bl	8010be8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801482a:	4b46      	ldr	r3, [pc, #280]	; (8014944 <tcp_receive+0x88c>)
 801482c:	891c      	ldrh	r4, [r3, #8]
 801482e:	4b45      	ldr	r3, [pc, #276]	; (8014944 <tcp_receive+0x88c>)
 8014830:	68db      	ldr	r3, [r3, #12]
 8014832:	899b      	ldrh	r3, [r3, #12]
 8014834:	b29b      	uxth	r3, r3
 8014836:	4618      	mov	r0, r3
 8014838:	f7fa ff76 	bl	800f728 <lwip_htons>
 801483c:	4603      	mov	r3, r0
 801483e:	b2db      	uxtb	r3, r3
 8014840:	f003 0303 	and.w	r3, r3, #3
 8014844:	2b00      	cmp	r3, #0
 8014846:	d001      	beq.n	801484c <tcp_receive+0x794>
 8014848:	2301      	movs	r3, #1
 801484a:	e000      	b.n	801484e <tcp_receive+0x796>
 801484c:	2300      	movs	r3, #0
 801484e:	4423      	add	r3, r4
 8014850:	b29a      	uxth	r2, r3
 8014852:	4b3d      	ldr	r3, [pc, #244]	; (8014948 <tcp_receive+0x890>)
 8014854:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014856:	4b3c      	ldr	r3, [pc, #240]	; (8014948 <tcp_receive+0x890>)
 8014858:	881b      	ldrh	r3, [r3, #0]
 801485a:	461a      	mov	r2, r3
 801485c:	4b38      	ldr	r3, [pc, #224]	; (8014940 <tcp_receive+0x888>)
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	441a      	add	r2, r3
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014866:	6879      	ldr	r1, [r7, #4]
 8014868:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801486a:	440b      	add	r3, r1
 801486c:	429a      	cmp	r2, r3
 801486e:	d006      	beq.n	801487e <tcp_receive+0x7c6>
 8014870:	4b36      	ldr	r3, [pc, #216]	; (801494c <tcp_receive+0x894>)
 8014872:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8014876:	4936      	ldr	r1, [pc, #216]	; (8014950 <tcp_receive+0x898>)
 8014878:	4836      	ldr	r0, [pc, #216]	; (8014954 <tcp_receive+0x89c>)
 801487a:	f005 fa11 	bl	8019ca0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014882:	2b00      	cmp	r3, #0
 8014884:	f000 80e7 	beq.w	8014a56 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014888:	4b2e      	ldr	r3, [pc, #184]	; (8014944 <tcp_receive+0x88c>)
 801488a:	68db      	ldr	r3, [r3, #12]
 801488c:	899b      	ldrh	r3, [r3, #12]
 801488e:	b29b      	uxth	r3, r3
 8014890:	4618      	mov	r0, r3
 8014892:	f7fa ff49 	bl	800f728 <lwip_htons>
 8014896:	4603      	mov	r3, r0
 8014898:	b2db      	uxtb	r3, r3
 801489a:	f003 0301 	and.w	r3, r3, #1
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d010      	beq.n	80148c4 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80148a2:	e00a      	b.n	80148ba <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80148a8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80148ae:	681a      	ldr	r2, [r3, #0]
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80148b4:	68f8      	ldr	r0, [r7, #12]
 80148b6:	f7fd fd92 	bl	80123de <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d1f0      	bne.n	80148a4 <tcp_receive+0x7ec>
 80148c2:	e0c8      	b.n	8014a56 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80148c8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80148ca:	e052      	b.n	8014972 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80148cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80148ce:	68db      	ldr	r3, [r3, #12]
 80148d0:	899b      	ldrh	r3, [r3, #12]
 80148d2:	b29b      	uxth	r3, r3
 80148d4:	4618      	mov	r0, r3
 80148d6:	f7fa ff27 	bl	800f728 <lwip_htons>
 80148da:	4603      	mov	r3, r0
 80148dc:	b2db      	uxtb	r3, r3
 80148de:	f003 0301 	and.w	r3, r3, #1
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d03d      	beq.n	8014962 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80148e6:	4b17      	ldr	r3, [pc, #92]	; (8014944 <tcp_receive+0x88c>)
 80148e8:	68db      	ldr	r3, [r3, #12]
 80148ea:	899b      	ldrh	r3, [r3, #12]
 80148ec:	b29b      	uxth	r3, r3
 80148ee:	4618      	mov	r0, r3
 80148f0:	f7fa ff1a 	bl	800f728 <lwip_htons>
 80148f4:	4603      	mov	r3, r0
 80148f6:	b2db      	uxtb	r3, r3
 80148f8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d130      	bne.n	8014962 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8014900:	4b10      	ldr	r3, [pc, #64]	; (8014944 <tcp_receive+0x88c>)
 8014902:	68db      	ldr	r3, [r3, #12]
 8014904:	899b      	ldrh	r3, [r3, #12]
 8014906:	b29c      	uxth	r4, r3
 8014908:	2001      	movs	r0, #1
 801490a:	f7fa ff0d 	bl	800f728 <lwip_htons>
 801490e:	4603      	mov	r3, r0
 8014910:	461a      	mov	r2, r3
 8014912:	4b0c      	ldr	r3, [pc, #48]	; (8014944 <tcp_receive+0x88c>)
 8014914:	68db      	ldr	r3, [r3, #12]
 8014916:	4322      	orrs	r2, r4
 8014918:	b292      	uxth	r2, r2
 801491a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801491c:	4b09      	ldr	r3, [pc, #36]	; (8014944 <tcp_receive+0x88c>)
 801491e:	891c      	ldrh	r4, [r3, #8]
 8014920:	4b08      	ldr	r3, [pc, #32]	; (8014944 <tcp_receive+0x88c>)
 8014922:	68db      	ldr	r3, [r3, #12]
 8014924:	899b      	ldrh	r3, [r3, #12]
 8014926:	b29b      	uxth	r3, r3
 8014928:	4618      	mov	r0, r3
 801492a:	f7fa fefd 	bl	800f728 <lwip_htons>
 801492e:	4603      	mov	r3, r0
 8014930:	b2db      	uxtb	r3, r3
 8014932:	f003 0303 	and.w	r3, r3, #3
 8014936:	2b00      	cmp	r3, #0
 8014938:	d00e      	beq.n	8014958 <tcp_receive+0x8a0>
 801493a:	2301      	movs	r3, #1
 801493c:	e00d      	b.n	801495a <tcp_receive+0x8a2>
 801493e:	bf00      	nop
 8014940:	20007110 	.word	0x20007110
 8014944:	200070f0 	.word	0x200070f0
 8014948:	2000711a 	.word	0x2000711a
 801494c:	0801d808 	.word	0x0801d808
 8014950:	0801dbb0 	.word	0x0801dbb0
 8014954:	0801d854 	.word	0x0801d854
 8014958:	2300      	movs	r3, #0
 801495a:	4423      	add	r3, r4
 801495c:	b29a      	uxth	r2, r3
 801495e:	4b98      	ldr	r3, [pc, #608]	; (8014bc0 <tcp_receive+0xb08>)
 8014960:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8014962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014964:	613b      	str	r3, [r7, #16]
              next = next->next;
 8014966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801496c:	6938      	ldr	r0, [r7, #16]
 801496e:	f7fd fd36 	bl	80123de <tcp_seg_free>
            while (next &&
 8014972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014974:	2b00      	cmp	r3, #0
 8014976:	d00e      	beq.n	8014996 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8014978:	4b91      	ldr	r3, [pc, #580]	; (8014bc0 <tcp_receive+0xb08>)
 801497a:	881b      	ldrh	r3, [r3, #0]
 801497c:	461a      	mov	r2, r3
 801497e:	4b91      	ldr	r3, [pc, #580]	; (8014bc4 <tcp_receive+0xb0c>)
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	441a      	add	r2, r3
 8014984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014986:	68db      	ldr	r3, [r3, #12]
 8014988:	685b      	ldr	r3, [r3, #4]
 801498a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801498c:	8909      	ldrh	r1, [r1, #8]
 801498e:	440b      	add	r3, r1
 8014990:	1ad3      	subs	r3, r2, r3
            while (next &&
 8014992:	2b00      	cmp	r3, #0
 8014994:	da9a      	bge.n	80148cc <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8014996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014998:	2b00      	cmp	r3, #0
 801499a:	d059      	beq.n	8014a50 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 801499c:	4b88      	ldr	r3, [pc, #544]	; (8014bc0 <tcp_receive+0xb08>)
 801499e:	881b      	ldrh	r3, [r3, #0]
 80149a0:	461a      	mov	r2, r3
 80149a2:	4b88      	ldr	r3, [pc, #544]	; (8014bc4 <tcp_receive+0xb0c>)
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	441a      	add	r2, r3
 80149a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149aa:	68db      	ldr	r3, [r3, #12]
 80149ac:	685b      	ldr	r3, [r3, #4]
 80149ae:	1ad3      	subs	r3, r2, r3
            if (next &&
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	dd4d      	ble.n	8014a50 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80149b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149b6:	68db      	ldr	r3, [r3, #12]
 80149b8:	685b      	ldr	r3, [r3, #4]
 80149ba:	b29a      	uxth	r2, r3
 80149bc:	4b81      	ldr	r3, [pc, #516]	; (8014bc4 <tcp_receive+0xb0c>)
 80149be:	681b      	ldr	r3, [r3, #0]
 80149c0:	b29b      	uxth	r3, r3
 80149c2:	1ad3      	subs	r3, r2, r3
 80149c4:	b29a      	uxth	r2, r3
 80149c6:	4b80      	ldr	r3, [pc, #512]	; (8014bc8 <tcp_receive+0xb10>)
 80149c8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80149ca:	4b7f      	ldr	r3, [pc, #508]	; (8014bc8 <tcp_receive+0xb10>)
 80149cc:	68db      	ldr	r3, [r3, #12]
 80149ce:	899b      	ldrh	r3, [r3, #12]
 80149d0:	b29b      	uxth	r3, r3
 80149d2:	4618      	mov	r0, r3
 80149d4:	f7fa fea8 	bl	800f728 <lwip_htons>
 80149d8:	4603      	mov	r3, r0
 80149da:	b2db      	uxtb	r3, r3
 80149dc:	f003 0302 	and.w	r3, r3, #2
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d005      	beq.n	80149f0 <tcp_receive+0x938>
                inseg.len -= 1;
 80149e4:	4b78      	ldr	r3, [pc, #480]	; (8014bc8 <tcp_receive+0xb10>)
 80149e6:	891b      	ldrh	r3, [r3, #8]
 80149e8:	3b01      	subs	r3, #1
 80149ea:	b29a      	uxth	r2, r3
 80149ec:	4b76      	ldr	r3, [pc, #472]	; (8014bc8 <tcp_receive+0xb10>)
 80149ee:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80149f0:	4b75      	ldr	r3, [pc, #468]	; (8014bc8 <tcp_receive+0xb10>)
 80149f2:	685b      	ldr	r3, [r3, #4]
 80149f4:	4a74      	ldr	r2, [pc, #464]	; (8014bc8 <tcp_receive+0xb10>)
 80149f6:	8912      	ldrh	r2, [r2, #8]
 80149f8:	4611      	mov	r1, r2
 80149fa:	4618      	mov	r0, r3
 80149fc:	f7fc f8f4 	bl	8010be8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8014a00:	4b71      	ldr	r3, [pc, #452]	; (8014bc8 <tcp_receive+0xb10>)
 8014a02:	891c      	ldrh	r4, [r3, #8]
 8014a04:	4b70      	ldr	r3, [pc, #448]	; (8014bc8 <tcp_receive+0xb10>)
 8014a06:	68db      	ldr	r3, [r3, #12]
 8014a08:	899b      	ldrh	r3, [r3, #12]
 8014a0a:	b29b      	uxth	r3, r3
 8014a0c:	4618      	mov	r0, r3
 8014a0e:	f7fa fe8b 	bl	800f728 <lwip_htons>
 8014a12:	4603      	mov	r3, r0
 8014a14:	b2db      	uxtb	r3, r3
 8014a16:	f003 0303 	and.w	r3, r3, #3
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d001      	beq.n	8014a22 <tcp_receive+0x96a>
 8014a1e:	2301      	movs	r3, #1
 8014a20:	e000      	b.n	8014a24 <tcp_receive+0x96c>
 8014a22:	2300      	movs	r3, #0
 8014a24:	4423      	add	r3, r4
 8014a26:	b29a      	uxth	r2, r3
 8014a28:	4b65      	ldr	r3, [pc, #404]	; (8014bc0 <tcp_receive+0xb08>)
 8014a2a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8014a2c:	4b64      	ldr	r3, [pc, #400]	; (8014bc0 <tcp_receive+0xb08>)
 8014a2e:	881b      	ldrh	r3, [r3, #0]
 8014a30:	461a      	mov	r2, r3
 8014a32:	4b64      	ldr	r3, [pc, #400]	; (8014bc4 <tcp_receive+0xb0c>)
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	441a      	add	r2, r3
 8014a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a3a:	68db      	ldr	r3, [r3, #12]
 8014a3c:	685b      	ldr	r3, [r3, #4]
 8014a3e:	429a      	cmp	r2, r3
 8014a40:	d006      	beq.n	8014a50 <tcp_receive+0x998>
 8014a42:	4b62      	ldr	r3, [pc, #392]	; (8014bcc <tcp_receive+0xb14>)
 8014a44:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8014a48:	4961      	ldr	r1, [pc, #388]	; (8014bd0 <tcp_receive+0xb18>)
 8014a4a:	4862      	ldr	r0, [pc, #392]	; (8014bd4 <tcp_receive+0xb1c>)
 8014a4c:	f005 f928 	bl	8019ca0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014a54:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8014a56:	4b5a      	ldr	r3, [pc, #360]	; (8014bc0 <tcp_receive+0xb08>)
 8014a58:	881b      	ldrh	r3, [r3, #0]
 8014a5a:	461a      	mov	r2, r3
 8014a5c:	4b59      	ldr	r3, [pc, #356]	; (8014bc4 <tcp_receive+0xb0c>)
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	441a      	add	r2, r3
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014a6a:	4b55      	ldr	r3, [pc, #340]	; (8014bc0 <tcp_receive+0xb08>)
 8014a6c:	881b      	ldrh	r3, [r3, #0]
 8014a6e:	429a      	cmp	r2, r3
 8014a70:	d206      	bcs.n	8014a80 <tcp_receive+0x9c8>
 8014a72:	4b56      	ldr	r3, [pc, #344]	; (8014bcc <tcp_receive+0xb14>)
 8014a74:	f240 6207 	movw	r2, #1543	; 0x607
 8014a78:	4957      	ldr	r1, [pc, #348]	; (8014bd8 <tcp_receive+0xb20>)
 8014a7a:	4856      	ldr	r0, [pc, #344]	; (8014bd4 <tcp_receive+0xb1c>)
 8014a7c:	f005 f910 	bl	8019ca0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014a84:	4b4e      	ldr	r3, [pc, #312]	; (8014bc0 <tcp_receive+0xb08>)
 8014a86:	881b      	ldrh	r3, [r3, #0]
 8014a88:	1ad3      	subs	r3, r2, r3
 8014a8a:	b29a      	uxth	r2, r3
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8014a90:	6878      	ldr	r0, [r7, #4]
 8014a92:	f7fc ffc1 	bl	8011a18 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8014a96:	4b4c      	ldr	r3, [pc, #304]	; (8014bc8 <tcp_receive+0xb10>)
 8014a98:	685b      	ldr	r3, [r3, #4]
 8014a9a:	891b      	ldrh	r3, [r3, #8]
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d006      	beq.n	8014aae <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8014aa0:	4b49      	ldr	r3, [pc, #292]	; (8014bc8 <tcp_receive+0xb10>)
 8014aa2:	685b      	ldr	r3, [r3, #4]
 8014aa4:	4a4d      	ldr	r2, [pc, #308]	; (8014bdc <tcp_receive+0xb24>)
 8014aa6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8014aa8:	4b47      	ldr	r3, [pc, #284]	; (8014bc8 <tcp_receive+0xb10>)
 8014aaa:	2200      	movs	r2, #0
 8014aac:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014aae:	4b46      	ldr	r3, [pc, #280]	; (8014bc8 <tcp_receive+0xb10>)
 8014ab0:	68db      	ldr	r3, [r3, #12]
 8014ab2:	899b      	ldrh	r3, [r3, #12]
 8014ab4:	b29b      	uxth	r3, r3
 8014ab6:	4618      	mov	r0, r3
 8014ab8:	f7fa fe36 	bl	800f728 <lwip_htons>
 8014abc:	4603      	mov	r3, r0
 8014abe:	b2db      	uxtb	r3, r3
 8014ac0:	f003 0301 	and.w	r3, r3, #1
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	f000 80b8 	beq.w	8014c3a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8014aca:	4b45      	ldr	r3, [pc, #276]	; (8014be0 <tcp_receive+0xb28>)
 8014acc:	781b      	ldrb	r3, [r3, #0]
 8014ace:	f043 0320 	orr.w	r3, r3, #32
 8014ad2:	b2da      	uxtb	r2, r3
 8014ad4:	4b42      	ldr	r3, [pc, #264]	; (8014be0 <tcp_receive+0xb28>)
 8014ad6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8014ad8:	e0af      	b.n	8014c3a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014ade:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014ae4:	68db      	ldr	r3, [r3, #12]
 8014ae6:	685b      	ldr	r3, [r3, #4]
 8014ae8:	4a36      	ldr	r2, [pc, #216]	; (8014bc4 <tcp_receive+0xb0c>)
 8014aea:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8014aec:	68bb      	ldr	r3, [r7, #8]
 8014aee:	891b      	ldrh	r3, [r3, #8]
 8014af0:	461c      	mov	r4, r3
 8014af2:	68bb      	ldr	r3, [r7, #8]
 8014af4:	68db      	ldr	r3, [r3, #12]
 8014af6:	899b      	ldrh	r3, [r3, #12]
 8014af8:	b29b      	uxth	r3, r3
 8014afa:	4618      	mov	r0, r3
 8014afc:	f7fa fe14 	bl	800f728 <lwip_htons>
 8014b00:	4603      	mov	r3, r0
 8014b02:	b2db      	uxtb	r3, r3
 8014b04:	f003 0303 	and.w	r3, r3, #3
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d001      	beq.n	8014b10 <tcp_receive+0xa58>
 8014b0c:	2301      	movs	r3, #1
 8014b0e:	e000      	b.n	8014b12 <tcp_receive+0xa5a>
 8014b10:	2300      	movs	r3, #0
 8014b12:	191a      	adds	r2, r3, r4
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b18:	441a      	add	r2, r3
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014b22:	461c      	mov	r4, r3
 8014b24:	68bb      	ldr	r3, [r7, #8]
 8014b26:	891b      	ldrh	r3, [r3, #8]
 8014b28:	461d      	mov	r5, r3
 8014b2a:	68bb      	ldr	r3, [r7, #8]
 8014b2c:	68db      	ldr	r3, [r3, #12]
 8014b2e:	899b      	ldrh	r3, [r3, #12]
 8014b30:	b29b      	uxth	r3, r3
 8014b32:	4618      	mov	r0, r3
 8014b34:	f7fa fdf8 	bl	800f728 <lwip_htons>
 8014b38:	4603      	mov	r3, r0
 8014b3a:	b2db      	uxtb	r3, r3
 8014b3c:	f003 0303 	and.w	r3, r3, #3
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d001      	beq.n	8014b48 <tcp_receive+0xa90>
 8014b44:	2301      	movs	r3, #1
 8014b46:	e000      	b.n	8014b4a <tcp_receive+0xa92>
 8014b48:	2300      	movs	r3, #0
 8014b4a:	442b      	add	r3, r5
 8014b4c:	429c      	cmp	r4, r3
 8014b4e:	d206      	bcs.n	8014b5e <tcp_receive+0xaa6>
 8014b50:	4b1e      	ldr	r3, [pc, #120]	; (8014bcc <tcp_receive+0xb14>)
 8014b52:	f240 622b 	movw	r2, #1579	; 0x62b
 8014b56:	4923      	ldr	r1, [pc, #140]	; (8014be4 <tcp_receive+0xb2c>)
 8014b58:	481e      	ldr	r0, [pc, #120]	; (8014bd4 <tcp_receive+0xb1c>)
 8014b5a:	f005 f8a1 	bl	8019ca0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8014b5e:	68bb      	ldr	r3, [r7, #8]
 8014b60:	891b      	ldrh	r3, [r3, #8]
 8014b62:	461c      	mov	r4, r3
 8014b64:	68bb      	ldr	r3, [r7, #8]
 8014b66:	68db      	ldr	r3, [r3, #12]
 8014b68:	899b      	ldrh	r3, [r3, #12]
 8014b6a:	b29b      	uxth	r3, r3
 8014b6c:	4618      	mov	r0, r3
 8014b6e:	f7fa fddb 	bl	800f728 <lwip_htons>
 8014b72:	4603      	mov	r3, r0
 8014b74:	b2db      	uxtb	r3, r3
 8014b76:	f003 0303 	and.w	r3, r3, #3
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d001      	beq.n	8014b82 <tcp_receive+0xaca>
 8014b7e:	2301      	movs	r3, #1
 8014b80:	e000      	b.n	8014b84 <tcp_receive+0xacc>
 8014b82:	2300      	movs	r3, #0
 8014b84:	1919      	adds	r1, r3, r4
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014b8a:	b28b      	uxth	r3, r1
 8014b8c:	1ad3      	subs	r3, r2, r3
 8014b8e:	b29a      	uxth	r2, r3
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8014b94:	6878      	ldr	r0, [r7, #4]
 8014b96:	f7fc ff3f 	bl	8011a18 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8014b9a:	68bb      	ldr	r3, [r7, #8]
 8014b9c:	685b      	ldr	r3, [r3, #4]
 8014b9e:	891b      	ldrh	r3, [r3, #8]
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d028      	beq.n	8014bf6 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8014ba4:	4b0d      	ldr	r3, [pc, #52]	; (8014bdc <tcp_receive+0xb24>)
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d01d      	beq.n	8014be8 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8014bac:	4b0b      	ldr	r3, [pc, #44]	; (8014bdc <tcp_receive+0xb24>)
 8014bae:	681a      	ldr	r2, [r3, #0]
 8014bb0:	68bb      	ldr	r3, [r7, #8]
 8014bb2:	685b      	ldr	r3, [r3, #4]
 8014bb4:	4619      	mov	r1, r3
 8014bb6:	4610      	mov	r0, r2
 8014bb8:	f7fc fa5c 	bl	8011074 <pbuf_cat>
 8014bbc:	e018      	b.n	8014bf0 <tcp_receive+0xb38>
 8014bbe:	bf00      	nop
 8014bc0:	2000711a 	.word	0x2000711a
 8014bc4:	20007110 	.word	0x20007110
 8014bc8:	200070f0 	.word	0x200070f0
 8014bcc:	0801d808 	.word	0x0801d808
 8014bd0:	0801dbe8 	.word	0x0801dbe8
 8014bd4:	0801d854 	.word	0x0801d854
 8014bd8:	0801dc24 	.word	0x0801dc24
 8014bdc:	20007120 	.word	0x20007120
 8014be0:	2000711d 	.word	0x2000711d
 8014be4:	0801dc44 	.word	0x0801dc44
            } else {
              recv_data = cseg->p;
 8014be8:	68bb      	ldr	r3, [r7, #8]
 8014bea:	685b      	ldr	r3, [r3, #4]
 8014bec:	4a70      	ldr	r2, [pc, #448]	; (8014db0 <tcp_receive+0xcf8>)
 8014bee:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8014bf0:	68bb      	ldr	r3, [r7, #8]
 8014bf2:	2200      	movs	r2, #0
 8014bf4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014bf6:	68bb      	ldr	r3, [r7, #8]
 8014bf8:	68db      	ldr	r3, [r3, #12]
 8014bfa:	899b      	ldrh	r3, [r3, #12]
 8014bfc:	b29b      	uxth	r3, r3
 8014bfe:	4618      	mov	r0, r3
 8014c00:	f7fa fd92 	bl	800f728 <lwip_htons>
 8014c04:	4603      	mov	r3, r0
 8014c06:	b2db      	uxtb	r3, r3
 8014c08:	f003 0301 	and.w	r3, r3, #1
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d00d      	beq.n	8014c2c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8014c10:	4b68      	ldr	r3, [pc, #416]	; (8014db4 <tcp_receive+0xcfc>)
 8014c12:	781b      	ldrb	r3, [r3, #0]
 8014c14:	f043 0320 	orr.w	r3, r3, #32
 8014c18:	b2da      	uxtb	r2, r3
 8014c1a:	4b66      	ldr	r3, [pc, #408]	; (8014db4 <tcp_receive+0xcfc>)
 8014c1c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	7d1b      	ldrb	r3, [r3, #20]
 8014c22:	2b04      	cmp	r3, #4
 8014c24:	d102      	bne.n	8014c2c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	2207      	movs	r2, #7
 8014c2a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8014c2c:	68bb      	ldr	r3, [r7, #8]
 8014c2e:	681a      	ldr	r2, [r3, #0]
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8014c34:	68b8      	ldr	r0, [r7, #8]
 8014c36:	f7fd fbd2 	bl	80123de <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d008      	beq.n	8014c54 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014c46:	68db      	ldr	r3, [r3, #12]
 8014c48:	685a      	ldr	r2, [r3, #4]
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8014c4e:	429a      	cmp	r2, r3
 8014c50:	f43f af43 	beq.w	8014ada <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	8b5b      	ldrh	r3, [r3, #26]
 8014c58:	f003 0301 	and.w	r3, r3, #1
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d00e      	beq.n	8014c7e <tcp_receive+0xbc6>
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	8b5b      	ldrh	r3, [r3, #26]
 8014c64:	f023 0301 	bic.w	r3, r3, #1
 8014c68:	b29a      	uxth	r2, r3
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	835a      	strh	r2, [r3, #26]
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	8b5b      	ldrh	r3, [r3, #26]
 8014c72:	f043 0302 	orr.w	r3, r3, #2
 8014c76:	b29a      	uxth	r2, r3
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014c7c:	e188      	b.n	8014f90 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	8b5b      	ldrh	r3, [r3, #26]
 8014c82:	f043 0301 	orr.w	r3, r3, #1
 8014c86:	b29a      	uxth	r2, r3
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014c8c:	e180      	b.n	8014f90 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d106      	bne.n	8014ca4 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8014c96:	4848      	ldr	r0, [pc, #288]	; (8014db8 <tcp_receive+0xd00>)
 8014c98:	f7fd fbba 	bl	8012410 <tcp_seg_copy>
 8014c9c:	4602      	mov	r2, r0
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	675a      	str	r2, [r3, #116]	; 0x74
 8014ca2:	e16d      	b.n	8014f80 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8014ca4:	2300      	movs	r3, #0
 8014ca6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014cac:	63bb      	str	r3, [r7, #56]	; 0x38
 8014cae:	e157      	b.n	8014f60 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8014cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cb2:	68db      	ldr	r3, [r3, #12]
 8014cb4:	685a      	ldr	r2, [r3, #4]
 8014cb6:	4b41      	ldr	r3, [pc, #260]	; (8014dbc <tcp_receive+0xd04>)
 8014cb8:	681b      	ldr	r3, [r3, #0]
 8014cba:	429a      	cmp	r2, r3
 8014cbc:	d11d      	bne.n	8014cfa <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8014cbe:	4b3e      	ldr	r3, [pc, #248]	; (8014db8 <tcp_receive+0xd00>)
 8014cc0:	891a      	ldrh	r2, [r3, #8]
 8014cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cc4:	891b      	ldrh	r3, [r3, #8]
 8014cc6:	429a      	cmp	r2, r3
 8014cc8:	f240 814f 	bls.w	8014f6a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014ccc:	483a      	ldr	r0, [pc, #232]	; (8014db8 <tcp_receive+0xd00>)
 8014cce:	f7fd fb9f 	bl	8012410 <tcp_seg_copy>
 8014cd2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8014cd4:	697b      	ldr	r3, [r7, #20]
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	f000 8149 	beq.w	8014f6e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8014cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d003      	beq.n	8014cea <tcp_receive+0xc32>
                    prev->next = cseg;
 8014ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ce4:	697a      	ldr	r2, [r7, #20]
 8014ce6:	601a      	str	r2, [r3, #0]
 8014ce8:	e002      	b.n	8014cf0 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	697a      	ldr	r2, [r7, #20]
 8014cee:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8014cf0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014cf2:	6978      	ldr	r0, [r7, #20]
 8014cf4:	f7ff f8dc 	bl	8013eb0 <tcp_oos_insert_segment>
                }
                break;
 8014cf8:	e139      	b.n	8014f6e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8014cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d117      	bne.n	8014d30 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8014d00:	4b2e      	ldr	r3, [pc, #184]	; (8014dbc <tcp_receive+0xd04>)
 8014d02:	681a      	ldr	r2, [r3, #0]
 8014d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d06:	68db      	ldr	r3, [r3, #12]
 8014d08:	685b      	ldr	r3, [r3, #4]
 8014d0a:	1ad3      	subs	r3, r2, r3
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	da57      	bge.n	8014dc0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014d10:	4829      	ldr	r0, [pc, #164]	; (8014db8 <tcp_receive+0xd00>)
 8014d12:	f7fd fb7d 	bl	8012410 <tcp_seg_copy>
 8014d16:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8014d18:	69bb      	ldr	r3, [r7, #24]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	f000 8129 	beq.w	8014f72 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	69ba      	ldr	r2, [r7, #24]
 8014d24:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8014d26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014d28:	69b8      	ldr	r0, [r7, #24]
 8014d2a:	f7ff f8c1 	bl	8013eb0 <tcp_oos_insert_segment>
                  }
                  break;
 8014d2e:	e120      	b.n	8014f72 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8014d30:	4b22      	ldr	r3, [pc, #136]	; (8014dbc <tcp_receive+0xd04>)
 8014d32:	681a      	ldr	r2, [r3, #0]
 8014d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d36:	68db      	ldr	r3, [r3, #12]
 8014d38:	685b      	ldr	r3, [r3, #4]
 8014d3a:	1ad3      	subs	r3, r2, r3
 8014d3c:	3b01      	subs	r3, #1
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	db3e      	blt.n	8014dc0 <tcp_receive+0xd08>
 8014d42:	4b1e      	ldr	r3, [pc, #120]	; (8014dbc <tcp_receive+0xd04>)
 8014d44:	681a      	ldr	r2, [r3, #0]
 8014d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d48:	68db      	ldr	r3, [r3, #12]
 8014d4a:	685b      	ldr	r3, [r3, #4]
 8014d4c:	1ad3      	subs	r3, r2, r3
 8014d4e:	3301      	adds	r3, #1
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	dc35      	bgt.n	8014dc0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014d54:	4818      	ldr	r0, [pc, #96]	; (8014db8 <tcp_receive+0xd00>)
 8014d56:	f7fd fb5b 	bl	8012410 <tcp_seg_copy>
 8014d5a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8014d5c:	69fb      	ldr	r3, [r7, #28]
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	f000 8109 	beq.w	8014f76 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d66:	68db      	ldr	r3, [r3, #12]
 8014d68:	685b      	ldr	r3, [r3, #4]
 8014d6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014d6c:	8912      	ldrh	r2, [r2, #8]
 8014d6e:	441a      	add	r2, r3
 8014d70:	4b12      	ldr	r3, [pc, #72]	; (8014dbc <tcp_receive+0xd04>)
 8014d72:	681b      	ldr	r3, [r3, #0]
 8014d74:	1ad3      	subs	r3, r2, r3
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	dd12      	ble.n	8014da0 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8014d7a:	4b10      	ldr	r3, [pc, #64]	; (8014dbc <tcp_receive+0xd04>)
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	b29a      	uxth	r2, r3
 8014d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d82:	68db      	ldr	r3, [r3, #12]
 8014d84:	685b      	ldr	r3, [r3, #4]
 8014d86:	b29b      	uxth	r3, r3
 8014d88:	1ad3      	subs	r3, r2, r3
 8014d8a:	b29a      	uxth	r2, r3
 8014d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d8e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d92:	685a      	ldr	r2, [r3, #4]
 8014d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d96:	891b      	ldrh	r3, [r3, #8]
 8014d98:	4619      	mov	r1, r3
 8014d9a:	4610      	mov	r0, r2
 8014d9c:	f7fb ff24 	bl	8010be8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8014da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014da2:	69fa      	ldr	r2, [r7, #28]
 8014da4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8014da6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014da8:	69f8      	ldr	r0, [r7, #28]
 8014daa:	f7ff f881 	bl	8013eb0 <tcp_oos_insert_segment>
                  }
                  break;
 8014dae:	e0e2      	b.n	8014f76 <tcp_receive+0xebe>
 8014db0:	20007120 	.word	0x20007120
 8014db4:	2000711d 	.word	0x2000711d
 8014db8:	200070f0 	.word	0x200070f0
 8014dbc:	20007110 	.word	0x20007110
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8014dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dc2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8014dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	f040 80c6 	bne.w	8014f5a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8014dce:	4b80      	ldr	r3, [pc, #512]	; (8014fd0 <tcp_receive+0xf18>)
 8014dd0:	681a      	ldr	r2, [r3, #0]
 8014dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dd4:	68db      	ldr	r3, [r3, #12]
 8014dd6:	685b      	ldr	r3, [r3, #4]
 8014dd8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	f340 80bd 	ble.w	8014f5a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014de2:	68db      	ldr	r3, [r3, #12]
 8014de4:	899b      	ldrh	r3, [r3, #12]
 8014de6:	b29b      	uxth	r3, r3
 8014de8:	4618      	mov	r0, r3
 8014dea:	f7fa fc9d 	bl	800f728 <lwip_htons>
 8014dee:	4603      	mov	r3, r0
 8014df0:	b2db      	uxtb	r3, r3
 8014df2:	f003 0301 	and.w	r3, r3, #1
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	f040 80bf 	bne.w	8014f7a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8014dfc:	4875      	ldr	r0, [pc, #468]	; (8014fd4 <tcp_receive+0xf1c>)
 8014dfe:	f7fd fb07 	bl	8012410 <tcp_seg_copy>
 8014e02:	4602      	mov	r2, r0
 8014e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e06:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8014e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	f000 80b6 	beq.w	8014f7e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8014e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e14:	68db      	ldr	r3, [r3, #12]
 8014e16:	685b      	ldr	r3, [r3, #4]
 8014e18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014e1a:	8912      	ldrh	r2, [r2, #8]
 8014e1c:	441a      	add	r2, r3
 8014e1e:	4b6c      	ldr	r3, [pc, #432]	; (8014fd0 <tcp_receive+0xf18>)
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	1ad3      	subs	r3, r2, r3
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	dd12      	ble.n	8014e4e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8014e28:	4b69      	ldr	r3, [pc, #420]	; (8014fd0 <tcp_receive+0xf18>)
 8014e2a:	681b      	ldr	r3, [r3, #0]
 8014e2c:	b29a      	uxth	r2, r3
 8014e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e30:	68db      	ldr	r3, [r3, #12]
 8014e32:	685b      	ldr	r3, [r3, #4]
 8014e34:	b29b      	uxth	r3, r3
 8014e36:	1ad3      	subs	r3, r2, r3
 8014e38:	b29a      	uxth	r2, r3
 8014e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e3c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8014e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e40:	685a      	ldr	r2, [r3, #4]
 8014e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e44:	891b      	ldrh	r3, [r3, #8]
 8014e46:	4619      	mov	r1, r3
 8014e48:	4610      	mov	r0, r2
 8014e4a:	f7fb fecd 	bl	8010be8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8014e4e:	4b62      	ldr	r3, [pc, #392]	; (8014fd8 <tcp_receive+0xf20>)
 8014e50:	881b      	ldrh	r3, [r3, #0]
 8014e52:	461a      	mov	r2, r3
 8014e54:	4b5e      	ldr	r3, [pc, #376]	; (8014fd0 <tcp_receive+0xf18>)
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	441a      	add	r2, r3
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e5e:	6879      	ldr	r1, [r7, #4]
 8014e60:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014e62:	440b      	add	r3, r1
 8014e64:	1ad3      	subs	r3, r2, r3
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	f340 8089 	ble.w	8014f7e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8014e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	68db      	ldr	r3, [r3, #12]
 8014e72:	899b      	ldrh	r3, [r3, #12]
 8014e74:	b29b      	uxth	r3, r3
 8014e76:	4618      	mov	r0, r3
 8014e78:	f7fa fc56 	bl	800f728 <lwip_htons>
 8014e7c:	4603      	mov	r3, r0
 8014e7e:	b2db      	uxtb	r3, r3
 8014e80:	f003 0301 	and.w	r3, r3, #1
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d022      	beq.n	8014ece <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8014e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	68db      	ldr	r3, [r3, #12]
 8014e8e:	899b      	ldrh	r3, [r3, #12]
 8014e90:	b29b      	uxth	r3, r3
 8014e92:	b21b      	sxth	r3, r3
 8014e94:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014e98:	b21c      	sxth	r4, r3
 8014e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e9c:	681b      	ldr	r3, [r3, #0]
 8014e9e:	68db      	ldr	r3, [r3, #12]
 8014ea0:	899b      	ldrh	r3, [r3, #12]
 8014ea2:	b29b      	uxth	r3, r3
 8014ea4:	4618      	mov	r0, r3
 8014ea6:	f7fa fc3f 	bl	800f728 <lwip_htons>
 8014eaa:	4603      	mov	r3, r0
 8014eac:	b2db      	uxtb	r3, r3
 8014eae:	b29b      	uxth	r3, r3
 8014eb0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014eb4:	b29b      	uxth	r3, r3
 8014eb6:	4618      	mov	r0, r3
 8014eb8:	f7fa fc36 	bl	800f728 <lwip_htons>
 8014ebc:	4603      	mov	r3, r0
 8014ebe:	b21b      	sxth	r3, r3
 8014ec0:	4323      	orrs	r3, r4
 8014ec2:	b21a      	sxth	r2, r3
 8014ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ec6:	681b      	ldr	r3, [r3, #0]
 8014ec8:	68db      	ldr	r3, [r3, #12]
 8014eca:	b292      	uxth	r2, r2
 8014ecc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ed2:	b29a      	uxth	r2, r3
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014ed8:	4413      	add	r3, r2
 8014eda:	b299      	uxth	r1, r3
 8014edc:	4b3c      	ldr	r3, [pc, #240]	; (8014fd0 <tcp_receive+0xf18>)
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	b29a      	uxth	r2, r3
 8014ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ee4:	681b      	ldr	r3, [r3, #0]
 8014ee6:	1a8a      	subs	r2, r1, r2
 8014ee8:	b292      	uxth	r2, r2
 8014eea:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8014eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	685a      	ldr	r2, [r3, #4]
 8014ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	891b      	ldrh	r3, [r3, #8]
 8014ef8:	4619      	mov	r1, r3
 8014efa:	4610      	mov	r0, r2
 8014efc:	f7fb fe74 	bl	8010be8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8014f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f02:	681b      	ldr	r3, [r3, #0]
 8014f04:	891c      	ldrh	r4, [r3, #8]
 8014f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f08:	681b      	ldr	r3, [r3, #0]
 8014f0a:	68db      	ldr	r3, [r3, #12]
 8014f0c:	899b      	ldrh	r3, [r3, #12]
 8014f0e:	b29b      	uxth	r3, r3
 8014f10:	4618      	mov	r0, r3
 8014f12:	f7fa fc09 	bl	800f728 <lwip_htons>
 8014f16:	4603      	mov	r3, r0
 8014f18:	b2db      	uxtb	r3, r3
 8014f1a:	f003 0303 	and.w	r3, r3, #3
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d001      	beq.n	8014f26 <tcp_receive+0xe6e>
 8014f22:	2301      	movs	r3, #1
 8014f24:	e000      	b.n	8014f28 <tcp_receive+0xe70>
 8014f26:	2300      	movs	r3, #0
 8014f28:	4423      	add	r3, r4
 8014f2a:	b29a      	uxth	r2, r3
 8014f2c:	4b2a      	ldr	r3, [pc, #168]	; (8014fd8 <tcp_receive+0xf20>)
 8014f2e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014f30:	4b29      	ldr	r3, [pc, #164]	; (8014fd8 <tcp_receive+0xf20>)
 8014f32:	881b      	ldrh	r3, [r3, #0]
 8014f34:	461a      	mov	r2, r3
 8014f36:	4b26      	ldr	r3, [pc, #152]	; (8014fd0 <tcp_receive+0xf18>)
 8014f38:	681b      	ldr	r3, [r3, #0]
 8014f3a:	441a      	add	r2, r3
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f40:	6879      	ldr	r1, [r7, #4]
 8014f42:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014f44:	440b      	add	r3, r1
 8014f46:	429a      	cmp	r2, r3
 8014f48:	d019      	beq.n	8014f7e <tcp_receive+0xec6>
 8014f4a:	4b24      	ldr	r3, [pc, #144]	; (8014fdc <tcp_receive+0xf24>)
 8014f4c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8014f50:	4923      	ldr	r1, [pc, #140]	; (8014fe0 <tcp_receive+0xf28>)
 8014f52:	4824      	ldr	r0, [pc, #144]	; (8014fe4 <tcp_receive+0xf2c>)
 8014f54:	f004 fea4 	bl	8019ca0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8014f58:	e011      	b.n	8014f7e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8014f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	f47f aea4 	bne.w	8014cb0 <tcp_receive+0xbf8>
 8014f68:	e00a      	b.n	8014f80 <tcp_receive+0xec8>
                break;
 8014f6a:	bf00      	nop
 8014f6c:	e008      	b.n	8014f80 <tcp_receive+0xec8>
                break;
 8014f6e:	bf00      	nop
 8014f70:	e006      	b.n	8014f80 <tcp_receive+0xec8>
                  break;
 8014f72:	bf00      	nop
 8014f74:	e004      	b.n	8014f80 <tcp_receive+0xec8>
                  break;
 8014f76:	bf00      	nop
 8014f78:	e002      	b.n	8014f80 <tcp_receive+0xec8>
                  break;
 8014f7a:	bf00      	nop
 8014f7c:	e000      	b.n	8014f80 <tcp_receive+0xec8>
                break;
 8014f7e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8014f80:	6878      	ldr	r0, [r7, #4]
 8014f82:	f001 fa33 	bl	80163ec <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8014f86:	e003      	b.n	8014f90 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8014f88:	6878      	ldr	r0, [r7, #4]
 8014f8a:	f001 fa2f 	bl	80163ec <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014f8e:	e01a      	b.n	8014fc6 <tcp_receive+0xf0e>
 8014f90:	e019      	b.n	8014fc6 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8014f92:	4b0f      	ldr	r3, [pc, #60]	; (8014fd0 <tcp_receive+0xf18>)
 8014f94:	681a      	ldr	r2, [r3, #0]
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f9a:	1ad3      	subs	r3, r2, r3
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	db0a      	blt.n	8014fb6 <tcp_receive+0xefe>
 8014fa0:	4b0b      	ldr	r3, [pc, #44]	; (8014fd0 <tcp_receive+0xf18>)
 8014fa2:	681a      	ldr	r2, [r3, #0]
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fa8:	6879      	ldr	r1, [r7, #4]
 8014faa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014fac:	440b      	add	r3, r1
 8014fae:	1ad3      	subs	r3, r2, r3
 8014fb0:	3301      	adds	r3, #1
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	dd07      	ble.n	8014fc6 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	8b5b      	ldrh	r3, [r3, #26]
 8014fba:	f043 0302 	orr.w	r3, r3, #2
 8014fbe:	b29a      	uxth	r2, r3
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8014fc4:	e7ff      	b.n	8014fc6 <tcp_receive+0xf0e>
 8014fc6:	bf00      	nop
 8014fc8:	3750      	adds	r7, #80	; 0x50
 8014fca:	46bd      	mov	sp, r7
 8014fcc:	bdb0      	pop	{r4, r5, r7, pc}
 8014fce:	bf00      	nop
 8014fd0:	20007110 	.word	0x20007110
 8014fd4:	200070f0 	.word	0x200070f0
 8014fd8:	2000711a 	.word	0x2000711a
 8014fdc:	0801d808 	.word	0x0801d808
 8014fe0:	0801dbb0 	.word	0x0801dbb0
 8014fe4:	0801d854 	.word	0x0801d854

08014fe8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8014fe8:	b480      	push	{r7}
 8014fea:	b083      	sub	sp, #12
 8014fec:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8014fee:	4b15      	ldr	r3, [pc, #84]	; (8015044 <tcp_get_next_optbyte+0x5c>)
 8014ff0:	881b      	ldrh	r3, [r3, #0]
 8014ff2:	1c5a      	adds	r2, r3, #1
 8014ff4:	b291      	uxth	r1, r2
 8014ff6:	4a13      	ldr	r2, [pc, #76]	; (8015044 <tcp_get_next_optbyte+0x5c>)
 8014ff8:	8011      	strh	r1, [r2, #0]
 8014ffa:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8014ffc:	4b12      	ldr	r3, [pc, #72]	; (8015048 <tcp_get_next_optbyte+0x60>)
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	2b00      	cmp	r3, #0
 8015002:	d004      	beq.n	801500e <tcp_get_next_optbyte+0x26>
 8015004:	4b11      	ldr	r3, [pc, #68]	; (801504c <tcp_get_next_optbyte+0x64>)
 8015006:	881b      	ldrh	r3, [r3, #0]
 8015008:	88fa      	ldrh	r2, [r7, #6]
 801500a:	429a      	cmp	r2, r3
 801500c:	d208      	bcs.n	8015020 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801500e:	4b10      	ldr	r3, [pc, #64]	; (8015050 <tcp_get_next_optbyte+0x68>)
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	3314      	adds	r3, #20
 8015014:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8015016:	88fb      	ldrh	r3, [r7, #6]
 8015018:	683a      	ldr	r2, [r7, #0]
 801501a:	4413      	add	r3, r2
 801501c:	781b      	ldrb	r3, [r3, #0]
 801501e:	e00b      	b.n	8015038 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8015020:	88fb      	ldrh	r3, [r7, #6]
 8015022:	b2da      	uxtb	r2, r3
 8015024:	4b09      	ldr	r3, [pc, #36]	; (801504c <tcp_get_next_optbyte+0x64>)
 8015026:	881b      	ldrh	r3, [r3, #0]
 8015028:	b2db      	uxtb	r3, r3
 801502a:	1ad3      	subs	r3, r2, r3
 801502c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801502e:	4b06      	ldr	r3, [pc, #24]	; (8015048 <tcp_get_next_optbyte+0x60>)
 8015030:	681a      	ldr	r2, [r3, #0]
 8015032:	797b      	ldrb	r3, [r7, #5]
 8015034:	4413      	add	r3, r2
 8015036:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015038:	4618      	mov	r0, r3
 801503a:	370c      	adds	r7, #12
 801503c:	46bd      	mov	sp, r7
 801503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015042:	4770      	bx	lr
 8015044:	2000710c 	.word	0x2000710c
 8015048:	20007108 	.word	0x20007108
 801504c:	20007106 	.word	0x20007106
 8015050:	20007100 	.word	0x20007100

08015054 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8015054:	b580      	push	{r7, lr}
 8015056:	b084      	sub	sp, #16
 8015058:	af00      	add	r7, sp, #0
 801505a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	2b00      	cmp	r3, #0
 8015060:	d106      	bne.n	8015070 <tcp_parseopt+0x1c>
 8015062:	4b32      	ldr	r3, [pc, #200]	; (801512c <tcp_parseopt+0xd8>)
 8015064:	f240 727d 	movw	r2, #1917	; 0x77d
 8015068:	4931      	ldr	r1, [pc, #196]	; (8015130 <tcp_parseopt+0xdc>)
 801506a:	4832      	ldr	r0, [pc, #200]	; (8015134 <tcp_parseopt+0xe0>)
 801506c:	f004 fe18 	bl	8019ca0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8015070:	4b31      	ldr	r3, [pc, #196]	; (8015138 <tcp_parseopt+0xe4>)
 8015072:	881b      	ldrh	r3, [r3, #0]
 8015074:	2b00      	cmp	r3, #0
 8015076:	d056      	beq.n	8015126 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015078:	4b30      	ldr	r3, [pc, #192]	; (801513c <tcp_parseopt+0xe8>)
 801507a:	2200      	movs	r2, #0
 801507c:	801a      	strh	r2, [r3, #0]
 801507e:	e046      	b.n	801510e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8015080:	f7ff ffb2 	bl	8014fe8 <tcp_get_next_optbyte>
 8015084:	4603      	mov	r3, r0
 8015086:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8015088:	7bfb      	ldrb	r3, [r7, #15]
 801508a:	2b02      	cmp	r3, #2
 801508c:	d006      	beq.n	801509c <tcp_parseopt+0x48>
 801508e:	2b02      	cmp	r3, #2
 8015090:	dc2c      	bgt.n	80150ec <tcp_parseopt+0x98>
 8015092:	2b00      	cmp	r3, #0
 8015094:	d042      	beq.n	801511c <tcp_parseopt+0xc8>
 8015096:	2b01      	cmp	r3, #1
 8015098:	d128      	bne.n	80150ec <tcp_parseopt+0x98>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801509a:	e038      	b.n	801510e <tcp_parseopt+0xba>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801509c:	f7ff ffa4 	bl	8014fe8 <tcp_get_next_optbyte>
 80150a0:	4603      	mov	r3, r0
 80150a2:	2b04      	cmp	r3, #4
 80150a4:	d13c      	bne.n	8015120 <tcp_parseopt+0xcc>
 80150a6:	4b25      	ldr	r3, [pc, #148]	; (801513c <tcp_parseopt+0xe8>)
 80150a8:	881b      	ldrh	r3, [r3, #0]
 80150aa:	3301      	adds	r3, #1
 80150ac:	4a22      	ldr	r2, [pc, #136]	; (8015138 <tcp_parseopt+0xe4>)
 80150ae:	8812      	ldrh	r2, [r2, #0]
 80150b0:	4293      	cmp	r3, r2
 80150b2:	da35      	bge.n	8015120 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80150b4:	f7ff ff98 	bl	8014fe8 <tcp_get_next_optbyte>
 80150b8:	4603      	mov	r3, r0
 80150ba:	b29b      	uxth	r3, r3
 80150bc:	021b      	lsls	r3, r3, #8
 80150be:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80150c0:	f7ff ff92 	bl	8014fe8 <tcp_get_next_optbyte>
 80150c4:	4603      	mov	r3, r0
 80150c6:	b29a      	uxth	r2, r3
 80150c8:	89bb      	ldrh	r3, [r7, #12]
 80150ca:	4313      	orrs	r3, r2
 80150cc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80150ce:	89bb      	ldrh	r3, [r7, #12]
 80150d0:	f240 52b4 	movw	r2, #1460	; 0x5b4
 80150d4:	4293      	cmp	r3, r2
 80150d6:	d804      	bhi.n	80150e2 <tcp_parseopt+0x8e>
 80150d8:	89bb      	ldrh	r3, [r7, #12]
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d001      	beq.n	80150e2 <tcp_parseopt+0x8e>
 80150de:	89ba      	ldrh	r2, [r7, #12]
 80150e0:	e001      	b.n	80150e6 <tcp_parseopt+0x92>
 80150e2:	f240 52b4 	movw	r2, #1460	; 0x5b4
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80150ea:	e010      	b.n	801510e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80150ec:	f7ff ff7c 	bl	8014fe8 <tcp_get_next_optbyte>
 80150f0:	4603      	mov	r3, r0
 80150f2:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80150f4:	7afb      	ldrb	r3, [r7, #11]
 80150f6:	2b01      	cmp	r3, #1
 80150f8:	d914      	bls.n	8015124 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80150fa:	7afb      	ldrb	r3, [r7, #11]
 80150fc:	b29a      	uxth	r2, r3
 80150fe:	4b0f      	ldr	r3, [pc, #60]	; (801513c <tcp_parseopt+0xe8>)
 8015100:	881b      	ldrh	r3, [r3, #0]
 8015102:	4413      	add	r3, r2
 8015104:	b29b      	uxth	r3, r3
 8015106:	3b02      	subs	r3, #2
 8015108:	b29a      	uxth	r2, r3
 801510a:	4b0c      	ldr	r3, [pc, #48]	; (801513c <tcp_parseopt+0xe8>)
 801510c:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801510e:	4b0b      	ldr	r3, [pc, #44]	; (801513c <tcp_parseopt+0xe8>)
 8015110:	881a      	ldrh	r2, [r3, #0]
 8015112:	4b09      	ldr	r3, [pc, #36]	; (8015138 <tcp_parseopt+0xe4>)
 8015114:	881b      	ldrh	r3, [r3, #0]
 8015116:	429a      	cmp	r2, r3
 8015118:	d3b2      	bcc.n	8015080 <tcp_parseopt+0x2c>
 801511a:	e004      	b.n	8015126 <tcp_parseopt+0xd2>
          return;
 801511c:	bf00      	nop
 801511e:	e002      	b.n	8015126 <tcp_parseopt+0xd2>
            return;
 8015120:	bf00      	nop
 8015122:	e000      	b.n	8015126 <tcp_parseopt+0xd2>
            return;
 8015124:	bf00      	nop
      }
    }
  }
}
 8015126:	3710      	adds	r7, #16
 8015128:	46bd      	mov	sp, r7
 801512a:	bd80      	pop	{r7, pc}
 801512c:	0801d808 	.word	0x0801d808
 8015130:	0801dc6c 	.word	0x0801dc6c
 8015134:	0801d854 	.word	0x0801d854
 8015138:	20007104 	.word	0x20007104
 801513c:	2000710c 	.word	0x2000710c

08015140 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8015140:	b480      	push	{r7}
 8015142:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8015144:	4b05      	ldr	r3, [pc, #20]	; (801515c <tcp_trigger_input_pcb_close+0x1c>)
 8015146:	781b      	ldrb	r3, [r3, #0]
 8015148:	f043 0310 	orr.w	r3, r3, #16
 801514c:	b2da      	uxtb	r2, r3
 801514e:	4b03      	ldr	r3, [pc, #12]	; (801515c <tcp_trigger_input_pcb_close+0x1c>)
 8015150:	701a      	strb	r2, [r3, #0]
}
 8015152:	bf00      	nop
 8015154:	46bd      	mov	sp, r7
 8015156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801515a:	4770      	bx	lr
 801515c:	2000711d 	.word	0x2000711d

08015160 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8015160:	b580      	push	{r7, lr}
 8015162:	b084      	sub	sp, #16
 8015164:	af00      	add	r7, sp, #0
 8015166:	60f8      	str	r0, [r7, #12]
 8015168:	60b9      	str	r1, [r7, #8]
 801516a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	2b00      	cmp	r3, #0
 8015170:	d00a      	beq.n	8015188 <tcp_route+0x28>
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	7a1b      	ldrb	r3, [r3, #8]
 8015176:	2b00      	cmp	r3, #0
 8015178:	d006      	beq.n	8015188 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	7a1b      	ldrb	r3, [r3, #8]
 801517e:	4618      	mov	r0, r3
 8015180:	f7fb fb76 	bl	8010870 <netif_get_by_index>
 8015184:	4603      	mov	r3, r0
 8015186:	e003      	b.n	8015190 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8015188:	6878      	ldr	r0, [r7, #4]
 801518a:	f002 fe61 	bl	8017e50 <ip4_route>
 801518e:	4603      	mov	r3, r0
  }
}
 8015190:	4618      	mov	r0, r3
 8015192:	3710      	adds	r7, #16
 8015194:	46bd      	mov	sp, r7
 8015196:	bd80      	pop	{r7, pc}

08015198 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8015198:	b590      	push	{r4, r7, lr}
 801519a:	b087      	sub	sp, #28
 801519c:	af00      	add	r7, sp, #0
 801519e:	60f8      	str	r0, [r7, #12]
 80151a0:	60b9      	str	r1, [r7, #8]
 80151a2:	603b      	str	r3, [r7, #0]
 80151a4:	4613      	mov	r3, r2
 80151a6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d105      	bne.n	80151ba <tcp_create_segment+0x22>
 80151ae:	4b44      	ldr	r3, [pc, #272]	; (80152c0 <tcp_create_segment+0x128>)
 80151b0:	22a3      	movs	r2, #163	; 0xa3
 80151b2:	4944      	ldr	r1, [pc, #272]	; (80152c4 <tcp_create_segment+0x12c>)
 80151b4:	4844      	ldr	r0, [pc, #272]	; (80152c8 <tcp_create_segment+0x130>)
 80151b6:	f004 fd73 	bl	8019ca0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80151ba:	68bb      	ldr	r3, [r7, #8]
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d105      	bne.n	80151cc <tcp_create_segment+0x34>
 80151c0:	4b3f      	ldr	r3, [pc, #252]	; (80152c0 <tcp_create_segment+0x128>)
 80151c2:	22a4      	movs	r2, #164	; 0xa4
 80151c4:	4941      	ldr	r1, [pc, #260]	; (80152cc <tcp_create_segment+0x134>)
 80151c6:	4840      	ldr	r0, [pc, #256]	; (80152c8 <tcp_create_segment+0x130>)
 80151c8:	f004 fd6a 	bl	8019ca0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80151cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80151d0:	009b      	lsls	r3, r3, #2
 80151d2:	b2db      	uxtb	r3, r3
 80151d4:	f003 0304 	and.w	r3, r3, #4
 80151d8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80151da:	2003      	movs	r0, #3
 80151dc:	f7fa ffc2 	bl	8010164 <memp_malloc>
 80151e0:	6138      	str	r0, [r7, #16]
 80151e2:	693b      	ldr	r3, [r7, #16]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d104      	bne.n	80151f2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80151e8:	68b8      	ldr	r0, [r7, #8]
 80151ea:	f7fb fe81 	bl	8010ef0 <pbuf_free>
    return NULL;
 80151ee:	2300      	movs	r3, #0
 80151f0:	e061      	b.n	80152b6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80151f2:	693b      	ldr	r3, [r7, #16]
 80151f4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80151f8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80151fa:	693b      	ldr	r3, [r7, #16]
 80151fc:	2200      	movs	r2, #0
 80151fe:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8015200:	693b      	ldr	r3, [r7, #16]
 8015202:	68ba      	ldr	r2, [r7, #8]
 8015204:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8015206:	68bb      	ldr	r3, [r7, #8]
 8015208:	891a      	ldrh	r2, [r3, #8]
 801520a:	7dfb      	ldrb	r3, [r7, #23]
 801520c:	b29b      	uxth	r3, r3
 801520e:	429a      	cmp	r2, r3
 8015210:	d205      	bcs.n	801521e <tcp_create_segment+0x86>
 8015212:	4b2b      	ldr	r3, [pc, #172]	; (80152c0 <tcp_create_segment+0x128>)
 8015214:	22b0      	movs	r2, #176	; 0xb0
 8015216:	492e      	ldr	r1, [pc, #184]	; (80152d0 <tcp_create_segment+0x138>)
 8015218:	482b      	ldr	r0, [pc, #172]	; (80152c8 <tcp_create_segment+0x130>)
 801521a:	f004 fd41 	bl	8019ca0 <iprintf>
  seg->len = p->tot_len - optlen;
 801521e:	68bb      	ldr	r3, [r7, #8]
 8015220:	891a      	ldrh	r2, [r3, #8]
 8015222:	7dfb      	ldrb	r3, [r7, #23]
 8015224:	b29b      	uxth	r3, r3
 8015226:	1ad3      	subs	r3, r2, r3
 8015228:	b29a      	uxth	r2, r3
 801522a:	693b      	ldr	r3, [r7, #16]
 801522c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801522e:	2114      	movs	r1, #20
 8015230:	68b8      	ldr	r0, [r7, #8]
 8015232:	f7fb fdc7 	bl	8010dc4 <pbuf_add_header>
 8015236:	4603      	mov	r3, r0
 8015238:	2b00      	cmp	r3, #0
 801523a:	d004      	beq.n	8015246 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801523c:	6938      	ldr	r0, [r7, #16]
 801523e:	f7fd f8ce 	bl	80123de <tcp_seg_free>
    return NULL;
 8015242:	2300      	movs	r3, #0
 8015244:	e037      	b.n	80152b6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8015246:	693b      	ldr	r3, [r7, #16]
 8015248:	685b      	ldr	r3, [r3, #4]
 801524a:	685a      	ldr	r2, [r3, #4]
 801524c:	693b      	ldr	r3, [r7, #16]
 801524e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	8ada      	ldrh	r2, [r3, #22]
 8015254:	693b      	ldr	r3, [r7, #16]
 8015256:	68dc      	ldr	r4, [r3, #12]
 8015258:	4610      	mov	r0, r2
 801525a:	f7fa fa65 	bl	800f728 <lwip_htons>
 801525e:	4603      	mov	r3, r0
 8015260:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	8b1a      	ldrh	r2, [r3, #24]
 8015266:	693b      	ldr	r3, [r7, #16]
 8015268:	68dc      	ldr	r4, [r3, #12]
 801526a:	4610      	mov	r0, r2
 801526c:	f7fa fa5c 	bl	800f728 <lwip_htons>
 8015270:	4603      	mov	r3, r0
 8015272:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8015274:	693b      	ldr	r3, [r7, #16]
 8015276:	68dc      	ldr	r4, [r3, #12]
 8015278:	6838      	ldr	r0, [r7, #0]
 801527a:	f7fa fa6a 	bl	800f752 <lwip_htonl>
 801527e:	4603      	mov	r3, r0
 8015280:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8015282:	7dfb      	ldrb	r3, [r7, #23]
 8015284:	089b      	lsrs	r3, r3, #2
 8015286:	b2db      	uxtb	r3, r3
 8015288:	b29b      	uxth	r3, r3
 801528a:	3305      	adds	r3, #5
 801528c:	b29b      	uxth	r3, r3
 801528e:	031b      	lsls	r3, r3, #12
 8015290:	b29a      	uxth	r2, r3
 8015292:	79fb      	ldrb	r3, [r7, #7]
 8015294:	b29b      	uxth	r3, r3
 8015296:	4313      	orrs	r3, r2
 8015298:	b29a      	uxth	r2, r3
 801529a:	693b      	ldr	r3, [r7, #16]
 801529c:	68dc      	ldr	r4, [r3, #12]
 801529e:	4610      	mov	r0, r2
 80152a0:	f7fa fa42 	bl	800f728 <lwip_htons>
 80152a4:	4603      	mov	r3, r0
 80152a6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80152a8:	693b      	ldr	r3, [r7, #16]
 80152aa:	68db      	ldr	r3, [r3, #12]
 80152ac:	2200      	movs	r2, #0
 80152ae:	749a      	strb	r2, [r3, #18]
 80152b0:	2200      	movs	r2, #0
 80152b2:	74da      	strb	r2, [r3, #19]
  return seg;
 80152b4:	693b      	ldr	r3, [r7, #16]
}
 80152b6:	4618      	mov	r0, r3
 80152b8:	371c      	adds	r7, #28
 80152ba:	46bd      	mov	sp, r7
 80152bc:	bd90      	pop	{r4, r7, pc}
 80152be:	bf00      	nop
 80152c0:	0801dc88 	.word	0x0801dc88
 80152c4:	0801dcbc 	.word	0x0801dcbc
 80152c8:	0801dcdc 	.word	0x0801dcdc
 80152cc:	0801dd04 	.word	0x0801dd04
 80152d0:	0801dd28 	.word	0x0801dd28

080152d4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80152d4:	b590      	push	{r4, r7, lr}
 80152d6:	b08b      	sub	sp, #44	; 0x2c
 80152d8:	af02      	add	r7, sp, #8
 80152da:	6078      	str	r0, [r7, #4]
 80152dc:	460b      	mov	r3, r1
 80152de:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80152e0:	2300      	movs	r3, #0
 80152e2:	61fb      	str	r3, [r7, #28]
 80152e4:	2300      	movs	r3, #0
 80152e6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80152e8:	2300      	movs	r3, #0
 80152ea:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d106      	bne.n	8015300 <tcp_split_unsent_seg+0x2c>
 80152f2:	4b95      	ldr	r3, [pc, #596]	; (8015548 <tcp_split_unsent_seg+0x274>)
 80152f4:	f240 324b 	movw	r2, #843	; 0x34b
 80152f8:	4994      	ldr	r1, [pc, #592]	; (801554c <tcp_split_unsent_seg+0x278>)
 80152fa:	4895      	ldr	r0, [pc, #596]	; (8015550 <tcp_split_unsent_seg+0x27c>)
 80152fc:	f004 fcd0 	bl	8019ca0 <iprintf>

  useg = pcb->unsent;
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015304:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8015306:	697b      	ldr	r3, [r7, #20]
 8015308:	2b00      	cmp	r3, #0
 801530a:	d102      	bne.n	8015312 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801530c:	f04f 33ff 	mov.w	r3, #4294967295
 8015310:	e116      	b.n	8015540 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8015312:	887b      	ldrh	r3, [r7, #2]
 8015314:	2b00      	cmp	r3, #0
 8015316:	d109      	bne.n	801532c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8015318:	4b8b      	ldr	r3, [pc, #556]	; (8015548 <tcp_split_unsent_seg+0x274>)
 801531a:	f240 3253 	movw	r2, #851	; 0x353
 801531e:	498d      	ldr	r1, [pc, #564]	; (8015554 <tcp_split_unsent_seg+0x280>)
 8015320:	488b      	ldr	r0, [pc, #556]	; (8015550 <tcp_split_unsent_seg+0x27c>)
 8015322:	f004 fcbd 	bl	8019ca0 <iprintf>
    return ERR_VAL;
 8015326:	f06f 0305 	mvn.w	r3, #5
 801532a:	e109      	b.n	8015540 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801532c:	697b      	ldr	r3, [r7, #20]
 801532e:	891b      	ldrh	r3, [r3, #8]
 8015330:	887a      	ldrh	r2, [r7, #2]
 8015332:	429a      	cmp	r2, r3
 8015334:	d301      	bcc.n	801533a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8015336:	2300      	movs	r3, #0
 8015338:	e102      	b.n	8015540 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801533e:	887a      	ldrh	r2, [r7, #2]
 8015340:	429a      	cmp	r2, r3
 8015342:	d906      	bls.n	8015352 <tcp_split_unsent_seg+0x7e>
 8015344:	4b80      	ldr	r3, [pc, #512]	; (8015548 <tcp_split_unsent_seg+0x274>)
 8015346:	f240 325b 	movw	r2, #859	; 0x35b
 801534a:	4983      	ldr	r1, [pc, #524]	; (8015558 <tcp_split_unsent_seg+0x284>)
 801534c:	4880      	ldr	r0, [pc, #512]	; (8015550 <tcp_split_unsent_seg+0x27c>)
 801534e:	f004 fca7 	bl	8019ca0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8015352:	697b      	ldr	r3, [r7, #20]
 8015354:	891b      	ldrh	r3, [r3, #8]
 8015356:	2b00      	cmp	r3, #0
 8015358:	d106      	bne.n	8015368 <tcp_split_unsent_seg+0x94>
 801535a:	4b7b      	ldr	r3, [pc, #492]	; (8015548 <tcp_split_unsent_seg+0x274>)
 801535c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8015360:	497e      	ldr	r1, [pc, #504]	; (801555c <tcp_split_unsent_seg+0x288>)
 8015362:	487b      	ldr	r0, [pc, #492]	; (8015550 <tcp_split_unsent_seg+0x27c>)
 8015364:	f004 fc9c 	bl	8019ca0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8015368:	697b      	ldr	r3, [r7, #20]
 801536a:	7a9b      	ldrb	r3, [r3, #10]
 801536c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801536e:	7bfb      	ldrb	r3, [r7, #15]
 8015370:	009b      	lsls	r3, r3, #2
 8015372:	b2db      	uxtb	r3, r3
 8015374:	f003 0304 	and.w	r3, r3, #4
 8015378:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801537a:	697b      	ldr	r3, [r7, #20]
 801537c:	891a      	ldrh	r2, [r3, #8]
 801537e:	887b      	ldrh	r3, [r7, #2]
 8015380:	1ad3      	subs	r3, r2, r3
 8015382:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8015384:	7bbb      	ldrb	r3, [r7, #14]
 8015386:	b29a      	uxth	r2, r3
 8015388:	89bb      	ldrh	r3, [r7, #12]
 801538a:	4413      	add	r3, r2
 801538c:	b29b      	uxth	r3, r3
 801538e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015392:	4619      	mov	r1, r3
 8015394:	2036      	movs	r0, #54	; 0x36
 8015396:	f7fb fac7 	bl	8010928 <pbuf_alloc>
 801539a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801539c:	693b      	ldr	r3, [r7, #16]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	f000 80b7 	beq.w	8015512 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80153a4:	697b      	ldr	r3, [r7, #20]
 80153a6:	685b      	ldr	r3, [r3, #4]
 80153a8:	891a      	ldrh	r2, [r3, #8]
 80153aa:	697b      	ldr	r3, [r7, #20]
 80153ac:	891b      	ldrh	r3, [r3, #8]
 80153ae:	1ad3      	subs	r3, r2, r3
 80153b0:	b29a      	uxth	r2, r3
 80153b2:	887b      	ldrh	r3, [r7, #2]
 80153b4:	4413      	add	r3, r2
 80153b6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80153b8:	697b      	ldr	r3, [r7, #20]
 80153ba:	6858      	ldr	r0, [r3, #4]
 80153bc:	693b      	ldr	r3, [r7, #16]
 80153be:	685a      	ldr	r2, [r3, #4]
 80153c0:	7bbb      	ldrb	r3, [r7, #14]
 80153c2:	18d1      	adds	r1, r2, r3
 80153c4:	897b      	ldrh	r3, [r7, #10]
 80153c6:	89ba      	ldrh	r2, [r7, #12]
 80153c8:	f7fb ff7c 	bl	80112c4 <pbuf_copy_partial>
 80153cc:	4603      	mov	r3, r0
 80153ce:	461a      	mov	r2, r3
 80153d0:	89bb      	ldrh	r3, [r7, #12]
 80153d2:	4293      	cmp	r3, r2
 80153d4:	f040 809f 	bne.w	8015516 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80153d8:	697b      	ldr	r3, [r7, #20]
 80153da:	68db      	ldr	r3, [r3, #12]
 80153dc:	899b      	ldrh	r3, [r3, #12]
 80153de:	b29b      	uxth	r3, r3
 80153e0:	4618      	mov	r0, r3
 80153e2:	f7fa f9a1 	bl	800f728 <lwip_htons>
 80153e6:	4603      	mov	r3, r0
 80153e8:	b2db      	uxtb	r3, r3
 80153ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80153ee:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80153f0:	2300      	movs	r3, #0
 80153f2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80153f4:	7efb      	ldrb	r3, [r7, #27]
 80153f6:	f003 0308 	and.w	r3, r3, #8
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d007      	beq.n	801540e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80153fe:	7efb      	ldrb	r3, [r7, #27]
 8015400:	f023 0308 	bic.w	r3, r3, #8
 8015404:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8015406:	7ebb      	ldrb	r3, [r7, #26]
 8015408:	f043 0308 	orr.w	r3, r3, #8
 801540c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801540e:	7efb      	ldrb	r3, [r7, #27]
 8015410:	f003 0301 	and.w	r3, r3, #1
 8015414:	2b00      	cmp	r3, #0
 8015416:	d007      	beq.n	8015428 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8015418:	7efb      	ldrb	r3, [r7, #27]
 801541a:	f023 0301 	bic.w	r3, r3, #1
 801541e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8015420:	7ebb      	ldrb	r3, [r7, #26]
 8015422:	f043 0301 	orr.w	r3, r3, #1
 8015426:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8015428:	697b      	ldr	r3, [r7, #20]
 801542a:	68db      	ldr	r3, [r3, #12]
 801542c:	685b      	ldr	r3, [r3, #4]
 801542e:	4618      	mov	r0, r3
 8015430:	f7fa f98f 	bl	800f752 <lwip_htonl>
 8015434:	4602      	mov	r2, r0
 8015436:	887b      	ldrh	r3, [r7, #2]
 8015438:	18d1      	adds	r1, r2, r3
 801543a:	7eba      	ldrb	r2, [r7, #26]
 801543c:	7bfb      	ldrb	r3, [r7, #15]
 801543e:	9300      	str	r3, [sp, #0]
 8015440:	460b      	mov	r3, r1
 8015442:	6939      	ldr	r1, [r7, #16]
 8015444:	6878      	ldr	r0, [r7, #4]
 8015446:	f7ff fea7 	bl	8015198 <tcp_create_segment>
 801544a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801544c:	69fb      	ldr	r3, [r7, #28]
 801544e:	2b00      	cmp	r3, #0
 8015450:	d063      	beq.n	801551a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8015452:	697b      	ldr	r3, [r7, #20]
 8015454:	685b      	ldr	r3, [r3, #4]
 8015456:	4618      	mov	r0, r3
 8015458:	f7fb fdd2 	bl	8011000 <pbuf_clen>
 801545c:	4603      	mov	r3, r0
 801545e:	461a      	mov	r2, r3
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015466:	1a9b      	subs	r3, r3, r2
 8015468:	b29a      	uxth	r2, r3
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8015470:	697b      	ldr	r3, [r7, #20]
 8015472:	6858      	ldr	r0, [r3, #4]
 8015474:	697b      	ldr	r3, [r7, #20]
 8015476:	685b      	ldr	r3, [r3, #4]
 8015478:	891a      	ldrh	r2, [r3, #8]
 801547a:	89bb      	ldrh	r3, [r7, #12]
 801547c:	1ad3      	subs	r3, r2, r3
 801547e:	b29b      	uxth	r3, r3
 8015480:	4619      	mov	r1, r3
 8015482:	f7fb fbb1 	bl	8010be8 <pbuf_realloc>
  useg->len -= remainder;
 8015486:	697b      	ldr	r3, [r7, #20]
 8015488:	891a      	ldrh	r2, [r3, #8]
 801548a:	89bb      	ldrh	r3, [r7, #12]
 801548c:	1ad3      	subs	r3, r2, r3
 801548e:	b29a      	uxth	r2, r3
 8015490:	697b      	ldr	r3, [r7, #20]
 8015492:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8015494:	697b      	ldr	r3, [r7, #20]
 8015496:	68db      	ldr	r3, [r3, #12]
 8015498:	899b      	ldrh	r3, [r3, #12]
 801549a:	b29c      	uxth	r4, r3
 801549c:	7efb      	ldrb	r3, [r7, #27]
 801549e:	b29b      	uxth	r3, r3
 80154a0:	4618      	mov	r0, r3
 80154a2:	f7fa f941 	bl	800f728 <lwip_htons>
 80154a6:	4603      	mov	r3, r0
 80154a8:	461a      	mov	r2, r3
 80154aa:	697b      	ldr	r3, [r7, #20]
 80154ac:	68db      	ldr	r3, [r3, #12]
 80154ae:	4322      	orrs	r2, r4
 80154b0:	b292      	uxth	r2, r2
 80154b2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80154b4:	697b      	ldr	r3, [r7, #20]
 80154b6:	685b      	ldr	r3, [r3, #4]
 80154b8:	4618      	mov	r0, r3
 80154ba:	f7fb fda1 	bl	8011000 <pbuf_clen>
 80154be:	4603      	mov	r3, r0
 80154c0:	461a      	mov	r2, r3
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80154c8:	4413      	add	r3, r2
 80154ca:	b29a      	uxth	r2, r3
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80154d2:	69fb      	ldr	r3, [r7, #28]
 80154d4:	685b      	ldr	r3, [r3, #4]
 80154d6:	4618      	mov	r0, r3
 80154d8:	f7fb fd92 	bl	8011000 <pbuf_clen>
 80154dc:	4603      	mov	r3, r0
 80154de:	461a      	mov	r2, r3
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80154e6:	4413      	add	r3, r2
 80154e8:	b29a      	uxth	r2, r3
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80154f0:	697b      	ldr	r3, [r7, #20]
 80154f2:	681a      	ldr	r2, [r3, #0]
 80154f4:	69fb      	ldr	r3, [r7, #28]
 80154f6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80154f8:	697b      	ldr	r3, [r7, #20]
 80154fa:	69fa      	ldr	r2, [r7, #28]
 80154fc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80154fe:	69fb      	ldr	r3, [r7, #28]
 8015500:	681b      	ldr	r3, [r3, #0]
 8015502:	2b00      	cmp	r3, #0
 8015504:	d103      	bne.n	801550e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	2200      	movs	r2, #0
 801550a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801550e:	2300      	movs	r3, #0
 8015510:	e016      	b.n	8015540 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8015512:	bf00      	nop
 8015514:	e002      	b.n	801551c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8015516:	bf00      	nop
 8015518:	e000      	b.n	801551c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801551a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801551c:	69fb      	ldr	r3, [r7, #28]
 801551e:	2b00      	cmp	r3, #0
 8015520:	d006      	beq.n	8015530 <tcp_split_unsent_seg+0x25c>
 8015522:	4b09      	ldr	r3, [pc, #36]	; (8015548 <tcp_split_unsent_seg+0x274>)
 8015524:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8015528:	490d      	ldr	r1, [pc, #52]	; (8015560 <tcp_split_unsent_seg+0x28c>)
 801552a:	4809      	ldr	r0, [pc, #36]	; (8015550 <tcp_split_unsent_seg+0x27c>)
 801552c:	f004 fbb8 	bl	8019ca0 <iprintf>
  if (p != NULL) {
 8015530:	693b      	ldr	r3, [r7, #16]
 8015532:	2b00      	cmp	r3, #0
 8015534:	d002      	beq.n	801553c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8015536:	6938      	ldr	r0, [r7, #16]
 8015538:	f7fb fcda 	bl	8010ef0 <pbuf_free>
  }

  return ERR_MEM;
 801553c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015540:	4618      	mov	r0, r3
 8015542:	3724      	adds	r7, #36	; 0x24
 8015544:	46bd      	mov	sp, r7
 8015546:	bd90      	pop	{r4, r7, pc}
 8015548:	0801dc88 	.word	0x0801dc88
 801554c:	0801e01c 	.word	0x0801e01c
 8015550:	0801dcdc 	.word	0x0801dcdc
 8015554:	0801e040 	.word	0x0801e040
 8015558:	0801e064 	.word	0x0801e064
 801555c:	0801e074 	.word	0x0801e074
 8015560:	0801e084 	.word	0x0801e084

08015564 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8015564:	b590      	push	{r4, r7, lr}
 8015566:	b085      	sub	sp, #20
 8015568:	af00      	add	r7, sp, #0
 801556a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	2b00      	cmp	r3, #0
 8015570:	d106      	bne.n	8015580 <tcp_send_fin+0x1c>
 8015572:	4b21      	ldr	r3, [pc, #132]	; (80155f8 <tcp_send_fin+0x94>)
 8015574:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8015578:	4920      	ldr	r1, [pc, #128]	; (80155fc <tcp_send_fin+0x98>)
 801557a:	4821      	ldr	r0, [pc, #132]	; (8015600 <tcp_send_fin+0x9c>)
 801557c:	f004 fb90 	bl	8019ca0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015584:	2b00      	cmp	r3, #0
 8015586:	d02e      	beq.n	80155e6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801558c:	60fb      	str	r3, [r7, #12]
 801558e:	e002      	b.n	8015596 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	681b      	ldr	r3, [r3, #0]
 8015594:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015596:	68fb      	ldr	r3, [r7, #12]
 8015598:	681b      	ldr	r3, [r3, #0]
 801559a:	2b00      	cmp	r3, #0
 801559c:	d1f8      	bne.n	8015590 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801559e:	68fb      	ldr	r3, [r7, #12]
 80155a0:	68db      	ldr	r3, [r3, #12]
 80155a2:	899b      	ldrh	r3, [r3, #12]
 80155a4:	b29b      	uxth	r3, r3
 80155a6:	4618      	mov	r0, r3
 80155a8:	f7fa f8be 	bl	800f728 <lwip_htons>
 80155ac:	4603      	mov	r3, r0
 80155ae:	b2db      	uxtb	r3, r3
 80155b0:	f003 0307 	and.w	r3, r3, #7
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d116      	bne.n	80155e6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80155b8:	68fb      	ldr	r3, [r7, #12]
 80155ba:	68db      	ldr	r3, [r3, #12]
 80155bc:	899b      	ldrh	r3, [r3, #12]
 80155be:	b29c      	uxth	r4, r3
 80155c0:	2001      	movs	r0, #1
 80155c2:	f7fa f8b1 	bl	800f728 <lwip_htons>
 80155c6:	4603      	mov	r3, r0
 80155c8:	461a      	mov	r2, r3
 80155ca:	68fb      	ldr	r3, [r7, #12]
 80155cc:	68db      	ldr	r3, [r3, #12]
 80155ce:	4322      	orrs	r2, r4
 80155d0:	b292      	uxth	r2, r2
 80155d2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	8b5b      	ldrh	r3, [r3, #26]
 80155d8:	f043 0320 	orr.w	r3, r3, #32
 80155dc:	b29a      	uxth	r2, r3
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80155e2:	2300      	movs	r3, #0
 80155e4:	e004      	b.n	80155f0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80155e6:	2101      	movs	r1, #1
 80155e8:	6878      	ldr	r0, [r7, #4]
 80155ea:	f000 f80b 	bl	8015604 <tcp_enqueue_flags>
 80155ee:	4603      	mov	r3, r0
}
 80155f0:	4618      	mov	r0, r3
 80155f2:	3714      	adds	r7, #20
 80155f4:	46bd      	mov	sp, r7
 80155f6:	bd90      	pop	{r4, r7, pc}
 80155f8:	0801dc88 	.word	0x0801dc88
 80155fc:	0801e090 	.word	0x0801e090
 8015600:	0801dcdc 	.word	0x0801dcdc

08015604 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8015604:	b580      	push	{r7, lr}
 8015606:	b08a      	sub	sp, #40	; 0x28
 8015608:	af02      	add	r7, sp, #8
 801560a:	6078      	str	r0, [r7, #4]
 801560c:	460b      	mov	r3, r1
 801560e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8015610:	2300      	movs	r3, #0
 8015612:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8015614:	2300      	movs	r3, #0
 8015616:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8015618:	78fb      	ldrb	r3, [r7, #3]
 801561a:	f003 0303 	and.w	r3, r3, #3
 801561e:	2b00      	cmp	r3, #0
 8015620:	d106      	bne.n	8015630 <tcp_enqueue_flags+0x2c>
 8015622:	4b67      	ldr	r3, [pc, #412]	; (80157c0 <tcp_enqueue_flags+0x1bc>)
 8015624:	f240 4211 	movw	r2, #1041	; 0x411
 8015628:	4966      	ldr	r1, [pc, #408]	; (80157c4 <tcp_enqueue_flags+0x1c0>)
 801562a:	4867      	ldr	r0, [pc, #412]	; (80157c8 <tcp_enqueue_flags+0x1c4>)
 801562c:	f004 fb38 	bl	8019ca0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	2b00      	cmp	r3, #0
 8015634:	d106      	bne.n	8015644 <tcp_enqueue_flags+0x40>
 8015636:	4b62      	ldr	r3, [pc, #392]	; (80157c0 <tcp_enqueue_flags+0x1bc>)
 8015638:	f240 4213 	movw	r2, #1043	; 0x413
 801563c:	4963      	ldr	r1, [pc, #396]	; (80157cc <tcp_enqueue_flags+0x1c8>)
 801563e:	4862      	ldr	r0, [pc, #392]	; (80157c8 <tcp_enqueue_flags+0x1c4>)
 8015640:	f004 fb2e 	bl	8019ca0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8015644:	78fb      	ldrb	r3, [r7, #3]
 8015646:	f003 0302 	and.w	r3, r3, #2
 801564a:	2b00      	cmp	r3, #0
 801564c:	d001      	beq.n	8015652 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801564e:	2301      	movs	r3, #1
 8015650:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015652:	7ffb      	ldrb	r3, [r7, #31]
 8015654:	009b      	lsls	r3, r3, #2
 8015656:	b2db      	uxtb	r3, r3
 8015658:	f003 0304 	and.w	r3, r3, #4
 801565c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801565e:	7dfb      	ldrb	r3, [r7, #23]
 8015660:	b29b      	uxth	r3, r3
 8015662:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015666:	4619      	mov	r1, r3
 8015668:	2036      	movs	r0, #54	; 0x36
 801566a:	f7fb f95d 	bl	8010928 <pbuf_alloc>
 801566e:	6138      	str	r0, [r7, #16]
 8015670:	693b      	ldr	r3, [r7, #16]
 8015672:	2b00      	cmp	r3, #0
 8015674:	d109      	bne.n	801568a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	8b5b      	ldrh	r3, [r3, #26]
 801567a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801567e:	b29a      	uxth	r2, r3
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015684:	f04f 33ff 	mov.w	r3, #4294967295
 8015688:	e095      	b.n	80157b6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801568a:	693b      	ldr	r3, [r7, #16]
 801568c:	895a      	ldrh	r2, [r3, #10]
 801568e:	7dfb      	ldrb	r3, [r7, #23]
 8015690:	b29b      	uxth	r3, r3
 8015692:	429a      	cmp	r2, r3
 8015694:	d206      	bcs.n	80156a4 <tcp_enqueue_flags+0xa0>
 8015696:	4b4a      	ldr	r3, [pc, #296]	; (80157c0 <tcp_enqueue_flags+0x1bc>)
 8015698:	f240 4239 	movw	r2, #1081	; 0x439
 801569c:	494c      	ldr	r1, [pc, #304]	; (80157d0 <tcp_enqueue_flags+0x1cc>)
 801569e:	484a      	ldr	r0, [pc, #296]	; (80157c8 <tcp_enqueue_flags+0x1c4>)
 80156a0:	f004 fafe 	bl	8019ca0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80156a8:	78fa      	ldrb	r2, [r7, #3]
 80156aa:	7ffb      	ldrb	r3, [r7, #31]
 80156ac:	9300      	str	r3, [sp, #0]
 80156ae:	460b      	mov	r3, r1
 80156b0:	6939      	ldr	r1, [r7, #16]
 80156b2:	6878      	ldr	r0, [r7, #4]
 80156b4:	f7ff fd70 	bl	8015198 <tcp_create_segment>
 80156b8:	60f8      	str	r0, [r7, #12]
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d109      	bne.n	80156d4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	8b5b      	ldrh	r3, [r3, #26]
 80156c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80156c8:	b29a      	uxth	r2, r3
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80156ce:	f04f 33ff 	mov.w	r3, #4294967295
 80156d2:	e070      	b.n	80157b6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	68db      	ldr	r3, [r3, #12]
 80156d8:	f003 0303 	and.w	r3, r3, #3
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d006      	beq.n	80156ee <tcp_enqueue_flags+0xea>
 80156e0:	4b37      	ldr	r3, [pc, #220]	; (80157c0 <tcp_enqueue_flags+0x1bc>)
 80156e2:	f240 4242 	movw	r2, #1090	; 0x442
 80156e6:	493b      	ldr	r1, [pc, #236]	; (80157d4 <tcp_enqueue_flags+0x1d0>)
 80156e8:	4837      	ldr	r0, [pc, #220]	; (80157c8 <tcp_enqueue_flags+0x1c4>)
 80156ea:	f004 fad9 	bl	8019ca0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	891b      	ldrh	r3, [r3, #8]
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d006      	beq.n	8015704 <tcp_enqueue_flags+0x100>
 80156f6:	4b32      	ldr	r3, [pc, #200]	; (80157c0 <tcp_enqueue_flags+0x1bc>)
 80156f8:	f240 4243 	movw	r2, #1091	; 0x443
 80156fc:	4936      	ldr	r1, [pc, #216]	; (80157d8 <tcp_enqueue_flags+0x1d4>)
 80156fe:	4832      	ldr	r0, [pc, #200]	; (80157c8 <tcp_enqueue_flags+0x1c4>)
 8015700:	f004 face 	bl	8019ca0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015708:	2b00      	cmp	r3, #0
 801570a:	d103      	bne.n	8015714 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	68fa      	ldr	r2, [r7, #12]
 8015710:	66da      	str	r2, [r3, #108]	; 0x6c
 8015712:	e00d      	b.n	8015730 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015718:	61bb      	str	r3, [r7, #24]
 801571a:	e002      	b.n	8015722 <tcp_enqueue_flags+0x11e>
 801571c:	69bb      	ldr	r3, [r7, #24]
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	61bb      	str	r3, [r7, #24]
 8015722:	69bb      	ldr	r3, [r7, #24]
 8015724:	681b      	ldr	r3, [r3, #0]
 8015726:	2b00      	cmp	r3, #0
 8015728:	d1f8      	bne.n	801571c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801572a:	69bb      	ldr	r3, [r7, #24]
 801572c:	68fa      	ldr	r2, [r7, #12]
 801572e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	2200      	movs	r2, #0
 8015734:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8015738:	78fb      	ldrb	r3, [r7, #3]
 801573a:	f003 0302 	and.w	r3, r3, #2
 801573e:	2b00      	cmp	r3, #0
 8015740:	d104      	bne.n	801574c <tcp_enqueue_flags+0x148>
 8015742:	78fb      	ldrb	r3, [r7, #3]
 8015744:	f003 0301 	and.w	r3, r3, #1
 8015748:	2b00      	cmp	r3, #0
 801574a:	d004      	beq.n	8015756 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015750:	1c5a      	adds	r2, r3, #1
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8015756:	78fb      	ldrb	r3, [r7, #3]
 8015758:	f003 0301 	and.w	r3, r3, #1
 801575c:	2b00      	cmp	r3, #0
 801575e:	d006      	beq.n	801576e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	8b5b      	ldrh	r3, [r3, #26]
 8015764:	f043 0320 	orr.w	r3, r3, #32
 8015768:	b29a      	uxth	r2, r3
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	685b      	ldr	r3, [r3, #4]
 8015772:	4618      	mov	r0, r3
 8015774:	f7fb fc44 	bl	8011000 <pbuf_clen>
 8015778:	4603      	mov	r3, r0
 801577a:	461a      	mov	r2, r3
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015782:	4413      	add	r3, r2
 8015784:	b29a      	uxth	r2, r3
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015792:	2b00      	cmp	r3, #0
 8015794:	d00e      	beq.n	80157b4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801579a:	2b00      	cmp	r3, #0
 801579c:	d10a      	bne.n	80157b4 <tcp_enqueue_flags+0x1b0>
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d106      	bne.n	80157b4 <tcp_enqueue_flags+0x1b0>
 80157a6:	4b06      	ldr	r3, [pc, #24]	; (80157c0 <tcp_enqueue_flags+0x1bc>)
 80157a8:	f240 4265 	movw	r2, #1125	; 0x465
 80157ac:	490b      	ldr	r1, [pc, #44]	; (80157dc <tcp_enqueue_flags+0x1d8>)
 80157ae:	4806      	ldr	r0, [pc, #24]	; (80157c8 <tcp_enqueue_flags+0x1c4>)
 80157b0:	f004 fa76 	bl	8019ca0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80157b4:	2300      	movs	r3, #0
}
 80157b6:	4618      	mov	r0, r3
 80157b8:	3720      	adds	r7, #32
 80157ba:	46bd      	mov	sp, r7
 80157bc:	bd80      	pop	{r7, pc}
 80157be:	bf00      	nop
 80157c0:	0801dc88 	.word	0x0801dc88
 80157c4:	0801e0ac 	.word	0x0801e0ac
 80157c8:	0801dcdc 	.word	0x0801dcdc
 80157cc:	0801e104 	.word	0x0801e104
 80157d0:	0801e124 	.word	0x0801e124
 80157d4:	0801e160 	.word	0x0801e160
 80157d8:	0801e178 	.word	0x0801e178
 80157dc:	0801e1a4 	.word	0x0801e1a4

080157e0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80157e0:	b5b0      	push	{r4, r5, r7, lr}
 80157e2:	b08a      	sub	sp, #40	; 0x28
 80157e4:	af00      	add	r7, sp, #0
 80157e6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d106      	bne.n	80157fc <tcp_output+0x1c>
 80157ee:	4b8a      	ldr	r3, [pc, #552]	; (8015a18 <tcp_output+0x238>)
 80157f0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80157f4:	4989      	ldr	r1, [pc, #548]	; (8015a1c <tcp_output+0x23c>)
 80157f6:	488a      	ldr	r0, [pc, #552]	; (8015a20 <tcp_output+0x240>)
 80157f8:	f004 fa52 	bl	8019ca0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	7d1b      	ldrb	r3, [r3, #20]
 8015800:	2b01      	cmp	r3, #1
 8015802:	d106      	bne.n	8015812 <tcp_output+0x32>
 8015804:	4b84      	ldr	r3, [pc, #528]	; (8015a18 <tcp_output+0x238>)
 8015806:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801580a:	4986      	ldr	r1, [pc, #536]	; (8015a24 <tcp_output+0x244>)
 801580c:	4884      	ldr	r0, [pc, #528]	; (8015a20 <tcp_output+0x240>)
 801580e:	f004 fa47 	bl	8019ca0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8015812:	4b85      	ldr	r3, [pc, #532]	; (8015a28 <tcp_output+0x248>)
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	687a      	ldr	r2, [r7, #4]
 8015818:	429a      	cmp	r2, r3
 801581a:	d101      	bne.n	8015820 <tcp_output+0x40>
    return ERR_OK;
 801581c:	2300      	movs	r3, #0
 801581e:	e1ce      	b.n	8015bbe <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801582c:	4293      	cmp	r3, r2
 801582e:	bf28      	it	cs
 8015830:	4613      	movcs	r3, r2
 8015832:	b29b      	uxth	r3, r3
 8015834:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801583a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801583c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801583e:	2b00      	cmp	r3, #0
 8015840:	d10b      	bne.n	801585a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	8b5b      	ldrh	r3, [r3, #26]
 8015846:	f003 0302 	and.w	r3, r3, #2
 801584a:	2b00      	cmp	r3, #0
 801584c:	f000 81aa 	beq.w	8015ba4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8015850:	6878      	ldr	r0, [r7, #4]
 8015852:	f000 fdcb 	bl	80163ec <tcp_send_empty_ack>
 8015856:	4603      	mov	r3, r0
 8015858:	e1b1      	b.n	8015bbe <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801585a:	6879      	ldr	r1, [r7, #4]
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	3304      	adds	r3, #4
 8015860:	461a      	mov	r2, r3
 8015862:	6878      	ldr	r0, [r7, #4]
 8015864:	f7ff fc7c 	bl	8015160 <tcp_route>
 8015868:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801586a:	697b      	ldr	r3, [r7, #20]
 801586c:	2b00      	cmp	r3, #0
 801586e:	d102      	bne.n	8015876 <tcp_output+0x96>
    return ERR_RTE;
 8015870:	f06f 0303 	mvn.w	r3, #3
 8015874:	e1a3      	b.n	8015bbe <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	2b00      	cmp	r3, #0
 801587a:	d003      	beq.n	8015884 <tcp_output+0xa4>
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	2b00      	cmp	r3, #0
 8015882:	d111      	bne.n	80158a8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8015884:	697b      	ldr	r3, [r7, #20]
 8015886:	2b00      	cmp	r3, #0
 8015888:	d002      	beq.n	8015890 <tcp_output+0xb0>
 801588a:	697b      	ldr	r3, [r7, #20]
 801588c:	3304      	adds	r3, #4
 801588e:	e000      	b.n	8015892 <tcp_output+0xb2>
 8015890:	2300      	movs	r3, #0
 8015892:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8015894:	693b      	ldr	r3, [r7, #16]
 8015896:	2b00      	cmp	r3, #0
 8015898:	d102      	bne.n	80158a0 <tcp_output+0xc0>
      return ERR_RTE;
 801589a:	f06f 0303 	mvn.w	r3, #3
 801589e:	e18e      	b.n	8015bbe <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80158a0:	693b      	ldr	r3, [r7, #16]
 80158a2:	681a      	ldr	r2, [r3, #0]
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80158a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158aa:	68db      	ldr	r3, [r3, #12]
 80158ac:	685b      	ldr	r3, [r3, #4]
 80158ae:	4618      	mov	r0, r3
 80158b0:	f7f9 ff4f 	bl	800f752 <lwip_htonl>
 80158b4:	4602      	mov	r2, r0
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80158ba:	1ad3      	subs	r3, r2, r3
 80158bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80158be:	8912      	ldrh	r2, [r2, #8]
 80158c0:	4413      	add	r3, r2
 80158c2:	69ba      	ldr	r2, [r7, #24]
 80158c4:	429a      	cmp	r2, r3
 80158c6:	d227      	bcs.n	8015918 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80158ce:	461a      	mov	r2, r3
 80158d0:	69bb      	ldr	r3, [r7, #24]
 80158d2:	4293      	cmp	r3, r2
 80158d4:	d114      	bne.n	8015900 <tcp_output+0x120>
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d110      	bne.n	8015900 <tcp_output+0x120>
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d10b      	bne.n	8015900 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	2200      	movs	r2, #0
 80158ec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	2201      	movs	r2, #1
 80158f4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	2200      	movs	r2, #0
 80158fc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	8b5b      	ldrh	r3, [r3, #26]
 8015904:	f003 0302 	and.w	r3, r3, #2
 8015908:	2b00      	cmp	r3, #0
 801590a:	f000 814d 	beq.w	8015ba8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801590e:	6878      	ldr	r0, [r7, #4]
 8015910:	f000 fd6c 	bl	80163ec <tcp_send_empty_ack>
 8015914:	4603      	mov	r3, r0
 8015916:	e152      	b.n	8015bbe <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	2200      	movs	r2, #0
 801591c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015924:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8015926:	6a3b      	ldr	r3, [r7, #32]
 8015928:	2b00      	cmp	r3, #0
 801592a:	f000 811c 	beq.w	8015b66 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801592e:	e002      	b.n	8015936 <tcp_output+0x156>
 8015930:	6a3b      	ldr	r3, [r7, #32]
 8015932:	681b      	ldr	r3, [r3, #0]
 8015934:	623b      	str	r3, [r7, #32]
 8015936:	6a3b      	ldr	r3, [r7, #32]
 8015938:	681b      	ldr	r3, [r3, #0]
 801593a:	2b00      	cmp	r3, #0
 801593c:	d1f8      	bne.n	8015930 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801593e:	e112      	b.n	8015b66 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8015940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015942:	68db      	ldr	r3, [r3, #12]
 8015944:	899b      	ldrh	r3, [r3, #12]
 8015946:	b29b      	uxth	r3, r3
 8015948:	4618      	mov	r0, r3
 801594a:	f7f9 feed 	bl	800f728 <lwip_htons>
 801594e:	4603      	mov	r3, r0
 8015950:	b2db      	uxtb	r3, r3
 8015952:	f003 0304 	and.w	r3, r3, #4
 8015956:	2b00      	cmp	r3, #0
 8015958:	d006      	beq.n	8015968 <tcp_output+0x188>
 801595a:	4b2f      	ldr	r3, [pc, #188]	; (8015a18 <tcp_output+0x238>)
 801595c:	f240 5236 	movw	r2, #1334	; 0x536
 8015960:	4932      	ldr	r1, [pc, #200]	; (8015a2c <tcp_output+0x24c>)
 8015962:	482f      	ldr	r0, [pc, #188]	; (8015a20 <tcp_output+0x240>)
 8015964:	f004 f99c 	bl	8019ca0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801596c:	2b00      	cmp	r3, #0
 801596e:	d01f      	beq.n	80159b0 <tcp_output+0x1d0>
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	8b5b      	ldrh	r3, [r3, #26]
 8015974:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8015978:	2b00      	cmp	r3, #0
 801597a:	d119      	bne.n	80159b0 <tcp_output+0x1d0>
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015980:	2b00      	cmp	r3, #0
 8015982:	d00b      	beq.n	801599c <tcp_output+0x1bc>
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015988:	681b      	ldr	r3, [r3, #0]
 801598a:	2b00      	cmp	r3, #0
 801598c:	d110      	bne.n	80159b0 <tcp_output+0x1d0>
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015992:	891a      	ldrh	r2, [r3, #8]
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015998:	429a      	cmp	r2, r3
 801599a:	d209      	bcs.n	80159b0 <tcp_output+0x1d0>
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d004      	beq.n	80159b0 <tcp_output+0x1d0>
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80159ac:	2b0f      	cmp	r3, #15
 80159ae:	d901      	bls.n	80159b4 <tcp_output+0x1d4>
 80159b0:	2301      	movs	r3, #1
 80159b2:	e000      	b.n	80159b6 <tcp_output+0x1d6>
 80159b4:	2300      	movs	r3, #0
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d106      	bne.n	80159c8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	8b5b      	ldrh	r3, [r3, #26]
 80159be:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	f000 80e4 	beq.w	8015b90 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	7d1b      	ldrb	r3, [r3, #20]
 80159cc:	2b02      	cmp	r3, #2
 80159ce:	d00d      	beq.n	80159ec <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80159d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159d2:	68db      	ldr	r3, [r3, #12]
 80159d4:	899b      	ldrh	r3, [r3, #12]
 80159d6:	b29c      	uxth	r4, r3
 80159d8:	2010      	movs	r0, #16
 80159da:	f7f9 fea5 	bl	800f728 <lwip_htons>
 80159de:	4603      	mov	r3, r0
 80159e0:	461a      	mov	r2, r3
 80159e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159e4:	68db      	ldr	r3, [r3, #12]
 80159e6:	4322      	orrs	r2, r4
 80159e8:	b292      	uxth	r2, r2
 80159ea:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80159ec:	697a      	ldr	r2, [r7, #20]
 80159ee:	6879      	ldr	r1, [r7, #4]
 80159f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80159f2:	f000 f909 	bl	8015c08 <tcp_output_segment>
 80159f6:	4603      	mov	r3, r0
 80159f8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80159fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d016      	beq.n	8015a30 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	8b5b      	ldrh	r3, [r3, #26]
 8015a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015a0a:	b29a      	uxth	r2, r3
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	835a      	strh	r2, [r3, #26]
      return err;
 8015a10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015a14:	e0d3      	b.n	8015bbe <tcp_output+0x3de>
 8015a16:	bf00      	nop
 8015a18:	0801dc88 	.word	0x0801dc88
 8015a1c:	0801e1cc 	.word	0x0801e1cc
 8015a20:	0801dcdc 	.word	0x0801dcdc
 8015a24:	0801e1e4 	.word	0x0801e1e4
 8015a28:	20007124 	.word	0x20007124
 8015a2c:	0801e20c 	.word	0x0801e20c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8015a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a32:	681a      	ldr	r2, [r3, #0]
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	7d1b      	ldrb	r3, [r3, #20]
 8015a3c:	2b02      	cmp	r3, #2
 8015a3e:	d006      	beq.n	8015a4e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	8b5b      	ldrh	r3, [r3, #26]
 8015a44:	f023 0303 	bic.w	r3, r3, #3
 8015a48:	b29a      	uxth	r2, r3
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a50:	68db      	ldr	r3, [r3, #12]
 8015a52:	685b      	ldr	r3, [r3, #4]
 8015a54:	4618      	mov	r0, r3
 8015a56:	f7f9 fe7c 	bl	800f752 <lwip_htonl>
 8015a5a:	4604      	mov	r4, r0
 8015a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a5e:	891b      	ldrh	r3, [r3, #8]
 8015a60:	461d      	mov	r5, r3
 8015a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a64:	68db      	ldr	r3, [r3, #12]
 8015a66:	899b      	ldrh	r3, [r3, #12]
 8015a68:	b29b      	uxth	r3, r3
 8015a6a:	4618      	mov	r0, r3
 8015a6c:	f7f9 fe5c 	bl	800f728 <lwip_htons>
 8015a70:	4603      	mov	r3, r0
 8015a72:	b2db      	uxtb	r3, r3
 8015a74:	f003 0303 	and.w	r3, r3, #3
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d001      	beq.n	8015a80 <tcp_output+0x2a0>
 8015a7c:	2301      	movs	r3, #1
 8015a7e:	e000      	b.n	8015a82 <tcp_output+0x2a2>
 8015a80:	2300      	movs	r3, #0
 8015a82:	442b      	add	r3, r5
 8015a84:	4423      	add	r3, r4
 8015a86:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015a8c:	68bb      	ldr	r3, [r7, #8]
 8015a8e:	1ad3      	subs	r3, r2, r3
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	da02      	bge.n	8015a9a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	68ba      	ldr	r2, [r7, #8]
 8015a98:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8015a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a9c:	891b      	ldrh	r3, [r3, #8]
 8015a9e:	461c      	mov	r4, r3
 8015aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015aa2:	68db      	ldr	r3, [r3, #12]
 8015aa4:	899b      	ldrh	r3, [r3, #12]
 8015aa6:	b29b      	uxth	r3, r3
 8015aa8:	4618      	mov	r0, r3
 8015aaa:	f7f9 fe3d 	bl	800f728 <lwip_htons>
 8015aae:	4603      	mov	r3, r0
 8015ab0:	b2db      	uxtb	r3, r3
 8015ab2:	f003 0303 	and.w	r3, r3, #3
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d001      	beq.n	8015abe <tcp_output+0x2de>
 8015aba:	2301      	movs	r3, #1
 8015abc:	e000      	b.n	8015ac0 <tcp_output+0x2e0>
 8015abe:	2300      	movs	r3, #0
 8015ac0:	4423      	add	r3, r4
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d049      	beq.n	8015b5a <tcp_output+0x37a>
      seg->next = NULL;
 8015ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ac8:	2200      	movs	r2, #0
 8015aca:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	d105      	bne.n	8015ae0 <tcp_output+0x300>
        pcb->unacked = seg;
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015ad8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8015ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015adc:	623b      	str	r3, [r7, #32]
 8015ade:	e03f      	b.n	8015b60 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8015ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ae2:	68db      	ldr	r3, [r3, #12]
 8015ae4:	685b      	ldr	r3, [r3, #4]
 8015ae6:	4618      	mov	r0, r3
 8015ae8:	f7f9 fe33 	bl	800f752 <lwip_htonl>
 8015aec:	4604      	mov	r4, r0
 8015aee:	6a3b      	ldr	r3, [r7, #32]
 8015af0:	68db      	ldr	r3, [r3, #12]
 8015af2:	685b      	ldr	r3, [r3, #4]
 8015af4:	4618      	mov	r0, r3
 8015af6:	f7f9 fe2c 	bl	800f752 <lwip_htonl>
 8015afa:	4603      	mov	r3, r0
 8015afc:	1ae3      	subs	r3, r4, r3
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	da24      	bge.n	8015b4c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	3370      	adds	r3, #112	; 0x70
 8015b06:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015b08:	e002      	b.n	8015b10 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8015b0a:	69fb      	ldr	r3, [r7, #28]
 8015b0c:	681b      	ldr	r3, [r3, #0]
 8015b0e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015b10:	69fb      	ldr	r3, [r7, #28]
 8015b12:	681b      	ldr	r3, [r3, #0]
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d011      	beq.n	8015b3c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015b18:	69fb      	ldr	r3, [r7, #28]
 8015b1a:	681b      	ldr	r3, [r3, #0]
 8015b1c:	68db      	ldr	r3, [r3, #12]
 8015b1e:	685b      	ldr	r3, [r3, #4]
 8015b20:	4618      	mov	r0, r3
 8015b22:	f7f9 fe16 	bl	800f752 <lwip_htonl>
 8015b26:	4604      	mov	r4, r0
 8015b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b2a:	68db      	ldr	r3, [r3, #12]
 8015b2c:	685b      	ldr	r3, [r3, #4]
 8015b2e:	4618      	mov	r0, r3
 8015b30:	f7f9 fe0f 	bl	800f752 <lwip_htonl>
 8015b34:	4603      	mov	r3, r0
 8015b36:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	dbe6      	blt.n	8015b0a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8015b3c:	69fb      	ldr	r3, [r7, #28]
 8015b3e:	681a      	ldr	r2, [r3, #0]
 8015b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b42:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8015b44:	69fb      	ldr	r3, [r7, #28]
 8015b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b48:	601a      	str	r2, [r3, #0]
 8015b4a:	e009      	b.n	8015b60 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8015b4c:	6a3b      	ldr	r3, [r7, #32]
 8015b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b50:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8015b52:	6a3b      	ldr	r3, [r7, #32]
 8015b54:	681b      	ldr	r3, [r3, #0]
 8015b56:	623b      	str	r3, [r7, #32]
 8015b58:	e002      	b.n	8015b60 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8015b5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015b5c:	f7fc fc3f 	bl	80123de <tcp_seg_free>
    }
    seg = pcb->unsent;
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015b64:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8015b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	d012      	beq.n	8015b92 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8015b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b6e:	68db      	ldr	r3, [r3, #12]
 8015b70:	685b      	ldr	r3, [r3, #4]
 8015b72:	4618      	mov	r0, r3
 8015b74:	f7f9 fded 	bl	800f752 <lwip_htonl>
 8015b78:	4602      	mov	r2, r0
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015b7e:	1ad3      	subs	r3, r2, r3
 8015b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b82:	8912      	ldrh	r2, [r2, #8]
 8015b84:	4413      	add	r3, r2
  while (seg != NULL &&
 8015b86:	69ba      	ldr	r2, [r7, #24]
 8015b88:	429a      	cmp	r2, r3
 8015b8a:	f4bf aed9 	bcs.w	8015940 <tcp_output+0x160>
 8015b8e:	e000      	b.n	8015b92 <tcp_output+0x3b2>
      break;
 8015b90:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d108      	bne.n	8015bac <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	2200      	movs	r2, #0
 8015b9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8015ba2:	e004      	b.n	8015bae <tcp_output+0x3ce>
    goto output_done;
 8015ba4:	bf00      	nop
 8015ba6:	e002      	b.n	8015bae <tcp_output+0x3ce>
    goto output_done;
 8015ba8:	bf00      	nop
 8015baa:	e000      	b.n	8015bae <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8015bac:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	8b5b      	ldrh	r3, [r3, #26]
 8015bb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015bb6:	b29a      	uxth	r2, r3
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8015bbc:	2300      	movs	r3, #0
}
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	3728      	adds	r7, #40	; 0x28
 8015bc2:	46bd      	mov	sp, r7
 8015bc4:	bdb0      	pop	{r4, r5, r7, pc}
 8015bc6:	bf00      	nop

08015bc8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8015bc8:	b580      	push	{r7, lr}
 8015bca:	b082      	sub	sp, #8
 8015bcc:	af00      	add	r7, sp, #0
 8015bce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	d106      	bne.n	8015be4 <tcp_output_segment_busy+0x1c>
 8015bd6:	4b09      	ldr	r3, [pc, #36]	; (8015bfc <tcp_output_segment_busy+0x34>)
 8015bd8:	f240 529a 	movw	r2, #1434	; 0x59a
 8015bdc:	4908      	ldr	r1, [pc, #32]	; (8015c00 <tcp_output_segment_busy+0x38>)
 8015bde:	4809      	ldr	r0, [pc, #36]	; (8015c04 <tcp_output_segment_busy+0x3c>)
 8015be0:	f004 f85e 	bl	8019ca0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	685b      	ldr	r3, [r3, #4]
 8015be8:	7b9b      	ldrb	r3, [r3, #14]
 8015bea:	2b01      	cmp	r3, #1
 8015bec:	d001      	beq.n	8015bf2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8015bee:	2301      	movs	r3, #1
 8015bf0:	e000      	b.n	8015bf4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8015bf2:	2300      	movs	r3, #0
}
 8015bf4:	4618      	mov	r0, r3
 8015bf6:	3708      	adds	r7, #8
 8015bf8:	46bd      	mov	sp, r7
 8015bfa:	bd80      	pop	{r7, pc}
 8015bfc:	0801dc88 	.word	0x0801dc88
 8015c00:	0801e224 	.word	0x0801e224
 8015c04:	0801dcdc 	.word	0x0801dcdc

08015c08 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8015c08:	b5b0      	push	{r4, r5, r7, lr}
 8015c0a:	b08c      	sub	sp, #48	; 0x30
 8015c0c:	af04      	add	r7, sp, #16
 8015c0e:	60f8      	str	r0, [r7, #12]
 8015c10:	60b9      	str	r1, [r7, #8]
 8015c12:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8015c14:	68fb      	ldr	r3, [r7, #12]
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d106      	bne.n	8015c28 <tcp_output_segment+0x20>
 8015c1a:	4b64      	ldr	r3, [pc, #400]	; (8015dac <tcp_output_segment+0x1a4>)
 8015c1c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8015c20:	4963      	ldr	r1, [pc, #396]	; (8015db0 <tcp_output_segment+0x1a8>)
 8015c22:	4864      	ldr	r0, [pc, #400]	; (8015db4 <tcp_output_segment+0x1ac>)
 8015c24:	f004 f83c 	bl	8019ca0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8015c28:	68bb      	ldr	r3, [r7, #8]
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d106      	bne.n	8015c3c <tcp_output_segment+0x34>
 8015c2e:	4b5f      	ldr	r3, [pc, #380]	; (8015dac <tcp_output_segment+0x1a4>)
 8015c30:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8015c34:	4960      	ldr	r1, [pc, #384]	; (8015db8 <tcp_output_segment+0x1b0>)
 8015c36:	485f      	ldr	r0, [pc, #380]	; (8015db4 <tcp_output_segment+0x1ac>)
 8015c38:	f004 f832 	bl	8019ca0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d106      	bne.n	8015c50 <tcp_output_segment+0x48>
 8015c42:	4b5a      	ldr	r3, [pc, #360]	; (8015dac <tcp_output_segment+0x1a4>)
 8015c44:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8015c48:	495c      	ldr	r1, [pc, #368]	; (8015dbc <tcp_output_segment+0x1b4>)
 8015c4a:	485a      	ldr	r0, [pc, #360]	; (8015db4 <tcp_output_segment+0x1ac>)
 8015c4c:	f004 f828 	bl	8019ca0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8015c50:	68f8      	ldr	r0, [r7, #12]
 8015c52:	f7ff ffb9 	bl	8015bc8 <tcp_output_segment_busy>
 8015c56:	4603      	mov	r3, r0
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d001      	beq.n	8015c60 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8015c5c:	2300      	movs	r3, #0
 8015c5e:	e0a1      	b.n	8015da4 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015c60:	68bb      	ldr	r3, [r7, #8]
 8015c62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015c64:	68fb      	ldr	r3, [r7, #12]
 8015c66:	68dc      	ldr	r4, [r3, #12]
 8015c68:	4610      	mov	r0, r2
 8015c6a:	f7f9 fd72 	bl	800f752 <lwip_htonl>
 8015c6e:	4603      	mov	r3, r0
 8015c70:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8015c72:	68bb      	ldr	r3, [r7, #8]
 8015c74:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8015c76:	68fb      	ldr	r3, [r7, #12]
 8015c78:	68dc      	ldr	r4, [r3, #12]
 8015c7a:	4610      	mov	r0, r2
 8015c7c:	f7f9 fd54 	bl	800f728 <lwip_htons>
 8015c80:	4603      	mov	r3, r0
 8015c82:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015c84:	68bb      	ldr	r3, [r7, #8]
 8015c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c88:	68ba      	ldr	r2, [r7, #8]
 8015c8a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015c8c:	441a      	add	r2, r3
 8015c8e:	68bb      	ldr	r3, [r7, #8]
 8015c90:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8015c92:	68fb      	ldr	r3, [r7, #12]
 8015c94:	68db      	ldr	r3, [r3, #12]
 8015c96:	3314      	adds	r3, #20
 8015c98:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8015c9a:	68fb      	ldr	r3, [r7, #12]
 8015c9c:	7a9b      	ldrb	r3, [r3, #10]
 8015c9e:	f003 0301 	and.w	r3, r3, #1
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d015      	beq.n	8015cd2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8015ca6:	68bb      	ldr	r3, [r7, #8]
 8015ca8:	3304      	adds	r3, #4
 8015caa:	461a      	mov	r2, r3
 8015cac:	6879      	ldr	r1, [r7, #4]
 8015cae:	f240 50b4 	movw	r0, #1460	; 0x5b4
 8015cb2:	f7fc fe8b 	bl	80129cc <tcp_eff_send_mss_netif>
 8015cb6:	4603      	mov	r3, r0
 8015cb8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8015cba:	8b7b      	ldrh	r3, [r7, #26]
 8015cbc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8015cc0:	4618      	mov	r0, r3
 8015cc2:	f7f9 fd46 	bl	800f752 <lwip_htonl>
 8015cc6:	4602      	mov	r2, r0
 8015cc8:	69fb      	ldr	r3, [r7, #28]
 8015cca:	601a      	str	r2, [r3, #0]
    opts += 1;
 8015ccc:	69fb      	ldr	r3, [r7, #28]
 8015cce:	3304      	adds	r3, #4
 8015cd0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8015cd2:	68bb      	ldr	r3, [r7, #8]
 8015cd4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	da02      	bge.n	8015ce2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8015cdc:	68bb      	ldr	r3, [r7, #8]
 8015cde:	2200      	movs	r2, #0
 8015ce0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8015ce2:	68bb      	ldr	r3, [r7, #8]
 8015ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d10c      	bne.n	8015d04 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8015cea:	4b35      	ldr	r3, [pc, #212]	; (8015dc0 <tcp_output_segment+0x1b8>)
 8015cec:	681a      	ldr	r2, [r3, #0]
 8015cee:	68bb      	ldr	r3, [r7, #8]
 8015cf0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	68db      	ldr	r3, [r3, #12]
 8015cf6:	685b      	ldr	r3, [r3, #4]
 8015cf8:	4618      	mov	r0, r3
 8015cfa:	f7f9 fd2a 	bl	800f752 <lwip_htonl>
 8015cfe:	4602      	mov	r2, r0
 8015d00:	68bb      	ldr	r3, [r7, #8]
 8015d02:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8015d04:	68fb      	ldr	r3, [r7, #12]
 8015d06:	68da      	ldr	r2, [r3, #12]
 8015d08:	68fb      	ldr	r3, [r7, #12]
 8015d0a:	685b      	ldr	r3, [r3, #4]
 8015d0c:	685b      	ldr	r3, [r3, #4]
 8015d0e:	1ad3      	subs	r3, r2, r3
 8015d10:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	685b      	ldr	r3, [r3, #4]
 8015d16:	8959      	ldrh	r1, [r3, #10]
 8015d18:	68fb      	ldr	r3, [r7, #12]
 8015d1a:	685b      	ldr	r3, [r3, #4]
 8015d1c:	8b3a      	ldrh	r2, [r7, #24]
 8015d1e:	1a8a      	subs	r2, r1, r2
 8015d20:	b292      	uxth	r2, r2
 8015d22:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8015d24:	68fb      	ldr	r3, [r7, #12]
 8015d26:	685b      	ldr	r3, [r3, #4]
 8015d28:	8919      	ldrh	r1, [r3, #8]
 8015d2a:	68fb      	ldr	r3, [r7, #12]
 8015d2c:	685b      	ldr	r3, [r3, #4]
 8015d2e:	8b3a      	ldrh	r2, [r7, #24]
 8015d30:	1a8a      	subs	r2, r1, r2
 8015d32:	b292      	uxth	r2, r2
 8015d34:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	685b      	ldr	r3, [r3, #4]
 8015d3a:	68fa      	ldr	r2, [r7, #12]
 8015d3c:	68d2      	ldr	r2, [r2, #12]
 8015d3e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015d40:	68fb      	ldr	r3, [r7, #12]
 8015d42:	68db      	ldr	r3, [r3, #12]
 8015d44:	2200      	movs	r2, #0
 8015d46:	741a      	strb	r2, [r3, #16]
 8015d48:	2200      	movs	r2, #0
 8015d4a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8015d4c:	68fb      	ldr	r3, [r7, #12]
 8015d4e:	68da      	ldr	r2, [r3, #12]
 8015d50:	68fb      	ldr	r3, [r7, #12]
 8015d52:	7a9b      	ldrb	r3, [r3, #10]
 8015d54:	f003 0301 	and.w	r3, r3, #1
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d001      	beq.n	8015d60 <tcp_output_segment+0x158>
 8015d5c:	2318      	movs	r3, #24
 8015d5e:	e000      	b.n	8015d62 <tcp_output_segment+0x15a>
 8015d60:	2314      	movs	r3, #20
 8015d62:	4413      	add	r3, r2
 8015d64:	69fa      	ldr	r2, [r7, #28]
 8015d66:	429a      	cmp	r2, r3
 8015d68:	d006      	beq.n	8015d78 <tcp_output_segment+0x170>
 8015d6a:	4b10      	ldr	r3, [pc, #64]	; (8015dac <tcp_output_segment+0x1a4>)
 8015d6c:	f240 621c 	movw	r2, #1564	; 0x61c
 8015d70:	4914      	ldr	r1, [pc, #80]	; (8015dc4 <tcp_output_segment+0x1bc>)
 8015d72:	4810      	ldr	r0, [pc, #64]	; (8015db4 <tcp_output_segment+0x1ac>)
 8015d74:	f003 ff94 	bl	8019ca0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015d78:	68fb      	ldr	r3, [r7, #12]
 8015d7a:	6858      	ldr	r0, [r3, #4]
 8015d7c:	68b9      	ldr	r1, [r7, #8]
 8015d7e:	68bb      	ldr	r3, [r7, #8]
 8015d80:	1d1c      	adds	r4, r3, #4
 8015d82:	68bb      	ldr	r3, [r7, #8]
 8015d84:	7add      	ldrb	r5, [r3, #11]
 8015d86:	68bb      	ldr	r3, [r7, #8]
 8015d88:	7a9b      	ldrb	r3, [r3, #10]
 8015d8a:	687a      	ldr	r2, [r7, #4]
 8015d8c:	9202      	str	r2, [sp, #8]
 8015d8e:	2206      	movs	r2, #6
 8015d90:	9201      	str	r2, [sp, #4]
 8015d92:	9300      	str	r3, [sp, #0]
 8015d94:	462b      	mov	r3, r5
 8015d96:	4622      	mov	r2, r4
 8015d98:	f002 fa18 	bl	80181cc <ip4_output_if>
 8015d9c:	4603      	mov	r3, r0
 8015d9e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8015da0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015da4:	4618      	mov	r0, r3
 8015da6:	3720      	adds	r7, #32
 8015da8:	46bd      	mov	sp, r7
 8015daa:	bdb0      	pop	{r4, r5, r7, pc}
 8015dac:	0801dc88 	.word	0x0801dc88
 8015db0:	0801e24c 	.word	0x0801e24c
 8015db4:	0801dcdc 	.word	0x0801dcdc
 8015db8:	0801e26c 	.word	0x0801e26c
 8015dbc:	0801e28c 	.word	0x0801e28c
 8015dc0:	200070d8 	.word	0x200070d8
 8015dc4:	0801e2b0 	.word	0x0801e2b0

08015dc8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8015dc8:	b5b0      	push	{r4, r5, r7, lr}
 8015dca:	b084      	sub	sp, #16
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d106      	bne.n	8015de4 <tcp_rexmit_rto_prepare+0x1c>
 8015dd6:	4b31      	ldr	r3, [pc, #196]	; (8015e9c <tcp_rexmit_rto_prepare+0xd4>)
 8015dd8:	f240 6263 	movw	r2, #1635	; 0x663
 8015ddc:	4930      	ldr	r1, [pc, #192]	; (8015ea0 <tcp_rexmit_rto_prepare+0xd8>)
 8015dde:	4831      	ldr	r0, [pc, #196]	; (8015ea4 <tcp_rexmit_rto_prepare+0xdc>)
 8015de0:	f003 ff5e 	bl	8019ca0 <iprintf>

  if (pcb->unacked == NULL) {
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d102      	bne.n	8015df2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8015dec:	f06f 0305 	mvn.w	r3, #5
 8015df0:	e050      	b.n	8015e94 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015df6:	60fb      	str	r3, [r7, #12]
 8015df8:	e00b      	b.n	8015e12 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8015dfa:	68f8      	ldr	r0, [r7, #12]
 8015dfc:	f7ff fee4 	bl	8015bc8 <tcp_output_segment_busy>
 8015e00:	4603      	mov	r3, r0
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d002      	beq.n	8015e0c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8015e06:	f06f 0305 	mvn.w	r3, #5
 8015e0a:	e043      	b.n	8015e94 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015e0c:	68fb      	ldr	r3, [r7, #12]
 8015e0e:	681b      	ldr	r3, [r3, #0]
 8015e10:	60fb      	str	r3, [r7, #12]
 8015e12:	68fb      	ldr	r3, [r7, #12]
 8015e14:	681b      	ldr	r3, [r3, #0]
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d1ef      	bne.n	8015dfa <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8015e1a:	68f8      	ldr	r0, [r7, #12]
 8015e1c:	f7ff fed4 	bl	8015bc8 <tcp_output_segment_busy>
 8015e20:	4603      	mov	r3, r0
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d002      	beq.n	8015e2c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8015e26:	f06f 0305 	mvn.w	r3, #5
 8015e2a:	e033      	b.n	8015e94 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8015e30:	68fb      	ldr	r3, [r7, #12]
 8015e32:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	2200      	movs	r2, #0
 8015e40:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	8b5b      	ldrh	r3, [r3, #26]
 8015e46:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015e4a:	b29a      	uxth	r2, r3
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015e50:	68fb      	ldr	r3, [r7, #12]
 8015e52:	68db      	ldr	r3, [r3, #12]
 8015e54:	685b      	ldr	r3, [r3, #4]
 8015e56:	4618      	mov	r0, r3
 8015e58:	f7f9 fc7b 	bl	800f752 <lwip_htonl>
 8015e5c:	4604      	mov	r4, r0
 8015e5e:	68fb      	ldr	r3, [r7, #12]
 8015e60:	891b      	ldrh	r3, [r3, #8]
 8015e62:	461d      	mov	r5, r3
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	68db      	ldr	r3, [r3, #12]
 8015e68:	899b      	ldrh	r3, [r3, #12]
 8015e6a:	b29b      	uxth	r3, r3
 8015e6c:	4618      	mov	r0, r3
 8015e6e:	f7f9 fc5b 	bl	800f728 <lwip_htons>
 8015e72:	4603      	mov	r3, r0
 8015e74:	b2db      	uxtb	r3, r3
 8015e76:	f003 0303 	and.w	r3, r3, #3
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d001      	beq.n	8015e82 <tcp_rexmit_rto_prepare+0xba>
 8015e7e:	2301      	movs	r3, #1
 8015e80:	e000      	b.n	8015e84 <tcp_rexmit_rto_prepare+0xbc>
 8015e82:	2300      	movs	r3, #0
 8015e84:	442b      	add	r3, r5
 8015e86:	18e2      	adds	r2, r4, r3
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	2200      	movs	r2, #0
 8015e90:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8015e92:	2300      	movs	r3, #0
}
 8015e94:	4618      	mov	r0, r3
 8015e96:	3710      	adds	r7, #16
 8015e98:	46bd      	mov	sp, r7
 8015e9a:	bdb0      	pop	{r4, r5, r7, pc}
 8015e9c:	0801dc88 	.word	0x0801dc88
 8015ea0:	0801e2c4 	.word	0x0801e2c4
 8015ea4:	0801dcdc 	.word	0x0801dcdc

08015ea8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8015ea8:	b580      	push	{r7, lr}
 8015eaa:	b082      	sub	sp, #8
 8015eac:	af00      	add	r7, sp, #0
 8015eae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d106      	bne.n	8015ec4 <tcp_rexmit_rto_commit+0x1c>
 8015eb6:	4b0d      	ldr	r3, [pc, #52]	; (8015eec <tcp_rexmit_rto_commit+0x44>)
 8015eb8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8015ebc:	490c      	ldr	r1, [pc, #48]	; (8015ef0 <tcp_rexmit_rto_commit+0x48>)
 8015ebe:	480d      	ldr	r0, [pc, #52]	; (8015ef4 <tcp_rexmit_rto_commit+0x4c>)
 8015ec0:	f003 feee 	bl	8019ca0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015eca:	2bff      	cmp	r3, #255	; 0xff
 8015ecc:	d007      	beq.n	8015ede <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015ed4:	3301      	adds	r3, #1
 8015ed6:	b2da      	uxtb	r2, r3
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8015ede:	6878      	ldr	r0, [r7, #4]
 8015ee0:	f7ff fc7e 	bl	80157e0 <tcp_output>
}
 8015ee4:	bf00      	nop
 8015ee6:	3708      	adds	r7, #8
 8015ee8:	46bd      	mov	sp, r7
 8015eea:	bd80      	pop	{r7, pc}
 8015eec:	0801dc88 	.word	0x0801dc88
 8015ef0:	0801e2e8 	.word	0x0801e2e8
 8015ef4:	0801dcdc 	.word	0x0801dcdc

08015ef8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8015ef8:	b580      	push	{r7, lr}
 8015efa:	b082      	sub	sp, #8
 8015efc:	af00      	add	r7, sp, #0
 8015efe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d106      	bne.n	8015f14 <tcp_rexmit_rto+0x1c>
 8015f06:	4b0a      	ldr	r3, [pc, #40]	; (8015f30 <tcp_rexmit_rto+0x38>)
 8015f08:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8015f0c:	4909      	ldr	r1, [pc, #36]	; (8015f34 <tcp_rexmit_rto+0x3c>)
 8015f0e:	480a      	ldr	r0, [pc, #40]	; (8015f38 <tcp_rexmit_rto+0x40>)
 8015f10:	f003 fec6 	bl	8019ca0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8015f14:	6878      	ldr	r0, [r7, #4]
 8015f16:	f7ff ff57 	bl	8015dc8 <tcp_rexmit_rto_prepare>
 8015f1a:	4603      	mov	r3, r0
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d102      	bne.n	8015f26 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8015f20:	6878      	ldr	r0, [r7, #4]
 8015f22:	f7ff ffc1 	bl	8015ea8 <tcp_rexmit_rto_commit>
  }
}
 8015f26:	bf00      	nop
 8015f28:	3708      	adds	r7, #8
 8015f2a:	46bd      	mov	sp, r7
 8015f2c:	bd80      	pop	{r7, pc}
 8015f2e:	bf00      	nop
 8015f30:	0801dc88 	.word	0x0801dc88
 8015f34:	0801e30c 	.word	0x0801e30c
 8015f38:	0801dcdc 	.word	0x0801dcdc

08015f3c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8015f3c:	b590      	push	{r4, r7, lr}
 8015f3e:	b085      	sub	sp, #20
 8015f40:	af00      	add	r7, sp, #0
 8015f42:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d106      	bne.n	8015f58 <tcp_rexmit+0x1c>
 8015f4a:	4b2f      	ldr	r3, [pc, #188]	; (8016008 <tcp_rexmit+0xcc>)
 8015f4c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8015f50:	492e      	ldr	r1, [pc, #184]	; (801600c <tcp_rexmit+0xd0>)
 8015f52:	482f      	ldr	r0, [pc, #188]	; (8016010 <tcp_rexmit+0xd4>)
 8015f54:	f003 fea4 	bl	8019ca0 <iprintf>

  if (pcb->unacked == NULL) {
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d102      	bne.n	8015f66 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8015f60:	f06f 0305 	mvn.w	r3, #5
 8015f64:	e04c      	b.n	8016000 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f6a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8015f6c:	68b8      	ldr	r0, [r7, #8]
 8015f6e:	f7ff fe2b 	bl	8015bc8 <tcp_output_segment_busy>
 8015f72:	4603      	mov	r3, r0
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	d002      	beq.n	8015f7e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8015f78:	f06f 0305 	mvn.w	r3, #5
 8015f7c:	e040      	b.n	8016000 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8015f7e:	68bb      	ldr	r3, [r7, #8]
 8015f80:	681a      	ldr	r2, [r3, #0]
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	336c      	adds	r3, #108	; 0x6c
 8015f8a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015f8c:	e002      	b.n	8015f94 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8015f8e:	68fb      	ldr	r3, [r7, #12]
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	681b      	ldr	r3, [r3, #0]
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d011      	beq.n	8015fc0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	68db      	ldr	r3, [r3, #12]
 8015fa2:	685b      	ldr	r3, [r3, #4]
 8015fa4:	4618      	mov	r0, r3
 8015fa6:	f7f9 fbd4 	bl	800f752 <lwip_htonl>
 8015faa:	4604      	mov	r4, r0
 8015fac:	68bb      	ldr	r3, [r7, #8]
 8015fae:	68db      	ldr	r3, [r3, #12]
 8015fb0:	685b      	ldr	r3, [r3, #4]
 8015fb2:	4618      	mov	r0, r3
 8015fb4:	f7f9 fbcd 	bl	800f752 <lwip_htonl>
 8015fb8:	4603      	mov	r3, r0
 8015fba:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	dbe6      	blt.n	8015f8e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8015fc0:	68fb      	ldr	r3, [r7, #12]
 8015fc2:	681a      	ldr	r2, [r3, #0]
 8015fc4:	68bb      	ldr	r3, [r7, #8]
 8015fc6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8015fc8:	68fb      	ldr	r3, [r7, #12]
 8015fca:	68ba      	ldr	r2, [r7, #8]
 8015fcc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8015fce:	68bb      	ldr	r3, [r7, #8]
 8015fd0:	681b      	ldr	r3, [r3, #0]
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d103      	bne.n	8015fde <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	2200      	movs	r2, #0
 8015fda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015fe4:	2bff      	cmp	r3, #255	; 0xff
 8015fe6:	d007      	beq.n	8015ff8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015fee:	3301      	adds	r3, #1
 8015ff0:	b2da      	uxtb	r2, r3
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	2200      	movs	r2, #0
 8015ffc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8015ffe:	2300      	movs	r3, #0
}
 8016000:	4618      	mov	r0, r3
 8016002:	3714      	adds	r7, #20
 8016004:	46bd      	mov	sp, r7
 8016006:	bd90      	pop	{r4, r7, pc}
 8016008:	0801dc88 	.word	0x0801dc88
 801600c:	0801e328 	.word	0x0801e328
 8016010:	0801dcdc 	.word	0x0801dcdc

08016014 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8016014:	b580      	push	{r7, lr}
 8016016:	b082      	sub	sp, #8
 8016018:	af00      	add	r7, sp, #0
 801601a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	2b00      	cmp	r3, #0
 8016020:	d106      	bne.n	8016030 <tcp_rexmit_fast+0x1c>
 8016022:	4b2a      	ldr	r3, [pc, #168]	; (80160cc <tcp_rexmit_fast+0xb8>)
 8016024:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8016028:	4929      	ldr	r1, [pc, #164]	; (80160d0 <tcp_rexmit_fast+0xbc>)
 801602a:	482a      	ldr	r0, [pc, #168]	; (80160d4 <tcp_rexmit_fast+0xc0>)
 801602c:	f003 fe38 	bl	8019ca0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016034:	2b00      	cmp	r3, #0
 8016036:	d045      	beq.n	80160c4 <tcp_rexmit_fast+0xb0>
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	8b5b      	ldrh	r3, [r3, #26]
 801603c:	f003 0304 	and.w	r3, r3, #4
 8016040:	2b00      	cmp	r3, #0
 8016042:	d13f      	bne.n	80160c4 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8016044:	6878      	ldr	r0, [r7, #4]
 8016046:	f7ff ff79 	bl	8015f3c <tcp_rexmit>
 801604a:	4603      	mov	r3, r0
 801604c:	2b00      	cmp	r3, #0
 801604e:	d139      	bne.n	80160c4 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801605c:	4293      	cmp	r3, r2
 801605e:	bf28      	it	cs
 8016060:	4613      	movcs	r3, r2
 8016062:	b29b      	uxth	r3, r3
 8016064:	2b00      	cmp	r3, #0
 8016066:	da00      	bge.n	801606a <tcp_rexmit_fast+0x56>
 8016068:	3301      	adds	r3, #1
 801606a:	105b      	asrs	r3, r3, #1
 801606c:	b29a      	uxth	r2, r3
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801607a:	461a      	mov	r2, r3
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016080:	005b      	lsls	r3, r3, #1
 8016082:	429a      	cmp	r2, r3
 8016084:	d206      	bcs.n	8016094 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801608a:	005b      	lsls	r3, r3, #1
 801608c:	b29a      	uxth	r2, r3
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801609e:	4619      	mov	r1, r3
 80160a0:	0049      	lsls	r1, r1, #1
 80160a2:	440b      	add	r3, r1
 80160a4:	b29b      	uxth	r3, r3
 80160a6:	4413      	add	r3, r2
 80160a8:	b29a      	uxth	r2, r3
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	8b5b      	ldrh	r3, [r3, #26]
 80160b4:	f043 0304 	orr.w	r3, r3, #4
 80160b8:	b29a      	uxth	r2, r3
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	2200      	movs	r2, #0
 80160c2:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80160c4:	bf00      	nop
 80160c6:	3708      	adds	r7, #8
 80160c8:	46bd      	mov	sp, r7
 80160ca:	bd80      	pop	{r7, pc}
 80160cc:	0801dc88 	.word	0x0801dc88
 80160d0:	0801e340 	.word	0x0801e340
 80160d4:	0801dcdc 	.word	0x0801dcdc

080160d8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80160d8:	b580      	push	{r7, lr}
 80160da:	b086      	sub	sp, #24
 80160dc:	af00      	add	r7, sp, #0
 80160de:	60f8      	str	r0, [r7, #12]
 80160e0:	607b      	str	r3, [r7, #4]
 80160e2:	460b      	mov	r3, r1
 80160e4:	817b      	strh	r3, [r7, #10]
 80160e6:	4613      	mov	r3, r2
 80160e8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80160ea:	897a      	ldrh	r2, [r7, #10]
 80160ec:	893b      	ldrh	r3, [r7, #8]
 80160ee:	4413      	add	r3, r2
 80160f0:	b29b      	uxth	r3, r3
 80160f2:	3314      	adds	r3, #20
 80160f4:	b29b      	uxth	r3, r3
 80160f6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80160fa:	4619      	mov	r1, r3
 80160fc:	2022      	movs	r0, #34	; 0x22
 80160fe:	f7fa fc13 	bl	8010928 <pbuf_alloc>
 8016102:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8016104:	697b      	ldr	r3, [r7, #20]
 8016106:	2b00      	cmp	r3, #0
 8016108:	d04d      	beq.n	80161a6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801610a:	897b      	ldrh	r3, [r7, #10]
 801610c:	3313      	adds	r3, #19
 801610e:	697a      	ldr	r2, [r7, #20]
 8016110:	8952      	ldrh	r2, [r2, #10]
 8016112:	4293      	cmp	r3, r2
 8016114:	db06      	blt.n	8016124 <tcp_output_alloc_header_common+0x4c>
 8016116:	4b26      	ldr	r3, [pc, #152]	; (80161b0 <tcp_output_alloc_header_common+0xd8>)
 8016118:	f240 7223 	movw	r2, #1827	; 0x723
 801611c:	4925      	ldr	r1, [pc, #148]	; (80161b4 <tcp_output_alloc_header_common+0xdc>)
 801611e:	4826      	ldr	r0, [pc, #152]	; (80161b8 <tcp_output_alloc_header_common+0xe0>)
 8016120:	f003 fdbe 	bl	8019ca0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8016124:	697b      	ldr	r3, [r7, #20]
 8016126:	685b      	ldr	r3, [r3, #4]
 8016128:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801612a:	8c3b      	ldrh	r3, [r7, #32]
 801612c:	4618      	mov	r0, r3
 801612e:	f7f9 fafb 	bl	800f728 <lwip_htons>
 8016132:	4603      	mov	r3, r0
 8016134:	461a      	mov	r2, r3
 8016136:	693b      	ldr	r3, [r7, #16]
 8016138:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801613a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801613c:	4618      	mov	r0, r3
 801613e:	f7f9 faf3 	bl	800f728 <lwip_htons>
 8016142:	4603      	mov	r3, r0
 8016144:	461a      	mov	r2, r3
 8016146:	693b      	ldr	r3, [r7, #16]
 8016148:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801614a:	693b      	ldr	r3, [r7, #16]
 801614c:	687a      	ldr	r2, [r7, #4]
 801614e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8016150:	68f8      	ldr	r0, [r7, #12]
 8016152:	f7f9 fafe 	bl	800f752 <lwip_htonl>
 8016156:	4602      	mov	r2, r0
 8016158:	693b      	ldr	r3, [r7, #16]
 801615a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801615c:	897b      	ldrh	r3, [r7, #10]
 801615e:	089b      	lsrs	r3, r3, #2
 8016160:	b29b      	uxth	r3, r3
 8016162:	3305      	adds	r3, #5
 8016164:	b29b      	uxth	r3, r3
 8016166:	031b      	lsls	r3, r3, #12
 8016168:	b29a      	uxth	r2, r3
 801616a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801616e:	b29b      	uxth	r3, r3
 8016170:	4313      	orrs	r3, r2
 8016172:	b29b      	uxth	r3, r3
 8016174:	4618      	mov	r0, r3
 8016176:	f7f9 fad7 	bl	800f728 <lwip_htons>
 801617a:	4603      	mov	r3, r0
 801617c:	461a      	mov	r2, r3
 801617e:	693b      	ldr	r3, [r7, #16]
 8016180:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8016182:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016184:	4618      	mov	r0, r3
 8016186:	f7f9 facf 	bl	800f728 <lwip_htons>
 801618a:	4603      	mov	r3, r0
 801618c:	461a      	mov	r2, r3
 801618e:	693b      	ldr	r3, [r7, #16]
 8016190:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8016192:	693b      	ldr	r3, [r7, #16]
 8016194:	2200      	movs	r2, #0
 8016196:	741a      	strb	r2, [r3, #16]
 8016198:	2200      	movs	r2, #0
 801619a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801619c:	693b      	ldr	r3, [r7, #16]
 801619e:	2200      	movs	r2, #0
 80161a0:	749a      	strb	r2, [r3, #18]
 80161a2:	2200      	movs	r2, #0
 80161a4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80161a6:	697b      	ldr	r3, [r7, #20]
}
 80161a8:	4618      	mov	r0, r3
 80161aa:	3718      	adds	r7, #24
 80161ac:	46bd      	mov	sp, r7
 80161ae:	bd80      	pop	{r7, pc}
 80161b0:	0801dc88 	.word	0x0801dc88
 80161b4:	0801e360 	.word	0x0801e360
 80161b8:	0801dcdc 	.word	0x0801dcdc

080161bc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80161bc:	b5b0      	push	{r4, r5, r7, lr}
 80161be:	b08a      	sub	sp, #40	; 0x28
 80161c0:	af04      	add	r7, sp, #16
 80161c2:	60f8      	str	r0, [r7, #12]
 80161c4:	607b      	str	r3, [r7, #4]
 80161c6:	460b      	mov	r3, r1
 80161c8:	817b      	strh	r3, [r7, #10]
 80161ca:	4613      	mov	r3, r2
 80161cc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80161ce:	68fb      	ldr	r3, [r7, #12]
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d106      	bne.n	80161e2 <tcp_output_alloc_header+0x26>
 80161d4:	4b15      	ldr	r3, [pc, #84]	; (801622c <tcp_output_alloc_header+0x70>)
 80161d6:	f240 7242 	movw	r2, #1858	; 0x742
 80161da:	4915      	ldr	r1, [pc, #84]	; (8016230 <tcp_output_alloc_header+0x74>)
 80161dc:	4815      	ldr	r0, [pc, #84]	; (8016234 <tcp_output_alloc_header+0x78>)
 80161de:	f003 fd5f 	bl	8019ca0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	8adb      	ldrh	r3, [r3, #22]
 80161ea:	68fa      	ldr	r2, [r7, #12]
 80161ec:	8b12      	ldrh	r2, [r2, #24]
 80161ee:	68f9      	ldr	r1, [r7, #12]
 80161f0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80161f2:	893d      	ldrh	r5, [r7, #8]
 80161f4:	897c      	ldrh	r4, [r7, #10]
 80161f6:	9103      	str	r1, [sp, #12]
 80161f8:	2110      	movs	r1, #16
 80161fa:	9102      	str	r1, [sp, #8]
 80161fc:	9201      	str	r2, [sp, #4]
 80161fe:	9300      	str	r3, [sp, #0]
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	462a      	mov	r2, r5
 8016204:	4621      	mov	r1, r4
 8016206:	f7ff ff67 	bl	80160d8 <tcp_output_alloc_header_common>
 801620a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801620c:	697b      	ldr	r3, [r7, #20]
 801620e:	2b00      	cmp	r3, #0
 8016210:	d006      	beq.n	8016220 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8016212:	68fb      	ldr	r3, [r7, #12]
 8016214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016216:	68fa      	ldr	r2, [r7, #12]
 8016218:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801621a:	441a      	add	r2, r3
 801621c:	68fb      	ldr	r3, [r7, #12]
 801621e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8016220:	697b      	ldr	r3, [r7, #20]
}
 8016222:	4618      	mov	r0, r3
 8016224:	3718      	adds	r7, #24
 8016226:	46bd      	mov	sp, r7
 8016228:	bdb0      	pop	{r4, r5, r7, pc}
 801622a:	bf00      	nop
 801622c:	0801dc88 	.word	0x0801dc88
 8016230:	0801e390 	.word	0x0801e390
 8016234:	0801dcdc 	.word	0x0801dcdc

08016238 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8016238:	b580      	push	{r7, lr}
 801623a:	b088      	sub	sp, #32
 801623c:	af00      	add	r7, sp, #0
 801623e:	60f8      	str	r0, [r7, #12]
 8016240:	60b9      	str	r1, [r7, #8]
 8016242:	4611      	mov	r1, r2
 8016244:	461a      	mov	r2, r3
 8016246:	460b      	mov	r3, r1
 8016248:	71fb      	strb	r3, [r7, #7]
 801624a:	4613      	mov	r3, r2
 801624c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801624e:	2300      	movs	r3, #0
 8016250:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8016252:	68bb      	ldr	r3, [r7, #8]
 8016254:	2b00      	cmp	r3, #0
 8016256:	d106      	bne.n	8016266 <tcp_output_fill_options+0x2e>
 8016258:	4b12      	ldr	r3, [pc, #72]	; (80162a4 <tcp_output_fill_options+0x6c>)
 801625a:	f240 7256 	movw	r2, #1878	; 0x756
 801625e:	4912      	ldr	r1, [pc, #72]	; (80162a8 <tcp_output_fill_options+0x70>)
 8016260:	4812      	ldr	r0, [pc, #72]	; (80162ac <tcp_output_fill_options+0x74>)
 8016262:	f003 fd1d 	bl	8019ca0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8016266:	68bb      	ldr	r3, [r7, #8]
 8016268:	685b      	ldr	r3, [r3, #4]
 801626a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801626c:	69bb      	ldr	r3, [r7, #24]
 801626e:	3314      	adds	r3, #20
 8016270:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8016272:	8bfb      	ldrh	r3, [r7, #30]
 8016274:	009b      	lsls	r3, r3, #2
 8016276:	461a      	mov	r2, r3
 8016278:	79fb      	ldrb	r3, [r7, #7]
 801627a:	009b      	lsls	r3, r3, #2
 801627c:	f003 0304 	and.w	r3, r3, #4
 8016280:	4413      	add	r3, r2
 8016282:	3314      	adds	r3, #20
 8016284:	69ba      	ldr	r2, [r7, #24]
 8016286:	4413      	add	r3, r2
 8016288:	697a      	ldr	r2, [r7, #20]
 801628a:	429a      	cmp	r2, r3
 801628c:	d006      	beq.n	801629c <tcp_output_fill_options+0x64>
 801628e:	4b05      	ldr	r3, [pc, #20]	; (80162a4 <tcp_output_fill_options+0x6c>)
 8016290:	f240 7275 	movw	r2, #1909	; 0x775
 8016294:	4906      	ldr	r1, [pc, #24]	; (80162b0 <tcp_output_fill_options+0x78>)
 8016296:	4805      	ldr	r0, [pc, #20]	; (80162ac <tcp_output_fill_options+0x74>)
 8016298:	f003 fd02 	bl	8019ca0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801629c:	bf00      	nop
 801629e:	3720      	adds	r7, #32
 80162a0:	46bd      	mov	sp, r7
 80162a2:	bd80      	pop	{r7, pc}
 80162a4:	0801dc88 	.word	0x0801dc88
 80162a8:	0801e3b8 	.word	0x0801e3b8
 80162ac:	0801dcdc 	.word	0x0801dcdc
 80162b0:	0801e2b0 	.word	0x0801e2b0

080162b4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80162b4:	b580      	push	{r7, lr}
 80162b6:	b08a      	sub	sp, #40	; 0x28
 80162b8:	af04      	add	r7, sp, #16
 80162ba:	60f8      	str	r0, [r7, #12]
 80162bc:	60b9      	str	r1, [r7, #8]
 80162be:	607a      	str	r2, [r7, #4]
 80162c0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80162c2:	68bb      	ldr	r3, [r7, #8]
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d106      	bne.n	80162d6 <tcp_output_control_segment+0x22>
 80162c8:	4b1c      	ldr	r3, [pc, #112]	; (801633c <tcp_output_control_segment+0x88>)
 80162ca:	f240 7287 	movw	r2, #1927	; 0x787
 80162ce:	491c      	ldr	r1, [pc, #112]	; (8016340 <tcp_output_control_segment+0x8c>)
 80162d0:	481c      	ldr	r0, [pc, #112]	; (8016344 <tcp_output_control_segment+0x90>)
 80162d2:	f003 fce5 	bl	8019ca0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80162d6:	683a      	ldr	r2, [r7, #0]
 80162d8:	6879      	ldr	r1, [r7, #4]
 80162da:	68f8      	ldr	r0, [r7, #12]
 80162dc:	f7fe ff40 	bl	8015160 <tcp_route>
 80162e0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80162e2:	693b      	ldr	r3, [r7, #16]
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d102      	bne.n	80162ee <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80162e8:	23fc      	movs	r3, #252	; 0xfc
 80162ea:	75fb      	strb	r3, [r7, #23]
 80162ec:	e01c      	b.n	8016328 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80162ee:	68fb      	ldr	r3, [r7, #12]
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d006      	beq.n	8016302 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80162f4:	68fb      	ldr	r3, [r7, #12]
 80162f6:	7adb      	ldrb	r3, [r3, #11]
 80162f8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	7a9b      	ldrb	r3, [r3, #10]
 80162fe:	757b      	strb	r3, [r7, #21]
 8016300:	e003      	b.n	801630a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8016302:	23ff      	movs	r3, #255	; 0xff
 8016304:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8016306:	2300      	movs	r3, #0
 8016308:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801630a:	7dba      	ldrb	r2, [r7, #22]
 801630c:	693b      	ldr	r3, [r7, #16]
 801630e:	9302      	str	r3, [sp, #8]
 8016310:	2306      	movs	r3, #6
 8016312:	9301      	str	r3, [sp, #4]
 8016314:	7d7b      	ldrb	r3, [r7, #21]
 8016316:	9300      	str	r3, [sp, #0]
 8016318:	4613      	mov	r3, r2
 801631a:	683a      	ldr	r2, [r7, #0]
 801631c:	6879      	ldr	r1, [r7, #4]
 801631e:	68b8      	ldr	r0, [r7, #8]
 8016320:	f001 ff54 	bl	80181cc <ip4_output_if>
 8016324:	4603      	mov	r3, r0
 8016326:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8016328:	68b8      	ldr	r0, [r7, #8]
 801632a:	f7fa fde1 	bl	8010ef0 <pbuf_free>
  return err;
 801632e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016332:	4618      	mov	r0, r3
 8016334:	3718      	adds	r7, #24
 8016336:	46bd      	mov	sp, r7
 8016338:	bd80      	pop	{r7, pc}
 801633a:	bf00      	nop
 801633c:	0801dc88 	.word	0x0801dc88
 8016340:	0801e3e0 	.word	0x0801e3e0
 8016344:	0801dcdc 	.word	0x0801dcdc

08016348 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8016348:	b590      	push	{r4, r7, lr}
 801634a:	b08b      	sub	sp, #44	; 0x2c
 801634c:	af04      	add	r7, sp, #16
 801634e:	60f8      	str	r0, [r7, #12]
 8016350:	60b9      	str	r1, [r7, #8]
 8016352:	607a      	str	r2, [r7, #4]
 8016354:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8016356:	683b      	ldr	r3, [r7, #0]
 8016358:	2b00      	cmp	r3, #0
 801635a:	d106      	bne.n	801636a <tcp_rst+0x22>
 801635c:	4b1f      	ldr	r3, [pc, #124]	; (80163dc <tcp_rst+0x94>)
 801635e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8016362:	491f      	ldr	r1, [pc, #124]	; (80163e0 <tcp_rst+0x98>)
 8016364:	481f      	ldr	r0, [pc, #124]	; (80163e4 <tcp_rst+0x9c>)
 8016366:	f003 fc9b 	bl	8019ca0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801636a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801636c:	2b00      	cmp	r3, #0
 801636e:	d106      	bne.n	801637e <tcp_rst+0x36>
 8016370:	4b1a      	ldr	r3, [pc, #104]	; (80163dc <tcp_rst+0x94>)
 8016372:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8016376:	491c      	ldr	r1, [pc, #112]	; (80163e8 <tcp_rst+0xa0>)
 8016378:	481a      	ldr	r0, [pc, #104]	; (80163e4 <tcp_rst+0x9c>)
 801637a:	f003 fc91 	bl	8019ca0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801637e:	2300      	movs	r3, #0
 8016380:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8016382:	f24d 0316 	movw	r3, #53270	; 0xd016
 8016386:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8016388:	7dfb      	ldrb	r3, [r7, #23]
 801638a:	b29c      	uxth	r4, r3
 801638c:	68b8      	ldr	r0, [r7, #8]
 801638e:	f7f9 f9e0 	bl	800f752 <lwip_htonl>
 8016392:	4602      	mov	r2, r0
 8016394:	8abb      	ldrh	r3, [r7, #20]
 8016396:	9303      	str	r3, [sp, #12]
 8016398:	2314      	movs	r3, #20
 801639a:	9302      	str	r3, [sp, #8]
 801639c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801639e:	9301      	str	r3, [sp, #4]
 80163a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80163a2:	9300      	str	r3, [sp, #0]
 80163a4:	4613      	mov	r3, r2
 80163a6:	2200      	movs	r2, #0
 80163a8:	4621      	mov	r1, r4
 80163aa:	6878      	ldr	r0, [r7, #4]
 80163ac:	f7ff fe94 	bl	80160d8 <tcp_output_alloc_header_common>
 80163b0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80163b2:	693b      	ldr	r3, [r7, #16]
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d00c      	beq.n	80163d2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80163b8:	7dfb      	ldrb	r3, [r7, #23]
 80163ba:	2200      	movs	r2, #0
 80163bc:	6939      	ldr	r1, [r7, #16]
 80163be:	68f8      	ldr	r0, [r7, #12]
 80163c0:	f7ff ff3a 	bl	8016238 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80163c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163c6:	683a      	ldr	r2, [r7, #0]
 80163c8:	6939      	ldr	r1, [r7, #16]
 80163ca:	68f8      	ldr	r0, [r7, #12]
 80163cc:	f7ff ff72 	bl	80162b4 <tcp_output_control_segment>
 80163d0:	e000      	b.n	80163d4 <tcp_rst+0x8c>
    return;
 80163d2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80163d4:	371c      	adds	r7, #28
 80163d6:	46bd      	mov	sp, r7
 80163d8:	bd90      	pop	{r4, r7, pc}
 80163da:	bf00      	nop
 80163dc:	0801dc88 	.word	0x0801dc88
 80163e0:	0801e40c 	.word	0x0801e40c
 80163e4:	0801dcdc 	.word	0x0801dcdc
 80163e8:	0801e428 	.word	0x0801e428

080163ec <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80163ec:	b590      	push	{r4, r7, lr}
 80163ee:	b087      	sub	sp, #28
 80163f0:	af00      	add	r7, sp, #0
 80163f2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80163f4:	2300      	movs	r3, #0
 80163f6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80163f8:	2300      	movs	r3, #0
 80163fa:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d106      	bne.n	8016410 <tcp_send_empty_ack+0x24>
 8016402:	4b28      	ldr	r3, [pc, #160]	; (80164a4 <tcp_send_empty_ack+0xb8>)
 8016404:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8016408:	4927      	ldr	r1, [pc, #156]	; (80164a8 <tcp_send_empty_ack+0xbc>)
 801640a:	4828      	ldr	r0, [pc, #160]	; (80164ac <tcp_send_empty_ack+0xc0>)
 801640c:	f003 fc48 	bl	8019ca0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016410:	7dfb      	ldrb	r3, [r7, #23]
 8016412:	009b      	lsls	r3, r3, #2
 8016414:	b2db      	uxtb	r3, r3
 8016416:	f003 0304 	and.w	r3, r3, #4
 801641a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801641c:	7d7b      	ldrb	r3, [r7, #21]
 801641e:	b29c      	uxth	r4, r3
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016424:	4618      	mov	r0, r3
 8016426:	f7f9 f994 	bl	800f752 <lwip_htonl>
 801642a:	4603      	mov	r3, r0
 801642c:	2200      	movs	r2, #0
 801642e:	4621      	mov	r1, r4
 8016430:	6878      	ldr	r0, [r7, #4]
 8016432:	f7ff fec3 	bl	80161bc <tcp_output_alloc_header>
 8016436:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016438:	693b      	ldr	r3, [r7, #16]
 801643a:	2b00      	cmp	r3, #0
 801643c:	d109      	bne.n	8016452 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	8b5b      	ldrh	r3, [r3, #26]
 8016442:	f043 0303 	orr.w	r3, r3, #3
 8016446:	b29a      	uxth	r2, r3
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801644c:	f06f 0301 	mvn.w	r3, #1
 8016450:	e023      	b.n	801649a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8016452:	7dbb      	ldrb	r3, [r7, #22]
 8016454:	7dfa      	ldrb	r2, [r7, #23]
 8016456:	6939      	ldr	r1, [r7, #16]
 8016458:	6878      	ldr	r0, [r7, #4]
 801645a:	f7ff feed 	bl	8016238 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801645e:	687a      	ldr	r2, [r7, #4]
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	3304      	adds	r3, #4
 8016464:	6939      	ldr	r1, [r7, #16]
 8016466:	6878      	ldr	r0, [r7, #4]
 8016468:	f7ff ff24 	bl	80162b4 <tcp_output_control_segment>
 801646c:	4603      	mov	r3, r0
 801646e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8016470:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016474:	2b00      	cmp	r3, #0
 8016476:	d007      	beq.n	8016488 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	8b5b      	ldrh	r3, [r3, #26]
 801647c:	f043 0303 	orr.w	r3, r3, #3
 8016480:	b29a      	uxth	r2, r3
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	835a      	strh	r2, [r3, #26]
 8016486:	e006      	b.n	8016496 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	8b5b      	ldrh	r3, [r3, #26]
 801648c:	f023 0303 	bic.w	r3, r3, #3
 8016490:	b29a      	uxth	r2, r3
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8016496:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801649a:	4618      	mov	r0, r3
 801649c:	371c      	adds	r7, #28
 801649e:	46bd      	mov	sp, r7
 80164a0:	bd90      	pop	{r4, r7, pc}
 80164a2:	bf00      	nop
 80164a4:	0801dc88 	.word	0x0801dc88
 80164a8:	0801e444 	.word	0x0801e444
 80164ac:	0801dcdc 	.word	0x0801dcdc

080164b0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80164b0:	b590      	push	{r4, r7, lr}
 80164b2:	b087      	sub	sp, #28
 80164b4:	af00      	add	r7, sp, #0
 80164b6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80164b8:	2300      	movs	r3, #0
 80164ba:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d106      	bne.n	80164d0 <tcp_keepalive+0x20>
 80164c2:	4b18      	ldr	r3, [pc, #96]	; (8016524 <tcp_keepalive+0x74>)
 80164c4:	f640 0224 	movw	r2, #2084	; 0x824
 80164c8:	4917      	ldr	r1, [pc, #92]	; (8016528 <tcp_keepalive+0x78>)
 80164ca:	4818      	ldr	r0, [pc, #96]	; (801652c <tcp_keepalive+0x7c>)
 80164cc:	f003 fbe8 	bl	8019ca0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80164d0:	7dfb      	ldrb	r3, [r7, #23]
 80164d2:	b29c      	uxth	r4, r3
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80164d8:	3b01      	subs	r3, #1
 80164da:	4618      	mov	r0, r3
 80164dc:	f7f9 f939 	bl	800f752 <lwip_htonl>
 80164e0:	4603      	mov	r3, r0
 80164e2:	2200      	movs	r2, #0
 80164e4:	4621      	mov	r1, r4
 80164e6:	6878      	ldr	r0, [r7, #4]
 80164e8:	f7ff fe68 	bl	80161bc <tcp_output_alloc_header>
 80164ec:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80164ee:	693b      	ldr	r3, [r7, #16]
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d102      	bne.n	80164fa <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80164f4:	f04f 33ff 	mov.w	r3, #4294967295
 80164f8:	e010      	b.n	801651c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80164fa:	7dfb      	ldrb	r3, [r7, #23]
 80164fc:	2200      	movs	r2, #0
 80164fe:	6939      	ldr	r1, [r7, #16]
 8016500:	6878      	ldr	r0, [r7, #4]
 8016502:	f7ff fe99 	bl	8016238 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016506:	687a      	ldr	r2, [r7, #4]
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	3304      	adds	r3, #4
 801650c:	6939      	ldr	r1, [r7, #16]
 801650e:	6878      	ldr	r0, [r7, #4]
 8016510:	f7ff fed0 	bl	80162b4 <tcp_output_control_segment>
 8016514:	4603      	mov	r3, r0
 8016516:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016518:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801651c:	4618      	mov	r0, r3
 801651e:	371c      	adds	r7, #28
 8016520:	46bd      	mov	sp, r7
 8016522:	bd90      	pop	{r4, r7, pc}
 8016524:	0801dc88 	.word	0x0801dc88
 8016528:	0801e464 	.word	0x0801e464
 801652c:	0801dcdc 	.word	0x0801dcdc

08016530 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8016530:	b590      	push	{r4, r7, lr}
 8016532:	b08b      	sub	sp, #44	; 0x2c
 8016534:	af00      	add	r7, sp, #0
 8016536:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016538:	2300      	movs	r3, #0
 801653a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	2b00      	cmp	r3, #0
 8016542:	d106      	bne.n	8016552 <tcp_zero_window_probe+0x22>
 8016544:	4b4c      	ldr	r3, [pc, #304]	; (8016678 <tcp_zero_window_probe+0x148>)
 8016546:	f640 024f 	movw	r2, #2127	; 0x84f
 801654a:	494c      	ldr	r1, [pc, #304]	; (801667c <tcp_zero_window_probe+0x14c>)
 801654c:	484c      	ldr	r0, [pc, #304]	; (8016680 <tcp_zero_window_probe+0x150>)
 801654e:	f003 fba7 	bl	8019ca0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016556:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8016558:	6a3b      	ldr	r3, [r7, #32]
 801655a:	2b00      	cmp	r3, #0
 801655c:	d101      	bne.n	8016562 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801655e:	2300      	movs	r3, #0
 8016560:	e086      	b.n	8016670 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016568:	2bff      	cmp	r3, #255	; 0xff
 801656a:	d007      	beq.n	801657c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016572:	3301      	adds	r3, #1
 8016574:	b2da      	uxtb	r2, r3
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801657c:	6a3b      	ldr	r3, [r7, #32]
 801657e:	68db      	ldr	r3, [r3, #12]
 8016580:	899b      	ldrh	r3, [r3, #12]
 8016582:	b29b      	uxth	r3, r3
 8016584:	4618      	mov	r0, r3
 8016586:	f7f9 f8cf 	bl	800f728 <lwip_htons>
 801658a:	4603      	mov	r3, r0
 801658c:	b2db      	uxtb	r3, r3
 801658e:	f003 0301 	and.w	r3, r3, #1
 8016592:	2b00      	cmp	r3, #0
 8016594:	d005      	beq.n	80165a2 <tcp_zero_window_probe+0x72>
 8016596:	6a3b      	ldr	r3, [r7, #32]
 8016598:	891b      	ldrh	r3, [r3, #8]
 801659a:	2b00      	cmp	r3, #0
 801659c:	d101      	bne.n	80165a2 <tcp_zero_window_probe+0x72>
 801659e:	2301      	movs	r3, #1
 80165a0:	e000      	b.n	80165a4 <tcp_zero_window_probe+0x74>
 80165a2:	2300      	movs	r3, #0
 80165a4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80165a6:	7ffb      	ldrb	r3, [r7, #31]
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	bf0c      	ite	eq
 80165ac:	2301      	moveq	r3, #1
 80165ae:	2300      	movne	r3, #0
 80165b0:	b2db      	uxtb	r3, r3
 80165b2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80165b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80165b8:	b299      	uxth	r1, r3
 80165ba:	6a3b      	ldr	r3, [r7, #32]
 80165bc:	68db      	ldr	r3, [r3, #12]
 80165be:	685b      	ldr	r3, [r3, #4]
 80165c0:	8bba      	ldrh	r2, [r7, #28]
 80165c2:	6878      	ldr	r0, [r7, #4]
 80165c4:	f7ff fdfa 	bl	80161bc <tcp_output_alloc_header>
 80165c8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80165ca:	69bb      	ldr	r3, [r7, #24]
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d102      	bne.n	80165d6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80165d0:	f04f 33ff 	mov.w	r3, #4294967295
 80165d4:	e04c      	b.n	8016670 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80165d6:	69bb      	ldr	r3, [r7, #24]
 80165d8:	685b      	ldr	r3, [r3, #4]
 80165da:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80165dc:	7ffb      	ldrb	r3, [r7, #31]
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d011      	beq.n	8016606 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80165e2:	697b      	ldr	r3, [r7, #20]
 80165e4:	899b      	ldrh	r3, [r3, #12]
 80165e6:	b29b      	uxth	r3, r3
 80165e8:	b21b      	sxth	r3, r3
 80165ea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80165ee:	b21c      	sxth	r4, r3
 80165f0:	2011      	movs	r0, #17
 80165f2:	f7f9 f899 	bl	800f728 <lwip_htons>
 80165f6:	4603      	mov	r3, r0
 80165f8:	b21b      	sxth	r3, r3
 80165fa:	4323      	orrs	r3, r4
 80165fc:	b21b      	sxth	r3, r3
 80165fe:	b29a      	uxth	r2, r3
 8016600:	697b      	ldr	r3, [r7, #20]
 8016602:	819a      	strh	r2, [r3, #12]
 8016604:	e010      	b.n	8016628 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8016606:	69bb      	ldr	r3, [r7, #24]
 8016608:	685b      	ldr	r3, [r3, #4]
 801660a:	3314      	adds	r3, #20
 801660c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801660e:	6a3b      	ldr	r3, [r7, #32]
 8016610:	6858      	ldr	r0, [r3, #4]
 8016612:	6a3b      	ldr	r3, [r7, #32]
 8016614:	685b      	ldr	r3, [r3, #4]
 8016616:	891a      	ldrh	r2, [r3, #8]
 8016618:	6a3b      	ldr	r3, [r7, #32]
 801661a:	891b      	ldrh	r3, [r3, #8]
 801661c:	1ad3      	subs	r3, r2, r3
 801661e:	b29b      	uxth	r3, r3
 8016620:	2201      	movs	r2, #1
 8016622:	6939      	ldr	r1, [r7, #16]
 8016624:	f7fa fe4e 	bl	80112c4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8016628:	6a3b      	ldr	r3, [r7, #32]
 801662a:	68db      	ldr	r3, [r3, #12]
 801662c:	685b      	ldr	r3, [r3, #4]
 801662e:	4618      	mov	r0, r3
 8016630:	f7f9 f88f 	bl	800f752 <lwip_htonl>
 8016634:	4603      	mov	r3, r0
 8016636:	3301      	adds	r3, #1
 8016638:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801663e:	68fb      	ldr	r3, [r7, #12]
 8016640:	1ad3      	subs	r3, r2, r3
 8016642:	2b00      	cmp	r3, #0
 8016644:	da02      	bge.n	801664c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	68fa      	ldr	r2, [r7, #12]
 801664a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801664c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016650:	2200      	movs	r2, #0
 8016652:	69b9      	ldr	r1, [r7, #24]
 8016654:	6878      	ldr	r0, [r7, #4]
 8016656:	f7ff fdef 	bl	8016238 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801665a:	687a      	ldr	r2, [r7, #4]
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	3304      	adds	r3, #4
 8016660:	69b9      	ldr	r1, [r7, #24]
 8016662:	6878      	ldr	r0, [r7, #4]
 8016664:	f7ff fe26 	bl	80162b4 <tcp_output_control_segment>
 8016668:	4603      	mov	r3, r0
 801666a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801666c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8016670:	4618      	mov	r0, r3
 8016672:	372c      	adds	r7, #44	; 0x2c
 8016674:	46bd      	mov	sp, r7
 8016676:	bd90      	pop	{r4, r7, pc}
 8016678:	0801dc88 	.word	0x0801dc88
 801667c:	0801e480 	.word	0x0801e480
 8016680:	0801dcdc 	.word	0x0801dcdc

08016684 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8016684:	b580      	push	{r7, lr}
 8016686:	b082      	sub	sp, #8
 8016688:	af00      	add	r7, sp, #0
 801668a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801668c:	f7fa ff08 	bl	80114a0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8016690:	4b0a      	ldr	r3, [pc, #40]	; (80166bc <tcpip_tcp_timer+0x38>)
 8016692:	681b      	ldr	r3, [r3, #0]
 8016694:	2b00      	cmp	r3, #0
 8016696:	d103      	bne.n	80166a0 <tcpip_tcp_timer+0x1c>
 8016698:	4b09      	ldr	r3, [pc, #36]	; (80166c0 <tcpip_tcp_timer+0x3c>)
 801669a:	681b      	ldr	r3, [r3, #0]
 801669c:	2b00      	cmp	r3, #0
 801669e:	d005      	beq.n	80166ac <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80166a0:	2200      	movs	r2, #0
 80166a2:	4908      	ldr	r1, [pc, #32]	; (80166c4 <tcpip_tcp_timer+0x40>)
 80166a4:	20fa      	movs	r0, #250	; 0xfa
 80166a6:	f000 f8f3 	bl	8016890 <sys_timeout>
 80166aa:	e003      	b.n	80166b4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80166ac:	4b06      	ldr	r3, [pc, #24]	; (80166c8 <tcpip_tcp_timer+0x44>)
 80166ae:	2200      	movs	r2, #0
 80166b0:	601a      	str	r2, [r3, #0]
  }
}
 80166b2:	bf00      	nop
 80166b4:	bf00      	nop
 80166b6:	3708      	adds	r7, #8
 80166b8:	46bd      	mov	sp, r7
 80166ba:	bd80      	pop	{r7, pc}
 80166bc:	200070e4 	.word	0x200070e4
 80166c0:	200070e8 	.word	0x200070e8
 80166c4:	08016685 	.word	0x08016685
 80166c8:	20007130 	.word	0x20007130

080166cc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80166cc:	b580      	push	{r7, lr}
 80166ce:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80166d0:	4b0a      	ldr	r3, [pc, #40]	; (80166fc <tcp_timer_needed+0x30>)
 80166d2:	681b      	ldr	r3, [r3, #0]
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	d10f      	bne.n	80166f8 <tcp_timer_needed+0x2c>
 80166d8:	4b09      	ldr	r3, [pc, #36]	; (8016700 <tcp_timer_needed+0x34>)
 80166da:	681b      	ldr	r3, [r3, #0]
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d103      	bne.n	80166e8 <tcp_timer_needed+0x1c>
 80166e0:	4b08      	ldr	r3, [pc, #32]	; (8016704 <tcp_timer_needed+0x38>)
 80166e2:	681b      	ldr	r3, [r3, #0]
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d007      	beq.n	80166f8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80166e8:	4b04      	ldr	r3, [pc, #16]	; (80166fc <tcp_timer_needed+0x30>)
 80166ea:	2201      	movs	r2, #1
 80166ec:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80166ee:	2200      	movs	r2, #0
 80166f0:	4905      	ldr	r1, [pc, #20]	; (8016708 <tcp_timer_needed+0x3c>)
 80166f2:	20fa      	movs	r0, #250	; 0xfa
 80166f4:	f000 f8cc 	bl	8016890 <sys_timeout>
  }
}
 80166f8:	bf00      	nop
 80166fa:	bd80      	pop	{r7, pc}
 80166fc:	20007130 	.word	0x20007130
 8016700:	200070e4 	.word	0x200070e4
 8016704:	200070e8 	.word	0x200070e8
 8016708:	08016685 	.word	0x08016685

0801670c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801670c:	b580      	push	{r7, lr}
 801670e:	b086      	sub	sp, #24
 8016710:	af00      	add	r7, sp, #0
 8016712:	60f8      	str	r0, [r7, #12]
 8016714:	60b9      	str	r1, [r7, #8]
 8016716:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8016718:	2006      	movs	r0, #6
 801671a:	f7f9 fd23 	bl	8010164 <memp_malloc>
 801671e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8016720:	693b      	ldr	r3, [r7, #16]
 8016722:	2b00      	cmp	r3, #0
 8016724:	d109      	bne.n	801673a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8016726:	693b      	ldr	r3, [r7, #16]
 8016728:	2b00      	cmp	r3, #0
 801672a:	d151      	bne.n	80167d0 <sys_timeout_abs+0xc4>
 801672c:	4b2a      	ldr	r3, [pc, #168]	; (80167d8 <sys_timeout_abs+0xcc>)
 801672e:	22be      	movs	r2, #190	; 0xbe
 8016730:	492a      	ldr	r1, [pc, #168]	; (80167dc <sys_timeout_abs+0xd0>)
 8016732:	482b      	ldr	r0, [pc, #172]	; (80167e0 <sys_timeout_abs+0xd4>)
 8016734:	f003 fab4 	bl	8019ca0 <iprintf>
    return;
 8016738:	e04a      	b.n	80167d0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801673a:	693b      	ldr	r3, [r7, #16]
 801673c:	2200      	movs	r2, #0
 801673e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8016740:	693b      	ldr	r3, [r7, #16]
 8016742:	68ba      	ldr	r2, [r7, #8]
 8016744:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8016746:	693b      	ldr	r3, [r7, #16]
 8016748:	687a      	ldr	r2, [r7, #4]
 801674a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801674c:	693b      	ldr	r3, [r7, #16]
 801674e:	68fa      	ldr	r2, [r7, #12]
 8016750:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8016752:	4b24      	ldr	r3, [pc, #144]	; (80167e4 <sys_timeout_abs+0xd8>)
 8016754:	681b      	ldr	r3, [r3, #0]
 8016756:	2b00      	cmp	r3, #0
 8016758:	d103      	bne.n	8016762 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801675a:	4a22      	ldr	r2, [pc, #136]	; (80167e4 <sys_timeout_abs+0xd8>)
 801675c:	693b      	ldr	r3, [r7, #16]
 801675e:	6013      	str	r3, [r2, #0]
    return;
 8016760:	e037      	b.n	80167d2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8016762:	693b      	ldr	r3, [r7, #16]
 8016764:	685a      	ldr	r2, [r3, #4]
 8016766:	4b1f      	ldr	r3, [pc, #124]	; (80167e4 <sys_timeout_abs+0xd8>)
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	685b      	ldr	r3, [r3, #4]
 801676c:	1ad3      	subs	r3, r2, r3
 801676e:	0fdb      	lsrs	r3, r3, #31
 8016770:	f003 0301 	and.w	r3, r3, #1
 8016774:	b2db      	uxtb	r3, r3
 8016776:	2b00      	cmp	r3, #0
 8016778:	d007      	beq.n	801678a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801677a:	4b1a      	ldr	r3, [pc, #104]	; (80167e4 <sys_timeout_abs+0xd8>)
 801677c:	681a      	ldr	r2, [r3, #0]
 801677e:	693b      	ldr	r3, [r7, #16]
 8016780:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8016782:	4a18      	ldr	r2, [pc, #96]	; (80167e4 <sys_timeout_abs+0xd8>)
 8016784:	693b      	ldr	r3, [r7, #16]
 8016786:	6013      	str	r3, [r2, #0]
 8016788:	e023      	b.n	80167d2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801678a:	4b16      	ldr	r3, [pc, #88]	; (80167e4 <sys_timeout_abs+0xd8>)
 801678c:	681b      	ldr	r3, [r3, #0]
 801678e:	617b      	str	r3, [r7, #20]
 8016790:	e01a      	b.n	80167c8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8016792:	697b      	ldr	r3, [r7, #20]
 8016794:	681b      	ldr	r3, [r3, #0]
 8016796:	2b00      	cmp	r3, #0
 8016798:	d00b      	beq.n	80167b2 <sys_timeout_abs+0xa6>
 801679a:	693b      	ldr	r3, [r7, #16]
 801679c:	685a      	ldr	r2, [r3, #4]
 801679e:	697b      	ldr	r3, [r7, #20]
 80167a0:	681b      	ldr	r3, [r3, #0]
 80167a2:	685b      	ldr	r3, [r3, #4]
 80167a4:	1ad3      	subs	r3, r2, r3
 80167a6:	0fdb      	lsrs	r3, r3, #31
 80167a8:	f003 0301 	and.w	r3, r3, #1
 80167ac:	b2db      	uxtb	r3, r3
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	d007      	beq.n	80167c2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80167b2:	697b      	ldr	r3, [r7, #20]
 80167b4:	681a      	ldr	r2, [r3, #0]
 80167b6:	693b      	ldr	r3, [r7, #16]
 80167b8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80167ba:	697b      	ldr	r3, [r7, #20]
 80167bc:	693a      	ldr	r2, [r7, #16]
 80167be:	601a      	str	r2, [r3, #0]
        break;
 80167c0:	e007      	b.n	80167d2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80167c2:	697b      	ldr	r3, [r7, #20]
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	617b      	str	r3, [r7, #20]
 80167c8:	697b      	ldr	r3, [r7, #20]
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	d1e1      	bne.n	8016792 <sys_timeout_abs+0x86>
 80167ce:	e000      	b.n	80167d2 <sys_timeout_abs+0xc6>
    return;
 80167d0:	bf00      	nop
      }
    }
  }
}
 80167d2:	3718      	adds	r7, #24
 80167d4:	46bd      	mov	sp, r7
 80167d6:	bd80      	pop	{r7, pc}
 80167d8:	0801e4a4 	.word	0x0801e4a4
 80167dc:	0801e4d8 	.word	0x0801e4d8
 80167e0:	0801e518 	.word	0x0801e518
 80167e4:	20007128 	.word	0x20007128

080167e8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80167e8:	b580      	push	{r7, lr}
 80167ea:	b086      	sub	sp, #24
 80167ec:	af00      	add	r7, sp, #0
 80167ee:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80167f4:	697b      	ldr	r3, [r7, #20]
 80167f6:	685b      	ldr	r3, [r3, #4]
 80167f8:	4798      	blx	r3

  now = sys_now();
 80167fa:	f7f8 fdb5 	bl	800f368 <sys_now>
 80167fe:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8016800:	697b      	ldr	r3, [r7, #20]
 8016802:	681a      	ldr	r2, [r3, #0]
 8016804:	4b0f      	ldr	r3, [pc, #60]	; (8016844 <lwip_cyclic_timer+0x5c>)
 8016806:	681b      	ldr	r3, [r3, #0]
 8016808:	4413      	add	r3, r2
 801680a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801680c:	68fa      	ldr	r2, [r7, #12]
 801680e:	693b      	ldr	r3, [r7, #16]
 8016810:	1ad3      	subs	r3, r2, r3
 8016812:	0fdb      	lsrs	r3, r3, #31
 8016814:	f003 0301 	and.w	r3, r3, #1
 8016818:	b2db      	uxtb	r3, r3
 801681a:	2b00      	cmp	r3, #0
 801681c:	d009      	beq.n	8016832 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801681e:	697b      	ldr	r3, [r7, #20]
 8016820:	681a      	ldr	r2, [r3, #0]
 8016822:	693b      	ldr	r3, [r7, #16]
 8016824:	4413      	add	r3, r2
 8016826:	687a      	ldr	r2, [r7, #4]
 8016828:	4907      	ldr	r1, [pc, #28]	; (8016848 <lwip_cyclic_timer+0x60>)
 801682a:	4618      	mov	r0, r3
 801682c:	f7ff ff6e 	bl	801670c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8016830:	e004      	b.n	801683c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8016832:	687a      	ldr	r2, [r7, #4]
 8016834:	4904      	ldr	r1, [pc, #16]	; (8016848 <lwip_cyclic_timer+0x60>)
 8016836:	68f8      	ldr	r0, [r7, #12]
 8016838:	f7ff ff68 	bl	801670c <sys_timeout_abs>
}
 801683c:	bf00      	nop
 801683e:	3718      	adds	r7, #24
 8016840:	46bd      	mov	sp, r7
 8016842:	bd80      	pop	{r7, pc}
 8016844:	2000712c 	.word	0x2000712c
 8016848:	080167e9 	.word	0x080167e9

0801684c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801684c:	b580      	push	{r7, lr}
 801684e:	b082      	sub	sp, #8
 8016850:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016852:	2301      	movs	r3, #1
 8016854:	607b      	str	r3, [r7, #4]
 8016856:	e00e      	b.n	8016876 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8016858:	4a0b      	ldr	r2, [pc, #44]	; (8016888 <sys_timeouts_init+0x3c>)
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	00db      	lsls	r3, r3, #3
 8016864:	4a08      	ldr	r2, [pc, #32]	; (8016888 <sys_timeouts_init+0x3c>)
 8016866:	4413      	add	r3, r2
 8016868:	461a      	mov	r2, r3
 801686a:	4908      	ldr	r1, [pc, #32]	; (801688c <sys_timeouts_init+0x40>)
 801686c:	f000 f810 	bl	8016890 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	3301      	adds	r3, #1
 8016874:	607b      	str	r3, [r7, #4]
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	2b02      	cmp	r3, #2
 801687a:	d9ed      	bls.n	8016858 <sys_timeouts_init+0xc>
  }
}
 801687c:	bf00      	nop
 801687e:	bf00      	nop
 8016880:	3708      	adds	r7, #8
 8016882:	46bd      	mov	sp, r7
 8016884:	bd80      	pop	{r7, pc}
 8016886:	bf00      	nop
 8016888:	0801f0b0 	.word	0x0801f0b0
 801688c:	080167e9 	.word	0x080167e9

08016890 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8016890:	b580      	push	{r7, lr}
 8016892:	b086      	sub	sp, #24
 8016894:	af00      	add	r7, sp, #0
 8016896:	60f8      	str	r0, [r7, #12]
 8016898:	60b9      	str	r1, [r7, #8]
 801689a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801689c:	68fb      	ldr	r3, [r7, #12]
 801689e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80168a2:	d306      	bcc.n	80168b2 <sys_timeout+0x22>
 80168a4:	4b0a      	ldr	r3, [pc, #40]	; (80168d0 <sys_timeout+0x40>)
 80168a6:	f240 1229 	movw	r2, #297	; 0x129
 80168aa:	490a      	ldr	r1, [pc, #40]	; (80168d4 <sys_timeout+0x44>)
 80168ac:	480a      	ldr	r0, [pc, #40]	; (80168d8 <sys_timeout+0x48>)
 80168ae:	f003 f9f7 	bl	8019ca0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80168b2:	f7f8 fd59 	bl	800f368 <sys_now>
 80168b6:	4602      	mov	r2, r0
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	4413      	add	r3, r2
 80168bc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80168be:	687a      	ldr	r2, [r7, #4]
 80168c0:	68b9      	ldr	r1, [r7, #8]
 80168c2:	6978      	ldr	r0, [r7, #20]
 80168c4:	f7ff ff22 	bl	801670c <sys_timeout_abs>
#endif
}
 80168c8:	bf00      	nop
 80168ca:	3718      	adds	r7, #24
 80168cc:	46bd      	mov	sp, r7
 80168ce:	bd80      	pop	{r7, pc}
 80168d0:	0801e4a4 	.word	0x0801e4a4
 80168d4:	0801e540 	.word	0x0801e540
 80168d8:	0801e518 	.word	0x0801e518

080168dc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80168dc:	b580      	push	{r7, lr}
 80168de:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80168e0:	f002 fca2 	bl	8019228 <rand>
 80168e4:	4603      	mov	r3, r0
 80168e6:	b29b      	uxth	r3, r3
 80168e8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80168ec:	b29b      	uxth	r3, r3
 80168ee:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80168f2:	b29a      	uxth	r2, r3
 80168f4:	4b01      	ldr	r3, [pc, #4]	; (80168fc <udp_init+0x20>)
 80168f6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80168f8:	bf00      	nop
 80168fa:	bd80      	pop	{r7, pc}
 80168fc:	20000060 	.word	0x20000060

08016900 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8016900:	b580      	push	{r7, lr}
 8016902:	b084      	sub	sp, #16
 8016904:	af00      	add	r7, sp, #0
 8016906:	60f8      	str	r0, [r7, #12]
 8016908:	60b9      	str	r1, [r7, #8]
 801690a:	4613      	mov	r3, r2
 801690c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801690e:	68fb      	ldr	r3, [r7, #12]
 8016910:	2b00      	cmp	r3, #0
 8016912:	d105      	bne.n	8016920 <udp_input_local_match+0x20>
 8016914:	4b27      	ldr	r3, [pc, #156]	; (80169b4 <udp_input_local_match+0xb4>)
 8016916:	2287      	movs	r2, #135	; 0x87
 8016918:	4927      	ldr	r1, [pc, #156]	; (80169b8 <udp_input_local_match+0xb8>)
 801691a:	4828      	ldr	r0, [pc, #160]	; (80169bc <udp_input_local_match+0xbc>)
 801691c:	f003 f9c0 	bl	8019ca0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8016920:	68bb      	ldr	r3, [r7, #8]
 8016922:	2b00      	cmp	r3, #0
 8016924:	d105      	bne.n	8016932 <udp_input_local_match+0x32>
 8016926:	4b23      	ldr	r3, [pc, #140]	; (80169b4 <udp_input_local_match+0xb4>)
 8016928:	2288      	movs	r2, #136	; 0x88
 801692a:	4925      	ldr	r1, [pc, #148]	; (80169c0 <udp_input_local_match+0xc0>)
 801692c:	4823      	ldr	r0, [pc, #140]	; (80169bc <udp_input_local_match+0xbc>)
 801692e:	f003 f9b7 	bl	8019ca0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016932:	68fb      	ldr	r3, [r7, #12]
 8016934:	7a1b      	ldrb	r3, [r3, #8]
 8016936:	2b00      	cmp	r3, #0
 8016938:	d00b      	beq.n	8016952 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801693a:	68fb      	ldr	r3, [r7, #12]
 801693c:	7a1a      	ldrb	r2, [r3, #8]
 801693e:	4b21      	ldr	r3, [pc, #132]	; (80169c4 <udp_input_local_match+0xc4>)
 8016940:	685b      	ldr	r3, [r3, #4]
 8016942:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016946:	3301      	adds	r3, #1
 8016948:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801694a:	429a      	cmp	r2, r3
 801694c:	d001      	beq.n	8016952 <udp_input_local_match+0x52>
    return 0;
 801694e:	2300      	movs	r3, #0
 8016950:	e02b      	b.n	80169aa <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8016952:	79fb      	ldrb	r3, [r7, #7]
 8016954:	2b00      	cmp	r3, #0
 8016956:	d018      	beq.n	801698a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016958:	68fb      	ldr	r3, [r7, #12]
 801695a:	2b00      	cmp	r3, #0
 801695c:	d013      	beq.n	8016986 <udp_input_local_match+0x86>
 801695e:	68fb      	ldr	r3, [r7, #12]
 8016960:	681b      	ldr	r3, [r3, #0]
 8016962:	2b00      	cmp	r3, #0
 8016964:	d00f      	beq.n	8016986 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016966:	4b17      	ldr	r3, [pc, #92]	; (80169c4 <udp_input_local_match+0xc4>)
 8016968:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801696a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801696e:	d00a      	beq.n	8016986 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8016970:	68fb      	ldr	r3, [r7, #12]
 8016972:	681a      	ldr	r2, [r3, #0]
 8016974:	4b13      	ldr	r3, [pc, #76]	; (80169c4 <udp_input_local_match+0xc4>)
 8016976:	695b      	ldr	r3, [r3, #20]
 8016978:	405a      	eors	r2, r3
 801697a:	68bb      	ldr	r3, [r7, #8]
 801697c:	3308      	adds	r3, #8
 801697e:	681b      	ldr	r3, [r3, #0]
 8016980:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016982:	2b00      	cmp	r3, #0
 8016984:	d110      	bne.n	80169a8 <udp_input_local_match+0xa8>
          return 1;
 8016986:	2301      	movs	r3, #1
 8016988:	e00f      	b.n	80169aa <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	2b00      	cmp	r3, #0
 801698e:	d009      	beq.n	80169a4 <udp_input_local_match+0xa4>
 8016990:	68fb      	ldr	r3, [r7, #12]
 8016992:	681b      	ldr	r3, [r3, #0]
 8016994:	2b00      	cmp	r3, #0
 8016996:	d005      	beq.n	80169a4 <udp_input_local_match+0xa4>
 8016998:	68fb      	ldr	r3, [r7, #12]
 801699a:	681a      	ldr	r2, [r3, #0]
 801699c:	4b09      	ldr	r3, [pc, #36]	; (80169c4 <udp_input_local_match+0xc4>)
 801699e:	695b      	ldr	r3, [r3, #20]
 80169a0:	429a      	cmp	r2, r3
 80169a2:	d101      	bne.n	80169a8 <udp_input_local_match+0xa8>
        return 1;
 80169a4:	2301      	movs	r3, #1
 80169a6:	e000      	b.n	80169aa <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80169a8:	2300      	movs	r3, #0
}
 80169aa:	4618      	mov	r0, r3
 80169ac:	3710      	adds	r7, #16
 80169ae:	46bd      	mov	sp, r7
 80169b0:	bd80      	pop	{r7, pc}
 80169b2:	bf00      	nop
 80169b4:	0801e58c 	.word	0x0801e58c
 80169b8:	0801e5bc 	.word	0x0801e5bc
 80169bc:	0801e5e0 	.word	0x0801e5e0
 80169c0:	0801e608 	.word	0x0801e608
 80169c4:	200007fc 	.word	0x200007fc

080169c8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80169c8:	b590      	push	{r4, r7, lr}
 80169ca:	b08d      	sub	sp, #52	; 0x34
 80169cc:	af02      	add	r7, sp, #8
 80169ce:	6078      	str	r0, [r7, #4]
 80169d0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80169d2:	2300      	movs	r3, #0
 80169d4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d105      	bne.n	80169e8 <udp_input+0x20>
 80169dc:	4b7c      	ldr	r3, [pc, #496]	; (8016bd0 <udp_input+0x208>)
 80169de:	22cf      	movs	r2, #207	; 0xcf
 80169e0:	497c      	ldr	r1, [pc, #496]	; (8016bd4 <udp_input+0x20c>)
 80169e2:	487d      	ldr	r0, [pc, #500]	; (8016bd8 <udp_input+0x210>)
 80169e4:	f003 f95c 	bl	8019ca0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80169e8:	683b      	ldr	r3, [r7, #0]
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d105      	bne.n	80169fa <udp_input+0x32>
 80169ee:	4b78      	ldr	r3, [pc, #480]	; (8016bd0 <udp_input+0x208>)
 80169f0:	22d0      	movs	r2, #208	; 0xd0
 80169f2:	497a      	ldr	r1, [pc, #488]	; (8016bdc <udp_input+0x214>)
 80169f4:	4878      	ldr	r0, [pc, #480]	; (8016bd8 <udp_input+0x210>)
 80169f6:	f003 f953 	bl	8019ca0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	895b      	ldrh	r3, [r3, #10]
 80169fe:	2b07      	cmp	r3, #7
 8016a00:	d803      	bhi.n	8016a0a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8016a02:	6878      	ldr	r0, [r7, #4]
 8016a04:	f7fa fa74 	bl	8010ef0 <pbuf_free>
    goto end;
 8016a08:	e0de      	b.n	8016bc8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	685b      	ldr	r3, [r3, #4]
 8016a0e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8016a10:	4b73      	ldr	r3, [pc, #460]	; (8016be0 <udp_input+0x218>)
 8016a12:	695b      	ldr	r3, [r3, #20]
 8016a14:	4a72      	ldr	r2, [pc, #456]	; (8016be0 <udp_input+0x218>)
 8016a16:	6812      	ldr	r2, [r2, #0]
 8016a18:	4611      	mov	r1, r2
 8016a1a:	4618      	mov	r0, r3
 8016a1c:	f001 fcae 	bl	801837c <ip4_addr_isbroadcast_u32>
 8016a20:	4603      	mov	r3, r0
 8016a22:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8016a24:	697b      	ldr	r3, [r7, #20]
 8016a26:	881b      	ldrh	r3, [r3, #0]
 8016a28:	b29b      	uxth	r3, r3
 8016a2a:	4618      	mov	r0, r3
 8016a2c:	f7f8 fe7c 	bl	800f728 <lwip_htons>
 8016a30:	4603      	mov	r3, r0
 8016a32:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016a34:	697b      	ldr	r3, [r7, #20]
 8016a36:	885b      	ldrh	r3, [r3, #2]
 8016a38:	b29b      	uxth	r3, r3
 8016a3a:	4618      	mov	r0, r3
 8016a3c:	f7f8 fe74 	bl	800f728 <lwip_htons>
 8016a40:	4603      	mov	r3, r0
 8016a42:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8016a44:	2300      	movs	r3, #0
 8016a46:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8016a48:	2300      	movs	r3, #0
 8016a4a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8016a4c:	2300      	movs	r3, #0
 8016a4e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016a50:	4b64      	ldr	r3, [pc, #400]	; (8016be4 <udp_input+0x21c>)
 8016a52:	681b      	ldr	r3, [r3, #0]
 8016a54:	627b      	str	r3, [r7, #36]	; 0x24
 8016a56:	e054      	b.n	8016b02 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8016a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a5a:	8a5b      	ldrh	r3, [r3, #18]
 8016a5c:	89fa      	ldrh	r2, [r7, #14]
 8016a5e:	429a      	cmp	r2, r3
 8016a60:	d14a      	bne.n	8016af8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8016a62:	7cfb      	ldrb	r3, [r7, #19]
 8016a64:	461a      	mov	r2, r3
 8016a66:	6839      	ldr	r1, [r7, #0]
 8016a68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016a6a:	f7ff ff49 	bl	8016900 <udp_input_local_match>
 8016a6e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	d041      	beq.n	8016af8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8016a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a76:	7c1b      	ldrb	r3, [r3, #16]
 8016a78:	f003 0304 	and.w	r3, r3, #4
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	d11d      	bne.n	8016abc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8016a80:	69fb      	ldr	r3, [r7, #28]
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d102      	bne.n	8016a8c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8016a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a88:	61fb      	str	r3, [r7, #28]
 8016a8a:	e017      	b.n	8016abc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8016a8c:	7cfb      	ldrb	r3, [r7, #19]
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d014      	beq.n	8016abc <udp_input+0xf4>
 8016a92:	4b53      	ldr	r3, [pc, #332]	; (8016be0 <udp_input+0x218>)
 8016a94:	695b      	ldr	r3, [r3, #20]
 8016a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a9a:	d10f      	bne.n	8016abc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8016a9c:	69fb      	ldr	r3, [r7, #28]
 8016a9e:	681a      	ldr	r2, [r3, #0]
 8016aa0:	683b      	ldr	r3, [r7, #0]
 8016aa2:	3304      	adds	r3, #4
 8016aa4:	681b      	ldr	r3, [r3, #0]
 8016aa6:	429a      	cmp	r2, r3
 8016aa8:	d008      	beq.n	8016abc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8016aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aac:	681a      	ldr	r2, [r3, #0]
 8016aae:	683b      	ldr	r3, [r7, #0]
 8016ab0:	3304      	adds	r3, #4
 8016ab2:	681b      	ldr	r3, [r3, #0]
 8016ab4:	429a      	cmp	r2, r3
 8016ab6:	d101      	bne.n	8016abc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8016ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aba:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8016abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016abe:	8a9b      	ldrh	r3, [r3, #20]
 8016ac0:	8a3a      	ldrh	r2, [r7, #16]
 8016ac2:	429a      	cmp	r2, r3
 8016ac4:	d118      	bne.n	8016af8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ac8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d005      	beq.n	8016ada <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8016ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ad0:	685a      	ldr	r2, [r3, #4]
 8016ad2:	4b43      	ldr	r3, [pc, #268]	; (8016be0 <udp_input+0x218>)
 8016ad4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016ad6:	429a      	cmp	r2, r3
 8016ad8:	d10e      	bne.n	8016af8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8016ada:	6a3b      	ldr	r3, [r7, #32]
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d014      	beq.n	8016b0a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8016ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ae2:	68da      	ldr	r2, [r3, #12]
 8016ae4:	6a3b      	ldr	r3, [r7, #32]
 8016ae6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8016ae8:	4b3e      	ldr	r3, [pc, #248]	; (8016be4 <udp_input+0x21c>)
 8016aea:	681a      	ldr	r2, [r3, #0]
 8016aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aee:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8016af0:	4a3c      	ldr	r2, [pc, #240]	; (8016be4 <udp_input+0x21c>)
 8016af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016af4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8016af6:	e008      	b.n	8016b0a <udp_input+0x142>
      }
    }

    prev = pcb;
 8016af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016afa:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016afe:	68db      	ldr	r3, [r3, #12]
 8016b00:	627b      	str	r3, [r7, #36]	; 0x24
 8016b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	d1a7      	bne.n	8016a58 <udp_input+0x90>
 8016b08:	e000      	b.n	8016b0c <udp_input+0x144>
        break;
 8016b0a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8016b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b0e:	2b00      	cmp	r3, #0
 8016b10:	d101      	bne.n	8016b16 <udp_input+0x14e>
    pcb = uncon_pcb;
 8016b12:	69fb      	ldr	r3, [r7, #28]
 8016b14:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8016b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d002      	beq.n	8016b22 <udp_input+0x15a>
    for_us = 1;
 8016b1c:	2301      	movs	r3, #1
 8016b1e:	76fb      	strb	r3, [r7, #27]
 8016b20:	e00a      	b.n	8016b38 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8016b22:	683b      	ldr	r3, [r7, #0]
 8016b24:	3304      	adds	r3, #4
 8016b26:	681a      	ldr	r2, [r3, #0]
 8016b28:	4b2d      	ldr	r3, [pc, #180]	; (8016be0 <udp_input+0x218>)
 8016b2a:	695b      	ldr	r3, [r3, #20]
 8016b2c:	429a      	cmp	r2, r3
 8016b2e:	bf0c      	ite	eq
 8016b30:	2301      	moveq	r3, #1
 8016b32:	2300      	movne	r3, #0
 8016b34:	b2db      	uxtb	r3, r3
 8016b36:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016b38:	7efb      	ldrb	r3, [r7, #27]
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d041      	beq.n	8016bc2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8016b3e:	2108      	movs	r1, #8
 8016b40:	6878      	ldr	r0, [r7, #4]
 8016b42:	f7fa f94f 	bl	8010de4 <pbuf_remove_header>
 8016b46:	4603      	mov	r3, r0
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	d00a      	beq.n	8016b62 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8016b4c:	4b20      	ldr	r3, [pc, #128]	; (8016bd0 <udp_input+0x208>)
 8016b4e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8016b52:	4925      	ldr	r1, [pc, #148]	; (8016be8 <udp_input+0x220>)
 8016b54:	4820      	ldr	r0, [pc, #128]	; (8016bd8 <udp_input+0x210>)
 8016b56:	f003 f8a3 	bl	8019ca0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8016b5a:	6878      	ldr	r0, [r7, #4]
 8016b5c:	f7fa f9c8 	bl	8010ef0 <pbuf_free>
      goto end;
 8016b60:	e032      	b.n	8016bc8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8016b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d012      	beq.n	8016b8e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8016b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b6a:	699b      	ldr	r3, [r3, #24]
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	d00a      	beq.n	8016b86 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8016b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b72:	699c      	ldr	r4, [r3, #24]
 8016b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b76:	69d8      	ldr	r0, [r3, #28]
 8016b78:	8a3b      	ldrh	r3, [r7, #16]
 8016b7a:	9300      	str	r3, [sp, #0]
 8016b7c:	4b1b      	ldr	r3, [pc, #108]	; (8016bec <udp_input+0x224>)
 8016b7e:	687a      	ldr	r2, [r7, #4]
 8016b80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016b82:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8016b84:	e021      	b.n	8016bca <udp_input+0x202>
        pbuf_free(p);
 8016b86:	6878      	ldr	r0, [r7, #4]
 8016b88:	f7fa f9b2 	bl	8010ef0 <pbuf_free>
        goto end;
 8016b8c:	e01c      	b.n	8016bc8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8016b8e:	7cfb      	ldrb	r3, [r7, #19]
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	d112      	bne.n	8016bba <udp_input+0x1f2>
 8016b94:	4b12      	ldr	r3, [pc, #72]	; (8016be0 <udp_input+0x218>)
 8016b96:	695b      	ldr	r3, [r3, #20]
 8016b98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016b9c:	2be0      	cmp	r3, #224	; 0xe0
 8016b9e:	d00c      	beq.n	8016bba <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8016ba0:	4b0f      	ldr	r3, [pc, #60]	; (8016be0 <udp_input+0x218>)
 8016ba2:	899b      	ldrh	r3, [r3, #12]
 8016ba4:	3308      	adds	r3, #8
 8016ba6:	b29b      	uxth	r3, r3
 8016ba8:	b21b      	sxth	r3, r3
 8016baa:	4619      	mov	r1, r3
 8016bac:	6878      	ldr	r0, [r7, #4]
 8016bae:	f7fa f98c 	bl	8010eca <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8016bb2:	2103      	movs	r1, #3
 8016bb4:	6878      	ldr	r0, [r7, #4]
 8016bb6:	f001 f8b7 	bl	8017d28 <icmp_dest_unreach>
      pbuf_free(p);
 8016bba:	6878      	ldr	r0, [r7, #4]
 8016bbc:	f7fa f998 	bl	8010ef0 <pbuf_free>
  return;
 8016bc0:	e003      	b.n	8016bca <udp_input+0x202>
    pbuf_free(p);
 8016bc2:	6878      	ldr	r0, [r7, #4]
 8016bc4:	f7fa f994 	bl	8010ef0 <pbuf_free>
  return;
 8016bc8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8016bca:	372c      	adds	r7, #44	; 0x2c
 8016bcc:	46bd      	mov	sp, r7
 8016bce:	bd90      	pop	{r4, r7, pc}
 8016bd0:	0801e58c 	.word	0x0801e58c
 8016bd4:	0801e630 	.word	0x0801e630
 8016bd8:	0801e5e0 	.word	0x0801e5e0
 8016bdc:	0801e648 	.word	0x0801e648
 8016be0:	200007fc 	.word	0x200007fc
 8016be4:	20007134 	.word	0x20007134
 8016be8:	0801e664 	.word	0x0801e664
 8016bec:	2000080c 	.word	0x2000080c

08016bf0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016bf0:	b480      	push	{r7}
 8016bf2:	b085      	sub	sp, #20
 8016bf4:	af00      	add	r7, sp, #0
 8016bf6:	6078      	str	r0, [r7, #4]
 8016bf8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d01e      	beq.n	8016c3e <udp_netif_ip_addr_changed+0x4e>
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	681b      	ldr	r3, [r3, #0]
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d01a      	beq.n	8016c3e <udp_netif_ip_addr_changed+0x4e>
 8016c08:	683b      	ldr	r3, [r7, #0]
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d017      	beq.n	8016c3e <udp_netif_ip_addr_changed+0x4e>
 8016c0e:	683b      	ldr	r3, [r7, #0]
 8016c10:	681b      	ldr	r3, [r3, #0]
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d013      	beq.n	8016c3e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016c16:	4b0d      	ldr	r3, [pc, #52]	; (8016c4c <udp_netif_ip_addr_changed+0x5c>)
 8016c18:	681b      	ldr	r3, [r3, #0]
 8016c1a:	60fb      	str	r3, [r7, #12]
 8016c1c:	e00c      	b.n	8016c38 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8016c1e:	68fb      	ldr	r3, [r7, #12]
 8016c20:	681a      	ldr	r2, [r3, #0]
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	681b      	ldr	r3, [r3, #0]
 8016c26:	429a      	cmp	r2, r3
 8016c28:	d103      	bne.n	8016c32 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8016c2a:	683b      	ldr	r3, [r7, #0]
 8016c2c:	681a      	ldr	r2, [r3, #0]
 8016c2e:	68fb      	ldr	r3, [r7, #12]
 8016c30:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016c32:	68fb      	ldr	r3, [r7, #12]
 8016c34:	68db      	ldr	r3, [r3, #12]
 8016c36:	60fb      	str	r3, [r7, #12]
 8016c38:	68fb      	ldr	r3, [r7, #12]
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d1ef      	bne.n	8016c1e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8016c3e:	bf00      	nop
 8016c40:	3714      	adds	r7, #20
 8016c42:	46bd      	mov	sp, r7
 8016c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c48:	4770      	bx	lr
 8016c4a:	bf00      	nop
 8016c4c:	20007134 	.word	0x20007134

08016c50 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016c50:	b580      	push	{r7, lr}
 8016c52:	b082      	sub	sp, #8
 8016c54:	af00      	add	r7, sp, #0
 8016c56:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016c58:	4915      	ldr	r1, [pc, #84]	; (8016cb0 <etharp_free_entry+0x60>)
 8016c5a:	687a      	ldr	r2, [r7, #4]
 8016c5c:	4613      	mov	r3, r2
 8016c5e:	005b      	lsls	r3, r3, #1
 8016c60:	4413      	add	r3, r2
 8016c62:	00db      	lsls	r3, r3, #3
 8016c64:	440b      	add	r3, r1
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d013      	beq.n	8016c94 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016c6c:	4910      	ldr	r1, [pc, #64]	; (8016cb0 <etharp_free_entry+0x60>)
 8016c6e:	687a      	ldr	r2, [r7, #4]
 8016c70:	4613      	mov	r3, r2
 8016c72:	005b      	lsls	r3, r3, #1
 8016c74:	4413      	add	r3, r2
 8016c76:	00db      	lsls	r3, r3, #3
 8016c78:	440b      	add	r3, r1
 8016c7a:	681b      	ldr	r3, [r3, #0]
 8016c7c:	4618      	mov	r0, r3
 8016c7e:	f7fa f937 	bl	8010ef0 <pbuf_free>
    arp_table[i].q = NULL;
 8016c82:	490b      	ldr	r1, [pc, #44]	; (8016cb0 <etharp_free_entry+0x60>)
 8016c84:	687a      	ldr	r2, [r7, #4]
 8016c86:	4613      	mov	r3, r2
 8016c88:	005b      	lsls	r3, r3, #1
 8016c8a:	4413      	add	r3, r2
 8016c8c:	00db      	lsls	r3, r3, #3
 8016c8e:	440b      	add	r3, r1
 8016c90:	2200      	movs	r2, #0
 8016c92:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016c94:	4906      	ldr	r1, [pc, #24]	; (8016cb0 <etharp_free_entry+0x60>)
 8016c96:	687a      	ldr	r2, [r7, #4]
 8016c98:	4613      	mov	r3, r2
 8016c9a:	005b      	lsls	r3, r3, #1
 8016c9c:	4413      	add	r3, r2
 8016c9e:	00db      	lsls	r3, r3, #3
 8016ca0:	440b      	add	r3, r1
 8016ca2:	3314      	adds	r3, #20
 8016ca4:	2200      	movs	r2, #0
 8016ca6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016ca8:	bf00      	nop
 8016caa:	3708      	adds	r7, #8
 8016cac:	46bd      	mov	sp, r7
 8016cae:	bd80      	pop	{r7, pc}
 8016cb0:	20007138 	.word	0x20007138

08016cb4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016cb4:	b580      	push	{r7, lr}
 8016cb6:	b082      	sub	sp, #8
 8016cb8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016cba:	2300      	movs	r3, #0
 8016cbc:	607b      	str	r3, [r7, #4]
 8016cbe:	e096      	b.n	8016dee <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016cc0:	494f      	ldr	r1, [pc, #316]	; (8016e00 <etharp_tmr+0x14c>)
 8016cc2:	687a      	ldr	r2, [r7, #4]
 8016cc4:	4613      	mov	r3, r2
 8016cc6:	005b      	lsls	r3, r3, #1
 8016cc8:	4413      	add	r3, r2
 8016cca:	00db      	lsls	r3, r3, #3
 8016ccc:	440b      	add	r3, r1
 8016cce:	3314      	adds	r3, #20
 8016cd0:	781b      	ldrb	r3, [r3, #0]
 8016cd2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016cd4:	78fb      	ldrb	r3, [r7, #3]
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	f000 8086 	beq.w	8016de8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016cdc:	4948      	ldr	r1, [pc, #288]	; (8016e00 <etharp_tmr+0x14c>)
 8016cde:	687a      	ldr	r2, [r7, #4]
 8016ce0:	4613      	mov	r3, r2
 8016ce2:	005b      	lsls	r3, r3, #1
 8016ce4:	4413      	add	r3, r2
 8016ce6:	00db      	lsls	r3, r3, #3
 8016ce8:	440b      	add	r3, r1
 8016cea:	3312      	adds	r3, #18
 8016cec:	881b      	ldrh	r3, [r3, #0]
 8016cee:	3301      	adds	r3, #1
 8016cf0:	b298      	uxth	r0, r3
 8016cf2:	4943      	ldr	r1, [pc, #268]	; (8016e00 <etharp_tmr+0x14c>)
 8016cf4:	687a      	ldr	r2, [r7, #4]
 8016cf6:	4613      	mov	r3, r2
 8016cf8:	005b      	lsls	r3, r3, #1
 8016cfa:	4413      	add	r3, r2
 8016cfc:	00db      	lsls	r3, r3, #3
 8016cfe:	440b      	add	r3, r1
 8016d00:	3312      	adds	r3, #18
 8016d02:	4602      	mov	r2, r0
 8016d04:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016d06:	493e      	ldr	r1, [pc, #248]	; (8016e00 <etharp_tmr+0x14c>)
 8016d08:	687a      	ldr	r2, [r7, #4]
 8016d0a:	4613      	mov	r3, r2
 8016d0c:	005b      	lsls	r3, r3, #1
 8016d0e:	4413      	add	r3, r2
 8016d10:	00db      	lsls	r3, r3, #3
 8016d12:	440b      	add	r3, r1
 8016d14:	3312      	adds	r3, #18
 8016d16:	881b      	ldrh	r3, [r3, #0]
 8016d18:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016d1c:	d215      	bcs.n	8016d4a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016d1e:	4938      	ldr	r1, [pc, #224]	; (8016e00 <etharp_tmr+0x14c>)
 8016d20:	687a      	ldr	r2, [r7, #4]
 8016d22:	4613      	mov	r3, r2
 8016d24:	005b      	lsls	r3, r3, #1
 8016d26:	4413      	add	r3, r2
 8016d28:	00db      	lsls	r3, r3, #3
 8016d2a:	440b      	add	r3, r1
 8016d2c:	3314      	adds	r3, #20
 8016d2e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016d30:	2b01      	cmp	r3, #1
 8016d32:	d10e      	bne.n	8016d52 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016d34:	4932      	ldr	r1, [pc, #200]	; (8016e00 <etharp_tmr+0x14c>)
 8016d36:	687a      	ldr	r2, [r7, #4]
 8016d38:	4613      	mov	r3, r2
 8016d3a:	005b      	lsls	r3, r3, #1
 8016d3c:	4413      	add	r3, r2
 8016d3e:	00db      	lsls	r3, r3, #3
 8016d40:	440b      	add	r3, r1
 8016d42:	3312      	adds	r3, #18
 8016d44:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016d46:	2b04      	cmp	r3, #4
 8016d48:	d903      	bls.n	8016d52 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016d4a:	6878      	ldr	r0, [r7, #4]
 8016d4c:	f7ff ff80 	bl	8016c50 <etharp_free_entry>
 8016d50:	e04a      	b.n	8016de8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016d52:	492b      	ldr	r1, [pc, #172]	; (8016e00 <etharp_tmr+0x14c>)
 8016d54:	687a      	ldr	r2, [r7, #4]
 8016d56:	4613      	mov	r3, r2
 8016d58:	005b      	lsls	r3, r3, #1
 8016d5a:	4413      	add	r3, r2
 8016d5c:	00db      	lsls	r3, r3, #3
 8016d5e:	440b      	add	r3, r1
 8016d60:	3314      	adds	r3, #20
 8016d62:	781b      	ldrb	r3, [r3, #0]
 8016d64:	2b03      	cmp	r3, #3
 8016d66:	d10a      	bne.n	8016d7e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016d68:	4925      	ldr	r1, [pc, #148]	; (8016e00 <etharp_tmr+0x14c>)
 8016d6a:	687a      	ldr	r2, [r7, #4]
 8016d6c:	4613      	mov	r3, r2
 8016d6e:	005b      	lsls	r3, r3, #1
 8016d70:	4413      	add	r3, r2
 8016d72:	00db      	lsls	r3, r3, #3
 8016d74:	440b      	add	r3, r1
 8016d76:	3314      	adds	r3, #20
 8016d78:	2204      	movs	r2, #4
 8016d7a:	701a      	strb	r2, [r3, #0]
 8016d7c:	e034      	b.n	8016de8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8016d7e:	4920      	ldr	r1, [pc, #128]	; (8016e00 <etharp_tmr+0x14c>)
 8016d80:	687a      	ldr	r2, [r7, #4]
 8016d82:	4613      	mov	r3, r2
 8016d84:	005b      	lsls	r3, r3, #1
 8016d86:	4413      	add	r3, r2
 8016d88:	00db      	lsls	r3, r3, #3
 8016d8a:	440b      	add	r3, r1
 8016d8c:	3314      	adds	r3, #20
 8016d8e:	781b      	ldrb	r3, [r3, #0]
 8016d90:	2b04      	cmp	r3, #4
 8016d92:	d10a      	bne.n	8016daa <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016d94:	491a      	ldr	r1, [pc, #104]	; (8016e00 <etharp_tmr+0x14c>)
 8016d96:	687a      	ldr	r2, [r7, #4]
 8016d98:	4613      	mov	r3, r2
 8016d9a:	005b      	lsls	r3, r3, #1
 8016d9c:	4413      	add	r3, r2
 8016d9e:	00db      	lsls	r3, r3, #3
 8016da0:	440b      	add	r3, r1
 8016da2:	3314      	adds	r3, #20
 8016da4:	2202      	movs	r2, #2
 8016da6:	701a      	strb	r2, [r3, #0]
 8016da8:	e01e      	b.n	8016de8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016daa:	4915      	ldr	r1, [pc, #84]	; (8016e00 <etharp_tmr+0x14c>)
 8016dac:	687a      	ldr	r2, [r7, #4]
 8016dae:	4613      	mov	r3, r2
 8016db0:	005b      	lsls	r3, r3, #1
 8016db2:	4413      	add	r3, r2
 8016db4:	00db      	lsls	r3, r3, #3
 8016db6:	440b      	add	r3, r1
 8016db8:	3314      	adds	r3, #20
 8016dba:	781b      	ldrb	r3, [r3, #0]
 8016dbc:	2b01      	cmp	r3, #1
 8016dbe:	d113      	bne.n	8016de8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016dc0:	490f      	ldr	r1, [pc, #60]	; (8016e00 <etharp_tmr+0x14c>)
 8016dc2:	687a      	ldr	r2, [r7, #4]
 8016dc4:	4613      	mov	r3, r2
 8016dc6:	005b      	lsls	r3, r3, #1
 8016dc8:	4413      	add	r3, r2
 8016dca:	00db      	lsls	r3, r3, #3
 8016dcc:	440b      	add	r3, r1
 8016dce:	3308      	adds	r3, #8
 8016dd0:	6818      	ldr	r0, [r3, #0]
 8016dd2:	687a      	ldr	r2, [r7, #4]
 8016dd4:	4613      	mov	r3, r2
 8016dd6:	005b      	lsls	r3, r3, #1
 8016dd8:	4413      	add	r3, r2
 8016dda:	00db      	lsls	r3, r3, #3
 8016ddc:	4a08      	ldr	r2, [pc, #32]	; (8016e00 <etharp_tmr+0x14c>)
 8016dde:	4413      	add	r3, r2
 8016de0:	3304      	adds	r3, #4
 8016de2:	4619      	mov	r1, r3
 8016de4:	f000 fe6e 	bl	8017ac4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	3301      	adds	r3, #1
 8016dec:	607b      	str	r3, [r7, #4]
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	2b09      	cmp	r3, #9
 8016df2:	f77f af65 	ble.w	8016cc0 <etharp_tmr+0xc>
      }
    }
  }
}
 8016df6:	bf00      	nop
 8016df8:	bf00      	nop
 8016dfa:	3708      	adds	r7, #8
 8016dfc:	46bd      	mov	sp, r7
 8016dfe:	bd80      	pop	{r7, pc}
 8016e00:	20007138 	.word	0x20007138

08016e04 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016e04:	b580      	push	{r7, lr}
 8016e06:	b08a      	sub	sp, #40	; 0x28
 8016e08:	af00      	add	r7, sp, #0
 8016e0a:	60f8      	str	r0, [r7, #12]
 8016e0c:	460b      	mov	r3, r1
 8016e0e:	607a      	str	r2, [r7, #4]
 8016e10:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016e12:	230a      	movs	r3, #10
 8016e14:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016e16:	230a      	movs	r3, #10
 8016e18:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8016e1a:	230a      	movs	r3, #10
 8016e1c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8016e1e:	2300      	movs	r3, #0
 8016e20:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8016e22:	230a      	movs	r3, #10
 8016e24:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016e26:	2300      	movs	r3, #0
 8016e28:	83bb      	strh	r3, [r7, #28]
 8016e2a:	2300      	movs	r3, #0
 8016e2c:	837b      	strh	r3, [r7, #26]
 8016e2e:	2300      	movs	r3, #0
 8016e30:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016e32:	2300      	movs	r3, #0
 8016e34:	843b      	strh	r3, [r7, #32]
 8016e36:	e0ae      	b.n	8016f96 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016e38:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016e3c:	49a6      	ldr	r1, [pc, #664]	; (80170d8 <etharp_find_entry+0x2d4>)
 8016e3e:	4613      	mov	r3, r2
 8016e40:	005b      	lsls	r3, r3, #1
 8016e42:	4413      	add	r3, r2
 8016e44:	00db      	lsls	r3, r3, #3
 8016e46:	440b      	add	r3, r1
 8016e48:	3314      	adds	r3, #20
 8016e4a:	781b      	ldrb	r3, [r3, #0]
 8016e4c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016e4e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016e52:	2b0a      	cmp	r3, #10
 8016e54:	d105      	bne.n	8016e62 <etharp_find_entry+0x5e>
 8016e56:	7dfb      	ldrb	r3, [r7, #23]
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	d102      	bne.n	8016e62 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016e5c:	8c3b      	ldrh	r3, [r7, #32]
 8016e5e:	847b      	strh	r3, [r7, #34]	; 0x22
 8016e60:	e095      	b.n	8016f8e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016e62:	7dfb      	ldrb	r3, [r7, #23]
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	f000 8092 	beq.w	8016f8e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016e6a:	7dfb      	ldrb	r3, [r7, #23]
 8016e6c:	2b01      	cmp	r3, #1
 8016e6e:	d009      	beq.n	8016e84 <etharp_find_entry+0x80>
 8016e70:	7dfb      	ldrb	r3, [r7, #23]
 8016e72:	2b01      	cmp	r3, #1
 8016e74:	d806      	bhi.n	8016e84 <etharp_find_entry+0x80>
 8016e76:	4b99      	ldr	r3, [pc, #612]	; (80170dc <etharp_find_entry+0x2d8>)
 8016e78:	f240 1223 	movw	r2, #291	; 0x123
 8016e7c:	4998      	ldr	r1, [pc, #608]	; (80170e0 <etharp_find_entry+0x2dc>)
 8016e7e:	4899      	ldr	r0, [pc, #612]	; (80170e4 <etharp_find_entry+0x2e0>)
 8016e80:	f002 ff0e 	bl	8019ca0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016e84:	68fb      	ldr	r3, [r7, #12]
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	d020      	beq.n	8016ecc <etharp_find_entry+0xc8>
 8016e8a:	68fb      	ldr	r3, [r7, #12]
 8016e8c:	6819      	ldr	r1, [r3, #0]
 8016e8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016e92:	4891      	ldr	r0, [pc, #580]	; (80170d8 <etharp_find_entry+0x2d4>)
 8016e94:	4613      	mov	r3, r2
 8016e96:	005b      	lsls	r3, r3, #1
 8016e98:	4413      	add	r3, r2
 8016e9a:	00db      	lsls	r3, r3, #3
 8016e9c:	4403      	add	r3, r0
 8016e9e:	3304      	adds	r3, #4
 8016ea0:	681b      	ldr	r3, [r3, #0]
 8016ea2:	4299      	cmp	r1, r3
 8016ea4:	d112      	bne.n	8016ecc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d00c      	beq.n	8016ec6 <etharp_find_entry+0xc2>
 8016eac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016eb0:	4989      	ldr	r1, [pc, #548]	; (80170d8 <etharp_find_entry+0x2d4>)
 8016eb2:	4613      	mov	r3, r2
 8016eb4:	005b      	lsls	r3, r3, #1
 8016eb6:	4413      	add	r3, r2
 8016eb8:	00db      	lsls	r3, r3, #3
 8016eba:	440b      	add	r3, r1
 8016ebc:	3308      	adds	r3, #8
 8016ebe:	681b      	ldr	r3, [r3, #0]
 8016ec0:	687a      	ldr	r2, [r7, #4]
 8016ec2:	429a      	cmp	r2, r3
 8016ec4:	d102      	bne.n	8016ecc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016ec6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016eca:	e100      	b.n	80170ce <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016ecc:	7dfb      	ldrb	r3, [r7, #23]
 8016ece:	2b01      	cmp	r3, #1
 8016ed0:	d140      	bne.n	8016f54 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016ed2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ed6:	4980      	ldr	r1, [pc, #512]	; (80170d8 <etharp_find_entry+0x2d4>)
 8016ed8:	4613      	mov	r3, r2
 8016eda:	005b      	lsls	r3, r3, #1
 8016edc:	4413      	add	r3, r2
 8016ede:	00db      	lsls	r3, r3, #3
 8016ee0:	440b      	add	r3, r1
 8016ee2:	681b      	ldr	r3, [r3, #0]
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	d01a      	beq.n	8016f1e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8016ee8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016eec:	497a      	ldr	r1, [pc, #488]	; (80170d8 <etharp_find_entry+0x2d4>)
 8016eee:	4613      	mov	r3, r2
 8016ef0:	005b      	lsls	r3, r3, #1
 8016ef2:	4413      	add	r3, r2
 8016ef4:	00db      	lsls	r3, r3, #3
 8016ef6:	440b      	add	r3, r1
 8016ef8:	3312      	adds	r3, #18
 8016efa:	881b      	ldrh	r3, [r3, #0]
 8016efc:	8bba      	ldrh	r2, [r7, #28]
 8016efe:	429a      	cmp	r2, r3
 8016f00:	d845      	bhi.n	8016f8e <etharp_find_entry+0x18a>
            old_queue = i;
 8016f02:	8c3b      	ldrh	r3, [r7, #32]
 8016f04:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8016f06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016f0a:	4973      	ldr	r1, [pc, #460]	; (80170d8 <etharp_find_entry+0x2d4>)
 8016f0c:	4613      	mov	r3, r2
 8016f0e:	005b      	lsls	r3, r3, #1
 8016f10:	4413      	add	r3, r2
 8016f12:	00db      	lsls	r3, r3, #3
 8016f14:	440b      	add	r3, r1
 8016f16:	3312      	adds	r3, #18
 8016f18:	881b      	ldrh	r3, [r3, #0]
 8016f1a:	83bb      	strh	r3, [r7, #28]
 8016f1c:	e037      	b.n	8016f8e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8016f1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016f22:	496d      	ldr	r1, [pc, #436]	; (80170d8 <etharp_find_entry+0x2d4>)
 8016f24:	4613      	mov	r3, r2
 8016f26:	005b      	lsls	r3, r3, #1
 8016f28:	4413      	add	r3, r2
 8016f2a:	00db      	lsls	r3, r3, #3
 8016f2c:	440b      	add	r3, r1
 8016f2e:	3312      	adds	r3, #18
 8016f30:	881b      	ldrh	r3, [r3, #0]
 8016f32:	8b7a      	ldrh	r2, [r7, #26]
 8016f34:	429a      	cmp	r2, r3
 8016f36:	d82a      	bhi.n	8016f8e <etharp_find_entry+0x18a>
            old_pending = i;
 8016f38:	8c3b      	ldrh	r3, [r7, #32]
 8016f3a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8016f3c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016f40:	4965      	ldr	r1, [pc, #404]	; (80170d8 <etharp_find_entry+0x2d4>)
 8016f42:	4613      	mov	r3, r2
 8016f44:	005b      	lsls	r3, r3, #1
 8016f46:	4413      	add	r3, r2
 8016f48:	00db      	lsls	r3, r3, #3
 8016f4a:	440b      	add	r3, r1
 8016f4c:	3312      	adds	r3, #18
 8016f4e:	881b      	ldrh	r3, [r3, #0]
 8016f50:	837b      	strh	r3, [r7, #26]
 8016f52:	e01c      	b.n	8016f8e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016f54:	7dfb      	ldrb	r3, [r7, #23]
 8016f56:	2b01      	cmp	r3, #1
 8016f58:	d919      	bls.n	8016f8e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016f5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016f5e:	495e      	ldr	r1, [pc, #376]	; (80170d8 <etharp_find_entry+0x2d4>)
 8016f60:	4613      	mov	r3, r2
 8016f62:	005b      	lsls	r3, r3, #1
 8016f64:	4413      	add	r3, r2
 8016f66:	00db      	lsls	r3, r3, #3
 8016f68:	440b      	add	r3, r1
 8016f6a:	3312      	adds	r3, #18
 8016f6c:	881b      	ldrh	r3, [r3, #0]
 8016f6e:	8b3a      	ldrh	r2, [r7, #24]
 8016f70:	429a      	cmp	r2, r3
 8016f72:	d80c      	bhi.n	8016f8e <etharp_find_entry+0x18a>
            old_stable = i;
 8016f74:	8c3b      	ldrh	r3, [r7, #32]
 8016f76:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8016f78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016f7c:	4956      	ldr	r1, [pc, #344]	; (80170d8 <etharp_find_entry+0x2d4>)
 8016f7e:	4613      	mov	r3, r2
 8016f80:	005b      	lsls	r3, r3, #1
 8016f82:	4413      	add	r3, r2
 8016f84:	00db      	lsls	r3, r3, #3
 8016f86:	440b      	add	r3, r1
 8016f88:	3312      	adds	r3, #18
 8016f8a:	881b      	ldrh	r3, [r3, #0]
 8016f8c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016f8e:	8c3b      	ldrh	r3, [r7, #32]
 8016f90:	3301      	adds	r3, #1
 8016f92:	b29b      	uxth	r3, r3
 8016f94:	843b      	strh	r3, [r7, #32]
 8016f96:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016f9a:	2b09      	cmp	r3, #9
 8016f9c:	f77f af4c 	ble.w	8016e38 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016fa0:	7afb      	ldrb	r3, [r7, #11]
 8016fa2:	f003 0302 	and.w	r3, r3, #2
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d108      	bne.n	8016fbc <etharp_find_entry+0x1b8>
 8016faa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016fae:	2b0a      	cmp	r3, #10
 8016fb0:	d107      	bne.n	8016fc2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016fb2:	7afb      	ldrb	r3, [r7, #11]
 8016fb4:	f003 0301 	and.w	r3, r3, #1
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d102      	bne.n	8016fc2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8016fc0:	e085      	b.n	80170ce <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016fc2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016fc6:	2b09      	cmp	r3, #9
 8016fc8:	dc02      	bgt.n	8016fd0 <etharp_find_entry+0x1cc>
    i = empty;
 8016fca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016fcc:	843b      	strh	r3, [r7, #32]
 8016fce:	e039      	b.n	8017044 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016fd0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016fd4:	2b09      	cmp	r3, #9
 8016fd6:	dc14      	bgt.n	8017002 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016fd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016fda:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016fdc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016fe0:	493d      	ldr	r1, [pc, #244]	; (80170d8 <etharp_find_entry+0x2d4>)
 8016fe2:	4613      	mov	r3, r2
 8016fe4:	005b      	lsls	r3, r3, #1
 8016fe6:	4413      	add	r3, r2
 8016fe8:	00db      	lsls	r3, r3, #3
 8016fea:	440b      	add	r3, r1
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	d018      	beq.n	8017024 <etharp_find_entry+0x220>
 8016ff2:	4b3a      	ldr	r3, [pc, #232]	; (80170dc <etharp_find_entry+0x2d8>)
 8016ff4:	f240 126d 	movw	r2, #365	; 0x16d
 8016ff8:	493b      	ldr	r1, [pc, #236]	; (80170e8 <etharp_find_entry+0x2e4>)
 8016ffa:	483a      	ldr	r0, [pc, #232]	; (80170e4 <etharp_find_entry+0x2e0>)
 8016ffc:	f002 fe50 	bl	8019ca0 <iprintf>
 8017000:	e010      	b.n	8017024 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8017002:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8017006:	2b09      	cmp	r3, #9
 8017008:	dc02      	bgt.n	8017010 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801700a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801700c:	843b      	strh	r3, [r7, #32]
 801700e:	e009      	b.n	8017024 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8017010:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8017014:	2b09      	cmp	r3, #9
 8017016:	dc02      	bgt.n	801701e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8017018:	8bfb      	ldrh	r3, [r7, #30]
 801701a:	843b      	strh	r3, [r7, #32]
 801701c:	e002      	b.n	8017024 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801701e:	f04f 33ff 	mov.w	r3, #4294967295
 8017022:	e054      	b.n	80170ce <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017024:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017028:	2b09      	cmp	r3, #9
 801702a:	dd06      	ble.n	801703a <etharp_find_entry+0x236>
 801702c:	4b2b      	ldr	r3, [pc, #172]	; (80170dc <etharp_find_entry+0x2d8>)
 801702e:	f240 127f 	movw	r2, #383	; 0x17f
 8017032:	492e      	ldr	r1, [pc, #184]	; (80170ec <etharp_find_entry+0x2e8>)
 8017034:	482b      	ldr	r0, [pc, #172]	; (80170e4 <etharp_find_entry+0x2e0>)
 8017036:	f002 fe33 	bl	8019ca0 <iprintf>
    etharp_free_entry(i);
 801703a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801703e:	4618      	mov	r0, r3
 8017040:	f7ff fe06 	bl	8016c50 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017044:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017048:	2b09      	cmp	r3, #9
 801704a:	dd06      	ble.n	801705a <etharp_find_entry+0x256>
 801704c:	4b23      	ldr	r3, [pc, #140]	; (80170dc <etharp_find_entry+0x2d8>)
 801704e:	f240 1283 	movw	r2, #387	; 0x183
 8017052:	4926      	ldr	r1, [pc, #152]	; (80170ec <etharp_find_entry+0x2e8>)
 8017054:	4823      	ldr	r0, [pc, #140]	; (80170e4 <etharp_find_entry+0x2e0>)
 8017056:	f002 fe23 	bl	8019ca0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801705a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801705e:	491e      	ldr	r1, [pc, #120]	; (80170d8 <etharp_find_entry+0x2d4>)
 8017060:	4613      	mov	r3, r2
 8017062:	005b      	lsls	r3, r3, #1
 8017064:	4413      	add	r3, r2
 8017066:	00db      	lsls	r3, r3, #3
 8017068:	440b      	add	r3, r1
 801706a:	3314      	adds	r3, #20
 801706c:	781b      	ldrb	r3, [r3, #0]
 801706e:	2b00      	cmp	r3, #0
 8017070:	d006      	beq.n	8017080 <etharp_find_entry+0x27c>
 8017072:	4b1a      	ldr	r3, [pc, #104]	; (80170dc <etharp_find_entry+0x2d8>)
 8017074:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8017078:	491d      	ldr	r1, [pc, #116]	; (80170f0 <etharp_find_entry+0x2ec>)
 801707a:	481a      	ldr	r0, [pc, #104]	; (80170e4 <etharp_find_entry+0x2e0>)
 801707c:	f002 fe10 	bl	8019ca0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8017080:	68fb      	ldr	r3, [r7, #12]
 8017082:	2b00      	cmp	r3, #0
 8017084:	d00b      	beq.n	801709e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8017086:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801708a:	68fb      	ldr	r3, [r7, #12]
 801708c:	6819      	ldr	r1, [r3, #0]
 801708e:	4812      	ldr	r0, [pc, #72]	; (80170d8 <etharp_find_entry+0x2d4>)
 8017090:	4613      	mov	r3, r2
 8017092:	005b      	lsls	r3, r3, #1
 8017094:	4413      	add	r3, r2
 8017096:	00db      	lsls	r3, r3, #3
 8017098:	4403      	add	r3, r0
 801709a:	3304      	adds	r3, #4
 801709c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801709e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80170a2:	490d      	ldr	r1, [pc, #52]	; (80170d8 <etharp_find_entry+0x2d4>)
 80170a4:	4613      	mov	r3, r2
 80170a6:	005b      	lsls	r3, r3, #1
 80170a8:	4413      	add	r3, r2
 80170aa:	00db      	lsls	r3, r3, #3
 80170ac:	440b      	add	r3, r1
 80170ae:	3312      	adds	r3, #18
 80170b0:	2200      	movs	r2, #0
 80170b2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80170b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80170b8:	4907      	ldr	r1, [pc, #28]	; (80170d8 <etharp_find_entry+0x2d4>)
 80170ba:	4613      	mov	r3, r2
 80170bc:	005b      	lsls	r3, r3, #1
 80170be:	4413      	add	r3, r2
 80170c0:	00db      	lsls	r3, r3, #3
 80170c2:	440b      	add	r3, r1
 80170c4:	3308      	adds	r3, #8
 80170c6:	687a      	ldr	r2, [r7, #4]
 80170c8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80170ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80170ce:	4618      	mov	r0, r3
 80170d0:	3728      	adds	r7, #40	; 0x28
 80170d2:	46bd      	mov	sp, r7
 80170d4:	bd80      	pop	{r7, pc}
 80170d6:	bf00      	nop
 80170d8:	20007138 	.word	0x20007138
 80170dc:	0801e8f0 	.word	0x0801e8f0
 80170e0:	0801e928 	.word	0x0801e928
 80170e4:	0801e968 	.word	0x0801e968
 80170e8:	0801e990 	.word	0x0801e990
 80170ec:	0801e9a8 	.word	0x0801e9a8
 80170f0:	0801e9bc 	.word	0x0801e9bc

080170f4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80170f4:	b580      	push	{r7, lr}
 80170f6:	b088      	sub	sp, #32
 80170f8:	af02      	add	r7, sp, #8
 80170fa:	60f8      	str	r0, [r7, #12]
 80170fc:	60b9      	str	r1, [r7, #8]
 80170fe:	607a      	str	r2, [r7, #4]
 8017100:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8017102:	68fb      	ldr	r3, [r7, #12]
 8017104:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017108:	2b06      	cmp	r3, #6
 801710a:	d006      	beq.n	801711a <etharp_update_arp_entry+0x26>
 801710c:	4b48      	ldr	r3, [pc, #288]	; (8017230 <etharp_update_arp_entry+0x13c>)
 801710e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8017112:	4948      	ldr	r1, [pc, #288]	; (8017234 <etharp_update_arp_entry+0x140>)
 8017114:	4848      	ldr	r0, [pc, #288]	; (8017238 <etharp_update_arp_entry+0x144>)
 8017116:	f002 fdc3 	bl	8019ca0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801711a:	68bb      	ldr	r3, [r7, #8]
 801711c:	2b00      	cmp	r3, #0
 801711e:	d012      	beq.n	8017146 <etharp_update_arp_entry+0x52>
 8017120:	68bb      	ldr	r3, [r7, #8]
 8017122:	681b      	ldr	r3, [r3, #0]
 8017124:	2b00      	cmp	r3, #0
 8017126:	d00e      	beq.n	8017146 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017128:	68bb      	ldr	r3, [r7, #8]
 801712a:	681b      	ldr	r3, [r3, #0]
 801712c:	68f9      	ldr	r1, [r7, #12]
 801712e:	4618      	mov	r0, r3
 8017130:	f001 f924 	bl	801837c <ip4_addr_isbroadcast_u32>
 8017134:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8017136:	2b00      	cmp	r3, #0
 8017138:	d105      	bne.n	8017146 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801713a:	68bb      	ldr	r3, [r7, #8]
 801713c:	681b      	ldr	r3, [r3, #0]
 801713e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017142:	2be0      	cmp	r3, #224	; 0xe0
 8017144:	d102      	bne.n	801714c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017146:	f06f 030f 	mvn.w	r3, #15
 801714a:	e06c      	b.n	8017226 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801714c:	78fb      	ldrb	r3, [r7, #3]
 801714e:	68fa      	ldr	r2, [r7, #12]
 8017150:	4619      	mov	r1, r3
 8017152:	68b8      	ldr	r0, [r7, #8]
 8017154:	f7ff fe56 	bl	8016e04 <etharp_find_entry>
 8017158:	4603      	mov	r3, r0
 801715a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801715c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017160:	2b00      	cmp	r3, #0
 8017162:	da02      	bge.n	801716a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8017164:	8afb      	ldrh	r3, [r7, #22]
 8017166:	b25b      	sxtb	r3, r3
 8017168:	e05d      	b.n	8017226 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801716a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801716e:	4933      	ldr	r1, [pc, #204]	; (801723c <etharp_update_arp_entry+0x148>)
 8017170:	4613      	mov	r3, r2
 8017172:	005b      	lsls	r3, r3, #1
 8017174:	4413      	add	r3, r2
 8017176:	00db      	lsls	r3, r3, #3
 8017178:	440b      	add	r3, r1
 801717a:	3314      	adds	r3, #20
 801717c:	2202      	movs	r2, #2
 801717e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8017180:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017184:	492d      	ldr	r1, [pc, #180]	; (801723c <etharp_update_arp_entry+0x148>)
 8017186:	4613      	mov	r3, r2
 8017188:	005b      	lsls	r3, r3, #1
 801718a:	4413      	add	r3, r2
 801718c:	00db      	lsls	r3, r3, #3
 801718e:	440b      	add	r3, r1
 8017190:	3308      	adds	r3, #8
 8017192:	68fa      	ldr	r2, [r7, #12]
 8017194:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8017196:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801719a:	4613      	mov	r3, r2
 801719c:	005b      	lsls	r3, r3, #1
 801719e:	4413      	add	r3, r2
 80171a0:	00db      	lsls	r3, r3, #3
 80171a2:	3308      	adds	r3, #8
 80171a4:	4a25      	ldr	r2, [pc, #148]	; (801723c <etharp_update_arp_entry+0x148>)
 80171a6:	4413      	add	r3, r2
 80171a8:	3304      	adds	r3, #4
 80171aa:	2206      	movs	r2, #6
 80171ac:	6879      	ldr	r1, [r7, #4]
 80171ae:	4618      	mov	r0, r3
 80171b0:	f002 ff45 	bl	801a03e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80171b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80171b8:	4920      	ldr	r1, [pc, #128]	; (801723c <etharp_update_arp_entry+0x148>)
 80171ba:	4613      	mov	r3, r2
 80171bc:	005b      	lsls	r3, r3, #1
 80171be:	4413      	add	r3, r2
 80171c0:	00db      	lsls	r3, r3, #3
 80171c2:	440b      	add	r3, r1
 80171c4:	3312      	adds	r3, #18
 80171c6:	2200      	movs	r2, #0
 80171c8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80171ca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80171ce:	491b      	ldr	r1, [pc, #108]	; (801723c <etharp_update_arp_entry+0x148>)
 80171d0:	4613      	mov	r3, r2
 80171d2:	005b      	lsls	r3, r3, #1
 80171d4:	4413      	add	r3, r2
 80171d6:	00db      	lsls	r3, r3, #3
 80171d8:	440b      	add	r3, r1
 80171da:	681b      	ldr	r3, [r3, #0]
 80171dc:	2b00      	cmp	r3, #0
 80171de:	d021      	beq.n	8017224 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80171e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80171e4:	4915      	ldr	r1, [pc, #84]	; (801723c <etharp_update_arp_entry+0x148>)
 80171e6:	4613      	mov	r3, r2
 80171e8:	005b      	lsls	r3, r3, #1
 80171ea:	4413      	add	r3, r2
 80171ec:	00db      	lsls	r3, r3, #3
 80171ee:	440b      	add	r3, r1
 80171f0:	681b      	ldr	r3, [r3, #0]
 80171f2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80171f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80171f8:	4910      	ldr	r1, [pc, #64]	; (801723c <etharp_update_arp_entry+0x148>)
 80171fa:	4613      	mov	r3, r2
 80171fc:	005b      	lsls	r3, r3, #1
 80171fe:	4413      	add	r3, r2
 8017200:	00db      	lsls	r3, r3, #3
 8017202:	440b      	add	r3, r1
 8017204:	2200      	movs	r2, #0
 8017206:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8017208:	68fb      	ldr	r3, [r7, #12]
 801720a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801720e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017212:	9300      	str	r3, [sp, #0]
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	6939      	ldr	r1, [r7, #16]
 8017218:	68f8      	ldr	r0, [r7, #12]
 801721a:	f001 ffbd 	bl	8019198 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801721e:	6938      	ldr	r0, [r7, #16]
 8017220:	f7f9 fe66 	bl	8010ef0 <pbuf_free>
  }
  return ERR_OK;
 8017224:	2300      	movs	r3, #0
}
 8017226:	4618      	mov	r0, r3
 8017228:	3718      	adds	r7, #24
 801722a:	46bd      	mov	sp, r7
 801722c:	bd80      	pop	{r7, pc}
 801722e:	bf00      	nop
 8017230:	0801e8f0 	.word	0x0801e8f0
 8017234:	0801e9e8 	.word	0x0801e9e8
 8017238:	0801e968 	.word	0x0801e968
 801723c:	20007138 	.word	0x20007138

08017240 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8017240:	b580      	push	{r7, lr}
 8017242:	b084      	sub	sp, #16
 8017244:	af00      	add	r7, sp, #0
 8017246:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017248:	2300      	movs	r3, #0
 801724a:	60fb      	str	r3, [r7, #12]
 801724c:	e01e      	b.n	801728c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801724e:	4913      	ldr	r1, [pc, #76]	; (801729c <etharp_cleanup_netif+0x5c>)
 8017250:	68fa      	ldr	r2, [r7, #12]
 8017252:	4613      	mov	r3, r2
 8017254:	005b      	lsls	r3, r3, #1
 8017256:	4413      	add	r3, r2
 8017258:	00db      	lsls	r3, r3, #3
 801725a:	440b      	add	r3, r1
 801725c:	3314      	adds	r3, #20
 801725e:	781b      	ldrb	r3, [r3, #0]
 8017260:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8017262:	7afb      	ldrb	r3, [r7, #11]
 8017264:	2b00      	cmp	r3, #0
 8017266:	d00e      	beq.n	8017286 <etharp_cleanup_netif+0x46>
 8017268:	490c      	ldr	r1, [pc, #48]	; (801729c <etharp_cleanup_netif+0x5c>)
 801726a:	68fa      	ldr	r2, [r7, #12]
 801726c:	4613      	mov	r3, r2
 801726e:	005b      	lsls	r3, r3, #1
 8017270:	4413      	add	r3, r2
 8017272:	00db      	lsls	r3, r3, #3
 8017274:	440b      	add	r3, r1
 8017276:	3308      	adds	r3, #8
 8017278:	681b      	ldr	r3, [r3, #0]
 801727a:	687a      	ldr	r2, [r7, #4]
 801727c:	429a      	cmp	r2, r3
 801727e:	d102      	bne.n	8017286 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8017280:	68f8      	ldr	r0, [r7, #12]
 8017282:	f7ff fce5 	bl	8016c50 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017286:	68fb      	ldr	r3, [r7, #12]
 8017288:	3301      	adds	r3, #1
 801728a:	60fb      	str	r3, [r7, #12]
 801728c:	68fb      	ldr	r3, [r7, #12]
 801728e:	2b09      	cmp	r3, #9
 8017290:	dddd      	ble.n	801724e <etharp_cleanup_netif+0xe>
    }
  }
}
 8017292:	bf00      	nop
 8017294:	bf00      	nop
 8017296:	3710      	adds	r7, #16
 8017298:	46bd      	mov	sp, r7
 801729a:	bd80      	pop	{r7, pc}
 801729c:	20007138 	.word	0x20007138

080172a0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80172a0:	b5b0      	push	{r4, r5, r7, lr}
 80172a2:	b08a      	sub	sp, #40	; 0x28
 80172a4:	af04      	add	r7, sp, #16
 80172a6:	6078      	str	r0, [r7, #4]
 80172a8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80172aa:	683b      	ldr	r3, [r7, #0]
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d107      	bne.n	80172c0 <etharp_input+0x20>
 80172b0:	4b3d      	ldr	r3, [pc, #244]	; (80173a8 <etharp_input+0x108>)
 80172b2:	f240 228a 	movw	r2, #650	; 0x28a
 80172b6:	493d      	ldr	r1, [pc, #244]	; (80173ac <etharp_input+0x10c>)
 80172b8:	483d      	ldr	r0, [pc, #244]	; (80173b0 <etharp_input+0x110>)
 80172ba:	f002 fcf1 	bl	8019ca0 <iprintf>
 80172be:	e06f      	b.n	80173a0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	685b      	ldr	r3, [r3, #4]
 80172c4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80172c6:	693b      	ldr	r3, [r7, #16]
 80172c8:	881b      	ldrh	r3, [r3, #0]
 80172ca:	b29b      	uxth	r3, r3
 80172cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80172d0:	d10c      	bne.n	80172ec <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80172d2:	693b      	ldr	r3, [r7, #16]
 80172d4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80172d6:	2b06      	cmp	r3, #6
 80172d8:	d108      	bne.n	80172ec <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80172da:	693b      	ldr	r3, [r7, #16]
 80172dc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80172de:	2b04      	cmp	r3, #4
 80172e0:	d104      	bne.n	80172ec <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80172e2:	693b      	ldr	r3, [r7, #16]
 80172e4:	885b      	ldrh	r3, [r3, #2]
 80172e6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80172e8:	2b08      	cmp	r3, #8
 80172ea:	d003      	beq.n	80172f4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80172ec:	6878      	ldr	r0, [r7, #4]
 80172ee:	f7f9 fdff 	bl	8010ef0 <pbuf_free>
    return;
 80172f2:	e055      	b.n	80173a0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80172f4:	693b      	ldr	r3, [r7, #16]
 80172f6:	330e      	adds	r3, #14
 80172f8:	681b      	ldr	r3, [r3, #0]
 80172fa:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80172fc:	693b      	ldr	r3, [r7, #16]
 80172fe:	3318      	adds	r3, #24
 8017300:	681b      	ldr	r3, [r3, #0]
 8017302:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017304:	683b      	ldr	r3, [r7, #0]
 8017306:	3304      	adds	r3, #4
 8017308:	681b      	ldr	r3, [r3, #0]
 801730a:	2b00      	cmp	r3, #0
 801730c:	d102      	bne.n	8017314 <etharp_input+0x74>
    for_us = 0;
 801730e:	2300      	movs	r3, #0
 8017310:	75fb      	strb	r3, [r7, #23]
 8017312:	e009      	b.n	8017328 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8017314:	68ba      	ldr	r2, [r7, #8]
 8017316:	683b      	ldr	r3, [r7, #0]
 8017318:	3304      	adds	r3, #4
 801731a:	681b      	ldr	r3, [r3, #0]
 801731c:	429a      	cmp	r2, r3
 801731e:	bf0c      	ite	eq
 8017320:	2301      	moveq	r3, #1
 8017322:	2300      	movne	r3, #0
 8017324:	b2db      	uxtb	r3, r3
 8017326:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8017328:	693b      	ldr	r3, [r7, #16]
 801732a:	f103 0208 	add.w	r2, r3, #8
 801732e:	7dfb      	ldrb	r3, [r7, #23]
 8017330:	2b00      	cmp	r3, #0
 8017332:	d001      	beq.n	8017338 <etharp_input+0x98>
 8017334:	2301      	movs	r3, #1
 8017336:	e000      	b.n	801733a <etharp_input+0x9a>
 8017338:	2302      	movs	r3, #2
 801733a:	f107 010c 	add.w	r1, r7, #12
 801733e:	6838      	ldr	r0, [r7, #0]
 8017340:	f7ff fed8 	bl	80170f4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8017344:	693b      	ldr	r3, [r7, #16]
 8017346:	88db      	ldrh	r3, [r3, #6]
 8017348:	b29b      	uxth	r3, r3
 801734a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801734e:	d003      	beq.n	8017358 <etharp_input+0xb8>
 8017350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017354:	d01e      	beq.n	8017394 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8017356:	e020      	b.n	801739a <etharp_input+0xfa>
      if (for_us) {
 8017358:	7dfb      	ldrb	r3, [r7, #23]
 801735a:	2b00      	cmp	r3, #0
 801735c:	d01c      	beq.n	8017398 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801735e:	683b      	ldr	r3, [r7, #0]
 8017360:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8017364:	693b      	ldr	r3, [r7, #16]
 8017366:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801736a:	683b      	ldr	r3, [r7, #0]
 801736c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8017370:	683b      	ldr	r3, [r7, #0]
 8017372:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8017374:	693a      	ldr	r2, [r7, #16]
 8017376:	3208      	adds	r2, #8
        etharp_raw(netif,
 8017378:	2102      	movs	r1, #2
 801737a:	9103      	str	r1, [sp, #12]
 801737c:	f107 010c 	add.w	r1, r7, #12
 8017380:	9102      	str	r1, [sp, #8]
 8017382:	9201      	str	r2, [sp, #4]
 8017384:	9300      	str	r3, [sp, #0]
 8017386:	462b      	mov	r3, r5
 8017388:	4622      	mov	r2, r4
 801738a:	4601      	mov	r1, r0
 801738c:	6838      	ldr	r0, [r7, #0]
 801738e:	f000 faeb 	bl	8017968 <etharp_raw>
      break;
 8017392:	e001      	b.n	8017398 <etharp_input+0xf8>
      break;
 8017394:	bf00      	nop
 8017396:	e000      	b.n	801739a <etharp_input+0xfa>
      break;
 8017398:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801739a:	6878      	ldr	r0, [r7, #4]
 801739c:	f7f9 fda8 	bl	8010ef0 <pbuf_free>
}
 80173a0:	3718      	adds	r7, #24
 80173a2:	46bd      	mov	sp, r7
 80173a4:	bdb0      	pop	{r4, r5, r7, pc}
 80173a6:	bf00      	nop
 80173a8:	0801e8f0 	.word	0x0801e8f0
 80173ac:	0801ea40 	.word	0x0801ea40
 80173b0:	0801e968 	.word	0x0801e968

080173b4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80173b4:	b580      	push	{r7, lr}
 80173b6:	b086      	sub	sp, #24
 80173b8:	af02      	add	r7, sp, #8
 80173ba:	60f8      	str	r0, [r7, #12]
 80173bc:	60b9      	str	r1, [r7, #8]
 80173be:	4613      	mov	r3, r2
 80173c0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80173c2:	79fa      	ldrb	r2, [r7, #7]
 80173c4:	4944      	ldr	r1, [pc, #272]	; (80174d8 <etharp_output_to_arp_index+0x124>)
 80173c6:	4613      	mov	r3, r2
 80173c8:	005b      	lsls	r3, r3, #1
 80173ca:	4413      	add	r3, r2
 80173cc:	00db      	lsls	r3, r3, #3
 80173ce:	440b      	add	r3, r1
 80173d0:	3314      	adds	r3, #20
 80173d2:	781b      	ldrb	r3, [r3, #0]
 80173d4:	2b01      	cmp	r3, #1
 80173d6:	d806      	bhi.n	80173e6 <etharp_output_to_arp_index+0x32>
 80173d8:	4b40      	ldr	r3, [pc, #256]	; (80174dc <etharp_output_to_arp_index+0x128>)
 80173da:	f240 22ee 	movw	r2, #750	; 0x2ee
 80173de:	4940      	ldr	r1, [pc, #256]	; (80174e0 <etharp_output_to_arp_index+0x12c>)
 80173e0:	4840      	ldr	r0, [pc, #256]	; (80174e4 <etharp_output_to_arp_index+0x130>)
 80173e2:	f002 fc5d 	bl	8019ca0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80173e6:	79fa      	ldrb	r2, [r7, #7]
 80173e8:	493b      	ldr	r1, [pc, #236]	; (80174d8 <etharp_output_to_arp_index+0x124>)
 80173ea:	4613      	mov	r3, r2
 80173ec:	005b      	lsls	r3, r3, #1
 80173ee:	4413      	add	r3, r2
 80173f0:	00db      	lsls	r3, r3, #3
 80173f2:	440b      	add	r3, r1
 80173f4:	3314      	adds	r3, #20
 80173f6:	781b      	ldrb	r3, [r3, #0]
 80173f8:	2b02      	cmp	r3, #2
 80173fa:	d153      	bne.n	80174a4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80173fc:	79fa      	ldrb	r2, [r7, #7]
 80173fe:	4936      	ldr	r1, [pc, #216]	; (80174d8 <etharp_output_to_arp_index+0x124>)
 8017400:	4613      	mov	r3, r2
 8017402:	005b      	lsls	r3, r3, #1
 8017404:	4413      	add	r3, r2
 8017406:	00db      	lsls	r3, r3, #3
 8017408:	440b      	add	r3, r1
 801740a:	3312      	adds	r3, #18
 801740c:	881b      	ldrh	r3, [r3, #0]
 801740e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8017412:	d919      	bls.n	8017448 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8017414:	79fa      	ldrb	r2, [r7, #7]
 8017416:	4613      	mov	r3, r2
 8017418:	005b      	lsls	r3, r3, #1
 801741a:	4413      	add	r3, r2
 801741c:	00db      	lsls	r3, r3, #3
 801741e:	4a2e      	ldr	r2, [pc, #184]	; (80174d8 <etharp_output_to_arp_index+0x124>)
 8017420:	4413      	add	r3, r2
 8017422:	3304      	adds	r3, #4
 8017424:	4619      	mov	r1, r3
 8017426:	68f8      	ldr	r0, [r7, #12]
 8017428:	f000 fb4c 	bl	8017ac4 <etharp_request>
 801742c:	4603      	mov	r3, r0
 801742e:	2b00      	cmp	r3, #0
 8017430:	d138      	bne.n	80174a4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017432:	79fa      	ldrb	r2, [r7, #7]
 8017434:	4928      	ldr	r1, [pc, #160]	; (80174d8 <etharp_output_to_arp_index+0x124>)
 8017436:	4613      	mov	r3, r2
 8017438:	005b      	lsls	r3, r3, #1
 801743a:	4413      	add	r3, r2
 801743c:	00db      	lsls	r3, r3, #3
 801743e:	440b      	add	r3, r1
 8017440:	3314      	adds	r3, #20
 8017442:	2203      	movs	r2, #3
 8017444:	701a      	strb	r2, [r3, #0]
 8017446:	e02d      	b.n	80174a4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8017448:	79fa      	ldrb	r2, [r7, #7]
 801744a:	4923      	ldr	r1, [pc, #140]	; (80174d8 <etharp_output_to_arp_index+0x124>)
 801744c:	4613      	mov	r3, r2
 801744e:	005b      	lsls	r3, r3, #1
 8017450:	4413      	add	r3, r2
 8017452:	00db      	lsls	r3, r3, #3
 8017454:	440b      	add	r3, r1
 8017456:	3312      	adds	r3, #18
 8017458:	881b      	ldrh	r3, [r3, #0]
 801745a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801745e:	d321      	bcc.n	80174a4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8017460:	79fa      	ldrb	r2, [r7, #7]
 8017462:	4613      	mov	r3, r2
 8017464:	005b      	lsls	r3, r3, #1
 8017466:	4413      	add	r3, r2
 8017468:	00db      	lsls	r3, r3, #3
 801746a:	4a1b      	ldr	r2, [pc, #108]	; (80174d8 <etharp_output_to_arp_index+0x124>)
 801746c:	4413      	add	r3, r2
 801746e:	1d19      	adds	r1, r3, #4
 8017470:	79fa      	ldrb	r2, [r7, #7]
 8017472:	4613      	mov	r3, r2
 8017474:	005b      	lsls	r3, r3, #1
 8017476:	4413      	add	r3, r2
 8017478:	00db      	lsls	r3, r3, #3
 801747a:	3308      	adds	r3, #8
 801747c:	4a16      	ldr	r2, [pc, #88]	; (80174d8 <etharp_output_to_arp_index+0x124>)
 801747e:	4413      	add	r3, r2
 8017480:	3304      	adds	r3, #4
 8017482:	461a      	mov	r2, r3
 8017484:	68f8      	ldr	r0, [r7, #12]
 8017486:	f000 fafb 	bl	8017a80 <etharp_request_dst>
 801748a:	4603      	mov	r3, r0
 801748c:	2b00      	cmp	r3, #0
 801748e:	d109      	bne.n	80174a4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017490:	79fa      	ldrb	r2, [r7, #7]
 8017492:	4911      	ldr	r1, [pc, #68]	; (80174d8 <etharp_output_to_arp_index+0x124>)
 8017494:	4613      	mov	r3, r2
 8017496:	005b      	lsls	r3, r3, #1
 8017498:	4413      	add	r3, r2
 801749a:	00db      	lsls	r3, r3, #3
 801749c:	440b      	add	r3, r1
 801749e:	3314      	adds	r3, #20
 80174a0:	2203      	movs	r2, #3
 80174a2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80174a4:	68fb      	ldr	r3, [r7, #12]
 80174a6:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80174aa:	79fa      	ldrb	r2, [r7, #7]
 80174ac:	4613      	mov	r3, r2
 80174ae:	005b      	lsls	r3, r3, #1
 80174b0:	4413      	add	r3, r2
 80174b2:	00db      	lsls	r3, r3, #3
 80174b4:	3308      	adds	r3, #8
 80174b6:	4a08      	ldr	r2, [pc, #32]	; (80174d8 <etharp_output_to_arp_index+0x124>)
 80174b8:	4413      	add	r3, r2
 80174ba:	3304      	adds	r3, #4
 80174bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80174c0:	9200      	str	r2, [sp, #0]
 80174c2:	460a      	mov	r2, r1
 80174c4:	68b9      	ldr	r1, [r7, #8]
 80174c6:	68f8      	ldr	r0, [r7, #12]
 80174c8:	f001 fe66 	bl	8019198 <ethernet_output>
 80174cc:	4603      	mov	r3, r0
}
 80174ce:	4618      	mov	r0, r3
 80174d0:	3710      	adds	r7, #16
 80174d2:	46bd      	mov	sp, r7
 80174d4:	bd80      	pop	{r7, pc}
 80174d6:	bf00      	nop
 80174d8:	20007138 	.word	0x20007138
 80174dc:	0801e8f0 	.word	0x0801e8f0
 80174e0:	0801ea60 	.word	0x0801ea60
 80174e4:	0801e968 	.word	0x0801e968

080174e8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80174e8:	b580      	push	{r7, lr}
 80174ea:	b08a      	sub	sp, #40	; 0x28
 80174ec:	af02      	add	r7, sp, #8
 80174ee:	60f8      	str	r0, [r7, #12]
 80174f0:	60b9      	str	r1, [r7, #8]
 80174f2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80174f8:	68fb      	ldr	r3, [r7, #12]
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	d106      	bne.n	801750c <etharp_output+0x24>
 80174fe:	4b73      	ldr	r3, [pc, #460]	; (80176cc <etharp_output+0x1e4>)
 8017500:	f240 321e 	movw	r2, #798	; 0x31e
 8017504:	4972      	ldr	r1, [pc, #456]	; (80176d0 <etharp_output+0x1e8>)
 8017506:	4873      	ldr	r0, [pc, #460]	; (80176d4 <etharp_output+0x1ec>)
 8017508:	f002 fbca 	bl	8019ca0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801750c:	68bb      	ldr	r3, [r7, #8]
 801750e:	2b00      	cmp	r3, #0
 8017510:	d106      	bne.n	8017520 <etharp_output+0x38>
 8017512:	4b6e      	ldr	r3, [pc, #440]	; (80176cc <etharp_output+0x1e4>)
 8017514:	f240 321f 	movw	r2, #799	; 0x31f
 8017518:	496f      	ldr	r1, [pc, #444]	; (80176d8 <etharp_output+0x1f0>)
 801751a:	486e      	ldr	r0, [pc, #440]	; (80176d4 <etharp_output+0x1ec>)
 801751c:	f002 fbc0 	bl	8019ca0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	2b00      	cmp	r3, #0
 8017524:	d106      	bne.n	8017534 <etharp_output+0x4c>
 8017526:	4b69      	ldr	r3, [pc, #420]	; (80176cc <etharp_output+0x1e4>)
 8017528:	f44f 7248 	mov.w	r2, #800	; 0x320
 801752c:	496b      	ldr	r1, [pc, #428]	; (80176dc <etharp_output+0x1f4>)
 801752e:	4869      	ldr	r0, [pc, #420]	; (80176d4 <etharp_output+0x1ec>)
 8017530:	f002 fbb6 	bl	8019ca0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	681b      	ldr	r3, [r3, #0]
 8017538:	68f9      	ldr	r1, [r7, #12]
 801753a:	4618      	mov	r0, r3
 801753c:	f000 ff1e 	bl	801837c <ip4_addr_isbroadcast_u32>
 8017540:	4603      	mov	r3, r0
 8017542:	2b00      	cmp	r3, #0
 8017544:	d002      	beq.n	801754c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8017546:	4b66      	ldr	r3, [pc, #408]	; (80176e0 <etharp_output+0x1f8>)
 8017548:	61fb      	str	r3, [r7, #28]
 801754a:	e0af      	b.n	80176ac <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	681b      	ldr	r3, [r3, #0]
 8017550:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017554:	2be0      	cmp	r3, #224	; 0xe0
 8017556:	d118      	bne.n	801758a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8017558:	2301      	movs	r3, #1
 801755a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801755c:	2300      	movs	r3, #0
 801755e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8017560:	235e      	movs	r3, #94	; 0x5e
 8017562:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	3301      	adds	r3, #1
 8017568:	781b      	ldrb	r3, [r3, #0]
 801756a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801756e:	b2db      	uxtb	r3, r3
 8017570:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	3302      	adds	r3, #2
 8017576:	781b      	ldrb	r3, [r3, #0]
 8017578:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	3303      	adds	r3, #3
 801757e:	781b      	ldrb	r3, [r3, #0]
 8017580:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8017582:	f107 0310 	add.w	r3, r7, #16
 8017586:	61fb      	str	r3, [r7, #28]
 8017588:	e090      	b.n	80176ac <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	681a      	ldr	r2, [r3, #0]
 801758e:	68fb      	ldr	r3, [r7, #12]
 8017590:	3304      	adds	r3, #4
 8017592:	681b      	ldr	r3, [r3, #0]
 8017594:	405a      	eors	r2, r3
 8017596:	68fb      	ldr	r3, [r7, #12]
 8017598:	3308      	adds	r3, #8
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	4013      	ands	r3, r2
 801759e:	2b00      	cmp	r3, #0
 80175a0:	d012      	beq.n	80175c8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	681b      	ldr	r3, [r3, #0]
 80175a6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80175a8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80175ac:	4293      	cmp	r3, r2
 80175ae:	d00b      	beq.n	80175c8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	330c      	adds	r3, #12
 80175b4:	681b      	ldr	r3, [r3, #0]
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d003      	beq.n	80175c2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80175ba:	68fb      	ldr	r3, [r7, #12]
 80175bc:	330c      	adds	r3, #12
 80175be:	61bb      	str	r3, [r7, #24]
 80175c0:	e002      	b.n	80175c8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80175c2:	f06f 0303 	mvn.w	r3, #3
 80175c6:	e07d      	b.n	80176c4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80175c8:	4b46      	ldr	r3, [pc, #280]	; (80176e4 <etharp_output+0x1fc>)
 80175ca:	781b      	ldrb	r3, [r3, #0]
 80175cc:	4619      	mov	r1, r3
 80175ce:	4a46      	ldr	r2, [pc, #280]	; (80176e8 <etharp_output+0x200>)
 80175d0:	460b      	mov	r3, r1
 80175d2:	005b      	lsls	r3, r3, #1
 80175d4:	440b      	add	r3, r1
 80175d6:	00db      	lsls	r3, r3, #3
 80175d8:	4413      	add	r3, r2
 80175da:	3314      	adds	r3, #20
 80175dc:	781b      	ldrb	r3, [r3, #0]
 80175de:	2b01      	cmp	r3, #1
 80175e0:	d925      	bls.n	801762e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80175e2:	4b40      	ldr	r3, [pc, #256]	; (80176e4 <etharp_output+0x1fc>)
 80175e4:	781b      	ldrb	r3, [r3, #0]
 80175e6:	4619      	mov	r1, r3
 80175e8:	4a3f      	ldr	r2, [pc, #252]	; (80176e8 <etharp_output+0x200>)
 80175ea:	460b      	mov	r3, r1
 80175ec:	005b      	lsls	r3, r3, #1
 80175ee:	440b      	add	r3, r1
 80175f0:	00db      	lsls	r3, r3, #3
 80175f2:	4413      	add	r3, r2
 80175f4:	3308      	adds	r3, #8
 80175f6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80175f8:	68fa      	ldr	r2, [r7, #12]
 80175fa:	429a      	cmp	r2, r3
 80175fc:	d117      	bne.n	801762e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80175fe:	69bb      	ldr	r3, [r7, #24]
 8017600:	681a      	ldr	r2, [r3, #0]
 8017602:	4b38      	ldr	r3, [pc, #224]	; (80176e4 <etharp_output+0x1fc>)
 8017604:	781b      	ldrb	r3, [r3, #0]
 8017606:	4618      	mov	r0, r3
 8017608:	4937      	ldr	r1, [pc, #220]	; (80176e8 <etharp_output+0x200>)
 801760a:	4603      	mov	r3, r0
 801760c:	005b      	lsls	r3, r3, #1
 801760e:	4403      	add	r3, r0
 8017610:	00db      	lsls	r3, r3, #3
 8017612:	440b      	add	r3, r1
 8017614:	3304      	adds	r3, #4
 8017616:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017618:	429a      	cmp	r2, r3
 801761a:	d108      	bne.n	801762e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801761c:	4b31      	ldr	r3, [pc, #196]	; (80176e4 <etharp_output+0x1fc>)
 801761e:	781b      	ldrb	r3, [r3, #0]
 8017620:	461a      	mov	r2, r3
 8017622:	68b9      	ldr	r1, [r7, #8]
 8017624:	68f8      	ldr	r0, [r7, #12]
 8017626:	f7ff fec5 	bl	80173b4 <etharp_output_to_arp_index>
 801762a:	4603      	mov	r3, r0
 801762c:	e04a      	b.n	80176c4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801762e:	2300      	movs	r3, #0
 8017630:	75fb      	strb	r3, [r7, #23]
 8017632:	e031      	b.n	8017698 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017634:	7dfa      	ldrb	r2, [r7, #23]
 8017636:	492c      	ldr	r1, [pc, #176]	; (80176e8 <etharp_output+0x200>)
 8017638:	4613      	mov	r3, r2
 801763a:	005b      	lsls	r3, r3, #1
 801763c:	4413      	add	r3, r2
 801763e:	00db      	lsls	r3, r3, #3
 8017640:	440b      	add	r3, r1
 8017642:	3314      	adds	r3, #20
 8017644:	781b      	ldrb	r3, [r3, #0]
 8017646:	2b01      	cmp	r3, #1
 8017648:	d923      	bls.n	8017692 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801764a:	7dfa      	ldrb	r2, [r7, #23]
 801764c:	4926      	ldr	r1, [pc, #152]	; (80176e8 <etharp_output+0x200>)
 801764e:	4613      	mov	r3, r2
 8017650:	005b      	lsls	r3, r3, #1
 8017652:	4413      	add	r3, r2
 8017654:	00db      	lsls	r3, r3, #3
 8017656:	440b      	add	r3, r1
 8017658:	3308      	adds	r3, #8
 801765a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801765c:	68fa      	ldr	r2, [r7, #12]
 801765e:	429a      	cmp	r2, r3
 8017660:	d117      	bne.n	8017692 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8017662:	69bb      	ldr	r3, [r7, #24]
 8017664:	6819      	ldr	r1, [r3, #0]
 8017666:	7dfa      	ldrb	r2, [r7, #23]
 8017668:	481f      	ldr	r0, [pc, #124]	; (80176e8 <etharp_output+0x200>)
 801766a:	4613      	mov	r3, r2
 801766c:	005b      	lsls	r3, r3, #1
 801766e:	4413      	add	r3, r2
 8017670:	00db      	lsls	r3, r3, #3
 8017672:	4403      	add	r3, r0
 8017674:	3304      	adds	r3, #4
 8017676:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8017678:	4299      	cmp	r1, r3
 801767a:	d10a      	bne.n	8017692 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801767c:	4a19      	ldr	r2, [pc, #100]	; (80176e4 <etharp_output+0x1fc>)
 801767e:	7dfb      	ldrb	r3, [r7, #23]
 8017680:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8017682:	7dfb      	ldrb	r3, [r7, #23]
 8017684:	461a      	mov	r2, r3
 8017686:	68b9      	ldr	r1, [r7, #8]
 8017688:	68f8      	ldr	r0, [r7, #12]
 801768a:	f7ff fe93 	bl	80173b4 <etharp_output_to_arp_index>
 801768e:	4603      	mov	r3, r0
 8017690:	e018      	b.n	80176c4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017692:	7dfb      	ldrb	r3, [r7, #23]
 8017694:	3301      	adds	r3, #1
 8017696:	75fb      	strb	r3, [r7, #23]
 8017698:	7dfb      	ldrb	r3, [r7, #23]
 801769a:	2b09      	cmp	r3, #9
 801769c:	d9ca      	bls.n	8017634 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801769e:	68ba      	ldr	r2, [r7, #8]
 80176a0:	69b9      	ldr	r1, [r7, #24]
 80176a2:	68f8      	ldr	r0, [r7, #12]
 80176a4:	f000 f822 	bl	80176ec <etharp_query>
 80176a8:	4603      	mov	r3, r0
 80176aa:	e00b      	b.n	80176c4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80176ac:	68fb      	ldr	r3, [r7, #12]
 80176ae:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80176b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80176b6:	9300      	str	r3, [sp, #0]
 80176b8:	69fb      	ldr	r3, [r7, #28]
 80176ba:	68b9      	ldr	r1, [r7, #8]
 80176bc:	68f8      	ldr	r0, [r7, #12]
 80176be:	f001 fd6b 	bl	8019198 <ethernet_output>
 80176c2:	4603      	mov	r3, r0
}
 80176c4:	4618      	mov	r0, r3
 80176c6:	3720      	adds	r7, #32
 80176c8:	46bd      	mov	sp, r7
 80176ca:	bd80      	pop	{r7, pc}
 80176cc:	0801e8f0 	.word	0x0801e8f0
 80176d0:	0801ea40 	.word	0x0801ea40
 80176d4:	0801e968 	.word	0x0801e968
 80176d8:	0801ea90 	.word	0x0801ea90
 80176dc:	0801ea30 	.word	0x0801ea30
 80176e0:	0801f0cc 	.word	0x0801f0cc
 80176e4:	20007228 	.word	0x20007228
 80176e8:	20007138 	.word	0x20007138

080176ec <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80176ec:	b580      	push	{r7, lr}
 80176ee:	b08c      	sub	sp, #48	; 0x30
 80176f0:	af02      	add	r7, sp, #8
 80176f2:	60f8      	str	r0, [r7, #12]
 80176f4:	60b9      	str	r1, [r7, #8]
 80176f6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80176f8:	68fb      	ldr	r3, [r7, #12]
 80176fa:	3326      	adds	r3, #38	; 0x26
 80176fc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80176fe:	23ff      	movs	r3, #255	; 0xff
 8017700:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8017704:	2300      	movs	r3, #0
 8017706:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017708:	68bb      	ldr	r3, [r7, #8]
 801770a:	681b      	ldr	r3, [r3, #0]
 801770c:	68f9      	ldr	r1, [r7, #12]
 801770e:	4618      	mov	r0, r3
 8017710:	f000 fe34 	bl	801837c <ip4_addr_isbroadcast_u32>
 8017714:	4603      	mov	r3, r0
 8017716:	2b00      	cmp	r3, #0
 8017718:	d10c      	bne.n	8017734 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801771a:	68bb      	ldr	r3, [r7, #8]
 801771c:	681b      	ldr	r3, [r3, #0]
 801771e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017722:	2be0      	cmp	r3, #224	; 0xe0
 8017724:	d006      	beq.n	8017734 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017726:	68bb      	ldr	r3, [r7, #8]
 8017728:	2b00      	cmp	r3, #0
 801772a:	d003      	beq.n	8017734 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801772c:	68bb      	ldr	r3, [r7, #8]
 801772e:	681b      	ldr	r3, [r3, #0]
 8017730:	2b00      	cmp	r3, #0
 8017732:	d102      	bne.n	801773a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017734:	f06f 030f 	mvn.w	r3, #15
 8017738:	e101      	b.n	801793e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801773a:	68fa      	ldr	r2, [r7, #12]
 801773c:	2101      	movs	r1, #1
 801773e:	68b8      	ldr	r0, [r7, #8]
 8017740:	f7ff fb60 	bl	8016e04 <etharp_find_entry>
 8017744:	4603      	mov	r3, r0
 8017746:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8017748:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801774c:	2b00      	cmp	r3, #0
 801774e:	da02      	bge.n	8017756 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8017750:	8a7b      	ldrh	r3, [r7, #18]
 8017752:	b25b      	sxtb	r3, r3
 8017754:	e0f3      	b.n	801793e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8017756:	8a7b      	ldrh	r3, [r7, #18]
 8017758:	2b7e      	cmp	r3, #126	; 0x7e
 801775a:	d906      	bls.n	801776a <etharp_query+0x7e>
 801775c:	4b7a      	ldr	r3, [pc, #488]	; (8017948 <etharp_query+0x25c>)
 801775e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8017762:	497a      	ldr	r1, [pc, #488]	; (801794c <etharp_query+0x260>)
 8017764:	487a      	ldr	r0, [pc, #488]	; (8017950 <etharp_query+0x264>)
 8017766:	f002 fa9b 	bl	8019ca0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801776a:	8a7b      	ldrh	r3, [r7, #18]
 801776c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801776e:	7c7a      	ldrb	r2, [r7, #17]
 8017770:	4978      	ldr	r1, [pc, #480]	; (8017954 <etharp_query+0x268>)
 8017772:	4613      	mov	r3, r2
 8017774:	005b      	lsls	r3, r3, #1
 8017776:	4413      	add	r3, r2
 8017778:	00db      	lsls	r3, r3, #3
 801777a:	440b      	add	r3, r1
 801777c:	3314      	adds	r3, #20
 801777e:	781b      	ldrb	r3, [r3, #0]
 8017780:	2b00      	cmp	r3, #0
 8017782:	d115      	bne.n	80177b0 <etharp_query+0xc4>
    is_new_entry = 1;
 8017784:	2301      	movs	r3, #1
 8017786:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8017788:	7c7a      	ldrb	r2, [r7, #17]
 801778a:	4972      	ldr	r1, [pc, #456]	; (8017954 <etharp_query+0x268>)
 801778c:	4613      	mov	r3, r2
 801778e:	005b      	lsls	r3, r3, #1
 8017790:	4413      	add	r3, r2
 8017792:	00db      	lsls	r3, r3, #3
 8017794:	440b      	add	r3, r1
 8017796:	3314      	adds	r3, #20
 8017798:	2201      	movs	r2, #1
 801779a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801779c:	7c7a      	ldrb	r2, [r7, #17]
 801779e:	496d      	ldr	r1, [pc, #436]	; (8017954 <etharp_query+0x268>)
 80177a0:	4613      	mov	r3, r2
 80177a2:	005b      	lsls	r3, r3, #1
 80177a4:	4413      	add	r3, r2
 80177a6:	00db      	lsls	r3, r3, #3
 80177a8:	440b      	add	r3, r1
 80177aa:	3308      	adds	r3, #8
 80177ac:	68fa      	ldr	r2, [r7, #12]
 80177ae:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80177b0:	7c7a      	ldrb	r2, [r7, #17]
 80177b2:	4968      	ldr	r1, [pc, #416]	; (8017954 <etharp_query+0x268>)
 80177b4:	4613      	mov	r3, r2
 80177b6:	005b      	lsls	r3, r3, #1
 80177b8:	4413      	add	r3, r2
 80177ba:	00db      	lsls	r3, r3, #3
 80177bc:	440b      	add	r3, r1
 80177be:	3314      	adds	r3, #20
 80177c0:	781b      	ldrb	r3, [r3, #0]
 80177c2:	2b01      	cmp	r3, #1
 80177c4:	d011      	beq.n	80177ea <etharp_query+0xfe>
 80177c6:	7c7a      	ldrb	r2, [r7, #17]
 80177c8:	4962      	ldr	r1, [pc, #392]	; (8017954 <etharp_query+0x268>)
 80177ca:	4613      	mov	r3, r2
 80177cc:	005b      	lsls	r3, r3, #1
 80177ce:	4413      	add	r3, r2
 80177d0:	00db      	lsls	r3, r3, #3
 80177d2:	440b      	add	r3, r1
 80177d4:	3314      	adds	r3, #20
 80177d6:	781b      	ldrb	r3, [r3, #0]
 80177d8:	2b01      	cmp	r3, #1
 80177da:	d806      	bhi.n	80177ea <etharp_query+0xfe>
 80177dc:	4b5a      	ldr	r3, [pc, #360]	; (8017948 <etharp_query+0x25c>)
 80177de:	f240 32cd 	movw	r2, #973	; 0x3cd
 80177e2:	495d      	ldr	r1, [pc, #372]	; (8017958 <etharp_query+0x26c>)
 80177e4:	485a      	ldr	r0, [pc, #360]	; (8017950 <etharp_query+0x264>)
 80177e6:	f002 fa5b 	bl	8019ca0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80177ea:	6a3b      	ldr	r3, [r7, #32]
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	d102      	bne.n	80177f6 <etharp_query+0x10a>
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d10c      	bne.n	8017810 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80177f6:	68b9      	ldr	r1, [r7, #8]
 80177f8:	68f8      	ldr	r0, [r7, #12]
 80177fa:	f000 f963 	bl	8017ac4 <etharp_request>
 80177fe:	4603      	mov	r3, r0
 8017800:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	2b00      	cmp	r3, #0
 8017808:	d102      	bne.n	8017810 <etharp_query+0x124>
      return result;
 801780a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801780e:	e096      	b.n	801793e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	2b00      	cmp	r3, #0
 8017814:	d106      	bne.n	8017824 <etharp_query+0x138>
 8017816:	4b4c      	ldr	r3, [pc, #304]	; (8017948 <etharp_query+0x25c>)
 8017818:	f240 32e1 	movw	r2, #993	; 0x3e1
 801781c:	494f      	ldr	r1, [pc, #316]	; (801795c <etharp_query+0x270>)
 801781e:	484c      	ldr	r0, [pc, #304]	; (8017950 <etharp_query+0x264>)
 8017820:	f002 fa3e 	bl	8019ca0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8017824:	7c7a      	ldrb	r2, [r7, #17]
 8017826:	494b      	ldr	r1, [pc, #300]	; (8017954 <etharp_query+0x268>)
 8017828:	4613      	mov	r3, r2
 801782a:	005b      	lsls	r3, r3, #1
 801782c:	4413      	add	r3, r2
 801782e:	00db      	lsls	r3, r3, #3
 8017830:	440b      	add	r3, r1
 8017832:	3314      	adds	r3, #20
 8017834:	781b      	ldrb	r3, [r3, #0]
 8017836:	2b01      	cmp	r3, #1
 8017838:	d917      	bls.n	801786a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801783a:	4a49      	ldr	r2, [pc, #292]	; (8017960 <etharp_query+0x274>)
 801783c:	7c7b      	ldrb	r3, [r7, #17]
 801783e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8017840:	7c7a      	ldrb	r2, [r7, #17]
 8017842:	4613      	mov	r3, r2
 8017844:	005b      	lsls	r3, r3, #1
 8017846:	4413      	add	r3, r2
 8017848:	00db      	lsls	r3, r3, #3
 801784a:	3308      	adds	r3, #8
 801784c:	4a41      	ldr	r2, [pc, #260]	; (8017954 <etharp_query+0x268>)
 801784e:	4413      	add	r3, r2
 8017850:	3304      	adds	r3, #4
 8017852:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017856:	9200      	str	r2, [sp, #0]
 8017858:	697a      	ldr	r2, [r7, #20]
 801785a:	6879      	ldr	r1, [r7, #4]
 801785c:	68f8      	ldr	r0, [r7, #12]
 801785e:	f001 fc9b 	bl	8019198 <ethernet_output>
 8017862:	4603      	mov	r3, r0
 8017864:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017868:	e067      	b.n	801793a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801786a:	7c7a      	ldrb	r2, [r7, #17]
 801786c:	4939      	ldr	r1, [pc, #228]	; (8017954 <etharp_query+0x268>)
 801786e:	4613      	mov	r3, r2
 8017870:	005b      	lsls	r3, r3, #1
 8017872:	4413      	add	r3, r2
 8017874:	00db      	lsls	r3, r3, #3
 8017876:	440b      	add	r3, r1
 8017878:	3314      	adds	r3, #20
 801787a:	781b      	ldrb	r3, [r3, #0]
 801787c:	2b01      	cmp	r3, #1
 801787e:	d15c      	bne.n	801793a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8017880:	2300      	movs	r3, #0
 8017882:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017888:	e01c      	b.n	80178c4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801788a:	69fb      	ldr	r3, [r7, #28]
 801788c:	895a      	ldrh	r2, [r3, #10]
 801788e:	69fb      	ldr	r3, [r7, #28]
 8017890:	891b      	ldrh	r3, [r3, #8]
 8017892:	429a      	cmp	r2, r3
 8017894:	d10a      	bne.n	80178ac <etharp_query+0x1c0>
 8017896:	69fb      	ldr	r3, [r7, #28]
 8017898:	681b      	ldr	r3, [r3, #0]
 801789a:	2b00      	cmp	r3, #0
 801789c:	d006      	beq.n	80178ac <etharp_query+0x1c0>
 801789e:	4b2a      	ldr	r3, [pc, #168]	; (8017948 <etharp_query+0x25c>)
 80178a0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80178a4:	492f      	ldr	r1, [pc, #188]	; (8017964 <etharp_query+0x278>)
 80178a6:	482a      	ldr	r0, [pc, #168]	; (8017950 <etharp_query+0x264>)
 80178a8:	f002 f9fa 	bl	8019ca0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80178ac:	69fb      	ldr	r3, [r7, #28]
 80178ae:	7b1b      	ldrb	r3, [r3, #12]
 80178b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d002      	beq.n	80178be <etharp_query+0x1d2>
        copy_needed = 1;
 80178b8:	2301      	movs	r3, #1
 80178ba:	61bb      	str	r3, [r7, #24]
        break;
 80178bc:	e005      	b.n	80178ca <etharp_query+0x1de>
      }
      p = p->next;
 80178be:	69fb      	ldr	r3, [r7, #28]
 80178c0:	681b      	ldr	r3, [r3, #0]
 80178c2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80178c4:	69fb      	ldr	r3, [r7, #28]
 80178c6:	2b00      	cmp	r3, #0
 80178c8:	d1df      	bne.n	801788a <etharp_query+0x19e>
    }
    if (copy_needed) {
 80178ca:	69bb      	ldr	r3, [r7, #24]
 80178cc:	2b00      	cmp	r3, #0
 80178ce:	d007      	beq.n	80178e0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80178d0:	687a      	ldr	r2, [r7, #4]
 80178d2:	f44f 7120 	mov.w	r1, #640	; 0x280
 80178d6:	200e      	movs	r0, #14
 80178d8:	f7f9 fd66 	bl	80113a8 <pbuf_clone>
 80178dc:	61f8      	str	r0, [r7, #28]
 80178de:	e004      	b.n	80178ea <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80178e4:	69f8      	ldr	r0, [r7, #28]
 80178e6:	f7f9 fba3 	bl	8011030 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80178ea:	69fb      	ldr	r3, [r7, #28]
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d021      	beq.n	8017934 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80178f0:	7c7a      	ldrb	r2, [r7, #17]
 80178f2:	4918      	ldr	r1, [pc, #96]	; (8017954 <etharp_query+0x268>)
 80178f4:	4613      	mov	r3, r2
 80178f6:	005b      	lsls	r3, r3, #1
 80178f8:	4413      	add	r3, r2
 80178fa:	00db      	lsls	r3, r3, #3
 80178fc:	440b      	add	r3, r1
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	2b00      	cmp	r3, #0
 8017902:	d00a      	beq.n	801791a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8017904:	7c7a      	ldrb	r2, [r7, #17]
 8017906:	4913      	ldr	r1, [pc, #76]	; (8017954 <etharp_query+0x268>)
 8017908:	4613      	mov	r3, r2
 801790a:	005b      	lsls	r3, r3, #1
 801790c:	4413      	add	r3, r2
 801790e:	00db      	lsls	r3, r3, #3
 8017910:	440b      	add	r3, r1
 8017912:	681b      	ldr	r3, [r3, #0]
 8017914:	4618      	mov	r0, r3
 8017916:	f7f9 faeb 	bl	8010ef0 <pbuf_free>
      }
      arp_table[i].q = p;
 801791a:	7c7a      	ldrb	r2, [r7, #17]
 801791c:	490d      	ldr	r1, [pc, #52]	; (8017954 <etharp_query+0x268>)
 801791e:	4613      	mov	r3, r2
 8017920:	005b      	lsls	r3, r3, #1
 8017922:	4413      	add	r3, r2
 8017924:	00db      	lsls	r3, r3, #3
 8017926:	440b      	add	r3, r1
 8017928:	69fa      	ldr	r2, [r7, #28]
 801792a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801792c:	2300      	movs	r3, #0
 801792e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017932:	e002      	b.n	801793a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017934:	23ff      	movs	r3, #255	; 0xff
 8017936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801793a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801793e:	4618      	mov	r0, r3
 8017940:	3728      	adds	r7, #40	; 0x28
 8017942:	46bd      	mov	sp, r7
 8017944:	bd80      	pop	{r7, pc}
 8017946:	bf00      	nop
 8017948:	0801e8f0 	.word	0x0801e8f0
 801794c:	0801ea9c 	.word	0x0801ea9c
 8017950:	0801e968 	.word	0x0801e968
 8017954:	20007138 	.word	0x20007138
 8017958:	0801eaac 	.word	0x0801eaac
 801795c:	0801ea90 	.word	0x0801ea90
 8017960:	20007228 	.word	0x20007228
 8017964:	0801ead4 	.word	0x0801ead4

08017968 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8017968:	b580      	push	{r7, lr}
 801796a:	b08a      	sub	sp, #40	; 0x28
 801796c:	af02      	add	r7, sp, #8
 801796e:	60f8      	str	r0, [r7, #12]
 8017970:	60b9      	str	r1, [r7, #8]
 8017972:	607a      	str	r2, [r7, #4]
 8017974:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8017976:	2300      	movs	r3, #0
 8017978:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801797a:	68fb      	ldr	r3, [r7, #12]
 801797c:	2b00      	cmp	r3, #0
 801797e:	d106      	bne.n	801798e <etharp_raw+0x26>
 8017980:	4b3a      	ldr	r3, [pc, #232]	; (8017a6c <etharp_raw+0x104>)
 8017982:	f240 4257 	movw	r2, #1111	; 0x457
 8017986:	493a      	ldr	r1, [pc, #232]	; (8017a70 <etharp_raw+0x108>)
 8017988:	483a      	ldr	r0, [pc, #232]	; (8017a74 <etharp_raw+0x10c>)
 801798a:	f002 f989 	bl	8019ca0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801798e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017992:	211c      	movs	r1, #28
 8017994:	200e      	movs	r0, #14
 8017996:	f7f8 ffc7 	bl	8010928 <pbuf_alloc>
 801799a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801799c:	69bb      	ldr	r3, [r7, #24]
 801799e:	2b00      	cmp	r3, #0
 80179a0:	d102      	bne.n	80179a8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80179a2:	f04f 33ff 	mov.w	r3, #4294967295
 80179a6:	e05d      	b.n	8017a64 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80179a8:	69bb      	ldr	r3, [r7, #24]
 80179aa:	895b      	ldrh	r3, [r3, #10]
 80179ac:	2b1b      	cmp	r3, #27
 80179ae:	d806      	bhi.n	80179be <etharp_raw+0x56>
 80179b0:	4b2e      	ldr	r3, [pc, #184]	; (8017a6c <etharp_raw+0x104>)
 80179b2:	f240 4262 	movw	r2, #1122	; 0x462
 80179b6:	4930      	ldr	r1, [pc, #192]	; (8017a78 <etharp_raw+0x110>)
 80179b8:	482e      	ldr	r0, [pc, #184]	; (8017a74 <etharp_raw+0x10c>)
 80179ba:	f002 f971 	bl	8019ca0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80179be:	69bb      	ldr	r3, [r7, #24]
 80179c0:	685b      	ldr	r3, [r3, #4]
 80179c2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80179c4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80179c6:	4618      	mov	r0, r3
 80179c8:	f7f7 feae 	bl	800f728 <lwip_htons>
 80179cc:	4603      	mov	r3, r0
 80179ce:	461a      	mov	r2, r3
 80179d0:	697b      	ldr	r3, [r7, #20]
 80179d2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80179d4:	68fb      	ldr	r3, [r7, #12]
 80179d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80179da:	2b06      	cmp	r3, #6
 80179dc:	d006      	beq.n	80179ec <etharp_raw+0x84>
 80179de:	4b23      	ldr	r3, [pc, #140]	; (8017a6c <etharp_raw+0x104>)
 80179e0:	f240 4269 	movw	r2, #1129	; 0x469
 80179e4:	4925      	ldr	r1, [pc, #148]	; (8017a7c <etharp_raw+0x114>)
 80179e6:	4823      	ldr	r0, [pc, #140]	; (8017a74 <etharp_raw+0x10c>)
 80179e8:	f002 f95a 	bl	8019ca0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80179ec:	697b      	ldr	r3, [r7, #20]
 80179ee:	3308      	adds	r3, #8
 80179f0:	2206      	movs	r2, #6
 80179f2:	6839      	ldr	r1, [r7, #0]
 80179f4:	4618      	mov	r0, r3
 80179f6:	f002 fb22 	bl	801a03e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80179fa:	697b      	ldr	r3, [r7, #20]
 80179fc:	3312      	adds	r3, #18
 80179fe:	2206      	movs	r2, #6
 8017a00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017a02:	4618      	mov	r0, r3
 8017a04:	f002 fb1b 	bl	801a03e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8017a08:	697b      	ldr	r3, [r7, #20]
 8017a0a:	330e      	adds	r3, #14
 8017a0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017a0e:	6812      	ldr	r2, [r2, #0]
 8017a10:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8017a12:	697b      	ldr	r3, [r7, #20]
 8017a14:	3318      	adds	r3, #24
 8017a16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017a18:	6812      	ldr	r2, [r2, #0]
 8017a1a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8017a1c:	697b      	ldr	r3, [r7, #20]
 8017a1e:	2200      	movs	r2, #0
 8017a20:	701a      	strb	r2, [r3, #0]
 8017a22:	2200      	movs	r2, #0
 8017a24:	f042 0201 	orr.w	r2, r2, #1
 8017a28:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8017a2a:	697b      	ldr	r3, [r7, #20]
 8017a2c:	2200      	movs	r2, #0
 8017a2e:	f042 0208 	orr.w	r2, r2, #8
 8017a32:	709a      	strb	r2, [r3, #2]
 8017a34:	2200      	movs	r2, #0
 8017a36:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8017a38:	697b      	ldr	r3, [r7, #20]
 8017a3a:	2206      	movs	r2, #6
 8017a3c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8017a3e:	697b      	ldr	r3, [r7, #20]
 8017a40:	2204      	movs	r2, #4
 8017a42:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017a44:	f640 0306 	movw	r3, #2054	; 0x806
 8017a48:	9300      	str	r3, [sp, #0]
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	68ba      	ldr	r2, [r7, #8]
 8017a4e:	69b9      	ldr	r1, [r7, #24]
 8017a50:	68f8      	ldr	r0, [r7, #12]
 8017a52:	f001 fba1 	bl	8019198 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8017a56:	69b8      	ldr	r0, [r7, #24]
 8017a58:	f7f9 fa4a 	bl	8010ef0 <pbuf_free>
  p = NULL;
 8017a5c:	2300      	movs	r3, #0
 8017a5e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8017a60:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017a64:	4618      	mov	r0, r3
 8017a66:	3720      	adds	r7, #32
 8017a68:	46bd      	mov	sp, r7
 8017a6a:	bd80      	pop	{r7, pc}
 8017a6c:	0801e8f0 	.word	0x0801e8f0
 8017a70:	0801ea40 	.word	0x0801ea40
 8017a74:	0801e968 	.word	0x0801e968
 8017a78:	0801eaf0 	.word	0x0801eaf0
 8017a7c:	0801eb24 	.word	0x0801eb24

08017a80 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8017a80:	b580      	push	{r7, lr}
 8017a82:	b088      	sub	sp, #32
 8017a84:	af04      	add	r7, sp, #16
 8017a86:	60f8      	str	r0, [r7, #12]
 8017a88:	60b9      	str	r1, [r7, #8]
 8017a8a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017a8c:	68fb      	ldr	r3, [r7, #12]
 8017a8e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8017a92:	68fb      	ldr	r3, [r7, #12]
 8017a94:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8017a98:	68fb      	ldr	r3, [r7, #12]
 8017a9a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017a9c:	2201      	movs	r2, #1
 8017a9e:	9203      	str	r2, [sp, #12]
 8017aa0:	68ba      	ldr	r2, [r7, #8]
 8017aa2:	9202      	str	r2, [sp, #8]
 8017aa4:	4a06      	ldr	r2, [pc, #24]	; (8017ac0 <etharp_request_dst+0x40>)
 8017aa6:	9201      	str	r2, [sp, #4]
 8017aa8:	9300      	str	r3, [sp, #0]
 8017aaa:	4603      	mov	r3, r0
 8017aac:	687a      	ldr	r2, [r7, #4]
 8017aae:	68f8      	ldr	r0, [r7, #12]
 8017ab0:	f7ff ff5a 	bl	8017968 <etharp_raw>
 8017ab4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8017ab6:	4618      	mov	r0, r3
 8017ab8:	3710      	adds	r7, #16
 8017aba:	46bd      	mov	sp, r7
 8017abc:	bd80      	pop	{r7, pc}
 8017abe:	bf00      	nop
 8017ac0:	0801f0d4 	.word	0x0801f0d4

08017ac4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017ac4:	b580      	push	{r7, lr}
 8017ac6:	b082      	sub	sp, #8
 8017ac8:	af00      	add	r7, sp, #0
 8017aca:	6078      	str	r0, [r7, #4]
 8017acc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8017ace:	4a05      	ldr	r2, [pc, #20]	; (8017ae4 <etharp_request+0x20>)
 8017ad0:	6839      	ldr	r1, [r7, #0]
 8017ad2:	6878      	ldr	r0, [r7, #4]
 8017ad4:	f7ff ffd4 	bl	8017a80 <etharp_request_dst>
 8017ad8:	4603      	mov	r3, r0
}
 8017ada:	4618      	mov	r0, r3
 8017adc:	3708      	adds	r7, #8
 8017ade:	46bd      	mov	sp, r7
 8017ae0:	bd80      	pop	{r7, pc}
 8017ae2:	bf00      	nop
 8017ae4:	0801f0cc 	.word	0x0801f0cc

08017ae8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017ae8:	b580      	push	{r7, lr}
 8017aea:	b08e      	sub	sp, #56	; 0x38
 8017aec:	af04      	add	r7, sp, #16
 8017aee:	6078      	str	r0, [r7, #4]
 8017af0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8017af2:	4b87      	ldr	r3, [pc, #540]	; (8017d10 <icmp_input+0x228>)
 8017af4:	689b      	ldr	r3, [r3, #8]
 8017af6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8017af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017afa:	781b      	ldrb	r3, [r3, #0]
 8017afc:	f003 030f 	and.w	r3, r3, #15
 8017b00:	b2db      	uxtb	r3, r3
 8017b02:	009b      	lsls	r3, r3, #2
 8017b04:	b2db      	uxtb	r3, r3
 8017b06:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8017b08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017b0a:	2b13      	cmp	r3, #19
 8017b0c:	f240 80e8 	bls.w	8017ce0 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	895b      	ldrh	r3, [r3, #10]
 8017b14:	2b03      	cmp	r3, #3
 8017b16:	f240 80e5 	bls.w	8017ce4 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	685b      	ldr	r3, [r3, #4]
 8017b1e:	781b      	ldrb	r3, [r3, #0]
 8017b20:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017b24:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	f000 80d2 	beq.w	8017cd2 <icmp_input+0x1ea>
 8017b2e:	2b08      	cmp	r3, #8
 8017b30:	f040 80d2 	bne.w	8017cd8 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017b34:	4b77      	ldr	r3, [pc, #476]	; (8017d14 <icmp_input+0x22c>)
 8017b36:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017b38:	4b75      	ldr	r3, [pc, #468]	; (8017d10 <icmp_input+0x228>)
 8017b3a:	695b      	ldr	r3, [r3, #20]
 8017b3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017b40:	2be0      	cmp	r3, #224	; 0xe0
 8017b42:	f000 80d6 	beq.w	8017cf2 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8017b46:	4b72      	ldr	r3, [pc, #456]	; (8017d10 <icmp_input+0x228>)
 8017b48:	695b      	ldr	r3, [r3, #20]
 8017b4a:	4a71      	ldr	r2, [pc, #452]	; (8017d10 <icmp_input+0x228>)
 8017b4c:	6812      	ldr	r2, [r2, #0]
 8017b4e:	4611      	mov	r1, r2
 8017b50:	4618      	mov	r0, r3
 8017b52:	f000 fc13 	bl	801837c <ip4_addr_isbroadcast_u32>
 8017b56:	4603      	mov	r3, r0
 8017b58:	2b00      	cmp	r3, #0
 8017b5a:	f040 80cc 	bne.w	8017cf6 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	891b      	ldrh	r3, [r3, #8]
 8017b62:	2b07      	cmp	r3, #7
 8017b64:	f240 80c0 	bls.w	8017ce8 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8017b68:	6878      	ldr	r0, [r7, #4]
 8017b6a:	f7f7 fe7a 	bl	800f862 <inet_chksum_pbuf>
 8017b6e:	4603      	mov	r3, r0
 8017b70:	2b00      	cmp	r3, #0
 8017b72:	d003      	beq.n	8017b7c <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8017b74:	6878      	ldr	r0, [r7, #4]
 8017b76:	f7f9 f9bb 	bl	8010ef0 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8017b7a:	e0c5      	b.n	8017d08 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017b7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017b7e:	330e      	adds	r3, #14
 8017b80:	4619      	mov	r1, r3
 8017b82:	6878      	ldr	r0, [r7, #4]
 8017b84:	f7f9 f91e 	bl	8010dc4 <pbuf_add_header>
 8017b88:	4603      	mov	r3, r0
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d04b      	beq.n	8017c26 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8017b8e:	687b      	ldr	r3, [r7, #4]
 8017b90:	891a      	ldrh	r2, [r3, #8]
 8017b92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017b94:	4413      	add	r3, r2
 8017b96:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017b98:	687b      	ldr	r3, [r7, #4]
 8017b9a:	891b      	ldrh	r3, [r3, #8]
 8017b9c:	8b7a      	ldrh	r2, [r7, #26]
 8017b9e:	429a      	cmp	r2, r3
 8017ba0:	f0c0 80ab 	bcc.w	8017cfa <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8017ba4:	8b7b      	ldrh	r3, [r7, #26]
 8017ba6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017baa:	4619      	mov	r1, r3
 8017bac:	200e      	movs	r0, #14
 8017bae:	f7f8 febb 	bl	8010928 <pbuf_alloc>
 8017bb2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8017bb4:	697b      	ldr	r3, [r7, #20]
 8017bb6:	2b00      	cmp	r3, #0
 8017bb8:	f000 80a1 	beq.w	8017cfe <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8017bbc:	697b      	ldr	r3, [r7, #20]
 8017bbe:	895b      	ldrh	r3, [r3, #10]
 8017bc0:	461a      	mov	r2, r3
 8017bc2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017bc4:	3308      	adds	r3, #8
 8017bc6:	429a      	cmp	r2, r3
 8017bc8:	d203      	bcs.n	8017bd2 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8017bca:	6978      	ldr	r0, [r7, #20]
 8017bcc:	f7f9 f990 	bl	8010ef0 <pbuf_free>
          goto icmperr;
 8017bd0:	e096      	b.n	8017d00 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8017bd2:	697b      	ldr	r3, [r7, #20]
 8017bd4:	685b      	ldr	r3, [r3, #4]
 8017bd6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017bd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017bda:	4618      	mov	r0, r3
 8017bdc:	f002 fa2f 	bl	801a03e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017be0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017be2:	4619      	mov	r1, r3
 8017be4:	6978      	ldr	r0, [r7, #20]
 8017be6:	f7f9 f8fd 	bl	8010de4 <pbuf_remove_header>
 8017bea:	4603      	mov	r3, r0
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	d009      	beq.n	8017c04 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017bf0:	4b49      	ldr	r3, [pc, #292]	; (8017d18 <icmp_input+0x230>)
 8017bf2:	22b6      	movs	r2, #182	; 0xb6
 8017bf4:	4949      	ldr	r1, [pc, #292]	; (8017d1c <icmp_input+0x234>)
 8017bf6:	484a      	ldr	r0, [pc, #296]	; (8017d20 <icmp_input+0x238>)
 8017bf8:	f002 f852 	bl	8019ca0 <iprintf>
          pbuf_free(r);
 8017bfc:	6978      	ldr	r0, [r7, #20]
 8017bfe:	f7f9 f977 	bl	8010ef0 <pbuf_free>
          goto icmperr;
 8017c02:	e07d      	b.n	8017d00 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8017c04:	6879      	ldr	r1, [r7, #4]
 8017c06:	6978      	ldr	r0, [r7, #20]
 8017c08:	f7f9 fa8a 	bl	8011120 <pbuf_copy>
 8017c0c:	4603      	mov	r3, r0
 8017c0e:	2b00      	cmp	r3, #0
 8017c10:	d003      	beq.n	8017c1a <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8017c12:	6978      	ldr	r0, [r7, #20]
 8017c14:	f7f9 f96c 	bl	8010ef0 <pbuf_free>
          goto icmperr;
 8017c18:	e072      	b.n	8017d00 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8017c1a:	6878      	ldr	r0, [r7, #4]
 8017c1c:	f7f9 f968 	bl	8010ef0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017c20:	697b      	ldr	r3, [r7, #20]
 8017c22:	607b      	str	r3, [r7, #4]
 8017c24:	e00f      	b.n	8017c46 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017c26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017c28:	330e      	adds	r3, #14
 8017c2a:	4619      	mov	r1, r3
 8017c2c:	6878      	ldr	r0, [r7, #4]
 8017c2e:	f7f9 f8d9 	bl	8010de4 <pbuf_remove_header>
 8017c32:	4603      	mov	r3, r0
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d006      	beq.n	8017c46 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017c38:	4b37      	ldr	r3, [pc, #220]	; (8017d18 <icmp_input+0x230>)
 8017c3a:	22c7      	movs	r2, #199	; 0xc7
 8017c3c:	4939      	ldr	r1, [pc, #228]	; (8017d24 <icmp_input+0x23c>)
 8017c3e:	4838      	ldr	r0, [pc, #224]	; (8017d20 <icmp_input+0x238>)
 8017c40:	f002 f82e 	bl	8019ca0 <iprintf>
          goto icmperr;
 8017c44:	e05c      	b.n	8017d00 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	685b      	ldr	r3, [r3, #4]
 8017c4a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8017c4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017c4e:	4619      	mov	r1, r3
 8017c50:	6878      	ldr	r0, [r7, #4]
 8017c52:	f7f9 f8b7 	bl	8010dc4 <pbuf_add_header>
 8017c56:	4603      	mov	r3, r0
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d13c      	bne.n	8017cd6 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	685b      	ldr	r3, [r3, #4]
 8017c60:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8017c62:	69fb      	ldr	r3, [r7, #28]
 8017c64:	681a      	ldr	r2, [r3, #0]
 8017c66:	68fb      	ldr	r3, [r7, #12]
 8017c68:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8017c6a:	4b29      	ldr	r3, [pc, #164]	; (8017d10 <icmp_input+0x228>)
 8017c6c:	691a      	ldr	r2, [r3, #16]
 8017c6e:	68fb      	ldr	r3, [r7, #12]
 8017c70:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8017c72:	693b      	ldr	r3, [r7, #16]
 8017c74:	2200      	movs	r2, #0
 8017c76:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8017c78:	693b      	ldr	r3, [r7, #16]
 8017c7a:	885b      	ldrh	r3, [r3, #2]
 8017c7c:	b29b      	uxth	r3, r3
 8017c7e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8017c82:	4293      	cmp	r3, r2
 8017c84:	d907      	bls.n	8017c96 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8017c86:	693b      	ldr	r3, [r7, #16]
 8017c88:	885b      	ldrh	r3, [r3, #2]
 8017c8a:	b29b      	uxth	r3, r3
 8017c8c:	3309      	adds	r3, #9
 8017c8e:	b29a      	uxth	r2, r3
 8017c90:	693b      	ldr	r3, [r7, #16]
 8017c92:	805a      	strh	r2, [r3, #2]
 8017c94:	e006      	b.n	8017ca4 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8017c96:	693b      	ldr	r3, [r7, #16]
 8017c98:	885b      	ldrh	r3, [r3, #2]
 8017c9a:	b29b      	uxth	r3, r3
 8017c9c:	3308      	adds	r3, #8
 8017c9e:	b29a      	uxth	r2, r3
 8017ca0:	693b      	ldr	r3, [r7, #16]
 8017ca2:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017ca4:	68fb      	ldr	r3, [r7, #12]
 8017ca6:	22ff      	movs	r2, #255	; 0xff
 8017ca8:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017caa:	68fb      	ldr	r3, [r7, #12]
 8017cac:	2200      	movs	r2, #0
 8017cae:	729a      	strb	r2, [r3, #10]
 8017cb0:	2200      	movs	r2, #0
 8017cb2:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017cb4:	683b      	ldr	r3, [r7, #0]
 8017cb6:	9302      	str	r3, [sp, #8]
 8017cb8:	2301      	movs	r3, #1
 8017cba:	9301      	str	r3, [sp, #4]
 8017cbc:	2300      	movs	r3, #0
 8017cbe:	9300      	str	r3, [sp, #0]
 8017cc0:	23ff      	movs	r3, #255	; 0xff
 8017cc2:	2200      	movs	r2, #0
 8017cc4:	69f9      	ldr	r1, [r7, #28]
 8017cc6:	6878      	ldr	r0, [r7, #4]
 8017cc8:	f000 fa80 	bl	80181cc <ip4_output_if>
 8017ccc:	4603      	mov	r3, r0
 8017cce:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8017cd0:	e001      	b.n	8017cd6 <icmp_input+0x1ee>
      break;
 8017cd2:	bf00      	nop
 8017cd4:	e000      	b.n	8017cd8 <icmp_input+0x1f0>
      break;
 8017cd6:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017cd8:	6878      	ldr	r0, [r7, #4]
 8017cda:	f7f9 f909 	bl	8010ef0 <pbuf_free>
  return;
 8017cde:	e013      	b.n	8017d08 <icmp_input+0x220>
    goto lenerr;
 8017ce0:	bf00      	nop
 8017ce2:	e002      	b.n	8017cea <icmp_input+0x202>
    goto lenerr;
 8017ce4:	bf00      	nop
 8017ce6:	e000      	b.n	8017cea <icmp_input+0x202>
        goto lenerr;
 8017ce8:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017cea:	6878      	ldr	r0, [r7, #4]
 8017cec:	f7f9 f900 	bl	8010ef0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017cf0:	e00a      	b.n	8017d08 <icmp_input+0x220>
        goto icmperr;
 8017cf2:	bf00      	nop
 8017cf4:	e004      	b.n	8017d00 <icmp_input+0x218>
        goto icmperr;
 8017cf6:	bf00      	nop
 8017cf8:	e002      	b.n	8017d00 <icmp_input+0x218>
          goto icmperr;
 8017cfa:	bf00      	nop
 8017cfc:	e000      	b.n	8017d00 <icmp_input+0x218>
          goto icmperr;
 8017cfe:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017d00:	6878      	ldr	r0, [r7, #4]
 8017d02:	f7f9 f8f5 	bl	8010ef0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017d06:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017d08:	3728      	adds	r7, #40	; 0x28
 8017d0a:	46bd      	mov	sp, r7
 8017d0c:	bd80      	pop	{r7, pc}
 8017d0e:	bf00      	nop
 8017d10:	200007fc 	.word	0x200007fc
 8017d14:	20000810 	.word	0x20000810
 8017d18:	0801eb68 	.word	0x0801eb68
 8017d1c:	0801eba0 	.word	0x0801eba0
 8017d20:	0801ebd8 	.word	0x0801ebd8
 8017d24:	0801ec00 	.word	0x0801ec00

08017d28 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017d28:	b580      	push	{r7, lr}
 8017d2a:	b082      	sub	sp, #8
 8017d2c:	af00      	add	r7, sp, #0
 8017d2e:	6078      	str	r0, [r7, #4]
 8017d30:	460b      	mov	r3, r1
 8017d32:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017d34:	78fb      	ldrb	r3, [r7, #3]
 8017d36:	461a      	mov	r2, r3
 8017d38:	2103      	movs	r1, #3
 8017d3a:	6878      	ldr	r0, [r7, #4]
 8017d3c:	f000 f814 	bl	8017d68 <icmp_send_response>
}
 8017d40:	bf00      	nop
 8017d42:	3708      	adds	r7, #8
 8017d44:	46bd      	mov	sp, r7
 8017d46:	bd80      	pop	{r7, pc}

08017d48 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017d48:	b580      	push	{r7, lr}
 8017d4a:	b082      	sub	sp, #8
 8017d4c:	af00      	add	r7, sp, #0
 8017d4e:	6078      	str	r0, [r7, #4]
 8017d50:	460b      	mov	r3, r1
 8017d52:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017d54:	78fb      	ldrb	r3, [r7, #3]
 8017d56:	461a      	mov	r2, r3
 8017d58:	210b      	movs	r1, #11
 8017d5a:	6878      	ldr	r0, [r7, #4]
 8017d5c:	f000 f804 	bl	8017d68 <icmp_send_response>
}
 8017d60:	bf00      	nop
 8017d62:	3708      	adds	r7, #8
 8017d64:	46bd      	mov	sp, r7
 8017d66:	bd80      	pop	{r7, pc}

08017d68 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017d68:	b580      	push	{r7, lr}
 8017d6a:	b08c      	sub	sp, #48	; 0x30
 8017d6c:	af04      	add	r7, sp, #16
 8017d6e:	6078      	str	r0, [r7, #4]
 8017d70:	460b      	mov	r3, r1
 8017d72:	70fb      	strb	r3, [r7, #3]
 8017d74:	4613      	mov	r3, r2
 8017d76:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017d78:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017d7c:	2124      	movs	r1, #36	; 0x24
 8017d7e:	2022      	movs	r0, #34	; 0x22
 8017d80:	f7f8 fdd2 	bl	8010928 <pbuf_alloc>
 8017d84:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8017d86:	69fb      	ldr	r3, [r7, #28]
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d056      	beq.n	8017e3a <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017d8c:	69fb      	ldr	r3, [r7, #28]
 8017d8e:	895b      	ldrh	r3, [r3, #10]
 8017d90:	2b23      	cmp	r3, #35	; 0x23
 8017d92:	d806      	bhi.n	8017da2 <icmp_send_response+0x3a>
 8017d94:	4b2b      	ldr	r3, [pc, #172]	; (8017e44 <icmp_send_response+0xdc>)
 8017d96:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8017d9a:	492b      	ldr	r1, [pc, #172]	; (8017e48 <icmp_send_response+0xe0>)
 8017d9c:	482b      	ldr	r0, [pc, #172]	; (8017e4c <icmp_send_response+0xe4>)
 8017d9e:	f001 ff7f 	bl	8019ca0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	685b      	ldr	r3, [r3, #4]
 8017da6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017da8:	69fb      	ldr	r3, [r7, #28]
 8017daa:	685b      	ldr	r3, [r3, #4]
 8017dac:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8017dae:	697b      	ldr	r3, [r7, #20]
 8017db0:	78fa      	ldrb	r2, [r7, #3]
 8017db2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017db4:	697b      	ldr	r3, [r7, #20]
 8017db6:	78ba      	ldrb	r2, [r7, #2]
 8017db8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8017dba:	697b      	ldr	r3, [r7, #20]
 8017dbc:	2200      	movs	r2, #0
 8017dbe:	711a      	strb	r2, [r3, #4]
 8017dc0:	2200      	movs	r2, #0
 8017dc2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017dc4:	697b      	ldr	r3, [r7, #20]
 8017dc6:	2200      	movs	r2, #0
 8017dc8:	719a      	strb	r2, [r3, #6]
 8017dca:	2200      	movs	r2, #0
 8017dcc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8017dce:	69fb      	ldr	r3, [r7, #28]
 8017dd0:	685b      	ldr	r3, [r3, #4]
 8017dd2:	f103 0008 	add.w	r0, r3, #8
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	685b      	ldr	r3, [r3, #4]
 8017dda:	221c      	movs	r2, #28
 8017ddc:	4619      	mov	r1, r3
 8017dde:	f002 f92e 	bl	801a03e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8017de2:	69bb      	ldr	r3, [r7, #24]
 8017de4:	68db      	ldr	r3, [r3, #12]
 8017de6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017de8:	f107 030c 	add.w	r3, r7, #12
 8017dec:	4618      	mov	r0, r3
 8017dee:	f000 f82f 	bl	8017e50 <ip4_route>
 8017df2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017df4:	693b      	ldr	r3, [r7, #16]
 8017df6:	2b00      	cmp	r3, #0
 8017df8:	d01b      	beq.n	8017e32 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8017dfa:	697b      	ldr	r3, [r7, #20]
 8017dfc:	2200      	movs	r2, #0
 8017dfe:	709a      	strb	r2, [r3, #2]
 8017e00:	2200      	movs	r2, #0
 8017e02:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8017e04:	69fb      	ldr	r3, [r7, #28]
 8017e06:	895b      	ldrh	r3, [r3, #10]
 8017e08:	4619      	mov	r1, r3
 8017e0a:	6978      	ldr	r0, [r7, #20]
 8017e0c:	f7f7 fd17 	bl	800f83e <inet_chksum>
 8017e10:	4603      	mov	r3, r0
 8017e12:	461a      	mov	r2, r3
 8017e14:	697b      	ldr	r3, [r7, #20]
 8017e16:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017e18:	f107 020c 	add.w	r2, r7, #12
 8017e1c:	693b      	ldr	r3, [r7, #16]
 8017e1e:	9302      	str	r3, [sp, #8]
 8017e20:	2301      	movs	r3, #1
 8017e22:	9301      	str	r3, [sp, #4]
 8017e24:	2300      	movs	r3, #0
 8017e26:	9300      	str	r3, [sp, #0]
 8017e28:	23ff      	movs	r3, #255	; 0xff
 8017e2a:	2100      	movs	r1, #0
 8017e2c:	69f8      	ldr	r0, [r7, #28]
 8017e2e:	f000 f9cd 	bl	80181cc <ip4_output_if>
  }
  pbuf_free(q);
 8017e32:	69f8      	ldr	r0, [r7, #28]
 8017e34:	f7f9 f85c 	bl	8010ef0 <pbuf_free>
 8017e38:	e000      	b.n	8017e3c <icmp_send_response+0xd4>
    return;
 8017e3a:	bf00      	nop
}
 8017e3c:	3720      	adds	r7, #32
 8017e3e:	46bd      	mov	sp, r7
 8017e40:	bd80      	pop	{r7, pc}
 8017e42:	bf00      	nop
 8017e44:	0801eb68 	.word	0x0801eb68
 8017e48:	0801ec34 	.word	0x0801ec34
 8017e4c:	0801ebd8 	.word	0x0801ebd8

08017e50 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017e50:	b480      	push	{r7}
 8017e52:	b085      	sub	sp, #20
 8017e54:	af00      	add	r7, sp, #0
 8017e56:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017e58:	4b33      	ldr	r3, [pc, #204]	; (8017f28 <ip4_route+0xd8>)
 8017e5a:	681b      	ldr	r3, [r3, #0]
 8017e5c:	60fb      	str	r3, [r7, #12]
 8017e5e:	e036      	b.n	8017ece <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017e60:	68fb      	ldr	r3, [r7, #12]
 8017e62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017e66:	f003 0301 	and.w	r3, r3, #1
 8017e6a:	b2db      	uxtb	r3, r3
 8017e6c:	2b00      	cmp	r3, #0
 8017e6e:	d02b      	beq.n	8017ec8 <ip4_route+0x78>
 8017e70:	68fb      	ldr	r3, [r7, #12]
 8017e72:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017e76:	089b      	lsrs	r3, r3, #2
 8017e78:	f003 0301 	and.w	r3, r3, #1
 8017e7c:	b2db      	uxtb	r3, r3
 8017e7e:	2b00      	cmp	r3, #0
 8017e80:	d022      	beq.n	8017ec8 <ip4_route+0x78>
 8017e82:	68fb      	ldr	r3, [r7, #12]
 8017e84:	3304      	adds	r3, #4
 8017e86:	681b      	ldr	r3, [r3, #0]
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	d01d      	beq.n	8017ec8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017e8c:	687b      	ldr	r3, [r7, #4]
 8017e8e:	681a      	ldr	r2, [r3, #0]
 8017e90:	68fb      	ldr	r3, [r7, #12]
 8017e92:	3304      	adds	r3, #4
 8017e94:	681b      	ldr	r3, [r3, #0]
 8017e96:	405a      	eors	r2, r3
 8017e98:	68fb      	ldr	r3, [r7, #12]
 8017e9a:	3308      	adds	r3, #8
 8017e9c:	681b      	ldr	r3, [r3, #0]
 8017e9e:	4013      	ands	r3, r2
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	d101      	bne.n	8017ea8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017ea4:	68fb      	ldr	r3, [r7, #12]
 8017ea6:	e038      	b.n	8017f1a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017ea8:	68fb      	ldr	r3, [r7, #12]
 8017eaa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017eae:	f003 0302 	and.w	r3, r3, #2
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d108      	bne.n	8017ec8 <ip4_route+0x78>
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	681a      	ldr	r2, [r3, #0]
 8017eba:	68fb      	ldr	r3, [r7, #12]
 8017ebc:	330c      	adds	r3, #12
 8017ebe:	681b      	ldr	r3, [r3, #0]
 8017ec0:	429a      	cmp	r2, r3
 8017ec2:	d101      	bne.n	8017ec8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017ec4:	68fb      	ldr	r3, [r7, #12]
 8017ec6:	e028      	b.n	8017f1a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017ec8:	68fb      	ldr	r3, [r7, #12]
 8017eca:	681b      	ldr	r3, [r3, #0]
 8017ecc:	60fb      	str	r3, [r7, #12]
 8017ece:	68fb      	ldr	r3, [r7, #12]
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	d1c5      	bne.n	8017e60 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017ed4:	4b15      	ldr	r3, [pc, #84]	; (8017f2c <ip4_route+0xdc>)
 8017ed6:	681b      	ldr	r3, [r3, #0]
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	d01a      	beq.n	8017f12 <ip4_route+0xc2>
 8017edc:	4b13      	ldr	r3, [pc, #76]	; (8017f2c <ip4_route+0xdc>)
 8017ede:	681b      	ldr	r3, [r3, #0]
 8017ee0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017ee4:	f003 0301 	and.w	r3, r3, #1
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	d012      	beq.n	8017f12 <ip4_route+0xc2>
 8017eec:	4b0f      	ldr	r3, [pc, #60]	; (8017f2c <ip4_route+0xdc>)
 8017eee:	681b      	ldr	r3, [r3, #0]
 8017ef0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017ef4:	f003 0304 	and.w	r3, r3, #4
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d00a      	beq.n	8017f12 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017efc:	4b0b      	ldr	r3, [pc, #44]	; (8017f2c <ip4_route+0xdc>)
 8017efe:	681b      	ldr	r3, [r3, #0]
 8017f00:	3304      	adds	r3, #4
 8017f02:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	d004      	beq.n	8017f12 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	681b      	ldr	r3, [r3, #0]
 8017f0c:	b2db      	uxtb	r3, r3
 8017f0e:	2b7f      	cmp	r3, #127	; 0x7f
 8017f10:	d101      	bne.n	8017f16 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017f12:	2300      	movs	r3, #0
 8017f14:	e001      	b.n	8017f1a <ip4_route+0xca>
  }

  return netif_default;
 8017f16:	4b05      	ldr	r3, [pc, #20]	; (8017f2c <ip4_route+0xdc>)
 8017f18:	681b      	ldr	r3, [r3, #0]
}
 8017f1a:	4618      	mov	r0, r3
 8017f1c:	3714      	adds	r7, #20
 8017f1e:	46bd      	mov	sp, r7
 8017f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f24:	4770      	bx	lr
 8017f26:	bf00      	nop
 8017f28:	200070cc 	.word	0x200070cc
 8017f2c:	200070d0 	.word	0x200070d0

08017f30 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017f30:	b580      	push	{r7, lr}
 8017f32:	b082      	sub	sp, #8
 8017f34:	af00      	add	r7, sp, #0
 8017f36:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017f3e:	f003 0301 	and.w	r3, r3, #1
 8017f42:	b2db      	uxtb	r3, r3
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	d016      	beq.n	8017f76 <ip4_input_accept+0x46>
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	3304      	adds	r3, #4
 8017f4c:	681b      	ldr	r3, [r3, #0]
 8017f4e:	2b00      	cmp	r3, #0
 8017f50:	d011      	beq.n	8017f76 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017f52:	4b0b      	ldr	r3, [pc, #44]	; (8017f80 <ip4_input_accept+0x50>)
 8017f54:	695a      	ldr	r2, [r3, #20]
 8017f56:	687b      	ldr	r3, [r7, #4]
 8017f58:	3304      	adds	r3, #4
 8017f5a:	681b      	ldr	r3, [r3, #0]
 8017f5c:	429a      	cmp	r2, r3
 8017f5e:	d008      	beq.n	8017f72 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017f60:	4b07      	ldr	r3, [pc, #28]	; (8017f80 <ip4_input_accept+0x50>)
 8017f62:	695b      	ldr	r3, [r3, #20]
 8017f64:	6879      	ldr	r1, [r7, #4]
 8017f66:	4618      	mov	r0, r3
 8017f68:	f000 fa08 	bl	801837c <ip4_addr_isbroadcast_u32>
 8017f6c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	d001      	beq.n	8017f76 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017f72:	2301      	movs	r3, #1
 8017f74:	e000      	b.n	8017f78 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8017f76:	2300      	movs	r3, #0
}
 8017f78:	4618      	mov	r0, r3
 8017f7a:	3708      	adds	r7, #8
 8017f7c:	46bd      	mov	sp, r7
 8017f7e:	bd80      	pop	{r7, pc}
 8017f80:	200007fc 	.word	0x200007fc

08017f84 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017f84:	b580      	push	{r7, lr}
 8017f86:	b086      	sub	sp, #24
 8017f88:	af00      	add	r7, sp, #0
 8017f8a:	6078      	str	r0, [r7, #4]
 8017f8c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	685b      	ldr	r3, [r3, #4]
 8017f92:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8017f94:	697b      	ldr	r3, [r7, #20]
 8017f96:	781b      	ldrb	r3, [r3, #0]
 8017f98:	091b      	lsrs	r3, r3, #4
 8017f9a:	b2db      	uxtb	r3, r3
 8017f9c:	2b04      	cmp	r3, #4
 8017f9e:	d004      	beq.n	8017faa <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017fa0:	6878      	ldr	r0, [r7, #4]
 8017fa2:	f7f8 ffa5 	bl	8010ef0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017fa6:	2300      	movs	r3, #0
 8017fa8:	e107      	b.n	80181ba <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8017faa:	697b      	ldr	r3, [r7, #20]
 8017fac:	781b      	ldrb	r3, [r3, #0]
 8017fae:	f003 030f 	and.w	r3, r3, #15
 8017fb2:	b2db      	uxtb	r3, r3
 8017fb4:	009b      	lsls	r3, r3, #2
 8017fb6:	b2db      	uxtb	r3, r3
 8017fb8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017fba:	697b      	ldr	r3, [r7, #20]
 8017fbc:	885b      	ldrh	r3, [r3, #2]
 8017fbe:	b29b      	uxth	r3, r3
 8017fc0:	4618      	mov	r0, r3
 8017fc2:	f7f7 fbb1 	bl	800f728 <lwip_htons>
 8017fc6:	4603      	mov	r3, r0
 8017fc8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	891b      	ldrh	r3, [r3, #8]
 8017fce:	89ba      	ldrh	r2, [r7, #12]
 8017fd0:	429a      	cmp	r2, r3
 8017fd2:	d204      	bcs.n	8017fde <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8017fd4:	89bb      	ldrh	r3, [r7, #12]
 8017fd6:	4619      	mov	r1, r3
 8017fd8:	6878      	ldr	r0, [r7, #4]
 8017fda:	f7f8 fe05 	bl	8010be8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017fde:	687b      	ldr	r3, [r7, #4]
 8017fe0:	895b      	ldrh	r3, [r3, #10]
 8017fe2:	89fa      	ldrh	r2, [r7, #14]
 8017fe4:	429a      	cmp	r2, r3
 8017fe6:	d807      	bhi.n	8017ff8 <ip4_input+0x74>
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	891b      	ldrh	r3, [r3, #8]
 8017fec:	89ba      	ldrh	r2, [r7, #12]
 8017fee:	429a      	cmp	r2, r3
 8017ff0:	d802      	bhi.n	8017ff8 <ip4_input+0x74>
 8017ff2:	89fb      	ldrh	r3, [r7, #14]
 8017ff4:	2b13      	cmp	r3, #19
 8017ff6:	d804      	bhi.n	8018002 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017ff8:	6878      	ldr	r0, [r7, #4]
 8017ffa:	f7f8 ff79 	bl	8010ef0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017ffe:	2300      	movs	r3, #0
 8018000:	e0db      	b.n	80181ba <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8018002:	697b      	ldr	r3, [r7, #20]
 8018004:	691b      	ldr	r3, [r3, #16]
 8018006:	4a6f      	ldr	r2, [pc, #444]	; (80181c4 <ip4_input+0x240>)
 8018008:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801800a:	697b      	ldr	r3, [r7, #20]
 801800c:	68db      	ldr	r3, [r3, #12]
 801800e:	4a6d      	ldr	r2, [pc, #436]	; (80181c4 <ip4_input+0x240>)
 8018010:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018012:	4b6c      	ldr	r3, [pc, #432]	; (80181c4 <ip4_input+0x240>)
 8018014:	695b      	ldr	r3, [r3, #20]
 8018016:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801801a:	2be0      	cmp	r3, #224	; 0xe0
 801801c:	d112      	bne.n	8018044 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801801e:	683b      	ldr	r3, [r7, #0]
 8018020:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018024:	f003 0301 	and.w	r3, r3, #1
 8018028:	b2db      	uxtb	r3, r3
 801802a:	2b00      	cmp	r3, #0
 801802c:	d007      	beq.n	801803e <ip4_input+0xba>
 801802e:	683b      	ldr	r3, [r7, #0]
 8018030:	3304      	adds	r3, #4
 8018032:	681b      	ldr	r3, [r3, #0]
 8018034:	2b00      	cmp	r3, #0
 8018036:	d002      	beq.n	801803e <ip4_input+0xba>
      netif = inp;
 8018038:	683b      	ldr	r3, [r7, #0]
 801803a:	613b      	str	r3, [r7, #16]
 801803c:	e02a      	b.n	8018094 <ip4_input+0x110>
    } else {
      netif = NULL;
 801803e:	2300      	movs	r3, #0
 8018040:	613b      	str	r3, [r7, #16]
 8018042:	e027      	b.n	8018094 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8018044:	6838      	ldr	r0, [r7, #0]
 8018046:	f7ff ff73 	bl	8017f30 <ip4_input_accept>
 801804a:	4603      	mov	r3, r0
 801804c:	2b00      	cmp	r3, #0
 801804e:	d002      	beq.n	8018056 <ip4_input+0xd2>
      netif = inp;
 8018050:	683b      	ldr	r3, [r7, #0]
 8018052:	613b      	str	r3, [r7, #16]
 8018054:	e01e      	b.n	8018094 <ip4_input+0x110>
    } else {
      netif = NULL;
 8018056:	2300      	movs	r3, #0
 8018058:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801805a:	4b5a      	ldr	r3, [pc, #360]	; (80181c4 <ip4_input+0x240>)
 801805c:	695b      	ldr	r3, [r3, #20]
 801805e:	b2db      	uxtb	r3, r3
 8018060:	2b7f      	cmp	r3, #127	; 0x7f
 8018062:	d017      	beq.n	8018094 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8018064:	4b58      	ldr	r3, [pc, #352]	; (80181c8 <ip4_input+0x244>)
 8018066:	681b      	ldr	r3, [r3, #0]
 8018068:	613b      	str	r3, [r7, #16]
 801806a:	e00e      	b.n	801808a <ip4_input+0x106>
          if (netif == inp) {
 801806c:	693a      	ldr	r2, [r7, #16]
 801806e:	683b      	ldr	r3, [r7, #0]
 8018070:	429a      	cmp	r2, r3
 8018072:	d006      	beq.n	8018082 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8018074:	6938      	ldr	r0, [r7, #16]
 8018076:	f7ff ff5b 	bl	8017f30 <ip4_input_accept>
 801807a:	4603      	mov	r3, r0
 801807c:	2b00      	cmp	r3, #0
 801807e:	d108      	bne.n	8018092 <ip4_input+0x10e>
 8018080:	e000      	b.n	8018084 <ip4_input+0x100>
            continue;
 8018082:	bf00      	nop
        NETIF_FOREACH(netif) {
 8018084:	693b      	ldr	r3, [r7, #16]
 8018086:	681b      	ldr	r3, [r3, #0]
 8018088:	613b      	str	r3, [r7, #16]
 801808a:	693b      	ldr	r3, [r7, #16]
 801808c:	2b00      	cmp	r3, #0
 801808e:	d1ed      	bne.n	801806c <ip4_input+0xe8>
 8018090:	e000      	b.n	8018094 <ip4_input+0x110>
            break;
 8018092:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018094:	4b4b      	ldr	r3, [pc, #300]	; (80181c4 <ip4_input+0x240>)
 8018096:	691b      	ldr	r3, [r3, #16]
 8018098:	6839      	ldr	r1, [r7, #0]
 801809a:	4618      	mov	r0, r3
 801809c:	f000 f96e 	bl	801837c <ip4_addr_isbroadcast_u32>
 80180a0:	4603      	mov	r3, r0
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	d105      	bne.n	80180b2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80180a6:	4b47      	ldr	r3, [pc, #284]	; (80181c4 <ip4_input+0x240>)
 80180a8:	691b      	ldr	r3, [r3, #16]
 80180aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80180ae:	2be0      	cmp	r3, #224	; 0xe0
 80180b0:	d104      	bne.n	80180bc <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80180b2:	6878      	ldr	r0, [r7, #4]
 80180b4:	f7f8 ff1c 	bl	8010ef0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80180b8:	2300      	movs	r3, #0
 80180ba:	e07e      	b.n	80181ba <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80180bc:	693b      	ldr	r3, [r7, #16]
 80180be:	2b00      	cmp	r3, #0
 80180c0:	d104      	bne.n	80180cc <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80180c2:	6878      	ldr	r0, [r7, #4]
 80180c4:	f7f8 ff14 	bl	8010ef0 <pbuf_free>
    return ERR_OK;
 80180c8:	2300      	movs	r3, #0
 80180ca:	e076      	b.n	80181ba <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80180cc:	697b      	ldr	r3, [r7, #20]
 80180ce:	88db      	ldrh	r3, [r3, #6]
 80180d0:	b29b      	uxth	r3, r3
 80180d2:	461a      	mov	r2, r3
 80180d4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80180d8:	4013      	ands	r3, r2
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d00b      	beq.n	80180f6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80180de:	6878      	ldr	r0, [r7, #4]
 80180e0:	f000 fc92 	bl	8018a08 <ip4_reass>
 80180e4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	d101      	bne.n	80180f0 <ip4_input+0x16c>
      return ERR_OK;
 80180ec:	2300      	movs	r3, #0
 80180ee:	e064      	b.n	80181ba <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	685b      	ldr	r3, [r3, #4]
 80180f4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80180f6:	4a33      	ldr	r2, [pc, #204]	; (80181c4 <ip4_input+0x240>)
 80180f8:	693b      	ldr	r3, [r7, #16]
 80180fa:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80180fc:	4a31      	ldr	r2, [pc, #196]	; (80181c4 <ip4_input+0x240>)
 80180fe:	683b      	ldr	r3, [r7, #0]
 8018100:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8018102:	4a30      	ldr	r2, [pc, #192]	; (80181c4 <ip4_input+0x240>)
 8018104:	697b      	ldr	r3, [r7, #20]
 8018106:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8018108:	697b      	ldr	r3, [r7, #20]
 801810a:	781b      	ldrb	r3, [r3, #0]
 801810c:	f003 030f 	and.w	r3, r3, #15
 8018110:	b2db      	uxtb	r3, r3
 8018112:	009b      	lsls	r3, r3, #2
 8018114:	b2db      	uxtb	r3, r3
 8018116:	b29a      	uxth	r2, r3
 8018118:	4b2a      	ldr	r3, [pc, #168]	; (80181c4 <ip4_input+0x240>)
 801811a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801811c:	89fb      	ldrh	r3, [r7, #14]
 801811e:	4619      	mov	r1, r3
 8018120:	6878      	ldr	r0, [r7, #4]
 8018122:	f7f8 fe5f 	bl	8010de4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8018126:	697b      	ldr	r3, [r7, #20]
 8018128:	7a5b      	ldrb	r3, [r3, #9]
 801812a:	2b11      	cmp	r3, #17
 801812c:	d006      	beq.n	801813c <ip4_input+0x1b8>
 801812e:	2b11      	cmp	r3, #17
 8018130:	dc13      	bgt.n	801815a <ip4_input+0x1d6>
 8018132:	2b01      	cmp	r3, #1
 8018134:	d00c      	beq.n	8018150 <ip4_input+0x1cc>
 8018136:	2b06      	cmp	r3, #6
 8018138:	d005      	beq.n	8018146 <ip4_input+0x1c2>
 801813a:	e00e      	b.n	801815a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801813c:	6839      	ldr	r1, [r7, #0]
 801813e:	6878      	ldr	r0, [r7, #4]
 8018140:	f7fe fc42 	bl	80169c8 <udp_input>
        break;
 8018144:	e026      	b.n	8018194 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8018146:	6839      	ldr	r1, [r7, #0]
 8018148:	6878      	ldr	r0, [r7, #4]
 801814a:	f7fa fcfd 	bl	8012b48 <tcp_input>
        break;
 801814e:	e021      	b.n	8018194 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8018150:	6839      	ldr	r1, [r7, #0]
 8018152:	6878      	ldr	r0, [r7, #4]
 8018154:	f7ff fcc8 	bl	8017ae8 <icmp_input>
        break;
 8018158:	e01c      	b.n	8018194 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801815a:	4b1a      	ldr	r3, [pc, #104]	; (80181c4 <ip4_input+0x240>)
 801815c:	695b      	ldr	r3, [r3, #20]
 801815e:	6939      	ldr	r1, [r7, #16]
 8018160:	4618      	mov	r0, r3
 8018162:	f000 f90b 	bl	801837c <ip4_addr_isbroadcast_u32>
 8018166:	4603      	mov	r3, r0
 8018168:	2b00      	cmp	r3, #0
 801816a:	d10f      	bne.n	801818c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801816c:	4b15      	ldr	r3, [pc, #84]	; (80181c4 <ip4_input+0x240>)
 801816e:	695b      	ldr	r3, [r3, #20]
 8018170:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018174:	2be0      	cmp	r3, #224	; 0xe0
 8018176:	d009      	beq.n	801818c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8018178:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801817c:	4619      	mov	r1, r3
 801817e:	6878      	ldr	r0, [r7, #4]
 8018180:	f7f8 fea3 	bl	8010eca <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8018184:	2102      	movs	r1, #2
 8018186:	6878      	ldr	r0, [r7, #4]
 8018188:	f7ff fdce 	bl	8017d28 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801818c:	6878      	ldr	r0, [r7, #4]
 801818e:	f7f8 feaf 	bl	8010ef0 <pbuf_free>
        break;
 8018192:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8018194:	4b0b      	ldr	r3, [pc, #44]	; (80181c4 <ip4_input+0x240>)
 8018196:	2200      	movs	r2, #0
 8018198:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801819a:	4b0a      	ldr	r3, [pc, #40]	; (80181c4 <ip4_input+0x240>)
 801819c:	2200      	movs	r2, #0
 801819e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80181a0:	4b08      	ldr	r3, [pc, #32]	; (80181c4 <ip4_input+0x240>)
 80181a2:	2200      	movs	r2, #0
 80181a4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80181a6:	4b07      	ldr	r3, [pc, #28]	; (80181c4 <ip4_input+0x240>)
 80181a8:	2200      	movs	r2, #0
 80181aa:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80181ac:	4b05      	ldr	r3, [pc, #20]	; (80181c4 <ip4_input+0x240>)
 80181ae:	2200      	movs	r2, #0
 80181b0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80181b2:	4b04      	ldr	r3, [pc, #16]	; (80181c4 <ip4_input+0x240>)
 80181b4:	2200      	movs	r2, #0
 80181b6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80181b8:	2300      	movs	r3, #0
}
 80181ba:	4618      	mov	r0, r3
 80181bc:	3718      	adds	r7, #24
 80181be:	46bd      	mov	sp, r7
 80181c0:	bd80      	pop	{r7, pc}
 80181c2:	bf00      	nop
 80181c4:	200007fc 	.word	0x200007fc
 80181c8:	200070cc 	.word	0x200070cc

080181cc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80181cc:	b580      	push	{r7, lr}
 80181ce:	b08a      	sub	sp, #40	; 0x28
 80181d0:	af04      	add	r7, sp, #16
 80181d2:	60f8      	str	r0, [r7, #12]
 80181d4:	60b9      	str	r1, [r7, #8]
 80181d6:	607a      	str	r2, [r7, #4]
 80181d8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80181da:	68bb      	ldr	r3, [r7, #8]
 80181dc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	d009      	beq.n	80181f8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80181e4:	68bb      	ldr	r3, [r7, #8]
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d003      	beq.n	80181f2 <ip4_output_if+0x26>
 80181ea:	68bb      	ldr	r3, [r7, #8]
 80181ec:	681b      	ldr	r3, [r3, #0]
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	d102      	bne.n	80181f8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80181f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181f4:	3304      	adds	r3, #4
 80181f6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80181f8:	78fa      	ldrb	r2, [r7, #3]
 80181fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181fc:	9302      	str	r3, [sp, #8]
 80181fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018202:	9301      	str	r3, [sp, #4]
 8018204:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018208:	9300      	str	r3, [sp, #0]
 801820a:	4613      	mov	r3, r2
 801820c:	687a      	ldr	r2, [r7, #4]
 801820e:	6979      	ldr	r1, [r7, #20]
 8018210:	68f8      	ldr	r0, [r7, #12]
 8018212:	f000 f805 	bl	8018220 <ip4_output_if_src>
 8018216:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8018218:	4618      	mov	r0, r3
 801821a:	3718      	adds	r7, #24
 801821c:	46bd      	mov	sp, r7
 801821e:	bd80      	pop	{r7, pc}

08018220 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8018220:	b580      	push	{r7, lr}
 8018222:	b088      	sub	sp, #32
 8018224:	af00      	add	r7, sp, #0
 8018226:	60f8      	str	r0, [r7, #12]
 8018228:	60b9      	str	r1, [r7, #8]
 801822a:	607a      	str	r2, [r7, #4]
 801822c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801822e:	68fb      	ldr	r3, [r7, #12]
 8018230:	7b9b      	ldrb	r3, [r3, #14]
 8018232:	2b01      	cmp	r3, #1
 8018234:	d006      	beq.n	8018244 <ip4_output_if_src+0x24>
 8018236:	4b4b      	ldr	r3, [pc, #300]	; (8018364 <ip4_output_if_src+0x144>)
 8018238:	f44f 7255 	mov.w	r2, #852	; 0x354
 801823c:	494a      	ldr	r1, [pc, #296]	; (8018368 <ip4_output_if_src+0x148>)
 801823e:	484b      	ldr	r0, [pc, #300]	; (801836c <ip4_output_if_src+0x14c>)
 8018240:	f001 fd2e 	bl	8019ca0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	2b00      	cmp	r3, #0
 8018248:	d060      	beq.n	801830c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801824a:	2314      	movs	r3, #20
 801824c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801824e:	2114      	movs	r1, #20
 8018250:	68f8      	ldr	r0, [r7, #12]
 8018252:	f7f8 fdb7 	bl	8010dc4 <pbuf_add_header>
 8018256:	4603      	mov	r3, r0
 8018258:	2b00      	cmp	r3, #0
 801825a:	d002      	beq.n	8018262 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801825c:	f06f 0301 	mvn.w	r3, #1
 8018260:	e07c      	b.n	801835c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8018262:	68fb      	ldr	r3, [r7, #12]
 8018264:	685b      	ldr	r3, [r3, #4]
 8018266:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8018268:	68fb      	ldr	r3, [r7, #12]
 801826a:	895b      	ldrh	r3, [r3, #10]
 801826c:	2b13      	cmp	r3, #19
 801826e:	d806      	bhi.n	801827e <ip4_output_if_src+0x5e>
 8018270:	4b3c      	ldr	r3, [pc, #240]	; (8018364 <ip4_output_if_src+0x144>)
 8018272:	f44f 7262 	mov.w	r2, #904	; 0x388
 8018276:	493e      	ldr	r1, [pc, #248]	; (8018370 <ip4_output_if_src+0x150>)
 8018278:	483c      	ldr	r0, [pc, #240]	; (801836c <ip4_output_if_src+0x14c>)
 801827a:	f001 fd11 	bl	8019ca0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801827e:	69fb      	ldr	r3, [r7, #28]
 8018280:	78fa      	ldrb	r2, [r7, #3]
 8018282:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8018284:	69fb      	ldr	r3, [r7, #28]
 8018286:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801828a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	681a      	ldr	r2, [r3, #0]
 8018290:	69fb      	ldr	r3, [r7, #28]
 8018292:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8018294:	8b7b      	ldrh	r3, [r7, #26]
 8018296:	089b      	lsrs	r3, r3, #2
 8018298:	b29b      	uxth	r3, r3
 801829a:	b2db      	uxtb	r3, r3
 801829c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80182a0:	b2da      	uxtb	r2, r3
 80182a2:	69fb      	ldr	r3, [r7, #28]
 80182a4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80182a6:	69fb      	ldr	r3, [r7, #28]
 80182a8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80182ac:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80182ae:	68fb      	ldr	r3, [r7, #12]
 80182b0:	891b      	ldrh	r3, [r3, #8]
 80182b2:	4618      	mov	r0, r3
 80182b4:	f7f7 fa38 	bl	800f728 <lwip_htons>
 80182b8:	4603      	mov	r3, r0
 80182ba:	461a      	mov	r2, r3
 80182bc:	69fb      	ldr	r3, [r7, #28]
 80182be:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80182c0:	69fb      	ldr	r3, [r7, #28]
 80182c2:	2200      	movs	r2, #0
 80182c4:	719a      	strb	r2, [r3, #6]
 80182c6:	2200      	movs	r2, #0
 80182c8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80182ca:	4b2a      	ldr	r3, [pc, #168]	; (8018374 <ip4_output_if_src+0x154>)
 80182cc:	881b      	ldrh	r3, [r3, #0]
 80182ce:	4618      	mov	r0, r3
 80182d0:	f7f7 fa2a 	bl	800f728 <lwip_htons>
 80182d4:	4603      	mov	r3, r0
 80182d6:	461a      	mov	r2, r3
 80182d8:	69fb      	ldr	r3, [r7, #28]
 80182da:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80182dc:	4b25      	ldr	r3, [pc, #148]	; (8018374 <ip4_output_if_src+0x154>)
 80182de:	881b      	ldrh	r3, [r3, #0]
 80182e0:	3301      	adds	r3, #1
 80182e2:	b29a      	uxth	r2, r3
 80182e4:	4b23      	ldr	r3, [pc, #140]	; (8018374 <ip4_output_if_src+0x154>)
 80182e6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80182e8:	68bb      	ldr	r3, [r7, #8]
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d104      	bne.n	80182f8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80182ee:	4b22      	ldr	r3, [pc, #136]	; (8018378 <ip4_output_if_src+0x158>)
 80182f0:	681a      	ldr	r2, [r3, #0]
 80182f2:	69fb      	ldr	r3, [r7, #28]
 80182f4:	60da      	str	r2, [r3, #12]
 80182f6:	e003      	b.n	8018300 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80182f8:	68bb      	ldr	r3, [r7, #8]
 80182fa:	681a      	ldr	r2, [r3, #0]
 80182fc:	69fb      	ldr	r3, [r7, #28]
 80182fe:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8018300:	69fb      	ldr	r3, [r7, #28]
 8018302:	2200      	movs	r2, #0
 8018304:	729a      	strb	r2, [r3, #10]
 8018306:	2200      	movs	r2, #0
 8018308:	72da      	strb	r2, [r3, #11]
 801830a:	e00f      	b.n	801832c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801830c:	68fb      	ldr	r3, [r7, #12]
 801830e:	895b      	ldrh	r3, [r3, #10]
 8018310:	2b13      	cmp	r3, #19
 8018312:	d802      	bhi.n	801831a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018314:	f06f 0301 	mvn.w	r3, #1
 8018318:	e020      	b.n	801835c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801831a:	68fb      	ldr	r3, [r7, #12]
 801831c:	685b      	ldr	r3, [r3, #4]
 801831e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8018320:	69fb      	ldr	r3, [r7, #28]
 8018322:	691b      	ldr	r3, [r3, #16]
 8018324:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8018326:	f107 0314 	add.w	r3, r7, #20
 801832a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801832c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801832e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018330:	2b00      	cmp	r3, #0
 8018332:	d00c      	beq.n	801834e <ip4_output_if_src+0x12e>
 8018334:	68fb      	ldr	r3, [r7, #12]
 8018336:	891a      	ldrh	r2, [r3, #8]
 8018338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801833a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801833c:	429a      	cmp	r2, r3
 801833e:	d906      	bls.n	801834e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8018340:	687a      	ldr	r2, [r7, #4]
 8018342:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018344:	68f8      	ldr	r0, [r7, #12]
 8018346:	f000 fd53 	bl	8018df0 <ip4_frag>
 801834a:	4603      	mov	r3, r0
 801834c:	e006      	b.n	801835c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801834e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018350:	695b      	ldr	r3, [r3, #20]
 8018352:	687a      	ldr	r2, [r7, #4]
 8018354:	68f9      	ldr	r1, [r7, #12]
 8018356:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018358:	4798      	blx	r3
 801835a:	4603      	mov	r3, r0
}
 801835c:	4618      	mov	r0, r3
 801835e:	3720      	adds	r7, #32
 8018360:	46bd      	mov	sp, r7
 8018362:	bd80      	pop	{r7, pc}
 8018364:	0801ec60 	.word	0x0801ec60
 8018368:	0801ec94 	.word	0x0801ec94
 801836c:	0801eca0 	.word	0x0801eca0
 8018370:	0801ecc8 	.word	0x0801ecc8
 8018374:	2000722a 	.word	0x2000722a
 8018378:	0801f0c8 	.word	0x0801f0c8

0801837c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801837c:	b480      	push	{r7}
 801837e:	b085      	sub	sp, #20
 8018380:	af00      	add	r7, sp, #0
 8018382:	6078      	str	r0, [r7, #4]
 8018384:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8018386:	687b      	ldr	r3, [r7, #4]
 8018388:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018390:	d002      	beq.n	8018398 <ip4_addr_isbroadcast_u32+0x1c>
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	2b00      	cmp	r3, #0
 8018396:	d101      	bne.n	801839c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8018398:	2301      	movs	r3, #1
 801839a:	e02a      	b.n	80183f2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801839c:	683b      	ldr	r3, [r7, #0]
 801839e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80183a2:	f003 0302 	and.w	r3, r3, #2
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d101      	bne.n	80183ae <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80183aa:	2300      	movs	r3, #0
 80183ac:	e021      	b.n	80183f2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80183ae:	683b      	ldr	r3, [r7, #0]
 80183b0:	3304      	adds	r3, #4
 80183b2:	681b      	ldr	r3, [r3, #0]
 80183b4:	687a      	ldr	r2, [r7, #4]
 80183b6:	429a      	cmp	r2, r3
 80183b8:	d101      	bne.n	80183be <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80183ba:	2300      	movs	r3, #0
 80183bc:	e019      	b.n	80183f2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80183be:	68fa      	ldr	r2, [r7, #12]
 80183c0:	683b      	ldr	r3, [r7, #0]
 80183c2:	3304      	adds	r3, #4
 80183c4:	681b      	ldr	r3, [r3, #0]
 80183c6:	405a      	eors	r2, r3
 80183c8:	683b      	ldr	r3, [r7, #0]
 80183ca:	3308      	adds	r3, #8
 80183cc:	681b      	ldr	r3, [r3, #0]
 80183ce:	4013      	ands	r3, r2
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	d10d      	bne.n	80183f0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80183d4:	683b      	ldr	r3, [r7, #0]
 80183d6:	3308      	adds	r3, #8
 80183d8:	681b      	ldr	r3, [r3, #0]
 80183da:	43da      	mvns	r2, r3
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80183e0:	683b      	ldr	r3, [r7, #0]
 80183e2:	3308      	adds	r3, #8
 80183e4:	681b      	ldr	r3, [r3, #0]
 80183e6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80183e8:	429a      	cmp	r2, r3
 80183ea:	d101      	bne.n	80183f0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80183ec:	2301      	movs	r3, #1
 80183ee:	e000      	b.n	80183f2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80183f0:	2300      	movs	r3, #0
  }
}
 80183f2:	4618      	mov	r0, r3
 80183f4:	3714      	adds	r7, #20
 80183f6:	46bd      	mov	sp, r7
 80183f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183fc:	4770      	bx	lr
	...

08018400 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8018400:	b580      	push	{r7, lr}
 8018402:	b084      	sub	sp, #16
 8018404:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8018406:	2300      	movs	r3, #0
 8018408:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801840a:	4b12      	ldr	r3, [pc, #72]	; (8018454 <ip_reass_tmr+0x54>)
 801840c:	681b      	ldr	r3, [r3, #0]
 801840e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8018410:	e018      	b.n	8018444 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8018412:	68fb      	ldr	r3, [r7, #12]
 8018414:	7fdb      	ldrb	r3, [r3, #31]
 8018416:	2b00      	cmp	r3, #0
 8018418:	d00b      	beq.n	8018432 <ip_reass_tmr+0x32>
      r->timer--;
 801841a:	68fb      	ldr	r3, [r7, #12]
 801841c:	7fdb      	ldrb	r3, [r3, #31]
 801841e:	3b01      	subs	r3, #1
 8018420:	b2da      	uxtb	r2, r3
 8018422:	68fb      	ldr	r3, [r7, #12]
 8018424:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8018426:	68fb      	ldr	r3, [r7, #12]
 8018428:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801842a:	68fb      	ldr	r3, [r7, #12]
 801842c:	681b      	ldr	r3, [r3, #0]
 801842e:	60fb      	str	r3, [r7, #12]
 8018430:	e008      	b.n	8018444 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8018432:	68fb      	ldr	r3, [r7, #12]
 8018434:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8018436:	68fb      	ldr	r3, [r7, #12]
 8018438:	681b      	ldr	r3, [r3, #0]
 801843a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801843c:	68b9      	ldr	r1, [r7, #8]
 801843e:	6878      	ldr	r0, [r7, #4]
 8018440:	f000 f80a 	bl	8018458 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8018444:	68fb      	ldr	r3, [r7, #12]
 8018446:	2b00      	cmp	r3, #0
 8018448:	d1e3      	bne.n	8018412 <ip_reass_tmr+0x12>
    }
  }
}
 801844a:	bf00      	nop
 801844c:	bf00      	nop
 801844e:	3710      	adds	r7, #16
 8018450:	46bd      	mov	sp, r7
 8018452:	bd80      	pop	{r7, pc}
 8018454:	2000722c 	.word	0x2000722c

08018458 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018458:	b580      	push	{r7, lr}
 801845a:	b088      	sub	sp, #32
 801845c:	af00      	add	r7, sp, #0
 801845e:	6078      	str	r0, [r7, #4]
 8018460:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8018462:	2300      	movs	r3, #0
 8018464:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8018466:	683a      	ldr	r2, [r7, #0]
 8018468:	687b      	ldr	r3, [r7, #4]
 801846a:	429a      	cmp	r2, r3
 801846c:	d105      	bne.n	801847a <ip_reass_free_complete_datagram+0x22>
 801846e:	4b45      	ldr	r3, [pc, #276]	; (8018584 <ip_reass_free_complete_datagram+0x12c>)
 8018470:	22ab      	movs	r2, #171	; 0xab
 8018472:	4945      	ldr	r1, [pc, #276]	; (8018588 <ip_reass_free_complete_datagram+0x130>)
 8018474:	4845      	ldr	r0, [pc, #276]	; (801858c <ip_reass_free_complete_datagram+0x134>)
 8018476:	f001 fc13 	bl	8019ca0 <iprintf>
  if (prev != NULL) {
 801847a:	683b      	ldr	r3, [r7, #0]
 801847c:	2b00      	cmp	r3, #0
 801847e:	d00a      	beq.n	8018496 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8018480:	683b      	ldr	r3, [r7, #0]
 8018482:	681b      	ldr	r3, [r3, #0]
 8018484:	687a      	ldr	r2, [r7, #4]
 8018486:	429a      	cmp	r2, r3
 8018488:	d005      	beq.n	8018496 <ip_reass_free_complete_datagram+0x3e>
 801848a:	4b3e      	ldr	r3, [pc, #248]	; (8018584 <ip_reass_free_complete_datagram+0x12c>)
 801848c:	22ad      	movs	r2, #173	; 0xad
 801848e:	4940      	ldr	r1, [pc, #256]	; (8018590 <ip_reass_free_complete_datagram+0x138>)
 8018490:	483e      	ldr	r0, [pc, #248]	; (801858c <ip_reass_free_complete_datagram+0x134>)
 8018492:	f001 fc05 	bl	8019ca0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	685b      	ldr	r3, [r3, #4]
 801849a:	685b      	ldr	r3, [r3, #4]
 801849c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801849e:	697b      	ldr	r3, [r7, #20]
 80184a0:	889b      	ldrh	r3, [r3, #4]
 80184a2:	b29b      	uxth	r3, r3
 80184a4:	2b00      	cmp	r3, #0
 80184a6:	d12a      	bne.n	80184fe <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	685b      	ldr	r3, [r3, #4]
 80184ac:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80184ae:	697b      	ldr	r3, [r7, #20]
 80184b0:	681a      	ldr	r2, [r3, #0]
 80184b2:	687b      	ldr	r3, [r7, #4]
 80184b4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80184b6:	69bb      	ldr	r3, [r7, #24]
 80184b8:	6858      	ldr	r0, [r3, #4]
 80184ba:	687b      	ldr	r3, [r7, #4]
 80184bc:	3308      	adds	r3, #8
 80184be:	2214      	movs	r2, #20
 80184c0:	4619      	mov	r1, r3
 80184c2:	f001 fdbc 	bl	801a03e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80184c6:	2101      	movs	r1, #1
 80184c8:	69b8      	ldr	r0, [r7, #24]
 80184ca:	f7ff fc3d 	bl	8017d48 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80184ce:	69b8      	ldr	r0, [r7, #24]
 80184d0:	f7f8 fd96 	bl	8011000 <pbuf_clen>
 80184d4:	4603      	mov	r3, r0
 80184d6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80184d8:	8bfa      	ldrh	r2, [r7, #30]
 80184da:	8a7b      	ldrh	r3, [r7, #18]
 80184dc:	4413      	add	r3, r2
 80184de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80184e2:	db05      	blt.n	80184f0 <ip_reass_free_complete_datagram+0x98>
 80184e4:	4b27      	ldr	r3, [pc, #156]	; (8018584 <ip_reass_free_complete_datagram+0x12c>)
 80184e6:	22bc      	movs	r2, #188	; 0xbc
 80184e8:	492a      	ldr	r1, [pc, #168]	; (8018594 <ip_reass_free_complete_datagram+0x13c>)
 80184ea:	4828      	ldr	r0, [pc, #160]	; (801858c <ip_reass_free_complete_datagram+0x134>)
 80184ec:	f001 fbd8 	bl	8019ca0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80184f0:	8bfa      	ldrh	r2, [r7, #30]
 80184f2:	8a7b      	ldrh	r3, [r7, #18]
 80184f4:	4413      	add	r3, r2
 80184f6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80184f8:	69b8      	ldr	r0, [r7, #24]
 80184fa:	f7f8 fcf9 	bl	8010ef0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	685b      	ldr	r3, [r3, #4]
 8018502:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8018504:	e01f      	b.n	8018546 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8018506:	69bb      	ldr	r3, [r7, #24]
 8018508:	685b      	ldr	r3, [r3, #4]
 801850a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801850c:	69bb      	ldr	r3, [r7, #24]
 801850e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8018510:	697b      	ldr	r3, [r7, #20]
 8018512:	681b      	ldr	r3, [r3, #0]
 8018514:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8018516:	68f8      	ldr	r0, [r7, #12]
 8018518:	f7f8 fd72 	bl	8011000 <pbuf_clen>
 801851c:	4603      	mov	r3, r0
 801851e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018520:	8bfa      	ldrh	r2, [r7, #30]
 8018522:	8a7b      	ldrh	r3, [r7, #18]
 8018524:	4413      	add	r3, r2
 8018526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801852a:	db05      	blt.n	8018538 <ip_reass_free_complete_datagram+0xe0>
 801852c:	4b15      	ldr	r3, [pc, #84]	; (8018584 <ip_reass_free_complete_datagram+0x12c>)
 801852e:	22cc      	movs	r2, #204	; 0xcc
 8018530:	4918      	ldr	r1, [pc, #96]	; (8018594 <ip_reass_free_complete_datagram+0x13c>)
 8018532:	4816      	ldr	r0, [pc, #88]	; (801858c <ip_reass_free_complete_datagram+0x134>)
 8018534:	f001 fbb4 	bl	8019ca0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018538:	8bfa      	ldrh	r2, [r7, #30]
 801853a:	8a7b      	ldrh	r3, [r7, #18]
 801853c:	4413      	add	r3, r2
 801853e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8018540:	68f8      	ldr	r0, [r7, #12]
 8018542:	f7f8 fcd5 	bl	8010ef0 <pbuf_free>
  while (p != NULL) {
 8018546:	69bb      	ldr	r3, [r7, #24]
 8018548:	2b00      	cmp	r3, #0
 801854a:	d1dc      	bne.n	8018506 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801854c:	6839      	ldr	r1, [r7, #0]
 801854e:	6878      	ldr	r0, [r7, #4]
 8018550:	f000 f8c2 	bl	80186d8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8018554:	4b10      	ldr	r3, [pc, #64]	; (8018598 <ip_reass_free_complete_datagram+0x140>)
 8018556:	881b      	ldrh	r3, [r3, #0]
 8018558:	8bfa      	ldrh	r2, [r7, #30]
 801855a:	429a      	cmp	r2, r3
 801855c:	d905      	bls.n	801856a <ip_reass_free_complete_datagram+0x112>
 801855e:	4b09      	ldr	r3, [pc, #36]	; (8018584 <ip_reass_free_complete_datagram+0x12c>)
 8018560:	22d2      	movs	r2, #210	; 0xd2
 8018562:	490e      	ldr	r1, [pc, #56]	; (801859c <ip_reass_free_complete_datagram+0x144>)
 8018564:	4809      	ldr	r0, [pc, #36]	; (801858c <ip_reass_free_complete_datagram+0x134>)
 8018566:	f001 fb9b 	bl	8019ca0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801856a:	4b0b      	ldr	r3, [pc, #44]	; (8018598 <ip_reass_free_complete_datagram+0x140>)
 801856c:	881a      	ldrh	r2, [r3, #0]
 801856e:	8bfb      	ldrh	r3, [r7, #30]
 8018570:	1ad3      	subs	r3, r2, r3
 8018572:	b29a      	uxth	r2, r3
 8018574:	4b08      	ldr	r3, [pc, #32]	; (8018598 <ip_reass_free_complete_datagram+0x140>)
 8018576:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8018578:	8bfb      	ldrh	r3, [r7, #30]
}
 801857a:	4618      	mov	r0, r3
 801857c:	3720      	adds	r7, #32
 801857e:	46bd      	mov	sp, r7
 8018580:	bd80      	pop	{r7, pc}
 8018582:	bf00      	nop
 8018584:	0801ecf8 	.word	0x0801ecf8
 8018588:	0801ed34 	.word	0x0801ed34
 801858c:	0801ed40 	.word	0x0801ed40
 8018590:	0801ed68 	.word	0x0801ed68
 8018594:	0801ed7c 	.word	0x0801ed7c
 8018598:	20007230 	.word	0x20007230
 801859c:	0801ed9c 	.word	0x0801ed9c

080185a0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80185a0:	b580      	push	{r7, lr}
 80185a2:	b08a      	sub	sp, #40	; 0x28
 80185a4:	af00      	add	r7, sp, #0
 80185a6:	6078      	str	r0, [r7, #4]
 80185a8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80185aa:	2300      	movs	r3, #0
 80185ac:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80185ae:	2300      	movs	r3, #0
 80185b0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80185b2:	2300      	movs	r3, #0
 80185b4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80185b6:	2300      	movs	r3, #0
 80185b8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80185ba:	2300      	movs	r3, #0
 80185bc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80185be:	4b28      	ldr	r3, [pc, #160]	; (8018660 <ip_reass_remove_oldest_datagram+0xc0>)
 80185c0:	681b      	ldr	r3, [r3, #0]
 80185c2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80185c4:	e030      	b.n	8018628 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80185c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185c8:	695a      	ldr	r2, [r3, #20]
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	68db      	ldr	r3, [r3, #12]
 80185ce:	429a      	cmp	r2, r3
 80185d0:	d10c      	bne.n	80185ec <ip_reass_remove_oldest_datagram+0x4c>
 80185d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185d4:	699a      	ldr	r2, [r3, #24]
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	691b      	ldr	r3, [r3, #16]
 80185da:	429a      	cmp	r2, r3
 80185dc:	d106      	bne.n	80185ec <ip_reass_remove_oldest_datagram+0x4c>
 80185de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185e0:	899a      	ldrh	r2, [r3, #12]
 80185e2:	687b      	ldr	r3, [r7, #4]
 80185e4:	889b      	ldrh	r3, [r3, #4]
 80185e6:	b29b      	uxth	r3, r3
 80185e8:	429a      	cmp	r2, r3
 80185ea:	d014      	beq.n	8018616 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80185ec:	693b      	ldr	r3, [r7, #16]
 80185ee:	3301      	adds	r3, #1
 80185f0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80185f2:	6a3b      	ldr	r3, [r7, #32]
 80185f4:	2b00      	cmp	r3, #0
 80185f6:	d104      	bne.n	8018602 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80185f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185fa:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80185fc:	69fb      	ldr	r3, [r7, #28]
 80185fe:	61bb      	str	r3, [r7, #24]
 8018600:	e009      	b.n	8018616 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8018602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018604:	7fda      	ldrb	r2, [r3, #31]
 8018606:	6a3b      	ldr	r3, [r7, #32]
 8018608:	7fdb      	ldrb	r3, [r3, #31]
 801860a:	429a      	cmp	r2, r3
 801860c:	d803      	bhi.n	8018616 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801860e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018610:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018612:	69fb      	ldr	r3, [r7, #28]
 8018614:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8018616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018618:	681b      	ldr	r3, [r3, #0]
 801861a:	2b00      	cmp	r3, #0
 801861c:	d001      	beq.n	8018622 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801861e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018620:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8018622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018624:	681b      	ldr	r3, [r3, #0]
 8018626:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801862a:	2b00      	cmp	r3, #0
 801862c:	d1cb      	bne.n	80185c6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801862e:	6a3b      	ldr	r3, [r7, #32]
 8018630:	2b00      	cmp	r3, #0
 8018632:	d008      	beq.n	8018646 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8018634:	69b9      	ldr	r1, [r7, #24]
 8018636:	6a38      	ldr	r0, [r7, #32]
 8018638:	f7ff ff0e 	bl	8018458 <ip_reass_free_complete_datagram>
 801863c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801863e:	697a      	ldr	r2, [r7, #20]
 8018640:	68fb      	ldr	r3, [r7, #12]
 8018642:	4413      	add	r3, r2
 8018644:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8018646:	697a      	ldr	r2, [r7, #20]
 8018648:	683b      	ldr	r3, [r7, #0]
 801864a:	429a      	cmp	r2, r3
 801864c:	da02      	bge.n	8018654 <ip_reass_remove_oldest_datagram+0xb4>
 801864e:	693b      	ldr	r3, [r7, #16]
 8018650:	2b01      	cmp	r3, #1
 8018652:	dcac      	bgt.n	80185ae <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8018654:	697b      	ldr	r3, [r7, #20]
}
 8018656:	4618      	mov	r0, r3
 8018658:	3728      	adds	r7, #40	; 0x28
 801865a:	46bd      	mov	sp, r7
 801865c:	bd80      	pop	{r7, pc}
 801865e:	bf00      	nop
 8018660:	2000722c 	.word	0x2000722c

08018664 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8018664:	b580      	push	{r7, lr}
 8018666:	b084      	sub	sp, #16
 8018668:	af00      	add	r7, sp, #0
 801866a:	6078      	str	r0, [r7, #4]
 801866c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801866e:	2004      	movs	r0, #4
 8018670:	f7f7 fd78 	bl	8010164 <memp_malloc>
 8018674:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8018676:	68fb      	ldr	r3, [r7, #12]
 8018678:	2b00      	cmp	r3, #0
 801867a:	d110      	bne.n	801869e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801867c:	6839      	ldr	r1, [r7, #0]
 801867e:	6878      	ldr	r0, [r7, #4]
 8018680:	f7ff ff8e 	bl	80185a0 <ip_reass_remove_oldest_datagram>
 8018684:	4602      	mov	r2, r0
 8018686:	683b      	ldr	r3, [r7, #0]
 8018688:	4293      	cmp	r3, r2
 801868a:	dc03      	bgt.n	8018694 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801868c:	2004      	movs	r0, #4
 801868e:	f7f7 fd69 	bl	8010164 <memp_malloc>
 8018692:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018694:	68fb      	ldr	r3, [r7, #12]
 8018696:	2b00      	cmp	r3, #0
 8018698:	d101      	bne.n	801869e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801869a:	2300      	movs	r3, #0
 801869c:	e016      	b.n	80186cc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801869e:	2220      	movs	r2, #32
 80186a0:	2100      	movs	r1, #0
 80186a2:	68f8      	ldr	r0, [r7, #12]
 80186a4:	f001 fc52 	bl	8019f4c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80186a8:	68fb      	ldr	r3, [r7, #12]
 80186aa:	220f      	movs	r2, #15
 80186ac:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80186ae:	4b09      	ldr	r3, [pc, #36]	; (80186d4 <ip_reass_enqueue_new_datagram+0x70>)
 80186b0:	681a      	ldr	r2, [r3, #0]
 80186b2:	68fb      	ldr	r3, [r7, #12]
 80186b4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80186b6:	4a07      	ldr	r2, [pc, #28]	; (80186d4 <ip_reass_enqueue_new_datagram+0x70>)
 80186b8:	68fb      	ldr	r3, [r7, #12]
 80186ba:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80186bc:	68fb      	ldr	r3, [r7, #12]
 80186be:	3308      	adds	r3, #8
 80186c0:	2214      	movs	r2, #20
 80186c2:	6879      	ldr	r1, [r7, #4]
 80186c4:	4618      	mov	r0, r3
 80186c6:	f001 fcba 	bl	801a03e <memcpy>
  return ipr;
 80186ca:	68fb      	ldr	r3, [r7, #12]
}
 80186cc:	4618      	mov	r0, r3
 80186ce:	3710      	adds	r7, #16
 80186d0:	46bd      	mov	sp, r7
 80186d2:	bd80      	pop	{r7, pc}
 80186d4:	2000722c 	.word	0x2000722c

080186d8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80186d8:	b580      	push	{r7, lr}
 80186da:	b082      	sub	sp, #8
 80186dc:	af00      	add	r7, sp, #0
 80186de:	6078      	str	r0, [r7, #4]
 80186e0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80186e2:	4b10      	ldr	r3, [pc, #64]	; (8018724 <ip_reass_dequeue_datagram+0x4c>)
 80186e4:	681b      	ldr	r3, [r3, #0]
 80186e6:	687a      	ldr	r2, [r7, #4]
 80186e8:	429a      	cmp	r2, r3
 80186ea:	d104      	bne.n	80186f6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	681b      	ldr	r3, [r3, #0]
 80186f0:	4a0c      	ldr	r2, [pc, #48]	; (8018724 <ip_reass_dequeue_datagram+0x4c>)
 80186f2:	6013      	str	r3, [r2, #0]
 80186f4:	e00d      	b.n	8018712 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80186f6:	683b      	ldr	r3, [r7, #0]
 80186f8:	2b00      	cmp	r3, #0
 80186fa:	d106      	bne.n	801870a <ip_reass_dequeue_datagram+0x32>
 80186fc:	4b0a      	ldr	r3, [pc, #40]	; (8018728 <ip_reass_dequeue_datagram+0x50>)
 80186fe:	f240 1245 	movw	r2, #325	; 0x145
 8018702:	490a      	ldr	r1, [pc, #40]	; (801872c <ip_reass_dequeue_datagram+0x54>)
 8018704:	480a      	ldr	r0, [pc, #40]	; (8018730 <ip_reass_dequeue_datagram+0x58>)
 8018706:	f001 facb 	bl	8019ca0 <iprintf>
    prev->next = ipr->next;
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	681a      	ldr	r2, [r3, #0]
 801870e:	683b      	ldr	r3, [r7, #0]
 8018710:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8018712:	6879      	ldr	r1, [r7, #4]
 8018714:	2004      	movs	r0, #4
 8018716:	f7f7 fd95 	bl	8010244 <memp_free>
}
 801871a:	bf00      	nop
 801871c:	3708      	adds	r7, #8
 801871e:	46bd      	mov	sp, r7
 8018720:	bd80      	pop	{r7, pc}
 8018722:	bf00      	nop
 8018724:	2000722c 	.word	0x2000722c
 8018728:	0801ecf8 	.word	0x0801ecf8
 801872c:	0801edc0 	.word	0x0801edc0
 8018730:	0801ed40 	.word	0x0801ed40

08018734 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8018734:	b580      	push	{r7, lr}
 8018736:	b08c      	sub	sp, #48	; 0x30
 8018738:	af00      	add	r7, sp, #0
 801873a:	60f8      	str	r0, [r7, #12]
 801873c:	60b9      	str	r1, [r7, #8]
 801873e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8018740:	2300      	movs	r3, #0
 8018742:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8018744:	2301      	movs	r3, #1
 8018746:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8018748:	68bb      	ldr	r3, [r7, #8]
 801874a:	685b      	ldr	r3, [r3, #4]
 801874c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801874e:	69fb      	ldr	r3, [r7, #28]
 8018750:	885b      	ldrh	r3, [r3, #2]
 8018752:	b29b      	uxth	r3, r3
 8018754:	4618      	mov	r0, r3
 8018756:	f7f6 ffe7 	bl	800f728 <lwip_htons>
 801875a:	4603      	mov	r3, r0
 801875c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801875e:	69fb      	ldr	r3, [r7, #28]
 8018760:	781b      	ldrb	r3, [r3, #0]
 8018762:	f003 030f 	and.w	r3, r3, #15
 8018766:	b2db      	uxtb	r3, r3
 8018768:	009b      	lsls	r3, r3, #2
 801876a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801876c:	7e7b      	ldrb	r3, [r7, #25]
 801876e:	b29b      	uxth	r3, r3
 8018770:	8b7a      	ldrh	r2, [r7, #26]
 8018772:	429a      	cmp	r2, r3
 8018774:	d202      	bcs.n	801877c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018776:	f04f 33ff 	mov.w	r3, #4294967295
 801877a:	e135      	b.n	80189e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801877c:	7e7b      	ldrb	r3, [r7, #25]
 801877e:	b29b      	uxth	r3, r3
 8018780:	8b7a      	ldrh	r2, [r7, #26]
 8018782:	1ad3      	subs	r3, r2, r3
 8018784:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8018786:	69fb      	ldr	r3, [r7, #28]
 8018788:	88db      	ldrh	r3, [r3, #6]
 801878a:	b29b      	uxth	r3, r3
 801878c:	4618      	mov	r0, r3
 801878e:	f7f6 ffcb 	bl	800f728 <lwip_htons>
 8018792:	4603      	mov	r3, r0
 8018794:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018798:	b29b      	uxth	r3, r3
 801879a:	00db      	lsls	r3, r3, #3
 801879c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801879e:	68bb      	ldr	r3, [r7, #8]
 80187a0:	685b      	ldr	r3, [r3, #4]
 80187a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80187a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187a6:	2200      	movs	r2, #0
 80187a8:	701a      	strb	r2, [r3, #0]
 80187aa:	2200      	movs	r2, #0
 80187ac:	705a      	strb	r2, [r3, #1]
 80187ae:	2200      	movs	r2, #0
 80187b0:	709a      	strb	r2, [r3, #2]
 80187b2:	2200      	movs	r2, #0
 80187b4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80187b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187b8:	8afa      	ldrh	r2, [r7, #22]
 80187ba:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80187bc:	8afa      	ldrh	r2, [r7, #22]
 80187be:	8b7b      	ldrh	r3, [r7, #26]
 80187c0:	4413      	add	r3, r2
 80187c2:	b29a      	uxth	r2, r3
 80187c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187c6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80187c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187ca:	88db      	ldrh	r3, [r3, #6]
 80187cc:	b29b      	uxth	r3, r3
 80187ce:	8afa      	ldrh	r2, [r7, #22]
 80187d0:	429a      	cmp	r2, r3
 80187d2:	d902      	bls.n	80187da <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80187d4:	f04f 33ff 	mov.w	r3, #4294967295
 80187d8:	e106      	b.n	80189e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80187da:	68fb      	ldr	r3, [r7, #12]
 80187dc:	685b      	ldr	r3, [r3, #4]
 80187de:	627b      	str	r3, [r7, #36]	; 0x24
 80187e0:	e068      	b.n	80188b4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80187e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187e4:	685b      	ldr	r3, [r3, #4]
 80187e6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80187e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187ea:	889b      	ldrh	r3, [r3, #4]
 80187ec:	b29a      	uxth	r2, r3
 80187ee:	693b      	ldr	r3, [r7, #16]
 80187f0:	889b      	ldrh	r3, [r3, #4]
 80187f2:	b29b      	uxth	r3, r3
 80187f4:	429a      	cmp	r2, r3
 80187f6:	d235      	bcs.n	8018864 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80187f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80187fc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80187fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018800:	2b00      	cmp	r3, #0
 8018802:	d020      	beq.n	8018846 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8018804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018806:	889b      	ldrh	r3, [r3, #4]
 8018808:	b29a      	uxth	r2, r3
 801880a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801880c:	88db      	ldrh	r3, [r3, #6]
 801880e:	b29b      	uxth	r3, r3
 8018810:	429a      	cmp	r2, r3
 8018812:	d307      	bcc.n	8018824 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8018814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018816:	88db      	ldrh	r3, [r3, #6]
 8018818:	b29a      	uxth	r2, r3
 801881a:	693b      	ldr	r3, [r7, #16]
 801881c:	889b      	ldrh	r3, [r3, #4]
 801881e:	b29b      	uxth	r3, r3
 8018820:	429a      	cmp	r2, r3
 8018822:	d902      	bls.n	801882a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018824:	f04f 33ff 	mov.w	r3, #4294967295
 8018828:	e0de      	b.n	80189e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801882a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801882c:	68ba      	ldr	r2, [r7, #8]
 801882e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8018830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018832:	88db      	ldrh	r3, [r3, #6]
 8018834:	b29a      	uxth	r2, r3
 8018836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018838:	889b      	ldrh	r3, [r3, #4]
 801883a:	b29b      	uxth	r3, r3
 801883c:	429a      	cmp	r2, r3
 801883e:	d03d      	beq.n	80188bc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018840:	2300      	movs	r3, #0
 8018842:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8018844:	e03a      	b.n	80188bc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8018846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018848:	88db      	ldrh	r3, [r3, #6]
 801884a:	b29a      	uxth	r2, r3
 801884c:	693b      	ldr	r3, [r7, #16]
 801884e:	889b      	ldrh	r3, [r3, #4]
 8018850:	b29b      	uxth	r3, r3
 8018852:	429a      	cmp	r2, r3
 8018854:	d902      	bls.n	801885c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018856:	f04f 33ff 	mov.w	r3, #4294967295
 801885a:	e0c5      	b.n	80189e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801885c:	68fb      	ldr	r3, [r7, #12]
 801885e:	68ba      	ldr	r2, [r7, #8]
 8018860:	605a      	str	r2, [r3, #4]
      break;
 8018862:	e02b      	b.n	80188bc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8018864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018866:	889b      	ldrh	r3, [r3, #4]
 8018868:	b29a      	uxth	r2, r3
 801886a:	693b      	ldr	r3, [r7, #16]
 801886c:	889b      	ldrh	r3, [r3, #4]
 801886e:	b29b      	uxth	r3, r3
 8018870:	429a      	cmp	r2, r3
 8018872:	d102      	bne.n	801887a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018874:	f04f 33ff 	mov.w	r3, #4294967295
 8018878:	e0b6      	b.n	80189e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801887a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801887c:	889b      	ldrh	r3, [r3, #4]
 801887e:	b29a      	uxth	r2, r3
 8018880:	693b      	ldr	r3, [r7, #16]
 8018882:	88db      	ldrh	r3, [r3, #6]
 8018884:	b29b      	uxth	r3, r3
 8018886:	429a      	cmp	r2, r3
 8018888:	d202      	bcs.n	8018890 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801888a:	f04f 33ff 	mov.w	r3, #4294967295
 801888e:	e0ab      	b.n	80189e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8018890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018892:	2b00      	cmp	r3, #0
 8018894:	d009      	beq.n	80188aa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8018896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018898:	88db      	ldrh	r3, [r3, #6]
 801889a:	b29a      	uxth	r2, r3
 801889c:	693b      	ldr	r3, [r7, #16]
 801889e:	889b      	ldrh	r3, [r3, #4]
 80188a0:	b29b      	uxth	r3, r3
 80188a2:	429a      	cmp	r2, r3
 80188a4:	d001      	beq.n	80188aa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80188a6:	2300      	movs	r3, #0
 80188a8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80188aa:	693b      	ldr	r3, [r7, #16]
 80188ac:	681b      	ldr	r3, [r3, #0]
 80188ae:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80188b0:	693b      	ldr	r3, [r7, #16]
 80188b2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80188b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d193      	bne.n	80187e2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80188ba:	e000      	b.n	80188be <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80188bc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80188be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	d12d      	bne.n	8018920 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80188c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	d01c      	beq.n	8018904 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80188ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188cc:	88db      	ldrh	r3, [r3, #6]
 80188ce:	b29a      	uxth	r2, r3
 80188d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188d2:	889b      	ldrh	r3, [r3, #4]
 80188d4:	b29b      	uxth	r3, r3
 80188d6:	429a      	cmp	r2, r3
 80188d8:	d906      	bls.n	80188e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80188da:	4b45      	ldr	r3, [pc, #276]	; (80189f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80188dc:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80188e0:	4944      	ldr	r1, [pc, #272]	; (80189f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80188e2:	4845      	ldr	r0, [pc, #276]	; (80189f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80188e4:	f001 f9dc 	bl	8019ca0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80188e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188ea:	68ba      	ldr	r2, [r7, #8]
 80188ec:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80188ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188f0:	88db      	ldrh	r3, [r3, #6]
 80188f2:	b29a      	uxth	r2, r3
 80188f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188f6:	889b      	ldrh	r3, [r3, #4]
 80188f8:	b29b      	uxth	r3, r3
 80188fa:	429a      	cmp	r2, r3
 80188fc:	d010      	beq.n	8018920 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80188fe:	2300      	movs	r3, #0
 8018900:	623b      	str	r3, [r7, #32]
 8018902:	e00d      	b.n	8018920 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8018904:	68fb      	ldr	r3, [r7, #12]
 8018906:	685b      	ldr	r3, [r3, #4]
 8018908:	2b00      	cmp	r3, #0
 801890a:	d006      	beq.n	801891a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801890c:	4b38      	ldr	r3, [pc, #224]	; (80189f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801890e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8018912:	493a      	ldr	r1, [pc, #232]	; (80189fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8018914:	4838      	ldr	r0, [pc, #224]	; (80189f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018916:	f001 f9c3 	bl	8019ca0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801891a:	68fb      	ldr	r3, [r7, #12]
 801891c:	68ba      	ldr	r2, [r7, #8]
 801891e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	2b00      	cmp	r3, #0
 8018924:	d105      	bne.n	8018932 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8018926:	68fb      	ldr	r3, [r7, #12]
 8018928:	7f9b      	ldrb	r3, [r3, #30]
 801892a:	f003 0301 	and.w	r3, r3, #1
 801892e:	2b00      	cmp	r3, #0
 8018930:	d059      	beq.n	80189e6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8018932:	6a3b      	ldr	r3, [r7, #32]
 8018934:	2b00      	cmp	r3, #0
 8018936:	d04f      	beq.n	80189d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8018938:	68fb      	ldr	r3, [r7, #12]
 801893a:	685b      	ldr	r3, [r3, #4]
 801893c:	2b00      	cmp	r3, #0
 801893e:	d006      	beq.n	801894e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8018940:	68fb      	ldr	r3, [r7, #12]
 8018942:	685b      	ldr	r3, [r3, #4]
 8018944:	685b      	ldr	r3, [r3, #4]
 8018946:	889b      	ldrh	r3, [r3, #4]
 8018948:	b29b      	uxth	r3, r3
 801894a:	2b00      	cmp	r3, #0
 801894c:	d002      	beq.n	8018954 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801894e:	2300      	movs	r3, #0
 8018950:	623b      	str	r3, [r7, #32]
 8018952:	e041      	b.n	80189d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018956:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8018958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801895a:	681b      	ldr	r3, [r3, #0]
 801895c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801895e:	e012      	b.n	8018986 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8018960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018962:	685b      	ldr	r3, [r3, #4]
 8018964:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8018966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018968:	88db      	ldrh	r3, [r3, #6]
 801896a:	b29a      	uxth	r2, r3
 801896c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801896e:	889b      	ldrh	r3, [r3, #4]
 8018970:	b29b      	uxth	r3, r3
 8018972:	429a      	cmp	r2, r3
 8018974:	d002      	beq.n	801897c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8018976:	2300      	movs	r3, #0
 8018978:	623b      	str	r3, [r7, #32]
            break;
 801897a:	e007      	b.n	801898c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801897c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801897e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8018980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018982:	681b      	ldr	r3, [r3, #0]
 8018984:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018988:	2b00      	cmp	r3, #0
 801898a:	d1e9      	bne.n	8018960 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801898c:	6a3b      	ldr	r3, [r7, #32]
 801898e:	2b00      	cmp	r3, #0
 8018990:	d022      	beq.n	80189d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8018992:	68fb      	ldr	r3, [r7, #12]
 8018994:	685b      	ldr	r3, [r3, #4]
 8018996:	2b00      	cmp	r3, #0
 8018998:	d106      	bne.n	80189a8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801899a:	4b15      	ldr	r3, [pc, #84]	; (80189f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801899c:	f240 12df 	movw	r2, #479	; 0x1df
 80189a0:	4917      	ldr	r1, [pc, #92]	; (8018a00 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80189a2:	4815      	ldr	r0, [pc, #84]	; (80189f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80189a4:	f001 f97c 	bl	8019ca0 <iprintf>
          LWIP_ASSERT("sanity check",
 80189a8:	68fb      	ldr	r3, [r7, #12]
 80189aa:	685b      	ldr	r3, [r3, #4]
 80189ac:	685b      	ldr	r3, [r3, #4]
 80189ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80189b0:	429a      	cmp	r2, r3
 80189b2:	d106      	bne.n	80189c2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80189b4:	4b0e      	ldr	r3, [pc, #56]	; (80189f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80189b6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80189ba:	4911      	ldr	r1, [pc, #68]	; (8018a00 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80189bc:	480e      	ldr	r0, [pc, #56]	; (80189f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80189be:	f001 f96f 	bl	8019ca0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80189c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189c4:	681b      	ldr	r3, [r3, #0]
 80189c6:	2b00      	cmp	r3, #0
 80189c8:	d006      	beq.n	80189d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80189ca:	4b09      	ldr	r3, [pc, #36]	; (80189f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80189cc:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80189d0:	490c      	ldr	r1, [pc, #48]	; (8018a04 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80189d2:	4809      	ldr	r0, [pc, #36]	; (80189f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80189d4:	f001 f964 	bl	8019ca0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80189d8:	6a3b      	ldr	r3, [r7, #32]
 80189da:	2b00      	cmp	r3, #0
 80189dc:	bf14      	ite	ne
 80189de:	2301      	movne	r3, #1
 80189e0:	2300      	moveq	r3, #0
 80189e2:	b2db      	uxtb	r3, r3
 80189e4:	e000      	b.n	80189e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80189e6:	2300      	movs	r3, #0
}
 80189e8:	4618      	mov	r0, r3
 80189ea:	3730      	adds	r7, #48	; 0x30
 80189ec:	46bd      	mov	sp, r7
 80189ee:	bd80      	pop	{r7, pc}
 80189f0:	0801ecf8 	.word	0x0801ecf8
 80189f4:	0801eddc 	.word	0x0801eddc
 80189f8:	0801ed40 	.word	0x0801ed40
 80189fc:	0801edfc 	.word	0x0801edfc
 8018a00:	0801ee34 	.word	0x0801ee34
 8018a04:	0801ee44 	.word	0x0801ee44

08018a08 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8018a08:	b580      	push	{r7, lr}
 8018a0a:	b08e      	sub	sp, #56	; 0x38
 8018a0c:	af00      	add	r7, sp, #0
 8018a0e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8018a10:	687b      	ldr	r3, [r7, #4]
 8018a12:	685b      	ldr	r3, [r3, #4]
 8018a14:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8018a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a18:	781b      	ldrb	r3, [r3, #0]
 8018a1a:	f003 030f 	and.w	r3, r3, #15
 8018a1e:	b2db      	uxtb	r3, r3
 8018a20:	009b      	lsls	r3, r3, #2
 8018a22:	b2db      	uxtb	r3, r3
 8018a24:	2b14      	cmp	r3, #20
 8018a26:	f040 8171 	bne.w	8018d0c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8018a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a2c:	88db      	ldrh	r3, [r3, #6]
 8018a2e:	b29b      	uxth	r3, r3
 8018a30:	4618      	mov	r0, r3
 8018a32:	f7f6 fe79 	bl	800f728 <lwip_htons>
 8018a36:	4603      	mov	r3, r0
 8018a38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018a3c:	b29b      	uxth	r3, r3
 8018a3e:	00db      	lsls	r3, r3, #3
 8018a40:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a44:	885b      	ldrh	r3, [r3, #2]
 8018a46:	b29b      	uxth	r3, r3
 8018a48:	4618      	mov	r0, r3
 8018a4a:	f7f6 fe6d 	bl	800f728 <lwip_htons>
 8018a4e:	4603      	mov	r3, r0
 8018a50:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8018a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a54:	781b      	ldrb	r3, [r3, #0]
 8018a56:	f003 030f 	and.w	r3, r3, #15
 8018a5a:	b2db      	uxtb	r3, r3
 8018a5c:	009b      	lsls	r3, r3, #2
 8018a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8018a62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018a66:	b29b      	uxth	r3, r3
 8018a68:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018a6a:	429a      	cmp	r2, r3
 8018a6c:	f0c0 8150 	bcc.w	8018d10 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018a70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018a74:	b29b      	uxth	r3, r3
 8018a76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018a78:	1ad3      	subs	r3, r2, r3
 8018a7a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018a7c:	6878      	ldr	r0, [r7, #4]
 8018a7e:	f7f8 fabf 	bl	8011000 <pbuf_clen>
 8018a82:	4603      	mov	r3, r0
 8018a84:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018a86:	4b8c      	ldr	r3, [pc, #560]	; (8018cb8 <ip4_reass+0x2b0>)
 8018a88:	881b      	ldrh	r3, [r3, #0]
 8018a8a:	461a      	mov	r2, r3
 8018a8c:	8c3b      	ldrh	r3, [r7, #32]
 8018a8e:	4413      	add	r3, r2
 8018a90:	2b0a      	cmp	r3, #10
 8018a92:	dd10      	ble.n	8018ab6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018a94:	8c3b      	ldrh	r3, [r7, #32]
 8018a96:	4619      	mov	r1, r3
 8018a98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018a9a:	f7ff fd81 	bl	80185a0 <ip_reass_remove_oldest_datagram>
 8018a9e:	4603      	mov	r3, r0
 8018aa0:	2b00      	cmp	r3, #0
 8018aa2:	f000 8137 	beq.w	8018d14 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018aa6:	4b84      	ldr	r3, [pc, #528]	; (8018cb8 <ip4_reass+0x2b0>)
 8018aa8:	881b      	ldrh	r3, [r3, #0]
 8018aaa:	461a      	mov	r2, r3
 8018aac:	8c3b      	ldrh	r3, [r7, #32]
 8018aae:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018ab0:	2b0a      	cmp	r3, #10
 8018ab2:	f300 812f 	bgt.w	8018d14 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018ab6:	4b81      	ldr	r3, [pc, #516]	; (8018cbc <ip4_reass+0x2b4>)
 8018ab8:	681b      	ldr	r3, [r3, #0]
 8018aba:	633b      	str	r3, [r7, #48]	; 0x30
 8018abc:	e015      	b.n	8018aea <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8018abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ac0:	695a      	ldr	r2, [r3, #20]
 8018ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ac4:	68db      	ldr	r3, [r3, #12]
 8018ac6:	429a      	cmp	r2, r3
 8018ac8:	d10c      	bne.n	8018ae4 <ip4_reass+0xdc>
 8018aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018acc:	699a      	ldr	r2, [r3, #24]
 8018ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ad0:	691b      	ldr	r3, [r3, #16]
 8018ad2:	429a      	cmp	r2, r3
 8018ad4:	d106      	bne.n	8018ae4 <ip4_reass+0xdc>
 8018ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ad8:	899a      	ldrh	r2, [r3, #12]
 8018ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018adc:	889b      	ldrh	r3, [r3, #4]
 8018ade:	b29b      	uxth	r3, r3
 8018ae0:	429a      	cmp	r2, r3
 8018ae2:	d006      	beq.n	8018af2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ae6:	681b      	ldr	r3, [r3, #0]
 8018ae8:	633b      	str	r3, [r7, #48]	; 0x30
 8018aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018aec:	2b00      	cmp	r3, #0
 8018aee:	d1e6      	bne.n	8018abe <ip4_reass+0xb6>
 8018af0:	e000      	b.n	8018af4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8018af2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8018af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018af6:	2b00      	cmp	r3, #0
 8018af8:	d109      	bne.n	8018b0e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8018afa:	8c3b      	ldrh	r3, [r7, #32]
 8018afc:	4619      	mov	r1, r3
 8018afe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018b00:	f7ff fdb0 	bl	8018664 <ip_reass_enqueue_new_datagram>
 8018b04:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8018b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b08:	2b00      	cmp	r3, #0
 8018b0a:	d11c      	bne.n	8018b46 <ip4_reass+0x13e>
      goto nullreturn;
 8018b0c:	e105      	b.n	8018d1a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b10:	88db      	ldrh	r3, [r3, #6]
 8018b12:	b29b      	uxth	r3, r3
 8018b14:	4618      	mov	r0, r3
 8018b16:	f7f6 fe07 	bl	800f728 <lwip_htons>
 8018b1a:	4603      	mov	r3, r0
 8018b1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	d110      	bne.n	8018b46 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b26:	89db      	ldrh	r3, [r3, #14]
 8018b28:	4618      	mov	r0, r3
 8018b2a:	f7f6 fdfd 	bl	800f728 <lwip_htons>
 8018b2e:	4603      	mov	r3, r0
 8018b30:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018b34:	2b00      	cmp	r3, #0
 8018b36:	d006      	beq.n	8018b46 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8018b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b3a:	3308      	adds	r3, #8
 8018b3c:	2214      	movs	r2, #20
 8018b3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018b40:	4618      	mov	r0, r3
 8018b42:	f001 fa7c 	bl	801a03e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8018b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b48:	88db      	ldrh	r3, [r3, #6]
 8018b4a:	b29b      	uxth	r3, r3
 8018b4c:	f003 0320 	and.w	r3, r3, #32
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	bf0c      	ite	eq
 8018b54:	2301      	moveq	r3, #1
 8018b56:	2300      	movne	r3, #0
 8018b58:	b2db      	uxtb	r3, r3
 8018b5a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018b5c:	69fb      	ldr	r3, [r7, #28]
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	d00e      	beq.n	8018b80 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8018b62:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018b64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018b66:	4413      	add	r3, r2
 8018b68:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8018b6a:	8b7a      	ldrh	r2, [r7, #26]
 8018b6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018b6e:	429a      	cmp	r2, r3
 8018b70:	f0c0 80a0 	bcc.w	8018cb4 <ip4_reass+0x2ac>
 8018b74:	8b7b      	ldrh	r3, [r7, #26]
 8018b76:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8018b7a:	4293      	cmp	r3, r2
 8018b7c:	f200 809a 	bhi.w	8018cb4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018b80:	69fa      	ldr	r2, [r7, #28]
 8018b82:	6879      	ldr	r1, [r7, #4]
 8018b84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018b86:	f7ff fdd5 	bl	8018734 <ip_reass_chain_frag_into_datagram_and_validate>
 8018b8a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018b8c:	697b      	ldr	r3, [r7, #20]
 8018b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018b92:	f000 809b 	beq.w	8018ccc <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018b96:	4b48      	ldr	r3, [pc, #288]	; (8018cb8 <ip4_reass+0x2b0>)
 8018b98:	881a      	ldrh	r2, [r3, #0]
 8018b9a:	8c3b      	ldrh	r3, [r7, #32]
 8018b9c:	4413      	add	r3, r2
 8018b9e:	b29a      	uxth	r2, r3
 8018ba0:	4b45      	ldr	r3, [pc, #276]	; (8018cb8 <ip4_reass+0x2b0>)
 8018ba2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018ba4:	69fb      	ldr	r3, [r7, #28]
 8018ba6:	2b00      	cmp	r3, #0
 8018ba8:	d00d      	beq.n	8018bc6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8018baa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018bac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018bae:	4413      	add	r3, r2
 8018bb0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bb4:	8a7a      	ldrh	r2, [r7, #18]
 8018bb6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bba:	7f9b      	ldrb	r3, [r3, #30]
 8018bbc:	f043 0301 	orr.w	r3, r3, #1
 8018bc0:	b2da      	uxtb	r2, r3
 8018bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bc4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018bc6:	697b      	ldr	r3, [r7, #20]
 8018bc8:	2b01      	cmp	r3, #1
 8018bca:	d171      	bne.n	8018cb0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8018bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bce:	8b9b      	ldrh	r3, [r3, #28]
 8018bd0:	3314      	adds	r3, #20
 8018bd2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bd6:	685b      	ldr	r3, [r3, #4]
 8018bd8:	685b      	ldr	r3, [r3, #4]
 8018bda:	681b      	ldr	r3, [r3, #0]
 8018bdc:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8018bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018be0:	685b      	ldr	r3, [r3, #4]
 8018be2:	685b      	ldr	r3, [r3, #4]
 8018be4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8018be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018be8:	3308      	adds	r3, #8
 8018bea:	2214      	movs	r2, #20
 8018bec:	4619      	mov	r1, r3
 8018bee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018bf0:	f001 fa25 	bl	801a03e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018bf4:	8a3b      	ldrh	r3, [r7, #16]
 8018bf6:	4618      	mov	r0, r3
 8018bf8:	f7f6 fd96 	bl	800f728 <lwip_htons>
 8018bfc:	4603      	mov	r3, r0
 8018bfe:	461a      	mov	r2, r3
 8018c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c02:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c06:	2200      	movs	r2, #0
 8018c08:	719a      	strb	r2, [r3, #6]
 8018c0a:	2200      	movs	r2, #0
 8018c0c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8018c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c10:	2200      	movs	r2, #0
 8018c12:	729a      	strb	r2, [r3, #10]
 8018c14:	2200      	movs	r2, #0
 8018c16:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8018c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c1a:	685b      	ldr	r3, [r3, #4]
 8018c1c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8018c1e:	e00d      	b.n	8018c3c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8018c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018c22:	685b      	ldr	r3, [r3, #4]
 8018c24:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8018c26:	2114      	movs	r1, #20
 8018c28:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018c2a:	f7f8 f8db 	bl	8010de4 <pbuf_remove_header>
      pbuf_cat(p, r);
 8018c2e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018c30:	6878      	ldr	r0, [r7, #4]
 8018c32:	f7f8 fa1f 	bl	8011074 <pbuf_cat>
      r = iprh->next_pbuf;
 8018c36:	68fb      	ldr	r3, [r7, #12]
 8018c38:	681b      	ldr	r3, [r3, #0]
 8018c3a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8018c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018c3e:	2b00      	cmp	r3, #0
 8018c40:	d1ee      	bne.n	8018c20 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018c42:	4b1e      	ldr	r3, [pc, #120]	; (8018cbc <ip4_reass+0x2b4>)
 8018c44:	681b      	ldr	r3, [r3, #0]
 8018c46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018c48:	429a      	cmp	r2, r3
 8018c4a:	d102      	bne.n	8018c52 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8018c4c:	2300      	movs	r3, #0
 8018c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018c50:	e010      	b.n	8018c74 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018c52:	4b1a      	ldr	r3, [pc, #104]	; (8018cbc <ip4_reass+0x2b4>)
 8018c54:	681b      	ldr	r3, [r3, #0]
 8018c56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018c58:	e007      	b.n	8018c6a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8018c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c5c:	681b      	ldr	r3, [r3, #0]
 8018c5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018c60:	429a      	cmp	r2, r3
 8018c62:	d006      	beq.n	8018c72 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c66:	681b      	ldr	r3, [r3, #0]
 8018c68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	d1f4      	bne.n	8018c5a <ip4_reass+0x252>
 8018c70:	e000      	b.n	8018c74 <ip4_reass+0x26c>
          break;
 8018c72:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018c74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018c76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018c78:	f7ff fd2e 	bl	80186d8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018c7c:	6878      	ldr	r0, [r7, #4]
 8018c7e:	f7f8 f9bf 	bl	8011000 <pbuf_clen>
 8018c82:	4603      	mov	r3, r0
 8018c84:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8018c86:	4b0c      	ldr	r3, [pc, #48]	; (8018cb8 <ip4_reass+0x2b0>)
 8018c88:	881b      	ldrh	r3, [r3, #0]
 8018c8a:	8c3a      	ldrh	r2, [r7, #32]
 8018c8c:	429a      	cmp	r2, r3
 8018c8e:	d906      	bls.n	8018c9e <ip4_reass+0x296>
 8018c90:	4b0b      	ldr	r3, [pc, #44]	; (8018cc0 <ip4_reass+0x2b8>)
 8018c92:	f240 229b 	movw	r2, #667	; 0x29b
 8018c96:	490b      	ldr	r1, [pc, #44]	; (8018cc4 <ip4_reass+0x2bc>)
 8018c98:	480b      	ldr	r0, [pc, #44]	; (8018cc8 <ip4_reass+0x2c0>)
 8018c9a:	f001 f801 	bl	8019ca0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8018c9e:	4b06      	ldr	r3, [pc, #24]	; (8018cb8 <ip4_reass+0x2b0>)
 8018ca0:	881a      	ldrh	r2, [r3, #0]
 8018ca2:	8c3b      	ldrh	r3, [r7, #32]
 8018ca4:	1ad3      	subs	r3, r2, r3
 8018ca6:	b29a      	uxth	r2, r3
 8018ca8:	4b03      	ldr	r3, [pc, #12]	; (8018cb8 <ip4_reass+0x2b0>)
 8018caa:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	e038      	b.n	8018d22 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018cb0:	2300      	movs	r3, #0
 8018cb2:	e036      	b.n	8018d22 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8018cb4:	bf00      	nop
 8018cb6:	e00a      	b.n	8018cce <ip4_reass+0x2c6>
 8018cb8:	20007230 	.word	0x20007230
 8018cbc:	2000722c 	.word	0x2000722c
 8018cc0:	0801ecf8 	.word	0x0801ecf8
 8018cc4:	0801ee68 	.word	0x0801ee68
 8018cc8:	0801ed40 	.word	0x0801ed40
    goto nullreturn_ipr;
 8018ccc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8018cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018cd0:	2b00      	cmp	r3, #0
 8018cd2:	d106      	bne.n	8018ce2 <ip4_reass+0x2da>
 8018cd4:	4b15      	ldr	r3, [pc, #84]	; (8018d2c <ip4_reass+0x324>)
 8018cd6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8018cda:	4915      	ldr	r1, [pc, #84]	; (8018d30 <ip4_reass+0x328>)
 8018cdc:	4815      	ldr	r0, [pc, #84]	; (8018d34 <ip4_reass+0x32c>)
 8018cde:	f000 ffdf 	bl	8019ca0 <iprintf>
  if (ipr->p == NULL) {
 8018ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ce4:	685b      	ldr	r3, [r3, #4]
 8018ce6:	2b00      	cmp	r3, #0
 8018ce8:	d116      	bne.n	8018d18 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8018cea:	4b13      	ldr	r3, [pc, #76]	; (8018d38 <ip4_reass+0x330>)
 8018cec:	681b      	ldr	r3, [r3, #0]
 8018cee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018cf0:	429a      	cmp	r2, r3
 8018cf2:	d006      	beq.n	8018d02 <ip4_reass+0x2fa>
 8018cf4:	4b0d      	ldr	r3, [pc, #52]	; (8018d2c <ip4_reass+0x324>)
 8018cf6:	f240 22ab 	movw	r2, #683	; 0x2ab
 8018cfa:	4910      	ldr	r1, [pc, #64]	; (8018d3c <ip4_reass+0x334>)
 8018cfc:	480d      	ldr	r0, [pc, #52]	; (8018d34 <ip4_reass+0x32c>)
 8018cfe:	f000 ffcf 	bl	8019ca0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8018d02:	2100      	movs	r1, #0
 8018d04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018d06:	f7ff fce7 	bl	80186d8 <ip_reass_dequeue_datagram>
 8018d0a:	e006      	b.n	8018d1a <ip4_reass+0x312>
    goto nullreturn;
 8018d0c:	bf00      	nop
 8018d0e:	e004      	b.n	8018d1a <ip4_reass+0x312>
    goto nullreturn;
 8018d10:	bf00      	nop
 8018d12:	e002      	b.n	8018d1a <ip4_reass+0x312>
      goto nullreturn;
 8018d14:	bf00      	nop
 8018d16:	e000      	b.n	8018d1a <ip4_reass+0x312>
  }

nullreturn:
 8018d18:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018d1a:	6878      	ldr	r0, [r7, #4]
 8018d1c:	f7f8 f8e8 	bl	8010ef0 <pbuf_free>
  return NULL;
 8018d20:	2300      	movs	r3, #0
}
 8018d22:	4618      	mov	r0, r3
 8018d24:	3738      	adds	r7, #56	; 0x38
 8018d26:	46bd      	mov	sp, r7
 8018d28:	bd80      	pop	{r7, pc}
 8018d2a:	bf00      	nop
 8018d2c:	0801ecf8 	.word	0x0801ecf8
 8018d30:	0801ee84 	.word	0x0801ee84
 8018d34:	0801ed40 	.word	0x0801ed40
 8018d38:	2000722c 	.word	0x2000722c
 8018d3c:	0801ee90 	.word	0x0801ee90

08018d40 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018d40:	b580      	push	{r7, lr}
 8018d42:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018d44:	2005      	movs	r0, #5
 8018d46:	f7f7 fa0d 	bl	8010164 <memp_malloc>
 8018d4a:	4603      	mov	r3, r0
}
 8018d4c:	4618      	mov	r0, r3
 8018d4e:	bd80      	pop	{r7, pc}

08018d50 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018d50:	b580      	push	{r7, lr}
 8018d52:	b082      	sub	sp, #8
 8018d54:	af00      	add	r7, sp, #0
 8018d56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	d106      	bne.n	8018d6c <ip_frag_free_pbuf_custom_ref+0x1c>
 8018d5e:	4b07      	ldr	r3, [pc, #28]	; (8018d7c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018d60:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8018d64:	4906      	ldr	r1, [pc, #24]	; (8018d80 <ip_frag_free_pbuf_custom_ref+0x30>)
 8018d66:	4807      	ldr	r0, [pc, #28]	; (8018d84 <ip_frag_free_pbuf_custom_ref+0x34>)
 8018d68:	f000 ff9a 	bl	8019ca0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018d6c:	6879      	ldr	r1, [r7, #4]
 8018d6e:	2005      	movs	r0, #5
 8018d70:	f7f7 fa68 	bl	8010244 <memp_free>
}
 8018d74:	bf00      	nop
 8018d76:	3708      	adds	r7, #8
 8018d78:	46bd      	mov	sp, r7
 8018d7a:	bd80      	pop	{r7, pc}
 8018d7c:	0801ecf8 	.word	0x0801ecf8
 8018d80:	0801eeb0 	.word	0x0801eeb0
 8018d84:	0801ed40 	.word	0x0801ed40

08018d88 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018d88:	b580      	push	{r7, lr}
 8018d8a:	b084      	sub	sp, #16
 8018d8c:	af00      	add	r7, sp, #0
 8018d8e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018d94:	68fb      	ldr	r3, [r7, #12]
 8018d96:	2b00      	cmp	r3, #0
 8018d98:	d106      	bne.n	8018da8 <ipfrag_free_pbuf_custom+0x20>
 8018d9a:	4b11      	ldr	r3, [pc, #68]	; (8018de0 <ipfrag_free_pbuf_custom+0x58>)
 8018d9c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8018da0:	4910      	ldr	r1, [pc, #64]	; (8018de4 <ipfrag_free_pbuf_custom+0x5c>)
 8018da2:	4811      	ldr	r0, [pc, #68]	; (8018de8 <ipfrag_free_pbuf_custom+0x60>)
 8018da4:	f000 ff7c 	bl	8019ca0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018da8:	68fa      	ldr	r2, [r7, #12]
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	429a      	cmp	r2, r3
 8018dae:	d006      	beq.n	8018dbe <ipfrag_free_pbuf_custom+0x36>
 8018db0:	4b0b      	ldr	r3, [pc, #44]	; (8018de0 <ipfrag_free_pbuf_custom+0x58>)
 8018db2:	f240 22cf 	movw	r2, #719	; 0x2cf
 8018db6:	490d      	ldr	r1, [pc, #52]	; (8018dec <ipfrag_free_pbuf_custom+0x64>)
 8018db8:	480b      	ldr	r0, [pc, #44]	; (8018de8 <ipfrag_free_pbuf_custom+0x60>)
 8018dba:	f000 ff71 	bl	8019ca0 <iprintf>
  if (pcr->original != NULL) {
 8018dbe:	68fb      	ldr	r3, [r7, #12]
 8018dc0:	695b      	ldr	r3, [r3, #20]
 8018dc2:	2b00      	cmp	r3, #0
 8018dc4:	d004      	beq.n	8018dd0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8018dc6:	68fb      	ldr	r3, [r7, #12]
 8018dc8:	695b      	ldr	r3, [r3, #20]
 8018dca:	4618      	mov	r0, r3
 8018dcc:	f7f8 f890 	bl	8010ef0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018dd0:	68f8      	ldr	r0, [r7, #12]
 8018dd2:	f7ff ffbd 	bl	8018d50 <ip_frag_free_pbuf_custom_ref>
}
 8018dd6:	bf00      	nop
 8018dd8:	3710      	adds	r7, #16
 8018dda:	46bd      	mov	sp, r7
 8018ddc:	bd80      	pop	{r7, pc}
 8018dde:	bf00      	nop
 8018de0:	0801ecf8 	.word	0x0801ecf8
 8018de4:	0801eebc 	.word	0x0801eebc
 8018de8:	0801ed40 	.word	0x0801ed40
 8018dec:	0801eec8 	.word	0x0801eec8

08018df0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018df0:	b580      	push	{r7, lr}
 8018df2:	b094      	sub	sp, #80	; 0x50
 8018df4:	af02      	add	r7, sp, #8
 8018df6:	60f8      	str	r0, [r7, #12]
 8018df8:	60b9      	str	r1, [r7, #8]
 8018dfa:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018dfc:	2300      	movs	r3, #0
 8018dfe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8018e02:	68bb      	ldr	r3, [r7, #8]
 8018e04:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018e06:	3b14      	subs	r3, #20
 8018e08:	2b00      	cmp	r3, #0
 8018e0a:	da00      	bge.n	8018e0e <ip4_frag+0x1e>
 8018e0c:	3307      	adds	r3, #7
 8018e0e:	10db      	asrs	r3, r3, #3
 8018e10:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018e12:	2314      	movs	r3, #20
 8018e14:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8018e16:	68fb      	ldr	r3, [r7, #12]
 8018e18:	685b      	ldr	r3, [r3, #4]
 8018e1a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8018e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018e1e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e22:	781b      	ldrb	r3, [r3, #0]
 8018e24:	f003 030f 	and.w	r3, r3, #15
 8018e28:	b2db      	uxtb	r3, r3
 8018e2a:	009b      	lsls	r3, r3, #2
 8018e2c:	b2db      	uxtb	r3, r3
 8018e2e:	2b14      	cmp	r3, #20
 8018e30:	d002      	beq.n	8018e38 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018e32:	f06f 0305 	mvn.w	r3, #5
 8018e36:	e110      	b.n	801905a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018e38:	68fb      	ldr	r3, [r7, #12]
 8018e3a:	895b      	ldrh	r3, [r3, #10]
 8018e3c:	2b13      	cmp	r3, #19
 8018e3e:	d809      	bhi.n	8018e54 <ip4_frag+0x64>
 8018e40:	4b88      	ldr	r3, [pc, #544]	; (8019064 <ip4_frag+0x274>)
 8018e42:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8018e46:	4988      	ldr	r1, [pc, #544]	; (8019068 <ip4_frag+0x278>)
 8018e48:	4888      	ldr	r0, [pc, #544]	; (801906c <ip4_frag+0x27c>)
 8018e4a:	f000 ff29 	bl	8019ca0 <iprintf>
 8018e4e:	f06f 0305 	mvn.w	r3, #5
 8018e52:	e102      	b.n	801905a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e56:	88db      	ldrh	r3, [r3, #6]
 8018e58:	b29b      	uxth	r3, r3
 8018e5a:	4618      	mov	r0, r3
 8018e5c:	f7f6 fc64 	bl	800f728 <lwip_htons>
 8018e60:	4603      	mov	r3, r0
 8018e62:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8018e64:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018e66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018e6a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8018e6e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018e70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018e74:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8018e76:	68fb      	ldr	r3, [r7, #12]
 8018e78:	891b      	ldrh	r3, [r3, #8]
 8018e7a:	3b14      	subs	r3, #20
 8018e7c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8018e80:	e0e1      	b.n	8019046 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018e82:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018e84:	00db      	lsls	r3, r3, #3
 8018e86:	b29b      	uxth	r3, r3
 8018e88:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018e8c:	4293      	cmp	r3, r2
 8018e8e:	bf28      	it	cs
 8018e90:	4613      	movcs	r3, r2
 8018e92:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018e94:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018e98:	2114      	movs	r1, #20
 8018e9a:	200e      	movs	r0, #14
 8018e9c:	f7f7 fd44 	bl	8010928 <pbuf_alloc>
 8018ea0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8018ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ea4:	2b00      	cmp	r3, #0
 8018ea6:	f000 80d5 	beq.w	8019054 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8018eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018eac:	895b      	ldrh	r3, [r3, #10]
 8018eae:	2b13      	cmp	r3, #19
 8018eb0:	d806      	bhi.n	8018ec0 <ip4_frag+0xd0>
 8018eb2:	4b6c      	ldr	r3, [pc, #432]	; (8019064 <ip4_frag+0x274>)
 8018eb4:	f44f 7249 	mov.w	r2, #804	; 0x324
 8018eb8:	496d      	ldr	r1, [pc, #436]	; (8019070 <ip4_frag+0x280>)
 8018eba:	486c      	ldr	r0, [pc, #432]	; (801906c <ip4_frag+0x27c>)
 8018ebc:	f000 fef0 	bl	8019ca0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ec2:	685b      	ldr	r3, [r3, #4]
 8018ec4:	2214      	movs	r2, #20
 8018ec6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018ec8:	4618      	mov	r0, r3
 8018eca:	f001 f8b8 	bl	801a03e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ed0:	685b      	ldr	r3, [r3, #4]
 8018ed2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8018ed4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018ed6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8018eda:	e064      	b.n	8018fa6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018edc:	68fb      	ldr	r3, [r7, #12]
 8018ede:	895a      	ldrh	r2, [r3, #10]
 8018ee0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018ee2:	1ad3      	subs	r3, r2, r3
 8018ee4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8018ee6:	68fb      	ldr	r3, [r7, #12]
 8018ee8:	895b      	ldrh	r3, [r3, #10]
 8018eea:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018eec:	429a      	cmp	r2, r3
 8018eee:	d906      	bls.n	8018efe <ip4_frag+0x10e>
 8018ef0:	4b5c      	ldr	r3, [pc, #368]	; (8019064 <ip4_frag+0x274>)
 8018ef2:	f240 322d 	movw	r2, #813	; 0x32d
 8018ef6:	495f      	ldr	r1, [pc, #380]	; (8019074 <ip4_frag+0x284>)
 8018ef8:	485c      	ldr	r0, [pc, #368]	; (801906c <ip4_frag+0x27c>)
 8018efa:	f000 fed1 	bl	8019ca0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018efe:	8bfa      	ldrh	r2, [r7, #30]
 8018f00:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018f04:	4293      	cmp	r3, r2
 8018f06:	bf28      	it	cs
 8018f08:	4613      	movcs	r3, r2
 8018f0a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018f0e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018f12:	2b00      	cmp	r3, #0
 8018f14:	d105      	bne.n	8018f22 <ip4_frag+0x132>
        poff = 0;
 8018f16:	2300      	movs	r3, #0
 8018f18:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018f1a:	68fb      	ldr	r3, [r7, #12]
 8018f1c:	681b      	ldr	r3, [r3, #0]
 8018f1e:	60fb      	str	r3, [r7, #12]
        continue;
 8018f20:	e041      	b.n	8018fa6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018f22:	f7ff ff0d 	bl	8018d40 <ip_frag_alloc_pbuf_custom_ref>
 8018f26:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8018f28:	69bb      	ldr	r3, [r7, #24]
 8018f2a:	2b00      	cmp	r3, #0
 8018f2c:	d103      	bne.n	8018f36 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018f2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018f30:	f7f7 ffde 	bl	8010ef0 <pbuf_free>
        goto memerr;
 8018f34:	e08f      	b.n	8019056 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018f36:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8018f38:	68fb      	ldr	r3, [r7, #12]
 8018f3a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018f3c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018f3e:	4413      	add	r3, r2
 8018f40:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8018f44:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8018f48:	9201      	str	r2, [sp, #4]
 8018f4a:	9300      	str	r3, [sp, #0]
 8018f4c:	4603      	mov	r3, r0
 8018f4e:	2241      	movs	r2, #65	; 0x41
 8018f50:	2000      	movs	r0, #0
 8018f52:	f7f7 fe15 	bl	8010b80 <pbuf_alloced_custom>
 8018f56:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8018f58:	697b      	ldr	r3, [r7, #20]
 8018f5a:	2b00      	cmp	r3, #0
 8018f5c:	d106      	bne.n	8018f6c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018f5e:	69b8      	ldr	r0, [r7, #24]
 8018f60:	f7ff fef6 	bl	8018d50 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018f64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018f66:	f7f7 ffc3 	bl	8010ef0 <pbuf_free>
        goto memerr;
 8018f6a:	e074      	b.n	8019056 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8018f6c:	68f8      	ldr	r0, [r7, #12]
 8018f6e:	f7f8 f85f 	bl	8011030 <pbuf_ref>
      pcr->original = p;
 8018f72:	69bb      	ldr	r3, [r7, #24]
 8018f74:	68fa      	ldr	r2, [r7, #12]
 8018f76:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018f78:	69bb      	ldr	r3, [r7, #24]
 8018f7a:	4a3f      	ldr	r2, [pc, #252]	; (8019078 <ip4_frag+0x288>)
 8018f7c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018f7e:	6979      	ldr	r1, [r7, #20]
 8018f80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018f82:	f7f8 f877 	bl	8011074 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8018f86:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8018f8a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018f8e:	1ad3      	subs	r3, r2, r3
 8018f90:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8018f94:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	d004      	beq.n	8018fa6 <ip4_frag+0x1b6>
        poff = 0;
 8018f9c:	2300      	movs	r3, #0
 8018f9e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018fa0:	68fb      	ldr	r3, [r7, #12]
 8018fa2:	681b      	ldr	r3, [r3, #0]
 8018fa4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018fa6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	d196      	bne.n	8018edc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018fae:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018fb0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018fb4:	4413      	add	r3, r2
 8018fb6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018fb8:	68bb      	ldr	r3, [r7, #8]
 8018fba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018fbc:	f1a3 0213 	sub.w	r2, r3, #19
 8018fc0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018fc4:	429a      	cmp	r2, r3
 8018fc6:	bfcc      	ite	gt
 8018fc8:	2301      	movgt	r3, #1
 8018fca:	2300      	movle	r3, #0
 8018fcc:	b2db      	uxtb	r3, r3
 8018fce:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018fd0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018fd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018fd8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8018fda:	6a3b      	ldr	r3, [r7, #32]
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	d002      	beq.n	8018fe6 <ip4_frag+0x1f6>
 8018fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fe2:	2b00      	cmp	r3, #0
 8018fe4:	d003      	beq.n	8018fee <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8018fe6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018fe8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018fec:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018fee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018ff0:	4618      	mov	r0, r3
 8018ff2:	f7f6 fb99 	bl	800f728 <lwip_htons>
 8018ff6:	4603      	mov	r3, r0
 8018ff8:	461a      	mov	r2, r3
 8018ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ffc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018ffe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019000:	3314      	adds	r3, #20
 8019002:	b29b      	uxth	r3, r3
 8019004:	4618      	mov	r0, r3
 8019006:	f7f6 fb8f 	bl	800f728 <lwip_htons>
 801900a:	4603      	mov	r3, r0
 801900c:	461a      	mov	r2, r3
 801900e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019010:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8019012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019014:	2200      	movs	r2, #0
 8019016:	729a      	strb	r2, [r3, #10]
 8019018:	2200      	movs	r2, #0
 801901a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801901c:	68bb      	ldr	r3, [r7, #8]
 801901e:	695b      	ldr	r3, [r3, #20]
 8019020:	687a      	ldr	r2, [r7, #4]
 8019022:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019024:	68b8      	ldr	r0, [r7, #8]
 8019026:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8019028:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801902a:	f7f7 ff61 	bl	8010ef0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801902e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019032:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019034:	1ad3      	subs	r3, r2, r3
 8019036:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801903a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801903e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019040:	4413      	add	r3, r2
 8019042:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8019046:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801904a:	2b00      	cmp	r3, #0
 801904c:	f47f af19 	bne.w	8018e82 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8019050:	2300      	movs	r3, #0
 8019052:	e002      	b.n	801905a <ip4_frag+0x26a>
      goto memerr;
 8019054:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8019056:	f04f 33ff 	mov.w	r3, #4294967295
}
 801905a:	4618      	mov	r0, r3
 801905c:	3748      	adds	r7, #72	; 0x48
 801905e:	46bd      	mov	sp, r7
 8019060:	bd80      	pop	{r7, pc}
 8019062:	bf00      	nop
 8019064:	0801ecf8 	.word	0x0801ecf8
 8019068:	0801eed4 	.word	0x0801eed4
 801906c:	0801ed40 	.word	0x0801ed40
 8019070:	0801eef0 	.word	0x0801eef0
 8019074:	0801ef10 	.word	0x0801ef10
 8019078:	08018d89 	.word	0x08018d89

0801907c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801907c:	b580      	push	{r7, lr}
 801907e:	b086      	sub	sp, #24
 8019080:	af00      	add	r7, sp, #0
 8019082:	6078      	str	r0, [r7, #4]
 8019084:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8019086:	230e      	movs	r3, #14
 8019088:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801908a:	687b      	ldr	r3, [r7, #4]
 801908c:	895b      	ldrh	r3, [r3, #10]
 801908e:	2b0e      	cmp	r3, #14
 8019090:	d96e      	bls.n	8019170 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	7bdb      	ldrb	r3, [r3, #15]
 8019096:	2b00      	cmp	r3, #0
 8019098:	d106      	bne.n	80190a8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801909a:	683b      	ldr	r3, [r7, #0]
 801909c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80190a0:	3301      	adds	r3, #1
 80190a2:	b2da      	uxtb	r2, r3
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80190a8:	687b      	ldr	r3, [r7, #4]
 80190aa:	685b      	ldr	r3, [r3, #4]
 80190ac:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80190ae:	693b      	ldr	r3, [r7, #16]
 80190b0:	7b1a      	ldrb	r2, [r3, #12]
 80190b2:	7b5b      	ldrb	r3, [r3, #13]
 80190b4:	021b      	lsls	r3, r3, #8
 80190b6:	4313      	orrs	r3, r2
 80190b8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80190ba:	693b      	ldr	r3, [r7, #16]
 80190bc:	781b      	ldrb	r3, [r3, #0]
 80190be:	f003 0301 	and.w	r3, r3, #1
 80190c2:	2b00      	cmp	r3, #0
 80190c4:	d023      	beq.n	801910e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80190c6:	693b      	ldr	r3, [r7, #16]
 80190c8:	781b      	ldrb	r3, [r3, #0]
 80190ca:	2b01      	cmp	r3, #1
 80190cc:	d10f      	bne.n	80190ee <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80190ce:	693b      	ldr	r3, [r7, #16]
 80190d0:	785b      	ldrb	r3, [r3, #1]
 80190d2:	2b00      	cmp	r3, #0
 80190d4:	d11b      	bne.n	801910e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80190d6:	693b      	ldr	r3, [r7, #16]
 80190d8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80190da:	2b5e      	cmp	r3, #94	; 0x5e
 80190dc:	d117      	bne.n	801910e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80190de:	687b      	ldr	r3, [r7, #4]
 80190e0:	7b5b      	ldrb	r3, [r3, #13]
 80190e2:	f043 0310 	orr.w	r3, r3, #16
 80190e6:	b2da      	uxtb	r2, r3
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	735a      	strb	r2, [r3, #13]
 80190ec:	e00f      	b.n	801910e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80190ee:	693b      	ldr	r3, [r7, #16]
 80190f0:	2206      	movs	r2, #6
 80190f2:	4928      	ldr	r1, [pc, #160]	; (8019194 <ethernet_input+0x118>)
 80190f4:	4618      	mov	r0, r3
 80190f6:	f000 ff19 	bl	8019f2c <memcmp>
 80190fa:	4603      	mov	r3, r0
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	d106      	bne.n	801910e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	7b5b      	ldrb	r3, [r3, #13]
 8019104:	f043 0308 	orr.w	r3, r3, #8
 8019108:	b2da      	uxtb	r2, r3
 801910a:	687b      	ldr	r3, [r7, #4]
 801910c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801910e:	89fb      	ldrh	r3, [r7, #14]
 8019110:	2b08      	cmp	r3, #8
 8019112:	d003      	beq.n	801911c <ethernet_input+0xa0>
 8019114:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8019118:	d014      	beq.n	8019144 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801911a:	e032      	b.n	8019182 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801911c:	683b      	ldr	r3, [r7, #0]
 801911e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019122:	f003 0308 	and.w	r3, r3, #8
 8019126:	2b00      	cmp	r3, #0
 8019128:	d024      	beq.n	8019174 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801912a:	8afb      	ldrh	r3, [r7, #22]
 801912c:	4619      	mov	r1, r3
 801912e:	6878      	ldr	r0, [r7, #4]
 8019130:	f7f7 fe58 	bl	8010de4 <pbuf_remove_header>
 8019134:	4603      	mov	r3, r0
 8019136:	2b00      	cmp	r3, #0
 8019138:	d11e      	bne.n	8019178 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801913a:	6839      	ldr	r1, [r7, #0]
 801913c:	6878      	ldr	r0, [r7, #4]
 801913e:	f7fe ff21 	bl	8017f84 <ip4_input>
      break;
 8019142:	e013      	b.n	801916c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019144:	683b      	ldr	r3, [r7, #0]
 8019146:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801914a:	f003 0308 	and.w	r3, r3, #8
 801914e:	2b00      	cmp	r3, #0
 8019150:	d014      	beq.n	801917c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019152:	8afb      	ldrh	r3, [r7, #22]
 8019154:	4619      	mov	r1, r3
 8019156:	6878      	ldr	r0, [r7, #4]
 8019158:	f7f7 fe44 	bl	8010de4 <pbuf_remove_header>
 801915c:	4603      	mov	r3, r0
 801915e:	2b00      	cmp	r3, #0
 8019160:	d10e      	bne.n	8019180 <ethernet_input+0x104>
        etharp_input(p, netif);
 8019162:	6839      	ldr	r1, [r7, #0]
 8019164:	6878      	ldr	r0, [r7, #4]
 8019166:	f7fe f89b 	bl	80172a0 <etharp_input>
      break;
 801916a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801916c:	2300      	movs	r3, #0
 801916e:	e00c      	b.n	801918a <ethernet_input+0x10e>
    goto free_and_return;
 8019170:	bf00      	nop
 8019172:	e006      	b.n	8019182 <ethernet_input+0x106>
        goto free_and_return;
 8019174:	bf00      	nop
 8019176:	e004      	b.n	8019182 <ethernet_input+0x106>
        goto free_and_return;
 8019178:	bf00      	nop
 801917a:	e002      	b.n	8019182 <ethernet_input+0x106>
        goto free_and_return;
 801917c:	bf00      	nop
 801917e:	e000      	b.n	8019182 <ethernet_input+0x106>
        goto free_and_return;
 8019180:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8019182:	6878      	ldr	r0, [r7, #4]
 8019184:	f7f7 feb4 	bl	8010ef0 <pbuf_free>
  return ERR_OK;
 8019188:	2300      	movs	r3, #0
}
 801918a:	4618      	mov	r0, r3
 801918c:	3718      	adds	r7, #24
 801918e:	46bd      	mov	sp, r7
 8019190:	bd80      	pop	{r7, pc}
 8019192:	bf00      	nop
 8019194:	0801f0cc 	.word	0x0801f0cc

08019198 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8019198:	b580      	push	{r7, lr}
 801919a:	b086      	sub	sp, #24
 801919c:	af00      	add	r7, sp, #0
 801919e:	60f8      	str	r0, [r7, #12]
 80191a0:	60b9      	str	r1, [r7, #8]
 80191a2:	607a      	str	r2, [r7, #4]
 80191a4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80191a6:	8c3b      	ldrh	r3, [r7, #32]
 80191a8:	4618      	mov	r0, r3
 80191aa:	f7f6 fabd 	bl	800f728 <lwip_htons>
 80191ae:	4603      	mov	r3, r0
 80191b0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80191b2:	210e      	movs	r1, #14
 80191b4:	68b8      	ldr	r0, [r7, #8]
 80191b6:	f7f7 fe05 	bl	8010dc4 <pbuf_add_header>
 80191ba:	4603      	mov	r3, r0
 80191bc:	2b00      	cmp	r3, #0
 80191be:	d125      	bne.n	801920c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80191c0:	68bb      	ldr	r3, [r7, #8]
 80191c2:	685b      	ldr	r3, [r3, #4]
 80191c4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80191c6:	693b      	ldr	r3, [r7, #16]
 80191c8:	8afa      	ldrh	r2, [r7, #22]
 80191ca:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80191cc:	693b      	ldr	r3, [r7, #16]
 80191ce:	2206      	movs	r2, #6
 80191d0:	6839      	ldr	r1, [r7, #0]
 80191d2:	4618      	mov	r0, r3
 80191d4:	f000 ff33 	bl	801a03e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80191d8:	693b      	ldr	r3, [r7, #16]
 80191da:	3306      	adds	r3, #6
 80191dc:	2206      	movs	r2, #6
 80191de:	6879      	ldr	r1, [r7, #4]
 80191e0:	4618      	mov	r0, r3
 80191e2:	f000 ff2c 	bl	801a03e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80191e6:	68fb      	ldr	r3, [r7, #12]
 80191e8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80191ec:	2b06      	cmp	r3, #6
 80191ee:	d006      	beq.n	80191fe <ethernet_output+0x66>
 80191f0:	4b0a      	ldr	r3, [pc, #40]	; (801921c <ethernet_output+0x84>)
 80191f2:	f44f 7299 	mov.w	r2, #306	; 0x132
 80191f6:	490a      	ldr	r1, [pc, #40]	; (8019220 <ethernet_output+0x88>)
 80191f8:	480a      	ldr	r0, [pc, #40]	; (8019224 <ethernet_output+0x8c>)
 80191fa:	f000 fd51 	bl	8019ca0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80191fe:	68fb      	ldr	r3, [r7, #12]
 8019200:	699b      	ldr	r3, [r3, #24]
 8019202:	68b9      	ldr	r1, [r7, #8]
 8019204:	68f8      	ldr	r0, [r7, #12]
 8019206:	4798      	blx	r3
 8019208:	4603      	mov	r3, r0
 801920a:	e002      	b.n	8019212 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801920c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801920e:	f06f 0301 	mvn.w	r3, #1
}
 8019212:	4618      	mov	r0, r3
 8019214:	3718      	adds	r7, #24
 8019216:	46bd      	mov	sp, r7
 8019218:	bd80      	pop	{r7, pc}
 801921a:	bf00      	nop
 801921c:	0801ef20 	.word	0x0801ef20
 8019220:	0801ef58 	.word	0x0801ef58
 8019224:	0801ef8c 	.word	0x0801ef8c

08019228 <rand>:
 8019228:	4b16      	ldr	r3, [pc, #88]	; (8019284 <rand+0x5c>)
 801922a:	b510      	push	{r4, lr}
 801922c:	681c      	ldr	r4, [r3, #0]
 801922e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8019230:	b9b3      	cbnz	r3, 8019260 <rand+0x38>
 8019232:	2018      	movs	r0, #24
 8019234:	f001 fd70 	bl	801ad18 <malloc>
 8019238:	4602      	mov	r2, r0
 801923a:	6320      	str	r0, [r4, #48]	; 0x30
 801923c:	b920      	cbnz	r0, 8019248 <rand+0x20>
 801923e:	4b12      	ldr	r3, [pc, #72]	; (8019288 <rand+0x60>)
 8019240:	4812      	ldr	r0, [pc, #72]	; (801928c <rand+0x64>)
 8019242:	2152      	movs	r1, #82	; 0x52
 8019244:	f000 ff0a 	bl	801a05c <__assert_func>
 8019248:	4911      	ldr	r1, [pc, #68]	; (8019290 <rand+0x68>)
 801924a:	4b12      	ldr	r3, [pc, #72]	; (8019294 <rand+0x6c>)
 801924c:	e9c0 1300 	strd	r1, r3, [r0]
 8019250:	4b11      	ldr	r3, [pc, #68]	; (8019298 <rand+0x70>)
 8019252:	6083      	str	r3, [r0, #8]
 8019254:	230b      	movs	r3, #11
 8019256:	8183      	strh	r3, [r0, #12]
 8019258:	2100      	movs	r1, #0
 801925a:	2001      	movs	r0, #1
 801925c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019260:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019262:	480e      	ldr	r0, [pc, #56]	; (801929c <rand+0x74>)
 8019264:	690b      	ldr	r3, [r1, #16]
 8019266:	694c      	ldr	r4, [r1, #20]
 8019268:	4a0d      	ldr	r2, [pc, #52]	; (80192a0 <rand+0x78>)
 801926a:	4358      	muls	r0, r3
 801926c:	fb02 0004 	mla	r0, r2, r4, r0
 8019270:	fba3 3202 	umull	r3, r2, r3, r2
 8019274:	3301      	adds	r3, #1
 8019276:	eb40 0002 	adc.w	r0, r0, r2
 801927a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801927e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019282:	bd10      	pop	{r4, pc}
 8019284:	200000bc 	.word	0x200000bc
 8019288:	0801f0da 	.word	0x0801f0da
 801928c:	0801f0f1 	.word	0x0801f0f1
 8019290:	abcd330e 	.word	0xabcd330e
 8019294:	e66d1234 	.word	0xe66d1234
 8019298:	0005deec 	.word	0x0005deec
 801929c:	5851f42d 	.word	0x5851f42d
 80192a0:	4c957f2d 	.word	0x4c957f2d

080192a4 <__cvt>:
 80192a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80192a6:	ed2d 8b02 	vpush	{d8}
 80192aa:	eeb0 8b40 	vmov.f64	d8, d0
 80192ae:	b085      	sub	sp, #20
 80192b0:	4617      	mov	r7, r2
 80192b2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80192b4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80192b6:	ee18 2a90 	vmov	r2, s17
 80192ba:	f025 0520 	bic.w	r5, r5, #32
 80192be:	2a00      	cmp	r2, #0
 80192c0:	bfb6      	itet	lt
 80192c2:	222d      	movlt	r2, #45	; 0x2d
 80192c4:	2200      	movge	r2, #0
 80192c6:	eeb1 8b40 	vneglt.f64	d8, d0
 80192ca:	2d46      	cmp	r5, #70	; 0x46
 80192cc:	460c      	mov	r4, r1
 80192ce:	701a      	strb	r2, [r3, #0]
 80192d0:	d004      	beq.n	80192dc <__cvt+0x38>
 80192d2:	2d45      	cmp	r5, #69	; 0x45
 80192d4:	d100      	bne.n	80192d8 <__cvt+0x34>
 80192d6:	3401      	adds	r4, #1
 80192d8:	2102      	movs	r1, #2
 80192da:	e000      	b.n	80192de <__cvt+0x3a>
 80192dc:	2103      	movs	r1, #3
 80192de:	ab03      	add	r3, sp, #12
 80192e0:	9301      	str	r3, [sp, #4]
 80192e2:	ab02      	add	r3, sp, #8
 80192e4:	9300      	str	r3, [sp, #0]
 80192e6:	4622      	mov	r2, r4
 80192e8:	4633      	mov	r3, r6
 80192ea:	eeb0 0b48 	vmov.f64	d0, d8
 80192ee:	f000 ff5b 	bl	801a1a8 <_dtoa_r>
 80192f2:	2d47      	cmp	r5, #71	; 0x47
 80192f4:	d101      	bne.n	80192fa <__cvt+0x56>
 80192f6:	07fb      	lsls	r3, r7, #31
 80192f8:	d51a      	bpl.n	8019330 <__cvt+0x8c>
 80192fa:	2d46      	cmp	r5, #70	; 0x46
 80192fc:	eb00 0204 	add.w	r2, r0, r4
 8019300:	d10c      	bne.n	801931c <__cvt+0x78>
 8019302:	7803      	ldrb	r3, [r0, #0]
 8019304:	2b30      	cmp	r3, #48	; 0x30
 8019306:	d107      	bne.n	8019318 <__cvt+0x74>
 8019308:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801930c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019310:	bf1c      	itt	ne
 8019312:	f1c4 0401 	rsbne	r4, r4, #1
 8019316:	6034      	strne	r4, [r6, #0]
 8019318:	6833      	ldr	r3, [r6, #0]
 801931a:	441a      	add	r2, r3
 801931c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019324:	bf08      	it	eq
 8019326:	9203      	streq	r2, [sp, #12]
 8019328:	2130      	movs	r1, #48	; 0x30
 801932a:	9b03      	ldr	r3, [sp, #12]
 801932c:	4293      	cmp	r3, r2
 801932e:	d307      	bcc.n	8019340 <__cvt+0x9c>
 8019330:	9b03      	ldr	r3, [sp, #12]
 8019332:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019334:	1a1b      	subs	r3, r3, r0
 8019336:	6013      	str	r3, [r2, #0]
 8019338:	b005      	add	sp, #20
 801933a:	ecbd 8b02 	vpop	{d8}
 801933e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019340:	1c5c      	adds	r4, r3, #1
 8019342:	9403      	str	r4, [sp, #12]
 8019344:	7019      	strb	r1, [r3, #0]
 8019346:	e7f0      	b.n	801932a <__cvt+0x86>

08019348 <__exponent>:
 8019348:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801934a:	4603      	mov	r3, r0
 801934c:	2900      	cmp	r1, #0
 801934e:	bfb8      	it	lt
 8019350:	4249      	neglt	r1, r1
 8019352:	f803 2b02 	strb.w	r2, [r3], #2
 8019356:	bfb4      	ite	lt
 8019358:	222d      	movlt	r2, #45	; 0x2d
 801935a:	222b      	movge	r2, #43	; 0x2b
 801935c:	2909      	cmp	r1, #9
 801935e:	7042      	strb	r2, [r0, #1]
 8019360:	dd2a      	ble.n	80193b8 <__exponent+0x70>
 8019362:	f10d 0207 	add.w	r2, sp, #7
 8019366:	4617      	mov	r7, r2
 8019368:	260a      	movs	r6, #10
 801936a:	4694      	mov	ip, r2
 801936c:	fb91 f5f6 	sdiv	r5, r1, r6
 8019370:	fb06 1415 	mls	r4, r6, r5, r1
 8019374:	3430      	adds	r4, #48	; 0x30
 8019376:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801937a:	460c      	mov	r4, r1
 801937c:	2c63      	cmp	r4, #99	; 0x63
 801937e:	f102 32ff 	add.w	r2, r2, #4294967295
 8019382:	4629      	mov	r1, r5
 8019384:	dcf1      	bgt.n	801936a <__exponent+0x22>
 8019386:	3130      	adds	r1, #48	; 0x30
 8019388:	f1ac 0402 	sub.w	r4, ip, #2
 801938c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8019390:	1c41      	adds	r1, r0, #1
 8019392:	4622      	mov	r2, r4
 8019394:	42ba      	cmp	r2, r7
 8019396:	d30a      	bcc.n	80193ae <__exponent+0x66>
 8019398:	f10d 0209 	add.w	r2, sp, #9
 801939c:	eba2 020c 	sub.w	r2, r2, ip
 80193a0:	42bc      	cmp	r4, r7
 80193a2:	bf88      	it	hi
 80193a4:	2200      	movhi	r2, #0
 80193a6:	4413      	add	r3, r2
 80193a8:	1a18      	subs	r0, r3, r0
 80193aa:	b003      	add	sp, #12
 80193ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80193ae:	f812 5b01 	ldrb.w	r5, [r2], #1
 80193b2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80193b6:	e7ed      	b.n	8019394 <__exponent+0x4c>
 80193b8:	2330      	movs	r3, #48	; 0x30
 80193ba:	3130      	adds	r1, #48	; 0x30
 80193bc:	7083      	strb	r3, [r0, #2]
 80193be:	70c1      	strb	r1, [r0, #3]
 80193c0:	1d03      	adds	r3, r0, #4
 80193c2:	e7f1      	b.n	80193a8 <__exponent+0x60>
 80193c4:	0000      	movs	r0, r0
	...

080193c8 <_printf_float>:
 80193c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193cc:	b08b      	sub	sp, #44	; 0x2c
 80193ce:	460c      	mov	r4, r1
 80193d0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80193d4:	4616      	mov	r6, r2
 80193d6:	461f      	mov	r7, r3
 80193d8:	4605      	mov	r5, r0
 80193da:	f000 fdbf 	bl	8019f5c <_localeconv_r>
 80193de:	f8d0 b000 	ldr.w	fp, [r0]
 80193e2:	4658      	mov	r0, fp
 80193e4:	f7e8 fd84 	bl	8001ef0 <strlen>
 80193e8:	2300      	movs	r3, #0
 80193ea:	9308      	str	r3, [sp, #32]
 80193ec:	f8d8 3000 	ldr.w	r3, [r8]
 80193f0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80193f4:	6822      	ldr	r2, [r4, #0]
 80193f6:	3307      	adds	r3, #7
 80193f8:	f023 0307 	bic.w	r3, r3, #7
 80193fc:	f103 0108 	add.w	r1, r3, #8
 8019400:	f8c8 1000 	str.w	r1, [r8]
 8019404:	ed93 0b00 	vldr	d0, [r3]
 8019408:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8019668 <_printf_float+0x2a0>
 801940c:	eeb0 7bc0 	vabs.f64	d7, d0
 8019410:	eeb4 7b46 	vcmp.f64	d7, d6
 8019414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019418:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 801941c:	4682      	mov	sl, r0
 801941e:	dd24      	ble.n	801946a <_printf_float+0xa2>
 8019420:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8019424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019428:	d502      	bpl.n	8019430 <_printf_float+0x68>
 801942a:	232d      	movs	r3, #45	; 0x2d
 801942c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019430:	498f      	ldr	r1, [pc, #572]	; (8019670 <_printf_float+0x2a8>)
 8019432:	4b90      	ldr	r3, [pc, #576]	; (8019674 <_printf_float+0x2ac>)
 8019434:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8019438:	bf94      	ite	ls
 801943a:	4688      	movls	r8, r1
 801943c:	4698      	movhi	r8, r3
 801943e:	2303      	movs	r3, #3
 8019440:	6123      	str	r3, [r4, #16]
 8019442:	f022 0204 	bic.w	r2, r2, #4
 8019446:	2300      	movs	r3, #0
 8019448:	6022      	str	r2, [r4, #0]
 801944a:	9304      	str	r3, [sp, #16]
 801944c:	9700      	str	r7, [sp, #0]
 801944e:	4633      	mov	r3, r6
 8019450:	aa09      	add	r2, sp, #36	; 0x24
 8019452:	4621      	mov	r1, r4
 8019454:	4628      	mov	r0, r5
 8019456:	f000 f9d1 	bl	80197fc <_printf_common>
 801945a:	3001      	adds	r0, #1
 801945c:	f040 808a 	bne.w	8019574 <_printf_float+0x1ac>
 8019460:	f04f 30ff 	mov.w	r0, #4294967295
 8019464:	b00b      	add	sp, #44	; 0x2c
 8019466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801946a:	eeb4 0b40 	vcmp.f64	d0, d0
 801946e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019472:	d709      	bvc.n	8019488 <_printf_float+0xc0>
 8019474:	ee10 3a90 	vmov	r3, s1
 8019478:	2b00      	cmp	r3, #0
 801947a:	bfbc      	itt	lt
 801947c:	232d      	movlt	r3, #45	; 0x2d
 801947e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8019482:	497d      	ldr	r1, [pc, #500]	; (8019678 <_printf_float+0x2b0>)
 8019484:	4b7d      	ldr	r3, [pc, #500]	; (801967c <_printf_float+0x2b4>)
 8019486:	e7d5      	b.n	8019434 <_printf_float+0x6c>
 8019488:	6863      	ldr	r3, [r4, #4]
 801948a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801948e:	9104      	str	r1, [sp, #16]
 8019490:	1c59      	adds	r1, r3, #1
 8019492:	d13c      	bne.n	801950e <_printf_float+0x146>
 8019494:	2306      	movs	r3, #6
 8019496:	6063      	str	r3, [r4, #4]
 8019498:	2300      	movs	r3, #0
 801949a:	9303      	str	r3, [sp, #12]
 801949c:	ab08      	add	r3, sp, #32
 801949e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80194a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80194a6:	ab07      	add	r3, sp, #28
 80194a8:	6861      	ldr	r1, [r4, #4]
 80194aa:	9300      	str	r3, [sp, #0]
 80194ac:	6022      	str	r2, [r4, #0]
 80194ae:	f10d 031b 	add.w	r3, sp, #27
 80194b2:	4628      	mov	r0, r5
 80194b4:	f7ff fef6 	bl	80192a4 <__cvt>
 80194b8:	9b04      	ldr	r3, [sp, #16]
 80194ba:	9907      	ldr	r1, [sp, #28]
 80194bc:	2b47      	cmp	r3, #71	; 0x47
 80194be:	4680      	mov	r8, r0
 80194c0:	d108      	bne.n	80194d4 <_printf_float+0x10c>
 80194c2:	1cc8      	adds	r0, r1, #3
 80194c4:	db02      	blt.n	80194cc <_printf_float+0x104>
 80194c6:	6863      	ldr	r3, [r4, #4]
 80194c8:	4299      	cmp	r1, r3
 80194ca:	dd41      	ble.n	8019550 <_printf_float+0x188>
 80194cc:	f1a9 0902 	sub.w	r9, r9, #2
 80194d0:	fa5f f989 	uxtb.w	r9, r9
 80194d4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80194d8:	d820      	bhi.n	801951c <_printf_float+0x154>
 80194da:	3901      	subs	r1, #1
 80194dc:	464a      	mov	r2, r9
 80194de:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80194e2:	9107      	str	r1, [sp, #28]
 80194e4:	f7ff ff30 	bl	8019348 <__exponent>
 80194e8:	9a08      	ldr	r2, [sp, #32]
 80194ea:	9004      	str	r0, [sp, #16]
 80194ec:	1813      	adds	r3, r2, r0
 80194ee:	2a01      	cmp	r2, #1
 80194f0:	6123      	str	r3, [r4, #16]
 80194f2:	dc02      	bgt.n	80194fa <_printf_float+0x132>
 80194f4:	6822      	ldr	r2, [r4, #0]
 80194f6:	07d2      	lsls	r2, r2, #31
 80194f8:	d501      	bpl.n	80194fe <_printf_float+0x136>
 80194fa:	3301      	adds	r3, #1
 80194fc:	6123      	str	r3, [r4, #16]
 80194fe:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8019502:	2b00      	cmp	r3, #0
 8019504:	d0a2      	beq.n	801944c <_printf_float+0x84>
 8019506:	232d      	movs	r3, #45	; 0x2d
 8019508:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801950c:	e79e      	b.n	801944c <_printf_float+0x84>
 801950e:	9904      	ldr	r1, [sp, #16]
 8019510:	2947      	cmp	r1, #71	; 0x47
 8019512:	d1c1      	bne.n	8019498 <_printf_float+0xd0>
 8019514:	2b00      	cmp	r3, #0
 8019516:	d1bf      	bne.n	8019498 <_printf_float+0xd0>
 8019518:	2301      	movs	r3, #1
 801951a:	e7bc      	b.n	8019496 <_printf_float+0xce>
 801951c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8019520:	d118      	bne.n	8019554 <_printf_float+0x18c>
 8019522:	2900      	cmp	r1, #0
 8019524:	6863      	ldr	r3, [r4, #4]
 8019526:	dd0b      	ble.n	8019540 <_printf_float+0x178>
 8019528:	6121      	str	r1, [r4, #16]
 801952a:	b913      	cbnz	r3, 8019532 <_printf_float+0x16a>
 801952c:	6822      	ldr	r2, [r4, #0]
 801952e:	07d0      	lsls	r0, r2, #31
 8019530:	d502      	bpl.n	8019538 <_printf_float+0x170>
 8019532:	3301      	adds	r3, #1
 8019534:	440b      	add	r3, r1
 8019536:	6123      	str	r3, [r4, #16]
 8019538:	2300      	movs	r3, #0
 801953a:	65a1      	str	r1, [r4, #88]	; 0x58
 801953c:	9304      	str	r3, [sp, #16]
 801953e:	e7de      	b.n	80194fe <_printf_float+0x136>
 8019540:	b913      	cbnz	r3, 8019548 <_printf_float+0x180>
 8019542:	6822      	ldr	r2, [r4, #0]
 8019544:	07d2      	lsls	r2, r2, #31
 8019546:	d501      	bpl.n	801954c <_printf_float+0x184>
 8019548:	3302      	adds	r3, #2
 801954a:	e7f4      	b.n	8019536 <_printf_float+0x16e>
 801954c:	2301      	movs	r3, #1
 801954e:	e7f2      	b.n	8019536 <_printf_float+0x16e>
 8019550:	f04f 0967 	mov.w	r9, #103	; 0x67
 8019554:	9b08      	ldr	r3, [sp, #32]
 8019556:	4299      	cmp	r1, r3
 8019558:	db05      	blt.n	8019566 <_printf_float+0x19e>
 801955a:	6823      	ldr	r3, [r4, #0]
 801955c:	6121      	str	r1, [r4, #16]
 801955e:	07d8      	lsls	r0, r3, #31
 8019560:	d5ea      	bpl.n	8019538 <_printf_float+0x170>
 8019562:	1c4b      	adds	r3, r1, #1
 8019564:	e7e7      	b.n	8019536 <_printf_float+0x16e>
 8019566:	2900      	cmp	r1, #0
 8019568:	bfd4      	ite	le
 801956a:	f1c1 0202 	rsble	r2, r1, #2
 801956e:	2201      	movgt	r2, #1
 8019570:	4413      	add	r3, r2
 8019572:	e7e0      	b.n	8019536 <_printf_float+0x16e>
 8019574:	6823      	ldr	r3, [r4, #0]
 8019576:	055a      	lsls	r2, r3, #21
 8019578:	d407      	bmi.n	801958a <_printf_float+0x1c2>
 801957a:	6923      	ldr	r3, [r4, #16]
 801957c:	4642      	mov	r2, r8
 801957e:	4631      	mov	r1, r6
 8019580:	4628      	mov	r0, r5
 8019582:	47b8      	blx	r7
 8019584:	3001      	adds	r0, #1
 8019586:	d12a      	bne.n	80195de <_printf_float+0x216>
 8019588:	e76a      	b.n	8019460 <_printf_float+0x98>
 801958a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801958e:	f240 80e0 	bls.w	8019752 <_printf_float+0x38a>
 8019592:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8019596:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801959a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801959e:	d133      	bne.n	8019608 <_printf_float+0x240>
 80195a0:	4a37      	ldr	r2, [pc, #220]	; (8019680 <_printf_float+0x2b8>)
 80195a2:	2301      	movs	r3, #1
 80195a4:	4631      	mov	r1, r6
 80195a6:	4628      	mov	r0, r5
 80195a8:	47b8      	blx	r7
 80195aa:	3001      	adds	r0, #1
 80195ac:	f43f af58 	beq.w	8019460 <_printf_float+0x98>
 80195b0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80195b4:	429a      	cmp	r2, r3
 80195b6:	db02      	blt.n	80195be <_printf_float+0x1f6>
 80195b8:	6823      	ldr	r3, [r4, #0]
 80195ba:	07d8      	lsls	r0, r3, #31
 80195bc:	d50f      	bpl.n	80195de <_printf_float+0x216>
 80195be:	4653      	mov	r3, sl
 80195c0:	465a      	mov	r2, fp
 80195c2:	4631      	mov	r1, r6
 80195c4:	4628      	mov	r0, r5
 80195c6:	47b8      	blx	r7
 80195c8:	3001      	adds	r0, #1
 80195ca:	f43f af49 	beq.w	8019460 <_printf_float+0x98>
 80195ce:	f04f 0800 	mov.w	r8, #0
 80195d2:	f104 091a 	add.w	r9, r4, #26
 80195d6:	9b08      	ldr	r3, [sp, #32]
 80195d8:	3b01      	subs	r3, #1
 80195da:	4543      	cmp	r3, r8
 80195dc:	dc09      	bgt.n	80195f2 <_printf_float+0x22a>
 80195de:	6823      	ldr	r3, [r4, #0]
 80195e0:	079b      	lsls	r3, r3, #30
 80195e2:	f100 8106 	bmi.w	80197f2 <_printf_float+0x42a>
 80195e6:	68e0      	ldr	r0, [r4, #12]
 80195e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80195ea:	4298      	cmp	r0, r3
 80195ec:	bfb8      	it	lt
 80195ee:	4618      	movlt	r0, r3
 80195f0:	e738      	b.n	8019464 <_printf_float+0x9c>
 80195f2:	2301      	movs	r3, #1
 80195f4:	464a      	mov	r2, r9
 80195f6:	4631      	mov	r1, r6
 80195f8:	4628      	mov	r0, r5
 80195fa:	47b8      	blx	r7
 80195fc:	3001      	adds	r0, #1
 80195fe:	f43f af2f 	beq.w	8019460 <_printf_float+0x98>
 8019602:	f108 0801 	add.w	r8, r8, #1
 8019606:	e7e6      	b.n	80195d6 <_printf_float+0x20e>
 8019608:	9b07      	ldr	r3, [sp, #28]
 801960a:	2b00      	cmp	r3, #0
 801960c:	dc3a      	bgt.n	8019684 <_printf_float+0x2bc>
 801960e:	4a1c      	ldr	r2, [pc, #112]	; (8019680 <_printf_float+0x2b8>)
 8019610:	2301      	movs	r3, #1
 8019612:	4631      	mov	r1, r6
 8019614:	4628      	mov	r0, r5
 8019616:	47b8      	blx	r7
 8019618:	3001      	adds	r0, #1
 801961a:	f43f af21 	beq.w	8019460 <_printf_float+0x98>
 801961e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8019622:	4313      	orrs	r3, r2
 8019624:	d102      	bne.n	801962c <_printf_float+0x264>
 8019626:	6823      	ldr	r3, [r4, #0]
 8019628:	07d9      	lsls	r1, r3, #31
 801962a:	d5d8      	bpl.n	80195de <_printf_float+0x216>
 801962c:	4653      	mov	r3, sl
 801962e:	465a      	mov	r2, fp
 8019630:	4631      	mov	r1, r6
 8019632:	4628      	mov	r0, r5
 8019634:	47b8      	blx	r7
 8019636:	3001      	adds	r0, #1
 8019638:	f43f af12 	beq.w	8019460 <_printf_float+0x98>
 801963c:	f04f 0900 	mov.w	r9, #0
 8019640:	f104 0a1a 	add.w	sl, r4, #26
 8019644:	9b07      	ldr	r3, [sp, #28]
 8019646:	425b      	negs	r3, r3
 8019648:	454b      	cmp	r3, r9
 801964a:	dc01      	bgt.n	8019650 <_printf_float+0x288>
 801964c:	9b08      	ldr	r3, [sp, #32]
 801964e:	e795      	b.n	801957c <_printf_float+0x1b4>
 8019650:	2301      	movs	r3, #1
 8019652:	4652      	mov	r2, sl
 8019654:	4631      	mov	r1, r6
 8019656:	4628      	mov	r0, r5
 8019658:	47b8      	blx	r7
 801965a:	3001      	adds	r0, #1
 801965c:	f43f af00 	beq.w	8019460 <_printf_float+0x98>
 8019660:	f109 0901 	add.w	r9, r9, #1
 8019664:	e7ee      	b.n	8019644 <_printf_float+0x27c>
 8019666:	bf00      	nop
 8019668:	ffffffff 	.word	0xffffffff
 801966c:	7fefffff 	.word	0x7fefffff
 8019670:	0801f24a 	.word	0x0801f24a
 8019674:	0801f24e 	.word	0x0801f24e
 8019678:	0801f252 	.word	0x0801f252
 801967c:	0801f256 	.word	0x0801f256
 8019680:	0801f25a 	.word	0x0801f25a
 8019684:	9a08      	ldr	r2, [sp, #32]
 8019686:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019688:	429a      	cmp	r2, r3
 801968a:	bfa8      	it	ge
 801968c:	461a      	movge	r2, r3
 801968e:	2a00      	cmp	r2, #0
 8019690:	4691      	mov	r9, r2
 8019692:	dc38      	bgt.n	8019706 <_printf_float+0x33e>
 8019694:	2300      	movs	r3, #0
 8019696:	9305      	str	r3, [sp, #20]
 8019698:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801969c:	f104 021a 	add.w	r2, r4, #26
 80196a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80196a2:	9905      	ldr	r1, [sp, #20]
 80196a4:	9304      	str	r3, [sp, #16]
 80196a6:	eba3 0309 	sub.w	r3, r3, r9
 80196aa:	428b      	cmp	r3, r1
 80196ac:	dc33      	bgt.n	8019716 <_printf_float+0x34e>
 80196ae:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80196b2:	429a      	cmp	r2, r3
 80196b4:	db3c      	blt.n	8019730 <_printf_float+0x368>
 80196b6:	6823      	ldr	r3, [r4, #0]
 80196b8:	07da      	lsls	r2, r3, #31
 80196ba:	d439      	bmi.n	8019730 <_printf_float+0x368>
 80196bc:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80196c0:	eba2 0903 	sub.w	r9, r2, r3
 80196c4:	9b04      	ldr	r3, [sp, #16]
 80196c6:	1ad2      	subs	r2, r2, r3
 80196c8:	4591      	cmp	r9, r2
 80196ca:	bfa8      	it	ge
 80196cc:	4691      	movge	r9, r2
 80196ce:	f1b9 0f00 	cmp.w	r9, #0
 80196d2:	dc35      	bgt.n	8019740 <_printf_float+0x378>
 80196d4:	f04f 0800 	mov.w	r8, #0
 80196d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80196dc:	f104 0a1a 	add.w	sl, r4, #26
 80196e0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80196e4:	1a9b      	subs	r3, r3, r2
 80196e6:	eba3 0309 	sub.w	r3, r3, r9
 80196ea:	4543      	cmp	r3, r8
 80196ec:	f77f af77 	ble.w	80195de <_printf_float+0x216>
 80196f0:	2301      	movs	r3, #1
 80196f2:	4652      	mov	r2, sl
 80196f4:	4631      	mov	r1, r6
 80196f6:	4628      	mov	r0, r5
 80196f8:	47b8      	blx	r7
 80196fa:	3001      	adds	r0, #1
 80196fc:	f43f aeb0 	beq.w	8019460 <_printf_float+0x98>
 8019700:	f108 0801 	add.w	r8, r8, #1
 8019704:	e7ec      	b.n	80196e0 <_printf_float+0x318>
 8019706:	4613      	mov	r3, r2
 8019708:	4631      	mov	r1, r6
 801970a:	4642      	mov	r2, r8
 801970c:	4628      	mov	r0, r5
 801970e:	47b8      	blx	r7
 8019710:	3001      	adds	r0, #1
 8019712:	d1bf      	bne.n	8019694 <_printf_float+0x2cc>
 8019714:	e6a4      	b.n	8019460 <_printf_float+0x98>
 8019716:	2301      	movs	r3, #1
 8019718:	4631      	mov	r1, r6
 801971a:	4628      	mov	r0, r5
 801971c:	9204      	str	r2, [sp, #16]
 801971e:	47b8      	blx	r7
 8019720:	3001      	adds	r0, #1
 8019722:	f43f ae9d 	beq.w	8019460 <_printf_float+0x98>
 8019726:	9b05      	ldr	r3, [sp, #20]
 8019728:	9a04      	ldr	r2, [sp, #16]
 801972a:	3301      	adds	r3, #1
 801972c:	9305      	str	r3, [sp, #20]
 801972e:	e7b7      	b.n	80196a0 <_printf_float+0x2d8>
 8019730:	4653      	mov	r3, sl
 8019732:	465a      	mov	r2, fp
 8019734:	4631      	mov	r1, r6
 8019736:	4628      	mov	r0, r5
 8019738:	47b8      	blx	r7
 801973a:	3001      	adds	r0, #1
 801973c:	d1be      	bne.n	80196bc <_printf_float+0x2f4>
 801973e:	e68f      	b.n	8019460 <_printf_float+0x98>
 8019740:	9a04      	ldr	r2, [sp, #16]
 8019742:	464b      	mov	r3, r9
 8019744:	4442      	add	r2, r8
 8019746:	4631      	mov	r1, r6
 8019748:	4628      	mov	r0, r5
 801974a:	47b8      	blx	r7
 801974c:	3001      	adds	r0, #1
 801974e:	d1c1      	bne.n	80196d4 <_printf_float+0x30c>
 8019750:	e686      	b.n	8019460 <_printf_float+0x98>
 8019752:	9a08      	ldr	r2, [sp, #32]
 8019754:	2a01      	cmp	r2, #1
 8019756:	dc01      	bgt.n	801975c <_printf_float+0x394>
 8019758:	07db      	lsls	r3, r3, #31
 801975a:	d537      	bpl.n	80197cc <_printf_float+0x404>
 801975c:	2301      	movs	r3, #1
 801975e:	4642      	mov	r2, r8
 8019760:	4631      	mov	r1, r6
 8019762:	4628      	mov	r0, r5
 8019764:	47b8      	blx	r7
 8019766:	3001      	adds	r0, #1
 8019768:	f43f ae7a 	beq.w	8019460 <_printf_float+0x98>
 801976c:	4653      	mov	r3, sl
 801976e:	465a      	mov	r2, fp
 8019770:	4631      	mov	r1, r6
 8019772:	4628      	mov	r0, r5
 8019774:	47b8      	blx	r7
 8019776:	3001      	adds	r0, #1
 8019778:	f43f ae72 	beq.w	8019460 <_printf_float+0x98>
 801977c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8019780:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019788:	9b08      	ldr	r3, [sp, #32]
 801978a:	d01a      	beq.n	80197c2 <_printf_float+0x3fa>
 801978c:	3b01      	subs	r3, #1
 801978e:	f108 0201 	add.w	r2, r8, #1
 8019792:	4631      	mov	r1, r6
 8019794:	4628      	mov	r0, r5
 8019796:	47b8      	blx	r7
 8019798:	3001      	adds	r0, #1
 801979a:	d10e      	bne.n	80197ba <_printf_float+0x3f2>
 801979c:	e660      	b.n	8019460 <_printf_float+0x98>
 801979e:	2301      	movs	r3, #1
 80197a0:	464a      	mov	r2, r9
 80197a2:	4631      	mov	r1, r6
 80197a4:	4628      	mov	r0, r5
 80197a6:	47b8      	blx	r7
 80197a8:	3001      	adds	r0, #1
 80197aa:	f43f ae59 	beq.w	8019460 <_printf_float+0x98>
 80197ae:	f108 0801 	add.w	r8, r8, #1
 80197b2:	9b08      	ldr	r3, [sp, #32]
 80197b4:	3b01      	subs	r3, #1
 80197b6:	4543      	cmp	r3, r8
 80197b8:	dcf1      	bgt.n	801979e <_printf_float+0x3d6>
 80197ba:	9b04      	ldr	r3, [sp, #16]
 80197bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80197c0:	e6dd      	b.n	801957e <_printf_float+0x1b6>
 80197c2:	f04f 0800 	mov.w	r8, #0
 80197c6:	f104 091a 	add.w	r9, r4, #26
 80197ca:	e7f2      	b.n	80197b2 <_printf_float+0x3ea>
 80197cc:	2301      	movs	r3, #1
 80197ce:	4642      	mov	r2, r8
 80197d0:	e7df      	b.n	8019792 <_printf_float+0x3ca>
 80197d2:	2301      	movs	r3, #1
 80197d4:	464a      	mov	r2, r9
 80197d6:	4631      	mov	r1, r6
 80197d8:	4628      	mov	r0, r5
 80197da:	47b8      	blx	r7
 80197dc:	3001      	adds	r0, #1
 80197de:	f43f ae3f 	beq.w	8019460 <_printf_float+0x98>
 80197e2:	f108 0801 	add.w	r8, r8, #1
 80197e6:	68e3      	ldr	r3, [r4, #12]
 80197e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80197ea:	1a5b      	subs	r3, r3, r1
 80197ec:	4543      	cmp	r3, r8
 80197ee:	dcf0      	bgt.n	80197d2 <_printf_float+0x40a>
 80197f0:	e6f9      	b.n	80195e6 <_printf_float+0x21e>
 80197f2:	f04f 0800 	mov.w	r8, #0
 80197f6:	f104 0919 	add.w	r9, r4, #25
 80197fa:	e7f4      	b.n	80197e6 <_printf_float+0x41e>

080197fc <_printf_common>:
 80197fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019800:	4616      	mov	r6, r2
 8019802:	4699      	mov	r9, r3
 8019804:	688a      	ldr	r2, [r1, #8]
 8019806:	690b      	ldr	r3, [r1, #16]
 8019808:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801980c:	4293      	cmp	r3, r2
 801980e:	bfb8      	it	lt
 8019810:	4613      	movlt	r3, r2
 8019812:	6033      	str	r3, [r6, #0]
 8019814:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019818:	4607      	mov	r7, r0
 801981a:	460c      	mov	r4, r1
 801981c:	b10a      	cbz	r2, 8019822 <_printf_common+0x26>
 801981e:	3301      	adds	r3, #1
 8019820:	6033      	str	r3, [r6, #0]
 8019822:	6823      	ldr	r3, [r4, #0]
 8019824:	0699      	lsls	r1, r3, #26
 8019826:	bf42      	ittt	mi
 8019828:	6833      	ldrmi	r3, [r6, #0]
 801982a:	3302      	addmi	r3, #2
 801982c:	6033      	strmi	r3, [r6, #0]
 801982e:	6825      	ldr	r5, [r4, #0]
 8019830:	f015 0506 	ands.w	r5, r5, #6
 8019834:	d106      	bne.n	8019844 <_printf_common+0x48>
 8019836:	f104 0a19 	add.w	sl, r4, #25
 801983a:	68e3      	ldr	r3, [r4, #12]
 801983c:	6832      	ldr	r2, [r6, #0]
 801983e:	1a9b      	subs	r3, r3, r2
 8019840:	42ab      	cmp	r3, r5
 8019842:	dc26      	bgt.n	8019892 <_printf_common+0x96>
 8019844:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019848:	1e13      	subs	r3, r2, #0
 801984a:	6822      	ldr	r2, [r4, #0]
 801984c:	bf18      	it	ne
 801984e:	2301      	movne	r3, #1
 8019850:	0692      	lsls	r2, r2, #26
 8019852:	d42b      	bmi.n	80198ac <_printf_common+0xb0>
 8019854:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019858:	4649      	mov	r1, r9
 801985a:	4638      	mov	r0, r7
 801985c:	47c0      	blx	r8
 801985e:	3001      	adds	r0, #1
 8019860:	d01e      	beq.n	80198a0 <_printf_common+0xa4>
 8019862:	6823      	ldr	r3, [r4, #0]
 8019864:	6922      	ldr	r2, [r4, #16]
 8019866:	f003 0306 	and.w	r3, r3, #6
 801986a:	2b04      	cmp	r3, #4
 801986c:	bf02      	ittt	eq
 801986e:	68e5      	ldreq	r5, [r4, #12]
 8019870:	6833      	ldreq	r3, [r6, #0]
 8019872:	1aed      	subeq	r5, r5, r3
 8019874:	68a3      	ldr	r3, [r4, #8]
 8019876:	bf0c      	ite	eq
 8019878:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801987c:	2500      	movne	r5, #0
 801987e:	4293      	cmp	r3, r2
 8019880:	bfc4      	itt	gt
 8019882:	1a9b      	subgt	r3, r3, r2
 8019884:	18ed      	addgt	r5, r5, r3
 8019886:	2600      	movs	r6, #0
 8019888:	341a      	adds	r4, #26
 801988a:	42b5      	cmp	r5, r6
 801988c:	d11a      	bne.n	80198c4 <_printf_common+0xc8>
 801988e:	2000      	movs	r0, #0
 8019890:	e008      	b.n	80198a4 <_printf_common+0xa8>
 8019892:	2301      	movs	r3, #1
 8019894:	4652      	mov	r2, sl
 8019896:	4649      	mov	r1, r9
 8019898:	4638      	mov	r0, r7
 801989a:	47c0      	blx	r8
 801989c:	3001      	adds	r0, #1
 801989e:	d103      	bne.n	80198a8 <_printf_common+0xac>
 80198a0:	f04f 30ff 	mov.w	r0, #4294967295
 80198a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80198a8:	3501      	adds	r5, #1
 80198aa:	e7c6      	b.n	801983a <_printf_common+0x3e>
 80198ac:	18e1      	adds	r1, r4, r3
 80198ae:	1c5a      	adds	r2, r3, #1
 80198b0:	2030      	movs	r0, #48	; 0x30
 80198b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80198b6:	4422      	add	r2, r4
 80198b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80198bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80198c0:	3302      	adds	r3, #2
 80198c2:	e7c7      	b.n	8019854 <_printf_common+0x58>
 80198c4:	2301      	movs	r3, #1
 80198c6:	4622      	mov	r2, r4
 80198c8:	4649      	mov	r1, r9
 80198ca:	4638      	mov	r0, r7
 80198cc:	47c0      	blx	r8
 80198ce:	3001      	adds	r0, #1
 80198d0:	d0e6      	beq.n	80198a0 <_printf_common+0xa4>
 80198d2:	3601      	adds	r6, #1
 80198d4:	e7d9      	b.n	801988a <_printf_common+0x8e>
	...

080198d8 <_printf_i>:
 80198d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80198dc:	7e0f      	ldrb	r7, [r1, #24]
 80198de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80198e0:	2f78      	cmp	r7, #120	; 0x78
 80198e2:	4691      	mov	r9, r2
 80198e4:	4680      	mov	r8, r0
 80198e6:	460c      	mov	r4, r1
 80198e8:	469a      	mov	sl, r3
 80198ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80198ee:	d807      	bhi.n	8019900 <_printf_i+0x28>
 80198f0:	2f62      	cmp	r7, #98	; 0x62
 80198f2:	d80a      	bhi.n	801990a <_printf_i+0x32>
 80198f4:	2f00      	cmp	r7, #0
 80198f6:	f000 80d4 	beq.w	8019aa2 <_printf_i+0x1ca>
 80198fa:	2f58      	cmp	r7, #88	; 0x58
 80198fc:	f000 80c0 	beq.w	8019a80 <_printf_i+0x1a8>
 8019900:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019904:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019908:	e03a      	b.n	8019980 <_printf_i+0xa8>
 801990a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801990e:	2b15      	cmp	r3, #21
 8019910:	d8f6      	bhi.n	8019900 <_printf_i+0x28>
 8019912:	a101      	add	r1, pc, #4	; (adr r1, 8019918 <_printf_i+0x40>)
 8019914:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019918:	08019971 	.word	0x08019971
 801991c:	08019985 	.word	0x08019985
 8019920:	08019901 	.word	0x08019901
 8019924:	08019901 	.word	0x08019901
 8019928:	08019901 	.word	0x08019901
 801992c:	08019901 	.word	0x08019901
 8019930:	08019985 	.word	0x08019985
 8019934:	08019901 	.word	0x08019901
 8019938:	08019901 	.word	0x08019901
 801993c:	08019901 	.word	0x08019901
 8019940:	08019901 	.word	0x08019901
 8019944:	08019a89 	.word	0x08019a89
 8019948:	080199b1 	.word	0x080199b1
 801994c:	08019a43 	.word	0x08019a43
 8019950:	08019901 	.word	0x08019901
 8019954:	08019901 	.word	0x08019901
 8019958:	08019aab 	.word	0x08019aab
 801995c:	08019901 	.word	0x08019901
 8019960:	080199b1 	.word	0x080199b1
 8019964:	08019901 	.word	0x08019901
 8019968:	08019901 	.word	0x08019901
 801996c:	08019a4b 	.word	0x08019a4b
 8019970:	682b      	ldr	r3, [r5, #0]
 8019972:	1d1a      	adds	r2, r3, #4
 8019974:	681b      	ldr	r3, [r3, #0]
 8019976:	602a      	str	r2, [r5, #0]
 8019978:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801997c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019980:	2301      	movs	r3, #1
 8019982:	e09f      	b.n	8019ac4 <_printf_i+0x1ec>
 8019984:	6820      	ldr	r0, [r4, #0]
 8019986:	682b      	ldr	r3, [r5, #0]
 8019988:	0607      	lsls	r7, r0, #24
 801998a:	f103 0104 	add.w	r1, r3, #4
 801998e:	6029      	str	r1, [r5, #0]
 8019990:	d501      	bpl.n	8019996 <_printf_i+0xbe>
 8019992:	681e      	ldr	r6, [r3, #0]
 8019994:	e003      	b.n	801999e <_printf_i+0xc6>
 8019996:	0646      	lsls	r6, r0, #25
 8019998:	d5fb      	bpl.n	8019992 <_printf_i+0xba>
 801999a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801999e:	2e00      	cmp	r6, #0
 80199a0:	da03      	bge.n	80199aa <_printf_i+0xd2>
 80199a2:	232d      	movs	r3, #45	; 0x2d
 80199a4:	4276      	negs	r6, r6
 80199a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80199aa:	485a      	ldr	r0, [pc, #360]	; (8019b14 <_printf_i+0x23c>)
 80199ac:	230a      	movs	r3, #10
 80199ae:	e012      	b.n	80199d6 <_printf_i+0xfe>
 80199b0:	682b      	ldr	r3, [r5, #0]
 80199b2:	6820      	ldr	r0, [r4, #0]
 80199b4:	1d19      	adds	r1, r3, #4
 80199b6:	6029      	str	r1, [r5, #0]
 80199b8:	0605      	lsls	r5, r0, #24
 80199ba:	d501      	bpl.n	80199c0 <_printf_i+0xe8>
 80199bc:	681e      	ldr	r6, [r3, #0]
 80199be:	e002      	b.n	80199c6 <_printf_i+0xee>
 80199c0:	0641      	lsls	r1, r0, #25
 80199c2:	d5fb      	bpl.n	80199bc <_printf_i+0xe4>
 80199c4:	881e      	ldrh	r6, [r3, #0]
 80199c6:	4853      	ldr	r0, [pc, #332]	; (8019b14 <_printf_i+0x23c>)
 80199c8:	2f6f      	cmp	r7, #111	; 0x6f
 80199ca:	bf0c      	ite	eq
 80199cc:	2308      	moveq	r3, #8
 80199ce:	230a      	movne	r3, #10
 80199d0:	2100      	movs	r1, #0
 80199d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80199d6:	6865      	ldr	r5, [r4, #4]
 80199d8:	60a5      	str	r5, [r4, #8]
 80199da:	2d00      	cmp	r5, #0
 80199dc:	bfa2      	ittt	ge
 80199de:	6821      	ldrge	r1, [r4, #0]
 80199e0:	f021 0104 	bicge.w	r1, r1, #4
 80199e4:	6021      	strge	r1, [r4, #0]
 80199e6:	b90e      	cbnz	r6, 80199ec <_printf_i+0x114>
 80199e8:	2d00      	cmp	r5, #0
 80199ea:	d04b      	beq.n	8019a84 <_printf_i+0x1ac>
 80199ec:	4615      	mov	r5, r2
 80199ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80199f2:	fb03 6711 	mls	r7, r3, r1, r6
 80199f6:	5dc7      	ldrb	r7, [r0, r7]
 80199f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80199fc:	4637      	mov	r7, r6
 80199fe:	42bb      	cmp	r3, r7
 8019a00:	460e      	mov	r6, r1
 8019a02:	d9f4      	bls.n	80199ee <_printf_i+0x116>
 8019a04:	2b08      	cmp	r3, #8
 8019a06:	d10b      	bne.n	8019a20 <_printf_i+0x148>
 8019a08:	6823      	ldr	r3, [r4, #0]
 8019a0a:	07de      	lsls	r6, r3, #31
 8019a0c:	d508      	bpl.n	8019a20 <_printf_i+0x148>
 8019a0e:	6923      	ldr	r3, [r4, #16]
 8019a10:	6861      	ldr	r1, [r4, #4]
 8019a12:	4299      	cmp	r1, r3
 8019a14:	bfde      	ittt	le
 8019a16:	2330      	movle	r3, #48	; 0x30
 8019a18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019a1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019a20:	1b52      	subs	r2, r2, r5
 8019a22:	6122      	str	r2, [r4, #16]
 8019a24:	f8cd a000 	str.w	sl, [sp]
 8019a28:	464b      	mov	r3, r9
 8019a2a:	aa03      	add	r2, sp, #12
 8019a2c:	4621      	mov	r1, r4
 8019a2e:	4640      	mov	r0, r8
 8019a30:	f7ff fee4 	bl	80197fc <_printf_common>
 8019a34:	3001      	adds	r0, #1
 8019a36:	d14a      	bne.n	8019ace <_printf_i+0x1f6>
 8019a38:	f04f 30ff 	mov.w	r0, #4294967295
 8019a3c:	b004      	add	sp, #16
 8019a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a42:	6823      	ldr	r3, [r4, #0]
 8019a44:	f043 0320 	orr.w	r3, r3, #32
 8019a48:	6023      	str	r3, [r4, #0]
 8019a4a:	4833      	ldr	r0, [pc, #204]	; (8019b18 <_printf_i+0x240>)
 8019a4c:	2778      	movs	r7, #120	; 0x78
 8019a4e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8019a52:	6823      	ldr	r3, [r4, #0]
 8019a54:	6829      	ldr	r1, [r5, #0]
 8019a56:	061f      	lsls	r7, r3, #24
 8019a58:	f851 6b04 	ldr.w	r6, [r1], #4
 8019a5c:	d402      	bmi.n	8019a64 <_printf_i+0x18c>
 8019a5e:	065f      	lsls	r7, r3, #25
 8019a60:	bf48      	it	mi
 8019a62:	b2b6      	uxthmi	r6, r6
 8019a64:	07df      	lsls	r7, r3, #31
 8019a66:	bf48      	it	mi
 8019a68:	f043 0320 	orrmi.w	r3, r3, #32
 8019a6c:	6029      	str	r1, [r5, #0]
 8019a6e:	bf48      	it	mi
 8019a70:	6023      	strmi	r3, [r4, #0]
 8019a72:	b91e      	cbnz	r6, 8019a7c <_printf_i+0x1a4>
 8019a74:	6823      	ldr	r3, [r4, #0]
 8019a76:	f023 0320 	bic.w	r3, r3, #32
 8019a7a:	6023      	str	r3, [r4, #0]
 8019a7c:	2310      	movs	r3, #16
 8019a7e:	e7a7      	b.n	80199d0 <_printf_i+0xf8>
 8019a80:	4824      	ldr	r0, [pc, #144]	; (8019b14 <_printf_i+0x23c>)
 8019a82:	e7e4      	b.n	8019a4e <_printf_i+0x176>
 8019a84:	4615      	mov	r5, r2
 8019a86:	e7bd      	b.n	8019a04 <_printf_i+0x12c>
 8019a88:	682b      	ldr	r3, [r5, #0]
 8019a8a:	6826      	ldr	r6, [r4, #0]
 8019a8c:	6961      	ldr	r1, [r4, #20]
 8019a8e:	1d18      	adds	r0, r3, #4
 8019a90:	6028      	str	r0, [r5, #0]
 8019a92:	0635      	lsls	r5, r6, #24
 8019a94:	681b      	ldr	r3, [r3, #0]
 8019a96:	d501      	bpl.n	8019a9c <_printf_i+0x1c4>
 8019a98:	6019      	str	r1, [r3, #0]
 8019a9a:	e002      	b.n	8019aa2 <_printf_i+0x1ca>
 8019a9c:	0670      	lsls	r0, r6, #25
 8019a9e:	d5fb      	bpl.n	8019a98 <_printf_i+0x1c0>
 8019aa0:	8019      	strh	r1, [r3, #0]
 8019aa2:	2300      	movs	r3, #0
 8019aa4:	6123      	str	r3, [r4, #16]
 8019aa6:	4615      	mov	r5, r2
 8019aa8:	e7bc      	b.n	8019a24 <_printf_i+0x14c>
 8019aaa:	682b      	ldr	r3, [r5, #0]
 8019aac:	1d1a      	adds	r2, r3, #4
 8019aae:	602a      	str	r2, [r5, #0]
 8019ab0:	681d      	ldr	r5, [r3, #0]
 8019ab2:	6862      	ldr	r2, [r4, #4]
 8019ab4:	2100      	movs	r1, #0
 8019ab6:	4628      	mov	r0, r5
 8019ab8:	f7e8 f9ca 	bl	8001e50 <memchr>
 8019abc:	b108      	cbz	r0, 8019ac2 <_printf_i+0x1ea>
 8019abe:	1b40      	subs	r0, r0, r5
 8019ac0:	6060      	str	r0, [r4, #4]
 8019ac2:	6863      	ldr	r3, [r4, #4]
 8019ac4:	6123      	str	r3, [r4, #16]
 8019ac6:	2300      	movs	r3, #0
 8019ac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019acc:	e7aa      	b.n	8019a24 <_printf_i+0x14c>
 8019ace:	6923      	ldr	r3, [r4, #16]
 8019ad0:	462a      	mov	r2, r5
 8019ad2:	4649      	mov	r1, r9
 8019ad4:	4640      	mov	r0, r8
 8019ad6:	47d0      	blx	sl
 8019ad8:	3001      	adds	r0, #1
 8019ada:	d0ad      	beq.n	8019a38 <_printf_i+0x160>
 8019adc:	6823      	ldr	r3, [r4, #0]
 8019ade:	079b      	lsls	r3, r3, #30
 8019ae0:	d413      	bmi.n	8019b0a <_printf_i+0x232>
 8019ae2:	68e0      	ldr	r0, [r4, #12]
 8019ae4:	9b03      	ldr	r3, [sp, #12]
 8019ae6:	4298      	cmp	r0, r3
 8019ae8:	bfb8      	it	lt
 8019aea:	4618      	movlt	r0, r3
 8019aec:	e7a6      	b.n	8019a3c <_printf_i+0x164>
 8019aee:	2301      	movs	r3, #1
 8019af0:	4632      	mov	r2, r6
 8019af2:	4649      	mov	r1, r9
 8019af4:	4640      	mov	r0, r8
 8019af6:	47d0      	blx	sl
 8019af8:	3001      	adds	r0, #1
 8019afa:	d09d      	beq.n	8019a38 <_printf_i+0x160>
 8019afc:	3501      	adds	r5, #1
 8019afe:	68e3      	ldr	r3, [r4, #12]
 8019b00:	9903      	ldr	r1, [sp, #12]
 8019b02:	1a5b      	subs	r3, r3, r1
 8019b04:	42ab      	cmp	r3, r5
 8019b06:	dcf2      	bgt.n	8019aee <_printf_i+0x216>
 8019b08:	e7eb      	b.n	8019ae2 <_printf_i+0x20a>
 8019b0a:	2500      	movs	r5, #0
 8019b0c:	f104 0619 	add.w	r6, r4, #25
 8019b10:	e7f5      	b.n	8019afe <_printf_i+0x226>
 8019b12:	bf00      	nop
 8019b14:	0801f25c 	.word	0x0801f25c
 8019b18:	0801f26d 	.word	0x0801f26d

08019b1c <std>:
 8019b1c:	2300      	movs	r3, #0
 8019b1e:	b510      	push	{r4, lr}
 8019b20:	4604      	mov	r4, r0
 8019b22:	e9c0 3300 	strd	r3, r3, [r0]
 8019b26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019b2a:	6083      	str	r3, [r0, #8]
 8019b2c:	8181      	strh	r1, [r0, #12]
 8019b2e:	6643      	str	r3, [r0, #100]	; 0x64
 8019b30:	81c2      	strh	r2, [r0, #14]
 8019b32:	6183      	str	r3, [r0, #24]
 8019b34:	4619      	mov	r1, r3
 8019b36:	2208      	movs	r2, #8
 8019b38:	305c      	adds	r0, #92	; 0x5c
 8019b3a:	f000 fa07 	bl	8019f4c <memset>
 8019b3e:	4b0d      	ldr	r3, [pc, #52]	; (8019b74 <std+0x58>)
 8019b40:	6263      	str	r3, [r4, #36]	; 0x24
 8019b42:	4b0d      	ldr	r3, [pc, #52]	; (8019b78 <std+0x5c>)
 8019b44:	62a3      	str	r3, [r4, #40]	; 0x28
 8019b46:	4b0d      	ldr	r3, [pc, #52]	; (8019b7c <std+0x60>)
 8019b48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019b4a:	4b0d      	ldr	r3, [pc, #52]	; (8019b80 <std+0x64>)
 8019b4c:	6323      	str	r3, [r4, #48]	; 0x30
 8019b4e:	4b0d      	ldr	r3, [pc, #52]	; (8019b84 <std+0x68>)
 8019b50:	6224      	str	r4, [r4, #32]
 8019b52:	429c      	cmp	r4, r3
 8019b54:	d006      	beq.n	8019b64 <std+0x48>
 8019b56:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8019b5a:	4294      	cmp	r4, r2
 8019b5c:	d002      	beq.n	8019b64 <std+0x48>
 8019b5e:	33d0      	adds	r3, #208	; 0xd0
 8019b60:	429c      	cmp	r4, r3
 8019b62:	d105      	bne.n	8019b70 <std+0x54>
 8019b64:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019b6c:	f000 ba64 	b.w	801a038 <__retarget_lock_init_recursive>
 8019b70:	bd10      	pop	{r4, pc}
 8019b72:	bf00      	nop
 8019b74:	08019d7d 	.word	0x08019d7d
 8019b78:	08019d9f 	.word	0x08019d9f
 8019b7c:	08019dd7 	.word	0x08019dd7
 8019b80:	08019dfb 	.word	0x08019dfb
 8019b84:	20007234 	.word	0x20007234

08019b88 <stdio_exit_handler>:
 8019b88:	4a02      	ldr	r2, [pc, #8]	; (8019b94 <stdio_exit_handler+0xc>)
 8019b8a:	4903      	ldr	r1, [pc, #12]	; (8019b98 <stdio_exit_handler+0x10>)
 8019b8c:	4803      	ldr	r0, [pc, #12]	; (8019b9c <stdio_exit_handler+0x14>)
 8019b8e:	f000 b869 	b.w	8019c64 <_fwalk_sglue>
 8019b92:	bf00      	nop
 8019b94:	20000064 	.word	0x20000064
 8019b98:	0801b90d 	.word	0x0801b90d
 8019b9c:	20000070 	.word	0x20000070

08019ba0 <cleanup_stdio>:
 8019ba0:	6841      	ldr	r1, [r0, #4]
 8019ba2:	4b0c      	ldr	r3, [pc, #48]	; (8019bd4 <cleanup_stdio+0x34>)
 8019ba4:	4299      	cmp	r1, r3
 8019ba6:	b510      	push	{r4, lr}
 8019ba8:	4604      	mov	r4, r0
 8019baa:	d001      	beq.n	8019bb0 <cleanup_stdio+0x10>
 8019bac:	f001 feae 	bl	801b90c <_fflush_r>
 8019bb0:	68a1      	ldr	r1, [r4, #8]
 8019bb2:	4b09      	ldr	r3, [pc, #36]	; (8019bd8 <cleanup_stdio+0x38>)
 8019bb4:	4299      	cmp	r1, r3
 8019bb6:	d002      	beq.n	8019bbe <cleanup_stdio+0x1e>
 8019bb8:	4620      	mov	r0, r4
 8019bba:	f001 fea7 	bl	801b90c <_fflush_r>
 8019bbe:	68e1      	ldr	r1, [r4, #12]
 8019bc0:	4b06      	ldr	r3, [pc, #24]	; (8019bdc <cleanup_stdio+0x3c>)
 8019bc2:	4299      	cmp	r1, r3
 8019bc4:	d004      	beq.n	8019bd0 <cleanup_stdio+0x30>
 8019bc6:	4620      	mov	r0, r4
 8019bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019bcc:	f001 be9e 	b.w	801b90c <_fflush_r>
 8019bd0:	bd10      	pop	{r4, pc}
 8019bd2:	bf00      	nop
 8019bd4:	20007234 	.word	0x20007234
 8019bd8:	2000729c 	.word	0x2000729c
 8019bdc:	20007304 	.word	0x20007304

08019be0 <global_stdio_init.part.0>:
 8019be0:	b510      	push	{r4, lr}
 8019be2:	4b0b      	ldr	r3, [pc, #44]	; (8019c10 <global_stdio_init.part.0+0x30>)
 8019be4:	4c0b      	ldr	r4, [pc, #44]	; (8019c14 <global_stdio_init.part.0+0x34>)
 8019be6:	4a0c      	ldr	r2, [pc, #48]	; (8019c18 <global_stdio_init.part.0+0x38>)
 8019be8:	601a      	str	r2, [r3, #0]
 8019bea:	4620      	mov	r0, r4
 8019bec:	2200      	movs	r2, #0
 8019bee:	2104      	movs	r1, #4
 8019bf0:	f7ff ff94 	bl	8019b1c <std>
 8019bf4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8019bf8:	2201      	movs	r2, #1
 8019bfa:	2109      	movs	r1, #9
 8019bfc:	f7ff ff8e 	bl	8019b1c <std>
 8019c00:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8019c04:	2202      	movs	r2, #2
 8019c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019c0a:	2112      	movs	r1, #18
 8019c0c:	f7ff bf86 	b.w	8019b1c <std>
 8019c10:	2000736c 	.word	0x2000736c
 8019c14:	20007234 	.word	0x20007234
 8019c18:	08019b89 	.word	0x08019b89

08019c1c <__sfp_lock_acquire>:
 8019c1c:	4801      	ldr	r0, [pc, #4]	; (8019c24 <__sfp_lock_acquire+0x8>)
 8019c1e:	f000 ba0c 	b.w	801a03a <__retarget_lock_acquire_recursive>
 8019c22:	bf00      	nop
 8019c24:	20007375 	.word	0x20007375

08019c28 <__sfp_lock_release>:
 8019c28:	4801      	ldr	r0, [pc, #4]	; (8019c30 <__sfp_lock_release+0x8>)
 8019c2a:	f000 ba07 	b.w	801a03c <__retarget_lock_release_recursive>
 8019c2e:	bf00      	nop
 8019c30:	20007375 	.word	0x20007375

08019c34 <__sinit>:
 8019c34:	b510      	push	{r4, lr}
 8019c36:	4604      	mov	r4, r0
 8019c38:	f7ff fff0 	bl	8019c1c <__sfp_lock_acquire>
 8019c3c:	6a23      	ldr	r3, [r4, #32]
 8019c3e:	b11b      	cbz	r3, 8019c48 <__sinit+0x14>
 8019c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019c44:	f7ff bff0 	b.w	8019c28 <__sfp_lock_release>
 8019c48:	4b04      	ldr	r3, [pc, #16]	; (8019c5c <__sinit+0x28>)
 8019c4a:	6223      	str	r3, [r4, #32]
 8019c4c:	4b04      	ldr	r3, [pc, #16]	; (8019c60 <__sinit+0x2c>)
 8019c4e:	681b      	ldr	r3, [r3, #0]
 8019c50:	2b00      	cmp	r3, #0
 8019c52:	d1f5      	bne.n	8019c40 <__sinit+0xc>
 8019c54:	f7ff ffc4 	bl	8019be0 <global_stdio_init.part.0>
 8019c58:	e7f2      	b.n	8019c40 <__sinit+0xc>
 8019c5a:	bf00      	nop
 8019c5c:	08019ba1 	.word	0x08019ba1
 8019c60:	2000736c 	.word	0x2000736c

08019c64 <_fwalk_sglue>:
 8019c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019c68:	4607      	mov	r7, r0
 8019c6a:	4688      	mov	r8, r1
 8019c6c:	4614      	mov	r4, r2
 8019c6e:	2600      	movs	r6, #0
 8019c70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019c74:	f1b9 0901 	subs.w	r9, r9, #1
 8019c78:	d505      	bpl.n	8019c86 <_fwalk_sglue+0x22>
 8019c7a:	6824      	ldr	r4, [r4, #0]
 8019c7c:	2c00      	cmp	r4, #0
 8019c7e:	d1f7      	bne.n	8019c70 <_fwalk_sglue+0xc>
 8019c80:	4630      	mov	r0, r6
 8019c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019c86:	89ab      	ldrh	r3, [r5, #12]
 8019c88:	2b01      	cmp	r3, #1
 8019c8a:	d907      	bls.n	8019c9c <_fwalk_sglue+0x38>
 8019c8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019c90:	3301      	adds	r3, #1
 8019c92:	d003      	beq.n	8019c9c <_fwalk_sglue+0x38>
 8019c94:	4629      	mov	r1, r5
 8019c96:	4638      	mov	r0, r7
 8019c98:	47c0      	blx	r8
 8019c9a:	4306      	orrs	r6, r0
 8019c9c:	3568      	adds	r5, #104	; 0x68
 8019c9e:	e7e9      	b.n	8019c74 <_fwalk_sglue+0x10>

08019ca0 <iprintf>:
 8019ca0:	b40f      	push	{r0, r1, r2, r3}
 8019ca2:	b507      	push	{r0, r1, r2, lr}
 8019ca4:	4906      	ldr	r1, [pc, #24]	; (8019cc0 <iprintf+0x20>)
 8019ca6:	ab04      	add	r3, sp, #16
 8019ca8:	6808      	ldr	r0, [r1, #0]
 8019caa:	f853 2b04 	ldr.w	r2, [r3], #4
 8019cae:	6881      	ldr	r1, [r0, #8]
 8019cb0:	9301      	str	r3, [sp, #4]
 8019cb2:	f001 fc8b 	bl	801b5cc <_vfiprintf_r>
 8019cb6:	b003      	add	sp, #12
 8019cb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8019cbc:	b004      	add	sp, #16
 8019cbe:	4770      	bx	lr
 8019cc0:	200000bc 	.word	0x200000bc

08019cc4 <_puts_r>:
 8019cc4:	6a03      	ldr	r3, [r0, #32]
 8019cc6:	b570      	push	{r4, r5, r6, lr}
 8019cc8:	6884      	ldr	r4, [r0, #8]
 8019cca:	4605      	mov	r5, r0
 8019ccc:	460e      	mov	r6, r1
 8019cce:	b90b      	cbnz	r3, 8019cd4 <_puts_r+0x10>
 8019cd0:	f7ff ffb0 	bl	8019c34 <__sinit>
 8019cd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019cd6:	07db      	lsls	r3, r3, #31
 8019cd8:	d405      	bmi.n	8019ce6 <_puts_r+0x22>
 8019cda:	89a3      	ldrh	r3, [r4, #12]
 8019cdc:	0598      	lsls	r0, r3, #22
 8019cde:	d402      	bmi.n	8019ce6 <_puts_r+0x22>
 8019ce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019ce2:	f000 f9aa 	bl	801a03a <__retarget_lock_acquire_recursive>
 8019ce6:	89a3      	ldrh	r3, [r4, #12]
 8019ce8:	0719      	lsls	r1, r3, #28
 8019cea:	d513      	bpl.n	8019d14 <_puts_r+0x50>
 8019cec:	6923      	ldr	r3, [r4, #16]
 8019cee:	b18b      	cbz	r3, 8019d14 <_puts_r+0x50>
 8019cf0:	3e01      	subs	r6, #1
 8019cf2:	68a3      	ldr	r3, [r4, #8]
 8019cf4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019cf8:	3b01      	subs	r3, #1
 8019cfa:	60a3      	str	r3, [r4, #8]
 8019cfc:	b9e9      	cbnz	r1, 8019d3a <_puts_r+0x76>
 8019cfe:	2b00      	cmp	r3, #0
 8019d00:	da2e      	bge.n	8019d60 <_puts_r+0x9c>
 8019d02:	4622      	mov	r2, r4
 8019d04:	210a      	movs	r1, #10
 8019d06:	4628      	mov	r0, r5
 8019d08:	f000 f87b 	bl	8019e02 <__swbuf_r>
 8019d0c:	3001      	adds	r0, #1
 8019d0e:	d007      	beq.n	8019d20 <_puts_r+0x5c>
 8019d10:	250a      	movs	r5, #10
 8019d12:	e007      	b.n	8019d24 <_puts_r+0x60>
 8019d14:	4621      	mov	r1, r4
 8019d16:	4628      	mov	r0, r5
 8019d18:	f000 f8b0 	bl	8019e7c <__swsetup_r>
 8019d1c:	2800      	cmp	r0, #0
 8019d1e:	d0e7      	beq.n	8019cf0 <_puts_r+0x2c>
 8019d20:	f04f 35ff 	mov.w	r5, #4294967295
 8019d24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019d26:	07da      	lsls	r2, r3, #31
 8019d28:	d405      	bmi.n	8019d36 <_puts_r+0x72>
 8019d2a:	89a3      	ldrh	r3, [r4, #12]
 8019d2c:	059b      	lsls	r3, r3, #22
 8019d2e:	d402      	bmi.n	8019d36 <_puts_r+0x72>
 8019d30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019d32:	f000 f983 	bl	801a03c <__retarget_lock_release_recursive>
 8019d36:	4628      	mov	r0, r5
 8019d38:	bd70      	pop	{r4, r5, r6, pc}
 8019d3a:	2b00      	cmp	r3, #0
 8019d3c:	da04      	bge.n	8019d48 <_puts_r+0x84>
 8019d3e:	69a2      	ldr	r2, [r4, #24]
 8019d40:	429a      	cmp	r2, r3
 8019d42:	dc06      	bgt.n	8019d52 <_puts_r+0x8e>
 8019d44:	290a      	cmp	r1, #10
 8019d46:	d004      	beq.n	8019d52 <_puts_r+0x8e>
 8019d48:	6823      	ldr	r3, [r4, #0]
 8019d4a:	1c5a      	adds	r2, r3, #1
 8019d4c:	6022      	str	r2, [r4, #0]
 8019d4e:	7019      	strb	r1, [r3, #0]
 8019d50:	e7cf      	b.n	8019cf2 <_puts_r+0x2e>
 8019d52:	4622      	mov	r2, r4
 8019d54:	4628      	mov	r0, r5
 8019d56:	f000 f854 	bl	8019e02 <__swbuf_r>
 8019d5a:	3001      	adds	r0, #1
 8019d5c:	d1c9      	bne.n	8019cf2 <_puts_r+0x2e>
 8019d5e:	e7df      	b.n	8019d20 <_puts_r+0x5c>
 8019d60:	6823      	ldr	r3, [r4, #0]
 8019d62:	250a      	movs	r5, #10
 8019d64:	1c5a      	adds	r2, r3, #1
 8019d66:	6022      	str	r2, [r4, #0]
 8019d68:	701d      	strb	r5, [r3, #0]
 8019d6a:	e7db      	b.n	8019d24 <_puts_r+0x60>

08019d6c <puts>:
 8019d6c:	4b02      	ldr	r3, [pc, #8]	; (8019d78 <puts+0xc>)
 8019d6e:	4601      	mov	r1, r0
 8019d70:	6818      	ldr	r0, [r3, #0]
 8019d72:	f7ff bfa7 	b.w	8019cc4 <_puts_r>
 8019d76:	bf00      	nop
 8019d78:	200000bc 	.word	0x200000bc

08019d7c <__sread>:
 8019d7c:	b510      	push	{r4, lr}
 8019d7e:	460c      	mov	r4, r1
 8019d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019d84:	f000 f910 	bl	8019fa8 <_read_r>
 8019d88:	2800      	cmp	r0, #0
 8019d8a:	bfab      	itete	ge
 8019d8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019d8e:	89a3      	ldrhlt	r3, [r4, #12]
 8019d90:	181b      	addge	r3, r3, r0
 8019d92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019d96:	bfac      	ite	ge
 8019d98:	6563      	strge	r3, [r4, #84]	; 0x54
 8019d9a:	81a3      	strhlt	r3, [r4, #12]
 8019d9c:	bd10      	pop	{r4, pc}

08019d9e <__swrite>:
 8019d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019da2:	461f      	mov	r7, r3
 8019da4:	898b      	ldrh	r3, [r1, #12]
 8019da6:	05db      	lsls	r3, r3, #23
 8019da8:	4605      	mov	r5, r0
 8019daa:	460c      	mov	r4, r1
 8019dac:	4616      	mov	r6, r2
 8019dae:	d505      	bpl.n	8019dbc <__swrite+0x1e>
 8019db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019db4:	2302      	movs	r3, #2
 8019db6:	2200      	movs	r2, #0
 8019db8:	f000 f8e4 	bl	8019f84 <_lseek_r>
 8019dbc:	89a3      	ldrh	r3, [r4, #12]
 8019dbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019dc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019dc6:	81a3      	strh	r3, [r4, #12]
 8019dc8:	4632      	mov	r2, r6
 8019dca:	463b      	mov	r3, r7
 8019dcc:	4628      	mov	r0, r5
 8019dce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019dd2:	f000 b8fb 	b.w	8019fcc <_write_r>

08019dd6 <__sseek>:
 8019dd6:	b510      	push	{r4, lr}
 8019dd8:	460c      	mov	r4, r1
 8019dda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019dde:	f000 f8d1 	bl	8019f84 <_lseek_r>
 8019de2:	1c43      	adds	r3, r0, #1
 8019de4:	89a3      	ldrh	r3, [r4, #12]
 8019de6:	bf15      	itete	ne
 8019de8:	6560      	strne	r0, [r4, #84]	; 0x54
 8019dea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019dee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019df2:	81a3      	strheq	r3, [r4, #12]
 8019df4:	bf18      	it	ne
 8019df6:	81a3      	strhne	r3, [r4, #12]
 8019df8:	bd10      	pop	{r4, pc}

08019dfa <__sclose>:
 8019dfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019dfe:	f000 b8b1 	b.w	8019f64 <_close_r>

08019e02 <__swbuf_r>:
 8019e02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e04:	460e      	mov	r6, r1
 8019e06:	4614      	mov	r4, r2
 8019e08:	4605      	mov	r5, r0
 8019e0a:	b118      	cbz	r0, 8019e14 <__swbuf_r+0x12>
 8019e0c:	6a03      	ldr	r3, [r0, #32]
 8019e0e:	b90b      	cbnz	r3, 8019e14 <__swbuf_r+0x12>
 8019e10:	f7ff ff10 	bl	8019c34 <__sinit>
 8019e14:	69a3      	ldr	r3, [r4, #24]
 8019e16:	60a3      	str	r3, [r4, #8]
 8019e18:	89a3      	ldrh	r3, [r4, #12]
 8019e1a:	071a      	lsls	r2, r3, #28
 8019e1c:	d525      	bpl.n	8019e6a <__swbuf_r+0x68>
 8019e1e:	6923      	ldr	r3, [r4, #16]
 8019e20:	b31b      	cbz	r3, 8019e6a <__swbuf_r+0x68>
 8019e22:	6823      	ldr	r3, [r4, #0]
 8019e24:	6922      	ldr	r2, [r4, #16]
 8019e26:	1a98      	subs	r0, r3, r2
 8019e28:	6963      	ldr	r3, [r4, #20]
 8019e2a:	b2f6      	uxtb	r6, r6
 8019e2c:	4283      	cmp	r3, r0
 8019e2e:	4637      	mov	r7, r6
 8019e30:	dc04      	bgt.n	8019e3c <__swbuf_r+0x3a>
 8019e32:	4621      	mov	r1, r4
 8019e34:	4628      	mov	r0, r5
 8019e36:	f001 fd69 	bl	801b90c <_fflush_r>
 8019e3a:	b9e0      	cbnz	r0, 8019e76 <__swbuf_r+0x74>
 8019e3c:	68a3      	ldr	r3, [r4, #8]
 8019e3e:	3b01      	subs	r3, #1
 8019e40:	60a3      	str	r3, [r4, #8]
 8019e42:	6823      	ldr	r3, [r4, #0]
 8019e44:	1c5a      	adds	r2, r3, #1
 8019e46:	6022      	str	r2, [r4, #0]
 8019e48:	701e      	strb	r6, [r3, #0]
 8019e4a:	6962      	ldr	r2, [r4, #20]
 8019e4c:	1c43      	adds	r3, r0, #1
 8019e4e:	429a      	cmp	r2, r3
 8019e50:	d004      	beq.n	8019e5c <__swbuf_r+0x5a>
 8019e52:	89a3      	ldrh	r3, [r4, #12]
 8019e54:	07db      	lsls	r3, r3, #31
 8019e56:	d506      	bpl.n	8019e66 <__swbuf_r+0x64>
 8019e58:	2e0a      	cmp	r6, #10
 8019e5a:	d104      	bne.n	8019e66 <__swbuf_r+0x64>
 8019e5c:	4621      	mov	r1, r4
 8019e5e:	4628      	mov	r0, r5
 8019e60:	f001 fd54 	bl	801b90c <_fflush_r>
 8019e64:	b938      	cbnz	r0, 8019e76 <__swbuf_r+0x74>
 8019e66:	4638      	mov	r0, r7
 8019e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e6a:	4621      	mov	r1, r4
 8019e6c:	4628      	mov	r0, r5
 8019e6e:	f000 f805 	bl	8019e7c <__swsetup_r>
 8019e72:	2800      	cmp	r0, #0
 8019e74:	d0d5      	beq.n	8019e22 <__swbuf_r+0x20>
 8019e76:	f04f 37ff 	mov.w	r7, #4294967295
 8019e7a:	e7f4      	b.n	8019e66 <__swbuf_r+0x64>

08019e7c <__swsetup_r>:
 8019e7c:	b538      	push	{r3, r4, r5, lr}
 8019e7e:	4b2a      	ldr	r3, [pc, #168]	; (8019f28 <__swsetup_r+0xac>)
 8019e80:	4605      	mov	r5, r0
 8019e82:	6818      	ldr	r0, [r3, #0]
 8019e84:	460c      	mov	r4, r1
 8019e86:	b118      	cbz	r0, 8019e90 <__swsetup_r+0x14>
 8019e88:	6a03      	ldr	r3, [r0, #32]
 8019e8a:	b90b      	cbnz	r3, 8019e90 <__swsetup_r+0x14>
 8019e8c:	f7ff fed2 	bl	8019c34 <__sinit>
 8019e90:	89a3      	ldrh	r3, [r4, #12]
 8019e92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019e96:	0718      	lsls	r0, r3, #28
 8019e98:	d422      	bmi.n	8019ee0 <__swsetup_r+0x64>
 8019e9a:	06d9      	lsls	r1, r3, #27
 8019e9c:	d407      	bmi.n	8019eae <__swsetup_r+0x32>
 8019e9e:	2309      	movs	r3, #9
 8019ea0:	602b      	str	r3, [r5, #0]
 8019ea2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019ea6:	81a3      	strh	r3, [r4, #12]
 8019ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8019eac:	e034      	b.n	8019f18 <__swsetup_r+0x9c>
 8019eae:	0758      	lsls	r0, r3, #29
 8019eb0:	d512      	bpl.n	8019ed8 <__swsetup_r+0x5c>
 8019eb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019eb4:	b141      	cbz	r1, 8019ec8 <__swsetup_r+0x4c>
 8019eb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019eba:	4299      	cmp	r1, r3
 8019ebc:	d002      	beq.n	8019ec4 <__swsetup_r+0x48>
 8019ebe:	4628      	mov	r0, r5
 8019ec0:	f000 fede 	bl	801ac80 <_free_r>
 8019ec4:	2300      	movs	r3, #0
 8019ec6:	6363      	str	r3, [r4, #52]	; 0x34
 8019ec8:	89a3      	ldrh	r3, [r4, #12]
 8019eca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019ece:	81a3      	strh	r3, [r4, #12]
 8019ed0:	2300      	movs	r3, #0
 8019ed2:	6063      	str	r3, [r4, #4]
 8019ed4:	6923      	ldr	r3, [r4, #16]
 8019ed6:	6023      	str	r3, [r4, #0]
 8019ed8:	89a3      	ldrh	r3, [r4, #12]
 8019eda:	f043 0308 	orr.w	r3, r3, #8
 8019ede:	81a3      	strh	r3, [r4, #12]
 8019ee0:	6923      	ldr	r3, [r4, #16]
 8019ee2:	b94b      	cbnz	r3, 8019ef8 <__swsetup_r+0x7c>
 8019ee4:	89a3      	ldrh	r3, [r4, #12]
 8019ee6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019eea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019eee:	d003      	beq.n	8019ef8 <__swsetup_r+0x7c>
 8019ef0:	4621      	mov	r1, r4
 8019ef2:	4628      	mov	r0, r5
 8019ef4:	f001 fd6a 	bl	801b9cc <__smakebuf_r>
 8019ef8:	89a0      	ldrh	r0, [r4, #12]
 8019efa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019efe:	f010 0301 	ands.w	r3, r0, #1
 8019f02:	d00a      	beq.n	8019f1a <__swsetup_r+0x9e>
 8019f04:	2300      	movs	r3, #0
 8019f06:	60a3      	str	r3, [r4, #8]
 8019f08:	6963      	ldr	r3, [r4, #20]
 8019f0a:	425b      	negs	r3, r3
 8019f0c:	61a3      	str	r3, [r4, #24]
 8019f0e:	6923      	ldr	r3, [r4, #16]
 8019f10:	b943      	cbnz	r3, 8019f24 <__swsetup_r+0xa8>
 8019f12:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019f16:	d1c4      	bne.n	8019ea2 <__swsetup_r+0x26>
 8019f18:	bd38      	pop	{r3, r4, r5, pc}
 8019f1a:	0781      	lsls	r1, r0, #30
 8019f1c:	bf58      	it	pl
 8019f1e:	6963      	ldrpl	r3, [r4, #20]
 8019f20:	60a3      	str	r3, [r4, #8]
 8019f22:	e7f4      	b.n	8019f0e <__swsetup_r+0x92>
 8019f24:	2000      	movs	r0, #0
 8019f26:	e7f7      	b.n	8019f18 <__swsetup_r+0x9c>
 8019f28:	200000bc 	.word	0x200000bc

08019f2c <memcmp>:
 8019f2c:	b510      	push	{r4, lr}
 8019f2e:	3901      	subs	r1, #1
 8019f30:	4402      	add	r2, r0
 8019f32:	4290      	cmp	r0, r2
 8019f34:	d101      	bne.n	8019f3a <memcmp+0xe>
 8019f36:	2000      	movs	r0, #0
 8019f38:	e005      	b.n	8019f46 <memcmp+0x1a>
 8019f3a:	7803      	ldrb	r3, [r0, #0]
 8019f3c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019f40:	42a3      	cmp	r3, r4
 8019f42:	d001      	beq.n	8019f48 <memcmp+0x1c>
 8019f44:	1b18      	subs	r0, r3, r4
 8019f46:	bd10      	pop	{r4, pc}
 8019f48:	3001      	adds	r0, #1
 8019f4a:	e7f2      	b.n	8019f32 <memcmp+0x6>

08019f4c <memset>:
 8019f4c:	4402      	add	r2, r0
 8019f4e:	4603      	mov	r3, r0
 8019f50:	4293      	cmp	r3, r2
 8019f52:	d100      	bne.n	8019f56 <memset+0xa>
 8019f54:	4770      	bx	lr
 8019f56:	f803 1b01 	strb.w	r1, [r3], #1
 8019f5a:	e7f9      	b.n	8019f50 <memset+0x4>

08019f5c <_localeconv_r>:
 8019f5c:	4800      	ldr	r0, [pc, #0]	; (8019f60 <_localeconv_r+0x4>)
 8019f5e:	4770      	bx	lr
 8019f60:	200001b0 	.word	0x200001b0

08019f64 <_close_r>:
 8019f64:	b538      	push	{r3, r4, r5, lr}
 8019f66:	4d06      	ldr	r5, [pc, #24]	; (8019f80 <_close_r+0x1c>)
 8019f68:	2300      	movs	r3, #0
 8019f6a:	4604      	mov	r4, r0
 8019f6c:	4608      	mov	r0, r1
 8019f6e:	602b      	str	r3, [r5, #0]
 8019f70:	f7e9 fd49 	bl	8003a06 <_close>
 8019f74:	1c43      	adds	r3, r0, #1
 8019f76:	d102      	bne.n	8019f7e <_close_r+0x1a>
 8019f78:	682b      	ldr	r3, [r5, #0]
 8019f7a:	b103      	cbz	r3, 8019f7e <_close_r+0x1a>
 8019f7c:	6023      	str	r3, [r4, #0]
 8019f7e:	bd38      	pop	{r3, r4, r5, pc}
 8019f80:	20007370 	.word	0x20007370

08019f84 <_lseek_r>:
 8019f84:	b538      	push	{r3, r4, r5, lr}
 8019f86:	4d07      	ldr	r5, [pc, #28]	; (8019fa4 <_lseek_r+0x20>)
 8019f88:	4604      	mov	r4, r0
 8019f8a:	4608      	mov	r0, r1
 8019f8c:	4611      	mov	r1, r2
 8019f8e:	2200      	movs	r2, #0
 8019f90:	602a      	str	r2, [r5, #0]
 8019f92:	461a      	mov	r2, r3
 8019f94:	f7e9 fd5e 	bl	8003a54 <_lseek>
 8019f98:	1c43      	adds	r3, r0, #1
 8019f9a:	d102      	bne.n	8019fa2 <_lseek_r+0x1e>
 8019f9c:	682b      	ldr	r3, [r5, #0]
 8019f9e:	b103      	cbz	r3, 8019fa2 <_lseek_r+0x1e>
 8019fa0:	6023      	str	r3, [r4, #0]
 8019fa2:	bd38      	pop	{r3, r4, r5, pc}
 8019fa4:	20007370 	.word	0x20007370

08019fa8 <_read_r>:
 8019fa8:	b538      	push	{r3, r4, r5, lr}
 8019faa:	4d07      	ldr	r5, [pc, #28]	; (8019fc8 <_read_r+0x20>)
 8019fac:	4604      	mov	r4, r0
 8019fae:	4608      	mov	r0, r1
 8019fb0:	4611      	mov	r1, r2
 8019fb2:	2200      	movs	r2, #0
 8019fb4:	602a      	str	r2, [r5, #0]
 8019fb6:	461a      	mov	r2, r3
 8019fb8:	f7e9 fcec 	bl	8003994 <_read>
 8019fbc:	1c43      	adds	r3, r0, #1
 8019fbe:	d102      	bne.n	8019fc6 <_read_r+0x1e>
 8019fc0:	682b      	ldr	r3, [r5, #0]
 8019fc2:	b103      	cbz	r3, 8019fc6 <_read_r+0x1e>
 8019fc4:	6023      	str	r3, [r4, #0]
 8019fc6:	bd38      	pop	{r3, r4, r5, pc}
 8019fc8:	20007370 	.word	0x20007370

08019fcc <_write_r>:
 8019fcc:	b538      	push	{r3, r4, r5, lr}
 8019fce:	4d07      	ldr	r5, [pc, #28]	; (8019fec <_write_r+0x20>)
 8019fd0:	4604      	mov	r4, r0
 8019fd2:	4608      	mov	r0, r1
 8019fd4:	4611      	mov	r1, r2
 8019fd6:	2200      	movs	r2, #0
 8019fd8:	602a      	str	r2, [r5, #0]
 8019fda:	461a      	mov	r2, r3
 8019fdc:	f7e9 fcf7 	bl	80039ce <_write>
 8019fe0:	1c43      	adds	r3, r0, #1
 8019fe2:	d102      	bne.n	8019fea <_write_r+0x1e>
 8019fe4:	682b      	ldr	r3, [r5, #0]
 8019fe6:	b103      	cbz	r3, 8019fea <_write_r+0x1e>
 8019fe8:	6023      	str	r3, [r4, #0]
 8019fea:	bd38      	pop	{r3, r4, r5, pc}
 8019fec:	20007370 	.word	0x20007370

08019ff0 <__libc_init_array>:
 8019ff0:	b570      	push	{r4, r5, r6, lr}
 8019ff2:	4d0d      	ldr	r5, [pc, #52]	; (801a028 <__libc_init_array+0x38>)
 8019ff4:	4c0d      	ldr	r4, [pc, #52]	; (801a02c <__libc_init_array+0x3c>)
 8019ff6:	1b64      	subs	r4, r4, r5
 8019ff8:	10a4      	asrs	r4, r4, #2
 8019ffa:	2600      	movs	r6, #0
 8019ffc:	42a6      	cmp	r6, r4
 8019ffe:	d109      	bne.n	801a014 <__libc_init_array+0x24>
 801a000:	4d0b      	ldr	r5, [pc, #44]	; (801a030 <__libc_init_array+0x40>)
 801a002:	4c0c      	ldr	r4, [pc, #48]	; (801a034 <__libc_init_array+0x44>)
 801a004:	f001 fdd0 	bl	801bba8 <_init>
 801a008:	1b64      	subs	r4, r4, r5
 801a00a:	10a4      	asrs	r4, r4, #2
 801a00c:	2600      	movs	r6, #0
 801a00e:	42a6      	cmp	r6, r4
 801a010:	d105      	bne.n	801a01e <__libc_init_array+0x2e>
 801a012:	bd70      	pop	{r4, r5, r6, pc}
 801a014:	f855 3b04 	ldr.w	r3, [r5], #4
 801a018:	4798      	blx	r3
 801a01a:	3601      	adds	r6, #1
 801a01c:	e7ee      	b.n	8019ffc <__libc_init_array+0xc>
 801a01e:	f855 3b04 	ldr.w	r3, [r5], #4
 801a022:	4798      	blx	r3
 801a024:	3601      	adds	r6, #1
 801a026:	e7f2      	b.n	801a00e <__libc_init_array+0x1e>
 801a028:	0801f4b0 	.word	0x0801f4b0
 801a02c:	0801f4b0 	.word	0x0801f4b0
 801a030:	0801f4b0 	.word	0x0801f4b0
 801a034:	0801f4b4 	.word	0x0801f4b4

0801a038 <__retarget_lock_init_recursive>:
 801a038:	4770      	bx	lr

0801a03a <__retarget_lock_acquire_recursive>:
 801a03a:	4770      	bx	lr

0801a03c <__retarget_lock_release_recursive>:
 801a03c:	4770      	bx	lr

0801a03e <memcpy>:
 801a03e:	440a      	add	r2, r1
 801a040:	4291      	cmp	r1, r2
 801a042:	f100 33ff 	add.w	r3, r0, #4294967295
 801a046:	d100      	bne.n	801a04a <memcpy+0xc>
 801a048:	4770      	bx	lr
 801a04a:	b510      	push	{r4, lr}
 801a04c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a050:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a054:	4291      	cmp	r1, r2
 801a056:	d1f9      	bne.n	801a04c <memcpy+0xe>
 801a058:	bd10      	pop	{r4, pc}
	...

0801a05c <__assert_func>:
 801a05c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a05e:	4614      	mov	r4, r2
 801a060:	461a      	mov	r2, r3
 801a062:	4b09      	ldr	r3, [pc, #36]	; (801a088 <__assert_func+0x2c>)
 801a064:	681b      	ldr	r3, [r3, #0]
 801a066:	4605      	mov	r5, r0
 801a068:	68d8      	ldr	r0, [r3, #12]
 801a06a:	b14c      	cbz	r4, 801a080 <__assert_func+0x24>
 801a06c:	4b07      	ldr	r3, [pc, #28]	; (801a08c <__assert_func+0x30>)
 801a06e:	9100      	str	r1, [sp, #0]
 801a070:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a074:	4906      	ldr	r1, [pc, #24]	; (801a090 <__assert_func+0x34>)
 801a076:	462b      	mov	r3, r5
 801a078:	f001 fc70 	bl	801b95c <fiprintf>
 801a07c:	f001 fd14 	bl	801baa8 <abort>
 801a080:	4b04      	ldr	r3, [pc, #16]	; (801a094 <__assert_func+0x38>)
 801a082:	461c      	mov	r4, r3
 801a084:	e7f3      	b.n	801a06e <__assert_func+0x12>
 801a086:	bf00      	nop
 801a088:	200000bc 	.word	0x200000bc
 801a08c:	0801f27e 	.word	0x0801f27e
 801a090:	0801f28b 	.word	0x0801f28b
 801a094:	0801f2b9 	.word	0x0801f2b9

0801a098 <quorem>:
 801a098:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a09c:	6903      	ldr	r3, [r0, #16]
 801a09e:	690c      	ldr	r4, [r1, #16]
 801a0a0:	42a3      	cmp	r3, r4
 801a0a2:	4607      	mov	r7, r0
 801a0a4:	db7e      	blt.n	801a1a4 <quorem+0x10c>
 801a0a6:	3c01      	subs	r4, #1
 801a0a8:	f101 0814 	add.w	r8, r1, #20
 801a0ac:	f100 0514 	add.w	r5, r0, #20
 801a0b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a0b4:	9301      	str	r3, [sp, #4]
 801a0b6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801a0ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a0be:	3301      	adds	r3, #1
 801a0c0:	429a      	cmp	r2, r3
 801a0c2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801a0c6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801a0ca:	fbb2 f6f3 	udiv	r6, r2, r3
 801a0ce:	d331      	bcc.n	801a134 <quorem+0x9c>
 801a0d0:	f04f 0e00 	mov.w	lr, #0
 801a0d4:	4640      	mov	r0, r8
 801a0d6:	46ac      	mov	ip, r5
 801a0d8:	46f2      	mov	sl, lr
 801a0da:	f850 2b04 	ldr.w	r2, [r0], #4
 801a0de:	b293      	uxth	r3, r2
 801a0e0:	fb06 e303 	mla	r3, r6, r3, lr
 801a0e4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801a0e8:	0c1a      	lsrs	r2, r3, #16
 801a0ea:	b29b      	uxth	r3, r3
 801a0ec:	ebaa 0303 	sub.w	r3, sl, r3
 801a0f0:	f8dc a000 	ldr.w	sl, [ip]
 801a0f4:	fa13 f38a 	uxtah	r3, r3, sl
 801a0f8:	fb06 220e 	mla	r2, r6, lr, r2
 801a0fc:	9300      	str	r3, [sp, #0]
 801a0fe:	9b00      	ldr	r3, [sp, #0]
 801a100:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801a104:	b292      	uxth	r2, r2
 801a106:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801a10a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a10e:	f8bd 3000 	ldrh.w	r3, [sp]
 801a112:	4581      	cmp	r9, r0
 801a114:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a118:	f84c 3b04 	str.w	r3, [ip], #4
 801a11c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801a120:	d2db      	bcs.n	801a0da <quorem+0x42>
 801a122:	f855 300b 	ldr.w	r3, [r5, fp]
 801a126:	b92b      	cbnz	r3, 801a134 <quorem+0x9c>
 801a128:	9b01      	ldr	r3, [sp, #4]
 801a12a:	3b04      	subs	r3, #4
 801a12c:	429d      	cmp	r5, r3
 801a12e:	461a      	mov	r2, r3
 801a130:	d32c      	bcc.n	801a18c <quorem+0xf4>
 801a132:	613c      	str	r4, [r7, #16]
 801a134:	4638      	mov	r0, r7
 801a136:	f001 f91f 	bl	801b378 <__mcmp>
 801a13a:	2800      	cmp	r0, #0
 801a13c:	db22      	blt.n	801a184 <quorem+0xec>
 801a13e:	3601      	adds	r6, #1
 801a140:	4629      	mov	r1, r5
 801a142:	2000      	movs	r0, #0
 801a144:	f858 2b04 	ldr.w	r2, [r8], #4
 801a148:	f8d1 c000 	ldr.w	ip, [r1]
 801a14c:	b293      	uxth	r3, r2
 801a14e:	1ac3      	subs	r3, r0, r3
 801a150:	0c12      	lsrs	r2, r2, #16
 801a152:	fa13 f38c 	uxtah	r3, r3, ip
 801a156:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801a15a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a15e:	b29b      	uxth	r3, r3
 801a160:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a164:	45c1      	cmp	r9, r8
 801a166:	f841 3b04 	str.w	r3, [r1], #4
 801a16a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801a16e:	d2e9      	bcs.n	801a144 <quorem+0xac>
 801a170:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a174:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a178:	b922      	cbnz	r2, 801a184 <quorem+0xec>
 801a17a:	3b04      	subs	r3, #4
 801a17c:	429d      	cmp	r5, r3
 801a17e:	461a      	mov	r2, r3
 801a180:	d30a      	bcc.n	801a198 <quorem+0x100>
 801a182:	613c      	str	r4, [r7, #16]
 801a184:	4630      	mov	r0, r6
 801a186:	b003      	add	sp, #12
 801a188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a18c:	6812      	ldr	r2, [r2, #0]
 801a18e:	3b04      	subs	r3, #4
 801a190:	2a00      	cmp	r2, #0
 801a192:	d1ce      	bne.n	801a132 <quorem+0x9a>
 801a194:	3c01      	subs	r4, #1
 801a196:	e7c9      	b.n	801a12c <quorem+0x94>
 801a198:	6812      	ldr	r2, [r2, #0]
 801a19a:	3b04      	subs	r3, #4
 801a19c:	2a00      	cmp	r2, #0
 801a19e:	d1f0      	bne.n	801a182 <quorem+0xea>
 801a1a0:	3c01      	subs	r4, #1
 801a1a2:	e7eb      	b.n	801a17c <quorem+0xe4>
 801a1a4:	2000      	movs	r0, #0
 801a1a6:	e7ee      	b.n	801a186 <quorem+0xee>

0801a1a8 <_dtoa_r>:
 801a1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1ac:	ed2d 8b02 	vpush	{d8}
 801a1b0:	69c5      	ldr	r5, [r0, #28]
 801a1b2:	b091      	sub	sp, #68	; 0x44
 801a1b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 801a1b8:	ec59 8b10 	vmov	r8, r9, d0
 801a1bc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801a1be:	9106      	str	r1, [sp, #24]
 801a1c0:	4606      	mov	r6, r0
 801a1c2:	9208      	str	r2, [sp, #32]
 801a1c4:	930c      	str	r3, [sp, #48]	; 0x30
 801a1c6:	b975      	cbnz	r5, 801a1e6 <_dtoa_r+0x3e>
 801a1c8:	2010      	movs	r0, #16
 801a1ca:	f000 fda5 	bl	801ad18 <malloc>
 801a1ce:	4602      	mov	r2, r0
 801a1d0:	61f0      	str	r0, [r6, #28]
 801a1d2:	b920      	cbnz	r0, 801a1de <_dtoa_r+0x36>
 801a1d4:	4ba6      	ldr	r3, [pc, #664]	; (801a470 <_dtoa_r+0x2c8>)
 801a1d6:	21ef      	movs	r1, #239	; 0xef
 801a1d8:	48a6      	ldr	r0, [pc, #664]	; (801a474 <_dtoa_r+0x2cc>)
 801a1da:	f7ff ff3f 	bl	801a05c <__assert_func>
 801a1de:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801a1e2:	6005      	str	r5, [r0, #0]
 801a1e4:	60c5      	str	r5, [r0, #12]
 801a1e6:	69f3      	ldr	r3, [r6, #28]
 801a1e8:	6819      	ldr	r1, [r3, #0]
 801a1ea:	b151      	cbz	r1, 801a202 <_dtoa_r+0x5a>
 801a1ec:	685a      	ldr	r2, [r3, #4]
 801a1ee:	604a      	str	r2, [r1, #4]
 801a1f0:	2301      	movs	r3, #1
 801a1f2:	4093      	lsls	r3, r2
 801a1f4:	608b      	str	r3, [r1, #8]
 801a1f6:	4630      	mov	r0, r6
 801a1f8:	f000 fe82 	bl	801af00 <_Bfree>
 801a1fc:	69f3      	ldr	r3, [r6, #28]
 801a1fe:	2200      	movs	r2, #0
 801a200:	601a      	str	r2, [r3, #0]
 801a202:	f1b9 0300 	subs.w	r3, r9, #0
 801a206:	bfbb      	ittet	lt
 801a208:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801a20c:	9303      	strlt	r3, [sp, #12]
 801a20e:	2300      	movge	r3, #0
 801a210:	2201      	movlt	r2, #1
 801a212:	bfac      	ite	ge
 801a214:	6023      	strge	r3, [r4, #0]
 801a216:	6022      	strlt	r2, [r4, #0]
 801a218:	4b97      	ldr	r3, [pc, #604]	; (801a478 <_dtoa_r+0x2d0>)
 801a21a:	9c03      	ldr	r4, [sp, #12]
 801a21c:	43a3      	bics	r3, r4
 801a21e:	d11c      	bne.n	801a25a <_dtoa_r+0xb2>
 801a220:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a222:	f242 730f 	movw	r3, #9999	; 0x270f
 801a226:	6013      	str	r3, [r2, #0]
 801a228:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801a22c:	ea53 0308 	orrs.w	r3, r3, r8
 801a230:	f000 84fb 	beq.w	801ac2a <_dtoa_r+0xa82>
 801a234:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a236:	b963      	cbnz	r3, 801a252 <_dtoa_r+0xaa>
 801a238:	4b90      	ldr	r3, [pc, #576]	; (801a47c <_dtoa_r+0x2d4>)
 801a23a:	e020      	b.n	801a27e <_dtoa_r+0xd6>
 801a23c:	4b90      	ldr	r3, [pc, #576]	; (801a480 <_dtoa_r+0x2d8>)
 801a23e:	9301      	str	r3, [sp, #4]
 801a240:	3308      	adds	r3, #8
 801a242:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801a244:	6013      	str	r3, [r2, #0]
 801a246:	9801      	ldr	r0, [sp, #4]
 801a248:	b011      	add	sp, #68	; 0x44
 801a24a:	ecbd 8b02 	vpop	{d8}
 801a24e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a252:	4b8a      	ldr	r3, [pc, #552]	; (801a47c <_dtoa_r+0x2d4>)
 801a254:	9301      	str	r3, [sp, #4]
 801a256:	3303      	adds	r3, #3
 801a258:	e7f3      	b.n	801a242 <_dtoa_r+0x9a>
 801a25a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801a25e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a266:	d10c      	bne.n	801a282 <_dtoa_r+0xda>
 801a268:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a26a:	2301      	movs	r3, #1
 801a26c:	6013      	str	r3, [r2, #0]
 801a26e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a270:	2b00      	cmp	r3, #0
 801a272:	f000 84d7 	beq.w	801ac24 <_dtoa_r+0xa7c>
 801a276:	4b83      	ldr	r3, [pc, #524]	; (801a484 <_dtoa_r+0x2dc>)
 801a278:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801a27a:	6013      	str	r3, [r2, #0]
 801a27c:	3b01      	subs	r3, #1
 801a27e:	9301      	str	r3, [sp, #4]
 801a280:	e7e1      	b.n	801a246 <_dtoa_r+0x9e>
 801a282:	aa0e      	add	r2, sp, #56	; 0x38
 801a284:	a90f      	add	r1, sp, #60	; 0x3c
 801a286:	4630      	mov	r0, r6
 801a288:	eeb0 0b48 	vmov.f64	d0, d8
 801a28c:	f001 f91a 	bl	801b4c4 <__d2b>
 801a290:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801a294:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a296:	4605      	mov	r5, r0
 801a298:	2b00      	cmp	r3, #0
 801a29a:	d046      	beq.n	801a32a <_dtoa_r+0x182>
 801a29c:	eeb0 7b48 	vmov.f64	d7, d8
 801a2a0:	ee18 1a90 	vmov	r1, s17
 801a2a4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801a2a8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801a2ac:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801a2b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801a2b4:	2000      	movs	r0, #0
 801a2b6:	ee07 1a90 	vmov	s15, r1
 801a2ba:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 801a2be:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801a458 <_dtoa_r+0x2b0>
 801a2c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a2c6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 801a460 <_dtoa_r+0x2b8>
 801a2ca:	eea7 6b05 	vfma.f64	d6, d7, d5
 801a2ce:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801a468 <_dtoa_r+0x2c0>
 801a2d2:	ee07 3a90 	vmov	s15, r3
 801a2d6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801a2da:	eeb0 7b46 	vmov.f64	d7, d6
 801a2de:	eea4 7b05 	vfma.f64	d7, d4, d5
 801a2e2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801a2e6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801a2ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a2ee:	ee16 ba90 	vmov	fp, s13
 801a2f2:	9009      	str	r0, [sp, #36]	; 0x24
 801a2f4:	d508      	bpl.n	801a308 <_dtoa_r+0x160>
 801a2f6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801a2fa:	eeb4 6b47 	vcmp.f64	d6, d7
 801a2fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a302:	bf18      	it	ne
 801a304:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801a308:	f1bb 0f16 	cmp.w	fp, #22
 801a30c:	d82b      	bhi.n	801a366 <_dtoa_r+0x1be>
 801a30e:	495e      	ldr	r1, [pc, #376]	; (801a488 <_dtoa_r+0x2e0>)
 801a310:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801a314:	ed91 7b00 	vldr	d7, [r1]
 801a318:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801a31c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a320:	d501      	bpl.n	801a326 <_dtoa_r+0x17e>
 801a322:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a326:	2100      	movs	r1, #0
 801a328:	e01e      	b.n	801a368 <_dtoa_r+0x1c0>
 801a32a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a32c:	4413      	add	r3, r2
 801a32e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 801a332:	2920      	cmp	r1, #32
 801a334:	bfc1      	itttt	gt
 801a336:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 801a33a:	408c      	lslgt	r4, r1
 801a33c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 801a340:	fa28 f101 	lsrgt.w	r1, r8, r1
 801a344:	bfd6      	itet	le
 801a346:	f1c1 0120 	rsble	r1, r1, #32
 801a34a:	4321      	orrgt	r1, r4
 801a34c:	fa08 f101 	lslle.w	r1, r8, r1
 801a350:	ee07 1a90 	vmov	s15, r1
 801a354:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801a358:	3b01      	subs	r3, #1
 801a35a:	ee17 1a90 	vmov	r1, s15
 801a35e:	2001      	movs	r0, #1
 801a360:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801a364:	e7a7      	b.n	801a2b6 <_dtoa_r+0x10e>
 801a366:	2101      	movs	r1, #1
 801a368:	1ad2      	subs	r2, r2, r3
 801a36a:	1e53      	subs	r3, r2, #1
 801a36c:	9305      	str	r3, [sp, #20]
 801a36e:	bf45      	ittet	mi
 801a370:	f1c2 0301 	rsbmi	r3, r2, #1
 801a374:	9304      	strmi	r3, [sp, #16]
 801a376:	2300      	movpl	r3, #0
 801a378:	2300      	movmi	r3, #0
 801a37a:	bf4c      	ite	mi
 801a37c:	9305      	strmi	r3, [sp, #20]
 801a37e:	9304      	strpl	r3, [sp, #16]
 801a380:	f1bb 0f00 	cmp.w	fp, #0
 801a384:	910b      	str	r1, [sp, #44]	; 0x2c
 801a386:	db18      	blt.n	801a3ba <_dtoa_r+0x212>
 801a388:	9b05      	ldr	r3, [sp, #20]
 801a38a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801a38e:	445b      	add	r3, fp
 801a390:	9305      	str	r3, [sp, #20]
 801a392:	2300      	movs	r3, #0
 801a394:	9a06      	ldr	r2, [sp, #24]
 801a396:	2a09      	cmp	r2, #9
 801a398:	d848      	bhi.n	801a42c <_dtoa_r+0x284>
 801a39a:	2a05      	cmp	r2, #5
 801a39c:	bfc4      	itt	gt
 801a39e:	3a04      	subgt	r2, #4
 801a3a0:	9206      	strgt	r2, [sp, #24]
 801a3a2:	9a06      	ldr	r2, [sp, #24]
 801a3a4:	f1a2 0202 	sub.w	r2, r2, #2
 801a3a8:	bfcc      	ite	gt
 801a3aa:	2400      	movgt	r4, #0
 801a3ac:	2401      	movle	r4, #1
 801a3ae:	2a03      	cmp	r2, #3
 801a3b0:	d847      	bhi.n	801a442 <_dtoa_r+0x29a>
 801a3b2:	e8df f002 	tbb	[pc, r2]
 801a3b6:	2d0b      	.short	0x2d0b
 801a3b8:	392b      	.short	0x392b
 801a3ba:	9b04      	ldr	r3, [sp, #16]
 801a3bc:	2200      	movs	r2, #0
 801a3be:	eba3 030b 	sub.w	r3, r3, fp
 801a3c2:	9304      	str	r3, [sp, #16]
 801a3c4:	920a      	str	r2, [sp, #40]	; 0x28
 801a3c6:	f1cb 0300 	rsb	r3, fp, #0
 801a3ca:	e7e3      	b.n	801a394 <_dtoa_r+0x1ec>
 801a3cc:	2200      	movs	r2, #0
 801a3ce:	9207      	str	r2, [sp, #28]
 801a3d0:	9a08      	ldr	r2, [sp, #32]
 801a3d2:	2a00      	cmp	r2, #0
 801a3d4:	dc38      	bgt.n	801a448 <_dtoa_r+0x2a0>
 801a3d6:	f04f 0a01 	mov.w	sl, #1
 801a3da:	46d1      	mov	r9, sl
 801a3dc:	4652      	mov	r2, sl
 801a3de:	f8cd a020 	str.w	sl, [sp, #32]
 801a3e2:	69f7      	ldr	r7, [r6, #28]
 801a3e4:	2100      	movs	r1, #0
 801a3e6:	2004      	movs	r0, #4
 801a3e8:	f100 0c14 	add.w	ip, r0, #20
 801a3ec:	4594      	cmp	ip, r2
 801a3ee:	d930      	bls.n	801a452 <_dtoa_r+0x2aa>
 801a3f0:	6079      	str	r1, [r7, #4]
 801a3f2:	4630      	mov	r0, r6
 801a3f4:	930d      	str	r3, [sp, #52]	; 0x34
 801a3f6:	f000 fd43 	bl	801ae80 <_Balloc>
 801a3fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a3fc:	9001      	str	r0, [sp, #4]
 801a3fe:	4602      	mov	r2, r0
 801a400:	2800      	cmp	r0, #0
 801a402:	d145      	bne.n	801a490 <_dtoa_r+0x2e8>
 801a404:	4b21      	ldr	r3, [pc, #132]	; (801a48c <_dtoa_r+0x2e4>)
 801a406:	f240 11af 	movw	r1, #431	; 0x1af
 801a40a:	e6e5      	b.n	801a1d8 <_dtoa_r+0x30>
 801a40c:	2201      	movs	r2, #1
 801a40e:	e7de      	b.n	801a3ce <_dtoa_r+0x226>
 801a410:	2200      	movs	r2, #0
 801a412:	9207      	str	r2, [sp, #28]
 801a414:	9a08      	ldr	r2, [sp, #32]
 801a416:	eb0b 0a02 	add.w	sl, fp, r2
 801a41a:	f10a 0901 	add.w	r9, sl, #1
 801a41e:	464a      	mov	r2, r9
 801a420:	2a01      	cmp	r2, #1
 801a422:	bfb8      	it	lt
 801a424:	2201      	movlt	r2, #1
 801a426:	e7dc      	b.n	801a3e2 <_dtoa_r+0x23a>
 801a428:	2201      	movs	r2, #1
 801a42a:	e7f2      	b.n	801a412 <_dtoa_r+0x26a>
 801a42c:	2401      	movs	r4, #1
 801a42e:	2200      	movs	r2, #0
 801a430:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801a434:	f04f 3aff 	mov.w	sl, #4294967295
 801a438:	2100      	movs	r1, #0
 801a43a:	46d1      	mov	r9, sl
 801a43c:	2212      	movs	r2, #18
 801a43e:	9108      	str	r1, [sp, #32]
 801a440:	e7cf      	b.n	801a3e2 <_dtoa_r+0x23a>
 801a442:	2201      	movs	r2, #1
 801a444:	9207      	str	r2, [sp, #28]
 801a446:	e7f5      	b.n	801a434 <_dtoa_r+0x28c>
 801a448:	f8dd a020 	ldr.w	sl, [sp, #32]
 801a44c:	46d1      	mov	r9, sl
 801a44e:	4652      	mov	r2, sl
 801a450:	e7c7      	b.n	801a3e2 <_dtoa_r+0x23a>
 801a452:	3101      	adds	r1, #1
 801a454:	0040      	lsls	r0, r0, #1
 801a456:	e7c7      	b.n	801a3e8 <_dtoa_r+0x240>
 801a458:	636f4361 	.word	0x636f4361
 801a45c:	3fd287a7 	.word	0x3fd287a7
 801a460:	8b60c8b3 	.word	0x8b60c8b3
 801a464:	3fc68a28 	.word	0x3fc68a28
 801a468:	509f79fb 	.word	0x509f79fb
 801a46c:	3fd34413 	.word	0x3fd34413
 801a470:	0801f0da 	.word	0x0801f0da
 801a474:	0801f2c7 	.word	0x0801f2c7
 801a478:	7ff00000 	.word	0x7ff00000
 801a47c:	0801f2c3 	.word	0x0801f2c3
 801a480:	0801f2ba 	.word	0x0801f2ba
 801a484:	0801f25b 	.word	0x0801f25b
 801a488:	0801f3b8 	.word	0x0801f3b8
 801a48c:	0801f31f 	.word	0x0801f31f
 801a490:	69f2      	ldr	r2, [r6, #28]
 801a492:	9901      	ldr	r1, [sp, #4]
 801a494:	6011      	str	r1, [r2, #0]
 801a496:	f1b9 0f0e 	cmp.w	r9, #14
 801a49a:	d86c      	bhi.n	801a576 <_dtoa_r+0x3ce>
 801a49c:	2c00      	cmp	r4, #0
 801a49e:	d06a      	beq.n	801a576 <_dtoa_r+0x3ce>
 801a4a0:	f1bb 0f00 	cmp.w	fp, #0
 801a4a4:	f340 80a0 	ble.w	801a5e8 <_dtoa_r+0x440>
 801a4a8:	4ac1      	ldr	r2, [pc, #772]	; (801a7b0 <_dtoa_r+0x608>)
 801a4aa:	f00b 010f 	and.w	r1, fp, #15
 801a4ae:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801a4b2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801a4b6:	ed92 7b00 	vldr	d7, [r2]
 801a4ba:	ea4f 122b 	mov.w	r2, fp, asr #4
 801a4be:	f000 8087 	beq.w	801a5d0 <_dtoa_r+0x428>
 801a4c2:	49bc      	ldr	r1, [pc, #752]	; (801a7b4 <_dtoa_r+0x60c>)
 801a4c4:	ed91 6b08 	vldr	d6, [r1, #32]
 801a4c8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801a4cc:	ed8d 6b02 	vstr	d6, [sp, #8]
 801a4d0:	f002 020f 	and.w	r2, r2, #15
 801a4d4:	2103      	movs	r1, #3
 801a4d6:	48b7      	ldr	r0, [pc, #732]	; (801a7b4 <_dtoa_r+0x60c>)
 801a4d8:	2a00      	cmp	r2, #0
 801a4da:	d17b      	bne.n	801a5d4 <_dtoa_r+0x42c>
 801a4dc:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a4e0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801a4e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a4e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a4ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a4ee:	2a00      	cmp	r2, #0
 801a4f0:	f000 80a0 	beq.w	801a634 <_dtoa_r+0x48c>
 801a4f4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801a4f8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a4fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a500:	f140 8098 	bpl.w	801a634 <_dtoa_r+0x48c>
 801a504:	f1b9 0f00 	cmp.w	r9, #0
 801a508:	f000 8094 	beq.w	801a634 <_dtoa_r+0x48c>
 801a50c:	f1ba 0f00 	cmp.w	sl, #0
 801a510:	dd2f      	ble.n	801a572 <_dtoa_r+0x3ca>
 801a512:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801a516:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a51a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a51e:	f10b 32ff 	add.w	r2, fp, #4294967295
 801a522:	3101      	adds	r1, #1
 801a524:	4654      	mov	r4, sl
 801a526:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a52a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801a52e:	ee07 1a90 	vmov	s15, r1
 801a532:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a536:	eea7 5b06 	vfma.f64	d5, d7, d6
 801a53a:	ee15 7a90 	vmov	r7, s11
 801a53e:	ec51 0b15 	vmov	r0, r1, d5
 801a542:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 801a546:	2c00      	cmp	r4, #0
 801a548:	d177      	bne.n	801a63a <_dtoa_r+0x492>
 801a54a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801a54e:	ee36 6b47 	vsub.f64	d6, d6, d7
 801a552:	ec41 0b17 	vmov	d7, r0, r1
 801a556:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a55a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a55e:	f300 826a 	bgt.w	801aa36 <_dtoa_r+0x88e>
 801a562:	eeb1 7b47 	vneg.f64	d7, d7
 801a566:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a56a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a56e:	f100 8260 	bmi.w	801aa32 <_dtoa_r+0x88a>
 801a572:	ed8d 8b02 	vstr	d8, [sp, #8]
 801a576:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a578:	2a00      	cmp	r2, #0
 801a57a:	f2c0 811d 	blt.w	801a7b8 <_dtoa_r+0x610>
 801a57e:	f1bb 0f0e 	cmp.w	fp, #14
 801a582:	f300 8119 	bgt.w	801a7b8 <_dtoa_r+0x610>
 801a586:	4b8a      	ldr	r3, [pc, #552]	; (801a7b0 <_dtoa_r+0x608>)
 801a588:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a58c:	ed93 6b00 	vldr	d6, [r3]
 801a590:	9b08      	ldr	r3, [sp, #32]
 801a592:	2b00      	cmp	r3, #0
 801a594:	f280 80b7 	bge.w	801a706 <_dtoa_r+0x55e>
 801a598:	f1b9 0f00 	cmp.w	r9, #0
 801a59c:	f300 80b3 	bgt.w	801a706 <_dtoa_r+0x55e>
 801a5a0:	f040 8246 	bne.w	801aa30 <_dtoa_r+0x888>
 801a5a4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801a5a8:	ee26 6b07 	vmul.f64	d6, d6, d7
 801a5ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a5b0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a5b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5b8:	464c      	mov	r4, r9
 801a5ba:	464f      	mov	r7, r9
 801a5bc:	f280 821c 	bge.w	801a9f8 <_dtoa_r+0x850>
 801a5c0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a5c4:	2331      	movs	r3, #49	; 0x31
 801a5c6:	f808 3b01 	strb.w	r3, [r8], #1
 801a5ca:	f10b 0b01 	add.w	fp, fp, #1
 801a5ce:	e218      	b.n	801aa02 <_dtoa_r+0x85a>
 801a5d0:	2102      	movs	r1, #2
 801a5d2:	e780      	b.n	801a4d6 <_dtoa_r+0x32e>
 801a5d4:	07d4      	lsls	r4, r2, #31
 801a5d6:	d504      	bpl.n	801a5e2 <_dtoa_r+0x43a>
 801a5d8:	ed90 6b00 	vldr	d6, [r0]
 801a5dc:	3101      	adds	r1, #1
 801a5de:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a5e2:	1052      	asrs	r2, r2, #1
 801a5e4:	3008      	adds	r0, #8
 801a5e6:	e777      	b.n	801a4d8 <_dtoa_r+0x330>
 801a5e8:	d022      	beq.n	801a630 <_dtoa_r+0x488>
 801a5ea:	f1cb 0200 	rsb	r2, fp, #0
 801a5ee:	4970      	ldr	r1, [pc, #448]	; (801a7b0 <_dtoa_r+0x608>)
 801a5f0:	f002 000f 	and.w	r0, r2, #15
 801a5f4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801a5f8:	ed91 7b00 	vldr	d7, [r1]
 801a5fc:	ee28 7b07 	vmul.f64	d7, d8, d7
 801a600:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a604:	486b      	ldr	r0, [pc, #428]	; (801a7b4 <_dtoa_r+0x60c>)
 801a606:	1112      	asrs	r2, r2, #4
 801a608:	2400      	movs	r4, #0
 801a60a:	2102      	movs	r1, #2
 801a60c:	b92a      	cbnz	r2, 801a61a <_dtoa_r+0x472>
 801a60e:	2c00      	cmp	r4, #0
 801a610:	f43f af6a 	beq.w	801a4e8 <_dtoa_r+0x340>
 801a614:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a618:	e766      	b.n	801a4e8 <_dtoa_r+0x340>
 801a61a:	07d7      	lsls	r7, r2, #31
 801a61c:	d505      	bpl.n	801a62a <_dtoa_r+0x482>
 801a61e:	ed90 6b00 	vldr	d6, [r0]
 801a622:	3101      	adds	r1, #1
 801a624:	2401      	movs	r4, #1
 801a626:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a62a:	1052      	asrs	r2, r2, #1
 801a62c:	3008      	adds	r0, #8
 801a62e:	e7ed      	b.n	801a60c <_dtoa_r+0x464>
 801a630:	2102      	movs	r1, #2
 801a632:	e759      	b.n	801a4e8 <_dtoa_r+0x340>
 801a634:	465a      	mov	r2, fp
 801a636:	464c      	mov	r4, r9
 801a638:	e775      	b.n	801a526 <_dtoa_r+0x37e>
 801a63a:	ec41 0b17 	vmov	d7, r0, r1
 801a63e:	495c      	ldr	r1, [pc, #368]	; (801a7b0 <_dtoa_r+0x608>)
 801a640:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 801a644:	ed11 4b02 	vldr	d4, [r1, #-8]
 801a648:	9901      	ldr	r1, [sp, #4]
 801a64a:	440c      	add	r4, r1
 801a64c:	9907      	ldr	r1, [sp, #28]
 801a64e:	b351      	cbz	r1, 801a6a6 <_dtoa_r+0x4fe>
 801a650:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801a654:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801a658:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a65c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801a660:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801a664:	ee35 7b47 	vsub.f64	d7, d5, d7
 801a668:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a66c:	ee14 1a90 	vmov	r1, s9
 801a670:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a674:	3130      	adds	r1, #48	; 0x30
 801a676:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a67a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a67e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a682:	f808 1b01 	strb.w	r1, [r8], #1
 801a686:	d439      	bmi.n	801a6fc <_dtoa_r+0x554>
 801a688:	ee32 5b46 	vsub.f64	d5, d2, d6
 801a68c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801a690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a694:	d472      	bmi.n	801a77c <_dtoa_r+0x5d4>
 801a696:	45a0      	cmp	r8, r4
 801a698:	f43f af6b 	beq.w	801a572 <_dtoa_r+0x3ca>
 801a69c:	ee27 7b03 	vmul.f64	d7, d7, d3
 801a6a0:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a6a4:	e7e0      	b.n	801a668 <_dtoa_r+0x4c0>
 801a6a6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a6aa:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a6ae:	4620      	mov	r0, r4
 801a6b0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801a6b4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a6b8:	ee14 1a90 	vmov	r1, s9
 801a6bc:	3130      	adds	r1, #48	; 0x30
 801a6be:	f808 1b01 	strb.w	r1, [r8], #1
 801a6c2:	45a0      	cmp	r8, r4
 801a6c4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a6c8:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a6cc:	d118      	bne.n	801a700 <_dtoa_r+0x558>
 801a6ce:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801a6d2:	ee37 4b05 	vadd.f64	d4, d7, d5
 801a6d6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801a6da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6de:	dc4d      	bgt.n	801a77c <_dtoa_r+0x5d4>
 801a6e0:	ee35 5b47 	vsub.f64	d5, d5, d7
 801a6e4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801a6e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6ec:	f57f af41 	bpl.w	801a572 <_dtoa_r+0x3ca>
 801a6f0:	4680      	mov	r8, r0
 801a6f2:	3801      	subs	r0, #1
 801a6f4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801a6f8:	2b30      	cmp	r3, #48	; 0x30
 801a6fa:	d0f9      	beq.n	801a6f0 <_dtoa_r+0x548>
 801a6fc:	4693      	mov	fp, r2
 801a6fe:	e02a      	b.n	801a756 <_dtoa_r+0x5ae>
 801a700:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a704:	e7d6      	b.n	801a6b4 <_dtoa_r+0x50c>
 801a706:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a70a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801a70e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a712:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801a716:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801a71a:	ee15 3a10 	vmov	r3, s10
 801a71e:	3330      	adds	r3, #48	; 0x30
 801a720:	f808 3b01 	strb.w	r3, [r8], #1
 801a724:	9b01      	ldr	r3, [sp, #4]
 801a726:	eba8 0303 	sub.w	r3, r8, r3
 801a72a:	4599      	cmp	r9, r3
 801a72c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801a730:	eea3 7b46 	vfms.f64	d7, d3, d6
 801a734:	d133      	bne.n	801a79e <_dtoa_r+0x5f6>
 801a736:	ee37 7b07 	vadd.f64	d7, d7, d7
 801a73a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a73e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a742:	dc1a      	bgt.n	801a77a <_dtoa_r+0x5d2>
 801a744:	eeb4 7b46 	vcmp.f64	d7, d6
 801a748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a74c:	d103      	bne.n	801a756 <_dtoa_r+0x5ae>
 801a74e:	ee15 3a10 	vmov	r3, s10
 801a752:	07d9      	lsls	r1, r3, #31
 801a754:	d411      	bmi.n	801a77a <_dtoa_r+0x5d2>
 801a756:	4629      	mov	r1, r5
 801a758:	4630      	mov	r0, r6
 801a75a:	f000 fbd1 	bl	801af00 <_Bfree>
 801a75e:	2300      	movs	r3, #0
 801a760:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a762:	f888 3000 	strb.w	r3, [r8]
 801a766:	f10b 0301 	add.w	r3, fp, #1
 801a76a:	6013      	str	r3, [r2, #0]
 801a76c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a76e:	2b00      	cmp	r3, #0
 801a770:	f43f ad69 	beq.w	801a246 <_dtoa_r+0x9e>
 801a774:	f8c3 8000 	str.w	r8, [r3]
 801a778:	e565      	b.n	801a246 <_dtoa_r+0x9e>
 801a77a:	465a      	mov	r2, fp
 801a77c:	4643      	mov	r3, r8
 801a77e:	4698      	mov	r8, r3
 801a780:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 801a784:	2939      	cmp	r1, #57	; 0x39
 801a786:	d106      	bne.n	801a796 <_dtoa_r+0x5ee>
 801a788:	9901      	ldr	r1, [sp, #4]
 801a78a:	4299      	cmp	r1, r3
 801a78c:	d1f7      	bne.n	801a77e <_dtoa_r+0x5d6>
 801a78e:	9801      	ldr	r0, [sp, #4]
 801a790:	2130      	movs	r1, #48	; 0x30
 801a792:	3201      	adds	r2, #1
 801a794:	7001      	strb	r1, [r0, #0]
 801a796:	7819      	ldrb	r1, [r3, #0]
 801a798:	3101      	adds	r1, #1
 801a79a:	7019      	strb	r1, [r3, #0]
 801a79c:	e7ae      	b.n	801a6fc <_dtoa_r+0x554>
 801a79e:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a7a2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a7a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7aa:	d1b2      	bne.n	801a712 <_dtoa_r+0x56a>
 801a7ac:	e7d3      	b.n	801a756 <_dtoa_r+0x5ae>
 801a7ae:	bf00      	nop
 801a7b0:	0801f3b8 	.word	0x0801f3b8
 801a7b4:	0801f390 	.word	0x0801f390
 801a7b8:	9907      	ldr	r1, [sp, #28]
 801a7ba:	2900      	cmp	r1, #0
 801a7bc:	f000 80d0 	beq.w	801a960 <_dtoa_r+0x7b8>
 801a7c0:	9906      	ldr	r1, [sp, #24]
 801a7c2:	2901      	cmp	r1, #1
 801a7c4:	f300 80b4 	bgt.w	801a930 <_dtoa_r+0x788>
 801a7c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a7ca:	2900      	cmp	r1, #0
 801a7cc:	f000 80ac 	beq.w	801a928 <_dtoa_r+0x780>
 801a7d0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a7d4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a7d8:	461c      	mov	r4, r3
 801a7da:	9309      	str	r3, [sp, #36]	; 0x24
 801a7dc:	9b04      	ldr	r3, [sp, #16]
 801a7de:	4413      	add	r3, r2
 801a7e0:	9304      	str	r3, [sp, #16]
 801a7e2:	9b05      	ldr	r3, [sp, #20]
 801a7e4:	2101      	movs	r1, #1
 801a7e6:	4413      	add	r3, r2
 801a7e8:	4630      	mov	r0, r6
 801a7ea:	9305      	str	r3, [sp, #20]
 801a7ec:	f000 fc3e 	bl	801b06c <__i2b>
 801a7f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a7f2:	4607      	mov	r7, r0
 801a7f4:	f1b8 0f00 	cmp.w	r8, #0
 801a7f8:	d00d      	beq.n	801a816 <_dtoa_r+0x66e>
 801a7fa:	9a05      	ldr	r2, [sp, #20]
 801a7fc:	2a00      	cmp	r2, #0
 801a7fe:	dd0a      	ble.n	801a816 <_dtoa_r+0x66e>
 801a800:	4542      	cmp	r2, r8
 801a802:	9904      	ldr	r1, [sp, #16]
 801a804:	bfa8      	it	ge
 801a806:	4642      	movge	r2, r8
 801a808:	1a89      	subs	r1, r1, r2
 801a80a:	9104      	str	r1, [sp, #16]
 801a80c:	9905      	ldr	r1, [sp, #20]
 801a80e:	eba8 0802 	sub.w	r8, r8, r2
 801a812:	1a8a      	subs	r2, r1, r2
 801a814:	9205      	str	r2, [sp, #20]
 801a816:	b303      	cbz	r3, 801a85a <_dtoa_r+0x6b2>
 801a818:	9a07      	ldr	r2, [sp, #28]
 801a81a:	2a00      	cmp	r2, #0
 801a81c:	f000 80a5 	beq.w	801a96a <_dtoa_r+0x7c2>
 801a820:	2c00      	cmp	r4, #0
 801a822:	dd13      	ble.n	801a84c <_dtoa_r+0x6a4>
 801a824:	4639      	mov	r1, r7
 801a826:	4622      	mov	r2, r4
 801a828:	4630      	mov	r0, r6
 801a82a:	930d      	str	r3, [sp, #52]	; 0x34
 801a82c:	f000 fcde 	bl	801b1ec <__pow5mult>
 801a830:	462a      	mov	r2, r5
 801a832:	4601      	mov	r1, r0
 801a834:	4607      	mov	r7, r0
 801a836:	4630      	mov	r0, r6
 801a838:	f000 fc2e 	bl	801b098 <__multiply>
 801a83c:	4629      	mov	r1, r5
 801a83e:	9009      	str	r0, [sp, #36]	; 0x24
 801a840:	4630      	mov	r0, r6
 801a842:	f000 fb5d 	bl	801af00 <_Bfree>
 801a846:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a848:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a84a:	4615      	mov	r5, r2
 801a84c:	1b1a      	subs	r2, r3, r4
 801a84e:	d004      	beq.n	801a85a <_dtoa_r+0x6b2>
 801a850:	4629      	mov	r1, r5
 801a852:	4630      	mov	r0, r6
 801a854:	f000 fcca 	bl	801b1ec <__pow5mult>
 801a858:	4605      	mov	r5, r0
 801a85a:	2101      	movs	r1, #1
 801a85c:	4630      	mov	r0, r6
 801a85e:	f000 fc05 	bl	801b06c <__i2b>
 801a862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a864:	2b00      	cmp	r3, #0
 801a866:	4604      	mov	r4, r0
 801a868:	f340 8081 	ble.w	801a96e <_dtoa_r+0x7c6>
 801a86c:	461a      	mov	r2, r3
 801a86e:	4601      	mov	r1, r0
 801a870:	4630      	mov	r0, r6
 801a872:	f000 fcbb 	bl	801b1ec <__pow5mult>
 801a876:	9b06      	ldr	r3, [sp, #24]
 801a878:	2b01      	cmp	r3, #1
 801a87a:	4604      	mov	r4, r0
 801a87c:	dd7a      	ble.n	801a974 <_dtoa_r+0x7cc>
 801a87e:	2300      	movs	r3, #0
 801a880:	9309      	str	r3, [sp, #36]	; 0x24
 801a882:	6922      	ldr	r2, [r4, #16]
 801a884:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801a888:	6910      	ldr	r0, [r2, #16]
 801a88a:	f000 fba1 	bl	801afd0 <__hi0bits>
 801a88e:	f1c0 0020 	rsb	r0, r0, #32
 801a892:	9b05      	ldr	r3, [sp, #20]
 801a894:	4418      	add	r0, r3
 801a896:	f010 001f 	ands.w	r0, r0, #31
 801a89a:	f000 8093 	beq.w	801a9c4 <_dtoa_r+0x81c>
 801a89e:	f1c0 0220 	rsb	r2, r0, #32
 801a8a2:	2a04      	cmp	r2, #4
 801a8a4:	f340 8085 	ble.w	801a9b2 <_dtoa_r+0x80a>
 801a8a8:	9b04      	ldr	r3, [sp, #16]
 801a8aa:	f1c0 001c 	rsb	r0, r0, #28
 801a8ae:	4403      	add	r3, r0
 801a8b0:	9304      	str	r3, [sp, #16]
 801a8b2:	9b05      	ldr	r3, [sp, #20]
 801a8b4:	4480      	add	r8, r0
 801a8b6:	4403      	add	r3, r0
 801a8b8:	9305      	str	r3, [sp, #20]
 801a8ba:	9b04      	ldr	r3, [sp, #16]
 801a8bc:	2b00      	cmp	r3, #0
 801a8be:	dd05      	ble.n	801a8cc <_dtoa_r+0x724>
 801a8c0:	4629      	mov	r1, r5
 801a8c2:	461a      	mov	r2, r3
 801a8c4:	4630      	mov	r0, r6
 801a8c6:	f000 fceb 	bl	801b2a0 <__lshift>
 801a8ca:	4605      	mov	r5, r0
 801a8cc:	9b05      	ldr	r3, [sp, #20]
 801a8ce:	2b00      	cmp	r3, #0
 801a8d0:	dd05      	ble.n	801a8de <_dtoa_r+0x736>
 801a8d2:	4621      	mov	r1, r4
 801a8d4:	461a      	mov	r2, r3
 801a8d6:	4630      	mov	r0, r6
 801a8d8:	f000 fce2 	bl	801b2a0 <__lshift>
 801a8dc:	4604      	mov	r4, r0
 801a8de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a8e0:	2b00      	cmp	r3, #0
 801a8e2:	d071      	beq.n	801a9c8 <_dtoa_r+0x820>
 801a8e4:	4621      	mov	r1, r4
 801a8e6:	4628      	mov	r0, r5
 801a8e8:	f000 fd46 	bl	801b378 <__mcmp>
 801a8ec:	2800      	cmp	r0, #0
 801a8ee:	da6b      	bge.n	801a9c8 <_dtoa_r+0x820>
 801a8f0:	2300      	movs	r3, #0
 801a8f2:	4629      	mov	r1, r5
 801a8f4:	220a      	movs	r2, #10
 801a8f6:	4630      	mov	r0, r6
 801a8f8:	f000 fb24 	bl	801af44 <__multadd>
 801a8fc:	9b07      	ldr	r3, [sp, #28]
 801a8fe:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a902:	4605      	mov	r5, r0
 801a904:	2b00      	cmp	r3, #0
 801a906:	f000 8197 	beq.w	801ac38 <_dtoa_r+0xa90>
 801a90a:	4639      	mov	r1, r7
 801a90c:	2300      	movs	r3, #0
 801a90e:	220a      	movs	r2, #10
 801a910:	4630      	mov	r0, r6
 801a912:	f000 fb17 	bl	801af44 <__multadd>
 801a916:	f1ba 0f00 	cmp.w	sl, #0
 801a91a:	4607      	mov	r7, r0
 801a91c:	f300 8093 	bgt.w	801aa46 <_dtoa_r+0x89e>
 801a920:	9b06      	ldr	r3, [sp, #24]
 801a922:	2b02      	cmp	r3, #2
 801a924:	dc57      	bgt.n	801a9d6 <_dtoa_r+0x82e>
 801a926:	e08e      	b.n	801aa46 <_dtoa_r+0x89e>
 801a928:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a92a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801a92e:	e751      	b.n	801a7d4 <_dtoa_r+0x62c>
 801a930:	f109 34ff 	add.w	r4, r9, #4294967295
 801a934:	42a3      	cmp	r3, r4
 801a936:	bfbf      	itttt	lt
 801a938:	1ae2      	sublt	r2, r4, r3
 801a93a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801a93c:	189b      	addlt	r3, r3, r2
 801a93e:	930a      	strlt	r3, [sp, #40]	; 0x28
 801a940:	bfae      	itee	ge
 801a942:	1b1c      	subge	r4, r3, r4
 801a944:	4623      	movlt	r3, r4
 801a946:	2400      	movlt	r4, #0
 801a948:	f1b9 0f00 	cmp.w	r9, #0
 801a94c:	bfb5      	itete	lt
 801a94e:	9a04      	ldrlt	r2, [sp, #16]
 801a950:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801a954:	eba2 0809 	sublt.w	r8, r2, r9
 801a958:	464a      	movge	r2, r9
 801a95a:	bfb8      	it	lt
 801a95c:	2200      	movlt	r2, #0
 801a95e:	e73c      	b.n	801a7da <_dtoa_r+0x632>
 801a960:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a964:	9f07      	ldr	r7, [sp, #28]
 801a966:	461c      	mov	r4, r3
 801a968:	e744      	b.n	801a7f4 <_dtoa_r+0x64c>
 801a96a:	461a      	mov	r2, r3
 801a96c:	e770      	b.n	801a850 <_dtoa_r+0x6a8>
 801a96e:	9b06      	ldr	r3, [sp, #24]
 801a970:	2b01      	cmp	r3, #1
 801a972:	dc18      	bgt.n	801a9a6 <_dtoa_r+0x7fe>
 801a974:	9b02      	ldr	r3, [sp, #8]
 801a976:	b9b3      	cbnz	r3, 801a9a6 <_dtoa_r+0x7fe>
 801a978:	9b03      	ldr	r3, [sp, #12]
 801a97a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801a97e:	b9a2      	cbnz	r2, 801a9aa <_dtoa_r+0x802>
 801a980:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801a984:	0d12      	lsrs	r2, r2, #20
 801a986:	0512      	lsls	r2, r2, #20
 801a988:	b18a      	cbz	r2, 801a9ae <_dtoa_r+0x806>
 801a98a:	9b04      	ldr	r3, [sp, #16]
 801a98c:	3301      	adds	r3, #1
 801a98e:	9304      	str	r3, [sp, #16]
 801a990:	9b05      	ldr	r3, [sp, #20]
 801a992:	3301      	adds	r3, #1
 801a994:	9305      	str	r3, [sp, #20]
 801a996:	2301      	movs	r3, #1
 801a998:	9309      	str	r3, [sp, #36]	; 0x24
 801a99a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a99c:	2b00      	cmp	r3, #0
 801a99e:	f47f af70 	bne.w	801a882 <_dtoa_r+0x6da>
 801a9a2:	2001      	movs	r0, #1
 801a9a4:	e775      	b.n	801a892 <_dtoa_r+0x6ea>
 801a9a6:	2300      	movs	r3, #0
 801a9a8:	e7f6      	b.n	801a998 <_dtoa_r+0x7f0>
 801a9aa:	9b02      	ldr	r3, [sp, #8]
 801a9ac:	e7f4      	b.n	801a998 <_dtoa_r+0x7f0>
 801a9ae:	9209      	str	r2, [sp, #36]	; 0x24
 801a9b0:	e7f3      	b.n	801a99a <_dtoa_r+0x7f2>
 801a9b2:	d082      	beq.n	801a8ba <_dtoa_r+0x712>
 801a9b4:	9b04      	ldr	r3, [sp, #16]
 801a9b6:	321c      	adds	r2, #28
 801a9b8:	4413      	add	r3, r2
 801a9ba:	9304      	str	r3, [sp, #16]
 801a9bc:	9b05      	ldr	r3, [sp, #20]
 801a9be:	4490      	add	r8, r2
 801a9c0:	4413      	add	r3, r2
 801a9c2:	e779      	b.n	801a8b8 <_dtoa_r+0x710>
 801a9c4:	4602      	mov	r2, r0
 801a9c6:	e7f5      	b.n	801a9b4 <_dtoa_r+0x80c>
 801a9c8:	f1b9 0f00 	cmp.w	r9, #0
 801a9cc:	dc36      	bgt.n	801aa3c <_dtoa_r+0x894>
 801a9ce:	9b06      	ldr	r3, [sp, #24]
 801a9d0:	2b02      	cmp	r3, #2
 801a9d2:	dd33      	ble.n	801aa3c <_dtoa_r+0x894>
 801a9d4:	46ca      	mov	sl, r9
 801a9d6:	f1ba 0f00 	cmp.w	sl, #0
 801a9da:	d10d      	bne.n	801a9f8 <_dtoa_r+0x850>
 801a9dc:	4621      	mov	r1, r4
 801a9de:	4653      	mov	r3, sl
 801a9e0:	2205      	movs	r2, #5
 801a9e2:	4630      	mov	r0, r6
 801a9e4:	f000 faae 	bl	801af44 <__multadd>
 801a9e8:	4601      	mov	r1, r0
 801a9ea:	4604      	mov	r4, r0
 801a9ec:	4628      	mov	r0, r5
 801a9ee:	f000 fcc3 	bl	801b378 <__mcmp>
 801a9f2:	2800      	cmp	r0, #0
 801a9f4:	f73f ade4 	bgt.w	801a5c0 <_dtoa_r+0x418>
 801a9f8:	9b08      	ldr	r3, [sp, #32]
 801a9fa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a9fe:	ea6f 0b03 	mvn.w	fp, r3
 801aa02:	f04f 0900 	mov.w	r9, #0
 801aa06:	4621      	mov	r1, r4
 801aa08:	4630      	mov	r0, r6
 801aa0a:	f000 fa79 	bl	801af00 <_Bfree>
 801aa0e:	2f00      	cmp	r7, #0
 801aa10:	f43f aea1 	beq.w	801a756 <_dtoa_r+0x5ae>
 801aa14:	f1b9 0f00 	cmp.w	r9, #0
 801aa18:	d005      	beq.n	801aa26 <_dtoa_r+0x87e>
 801aa1a:	45b9      	cmp	r9, r7
 801aa1c:	d003      	beq.n	801aa26 <_dtoa_r+0x87e>
 801aa1e:	4649      	mov	r1, r9
 801aa20:	4630      	mov	r0, r6
 801aa22:	f000 fa6d 	bl	801af00 <_Bfree>
 801aa26:	4639      	mov	r1, r7
 801aa28:	4630      	mov	r0, r6
 801aa2a:	f000 fa69 	bl	801af00 <_Bfree>
 801aa2e:	e692      	b.n	801a756 <_dtoa_r+0x5ae>
 801aa30:	2400      	movs	r4, #0
 801aa32:	4627      	mov	r7, r4
 801aa34:	e7e0      	b.n	801a9f8 <_dtoa_r+0x850>
 801aa36:	4693      	mov	fp, r2
 801aa38:	4627      	mov	r7, r4
 801aa3a:	e5c1      	b.n	801a5c0 <_dtoa_r+0x418>
 801aa3c:	9b07      	ldr	r3, [sp, #28]
 801aa3e:	46ca      	mov	sl, r9
 801aa40:	2b00      	cmp	r3, #0
 801aa42:	f000 8100 	beq.w	801ac46 <_dtoa_r+0xa9e>
 801aa46:	f1b8 0f00 	cmp.w	r8, #0
 801aa4a:	dd05      	ble.n	801aa58 <_dtoa_r+0x8b0>
 801aa4c:	4639      	mov	r1, r7
 801aa4e:	4642      	mov	r2, r8
 801aa50:	4630      	mov	r0, r6
 801aa52:	f000 fc25 	bl	801b2a0 <__lshift>
 801aa56:	4607      	mov	r7, r0
 801aa58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa5a:	2b00      	cmp	r3, #0
 801aa5c:	d05d      	beq.n	801ab1a <_dtoa_r+0x972>
 801aa5e:	6879      	ldr	r1, [r7, #4]
 801aa60:	4630      	mov	r0, r6
 801aa62:	f000 fa0d 	bl	801ae80 <_Balloc>
 801aa66:	4680      	mov	r8, r0
 801aa68:	b928      	cbnz	r0, 801aa76 <_dtoa_r+0x8ce>
 801aa6a:	4b82      	ldr	r3, [pc, #520]	; (801ac74 <_dtoa_r+0xacc>)
 801aa6c:	4602      	mov	r2, r0
 801aa6e:	f240 21ef 	movw	r1, #751	; 0x2ef
 801aa72:	f7ff bbb1 	b.w	801a1d8 <_dtoa_r+0x30>
 801aa76:	693a      	ldr	r2, [r7, #16]
 801aa78:	3202      	adds	r2, #2
 801aa7a:	0092      	lsls	r2, r2, #2
 801aa7c:	f107 010c 	add.w	r1, r7, #12
 801aa80:	300c      	adds	r0, #12
 801aa82:	f7ff fadc 	bl	801a03e <memcpy>
 801aa86:	2201      	movs	r2, #1
 801aa88:	4641      	mov	r1, r8
 801aa8a:	4630      	mov	r0, r6
 801aa8c:	f000 fc08 	bl	801b2a0 <__lshift>
 801aa90:	9b01      	ldr	r3, [sp, #4]
 801aa92:	3301      	adds	r3, #1
 801aa94:	9304      	str	r3, [sp, #16]
 801aa96:	9b01      	ldr	r3, [sp, #4]
 801aa98:	4453      	add	r3, sl
 801aa9a:	9308      	str	r3, [sp, #32]
 801aa9c:	9b02      	ldr	r3, [sp, #8]
 801aa9e:	f003 0301 	and.w	r3, r3, #1
 801aaa2:	46b9      	mov	r9, r7
 801aaa4:	9307      	str	r3, [sp, #28]
 801aaa6:	4607      	mov	r7, r0
 801aaa8:	9b04      	ldr	r3, [sp, #16]
 801aaaa:	4621      	mov	r1, r4
 801aaac:	3b01      	subs	r3, #1
 801aaae:	4628      	mov	r0, r5
 801aab0:	9302      	str	r3, [sp, #8]
 801aab2:	f7ff faf1 	bl	801a098 <quorem>
 801aab6:	4603      	mov	r3, r0
 801aab8:	3330      	adds	r3, #48	; 0x30
 801aaba:	9005      	str	r0, [sp, #20]
 801aabc:	4649      	mov	r1, r9
 801aabe:	4628      	mov	r0, r5
 801aac0:	9309      	str	r3, [sp, #36]	; 0x24
 801aac2:	f000 fc59 	bl	801b378 <__mcmp>
 801aac6:	463a      	mov	r2, r7
 801aac8:	4682      	mov	sl, r0
 801aaca:	4621      	mov	r1, r4
 801aacc:	4630      	mov	r0, r6
 801aace:	f000 fc6f 	bl	801b3b0 <__mdiff>
 801aad2:	68c2      	ldr	r2, [r0, #12]
 801aad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aad6:	4680      	mov	r8, r0
 801aad8:	bb0a      	cbnz	r2, 801ab1e <_dtoa_r+0x976>
 801aada:	4601      	mov	r1, r0
 801aadc:	4628      	mov	r0, r5
 801aade:	f000 fc4b 	bl	801b378 <__mcmp>
 801aae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aae4:	4602      	mov	r2, r0
 801aae6:	4641      	mov	r1, r8
 801aae8:	4630      	mov	r0, r6
 801aaea:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801aaee:	f000 fa07 	bl	801af00 <_Bfree>
 801aaf2:	9b06      	ldr	r3, [sp, #24]
 801aaf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801aaf6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801aafa:	ea43 0102 	orr.w	r1, r3, r2
 801aafe:	9b07      	ldr	r3, [sp, #28]
 801ab00:	4319      	orrs	r1, r3
 801ab02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ab04:	d10d      	bne.n	801ab22 <_dtoa_r+0x97a>
 801ab06:	2b39      	cmp	r3, #57	; 0x39
 801ab08:	d029      	beq.n	801ab5e <_dtoa_r+0x9b6>
 801ab0a:	f1ba 0f00 	cmp.w	sl, #0
 801ab0e:	dd01      	ble.n	801ab14 <_dtoa_r+0x96c>
 801ab10:	9b05      	ldr	r3, [sp, #20]
 801ab12:	3331      	adds	r3, #49	; 0x31
 801ab14:	9a02      	ldr	r2, [sp, #8]
 801ab16:	7013      	strb	r3, [r2, #0]
 801ab18:	e775      	b.n	801aa06 <_dtoa_r+0x85e>
 801ab1a:	4638      	mov	r0, r7
 801ab1c:	e7b8      	b.n	801aa90 <_dtoa_r+0x8e8>
 801ab1e:	2201      	movs	r2, #1
 801ab20:	e7e1      	b.n	801aae6 <_dtoa_r+0x93e>
 801ab22:	f1ba 0f00 	cmp.w	sl, #0
 801ab26:	db06      	blt.n	801ab36 <_dtoa_r+0x98e>
 801ab28:	9906      	ldr	r1, [sp, #24]
 801ab2a:	ea41 0a0a 	orr.w	sl, r1, sl
 801ab2e:	9907      	ldr	r1, [sp, #28]
 801ab30:	ea5a 0a01 	orrs.w	sl, sl, r1
 801ab34:	d120      	bne.n	801ab78 <_dtoa_r+0x9d0>
 801ab36:	2a00      	cmp	r2, #0
 801ab38:	ddec      	ble.n	801ab14 <_dtoa_r+0x96c>
 801ab3a:	4629      	mov	r1, r5
 801ab3c:	2201      	movs	r2, #1
 801ab3e:	4630      	mov	r0, r6
 801ab40:	9304      	str	r3, [sp, #16]
 801ab42:	f000 fbad 	bl	801b2a0 <__lshift>
 801ab46:	4621      	mov	r1, r4
 801ab48:	4605      	mov	r5, r0
 801ab4a:	f000 fc15 	bl	801b378 <__mcmp>
 801ab4e:	2800      	cmp	r0, #0
 801ab50:	9b04      	ldr	r3, [sp, #16]
 801ab52:	dc02      	bgt.n	801ab5a <_dtoa_r+0x9b2>
 801ab54:	d1de      	bne.n	801ab14 <_dtoa_r+0x96c>
 801ab56:	07da      	lsls	r2, r3, #31
 801ab58:	d5dc      	bpl.n	801ab14 <_dtoa_r+0x96c>
 801ab5a:	2b39      	cmp	r3, #57	; 0x39
 801ab5c:	d1d8      	bne.n	801ab10 <_dtoa_r+0x968>
 801ab5e:	9a02      	ldr	r2, [sp, #8]
 801ab60:	2339      	movs	r3, #57	; 0x39
 801ab62:	7013      	strb	r3, [r2, #0]
 801ab64:	4643      	mov	r3, r8
 801ab66:	4698      	mov	r8, r3
 801ab68:	3b01      	subs	r3, #1
 801ab6a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801ab6e:	2a39      	cmp	r2, #57	; 0x39
 801ab70:	d051      	beq.n	801ac16 <_dtoa_r+0xa6e>
 801ab72:	3201      	adds	r2, #1
 801ab74:	701a      	strb	r2, [r3, #0]
 801ab76:	e746      	b.n	801aa06 <_dtoa_r+0x85e>
 801ab78:	2a00      	cmp	r2, #0
 801ab7a:	dd03      	ble.n	801ab84 <_dtoa_r+0x9dc>
 801ab7c:	2b39      	cmp	r3, #57	; 0x39
 801ab7e:	d0ee      	beq.n	801ab5e <_dtoa_r+0x9b6>
 801ab80:	3301      	adds	r3, #1
 801ab82:	e7c7      	b.n	801ab14 <_dtoa_r+0x96c>
 801ab84:	9a04      	ldr	r2, [sp, #16]
 801ab86:	9908      	ldr	r1, [sp, #32]
 801ab88:	f802 3c01 	strb.w	r3, [r2, #-1]
 801ab8c:	428a      	cmp	r2, r1
 801ab8e:	d02b      	beq.n	801abe8 <_dtoa_r+0xa40>
 801ab90:	4629      	mov	r1, r5
 801ab92:	2300      	movs	r3, #0
 801ab94:	220a      	movs	r2, #10
 801ab96:	4630      	mov	r0, r6
 801ab98:	f000 f9d4 	bl	801af44 <__multadd>
 801ab9c:	45b9      	cmp	r9, r7
 801ab9e:	4605      	mov	r5, r0
 801aba0:	f04f 0300 	mov.w	r3, #0
 801aba4:	f04f 020a 	mov.w	r2, #10
 801aba8:	4649      	mov	r1, r9
 801abaa:	4630      	mov	r0, r6
 801abac:	d107      	bne.n	801abbe <_dtoa_r+0xa16>
 801abae:	f000 f9c9 	bl	801af44 <__multadd>
 801abb2:	4681      	mov	r9, r0
 801abb4:	4607      	mov	r7, r0
 801abb6:	9b04      	ldr	r3, [sp, #16]
 801abb8:	3301      	adds	r3, #1
 801abba:	9304      	str	r3, [sp, #16]
 801abbc:	e774      	b.n	801aaa8 <_dtoa_r+0x900>
 801abbe:	f000 f9c1 	bl	801af44 <__multadd>
 801abc2:	4639      	mov	r1, r7
 801abc4:	4681      	mov	r9, r0
 801abc6:	2300      	movs	r3, #0
 801abc8:	220a      	movs	r2, #10
 801abca:	4630      	mov	r0, r6
 801abcc:	f000 f9ba 	bl	801af44 <__multadd>
 801abd0:	4607      	mov	r7, r0
 801abd2:	e7f0      	b.n	801abb6 <_dtoa_r+0xa0e>
 801abd4:	f1ba 0f00 	cmp.w	sl, #0
 801abd8:	9a01      	ldr	r2, [sp, #4]
 801abda:	bfcc      	ite	gt
 801abdc:	46d0      	movgt	r8, sl
 801abde:	f04f 0801 	movle.w	r8, #1
 801abe2:	4490      	add	r8, r2
 801abe4:	f04f 0900 	mov.w	r9, #0
 801abe8:	4629      	mov	r1, r5
 801abea:	2201      	movs	r2, #1
 801abec:	4630      	mov	r0, r6
 801abee:	9302      	str	r3, [sp, #8]
 801abf0:	f000 fb56 	bl	801b2a0 <__lshift>
 801abf4:	4621      	mov	r1, r4
 801abf6:	4605      	mov	r5, r0
 801abf8:	f000 fbbe 	bl	801b378 <__mcmp>
 801abfc:	2800      	cmp	r0, #0
 801abfe:	dcb1      	bgt.n	801ab64 <_dtoa_r+0x9bc>
 801ac00:	d102      	bne.n	801ac08 <_dtoa_r+0xa60>
 801ac02:	9b02      	ldr	r3, [sp, #8]
 801ac04:	07db      	lsls	r3, r3, #31
 801ac06:	d4ad      	bmi.n	801ab64 <_dtoa_r+0x9bc>
 801ac08:	4643      	mov	r3, r8
 801ac0a:	4698      	mov	r8, r3
 801ac0c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ac10:	2a30      	cmp	r2, #48	; 0x30
 801ac12:	d0fa      	beq.n	801ac0a <_dtoa_r+0xa62>
 801ac14:	e6f7      	b.n	801aa06 <_dtoa_r+0x85e>
 801ac16:	9a01      	ldr	r2, [sp, #4]
 801ac18:	429a      	cmp	r2, r3
 801ac1a:	d1a4      	bne.n	801ab66 <_dtoa_r+0x9be>
 801ac1c:	f10b 0b01 	add.w	fp, fp, #1
 801ac20:	2331      	movs	r3, #49	; 0x31
 801ac22:	e778      	b.n	801ab16 <_dtoa_r+0x96e>
 801ac24:	4b14      	ldr	r3, [pc, #80]	; (801ac78 <_dtoa_r+0xad0>)
 801ac26:	f7ff bb2a 	b.w	801a27e <_dtoa_r+0xd6>
 801ac2a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ac2c:	2b00      	cmp	r3, #0
 801ac2e:	f47f ab05 	bne.w	801a23c <_dtoa_r+0x94>
 801ac32:	4b12      	ldr	r3, [pc, #72]	; (801ac7c <_dtoa_r+0xad4>)
 801ac34:	f7ff bb23 	b.w	801a27e <_dtoa_r+0xd6>
 801ac38:	f1ba 0f00 	cmp.w	sl, #0
 801ac3c:	dc03      	bgt.n	801ac46 <_dtoa_r+0xa9e>
 801ac3e:	9b06      	ldr	r3, [sp, #24]
 801ac40:	2b02      	cmp	r3, #2
 801ac42:	f73f aec8 	bgt.w	801a9d6 <_dtoa_r+0x82e>
 801ac46:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801ac4a:	4621      	mov	r1, r4
 801ac4c:	4628      	mov	r0, r5
 801ac4e:	f7ff fa23 	bl	801a098 <quorem>
 801ac52:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801ac56:	f808 3b01 	strb.w	r3, [r8], #1
 801ac5a:	9a01      	ldr	r2, [sp, #4]
 801ac5c:	eba8 0202 	sub.w	r2, r8, r2
 801ac60:	4592      	cmp	sl, r2
 801ac62:	ddb7      	ble.n	801abd4 <_dtoa_r+0xa2c>
 801ac64:	4629      	mov	r1, r5
 801ac66:	2300      	movs	r3, #0
 801ac68:	220a      	movs	r2, #10
 801ac6a:	4630      	mov	r0, r6
 801ac6c:	f000 f96a 	bl	801af44 <__multadd>
 801ac70:	4605      	mov	r5, r0
 801ac72:	e7ea      	b.n	801ac4a <_dtoa_r+0xaa2>
 801ac74:	0801f31f 	.word	0x0801f31f
 801ac78:	0801f25a 	.word	0x0801f25a
 801ac7c:	0801f2ba 	.word	0x0801f2ba

0801ac80 <_free_r>:
 801ac80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ac82:	2900      	cmp	r1, #0
 801ac84:	d044      	beq.n	801ad10 <_free_r+0x90>
 801ac86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ac8a:	9001      	str	r0, [sp, #4]
 801ac8c:	2b00      	cmp	r3, #0
 801ac8e:	f1a1 0404 	sub.w	r4, r1, #4
 801ac92:	bfb8      	it	lt
 801ac94:	18e4      	addlt	r4, r4, r3
 801ac96:	f000 f8e7 	bl	801ae68 <__malloc_lock>
 801ac9a:	4a1e      	ldr	r2, [pc, #120]	; (801ad14 <_free_r+0x94>)
 801ac9c:	9801      	ldr	r0, [sp, #4]
 801ac9e:	6813      	ldr	r3, [r2, #0]
 801aca0:	b933      	cbnz	r3, 801acb0 <_free_r+0x30>
 801aca2:	6063      	str	r3, [r4, #4]
 801aca4:	6014      	str	r4, [r2, #0]
 801aca6:	b003      	add	sp, #12
 801aca8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801acac:	f000 b8e2 	b.w	801ae74 <__malloc_unlock>
 801acb0:	42a3      	cmp	r3, r4
 801acb2:	d908      	bls.n	801acc6 <_free_r+0x46>
 801acb4:	6825      	ldr	r5, [r4, #0]
 801acb6:	1961      	adds	r1, r4, r5
 801acb8:	428b      	cmp	r3, r1
 801acba:	bf01      	itttt	eq
 801acbc:	6819      	ldreq	r1, [r3, #0]
 801acbe:	685b      	ldreq	r3, [r3, #4]
 801acc0:	1949      	addeq	r1, r1, r5
 801acc2:	6021      	streq	r1, [r4, #0]
 801acc4:	e7ed      	b.n	801aca2 <_free_r+0x22>
 801acc6:	461a      	mov	r2, r3
 801acc8:	685b      	ldr	r3, [r3, #4]
 801acca:	b10b      	cbz	r3, 801acd0 <_free_r+0x50>
 801accc:	42a3      	cmp	r3, r4
 801acce:	d9fa      	bls.n	801acc6 <_free_r+0x46>
 801acd0:	6811      	ldr	r1, [r2, #0]
 801acd2:	1855      	adds	r5, r2, r1
 801acd4:	42a5      	cmp	r5, r4
 801acd6:	d10b      	bne.n	801acf0 <_free_r+0x70>
 801acd8:	6824      	ldr	r4, [r4, #0]
 801acda:	4421      	add	r1, r4
 801acdc:	1854      	adds	r4, r2, r1
 801acde:	42a3      	cmp	r3, r4
 801ace0:	6011      	str	r1, [r2, #0]
 801ace2:	d1e0      	bne.n	801aca6 <_free_r+0x26>
 801ace4:	681c      	ldr	r4, [r3, #0]
 801ace6:	685b      	ldr	r3, [r3, #4]
 801ace8:	6053      	str	r3, [r2, #4]
 801acea:	440c      	add	r4, r1
 801acec:	6014      	str	r4, [r2, #0]
 801acee:	e7da      	b.n	801aca6 <_free_r+0x26>
 801acf0:	d902      	bls.n	801acf8 <_free_r+0x78>
 801acf2:	230c      	movs	r3, #12
 801acf4:	6003      	str	r3, [r0, #0]
 801acf6:	e7d6      	b.n	801aca6 <_free_r+0x26>
 801acf8:	6825      	ldr	r5, [r4, #0]
 801acfa:	1961      	adds	r1, r4, r5
 801acfc:	428b      	cmp	r3, r1
 801acfe:	bf04      	itt	eq
 801ad00:	6819      	ldreq	r1, [r3, #0]
 801ad02:	685b      	ldreq	r3, [r3, #4]
 801ad04:	6063      	str	r3, [r4, #4]
 801ad06:	bf04      	itt	eq
 801ad08:	1949      	addeq	r1, r1, r5
 801ad0a:	6021      	streq	r1, [r4, #0]
 801ad0c:	6054      	str	r4, [r2, #4]
 801ad0e:	e7ca      	b.n	801aca6 <_free_r+0x26>
 801ad10:	b003      	add	sp, #12
 801ad12:	bd30      	pop	{r4, r5, pc}
 801ad14:	20007378 	.word	0x20007378

0801ad18 <malloc>:
 801ad18:	4b02      	ldr	r3, [pc, #8]	; (801ad24 <malloc+0xc>)
 801ad1a:	4601      	mov	r1, r0
 801ad1c:	6818      	ldr	r0, [r3, #0]
 801ad1e:	f000 b823 	b.w	801ad68 <_malloc_r>
 801ad22:	bf00      	nop
 801ad24:	200000bc 	.word	0x200000bc

0801ad28 <sbrk_aligned>:
 801ad28:	b570      	push	{r4, r5, r6, lr}
 801ad2a:	4e0e      	ldr	r6, [pc, #56]	; (801ad64 <sbrk_aligned+0x3c>)
 801ad2c:	460c      	mov	r4, r1
 801ad2e:	6831      	ldr	r1, [r6, #0]
 801ad30:	4605      	mov	r5, r0
 801ad32:	b911      	cbnz	r1, 801ad3a <sbrk_aligned+0x12>
 801ad34:	f000 fea8 	bl	801ba88 <_sbrk_r>
 801ad38:	6030      	str	r0, [r6, #0]
 801ad3a:	4621      	mov	r1, r4
 801ad3c:	4628      	mov	r0, r5
 801ad3e:	f000 fea3 	bl	801ba88 <_sbrk_r>
 801ad42:	1c43      	adds	r3, r0, #1
 801ad44:	d00a      	beq.n	801ad5c <sbrk_aligned+0x34>
 801ad46:	1cc4      	adds	r4, r0, #3
 801ad48:	f024 0403 	bic.w	r4, r4, #3
 801ad4c:	42a0      	cmp	r0, r4
 801ad4e:	d007      	beq.n	801ad60 <sbrk_aligned+0x38>
 801ad50:	1a21      	subs	r1, r4, r0
 801ad52:	4628      	mov	r0, r5
 801ad54:	f000 fe98 	bl	801ba88 <_sbrk_r>
 801ad58:	3001      	adds	r0, #1
 801ad5a:	d101      	bne.n	801ad60 <sbrk_aligned+0x38>
 801ad5c:	f04f 34ff 	mov.w	r4, #4294967295
 801ad60:	4620      	mov	r0, r4
 801ad62:	bd70      	pop	{r4, r5, r6, pc}
 801ad64:	2000737c 	.word	0x2000737c

0801ad68 <_malloc_r>:
 801ad68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ad6c:	1ccd      	adds	r5, r1, #3
 801ad6e:	f025 0503 	bic.w	r5, r5, #3
 801ad72:	3508      	adds	r5, #8
 801ad74:	2d0c      	cmp	r5, #12
 801ad76:	bf38      	it	cc
 801ad78:	250c      	movcc	r5, #12
 801ad7a:	2d00      	cmp	r5, #0
 801ad7c:	4607      	mov	r7, r0
 801ad7e:	db01      	blt.n	801ad84 <_malloc_r+0x1c>
 801ad80:	42a9      	cmp	r1, r5
 801ad82:	d905      	bls.n	801ad90 <_malloc_r+0x28>
 801ad84:	230c      	movs	r3, #12
 801ad86:	603b      	str	r3, [r7, #0]
 801ad88:	2600      	movs	r6, #0
 801ad8a:	4630      	mov	r0, r6
 801ad8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ad90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801ae64 <_malloc_r+0xfc>
 801ad94:	f000 f868 	bl	801ae68 <__malloc_lock>
 801ad98:	f8d8 3000 	ldr.w	r3, [r8]
 801ad9c:	461c      	mov	r4, r3
 801ad9e:	bb5c      	cbnz	r4, 801adf8 <_malloc_r+0x90>
 801ada0:	4629      	mov	r1, r5
 801ada2:	4638      	mov	r0, r7
 801ada4:	f7ff ffc0 	bl	801ad28 <sbrk_aligned>
 801ada8:	1c43      	adds	r3, r0, #1
 801adaa:	4604      	mov	r4, r0
 801adac:	d155      	bne.n	801ae5a <_malloc_r+0xf2>
 801adae:	f8d8 4000 	ldr.w	r4, [r8]
 801adb2:	4626      	mov	r6, r4
 801adb4:	2e00      	cmp	r6, #0
 801adb6:	d145      	bne.n	801ae44 <_malloc_r+0xdc>
 801adb8:	2c00      	cmp	r4, #0
 801adba:	d048      	beq.n	801ae4e <_malloc_r+0xe6>
 801adbc:	6823      	ldr	r3, [r4, #0]
 801adbe:	4631      	mov	r1, r6
 801adc0:	4638      	mov	r0, r7
 801adc2:	eb04 0903 	add.w	r9, r4, r3
 801adc6:	f000 fe5f 	bl	801ba88 <_sbrk_r>
 801adca:	4581      	cmp	r9, r0
 801adcc:	d13f      	bne.n	801ae4e <_malloc_r+0xe6>
 801adce:	6821      	ldr	r1, [r4, #0]
 801add0:	1a6d      	subs	r5, r5, r1
 801add2:	4629      	mov	r1, r5
 801add4:	4638      	mov	r0, r7
 801add6:	f7ff ffa7 	bl	801ad28 <sbrk_aligned>
 801adda:	3001      	adds	r0, #1
 801addc:	d037      	beq.n	801ae4e <_malloc_r+0xe6>
 801adde:	6823      	ldr	r3, [r4, #0]
 801ade0:	442b      	add	r3, r5
 801ade2:	6023      	str	r3, [r4, #0]
 801ade4:	f8d8 3000 	ldr.w	r3, [r8]
 801ade8:	2b00      	cmp	r3, #0
 801adea:	d038      	beq.n	801ae5e <_malloc_r+0xf6>
 801adec:	685a      	ldr	r2, [r3, #4]
 801adee:	42a2      	cmp	r2, r4
 801adf0:	d12b      	bne.n	801ae4a <_malloc_r+0xe2>
 801adf2:	2200      	movs	r2, #0
 801adf4:	605a      	str	r2, [r3, #4]
 801adf6:	e00f      	b.n	801ae18 <_malloc_r+0xb0>
 801adf8:	6822      	ldr	r2, [r4, #0]
 801adfa:	1b52      	subs	r2, r2, r5
 801adfc:	d41f      	bmi.n	801ae3e <_malloc_r+0xd6>
 801adfe:	2a0b      	cmp	r2, #11
 801ae00:	d917      	bls.n	801ae32 <_malloc_r+0xca>
 801ae02:	1961      	adds	r1, r4, r5
 801ae04:	42a3      	cmp	r3, r4
 801ae06:	6025      	str	r5, [r4, #0]
 801ae08:	bf18      	it	ne
 801ae0a:	6059      	strne	r1, [r3, #4]
 801ae0c:	6863      	ldr	r3, [r4, #4]
 801ae0e:	bf08      	it	eq
 801ae10:	f8c8 1000 	streq.w	r1, [r8]
 801ae14:	5162      	str	r2, [r4, r5]
 801ae16:	604b      	str	r3, [r1, #4]
 801ae18:	4638      	mov	r0, r7
 801ae1a:	f104 060b 	add.w	r6, r4, #11
 801ae1e:	f000 f829 	bl	801ae74 <__malloc_unlock>
 801ae22:	f026 0607 	bic.w	r6, r6, #7
 801ae26:	1d23      	adds	r3, r4, #4
 801ae28:	1af2      	subs	r2, r6, r3
 801ae2a:	d0ae      	beq.n	801ad8a <_malloc_r+0x22>
 801ae2c:	1b9b      	subs	r3, r3, r6
 801ae2e:	50a3      	str	r3, [r4, r2]
 801ae30:	e7ab      	b.n	801ad8a <_malloc_r+0x22>
 801ae32:	42a3      	cmp	r3, r4
 801ae34:	6862      	ldr	r2, [r4, #4]
 801ae36:	d1dd      	bne.n	801adf4 <_malloc_r+0x8c>
 801ae38:	f8c8 2000 	str.w	r2, [r8]
 801ae3c:	e7ec      	b.n	801ae18 <_malloc_r+0xb0>
 801ae3e:	4623      	mov	r3, r4
 801ae40:	6864      	ldr	r4, [r4, #4]
 801ae42:	e7ac      	b.n	801ad9e <_malloc_r+0x36>
 801ae44:	4634      	mov	r4, r6
 801ae46:	6876      	ldr	r6, [r6, #4]
 801ae48:	e7b4      	b.n	801adb4 <_malloc_r+0x4c>
 801ae4a:	4613      	mov	r3, r2
 801ae4c:	e7cc      	b.n	801ade8 <_malloc_r+0x80>
 801ae4e:	230c      	movs	r3, #12
 801ae50:	603b      	str	r3, [r7, #0]
 801ae52:	4638      	mov	r0, r7
 801ae54:	f000 f80e 	bl	801ae74 <__malloc_unlock>
 801ae58:	e797      	b.n	801ad8a <_malloc_r+0x22>
 801ae5a:	6025      	str	r5, [r4, #0]
 801ae5c:	e7dc      	b.n	801ae18 <_malloc_r+0xb0>
 801ae5e:	605b      	str	r3, [r3, #4]
 801ae60:	deff      	udf	#255	; 0xff
 801ae62:	bf00      	nop
 801ae64:	20007378 	.word	0x20007378

0801ae68 <__malloc_lock>:
 801ae68:	4801      	ldr	r0, [pc, #4]	; (801ae70 <__malloc_lock+0x8>)
 801ae6a:	f7ff b8e6 	b.w	801a03a <__retarget_lock_acquire_recursive>
 801ae6e:	bf00      	nop
 801ae70:	20007374 	.word	0x20007374

0801ae74 <__malloc_unlock>:
 801ae74:	4801      	ldr	r0, [pc, #4]	; (801ae7c <__malloc_unlock+0x8>)
 801ae76:	f7ff b8e1 	b.w	801a03c <__retarget_lock_release_recursive>
 801ae7a:	bf00      	nop
 801ae7c:	20007374 	.word	0x20007374

0801ae80 <_Balloc>:
 801ae80:	b570      	push	{r4, r5, r6, lr}
 801ae82:	69c6      	ldr	r6, [r0, #28]
 801ae84:	4604      	mov	r4, r0
 801ae86:	460d      	mov	r5, r1
 801ae88:	b976      	cbnz	r6, 801aea8 <_Balloc+0x28>
 801ae8a:	2010      	movs	r0, #16
 801ae8c:	f7ff ff44 	bl	801ad18 <malloc>
 801ae90:	4602      	mov	r2, r0
 801ae92:	61e0      	str	r0, [r4, #28]
 801ae94:	b920      	cbnz	r0, 801aea0 <_Balloc+0x20>
 801ae96:	4b18      	ldr	r3, [pc, #96]	; (801aef8 <_Balloc+0x78>)
 801ae98:	4818      	ldr	r0, [pc, #96]	; (801aefc <_Balloc+0x7c>)
 801ae9a:	216b      	movs	r1, #107	; 0x6b
 801ae9c:	f7ff f8de 	bl	801a05c <__assert_func>
 801aea0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801aea4:	6006      	str	r6, [r0, #0]
 801aea6:	60c6      	str	r6, [r0, #12]
 801aea8:	69e6      	ldr	r6, [r4, #28]
 801aeaa:	68f3      	ldr	r3, [r6, #12]
 801aeac:	b183      	cbz	r3, 801aed0 <_Balloc+0x50>
 801aeae:	69e3      	ldr	r3, [r4, #28]
 801aeb0:	68db      	ldr	r3, [r3, #12]
 801aeb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801aeb6:	b9b8      	cbnz	r0, 801aee8 <_Balloc+0x68>
 801aeb8:	2101      	movs	r1, #1
 801aeba:	fa01 f605 	lsl.w	r6, r1, r5
 801aebe:	1d72      	adds	r2, r6, #5
 801aec0:	0092      	lsls	r2, r2, #2
 801aec2:	4620      	mov	r0, r4
 801aec4:	f000 fdf7 	bl	801bab6 <_calloc_r>
 801aec8:	b160      	cbz	r0, 801aee4 <_Balloc+0x64>
 801aeca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801aece:	e00e      	b.n	801aeee <_Balloc+0x6e>
 801aed0:	2221      	movs	r2, #33	; 0x21
 801aed2:	2104      	movs	r1, #4
 801aed4:	4620      	mov	r0, r4
 801aed6:	f000 fdee 	bl	801bab6 <_calloc_r>
 801aeda:	69e3      	ldr	r3, [r4, #28]
 801aedc:	60f0      	str	r0, [r6, #12]
 801aede:	68db      	ldr	r3, [r3, #12]
 801aee0:	2b00      	cmp	r3, #0
 801aee2:	d1e4      	bne.n	801aeae <_Balloc+0x2e>
 801aee4:	2000      	movs	r0, #0
 801aee6:	bd70      	pop	{r4, r5, r6, pc}
 801aee8:	6802      	ldr	r2, [r0, #0]
 801aeea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801aeee:	2300      	movs	r3, #0
 801aef0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801aef4:	e7f7      	b.n	801aee6 <_Balloc+0x66>
 801aef6:	bf00      	nop
 801aef8:	0801f0da 	.word	0x0801f0da
 801aefc:	0801f330 	.word	0x0801f330

0801af00 <_Bfree>:
 801af00:	b570      	push	{r4, r5, r6, lr}
 801af02:	69c6      	ldr	r6, [r0, #28]
 801af04:	4605      	mov	r5, r0
 801af06:	460c      	mov	r4, r1
 801af08:	b976      	cbnz	r6, 801af28 <_Bfree+0x28>
 801af0a:	2010      	movs	r0, #16
 801af0c:	f7ff ff04 	bl	801ad18 <malloc>
 801af10:	4602      	mov	r2, r0
 801af12:	61e8      	str	r0, [r5, #28]
 801af14:	b920      	cbnz	r0, 801af20 <_Bfree+0x20>
 801af16:	4b09      	ldr	r3, [pc, #36]	; (801af3c <_Bfree+0x3c>)
 801af18:	4809      	ldr	r0, [pc, #36]	; (801af40 <_Bfree+0x40>)
 801af1a:	218f      	movs	r1, #143	; 0x8f
 801af1c:	f7ff f89e 	bl	801a05c <__assert_func>
 801af20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801af24:	6006      	str	r6, [r0, #0]
 801af26:	60c6      	str	r6, [r0, #12]
 801af28:	b13c      	cbz	r4, 801af3a <_Bfree+0x3a>
 801af2a:	69eb      	ldr	r3, [r5, #28]
 801af2c:	6862      	ldr	r2, [r4, #4]
 801af2e:	68db      	ldr	r3, [r3, #12]
 801af30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801af34:	6021      	str	r1, [r4, #0]
 801af36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801af3a:	bd70      	pop	{r4, r5, r6, pc}
 801af3c:	0801f0da 	.word	0x0801f0da
 801af40:	0801f330 	.word	0x0801f330

0801af44 <__multadd>:
 801af44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af48:	690d      	ldr	r5, [r1, #16]
 801af4a:	4607      	mov	r7, r0
 801af4c:	460c      	mov	r4, r1
 801af4e:	461e      	mov	r6, r3
 801af50:	f101 0c14 	add.w	ip, r1, #20
 801af54:	2000      	movs	r0, #0
 801af56:	f8dc 3000 	ldr.w	r3, [ip]
 801af5a:	b299      	uxth	r1, r3
 801af5c:	fb02 6101 	mla	r1, r2, r1, r6
 801af60:	0c1e      	lsrs	r6, r3, #16
 801af62:	0c0b      	lsrs	r3, r1, #16
 801af64:	fb02 3306 	mla	r3, r2, r6, r3
 801af68:	b289      	uxth	r1, r1
 801af6a:	3001      	adds	r0, #1
 801af6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801af70:	4285      	cmp	r5, r0
 801af72:	f84c 1b04 	str.w	r1, [ip], #4
 801af76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801af7a:	dcec      	bgt.n	801af56 <__multadd+0x12>
 801af7c:	b30e      	cbz	r6, 801afc2 <__multadd+0x7e>
 801af7e:	68a3      	ldr	r3, [r4, #8]
 801af80:	42ab      	cmp	r3, r5
 801af82:	dc19      	bgt.n	801afb8 <__multadd+0x74>
 801af84:	6861      	ldr	r1, [r4, #4]
 801af86:	4638      	mov	r0, r7
 801af88:	3101      	adds	r1, #1
 801af8a:	f7ff ff79 	bl	801ae80 <_Balloc>
 801af8e:	4680      	mov	r8, r0
 801af90:	b928      	cbnz	r0, 801af9e <__multadd+0x5a>
 801af92:	4602      	mov	r2, r0
 801af94:	4b0c      	ldr	r3, [pc, #48]	; (801afc8 <__multadd+0x84>)
 801af96:	480d      	ldr	r0, [pc, #52]	; (801afcc <__multadd+0x88>)
 801af98:	21ba      	movs	r1, #186	; 0xba
 801af9a:	f7ff f85f 	bl	801a05c <__assert_func>
 801af9e:	6922      	ldr	r2, [r4, #16]
 801afa0:	3202      	adds	r2, #2
 801afa2:	f104 010c 	add.w	r1, r4, #12
 801afa6:	0092      	lsls	r2, r2, #2
 801afa8:	300c      	adds	r0, #12
 801afaa:	f7ff f848 	bl	801a03e <memcpy>
 801afae:	4621      	mov	r1, r4
 801afb0:	4638      	mov	r0, r7
 801afb2:	f7ff ffa5 	bl	801af00 <_Bfree>
 801afb6:	4644      	mov	r4, r8
 801afb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801afbc:	3501      	adds	r5, #1
 801afbe:	615e      	str	r6, [r3, #20]
 801afc0:	6125      	str	r5, [r4, #16]
 801afc2:	4620      	mov	r0, r4
 801afc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801afc8:	0801f31f 	.word	0x0801f31f
 801afcc:	0801f330 	.word	0x0801f330

0801afd0 <__hi0bits>:
 801afd0:	0c03      	lsrs	r3, r0, #16
 801afd2:	041b      	lsls	r3, r3, #16
 801afd4:	b9d3      	cbnz	r3, 801b00c <__hi0bits+0x3c>
 801afd6:	0400      	lsls	r0, r0, #16
 801afd8:	2310      	movs	r3, #16
 801afda:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801afde:	bf04      	itt	eq
 801afe0:	0200      	lsleq	r0, r0, #8
 801afe2:	3308      	addeq	r3, #8
 801afe4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801afe8:	bf04      	itt	eq
 801afea:	0100      	lsleq	r0, r0, #4
 801afec:	3304      	addeq	r3, #4
 801afee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801aff2:	bf04      	itt	eq
 801aff4:	0080      	lsleq	r0, r0, #2
 801aff6:	3302      	addeq	r3, #2
 801aff8:	2800      	cmp	r0, #0
 801affa:	db05      	blt.n	801b008 <__hi0bits+0x38>
 801affc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801b000:	f103 0301 	add.w	r3, r3, #1
 801b004:	bf08      	it	eq
 801b006:	2320      	moveq	r3, #32
 801b008:	4618      	mov	r0, r3
 801b00a:	4770      	bx	lr
 801b00c:	2300      	movs	r3, #0
 801b00e:	e7e4      	b.n	801afda <__hi0bits+0xa>

0801b010 <__lo0bits>:
 801b010:	6803      	ldr	r3, [r0, #0]
 801b012:	f013 0207 	ands.w	r2, r3, #7
 801b016:	d00c      	beq.n	801b032 <__lo0bits+0x22>
 801b018:	07d9      	lsls	r1, r3, #31
 801b01a:	d422      	bmi.n	801b062 <__lo0bits+0x52>
 801b01c:	079a      	lsls	r2, r3, #30
 801b01e:	bf49      	itett	mi
 801b020:	085b      	lsrmi	r3, r3, #1
 801b022:	089b      	lsrpl	r3, r3, #2
 801b024:	6003      	strmi	r3, [r0, #0]
 801b026:	2201      	movmi	r2, #1
 801b028:	bf5c      	itt	pl
 801b02a:	6003      	strpl	r3, [r0, #0]
 801b02c:	2202      	movpl	r2, #2
 801b02e:	4610      	mov	r0, r2
 801b030:	4770      	bx	lr
 801b032:	b299      	uxth	r1, r3
 801b034:	b909      	cbnz	r1, 801b03a <__lo0bits+0x2a>
 801b036:	0c1b      	lsrs	r3, r3, #16
 801b038:	2210      	movs	r2, #16
 801b03a:	b2d9      	uxtb	r1, r3
 801b03c:	b909      	cbnz	r1, 801b042 <__lo0bits+0x32>
 801b03e:	3208      	adds	r2, #8
 801b040:	0a1b      	lsrs	r3, r3, #8
 801b042:	0719      	lsls	r1, r3, #28
 801b044:	bf04      	itt	eq
 801b046:	091b      	lsreq	r3, r3, #4
 801b048:	3204      	addeq	r2, #4
 801b04a:	0799      	lsls	r1, r3, #30
 801b04c:	bf04      	itt	eq
 801b04e:	089b      	lsreq	r3, r3, #2
 801b050:	3202      	addeq	r2, #2
 801b052:	07d9      	lsls	r1, r3, #31
 801b054:	d403      	bmi.n	801b05e <__lo0bits+0x4e>
 801b056:	085b      	lsrs	r3, r3, #1
 801b058:	f102 0201 	add.w	r2, r2, #1
 801b05c:	d003      	beq.n	801b066 <__lo0bits+0x56>
 801b05e:	6003      	str	r3, [r0, #0]
 801b060:	e7e5      	b.n	801b02e <__lo0bits+0x1e>
 801b062:	2200      	movs	r2, #0
 801b064:	e7e3      	b.n	801b02e <__lo0bits+0x1e>
 801b066:	2220      	movs	r2, #32
 801b068:	e7e1      	b.n	801b02e <__lo0bits+0x1e>
	...

0801b06c <__i2b>:
 801b06c:	b510      	push	{r4, lr}
 801b06e:	460c      	mov	r4, r1
 801b070:	2101      	movs	r1, #1
 801b072:	f7ff ff05 	bl	801ae80 <_Balloc>
 801b076:	4602      	mov	r2, r0
 801b078:	b928      	cbnz	r0, 801b086 <__i2b+0x1a>
 801b07a:	4b05      	ldr	r3, [pc, #20]	; (801b090 <__i2b+0x24>)
 801b07c:	4805      	ldr	r0, [pc, #20]	; (801b094 <__i2b+0x28>)
 801b07e:	f240 1145 	movw	r1, #325	; 0x145
 801b082:	f7fe ffeb 	bl	801a05c <__assert_func>
 801b086:	2301      	movs	r3, #1
 801b088:	6144      	str	r4, [r0, #20]
 801b08a:	6103      	str	r3, [r0, #16]
 801b08c:	bd10      	pop	{r4, pc}
 801b08e:	bf00      	nop
 801b090:	0801f31f 	.word	0x0801f31f
 801b094:	0801f330 	.word	0x0801f330

0801b098 <__multiply>:
 801b098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b09c:	4691      	mov	r9, r2
 801b09e:	690a      	ldr	r2, [r1, #16]
 801b0a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801b0a4:	429a      	cmp	r2, r3
 801b0a6:	bfb8      	it	lt
 801b0a8:	460b      	movlt	r3, r1
 801b0aa:	460c      	mov	r4, r1
 801b0ac:	bfbc      	itt	lt
 801b0ae:	464c      	movlt	r4, r9
 801b0b0:	4699      	movlt	r9, r3
 801b0b2:	6927      	ldr	r7, [r4, #16]
 801b0b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801b0b8:	68a3      	ldr	r3, [r4, #8]
 801b0ba:	6861      	ldr	r1, [r4, #4]
 801b0bc:	eb07 060a 	add.w	r6, r7, sl
 801b0c0:	42b3      	cmp	r3, r6
 801b0c2:	b085      	sub	sp, #20
 801b0c4:	bfb8      	it	lt
 801b0c6:	3101      	addlt	r1, #1
 801b0c8:	f7ff feda 	bl	801ae80 <_Balloc>
 801b0cc:	b930      	cbnz	r0, 801b0dc <__multiply+0x44>
 801b0ce:	4602      	mov	r2, r0
 801b0d0:	4b44      	ldr	r3, [pc, #272]	; (801b1e4 <__multiply+0x14c>)
 801b0d2:	4845      	ldr	r0, [pc, #276]	; (801b1e8 <__multiply+0x150>)
 801b0d4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801b0d8:	f7fe ffc0 	bl	801a05c <__assert_func>
 801b0dc:	f100 0514 	add.w	r5, r0, #20
 801b0e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801b0e4:	462b      	mov	r3, r5
 801b0e6:	2200      	movs	r2, #0
 801b0e8:	4543      	cmp	r3, r8
 801b0ea:	d321      	bcc.n	801b130 <__multiply+0x98>
 801b0ec:	f104 0314 	add.w	r3, r4, #20
 801b0f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801b0f4:	f109 0314 	add.w	r3, r9, #20
 801b0f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801b0fc:	9202      	str	r2, [sp, #8]
 801b0fe:	1b3a      	subs	r2, r7, r4
 801b100:	3a15      	subs	r2, #21
 801b102:	f022 0203 	bic.w	r2, r2, #3
 801b106:	3204      	adds	r2, #4
 801b108:	f104 0115 	add.w	r1, r4, #21
 801b10c:	428f      	cmp	r7, r1
 801b10e:	bf38      	it	cc
 801b110:	2204      	movcc	r2, #4
 801b112:	9201      	str	r2, [sp, #4]
 801b114:	9a02      	ldr	r2, [sp, #8]
 801b116:	9303      	str	r3, [sp, #12]
 801b118:	429a      	cmp	r2, r3
 801b11a:	d80c      	bhi.n	801b136 <__multiply+0x9e>
 801b11c:	2e00      	cmp	r6, #0
 801b11e:	dd03      	ble.n	801b128 <__multiply+0x90>
 801b120:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801b124:	2b00      	cmp	r3, #0
 801b126:	d05b      	beq.n	801b1e0 <__multiply+0x148>
 801b128:	6106      	str	r6, [r0, #16]
 801b12a:	b005      	add	sp, #20
 801b12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b130:	f843 2b04 	str.w	r2, [r3], #4
 801b134:	e7d8      	b.n	801b0e8 <__multiply+0x50>
 801b136:	f8b3 a000 	ldrh.w	sl, [r3]
 801b13a:	f1ba 0f00 	cmp.w	sl, #0
 801b13e:	d024      	beq.n	801b18a <__multiply+0xf2>
 801b140:	f104 0e14 	add.w	lr, r4, #20
 801b144:	46a9      	mov	r9, r5
 801b146:	f04f 0c00 	mov.w	ip, #0
 801b14a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801b14e:	f8d9 1000 	ldr.w	r1, [r9]
 801b152:	fa1f fb82 	uxth.w	fp, r2
 801b156:	b289      	uxth	r1, r1
 801b158:	fb0a 110b 	mla	r1, sl, fp, r1
 801b15c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801b160:	f8d9 2000 	ldr.w	r2, [r9]
 801b164:	4461      	add	r1, ip
 801b166:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801b16a:	fb0a c20b 	mla	r2, sl, fp, ip
 801b16e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801b172:	b289      	uxth	r1, r1
 801b174:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801b178:	4577      	cmp	r7, lr
 801b17a:	f849 1b04 	str.w	r1, [r9], #4
 801b17e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801b182:	d8e2      	bhi.n	801b14a <__multiply+0xb2>
 801b184:	9a01      	ldr	r2, [sp, #4]
 801b186:	f845 c002 	str.w	ip, [r5, r2]
 801b18a:	9a03      	ldr	r2, [sp, #12]
 801b18c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801b190:	3304      	adds	r3, #4
 801b192:	f1b9 0f00 	cmp.w	r9, #0
 801b196:	d021      	beq.n	801b1dc <__multiply+0x144>
 801b198:	6829      	ldr	r1, [r5, #0]
 801b19a:	f104 0c14 	add.w	ip, r4, #20
 801b19e:	46ae      	mov	lr, r5
 801b1a0:	f04f 0a00 	mov.w	sl, #0
 801b1a4:	f8bc b000 	ldrh.w	fp, [ip]
 801b1a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801b1ac:	fb09 220b 	mla	r2, r9, fp, r2
 801b1b0:	4452      	add	r2, sl
 801b1b2:	b289      	uxth	r1, r1
 801b1b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801b1b8:	f84e 1b04 	str.w	r1, [lr], #4
 801b1bc:	f85c 1b04 	ldr.w	r1, [ip], #4
 801b1c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801b1c4:	f8be 1000 	ldrh.w	r1, [lr]
 801b1c8:	fb09 110a 	mla	r1, r9, sl, r1
 801b1cc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801b1d0:	4567      	cmp	r7, ip
 801b1d2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801b1d6:	d8e5      	bhi.n	801b1a4 <__multiply+0x10c>
 801b1d8:	9a01      	ldr	r2, [sp, #4]
 801b1da:	50a9      	str	r1, [r5, r2]
 801b1dc:	3504      	adds	r5, #4
 801b1de:	e799      	b.n	801b114 <__multiply+0x7c>
 801b1e0:	3e01      	subs	r6, #1
 801b1e2:	e79b      	b.n	801b11c <__multiply+0x84>
 801b1e4:	0801f31f 	.word	0x0801f31f
 801b1e8:	0801f330 	.word	0x0801f330

0801b1ec <__pow5mult>:
 801b1ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b1f0:	4615      	mov	r5, r2
 801b1f2:	f012 0203 	ands.w	r2, r2, #3
 801b1f6:	4606      	mov	r6, r0
 801b1f8:	460f      	mov	r7, r1
 801b1fa:	d007      	beq.n	801b20c <__pow5mult+0x20>
 801b1fc:	4c25      	ldr	r4, [pc, #148]	; (801b294 <__pow5mult+0xa8>)
 801b1fe:	3a01      	subs	r2, #1
 801b200:	2300      	movs	r3, #0
 801b202:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b206:	f7ff fe9d 	bl	801af44 <__multadd>
 801b20a:	4607      	mov	r7, r0
 801b20c:	10ad      	asrs	r5, r5, #2
 801b20e:	d03d      	beq.n	801b28c <__pow5mult+0xa0>
 801b210:	69f4      	ldr	r4, [r6, #28]
 801b212:	b97c      	cbnz	r4, 801b234 <__pow5mult+0x48>
 801b214:	2010      	movs	r0, #16
 801b216:	f7ff fd7f 	bl	801ad18 <malloc>
 801b21a:	4602      	mov	r2, r0
 801b21c:	61f0      	str	r0, [r6, #28]
 801b21e:	b928      	cbnz	r0, 801b22c <__pow5mult+0x40>
 801b220:	4b1d      	ldr	r3, [pc, #116]	; (801b298 <__pow5mult+0xac>)
 801b222:	481e      	ldr	r0, [pc, #120]	; (801b29c <__pow5mult+0xb0>)
 801b224:	f240 11b3 	movw	r1, #435	; 0x1b3
 801b228:	f7fe ff18 	bl	801a05c <__assert_func>
 801b22c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b230:	6004      	str	r4, [r0, #0]
 801b232:	60c4      	str	r4, [r0, #12]
 801b234:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801b238:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b23c:	b94c      	cbnz	r4, 801b252 <__pow5mult+0x66>
 801b23e:	f240 2171 	movw	r1, #625	; 0x271
 801b242:	4630      	mov	r0, r6
 801b244:	f7ff ff12 	bl	801b06c <__i2b>
 801b248:	2300      	movs	r3, #0
 801b24a:	f8c8 0008 	str.w	r0, [r8, #8]
 801b24e:	4604      	mov	r4, r0
 801b250:	6003      	str	r3, [r0, #0]
 801b252:	f04f 0900 	mov.w	r9, #0
 801b256:	07eb      	lsls	r3, r5, #31
 801b258:	d50a      	bpl.n	801b270 <__pow5mult+0x84>
 801b25a:	4639      	mov	r1, r7
 801b25c:	4622      	mov	r2, r4
 801b25e:	4630      	mov	r0, r6
 801b260:	f7ff ff1a 	bl	801b098 <__multiply>
 801b264:	4639      	mov	r1, r7
 801b266:	4680      	mov	r8, r0
 801b268:	4630      	mov	r0, r6
 801b26a:	f7ff fe49 	bl	801af00 <_Bfree>
 801b26e:	4647      	mov	r7, r8
 801b270:	106d      	asrs	r5, r5, #1
 801b272:	d00b      	beq.n	801b28c <__pow5mult+0xa0>
 801b274:	6820      	ldr	r0, [r4, #0]
 801b276:	b938      	cbnz	r0, 801b288 <__pow5mult+0x9c>
 801b278:	4622      	mov	r2, r4
 801b27a:	4621      	mov	r1, r4
 801b27c:	4630      	mov	r0, r6
 801b27e:	f7ff ff0b 	bl	801b098 <__multiply>
 801b282:	6020      	str	r0, [r4, #0]
 801b284:	f8c0 9000 	str.w	r9, [r0]
 801b288:	4604      	mov	r4, r0
 801b28a:	e7e4      	b.n	801b256 <__pow5mult+0x6a>
 801b28c:	4638      	mov	r0, r7
 801b28e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b292:	bf00      	nop
 801b294:	0801f480 	.word	0x0801f480
 801b298:	0801f0da 	.word	0x0801f0da
 801b29c:	0801f330 	.word	0x0801f330

0801b2a0 <__lshift>:
 801b2a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b2a4:	460c      	mov	r4, r1
 801b2a6:	6849      	ldr	r1, [r1, #4]
 801b2a8:	6923      	ldr	r3, [r4, #16]
 801b2aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801b2ae:	68a3      	ldr	r3, [r4, #8]
 801b2b0:	4607      	mov	r7, r0
 801b2b2:	4691      	mov	r9, r2
 801b2b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b2b8:	f108 0601 	add.w	r6, r8, #1
 801b2bc:	42b3      	cmp	r3, r6
 801b2be:	db0b      	blt.n	801b2d8 <__lshift+0x38>
 801b2c0:	4638      	mov	r0, r7
 801b2c2:	f7ff fddd 	bl	801ae80 <_Balloc>
 801b2c6:	4605      	mov	r5, r0
 801b2c8:	b948      	cbnz	r0, 801b2de <__lshift+0x3e>
 801b2ca:	4602      	mov	r2, r0
 801b2cc:	4b28      	ldr	r3, [pc, #160]	; (801b370 <__lshift+0xd0>)
 801b2ce:	4829      	ldr	r0, [pc, #164]	; (801b374 <__lshift+0xd4>)
 801b2d0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801b2d4:	f7fe fec2 	bl	801a05c <__assert_func>
 801b2d8:	3101      	adds	r1, #1
 801b2da:	005b      	lsls	r3, r3, #1
 801b2dc:	e7ee      	b.n	801b2bc <__lshift+0x1c>
 801b2de:	2300      	movs	r3, #0
 801b2e0:	f100 0114 	add.w	r1, r0, #20
 801b2e4:	f100 0210 	add.w	r2, r0, #16
 801b2e8:	4618      	mov	r0, r3
 801b2ea:	4553      	cmp	r3, sl
 801b2ec:	db33      	blt.n	801b356 <__lshift+0xb6>
 801b2ee:	6920      	ldr	r0, [r4, #16]
 801b2f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b2f4:	f104 0314 	add.w	r3, r4, #20
 801b2f8:	f019 091f 	ands.w	r9, r9, #31
 801b2fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b300:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801b304:	d02b      	beq.n	801b35e <__lshift+0xbe>
 801b306:	f1c9 0e20 	rsb	lr, r9, #32
 801b30a:	468a      	mov	sl, r1
 801b30c:	2200      	movs	r2, #0
 801b30e:	6818      	ldr	r0, [r3, #0]
 801b310:	fa00 f009 	lsl.w	r0, r0, r9
 801b314:	4310      	orrs	r0, r2
 801b316:	f84a 0b04 	str.w	r0, [sl], #4
 801b31a:	f853 2b04 	ldr.w	r2, [r3], #4
 801b31e:	459c      	cmp	ip, r3
 801b320:	fa22 f20e 	lsr.w	r2, r2, lr
 801b324:	d8f3      	bhi.n	801b30e <__lshift+0x6e>
 801b326:	ebac 0304 	sub.w	r3, ip, r4
 801b32a:	3b15      	subs	r3, #21
 801b32c:	f023 0303 	bic.w	r3, r3, #3
 801b330:	3304      	adds	r3, #4
 801b332:	f104 0015 	add.w	r0, r4, #21
 801b336:	4584      	cmp	ip, r0
 801b338:	bf38      	it	cc
 801b33a:	2304      	movcc	r3, #4
 801b33c:	50ca      	str	r2, [r1, r3]
 801b33e:	b10a      	cbz	r2, 801b344 <__lshift+0xa4>
 801b340:	f108 0602 	add.w	r6, r8, #2
 801b344:	3e01      	subs	r6, #1
 801b346:	4638      	mov	r0, r7
 801b348:	612e      	str	r6, [r5, #16]
 801b34a:	4621      	mov	r1, r4
 801b34c:	f7ff fdd8 	bl	801af00 <_Bfree>
 801b350:	4628      	mov	r0, r5
 801b352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b356:	f842 0f04 	str.w	r0, [r2, #4]!
 801b35a:	3301      	adds	r3, #1
 801b35c:	e7c5      	b.n	801b2ea <__lshift+0x4a>
 801b35e:	3904      	subs	r1, #4
 801b360:	f853 2b04 	ldr.w	r2, [r3], #4
 801b364:	f841 2f04 	str.w	r2, [r1, #4]!
 801b368:	459c      	cmp	ip, r3
 801b36a:	d8f9      	bhi.n	801b360 <__lshift+0xc0>
 801b36c:	e7ea      	b.n	801b344 <__lshift+0xa4>
 801b36e:	bf00      	nop
 801b370:	0801f31f 	.word	0x0801f31f
 801b374:	0801f330 	.word	0x0801f330

0801b378 <__mcmp>:
 801b378:	b530      	push	{r4, r5, lr}
 801b37a:	6902      	ldr	r2, [r0, #16]
 801b37c:	690c      	ldr	r4, [r1, #16]
 801b37e:	1b12      	subs	r2, r2, r4
 801b380:	d10e      	bne.n	801b3a0 <__mcmp+0x28>
 801b382:	f100 0314 	add.w	r3, r0, #20
 801b386:	3114      	adds	r1, #20
 801b388:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801b38c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801b390:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801b394:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801b398:	42a5      	cmp	r5, r4
 801b39a:	d003      	beq.n	801b3a4 <__mcmp+0x2c>
 801b39c:	d305      	bcc.n	801b3aa <__mcmp+0x32>
 801b39e:	2201      	movs	r2, #1
 801b3a0:	4610      	mov	r0, r2
 801b3a2:	bd30      	pop	{r4, r5, pc}
 801b3a4:	4283      	cmp	r3, r0
 801b3a6:	d3f3      	bcc.n	801b390 <__mcmp+0x18>
 801b3a8:	e7fa      	b.n	801b3a0 <__mcmp+0x28>
 801b3aa:	f04f 32ff 	mov.w	r2, #4294967295
 801b3ae:	e7f7      	b.n	801b3a0 <__mcmp+0x28>

0801b3b0 <__mdiff>:
 801b3b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3b4:	460c      	mov	r4, r1
 801b3b6:	4606      	mov	r6, r0
 801b3b8:	4611      	mov	r1, r2
 801b3ba:	4620      	mov	r0, r4
 801b3bc:	4690      	mov	r8, r2
 801b3be:	f7ff ffdb 	bl	801b378 <__mcmp>
 801b3c2:	1e05      	subs	r5, r0, #0
 801b3c4:	d110      	bne.n	801b3e8 <__mdiff+0x38>
 801b3c6:	4629      	mov	r1, r5
 801b3c8:	4630      	mov	r0, r6
 801b3ca:	f7ff fd59 	bl	801ae80 <_Balloc>
 801b3ce:	b930      	cbnz	r0, 801b3de <__mdiff+0x2e>
 801b3d0:	4b3a      	ldr	r3, [pc, #232]	; (801b4bc <__mdiff+0x10c>)
 801b3d2:	4602      	mov	r2, r0
 801b3d4:	f240 2137 	movw	r1, #567	; 0x237
 801b3d8:	4839      	ldr	r0, [pc, #228]	; (801b4c0 <__mdiff+0x110>)
 801b3da:	f7fe fe3f 	bl	801a05c <__assert_func>
 801b3de:	2301      	movs	r3, #1
 801b3e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801b3e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3e8:	bfa4      	itt	ge
 801b3ea:	4643      	movge	r3, r8
 801b3ec:	46a0      	movge	r8, r4
 801b3ee:	4630      	mov	r0, r6
 801b3f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801b3f4:	bfa6      	itte	ge
 801b3f6:	461c      	movge	r4, r3
 801b3f8:	2500      	movge	r5, #0
 801b3fa:	2501      	movlt	r5, #1
 801b3fc:	f7ff fd40 	bl	801ae80 <_Balloc>
 801b400:	b920      	cbnz	r0, 801b40c <__mdiff+0x5c>
 801b402:	4b2e      	ldr	r3, [pc, #184]	; (801b4bc <__mdiff+0x10c>)
 801b404:	4602      	mov	r2, r0
 801b406:	f240 2145 	movw	r1, #581	; 0x245
 801b40a:	e7e5      	b.n	801b3d8 <__mdiff+0x28>
 801b40c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801b410:	6926      	ldr	r6, [r4, #16]
 801b412:	60c5      	str	r5, [r0, #12]
 801b414:	f104 0914 	add.w	r9, r4, #20
 801b418:	f108 0514 	add.w	r5, r8, #20
 801b41c:	f100 0e14 	add.w	lr, r0, #20
 801b420:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801b424:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801b428:	f108 0210 	add.w	r2, r8, #16
 801b42c:	46f2      	mov	sl, lr
 801b42e:	2100      	movs	r1, #0
 801b430:	f859 3b04 	ldr.w	r3, [r9], #4
 801b434:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801b438:	fa11 f88b 	uxtah	r8, r1, fp
 801b43c:	b299      	uxth	r1, r3
 801b43e:	0c1b      	lsrs	r3, r3, #16
 801b440:	eba8 0801 	sub.w	r8, r8, r1
 801b444:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801b448:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801b44c:	fa1f f888 	uxth.w	r8, r8
 801b450:	1419      	asrs	r1, r3, #16
 801b452:	454e      	cmp	r6, r9
 801b454:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801b458:	f84a 3b04 	str.w	r3, [sl], #4
 801b45c:	d8e8      	bhi.n	801b430 <__mdiff+0x80>
 801b45e:	1b33      	subs	r3, r6, r4
 801b460:	3b15      	subs	r3, #21
 801b462:	f023 0303 	bic.w	r3, r3, #3
 801b466:	3304      	adds	r3, #4
 801b468:	3415      	adds	r4, #21
 801b46a:	42a6      	cmp	r6, r4
 801b46c:	bf38      	it	cc
 801b46e:	2304      	movcc	r3, #4
 801b470:	441d      	add	r5, r3
 801b472:	4473      	add	r3, lr
 801b474:	469e      	mov	lr, r3
 801b476:	462e      	mov	r6, r5
 801b478:	4566      	cmp	r6, ip
 801b47a:	d30e      	bcc.n	801b49a <__mdiff+0xea>
 801b47c:	f10c 0203 	add.w	r2, ip, #3
 801b480:	1b52      	subs	r2, r2, r5
 801b482:	f022 0203 	bic.w	r2, r2, #3
 801b486:	3d03      	subs	r5, #3
 801b488:	45ac      	cmp	ip, r5
 801b48a:	bf38      	it	cc
 801b48c:	2200      	movcc	r2, #0
 801b48e:	4413      	add	r3, r2
 801b490:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801b494:	b17a      	cbz	r2, 801b4b6 <__mdiff+0x106>
 801b496:	6107      	str	r7, [r0, #16]
 801b498:	e7a4      	b.n	801b3e4 <__mdiff+0x34>
 801b49a:	f856 8b04 	ldr.w	r8, [r6], #4
 801b49e:	fa11 f288 	uxtah	r2, r1, r8
 801b4a2:	1414      	asrs	r4, r2, #16
 801b4a4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801b4a8:	b292      	uxth	r2, r2
 801b4aa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801b4ae:	f84e 2b04 	str.w	r2, [lr], #4
 801b4b2:	1421      	asrs	r1, r4, #16
 801b4b4:	e7e0      	b.n	801b478 <__mdiff+0xc8>
 801b4b6:	3f01      	subs	r7, #1
 801b4b8:	e7ea      	b.n	801b490 <__mdiff+0xe0>
 801b4ba:	bf00      	nop
 801b4bc:	0801f31f 	.word	0x0801f31f
 801b4c0:	0801f330 	.word	0x0801f330

0801b4c4 <__d2b>:
 801b4c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b4c8:	460f      	mov	r7, r1
 801b4ca:	2101      	movs	r1, #1
 801b4cc:	ec59 8b10 	vmov	r8, r9, d0
 801b4d0:	4616      	mov	r6, r2
 801b4d2:	f7ff fcd5 	bl	801ae80 <_Balloc>
 801b4d6:	4604      	mov	r4, r0
 801b4d8:	b930      	cbnz	r0, 801b4e8 <__d2b+0x24>
 801b4da:	4602      	mov	r2, r0
 801b4dc:	4b24      	ldr	r3, [pc, #144]	; (801b570 <__d2b+0xac>)
 801b4de:	4825      	ldr	r0, [pc, #148]	; (801b574 <__d2b+0xb0>)
 801b4e0:	f240 310f 	movw	r1, #783	; 0x30f
 801b4e4:	f7fe fdba 	bl	801a05c <__assert_func>
 801b4e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801b4ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b4f0:	bb2d      	cbnz	r5, 801b53e <__d2b+0x7a>
 801b4f2:	9301      	str	r3, [sp, #4]
 801b4f4:	f1b8 0300 	subs.w	r3, r8, #0
 801b4f8:	d026      	beq.n	801b548 <__d2b+0x84>
 801b4fa:	4668      	mov	r0, sp
 801b4fc:	9300      	str	r3, [sp, #0]
 801b4fe:	f7ff fd87 	bl	801b010 <__lo0bits>
 801b502:	e9dd 1200 	ldrd	r1, r2, [sp]
 801b506:	b1e8      	cbz	r0, 801b544 <__d2b+0x80>
 801b508:	f1c0 0320 	rsb	r3, r0, #32
 801b50c:	fa02 f303 	lsl.w	r3, r2, r3
 801b510:	430b      	orrs	r3, r1
 801b512:	40c2      	lsrs	r2, r0
 801b514:	6163      	str	r3, [r4, #20]
 801b516:	9201      	str	r2, [sp, #4]
 801b518:	9b01      	ldr	r3, [sp, #4]
 801b51a:	61a3      	str	r3, [r4, #24]
 801b51c:	2b00      	cmp	r3, #0
 801b51e:	bf14      	ite	ne
 801b520:	2202      	movne	r2, #2
 801b522:	2201      	moveq	r2, #1
 801b524:	6122      	str	r2, [r4, #16]
 801b526:	b1bd      	cbz	r5, 801b558 <__d2b+0x94>
 801b528:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801b52c:	4405      	add	r5, r0
 801b52e:	603d      	str	r5, [r7, #0]
 801b530:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801b534:	6030      	str	r0, [r6, #0]
 801b536:	4620      	mov	r0, r4
 801b538:	b003      	add	sp, #12
 801b53a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b53e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801b542:	e7d6      	b.n	801b4f2 <__d2b+0x2e>
 801b544:	6161      	str	r1, [r4, #20]
 801b546:	e7e7      	b.n	801b518 <__d2b+0x54>
 801b548:	a801      	add	r0, sp, #4
 801b54a:	f7ff fd61 	bl	801b010 <__lo0bits>
 801b54e:	9b01      	ldr	r3, [sp, #4]
 801b550:	6163      	str	r3, [r4, #20]
 801b552:	3020      	adds	r0, #32
 801b554:	2201      	movs	r2, #1
 801b556:	e7e5      	b.n	801b524 <__d2b+0x60>
 801b558:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801b55c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801b560:	6038      	str	r0, [r7, #0]
 801b562:	6918      	ldr	r0, [r3, #16]
 801b564:	f7ff fd34 	bl	801afd0 <__hi0bits>
 801b568:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801b56c:	e7e2      	b.n	801b534 <__d2b+0x70>
 801b56e:	bf00      	nop
 801b570:	0801f31f 	.word	0x0801f31f
 801b574:	0801f330 	.word	0x0801f330

0801b578 <__sfputc_r>:
 801b578:	6893      	ldr	r3, [r2, #8]
 801b57a:	3b01      	subs	r3, #1
 801b57c:	2b00      	cmp	r3, #0
 801b57e:	b410      	push	{r4}
 801b580:	6093      	str	r3, [r2, #8]
 801b582:	da08      	bge.n	801b596 <__sfputc_r+0x1e>
 801b584:	6994      	ldr	r4, [r2, #24]
 801b586:	42a3      	cmp	r3, r4
 801b588:	db01      	blt.n	801b58e <__sfputc_r+0x16>
 801b58a:	290a      	cmp	r1, #10
 801b58c:	d103      	bne.n	801b596 <__sfputc_r+0x1e>
 801b58e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b592:	f7fe bc36 	b.w	8019e02 <__swbuf_r>
 801b596:	6813      	ldr	r3, [r2, #0]
 801b598:	1c58      	adds	r0, r3, #1
 801b59a:	6010      	str	r0, [r2, #0]
 801b59c:	7019      	strb	r1, [r3, #0]
 801b59e:	4608      	mov	r0, r1
 801b5a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b5a4:	4770      	bx	lr

0801b5a6 <__sfputs_r>:
 801b5a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b5a8:	4606      	mov	r6, r0
 801b5aa:	460f      	mov	r7, r1
 801b5ac:	4614      	mov	r4, r2
 801b5ae:	18d5      	adds	r5, r2, r3
 801b5b0:	42ac      	cmp	r4, r5
 801b5b2:	d101      	bne.n	801b5b8 <__sfputs_r+0x12>
 801b5b4:	2000      	movs	r0, #0
 801b5b6:	e007      	b.n	801b5c8 <__sfputs_r+0x22>
 801b5b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b5bc:	463a      	mov	r2, r7
 801b5be:	4630      	mov	r0, r6
 801b5c0:	f7ff ffda 	bl	801b578 <__sfputc_r>
 801b5c4:	1c43      	adds	r3, r0, #1
 801b5c6:	d1f3      	bne.n	801b5b0 <__sfputs_r+0xa>
 801b5c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b5cc <_vfiprintf_r>:
 801b5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5d0:	460d      	mov	r5, r1
 801b5d2:	b09d      	sub	sp, #116	; 0x74
 801b5d4:	4614      	mov	r4, r2
 801b5d6:	4698      	mov	r8, r3
 801b5d8:	4606      	mov	r6, r0
 801b5da:	b118      	cbz	r0, 801b5e4 <_vfiprintf_r+0x18>
 801b5dc:	6a03      	ldr	r3, [r0, #32]
 801b5de:	b90b      	cbnz	r3, 801b5e4 <_vfiprintf_r+0x18>
 801b5e0:	f7fe fb28 	bl	8019c34 <__sinit>
 801b5e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b5e6:	07d9      	lsls	r1, r3, #31
 801b5e8:	d405      	bmi.n	801b5f6 <_vfiprintf_r+0x2a>
 801b5ea:	89ab      	ldrh	r3, [r5, #12]
 801b5ec:	059a      	lsls	r2, r3, #22
 801b5ee:	d402      	bmi.n	801b5f6 <_vfiprintf_r+0x2a>
 801b5f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b5f2:	f7fe fd22 	bl	801a03a <__retarget_lock_acquire_recursive>
 801b5f6:	89ab      	ldrh	r3, [r5, #12]
 801b5f8:	071b      	lsls	r3, r3, #28
 801b5fa:	d501      	bpl.n	801b600 <_vfiprintf_r+0x34>
 801b5fc:	692b      	ldr	r3, [r5, #16]
 801b5fe:	b99b      	cbnz	r3, 801b628 <_vfiprintf_r+0x5c>
 801b600:	4629      	mov	r1, r5
 801b602:	4630      	mov	r0, r6
 801b604:	f7fe fc3a 	bl	8019e7c <__swsetup_r>
 801b608:	b170      	cbz	r0, 801b628 <_vfiprintf_r+0x5c>
 801b60a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b60c:	07dc      	lsls	r4, r3, #31
 801b60e:	d504      	bpl.n	801b61a <_vfiprintf_r+0x4e>
 801b610:	f04f 30ff 	mov.w	r0, #4294967295
 801b614:	b01d      	add	sp, #116	; 0x74
 801b616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b61a:	89ab      	ldrh	r3, [r5, #12]
 801b61c:	0598      	lsls	r0, r3, #22
 801b61e:	d4f7      	bmi.n	801b610 <_vfiprintf_r+0x44>
 801b620:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b622:	f7fe fd0b 	bl	801a03c <__retarget_lock_release_recursive>
 801b626:	e7f3      	b.n	801b610 <_vfiprintf_r+0x44>
 801b628:	2300      	movs	r3, #0
 801b62a:	9309      	str	r3, [sp, #36]	; 0x24
 801b62c:	2320      	movs	r3, #32
 801b62e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b632:	f8cd 800c 	str.w	r8, [sp, #12]
 801b636:	2330      	movs	r3, #48	; 0x30
 801b638:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801b7ec <_vfiprintf_r+0x220>
 801b63c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b640:	f04f 0901 	mov.w	r9, #1
 801b644:	4623      	mov	r3, r4
 801b646:	469a      	mov	sl, r3
 801b648:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b64c:	b10a      	cbz	r2, 801b652 <_vfiprintf_r+0x86>
 801b64e:	2a25      	cmp	r2, #37	; 0x25
 801b650:	d1f9      	bne.n	801b646 <_vfiprintf_r+0x7a>
 801b652:	ebba 0b04 	subs.w	fp, sl, r4
 801b656:	d00b      	beq.n	801b670 <_vfiprintf_r+0xa4>
 801b658:	465b      	mov	r3, fp
 801b65a:	4622      	mov	r2, r4
 801b65c:	4629      	mov	r1, r5
 801b65e:	4630      	mov	r0, r6
 801b660:	f7ff ffa1 	bl	801b5a6 <__sfputs_r>
 801b664:	3001      	adds	r0, #1
 801b666:	f000 80a9 	beq.w	801b7bc <_vfiprintf_r+0x1f0>
 801b66a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b66c:	445a      	add	r2, fp
 801b66e:	9209      	str	r2, [sp, #36]	; 0x24
 801b670:	f89a 3000 	ldrb.w	r3, [sl]
 801b674:	2b00      	cmp	r3, #0
 801b676:	f000 80a1 	beq.w	801b7bc <_vfiprintf_r+0x1f0>
 801b67a:	2300      	movs	r3, #0
 801b67c:	f04f 32ff 	mov.w	r2, #4294967295
 801b680:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b684:	f10a 0a01 	add.w	sl, sl, #1
 801b688:	9304      	str	r3, [sp, #16]
 801b68a:	9307      	str	r3, [sp, #28]
 801b68c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b690:	931a      	str	r3, [sp, #104]	; 0x68
 801b692:	4654      	mov	r4, sl
 801b694:	2205      	movs	r2, #5
 801b696:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b69a:	4854      	ldr	r0, [pc, #336]	; (801b7ec <_vfiprintf_r+0x220>)
 801b69c:	f7e6 fbd8 	bl	8001e50 <memchr>
 801b6a0:	9a04      	ldr	r2, [sp, #16]
 801b6a2:	b9d8      	cbnz	r0, 801b6dc <_vfiprintf_r+0x110>
 801b6a4:	06d1      	lsls	r1, r2, #27
 801b6a6:	bf44      	itt	mi
 801b6a8:	2320      	movmi	r3, #32
 801b6aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b6ae:	0713      	lsls	r3, r2, #28
 801b6b0:	bf44      	itt	mi
 801b6b2:	232b      	movmi	r3, #43	; 0x2b
 801b6b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b6b8:	f89a 3000 	ldrb.w	r3, [sl]
 801b6bc:	2b2a      	cmp	r3, #42	; 0x2a
 801b6be:	d015      	beq.n	801b6ec <_vfiprintf_r+0x120>
 801b6c0:	9a07      	ldr	r2, [sp, #28]
 801b6c2:	4654      	mov	r4, sl
 801b6c4:	2000      	movs	r0, #0
 801b6c6:	f04f 0c0a 	mov.w	ip, #10
 801b6ca:	4621      	mov	r1, r4
 801b6cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b6d0:	3b30      	subs	r3, #48	; 0x30
 801b6d2:	2b09      	cmp	r3, #9
 801b6d4:	d94d      	bls.n	801b772 <_vfiprintf_r+0x1a6>
 801b6d6:	b1b0      	cbz	r0, 801b706 <_vfiprintf_r+0x13a>
 801b6d8:	9207      	str	r2, [sp, #28]
 801b6da:	e014      	b.n	801b706 <_vfiprintf_r+0x13a>
 801b6dc:	eba0 0308 	sub.w	r3, r0, r8
 801b6e0:	fa09 f303 	lsl.w	r3, r9, r3
 801b6e4:	4313      	orrs	r3, r2
 801b6e6:	9304      	str	r3, [sp, #16]
 801b6e8:	46a2      	mov	sl, r4
 801b6ea:	e7d2      	b.n	801b692 <_vfiprintf_r+0xc6>
 801b6ec:	9b03      	ldr	r3, [sp, #12]
 801b6ee:	1d19      	adds	r1, r3, #4
 801b6f0:	681b      	ldr	r3, [r3, #0]
 801b6f2:	9103      	str	r1, [sp, #12]
 801b6f4:	2b00      	cmp	r3, #0
 801b6f6:	bfbb      	ittet	lt
 801b6f8:	425b      	neglt	r3, r3
 801b6fa:	f042 0202 	orrlt.w	r2, r2, #2
 801b6fe:	9307      	strge	r3, [sp, #28]
 801b700:	9307      	strlt	r3, [sp, #28]
 801b702:	bfb8      	it	lt
 801b704:	9204      	strlt	r2, [sp, #16]
 801b706:	7823      	ldrb	r3, [r4, #0]
 801b708:	2b2e      	cmp	r3, #46	; 0x2e
 801b70a:	d10c      	bne.n	801b726 <_vfiprintf_r+0x15a>
 801b70c:	7863      	ldrb	r3, [r4, #1]
 801b70e:	2b2a      	cmp	r3, #42	; 0x2a
 801b710:	d134      	bne.n	801b77c <_vfiprintf_r+0x1b0>
 801b712:	9b03      	ldr	r3, [sp, #12]
 801b714:	1d1a      	adds	r2, r3, #4
 801b716:	681b      	ldr	r3, [r3, #0]
 801b718:	9203      	str	r2, [sp, #12]
 801b71a:	2b00      	cmp	r3, #0
 801b71c:	bfb8      	it	lt
 801b71e:	f04f 33ff 	movlt.w	r3, #4294967295
 801b722:	3402      	adds	r4, #2
 801b724:	9305      	str	r3, [sp, #20]
 801b726:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801b7fc <_vfiprintf_r+0x230>
 801b72a:	7821      	ldrb	r1, [r4, #0]
 801b72c:	2203      	movs	r2, #3
 801b72e:	4650      	mov	r0, sl
 801b730:	f7e6 fb8e 	bl	8001e50 <memchr>
 801b734:	b138      	cbz	r0, 801b746 <_vfiprintf_r+0x17a>
 801b736:	9b04      	ldr	r3, [sp, #16]
 801b738:	eba0 000a 	sub.w	r0, r0, sl
 801b73c:	2240      	movs	r2, #64	; 0x40
 801b73e:	4082      	lsls	r2, r0
 801b740:	4313      	orrs	r3, r2
 801b742:	3401      	adds	r4, #1
 801b744:	9304      	str	r3, [sp, #16]
 801b746:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b74a:	4829      	ldr	r0, [pc, #164]	; (801b7f0 <_vfiprintf_r+0x224>)
 801b74c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b750:	2206      	movs	r2, #6
 801b752:	f7e6 fb7d 	bl	8001e50 <memchr>
 801b756:	2800      	cmp	r0, #0
 801b758:	d03f      	beq.n	801b7da <_vfiprintf_r+0x20e>
 801b75a:	4b26      	ldr	r3, [pc, #152]	; (801b7f4 <_vfiprintf_r+0x228>)
 801b75c:	bb1b      	cbnz	r3, 801b7a6 <_vfiprintf_r+0x1da>
 801b75e:	9b03      	ldr	r3, [sp, #12]
 801b760:	3307      	adds	r3, #7
 801b762:	f023 0307 	bic.w	r3, r3, #7
 801b766:	3308      	adds	r3, #8
 801b768:	9303      	str	r3, [sp, #12]
 801b76a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b76c:	443b      	add	r3, r7
 801b76e:	9309      	str	r3, [sp, #36]	; 0x24
 801b770:	e768      	b.n	801b644 <_vfiprintf_r+0x78>
 801b772:	fb0c 3202 	mla	r2, ip, r2, r3
 801b776:	460c      	mov	r4, r1
 801b778:	2001      	movs	r0, #1
 801b77a:	e7a6      	b.n	801b6ca <_vfiprintf_r+0xfe>
 801b77c:	2300      	movs	r3, #0
 801b77e:	3401      	adds	r4, #1
 801b780:	9305      	str	r3, [sp, #20]
 801b782:	4619      	mov	r1, r3
 801b784:	f04f 0c0a 	mov.w	ip, #10
 801b788:	4620      	mov	r0, r4
 801b78a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b78e:	3a30      	subs	r2, #48	; 0x30
 801b790:	2a09      	cmp	r2, #9
 801b792:	d903      	bls.n	801b79c <_vfiprintf_r+0x1d0>
 801b794:	2b00      	cmp	r3, #0
 801b796:	d0c6      	beq.n	801b726 <_vfiprintf_r+0x15a>
 801b798:	9105      	str	r1, [sp, #20]
 801b79a:	e7c4      	b.n	801b726 <_vfiprintf_r+0x15a>
 801b79c:	fb0c 2101 	mla	r1, ip, r1, r2
 801b7a0:	4604      	mov	r4, r0
 801b7a2:	2301      	movs	r3, #1
 801b7a4:	e7f0      	b.n	801b788 <_vfiprintf_r+0x1bc>
 801b7a6:	ab03      	add	r3, sp, #12
 801b7a8:	9300      	str	r3, [sp, #0]
 801b7aa:	462a      	mov	r2, r5
 801b7ac:	4b12      	ldr	r3, [pc, #72]	; (801b7f8 <_vfiprintf_r+0x22c>)
 801b7ae:	a904      	add	r1, sp, #16
 801b7b0:	4630      	mov	r0, r6
 801b7b2:	f7fd fe09 	bl	80193c8 <_printf_float>
 801b7b6:	4607      	mov	r7, r0
 801b7b8:	1c78      	adds	r0, r7, #1
 801b7ba:	d1d6      	bne.n	801b76a <_vfiprintf_r+0x19e>
 801b7bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b7be:	07d9      	lsls	r1, r3, #31
 801b7c0:	d405      	bmi.n	801b7ce <_vfiprintf_r+0x202>
 801b7c2:	89ab      	ldrh	r3, [r5, #12]
 801b7c4:	059a      	lsls	r2, r3, #22
 801b7c6:	d402      	bmi.n	801b7ce <_vfiprintf_r+0x202>
 801b7c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b7ca:	f7fe fc37 	bl	801a03c <__retarget_lock_release_recursive>
 801b7ce:	89ab      	ldrh	r3, [r5, #12]
 801b7d0:	065b      	lsls	r3, r3, #25
 801b7d2:	f53f af1d 	bmi.w	801b610 <_vfiprintf_r+0x44>
 801b7d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b7d8:	e71c      	b.n	801b614 <_vfiprintf_r+0x48>
 801b7da:	ab03      	add	r3, sp, #12
 801b7dc:	9300      	str	r3, [sp, #0]
 801b7de:	462a      	mov	r2, r5
 801b7e0:	4b05      	ldr	r3, [pc, #20]	; (801b7f8 <_vfiprintf_r+0x22c>)
 801b7e2:	a904      	add	r1, sp, #16
 801b7e4:	4630      	mov	r0, r6
 801b7e6:	f7fe f877 	bl	80198d8 <_printf_i>
 801b7ea:	e7e4      	b.n	801b7b6 <_vfiprintf_r+0x1ea>
 801b7ec:	0801f48c 	.word	0x0801f48c
 801b7f0:	0801f496 	.word	0x0801f496
 801b7f4:	080193c9 	.word	0x080193c9
 801b7f8:	0801b5a7 	.word	0x0801b5a7
 801b7fc:	0801f492 	.word	0x0801f492

0801b800 <__sflush_r>:
 801b800:	898a      	ldrh	r2, [r1, #12]
 801b802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b806:	4605      	mov	r5, r0
 801b808:	0710      	lsls	r0, r2, #28
 801b80a:	460c      	mov	r4, r1
 801b80c:	d458      	bmi.n	801b8c0 <__sflush_r+0xc0>
 801b80e:	684b      	ldr	r3, [r1, #4]
 801b810:	2b00      	cmp	r3, #0
 801b812:	dc05      	bgt.n	801b820 <__sflush_r+0x20>
 801b814:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b816:	2b00      	cmp	r3, #0
 801b818:	dc02      	bgt.n	801b820 <__sflush_r+0x20>
 801b81a:	2000      	movs	r0, #0
 801b81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b820:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b822:	2e00      	cmp	r6, #0
 801b824:	d0f9      	beq.n	801b81a <__sflush_r+0x1a>
 801b826:	2300      	movs	r3, #0
 801b828:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b82c:	682f      	ldr	r7, [r5, #0]
 801b82e:	6a21      	ldr	r1, [r4, #32]
 801b830:	602b      	str	r3, [r5, #0]
 801b832:	d032      	beq.n	801b89a <__sflush_r+0x9a>
 801b834:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b836:	89a3      	ldrh	r3, [r4, #12]
 801b838:	075a      	lsls	r2, r3, #29
 801b83a:	d505      	bpl.n	801b848 <__sflush_r+0x48>
 801b83c:	6863      	ldr	r3, [r4, #4]
 801b83e:	1ac0      	subs	r0, r0, r3
 801b840:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b842:	b10b      	cbz	r3, 801b848 <__sflush_r+0x48>
 801b844:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b846:	1ac0      	subs	r0, r0, r3
 801b848:	2300      	movs	r3, #0
 801b84a:	4602      	mov	r2, r0
 801b84c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b84e:	6a21      	ldr	r1, [r4, #32]
 801b850:	4628      	mov	r0, r5
 801b852:	47b0      	blx	r6
 801b854:	1c43      	adds	r3, r0, #1
 801b856:	89a3      	ldrh	r3, [r4, #12]
 801b858:	d106      	bne.n	801b868 <__sflush_r+0x68>
 801b85a:	6829      	ldr	r1, [r5, #0]
 801b85c:	291d      	cmp	r1, #29
 801b85e:	d82b      	bhi.n	801b8b8 <__sflush_r+0xb8>
 801b860:	4a29      	ldr	r2, [pc, #164]	; (801b908 <__sflush_r+0x108>)
 801b862:	410a      	asrs	r2, r1
 801b864:	07d6      	lsls	r6, r2, #31
 801b866:	d427      	bmi.n	801b8b8 <__sflush_r+0xb8>
 801b868:	2200      	movs	r2, #0
 801b86a:	6062      	str	r2, [r4, #4]
 801b86c:	04d9      	lsls	r1, r3, #19
 801b86e:	6922      	ldr	r2, [r4, #16]
 801b870:	6022      	str	r2, [r4, #0]
 801b872:	d504      	bpl.n	801b87e <__sflush_r+0x7e>
 801b874:	1c42      	adds	r2, r0, #1
 801b876:	d101      	bne.n	801b87c <__sflush_r+0x7c>
 801b878:	682b      	ldr	r3, [r5, #0]
 801b87a:	b903      	cbnz	r3, 801b87e <__sflush_r+0x7e>
 801b87c:	6560      	str	r0, [r4, #84]	; 0x54
 801b87e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b880:	602f      	str	r7, [r5, #0]
 801b882:	2900      	cmp	r1, #0
 801b884:	d0c9      	beq.n	801b81a <__sflush_r+0x1a>
 801b886:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b88a:	4299      	cmp	r1, r3
 801b88c:	d002      	beq.n	801b894 <__sflush_r+0x94>
 801b88e:	4628      	mov	r0, r5
 801b890:	f7ff f9f6 	bl	801ac80 <_free_r>
 801b894:	2000      	movs	r0, #0
 801b896:	6360      	str	r0, [r4, #52]	; 0x34
 801b898:	e7c0      	b.n	801b81c <__sflush_r+0x1c>
 801b89a:	2301      	movs	r3, #1
 801b89c:	4628      	mov	r0, r5
 801b89e:	47b0      	blx	r6
 801b8a0:	1c41      	adds	r1, r0, #1
 801b8a2:	d1c8      	bne.n	801b836 <__sflush_r+0x36>
 801b8a4:	682b      	ldr	r3, [r5, #0]
 801b8a6:	2b00      	cmp	r3, #0
 801b8a8:	d0c5      	beq.n	801b836 <__sflush_r+0x36>
 801b8aa:	2b1d      	cmp	r3, #29
 801b8ac:	d001      	beq.n	801b8b2 <__sflush_r+0xb2>
 801b8ae:	2b16      	cmp	r3, #22
 801b8b0:	d101      	bne.n	801b8b6 <__sflush_r+0xb6>
 801b8b2:	602f      	str	r7, [r5, #0]
 801b8b4:	e7b1      	b.n	801b81a <__sflush_r+0x1a>
 801b8b6:	89a3      	ldrh	r3, [r4, #12]
 801b8b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b8bc:	81a3      	strh	r3, [r4, #12]
 801b8be:	e7ad      	b.n	801b81c <__sflush_r+0x1c>
 801b8c0:	690f      	ldr	r7, [r1, #16]
 801b8c2:	2f00      	cmp	r7, #0
 801b8c4:	d0a9      	beq.n	801b81a <__sflush_r+0x1a>
 801b8c6:	0793      	lsls	r3, r2, #30
 801b8c8:	680e      	ldr	r6, [r1, #0]
 801b8ca:	bf08      	it	eq
 801b8cc:	694b      	ldreq	r3, [r1, #20]
 801b8ce:	600f      	str	r7, [r1, #0]
 801b8d0:	bf18      	it	ne
 801b8d2:	2300      	movne	r3, #0
 801b8d4:	eba6 0807 	sub.w	r8, r6, r7
 801b8d8:	608b      	str	r3, [r1, #8]
 801b8da:	f1b8 0f00 	cmp.w	r8, #0
 801b8de:	dd9c      	ble.n	801b81a <__sflush_r+0x1a>
 801b8e0:	6a21      	ldr	r1, [r4, #32]
 801b8e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b8e4:	4643      	mov	r3, r8
 801b8e6:	463a      	mov	r2, r7
 801b8e8:	4628      	mov	r0, r5
 801b8ea:	47b0      	blx	r6
 801b8ec:	2800      	cmp	r0, #0
 801b8ee:	dc06      	bgt.n	801b8fe <__sflush_r+0xfe>
 801b8f0:	89a3      	ldrh	r3, [r4, #12]
 801b8f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b8f6:	81a3      	strh	r3, [r4, #12]
 801b8f8:	f04f 30ff 	mov.w	r0, #4294967295
 801b8fc:	e78e      	b.n	801b81c <__sflush_r+0x1c>
 801b8fe:	4407      	add	r7, r0
 801b900:	eba8 0800 	sub.w	r8, r8, r0
 801b904:	e7e9      	b.n	801b8da <__sflush_r+0xda>
 801b906:	bf00      	nop
 801b908:	dfbffffe 	.word	0xdfbffffe

0801b90c <_fflush_r>:
 801b90c:	b538      	push	{r3, r4, r5, lr}
 801b90e:	690b      	ldr	r3, [r1, #16]
 801b910:	4605      	mov	r5, r0
 801b912:	460c      	mov	r4, r1
 801b914:	b913      	cbnz	r3, 801b91c <_fflush_r+0x10>
 801b916:	2500      	movs	r5, #0
 801b918:	4628      	mov	r0, r5
 801b91a:	bd38      	pop	{r3, r4, r5, pc}
 801b91c:	b118      	cbz	r0, 801b926 <_fflush_r+0x1a>
 801b91e:	6a03      	ldr	r3, [r0, #32]
 801b920:	b90b      	cbnz	r3, 801b926 <_fflush_r+0x1a>
 801b922:	f7fe f987 	bl	8019c34 <__sinit>
 801b926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b92a:	2b00      	cmp	r3, #0
 801b92c:	d0f3      	beq.n	801b916 <_fflush_r+0xa>
 801b92e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b930:	07d0      	lsls	r0, r2, #31
 801b932:	d404      	bmi.n	801b93e <_fflush_r+0x32>
 801b934:	0599      	lsls	r1, r3, #22
 801b936:	d402      	bmi.n	801b93e <_fflush_r+0x32>
 801b938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b93a:	f7fe fb7e 	bl	801a03a <__retarget_lock_acquire_recursive>
 801b93e:	4628      	mov	r0, r5
 801b940:	4621      	mov	r1, r4
 801b942:	f7ff ff5d 	bl	801b800 <__sflush_r>
 801b946:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b948:	07da      	lsls	r2, r3, #31
 801b94a:	4605      	mov	r5, r0
 801b94c:	d4e4      	bmi.n	801b918 <_fflush_r+0xc>
 801b94e:	89a3      	ldrh	r3, [r4, #12]
 801b950:	059b      	lsls	r3, r3, #22
 801b952:	d4e1      	bmi.n	801b918 <_fflush_r+0xc>
 801b954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b956:	f7fe fb71 	bl	801a03c <__retarget_lock_release_recursive>
 801b95a:	e7dd      	b.n	801b918 <_fflush_r+0xc>

0801b95c <fiprintf>:
 801b95c:	b40e      	push	{r1, r2, r3}
 801b95e:	b503      	push	{r0, r1, lr}
 801b960:	4601      	mov	r1, r0
 801b962:	ab03      	add	r3, sp, #12
 801b964:	4805      	ldr	r0, [pc, #20]	; (801b97c <fiprintf+0x20>)
 801b966:	f853 2b04 	ldr.w	r2, [r3], #4
 801b96a:	6800      	ldr	r0, [r0, #0]
 801b96c:	9301      	str	r3, [sp, #4]
 801b96e:	f7ff fe2d 	bl	801b5cc <_vfiprintf_r>
 801b972:	b002      	add	sp, #8
 801b974:	f85d eb04 	ldr.w	lr, [sp], #4
 801b978:	b003      	add	sp, #12
 801b97a:	4770      	bx	lr
 801b97c:	200000bc 	.word	0x200000bc

0801b980 <__swhatbuf_r>:
 801b980:	b570      	push	{r4, r5, r6, lr}
 801b982:	460c      	mov	r4, r1
 801b984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b988:	2900      	cmp	r1, #0
 801b98a:	b096      	sub	sp, #88	; 0x58
 801b98c:	4615      	mov	r5, r2
 801b98e:	461e      	mov	r6, r3
 801b990:	da0d      	bge.n	801b9ae <__swhatbuf_r+0x2e>
 801b992:	89a3      	ldrh	r3, [r4, #12]
 801b994:	f013 0f80 	tst.w	r3, #128	; 0x80
 801b998:	f04f 0100 	mov.w	r1, #0
 801b99c:	bf0c      	ite	eq
 801b99e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801b9a2:	2340      	movne	r3, #64	; 0x40
 801b9a4:	2000      	movs	r0, #0
 801b9a6:	6031      	str	r1, [r6, #0]
 801b9a8:	602b      	str	r3, [r5, #0]
 801b9aa:	b016      	add	sp, #88	; 0x58
 801b9ac:	bd70      	pop	{r4, r5, r6, pc}
 801b9ae:	466a      	mov	r2, sp
 801b9b0:	f000 f848 	bl	801ba44 <_fstat_r>
 801b9b4:	2800      	cmp	r0, #0
 801b9b6:	dbec      	blt.n	801b992 <__swhatbuf_r+0x12>
 801b9b8:	9901      	ldr	r1, [sp, #4]
 801b9ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801b9be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801b9c2:	4259      	negs	r1, r3
 801b9c4:	4159      	adcs	r1, r3
 801b9c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b9ca:	e7eb      	b.n	801b9a4 <__swhatbuf_r+0x24>

0801b9cc <__smakebuf_r>:
 801b9cc:	898b      	ldrh	r3, [r1, #12]
 801b9ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b9d0:	079d      	lsls	r5, r3, #30
 801b9d2:	4606      	mov	r6, r0
 801b9d4:	460c      	mov	r4, r1
 801b9d6:	d507      	bpl.n	801b9e8 <__smakebuf_r+0x1c>
 801b9d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b9dc:	6023      	str	r3, [r4, #0]
 801b9de:	6123      	str	r3, [r4, #16]
 801b9e0:	2301      	movs	r3, #1
 801b9e2:	6163      	str	r3, [r4, #20]
 801b9e4:	b002      	add	sp, #8
 801b9e6:	bd70      	pop	{r4, r5, r6, pc}
 801b9e8:	ab01      	add	r3, sp, #4
 801b9ea:	466a      	mov	r2, sp
 801b9ec:	f7ff ffc8 	bl	801b980 <__swhatbuf_r>
 801b9f0:	9900      	ldr	r1, [sp, #0]
 801b9f2:	4605      	mov	r5, r0
 801b9f4:	4630      	mov	r0, r6
 801b9f6:	f7ff f9b7 	bl	801ad68 <_malloc_r>
 801b9fa:	b948      	cbnz	r0, 801ba10 <__smakebuf_r+0x44>
 801b9fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ba00:	059a      	lsls	r2, r3, #22
 801ba02:	d4ef      	bmi.n	801b9e4 <__smakebuf_r+0x18>
 801ba04:	f023 0303 	bic.w	r3, r3, #3
 801ba08:	f043 0302 	orr.w	r3, r3, #2
 801ba0c:	81a3      	strh	r3, [r4, #12]
 801ba0e:	e7e3      	b.n	801b9d8 <__smakebuf_r+0xc>
 801ba10:	89a3      	ldrh	r3, [r4, #12]
 801ba12:	6020      	str	r0, [r4, #0]
 801ba14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ba18:	81a3      	strh	r3, [r4, #12]
 801ba1a:	9b00      	ldr	r3, [sp, #0]
 801ba1c:	6163      	str	r3, [r4, #20]
 801ba1e:	9b01      	ldr	r3, [sp, #4]
 801ba20:	6120      	str	r0, [r4, #16]
 801ba22:	b15b      	cbz	r3, 801ba3c <__smakebuf_r+0x70>
 801ba24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ba28:	4630      	mov	r0, r6
 801ba2a:	f000 f81d 	bl	801ba68 <_isatty_r>
 801ba2e:	b128      	cbz	r0, 801ba3c <__smakebuf_r+0x70>
 801ba30:	89a3      	ldrh	r3, [r4, #12]
 801ba32:	f023 0303 	bic.w	r3, r3, #3
 801ba36:	f043 0301 	orr.w	r3, r3, #1
 801ba3a:	81a3      	strh	r3, [r4, #12]
 801ba3c:	89a3      	ldrh	r3, [r4, #12]
 801ba3e:	431d      	orrs	r5, r3
 801ba40:	81a5      	strh	r5, [r4, #12]
 801ba42:	e7cf      	b.n	801b9e4 <__smakebuf_r+0x18>

0801ba44 <_fstat_r>:
 801ba44:	b538      	push	{r3, r4, r5, lr}
 801ba46:	4d07      	ldr	r5, [pc, #28]	; (801ba64 <_fstat_r+0x20>)
 801ba48:	2300      	movs	r3, #0
 801ba4a:	4604      	mov	r4, r0
 801ba4c:	4608      	mov	r0, r1
 801ba4e:	4611      	mov	r1, r2
 801ba50:	602b      	str	r3, [r5, #0]
 801ba52:	f7e7 ffe4 	bl	8003a1e <_fstat>
 801ba56:	1c43      	adds	r3, r0, #1
 801ba58:	d102      	bne.n	801ba60 <_fstat_r+0x1c>
 801ba5a:	682b      	ldr	r3, [r5, #0]
 801ba5c:	b103      	cbz	r3, 801ba60 <_fstat_r+0x1c>
 801ba5e:	6023      	str	r3, [r4, #0]
 801ba60:	bd38      	pop	{r3, r4, r5, pc}
 801ba62:	bf00      	nop
 801ba64:	20007370 	.word	0x20007370

0801ba68 <_isatty_r>:
 801ba68:	b538      	push	{r3, r4, r5, lr}
 801ba6a:	4d06      	ldr	r5, [pc, #24]	; (801ba84 <_isatty_r+0x1c>)
 801ba6c:	2300      	movs	r3, #0
 801ba6e:	4604      	mov	r4, r0
 801ba70:	4608      	mov	r0, r1
 801ba72:	602b      	str	r3, [r5, #0]
 801ba74:	f7e7 ffe3 	bl	8003a3e <_isatty>
 801ba78:	1c43      	adds	r3, r0, #1
 801ba7a:	d102      	bne.n	801ba82 <_isatty_r+0x1a>
 801ba7c:	682b      	ldr	r3, [r5, #0]
 801ba7e:	b103      	cbz	r3, 801ba82 <_isatty_r+0x1a>
 801ba80:	6023      	str	r3, [r4, #0]
 801ba82:	bd38      	pop	{r3, r4, r5, pc}
 801ba84:	20007370 	.word	0x20007370

0801ba88 <_sbrk_r>:
 801ba88:	b538      	push	{r3, r4, r5, lr}
 801ba8a:	4d06      	ldr	r5, [pc, #24]	; (801baa4 <_sbrk_r+0x1c>)
 801ba8c:	2300      	movs	r3, #0
 801ba8e:	4604      	mov	r4, r0
 801ba90:	4608      	mov	r0, r1
 801ba92:	602b      	str	r3, [r5, #0]
 801ba94:	f7e7 ffec 	bl	8003a70 <_sbrk>
 801ba98:	1c43      	adds	r3, r0, #1
 801ba9a:	d102      	bne.n	801baa2 <_sbrk_r+0x1a>
 801ba9c:	682b      	ldr	r3, [r5, #0]
 801ba9e:	b103      	cbz	r3, 801baa2 <_sbrk_r+0x1a>
 801baa0:	6023      	str	r3, [r4, #0]
 801baa2:	bd38      	pop	{r3, r4, r5, pc}
 801baa4:	20007370 	.word	0x20007370

0801baa8 <abort>:
 801baa8:	b508      	push	{r3, lr}
 801baaa:	2006      	movs	r0, #6
 801baac:	f000 f860 	bl	801bb70 <raise>
 801bab0:	2001      	movs	r0, #1
 801bab2:	f7e7 ff65 	bl	8003980 <_exit>

0801bab6 <_calloc_r>:
 801bab6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bab8:	fba1 2402 	umull	r2, r4, r1, r2
 801babc:	b94c      	cbnz	r4, 801bad2 <_calloc_r+0x1c>
 801babe:	4611      	mov	r1, r2
 801bac0:	9201      	str	r2, [sp, #4]
 801bac2:	f7ff f951 	bl	801ad68 <_malloc_r>
 801bac6:	9a01      	ldr	r2, [sp, #4]
 801bac8:	4605      	mov	r5, r0
 801baca:	b930      	cbnz	r0, 801bada <_calloc_r+0x24>
 801bacc:	4628      	mov	r0, r5
 801bace:	b003      	add	sp, #12
 801bad0:	bd30      	pop	{r4, r5, pc}
 801bad2:	220c      	movs	r2, #12
 801bad4:	6002      	str	r2, [r0, #0]
 801bad6:	2500      	movs	r5, #0
 801bad8:	e7f8      	b.n	801bacc <_calloc_r+0x16>
 801bada:	4621      	mov	r1, r4
 801badc:	f7fe fa36 	bl	8019f4c <memset>
 801bae0:	e7f4      	b.n	801bacc <_calloc_r+0x16>

0801bae2 <__ascii_mbtowc>:
 801bae2:	b082      	sub	sp, #8
 801bae4:	b901      	cbnz	r1, 801bae8 <__ascii_mbtowc+0x6>
 801bae6:	a901      	add	r1, sp, #4
 801bae8:	b142      	cbz	r2, 801bafc <__ascii_mbtowc+0x1a>
 801baea:	b14b      	cbz	r3, 801bb00 <__ascii_mbtowc+0x1e>
 801baec:	7813      	ldrb	r3, [r2, #0]
 801baee:	600b      	str	r3, [r1, #0]
 801baf0:	7812      	ldrb	r2, [r2, #0]
 801baf2:	1e10      	subs	r0, r2, #0
 801baf4:	bf18      	it	ne
 801baf6:	2001      	movne	r0, #1
 801baf8:	b002      	add	sp, #8
 801bafa:	4770      	bx	lr
 801bafc:	4610      	mov	r0, r2
 801bafe:	e7fb      	b.n	801baf8 <__ascii_mbtowc+0x16>
 801bb00:	f06f 0001 	mvn.w	r0, #1
 801bb04:	e7f8      	b.n	801baf8 <__ascii_mbtowc+0x16>

0801bb06 <__ascii_wctomb>:
 801bb06:	b149      	cbz	r1, 801bb1c <__ascii_wctomb+0x16>
 801bb08:	2aff      	cmp	r2, #255	; 0xff
 801bb0a:	bf85      	ittet	hi
 801bb0c:	238a      	movhi	r3, #138	; 0x8a
 801bb0e:	6003      	strhi	r3, [r0, #0]
 801bb10:	700a      	strbls	r2, [r1, #0]
 801bb12:	f04f 30ff 	movhi.w	r0, #4294967295
 801bb16:	bf98      	it	ls
 801bb18:	2001      	movls	r0, #1
 801bb1a:	4770      	bx	lr
 801bb1c:	4608      	mov	r0, r1
 801bb1e:	4770      	bx	lr

0801bb20 <_raise_r>:
 801bb20:	291f      	cmp	r1, #31
 801bb22:	b538      	push	{r3, r4, r5, lr}
 801bb24:	4604      	mov	r4, r0
 801bb26:	460d      	mov	r5, r1
 801bb28:	d904      	bls.n	801bb34 <_raise_r+0x14>
 801bb2a:	2316      	movs	r3, #22
 801bb2c:	6003      	str	r3, [r0, #0]
 801bb2e:	f04f 30ff 	mov.w	r0, #4294967295
 801bb32:	bd38      	pop	{r3, r4, r5, pc}
 801bb34:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801bb36:	b112      	cbz	r2, 801bb3e <_raise_r+0x1e>
 801bb38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801bb3c:	b94b      	cbnz	r3, 801bb52 <_raise_r+0x32>
 801bb3e:	4620      	mov	r0, r4
 801bb40:	f000 f830 	bl	801bba4 <_getpid_r>
 801bb44:	462a      	mov	r2, r5
 801bb46:	4601      	mov	r1, r0
 801bb48:	4620      	mov	r0, r4
 801bb4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bb4e:	f000 b817 	b.w	801bb80 <_kill_r>
 801bb52:	2b01      	cmp	r3, #1
 801bb54:	d00a      	beq.n	801bb6c <_raise_r+0x4c>
 801bb56:	1c59      	adds	r1, r3, #1
 801bb58:	d103      	bne.n	801bb62 <_raise_r+0x42>
 801bb5a:	2316      	movs	r3, #22
 801bb5c:	6003      	str	r3, [r0, #0]
 801bb5e:	2001      	movs	r0, #1
 801bb60:	e7e7      	b.n	801bb32 <_raise_r+0x12>
 801bb62:	2400      	movs	r4, #0
 801bb64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801bb68:	4628      	mov	r0, r5
 801bb6a:	4798      	blx	r3
 801bb6c:	2000      	movs	r0, #0
 801bb6e:	e7e0      	b.n	801bb32 <_raise_r+0x12>

0801bb70 <raise>:
 801bb70:	4b02      	ldr	r3, [pc, #8]	; (801bb7c <raise+0xc>)
 801bb72:	4601      	mov	r1, r0
 801bb74:	6818      	ldr	r0, [r3, #0]
 801bb76:	f7ff bfd3 	b.w	801bb20 <_raise_r>
 801bb7a:	bf00      	nop
 801bb7c:	200000bc 	.word	0x200000bc

0801bb80 <_kill_r>:
 801bb80:	b538      	push	{r3, r4, r5, lr}
 801bb82:	4d07      	ldr	r5, [pc, #28]	; (801bba0 <_kill_r+0x20>)
 801bb84:	2300      	movs	r3, #0
 801bb86:	4604      	mov	r4, r0
 801bb88:	4608      	mov	r0, r1
 801bb8a:	4611      	mov	r1, r2
 801bb8c:	602b      	str	r3, [r5, #0]
 801bb8e:	f7e7 fee5 	bl	800395c <_kill>
 801bb92:	1c43      	adds	r3, r0, #1
 801bb94:	d102      	bne.n	801bb9c <_kill_r+0x1c>
 801bb96:	682b      	ldr	r3, [r5, #0]
 801bb98:	b103      	cbz	r3, 801bb9c <_kill_r+0x1c>
 801bb9a:	6023      	str	r3, [r4, #0]
 801bb9c:	bd38      	pop	{r3, r4, r5, pc}
 801bb9e:	bf00      	nop
 801bba0:	20007370 	.word	0x20007370

0801bba4 <_getpid_r>:
 801bba4:	f7e7 bed2 	b.w	800394c <_getpid>

0801bba8 <_init>:
 801bba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bbaa:	bf00      	nop
 801bbac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bbae:	bc08      	pop	{r3}
 801bbb0:	469e      	mov	lr, r3
 801bbb2:	4770      	bx	lr

0801bbb4 <_fini>:
 801bbb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bbb6:	bf00      	nop
 801bbb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bbba:	bc08      	pop	{r3}
 801bbbc:	469e      	mov	lr, r3
 801bbbe:	4770      	bx	lr

0801bbc0 <__init_synthesiser_veneer>:
 801bbc0:	f85f f000 	ldr.w	pc, [pc]	; 801bbc4 <__init_synthesiser_veneer+0x4>
 801bbc4:	00000881 	.word	0x00000881

0801bbc8 <__laser_update_veneer>:
 801bbc8:	f85f f000 	ldr.w	pc, [pc]	; 801bbcc <__laser_update_veneer+0x4>
 801bbcc:	0000014d 	.word	0x0000014d

0801bbd0 <__MW_update_veneer>:
 801bbd0:	f85f f000 	ldr.w	pc, [pc]	; 801bbd4 <__MW_update_veneer+0x4>
 801bbd4:	00001525 	.word	0x00001525

0801bbd8 <__timer_delay_veneer>:
 801bbd8:	f85f f000 	ldr.w	pc, [pc]	; 801bbdc <__timer_delay_veneer+0x4>
 801bbdc:	00001b0d 	.word	0x00001b0d

0801bbe0 <__measure_POP_cycle_time_veneer>:
 801bbe0:	f85f f000 	ldr.w	pc, [pc]	; 801bbe4 <__measure_POP_cycle_time_veneer+0x4>
 801bbe4:	00000641 	.word	0x00000641

0801bbe8 <__calc_fixed_time_MW_sweep_veneer>:
 801bbe8:	f85f f000 	ldr.w	pc, [pc]	; 801bbec <__calc_fixed_time_MW_sweep_veneer+0x4>
 801bbec:	00000e69 	.word	0x00000e69

0801bbf0 <__start_laser_ramp_veneer>:
 801bbf0:	f85f f000 	ldr.w	pc, [pc]	; 801bbf4 <__start_laser_ramp_veneer+0x4>
 801bbf4:	00000081 	.word	0x00000081
