
atomic_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .itcm         00000918  00000000  08000298  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c2e0  08000bb0  08000bb0  00020bb0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .user_flash   00000000  08100000  08100000  000302cc  2**0
                  CONTENTS
  4 .rodata       000008ac  0800ce90  0800ce90  0002ce90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  0800d73c  0800d73c  0002d73c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  0800d744  0800d744  0002d744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d748  0800d748  0002d748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800d74c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  2000020c  0800d958  0003020c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  2000026c  0800d9b8  0003026c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000384  200002cc  0800da18  000302cc  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000650  0800da18  00030650  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000302cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   000248db  00000000  00000000  000302fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000345d  00000000  00000000  00054bd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a10  00000000  00000000  00058038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000018d8  00000000  00000000  00059a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003b817  00000000  00000000  0005b320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001eb58  00000000  00000000  00096b37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00182f28  00000000  00000000  000b568f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  002385b7  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008054  00000000  00000000  00238608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .itcm:

00000000 <start_timer>:
	HAL_GPIO_WritePin(ATT_8_GPIO_Port, ATT_8_Pin, a.ATT_8DB);
	HAL_GPIO_WritePin(ATT_16_GPIO_Port, ATT_16_Pin, a.ATT_16DB);
}
#endif //ATTENUATOR_CODE

uint32_t start_timer(TIM_TypeDef * timer) {
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
   8:	687b      	ldr	r3, [r7, #4]
   a:	681b      	ldr	r3, [r3, #0]
   c:	f023 0201 	bic.w	r2, r3, #1
  10:	687b      	ldr	r3, [r7, #4]
  12:	601a      	str	r2, [r3, #0]
	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
  14:	687b      	ldr	r3, [r7, #4]
  16:	695b      	ldr	r3, [r3, #20]
  18:	f043 0201 	orr.w	r2, r3, #1
  1c:	687b      	ldr	r3, [r7, #4]
  1e:	615a      	str	r2, [r3, #20]
	timer->CR1 |= TIM_CR1_CEN;
  20:	687b      	ldr	r3, [r7, #4]
  22:	681b      	ldr	r3, [r3, #0]
  24:	f043 0201 	orr.w	r2, r3, #1
  28:	687b      	ldr	r3, [r7, #4]
  2a:	601a      	str	r2, [r3, #0]
	return timer->CNT;
  2c:	687b      	ldr	r3, [r7, #4]
  2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24

}
  30:	4618      	mov	r0, r3
  32:	370c      	adds	r7, #12
  34:	46bd      	mov	sp, r7
  36:	f85d 7b04 	ldr.w	r7, [sp], #4
  3a:	4770      	bx	lr

0000003c <stop_timer>:

uint32_t stop_timer(TIM_TypeDef *timer) {
  3c:	b480      	push	{r7}
  3e:	b083      	sub	sp, #12
  40:	af00      	add	r7, sp, #0
  42:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
  44:	687b      	ldr	r3, [r7, #4]
  46:	681b      	ldr	r3, [r3, #0]
  48:	f023 0201 	bic.w	r2, r3, #1
  4c:	687b      	ldr	r3, [r7, #4]
  4e:	601a      	str	r2, [r3, #0]
	return timer->CNT;
  50:	687b      	ldr	r3, [r7, #4]
  52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
  54:	4618      	mov	r0, r3
  56:	370c      	adds	r7, #12
  58:	46bd      	mov	sp, r7
  5a:	f85d 7b04 	ldr.w	r7, [sp], #4
  5e:	4770      	bx	lr

00000060 <timer_delay>:

void timer_delay(TIM_TypeDef *timer, const uint32_t delay_count){
  60:	b480      	push	{r7}
  62:	b085      	sub	sp, #20
  64:	af00      	add	r7, sp, #0
  66:	6078      	str	r0, [r7, #4]
  68:	6039      	str	r1, [r7, #0]

	timer->CR1 &= ~(TIM_CR1_CEN); // Disable the timer
  6a:	687b      	ldr	r3, [r7, #4]
  6c:	681b      	ldr	r3, [r3, #0]
  6e:	f023 0201 	bic.w	r2, r3, #1
  72:	687b      	ldr	r3, [r7, #4]
  74:	601a      	str	r2, [r3, #0]
	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
  76:	687b      	ldr	r3, [r7, #4]
  78:	695b      	ldr	r3, [r3, #20]
  7a:	f043 0201 	orr.w	r2, r3, #1
  7e:	687b      	ldr	r3, [r7, #4]
  80:	615a      	str	r2, [r3, #20]
	timer->CR1 |= TIM_CR1_CEN; // Enable the timer
  82:	687b      	ldr	r3, [r7, #4]
  84:	681b      	ldr	r3, [r3, #0]
  86:	f043 0201 	orr.w	r2, r3, #1
  8a:	687b      	ldr	r3, [r7, #4]
  8c:	601a      	str	r2, [r3, #0]
	uint32_t start = timer->CNT; // Get the start value of the timer
  8e:	687b      	ldr	r3, [r7, #4]
  90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  92:	60fb      	str	r3, [r7, #12]

	/* Note that we don't consider overflow, if the timer is clocked at 1 MHz
	 * a 16 bit counter will take approximately 65 ms to overflow. */

	while((timer->CNT - start) < delay_count){} // Loop until delay_us has expired
  94:	bf00      	nop
  96:	687b      	ldr	r3, [r7, #4]
  98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  9a:	68fb      	ldr	r3, [r7, #12]
  9c:	1ad3      	subs	r3, r2, r3
  9e:	683a      	ldr	r2, [r7, #0]
  a0:	429a      	cmp	r2, r3
  a2:	d8f8      	bhi.n	96 <timer_delay+0x36>
	timer->CR1 &= ~(TIM_CR1_CEN); // Disable the timer
  a4:	687b      	ldr	r3, [r7, #4]
  a6:	681b      	ldr	r3, [r3, #0]
  a8:	f023 0201 	bic.w	r2, r3, #1
  ac:	687b      	ldr	r3, [r7, #4]
  ae:	601a      	str	r2, [r3, #0]

}
  b0:	bf00      	nop
  b2:	3714      	adds	r7, #20
  b4:	46bd      	mov	sp, r7
  b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  ba:	4770      	bx	lr

000000bc <start_pop>:

	printf("POP cycle stopped!\r\n");

}

static void start_pop() {
  bc:	b580      	push	{r7, lr}
  be:	af00      	add	r7, sp, #0

	/* Timer A is the LASER enable, Timer E is the microwave pulse */
	if (HAL_HRTIM_WaveformOutputStart(&hhrtim,
  c0:	f240 1103 	movw	r1, #259	; 0x103
  c4:	4821      	ldr	r0, [pc, #132]	; (14c <start_pop+0x90>)
  c6:	f000 fc0f 	bl	8e8 <__HAL_HRTIM_WaveformOutputStart_veneer>
  ca:	4603      	mov	r3, r0
  cc:	2b00      	cmp	r3, #0
  ce:	d004      	beq.n	da <start_pop+0x1e>
	HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1) != HAL_OK) {
		printf("Failed to start POP!\r\n");
  d0:	481f      	ldr	r0, [pc, #124]	; (150 <start_pop+0x94>)
  d2:	f000 fc0d 	bl	8f0 <__puts_veneer>
		Error_Handler();
  d6:	f000 fc0f 	bl	8f8 <__Error_Handler_veneer>
	}

#ifdef POP_START_PULSE

	if (HAL_HRTIM_WaveformSetOutputLevel(&hhrtim,
  da:	2302      	movs	r3, #2
  dc:	2202      	movs	r2, #2
  de:	2100      	movs	r1, #0
  e0:	481a      	ldr	r0, [pc, #104]	; (14c <start_pop+0x90>)
  e2:	f000 fbf1 	bl	8c8 <__HAL_HRTIM_WaveformSetOutputLevel_veneer>
  e6:	4603      	mov	r3, r0
  e8:	2b00      	cmp	r3, #0
  ea:	d004      	beq.n	f6 <start_pop+0x3a>
	HRTIM_TIMERINDEX_TIMER_A,
	HRTIM_OUTPUT_TA2, HRTIM_OUTPUTLEVEL_INACTIVE) != HAL_OK) {
		printf("POP failure point C!\r\n");
  ec:	4819      	ldr	r0, [pc, #100]	; (154 <start_pop+0x98>)
  ee:	f000 fbff 	bl	8f0 <__puts_veneer>
		Error_Handler();
  f2:	f000 fc01 	bl	8f8 <__Error_Handler_veneer>
	}

	timer_delay(SLOW_TIMER, 1000);
  f6:	4b18      	ldr	r3, [pc, #96]	; (158 <start_pop+0x9c>)
  f8:	681b      	ldr	r3, [r3, #0]
  fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  fe:	4618      	mov	r0, r3
 100:	f7ff ffae 	bl	60 <timer_delay>

	if (HAL_HRTIM_WaveformSetOutputLevel(&hhrtim,
 104:	2301      	movs	r3, #1
 106:	2202      	movs	r2, #2
 108:	2100      	movs	r1, #0
 10a:	4810      	ldr	r0, [pc, #64]	; (14c <start_pop+0x90>)
 10c:	f000 fbdc 	bl	8c8 <__HAL_HRTIM_WaveformSetOutputLevel_veneer>
 110:	4603      	mov	r3, r0
 112:	2b00      	cmp	r3, #0
 114:	d004      	beq.n	120 <start_pop+0x64>
	HRTIM_TIMERINDEX_TIMER_A,
	HRTIM_OUTPUT_TA2, HRTIM_OUTPUTLEVEL_ACTIVE) != HAL_OK) {
		printf("POP failure point D!\r\n");
 116:	4811      	ldr	r0, [pc, #68]	; (15c <start_pop+0xa0>)
 118:	f000 fbea 	bl	8f0 <__puts_veneer>
		Error_Handler();
 11c:	f000 fbec 	bl	8f8 <__Error_Handler_veneer>
	}

#endif

	if (HAL_HRTIM_WaveformCounterStart_IT(&hhrtim,
 120:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 124:	4809      	ldr	r0, [pc, #36]	; (14c <start_pop+0x90>)
 126:	f000 fbd3 	bl	8d0 <__HAL_HRTIM_WaveformCountStart_IT_veneer>
 12a:	4603      	mov	r3, r0
 12c:	2b00      	cmp	r3, #0
 12e:	d004      	beq.n	13a <start_pop+0x7e>
	HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E) != HAL_OK) {
		printf("POP failure point E!\r\n");
 130:	480b      	ldr	r0, [pc, #44]	; (160 <start_pop+0xa4>)
 132:	f000 fbdd 	bl	8f0 <__puts_veneer>
		Error_Handler();
 136:	f000 fbdf 	bl	8f8 <__Error_Handler_veneer>
	}

	pop_running = true;
 13a:	4b0a      	ldr	r3, [pc, #40]	; (164 <start_pop+0xa8>)
 13c:	2201      	movs	r2, #1
 13e:	701a      	strb	r2, [r3, #0]

	printf("POP cycle running!\r\n");
 140:	4809      	ldr	r0, [pc, #36]	; (168 <start_pop+0xac>)
 142:	f000 fbd5 	bl	8f0 <__puts_veneer>

}
 146:	bf00      	nop
 148:	bd80      	pop	{r7, pc}
 14a:	bf00      	nop
 14c:	200003e4 	.word	0x200003e4
 150:	0800ce90 	.word	0x0800ce90
 154:	0800cea8 	.word	0x0800cea8
 158:	20000000 	.word	0x20000000
 15c:	0800cec0 	.word	0x0800cec0
 160:	0800ced8 	.word	0x0800ced8
 164:	20000624 	.word	0x20000624
 168:	0800cef0 	.word	0x0800cef0

0000016c <stop_pop>:
static void stop_pop() {
 16c:	b580      	push	{r7, lr}
 16e:	af00      	add	r7, sp, #0
	if (HAL_HRTIM_WaveformOutputStop(&hhrtim,
 170:	f240 1103 	movw	r1, #259	; 0x103
 174:	4813      	ldr	r0, [pc, #76]	; (1c4 <stop_pop+0x58>)
 176:	f000 fbc7 	bl	908 <__HAL_HRTIM_WaveformOutputStop_veneer>
 17a:	4603      	mov	r3, r0
 17c:	2b00      	cmp	r3, #0
 17e:	d004      	beq.n	18a <stop_pop+0x1e>
		printf("POP failure point A!\r\n");
 180:	4811      	ldr	r0, [pc, #68]	; (1c8 <stop_pop+0x5c>)
 182:	f000 fbb5 	bl	8f0 <__puts_veneer>
		Error_Handler();
 186:	f000 fbb7 	bl	8f8 <__Error_Handler_veneer>
	if (HAL_HRTIM_WaveformCounterStop_IT(&hhrtim,
 18a:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 18e:	480d      	ldr	r0, [pc, #52]	; (1c4 <stop_pop+0x58>)
 190:	f000 fbb6 	bl	900 <__HAL_HRTIM_WaveformCountStop_IT_veneer>
 194:	4603      	mov	r3, r0
 196:	2b00      	cmp	r3, #0
 198:	d004      	beq.n	1a4 <stop_pop+0x38>
		printf("POP failure point B!\r\n");
 19a:	480c      	ldr	r0, [pc, #48]	; (1cc <stop_pop+0x60>)
 19c:	f000 fba8 	bl	8f0 <__puts_veneer>
		Error_Handler();
 1a0:	f000 fbaa 	bl	8f8 <__Error_Handler_veneer>
	pop_cycle_count = 0;
 1a4:	4b0a      	ldr	r3, [pc, #40]	; (1d0 <stop_pop+0x64>)
 1a6:	2200      	movs	r2, #0
 1a8:	601a      	str	r2, [r3, #0]
	pop_running = false;
 1aa:	4b0a      	ldr	r3, [pc, #40]	; (1d4 <stop_pop+0x68>)
 1ac:	2200      	movs	r2, #0
 1ae:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0); //turn off amber LED
 1b0:	2200      	movs	r2, #0
 1b2:	2102      	movs	r1, #2
 1b4:	4808      	ldr	r0, [pc, #32]	; (1d8 <stop_pop+0x6c>)
 1b6:	f000 fb83 	bl	8c0 <__HAL_GPIO_WritePin_veneer>
	printf("POP cycle stopped!\r\n");
 1ba:	4808      	ldr	r0, [pc, #32]	; (1dc <stop_pop+0x70>)
 1bc:	f000 fb98 	bl	8f0 <__puts_veneer>
}
 1c0:	bf00      	nop
 1c2:	bd80      	pop	{r7, pc}
 1c4:	200003e4 	.word	0x200003e4
 1c8:	0800cf04 	.word	0x0800cf04
 1cc:	0800cf1c 	.word	0x0800cf1c
 1d0:	20000628 	.word	0x20000628
 1d4:	20000624 	.word	0x20000624
 1d8:	58021000 	.word	0x58021000
 1dc:	0800cf34 	.word	0x0800cf34

000001e0 <set_aom_atten>:
static void set_aom_atten(const struct AttenuatorSettings a) {
 1e0:	b580      	push	{r7, lr}
 1e2:	b082      	sub	sp, #8
 1e4:	af00      	add	r7, sp, #0
 1e6:	7138      	strb	r0, [r7, #4]
	HAL_GPIO_WritePin(ATT_LE_GPIO_Port, ATT_LE_Pin, GPIO_PIN_SET);
 1e8:	2201      	movs	r2, #1
 1ea:	2180      	movs	r1, #128	; 0x80
 1ec:	4822      	ldr	r0, [pc, #136]	; (278 <_Min_Heap_Size+0x78>)
 1ee:	f000 fb67 	bl	8c0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_025_GPIO_Port, ATT_025_Pin, a.ATT_0DB25);
 1f2:	793b      	ldrb	r3, [r7, #4]
 1f4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 1f8:	b2db      	uxtb	r3, r3
 1fa:	461a      	mov	r2, r3
 1fc:	2140      	movs	r1, #64	; 0x40
 1fe:	481e      	ldr	r0, [pc, #120]	; (278 <_Min_Heap_Size+0x78>)
 200:	f000 fb5e 	bl	8c0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_05_GPIO_Port, ATT_05_Pin, a.ATT_0DB5);
 204:	793b      	ldrb	r3, [r7, #4]
 206:	f3c3 0340 	ubfx	r3, r3, #1, #1
 20a:	b2db      	uxtb	r3, r3
 20c:	461a      	mov	r2, r3
 20e:	2120      	movs	r1, #32
 210:	4819      	ldr	r0, [pc, #100]	; (278 <_Min_Heap_Size+0x78>)
 212:	f000 fb55 	bl	8c0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_1_GPIO_Port, ATT_1_Pin, a.ATT_1DB);
 216:	793b      	ldrb	r3, [r7, #4]
 218:	f3c3 0380 	ubfx	r3, r3, #2, #1
 21c:	b2db      	uxtb	r3, r3
 21e:	461a      	mov	r2, r3
 220:	2110      	movs	r1, #16
 222:	4815      	ldr	r0, [pc, #84]	; (278 <_Min_Heap_Size+0x78>)
 224:	f000 fb4c 	bl	8c0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_2_GPIO_Port, ATT_2_Pin, a.ATT_2DB);
 228:	793b      	ldrb	r3, [r7, #4]
 22a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 22e:	b2db      	uxtb	r3, r3
 230:	461a      	mov	r2, r3
 232:	2108      	movs	r1, #8
 234:	4810      	ldr	r0, [pc, #64]	; (278 <_Min_Heap_Size+0x78>)
 236:	f000 fb43 	bl	8c0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_4_GPIO_Port, ATT_4_Pin, a.ATT_4DB);
 23a:	793b      	ldrb	r3, [r7, #4]
 23c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 240:	b2db      	uxtb	r3, r3
 242:	461a      	mov	r2, r3
 244:	2104      	movs	r1, #4
 246:	480d      	ldr	r0, [pc, #52]	; (27c <_Min_Heap_Size+0x7c>)
 248:	f000 fb3a 	bl	8c0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_8_GPIO_Port, ATT_8_Pin, a.ATT_8DB);
 24c:	793b      	ldrb	r3, [r7, #4]
 24e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 252:	b2db      	uxtb	r3, r3
 254:	461a      	mov	r2, r3
 256:	2110      	movs	r1, #16
 258:	4808      	ldr	r0, [pc, #32]	; (27c <_Min_Heap_Size+0x7c>)
 25a:	f000 fb31 	bl	8c0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_16_GPIO_Port, ATT_16_Pin, a.ATT_16DB);
 25e:	793b      	ldrb	r3, [r7, #4]
 260:	f3c3 1380 	ubfx	r3, r3, #6, #1
 264:	b2db      	uxtb	r3, r3
 266:	461a      	mov	r2, r3
 268:	2120      	movs	r1, #32
 26a:	4804      	ldr	r0, [pc, #16]	; (27c <_Min_Heap_Size+0x7c>)
 26c:	f000 fb28 	bl	8c0 <__HAL_GPIO_WritePin_veneer>
}
 270:	bf00      	nop
 272:	3708      	adds	r7, #8
 274:	46bd      	mov	sp, r7
 276:	bd80      	pop	{r7, pc}
 278:	58020c00 	.word	0x58020c00
 27c:	58021000 	.word	0x58021000

00000280 <synth_writereg>:
extern uint32_t start_timer(TIM_TypeDef * timer);
extern uint32_t stop_timer(TIM_TypeDef * timer);
extern void timer_delay(TIM_TypeDef *timer, uint32_t delay_us);
extern void Error_Handler(void);

static uint32_t synth_writereg(const uint32_t data, const uint32_t reg_address, const uint32_t chip_address, const bool verify) {
 280:	b580      	push	{r7, lr}
 282:	b08a      	sub	sp, #40	; 0x28
 284:	af00      	add	r7, sp, #0
 286:	60f8      	str	r0, [r7, #12]
 288:	60b9      	str	r1, [r7, #8]
 28a:	607a      	str	r2, [r7, #4]
 28c:	70fb      	strb	r3, [r7, #3]

	uint32_t read_data = 0;
 28e:	2300      	movs	r3, #0
 290:	627b      	str	r3, [r7, #36]	; 0x24
	const uint32_t write_data = (data << 8) | (reg_address << 3) | chip_address; // This is what we will write, 32 bits in total.
 292:	68fb      	ldr	r3, [r7, #12]
 294:	021a      	lsls	r2, r3, #8
 296:	68bb      	ldr	r3, [r7, #8]
 298:	00db      	lsls	r3, r3, #3
 29a:	4313      	orrs	r3, r2
 29c:	687a      	ldr	r2, [r7, #4]
 29e:	4313      	orrs	r3, r2
 2a0:	61fb      	str	r3, [r7, #28]
#ifdef SPI_DEBUG
	printf("SPI BYTES WRITTEN: 0x%X \r\n", write_data);
#endif
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
 2a2:	2200      	movs	r2, #0
 2a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 2a8:	4830      	ldr	r0, [pc, #192]	; (36c <synth_writereg+0xec>)
 2aa:	f000 fb09 	bl	8c0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 0); // Take SEN low to indicate we are sending data
 2ae:	2200      	movs	r2, #0
 2b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 2b4:	482d      	ldr	r0, [pc, #180]	; (36c <synth_writereg+0xec>)
 2b6:	f000 fb03 	bl	8c0 <__HAL_GPIO_WritePin_veneer>

	/* Clock in the data */
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
 2ba:	2300      	movs	r3, #0
 2bc:	623b      	str	r3, [r7, #32]
 2be:	e036      	b.n	32e <synth_writereg+0xae>

		/* Data written on the rising edge */
		uint32_t bit = (SYNTH_SPI_BITS - 1 - i);
 2c0:	2220      	movs	r2, #32
 2c2:	6a3b      	ldr	r3, [r7, #32]
 2c4:	1ad3      	subs	r3, r2, r3
 2c6:	3b01      	subs	r3, #1
 2c8:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(MOSI_GPIO_Port, MOSI_Pin, !!(write_data & (1 << bit)));
 2ca:	2201      	movs	r2, #1
 2cc:	697b      	ldr	r3, [r7, #20]
 2ce:	fa02 f303 	lsl.w	r3, r2, r3
 2d2:	461a      	mov	r2, r3
 2d4:	69fb      	ldr	r3, [r7, #28]
 2d6:	4013      	ands	r3, r2
 2d8:	2b00      	cmp	r3, #0
 2da:	bf14      	ite	ne
 2dc:	2301      	movne	r3, #1
 2de:	2300      	moveq	r3, #0
 2e0:	b2db      	uxtb	r3, r3
 2e2:	461a      	mov	r2, r3
 2e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 2e8:	4820      	ldr	r0, [pc, #128]	; (36c <synth_writereg+0xec>)
 2ea:	f000 fae9 	bl	8c0 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 1);
 2ee:	2201      	movs	r2, #1
 2f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 2f4:	481d      	ldr	r0, [pc, #116]	; (36c <synth_writereg+0xec>)
 2f6:	f000 fae3 	bl	8c0 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
 2fa:	2200      	movs	r2, #0
 2fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 300:	481a      	ldr	r0, [pc, #104]	; (36c <synth_writereg+0xec>)
 302:	f000 fadd 	bl	8c0 <__HAL_GPIO_WritePin_veneer>

		/* Data read on the falling edge */
		read_data = read_data
				| (HAL_GPIO_ReadPin(MISO_GPIO_Port, MISO_Pin)
 306:	f44f 6180 	mov.w	r1, #1024	; 0x400
 30a:	4818      	ldr	r0, [pc, #96]	; (36c <synth_writereg+0xec>)
 30c:	f000 fb00 	bl	910 <__HAL_GPIO_ReadPin_veneer>
 310:	4603      	mov	r3, r0
 312:	4619      	mov	r1, r3
						<< (SYNTH_SPI_BITS - 1 - i));
 314:	2220      	movs	r2, #32
 316:	6a3b      	ldr	r3, [r7, #32]
 318:	1ad3      	subs	r3, r2, r3
 31a:	3b01      	subs	r3, #1
 31c:	fa01 f303 	lsl.w	r3, r1, r3
 320:	461a      	mov	r2, r3
		read_data = read_data
 322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 324:	4313      	orrs	r3, r2
 326:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
 328:	6a3b      	ldr	r3, [r7, #32]
 32a:	3301      	adds	r3, #1
 32c:	623b      	str	r3, [r7, #32]
 32e:	2220      	movs	r2, #32
 330:	6a3b      	ldr	r3, [r7, #32]
 332:	4293      	cmp	r3, r2
 334:	d3c4      	bcc.n	2c0 <synth_writereg+0x40>
	}

	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1); // Assert the SEN line to register the transmitted data
 336:	2201      	movs	r2, #1
 338:	f44f 6100 	mov.w	r1, #2048	; 0x800
 33c:	480b      	ldr	r0, [pc, #44]	; (36c <synth_writereg+0xec>)
 33e:	f000 fabf 	bl	8c0 <__HAL_GPIO_WritePin_veneer>

	if (verify) {
 342:	78fb      	ldrb	r3, [r7, #3]
 344:	2b00      	cmp	r3, #0
 346:	d00c      	beq.n	362 <synth_writereg+0xe2>
		const uint32_t verify_data = synth_readreg(reg_address); // Data returned on the second cycle
 348:	68b8      	ldr	r0, [r7, #8]
 34a:	f000 f813 	bl	374 <synth_readreg>
 34e:	61b8      	str	r0, [r7, #24]
		if (verify_data != data) {
 350:	69ba      	ldr	r2, [r7, #24]
 352:	68fb      	ldr	r3, [r7, #12]
 354:	429a      	cmp	r2, r3
 356:	d004      	beq.n	362 <synth_writereg+0xe2>
			printf("SPI transmission error!\n");
 358:	4805      	ldr	r0, [pc, #20]	; (370 <synth_writereg+0xf0>)
 35a:	f000 fac9 	bl	8f0 <__puts_veneer>
			Error_Handler(); // We enter an infinite loop here
 35e:	f000 facb 	bl	8f8 <__Error_Handler_veneer>
		}
	}

	return read_data;
 362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 364:	4618      	mov	r0, r3
 366:	3728      	adds	r7, #40	; 0x28
 368:	46bd      	mov	sp, r7
 36a:	bd80      	pop	{r7, pc}
 36c:	58020800 	.word	0x58020800
 370:	0800d140 	.word	0x0800d140

00000374 <synth_readreg>:

static uint32_t synth_readreg(const uint32_t reg_address){
 374:	b580      	push	{r7, lr}
 376:	b084      	sub	sp, #16
 378:	af00      	add	r7, sp, #0
 37a:	6078      	str	r0, [r7, #4]

    synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY); // First cycle to send the read address
 37c:	2300      	movs	r3, #0
 37e:	2200      	movs	r2, #0
 380:	2100      	movs	r1, #0
 382:	6878      	ldr	r0, [r7, #4]
 384:	f7ff ff7c 	bl	280 <synth_writereg>
    const uint32_t read_data = synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY);  // Data returned on the second cycle
 388:	2300      	movs	r3, #0
 38a:	2200      	movs	r2, #0
 38c:	2100      	movs	r1, #0
 38e:	6878      	ldr	r0, [r7, #4]
 390:	f7ff ff76 	bl	280 <synth_writereg>
 394:	60f8      	str	r0, [r7, #12]

    return (read_data >> 8); // We only care about the first 24 bits returned.
 396:	68fb      	ldr	r3, [r7, #12]
 398:	0a1b      	lsrs	r3, r3, #8

}
 39a:	4618      	mov	r0, r3
 39c:	3710      	adds	r7, #16
 39e:	46bd      	mov	sp, r7
 3a0:	bd80      	pop	{r7, pc}

000003a2 <init_synthesiser>:

uint32_t init_synthesiser() {
 3a2:	b580      	push	{r7, lr}
 3a4:	b082      	sub	sp, #8
 3a6:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // Turn off the amber lock LED
 3a8:	2200      	movs	r2, #0
 3aa:	2102      	movs	r1, #2
 3ac:	485a      	ldr	r0, [pc, #360]	; (518 <_Min_Stack_Size+0x118>)
 3ae:	f000 fa87 	bl	8c0 <__HAL_GPIO_WritePin_veneer>

	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
 3b2:	2200      	movs	r2, #0
 3b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 3b8:	4858      	ldr	r0, [pc, #352]	; (51c <_Min_Stack_Size+0x11c>)
 3ba:	f000 fa81 	bl	8c0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1);
 3be:	2201      	movs	r2, #1
 3c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 3c4:	4855      	ldr	r0, [pc, #340]	; (51c <_Min_Stack_Size+0x11c>)
 3c6:	f000 fa7b 	bl	8c0 <__HAL_GPIO_WritePin_veneer>

	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 1); // Enable the main regulator.
 3ca:	2201      	movs	r2, #1
 3cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 3d0:	4852      	ldr	r0, [pc, #328]	; (51c <_Min_Stack_Size+0x11c>)
 3d2:	f000 fa75 	bl	8c0 <__HAL_GPIO_WritePin_veneer>

	HAL_Delay(100); // Wait 100 ms for the supply to stabilise.
 3d6:	2064      	movs	r0, #100	; 0x64
 3d8:	f000 fa6e 	bl	8b8 <__HAL_Delay_veneer>

	synth_writereg(0x1UL << 5, OPEN_MODE_READ_ADDRESS, 0x0, DONT_VERIFY); // Soft reset.
 3dc:	2300      	movs	r3, #0
 3de:	2200      	movs	r2, #0
 3e0:	2100      	movs	r1, #0
 3e2:	2020      	movs	r0, #32
 3e4:	f7ff ff4c 	bl	280 <synth_writereg>
	synth_writereg(0x41BFFF, ANALOG_EN_REGISTER, 0x0, VERIFY); // Set the SDO output level to 3.3 Volts
 3e8:	2301      	movs	r3, #1
 3ea:	2200      	movs	r2, #0
 3ec:	2108      	movs	r1, #8
 3ee:	484c      	ldr	r0, [pc, #304]	; (520 <_Min_Stack_Size+0x120>)
 3f0:	f7ff ff46 	bl	280 <synth_writereg>

	uint32_t read_data = synth_readreg(ID_REGISTER); // Read the ID register to check the chip is communicating
 3f4:	2000      	movs	r0, #0
 3f6:	f7ff ffbd 	bl	374 <synth_readreg>
 3fa:	6078      	str	r0, [r7, #4]
	/* Check we have the correct ID */
	if (read_data != SYNTH_ID) {
 3fc:	4a49      	ldr	r2, [pc, #292]	; (524 <_Min_Stack_Size+0x124>)
 3fe:	687b      	ldr	r3, [r7, #4]
 400:	4293      	cmp	r3, r2
 402:	d00a      	beq.n	41a <_Min_Stack_Size+0x1a>
		HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0); // Disable the main regulator.
 404:	2200      	movs	r2, #0
 406:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 40a:	4844      	ldr	r0, [pc, #272]	; (51c <_Min_Stack_Size+0x11c>)
 40c:	f000 fa58 	bl	8c0 <__HAL_GPIO_WritePin_veneer>
		printf("Incorrect synthesiser ID!\r\n");
 410:	4845      	ldr	r0, [pc, #276]	; (528 <_Min_Stack_Size+0x128>)
 412:	f000 fa6d 	bl	8f0 <__puts_veneer>
		return ERROR;
 416:	2301      	movs	r3, #1
 418:	e073      	b.n	502 <_Min_Stack_Size+0x102>
	}

	/* Everything looks good, we can communicate with the chip :-) */
	printf("HMC835 Detected.\r\n");
 41a:	4844      	ldr	r0, [pc, #272]	; (52c <_Min_Stack_Size+0x12c>)
 41c:	f000 fa68 	bl	8f0 <__puts_veneer>

	/* Enables Single-Ended output mode for LO2 output */
	read_data = synth_readreg(MODES_REGISTER); // Get the current value of the modes register
 420:	2017      	movs	r0, #23
 422:	f7ff ffa7 	bl	374 <synth_readreg>
 426:	6078      	str	r0, [r7, #4]
#ifdef MW_VERBOSE
	printf("READ MODES REGISTER: 0x%lX \r\n", read_data);
 428:	6879      	ldr	r1, [r7, #4]
 42a:	4841      	ldr	r0, [pc, #260]	; (530 <_Min_Stack_Size+0x130>)
 42c:	f000 fa54 	bl	8d8 <__printf_veneer>
#endif
	read_data |= (0x1UL << 9);     // Enable single ended output for LO2 (LO2_P)
 430:	687b      	ldr	r3, [r7, #4]
 432:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 436:	607b      	str	r3, [r7, #4]
	read_data  &= ~(AUTO_MUTE << 7); //can disable auto_mute - see variable declarations
 438:	2301      	movs	r3, #1
 43a:	01db      	lsls	r3, r3, #7
 43c:	43db      	mvns	r3, r3
 43e:	461a      	mov	r2, r3
 440:	687b      	ldr	r3, [r7, #4]
 442:	4013      	ands	r3, r2
 444:	607b      	str	r3, [r7, #4]
	synth_writereg(read_data, MODES_REGISTER, 0x0, VERIFY); // Send
 446:	2301      	movs	r3, #1
 448:	2200      	movs	r2, #0
 44a:	2117      	movs	r1, #23
 44c:	6878      	ldr	r0, [r7, #4]
 44e:	f7ff ff17 	bl	280 <synth_writereg>
#ifdef MW_VERBOSE
	printf("PROGRAMMED MODES REGISTER: 0x%lX \r\n", read_data);
 452:	6879      	ldr	r1, [r7, #4]
 454:	4837      	ldr	r0, [pc, #220]	; (534 <_Min_Stack_Size+0x134>)
 456:	f000 fa3f 	bl	8d8 <__printf_veneer>
	//read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get the current value.
	//read_data &= 0xFFFFFFF8; // Zero the first 3 LSBs.
	//read_data |= 0x07;
	//synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Update the VCO divide register.

	synth_writereg(1, REFDIV_REGISTER, 0x0, VERIFY); // Reference divider setting.
 45a:	2301      	movs	r3, #1
 45c:	2200      	movs	r2, #0
 45e:	2102      	movs	r1, #2
 460:	2001      	movs	r0, #1
 462:	f7ff ff0d 	bl	280 <synth_writereg>
#ifdef MW_VERBOSE
	printf("PROGRAMMED DIVIDER REGISTER: 0x01 \r\n");
 466:	4834      	ldr	r0, [pc, #208]	; (538 <_Min_Stack_Size+0x138>)
 468:	f000 fa42 	bl	8f0 <__puts_veneer>
#endif

	/* Lock detect training: This must be done after any change to the PD
	 * reference frequency or after power cycle. */
	read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get contents of lock detect register
 46c:	2007      	movs	r0, #7
 46e:	f7ff ff81 	bl	374 <synth_readreg>
 472:	6078      	str	r0, [r7, #4]
#ifdef MW_VERBOSE
	printf("READ LOCK_DETECT_REGISTER: 0x%lX \r\n", read_data);
 474:	6879      	ldr	r1, [r7, #4]
 476:	4831      	ldr	r0, [pc, #196]	; (53c <_Min_Stack_Size+0x13c>)
 478:	f000 fa2e 	bl	8d8 <__printf_veneer>
#endif
	read_data |= (0x1UL << 11);      // Enable lock-detect counters.
 47c:	687b      	ldr	r3, [r7, #4]
 47e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 482:	607b      	str	r3, [r7, #4]
	read_data |= (0x1UL << 14);      // Enable the lock-detect timer.
 484:	687b      	ldr	r3, [r7, #4]
 486:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 48a:	607b      	str	r3, [r7, #4]
	read_data |= (0x1UL << 20);      // Train the lock-detect timer.
 48c:	687b      	ldr	r3, [r7, #4]
 48e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 492:	607b      	str	r3, [r7, #4]
	synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Send
 494:	2301      	movs	r3, #1
 496:	2200      	movs	r2, #0
 498:	2107      	movs	r1, #7
 49a:	6878      	ldr	r0, [r7, #4]
 49c:	f7ff fef0 	bl	280 <synth_writereg>
#ifdef MW_VERBOSE
	printf("PROGRAMMED LOCK DETECT REGISTER: 0x%lX \r\n", read_data);
 4a0:	6879      	ldr	r1, [r7, #4]
 4a2:	4827      	ldr	r0, [pc, #156]	; (540 <_Min_Stack_Size+0x140>)
 4a4:	f000 fa18 	bl	8d8 <__printf_veneer>
#endif
	HAL_Delay(10); // Wait 10 ms for training to complete, not sure if we really need to do this.
 4a8:	200a      	movs	r0, #10
 4aa:	f000 fa05 	bl	8b8 <__HAL_Delay_veneer>

	/* Program LO2 output gain */
	read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
 4ae:	2016      	movs	r0, #22
 4b0:	f7ff ff60 	bl	374 <synth_readreg>
 4b4:	6078      	str	r0, [r7, #4]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
 4b6:	687b      	ldr	r3, [r7, #4]
 4b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 4bc:	607b      	str	r3, [r7, #4]
	read_data |= (LO2GAIN << 8);	// Set LO2GAIN value.
 4be:	2303      	movs	r3, #3
 4c0:	021b      	lsls	r3, r3, #8
 4c2:	461a      	mov	r2, r3
 4c4:	687b      	ldr	r3, [r7, #4]
 4c6:	4313      	orrs	r3, r2
 4c8:	607b      	str	r3, [r7, #4]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
 4ca:	2301      	movs	r3, #1
 4cc:	2200      	movs	r2, #0
 4ce:	2116      	movs	r1, #22
 4d0:	6878      	ldr	r0, [r7, #4]
 4d2:	f7ff fed5 	bl	280 <synth_writereg>
#ifdef MW_VERBOSE
	printf("PROGRAMMED GAIN DIVIDER REGISTER: 0x%lX \r\n", read_data);
 4d6:	6879      	ldr	r1, [r7, #4]
 4d8:	481a      	ldr	r0, [pc, #104]	; (544 <_Min_Stack_Size+0x144>)
 4da:	f000 f9fd 	bl	8d8 <__printf_veneer>
	printf("LO2 gain setting: %u \r\n", LO2GAIN);
 4de:	2303      	movs	r3, #3
 4e0:	4619      	mov	r1, r3
 4e2:	4819      	ldr	r0, [pc, #100]	; (548 <_Min_Stack_Size+0x148>)
 4e4:	f000 f9f8 	bl	8d8 <__printf_veneer>
#endif

	/* Sets output frequency to the hyperfine value */
	set_frequency_hz(HYPERFINE);
 4e8:	ed9f 7b09 	vldr	d7, [pc, #36]	; 510 <_Min_Stack_Size+0x110>
 4ec:	eeb0 0b47 	vmov.f64	d0, d7
 4f0:	f000 f8f4 	bl	6dc <set_frequency_hz>
	printf("Single frequency output: %f Hz \r\n", HYPERFINE);
 4f4:	a306      	add	r3, pc, #24	; (adr r3, 510 <_Min_Stack_Size+0x110>)
 4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 4fa:	4814      	ldr	r0, [pc, #80]	; (54c <_Min_Stack_Size+0x14c>)
 4fc:	f000 f9ec 	bl	8d8 <__printf_veneer>
	return SUCCESS;
 500:	2300      	movs	r3, #0
}
 502:	4618      	mov	r0, r3
 504:	3708      	adds	r7, #8
 506:	46bd      	mov	sp, r7
 508:	bd80      	pop	{r7, pc}
 50a:	bf00      	nop
 50c:	f3af 8000 	nop.w
 510:	6d600000 	.word	0x6d600000
 514:	41e69e35 	.word	0x41e69e35
 518:	58021000 	.word	0x58021000
 51c:	58020800 	.word	0x58020800
 520:	0041bfff 	.word	0x0041bfff
 524:	00c7701a 	.word	0x00c7701a
 528:	0800d158 	.word	0x0800d158
 52c:	0800d174 	.word	0x0800d174
 530:	0800d188 	.word	0x0800d188
 534:	0800d1a8 	.word	0x0800d1a8
 538:	0800d1cc 	.word	0x0800d1cc
 53c:	0800d1f0 	.word	0x0800d1f0
 540:	0800d214 	.word	0x0800d214
 544:	0800d240 	.word	0x0800d240
 548:	0800d26c 	.word	0x0800d26c
 54c:	0800d284 	.word	0x0800d284

00000550 <check_lock>:

static const bool check_lock(uint32_t timeout) {
 550:	b580      	push	{r7, lr}
 552:	b084      	sub	sp, #16
 554:	af00      	add	r7, sp, #0
 556:	6078      	str	r0, [r7, #4]

	bool locked = false;
 558:	2300      	movs	r3, #0
 55a:	73fb      	strb	r3, [r7, #15]

	/* Check for lock */
	uint32_t start = start_timer(FAST_TIMER);
 55c:	4b16      	ldr	r3, [pc, #88]	; (5b8 <check_lock+0x68>)
 55e:	681b      	ldr	r3, [r3, #0]
 560:	4618      	mov	r0, r3
 562:	f7ff fd4d 	bl	0 <start_timer>
 566:	60b8      	str	r0, [r7, #8]

	while ((FAST_TIMER->CNT - start) < timeout) {
 568:	e014      	b.n	594 <check_lock+0x44>
		//printf("Debug lock while condition\r\n");
		//locked = synth_readreg(0x12) & (1UL << 1);
		locked = synth_readreg(GPOLD_REGISTER) & (1UL << 1);
 56a:	2012      	movs	r0, #18
 56c:	f7ff ff02 	bl	374 <synth_readreg>
 570:	4603      	mov	r3, r0
 572:	f003 0302 	and.w	r3, r3, #2
 576:	2b00      	cmp	r3, #0
 578:	bf14      	ite	ne
 57a:	2301      	movne	r3, #1
 57c:	2300      	moveq	r3, #0
 57e:	73fb      	strb	r3, [r7, #15]
		if (locked) {
 580:	7bfb      	ldrb	r3, [r7, #15]
 582:	2b00      	cmp	r3, #0
 584:	d006      	beq.n	594 <check_lock+0x44>
			stop_timer(FAST_TIMER);
 586:	4b0c      	ldr	r3, [pc, #48]	; (5b8 <check_lock+0x68>)
 588:	681b      	ldr	r3, [r3, #0]
 58a:	4618      	mov	r0, r3
 58c:	f7ff fd56 	bl	3c <stop_timer>
			return true;
 590:	2301      	movs	r3, #1
 592:	e00d      	b.n	5b0 <check_lock+0x60>
	while ((FAST_TIMER->CNT - start) < timeout) {
 594:	4b08      	ldr	r3, [pc, #32]	; (5b8 <check_lock+0x68>)
 596:	681b      	ldr	r3, [r3, #0]
 598:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 59a:	68bb      	ldr	r3, [r7, #8]
 59c:	1ad3      	subs	r3, r2, r3
 59e:	687a      	ldr	r2, [r7, #4]
 5a0:	429a      	cmp	r2, r3
 5a2:	d8e2      	bhi.n	56a <check_lock+0x1a>
		}
	}

	stop_timer(FAST_TIMER);
 5a4:	4b04      	ldr	r3, [pc, #16]	; (5b8 <check_lock+0x68>)
 5a6:	681b      	ldr	r3, [r3, #0]
 5a8:	4618      	mov	r0, r3
 5aa:	f7ff fd47 	bl	3c <stop_timer>
	return false;
 5ae:	2300      	movs	r3, #0
}
 5b0:	4618      	mov	r0, r3
 5b2:	3710      	adds	r7, #16
 5b4:	46bd      	mov	sp, r7
 5b6:	bd80      	pop	{r7, pc}
 5b8:	20000004 	.word	0x20000004

000005bc <mute_mw_outputs>:

static void mute_mw_outputs() {
 5bc:	b580      	push	{r7, lr}
 5be:	b082      	sub	sp, #8
 5c0:	af00      	add	r7, sp, #0
	uint32_t read_data = 0x0;
 5c2:	2300      	movs	r3, #0
 5c4:	607b      	str	r3, [r7, #4]

	/* Mute the outputs by setting k value to zero */
	read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
 5c6:	2016      	movs	r0, #22
 5c8:	f7ff fed4 	bl	374 <synth_readreg>
 5cc:	6078      	str	r0, [r7, #4]
	read_data &= 0xFFFFFFC0; // Zero the first 6 LSBs (VCO division value - mute).
 5ce:	687b      	ldr	r3, [r7, #4]
 5d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 5d4:	607b      	str	r3, [r7, #4]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
 5d6:	2301      	movs	r3, #1
 5d8:	2200      	movs	r2, #0
 5da:	2116      	movs	r1, #22
 5dc:	6878      	ldr	r0, [r7, #4]
 5de:	f7ff fe4f 	bl	280 <synth_writereg>
}
 5e2:	bf00      	nop
 5e4:	3708      	adds	r7, #8
 5e6:	46bd      	mov	sp, r7
 5e8:	bd80      	pop	{r7, pc}

000005ea <set_frequency>:

static void set_frequency(const uint32_t integer, const uint32_t fraction, const uint32_t vco_divider, bool mute) {
 5ea:	b580      	push	{r7, lr}
 5ec:	b086      	sub	sp, #24
 5ee:	af00      	add	r7, sp, #0
 5f0:	60f8      	str	r0, [r7, #12]
 5f2:	60b9      	str	r1, [r7, #8]
 5f4:	607a      	str	r2, [r7, #4]
 5f6:	70fb      	strb	r3, [r7, #3]

	static uint32_t last_integer = -1, last_fraction = -1, last_vcodiv = -1;

	uint32_t read_data = 0x0;
 5f8:	2300      	movs	r3, #0
 5fa:	617b      	str	r3, [r7, #20]

	if (mute) {
 5fc:	78fb      	ldrb	r3, [r7, #3]
 5fe:	2b00      	cmp	r3, #0
 600:	d001      	beq.n	606 <set_frequency+0x1c>
		mute_mw_outputs();
 602:	f7ff ffdb 	bl	5bc <mute_mw_outputs>
	}

	if (last_integer == -1 || (last_integer != integer)) {
 606:	4b30      	ldr	r3, [pc, #192]	; (6c8 <set_frequency+0xde>)
 608:	681b      	ldr	r3, [r3, #0]
 60a:	f1b3 3fff 	cmp.w	r3, #4294967295
 60e:	d004      	beq.n	61a <set_frequency+0x30>
 610:	4b2d      	ldr	r3, [pc, #180]	; (6c8 <set_frequency+0xde>)
 612:	681b      	ldr	r3, [r3, #0]
 614:	68fa      	ldr	r2, [r7, #12]
 616:	429a      	cmp	r2, r3
 618:	d008      	beq.n	62c <set_frequency+0x42>
		synth_writereg(integer, INTEGER_FREQUENCY_REGISTER, 0x0, VERIFY);   // Integer register.
 61a:	2301      	movs	r3, #1
 61c:	2200      	movs	r2, #0
 61e:	2103      	movs	r1, #3
 620:	68f8      	ldr	r0, [r7, #12]
 622:	f7ff fe2d 	bl	280 <synth_writereg>
		last_integer = integer;
 626:	4a28      	ldr	r2, [pc, #160]	; (6c8 <set_frequency+0xde>)
 628:	68fb      	ldr	r3, [r7, #12]
 62a:	6013      	str	r3, [r2, #0]
	}

	if (last_fraction == -1 || (last_fraction != fraction)) {
 62c:	4b27      	ldr	r3, [pc, #156]	; (6cc <set_frequency+0xe2>)
 62e:	681b      	ldr	r3, [r3, #0]
 630:	f1b3 3fff 	cmp.w	r3, #4294967295
 634:	d004      	beq.n	640 <set_frequency+0x56>
 636:	4b25      	ldr	r3, [pc, #148]	; (6cc <set_frequency+0xe2>)
 638:	681b      	ldr	r3, [r3, #0]
 63a:	68ba      	ldr	r2, [r7, #8]
 63c:	429a      	cmp	r2, r3
 63e:	d008      	beq.n	652 <set_frequency+0x68>
		synth_writereg(fraction, FRACTIONAL_FREQUENCY_REGISTER, 0x0, VERIFY);  // Fractional register.
 640:	2301      	movs	r3, #1
 642:	2200      	movs	r2, #0
 644:	2104      	movs	r1, #4
 646:	68b8      	ldr	r0, [r7, #8]
 648:	f7ff fe1a 	bl	280 <synth_writereg>
		last_fraction = fraction;
 64c:	4a1f      	ldr	r2, [pc, #124]	; (6cc <set_frequency+0xe2>)
 64e:	68bb      	ldr	r3, [r7, #8]
 650:	6013      	str	r3, [r2, #0]
	}

	if (last_vcodiv == -1 || (last_vcodiv != vco_divider) || mute) {
 652:	4b1f      	ldr	r3, [pc, #124]	; (6d0 <set_frequency+0xe6>)
 654:	681b      	ldr	r3, [r3, #0]
 656:	f1b3 3fff 	cmp.w	r3, #4294967295
 65a:	d007      	beq.n	66c <set_frequency+0x82>
 65c:	4b1c      	ldr	r3, [pc, #112]	; (6d0 <set_frequency+0xe6>)
 65e:	681b      	ldr	r3, [r3, #0]
 660:	687a      	ldr	r2, [r7, #4]
 662:	429a      	cmp	r2, r3
 664:	d102      	bne.n	66c <set_frequency+0x82>
 666:	78fb      	ldrb	r3, [r7, #3]
 668:	2b00      	cmp	r3, #0
 66a:	d014      	beq.n	696 <set_frequency+0xac>
		read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
 66c:	2016      	movs	r0, #22
 66e:	f7ff fe81 	bl	374 <synth_readreg>
 672:	6178      	str	r0, [r7, #20]
		read_data &= 0xFFFFFFC0; // Zero the first 6 LSBs (VCO division value - mute).
 674:	697b      	ldr	r3, [r7, #20]
 676:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 67a:	617b      	str	r3, [r7, #20]
		read_data |= vco_divider; // This will set k which will un-mute the outputs */
 67c:	697a      	ldr	r2, [r7, #20]
 67e:	687b      	ldr	r3, [r7, #4]
 680:	4313      	orrs	r3, r2
 682:	617b      	str	r3, [r7, #20]
		synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
 684:	2301      	movs	r3, #1
 686:	2200      	movs	r2, #0
 688:	2116      	movs	r1, #22
 68a:	6978      	ldr	r0, [r7, #20]
 68c:	f7ff fdf8 	bl	280 <synth_writereg>
		last_vcodiv = vco_divider;
 690:	4a0f      	ldr	r2, [pc, #60]	; (6d0 <set_frequency+0xe6>)
 692:	687b      	ldr	r3, [r7, #4]
 694:	6013      	str	r3, [r2, #0]
	}

	if (!check_lock(LOCK_WAIT_US)) {
 696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 69a:	4618      	mov	r0, r3
 69c:	f7ff ff58 	bl	550 <check_lock>
 6a0:	4603      	mov	r3, r0
 6a2:	f083 0301 	eor.w	r3, r3, #1
 6a6:	b2db      	uxtb	r3, r3
 6a8:	2b00      	cmp	r3, #0
 6aa:	d009      	beq.n	6c0 <set_frequency+0xd6>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); //turn off amber LED
 6ac:	2200      	movs	r2, #0
 6ae:	2102      	movs	r1, #2
 6b0:	4808      	ldr	r0, [pc, #32]	; (6d4 <set_frequency+0xea>)
 6b2:	f000 f905 	bl	8c0 <__HAL_GPIO_WritePin_veneer>
		printf("Lock failed within set_frequency!\r\n");
 6b6:	4808      	ldr	r0, [pc, #32]	; (6d8 <set_frequency+0xee>)
 6b8:	f000 f91a 	bl	8f0 <__puts_veneer>
#ifdef HALT_ON_LOSS_OF_LOCK
		Error_Handler();
 6bc:	f000 f91c 	bl	8f8 <__Error_Handler_veneer>
#endif //HALT_ON_LOSS_OF_LOCK
	}

}
 6c0:	bf00      	nop
 6c2:	3718      	adds	r7, #24
 6c4:	46bd      	mov	sp, r7
 6c6:	bd80      	pop	{r7, pc}
 6c8:	20000008 	.word	0x20000008
 6cc:	2000000c 	.word	0x2000000c
 6d0:	20000010 	.word	0x20000010
 6d4:	58021000 	.word	0x58021000
 6d8:	0800d2a8 	.word	0x0800d2a8

000006dc <set_frequency_hz>:

void set_frequency_hz(const double fo) {
 6dc:	b580      	push	{r7, lr}
 6de:	b088      	sub	sp, #32
 6e0:	af00      	add	r7, sp, #0
 6e2:	ed87 0b00 	vstr	d0, [r7]

	/* For the k divider we need to find the smallest even integer or use a max of 62*/
	uint32_t k = VCO_MAX_FREQ / fo;
 6e6:	ed9f 5b28 	vldr	d5, [pc, #160]	; 788 <set_frequency_hz+0xac>
 6ea:	ed97 6b00 	vldr	d6, [r7]
 6ee:	ee85 7b06 	vdiv.f64	d7, d5, d6
 6f2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 6f6:	ee17 3a90 	vmov	r3, s15
 6fa:	61fb      	str	r3, [r7, #28]

	if (k != 1) {
 6fc:	69fb      	ldr	r3, [r7, #28]
 6fe:	2b01      	cmp	r3, #1
 700:	d00b      	beq.n	71a <set_frequency_hz+0x3e>
		while (k > 62 || k % 2) {
 702:	e002      	b.n	70a <set_frequency_hz+0x2e>
			k = k - 1;
 704:	69fb      	ldr	r3, [r7, #28]
 706:	3b01      	subs	r3, #1
 708:	61fb      	str	r3, [r7, #28]
		while (k > 62 || k % 2) {
 70a:	69fb      	ldr	r3, [r7, #28]
 70c:	2b3e      	cmp	r3, #62	; 0x3e
 70e:	d8f9      	bhi.n	704 <set_frequency_hz+0x28>
 710:	69fb      	ldr	r3, [r7, #28]
 712:	f003 0301 	and.w	r3, r3, #1
 716:	2b00      	cmp	r3, #0
 718:	d1f4      	bne.n	704 <set_frequency_hz+0x28>
		}
	}

	/* Calculate the N division ratio */
	const double N = ((fo * k) / REF_FREQ);
 71a:	69fb      	ldr	r3, [r7, #28]
 71c:	ee07 3a90 	vmov	s15, r3
 720:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 724:	ed97 7b00 	vldr	d7, [r7]
 728:	ee26 6b07 	vmul.f64	d6, d6, d7
 72c:	ed9f 5b18 	vldr	d5, [pc, #96]	; 790 <set_frequency_hz+0xb4>
 730:	ee86 7b05 	vdiv.f64	d7, d6, d5
 734:	ed87 7b04 	vstr	d7, [r7, #16]

	/* Extract the fractional and integer parts */
	const uint32_t NINT = N;
 738:	ed97 7b04 	vldr	d7, [r7, #16]
 73c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 740:	ee17 3a90 	vmov	r3, s15
 744:	60fb      	str	r3, [r7, #12]
	const uint32_t NFRAC = ((N - NINT) * (1 << 24)) + 0.5;
 746:	68fb      	ldr	r3, [r7, #12]
 748:	ee07 3a90 	vmov	s15, r3
 74c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 750:	ed97 6b04 	vldr	d6, [r7, #16]
 754:	ee36 7b47 	vsub.f64	d7, d6, d7
 758:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 798 <set_frequency_hz+0xbc>
 75c:	ee27 7b06 	vmul.f64	d7, d7, d6
 760:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 764:	ee37 7b06 	vadd.f64	d7, d7, d6
 768:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 76c:	ee17 3a90 	vmov	r3, s15
 770:	60bb      	str	r3, [r7, #8]
		printf("Failed to establish synthesiser frequency accurately\r\n");
		Error_Handler();
	}
#endif

	set_frequency(NINT, NFRAC, k, MANUAL_MUTE);
 772:	2301      	movs	r3, #1
 774:	69fa      	ldr	r2, [r7, #28]
 776:	68b9      	ldr	r1, [r7, #8]
 778:	68f8      	ldr	r0, [r7, #12]
 77a:	f7ff ff36 	bl	5ea <set_frequency>

}
 77e:	bf00      	nop
 780:	3720      	adds	r7, #32
 782:	46bd      	mov	sp, r7
 784:	bd80      	pop	{r7, pc}
 786:	bf00      	nop
 788:	20000000 	.word	0x20000000
 78c:	41ee8c21 	.word	0x41ee8c21
 790:	00000000 	.word	0x00000000
 794:	4187d784 	.word	0x4187d784
 798:	00000000 	.word	0x00000000
 79c:	41700000 	.word	0x41700000

000007a0 <run_sweep>:

void run_sweep() {
 7a0:	b580      	push	{r7, lr}
 7a2:	b086      	sub	sp, #24
 7a4:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // Assume we are locked, the LED will be disabled if lock fails.
 7a6:	2201      	movs	r2, #1
 7a8:	2102      	movs	r1, #2
 7aa:	483b      	ldr	r0, [pc, #236]	; (898 <run_sweep+0xf8>)
 7ac:	f000 f888 	bl	8c0 <__HAL_GPIO_WritePin_veneer>

#ifdef RAMP_DAC
	/* Zero the DAC output */
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 7b0:	2300      	movs	r3, #0
 7b2:	2200      	movs	r2, #0
 7b4:	2100      	movs	r1, #0
 7b6:	4839      	ldr	r0, [pc, #228]	; (89c <run_sweep+0xfc>)
 7b8:	f000 f892 	bl	8e0 <__HAL_DAC_SetValue_veneer>
	static const double start_freq = ((long)(sweep_settings.req_start_freq/sweep_settings.step_size)) * sweep_settings.step_size;
	static const double stop_freq = ((long)((sweep_settings.req_stop_freq/sweep_settings.step_size) + 0.5)) * sweep_settings.step_size;
	static const uint32_t num_points = ((stop_freq - start_freq)/sweep_settings.step_size) + 1;

#ifdef RAMP_DAC
	double dac_val = 0;
 7bc:	f04f 0200 	mov.w	r2, #0
 7c0:	f04f 0300 	mov.w	r3, #0
 7c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 7c8:	b672      	cpsid	i
}
 7ca:	bf00      	nop
#endif

	__disable_irq();

	for (uint32_t i = 0; i < num_points; i++) {
 7cc:	2300      	movs	r3, #0
 7ce:	60fb      	str	r3, [r7, #12]
 7d0:	e041      	b.n	856 <run_sweep+0xb6>

		double fo = start_freq + (i * sweep_settings.step_size);
 7d2:	68fb      	ldr	r3, [r7, #12]
 7d4:	ee07 3a90 	vmov	s15, r3
 7d8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 7dc:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 888 <run_sweep+0xe8>
 7e0:	ee27 6b06 	vmul.f64	d6, d7, d6
 7e4:	4b2e      	ldr	r3, [pc, #184]	; (8a0 <run_sweep+0x100>)
 7e6:	ed93 7b00 	vldr	d7, [r3]
 7ea:	ee36 7b07 	vadd.f64	d7, d6, d7
 7ee:	ed87 7b00 	vstr	d7, [r7]
		set_frequency_hz(fo);
 7f2:	ed97 0b00 	vldr	d0, [r7]
 7f6:	f7ff ff71 	bl	6dc <set_frequency_hz>


#ifdef RAMP_DAC
		dac_val = dac_val + (4096.0/num_points);
 7fa:	4b2a      	ldr	r3, [pc, #168]	; (8a4 <run_sweep+0x104>)
 7fc:	681b      	ldr	r3, [r3, #0]
 7fe:	ee07 3a90 	vmov	s15, r3
 802:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 806:	ed9f 5b22 	vldr	d5, [pc, #136]	; 890 <run_sweep+0xf0>
 80a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80e:	ed97 6b04 	vldr	d6, [r7, #16]
 812:	ee36 7b07 	vadd.f64	d7, d6, d7
 816:	ed87 7b04 	vstr	d7, [r7, #16]
		if(HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint32_t)dac_val) != HAL_OK){
 81a:	ed97 7b04 	vldr	d7, [r7, #16]
 81e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 822:	ee17 3a90 	vmov	r3, s15
 826:	2200      	movs	r2, #0
 828:	2100      	movs	r1, #0
 82a:	481c      	ldr	r0, [pc, #112]	; (89c <run_sweep+0xfc>)
 82c:	f000 f858 	bl	8e0 <__HAL_DAC_SetValue_veneer>
 830:	4603      	mov	r3, r0
 832:	2b00      	cmp	r3, #0
 834:	d004      	beq.n	840 <run_sweep+0xa0>
			printf("Failure to program value to DAC \r\n");
 836:	481c      	ldr	r0, [pc, #112]	; (8a8 <run_sweep+0x108>)
 838:	f000 f85a 	bl	8f0 <__puts_veneer>
			Error_Handler();
 83c:	f000 f85c 	bl	8f8 <__Error_Handler_veneer>
		}
#endif

		timer_delay(FAST_TIMER, DWELL_TIME_US);
 840:	4b1a      	ldr	r3, [pc, #104]	; (8ac <run_sweep+0x10c>)
 842:	681b      	ldr	r3, [r3, #0]
 844:	f241 1208 	movw	r2, #4360	; 0x1108
 848:	4611      	mov	r1, r2
 84a:	4618      	mov	r0, r3
 84c:	f7ff fc08 	bl	60 <timer_delay>
	for (uint32_t i = 0; i < num_points; i++) {
 850:	68fb      	ldr	r3, [r7, #12]
 852:	3301      	adds	r3, #1
 854:	60fb      	str	r3, [r7, #12]
 856:	4b13      	ldr	r3, [pc, #76]	; (8a4 <run_sweep+0x104>)
 858:	681b      	ldr	r3, [r3, #0]
 85a:	68fa      	ldr	r2, [r7, #12]
 85c:	429a      	cmp	r2, r3
 85e:	d3b8      	bcc.n	7d2 <run_sweep+0x32>
  __ASM volatile ("cpsie i" : : : "memory");
 860:	b662      	cpsie	i
}
 862:	bf00      	nop

	}

	__enable_irq();

	printf("Total Points: %lu\r\n", num_points);
 864:	4b0f      	ldr	r3, [pc, #60]	; (8a4 <run_sweep+0x104>)
 866:	681b      	ldr	r3, [r3, #0]
 868:	4619      	mov	r1, r3
 86a:	4811      	ldr	r0, [pc, #68]	; (8b0 <run_sweep+0x110>)
 86c:	f000 f834 	bl	8d8 <__printf_veneer>

#ifdef RAMP_DAC
	/* Zero and stop the DAC */
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 870:	2300      	movs	r3, #0
 872:	2200      	movs	r2, #0
 874:	2100      	movs	r1, #0
 876:	4809      	ldr	r0, [pc, #36]	; (89c <run_sweep+0xfc>)
 878:	f000 f832 	bl	8e0 <__HAL_DAC_SetValue_veneer>
	//HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
#endif

}
 87c:	bf00      	nop
 87e:	3718      	adds	r7, #24
 880:	46bd      	mov	sp, r7
 882:	bd80      	pop	{r7, pc}
 884:	f3af 8000 	nop.w
 888:	00000000 	.word	0x00000000
 88c:	4017d784 	.word	0x4017d784
 890:	00000000 	.word	0x00000000
 894:	40b00000 	.word	0x40b00000
 898:	58021000 	.word	0x58021000
 89c:	20000320 	.word	0x20000320
 8a0:	0800d320 	.word	0x0800d320
 8a4:	0800d328 	.word	0x0800d328
 8a8:	0800d2cc 	.word	0x0800d2cc
 8ac:	20000004 	.word	0x20000004
 8b0:	0800d2f0 	.word	0x0800d2f0
 8b4:	00000000 	.word	0x00000000

000008b8 <__HAL_Delay_veneer>:
 8b8:	f85f f000 	ldr.w	pc, [pc]	; 8bc <__HAL_Delay_veneer+0x4>
 8bc:	08002921 	.word	0x08002921

000008c0 <__HAL_GPIO_WritePin_veneer>:
 8c0:	f85f f000 	ldr.w	pc, [pc]	; 8c4 <__HAL_GPIO_WritePin_veneer+0x4>
 8c4:	08003b8d 	.word	0x08003b8d

000008c8 <__HAL_HRTIM_WaveformSetOutputLevel_veneer>:
 8c8:	f85f f000 	ldr.w	pc, [pc]	; 8cc <__HAL_HRTIM_WaveformSetOutputLevel_veneer+0x4>
 8cc:	0800423d 	.word	0x0800423d

000008d0 <__HAL_HRTIM_WaveformCountStart_IT_veneer>:
 8d0:	f85f f000 	ldr.w	pc, [pc]	; 8d4 <__HAL_HRTIM_WaveformCountStart_IT_veneer+0x4>
 8d4:	080044dd 	.word	0x080044dd

000008d8 <__printf_veneer>:
 8d8:	f85f f000 	ldr.w	pc, [pc]	; 8dc <__printf_veneer+0x4>
 8dc:	0800aced 	.word	0x0800aced

000008e0 <__HAL_DAC_SetValue_veneer>:
 8e0:	f85f f000 	ldr.w	pc, [pc]	; 8e4 <__HAL_DAC_SetValue_veneer+0x4>
 8e4:	08002cef 	.word	0x08002cef

000008e8 <__HAL_HRTIM_WaveformOutputStart_veneer>:
 8e8:	f85f f000 	ldr.w	pc, [pc]	; 8ec <__HAL_HRTIM_WaveformOutputStart_veneer+0x4>
 8ec:	08004429 	.word	0x08004429

000008f0 <__puts_veneer>:
 8f0:	f85f f000 	ldr.w	pc, [pc]	; 8f4 <__puts_veneer+0x4>
 8f4:	0800adf9 	.word	0x0800adf9

000008f8 <__Error_Handler_veneer>:
 8f8:	f85f f000 	ldr.w	pc, [pc]	; 8fc <__Error_Handler_veneer+0x4>
 8fc:	08001e7d 	.word	0x08001e7d

00000900 <__HAL_HRTIM_WaveformCountStop_IT_veneer>:
 900:	f85f f000 	ldr.w	pc, [pc]	; 904 <__HAL_HRTIM_WaveformCountStop_IT_veneer+0x4>
 904:	080045bd 	.word	0x080045bd

00000908 <__HAL_HRTIM_WaveformOutputStop_veneer>:
 908:	f85f f000 	ldr.w	pc, [pc]	; 90c <__HAL_HRTIM_WaveformOutputStop_veneer+0x4>
 90c:	08004483 	.word	0x08004483

00000910 <__HAL_GPIO_ReadPin_veneer>:
 910:	f85f f000 	ldr.w	pc, [pc]	; 914 <__HAL_GPIO_ReadPin_veneer+0x4>
 914:	08003b5d 	.word	0x08003b5d

Disassembly of section .text:

08000bb0 <__do_global_dtors_aux>:
 8000bb0:	b510      	push	{r4, lr}
 8000bb2:	4c05      	ldr	r4, [pc, #20]	; (8000bc8 <__do_global_dtors_aux+0x18>)
 8000bb4:	7823      	ldrb	r3, [r4, #0]
 8000bb6:	b933      	cbnz	r3, 8000bc6 <__do_global_dtors_aux+0x16>
 8000bb8:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <__do_global_dtors_aux+0x1c>)
 8000bba:	b113      	cbz	r3, 8000bc2 <__do_global_dtors_aux+0x12>
 8000bbc:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <__do_global_dtors_aux+0x20>)
 8000bbe:	f3af 8000 	nop.w
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	7023      	strb	r3, [r4, #0]
 8000bc6:	bd10      	pop	{r4, pc}
 8000bc8:	200002cc 	.word	0x200002cc
 8000bcc:	00000000 	.word	0x00000000
 8000bd0:	0800ce40 	.word	0x0800ce40

08000bd4 <frame_dummy>:
 8000bd4:	b508      	push	{r3, lr}
 8000bd6:	4b03      	ldr	r3, [pc, #12]	; (8000be4 <frame_dummy+0x10>)
 8000bd8:	b11b      	cbz	r3, 8000be2 <frame_dummy+0xe>
 8000bda:	4903      	ldr	r1, [pc, #12]	; (8000be8 <frame_dummy+0x14>)
 8000bdc:	4803      	ldr	r0, [pc, #12]	; (8000bec <frame_dummy+0x18>)
 8000bde:	f3af 8000 	nop.w
 8000be2:	bd08      	pop	{r3, pc}
 8000be4:	00000000 	.word	0x00000000
 8000be8:	200002d0 	.word	0x200002d0
 8000bec:	0800ce40 	.word	0x0800ce40

08000bf0 <strlen>:
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000bf6:	2a00      	cmp	r2, #0
 8000bf8:	d1fb      	bne.n	8000bf2 <strlen+0x2>
 8000bfa:	1a18      	subs	r0, r3, r0
 8000bfc:	3801      	subs	r0, #1
 8000bfe:	4770      	bx	lr

08000c00 <memchr>:
 8000c00:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000c04:	2a10      	cmp	r2, #16
 8000c06:	db2b      	blt.n	8000c60 <memchr+0x60>
 8000c08:	f010 0f07 	tst.w	r0, #7
 8000c0c:	d008      	beq.n	8000c20 <memchr+0x20>
 8000c0e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000c12:	3a01      	subs	r2, #1
 8000c14:	428b      	cmp	r3, r1
 8000c16:	d02d      	beq.n	8000c74 <memchr+0x74>
 8000c18:	f010 0f07 	tst.w	r0, #7
 8000c1c:	b342      	cbz	r2, 8000c70 <memchr+0x70>
 8000c1e:	d1f6      	bne.n	8000c0e <memchr+0xe>
 8000c20:	b4f0      	push	{r4, r5, r6, r7}
 8000c22:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000c26:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8000c2a:	f022 0407 	bic.w	r4, r2, #7
 8000c2e:	f07f 0700 	mvns.w	r7, #0
 8000c32:	2300      	movs	r3, #0
 8000c34:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000c38:	3c08      	subs	r4, #8
 8000c3a:	ea85 0501 	eor.w	r5, r5, r1
 8000c3e:	ea86 0601 	eor.w	r6, r6, r1
 8000c42:	fa85 f547 	uadd8	r5, r5, r7
 8000c46:	faa3 f587 	sel	r5, r3, r7
 8000c4a:	fa86 f647 	uadd8	r6, r6, r7
 8000c4e:	faa5 f687 	sel	r6, r5, r7
 8000c52:	b98e      	cbnz	r6, 8000c78 <memchr+0x78>
 8000c54:	d1ee      	bne.n	8000c34 <memchr+0x34>
 8000c56:	bcf0      	pop	{r4, r5, r6, r7}
 8000c58:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000c5c:	f002 0207 	and.w	r2, r2, #7
 8000c60:	b132      	cbz	r2, 8000c70 <memchr+0x70>
 8000c62:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000c66:	3a01      	subs	r2, #1
 8000c68:	ea83 0301 	eor.w	r3, r3, r1
 8000c6c:	b113      	cbz	r3, 8000c74 <memchr+0x74>
 8000c6e:	d1f8      	bne.n	8000c62 <memchr+0x62>
 8000c70:	2000      	movs	r0, #0
 8000c72:	4770      	bx	lr
 8000c74:	3801      	subs	r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	2d00      	cmp	r5, #0
 8000c7a:	bf06      	itte	eq
 8000c7c:	4635      	moveq	r5, r6
 8000c7e:	3803      	subeq	r0, #3
 8000c80:	3807      	subne	r0, #7
 8000c82:	f015 0f01 	tst.w	r5, #1
 8000c86:	d107      	bne.n	8000c98 <memchr+0x98>
 8000c88:	3001      	adds	r0, #1
 8000c8a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8000c8e:	bf02      	ittt	eq
 8000c90:	3001      	addeq	r0, #1
 8000c92:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000c96:	3001      	addeq	r0, #1
 8000c98:	bcf0      	pop	{r4, r5, r6, r7}
 8000c9a:	3801      	subs	r0, #1
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_uldivmod>:
 8000ca0:	b953      	cbnz	r3, 8000cb8 <__aeabi_uldivmod+0x18>
 8000ca2:	b94a      	cbnz	r2, 8000cb8 <__aeabi_uldivmod+0x18>
 8000ca4:	2900      	cmp	r1, #0
 8000ca6:	bf08      	it	eq
 8000ca8:	2800      	cmpeq	r0, #0
 8000caa:	bf1c      	itt	ne
 8000cac:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb4:	f000 b974 	b.w	8000fa0 <__aeabi_idiv0>
 8000cb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc0:	f000 f806 	bl	8000cd0 <__udivmoddi4>
 8000cc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ccc:	b004      	add	sp, #16
 8000cce:	4770      	bx	lr

08000cd0 <__udivmoddi4>:
 8000cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd4:	9d08      	ldr	r5, [sp, #32]
 8000cd6:	4604      	mov	r4, r0
 8000cd8:	468e      	mov	lr, r1
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d14d      	bne.n	8000d7a <__udivmoddi4+0xaa>
 8000cde:	428a      	cmp	r2, r1
 8000ce0:	4694      	mov	ip, r2
 8000ce2:	d969      	bls.n	8000db8 <__udivmoddi4+0xe8>
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	b152      	cbz	r2, 8000d00 <__udivmoddi4+0x30>
 8000cea:	fa01 f302 	lsl.w	r3, r1, r2
 8000cee:	f1c2 0120 	rsb	r1, r2, #32
 8000cf2:	fa20 f101 	lsr.w	r1, r0, r1
 8000cf6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfa:	ea41 0e03 	orr.w	lr, r1, r3
 8000cfe:	4094      	lsls	r4, r2
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	0c21      	lsrs	r1, r4, #16
 8000d06:	fbbe f6f8 	udiv	r6, lr, r8
 8000d0a:	fa1f f78c 	uxth.w	r7, ip
 8000d0e:	fb08 e316 	mls	r3, r8, r6, lr
 8000d12:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d16:	fb06 f107 	mul.w	r1, r6, r7
 8000d1a:	4299      	cmp	r1, r3
 8000d1c:	d90a      	bls.n	8000d34 <__udivmoddi4+0x64>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d26:	f080 811f 	bcs.w	8000f68 <__udivmoddi4+0x298>
 8000d2a:	4299      	cmp	r1, r3
 8000d2c:	f240 811c 	bls.w	8000f68 <__udivmoddi4+0x298>
 8000d30:	3e02      	subs	r6, #2
 8000d32:	4463      	add	r3, ip
 8000d34:	1a5b      	subs	r3, r3, r1
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d44:	fb00 f707 	mul.w	r7, r0, r7
 8000d48:	42a7      	cmp	r7, r4
 8000d4a:	d90a      	bls.n	8000d62 <__udivmoddi4+0x92>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d54:	f080 810a 	bcs.w	8000f6c <__udivmoddi4+0x29c>
 8000d58:	42a7      	cmp	r7, r4
 8000d5a:	f240 8107 	bls.w	8000f6c <__udivmoddi4+0x29c>
 8000d5e:	4464      	add	r4, ip
 8000d60:	3802      	subs	r0, #2
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	1be4      	subs	r4, r4, r7
 8000d68:	2600      	movs	r6, #0
 8000d6a:	b11d      	cbz	r5, 8000d74 <__udivmoddi4+0xa4>
 8000d6c:	40d4      	lsrs	r4, r2
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e9c5 4300 	strd	r4, r3, [r5]
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	d909      	bls.n	8000d92 <__udivmoddi4+0xc2>
 8000d7e:	2d00      	cmp	r5, #0
 8000d80:	f000 80ef 	beq.w	8000f62 <__udivmoddi4+0x292>
 8000d84:	2600      	movs	r6, #0
 8000d86:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8a:	4630      	mov	r0, r6
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	fab3 f683 	clz	r6, r3
 8000d96:	2e00      	cmp	r6, #0
 8000d98:	d14a      	bne.n	8000e30 <__udivmoddi4+0x160>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d302      	bcc.n	8000da4 <__udivmoddi4+0xd4>
 8000d9e:	4282      	cmp	r2, r0
 8000da0:	f200 80f9 	bhi.w	8000f96 <__udivmoddi4+0x2c6>
 8000da4:	1a84      	subs	r4, r0, r2
 8000da6:	eb61 0303 	sbc.w	r3, r1, r3
 8000daa:	2001      	movs	r0, #1
 8000dac:	469e      	mov	lr, r3
 8000dae:	2d00      	cmp	r5, #0
 8000db0:	d0e0      	beq.n	8000d74 <__udivmoddi4+0xa4>
 8000db2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000db6:	e7dd      	b.n	8000d74 <__udivmoddi4+0xa4>
 8000db8:	b902      	cbnz	r2, 8000dbc <__udivmoddi4+0xec>
 8000dba:	deff      	udf	#255	; 0xff
 8000dbc:	fab2 f282 	clz	r2, r2
 8000dc0:	2a00      	cmp	r2, #0
 8000dc2:	f040 8092 	bne.w	8000eea <__udivmoddi4+0x21a>
 8000dc6:	eba1 010c 	sub.w	r1, r1, ip
 8000dca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dce:	fa1f fe8c 	uxth.w	lr, ip
 8000dd2:	2601      	movs	r6, #1
 8000dd4:	0c20      	lsrs	r0, r4, #16
 8000dd6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dda:	fb07 1113 	mls	r1, r7, r3, r1
 8000dde:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000de2:	fb0e f003 	mul.w	r0, lr, r3
 8000de6:	4288      	cmp	r0, r1
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x12c>
 8000dea:	eb1c 0101 	adds.w	r1, ip, r1
 8000dee:	f103 38ff 	add.w	r8, r3, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x12a>
 8000df4:	4288      	cmp	r0, r1
 8000df6:	f200 80cb 	bhi.w	8000f90 <__udivmoddi4+0x2c0>
 8000dfa:	4643      	mov	r3, r8
 8000dfc:	1a09      	subs	r1, r1, r0
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e04:	fb07 1110 	mls	r1, r7, r0, r1
 8000e08:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e10:	45a6      	cmp	lr, r4
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x156>
 8000e14:	eb1c 0404 	adds.w	r4, ip, r4
 8000e18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e1c:	d202      	bcs.n	8000e24 <__udivmoddi4+0x154>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f200 80bb 	bhi.w	8000f9a <__udivmoddi4+0x2ca>
 8000e24:	4608      	mov	r0, r1
 8000e26:	eba4 040e 	sub.w	r4, r4, lr
 8000e2a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e2e:	e79c      	b.n	8000d6a <__udivmoddi4+0x9a>
 8000e30:	f1c6 0720 	rsb	r7, r6, #32
 8000e34:	40b3      	lsls	r3, r6
 8000e36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e3e:	fa20 f407 	lsr.w	r4, r0, r7
 8000e42:	fa01 f306 	lsl.w	r3, r1, r6
 8000e46:	431c      	orrs	r4, r3
 8000e48:	40f9      	lsrs	r1, r7
 8000e4a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e4e:	fa00 f306 	lsl.w	r3, r0, r6
 8000e52:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e56:	0c20      	lsrs	r0, r4, #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fb09 1118 	mls	r1, r9, r8, r1
 8000e60:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e64:	fb08 f00e 	mul.w	r0, r8, lr
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	fa02 f206 	lsl.w	r2, r2, r6
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b8>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e78:	f080 8088 	bcs.w	8000f8c <__udivmoddi4+0x2bc>
 8000e7c:	4288      	cmp	r0, r1
 8000e7e:	f240 8085 	bls.w	8000f8c <__udivmoddi4+0x2bc>
 8000e82:	f1a8 0802 	sub.w	r8, r8, #2
 8000e86:	4461      	add	r1, ip
 8000e88:	1a09      	subs	r1, r1, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e90:	fb09 1110 	mls	r1, r9, r0, r1
 8000e94:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e9c:	458e      	cmp	lr, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1e2>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea8:	d26c      	bcs.n	8000f84 <__udivmoddi4+0x2b4>
 8000eaa:	458e      	cmp	lr, r1
 8000eac:	d96a      	bls.n	8000f84 <__udivmoddi4+0x2b4>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eb6:	fba0 9402 	umull	r9, r4, r0, r2
 8000eba:	eba1 010e 	sub.w	r1, r1, lr
 8000ebe:	42a1      	cmp	r1, r4
 8000ec0:	46c8      	mov	r8, r9
 8000ec2:	46a6      	mov	lr, r4
 8000ec4:	d356      	bcc.n	8000f74 <__udivmoddi4+0x2a4>
 8000ec6:	d053      	beq.n	8000f70 <__udivmoddi4+0x2a0>
 8000ec8:	b15d      	cbz	r5, 8000ee2 <__udivmoddi4+0x212>
 8000eca:	ebb3 0208 	subs.w	r2, r3, r8
 8000ece:	eb61 010e 	sbc.w	r1, r1, lr
 8000ed2:	fa01 f707 	lsl.w	r7, r1, r7
 8000ed6:	fa22 f306 	lsr.w	r3, r2, r6
 8000eda:	40f1      	lsrs	r1, r6
 8000edc:	431f      	orrs	r7, r3
 8000ede:	e9c5 7100 	strd	r7, r1, [r5]
 8000ee2:	2600      	movs	r6, #0
 8000ee4:	4631      	mov	r1, r6
 8000ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eea:	f1c2 0320 	rsb	r3, r2, #32
 8000eee:	40d8      	lsrs	r0, r3
 8000ef0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef4:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef8:	4091      	lsls	r1, r2
 8000efa:	4301      	orrs	r1, r0
 8000efc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f00:	fa1f fe8c 	uxth.w	lr, ip
 8000f04:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f08:	fb07 3610 	mls	r6, r7, r0, r3
 8000f0c:	0c0b      	lsrs	r3, r1, #16
 8000f0e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f12:	fb00 f60e 	mul.w	r6, r0, lr
 8000f16:	429e      	cmp	r6, r3
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d908      	bls.n	8000f30 <__udivmoddi4+0x260>
 8000f1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f26:	d22f      	bcs.n	8000f88 <__udivmoddi4+0x2b8>
 8000f28:	429e      	cmp	r6, r3
 8000f2a:	d92d      	bls.n	8000f88 <__udivmoddi4+0x2b8>
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	1b9b      	subs	r3, r3, r6
 8000f32:	b289      	uxth	r1, r1
 8000f34:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f38:	fb07 3316 	mls	r3, r7, r6, r3
 8000f3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f40:	fb06 f30e 	mul.w	r3, r6, lr
 8000f44:	428b      	cmp	r3, r1
 8000f46:	d908      	bls.n	8000f5a <__udivmoddi4+0x28a>
 8000f48:	eb1c 0101 	adds.w	r1, ip, r1
 8000f4c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f50:	d216      	bcs.n	8000f80 <__udivmoddi4+0x2b0>
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d914      	bls.n	8000f80 <__udivmoddi4+0x2b0>
 8000f56:	3e02      	subs	r6, #2
 8000f58:	4461      	add	r1, ip
 8000f5a:	1ac9      	subs	r1, r1, r3
 8000f5c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f60:	e738      	b.n	8000dd4 <__udivmoddi4+0x104>
 8000f62:	462e      	mov	r6, r5
 8000f64:	4628      	mov	r0, r5
 8000f66:	e705      	b.n	8000d74 <__udivmoddi4+0xa4>
 8000f68:	4606      	mov	r6, r0
 8000f6a:	e6e3      	b.n	8000d34 <__udivmoddi4+0x64>
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	e6f8      	b.n	8000d62 <__udivmoddi4+0x92>
 8000f70:	454b      	cmp	r3, r9
 8000f72:	d2a9      	bcs.n	8000ec8 <__udivmoddi4+0x1f8>
 8000f74:	ebb9 0802 	subs.w	r8, r9, r2
 8000f78:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f7c:	3801      	subs	r0, #1
 8000f7e:	e7a3      	b.n	8000ec8 <__udivmoddi4+0x1f8>
 8000f80:	4646      	mov	r6, r8
 8000f82:	e7ea      	b.n	8000f5a <__udivmoddi4+0x28a>
 8000f84:	4620      	mov	r0, r4
 8000f86:	e794      	b.n	8000eb2 <__udivmoddi4+0x1e2>
 8000f88:	4640      	mov	r0, r8
 8000f8a:	e7d1      	b.n	8000f30 <__udivmoddi4+0x260>
 8000f8c:	46d0      	mov	r8, sl
 8000f8e:	e77b      	b.n	8000e88 <__udivmoddi4+0x1b8>
 8000f90:	3b02      	subs	r3, #2
 8000f92:	4461      	add	r1, ip
 8000f94:	e732      	b.n	8000dfc <__udivmoddi4+0x12c>
 8000f96:	4630      	mov	r0, r6
 8000f98:	e709      	b.n	8000dae <__udivmoddi4+0xde>
 8000f9a:	4464      	add	r4, ip
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	e742      	b.n	8000e26 <__udivmoddi4+0x156>

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <__io_putchar>:
PUTCHAR_PROTOTYPE {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8000fac:	1d39      	adds	r1, r7, #4
 8000fae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	4803      	ldr	r0, [pc, #12]	; (8000fc4 <__io_putchar+0x20>)
 8000fb6:	f008 f901 	bl	80091bc <HAL_UART_Transmit>
	return ch;
 8000fba:	687b      	ldr	r3, [r7, #4]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000590 	.word	0x20000590

08000fc8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	80fb      	strh	r3, [r7, #6]

//#ifdef RAMP_DAC
//	static bool dac_enabled = false;
//#endif

	SystemClock_Config(); // We were in STOP mode so the HSI is selected.
 8000fd2:	f000 fa6b 	bl	80014ac <SystemClock_Config>
	HAL_ResumeTick();
 8000fd6:	f001 fcd7 	bl	8002988 <HAL_ResumeTick>
//		}
//		synth_init = true;
//	}
//#endif

	if (GPIO_Pin == GPIO_PIN_13) { // Blue button
 8000fda:	88fb      	ldrh	r3, [r7, #6]
 8000fdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fe0:	d169      	bne.n	80010b6 <HAL_GPIO_EXTI_Callback+0xee>
		printf("Blue button pressed....\r\n");
 8000fe2:	4836      	ldr	r0, [pc, #216]	; (80010bc <HAL_GPIO_EXTI_Callback+0xf4>)
 8000fe4:	f009 ff08 	bl	800adf8 <puts>

		/* If the button is held down for more than one second then run the POP cycle */
		HAL_Delay(1000);
 8000fe8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fec:	f001 fc98 	bl	8002920 <HAL_Delay>

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 8000ff0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ff4:	4832      	ldr	r0, [pc, #200]	; (80010c0 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000ff6:	f002 fdb1 	bl	8003b5c <HAL_GPIO_ReadPin>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d00a      	beq.n	8001016 <HAL_GPIO_EXTI_Callback+0x4e>
			printf("Long press\r\n");
 8001000:	4830      	ldr	r0, [pc, #192]	; (80010c4 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001002:	f009 fef9 	bl	800adf8 <puts>
			if (pop_running) {
 8001006:	4b30      	ldr	r3, [pc, #192]	; (80010c8 <HAL_GPIO_EXTI_Callback+0x100>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	b2db      	uxtb	r3, r3
 800100c:	2b00      	cmp	r3, #0
 800100e:	d151      	bne.n	80010b4 <HAL_GPIO_EXTI_Callback+0xec>
				return;
			}

			start_pop();
 8001010:	f00b ff26 	bl	800ce60 <__start_pop_veneer>
 8001014:	e04f      	b.n	80010b6 <HAL_GPIO_EXTI_Callback+0xee>

		} else {
			printf("Short press\r\n");
 8001016:	482d      	ldr	r0, [pc, #180]	; (80010cc <HAL_GPIO_EXTI_Callback+0x104>)
 8001018:	f009 feee 	bl	800adf8 <puts>
			/* We want to run CW so stop the POP cycle if it's running */
			if (pop_running) {
 800101c:	4b2a      	ldr	r3, [pc, #168]	; (80010c8 <HAL_GPIO_EXTI_Callback+0x100>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	d002      	beq.n	800102c <HAL_GPIO_EXTI_Callback+0x64>
				stop_pop();
 8001026:	f00b ff2f 	bl	800ce88 <__stop_pop_veneer>
 800102a:	e044      	b.n	80010b6 <HAL_GPIO_EXTI_Callback+0xee>
				return;
			}

#ifdef ATTENUATOR_CODE
			/* Set the attenuator for minimum attenuation */
			const struct AttenuatorSettings attenuator_settings = {0,0,0,0,0,0,0}; // 0 dB
 800102c:	2300      	movs	r3, #0
 800102e:	733b      	strb	r3, [r7, #12]
			set_aom_atten(attenuator_settings);
 8001030:	7b38      	ldrb	r0, [r7, #12]
 8001032:	f00b ff25 	bl	800ce80 <__set_aom_atten_veneer>
#endif //ATTENUATOR_CODE

			/* Enable the AOM drive power */
			if (HAL_HRTIM_WaveformOutputStart(&hhrtim,
 8001036:	f240 1103 	movw	r1, #259	; 0x103
 800103a:	4825      	ldr	r0, [pc, #148]	; (80010d0 <HAL_GPIO_EXTI_Callback+0x108>)
 800103c:	f003 f9f4 	bl	8004428 <HAL_HRTIM_WaveformOutputStart>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d004      	beq.n	8001050 <HAL_GPIO_EXTI_Callback+0x88>
			HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1) != HAL_OK) {
				printf("Failure point H!\r\n");
 8001046:	4823      	ldr	r0, [pc, #140]	; (80010d4 <HAL_GPIO_EXTI_Callback+0x10c>)
 8001048:	f009 fed6 	bl	800adf8 <puts>
				Error_Handler();
 800104c:	f000 ff16 	bl	8001e7c <Error_Handler>
			}

			if (HAL_HRTIM_WaveformSetOutputLevel(&hhrtim,
 8001050:	2302      	movs	r3, #2
 8001052:	2201      	movs	r2, #1
 8001054:	2100      	movs	r1, #0
 8001056:	481e      	ldr	r0, [pc, #120]	; (80010d0 <HAL_GPIO_EXTI_Callback+0x108>)
 8001058:	f003 f8f0 	bl	800423c <HAL_HRTIM_WaveformSetOutputLevel>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d004      	beq.n	800106c <HAL_GPIO_EXTI_Callback+0xa4>
					HRTIM_TIMERINDEX_TIMER_A,
					HRTIM_OUTPUT_TA1, HRTIM_OUTPUTLEVEL_INACTIVE) != HAL_OK) {
				printf("Failure point I!\r\n");
 8001062:	481d      	ldr	r0, [pc, #116]	; (80010d8 <HAL_GPIO_EXTI_Callback+0x110>)
 8001064:	f009 fec8 	bl	800adf8 <puts>
				Error_Handler();
 8001068:	f000 ff08 	bl	8001e7c <Error_Handler>
			}

			/* Enable the Microwaves */
			if (HAL_HRTIM_WaveformSetOutputLevel(&hhrtim,
 800106c:	2301      	movs	r3, #1
 800106e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001072:	2104      	movs	r1, #4
 8001074:	4816      	ldr	r0, [pc, #88]	; (80010d0 <HAL_GPIO_EXTI_Callback+0x108>)
 8001076:	f003 f8e1 	bl	800423c <HAL_HRTIM_WaveformSetOutputLevel>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d004      	beq.n	800108a <HAL_GPIO_EXTI_Callback+0xc2>
					HRTIM_TIMERINDEX_TIMER_E,
					HRTIM_OUTPUT_TE1, HRTIM_OUTPUTLEVEL_ACTIVE) != HAL_OK) {
				printf("Failure point J!\r\n");
 8001080:	4816      	ldr	r0, [pc, #88]	; (80010dc <HAL_GPIO_EXTI_Callback+0x114>)
 8001082:	f009 feb9 	bl	800adf8 <puts>
				Error_Handler();
 8001086:	f000 fef9 	bl	8001e7c <Error_Handler>
			};

			/* Run the frequency sweep */
			printf("Initiating sweep.\r\n");
 800108a:	4815      	ldr	r0, [pc, #84]	; (80010e0 <HAL_GPIO_EXTI_Callback+0x118>)
 800108c:	f009 feb4 	bl	800adf8 <puts>
			while (1) {
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET); //turn on red LED
 8001090:	2201      	movs	r2, #1
 8001092:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001096:	4813      	ldr	r0, [pc, #76]	; (80010e4 <HAL_GPIO_EXTI_Callback+0x11c>)
 8001098:	f002 fd78 	bl	8003b8c <HAL_GPIO_WritePin>
				run_sweep();
 800109c:	f00b fedc 	bl	800ce58 <__run_sweep_veneer>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET); //turn off red LED
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010a6:	480f      	ldr	r0, [pc, #60]	; (80010e4 <HAL_GPIO_EXTI_Callback+0x11c>)
 80010a8:	f002 fd70 	bl	8003b8c <HAL_GPIO_WritePin>
				printf("Sweep complete.\r\n");
 80010ac:	480e      	ldr	r0, [pc, #56]	; (80010e8 <HAL_GPIO_EXTI_Callback+0x120>)
 80010ae:	f009 fea3 	bl	800adf8 <puts>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET); //turn on red LED
 80010b2:	e7ed      	b.n	8001090 <HAL_GPIO_EXTI_Callback+0xc8>
				return;
 80010b4:	bf00      	nop
			}
		}

	}
}
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	0800cf48 	.word	0x0800cf48
 80010c0:	58020800 	.word	0x58020800
 80010c4:	0800cf64 	.word	0x0800cf64
 80010c8:	20000624 	.word	0x20000624
 80010cc:	0800cf70 	.word	0x0800cf70
 80010d0:	200003e4 	.word	0x200003e4
 80010d4:	0800cf80 	.word	0x0800cf80
 80010d8:	0800cf94 	.word	0x0800cf94
 80010dc:	0800cfa8 	.word	0x0800cfa8
 80010e0:	0800cfbc 	.word	0x0800cfbc
 80010e4:	58020400 	.word	0x58020400
 80010e8:	0800cfd0 	.word	0x0800cfd0

080010ec <HAL_LPTIM_AutoReloadMatchCallback>:

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin); //toggle green LED
 80010f4:	2101      	movs	r1, #1
 80010f6:	4803      	ldr	r0, [pc, #12]	; (8001104 <HAL_LPTIM_AutoReloadMatchCallback+0x18>)
 80010f8:	f002 fd61 	bl	8003bbe <HAL_GPIO_TogglePin>
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	58020400 	.word	0x58020400

08001108 <HAL_HRTIM_Compare2EventCallback>:

void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]

	/* Called when the first microwave pulse goes low */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_E) {
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	2b04      	cmp	r3, #4
 8001116:	d11e      	bne.n	8001156 <HAL_HRTIM_Compare2EventCallback+0x4e>
#ifdef ATTENUATOR_CODE
		/* Configure the LASER AOM drive attenuator */
		const struct AttenuatorSettings a = {0,0,0,0,0,1,0}; // 8 dB
 8001118:	7b3b      	ldrb	r3, [r7, #12]
 800111a:	f36f 0300 	bfc	r3, #0, #1
 800111e:	733b      	strb	r3, [r7, #12]
 8001120:	7b3b      	ldrb	r3, [r7, #12]
 8001122:	f36f 0341 	bfc	r3, #1, #1
 8001126:	733b      	strb	r3, [r7, #12]
 8001128:	7b3b      	ldrb	r3, [r7, #12]
 800112a:	f36f 0382 	bfc	r3, #2, #1
 800112e:	733b      	strb	r3, [r7, #12]
 8001130:	7b3b      	ldrb	r3, [r7, #12]
 8001132:	f36f 03c3 	bfc	r3, #3, #1
 8001136:	733b      	strb	r3, [r7, #12]
 8001138:	7b3b      	ldrb	r3, [r7, #12]
 800113a:	f36f 1304 	bfc	r3, #4, #1
 800113e:	733b      	strb	r3, [r7, #12]
 8001140:	7b3b      	ldrb	r3, [r7, #12]
 8001142:	f043 0320 	orr.w	r3, r3, #32
 8001146:	733b      	strb	r3, [r7, #12]
 8001148:	7b3b      	ldrb	r3, [r7, #12]
 800114a:	f36f 1386 	bfc	r3, #6, #1
 800114e:	733b      	strb	r3, [r7, #12]
		set_aom_atten(a);
 8001150:	7b38      	ldrb	r0, [r7, #12]
 8001152:	f00b fe95 	bl	800ce80 <__set_aom_atten_veneer>
#endif //ATTENUATOR_CODE
	}

}
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <HAL_HRTIM_Compare3EventCallback>:

void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b088      	sub	sp, #32
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]

	/* Called at the end of a POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d175      	bne.n	800125c <HAL_HRTIM_Compare3EventCallback+0xfc>
#ifdef ATTENUATOR_CODE
		/* Reset the attenuator to 0 dB */
		const struct AttenuatorSettings a = { 0, 0, 0, 0, 0, 0, 0 }; // 0 dB
 8001170:	2300      	movs	r3, #0
 8001172:	723b      	strb	r3, [r7, #8]
		set_aom_atten(a);
 8001174:	7a38      	ldrb	r0, [r7, #8]
 8001176:	f00b fe83 	bl	800ce80 <__set_aom_atten_veneer>
#endif //ATTENUATOR_CODE

		const double start_freq = ((long)(sweep_settings.req_start_freq/sweep_settings.step_size)) * sweep_settings.step_size;
 800117a:	4b3a      	ldr	r3, [pc, #232]	; (8001264 <HAL_HRTIM_Compare3EventCallback+0x104>)
 800117c:	ed93 5b00 	vldr	d5, [r3]
 8001180:	4b38      	ldr	r3, [pc, #224]	; (8001264 <HAL_HRTIM_Compare3EventCallback+0x104>)
 8001182:	ed93 6b04 	vldr	d6, [r3, #16]
 8001186:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800118a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800118e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001192:	4b34      	ldr	r3, [pc, #208]	; (8001264 <HAL_HRTIM_Compare3EventCallback+0x104>)
 8001194:	ed93 7b04 	vldr	d7, [r3, #16]
 8001198:	ee26 7b07 	vmul.f64	d7, d6, d7
 800119c:	ed87 7b06 	vstr	d7, [r7, #24]
		const double stop_freq = ((long)((sweep_settings.req_stop_freq/sweep_settings.step_size) + 0.5)) * sweep_settings.step_size;
 80011a0:	4b30      	ldr	r3, [pc, #192]	; (8001264 <HAL_HRTIM_Compare3EventCallback+0x104>)
 80011a2:	ed93 5b02 	vldr	d5, [r3, #8]
 80011a6:	4b2f      	ldr	r3, [pc, #188]	; (8001264 <HAL_HRTIM_Compare3EventCallback+0x104>)
 80011a8:	ed93 6b04 	vldr	d6, [r3, #16]
 80011ac:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80011b0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80011b4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80011b8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80011bc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80011c0:	4b28      	ldr	r3, [pc, #160]	; (8001264 <HAL_HRTIM_Compare3EventCallback+0x104>)
 80011c2:	ed93 7b04 	vldr	d7, [r3, #16]
 80011c6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80011ca:	ed87 7b04 	vstr	d7, [r7, #16]
		const uint32_t num_points = ((stop_freq - start_freq)/sweep_settings.step_size) + 1;
 80011ce:	ed97 6b04 	vldr	d6, [r7, #16]
 80011d2:	ed97 7b06 	vldr	d7, [r7, #24]
 80011d6:	ee36 5b47 	vsub.f64	d5, d6, d7
 80011da:	4b22      	ldr	r3, [pc, #136]	; (8001264 <HAL_HRTIM_Compare3EventCallback+0x104>)
 80011dc:	ed93 6b04 	vldr	d6, [r3, #16]
 80011e0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80011e4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80011e8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80011ec:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80011f0:	ee17 3a90 	vmov	r3, s15
 80011f4:	60fb      	str	r3, [r7, #12]
//		static const double stop_freq = ((long)((sweep_settings.req_stop_freq/sweep_settings.step_size) + 0.5)) * sweep_settings.step_size;
//		static const uint32_t num_points = ((stop_freq - start_freq)/sweep_settings.step_size) + 1;
		static uint32_t i = 0;

		/* Configure the Microwave frequency */
		if (i == num_points) {
 80011f6:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <HAL_HRTIM_Compare3EventCallback+0x108>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d106      	bne.n	800120e <HAL_HRTIM_Compare3EventCallback+0xae>
			stop_pop();
 8001200:	f00b fe42 	bl	800ce88 <__stop_pop_veneer>
			i = 0;
 8001204:	4b18      	ldr	r3, [pc, #96]	; (8001268 <HAL_HRTIM_Compare3EventCallback+0x108>)
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
			start_pop();
 800120a:	f00b fe29 	bl	800ce60 <__start_pop_veneer>
		}

#ifdef SYNTH_ENABLE
		set_frequency_hz(start_freq + (i * sweep_settings.step_size));
 800120e:	4b16      	ldr	r3, [pc, #88]	; (8001268 <HAL_HRTIM_Compare3EventCallback+0x108>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	ee07 3a90 	vmov	s15, r3
 8001216:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800121a:	4b12      	ldr	r3, [pc, #72]	; (8001264 <HAL_HRTIM_Compare3EventCallback+0x104>)
 800121c:	ed93 7b04 	vldr	d7, [r3, #16]
 8001220:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001224:	ed97 7b06 	vldr	d7, [r7, #24]
 8001228:	ee36 7b07 	vadd.f64	d7, d6, d7
 800122c:	eeb0 0b47 	vmov.f64	d0, d7
 8001230:	f00b fe22 	bl	800ce78 <__set_frequency_hz_veneer>
#endif

		i = i + 1;
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <HAL_HRTIM_Compare3EventCallback+0x108>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	3301      	adds	r3, #1
 800123a:	4a0b      	ldr	r2, [pc, #44]	; (8001268 <HAL_HRTIM_Compare3EventCallback+0x108>)
 800123c:	6013      	str	r3, [r2, #0]

		pop_cycle_count = pop_cycle_count + 1;
 800123e:	4b0b      	ldr	r3, [pc, #44]	; (800126c <HAL_HRTIM_Compare3EventCallback+0x10c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	3301      	adds	r3, #1
 8001244:	4a09      	ldr	r2, [pc, #36]	; (800126c <HAL_HRTIM_Compare3EventCallback+0x10c>)
 8001246:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); //toggle amber LED
 8001248:	2102      	movs	r1, #2
 800124a:	4809      	ldr	r0, [pc, #36]	; (8001270 <HAL_HRTIM_Compare3EventCallback+0x110>)
 800124c:	f002 fcb7 	bl	8003bbe <HAL_GPIO_TogglePin>
		printf("POP Cycle %lu done.\r\n", pop_cycle_count);
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <HAL_HRTIM_Compare3EventCallback+0x10c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4619      	mov	r1, r3
 8001256:	4807      	ldr	r0, [pc, #28]	; (8001274 <HAL_HRTIM_Compare3EventCallback+0x114>)
 8001258:	f009 fd48 	bl	800acec <iprintf>

	/* Called when the second microwave pulse goes high */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_E) {
	}

}
 800125c:	bf00      	nop
 800125e:	3720      	adds	r7, #32
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	0800d308 	.word	0x0800d308
 8001268:	2000062c 	.word	0x2000062c
 800126c:	20000628 	.word	0x20000628
 8001270:	58021000 	.word	0x58021000
 8001274:	0800cfe4 	.word	0x0800cfe4

08001278 <HAL_HRTIM_RepetitionEventCallback>:

void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef *hhrtim,
		uint32_t TimerIdx) {
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]

	/* Called at the start of the next POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
	}
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* Copy from FLASH to itcm */
  memcpy(&_sitcm, &_siitcm, ((void*) &_eitcm - (void*) &_sitcm));
 8001296:	4a72      	ldr	r2, [pc, #456]	; (8001460 <main+0x1d0>)
 8001298:	4b72      	ldr	r3, [pc, #456]	; (8001464 <main+0x1d4>)
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	461a      	mov	r2, r3
 800129e:	4972      	ldr	r1, [pc, #456]	; (8001468 <main+0x1d8>)
 80012a0:	4870      	ldr	r0, [pc, #448]	; (8001464 <main+0x1d4>)
 80012a2:	f009 f8c9 	bl	800a438 <memcpy>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80012a6:	4b71      	ldr	r3, [pc, #452]	; (800146c <main+0x1dc>)
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d11b      	bne.n	80012ea <main+0x5a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80012b2:	f3bf 8f4f 	dsb	sy
}
 80012b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012b8:	f3bf 8f6f 	isb	sy
}
 80012bc:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80012be:	4b6b      	ldr	r3, [pc, #428]	; (800146c <main+0x1dc>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80012c6:	f3bf 8f4f 	dsb	sy
}
 80012ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012cc:	f3bf 8f6f 	isb	sy
}
 80012d0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80012d2:	4b66      	ldr	r3, [pc, #408]	; (800146c <main+0x1dc>)
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	4a65      	ldr	r2, [pc, #404]	; (800146c <main+0x1dc>)
 80012d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012dc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012de:	f3bf 8f4f 	dsb	sy
}
 80012e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012e4:	f3bf 8f6f 	isb	sy
}
 80012e8:	e000      	b.n	80012ec <main+0x5c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80012ea:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80012ec:	4b5f      	ldr	r3, [pc, #380]	; (800146c <main+0x1dc>)
 80012ee:	695b      	ldr	r3, [r3, #20]
 80012f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d138      	bne.n	800136a <main+0xda>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80012f8:	4b5c      	ldr	r3, [pc, #368]	; (800146c <main+0x1dc>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001300:	f3bf 8f4f 	dsb	sy
}
 8001304:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001306:	4b59      	ldr	r3, [pc, #356]	; (800146c <main+0x1dc>)
 8001308:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800130c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	0b5b      	lsrs	r3, r3, #13
 8001312:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001316:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	08db      	lsrs	r3, r3, #3
 800131c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001320:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	015a      	lsls	r2, r3, #5
 8001326:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800132a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001330:	494e      	ldr	r1, [pc, #312]	; (800146c <main+0x1dc>)
 8001332:	4313      	orrs	r3, r2
 8001334:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	1e5a      	subs	r2, r3, #1
 800133c:	607a      	str	r2, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1ef      	bne.n	8001322 <main+0x92>
    } while(sets-- != 0U);
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	1e5a      	subs	r2, r3, #1
 8001346:	60ba      	str	r2, [r7, #8]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1e5      	bne.n	8001318 <main+0x88>
  __ASM volatile ("dsb 0xF":::"memory");
 800134c:	f3bf 8f4f 	dsb	sy
}
 8001350:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001352:	4b46      	ldr	r3, [pc, #280]	; (800146c <main+0x1dc>)
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	4a45      	ldr	r2, [pc, #276]	; (800146c <main+0x1dc>)
 8001358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800135c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800135e:	f3bf 8f4f 	dsb	sy
}
 8001362:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001364:	f3bf 8f6f 	isb	sy
}
 8001368:	e000      	b.n	800136c <main+0xdc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800136a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800136c:	f001 fa46 	bl	80027fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001370:	f000 f89c 	bl	80014ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001374:	f000 fc46 	bl	8001c04 <MX_GPIO_Init>
  MX_LPTIM1_Init();
 8001378:	f000 fb26 	bl	80019c8 <MX_LPTIM1_Init>
  MX_DAC1_Init();
 800137c:	f000 f954 	bl	8001628 <MX_DAC1_Init>
  MX_USART3_UART_Init();
 8001380:	f000 fbf2 	bl	8001b68 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001384:	f000 fba2 	bl	8001acc <MX_TIM3_Init>
  MX_TIM1_Init();
 8001388:	f000 fb4c 	bl	8001a24 <MX_TIM1_Init>
  MX_HRTIM_Init();
 800138c:	f000 f9ca 	bl	8001724 <MX_HRTIM_Init>
  MX_ETH_Init();
 8001390:	f000 f97c 	bl	800168c <MX_ETH_Init>
  /* USER CODE BEGIN 2 */
  printf("\033c"); //clears screen
 8001394:	4836      	ldr	r0, [pc, #216]	; (8001470 <main+0x1e0>)
 8001396:	f009 fca9 	bl	800acec <iprintf>
  printf("Atomic Clock - Source __TIMESTAMP__: %s\r\n", __TIMESTAMP__);
 800139a:	4936      	ldr	r1, [pc, #216]	; (8001474 <main+0x1e4>)
 800139c:	4836      	ldr	r0, [pc, #216]	; (8001478 <main+0x1e8>)
 800139e:	f009 fca5 	bl	800acec <iprintf>

#ifdef SYNTH_ENABLE
	if (init_synthesiser() != SUCCESS) {
 80013a2:	f00b fd61 	bl	800ce68 <__init_synthesiser_veneer>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d004      	beq.n	80013b6 <main+0x126>
		printf("Synthesiser initialisation failed!\r\n");
 80013ac:	4833      	ldr	r0, [pc, #204]	; (800147c <main+0x1ec>)
 80013ae:	f009 fd23 	bl	800adf8 <puts>
		Error_Handler();
 80013b2:	f000 fd63 	bl	8001e7c <Error_Handler>
	}
#endif

	/* Start a low power timer to flash an LED approximately every second */
	if (HAL_LPTIM_Counter_Start_IT(&hlptim1, 1024) != HAL_OK) {
 80013b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ba:	4831      	ldr	r0, [pc, #196]	; (8001480 <main+0x1f0>)
 80013bc:	f004 f904 	bl	80055c8 <HAL_LPTIM_Counter_Start_IT>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d004      	beq.n	80013d0 <main+0x140>
		printf("Failed to start slow flashing LED!\r\n");
 80013c6:	482f      	ldr	r0, [pc, #188]	; (8001484 <main+0x1f4>)
 80013c8:	f009 fd16 	bl	800adf8 <puts>
		Error_Handler();
 80013cc:	f000 fd56 	bl	8001e7c <Error_Handler>
	}

	/* Start the DAC and zero its output */
	if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK) {
 80013d0:	2100      	movs	r1, #0
 80013d2:	482d      	ldr	r0, [pc, #180]	; (8001488 <main+0x1f8>)
 80013d4:	f001 fc39 	bl	8002c4a <HAL_DAC_Start>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d004      	beq.n	80013e8 <main+0x158>
		printf("Failure to initialise DAC \r\n");
 80013de:	482b      	ldr	r0, [pc, #172]	; (800148c <main+0x1fc>)
 80013e0:	f009 fd0a 	bl	800adf8 <puts>
		Error_Handler();
 80013e4:	f000 fd4a 	bl	8001e7c <Error_Handler>
	}
	printf("Setting DAC output to 1.00V \r\n");
 80013e8:	4829      	ldr	r0, [pc, #164]	; (8001490 <main+0x200>)
 80013ea:	f009 fd05 	bl	800adf8 <puts>
	if(HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1241) != HAL_OK){
 80013ee:	f240 43d9 	movw	r3, #1241	; 0x4d9
 80013f2:	2200      	movs	r2, #0
 80013f4:	2100      	movs	r1, #0
 80013f6:	4824      	ldr	r0, [pc, #144]	; (8001488 <main+0x1f8>)
 80013f8:	f001 fc79 	bl	8002cee <HAL_DAC_SetValue>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d004      	beq.n	800140c <main+0x17c>
		printf("DAC setup failed!\r\n");
 8001402:	4824      	ldr	r0, [pc, #144]	; (8001494 <main+0x204>)
 8001404:	f009 fcf8 	bl	800adf8 <puts>
		Error_Handler();
 8001408:	f000 fd38 	bl	8001e7c <Error_Handler>
	}

//	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
//	printf("Setting trigger output high \r\n");
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output high
 800140c:	2200      	movs	r2, #0
 800140e:	2101      	movs	r1, #1
 8001410:	4821      	ldr	r0, [pc, #132]	; (8001498 <main+0x208>)
 8001412:	f002 fbbb 	bl	8003b8c <HAL_GPIO_WritePin>
	printf("Setting trigger output low \r\n");
 8001416:	4821      	ldr	r0, [pc, #132]	; (800149c <main+0x20c>)
 8001418:	f009 fcee 	bl	800adf8 <puts>
//	GPIO_PIN_RESET
//	GPIO_PIN_SET

	/* Spare SMA pin control works */
//	SPARE_SMA_GPIO_Port, SPARE_SMA_Pin
	HAL_GPIO_WritePin(SPARE_SMA_GPIO_Port, SPARE_SMA_Pin, GPIO_PIN_SET); // Sets spare SMA output high
 800141c:	2201      	movs	r2, #1
 800141e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001422:	481f      	ldr	r0, [pc, #124]	; (80014a0 <main+0x210>)
 8001424:	f002 fbb2 	bl	8003b8c <HAL_GPIO_WritePin>
	printf("Setting spare SMA output high \r\n");
 8001428:	481e      	ldr	r0, [pc, #120]	; (80014a4 <main+0x214>)
 800142a:	f009 fce5 	bl	800adf8 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		if (!pop_running) {
 800142e:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <main+0x218>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	f083 0301 	eor.w	r3, r3, #1
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d008      	beq.n	8001450 <main+0x1c0>
			HAL_SuspendTick(); // Needs to be paused or the interrupt will bring us out of STOP mode.
 800143e:	f001 fa93 	bl	8002968 <HAL_SuspendTick>
			HAL_PWREx_EnableFlashPowerDown();
 8001442:	f004 fcb1 	bl	8005da8 <HAL_PWREx_EnableFlashPowerDown>
			HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI); // We will only resume when an interrupt occurs
 8001446:	2101      	movs	r1, #1
 8001448:	2001      	movs	r0, #1
 800144a:	f004 fc37 	bl	8005cbc <HAL_PWR_EnterSTOPMode>
 800144e:	e7ee      	b.n	800142e <main+0x19e>
		} else {
			HAL_SuspendTick(); // Needs to be paused or the interrupt will bring us out of SLEEP mode.
 8001450:	f001 fa8a 	bl	8002968 <HAL_SuspendTick>
			HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI); // We will only resume when an interrupt occurs.
 8001454:	2101      	movs	r1, #1
 8001456:	2000      	movs	r0, #0
 8001458:	f004 fc16 	bl	8005c88 <HAL_PWR_EnterSLEEPMode>
		if (!pop_running) {
 800145c:	e7e7      	b.n	800142e <main+0x19e>
 800145e:	bf00      	nop
 8001460:	00000918 	.word	0x00000918
 8001464:	00000000 	.word	0x00000000
 8001468:	08000298 	.word	0x08000298
 800146c:	e000ed00 	.word	0xe000ed00
 8001470:	0800cffc 	.word	0x0800cffc
 8001474:	0800d000 	.word	0x0800d000
 8001478:	0800d01c 	.word	0x0800d01c
 800147c:	0800d048 	.word	0x0800d048
 8001480:	200004c0 	.word	0x200004c0
 8001484:	0800d06c 	.word	0x0800d06c
 8001488:	20000320 	.word	0x20000320
 800148c:	0800d090 	.word	0x0800d090
 8001490:	0800d0ac 	.word	0x0800d0ac
 8001494:	0800d0cc 	.word	0x0800d0cc
 8001498:	58021800 	.word	0x58021800
 800149c:	0800d0e0 	.word	0x0800d0e0
 80014a0:	58020400 	.word	0x58020400
 80014a4:	0800d100 	.word	0x0800d100
 80014a8:	20000624 	.word	0x20000624

080014ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b0a4      	sub	sp, #144	; 0x90
 80014b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80014b6:	224c      	movs	r2, #76	; 0x4c
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f008 ffca 	bl	800a454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c4:	2220      	movs	r2, #32
 80014c6:	2100      	movs	r1, #0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f008 ffc3 	bl	800a454 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 80014ce:	f107 030c 	add.w	r3, r7, #12
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	611a      	str	r2, [r3, #16]
 80014de:	615a      	str	r2, [r3, #20]

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80014e0:	2002      	movs	r0, #2
 80014e2:	f004 fc27 	bl	8005d34 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	4b4c      	ldr	r3, [pc, #304]	; (800161c <SystemClock_Config+0x170>)
 80014ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ee:	4a4b      	ldr	r2, [pc, #300]	; (800161c <SystemClock_Config+0x170>)
 80014f0:	f023 0301 	bic.w	r3, r3, #1
 80014f4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80014f6:	4b49      	ldr	r3, [pc, #292]	; (800161c <SystemClock_Config+0x170>)
 80014f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	4b47      	ldr	r3, [pc, #284]	; (8001620 <SystemClock_Config+0x174>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	4a46      	ldr	r2, [pc, #280]	; (8001620 <SystemClock_Config+0x174>)
 8001506:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800150a:	6193      	str	r3, [r2, #24]
 800150c:	4b44      	ldr	r3, [pc, #272]	; (8001620 <SystemClock_Config+0x174>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001518:	bf00      	nop
 800151a:	4b41      	ldr	r3, [pc, #260]	; (8001620 <SystemClock_Config+0x174>)
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001526:	d1f8      	bne.n	800151a <SystemClock_Config+0x6e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001528:	f004 fb9e 	bl	8005c68 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800152c:	f001 fa3c 	bl	80029a8 <HAL_GetREVID>
 8001530:	4b3c      	ldr	r3, [pc, #240]	; (8001624 <SystemClock_Config+0x178>)
 8001532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001534:	4a3b      	ldr	r2, [pc, #236]	; (8001624 <SystemClock_Config+0x178>)
 8001536:	f023 0318 	bic.w	r3, r3, #24
 800153a:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 800153c:	2325      	movs	r3, #37	; 0x25
 800153e:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001540:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001544:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001546:	2301      	movs	r3, #1
 8001548:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800154a:	2301      	movs	r3, #1
 800154c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800154e:	2302      	movs	r3, #2
 8001550:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001552:	2302      	movs	r3, #2
 8001554:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001556:	2301      	movs	r3, #1
 8001558:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 80;
 800155a:	2350      	movs	r3, #80	; 0x50
 800155c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 800155e:	2302      	movs	r3, #2
 8001560:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001562:	2304      	movs	r3, #4
 8001564:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001566:	2302      	movs	r3, #2
 8001568:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800156c:	230c      	movs	r3, #12
 800156e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001572:	2300      	movs	r3, #0
 8001574:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800157e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001582:	4618      	mov	r0, r3
 8001584:	f004 fc20 	bl	8005dc8 <HAL_RCC_OscConfig>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800158e:	f000 fc75 	bl	8001e7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001592:	233f      	movs	r3, #63	; 0x3f
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001596:	2303      	movs	r3, #3
 8001598:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800159a:	2300      	movs	r3, #0
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 800159e:	2309      	movs	r3, #9
 80015a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80015a2:	2300      	movs	r3, #0
 80015a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80015a6:	2300      	movs	r3, #0
 80015a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV16;
 80015aa:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80015ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80015b0:	2300      	movs	r3, #0
 80015b2:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b8:	2101      	movs	r1, #1
 80015ba:	4618      	mov	r0, r3
 80015bc:	f005 f85e 	bl	800667c <HAL_RCC_ClockConfig>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <SystemClock_Config+0x11e>
  {
    Error_Handler();
 80015c6:	f000 fc59 	bl	8001e7c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80015ca:	f005 fa0d 	bl	80069e8 <HAL_RCC_EnableCSS>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 80015ce:	4b15      	ldr	r3, [pc, #84]	; (8001624 <SystemClock_Config+0x178>)
 80015d0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80015d4:	4a13      	ldr	r2, [pc, #76]	; (8001624 <SystemClock_Config+0x178>)
 80015d6:	f043 0302 	orr.w	r3, r3, #2
 80015da:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80015de:	4b11      	ldr	r3, [pc, #68]	; (8001624 <SystemClock_Config+0x178>)
 80015e0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	607b      	str	r3, [r7, #4]
 80015ea:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 80015f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80015f4:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 80015fa:	f240 53b7 	movw	r3, #1463	; 0x5b7
 80015fe:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8001600:	2322      	movs	r3, #34	; 0x22
 8001602:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8001604:	2320      	movs	r3, #32
 8001606:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8001608:	f107 030c 	add.w	r3, r7, #12
 800160c:	4618      	mov	r0, r3
 800160e:	f007 f8b5 	bl	800877c <HAL_RCCEx_CRSConfig>
}
 8001612:	bf00      	nop
 8001614:	3790      	adds	r7, #144	; 0x90
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	58000400 	.word	0x58000400
 8001620:	58024800 	.word	0x58024800
 8001624:	58024400 	.word	0x58024400

08001628 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	2224      	movs	r2, #36	; 0x24
 8001632:	2100      	movs	r1, #0
 8001634:	4618      	mov	r0, r3
 8001636:	f008 ff0d 	bl	800a454 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800163a:	4b12      	ldr	r3, [pc, #72]	; (8001684 <MX_DAC1_Init+0x5c>)
 800163c:	4a12      	ldr	r2, [pc, #72]	; (8001688 <MX_DAC1_Init+0x60>)
 800163e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001640:	4810      	ldr	r0, [pc, #64]	; (8001684 <MX_DAC1_Init+0x5c>)
 8001642:	f001 fae0 	bl	8002c06 <HAL_DAC_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800164c:	f000 fc16 	bl	8001e7c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001650:	2300      	movs	r3, #0
 8001652:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001654:	2300      	movs	r3, #0
 8001656:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800165c:	2301      	movs	r3, #1
 800165e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	2200      	movs	r2, #0
 8001668:	4619      	mov	r1, r3
 800166a:	4806      	ldr	r0, [pc, #24]	; (8001684 <MX_DAC1_Init+0x5c>)
 800166c:	f001 fb64 	bl	8002d38 <HAL_DAC_ConfigChannel>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001676:	f000 fc01 	bl	8001e7c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800167a:	bf00      	nop
 800167c:	3728      	adds	r7, #40	; 0x28
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000320 	.word	0x20000320
 8001688:	40007400 	.word	0x40007400

0800168c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001690:	4b1e      	ldr	r3, [pc, #120]	; (800170c <MX_ETH_Init+0x80>)
 8001692:	4a1f      	ldr	r2, [pc, #124]	; (8001710 <MX_ETH_Init+0x84>)
 8001694:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001696:	4b1f      	ldr	r3, [pc, #124]	; (8001714 <MX_ETH_Init+0x88>)
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800169c:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <MX_ETH_Init+0x88>)
 800169e:	2280      	movs	r2, #128	; 0x80
 80016a0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80016a2:	4b1c      	ldr	r3, [pc, #112]	; (8001714 <MX_ETH_Init+0x88>)
 80016a4:	22e1      	movs	r2, #225	; 0xe1
 80016a6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80016a8:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <MX_ETH_Init+0x88>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80016ae:	4b19      	ldr	r3, [pc, #100]	; (8001714 <MX_ETH_Init+0x88>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80016b4:	4b17      	ldr	r3, [pc, #92]	; (8001714 <MX_ETH_Init+0x88>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80016ba:	4b14      	ldr	r3, [pc, #80]	; (800170c <MX_ETH_Init+0x80>)
 80016bc:	4a15      	ldr	r2, [pc, #84]	; (8001714 <MX_ETH_Init+0x88>)
 80016be:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <MX_ETH_Init+0x80>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80016c6:	4b11      	ldr	r3, [pc, #68]	; (800170c <MX_ETH_Init+0x80>)
 80016c8:	4a13      	ldr	r2, [pc, #76]	; (8001718 <MX_ETH_Init+0x8c>)
 80016ca:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80016cc:	4b0f      	ldr	r3, [pc, #60]	; (800170c <MX_ETH_Init+0x80>)
 80016ce:	4a13      	ldr	r2, [pc, #76]	; (800171c <MX_ETH_Init+0x90>)
 80016d0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <MX_ETH_Init+0x80>)
 80016d4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80016d8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80016da:	480c      	ldr	r0, [pc, #48]	; (800170c <MX_ETH_Init+0x80>)
 80016dc:	f001 fc6a 	bl	8002fb4 <HAL_ETH_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80016e6:	f000 fbc9 	bl	8001e7c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80016ea:	2238      	movs	r2, #56	; 0x38
 80016ec:	2100      	movs	r1, #0
 80016ee:	480c      	ldr	r0, [pc, #48]	; (8001720 <MX_ETH_Init+0x94>)
 80016f0:	f008 feb0 	bl	800a454 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80016f4:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <MX_ETH_Init+0x94>)
 80016f6:	2221      	movs	r2, #33	; 0x21
 80016f8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <MX_ETH_Init+0x94>)
 80016fc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001700:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001702:	4b07      	ldr	r3, [pc, #28]	; (8001720 <MX_ETH_Init+0x94>)
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000334 	.word	0x20000334
 8001710:	40028000 	.word	0x40028000
 8001714:	20000630 	.word	0x20000630
 8001718:	2000026c 	.word	0x2000026c
 800171c:	2000020c 	.word	0x2000020c
 8001720:	200002e8 	.word	0x200002e8

08001724 <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b0a4      	sub	sp, #144	; 0x90
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 800172a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8001738:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800173c:	2254      	movs	r2, #84	; 0x54
 800173e:	2100      	movs	r1, #0
 8001740:	4618      	mov	r0, r3
 8001742:	f008 fe87 	bl	800a454 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8001746:	f107 0320 	add.w	r3, r7, #32
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8001752:	463b      	mov	r3, r7
 8001754:	2220      	movs	r2, #32
 8001756:	2100      	movs	r1, #0
 8001758:	4618      	mov	r0, r3
 800175a:	f008 fe7b 	bl	800a454 <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */

  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 800175e:	4b98      	ldr	r3, [pc, #608]	; (80019c0 <MX_HRTIM_Init+0x29c>)
 8001760:	4a98      	ldr	r2, [pc, #608]	; (80019c4 <MX_HRTIM_Init+0x2a0>)
 8001762:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8001764:	4b96      	ldr	r3, [pc, #600]	; (80019c0 <MX_HRTIM_Init+0x29c>)
 8001766:	2200      	movs	r2, #0
 8001768:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 800176a:	4b95      	ldr	r3, [pc, #596]	; (80019c0 <MX_HRTIM_Init+0x29c>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8001770:	4893      	ldr	r0, [pc, #588]	; (80019c0 <MX_HRTIM_Init+0x29c>)
 8001772:	f002 fa59 	bl	8003c28 <HAL_HRTIM_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_HRTIM_Init+0x5c>
  {
    Error_Handler();
 800177c:	f000 fb7e 	bl	8001e7c <Error_Handler>
  }
  pTimeBaseCfg.Period = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH+POP_CYCLE_DELAY;
 8001780:	f24c 2318 	movw	r3, #49688	; 0xc218
 8001784:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8001788:	2300      	movs	r3, #0
 800178a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV4;
 800178e:	2307      	movs	r3, #7
 8001790:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8001794:	2308      	movs	r3, #8
 8001796:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 800179a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800179e:	461a      	mov	r2, r3
 80017a0:	2100      	movs	r1, #0
 80017a2:	4887      	ldr	r0, [pc, #540]	; (80019c0 <MX_HRTIM_Init+0x29c>)
 80017a4:	f002 fb10 	bl	8003dc8 <HAL_HRTIM_TimeBaseConfig>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_HRTIM_Init+0x8e>
  {
    Error_Handler();
 80017ae:	f000 fb65 	bl	8001e7c <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP3|HRTIM_TIM_IT_REP;
 80017b2:	2314      	movs	r3, #20
 80017b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 80017ba:	2300      	movs	r3, #0
 80017bc:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 80017be:	2300      	movs	r3, #0
 80017c0:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 80017c2:	2301      	movs	r3, #1
 80017c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 80017c6:	2300      	movs	r3, #0
 80017c8:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 80017ca:	2300      	movs	r3, #0
 80017cc:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 80017ce:	2300      	movs	r3, #0
 80017d0:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 80017d2:	2300      	movs	r3, #0
 80017d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 80017d6:	2300      	movs	r3, #0
 80017d8:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 80017da:	2300      	movs	r3, #0
 80017dc:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 80017de:	2300      	movs	r3, #0
 80017e0:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 80017e2:	2300      	movs	r3, #0
 80017e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 80017e6:	2300      	movs	r3, #0
 80017e8:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 80017ea:	2300      	movs	r3, #0
 80017ec:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 80017f2:	2300      	movs	r3, #0
 80017f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 80017f6:	2300      	movs	r3, #0
 80017f8:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 80017fe:	2300      	movs	r3, #0
 8001800:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8001802:	2300      	movs	r3, #0
 8001804:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8001806:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800180a:	461a      	mov	r2, r3
 800180c:	2100      	movs	r1, #0
 800180e:	486c      	ldr	r0, [pc, #432]	; (80019c0 <MX_HRTIM_Init+0x29c>)
 8001810:	f002 fb02 	bl	8003e18 <HAL_HRTIM_WaveformTimerConfig>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_HRTIM_Init+0xfa>
  {
    Error_Handler();
 800181a:	f000 fb2f 	bl	8001e7c <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP2|HRTIM_TIM_IT_CMP3;
 800181e:	2306      	movs	r3, #6
 8001820:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8001822:	2300      	movs	r3, #0
 8001824:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 8001826:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800182a:	461a      	mov	r2, r3
 800182c:	2104      	movs	r1, #4
 800182e:	4864      	ldr	r0, [pc, #400]	; (80019c0 <MX_HRTIM_Init+0x29c>)
 8001830:	f002 faf2 	bl	8003e18 <HAL_HRTIM_WaveformTimerConfig>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_HRTIM_Init+0x11a>
  {
    Error_Handler();
 800183a:	f000 fb1f 	bl	8001e7c <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH;
 800183e:	f240 631b 	movw	r3, #1563	; 0x61b
 8001842:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8001844:	f107 0320 	add.w	r3, r7, #32
 8001848:	2201      	movs	r2, #1
 800184a:	2100      	movs	r1, #0
 800184c:	485c      	ldr	r0, [pc, #368]	; (80019c0 <MX_HRTIM_Init+0x29c>)
 800184e:	f002 fb55 	bl	8003efc <HAL_HRTIM_WaveformCompareConfig>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_HRTIM_Init+0x138>
  {
    Error_Handler();
 8001858:	f000 fb10 	bl	8001e7c <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME;
 800185c:	f244 5395 	movw	r3, #17813	; 0x4595
 8001860:	623b      	str	r3, [r7, #32]
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8001862:	2300      	movs	r3, #0
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8001866:	2300      	movs	r3, #0
 8001868:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 800186a:	f107 0320 	add.w	r3, r7, #32
 800186e:	2202      	movs	r2, #2
 8001870:	2100      	movs	r1, #0
 8001872:	4853      	ldr	r0, [pc, #332]	; (80019c0 <MX_HRTIM_Init+0x29c>)
 8001874:	f002 fb42 	bl	8003efc <HAL_HRTIM_WaveformCompareConfig>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_HRTIM_Init+0x15e>
  {
    Error_Handler();
 800187e:	f000 fafd 	bl	8001e7c <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH;
 8001882:	f640 536e 	movw	r3, #3438	; 0xd6e
 8001886:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8001888:	f107 0320 	add.w	r3, r7, #32
 800188c:	2202      	movs	r2, #2
 800188e:	2104      	movs	r1, #4
 8001890:	484b      	ldr	r0, [pc, #300]	; (80019c0 <MX_HRTIM_Init+0x29c>)
 8001892:	f002 fb33 	bl	8003efc <HAL_HRTIM_WaveformCompareConfig>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_HRTIM_Init+0x17c>
  {
    Error_Handler();
 800189c:	f000 faee 	bl	8001e7c <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH;
 80018a0:	f644 0306 	movw	r3, #18438	; 0x4806
 80018a4:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 80018a6:	f107 0320 	add.w	r3, r7, #32
 80018aa:	2204      	movs	r2, #4
 80018ac:	2100      	movs	r1, #0
 80018ae:	4844      	ldr	r0, [pc, #272]	; (80019c0 <MX_HRTIM_Init+0x29c>)
 80018b0:	f002 fb24 	bl	8003efc <HAL_HRTIM_WaveformCompareConfig>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_HRTIM_Init+0x19a>
  {
    Error_Handler();
 80018ba:	f000 fadf 	bl	8001e7c <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME+MICROWAVE_WIDTH;
 80018be:	f244 435d 	movw	r3, #17501	; 0x445d
 80018c2:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_4, &pCompareCfg) != HAL_OK)
 80018c4:	f107 0320 	add.w	r3, r7, #32
 80018c8:	2208      	movs	r2, #8
 80018ca:	2104      	movs	r1, #4
 80018cc:	483c      	ldr	r0, [pc, #240]	; (80019c0 <MX_HRTIM_Init+0x29c>)
 80018ce:	f002 fb15 	bl	8003efc <HAL_HRTIM_WaveformCompareConfig>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_HRTIM_Init+0x1b8>
  {
    Error_Handler();
 80018d8:	f000 fad0 	bl	8001e7c <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 80018dc:	2302      	movs	r3, #2
 80018de:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1|HRTIM_OUTPUTSET_TIMCMP3;
 80018e0:	2328      	movs	r3, #40	; 0x28
 80018e2:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMPER;
 80018e4:	2314      	movs	r3, #20
 80018e6:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 80018e8:	2300      	movs	r3, #0
 80018ea:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 80018ec:	2308      	movs	r3, #8
 80018ee:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 80018fc:	463b      	mov	r3, r7
 80018fe:	2201      	movs	r2, #1
 8001900:	2100      	movs	r1, #0
 8001902:	482f      	ldr	r0, [pc, #188]	; (80019c0 <MX_HRTIM_Init+0x29c>)
 8001904:	f002 fc68 	bl	80041d8 <HAL_HRTIM_WaveformOutputConfig>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_HRTIM_Init+0x1ee>
  {
    Error_Handler();
 800190e:	f000 fab5 	bl	8001e7c <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8001912:	2300      	movs	r3, #0
 8001914:	603b      	str	r3, [r7, #0]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMCMP4;
 8001916:	2350      	movs	r3, #80	; 0x50
 8001918:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 800191e:	463b      	mov	r3, r7
 8001920:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001924:	2104      	movs	r1, #4
 8001926:	4826      	ldr	r0, [pc, #152]	; (80019c0 <MX_HRTIM_Init+0x29c>)
 8001928:	f002 fc56 	bl	80041d8 <HAL_HRTIM_WaveformOutputConfig>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_HRTIM_Init+0x212>
  {
    Error_Handler();
 8001932:	f000 faa3 	bl	8001e7c <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 8001936:	2302      	movs	r3, #2
 8001938:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP3;
 800193a:	2320      	movs	r3, #32
 800193c:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 800193e:	2310      	movs	r3, #16
 8001940:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 8001942:	2308      	movs	r3, #8
 8001944:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8001946:	463b      	mov	r3, r7
 8001948:	2202      	movs	r2, #2
 800194a:	2100      	movs	r1, #0
 800194c:	481c      	ldr	r0, [pc, #112]	; (80019c0 <MX_HRTIM_Init+0x29c>)
 800194e:	f002 fc43 	bl	80041d8 <HAL_HRTIM_WaveformOutputConfig>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_HRTIM_Init+0x238>
  {
    Error_Handler();
 8001958:	f000 fa90 	bl	8001e7c <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 800195c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001960:	461a      	mov	r2, r3
 8001962:	2104      	movs	r1, #4
 8001964:	4816      	ldr	r0, [pc, #88]	; (80019c0 <MX_HRTIM_Init+0x29c>)
 8001966:	f002 fa2f 	bl	8003dc8 <HAL_HRTIM_TimeBaseConfig>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_HRTIM_Init+0x250>
  {
    Error_Handler();
 8001970:	f000 fa84 	bl	8001e7c <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY;
 8001974:	f240 7353 	movw	r3, #1875	; 0x753
 8001978:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 800197a:	f107 0320 	add.w	r3, r7, #32
 800197e:	2201      	movs	r2, #1
 8001980:	2104      	movs	r1, #4
 8001982:	480f      	ldr	r0, [pc, #60]	; (80019c0 <MX_HRTIM_Init+0x29c>)
 8001984:	f002 faba 	bl	8003efc <HAL_HRTIM_WaveformCompareConfig>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_HRTIM_Init+0x26e>
  {
    Error_Handler();
 800198e:	f000 fa75 	bl	8001e7c <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME;
 8001992:	f643 6342 	movw	r3, #15938	; 0x3e42
 8001996:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8001998:	f107 0320 	add.w	r3, r7, #32
 800199c:	2204      	movs	r2, #4
 800199e:	2104      	movs	r1, #4
 80019a0:	4807      	ldr	r0, [pc, #28]	; (80019c0 <MX_HRTIM_Init+0x29c>)
 80019a2:	f002 faab 	bl	8003efc <HAL_HRTIM_WaveformCompareConfig>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_HRTIM_Init+0x28c>
  {
    Error_Handler();
 80019ac:	f000 fa66 	bl	8001e7c <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 80019b0:	4803      	ldr	r0, [pc, #12]	; (80019c0 <MX_HRTIM_Init+0x29c>)
 80019b2:	f000 fc0b 	bl	80021cc <HAL_HRTIM_MspPostInit>

}
 80019b6:	bf00      	nop
 80019b8:	3790      	adds	r7, #144	; 0x90
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	200003e4 	.word	0x200003e4
 80019c4:	40017400 	.word	0x40017400

080019c8 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80019cc:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <MX_LPTIM1_Init+0x54>)
 80019ce:	4a14      	ldr	r2, [pc, #80]	; (8001a20 <MX_LPTIM1_Init+0x58>)
 80019d0:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80019d2:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <MX_LPTIM1_Init+0x54>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV32;
 80019d8:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <MX_LPTIM1_Init+0x54>)
 80019da:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80019de:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80019e0:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <MX_LPTIM1_Init+0x54>)
 80019e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019e6:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <MX_LPTIM1_Init+0x54>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80019ee:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <MX_LPTIM1_Init+0x54>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80019f4:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <MX_LPTIM1_Init+0x54>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80019fa:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <MX_LPTIM1_Init+0x54>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <MX_LPTIM1_Init+0x54>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001a06:	4805      	ldr	r0, [pc, #20]	; (8001a1c <MX_LPTIM1_Init+0x54>)
 8001a08:	f003 fd2e 	bl	8005468 <HAL_LPTIM_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8001a12:	f000 fa33 	bl	8001e7c <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200004c0 	.word	0x200004c0
 8001a20:	40002400 	.word	0x40002400

08001a24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b088      	sub	sp, #32
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a2a:	f107 0310 	add.w	r3, r7, #16
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a42:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <MX_TIM1_Init+0xa0>)
 8001a44:	4a20      	ldr	r2, [pc, #128]	; (8001ac8 <MX_TIM1_Init+0xa4>)
 8001a46:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1249;
 8001a48:	4b1e      	ldr	r3, [pc, #120]	; (8001ac4 <MX_TIM1_Init+0xa0>)
 8001a4a:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001a4e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a50:	4b1c      	ldr	r3, [pc, #112]	; (8001ac4 <MX_TIM1_Init+0xa0>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a56:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <MX_TIM1_Init+0xa0>)
 8001a58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a5c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5e:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <MX_TIM1_Init+0xa0>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a64:	4b17      	ldr	r3, [pc, #92]	; (8001ac4 <MX_TIM1_Init+0xa0>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6a:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <MX_TIM1_Init+0xa0>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a70:	4814      	ldr	r0, [pc, #80]	; (8001ac4 <MX_TIM1_Init+0xa0>)
 8001a72:	f007 f83d 	bl	8008af0 <HAL_TIM_Base_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001a7c:	f000 f9fe 	bl	8001e7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a86:	f107 0310 	add.w	r3, r7, #16
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	480d      	ldr	r0, [pc, #52]	; (8001ac4 <MX_TIM1_Init+0xa0>)
 8001a8e:	f007 f887 	bl	8008ba0 <HAL_TIM_ConfigClockSource>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001a98:	f000 f9f0 	bl	8001e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <MX_TIM1_Init+0xa0>)
 8001aae:	f007 faa7 	bl	8009000 <HAL_TIMEx_MasterConfigSynchronization>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001ab8:	f000 f9e0 	bl	8001e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001abc:	bf00      	nop
 8001abe:	3720      	adds	r7, #32
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	200004f8 	.word	0x200004f8
 8001ac8:	40010000 	.word	0x40010000

08001acc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ad2:	f107 0310 	add.w	r3, r7, #16
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001aea:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <MX_TIM3_Init+0x94>)
 8001aec:	4a1d      	ldr	r2, [pc, #116]	; (8001b64 <MX_TIM3_Init+0x98>)
 8001aee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 124;
 8001af0:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <MX_TIM3_Init+0x94>)
 8001af2:	227c      	movs	r2, #124	; 0x7c
 8001af4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af6:	4b1a      	ldr	r3, [pc, #104]	; (8001b60 <MX_TIM3_Init+0x94>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001afc:	4b18      	ldr	r3, [pc, #96]	; (8001b60 <MX_TIM3_Init+0x94>)
 8001afe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b02:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b04:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <MX_TIM3_Init+0x94>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b0a:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <MX_TIM3_Init+0x94>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b10:	4813      	ldr	r0, [pc, #76]	; (8001b60 <MX_TIM3_Init+0x94>)
 8001b12:	f006 ffed 	bl	8008af0 <HAL_TIM_Base_Init>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001b1c:	f000 f9ae 	bl	8001e7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b26:	f107 0310 	add.w	r3, r7, #16
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	480c      	ldr	r0, [pc, #48]	; (8001b60 <MX_TIM3_Init+0x94>)
 8001b2e:	f007 f837 	bl	8008ba0 <HAL_TIM_ConfigClockSource>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001b38:	f000 f9a0 	bl	8001e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b44:	1d3b      	adds	r3, r7, #4
 8001b46:	4619      	mov	r1, r3
 8001b48:	4805      	ldr	r0, [pc, #20]	; (8001b60 <MX_TIM3_Init+0x94>)
 8001b4a:	f007 fa59 	bl	8009000 <HAL_TIMEx_MasterConfigSynchronization>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001b54:	f000 f992 	bl	8001e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b58:	bf00      	nop
 8001b5a:	3720      	adds	r7, #32
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20000544 	.word	0x20000544
 8001b64:	40000400 	.word	0x40000400

08001b68 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b6c:	4b22      	ldr	r3, [pc, #136]	; (8001bf8 <MX_USART3_UART_Init+0x90>)
 8001b6e:	4a23      	ldr	r2, [pc, #140]	; (8001bfc <MX_USART3_UART_Init+0x94>)
 8001b70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8001b72:	4b21      	ldr	r3, [pc, #132]	; (8001bf8 <MX_USART3_UART_Init+0x90>)
 8001b74:	4a22      	ldr	r2, [pc, #136]	; (8001c00 <MX_USART3_UART_Init+0x98>)
 8001b76:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b78:	4b1f      	ldr	r3, [pc, #124]	; (8001bf8 <MX_USART3_UART_Init+0x90>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b7e:	4b1e      	ldr	r3, [pc, #120]	; (8001bf8 <MX_USART3_UART_Init+0x90>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b84:	4b1c      	ldr	r3, [pc, #112]	; (8001bf8 <MX_USART3_UART_Init+0x90>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b8a:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <MX_USART3_UART_Init+0x90>)
 8001b8c:	220c      	movs	r2, #12
 8001b8e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b90:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <MX_USART3_UART_Init+0x90>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b96:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <MX_USART3_UART_Init+0x90>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b9c:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <MX_USART3_UART_Init+0x90>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ba2:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <MX_USART3_UART_Init+0x90>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ba8:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <MX_USART3_UART_Init+0x90>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001bae:	4812      	ldr	r0, [pc, #72]	; (8001bf8 <MX_USART3_UART_Init+0x90>)
 8001bb0:	f007 fab4 	bl	800911c <HAL_UART_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8001bba:	f000 f95f 	bl	8001e7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	480d      	ldr	r0, [pc, #52]	; (8001bf8 <MX_USART3_UART_Init+0x90>)
 8001bc2:	f008 fb44 	bl	800a24e <HAL_UARTEx_SetTxFifoThreshold>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8001bcc:	f000 f956 	bl	8001e7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	4809      	ldr	r0, [pc, #36]	; (8001bf8 <MX_USART3_UART_Init+0x90>)
 8001bd4:	f008 fb79 	bl	800a2ca <HAL_UARTEx_SetRxFifoThreshold>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8001bde:	f000 f94d 	bl	8001e7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001be2:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <MX_USART3_UART_Init+0x90>)
 8001be4:	f008 fafa 	bl	800a1dc <HAL_UARTEx_DisableFifoMode>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8001bee:	f000 f945 	bl	8001e7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000590 	.word	0x20000590
 8001bfc:	40004800 	.word	0x40004800
 8001c00:	000f4240 	.word	0x000f4240

08001c04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08c      	sub	sp, #48	; 0x30
 8001c08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0a:	f107 031c 	add.w	r3, r7, #28
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	605a      	str	r2, [r3, #4]
 8001c14:	609a      	str	r2, [r3, #8]
 8001c16:	60da      	str	r2, [r3, #12]
 8001c18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c1a:	4b91      	ldr	r3, [pc, #580]	; (8001e60 <MX_GPIO_Init+0x25c>)
 8001c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c20:	4a8f      	ldr	r2, [pc, #572]	; (8001e60 <MX_GPIO_Init+0x25c>)
 8001c22:	f043 0310 	orr.w	r3, r3, #16
 8001c26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c2a:	4b8d      	ldr	r3, [pc, #564]	; (8001e60 <MX_GPIO_Init+0x25c>)
 8001c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c30:	f003 0310 	and.w	r3, r3, #16
 8001c34:	61bb      	str	r3, [r7, #24]
 8001c36:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c38:	4b89      	ldr	r3, [pc, #548]	; (8001e60 <MX_GPIO_Init+0x25c>)
 8001c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c3e:	4a88      	ldr	r2, [pc, #544]	; (8001e60 <MX_GPIO_Init+0x25c>)
 8001c40:	f043 0304 	orr.w	r3, r3, #4
 8001c44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c48:	4b85      	ldr	r3, [pc, #532]	; (8001e60 <MX_GPIO_Init+0x25c>)
 8001c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c4e:	f003 0304 	and.w	r3, r3, #4
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c56:	4b82      	ldr	r3, [pc, #520]	; (8001e60 <MX_GPIO_Init+0x25c>)
 8001c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c5c:	4a80      	ldr	r2, [pc, #512]	; (8001e60 <MX_GPIO_Init+0x25c>)
 8001c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c66:	4b7e      	ldr	r3, [pc, #504]	; (8001e60 <MX_GPIO_Init+0x25c>)
 8001c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c74:	4b7a      	ldr	r3, [pc, #488]	; (8001e60 <MX_GPIO_Init+0x25c>)
 8001c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c7a:	4a79      	ldr	r2, [pc, #484]	; (8001e60 <MX_GPIO_Init+0x25c>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c84:	4b76      	ldr	r3, [pc, #472]	; (8001e60 <MX_GPIO_Init+0x25c>)
 8001c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c92:	4b73      	ldr	r3, [pc, #460]	; (8001e60 <MX_GPIO_Init+0x25c>)
 8001c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c98:	4a71      	ldr	r2, [pc, #452]	; (8001e60 <MX_GPIO_Init+0x25c>)
 8001c9a:	f043 0302 	orr.w	r3, r3, #2
 8001c9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ca2:	4b6f      	ldr	r3, [pc, #444]	; (8001e60 <MX_GPIO_Init+0x25c>)
 8001ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cb0:	4b6b      	ldr	r3, [pc, #428]	; (8001e60 <MX_GPIO_Init+0x25c>)
 8001cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb6:	4a6a      	ldr	r2, [pc, #424]	; (8001e60 <MX_GPIO_Init+0x25c>)
 8001cb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cc0:	4b67      	ldr	r3, [pc, #412]	; (8001e60 <MX_GPIO_Init+0x25c>)
 8001cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cca:	607b      	str	r3, [r7, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cce:	4b64      	ldr	r3, [pc, #400]	; (8001e60 <MX_GPIO_Init+0x25c>)
 8001cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd4:	4a62      	ldr	r2, [pc, #392]	; (8001e60 <MX_GPIO_Init+0x25c>)
 8001cd6:	f043 0308 	orr.w	r3, r3, #8
 8001cda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cde:	4b60      	ldr	r3, [pc, #384]	; (8001e60 <MX_GPIO_Init+0x25c>)
 8001ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce4:	f003 0308 	and.w	r3, r3, #8
 8001ce8:	603b      	str	r3, [r7, #0]
 8001cea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ATT_4_Pin|ATT_8_Pin|ATT_16_Pin, GPIO_PIN_SET);
 8001cec:	2201      	movs	r2, #1
 8001cee:	2134      	movs	r1, #52	; 0x34
 8001cf0:	485c      	ldr	r0, [pc, #368]	; (8001e64 <MX_GPIO_Init+0x260>)
 8001cf2:	f001 ff4b 	bl	8003b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|SPARE_SMA_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f245 0101 	movw	r1, #20481	; 0x5001
 8001cfc:	485a      	ldr	r0, [pc, #360]	; (8001e68 <MX_GPIO_Init+0x264>)
 8001cfe:	f001 ff45 	bl	8003b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2101      	movs	r1, #1
 8001d06:	4859      	ldr	r0, [pc, #356]	; (8001e6c <MX_GPIO_Init+0x268>)
 8001d08:	f001 ff40 	bl	8003b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d12:	4857      	ldr	r0, [pc, #348]	; (8001e70 <MX_GPIO_Init+0x26c>)
 8001d14:	f001 ff3a 	bl	8003b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SCLK_Pin|MOSI_Pin|REG_EN_Pin, GPIO_PIN_RESET);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8001d1e:	4855      	ldr	r0, [pc, #340]	; (8001e74 <MX_GPIO_Init+0x270>)
 8001d20:	f001 ff34 	bl	8003b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8001d24:	2201      	movs	r2, #1
 8001d26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d2a:	4852      	ldr	r0, [pc, #328]	; (8001e74 <MX_GPIO_Init+0x270>)
 8001d2c:	f001 ff2e 	bl	8003b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ATT_2_Pin|ATT_1_Pin|ATT_05_Pin|ATT_025_Pin
 8001d30:	2201      	movs	r2, #1
 8001d32:	21f8      	movs	r1, #248	; 0xf8
 8001d34:	484e      	ldr	r0, [pc, #312]	; (8001e70 <MX_GPIO_Init+0x26c>)
 8001d36:	f001 ff29 	bl	8003b8c <HAL_GPIO_WritePin>
                          |ATT_LE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2102      	movs	r1, #2
 8001d3e:	4849      	ldr	r0, [pc, #292]	; (8001e64 <MX_GPIO_Init+0x260>)
 8001d40:	f001 ff24 	bl	8003b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ATT_4_Pin ATT_8_Pin ATT_16_Pin LD2_Pin */
  GPIO_InitStruct.Pin = ATT_4_Pin|ATT_8_Pin|ATT_16_Pin|LD2_Pin;
 8001d44:	2336      	movs	r3, #54	; 0x36
 8001d46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d50:	2300      	movs	r3, #0
 8001d52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d54:	f107 031c 	add.w	r3, r7, #28
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4842      	ldr	r0, [pc, #264]	; (8001e64 <MX_GPIO_Init+0x260>)
 8001d5c:	f001 fd4e 	bl	80037fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d66:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d70:	f107 031c 	add.w	r3, r7, #28
 8001d74:	4619      	mov	r1, r3
 8001d76:	483f      	ldr	r0, [pc, #252]	; (8001e74 <MX_GPIO_Init+0x270>)
 8001d78:	f001 fd40 	bl	80037fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin SPARE_SMA_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|SPARE_SMA_Pin|LD3_Pin;
 8001d7c:	f245 0301 	movw	r3, #20481	; 0x5001
 8001d80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d82:	2301      	movs	r3, #1
 8001d84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d8e:	f107 031c 	add.w	r3, r7, #28
 8001d92:	4619      	mov	r1, r3
 8001d94:	4834      	ldr	r0, [pc, #208]	; (8001e68 <MX_GPIO_Init+0x264>)
 8001d96:	f001 fd31 	bl	80037fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SCOPE_TRIG_OUT_Pin */
  GPIO_InitStruct.Pin = SCOPE_TRIG_OUT_Pin;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da6:	2300      	movs	r3, #0
 8001da8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SCOPE_TRIG_OUT_GPIO_Port, &GPIO_InitStruct);
 8001daa:	f107 031c 	add.w	r3, r7, #28
 8001dae:	4619      	mov	r1, r3
 8001db0:	482e      	ldr	r0, [pc, #184]	; (8001e6c <MX_GPIO_Init+0x268>)
 8001db2:	f001 fd23 	bl	80037fc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ATT_2_Pin ATT_1_Pin ATT_05_Pin
                           ATT_025_Pin ATT_LE_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ATT_2_Pin|ATT_1_Pin|ATT_05_Pin
 8001db6:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
 8001dba:	61fb      	str	r3, [r7, #28]
                          |ATT_025_Pin|ATT_LE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dc8:	f107 031c 	add.w	r3, r7, #28
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4828      	ldr	r0, [pc, #160]	; (8001e70 <MX_GPIO_Init+0x26c>)
 8001dd0:	f001 fd14 	bl	80037fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001dd4:	2380      	movs	r3, #128	; 0x80
 8001dd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dd8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ddc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001de2:	f107 031c 	add.w	r3, r7, #28
 8001de6:	4619      	mov	r1, r3
 8001de8:	4820      	ldr	r0, [pc, #128]	; (8001e6c <MX_GPIO_Init+0x268>)
 8001dea:	f001 fd07 	bl	80037fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SCLK_Pin MOSI_Pin SEN_Pin REG_EN_Pin */
  GPIO_InitStruct.Pin = SCLK_Pin|MOSI_Pin|SEN_Pin|REG_EN_Pin;
 8001dee:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8001df2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df4:	2301      	movs	r3, #1
 8001df6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e00:	f107 031c 	add.w	r3, r7, #28
 8001e04:	4619      	mov	r1, r3
 8001e06:	481b      	ldr	r0, [pc, #108]	; (8001e74 <MX_GPIO_Init+0x270>)
 8001e08:	f001 fcf8 	bl	80037fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001e0c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e12:	2302      	movs	r3, #2
 8001e14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001e1e:	230a      	movs	r3, #10
 8001e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e22:	f107 031c 	add.w	r3, r7, #28
 8001e26:	4619      	mov	r1, r3
 8001e28:	4813      	ldr	r0, [pc, #76]	; (8001e78 <MX_GPIO_Init+0x274>)
 8001e2a:	f001 fce7 	bl	80037fc <HAL_GPIO_Init>

  /*Configure GPIO pin : MISO_Pin */
  GPIO_InitStruct.Pin = MISO_Pin;
 8001e2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e34:	2300      	movs	r3, #0
 8001e36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 8001e3c:	f107 031c 	add.w	r3, r7, #28
 8001e40:	4619      	mov	r1, r3
 8001e42:	480c      	ldr	r0, [pc, #48]	; (8001e74 <MX_GPIO_Init+0x270>)
 8001e44:	f001 fcda 	bl	80037fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	210f      	movs	r1, #15
 8001e4c:	2028      	movs	r0, #40	; 0x28
 8001e4e:	f000 fea6 	bl	8002b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e52:	2028      	movs	r0, #40	; 0x28
 8001e54:	f000 febd 	bl	8002bd2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e58:	bf00      	nop
 8001e5a:	3730      	adds	r7, #48	; 0x30
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	58024400 	.word	0x58024400
 8001e64:	58021000 	.word	0x58021000
 8001e68:	58020400 	.word	0x58020400
 8001e6c:	58021800 	.word	0x58021800
 8001e70:	58020c00 	.word	0x58020c00
 8001e74:	58020800 	.word	0x58020800
 8001e78:	58020000 	.word	0x58020000

08001e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001e80:	b672      	cpsid	i
}
 8001e82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	__disable_irq();

	printf("Error handler routine called\r\n");
 8001e84:	4810      	ldr	r0, [pc, #64]	; (8001ec8 <Error_Handler+0x4c>)
 8001e86:	f008 ffb7 	bl	800adf8 <puts>

	/* Disable the AOM */
	HAL_HRTIM_WaveformOutputStop(&hhrtim, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1);
 8001e8a:	f240 1103 	movw	r1, #259	; 0x103
 8001e8e:	480f      	ldr	r0, [pc, #60]	; (8001ecc <Error_Handler+0x50>)
 8001e90:	f002 faf7 	bl	8004482 <HAL_HRTIM_WaveformOutputStop>
	HAL_HRTIM_WaveformCounterStop_IT(&hhrtim, HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E);
 8001e94:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 8001e98:	480c      	ldr	r0, [pc, #48]	; (8001ecc <Error_Handler+0x50>)
 8001e9a:	f002 fb8f 	bl	80045bc <HAL_HRTIM_WaveformCountStop_IT>

	/* Power down the synthesiser */
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ea4:	480a      	ldr	r0, [pc, #40]	; (8001ed0 <Error_Handler+0x54>)
 8001ea6:	f001 fe71 	bl	8003b8c <HAL_GPIO_WritePin>

	while (1) {
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 8001eaa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001eae:	4809      	ldr	r0, [pc, #36]	; (8001ed4 <Error_Handler+0x58>)
 8001eb0:	f001 fe85 	bl	8003bbe <HAL_GPIO_TogglePin>
		timer_delay(SLOW_TIMER, ERROR_LED_DELAY);
 8001eb4:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <Error_Handler+0x5c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f00a ffd6 	bl	800ce70 <__timer_delay_veneer>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 8001ec4:	e7f1      	b.n	8001eaa <Error_Handler+0x2e>
 8001ec6:	bf00      	nop
 8001ec8:	0800d120 	.word	0x0800d120
 8001ecc:	200003e4 	.word	0x200003e4
 8001ed0:	58020800 	.word	0x58020800
 8001ed4:	58020400 	.word	0x58020400
 8001ed8:	20000000 	.word	0x20000000

08001edc <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <HAL_MspInit+0x30>)
 8001ee4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ee8:	4a08      	ldr	r2, [pc, #32]	; (8001f0c <HAL_MspInit+0x30>)
 8001eea:	f043 0302 	orr.w	r3, r3, #2
 8001eee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_MspInit+0x30>)
 8001ef4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	607b      	str	r3, [r7, #4]
 8001efe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	58024400 	.word	0x58024400

08001f10 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08a      	sub	sp, #40	; 0x28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a18      	ldr	r2, [pc, #96]	; (8001f90 <HAL_DAC_MspInit+0x80>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d129      	bne.n	8001f86 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001f32:	4b18      	ldr	r3, [pc, #96]	; (8001f94 <HAL_DAC_MspInit+0x84>)
 8001f34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f38:	4a16      	ldr	r2, [pc, #88]	; (8001f94 <HAL_DAC_MspInit+0x84>)
 8001f3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f3e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f42:	4b14      	ldr	r3, [pc, #80]	; (8001f94 <HAL_DAC_MspInit+0x84>)
 8001f44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f50:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <HAL_DAC_MspInit+0x84>)
 8001f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f56:	4a0f      	ldr	r2, [pc, #60]	; (8001f94 <HAL_DAC_MspInit+0x84>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f60:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <HAL_DAC_MspInit+0x84>)
 8001f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f6e:	2310      	movs	r3, #16
 8001f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f72:	2303      	movs	r3, #3
 8001f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f7a:	f107 0314 	add.w	r3, r7, #20
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4805      	ldr	r0, [pc, #20]	; (8001f98 <HAL_DAC_MspInit+0x88>)
 8001f82:	f001 fc3b 	bl	80037fc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001f86:	bf00      	nop
 8001f88:	3728      	adds	r7, #40	; 0x28
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40007400 	.word	0x40007400
 8001f94:	58024400 	.word	0x58024400
 8001f98:	58020000 	.word	0x58020000

08001f9c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08e      	sub	sp, #56	; 0x38
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a59      	ldr	r2, [pc, #356]	; (8002120 <HAL_ETH_MspInit+0x184>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	f040 80ab 	bne.w	8002116 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001fc0:	4b58      	ldr	r3, [pc, #352]	; (8002124 <HAL_ETH_MspInit+0x188>)
 8001fc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001fc6:	4a57      	ldr	r2, [pc, #348]	; (8002124 <HAL_ETH_MspInit+0x188>)
 8001fc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fcc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001fd0:	4b54      	ldr	r3, [pc, #336]	; (8002124 <HAL_ETH_MspInit+0x188>)
 8001fd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001fd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fda:	623b      	str	r3, [r7, #32]
 8001fdc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001fde:	4b51      	ldr	r3, [pc, #324]	; (8002124 <HAL_ETH_MspInit+0x188>)
 8001fe0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001fe4:	4a4f      	ldr	r2, [pc, #316]	; (8002124 <HAL_ETH_MspInit+0x188>)
 8001fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001fee:	4b4d      	ldr	r3, [pc, #308]	; (8002124 <HAL_ETH_MspInit+0x188>)
 8001ff0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff8:	61fb      	str	r3, [r7, #28]
 8001ffa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001ffc:	4b49      	ldr	r3, [pc, #292]	; (8002124 <HAL_ETH_MspInit+0x188>)
 8001ffe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002002:	4a48      	ldr	r2, [pc, #288]	; (8002124 <HAL_ETH_MspInit+0x188>)
 8002004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002008:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800200c:	4b45      	ldr	r3, [pc, #276]	; (8002124 <HAL_ETH_MspInit+0x188>)
 800200e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002016:	61bb      	str	r3, [r7, #24]
 8002018:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800201a:	4b42      	ldr	r3, [pc, #264]	; (8002124 <HAL_ETH_MspInit+0x188>)
 800201c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002020:	4a40      	ldr	r2, [pc, #256]	; (8002124 <HAL_ETH_MspInit+0x188>)
 8002022:	f043 0304 	orr.w	r3, r3, #4
 8002026:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800202a:	4b3e      	ldr	r3, [pc, #248]	; (8002124 <HAL_ETH_MspInit+0x188>)
 800202c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	617b      	str	r3, [r7, #20]
 8002036:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002038:	4b3a      	ldr	r3, [pc, #232]	; (8002124 <HAL_ETH_MspInit+0x188>)
 800203a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800203e:	4a39      	ldr	r2, [pc, #228]	; (8002124 <HAL_ETH_MspInit+0x188>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002048:	4b36      	ldr	r3, [pc, #216]	; (8002124 <HAL_ETH_MspInit+0x188>)
 800204a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	613b      	str	r3, [r7, #16]
 8002054:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002056:	4b33      	ldr	r3, [pc, #204]	; (8002124 <HAL_ETH_MspInit+0x188>)
 8002058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800205c:	4a31      	ldr	r2, [pc, #196]	; (8002124 <HAL_ETH_MspInit+0x188>)
 800205e:	f043 0302 	orr.w	r3, r3, #2
 8002062:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002066:	4b2f      	ldr	r3, [pc, #188]	; (8002124 <HAL_ETH_MspInit+0x188>)
 8002068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002074:	4b2b      	ldr	r3, [pc, #172]	; (8002124 <HAL_ETH_MspInit+0x188>)
 8002076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800207a:	4a2a      	ldr	r2, [pc, #168]	; (8002124 <HAL_ETH_MspInit+0x188>)
 800207c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002080:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002084:	4b27      	ldr	r3, [pc, #156]	; (8002124 <HAL_ETH_MspInit+0x188>)
 8002086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800208a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800208e:	60bb      	str	r3, [r7, #8]
 8002090:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002092:	2332      	movs	r3, #50	; 0x32
 8002094:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002096:	2302      	movs	r3, #2
 8002098:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209e:	2300      	movs	r3, #0
 80020a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020a2:	230b      	movs	r3, #11
 80020a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020aa:	4619      	mov	r1, r3
 80020ac:	481e      	ldr	r0, [pc, #120]	; (8002128 <HAL_ETH_MspInit+0x18c>)
 80020ae:	f001 fba5 	bl	80037fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80020b2:	2386      	movs	r3, #134	; 0x86
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b6:	2302      	movs	r3, #2
 80020b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020be:	2300      	movs	r3, #0
 80020c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020c2:	230b      	movs	r3, #11
 80020c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ca:	4619      	mov	r1, r3
 80020cc:	4817      	ldr	r0, [pc, #92]	; (800212c <HAL_ETH_MspInit+0x190>)
 80020ce:	f001 fb95 	bl	80037fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80020d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d8:	2302      	movs	r3, #2
 80020da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e0:	2300      	movs	r3, #0
 80020e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020e4:	230b      	movs	r3, #11
 80020e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ec:	4619      	mov	r1, r3
 80020ee:	4810      	ldr	r0, [pc, #64]	; (8002130 <HAL_ETH_MspInit+0x194>)
 80020f0:	f001 fb84 	bl	80037fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80020f4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fa:	2302      	movs	r3, #2
 80020fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002102:	2300      	movs	r3, #0
 8002104:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002106:	230b      	movs	r3, #11
 8002108:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800210a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800210e:	4619      	mov	r1, r3
 8002110:	4808      	ldr	r0, [pc, #32]	; (8002134 <HAL_ETH_MspInit+0x198>)
 8002112:	f001 fb73 	bl	80037fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002116:	bf00      	nop
 8002118:	3738      	adds	r7, #56	; 0x38
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40028000 	.word	0x40028000
 8002124:	58024400 	.word	0x58024400
 8002128:	58020800 	.word	0x58020800
 800212c:	58020000 	.word	0x58020000
 8002130:	58020400 	.word	0x58020400
 8002134:	58021800 	.word	0x58021800

08002138 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b0b4      	sub	sp, #208	; 0xd0
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002140:	f107 0310 	add.w	r3, r7, #16
 8002144:	22c0      	movs	r2, #192	; 0xc0
 8002146:	2100      	movs	r1, #0
 8002148:	4618      	mov	r0, r3
 800214a:	f008 f983 	bl	800a454 <memset>
  if(hhrtim->Instance==HRTIM1)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a1c      	ldr	r2, [pc, #112]	; (80021c4 <HAL_HRTIM_MspInit+0x8c>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d131      	bne.n	80021bc <HAL_HRTIM_MspInit+0x84>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 8002158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800215c:	f04f 0300 	mov.w	r3, #0
 8002160:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 8002164:	2300      	movs	r3, #0
 8002166:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800216a:	f107 0310 	add.w	r3, r7, #16
 800216e:	4618      	mov	r0, r3
 8002170:	f004 fe3c 	bl	8006dec <HAL_RCCEx_PeriphCLKConfig>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 800217a:	f7ff fe7f 	bl	8001e7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 800217e:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <HAL_HRTIM_MspInit+0x90>)
 8002180:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002184:	4a10      	ldr	r2, [pc, #64]	; (80021c8 <HAL_HRTIM_MspInit+0x90>)
 8002186:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800218a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800218e:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <HAL_HRTIM_MspInit+0x90>)
 8002190:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002194:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]
    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_TIMA_IRQn, 0, 0);
 800219c:	2200      	movs	r2, #0
 800219e:	2100      	movs	r1, #0
 80021a0:	2068      	movs	r0, #104	; 0x68
 80021a2:	f000 fcfc 	bl	8002b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMA_IRQn);
 80021a6:	2068      	movs	r0, #104	; 0x68
 80021a8:	f000 fd13 	bl	8002bd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(HRTIM1_TIME_IRQn, 0, 0);
 80021ac:	2200      	movs	r2, #0
 80021ae:	2100      	movs	r1, #0
 80021b0:	206c      	movs	r0, #108	; 0x6c
 80021b2:	f000 fcf4 	bl	8002b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIME_IRQn);
 80021b6:	206c      	movs	r0, #108	; 0x6c
 80021b8:	f000 fd0b 	bl	8002bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 80021bc:	bf00      	nop
 80021be:	37d0      	adds	r7, #208	; 0xd0
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40017400 	.word	0x40017400
 80021c8:	58024400 	.word	0x58024400

080021cc <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08a      	sub	sp, #40	; 0x28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d4:	f107 0314 	add.w	r3, r7, #20
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	605a      	str	r2, [r3, #4]
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	60da      	str	r2, [r3, #12]
 80021e2:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a22      	ldr	r2, [pc, #136]	; (8002274 <HAL_HRTIM_MspPostInit+0xa8>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d13d      	bne.n	800226a <HAL_HRTIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80021ee:	4b22      	ldr	r3, [pc, #136]	; (8002278 <HAL_HRTIM_MspPostInit+0xac>)
 80021f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021f4:	4a20      	ldr	r2, [pc, #128]	; (8002278 <HAL_HRTIM_MspPostInit+0xac>)
 80021f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021fe:	4b1e      	ldr	r3, [pc, #120]	; (8002278 <HAL_HRTIM_MspPostInit+0xac>)
 8002200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800220c:	4b1a      	ldr	r3, [pc, #104]	; (8002278 <HAL_HRTIM_MspPostInit+0xac>)
 800220e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002212:	4a19      	ldr	r2, [pc, #100]	; (8002278 <HAL_HRTIM_MspPostInit+0xac>)
 8002214:	f043 0304 	orr.w	r3, r3, #4
 8002218:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800221c:	4b16      	ldr	r3, [pc, #88]	; (8002278 <HAL_HRTIM_MspPostInit+0xac>)
 800221e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002222:	f003 0304 	and.w	r3, r3, #4
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]
    /**HRTIM GPIO Configuration
    PG6     ------> HRTIM_CHE1
    PC6     ------> HRTIM_CHA1
    PC7     ------> HRTIM_CHA2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800222a:	2340      	movs	r3, #64	; 0x40
 800222c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222e:	2302      	movs	r3, #2
 8002230:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002236:	2303      	movs	r3, #3
 8002238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 800223a:	2302      	movs	r3, #2
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800223e:	f107 0314 	add.w	r3, r7, #20
 8002242:	4619      	mov	r1, r3
 8002244:	480d      	ldr	r0, [pc, #52]	; (800227c <HAL_HRTIM_MspPostInit+0xb0>)
 8002246:	f001 fad9 	bl	80037fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800224a:	23c0      	movs	r3, #192	; 0xc0
 800224c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224e:	2302      	movs	r3, #2
 8002250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002256:	2303      	movs	r3, #3
 8002258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 800225a:	2301      	movs	r3, #1
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800225e:	f107 0314 	add.w	r3, r7, #20
 8002262:	4619      	mov	r1, r3
 8002264:	4806      	ldr	r0, [pc, #24]	; (8002280 <HAL_HRTIM_MspPostInit+0xb4>)
 8002266:	f001 fac9 	bl	80037fc <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 800226a:	bf00      	nop
 800226c:	3728      	adds	r7, #40	; 0x28
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40017400 	.word	0x40017400
 8002278:	58024400 	.word	0x58024400
 800227c:	58021800 	.word	0x58021800
 8002280:	58020800 	.word	0x58020800

08002284 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b0b4      	sub	sp, #208	; 0xd0
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800228c:	f107 0310 	add.w	r3, r7, #16
 8002290:	22c0      	movs	r2, #192	; 0xc0
 8002292:	2100      	movs	r1, #0
 8002294:	4618      	mov	r0, r3
 8002296:	f008 f8dd 	bl	800a454 <memset>
  if(hlptim->Instance==LPTIM1)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a19      	ldr	r2, [pc, #100]	; (8002304 <HAL_LPTIM_MspInit+0x80>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d12a      	bne.n	80022fa <HAL_LPTIM_MspInit+0x76>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80022a4:	f04f 0220 	mov.w	r2, #32
 80022a8:	f04f 0300 	mov.w	r3, #0
 80022ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 80022b0:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80022b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022b8:	f107 0310 	add.w	r3, r7, #16
 80022bc:	4618      	mov	r0, r3
 80022be:	f004 fd95 	bl	8006dec <HAL_RCCEx_PeriphCLKConfig>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <HAL_LPTIM_MspInit+0x48>
    {
      Error_Handler();
 80022c8:	f7ff fdd8 	bl	8001e7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80022cc:	4b0e      	ldr	r3, [pc, #56]	; (8002308 <HAL_LPTIM_MspInit+0x84>)
 80022ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022d2:	4a0d      	ldr	r2, [pc, #52]	; (8002308 <HAL_LPTIM_MspInit+0x84>)
 80022d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022d8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022dc:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <HAL_LPTIM_MspInit+0x84>)
 80022de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 80022ea:	2200      	movs	r2, #0
 80022ec:	2100      	movs	r1, #0
 80022ee:	205d      	movs	r0, #93	; 0x5d
 80022f0:	f000 fc55 	bl	8002b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80022f4:	205d      	movs	r0, #93	; 0x5d
 80022f6:	f000 fc6c 	bl	8002bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 80022fa:	bf00      	nop
 80022fc:	37d0      	adds	r7, #208	; 0xd0
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40002400 	.word	0x40002400
 8002308:	58024400 	.word	0x58024400

0800230c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a16      	ldr	r2, [pc, #88]	; (8002374 <HAL_TIM_Base_MspInit+0x68>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d10f      	bne.n	800233e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800231e:	4b16      	ldr	r3, [pc, #88]	; (8002378 <HAL_TIM_Base_MspInit+0x6c>)
 8002320:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002324:	4a14      	ldr	r2, [pc, #80]	; (8002378 <HAL_TIM_Base_MspInit+0x6c>)
 8002326:	f043 0301 	orr.w	r3, r3, #1
 800232a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800232e:	4b12      	ldr	r3, [pc, #72]	; (8002378 <HAL_TIM_Base_MspInit+0x6c>)
 8002330:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800233c:	e013      	b.n	8002366 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM3)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a0e      	ldr	r2, [pc, #56]	; (800237c <HAL_TIM_Base_MspInit+0x70>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d10e      	bne.n	8002366 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002348:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <HAL_TIM_Base_MspInit+0x6c>)
 800234a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800234e:	4a0a      	ldr	r2, [pc, #40]	; (8002378 <HAL_TIM_Base_MspInit+0x6c>)
 8002350:	f043 0302 	orr.w	r3, r3, #2
 8002354:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002358:	4b07      	ldr	r3, [pc, #28]	; (8002378 <HAL_TIM_Base_MspInit+0x6c>)
 800235a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	60bb      	str	r3, [r7, #8]
 8002364:	68bb      	ldr	r3, [r7, #8]
}
 8002366:	bf00      	nop
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	40010000 	.word	0x40010000
 8002378:	58024400 	.word	0x58024400
 800237c:	40000400 	.word	0x40000400

08002380 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b0ba      	sub	sp, #232	; 0xe8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002388:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	60da      	str	r2, [r3, #12]
 8002396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002398:	f107 0310 	add.w	r3, r7, #16
 800239c:	22c0      	movs	r2, #192	; 0xc0
 800239e:	2100      	movs	r1, #0
 80023a0:	4618      	mov	r0, r3
 80023a2:	f008 f857 	bl	800a454 <memset>
  if(huart->Instance==USART3)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a27      	ldr	r2, [pc, #156]	; (8002448 <HAL_UART_MspInit+0xc8>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d146      	bne.n	800243e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80023b0:	f04f 0202 	mov.w	r2, #2
 80023b4:	f04f 0300 	mov.w	r3, #0
 80023b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80023bc:	2300      	movs	r3, #0
 80023be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023c2:	f107 0310 	add.w	r3, r7, #16
 80023c6:	4618      	mov	r0, r3
 80023c8:	f004 fd10 	bl	8006dec <HAL_RCCEx_PeriphCLKConfig>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80023d2:	f7ff fd53 	bl	8001e7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80023d6:	4b1d      	ldr	r3, [pc, #116]	; (800244c <HAL_UART_MspInit+0xcc>)
 80023d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023dc:	4a1b      	ldr	r2, [pc, #108]	; (800244c <HAL_UART_MspInit+0xcc>)
 80023de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023e6:	4b19      	ldr	r3, [pc, #100]	; (800244c <HAL_UART_MspInit+0xcc>)
 80023e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023f4:	4b15      	ldr	r3, [pc, #84]	; (800244c <HAL_UART_MspInit+0xcc>)
 80023f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023fa:	4a14      	ldr	r2, [pc, #80]	; (800244c <HAL_UART_MspInit+0xcc>)
 80023fc:	f043 0308 	orr.w	r3, r3, #8
 8002400:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002404:	4b11      	ldr	r3, [pc, #68]	; (800244c <HAL_UART_MspInit+0xcc>)
 8002406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	60bb      	str	r3, [r7, #8]
 8002410:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002412:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002416:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241a:	2302      	movs	r3, #2
 800241c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002426:	2300      	movs	r3, #0
 8002428:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800242c:	2307      	movs	r3, #7
 800242e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002432:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002436:	4619      	mov	r1, r3
 8002438:	4805      	ldr	r0, [pc, #20]	; (8002450 <HAL_UART_MspInit+0xd0>)
 800243a:	f001 f9df 	bl	80037fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800243e:	bf00      	nop
 8002440:	37e8      	adds	r7, #232	; 0xe8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40004800 	.word	0x40004800
 800244c:	58024400 	.word	0x58024400
 8002450:	58020c00 	.word	0x58020c00

08002454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002458:	f004 fcac 	bl	8006db4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
		Error_Handler();
 800245c:	f7ff fd0e 	bl	8001e7c <Error_Handler>
 8002460:	e7fc      	b.n	800245c <NMI_Handler+0x8>

08002462 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Error_Handler();
 8002466:	f7ff fd09 	bl	8001e7c <Error_Handler>
 800246a:	e7fc      	b.n	8002466 <HardFault_Handler+0x4>

0800246c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  Error_Handler();
 8002470:	f7ff fd04 	bl	8001e7c <Error_Handler>
 8002474:	e7fc      	b.n	8002470 <MemManage_Handler+0x4>

08002476 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  Error_Handler();
 800247a:	f7ff fcff 	bl	8001e7c <Error_Handler>
 800247e:	e7fc      	b.n	800247a <BusFault_Handler+0x4>

08002480 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  Error_Handler();
 8002484:	f7ff fcfa 	bl	8001e7c <Error_Handler>
 8002488:	e7fc      	b.n	8002484 <UsageFault_Handler+0x4>

0800248a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800248a:	b480      	push	{r7}
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800248e:	bf00      	nop
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800249c:	bf00      	nop
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024a6:	b480      	push	{r7}
 80024a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024b8:	f000 fa12 	bl	80028e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024bc:	bf00      	nop
 80024be:	bd80      	pop	{r7, pc}

080024c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80024c4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80024c8:	f001 fb93 	bl	8003bf2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024cc:	bf00      	nop
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */
  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80024d4:	4802      	ldr	r0, [pc, #8]	; (80024e0 <LPTIM1_IRQHandler+0x10>)
 80024d6:	f003 f8de 	bl	8005696 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */
  /* USER CODE END LPTIM1_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	200004c0 	.word	0x200004c0

080024e4 <HRTIM1_TIMA_IRQHandler>:

/**
  * @brief This function handles HRTIM timer A global interrupt.
  */
void HRTIM1_TIMA_IRQHandler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 0 */

  /* USER CODE END HRTIM1_TIMA_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_A);
 80024e8:	2100      	movs	r1, #0
 80024ea:	4802      	ldr	r0, [pc, #8]	; (80024f4 <HRTIM1_TIMA_IRQHandler+0x10>)
 80024ec:	f002 f8e4 	bl	80046b8 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 1 */

  /* USER CODE END HRTIM1_TIMA_IRQn 1 */
}
 80024f0:	bf00      	nop
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	200003e4 	.word	0x200003e4

080024f8 <HRTIM1_TIME_IRQHandler>:

/**
  * @brief This function handles HRTIM timer E global interrupt.
  */
void HRTIM1_TIME_IRQHandler(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 0 */

  /* USER CODE END HRTIM1_TIME_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_E);
 80024fc:	2104      	movs	r1, #4
 80024fe:	4802      	ldr	r0, [pc, #8]	; (8002508 <HRTIM1_TIME_IRQHandler+0x10>)
 8002500:	f002 f8da 	bl	80046b8 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 1 */

  /* USER CODE END HRTIM1_TIME_IRQn 1 */
}
 8002504:	bf00      	nop
 8002506:	bd80      	pop	{r7, pc}
 8002508:	200003e4 	.word	0x200003e4

0800250c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
	return 1;
 8002510:	2301      	movs	r3, #1
}
 8002512:	4618      	mov	r0, r3
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <_kill>:

int _kill(int pid, int sig)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002526:	f007 ff5d 	bl	800a3e4 <__errno>
 800252a:	4603      	mov	r3, r0
 800252c:	2216      	movs	r2, #22
 800252e:	601a      	str	r2, [r3, #0]
	return -1;
 8002530:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002534:	4618      	mov	r0, r3
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <_exit>:

void _exit (int status)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002544:	f04f 31ff 	mov.w	r1, #4294967295
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7ff ffe7 	bl	800251c <_kill>
	while (1) {}		/* Make sure we hang here */
 800254e:	e7fe      	b.n	800254e <_exit+0x12>

08002550 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	e00a      	b.n	8002578 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002562:	f3af 8000 	nop.w
 8002566:	4601      	mov	r1, r0
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	60ba      	str	r2, [r7, #8]
 800256e:	b2ca      	uxtb	r2, r1
 8002570:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	3301      	adds	r3, #1
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	429a      	cmp	r2, r3
 800257e:	dbf0      	blt.n	8002562 <_read+0x12>
	}

return len;
 8002580:	687b      	ldr	r3, [r7, #4]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b086      	sub	sp, #24
 800258e:	af00      	add	r7, sp, #0
 8002590:	60f8      	str	r0, [r7, #12]
 8002592:	60b9      	str	r1, [r7, #8]
 8002594:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	e009      	b.n	80025b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	60ba      	str	r2, [r7, #8]
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7fe fcfd 	bl	8000fa4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	3301      	adds	r3, #1
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	dbf1      	blt.n	800259c <_write+0x12>
	}
	return len;
 80025b8:	687b      	ldr	r3, [r7, #4]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <_close>:

int _close(int file)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
	return -1;
 80025ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
 80025e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025ea:	605a      	str	r2, [r3, #4]
	return 0;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <_isatty>:

int _isatty(int file)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
	return 1;
 8002602:	2301      	movs	r3, #1
}
 8002604:	4618      	mov	r0, r3
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
	return 0;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
	...

0800262c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002634:	4a14      	ldr	r2, [pc, #80]	; (8002688 <_sbrk+0x5c>)
 8002636:	4b15      	ldr	r3, [pc, #84]	; (800268c <_sbrk+0x60>)
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002640:	4b13      	ldr	r3, [pc, #76]	; (8002690 <_sbrk+0x64>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d102      	bne.n	800264e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002648:	4b11      	ldr	r3, [pc, #68]	; (8002690 <_sbrk+0x64>)
 800264a:	4a12      	ldr	r2, [pc, #72]	; (8002694 <_sbrk+0x68>)
 800264c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800264e:	4b10      	ldr	r3, [pc, #64]	; (8002690 <_sbrk+0x64>)
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4413      	add	r3, r2
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	429a      	cmp	r2, r3
 800265a:	d207      	bcs.n	800266c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800265c:	f007 fec2 	bl	800a3e4 <__errno>
 8002660:	4603      	mov	r3, r0
 8002662:	220c      	movs	r2, #12
 8002664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002666:	f04f 33ff 	mov.w	r3, #4294967295
 800266a:	e009      	b.n	8002680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800266c:	4b08      	ldr	r3, [pc, #32]	; (8002690 <_sbrk+0x64>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002672:	4b07      	ldr	r3, [pc, #28]	; (8002690 <_sbrk+0x64>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4413      	add	r3, r2
 800267a:	4a05      	ldr	r2, [pc, #20]	; (8002690 <_sbrk+0x64>)
 800267c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800267e:	68fb      	ldr	r3, [r7, #12]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20020000 	.word	0x20020000
 800268c:	00000400 	.word	0x00000400
 8002690:	20000638 	.word	0x20000638
 8002694:	20000650 	.word	0x20000650

08002698 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800269c:	4b37      	ldr	r3, [pc, #220]	; (800277c <SystemInit+0xe4>)
 800269e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a2:	4a36      	ldr	r2, [pc, #216]	; (800277c <SystemInit+0xe4>)
 80026a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80026ac:	4b34      	ldr	r3, [pc, #208]	; (8002780 <SystemInit+0xe8>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 030f 	and.w	r3, r3, #15
 80026b4:	2b06      	cmp	r3, #6
 80026b6:	d807      	bhi.n	80026c8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */

	  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80026b8:	4b31      	ldr	r3, [pc, #196]	; (8002780 <SystemInit+0xe8>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f023 030f 	bic.w	r3, r3, #15
 80026c0:	4a2f      	ldr	r2, [pc, #188]	; (8002780 <SystemInit+0xe8>)
 80026c2:	f043 0307 	orr.w	r3, r3, #7
 80026c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80026c8:	4b2e      	ldr	r3, [pc, #184]	; (8002784 <SystemInit+0xec>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a2d      	ldr	r2, [pc, #180]	; (8002784 <SystemInit+0xec>)
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80026d4:	4b2b      	ldr	r3, [pc, #172]	; (8002784 <SystemInit+0xec>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80026da:	4b2a      	ldr	r3, [pc, #168]	; (8002784 <SystemInit+0xec>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	4929      	ldr	r1, [pc, #164]	; (8002784 <SystemInit+0xec>)
 80026e0:	4b29      	ldr	r3, [pc, #164]	; (8002788 <SystemInit+0xf0>)
 80026e2:	4013      	ands	r3, r2
 80026e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80026e6:	4b26      	ldr	r3, [pc, #152]	; (8002780 <SystemInit+0xe8>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d007      	beq.n	8002702 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80026f2:	4b23      	ldr	r3, [pc, #140]	; (8002780 <SystemInit+0xe8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f023 030f 	bic.w	r3, r3, #15
 80026fa:	4a21      	ldr	r2, [pc, #132]	; (8002780 <SystemInit+0xe8>)
 80026fc:	f043 0307 	orr.w	r3, r3, #7
 8002700:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002702:	4b20      	ldr	r3, [pc, #128]	; (8002784 <SystemInit+0xec>)
 8002704:	2200      	movs	r2, #0
 8002706:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002708:	4b1e      	ldr	r3, [pc, #120]	; (8002784 <SystemInit+0xec>)
 800270a:	2200      	movs	r2, #0
 800270c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800270e:	4b1d      	ldr	r3, [pc, #116]	; (8002784 <SystemInit+0xec>)
 8002710:	2200      	movs	r2, #0
 8002712:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002714:	4b1b      	ldr	r3, [pc, #108]	; (8002784 <SystemInit+0xec>)
 8002716:	4a1d      	ldr	r2, [pc, #116]	; (800278c <SystemInit+0xf4>)
 8002718:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800271a:	4b1a      	ldr	r3, [pc, #104]	; (8002784 <SystemInit+0xec>)
 800271c:	4a1c      	ldr	r2, [pc, #112]	; (8002790 <SystemInit+0xf8>)
 800271e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002720:	4b18      	ldr	r3, [pc, #96]	; (8002784 <SystemInit+0xec>)
 8002722:	4a1c      	ldr	r2, [pc, #112]	; (8002794 <SystemInit+0xfc>)
 8002724:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002726:	4b17      	ldr	r3, [pc, #92]	; (8002784 <SystemInit+0xec>)
 8002728:	2200      	movs	r2, #0
 800272a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800272c:	4b15      	ldr	r3, [pc, #84]	; (8002784 <SystemInit+0xec>)
 800272e:	4a19      	ldr	r2, [pc, #100]	; (8002794 <SystemInit+0xfc>)
 8002730:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002732:	4b14      	ldr	r3, [pc, #80]	; (8002784 <SystemInit+0xec>)
 8002734:	2200      	movs	r2, #0
 8002736:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002738:	4b12      	ldr	r3, [pc, #72]	; (8002784 <SystemInit+0xec>)
 800273a:	4a16      	ldr	r2, [pc, #88]	; (8002794 <SystemInit+0xfc>)
 800273c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800273e:	4b11      	ldr	r3, [pc, #68]	; (8002784 <SystemInit+0xec>)
 8002740:	2200      	movs	r2, #0
 8002742:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002744:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <SystemInit+0xec>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a0e      	ldr	r2, [pc, #56]	; (8002784 <SystemInit+0xec>)
 800274a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800274e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002750:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <SystemInit+0xec>)
 8002752:	2200      	movs	r2, #0
 8002754:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002756:	4b10      	ldr	r3, [pc, #64]	; (8002798 <SystemInit+0x100>)
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	4b10      	ldr	r3, [pc, #64]	; (800279c <SystemInit+0x104>)
 800275c:	4013      	ands	r3, r2
 800275e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002762:	d202      	bcs.n	800276a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002764:	4b0e      	ldr	r3, [pc, #56]	; (80027a0 <SystemInit+0x108>)
 8002766:	2201      	movs	r2, #1
 8002768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800276a:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <SystemInit+0x10c>)
 800276c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002770:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002772:	bf00      	nop
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	e000ed00 	.word	0xe000ed00
 8002780:	52002000 	.word	0x52002000
 8002784:	58024400 	.word	0x58024400
 8002788:	eaf6ed7f 	.word	0xeaf6ed7f
 800278c:	02020200 	.word	0x02020200
 8002790:	01ff0000 	.word	0x01ff0000
 8002794:	01010280 	.word	0x01010280
 8002798:	5c001000 	.word	0x5c001000
 800279c:	ffff0000 	.word	0xffff0000
 80027a0:	51008108 	.word	0x51008108
 80027a4:	52004000 	.word	0x52004000

080027a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80027a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80027ac:	f7ff ff74 	bl	8002698 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027b0:	480c      	ldr	r0, [pc, #48]	; (80027e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027b2:	490d      	ldr	r1, [pc, #52]	; (80027e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027b4:	4a0d      	ldr	r2, [pc, #52]	; (80027ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027b8:	e002      	b.n	80027c0 <LoopCopyDataInit>

080027ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027be:	3304      	adds	r3, #4

080027c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027c4:	d3f9      	bcc.n	80027ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027c6:	4a0a      	ldr	r2, [pc, #40]	; (80027f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027c8:	4c0a      	ldr	r4, [pc, #40]	; (80027f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80027ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027cc:	e001      	b.n	80027d2 <LoopFillZerobss>

080027ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027d0:	3204      	adds	r2, #4

080027d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027d4:	d3fb      	bcc.n	80027ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027d6:	f007 fe0b 	bl	800a3f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027da:	f7fe fd59 	bl	8001290 <main>
  bx  lr
 80027de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027e8:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 80027ec:	0800d74c 	.word	0x0800d74c
  ldr r2, =_sbss
 80027f0:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 80027f4:	20000650 	.word	0x20000650

080027f8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027f8:	e7fe      	b.n	80027f8 <ADC3_IRQHandler>
	...

080027fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002802:	2003      	movs	r0, #3
 8002804:	f000 f9c0 	bl	8002b88 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002808:	f004 f8fe 	bl	8006a08 <HAL_RCC_GetSysClockFreq>
 800280c:	4602      	mov	r2, r0
 800280e:	4b15      	ldr	r3, [pc, #84]	; (8002864 <HAL_Init+0x68>)
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	0a1b      	lsrs	r3, r3, #8
 8002814:	f003 030f 	and.w	r3, r3, #15
 8002818:	4913      	ldr	r1, [pc, #76]	; (8002868 <HAL_Init+0x6c>)
 800281a:	5ccb      	ldrb	r3, [r1, r3]
 800281c:	f003 031f 	and.w	r3, r3, #31
 8002820:	fa22 f303 	lsr.w	r3, r2, r3
 8002824:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002826:	4b0f      	ldr	r3, [pc, #60]	; (8002864 <HAL_Init+0x68>)
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	4a0e      	ldr	r2, [pc, #56]	; (8002868 <HAL_Init+0x6c>)
 8002830:	5cd3      	ldrb	r3, [r2, r3]
 8002832:	f003 031f 	and.w	r3, r3, #31
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	fa22 f303 	lsr.w	r3, r2, r3
 800283c:	4a0b      	ldr	r2, [pc, #44]	; (800286c <HAL_Init+0x70>)
 800283e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002840:	4a0b      	ldr	r2, [pc, #44]	; (8002870 <HAL_Init+0x74>)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002846:	2000      	movs	r0, #0
 8002848:	f000 f814 	bl	8002874 <HAL_InitTick>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e002      	b.n	800285c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002856:	f7ff fb41 	bl	8001edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	58024400 	.word	0x58024400
 8002868:	0800d32c 	.word	0x0800d32c
 800286c:	20000018 	.word	0x20000018
 8002870:	20000014 	.word	0x20000014

08002874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800287c:	4b15      	ldr	r3, [pc, #84]	; (80028d4 <HAL_InitTick+0x60>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e021      	b.n	80028cc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002888:	4b13      	ldr	r3, [pc, #76]	; (80028d8 <HAL_InitTick+0x64>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	4b11      	ldr	r3, [pc, #68]	; (80028d4 <HAL_InitTick+0x60>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	4619      	mov	r1, r3
 8002892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002896:	fbb3 f3f1 	udiv	r3, r3, r1
 800289a:	fbb2 f3f3 	udiv	r3, r2, r3
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 f9a5 	bl	8002bee <HAL_SYSTICK_Config>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e00e      	b.n	80028cc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b0f      	cmp	r3, #15
 80028b2:	d80a      	bhi.n	80028ca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028b4:	2200      	movs	r2, #0
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	f04f 30ff 	mov.w	r0, #4294967295
 80028bc:	f000 f96f 	bl	8002b9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028c0:	4a06      	ldr	r2, [pc, #24]	; (80028dc <HAL_InitTick+0x68>)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
 80028c8:	e000      	b.n	80028cc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	20000020 	.word	0x20000020
 80028d8:	20000014 	.word	0x20000014
 80028dc:	2000001c 	.word	0x2000001c

080028e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80028e4:	4b06      	ldr	r3, [pc, #24]	; (8002900 <HAL_IncTick+0x20>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	461a      	mov	r2, r3
 80028ea:	4b06      	ldr	r3, [pc, #24]	; (8002904 <HAL_IncTick+0x24>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4413      	add	r3, r2
 80028f0:	4a04      	ldr	r2, [pc, #16]	; (8002904 <HAL_IncTick+0x24>)
 80028f2:	6013      	str	r3, [r2, #0]
}
 80028f4:	bf00      	nop
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	20000020 	.word	0x20000020
 8002904:	2000063c 	.word	0x2000063c

08002908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  return uwTick;
 800290c:	4b03      	ldr	r3, [pc, #12]	; (800291c <HAL_GetTick+0x14>)
 800290e:	681b      	ldr	r3, [r3, #0]
}
 8002910:	4618      	mov	r0, r3
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	2000063c 	.word	0x2000063c

08002920 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002928:	f7ff ffee 	bl	8002908 <HAL_GetTick>
 800292c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002938:	d005      	beq.n	8002946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800293a:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <HAL_Delay+0x44>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	461a      	mov	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4413      	add	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002946:	bf00      	nop
 8002948:	f7ff ffde 	bl	8002908 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	429a      	cmp	r2, r3
 8002956:	d8f7      	bhi.n	8002948 <HAL_Delay+0x28>
  {
  }
}
 8002958:	bf00      	nop
 800295a:	bf00      	nop
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	20000020 	.word	0x20000020

08002968 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800296c:	4b05      	ldr	r3, [pc, #20]	; (8002984 <HAL_SuspendTick+0x1c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a04      	ldr	r2, [pc, #16]	; (8002984 <HAL_SuspendTick+0x1c>)
 8002972:	f023 0302 	bic.w	r3, r3, #2
 8002976:	6013      	str	r3, [r2, #0]
}
 8002978:	bf00      	nop
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	e000e010 	.word	0xe000e010

08002988 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800298c:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <HAL_ResumeTick+0x1c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a04      	ldr	r2, [pc, #16]	; (80029a4 <HAL_ResumeTick+0x1c>)
 8002992:	f043 0302 	orr.w	r3, r3, #2
 8002996:	6013      	str	r3, [r2, #0]
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	e000e010 	.word	0xe000e010

080029a8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80029ac:	4b03      	ldr	r3, [pc, #12]	; (80029bc <HAL_GetREVID+0x14>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	0c1b      	lsrs	r3, r3, #16
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	5c001000 	.word	0x5c001000

080029c0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80029c8:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80029d0:	4904      	ldr	r1, [pc, #16]	; (80029e4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	604b      	str	r3, [r1, #4]
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	58000400 	.word	0x58000400

080029e8 <__NVIC_SetPriorityGrouping>:
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <__NVIC_SetPriorityGrouping+0x40>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a04:	4013      	ands	r3, r2
 8002a06:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a10:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <__NVIC_SetPriorityGrouping+0x44>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a16:	4a04      	ldr	r2, [pc, #16]	; (8002a28 <__NVIC_SetPriorityGrouping+0x40>)
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	60d3      	str	r3, [r2, #12]
}
 8002a1c:	bf00      	nop
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	e000ed00 	.word	0xe000ed00
 8002a2c:	05fa0000 	.word	0x05fa0000

08002a30 <__NVIC_GetPriorityGrouping>:
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a34:	4b04      	ldr	r3, [pc, #16]	; (8002a48 <__NVIC_GetPriorityGrouping+0x18>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	0a1b      	lsrs	r3, r3, #8
 8002a3a:	f003 0307 	and.w	r3, r3, #7
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	e000ed00 	.word	0xe000ed00

08002a4c <__NVIC_EnableIRQ>:
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	db0b      	blt.n	8002a76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a5e:	88fb      	ldrh	r3, [r7, #6]
 8002a60:	f003 021f 	and.w	r2, r3, #31
 8002a64:	4907      	ldr	r1, [pc, #28]	; (8002a84 <__NVIC_EnableIRQ+0x38>)
 8002a66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a6a:	095b      	lsrs	r3, r3, #5
 8002a6c:	2001      	movs	r0, #1
 8002a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	e000e100 	.word	0xe000e100

08002a88 <__NVIC_SetPriority>:
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	6039      	str	r1, [r7, #0]
 8002a92:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	db0a      	blt.n	8002ab2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	490c      	ldr	r1, [pc, #48]	; (8002ad4 <__NVIC_SetPriority+0x4c>)
 8002aa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aa6:	0112      	lsls	r2, r2, #4
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	440b      	add	r3, r1
 8002aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002ab0:	e00a      	b.n	8002ac8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	4908      	ldr	r1, [pc, #32]	; (8002ad8 <__NVIC_SetPriority+0x50>)
 8002ab8:	88fb      	ldrh	r3, [r7, #6]
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	3b04      	subs	r3, #4
 8002ac0:	0112      	lsls	r2, r2, #4
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	761a      	strb	r2, [r3, #24]
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	e000e100 	.word	0xe000e100
 8002ad8:	e000ed00 	.word	0xe000ed00

08002adc <NVIC_EncodePriority>:
{
 8002adc:	b480      	push	{r7}
 8002ade:	b089      	sub	sp, #36	; 0x24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f1c3 0307 	rsb	r3, r3, #7
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	bf28      	it	cs
 8002afa:	2304      	movcs	r3, #4
 8002afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	3304      	adds	r3, #4
 8002b02:	2b06      	cmp	r3, #6
 8002b04:	d902      	bls.n	8002b0c <NVIC_EncodePriority+0x30>
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	3b03      	subs	r3, #3
 8002b0a:	e000      	b.n	8002b0e <NVIC_EncodePriority+0x32>
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b10:	f04f 32ff 	mov.w	r2, #4294967295
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43da      	mvns	r2, r3
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	401a      	ands	r2, r3
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b24:	f04f 31ff 	mov.w	r1, #4294967295
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2e:	43d9      	mvns	r1, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b34:	4313      	orrs	r3, r2
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3724      	adds	r7, #36	; 0x24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
	...

08002b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b54:	d301      	bcc.n	8002b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b56:	2301      	movs	r3, #1
 8002b58:	e00f      	b.n	8002b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b5a:	4a0a      	ldr	r2, [pc, #40]	; (8002b84 <SysTick_Config+0x40>)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b62:	210f      	movs	r1, #15
 8002b64:	f04f 30ff 	mov.w	r0, #4294967295
 8002b68:	f7ff ff8e 	bl	8002a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b6c:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <SysTick_Config+0x40>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b72:	4b04      	ldr	r3, [pc, #16]	; (8002b84 <SysTick_Config+0x40>)
 8002b74:	2207      	movs	r2, #7
 8002b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	e000e010 	.word	0xe000e010

08002b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f7ff ff29 	bl	80029e8 <__NVIC_SetPriorityGrouping>
}
 8002b96:	bf00      	nop
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b086      	sub	sp, #24
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	607a      	str	r2, [r7, #4]
 8002baa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bac:	f7ff ff40 	bl	8002a30 <__NVIC_GetPriorityGrouping>
 8002bb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	68b9      	ldr	r1, [r7, #8]
 8002bb6:	6978      	ldr	r0, [r7, #20]
 8002bb8:	f7ff ff90 	bl	8002adc <NVIC_EncodePriority>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff ff5f 	bl	8002a88 <__NVIC_SetPriority>
}
 8002bca:	bf00      	nop
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b082      	sub	sp, #8
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	4603      	mov	r3, r0
 8002bda:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff ff33 	bl	8002a4c <__NVIC_EnableIRQ>
}
 8002be6:	bf00      	nop
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b082      	sub	sp, #8
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7ff ffa4 	bl	8002b44 <SysTick_Config>
 8002bfc:	4603      	mov	r3, r0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b082      	sub	sp, #8
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e014      	b.n	8002c42 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	791b      	ldrb	r3, [r3, #4]
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d105      	bne.n	8002c2e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f7ff f971 	bl	8001f10 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2202      	movs	r2, #2
 8002c32:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
 8002c52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	795b      	ldrb	r3, [r3, #5]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d101      	bne.n	8002c60 <HAL_DAC_Start+0x16>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	e040      	b.n	8002ce2 <HAL_DAC_Start+0x98>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2202      	movs	r2, #2
 8002c6a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6819      	ldr	r1, [r3, #0]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	f003 0310 	and.w	r3, r3, #16
 8002c78:	2201      	movs	r2, #1
 8002c7a:	409a      	lsls	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10f      	bne.n	8002caa <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d11d      	bne.n	8002cd4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0201 	orr.w	r2, r2, #1
 8002ca6:	605a      	str	r2, [r3, #4]
 8002ca8:	e014      	b.n	8002cd4 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	f003 0310 	and.w	r3, r3, #16
 8002cba:	2102      	movs	r1, #2
 8002cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d107      	bne.n	8002cd4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0202 	orr.w	r2, r2, #2
 8002cd2:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b087      	sub	sp, #28
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	60f8      	str	r0, [r7, #12]
 8002cf6:	60b9      	str	r1, [r7, #8]
 8002cf8:	607a      	str	r2, [r7, #4]
 8002cfa:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d105      	bne.n	8002d18 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4413      	add	r3, r2
 8002d12:	3308      	adds	r3, #8
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	e004      	b.n	8002d22 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	3314      	adds	r3, #20
 8002d20:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	461a      	mov	r2, r3
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	371c      	adds	r7, #28
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b088      	sub	sp, #32
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	795b      	ldrb	r3, [r3, #5]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d101      	bne.n	8002d50 <HAL_DAC_ConfigChannel+0x18>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	e12a      	b.n	8002fa6 <HAL_DAC_ConfigChannel+0x26e>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2201      	movs	r2, #1
 8002d54:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2202      	movs	r2, #2
 8002d5a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	f040 8081 	bne.w	8002e68 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002d66:	f7ff fdcf 	bl	8002908 <HAL_GetTick>
 8002d6a:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d140      	bne.n	8002df4 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002d72:	e018      	b.n	8002da6 <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002d74:	f7ff fdc8 	bl	8002908 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d911      	bls.n	8002da6 <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d88:	4b89      	ldr	r3, [pc, #548]	; (8002fb0 <HAL_DAC_ConfigChannel+0x278>)
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00a      	beq.n	8002da6 <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	f043 0208 	orr.w	r2, r3, #8
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2203      	movs	r2, #3
 8002da0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e0ff      	b.n	8002fa6 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dac:	4b80      	ldr	r3, [pc, #512]	; (8002fb0 <HAL_DAC_ConfigChannel+0x278>)
 8002dae:	4013      	ands	r3, r2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1df      	bne.n	8002d74 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8002db4:	2001      	movs	r0, #1
 8002db6:	f7ff fdb3 	bl	8002920 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	6992      	ldr	r2, [r2, #24]
 8002dc2:	641a      	str	r2, [r3, #64]	; 0x40
 8002dc4:	e023      	b.n	8002e0e <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002dc6:	f7ff fd9f 	bl	8002908 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d90f      	bls.n	8002df4 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	da0a      	bge.n	8002df4 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	f043 0208 	orr.w	r2, r3, #8
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2203      	movs	r2, #3
 8002dee:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e0d8      	b.n	8002fa6 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	dbe3      	blt.n	8002dc6 <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 8002dfe:	2001      	movs	r0, #1
 8002e00:	f7ff fd8e 	bl	8002920 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68ba      	ldr	r2, [r7, #8]
 8002e0a:	6992      	ldr	r2, [r2, #24]
 8002e0c:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f003 0310 	and.w	r3, r3, #16
 8002e1a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e22:	43db      	mvns	r3, r3
 8002e24:	ea02 0103 	and.w	r1, r2, r3
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	69da      	ldr	r2, [r3, #28]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f003 0310 	and.w	r3, r3, #16
 8002e32:	409a      	lsls	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f003 0310 	and.w	r3, r3, #16
 8002e48:	21ff      	movs	r1, #255	; 0xff
 8002e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	ea02 0103 	and.w	r1, r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	6a1a      	ldr	r2, [r3, #32]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f003 0310 	and.w	r3, r3, #16
 8002e5e:	409a      	lsls	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d11d      	bne.n	8002eac <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e76:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f003 0310 	and.w	r3, r3, #16
 8002e7e:	221f      	movs	r2, #31
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f003 0310 	and.w	r3, r3, #16
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f003 0310 	and.w	r3, r3, #16
 8002eba:	2207      	movs	r2, #7
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d102      	bne.n	8002ed6 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	61fb      	str	r3, [r7, #28]
 8002ed4:	e00f      	b.n	8002ef6 <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d102      	bne.n	8002ee4 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	61fb      	str	r3, [r7, #28]
 8002ee2:	e008      	b.n	8002ef6 <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d102      	bne.n	8002ef2 <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002eec:	2301      	movs	r3, #1
 8002eee:	61fb      	str	r3, [r7, #28]
 8002ef0:	e001      	b.n	8002ef6 <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	69fa      	ldr	r2, [r7, #28]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f003 0310 	and.w	r3, r3, #16
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6819      	ldr	r1, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f003 0310 	and.w	r3, r3, #16
 8002f2c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	43da      	mvns	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	400a      	ands	r2, r1
 8002f3c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f003 0310 	and.w	r3, r3, #16
 8002f4c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	43db      	mvns	r3, r3
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f003 0310 	and.w	r3, r3, #16
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6819      	ldr	r1, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f003 0310 	and.w	r3, r3, #16
 8002f88:	22c0      	movs	r2, #192	; 0xc0
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	43da      	mvns	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	400a      	ands	r2, r1
 8002f96:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3720      	adds	r7, #32
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	20008000 	.word	0x20008000

08002fb4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e0cf      	b.n	8003166 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d106      	bne.n	8002fde <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2223      	movs	r2, #35	; 0x23
 8002fd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f7fe ffdf 	bl	8001f9c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fde:	4b64      	ldr	r3, [pc, #400]	; (8003170 <HAL_ETH_Init+0x1bc>)
 8002fe0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002fe4:	4a62      	ldr	r2, [pc, #392]	; (8003170 <HAL_ETH_Init+0x1bc>)
 8002fe6:	f043 0302 	orr.w	r3, r3, #2
 8002fea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002fee:	4b60      	ldr	r3, [pc, #384]	; (8003170 <HAL_ETH_Init+0x1bc>)
 8002ff0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	60bb      	str	r3, [r7, #8]
 8002ffa:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	7a1b      	ldrb	r3, [r3, #8]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d103      	bne.n	800300c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003004:	2000      	movs	r0, #0
 8003006:	f7ff fcdb 	bl	80029c0 <HAL_SYSCFG_ETHInterfaceSelect>
 800300a:	e003      	b.n	8003014 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800300c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003010:	f7ff fcd6 	bl	80029c0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003014:	4b57      	ldr	r3, [pc, #348]	; (8003174 <HAL_ETH_Init+0x1c0>)
 8003016:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6812      	ldr	r2, [r2, #0]
 8003026:	f043 0301 	orr.w	r3, r3, #1
 800302a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800302e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003030:	f7ff fc6a 	bl	8002908 <HAL_GetTick>
 8003034:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003036:	e011      	b.n	800305c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003038:	f7ff fc66 	bl	8002908 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003046:	d909      	bls.n	800305c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2204      	movs	r2, #4
 800304c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	22e0      	movs	r2, #224	; 0xe0
 8003054:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e084      	b.n	8003166 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1e4      	bne.n	8003038 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f886 	bl	8003180 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003074:	f003 fe42 	bl	8006cfc <HAL_RCC_GetHCLKFreq>
 8003078:	4603      	mov	r3, r0
 800307a:	4a3f      	ldr	r2, [pc, #252]	; (8003178 <HAL_ETH_Init+0x1c4>)
 800307c:	fba2 2303 	umull	r2, r3, r2, r3
 8003080:	0c9a      	lsrs	r2, r3, #18
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	3a01      	subs	r2, #1
 8003088:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 fa71 	bl	8003574 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800309a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800309e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6812      	ldr	r2, [r2, #0]
 80030a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80030aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80030ae:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	f003 0303 	and.w	r3, r3, #3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d009      	beq.n	80030d2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	22e0      	movs	r2, #224	; 0xe0
 80030ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e049      	b.n	8003166 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030da:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80030de:	4b27      	ldr	r3, [pc, #156]	; (800317c <HAL_ETH_Init+0x1c8>)
 80030e0:	4013      	ands	r3, r2
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6952      	ldr	r2, [r2, #20]
 80030e6:	0051      	lsls	r1, r2, #1
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6812      	ldr	r2, [r2, #0]
 80030ec:	430b      	orrs	r3, r1
 80030ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80030f2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 fad9 	bl	80036ae <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 fb1f 	bl	8003740 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	3305      	adds	r3, #5
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	021a      	lsls	r2, r3, #8
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	3304      	adds	r3, #4
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	4619      	mov	r1, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	3303      	adds	r3, #3
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	061a      	lsls	r2, r3, #24
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	3302      	adds	r3, #2
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	041b      	lsls	r3, r3, #16
 8003134:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	3301      	adds	r3, #1
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003140:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800314e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003150:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2210      	movs	r2, #16
 8003160:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	58024400 	.word	0x58024400
 8003174:	58000400 	.word	0x58000400
 8003178:	431bde83 	.word	0x431bde83
 800317c:	ffff8001 	.word	0xffff8001

08003180 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003190:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003198:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800319a:	f003 fdaf 	bl	8006cfc <HAL_RCC_GetHCLKFreq>
 800319e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	4a1e      	ldr	r2, [pc, #120]	; (800321c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d908      	bls.n	80031ba <HAL_ETH_SetMDIOClockRange+0x3a>
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	4a1d      	ldr	r2, [pc, #116]	; (8003220 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d804      	bhi.n	80031ba <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	e027      	b.n	800320a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	4a18      	ldr	r2, [pc, #96]	; (8003220 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d908      	bls.n	80031d4 <HAL_ETH_SetMDIOClockRange+0x54>
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	4a17      	ldr	r2, [pc, #92]	; (8003224 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d204      	bcs.n	80031d4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80031d0:	60fb      	str	r3, [r7, #12]
 80031d2:	e01a      	b.n	800320a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	4a13      	ldr	r2, [pc, #76]	; (8003224 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d303      	bcc.n	80031e4 <HAL_ETH_SetMDIOClockRange+0x64>
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	4a12      	ldr	r2, [pc, #72]	; (8003228 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d911      	bls.n	8003208 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	4a10      	ldr	r2, [pc, #64]	; (8003228 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d908      	bls.n	80031fe <HAL_ETH_SetMDIOClockRange+0x7e>
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	4a0f      	ldr	r2, [pc, #60]	; (800322c <HAL_ETH_SetMDIOClockRange+0xac>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d804      	bhi.n	80031fe <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	e005      	b.n	800320a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003204:	60fb      	str	r3, [r7, #12]
 8003206:	e000      	b.n	800320a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003208:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003214:	bf00      	nop
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	01312cff 	.word	0x01312cff
 8003220:	02160ebf 	.word	0x02160ebf
 8003224:	03938700 	.word	0x03938700
 8003228:	05f5e0ff 	.word	0x05f5e0ff
 800322c:	08f0d17f 	.word	0x08f0d17f

08003230 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8003242:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	791b      	ldrb	r3, [r3, #4]
 8003248:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800324a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	7b1b      	ldrb	r3, [r3, #12]
 8003250:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003252:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	7b5b      	ldrb	r3, [r3, #13]
 8003258:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800325a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	7b9b      	ldrb	r3, [r3, #14]
 8003260:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003262:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	7bdb      	ldrb	r3, [r3, #15]
 8003268:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800326a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	7c12      	ldrb	r2, [r2, #16]
 8003270:	2a00      	cmp	r2, #0
 8003272:	d102      	bne.n	800327a <ETH_SetMACConfig+0x4a>
 8003274:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003278:	e000      	b.n	800327c <ETH_SetMACConfig+0x4c>
 800327a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800327c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	7c52      	ldrb	r2, [r2, #17]
 8003282:	2a00      	cmp	r2, #0
 8003284:	d102      	bne.n	800328c <ETH_SetMACConfig+0x5c>
 8003286:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800328a:	e000      	b.n	800328e <ETH_SetMACConfig+0x5e>
 800328c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800328e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	7c9b      	ldrb	r3, [r3, #18]
 8003294:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003296:	431a      	orrs	r2, r3
               macconf->Speed |
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800329c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80032a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	7f1b      	ldrb	r3, [r3, #28]
 80032a8:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80032aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	7f5b      	ldrb	r3, [r3, #29]
 80032b0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80032b2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	7f92      	ldrb	r2, [r2, #30]
 80032b8:	2a00      	cmp	r2, #0
 80032ba:	d102      	bne.n	80032c2 <ETH_SetMACConfig+0x92>
 80032bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032c0:	e000      	b.n	80032c4 <ETH_SetMACConfig+0x94>
 80032c2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80032c4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	7fdb      	ldrb	r3, [r3, #31]
 80032ca:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80032cc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80032d4:	2a00      	cmp	r2, #0
 80032d6:	d102      	bne.n	80032de <ETH_SetMACConfig+0xae>
 80032d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032dc:	e000      	b.n	80032e0 <ETH_SetMACConfig+0xb0>
 80032de:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80032e0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80032e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80032ee:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80032f0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80032f6:	4313      	orrs	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	4b56      	ldr	r3, [pc, #344]	; (800345c <ETH_SetMACConfig+0x22c>)
 8003302:	4013      	ands	r3, r2
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6812      	ldr	r2, [r2, #0]
 8003308:	68f9      	ldr	r1, [r7, #12]
 800330a:	430b      	orrs	r3, r1
 800330c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003312:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800331a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800331c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003324:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003326:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800332e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003330:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003338:	2a00      	cmp	r2, #0
 800333a:	d102      	bne.n	8003342 <ETH_SetMACConfig+0x112>
 800333c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003340:	e000      	b.n	8003344 <ETH_SetMACConfig+0x114>
 8003342:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003344:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800334a:	4313      	orrs	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	4b42      	ldr	r3, [pc, #264]	; (8003460 <ETH_SetMACConfig+0x230>)
 8003356:	4013      	ands	r3, r2
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	6812      	ldr	r2, [r2, #0]
 800335c:	68f9      	ldr	r1, [r7, #12]
 800335e:	430b      	orrs	r3, r1
 8003360:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003368:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800336e:	4313      	orrs	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68da      	ldr	r2, [r3, #12]
 8003378:	4b3a      	ldr	r3, [pc, #232]	; (8003464 <ETH_SetMACConfig+0x234>)
 800337a:	4013      	ands	r3, r2
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6812      	ldr	r2, [r2, #0]
 8003380:	68f9      	ldr	r1, [r7, #12]
 8003382:	430b      	orrs	r3, r1
 8003384:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800338c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003392:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800339a:	2a00      	cmp	r2, #0
 800339c:	d101      	bne.n	80033a2 <ETH_SetMACConfig+0x172>
 800339e:	2280      	movs	r2, #128	; 0x80
 80033a0:	e000      	b.n	80033a4 <ETH_SetMACConfig+0x174>
 80033a2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80033a4:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033aa:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80033ac:	4313      	orrs	r3, r2
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033b6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80033ba:	4013      	ands	r3, r2
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6812      	ldr	r2, [r2, #0]
 80033c0:	68f9      	ldr	r1, [r7, #12]
 80033c2:	430b      	orrs	r3, r1
 80033c4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80033cc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80033d4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e2:	f023 0103 	bic.w	r1, r3, #3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80033fa:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8003416:	2a00      	cmp	r2, #0
 8003418:	d101      	bne.n	800341e <ETH_SetMACConfig+0x1ee>
 800341a:	2240      	movs	r2, #64	; 0x40
 800341c:	e000      	b.n	8003420 <ETH_SetMACConfig+0x1f0>
 800341e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003420:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003428:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800342a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8003432:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003434:	4313      	orrs	r3, r2
 8003436:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003440:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	430a      	orrs	r2, r1
 800344c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003450:	bf00      	nop
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	00048083 	.word	0x00048083
 8003460:	c0f88000 	.word	0xc0f88000
 8003464:	fffffef0 	.word	0xfffffef0

08003468 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	4b38      	ldr	r3, [pc, #224]	; (8003560 <ETH_SetDMAConfig+0xf8>)
 800347e:	4013      	ands	r3, r2
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	6811      	ldr	r1, [r2, #0]
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6812      	ldr	r2, [r2, #0]
 8003488:	430b      	orrs	r3, r1
 800348a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800348e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	791b      	ldrb	r3, [r3, #4]
 8003494:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800349a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	7b1b      	ldrb	r3, [r3, #12]
 80034a0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80034a2:	4313      	orrs	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	4b2c      	ldr	r3, [pc, #176]	; (8003564 <ETH_SetDMAConfig+0xfc>)
 80034b2:	4013      	ands	r3, r2
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6812      	ldr	r2, [r2, #0]
 80034b8:	68f9      	ldr	r1, [r7, #12]
 80034ba:	430b      	orrs	r3, r1
 80034bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80034c0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	7b5b      	ldrb	r3, [r3, #13]
 80034c6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80034cc:	4313      	orrs	r3, r2
 80034ce:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034d8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80034dc:	4b22      	ldr	r3, [pc, #136]	; (8003568 <ETH_SetDMAConfig+0x100>)
 80034de:	4013      	ands	r3, r2
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6812      	ldr	r2, [r2, #0]
 80034e4:	68f9      	ldr	r1, [r7, #12]
 80034e6:	430b      	orrs	r3, r1
 80034e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80034ec:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	7d1b      	ldrb	r3, [r3, #20]
 80034f8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80034fa:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	7f5b      	ldrb	r3, [r3, #29]
 8003500:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003502:	4313      	orrs	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800350e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8003512:	4b16      	ldr	r3, [pc, #88]	; (800356c <ETH_SetDMAConfig+0x104>)
 8003514:	4013      	ands	r3, r2
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6812      	ldr	r2, [r2, #0]
 800351a:	68f9      	ldr	r1, [r7, #12]
 800351c:	430b      	orrs	r3, r1
 800351e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003522:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	7f1b      	ldrb	r3, [r3, #28]
 800352a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003530:	4313      	orrs	r3, r2
 8003532:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800353c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003540:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <ETH_SetDMAConfig+0x108>)
 8003542:	4013      	ands	r3, r2
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6812      	ldr	r2, [r2, #0]
 8003548:	68f9      	ldr	r1, [r7, #12]
 800354a:	430b      	orrs	r3, r1
 800354c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003550:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8003554:	bf00      	nop
 8003556:	3714      	adds	r7, #20
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	ffff87fd 	.word	0xffff87fd
 8003564:	ffff2ffe 	.word	0xffff2ffe
 8003568:	fffec000 	.word	0xfffec000
 800356c:	ffc0efef 	.word	0xffc0efef
 8003570:	7fc0ffff 	.word	0x7fc0ffff

08003574 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b0a4      	sub	sp, #144	; 0x90
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800357c:	2301      	movs	r3, #1
 800357e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003582:	2300      	movs	r3, #0
 8003584:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003586:	2300      	movs	r3, #0
 8003588:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800358c:	2300      	movs	r3, #0
 800358e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003592:	2301      	movs	r3, #1
 8003594:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003598:	2301      	movs	r3, #1
 800359a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800359e:	2301      	movs	r3, #1
 80035a0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80035a4:	2300      	movs	r3, #0
 80035a6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80035aa:	2301      	movs	r3, #1
 80035ac:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80035b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035b4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80035b6:	2300      	movs	r3, #0
 80035b8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80035bc:	2300      	movs	r3, #0
 80035be:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80035c0:	2300      	movs	r3, #0
 80035c2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80035c6:	2300      	movs	r3, #0
 80035c8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80035cc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80035d0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80035d2:	2300      	movs	r3, #0
 80035d4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80035d8:	2300      	movs	r3, #0
 80035da:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80035dc:	2301      	movs	r3, #1
 80035de:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80035e2:	2300      	movs	r3, #0
 80035e4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80035e8:	2300      	movs	r3, #0
 80035ea:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80035ee:	2300      	movs	r3, #0
 80035f0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80035f2:	2300      	movs	r3, #0
 80035f4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80035f6:	2300      	movs	r3, #0
 80035f8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80035fa:	2300      	movs	r3, #0
 80035fc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003600:	2300      	movs	r3, #0
 8003602:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003606:	2301      	movs	r3, #1
 8003608:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800360c:	2320      	movs	r3, #32
 800360e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003612:	2301      	movs	r3, #1
 8003614:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003618:	2300      	movs	r3, #0
 800361a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800361e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003622:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003624:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003628:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800362a:	2300      	movs	r3, #0
 800362c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003630:	2302      	movs	r3, #2
 8003632:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003636:	2300      	movs	r3, #0
 8003638:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800363c:	2300      	movs	r3, #0
 800363e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003642:	2300      	movs	r3, #0
 8003644:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003648:	2301      	movs	r3, #1
 800364a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800364e:	2300      	movs	r3, #0
 8003650:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003652:	2301      	movs	r3, #1
 8003654:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003658:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800365c:	4619      	mov	r1, r3
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7ff fde6 	bl	8003230 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003664:	2301      	movs	r3, #1
 8003666:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003668:	2301      	movs	r3, #1
 800366a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800366c:	2300      	movs	r3, #0
 800366e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003670:	2300      	movs	r3, #0
 8003672:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003676:	2300      	movs	r3, #0
 8003678:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800367a:	2300      	movs	r3, #0
 800367c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800367e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003682:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003684:	2300      	movs	r3, #0
 8003686:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003688:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800368c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800368e:	2300      	movs	r3, #0
 8003690:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003694:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003698:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800369a:	f107 0308 	add.w	r3, r7, #8
 800369e:	4619      	mov	r1, r3
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7ff fee1 	bl	8003468 <ETH_SetDMAConfig>
}
 80036a6:	bf00      	nop
 80036a8:	3790      	adds	r7, #144	; 0x90
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b085      	sub	sp, #20
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80036b6:	2300      	movs	r3, #0
 80036b8:	60fb      	str	r3, [r7, #12]
 80036ba:	e01d      	b.n	80036f8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68d9      	ldr	r1, [r3, #12]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	4613      	mov	r3, r2
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	4413      	add	r3, r2
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	440b      	add	r3, r1
 80036cc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	2200      	movs	r2, #0
 80036d8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2200      	movs	r2, #0
 80036de:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	2200      	movs	r2, #0
 80036e4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	3206      	adds	r2, #6
 80036ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	3301      	adds	r3, #1
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2b03      	cmp	r3, #3
 80036fc:	d9de      	bls.n	80036bc <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800370c:	461a      	mov	r2, r3
 800370e:	2303      	movs	r3, #3
 8003710:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68da      	ldr	r2, [r3, #12]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003720:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68da      	ldr	r2, [r3, #12]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003730:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8003734:	bf00      	nop
 8003736:	3714      	adds	r7, #20
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003748:	2300      	movs	r3, #0
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	e023      	b.n	8003796 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6919      	ldr	r1, [r3, #16]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	4613      	mov	r3, r2
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	4413      	add	r3, r2
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	440b      	add	r3, r1
 800375e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2200      	movs	r2, #0
 8003764:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2200      	movs	r2, #0
 800376a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	2200      	movs	r2, #0
 8003770:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	2200      	movs	r2, #0
 8003776:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2200      	movs	r2, #0
 800377c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	2200      	movs	r2, #0
 8003782:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003784:	68b9      	ldr	r1, [r7, #8]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	3212      	adds	r2, #18
 800378c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	3301      	adds	r3, #1
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2b03      	cmp	r3, #3
 800379a:	d9d8      	bls.n	800374e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037c2:	461a      	mov	r2, r3
 80037c4:	2303      	movs	r3, #3
 80037c6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691a      	ldr	r2, [r3, #16]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037d6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037ea:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80037ee:	bf00      	nop
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
	...

080037fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b089      	sub	sp, #36	; 0x24
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003806:	2300      	movs	r3, #0
 8003808:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800380a:	4b89      	ldr	r3, [pc, #548]	; (8003a30 <HAL_GPIO_Init+0x234>)
 800380c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800380e:	e194      	b.n	8003b3a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	2101      	movs	r1, #1
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	fa01 f303 	lsl.w	r3, r1, r3
 800381c:	4013      	ands	r3, r2
 800381e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 8186 	beq.w	8003b34 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f003 0303 	and.w	r3, r3, #3
 8003830:	2b01      	cmp	r3, #1
 8003832:	d005      	beq.n	8003840 <HAL_GPIO_Init+0x44>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f003 0303 	and.w	r3, r3, #3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d130      	bne.n	80038a2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	2203      	movs	r2, #3
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	43db      	mvns	r3, r3
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	4013      	ands	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	68da      	ldr	r2, [r3, #12]
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	4313      	orrs	r3, r2
 8003868:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003876:	2201      	movs	r2, #1
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	43db      	mvns	r3, r3
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	4013      	ands	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	091b      	lsrs	r3, r3, #4
 800388c:	f003 0201 	and.w	r2, r3, #1
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4313      	orrs	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f003 0303 	and.w	r3, r3, #3
 80038aa:	2b03      	cmp	r3, #3
 80038ac:	d017      	beq.n	80038de <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	2203      	movs	r2, #3
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	43db      	mvns	r3, r3
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	4013      	ands	r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	689a      	ldr	r2, [r3, #8]
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d123      	bne.n	8003932 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	08da      	lsrs	r2, r3, #3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	3208      	adds	r2, #8
 80038f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f003 0307 	and.w	r3, r3, #7
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	220f      	movs	r2, #15
 8003902:	fa02 f303 	lsl.w	r3, r2, r3
 8003906:	43db      	mvns	r3, r3
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	4013      	ands	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	691a      	ldr	r2, [r3, #16]
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	fa02 f303 	lsl.w	r3, r2, r3
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	4313      	orrs	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	08da      	lsrs	r2, r3, #3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3208      	adds	r2, #8
 800392c:	69b9      	ldr	r1, [r7, #24]
 800392e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	2203      	movs	r2, #3
 800393e:	fa02 f303 	lsl.w	r3, r2, r3
 8003942:	43db      	mvns	r3, r3
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	4013      	ands	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f003 0203 	and.w	r2, r3, #3
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	fa02 f303 	lsl.w	r3, r2, r3
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4313      	orrs	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800396e:	2b00      	cmp	r3, #0
 8003970:	f000 80e0 	beq.w	8003b34 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003974:	4b2f      	ldr	r3, [pc, #188]	; (8003a34 <HAL_GPIO_Init+0x238>)
 8003976:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800397a:	4a2e      	ldr	r2, [pc, #184]	; (8003a34 <HAL_GPIO_Init+0x238>)
 800397c:	f043 0302 	orr.w	r3, r3, #2
 8003980:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003984:	4b2b      	ldr	r3, [pc, #172]	; (8003a34 <HAL_GPIO_Init+0x238>)
 8003986:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003992:	4a29      	ldr	r2, [pc, #164]	; (8003a38 <HAL_GPIO_Init+0x23c>)
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	089b      	lsrs	r3, r3, #2
 8003998:	3302      	adds	r3, #2
 800399a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800399e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	220f      	movs	r2, #15
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	43db      	mvns	r3, r3
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	4013      	ands	r3, r2
 80039b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a20      	ldr	r2, [pc, #128]	; (8003a3c <HAL_GPIO_Init+0x240>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d052      	beq.n	8003a64 <HAL_GPIO_Init+0x268>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a1f      	ldr	r2, [pc, #124]	; (8003a40 <HAL_GPIO_Init+0x244>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d031      	beq.n	8003a2a <HAL_GPIO_Init+0x22e>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a1e      	ldr	r2, [pc, #120]	; (8003a44 <HAL_GPIO_Init+0x248>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d02b      	beq.n	8003a26 <HAL_GPIO_Init+0x22a>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a1d      	ldr	r2, [pc, #116]	; (8003a48 <HAL_GPIO_Init+0x24c>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d025      	beq.n	8003a22 <HAL_GPIO_Init+0x226>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a1c      	ldr	r2, [pc, #112]	; (8003a4c <HAL_GPIO_Init+0x250>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d01f      	beq.n	8003a1e <HAL_GPIO_Init+0x222>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a1b      	ldr	r2, [pc, #108]	; (8003a50 <HAL_GPIO_Init+0x254>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d019      	beq.n	8003a1a <HAL_GPIO_Init+0x21e>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a1a      	ldr	r2, [pc, #104]	; (8003a54 <HAL_GPIO_Init+0x258>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d013      	beq.n	8003a16 <HAL_GPIO_Init+0x21a>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a19      	ldr	r2, [pc, #100]	; (8003a58 <HAL_GPIO_Init+0x25c>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d00d      	beq.n	8003a12 <HAL_GPIO_Init+0x216>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a18      	ldr	r2, [pc, #96]	; (8003a5c <HAL_GPIO_Init+0x260>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d007      	beq.n	8003a0e <HAL_GPIO_Init+0x212>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a17      	ldr	r2, [pc, #92]	; (8003a60 <HAL_GPIO_Init+0x264>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d101      	bne.n	8003a0a <HAL_GPIO_Init+0x20e>
 8003a06:	2309      	movs	r3, #9
 8003a08:	e02d      	b.n	8003a66 <HAL_GPIO_Init+0x26a>
 8003a0a:	230a      	movs	r3, #10
 8003a0c:	e02b      	b.n	8003a66 <HAL_GPIO_Init+0x26a>
 8003a0e:	2308      	movs	r3, #8
 8003a10:	e029      	b.n	8003a66 <HAL_GPIO_Init+0x26a>
 8003a12:	2307      	movs	r3, #7
 8003a14:	e027      	b.n	8003a66 <HAL_GPIO_Init+0x26a>
 8003a16:	2306      	movs	r3, #6
 8003a18:	e025      	b.n	8003a66 <HAL_GPIO_Init+0x26a>
 8003a1a:	2305      	movs	r3, #5
 8003a1c:	e023      	b.n	8003a66 <HAL_GPIO_Init+0x26a>
 8003a1e:	2304      	movs	r3, #4
 8003a20:	e021      	b.n	8003a66 <HAL_GPIO_Init+0x26a>
 8003a22:	2303      	movs	r3, #3
 8003a24:	e01f      	b.n	8003a66 <HAL_GPIO_Init+0x26a>
 8003a26:	2302      	movs	r3, #2
 8003a28:	e01d      	b.n	8003a66 <HAL_GPIO_Init+0x26a>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e01b      	b.n	8003a66 <HAL_GPIO_Init+0x26a>
 8003a2e:	bf00      	nop
 8003a30:	58000080 	.word	0x58000080
 8003a34:	58024400 	.word	0x58024400
 8003a38:	58000400 	.word	0x58000400
 8003a3c:	58020000 	.word	0x58020000
 8003a40:	58020400 	.word	0x58020400
 8003a44:	58020800 	.word	0x58020800
 8003a48:	58020c00 	.word	0x58020c00
 8003a4c:	58021000 	.word	0x58021000
 8003a50:	58021400 	.word	0x58021400
 8003a54:	58021800 	.word	0x58021800
 8003a58:	58021c00 	.word	0x58021c00
 8003a5c:	58022000 	.word	0x58022000
 8003a60:	58022400 	.word	0x58022400
 8003a64:	2300      	movs	r3, #0
 8003a66:	69fa      	ldr	r2, [r7, #28]
 8003a68:	f002 0203 	and.w	r2, r2, #3
 8003a6c:	0092      	lsls	r2, r2, #2
 8003a6e:	4093      	lsls	r3, r2
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a76:	4938      	ldr	r1, [pc, #224]	; (8003b58 <HAL_GPIO_Init+0x35c>)
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	089b      	lsrs	r3, r3, #2
 8003a7c:	3302      	adds	r3, #2
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	43db      	mvns	r3, r3
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	4013      	ands	r3, r2
 8003a94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003aaa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	43db      	mvns	r3, r3
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003ad8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	4013      	ands	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	43db      	mvns	r3, r3
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	4013      	ands	r3, r2
 8003b18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	3301      	adds	r3, #1
 8003b38:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	fa22 f303 	lsr.w	r3, r2, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f47f ae63 	bne.w	8003810 <HAL_GPIO_Init+0x14>
  }
}
 8003b4a:	bf00      	nop
 8003b4c:	bf00      	nop
 8003b4e:	3724      	adds	r7, #36	; 0x24
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	58000400 	.word	0x58000400

08003b5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	460b      	mov	r3, r1
 8003b66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691a      	ldr	r2, [r3, #16]
 8003b6c:	887b      	ldrh	r3, [r7, #2]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d002      	beq.n	8003b7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b74:	2301      	movs	r3, #1
 8003b76:	73fb      	strb	r3, [r7, #15]
 8003b78:	e001      	b.n	8003b7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3714      	adds	r7, #20
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	460b      	mov	r3, r1
 8003b96:	807b      	strh	r3, [r7, #2]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b9c:	787b      	ldrb	r3, [r7, #1]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ba2:	887a      	ldrh	r2, [r7, #2]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003ba8:	e003      	b.n	8003bb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003baa:	887b      	ldrh	r3, [r7, #2]
 8003bac:	041a      	lsls	r2, r3, #16
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	619a      	str	r2, [r3, #24]
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b085      	sub	sp, #20
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003bd0:	887a      	ldrh	r2, [r7, #2]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	041a      	lsls	r2, r3, #16
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	43d9      	mvns	r1, r3
 8003bdc:	887b      	ldrh	r3, [r7, #2]
 8003bde:	400b      	ands	r3, r1
 8003be0:	431a      	orrs	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	619a      	str	r2, [r3, #24]
}
 8003be6:	bf00      	nop
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b082      	sub	sp, #8
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c00:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003c04:	88fb      	ldrh	r3, [r7, #6]
 8003c06:	4013      	ands	r3, r2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d008      	beq.n	8003c1e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c10:	88fb      	ldrh	r3, [r7, #6]
 8003c12:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c16:	88fb      	ldrh	r3, [r7, #6]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7fd f9d5 	bl	8000fc8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003c1e:	bf00      	nop
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
	...

08003c28 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e0bd      	b.n	8003db6 <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d031      	beq.n	8003ce2 <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a4f      	ldr	r2, [pc, #316]	; (8003dc0 <HAL_HRTIM_Init+0x198>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d10e      	bne.n	8003ca6 <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8003c88:	4b4e      	ldr	r3, [pc, #312]	; (8003dc4 <HAL_HRTIM_Init+0x19c>)
 8003c8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c8e:	4a4d      	ldr	r2, [pc, #308]	; (8003dc4 <HAL_HRTIM_Init+0x19c>)
 8003c90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c94:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003c98:	4b4a      	ldr	r3, [pc, #296]	; (8003dc4 <HAL_HRTIM_Init+0x19c>)
 8003c9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003cb4:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003cca:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7fe fa28 	bl	8002138 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d012      	beq.n	8003d1a <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d02:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	75fb      	strb	r3, [r7, #23]
 8003d2e:	e03e      	b.n	8003dae <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8003d30:	7dfa      	ldrb	r2, [r7, #23]
 8003d32:	6879      	ldr	r1, [r7, #4]
 8003d34:	4613      	mov	r3, r2
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	1a9b      	subs	r3, r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	440b      	add	r3, r1
 8003d3e:	3318      	adds	r3, #24
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8003d44:	7dfa      	ldrb	r2, [r7, #23]
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	1a9b      	subs	r3, r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	440b      	add	r3, r1
 8003d52:	331c      	adds	r3, #28
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8003d58:	7dfa      	ldrb	r2, [r7, #23]
 8003d5a:	6879      	ldr	r1, [r7, #4]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	1a9b      	subs	r3, r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	440b      	add	r3, r1
 8003d66:	3320      	adds	r3, #32
 8003d68:	2200      	movs	r2, #0
 8003d6a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8003d6c:	7dfa      	ldrb	r2, [r7, #23]
 8003d6e:	6879      	ldr	r1, [r7, #4]
 8003d70:	4613      	mov	r3, r2
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	1a9b      	subs	r3, r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	440b      	add	r3, r1
 8003d7a:	3324      	adds	r3, #36	; 0x24
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8003d80:	7dfa      	ldrb	r2, [r7, #23]
 8003d82:	6879      	ldr	r1, [r7, #4]
 8003d84:	4613      	mov	r3, r2
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	1a9b      	subs	r3, r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	3328      	adds	r3, #40	; 0x28
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8003d94:	7dfa      	ldrb	r2, [r7, #23]
 8003d96:	6879      	ldr	r1, [r7, #4]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	1a9b      	subs	r3, r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	440b      	add	r3, r1
 8003da2:	3330      	adds	r3, #48	; 0x30
 8003da4:	2200      	movs	r2, #0
 8003da6:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8003da8:	7dfb      	ldrb	r3, [r7, #23]
 8003daa:	3301      	adds	r3, #1
 8003dac:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8003dae:	7dfb      	ldrb	r3, [r7, #23]
 8003db0:	2b05      	cmp	r3, #5
 8003db2:	d9bd      	bls.n	8003d30 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3718      	adds	r7, #24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40017400 	.word	0x40017400
 8003dc4:	58024400 	.word	0x58024400

08003dc8 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d101      	bne.n	8003de4 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8003de0:	2302      	movs	r3, #2
 8003de2:	e015      	b.n	8003e10 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	2b05      	cmp	r3, #5
 8003df0:	d104      	bne.n	8003dfc <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 fd43 	bl	8004880 <HRTIM_MasterBase_Config>
 8003dfa:	e004      	b.n	8003e06 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	68b9      	ldr	r1, [r7, #8]
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 fd6c 	bl	80048de <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d101      	bne.n	8003e34 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8003e30:	2302      	movs	r3, #2
 8003e32:	e05f      	b.n	8003ef4 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8003e3e:	2302      	movs	r3, #2
 8003e40:	e058      	b.n	8003ef4 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2b05      	cmp	r3, #5
 8003e56:	d104      	bne.n	8003e62 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8003e58:	6879      	ldr	r1, [r7, #4]
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f000 fd7f 	bl	800495e <HRTIM_MasterWaveform_Config>
 8003e60:	e004      	b.n	8003e6c <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	68b9      	ldr	r1, [r7, #8]
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f000 fde0 	bl	8004a2c <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6819      	ldr	r1, [r3, #0]
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	4613      	mov	r3, r2
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	1a9b      	subs	r3, r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4403      	add	r3, r0
 8003e7e:	3320      	adds	r3, #32
 8003e80:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6859      	ldr	r1, [r3, #4]
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	1a9b      	subs	r3, r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4403      	add	r3, r0
 8003e94:	3324      	adds	r3, #36	; 0x24
 8003e96:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6899      	ldr	r1, [r3, #8]
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	1a9b      	subs	r3, r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4403      	add	r3, r0
 8003eaa:	3328      	adds	r3, #40	; 0x28
 8003eac:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68d9      	ldr	r1, [r3, #12]
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	00db      	lsls	r3, r3, #3
 8003eba:	1a9b      	subs	r3, r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4403      	add	r3, r0
 8003ec0:	332c      	adds	r3, #44	; 0x2c
 8003ec2:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6919      	ldr	r1, [r3, #16]
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	1a9b      	subs	r3, r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4403      	add	r3, r0
 8003ed6:	3330      	adds	r3, #48	; 0x30
 8003ed8:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8003eda:	68b9      	ldr	r1, [r7, #8]
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 ffe3 	bl	8004ea8 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
 8003f08:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d101      	bne.n	8003f1a <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 8003f16:	2302      	movs	r3, #2
 8003f18:	e157      	b.n	80041ca <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d101      	bne.n	8003f28 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8003f24:	2302      	movs	r3, #2
 8003f26:	e150      	b.n	80041ca <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2202      	movs	r2, #2
 8003f34:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	2b05      	cmp	r3, #5
 8003f3c:	d140      	bne.n	8003fc0 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	3b01      	subs	r3, #1
 8003f42:	2b07      	cmp	r3, #7
 8003f44:	d82a      	bhi.n	8003f9c <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8003f46:	a201      	add	r2, pc, #4	; (adr r2, 8003f4c <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8003f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4c:	08003f6d 	.word	0x08003f6d
 8003f50:	08003f79 	.word	0x08003f79
 8003f54:	08003f9d 	.word	0x08003f9d
 8003f58:	08003f85 	.word	0x08003f85
 8003f5c:	08003f9d 	.word	0x08003f9d
 8003f60:	08003f9d 	.word	0x08003f9d
 8003f64:	08003f9d 	.word	0x08003f9d
 8003f68:	08003f91 	.word	0x08003f91
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	6812      	ldr	r2, [r2, #0]
 8003f74:	61da      	str	r2, [r3, #28]
        break;
 8003f76:	e01a      	b.n	8003fae <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	6812      	ldr	r2, [r2, #0]
 8003f80:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 8003f82:	e014      	b.n	8003fae <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	6812      	ldr	r2, [r2, #0]
 8003f8c:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8003f8e:	e00e      	b.n	8003fae <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	6812      	ldr	r2, [r2, #0]
 8003f98:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8003f9a:	e008      	b.n	8003fae <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2207      	movs	r2, #7
 8003fa0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 8003fac:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b07      	cmp	r3, #7
 8003fb8:	f040 80fe 	bne.w	80041b8 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e104      	b.n	80041ca <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	2b07      	cmp	r3, #7
 8003fc6:	f200 80e3 	bhi.w	8004190 <HAL_HRTIM_WaveformCompareConfig+0x294>
 8003fca:	a201      	add	r2, pc, #4	; (adr r2, 8003fd0 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8003fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd0:	08003ff1 	.word	0x08003ff1
 8003fd4:	08004005 	.word	0x08004005
 8003fd8:	08004191 	.word	0x08004191
 8003fdc:	080040c1 	.word	0x080040c1
 8003fe0:	08004191 	.word	0x08004191
 8003fe4:	08004191 	.word	0x08004191
 8003fe8:	08004191 	.word	0x08004191
 8003fec:	080040d5 	.word	0x080040d5
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6819      	ldr	r1, [r3, #0]
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	01db      	lsls	r3, r3, #7
 8003ffc:	440b      	add	r3, r1
 8003ffe:	339c      	adds	r3, #156	; 0x9c
 8004000:	601a      	str	r2, [r3, #0]
        break;
 8004002:	e0d1      	b.n	80041a8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6819      	ldr	r1, [r3, #0]
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	01db      	lsls	r3, r3, #7
 8004010:	440b      	add	r3, r1
 8004012:	33a4      	adds	r3, #164	; 0xa4
 8004014:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d03f      	beq.n	800409e <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	3301      	adds	r3, #1
 8004026:	01db      	lsls	r3, r3, #7
 8004028:	4413      	add	r3, r2
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	6811      	ldr	r1, [r2, #0]
 8004030:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	3301      	adds	r3, #1
 8004038:	01db      	lsls	r3, r3, #7
 800403a:	440b      	add	r3, r1
 800403c:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	3301      	adds	r3, #1
 8004046:	01db      	lsls	r3, r3, #7
 8004048:	4413      	add	r3, r2
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	68f9      	ldr	r1, [r7, #12]
 8004052:	6809      	ldr	r1, [r1, #0]
 8004054:	431a      	orrs	r2, r3
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	3301      	adds	r3, #1
 800405a:	01db      	lsls	r3, r3, #7
 800405c:	440b      	add	r3, r1
 800405e:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004068:	d109      	bne.n	800407e <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6819      	ldr	r1, [r3, #0]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	689a      	ldr	r2, [r3, #8]
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	01db      	lsls	r3, r3, #7
 8004076:	440b      	add	r3, r1
 8004078:	339c      	adds	r3, #156	; 0x9c
 800407a:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 800407c:	e091      	b.n	80041a2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004086:	f040 808c 	bne.w	80041a2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6819      	ldr	r1, [r3, #0]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	689a      	ldr	r2, [r3, #8]
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	01db      	lsls	r3, r3, #7
 8004096:	440b      	add	r3, r1
 8004098:	33a8      	adds	r3, #168	; 0xa8
 800409a:	601a      	str	r2, [r3, #0]
         break;
 800409c:	e081      	b.n	80041a2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	3301      	adds	r3, #1
 80040a6:	01db      	lsls	r3, r3, #7
 80040a8:	4413      	add	r3, r2
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	6811      	ldr	r1, [r2, #0]
 80040b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	3301      	adds	r3, #1
 80040b8:	01db      	lsls	r3, r3, #7
 80040ba:	440b      	add	r3, r1
 80040bc:	601a      	str	r2, [r3, #0]
         break;
 80040be:	e070      	b.n	80041a2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6819      	ldr	r1, [r3, #0]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	01db      	lsls	r3, r3, #7
 80040cc:	440b      	add	r3, r1
 80040ce:	33a8      	adds	r3, #168	; 0xa8
 80040d0:	601a      	str	r2, [r3, #0]
        break;
 80040d2:	e069      	b.n	80041a8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6819      	ldr	r1, [r3, #0]
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	01db      	lsls	r3, r3, #7
 80040e0:	440b      	add	r3, r1
 80040e2:	33ac      	adds	r3, #172	; 0xac
 80040e4:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d03f      	beq.n	800416e <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	3301      	adds	r3, #1
 80040f6:	01db      	lsls	r3, r3, #7
 80040f8:	4413      	add	r3, r2
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	6811      	ldr	r1, [r2, #0]
 8004100:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	3301      	adds	r3, #1
 8004108:	01db      	lsls	r3, r3, #7
 800410a:	440b      	add	r3, r1
 800410c:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	3301      	adds	r3, #1
 8004116:	01db      	lsls	r3, r3, #7
 8004118:	4413      	add	r3, r2
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	68f9      	ldr	r1, [r7, #12]
 8004124:	6809      	ldr	r1, [r1, #0]
 8004126:	431a      	orrs	r2, r3
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	3301      	adds	r3, #1
 800412c:	01db      	lsls	r3, r3, #7
 800412e:	440b      	add	r3, r1
 8004130:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800413a:	d109      	bne.n	8004150 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6819      	ldr	r1, [r3, #0]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	689a      	ldr	r2, [r3, #8]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	01db      	lsls	r3, r3, #7
 8004148:	440b      	add	r3, r1
 800414a:	339c      	adds	r3, #156	; 0x9c
 800414c:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 800414e:	e02a      	b.n	80041a6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004158:	d125      	bne.n	80041a6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6819      	ldr	r1, [r3, #0]
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	689a      	ldr	r2, [r3, #8]
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	01db      	lsls	r3, r3, #7
 8004166:	440b      	add	r3, r1
 8004168:	33a8      	adds	r3, #168	; 0xa8
 800416a:	601a      	str	r2, [r3, #0]
         break;
 800416c:	e01b      	b.n	80041a6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	3301      	adds	r3, #1
 8004176:	01db      	lsls	r3, r3, #7
 8004178:	4413      	add	r3, r2
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	6811      	ldr	r1, [r2, #0]
 8004180:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	3301      	adds	r3, #1
 8004188:	01db      	lsls	r3, r3, #7
 800418a:	440b      	add	r3, r1
 800418c:	601a      	str	r2, [r3, #0]
         break;
 800418e:	e00a      	b.n	80041a6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2207      	movs	r2, #7
 8004194:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 80041a0:	e002      	b.n	80041a8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 80041a2:	bf00      	nop
 80041a4:	e000      	b.n	80041a8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 80041a6:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b07      	cmp	r3, #7
 80041b2:	d101      	bne.n	80041b8 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e008      	b.n	80041ca <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop

080041d8 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
 80041e4:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d101      	bne.n	80041f6 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 80041f2:	2302      	movs	r3, #2
 80041f4:	e01d      	b.n	8004232 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d101      	bne.n	8004204 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8004200:	2302      	movs	r3, #2
 8004202:	e016      	b.n	8004232 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	68b9      	ldr	r1, [r7, #8]
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f000 fd46 	bl	8004cac <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
	...

0800423c <HAL_HRTIM_WaveformSetOutputLevel>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformSetOutputLevel(HRTIM_HandleTypeDef * hhrtim,
                                                   uint32_t TimerIdx,
                                                   uint32_t Output,
                                                   uint32_t OutputLevel)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
 8004248:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMER_OUTPUT(TimerIdx, Output));
  assert_param(IS_HRTIM_OUTPUTLEVEL(OutputLevel));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d101      	bne.n	800425a <HAL_HRTIM_WaveformSetOutputLevel+0x1e>
  {
     return HAL_BUSY;
 8004256:	2302      	movs	r3, #2
 8004258:	e0df      	b.n	800441a <HAL_HRTIM_WaveformSetOutputLevel+0x1de>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8004260:	2b01      	cmp	r3, #1
 8004262:	d101      	bne.n	8004268 <HAL_HRTIM_WaveformSetOutputLevel+0x2c>
 8004264:	2302      	movs	r3, #2
 8004266:	e0d8      	b.n	800441a <HAL_HRTIM_WaveformSetOutputLevel+0x1de>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2202      	movs	r2, #2
 8004274:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Force timer output level */
  switch (Output)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800427e:	f000 808d 	beq.w	800439c <HAL_HRTIM_WaveformSetOutputLevel+0x160>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004288:	f200 80ad 	bhi.w	80043e6 <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004292:	d05e      	beq.n	8004352 <HAL_HRTIM_WaveformSetOutputLevel+0x116>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800429a:	f200 80a4 	bhi.w	80043e6 <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b80      	cmp	r3, #128	; 0x80
 80042a2:	d07b      	beq.n	800439c <HAL_HRTIM_WaveformSetOutputLevel+0x160>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b80      	cmp	r3, #128	; 0x80
 80042a8:	f200 809d 	bhi.w	80043e6 <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b20      	cmp	r3, #32
 80042b0:	d84c      	bhi.n	800434c <HAL_HRTIM_WaveformSetOutputLevel+0x110>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 8096 	beq.w	80043e6 <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	3b01      	subs	r3, #1
 80042be:	2b1f      	cmp	r3, #31
 80042c0:	f200 8091 	bhi.w	80043e6 <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 80042c4:	a201      	add	r2, pc, #4	; (adr r2, 80042cc <HAL_HRTIM_WaveformSetOutputLevel+0x90>)
 80042c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ca:	bf00      	nop
 80042cc:	08004353 	.word	0x08004353
 80042d0:	0800439d 	.word	0x0800439d
 80042d4:	080043e7 	.word	0x080043e7
 80042d8:	08004353 	.word	0x08004353
 80042dc:	080043e7 	.word	0x080043e7
 80042e0:	080043e7 	.word	0x080043e7
 80042e4:	080043e7 	.word	0x080043e7
 80042e8:	0800439d 	.word	0x0800439d
 80042ec:	080043e7 	.word	0x080043e7
 80042f0:	080043e7 	.word	0x080043e7
 80042f4:	080043e7 	.word	0x080043e7
 80042f8:	080043e7 	.word	0x080043e7
 80042fc:	080043e7 	.word	0x080043e7
 8004300:	080043e7 	.word	0x080043e7
 8004304:	080043e7 	.word	0x080043e7
 8004308:	08004353 	.word	0x08004353
 800430c:	080043e7 	.word	0x080043e7
 8004310:	080043e7 	.word	0x080043e7
 8004314:	080043e7 	.word	0x080043e7
 8004318:	080043e7 	.word	0x080043e7
 800431c:	080043e7 	.word	0x080043e7
 8004320:	080043e7 	.word	0x080043e7
 8004324:	080043e7 	.word	0x080043e7
 8004328:	080043e7 	.word	0x080043e7
 800432c:	080043e7 	.word	0x080043e7
 8004330:	080043e7 	.word	0x080043e7
 8004334:	080043e7 	.word	0x080043e7
 8004338:	080043e7 	.word	0x080043e7
 800433c:	080043e7 	.word	0x080043e7
 8004340:	080043e7 	.word	0x080043e7
 8004344:	080043e7 	.word	0x080043e7
 8004348:	0800439d 	.word	0x0800439d
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b40      	cmp	r3, #64	; 0x40
 8004350:	d149      	bne.n	80043e6 <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
  case HRTIM_OUTPUT_TB1:
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      if (OutputLevel == HRTIM_OUTPUTLEVEL_ACTIVE)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d110      	bne.n	800437a <HAL_HRTIM_WaveformSetOutputLevel+0x13e>
      {
        /* Force output to its active state */
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R,HRTIM_SET1R_SST);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	01db      	lsls	r3, r3, #7
 8004360:	4413      	add	r3, r2
 8004362:	33bc      	adds	r3, #188	; 0xbc
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	6811      	ldr	r1, [r2, #0]
 800436a:	f043 0201 	orr.w	r2, r3, #1
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	01db      	lsls	r3, r3, #7
 8004372:	440b      	add	r3, r1
 8004374:	33bc      	adds	r3, #188	; 0xbc
 8004376:	601a      	str	r2, [r3, #0]
      else
      {
        /* Force output to its inactive state */
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R, HRTIM_RST1R_SRT);
      }
      break;
 8004378:	e03e      	b.n	80043f8 <HAL_HRTIM_WaveformSetOutputLevel+0x1bc>
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R, HRTIM_RST1R_SRT);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	01db      	lsls	r3, r3, #7
 8004382:	4413      	add	r3, r2
 8004384:	33c0      	adds	r3, #192	; 0xc0
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	6811      	ldr	r1, [r2, #0]
 800438c:	f043 0201 	orr.w	r2, r3, #1
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	01db      	lsls	r3, r3, #7
 8004394:	440b      	add	r3, r1
 8004396:	33c0      	adds	r3, #192	; 0xc0
 8004398:	601a      	str	r2, [r3, #0]
      break;
 800439a:	e02d      	b.n	80043f8 <HAL_HRTIM_WaveformSetOutputLevel+0x1bc>
  case HRTIM_OUTPUT_TB2:
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      if (OutputLevel == HRTIM_OUTPUTLEVEL_ACTIVE)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d110      	bne.n	80043c4 <HAL_HRTIM_WaveformSetOutputLevel+0x188>
      {
        /* Force output to its active state */
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R, HRTIM_SET2R_SST);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	01db      	lsls	r3, r3, #7
 80043aa:	4413      	add	r3, r2
 80043ac:	33c4      	adds	r3, #196	; 0xc4
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	6811      	ldr	r1, [r2, #0]
 80043b4:	f043 0201 	orr.w	r2, r3, #1
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	01db      	lsls	r3, r3, #7
 80043bc:	440b      	add	r3, r1
 80043be:	33c4      	adds	r3, #196	; 0xc4
 80043c0:	601a      	str	r2, [r3, #0]
      else
      {
        /* Force output to its inactive state */
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R, HRTIM_RST2R_SRT);
      }
      break;
 80043c2:	e019      	b.n	80043f8 <HAL_HRTIM_WaveformSetOutputLevel+0x1bc>
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R, HRTIM_RST2R_SRT);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	01db      	lsls	r3, r3, #7
 80043cc:	4413      	add	r3, r2
 80043ce:	33c8      	adds	r3, #200	; 0xc8
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	6811      	ldr	r1, [r2, #0]
 80043d6:	f043 0201 	orr.w	r2, r3, #1
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	01db      	lsls	r3, r3, #7
 80043de:	440b      	add	r3, r1
 80043e0:	33c8      	adds	r3, #200	; 0xc8
 80043e2:	601a      	str	r2, [r3, #0]
      break;
 80043e4:	e008      	b.n	80043f8 <HAL_HRTIM_WaveformSetOutputLevel+0x1bc>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2207      	movs	r2, #7
 80043ea:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 80043f6:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b07      	cmp	r3, #7
 8004402:	d101      	bne.n	8004408 <HAL_HRTIM_WaveformSetOutputLevel+0x1cc>
  {
     return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e008      	b.n	800441a <HAL_HRTIM_WaveformSetOutputLevel+0x1de>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop

08004428 <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8004438:	2b01      	cmp	r3, #1
 800443a:	d101      	bne.n	8004440 <HAL_HRTIM_WaveformOutputStart+0x18>
 800443c:	2302      	movs	r3, #2
 800443e:	e01a      	b.n	8004476 <HAL_HRTIM_WaveformOutputStart+0x4e>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2202      	movs	r2, #2
 800444c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr

08004482 <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 8004482:	b480      	push	{r7}
 8004484:	b083      	sub	sp, #12
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
 800448a:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8004492:	2b01      	cmp	r3, #1
 8004494:	d101      	bne.n	800449a <HAL_HRTIM_WaveformOutputStop+0x18>
 8004496:	2302      	movs	r3, #2
 8004498:	e01a      	b.n	80044d0 <HAL_HRTIM_WaveformOutputStop+0x4e>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2202      	movs	r2, #2
 80044a6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f8d3 1398 	ldr.w	r1, [r3, #920]	; 0x398
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	430a      	orrs	r2, r1
 80044ba:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_HRTIM_WaveformCountStart_IT>:
  *       function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart_IT(HRTIM_HandleTypeDef * hhrtim,
                                                    uint32_t Timers)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d101      	bne.n	80044f4 <HAL_HRTIM_WaveformCountStart_IT+0x18>
 80044f0:	2302      	movs	r3, #2
 80044f2:	e05b      	b.n	80045ac <HAL_HRTIM_WaveformCountStart_IT+0xd0>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2202      	movs	r2, #2
 8004500:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable HRTIM interrupts (if required) */
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	430a      	orrs	r2, r1
 8004516:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Enable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d009      	beq.n	8004538 <HAL_HRTIM_WaveformCountStart_IT+0x5c>
  {
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim,
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68d9      	ldr	r1, [r3, #12]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	430a      	orrs	r2, r1
 8004536:	60da      	str	r2, [r3, #12]
                                 hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
  }

  /* Enable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8004538:	2300      	movs	r3, #0
 800453a:	73fb      	strb	r3, [r7, #15]
 800453c:	e022      	b.n	8004584 <HAL_HRTIM_WaveformCountStart_IT+0xa8>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 800453e:	7bfb      	ldrb	r3, [r7, #15]
 8004540:	4a1d      	ldr	r2, [pc, #116]	; (80045b8 <HAL_HRTIM_WaveformCountStart_IT+0xdc>)
 8004542:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	4013      	ands	r3, r2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d017      	beq.n	800457e <HAL_HRTIM_WaveformCountStart_IT+0xa2>
    {
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	7bfb      	ldrb	r3, [r7, #15]
 8004554:	01db      	lsls	r3, r3, #7
 8004556:	4413      	add	r3, r2
 8004558:	338c      	adds	r3, #140	; 0x8c
 800455a:	6818      	ldr	r0, [r3, #0]
 800455c:	7bfa      	ldrb	r2, [r7, #15]
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	4613      	mov	r3, r2
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	1a9b      	subs	r3, r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	440b      	add	r3, r1
 800456a:	3320      	adds	r3, #32
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6819      	ldr	r1, [r3, #0]
 8004572:	7bfb      	ldrb	r3, [r7, #15]
 8004574:	4302      	orrs	r2, r0
 8004576:	01db      	lsls	r3, r3, #7
 8004578:	440b      	add	r3, r1
 800457a:	338c      	adds	r3, #140	; 0x8c
 800457c:	601a      	str	r2, [r3, #0]
       timer_idx++)
 800457e:	7bfb      	ldrb	r3, [r7, #15]
 8004580:	3301      	adds	r3, #1
 8004582:	73fb      	strb	r3, [r7, #15]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8004584:	7bfb      	ldrb	r3, [r7, #15]
 8004586:	2b04      	cmp	r3, #4
 8004588:	d9d9      	bls.n	800453e <HAL_HRTIM_WaveformCountStart_IT+0x62>
                                  hhrtim->TimerParam[timer_idx].InterruptRequests);
    }
  }

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6819      	ldr	r1, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;}
 80045aa:	2300      	movs	r3, #0
 80045ac:	4618      	mov	r0, r3
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr
 80045b8:	20000024 	.word	0x20000024

080045bc <HAL_HRTIM_WaveformCountStop_IT>:
  * @note The counter of a timer is stopped only if all timer outputs are disabled
  * @note All enabled timer related interrupts are disabled.
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStop_IT(HRTIM_HandleTypeDef * hhrtim,
                                                   uint32_t Timers)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  /* ++ WA */
  __IO uint32_t delai = (uint32_t)(0x17FU);
 80045c6:	f240 137f 	movw	r3, #383	; 0x17f
 80045ca:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d101      	bne.n	80045da <HAL_HRTIM_WaveformCountStop_IT+0x1e>
 80045d6:	2302      	movs	r3, #2
 80045d8:	e065      	b.n	80046a6 <HAL_HRTIM_WaveformCountStop_IT+0xea>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2202      	movs	r2, #2
 80045e6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Disable HRTIM interrupts (if required) */
  __HAL_HRTIM_DISABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	43da      	mvns	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	400a      	ands	r2, r1
 80045fe:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Disable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00a      	beq.n	8004622 <HAL_HRTIM_WaveformCountStop_IT+0x66>
  {
    /* Interrupts enable flag must be cleared one by one */
    __HAL_HRTIM_MASTER_DISABLE_IT(hhrtim, hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68d9      	ldr	r1, [r3, #12]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004618:	43da      	mvns	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	400a      	ands	r2, r1
 8004620:	60da      	str	r2, [r3, #12]
  }

  /* Disable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8004622:	2300      	movs	r3, #0
 8004624:	73fb      	strb	r3, [r7, #15]
 8004626:	e023      	b.n	8004670 <HAL_HRTIM_WaveformCountStop_IT+0xb4>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 8004628:	7bfb      	ldrb	r3, [r7, #15]
 800462a:	4a22      	ldr	r2, [pc, #136]	; (80046b4 <HAL_HRTIM_WaveformCountStop_IT+0xf8>)
 800462c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	4013      	ands	r3, r2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d018      	beq.n	800466a <HAL_HRTIM_WaveformCountStop_IT+0xae>
    {
      __HAL_HRTIM_TIMER_DISABLE_IT(hhrtim, timer_idx, hhrtim->TimerParam[timer_idx].InterruptRequests);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	7bfb      	ldrb	r3, [r7, #15]
 800463e:	01db      	lsls	r3, r3, #7
 8004640:	4413      	add	r3, r2
 8004642:	338c      	adds	r3, #140	; 0x8c
 8004644:	6818      	ldr	r0, [r3, #0]
 8004646:	7bfa      	ldrb	r2, [r7, #15]
 8004648:	6879      	ldr	r1, [r7, #4]
 800464a:	4613      	mov	r3, r2
 800464c:	00db      	lsls	r3, r3, #3
 800464e:	1a9b      	subs	r3, r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	440b      	add	r3, r1
 8004654:	3320      	adds	r3, #32
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	43da      	mvns	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6819      	ldr	r1, [r3, #0]
 800465e:	7bfb      	ldrb	r3, [r7, #15]
 8004660:	4002      	ands	r2, r0
 8004662:	01db      	lsls	r3, r3, #7
 8004664:	440b      	add	r3, r1
 8004666:	338c      	adds	r3, #140	; 0x8c
 8004668:	601a      	str	r2, [r3, #0]
       timer_idx++)
 800466a:	7bfb      	ldrb	r3, [r7, #15]
 800466c:	3301      	adds	r3, #1
 800466e:	73fb      	strb	r3, [r7, #15]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8004670:	7bfb      	ldrb	r3, [r7, #15]
 8004672:	2b04      	cmp	r3, #4
 8004674:	d9d8      	bls.n	8004628 <HAL_HRTIM_WaveformCountStop_IT+0x6c>
    }
  }

  /* ++ WA */
  do { delai--; } while (delai != 0U);
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	3b01      	subs	r3, #1
 800467a:	60bb      	str	r3, [r7, #8]
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1f9      	bne.n	8004676 <HAL_HRTIM_WaveformCountStop_IT+0xba>
  /* -- WA */

  /* Disable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR &= ~(Timers);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	6819      	ldr	r1, [r3, #0]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	43da      	mvns	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	400a      	ands	r2, r1
 8004692:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	20000024 	.word	0x20000024

080046b8 <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	2bff      	cmp	r3, #255	; 0xff
 80046c6:	d103      	bne.n	80046d0 <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 fc4f 	bl	8004f6c <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 80046ce:	e00a      	b.n	80046e6 <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	2b05      	cmp	r3, #5
 80046d4:	d103      	bne.n	80046de <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 fcc6 	bl	8005068 <HRTIM_Master_ISR>
}
 80046dc:	e003      	b.n	80046e6 <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 80046de:	6839      	ldr	r1, [r7, #0]
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 fd6b 	bl	80051bc <HRTIM_Timer_ISR>
}
 80046e6:	bf00      	nop
 80046e8:	3708      	adds	r7, #8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b083      	sub	sp, #12
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8004702:	b480      	push	{r7}
 8004704:	b083      	sub	sp, #12
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 800470a:	bf00      	nop
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8004716:	b480      	push	{r7}
 8004718:	b083      	sub	sp, #12
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 800471e:	bf00      	nop
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr

0800472a <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800472a:	b480      	push	{r7}
 800472c:	b083      	sub	sp, #12
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 8004732:	bf00      	nop
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800473e:	b480      	push	{r7}
 8004740:	b083      	sub	sp, #12
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 8004746:	bf00      	nop
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8004752:	b480      	push	{r7}
 8004754:	b083      	sub	sp, #12
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 800475a:	bf00      	nop
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8004766:	b480      	push	{r7}
 8004768:	b083      	sub	sp, #12
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 800476e:	bf00      	nop
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 8004782:	bf00      	nop
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
 8004796:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 80047ae:	bf00      	nop
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
 80047c2:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 80047da:	bf00      	nop
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b083      	sub	sp, #12
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
 80047ee:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8004812:	b480      	push	{r7}
 8004814:	b083      	sub	sp, #12
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
 800481a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 8004832:	bf00      	nop
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800483e:	b480      	push	{r7}
 8004840:	b083      	sub	sp, #12
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
 8004846:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 800485e:	bf00      	nop
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
 8004872:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f023 0307 	bic.w	r3, r3, #7
 8004898:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f023 0318 	bic.w	r3, r3, #24
 80048aa:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	6812      	ldr	r2, [r2, #0]
 80048c6:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	6852      	ldr	r2, [r2, #4]
 80048d0:	619a      	str	r2, [r3, #24]
}
 80048d2:	bf00      	nop
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80048de:	b480      	push	{r7}
 80048e0:	b087      	sub	sp, #28
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	60f8      	str	r0, [r7, #12]
 80048e6:	60b9      	str	r1, [r7, #8]
 80048e8:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	3301      	adds	r3, #1
 80048f2:	01db      	lsls	r3, r3, #7
 80048f4:	4413      	add	r3, r2
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f023 0307 	bic.w	r3, r3, #7
 8004900:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	4313      	orrs	r3, r2
 800490a:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f023 0318 	bic.w	r3, r3, #24
 8004912:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	4313      	orrs	r3, r2
 800491c:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	3301      	adds	r3, #1
 8004926:	01db      	lsls	r3, r3, #7
 8004928:	4413      	add	r3, r2
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6819      	ldr	r1, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	01db      	lsls	r3, r3, #7
 800493a:	440b      	add	r3, r1
 800493c:	3394      	adds	r3, #148	; 0x94
 800493e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6819      	ldr	r1, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	01db      	lsls	r3, r3, #7
 800494c:	440b      	add	r3, r1
 800494e:	3398      	adds	r3, #152	; 0x98
 8004950:	601a      	str	r2, [r3, #0]
}
 8004952:	bf00      	nop
 8004954:	371c      	adds	r7, #28
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 800495e:	b480      	push	{r7}
 8004960:	b085      	sub	sp, #20
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
 8004966:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8004978:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f023 0320 	bic.w	r3, r3, #32
 8004980:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	4313      	orrs	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004992:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	4313      	orrs	r3, r2
 800499c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049a4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80049b6:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	4313      	orrs	r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80049c8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80049da:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80049ee:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a00:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8004a1e:	bf00      	nop
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
	...

08004a2c <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b08b      	sub	sp, #44	; 0x2c
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	3301      	adds	r3, #1
 8004a40:	01db      	lsls	r3, r3, #7
 8004a42:	4413      	add	r3, r2
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	6811      	ldr	r1, [r2, #0]
 8004a4a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	3301      	adds	r3, #1
 8004a52:	01db      	lsls	r3, r3, #7
 8004a54:	440b      	add	r3, r1
 8004a56:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	01db      	lsls	r3, r3, #7
 8004a62:	4413      	add	r3, r2
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	01db      	lsls	r3, r3, #7
 8004a70:	4413      	add	r3, r2
 8004a72:	33e8      	adds	r3, #232	; 0xe8
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	01db      	lsls	r3, r3, #7
 8004a80:	4413      	add	r3, r2
 8004a82:	33e4      	adds	r3, #228	; 0xe4
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8004a90:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	f023 0320 	bic.w	r3, r3, #32
 8004a98:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004aaa:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004abc:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	69db      	ldr	r3, [r3, #28]
 8004ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ace:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8004ae0:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004af2:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004afa:	4313      	orrs	r3, r2
 8004afc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004b04:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b0e:	d103      	bne.n	8004b18 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b16:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b1e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b26:	4313      	orrs	r3, r2
 8004b28:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b30:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8004b42:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	f023 031f 	bic.w	r3, r3, #31
 8004b54:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5a:	f003 031f 	and.w	r3, r3, #31
 8004b5e:	69ba      	ldr	r2, [r7, #24]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b6a:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d108      	bne.n	8004b90 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8004b7e:	6a3b      	ldr	r3, [r7, #32]
 8004b80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b84:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	6a3a      	ldr	r2, [r7, #32]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b94:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8004b98:	d004      	beq.n	8004ba4 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9e:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8004ba2:	d103      	bne.n	8004bac <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba8:	2b40      	cmp	r3, #64	; 0x40
 8004baa:	d108      	bne.n	8004bbe <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8004bb2:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb8:	6a3a      	ldr	r2, [r7, #32]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bc2:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	d843      	bhi.n	8004c52 <HRTIM_TimingUnitWaveform_Config+0x226>
 8004bca:	a201      	add	r2, pc, #4	; (adr r2, 8004bd0 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8004bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd0:	08004be5 	.word	0x08004be5
 8004bd4:	08004bfb 	.word	0x08004bfb
 8004bd8:	08004c11 	.word	0x08004c11
 8004bdc:	08004c27 	.word	0x08004c27
 8004be0:	08004c3d 	.word	0x08004c3d
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004bea:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	69fa      	ldr	r2, [r7, #28]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	61fb      	str	r3, [r7, #28]
      break;
 8004bf8:	e02c      	b.n	8004c54 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c00:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	69fa      	ldr	r2, [r7, #28]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	61fb      	str	r3, [r7, #28]
      break;
 8004c0e:	e021      	b.n	8004c54 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004c16:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1c:	00db      	lsls	r3, r3, #3
 8004c1e:	69fa      	ldr	r2, [r7, #28]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	61fb      	str	r3, [r7, #28]
      break;
 8004c24:	e016      	b.n	8004c54 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004c2c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c32:	011b      	lsls	r3, r3, #4
 8004c34:	69fa      	ldr	r2, [r7, #28]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	61fb      	str	r3, [r7, #28]
      break;
 8004c3a:	e00b      	b.n	8004c54 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c42:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c48:	015b      	lsls	r3, r3, #5
 8004c4a:	69fa      	ldr	r2, [r7, #28]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	61fb      	str	r3, [r7, #28]
      break;
 8004c50:	e000      	b.n	8004c54 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8004c52:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	01db      	lsls	r3, r3, #7
 8004c5e:	4413      	add	r3, r2
 8004c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c62:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	01db      	lsls	r3, r3, #7
 8004c6c:	4413      	add	r3, r2
 8004c6e:	33e8      	adds	r3, #232	; 0xe8
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	01db      	lsls	r3, r3, #7
 8004c7c:	4413      	add	r3, r2
 8004c7e:	33e4      	adds	r3, #228	; 0xe4
 8004c80:	6a3a      	ldr	r2, [r7, #32]
 8004c82:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	01db      	lsls	r3, r3, #7
 8004c8c:	4413      	add	r3, r2
 8004c8e:	33d4      	adds	r3, #212	; 0xd4
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	69fa      	ldr	r2, [r7, #28]
 8004c9a:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8004c9e:	bf00      	nop
 8004ca0:	372c      	adds	r7, #44	; 0x2c
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop

08004cac <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b089      	sub	sp, #36	; 0x24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
 8004cb8:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	01db      	lsls	r3, r3, #7
 8004cc6:	4413      	add	r3, r2
 8004cc8:	33e4      	adds	r3, #228	; 0xe4
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	01db      	lsls	r3, r3, #7
 8004cd6:	4413      	add	r3, r2
 8004cd8:	33b8      	adds	r3, #184	; 0xb8
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	617b      	str	r3, [r7, #20]

  switch (Output)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ce4:	d076      	beq.n	8004dd4 <HRTIM_OutputConfig+0x128>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cec:	f200 8087 	bhi.w	8004dfe <HRTIM_OutputConfig+0x152>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cf6:	d05a      	beq.n	8004dae <HRTIM_OutputConfig+0x102>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cfe:	d87e      	bhi.n	8004dfe <HRTIM_OutputConfig+0x152>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b80      	cmp	r3, #128	; 0x80
 8004d04:	d066      	beq.n	8004dd4 <HRTIM_OutputConfig+0x128>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b80      	cmp	r3, #128	; 0x80
 8004d0a:	d878      	bhi.n	8004dfe <HRTIM_OutputConfig+0x152>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b20      	cmp	r3, #32
 8004d10:	d84a      	bhi.n	8004da8 <HRTIM_OutputConfig+0xfc>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d072      	beq.n	8004dfe <HRTIM_OutputConfig+0x152>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	2b1f      	cmp	r3, #31
 8004d1e:	d86e      	bhi.n	8004dfe <HRTIM_OutputConfig+0x152>
 8004d20:	a201      	add	r2, pc, #4	; (adr r2, 8004d28 <HRTIM_OutputConfig+0x7c>)
 8004d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d26:	bf00      	nop
 8004d28:	08004daf 	.word	0x08004daf
 8004d2c:	08004dd5 	.word	0x08004dd5
 8004d30:	08004dff 	.word	0x08004dff
 8004d34:	08004daf 	.word	0x08004daf
 8004d38:	08004dff 	.word	0x08004dff
 8004d3c:	08004dff 	.word	0x08004dff
 8004d40:	08004dff 	.word	0x08004dff
 8004d44:	08004dd5 	.word	0x08004dd5
 8004d48:	08004dff 	.word	0x08004dff
 8004d4c:	08004dff 	.word	0x08004dff
 8004d50:	08004dff 	.word	0x08004dff
 8004d54:	08004dff 	.word	0x08004dff
 8004d58:	08004dff 	.word	0x08004dff
 8004d5c:	08004dff 	.word	0x08004dff
 8004d60:	08004dff 	.word	0x08004dff
 8004d64:	08004daf 	.word	0x08004daf
 8004d68:	08004dff 	.word	0x08004dff
 8004d6c:	08004dff 	.word	0x08004dff
 8004d70:	08004dff 	.word	0x08004dff
 8004d74:	08004dff 	.word	0x08004dff
 8004d78:	08004dff 	.word	0x08004dff
 8004d7c:	08004dff 	.word	0x08004dff
 8004d80:	08004dff 	.word	0x08004dff
 8004d84:	08004dff 	.word	0x08004dff
 8004d88:	08004dff 	.word	0x08004dff
 8004d8c:	08004dff 	.word	0x08004dff
 8004d90:	08004dff 	.word	0x08004dff
 8004d94:	08004dff 	.word	0x08004dff
 8004d98:	08004dff 	.word	0x08004dff
 8004d9c:	08004dff 	.word	0x08004dff
 8004da0:	08004dff 	.word	0x08004dff
 8004da4:	08004dd5 	.word	0x08004dd5
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b40      	cmp	r3, #64	; 0x40
 8004dac:	d127      	bne.n	8004dfe <HRTIM_OutputConfig+0x152>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6819      	ldr	r1, [r3, #0]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	01db      	lsls	r3, r3, #7
 8004dba:	440b      	add	r3, r1
 8004dbc:	33bc      	adds	r3, #188	; 0xbc
 8004dbe:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6819      	ldr	r1, [r3, #0]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	01db      	lsls	r3, r3, #7
 8004dcc:	440b      	add	r3, r1
 8004dce:	33c0      	adds	r3, #192	; 0xc0
 8004dd0:	601a      	str	r2, [r3, #0]
      break;
 8004dd2:	e015      	b.n	8004e00 <HRTIM_OutputConfig+0x154>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6819      	ldr	r1, [r3, #0]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	01db      	lsls	r3, r3, #7
 8004de0:	440b      	add	r3, r1
 8004de2:	33c4      	adds	r3, #196	; 0xc4
 8004de4:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6819      	ldr	r1, [r3, #0]
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	689a      	ldr	r2, [r3, #8]
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	01db      	lsls	r3, r3, #7
 8004df2:	440b      	add	r3, r1
 8004df4:	33c8      	adds	r3, #200	; 0xc8
 8004df6:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8004df8:	2310      	movs	r3, #16
 8004dfa:	61bb      	str	r3, [r7, #24]
      break;
 8004dfc:	e000      	b.n	8004e00 <HRTIM_OutputConfig+0x154>
    }

  default:
    break;
 8004dfe:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8004e00:	22fe      	movs	r2, #254	; 0xfe
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8004e08:	43db      	mvns	r3, r3
 8004e0a:	69fa      	ldr	r2, [r7, #28]
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1a:	69fa      	ldr	r2, [r7, #28]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	68da      	ldr	r2, [r3, #12]
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2a:	69fa      	ldr	r2, [r7, #28]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	691a      	ldr	r2, [r3, #16]
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3a:	69fa      	ldr	r2, [r7, #28]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	695a      	ldr	r2, [r3, #20]
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4a:	69fa      	ldr	r2, [r7, #28]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	699a      	ldr	r2, [r3, #24]
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5a:	69fa      	ldr	r2, [r7, #28]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	2b08      	cmp	r3, #8
 8004e66:	d111      	bne.n	8004e8c <HRTIM_OutputConfig+0x1e0>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10c      	bne.n	8004e8c <HRTIM_OutputConfig+0x1e0>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d107      	bne.n	8004e8c <HRTIM_OutputConfig+0x1e0>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	69da      	ldr	r2, [r3, #28]
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	fa02 f303 	lsl.w	r3, r2, r3
 8004e86:	69fa      	ldr	r2, [r7, #28]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	01db      	lsls	r3, r3, #7
 8004e94:	4413      	add	r3, r2
 8004e96:	33e4      	adds	r3, #228	; 0xe4
 8004e98:	69fa      	ldr	r2, [r7, #28]
 8004e9a:	601a      	str	r2, [r3, #0]
}
 8004e9c:	bf00      	nop
 8004e9e:	3724      	adds	r7, #36	; 0x24
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	2b05      	cmp	r3, #5
 8004eb6:	d851      	bhi.n	8004f5c <HRTIM_ForceRegistersUpdate+0xb4>
 8004eb8:	a201      	add	r2, pc, #4	; (adr r2, 8004ec0 <HRTIM_ForceRegistersUpdate+0x18>)
 8004eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ebe:	bf00      	nop
 8004ec0:	08004eef 	.word	0x08004eef
 8004ec4:	08004f05 	.word	0x08004f05
 8004ec8:	08004f1b 	.word	0x08004f1b
 8004ecc:	08004f31 	.word	0x08004f31
 8004ed0:	08004f47 	.word	0x08004f47
 8004ed4:	08004ed9 	.word	0x08004ed9
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f042 0201 	orr.w	r2, r2, #1
 8004ee8:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8004eec:	e037      	b.n	8004f5e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f042 0202 	orr.w	r2, r2, #2
 8004efe:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8004f02:	e02c      	b.n	8004f5e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f042 0204 	orr.w	r2, r2, #4
 8004f14:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8004f18:	e021      	b.n	8004f5e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0208 	orr.w	r2, r2, #8
 8004f2a:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8004f2e:	e016      	b.n	8004f5e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f042 0210 	orr.w	r2, r2, #16
 8004f40:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8004f44:	e00b      	b.n	8004f5e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f042 0220 	orr.w	r2, r2, #32
 8004f56:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8004f5a:	e000      	b.n	8004f5e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8004f5c:	bf00      	nop
  }
}
 8004f5e:	bf00      	nop
 8004f60:	370c      	adds	r7, #12
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop

08004f6c <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8004f7c:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8004f86:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00c      	beq.n	8004fac <HRTIM_HRTIM_ISR+0x40>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d007      	beq.n	8004fac <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f7ff fba1 	bl	80046ee <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00c      	beq.n	8004fd0 <HRTIM_HRTIM_ISR+0x64>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d007      	beq.n	8004fd0 <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2202      	movs	r2, #2
 8004fc6:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7ff fb99 	bl	8004702 <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f003 0304 	and.w	r3, r3, #4
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00c      	beq.n	8004ff4 <HRTIM_HRTIM_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	f003 0304 	and.w	r3, r3, #4
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d007      	beq.n	8004ff4 <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2204      	movs	r2, #4
 8004fea:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7ff fb91 	bl	8004716 <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f003 0308 	and.w	r3, r3, #8
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00c      	beq.n	8005018 <HRTIM_HRTIM_ISR+0xac>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	f003 0308 	and.w	r3, r3, #8
 8005004:	2b00      	cmp	r3, #0
 8005006:	d007      	beq.n	8005018 <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2208      	movs	r2, #8
 800500e:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f7ff fb89 	bl	800472a <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f003 0310 	and.w	r3, r3, #16
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00c      	beq.n	800503c <HRTIM_HRTIM_ISR+0xd0>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	f003 0310 	and.w	r3, r3, #16
 8005028:	2b00      	cmp	r3, #0
 800502a:	d007      	beq.n	800503c <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2210      	movs	r2, #16
 8005032:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7ff fb81 	bl	800473e <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f003 0320 	and.w	r3, r3, #32
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00c      	beq.n	8005060 <HRTIM_HRTIM_ISR+0xf4>
  {
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	f003 0320 	and.w	r3, r3, #32
 800504c:	2b00      	cmp	r3, #0
 800504e:	d007      	beq.n	8005060 <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2220      	movs	r2, #32
 8005056:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f7ff fb79 	bl	8004752 <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8005060:	bf00      	nop
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8005078:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8005082:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	60bb      	str	r3, [r7, #8]

  /* Burst mode period event */
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00d      	beq.n	80050ba <HRTIM_Master_ISR+0x52>
  {
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d008      	beq.n	80050ba <HRTIM_Master_ISR+0x52>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80050b0:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f7ff fb56 	bl	8004766 <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00c      	beq.n	80050de <HRTIM_Master_ISR+0x76>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d007      	beq.n	80050de <HRTIM_Master_ISR+0x76>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2201      	movs	r2, #1
 80050d4:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80050d6:	2105      	movs	r1, #5
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f7ff fb63 	bl	80047a4 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00c      	beq.n	8005102 <HRTIM_Master_ISR+0x9a>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d007      	beq.n	8005102 <HRTIM_Master_ISR+0x9a>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2202      	movs	r2, #2
 80050f8:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80050fa:	2105      	movs	r1, #5
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f7fc f803 	bl	8001108 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00c      	beq.n	8005126 <HRTIM_Master_ISR+0xbe>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	f003 0304 	and.w	r3, r3, #4
 8005112:	2b00      	cmp	r3, #0
 8005114:	d007      	beq.n	8005126 <HRTIM_Master_ISR+0xbe>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2204      	movs	r2, #4
 800511c:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800511e:	2105      	movs	r1, #5
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f7fc f81d 	bl	8001160 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f003 0308 	and.w	r3, r3, #8
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00c      	beq.n	800514a <HRTIM_Master_ISR+0xe2>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	f003 0308 	and.w	r3, r3, #8
 8005136:	2b00      	cmp	r3, #0
 8005138:	d007      	beq.n	800514a <HRTIM_Master_ISR+0xe2>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2208      	movs	r2, #8
 8005140:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8005142:	2105      	movs	r1, #5
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f7ff fb38 	bl	80047ba <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f003 0310 	and.w	r3, r3, #16
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00c      	beq.n	800516e <HRTIM_Master_ISR+0x106>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	f003 0310 	and.w	r3, r3, #16
 800515a:	2b00      	cmp	r3, #0
 800515c:	d007      	beq.n	800516e <HRTIM_Master_ISR+0x106>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2210      	movs	r2, #16
 8005164:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8005166:	2105      	movs	r1, #5
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f7fc f885 	bl	8001278 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f003 0320 	and.w	r3, r3, #32
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00b      	beq.n	8005190 <HRTIM_Master_ISR+0x128>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	f003 0320 	and.w	r3, r3, #32
 800517e:	2b00      	cmp	r3, #0
 8005180:	d006      	beq.n	8005190 <HRTIM_Master_ISR+0x128>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2220      	movs	r2, #32
 8005188:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7ff faf5 	bl	800477a <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00c      	beq.n	80051b4 <HRTIM_Master_ISR+0x14c>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d007      	beq.n	80051b4 <HRTIM_Master_ISR+0x14c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2240      	movs	r2, #64	; 0x40
 80051aa:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80051ac:	2105      	movs	r1, #5
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f7ff faed 	bl	800478e <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80051b4:	bf00      	nop
 80051b6:	3718      	adds	r7, #24
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	3301      	adds	r3, #1
 80051ce:	01db      	lsls	r3, r3, #7
 80051d0:	4413      	add	r3, r2
 80051d2:	3304      	adds	r3, #4
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	01db      	lsls	r3, r3, #7
 80051e0:	4413      	add	r3, r2
 80051e2:	338c      	adds	r3, #140	; 0x8c
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d010      	beq.n	8005214 <HRTIM_Timer_ISR+0x58>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00b      	beq.n	8005214 <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	01db      	lsls	r3, r3, #7
 8005204:	4413      	add	r3, r2
 8005206:	3388      	adds	r3, #136	; 0x88
 8005208:	2201      	movs	r2, #1
 800520a:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 800520c:	6839      	ldr	r1, [r7, #0]
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f7ff fac8 	bl	80047a4 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d010      	beq.n	8005240 <HRTIM_Timer_ISR+0x84>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00b      	beq.n	8005240 <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	01db      	lsls	r3, r3, #7
 8005230:	4413      	add	r3, r2
 8005232:	3388      	adds	r3, #136	; 0x88
 8005234:	2202      	movs	r2, #2
 8005236:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 8005238:	6839      	ldr	r1, [r7, #0]
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7fb ff64 	bl	8001108 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f003 0304 	and.w	r3, r3, #4
 8005246:	2b00      	cmp	r3, #0
 8005248:	d010      	beq.n	800526c <HRTIM_Timer_ISR+0xb0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00b      	beq.n	800526c <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	01db      	lsls	r3, r3, #7
 800525c:	4413      	add	r3, r2
 800525e:	3388      	adds	r3, #136	; 0x88
 8005260:	2204      	movs	r2, #4
 8005262:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 8005264:	6839      	ldr	r1, [r7, #0]
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f7fb ff7a 	bl	8001160 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f003 0308 	and.w	r3, r3, #8
 8005272:	2b00      	cmp	r3, #0
 8005274:	d010      	beq.n	8005298 <HRTIM_Timer_ISR+0xdc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	f003 0308 	and.w	r3, r3, #8
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00b      	beq.n	8005298 <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	01db      	lsls	r3, r3, #7
 8005288:	4413      	add	r3, r2
 800528a:	3388      	adds	r3, #136	; 0x88
 800528c:	2208      	movs	r2, #8
 800528e:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 8005290:	6839      	ldr	r1, [r7, #0]
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f7ff fa91 	bl	80047ba <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f003 0310 	and.w	r3, r3, #16
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d010      	beq.n	80052c4 <HRTIM_Timer_ISR+0x108>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	f003 0310 	and.w	r3, r3, #16
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00b      	beq.n	80052c4 <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	01db      	lsls	r3, r3, #7
 80052b4:	4413      	add	r3, r2
 80052b6:	3388      	adds	r3, #136	; 0x88
 80052b8:	2210      	movs	r2, #16
 80052ba:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 80052bc:	6839      	ldr	r1, [r7, #0]
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7fb ffda 	bl	8001278 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d010      	beq.n	80052f0 <HRTIM_Timer_ISR+0x134>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00b      	beq.n	80052f0 <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	01db      	lsls	r3, r3, #7
 80052e0:	4413      	add	r3, r2
 80052e2:	3388      	adds	r3, #136	; 0x88
 80052e4:	2240      	movs	r2, #64	; 0x40
 80052e6:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 80052e8:	6839      	ldr	r1, [r7, #0]
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7ff fa4f 	bl	800478e <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d010      	beq.n	800531c <HRTIM_Timer_ISR+0x160>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00b      	beq.n	800531c <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	01db      	lsls	r3, r3, #7
 800530c:	4413      	add	r3, r2
 800530e:	3388      	adds	r3, #136	; 0x88
 8005310:	2280      	movs	r2, #128	; 0x80
 8005312:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 8005314:	6839      	ldr	r1, [r7, #0]
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f7ff fa5a 	bl	80047d0 <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005322:	2b00      	cmp	r3, #0
 8005324:	d011      	beq.n	800534a <HRTIM_Timer_ISR+0x18e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00c      	beq.n	800534a <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	01db      	lsls	r3, r3, #7
 8005338:	4413      	add	r3, r2
 800533a:	3388      	adds	r3, #136	; 0x88
 800533c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005340:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 8005342:	6839      	ldr	r1, [r7, #0]
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f7ff fa4e 	bl	80047e6 <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005350:	2b00      	cmp	r3, #0
 8005352:	d011      	beq.n	8005378 <HRTIM_Timer_ISR+0x1bc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00c      	beq.n	8005378 <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	01db      	lsls	r3, r3, #7
 8005366:	4413      	add	r3, r2
 8005368:	3388      	adds	r3, #136	; 0x88
 800536a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800536e:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 8005370:	6839      	ldr	r1, [r7, #0]
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f7ff fa58 	bl	8004828 <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800537e:	2b00      	cmp	r3, #0
 8005380:	d011      	beq.n	80053a6 <HRTIM_Timer_ISR+0x1ea>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00c      	beq.n	80053a6 <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	01db      	lsls	r3, r3, #7
 8005394:	4413      	add	r3, r2
 8005396:	3388      	adds	r3, #136	; 0x88
 8005398:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800539c:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 800539e:	6839      	ldr	r1, [r7, #0]
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f7ff fa4c 	bl	800483e <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d011      	beq.n	80053d4 <HRTIM_Timer_ISR+0x218>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00c      	beq.n	80053d4 <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	01db      	lsls	r3, r3, #7
 80053c2:	4413      	add	r3, r2
 80053c4:	3388      	adds	r3, #136	; 0x88
 80053c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053ca:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 80053cc:	6839      	ldr	r1, [r7, #0]
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f7ff fa40 	bl	8004854 <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d011      	beq.n	8005402 <HRTIM_Timer_ISR+0x246>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00c      	beq.n	8005402 <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	01db      	lsls	r3, r3, #7
 80053f0:	4413      	add	r3, r2
 80053f2:	3388      	adds	r3, #136	; 0x88
 80053f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80053f8:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 80053fa:	6839      	ldr	r1, [r7, #0]
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f7ff fa34 	bl	800486a <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d011      	beq.n	8005430 <HRTIM_Timer_ISR+0x274>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00c      	beq.n	8005430 <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	01db      	lsls	r3, r3, #7
 800541e:	4413      	add	r3, r2
 8005420:	3388      	adds	r3, #136	; 0x88
 8005422:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005426:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 8005428:	6839      	ldr	r1, [r7, #0]
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7ff f9f1 	bl	8004812 <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d011      	beq.n	800545e <HRTIM_Timer_ISR+0x2a2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00c      	beq.n	800545e <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	01db      	lsls	r3, r3, #7
 800544c:	4413      	add	r3, r2
 800544e:	3388      	adds	r3, #136	; 0x88
 8005450:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005454:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 8005456:	6839      	ldr	r1, [r7, #0]
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f7ff f9cf 	bl	80047fc <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 800545e:	bf00      	nop
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
	...

08005468 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e097      	b.n	80055aa <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b00      	cmp	r3, #0
 800548a:	d106      	bne.n	800549a <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f7fc fef5 	bl	8002284 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2202      	movs	r2, #2
 800549e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d004      	beq.n	80054bc <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054ba:	d103      	bne.n	80054c4 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f023 031e 	bic.w	r3, r3, #30
 80054c2:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d003      	beq.n	80054d8 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	4b38      	ldr	r3, [pc, #224]	; (80055b4 <HAL_LPTIM_Init+0x14c>)
 80054d4:	4013      	ands	r3, r2
 80054d6:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	4b37      	ldr	r3, [pc, #220]	; (80055b8 <HAL_LPTIM_Init+0x150>)
 80054dc:	4013      	ands	r3, r2
 80054de:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80054e8:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80054ee:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80054f4:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80054fa:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	4313      	orrs	r3, r2
 8005500:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d107      	bne.n	800551a <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8005512:	4313      	orrs	r3, r2
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	4313      	orrs	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d004      	beq.n	800552c <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005526:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800552a:	d107      	bne.n	800553c <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8005534:	4313      	orrs	r3, r2
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	4313      	orrs	r3, r2
 800553a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005544:	4293      	cmp	r3, r2
 8005546:	d00a      	beq.n	800555e <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8005550:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8005556:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	4313      	orrs	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a14      	ldr	r2, [pc, #80]	; (80055bc <HAL_LPTIM_Init+0x154>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d004      	beq.n	800557a <HAL_LPTIM_Init+0x112>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a12      	ldr	r2, [pc, #72]	; (80055c0 <HAL_LPTIM_Init+0x158>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d108      	bne.n	800558c <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	430a      	orrs	r2, r1
 8005588:	625a      	str	r2, [r3, #36]	; 0x24
 800558a:	e009      	b.n	80055a0 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a0c      	ldr	r2, [pc, #48]	; (80055c4 <HAL_LPTIM_Init+0x15c>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d104      	bne.n	80055a0 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800559e:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	ffff1f3f 	.word	0xffff1f3f
 80055b8:	ff19f1fe 	.word	0xff19f1fe
 80055bc:	40002400 	.word	0x40002400
 80055c0:	58002400 	.word	0x58002400
 80055c4:	58002800 	.word	0x58002800

080055c8 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2202      	movs	r2, #2
 80055d6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d00c      	beq.n	80055fc <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055ea:	d107      	bne.n	80055fc <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68da      	ldr	r2, [r3, #12]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 80055fa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	691a      	ldr	r2, [r3, #16]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f042 0201 	orr.w	r2, r2, #1
 800560a:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2210      	movs	r2, #16
 8005612:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	683a      	ldr	r2, [r7, #0]
 800561a:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800561c:	2110      	movs	r1, #16
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f91e 	bl	8005860 <LPTIM_WaitForFlag>
 8005624:	4603      	mov	r3, r0
 8005626:	2b03      	cmp	r3, #3
 8005628:	d101      	bne.n	800562e <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e02f      	b.n	800568e <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f946 	bl	80058c0 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 f905 	bl	8005844 <HAL_LPTIM_GetState>
 800563a:	4603      	mov	r3, r0
 800563c:	2b03      	cmp	r3, #3
 800563e:	d101      	bne.n	8005644 <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e024      	b.n	800568e <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	689a      	ldr	r2, [r3, #8]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f042 0210 	orr.w	r2, r2, #16
 8005652:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	689a      	ldr	r2, [r3, #8]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f042 0202 	orr.w	r2, r2, #2
 8005662:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	691a      	ldr	r2, [r3, #16]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f042 0201 	orr.w	r2, r2, #1
 8005672:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	691a      	ldr	r2, [r3, #16]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0204 	orr.w	r2, r2, #4
 8005682:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3708      	adds	r7, #8
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8005696:	b580      	push	{r7, lr}
 8005698:	b082      	sub	sp, #8
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0301 	and.w	r3, r3, #1
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d10d      	bne.n	80056c8 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d106      	bne.n	80056c8 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2201      	movs	r2, #1
 80056c0:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f882 	bl	80057cc <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d10d      	bne.n	80056f2 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d106      	bne.n	80056f2 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2202      	movs	r2, #2
 80056ea:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f7fb fcfd 	bl	80010ec <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0304 	and.w	r3, r3, #4
 80056fc:	2b04      	cmp	r3, #4
 80056fe:	d10d      	bne.n	800571c <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f003 0304 	and.w	r3, r3, #4
 800570a:	2b04      	cmp	r3, #4
 800570c:	d106      	bne.n	800571c <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2204      	movs	r2, #4
 8005714:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f862 	bl	80057e0 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0308 	and.w	r3, r3, #8
 8005726:	2b08      	cmp	r3, #8
 8005728:	d10d      	bne.n	8005746 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f003 0308 	and.w	r3, r3, #8
 8005734:	2b08      	cmp	r3, #8
 8005736:	d106      	bne.n	8005746 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2208      	movs	r2, #8
 800573e:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 f857 	bl	80057f4 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0310 	and.w	r3, r3, #16
 8005750:	2b10      	cmp	r3, #16
 8005752:	d10d      	bne.n	8005770 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f003 0310 	and.w	r3, r3, #16
 800575e:	2b10      	cmp	r3, #16
 8005760:	d106      	bne.n	8005770 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2210      	movs	r2, #16
 8005768:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f84c 	bl	8005808 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0320 	and.w	r3, r3, #32
 800577a:	2b20      	cmp	r3, #32
 800577c:	d10d      	bne.n	800579a <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f003 0320 	and.w	r3, r3, #32
 8005788:	2b20      	cmp	r3, #32
 800578a:	d106      	bne.n	800579a <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2220      	movs	r2, #32
 8005792:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 f841 	bl	800581c <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a4:	2b40      	cmp	r3, #64	; 0x40
 80057a6:	d10d      	bne.n	80057c4 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b2:	2b40      	cmp	r3, #64	; 0x40
 80057b4:	d106      	bne.n	80057c4 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2240      	movs	r2, #64	; 0x40
 80057bc:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f836 	bl	8005830 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80057c4:	bf00      	nop
 80057c6:	3708      	adds	r7, #8
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005852:	b2db      	uxtb	r3, r3
}
 8005854:	4618      	mov	r0, r3
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800586a:	2300      	movs	r3, #0
 800586c:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800586e:	4b12      	ldr	r3, [pc, #72]	; (80058b8 <LPTIM_WaitForFlag+0x58>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a12      	ldr	r2, [pc, #72]	; (80058bc <LPTIM_WaitForFlag+0x5c>)
 8005874:	fba2 2303 	umull	r2, r3, r2, r3
 8005878:	0b9b      	lsrs	r3, r3, #14
 800587a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800587e:	fb02 f303 	mul.w	r3, r2, r3
 8005882:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	3b01      	subs	r3, #1
 8005888:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d101      	bne.n	8005894 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	4013      	ands	r3, r2
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d002      	beq.n	80058aa <LPTIM_WaitForFlag+0x4a>
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1ec      	bne.n	8005884 <LPTIM_WaitForFlag+0x24>

  return result;
 80058aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr
 80058b8:	20000014 	.word	0x20000014
 80058bc:	d1b71759 	.word	0xd1b71759

080058c0 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b08c      	sub	sp, #48	; 0x30
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 80058c8:	2300      	movs	r3, #0
 80058ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058cc:	f3ef 8310 	mrs	r3, PRIMASK
 80058d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80058d2:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80058d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80058d6:	2301      	movs	r3, #1
 80058d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	f383 8810 	msr	PRIMASK, r3
}
 80058e0:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a81      	ldr	r2, [pc, #516]	; (8005aec <LPTIM_Disable+0x22c>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d02d      	beq.n	8005948 <LPTIM_Disable+0x88>
 80058ec:	4a7f      	ldr	r2, [pc, #508]	; (8005aec <LPTIM_Disable+0x22c>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d830      	bhi.n	8005954 <LPTIM_Disable+0x94>
 80058f2:	4a7f      	ldr	r2, [pc, #508]	; (8005af0 <LPTIM_Disable+0x230>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d021      	beq.n	800593c <LPTIM_Disable+0x7c>
 80058f8:	4a7d      	ldr	r2, [pc, #500]	; (8005af0 <LPTIM_Disable+0x230>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d82a      	bhi.n	8005954 <LPTIM_Disable+0x94>
 80058fe:	4a7d      	ldr	r2, [pc, #500]	; (8005af4 <LPTIM_Disable+0x234>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d015      	beq.n	8005930 <LPTIM_Disable+0x70>
 8005904:	4a7b      	ldr	r2, [pc, #492]	; (8005af4 <LPTIM_Disable+0x234>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d824      	bhi.n	8005954 <LPTIM_Disable+0x94>
 800590a:	4a7b      	ldr	r2, [pc, #492]	; (8005af8 <LPTIM_Disable+0x238>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d003      	beq.n	8005918 <LPTIM_Disable+0x58>
 8005910:	4a7a      	ldr	r2, [pc, #488]	; (8005afc <LPTIM_Disable+0x23c>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d006      	beq.n	8005924 <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8005916:	e01d      	b.n	8005954 <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005918:	4b79      	ldr	r3, [pc, #484]	; (8005b00 <LPTIM_Disable+0x240>)
 800591a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800591c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005920:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8005922:	e018      	b.n	8005956 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005924:	4b76      	ldr	r3, [pc, #472]	; (8005b00 <LPTIM_Disable+0x240>)
 8005926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005928:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800592c:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800592e:	e012      	b.n	8005956 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8005930:	4b73      	ldr	r3, [pc, #460]	; (8005b00 <LPTIM_Disable+0x240>)
 8005932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005934:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005938:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800593a:	e00c      	b.n	8005956 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 800593c:	4b70      	ldr	r3, [pc, #448]	; (8005b00 <LPTIM_Disable+0x240>)
 800593e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005940:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005944:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8005946:	e006      	b.n	8005956 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 8005948:	4b6d      	ldr	r3, [pc, #436]	; (8005b00 <LPTIM_Disable+0x240>)
 800594a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800594c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005950:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8005952:	e000      	b.n	8005956 <LPTIM_Disable+0x96>
      break;
 8005954:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597c:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a5a      	ldr	r2, [pc, #360]	; (8005aec <LPTIM_Disable+0x22c>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d059      	beq.n	8005a3c <LPTIM_Disable+0x17c>
 8005988:	4a58      	ldr	r2, [pc, #352]	; (8005aec <LPTIM_Disable+0x22c>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d867      	bhi.n	8005a5e <LPTIM_Disable+0x19e>
 800598e:	4a58      	ldr	r2, [pc, #352]	; (8005af0 <LPTIM_Disable+0x230>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d042      	beq.n	8005a1a <LPTIM_Disable+0x15a>
 8005994:	4a56      	ldr	r2, [pc, #344]	; (8005af0 <LPTIM_Disable+0x230>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d861      	bhi.n	8005a5e <LPTIM_Disable+0x19e>
 800599a:	4a56      	ldr	r2, [pc, #344]	; (8005af4 <LPTIM_Disable+0x234>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d02b      	beq.n	80059f8 <LPTIM_Disable+0x138>
 80059a0:	4a54      	ldr	r2, [pc, #336]	; (8005af4 <LPTIM_Disable+0x234>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d85b      	bhi.n	8005a5e <LPTIM_Disable+0x19e>
 80059a6:	4a54      	ldr	r2, [pc, #336]	; (8005af8 <LPTIM_Disable+0x238>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d003      	beq.n	80059b4 <LPTIM_Disable+0xf4>
 80059ac:	4a53      	ldr	r2, [pc, #332]	; (8005afc <LPTIM_Disable+0x23c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d011      	beq.n	80059d6 <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 80059b2:	e054      	b.n	8005a5e <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 80059b4:	4b52      	ldr	r3, [pc, #328]	; (8005b00 <LPTIM_Disable+0x240>)
 80059b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ba:	4a51      	ldr	r2, [pc, #324]	; (8005b00 <LPTIM_Disable+0x240>)
 80059bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 80059c4:	4b4e      	ldr	r3, [pc, #312]	; (8005b00 <LPTIM_Disable+0x240>)
 80059c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ca:	4a4d      	ldr	r2, [pc, #308]	; (8005b00 <LPTIM_Disable+0x240>)
 80059cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      break;
 80059d4:	e044      	b.n	8005a60 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 80059d6:	4b4a      	ldr	r3, [pc, #296]	; (8005b00 <LPTIM_Disable+0x240>)
 80059d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059dc:	4a48      	ldr	r2, [pc, #288]	; (8005b00 <LPTIM_Disable+0x240>)
 80059de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059e2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 80059e6:	4b46      	ldr	r3, [pc, #280]	; (8005b00 <LPTIM_Disable+0x240>)
 80059e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059ec:	4a44      	ldr	r2, [pc, #272]	; (8005b00 <LPTIM_Disable+0x240>)
 80059ee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059f2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 80059f6:	e033      	b.n	8005a60 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 80059f8:	4b41      	ldr	r3, [pc, #260]	; (8005b00 <LPTIM_Disable+0x240>)
 80059fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059fe:	4a40      	ldr	r2, [pc, #256]	; (8005b00 <LPTIM_Disable+0x240>)
 8005a00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a04:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8005a08:	4b3d      	ldr	r3, [pc, #244]	; (8005b00 <LPTIM_Disable+0x240>)
 8005a0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a0e:	4a3c      	ldr	r2, [pc, #240]	; (8005b00 <LPTIM_Disable+0x240>)
 8005a10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a14:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8005a18:	e022      	b.n	8005a60 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 8005a1a:	4b39      	ldr	r3, [pc, #228]	; (8005b00 <LPTIM_Disable+0x240>)
 8005a1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a20:	4a37      	ldr	r2, [pc, #220]	; (8005b00 <LPTIM_Disable+0x240>)
 8005a22:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005a26:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 8005a2a:	4b35      	ldr	r3, [pc, #212]	; (8005b00 <LPTIM_Disable+0x240>)
 8005a2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a30:	4a33      	ldr	r2, [pc, #204]	; (8005b00 <LPTIM_Disable+0x240>)
 8005a32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a36:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8005a3a:	e011      	b.n	8005a60 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 8005a3c:	4b30      	ldr	r3, [pc, #192]	; (8005b00 <LPTIM_Disable+0x240>)
 8005a3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a42:	4a2f      	ldr	r2, [pc, #188]	; (8005b00 <LPTIM_Disable+0x240>)
 8005a44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a48:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 8005a4c:	4b2c      	ldr	r3, [pc, #176]	; (8005b00 <LPTIM_Disable+0x240>)
 8005a4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a52:	4a2b      	ldr	r2, [pc, #172]	; (8005b00 <LPTIM_Disable+0x240>)
 8005a54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a58:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8005a5c:	e000      	b.n	8005a60 <LPTIM_Disable+0x1a0>
      break;
 8005a5e:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d103      	bne.n	8005a6e <LPTIM_Disable+0x1ae>
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 80d0 	beq.w	8005c0e <LPTIM_Disable+0x34e>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a1e      	ldr	r2, [pc, #120]	; (8005aec <LPTIM_Disable+0x22c>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d031      	beq.n	8005adc <LPTIM_Disable+0x21c>
 8005a78:	4a1c      	ldr	r2, [pc, #112]	; (8005aec <LPTIM_Disable+0x22c>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d842      	bhi.n	8005b04 <LPTIM_Disable+0x244>
 8005a7e:	4a1c      	ldr	r2, [pc, #112]	; (8005af0 <LPTIM_Disable+0x230>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d024      	beq.n	8005ace <LPTIM_Disable+0x20e>
 8005a84:	4a1a      	ldr	r2, [pc, #104]	; (8005af0 <LPTIM_Disable+0x230>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d83c      	bhi.n	8005b04 <LPTIM_Disable+0x244>
 8005a8a:	4a1a      	ldr	r2, [pc, #104]	; (8005af4 <LPTIM_Disable+0x234>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d017      	beq.n	8005ac0 <LPTIM_Disable+0x200>
 8005a90:	4a18      	ldr	r2, [pc, #96]	; (8005af4 <LPTIM_Disable+0x234>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d836      	bhi.n	8005b04 <LPTIM_Disable+0x244>
 8005a96:	4a18      	ldr	r2, [pc, #96]	; (8005af8 <LPTIM_Disable+0x238>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d003      	beq.n	8005aa4 <LPTIM_Disable+0x1e4>
 8005a9c:	4a17      	ldr	r2, [pc, #92]	; (8005afc <LPTIM_Disable+0x23c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d007      	beq.n	8005ab2 <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8005aa2:	e02f      	b.n	8005b04 <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 8005aa4:	4b16      	ldr	r3, [pc, #88]	; (8005b00 <LPTIM_Disable+0x240>)
 8005aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa8:	4a15      	ldr	r2, [pc, #84]	; (8005b00 <LPTIM_Disable+0x240>)
 8005aaa:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8005aae:	6553      	str	r3, [r2, #84]	; 0x54
        break;
 8005ab0:	e029      	b.n	8005b06 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 8005ab2:	4b13      	ldr	r3, [pc, #76]	; (8005b00 <LPTIM_Disable+0x240>)
 8005ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab6:	4a12      	ldr	r2, [pc, #72]	; (8005b00 <LPTIM_Disable+0x240>)
 8005ab8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8005abc:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8005abe:	e022      	b.n	8005b06 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 8005ac0:	4b0f      	ldr	r3, [pc, #60]	; (8005b00 <LPTIM_Disable+0x240>)
 8005ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ac4:	4a0e      	ldr	r2, [pc, #56]	; (8005b00 <LPTIM_Disable+0x240>)
 8005ac6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005aca:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8005acc:	e01b      	b.n	8005b06 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 8005ace:	4b0c      	ldr	r3, [pc, #48]	; (8005b00 <LPTIM_Disable+0x240>)
 8005ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad2:	4a0b      	ldr	r2, [pc, #44]	; (8005b00 <LPTIM_Disable+0x240>)
 8005ad4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005ad8:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8005ada:	e014      	b.n	8005b06 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 8005adc:	4b08      	ldr	r3, [pc, #32]	; (8005b00 <LPTIM_Disable+0x240>)
 8005ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ae0:	4a07      	ldr	r2, [pc, #28]	; (8005b00 <LPTIM_Disable+0x240>)
 8005ae2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005ae6:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8005ae8:	e00d      	b.n	8005b06 <LPTIM_Disable+0x246>
 8005aea:	bf00      	nop
 8005aec:	58003000 	.word	0x58003000
 8005af0:	58002c00 	.word	0x58002c00
 8005af4:	58002800 	.word	0x58002800
 8005af8:	40002400 	.word	0x40002400
 8005afc:	58002400 	.word	0x58002400
 8005b00:	58024400 	.word	0x58024400
        break;
 8005b04:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d01a      	beq.n	8005b42 <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	691a      	ldr	r2, [r3, #16]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0201 	orr.w	r2, r2, #1
 8005b1a:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	69fa      	ldr	r2, [r7, #28]
 8005b22:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8005b24:	2108      	movs	r1, #8
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7ff fe9a 	bl	8005860 <LPTIM_WaitForFlag>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b03      	cmp	r3, #3
 8005b30:	d103      	bne.n	8005b3a <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2203      	movs	r2, #3
 8005b36:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2208      	movs	r2, #8
 8005b40:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d01a      	beq.n	8005b7e <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	691a      	ldr	r2, [r3, #16]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f042 0201 	orr.w	r2, r2, #1
 8005b56:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	69ba      	ldr	r2, [r7, #24]
 8005b5e:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8005b60:	2110      	movs	r1, #16
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7ff fe7c 	bl	8005860 <LPTIM_WaitForFlag>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b03      	cmp	r3, #3
 8005b6c:	d103      	bne.n	8005b76 <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2203      	movs	r2, #3
 8005b72:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2210      	movs	r2, #16
 8005b7c:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a33      	ldr	r2, [pc, #204]	; (8005c50 <LPTIM_Disable+0x390>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d039      	beq.n	8005bfc <LPTIM_Disable+0x33c>
 8005b88:	4a31      	ldr	r2, [pc, #196]	; (8005c50 <LPTIM_Disable+0x390>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d841      	bhi.n	8005c12 <LPTIM_Disable+0x352>
 8005b8e:	4a31      	ldr	r2, [pc, #196]	; (8005c54 <LPTIM_Disable+0x394>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d02a      	beq.n	8005bea <LPTIM_Disable+0x32a>
 8005b94:	4a2f      	ldr	r2, [pc, #188]	; (8005c54 <LPTIM_Disable+0x394>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d83b      	bhi.n	8005c12 <LPTIM_Disable+0x352>
 8005b9a:	4a2f      	ldr	r2, [pc, #188]	; (8005c58 <LPTIM_Disable+0x398>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d01b      	beq.n	8005bd8 <LPTIM_Disable+0x318>
 8005ba0:	4a2d      	ldr	r2, [pc, #180]	; (8005c58 <LPTIM_Disable+0x398>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d835      	bhi.n	8005c12 <LPTIM_Disable+0x352>
 8005ba6:	4a2d      	ldr	r2, [pc, #180]	; (8005c5c <LPTIM_Disable+0x39c>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d003      	beq.n	8005bb4 <LPTIM_Disable+0x2f4>
 8005bac:	4a2c      	ldr	r2, [pc, #176]	; (8005c60 <LPTIM_Disable+0x3a0>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d009      	beq.n	8005bc6 <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8005bb2:	e02e      	b.n	8005c12 <LPTIM_Disable+0x352>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8005bb4:	4b2b      	ldr	r3, [pc, #172]	; (8005c64 <LPTIM_Disable+0x3a4>)
 8005bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005bbc:	4929      	ldr	r1, [pc, #164]	; (8005c64 <LPTIM_Disable+0x3a4>)
 8005bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	654b      	str	r3, [r1, #84]	; 0x54
        break;
 8005bc4:	e026      	b.n	8005c14 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8005bc6:	4b27      	ldr	r3, [pc, #156]	; (8005c64 <LPTIM_Disable+0x3a4>)
 8005bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005bce:	4925      	ldr	r1, [pc, #148]	; (8005c64 <LPTIM_Disable+0x3a4>)
 8005bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8005bd6:	e01d      	b.n	8005c14 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8005bd8:	4b22      	ldr	r3, [pc, #136]	; (8005c64 <LPTIM_Disable+0x3a4>)
 8005bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bdc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005be0:	4920      	ldr	r1, [pc, #128]	; (8005c64 <LPTIM_Disable+0x3a4>)
 8005be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be4:	4313      	orrs	r3, r2
 8005be6:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8005be8:	e014      	b.n	8005c14 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 8005bea:	4b1e      	ldr	r3, [pc, #120]	; (8005c64 <LPTIM_Disable+0x3a4>)
 8005bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005bf2:	491c      	ldr	r1, [pc, #112]	; (8005c64 <LPTIM_Disable+0x3a4>)
 8005bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8005bfa:	e00b      	b.n	8005c14 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 8005bfc:	4b19      	ldr	r3, [pc, #100]	; (8005c64 <LPTIM_Disable+0x3a4>)
 8005bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c00:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c04:	4917      	ldr	r1, [pc, #92]	; (8005c64 <LPTIM_Disable+0x3a4>)
 8005c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8005c0c:	e002      	b.n	8005c14 <LPTIM_Disable+0x354>
    }
  }
 8005c0e:	bf00      	nop
 8005c10:	e000      	b.n	8005c14 <LPTIM_Disable+0x354>
        break;
 8005c12:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	691a      	ldr	r2, [r3, #16]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f022 0201 	bic.w	r2, r2, #1
 8005c22:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c2a:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	6a3a      	ldr	r2, [r7, #32]
 8005c32:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	625a      	str	r2, [r3, #36]	; 0x24
 8005c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	f383 8810 	msr	PRIMASK, r3
}
 8005c46:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8005c48:	bf00      	nop
 8005c4a:	3730      	adds	r7, #48	; 0x30
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	58003000 	.word	0x58003000
 8005c54:	58002c00 	.word	0x58002c00
 8005c58:	58002800 	.word	0x58002800
 8005c5c:	40002400 	.word	0x40002400
 8005c60:	58002400 	.word	0x58002400
 8005c64:	58024400 	.word	0x58024400

08005c68 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8005c6c:	4b05      	ldr	r3, [pc, #20]	; (8005c84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a04      	ldr	r2, [pc, #16]	; (8005c84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c76:	6013      	str	r3, [r2, #0]
}
 8005c78:	bf00      	nop
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	58024800 	.word	0x58024800

08005c88 <HAL_PWR_EnterSLEEPMode>:
  * @note   Ensure to clear pending events before calling this API through
  *         HAL_PWREx_ClearPendingEvent() when the SLEEP entry is WFE.
  * @retval None.
  */
void HAL_PWR_EnterSLEEPMode (uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	460b      	mov	r3, r1
 8005c92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_SLEEP_ENTRY (SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005c94:	4b08      	ldr	r3, [pc, #32]	; (8005cb8 <HAL_PWR_EnterSLEEPMode+0x30>)
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	4a07      	ldr	r2, [pc, #28]	; (8005cb8 <HAL_PWR_EnterSLEEPMode+0x30>)
 8005c9a:	f023 0304 	bic.w	r3, r3, #4
 8005c9e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry */
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005ca0:	78fb      	ldrb	r3, [r7, #3]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d101      	bne.n	8005caa <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8005ca6:	bf30      	wfi
  else
  {
    /* Request Wait For Event */
    __WFE ();
  }
}
 8005ca8:	e000      	b.n	8005cac <HAL_PWR_EnterSLEEPMode+0x24>
    __WFE ();
 8005caa:	bf20      	wfe
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr
 8005cb8:	e000ed00 	.word	0xe000ed00

08005cbc <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8005cc8:	4b18      	ldr	r3, [pc, #96]	; (8005d2c <HAL_PWR_EnterSTOPMode+0x70>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f023 0201 	bic.w	r2, r3, #1
 8005cd0:	4916      	ldr	r1, [pc, #88]	; (8005d2c <HAL_PWR_EnterSTOPMode+0x70>)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8005cd8:	4b14      	ldr	r3, [pc, #80]	; (8005d2c <HAL_PWR_EnterSTOPMode+0x70>)
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	4a13      	ldr	r2, [pc, #76]	; (8005d2c <HAL_PWR_EnterSTOPMode+0x70>)
 8005cde:	f023 0305 	bic.w	r3, r3, #5
 8005ce2:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8005ce4:	4b11      	ldr	r3, [pc, #68]	; (8005d2c <HAL_PWR_EnterSTOPMode+0x70>)
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	4a10      	ldr	r2, [pc, #64]	; (8005d2c <HAL_PWR_EnterSTOPMode+0x70>)
 8005cea:	f023 0302 	bic.w	r3, r3, #2
 8005cee:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005cf0:	4b0f      	ldr	r3, [pc, #60]	; (8005d30 <HAL_PWR_EnterSTOPMode+0x74>)
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	4a0e      	ldr	r2, [pc, #56]	; (8005d30 <HAL_PWR_EnterSTOPMode+0x74>)
 8005cf6:	f043 0304 	orr.w	r3, r3, #4
 8005cfa:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8005cfc:	f3bf 8f4f 	dsb	sy
}
 8005d00:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005d02:	f3bf 8f6f 	isb	sy
}
 8005d06:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005d08:	78fb      	ldrb	r3, [r7, #3]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d101      	bne.n	8005d12 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8005d0e:	bf30      	wfi
 8005d10:	e000      	b.n	8005d14 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8005d12:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005d14:	4b06      	ldr	r3, [pc, #24]	; (8005d30 <HAL_PWR_EnterSTOPMode+0x74>)
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	4a05      	ldr	r2, [pc, #20]	; (8005d30 <HAL_PWR_EnterSTOPMode+0x74>)
 8005d1a:	f023 0304 	bic.w	r3, r3, #4
 8005d1e:	6113      	str	r3, [r2, #16]
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	58024800 	.word	0x58024800
 8005d30:	e000ed00 	.word	0xe000ed00

08005d34 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005d3c:	4b19      	ldr	r3, [pc, #100]	; (8005da4 <HAL_PWREx_ConfigSupply+0x70>)
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	f003 0304 	and.w	r3, r3, #4
 8005d44:	2b04      	cmp	r3, #4
 8005d46:	d00a      	beq.n	8005d5e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005d48:	4b16      	ldr	r3, [pc, #88]	; (8005da4 <HAL_PWREx_ConfigSupply+0x70>)
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	f003 0307 	and.w	r3, r3, #7
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d001      	beq.n	8005d5a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e01f      	b.n	8005d9a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	e01d      	b.n	8005d9a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005d5e:	4b11      	ldr	r3, [pc, #68]	; (8005da4 <HAL_PWREx_ConfigSupply+0x70>)
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	f023 0207 	bic.w	r2, r3, #7
 8005d66:	490f      	ldr	r1, [pc, #60]	; (8005da4 <HAL_PWREx_ConfigSupply+0x70>)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005d6e:	f7fc fdcb 	bl	8002908 <HAL_GetTick>
 8005d72:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d74:	e009      	b.n	8005d8a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005d76:	f7fc fdc7 	bl	8002908 <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d84:	d901      	bls.n	8005d8a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e007      	b.n	8005d9a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d8a:	4b06      	ldr	r3, [pc, #24]	; (8005da4 <HAL_PWREx_ConfigSupply+0x70>)
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d96:	d1ee      	bne.n	8005d76 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	58024800 	.word	0x58024800

08005da8 <HAL_PWREx_EnableFlashPowerDown>:
  *         obtain the best trade-off between low-power consumption and restart
  *         time when exiting from DStop mode.
  * @retval None.
  */
void HAL_PWREx_EnableFlashPowerDown (void)
{
 8005da8:	b480      	push	{r7}
 8005daa:	af00      	add	r7, sp, #0
  /* Enable the Flash Power Down */
  SET_BIT (PWR->CR1, PWR_CR1_FLPS);
 8005dac:	4b05      	ldr	r3, [pc, #20]	; (8005dc4 <HAL_PWREx_EnableFlashPowerDown+0x1c>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a04      	ldr	r2, [pc, #16]	; (8005dc4 <HAL_PWREx_EnableFlashPowerDown+0x1c>)
 8005db2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005db6:	6013      	str	r3, [r2, #0]
}
 8005db8:	bf00      	nop
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	58024800 	.word	0x58024800

08005dc8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b08c      	sub	sp, #48	; 0x30
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d102      	bne.n	8005ddc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	f000 bc48 	b.w	800666c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0301 	and.w	r3, r3, #1
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f000 8088 	beq.w	8005efa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dea:	4b99      	ldr	r3, [pc, #612]	; (8006050 <HAL_RCC_OscConfig+0x288>)
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005df4:	4b96      	ldr	r3, [pc, #600]	; (8006050 <HAL_RCC_OscConfig+0x288>)
 8005df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfc:	2b10      	cmp	r3, #16
 8005dfe:	d007      	beq.n	8005e10 <HAL_RCC_OscConfig+0x48>
 8005e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e02:	2b18      	cmp	r3, #24
 8005e04:	d111      	bne.n	8005e2a <HAL_RCC_OscConfig+0x62>
 8005e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e08:	f003 0303 	and.w	r3, r3, #3
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d10c      	bne.n	8005e2a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e10:	4b8f      	ldr	r3, [pc, #572]	; (8006050 <HAL_RCC_OscConfig+0x288>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d06d      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x130>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d169      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	f000 bc21 	b.w	800666c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e32:	d106      	bne.n	8005e42 <HAL_RCC_OscConfig+0x7a>
 8005e34:	4b86      	ldr	r3, [pc, #536]	; (8006050 <HAL_RCC_OscConfig+0x288>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a85      	ldr	r2, [pc, #532]	; (8006050 <HAL_RCC_OscConfig+0x288>)
 8005e3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e3e:	6013      	str	r3, [r2, #0]
 8005e40:	e02e      	b.n	8005ea0 <HAL_RCC_OscConfig+0xd8>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10c      	bne.n	8005e64 <HAL_RCC_OscConfig+0x9c>
 8005e4a:	4b81      	ldr	r3, [pc, #516]	; (8006050 <HAL_RCC_OscConfig+0x288>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a80      	ldr	r2, [pc, #512]	; (8006050 <HAL_RCC_OscConfig+0x288>)
 8005e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e54:	6013      	str	r3, [r2, #0]
 8005e56:	4b7e      	ldr	r3, [pc, #504]	; (8006050 <HAL_RCC_OscConfig+0x288>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a7d      	ldr	r2, [pc, #500]	; (8006050 <HAL_RCC_OscConfig+0x288>)
 8005e5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e60:	6013      	str	r3, [r2, #0]
 8005e62:	e01d      	b.n	8005ea0 <HAL_RCC_OscConfig+0xd8>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e6c:	d10c      	bne.n	8005e88 <HAL_RCC_OscConfig+0xc0>
 8005e6e:	4b78      	ldr	r3, [pc, #480]	; (8006050 <HAL_RCC_OscConfig+0x288>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a77      	ldr	r2, [pc, #476]	; (8006050 <HAL_RCC_OscConfig+0x288>)
 8005e74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e78:	6013      	str	r3, [r2, #0]
 8005e7a:	4b75      	ldr	r3, [pc, #468]	; (8006050 <HAL_RCC_OscConfig+0x288>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a74      	ldr	r2, [pc, #464]	; (8006050 <HAL_RCC_OscConfig+0x288>)
 8005e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e84:	6013      	str	r3, [r2, #0]
 8005e86:	e00b      	b.n	8005ea0 <HAL_RCC_OscConfig+0xd8>
 8005e88:	4b71      	ldr	r3, [pc, #452]	; (8006050 <HAL_RCC_OscConfig+0x288>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a70      	ldr	r2, [pc, #448]	; (8006050 <HAL_RCC_OscConfig+0x288>)
 8005e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e92:	6013      	str	r3, [r2, #0]
 8005e94:	4b6e      	ldr	r3, [pc, #440]	; (8006050 <HAL_RCC_OscConfig+0x288>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a6d      	ldr	r2, [pc, #436]	; (8006050 <HAL_RCC_OscConfig+0x288>)
 8005e9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d013      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ea8:	f7fc fd2e 	bl	8002908 <HAL_GetTick>
 8005eac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005eae:	e008      	b.n	8005ec2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005eb0:	f7fc fd2a 	bl	8002908 <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	2b64      	cmp	r3, #100	; 0x64
 8005ebc:	d901      	bls.n	8005ec2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e3d4      	b.n	800666c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ec2:	4b63      	ldr	r3, [pc, #396]	; (8006050 <HAL_RCC_OscConfig+0x288>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d0f0      	beq.n	8005eb0 <HAL_RCC_OscConfig+0xe8>
 8005ece:	e014      	b.n	8005efa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed0:	f7fc fd1a 	bl	8002908 <HAL_GetTick>
 8005ed4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005ed6:	e008      	b.n	8005eea <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ed8:	f7fc fd16 	bl	8002908 <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	2b64      	cmp	r3, #100	; 0x64
 8005ee4:	d901      	bls.n	8005eea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e3c0      	b.n	800666c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005eea:	4b59      	ldr	r3, [pc, #356]	; (8006050 <HAL_RCC_OscConfig+0x288>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1f0      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x110>
 8005ef6:	e000      	b.n	8005efa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ef8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0302 	and.w	r3, r3, #2
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f000 80ca 	beq.w	800609c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f08:	4b51      	ldr	r3, [pc, #324]	; (8006050 <HAL_RCC_OscConfig+0x288>)
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f10:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f12:	4b4f      	ldr	r3, [pc, #316]	; (8006050 <HAL_RCC_OscConfig+0x288>)
 8005f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f16:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005f18:	6a3b      	ldr	r3, [r7, #32]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d007      	beq.n	8005f2e <HAL_RCC_OscConfig+0x166>
 8005f1e:	6a3b      	ldr	r3, [r7, #32]
 8005f20:	2b18      	cmp	r3, #24
 8005f22:	d156      	bne.n	8005fd2 <HAL_RCC_OscConfig+0x20a>
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	f003 0303 	and.w	r3, r3, #3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d151      	bne.n	8005fd2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f2e:	4b48      	ldr	r3, [pc, #288]	; (8006050 <HAL_RCC_OscConfig+0x288>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0304 	and.w	r3, r3, #4
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d005      	beq.n	8005f46 <HAL_RCC_OscConfig+0x17e>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e392      	b.n	800666c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f46:	4b42      	ldr	r3, [pc, #264]	; (8006050 <HAL_RCC_OscConfig+0x288>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f023 0219 	bic.w	r2, r3, #25
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	493f      	ldr	r1, [pc, #252]	; (8006050 <HAL_RCC_OscConfig+0x288>)
 8005f54:	4313      	orrs	r3, r2
 8005f56:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f58:	f7fc fcd6 	bl	8002908 <HAL_GetTick>
 8005f5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f5e:	e008      	b.n	8005f72 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f60:	f7fc fcd2 	bl	8002908 <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d901      	bls.n	8005f72 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e37c      	b.n	800666c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f72:	4b37      	ldr	r3, [pc, #220]	; (8006050 <HAL_RCC_OscConfig+0x288>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 0304 	and.w	r3, r3, #4
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d0f0      	beq.n	8005f60 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f7e:	f7fc fd13 	bl	80029a8 <HAL_GetREVID>
 8005f82:	4603      	mov	r3, r0
 8005f84:	f241 0203 	movw	r2, #4099	; 0x1003
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d817      	bhi.n	8005fbc <HAL_RCC_OscConfig+0x1f4>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	2b40      	cmp	r3, #64	; 0x40
 8005f92:	d108      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x1de>
 8005f94:	4b2e      	ldr	r3, [pc, #184]	; (8006050 <HAL_RCC_OscConfig+0x288>)
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005f9c:	4a2c      	ldr	r2, [pc, #176]	; (8006050 <HAL_RCC_OscConfig+0x288>)
 8005f9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fa2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fa4:	e07a      	b.n	800609c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fa6:	4b2a      	ldr	r3, [pc, #168]	; (8006050 <HAL_RCC_OscConfig+0x288>)
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	031b      	lsls	r3, r3, #12
 8005fb4:	4926      	ldr	r1, [pc, #152]	; (8006050 <HAL_RCC_OscConfig+0x288>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fba:	e06f      	b.n	800609c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fbc:	4b24      	ldr	r3, [pc, #144]	; (8006050 <HAL_RCC_OscConfig+0x288>)
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	061b      	lsls	r3, r3, #24
 8005fca:	4921      	ldr	r1, [pc, #132]	; (8006050 <HAL_RCC_OscConfig+0x288>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fd0:	e064      	b.n	800609c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d047      	beq.n	800606a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005fda:	4b1d      	ldr	r3, [pc, #116]	; (8006050 <HAL_RCC_OscConfig+0x288>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f023 0219 	bic.w	r2, r3, #25
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	491a      	ldr	r1, [pc, #104]	; (8006050 <HAL_RCC_OscConfig+0x288>)
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fec:	f7fc fc8c 	bl	8002908 <HAL_GetTick>
 8005ff0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ff2:	e008      	b.n	8006006 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ff4:	f7fc fc88 	bl	8002908 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d901      	bls.n	8006006 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e332      	b.n	800666c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006006:	4b12      	ldr	r3, [pc, #72]	; (8006050 <HAL_RCC_OscConfig+0x288>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0304 	and.w	r3, r3, #4
 800600e:	2b00      	cmp	r3, #0
 8006010:	d0f0      	beq.n	8005ff4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006012:	f7fc fcc9 	bl	80029a8 <HAL_GetREVID>
 8006016:	4603      	mov	r3, r0
 8006018:	f241 0203 	movw	r2, #4099	; 0x1003
 800601c:	4293      	cmp	r3, r2
 800601e:	d819      	bhi.n	8006054 <HAL_RCC_OscConfig+0x28c>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	2b40      	cmp	r3, #64	; 0x40
 8006026:	d108      	bne.n	800603a <HAL_RCC_OscConfig+0x272>
 8006028:	4b09      	ldr	r3, [pc, #36]	; (8006050 <HAL_RCC_OscConfig+0x288>)
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006030:	4a07      	ldr	r2, [pc, #28]	; (8006050 <HAL_RCC_OscConfig+0x288>)
 8006032:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006036:	6053      	str	r3, [r2, #4]
 8006038:	e030      	b.n	800609c <HAL_RCC_OscConfig+0x2d4>
 800603a:	4b05      	ldr	r3, [pc, #20]	; (8006050 <HAL_RCC_OscConfig+0x288>)
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	031b      	lsls	r3, r3, #12
 8006048:	4901      	ldr	r1, [pc, #4]	; (8006050 <HAL_RCC_OscConfig+0x288>)
 800604a:	4313      	orrs	r3, r2
 800604c:	604b      	str	r3, [r1, #4]
 800604e:	e025      	b.n	800609c <HAL_RCC_OscConfig+0x2d4>
 8006050:	58024400 	.word	0x58024400
 8006054:	4b9a      	ldr	r3, [pc, #616]	; (80062c0 <HAL_RCC_OscConfig+0x4f8>)
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	061b      	lsls	r3, r3, #24
 8006062:	4997      	ldr	r1, [pc, #604]	; (80062c0 <HAL_RCC_OscConfig+0x4f8>)
 8006064:	4313      	orrs	r3, r2
 8006066:	604b      	str	r3, [r1, #4]
 8006068:	e018      	b.n	800609c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800606a:	4b95      	ldr	r3, [pc, #596]	; (80062c0 <HAL_RCC_OscConfig+0x4f8>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a94      	ldr	r2, [pc, #592]	; (80062c0 <HAL_RCC_OscConfig+0x4f8>)
 8006070:	f023 0301 	bic.w	r3, r3, #1
 8006074:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006076:	f7fc fc47 	bl	8002908 <HAL_GetTick>
 800607a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800607c:	e008      	b.n	8006090 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800607e:	f7fc fc43 	bl	8002908 <HAL_GetTick>
 8006082:	4602      	mov	r2, r0
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	2b02      	cmp	r3, #2
 800608a:	d901      	bls.n	8006090 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e2ed      	b.n	800666c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006090:	4b8b      	ldr	r3, [pc, #556]	; (80062c0 <HAL_RCC_OscConfig+0x4f8>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0304 	and.w	r3, r3, #4
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1f0      	bne.n	800607e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0310 	and.w	r3, r3, #16
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f000 80a9 	beq.w	80061fc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060aa:	4b85      	ldr	r3, [pc, #532]	; (80062c0 <HAL_RCC_OscConfig+0x4f8>)
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060b2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80060b4:	4b82      	ldr	r3, [pc, #520]	; (80062c0 <HAL_RCC_OscConfig+0x4f8>)
 80060b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	2b08      	cmp	r3, #8
 80060be:	d007      	beq.n	80060d0 <HAL_RCC_OscConfig+0x308>
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	2b18      	cmp	r3, #24
 80060c4:	d13a      	bne.n	800613c <HAL_RCC_OscConfig+0x374>
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f003 0303 	and.w	r3, r3, #3
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d135      	bne.n	800613c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060d0:	4b7b      	ldr	r3, [pc, #492]	; (80062c0 <HAL_RCC_OscConfig+0x4f8>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d005      	beq.n	80060e8 <HAL_RCC_OscConfig+0x320>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	69db      	ldr	r3, [r3, #28]
 80060e0:	2b80      	cmp	r3, #128	; 0x80
 80060e2:	d001      	beq.n	80060e8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e2c1      	b.n	800666c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060e8:	f7fc fc5e 	bl	80029a8 <HAL_GetREVID>
 80060ec:	4603      	mov	r3, r0
 80060ee:	f241 0203 	movw	r2, #4099	; 0x1003
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d817      	bhi.n	8006126 <HAL_RCC_OscConfig+0x35e>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	2b20      	cmp	r3, #32
 80060fc:	d108      	bne.n	8006110 <HAL_RCC_OscConfig+0x348>
 80060fe:	4b70      	ldr	r3, [pc, #448]	; (80062c0 <HAL_RCC_OscConfig+0x4f8>)
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006106:	4a6e      	ldr	r2, [pc, #440]	; (80062c0 <HAL_RCC_OscConfig+0x4f8>)
 8006108:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800610c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800610e:	e075      	b.n	80061fc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006110:	4b6b      	ldr	r3, [pc, #428]	; (80062c0 <HAL_RCC_OscConfig+0x4f8>)
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a1b      	ldr	r3, [r3, #32]
 800611c:	069b      	lsls	r3, r3, #26
 800611e:	4968      	ldr	r1, [pc, #416]	; (80062c0 <HAL_RCC_OscConfig+0x4f8>)
 8006120:	4313      	orrs	r3, r2
 8006122:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006124:	e06a      	b.n	80061fc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006126:	4b66      	ldr	r3, [pc, #408]	; (80062c0 <HAL_RCC_OscConfig+0x4f8>)
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	061b      	lsls	r3, r3, #24
 8006134:	4962      	ldr	r1, [pc, #392]	; (80062c0 <HAL_RCC_OscConfig+0x4f8>)
 8006136:	4313      	orrs	r3, r2
 8006138:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800613a:	e05f      	b.n	80061fc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	69db      	ldr	r3, [r3, #28]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d042      	beq.n	80061ca <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006144:	4b5e      	ldr	r3, [pc, #376]	; (80062c0 <HAL_RCC_OscConfig+0x4f8>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a5d      	ldr	r2, [pc, #372]	; (80062c0 <HAL_RCC_OscConfig+0x4f8>)
 800614a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800614e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006150:	f7fc fbda 	bl	8002908 <HAL_GetTick>
 8006154:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006156:	e008      	b.n	800616a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006158:	f7fc fbd6 	bl	8002908 <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	2b02      	cmp	r3, #2
 8006164:	d901      	bls.n	800616a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e280      	b.n	800666c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800616a:	4b55      	ldr	r3, [pc, #340]	; (80062c0 <HAL_RCC_OscConfig+0x4f8>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006172:	2b00      	cmp	r3, #0
 8006174:	d0f0      	beq.n	8006158 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006176:	f7fc fc17 	bl	80029a8 <HAL_GetREVID>
 800617a:	4603      	mov	r3, r0
 800617c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006180:	4293      	cmp	r3, r2
 8006182:	d817      	bhi.n	80061b4 <HAL_RCC_OscConfig+0x3ec>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	2b20      	cmp	r3, #32
 800618a:	d108      	bne.n	800619e <HAL_RCC_OscConfig+0x3d6>
 800618c:	4b4c      	ldr	r3, [pc, #304]	; (80062c0 <HAL_RCC_OscConfig+0x4f8>)
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006194:	4a4a      	ldr	r2, [pc, #296]	; (80062c0 <HAL_RCC_OscConfig+0x4f8>)
 8006196:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800619a:	6053      	str	r3, [r2, #4]
 800619c:	e02e      	b.n	80061fc <HAL_RCC_OscConfig+0x434>
 800619e:	4b48      	ldr	r3, [pc, #288]	; (80062c0 <HAL_RCC_OscConfig+0x4f8>)
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	069b      	lsls	r3, r3, #26
 80061ac:	4944      	ldr	r1, [pc, #272]	; (80062c0 <HAL_RCC_OscConfig+0x4f8>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	604b      	str	r3, [r1, #4]
 80061b2:	e023      	b.n	80061fc <HAL_RCC_OscConfig+0x434>
 80061b4:	4b42      	ldr	r3, [pc, #264]	; (80062c0 <HAL_RCC_OscConfig+0x4f8>)
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a1b      	ldr	r3, [r3, #32]
 80061c0:	061b      	lsls	r3, r3, #24
 80061c2:	493f      	ldr	r1, [pc, #252]	; (80062c0 <HAL_RCC_OscConfig+0x4f8>)
 80061c4:	4313      	orrs	r3, r2
 80061c6:	60cb      	str	r3, [r1, #12]
 80061c8:	e018      	b.n	80061fc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80061ca:	4b3d      	ldr	r3, [pc, #244]	; (80062c0 <HAL_RCC_OscConfig+0x4f8>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a3c      	ldr	r2, [pc, #240]	; (80062c0 <HAL_RCC_OscConfig+0x4f8>)
 80061d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061d6:	f7fc fb97 	bl	8002908 <HAL_GetTick>
 80061da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80061dc:	e008      	b.n	80061f0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80061de:	f7fc fb93 	bl	8002908 <HAL_GetTick>
 80061e2:	4602      	mov	r2, r0
 80061e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d901      	bls.n	80061f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e23d      	b.n	800666c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80061f0:	4b33      	ldr	r3, [pc, #204]	; (80062c0 <HAL_RCC_OscConfig+0x4f8>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1f0      	bne.n	80061de <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0308 	and.w	r3, r3, #8
 8006204:	2b00      	cmp	r3, #0
 8006206:	d036      	beq.n	8006276 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	695b      	ldr	r3, [r3, #20]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d019      	beq.n	8006244 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006210:	4b2b      	ldr	r3, [pc, #172]	; (80062c0 <HAL_RCC_OscConfig+0x4f8>)
 8006212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006214:	4a2a      	ldr	r2, [pc, #168]	; (80062c0 <HAL_RCC_OscConfig+0x4f8>)
 8006216:	f043 0301 	orr.w	r3, r3, #1
 800621a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800621c:	f7fc fb74 	bl	8002908 <HAL_GetTick>
 8006220:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006222:	e008      	b.n	8006236 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006224:	f7fc fb70 	bl	8002908 <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	2b02      	cmp	r3, #2
 8006230:	d901      	bls.n	8006236 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e21a      	b.n	800666c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006236:	4b22      	ldr	r3, [pc, #136]	; (80062c0 <HAL_RCC_OscConfig+0x4f8>)
 8006238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800623a:	f003 0302 	and.w	r3, r3, #2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d0f0      	beq.n	8006224 <HAL_RCC_OscConfig+0x45c>
 8006242:	e018      	b.n	8006276 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006244:	4b1e      	ldr	r3, [pc, #120]	; (80062c0 <HAL_RCC_OscConfig+0x4f8>)
 8006246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006248:	4a1d      	ldr	r2, [pc, #116]	; (80062c0 <HAL_RCC_OscConfig+0x4f8>)
 800624a:	f023 0301 	bic.w	r3, r3, #1
 800624e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006250:	f7fc fb5a 	bl	8002908 <HAL_GetTick>
 8006254:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006256:	e008      	b.n	800626a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006258:	f7fc fb56 	bl	8002908 <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	2b02      	cmp	r3, #2
 8006264:	d901      	bls.n	800626a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	e200      	b.n	800666c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800626a:	4b15      	ldr	r3, [pc, #84]	; (80062c0 <HAL_RCC_OscConfig+0x4f8>)
 800626c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800626e:	f003 0302 	and.w	r3, r3, #2
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1f0      	bne.n	8006258 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0320 	and.w	r3, r3, #32
 800627e:	2b00      	cmp	r3, #0
 8006280:	d039      	beq.n	80062f6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d01c      	beq.n	80062c4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800628a:	4b0d      	ldr	r3, [pc, #52]	; (80062c0 <HAL_RCC_OscConfig+0x4f8>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a0c      	ldr	r2, [pc, #48]	; (80062c0 <HAL_RCC_OscConfig+0x4f8>)
 8006290:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006294:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006296:	f7fc fb37 	bl	8002908 <HAL_GetTick>
 800629a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800629c:	e008      	b.n	80062b0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800629e:	f7fc fb33 	bl	8002908 <HAL_GetTick>
 80062a2:	4602      	mov	r2, r0
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d901      	bls.n	80062b0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e1dd      	b.n	800666c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80062b0:	4b03      	ldr	r3, [pc, #12]	; (80062c0 <HAL_RCC_OscConfig+0x4f8>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d0f0      	beq.n	800629e <HAL_RCC_OscConfig+0x4d6>
 80062bc:	e01b      	b.n	80062f6 <HAL_RCC_OscConfig+0x52e>
 80062be:	bf00      	nop
 80062c0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80062c4:	4b9b      	ldr	r3, [pc, #620]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a9a      	ldr	r2, [pc, #616]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 80062ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062ce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80062d0:	f7fc fb1a 	bl	8002908 <HAL_GetTick>
 80062d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80062d6:	e008      	b.n	80062ea <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062d8:	f7fc fb16 	bl	8002908 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d901      	bls.n	80062ea <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e1c0      	b.n	800666c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80062ea:	4b92      	ldr	r3, [pc, #584]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1f0      	bne.n	80062d8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0304 	and.w	r3, r3, #4
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f000 8081 	beq.w	8006406 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006304:	4b8c      	ldr	r3, [pc, #560]	; (8006538 <HAL_RCC_OscConfig+0x770>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a8b      	ldr	r2, [pc, #556]	; (8006538 <HAL_RCC_OscConfig+0x770>)
 800630a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800630e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006310:	f7fc fafa 	bl	8002908 <HAL_GetTick>
 8006314:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006316:	e008      	b.n	800632a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006318:	f7fc faf6 	bl	8002908 <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	2b64      	cmp	r3, #100	; 0x64
 8006324:	d901      	bls.n	800632a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e1a0      	b.n	800666c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800632a:	4b83      	ldr	r3, [pc, #524]	; (8006538 <HAL_RCC_OscConfig+0x770>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006332:	2b00      	cmp	r3, #0
 8006334:	d0f0      	beq.n	8006318 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d106      	bne.n	800634c <HAL_RCC_OscConfig+0x584>
 800633e:	4b7d      	ldr	r3, [pc, #500]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 8006340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006342:	4a7c      	ldr	r2, [pc, #496]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 8006344:	f043 0301 	orr.w	r3, r3, #1
 8006348:	6713      	str	r3, [r2, #112]	; 0x70
 800634a:	e02d      	b.n	80063a8 <HAL_RCC_OscConfig+0x5e0>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10c      	bne.n	800636e <HAL_RCC_OscConfig+0x5a6>
 8006354:	4b77      	ldr	r3, [pc, #476]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 8006356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006358:	4a76      	ldr	r2, [pc, #472]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 800635a:	f023 0301 	bic.w	r3, r3, #1
 800635e:	6713      	str	r3, [r2, #112]	; 0x70
 8006360:	4b74      	ldr	r3, [pc, #464]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 8006362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006364:	4a73      	ldr	r2, [pc, #460]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 8006366:	f023 0304 	bic.w	r3, r3, #4
 800636a:	6713      	str	r3, [r2, #112]	; 0x70
 800636c:	e01c      	b.n	80063a8 <HAL_RCC_OscConfig+0x5e0>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	2b05      	cmp	r3, #5
 8006374:	d10c      	bne.n	8006390 <HAL_RCC_OscConfig+0x5c8>
 8006376:	4b6f      	ldr	r3, [pc, #444]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 8006378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800637a:	4a6e      	ldr	r2, [pc, #440]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 800637c:	f043 0304 	orr.w	r3, r3, #4
 8006380:	6713      	str	r3, [r2, #112]	; 0x70
 8006382:	4b6c      	ldr	r3, [pc, #432]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 8006384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006386:	4a6b      	ldr	r2, [pc, #428]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 8006388:	f043 0301 	orr.w	r3, r3, #1
 800638c:	6713      	str	r3, [r2, #112]	; 0x70
 800638e:	e00b      	b.n	80063a8 <HAL_RCC_OscConfig+0x5e0>
 8006390:	4b68      	ldr	r3, [pc, #416]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 8006392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006394:	4a67      	ldr	r2, [pc, #412]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 8006396:	f023 0301 	bic.w	r3, r3, #1
 800639a:	6713      	str	r3, [r2, #112]	; 0x70
 800639c:	4b65      	ldr	r3, [pc, #404]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 800639e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063a0:	4a64      	ldr	r2, [pc, #400]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 80063a2:	f023 0304 	bic.w	r3, r3, #4
 80063a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d015      	beq.n	80063dc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063b0:	f7fc faaa 	bl	8002908 <HAL_GetTick>
 80063b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80063b6:	e00a      	b.n	80063ce <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063b8:	f7fc faa6 	bl	8002908 <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d901      	bls.n	80063ce <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	e14e      	b.n	800666c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80063ce:	4b59      	ldr	r3, [pc, #356]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 80063d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d0ee      	beq.n	80063b8 <HAL_RCC_OscConfig+0x5f0>
 80063da:	e014      	b.n	8006406 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063dc:	f7fc fa94 	bl	8002908 <HAL_GetTick>
 80063e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80063e2:	e00a      	b.n	80063fa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063e4:	f7fc fa90 	bl	8002908 <HAL_GetTick>
 80063e8:	4602      	mov	r2, r0
 80063ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d901      	bls.n	80063fa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e138      	b.n	800666c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80063fa:	4b4e      	ldr	r3, [pc, #312]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 80063fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063fe:	f003 0302 	and.w	r3, r3, #2
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1ee      	bne.n	80063e4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640a:	2b00      	cmp	r3, #0
 800640c:	f000 812d 	beq.w	800666a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006410:	4b48      	ldr	r3, [pc, #288]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006418:	2b18      	cmp	r3, #24
 800641a:	f000 80bd 	beq.w	8006598 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006422:	2b02      	cmp	r3, #2
 8006424:	f040 809e 	bne.w	8006564 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006428:	4b42      	ldr	r3, [pc, #264]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a41      	ldr	r2, [pc, #260]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 800642e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006432:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006434:	f7fc fa68 	bl	8002908 <HAL_GetTick>
 8006438:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800643a:	e008      	b.n	800644e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800643c:	f7fc fa64 	bl	8002908 <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	2b02      	cmp	r3, #2
 8006448:	d901      	bls.n	800644e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e10e      	b.n	800666c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800644e:	4b39      	ldr	r3, [pc, #228]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1f0      	bne.n	800643c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800645a:	4b36      	ldr	r3, [pc, #216]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 800645c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800645e:	4b37      	ldr	r3, [pc, #220]	; (800653c <HAL_RCC_OscConfig+0x774>)
 8006460:	4013      	ands	r3, r2
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800646a:	0112      	lsls	r2, r2, #4
 800646c:	430a      	orrs	r2, r1
 800646e:	4931      	ldr	r1, [pc, #196]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 8006470:	4313      	orrs	r3, r2
 8006472:	628b      	str	r3, [r1, #40]	; 0x28
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006478:	3b01      	subs	r3, #1
 800647a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006482:	3b01      	subs	r3, #1
 8006484:	025b      	lsls	r3, r3, #9
 8006486:	b29b      	uxth	r3, r3
 8006488:	431a      	orrs	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648e:	3b01      	subs	r3, #1
 8006490:	041b      	lsls	r3, r3, #16
 8006492:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006496:	431a      	orrs	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800649c:	3b01      	subs	r3, #1
 800649e:	061b      	lsls	r3, r3, #24
 80064a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80064a4:	4923      	ldr	r1, [pc, #140]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80064aa:	4b22      	ldr	r3, [pc, #136]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 80064ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ae:	4a21      	ldr	r2, [pc, #132]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 80064b0:	f023 0301 	bic.w	r3, r3, #1
 80064b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80064b6:	4b1f      	ldr	r3, [pc, #124]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 80064b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064ba:	4b21      	ldr	r3, [pc, #132]	; (8006540 <HAL_RCC_OscConfig+0x778>)
 80064bc:	4013      	ands	r3, r2
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80064c2:	00d2      	lsls	r2, r2, #3
 80064c4:	491b      	ldr	r1, [pc, #108]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 80064c6:	4313      	orrs	r3, r2
 80064c8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80064ca:	4b1a      	ldr	r3, [pc, #104]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 80064cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ce:	f023 020c 	bic.w	r2, r3, #12
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d6:	4917      	ldr	r1, [pc, #92]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80064dc:	4b15      	ldr	r3, [pc, #84]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 80064de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e0:	f023 0202 	bic.w	r2, r3, #2
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064e8:	4912      	ldr	r1, [pc, #72]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 80064ea:	4313      	orrs	r3, r2
 80064ec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80064ee:	4b11      	ldr	r3, [pc, #68]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 80064f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f2:	4a10      	ldr	r2, [pc, #64]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 80064f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064fa:	4b0e      	ldr	r3, [pc, #56]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 80064fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fe:	4a0d      	ldr	r2, [pc, #52]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 8006500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006504:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006506:	4b0b      	ldr	r3, [pc, #44]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 8006508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800650a:	4a0a      	ldr	r2, [pc, #40]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 800650c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006510:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006512:	4b08      	ldr	r3, [pc, #32]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 8006514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006516:	4a07      	ldr	r2, [pc, #28]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 8006518:	f043 0301 	orr.w	r3, r3, #1
 800651c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800651e:	4b05      	ldr	r3, [pc, #20]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a04      	ldr	r2, [pc, #16]	; (8006534 <HAL_RCC_OscConfig+0x76c>)
 8006524:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006528:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800652a:	f7fc f9ed 	bl	8002908 <HAL_GetTick>
 800652e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006530:	e011      	b.n	8006556 <HAL_RCC_OscConfig+0x78e>
 8006532:	bf00      	nop
 8006534:	58024400 	.word	0x58024400
 8006538:	58024800 	.word	0x58024800
 800653c:	fffffc0c 	.word	0xfffffc0c
 8006540:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006544:	f7fc f9e0 	bl	8002908 <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	2b02      	cmp	r3, #2
 8006550:	d901      	bls.n	8006556 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e08a      	b.n	800666c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006556:	4b47      	ldr	r3, [pc, #284]	; (8006674 <HAL_RCC_OscConfig+0x8ac>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d0f0      	beq.n	8006544 <HAL_RCC_OscConfig+0x77c>
 8006562:	e082      	b.n	800666a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006564:	4b43      	ldr	r3, [pc, #268]	; (8006674 <HAL_RCC_OscConfig+0x8ac>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a42      	ldr	r2, [pc, #264]	; (8006674 <HAL_RCC_OscConfig+0x8ac>)
 800656a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800656e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006570:	f7fc f9ca 	bl	8002908 <HAL_GetTick>
 8006574:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006576:	e008      	b.n	800658a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006578:	f7fc f9c6 	bl	8002908 <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	2b02      	cmp	r3, #2
 8006584:	d901      	bls.n	800658a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e070      	b.n	800666c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800658a:	4b3a      	ldr	r3, [pc, #232]	; (8006674 <HAL_RCC_OscConfig+0x8ac>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d1f0      	bne.n	8006578 <HAL_RCC_OscConfig+0x7b0>
 8006596:	e068      	b.n	800666a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006598:	4b36      	ldr	r3, [pc, #216]	; (8006674 <HAL_RCC_OscConfig+0x8ac>)
 800659a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800659e:	4b35      	ldr	r3, [pc, #212]	; (8006674 <HAL_RCC_OscConfig+0x8ac>)
 80065a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d031      	beq.n	8006610 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	f003 0203 	and.w	r2, r3, #3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d12a      	bne.n	8006610 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	091b      	lsrs	r3, r3, #4
 80065be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d122      	bne.n	8006610 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d11a      	bne.n	8006610 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	0a5b      	lsrs	r3, r3, #9
 80065de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d111      	bne.n	8006610 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	0c1b      	lsrs	r3, r3, #16
 80065f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d108      	bne.n	8006610 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	0e1b      	lsrs	r3, r3, #24
 8006602:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800660a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800660c:	429a      	cmp	r2, r3
 800660e:	d001      	beq.n	8006614 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e02b      	b.n	800666c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006614:	4b17      	ldr	r3, [pc, #92]	; (8006674 <HAL_RCC_OscConfig+0x8ac>)
 8006616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006618:	08db      	lsrs	r3, r3, #3
 800661a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800661e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	429a      	cmp	r2, r3
 8006628:	d01f      	beq.n	800666a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800662a:	4b12      	ldr	r3, [pc, #72]	; (8006674 <HAL_RCC_OscConfig+0x8ac>)
 800662c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662e:	4a11      	ldr	r2, [pc, #68]	; (8006674 <HAL_RCC_OscConfig+0x8ac>)
 8006630:	f023 0301 	bic.w	r3, r3, #1
 8006634:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006636:	f7fc f967 	bl	8002908 <HAL_GetTick>
 800663a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800663c:	bf00      	nop
 800663e:	f7fc f963 	bl	8002908 <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006646:	4293      	cmp	r3, r2
 8006648:	d0f9      	beq.n	800663e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800664a:	4b0a      	ldr	r3, [pc, #40]	; (8006674 <HAL_RCC_OscConfig+0x8ac>)
 800664c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800664e:	4b0a      	ldr	r3, [pc, #40]	; (8006678 <HAL_RCC_OscConfig+0x8b0>)
 8006650:	4013      	ands	r3, r2
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006656:	00d2      	lsls	r2, r2, #3
 8006658:	4906      	ldr	r1, [pc, #24]	; (8006674 <HAL_RCC_OscConfig+0x8ac>)
 800665a:	4313      	orrs	r3, r2
 800665c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800665e:	4b05      	ldr	r3, [pc, #20]	; (8006674 <HAL_RCC_OscConfig+0x8ac>)
 8006660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006662:	4a04      	ldr	r2, [pc, #16]	; (8006674 <HAL_RCC_OscConfig+0x8ac>)
 8006664:	f043 0301 	orr.w	r3, r3, #1
 8006668:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3730      	adds	r7, #48	; 0x30
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	58024400 	.word	0x58024400
 8006678:	ffff0007 	.word	0xffff0007

0800667c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b086      	sub	sp, #24
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d101      	bne.n	8006690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e19c      	b.n	80069ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006690:	4b8a      	ldr	r3, [pc, #552]	; (80068bc <HAL_RCC_ClockConfig+0x240>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 030f 	and.w	r3, r3, #15
 8006698:	683a      	ldr	r2, [r7, #0]
 800669a:	429a      	cmp	r2, r3
 800669c:	d910      	bls.n	80066c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800669e:	4b87      	ldr	r3, [pc, #540]	; (80068bc <HAL_RCC_ClockConfig+0x240>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f023 020f 	bic.w	r2, r3, #15
 80066a6:	4985      	ldr	r1, [pc, #532]	; (80068bc <HAL_RCC_ClockConfig+0x240>)
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066ae:	4b83      	ldr	r3, [pc, #524]	; (80068bc <HAL_RCC_ClockConfig+0x240>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 030f 	and.w	r3, r3, #15
 80066b6:	683a      	ldr	r2, [r7, #0]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d001      	beq.n	80066c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e184      	b.n	80069ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 0304 	and.w	r3, r3, #4
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d010      	beq.n	80066ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	691a      	ldr	r2, [r3, #16]
 80066d0:	4b7b      	ldr	r3, [pc, #492]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066d8:	429a      	cmp	r2, r3
 80066da:	d908      	bls.n	80066ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80066dc:	4b78      	ldr	r3, [pc, #480]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	4975      	ldr	r1, [pc, #468]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 80066ea:	4313      	orrs	r3, r2
 80066ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0308 	and.w	r3, r3, #8
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d010      	beq.n	800671c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	695a      	ldr	r2, [r3, #20]
 80066fe:	4b70      	ldr	r3, [pc, #448]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006706:	429a      	cmp	r2, r3
 8006708:	d908      	bls.n	800671c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800670a:	4b6d      	ldr	r3, [pc, #436]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	496a      	ldr	r1, [pc, #424]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 8006718:	4313      	orrs	r3, r2
 800671a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0310 	and.w	r3, r3, #16
 8006724:	2b00      	cmp	r3, #0
 8006726:	d010      	beq.n	800674a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	699a      	ldr	r2, [r3, #24]
 800672c:	4b64      	ldr	r3, [pc, #400]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 800672e:	69db      	ldr	r3, [r3, #28]
 8006730:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006734:	429a      	cmp	r2, r3
 8006736:	d908      	bls.n	800674a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006738:	4b61      	ldr	r3, [pc, #388]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 800673a:	69db      	ldr	r3, [r3, #28]
 800673c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	495e      	ldr	r1, [pc, #376]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 8006746:	4313      	orrs	r3, r2
 8006748:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0320 	and.w	r3, r3, #32
 8006752:	2b00      	cmp	r3, #0
 8006754:	d010      	beq.n	8006778 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	69da      	ldr	r2, [r3, #28]
 800675a:	4b59      	ldr	r3, [pc, #356]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 800675c:	6a1b      	ldr	r3, [r3, #32]
 800675e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006762:	429a      	cmp	r2, r3
 8006764:	d908      	bls.n	8006778 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006766:	4b56      	ldr	r3, [pc, #344]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 8006768:	6a1b      	ldr	r3, [r3, #32]
 800676a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	69db      	ldr	r3, [r3, #28]
 8006772:	4953      	ldr	r1, [pc, #332]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 8006774:	4313      	orrs	r3, r2
 8006776:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0302 	and.w	r3, r3, #2
 8006780:	2b00      	cmp	r3, #0
 8006782:	d010      	beq.n	80067a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	68da      	ldr	r2, [r3, #12]
 8006788:	4b4d      	ldr	r3, [pc, #308]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	f003 030f 	and.w	r3, r3, #15
 8006790:	429a      	cmp	r2, r3
 8006792:	d908      	bls.n	80067a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006794:	4b4a      	ldr	r3, [pc, #296]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	f023 020f 	bic.w	r2, r3, #15
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	4947      	ldr	r1, [pc, #284]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 80067a2:	4313      	orrs	r3, r2
 80067a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d055      	beq.n	800685e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80067b2:	4b43      	ldr	r3, [pc, #268]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	4940      	ldr	r1, [pc, #256]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d107      	bne.n	80067dc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80067cc:	4b3c      	ldr	r3, [pc, #240]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d121      	bne.n	800681c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e0f6      	b.n	80069ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	2b03      	cmp	r3, #3
 80067e2:	d107      	bne.n	80067f4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80067e4:	4b36      	ldr	r3, [pc, #216]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d115      	bne.n	800681c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e0ea      	b.n	80069ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d107      	bne.n	800680c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80067fc:	4b30      	ldr	r3, [pc, #192]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006804:	2b00      	cmp	r3, #0
 8006806:	d109      	bne.n	800681c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e0de      	b.n	80069ca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800680c:	4b2c      	ldr	r3, [pc, #176]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0304 	and.w	r3, r3, #4
 8006814:	2b00      	cmp	r3, #0
 8006816:	d101      	bne.n	800681c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e0d6      	b.n	80069ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800681c:	4b28      	ldr	r3, [pc, #160]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	f023 0207 	bic.w	r2, r3, #7
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	4925      	ldr	r1, [pc, #148]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 800682a:	4313      	orrs	r3, r2
 800682c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800682e:	f7fc f86b 	bl	8002908 <HAL_GetTick>
 8006832:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006834:	e00a      	b.n	800684c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006836:	f7fc f867 	bl	8002908 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	f241 3288 	movw	r2, #5000	; 0x1388
 8006844:	4293      	cmp	r3, r2
 8006846:	d901      	bls.n	800684c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e0be      	b.n	80069ca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800684c:	4b1c      	ldr	r3, [pc, #112]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	00db      	lsls	r3, r3, #3
 800685a:	429a      	cmp	r2, r3
 800685c:	d1eb      	bne.n	8006836 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0302 	and.w	r3, r3, #2
 8006866:	2b00      	cmp	r3, #0
 8006868:	d010      	beq.n	800688c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68da      	ldr	r2, [r3, #12]
 800686e:	4b14      	ldr	r3, [pc, #80]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	f003 030f 	and.w	r3, r3, #15
 8006876:	429a      	cmp	r2, r3
 8006878:	d208      	bcs.n	800688c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800687a:	4b11      	ldr	r3, [pc, #68]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	f023 020f 	bic.w	r2, r3, #15
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	490e      	ldr	r1, [pc, #56]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 8006888:	4313      	orrs	r3, r2
 800688a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800688c:	4b0b      	ldr	r3, [pc, #44]	; (80068bc <HAL_RCC_ClockConfig+0x240>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 030f 	and.w	r3, r3, #15
 8006894:	683a      	ldr	r2, [r7, #0]
 8006896:	429a      	cmp	r2, r3
 8006898:	d214      	bcs.n	80068c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800689a:	4b08      	ldr	r3, [pc, #32]	; (80068bc <HAL_RCC_ClockConfig+0x240>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f023 020f 	bic.w	r2, r3, #15
 80068a2:	4906      	ldr	r1, [pc, #24]	; (80068bc <HAL_RCC_ClockConfig+0x240>)
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068aa:	4b04      	ldr	r3, [pc, #16]	; (80068bc <HAL_RCC_ClockConfig+0x240>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 030f 	and.w	r3, r3, #15
 80068b2:	683a      	ldr	r2, [r7, #0]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d005      	beq.n	80068c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e086      	b.n	80069ca <HAL_RCC_ClockConfig+0x34e>
 80068bc:	52002000 	.word	0x52002000
 80068c0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0304 	and.w	r3, r3, #4
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d010      	beq.n	80068f2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	691a      	ldr	r2, [r3, #16]
 80068d4:	4b3f      	ldr	r3, [pc, #252]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068dc:	429a      	cmp	r2, r3
 80068de:	d208      	bcs.n	80068f2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80068e0:	4b3c      	ldr	r3, [pc, #240]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	4939      	ldr	r1, [pc, #228]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 80068ee:	4313      	orrs	r3, r2
 80068f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0308 	and.w	r3, r3, #8
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d010      	beq.n	8006920 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	695a      	ldr	r2, [r3, #20]
 8006902:	4b34      	ldr	r3, [pc, #208]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 8006904:	69db      	ldr	r3, [r3, #28]
 8006906:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800690a:	429a      	cmp	r2, r3
 800690c:	d208      	bcs.n	8006920 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800690e:	4b31      	ldr	r3, [pc, #196]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 8006910:	69db      	ldr	r3, [r3, #28]
 8006912:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	695b      	ldr	r3, [r3, #20]
 800691a:	492e      	ldr	r1, [pc, #184]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 800691c:	4313      	orrs	r3, r2
 800691e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0310 	and.w	r3, r3, #16
 8006928:	2b00      	cmp	r3, #0
 800692a:	d010      	beq.n	800694e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	699a      	ldr	r2, [r3, #24]
 8006930:	4b28      	ldr	r3, [pc, #160]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 8006932:	69db      	ldr	r3, [r3, #28]
 8006934:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006938:	429a      	cmp	r2, r3
 800693a:	d208      	bcs.n	800694e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800693c:	4b25      	ldr	r3, [pc, #148]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 800693e:	69db      	ldr	r3, [r3, #28]
 8006940:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	4922      	ldr	r1, [pc, #136]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 800694a:	4313      	orrs	r3, r2
 800694c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0320 	and.w	r3, r3, #32
 8006956:	2b00      	cmp	r3, #0
 8006958:	d010      	beq.n	800697c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	69da      	ldr	r2, [r3, #28]
 800695e:	4b1d      	ldr	r3, [pc, #116]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006966:	429a      	cmp	r2, r3
 8006968:	d208      	bcs.n	800697c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800696a:	4b1a      	ldr	r3, [pc, #104]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	69db      	ldr	r3, [r3, #28]
 8006976:	4917      	ldr	r1, [pc, #92]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 8006978:	4313      	orrs	r3, r2
 800697a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800697c:	f000 f844 	bl	8006a08 <HAL_RCC_GetSysClockFreq>
 8006980:	4602      	mov	r2, r0
 8006982:	4b14      	ldr	r3, [pc, #80]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	0a1b      	lsrs	r3, r3, #8
 8006988:	f003 030f 	and.w	r3, r3, #15
 800698c:	4912      	ldr	r1, [pc, #72]	; (80069d8 <HAL_RCC_ClockConfig+0x35c>)
 800698e:	5ccb      	ldrb	r3, [r1, r3]
 8006990:	f003 031f 	and.w	r3, r3, #31
 8006994:	fa22 f303 	lsr.w	r3, r2, r3
 8006998:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800699a:	4b0e      	ldr	r3, [pc, #56]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	f003 030f 	and.w	r3, r3, #15
 80069a2:	4a0d      	ldr	r2, [pc, #52]	; (80069d8 <HAL_RCC_ClockConfig+0x35c>)
 80069a4:	5cd3      	ldrb	r3, [r2, r3]
 80069a6:	f003 031f 	and.w	r3, r3, #31
 80069aa:	693a      	ldr	r2, [r7, #16]
 80069ac:	fa22 f303 	lsr.w	r3, r2, r3
 80069b0:	4a0a      	ldr	r2, [pc, #40]	; (80069dc <HAL_RCC_ClockConfig+0x360>)
 80069b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80069b4:	4a0a      	ldr	r2, [pc, #40]	; (80069e0 <HAL_RCC_ClockConfig+0x364>)
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80069ba:	4b0a      	ldr	r3, [pc, #40]	; (80069e4 <HAL_RCC_ClockConfig+0x368>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4618      	mov	r0, r3
 80069c0:	f7fb ff58 	bl	8002874 <HAL_InitTick>
 80069c4:	4603      	mov	r3, r0
 80069c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80069c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3718      	adds	r7, #24
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	58024400 	.word	0x58024400
 80069d8:	0800d32c 	.word	0x0800d32c
 80069dc:	20000018 	.word	0x20000018
 80069e0:	20000014 	.word	0x20000014
 80069e4:	2000001c 	.word	0x2000001c

080069e8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80069e8:	b480      	push	{r7}
 80069ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 80069ec:	4b05      	ldr	r3, [pc, #20]	; (8006a04 <HAL_RCC_EnableCSS+0x1c>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a04      	ldr	r2, [pc, #16]	; (8006a04 <HAL_RCC_EnableCSS+0x1c>)
 80069f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069f6:	6013      	str	r3, [r2, #0]
}
 80069f8:	bf00      	nop
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	58024400 	.word	0x58024400

08006a08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b089      	sub	sp, #36	; 0x24
 8006a0c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a0e:	4bb3      	ldr	r3, [pc, #716]	; (8006cdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a16:	2b18      	cmp	r3, #24
 8006a18:	f200 8155 	bhi.w	8006cc6 <HAL_RCC_GetSysClockFreq+0x2be>
 8006a1c:	a201      	add	r2, pc, #4	; (adr r2, 8006a24 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a22:	bf00      	nop
 8006a24:	08006a89 	.word	0x08006a89
 8006a28:	08006cc7 	.word	0x08006cc7
 8006a2c:	08006cc7 	.word	0x08006cc7
 8006a30:	08006cc7 	.word	0x08006cc7
 8006a34:	08006cc7 	.word	0x08006cc7
 8006a38:	08006cc7 	.word	0x08006cc7
 8006a3c:	08006cc7 	.word	0x08006cc7
 8006a40:	08006cc7 	.word	0x08006cc7
 8006a44:	08006aaf 	.word	0x08006aaf
 8006a48:	08006cc7 	.word	0x08006cc7
 8006a4c:	08006cc7 	.word	0x08006cc7
 8006a50:	08006cc7 	.word	0x08006cc7
 8006a54:	08006cc7 	.word	0x08006cc7
 8006a58:	08006cc7 	.word	0x08006cc7
 8006a5c:	08006cc7 	.word	0x08006cc7
 8006a60:	08006cc7 	.word	0x08006cc7
 8006a64:	08006ab5 	.word	0x08006ab5
 8006a68:	08006cc7 	.word	0x08006cc7
 8006a6c:	08006cc7 	.word	0x08006cc7
 8006a70:	08006cc7 	.word	0x08006cc7
 8006a74:	08006cc7 	.word	0x08006cc7
 8006a78:	08006cc7 	.word	0x08006cc7
 8006a7c:	08006cc7 	.word	0x08006cc7
 8006a80:	08006cc7 	.word	0x08006cc7
 8006a84:	08006abb 	.word	0x08006abb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a88:	4b94      	ldr	r3, [pc, #592]	; (8006cdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 0320 	and.w	r3, r3, #32
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d009      	beq.n	8006aa8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a94:	4b91      	ldr	r3, [pc, #580]	; (8006cdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	08db      	lsrs	r3, r3, #3
 8006a9a:	f003 0303 	and.w	r3, r3, #3
 8006a9e:	4a90      	ldr	r2, [pc, #576]	; (8006ce0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8006aa4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006aa6:	e111      	b.n	8006ccc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006aa8:	4b8d      	ldr	r3, [pc, #564]	; (8006ce0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006aaa:	61bb      	str	r3, [r7, #24]
      break;
 8006aac:	e10e      	b.n	8006ccc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006aae:	4b8d      	ldr	r3, [pc, #564]	; (8006ce4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006ab0:	61bb      	str	r3, [r7, #24]
      break;
 8006ab2:	e10b      	b.n	8006ccc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006ab4:	4b8c      	ldr	r3, [pc, #560]	; (8006ce8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006ab6:	61bb      	str	r3, [r7, #24]
      break;
 8006ab8:	e108      	b.n	8006ccc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006aba:	4b88      	ldr	r3, [pc, #544]	; (8006cdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006abe:	f003 0303 	and.w	r3, r3, #3
 8006ac2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006ac4:	4b85      	ldr	r3, [pc, #532]	; (8006cdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac8:	091b      	lsrs	r3, r3, #4
 8006aca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ace:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006ad0:	4b82      	ldr	r3, [pc, #520]	; (8006cdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad4:	f003 0301 	and.w	r3, r3, #1
 8006ad8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006ada:	4b80      	ldr	r3, [pc, #512]	; (8006cdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ade:	08db      	lsrs	r3, r3, #3
 8006ae0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	fb02 f303 	mul.w	r3, r2, r3
 8006aea:	ee07 3a90 	vmov	s15, r3
 8006aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006af2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f000 80e1 	beq.w	8006cc0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	f000 8083 	beq.w	8006c0c <HAL_RCC_GetSysClockFreq+0x204>
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	f200 80a1 	bhi.w	8006c50 <HAL_RCC_GetSysClockFreq+0x248>
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d003      	beq.n	8006b1c <HAL_RCC_GetSysClockFreq+0x114>
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d056      	beq.n	8006bc8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006b1a:	e099      	b.n	8006c50 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b1c:	4b6f      	ldr	r3, [pc, #444]	; (8006cdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 0320 	and.w	r3, r3, #32
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d02d      	beq.n	8006b84 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b28:	4b6c      	ldr	r3, [pc, #432]	; (8006cdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	08db      	lsrs	r3, r3, #3
 8006b2e:	f003 0303 	and.w	r3, r3, #3
 8006b32:	4a6b      	ldr	r2, [pc, #428]	; (8006ce0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b34:	fa22 f303 	lsr.w	r3, r2, r3
 8006b38:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	ee07 3a90 	vmov	s15, r3
 8006b40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	ee07 3a90 	vmov	s15, r3
 8006b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b52:	4b62      	ldr	r3, [pc, #392]	; (8006cdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b5a:	ee07 3a90 	vmov	s15, r3
 8006b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b62:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b66:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006cec <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b7e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006b82:	e087      	b.n	8006c94 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	ee07 3a90 	vmov	s15, r3
 8006b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b8e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006cf0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b96:	4b51      	ldr	r3, [pc, #324]	; (8006cdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b9e:	ee07 3a90 	vmov	s15, r3
 8006ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ba6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006baa:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006cec <HAL_RCC_GetSysClockFreq+0x2e4>
 8006bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bc2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006bc6:	e065      	b.n	8006c94 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	ee07 3a90 	vmov	s15, r3
 8006bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bd2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006cf4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bda:	4b40      	ldr	r3, [pc, #256]	; (8006cdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006be2:	ee07 3a90 	vmov	s15, r3
 8006be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bea:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bee:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006cec <HAL_RCC_GetSysClockFreq+0x2e4>
 8006bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c06:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c0a:	e043      	b.n	8006c94 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	ee07 3a90 	vmov	s15, r3
 8006c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c16:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006cf8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c1e:	4b2f      	ldr	r3, [pc, #188]	; (8006cdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c26:	ee07 3a90 	vmov	s15, r3
 8006c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c32:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006cec <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c4a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c4e:	e021      	b.n	8006c94 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	ee07 3a90 	vmov	s15, r3
 8006c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c5a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006cf4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c62:	4b1e      	ldr	r3, [pc, #120]	; (8006cdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c6a:	ee07 3a90 	vmov	s15, r3
 8006c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c72:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c76:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006cec <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c92:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006c94:	4b11      	ldr	r3, [pc, #68]	; (8006cdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c98:	0a5b      	lsrs	r3, r3, #9
 8006c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	ee07 3a90 	vmov	s15, r3
 8006ca8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006cac:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cb8:	ee17 3a90 	vmov	r3, s15
 8006cbc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006cbe:	e005      	b.n	8006ccc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	61bb      	str	r3, [r7, #24]
      break;
 8006cc4:	e002      	b.n	8006ccc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006cc6:	4b07      	ldr	r3, [pc, #28]	; (8006ce4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006cc8:	61bb      	str	r3, [r7, #24]
      break;
 8006cca:	bf00      	nop
  }

  return sysclockfreq;
 8006ccc:	69bb      	ldr	r3, [r7, #24]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3724      	adds	r7, #36	; 0x24
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	58024400 	.word	0x58024400
 8006ce0:	03d09000 	.word	0x03d09000
 8006ce4:	003d0900 	.word	0x003d0900
 8006ce8:	00989680 	.word	0x00989680
 8006cec:	46000000 	.word	0x46000000
 8006cf0:	4c742400 	.word	0x4c742400
 8006cf4:	4a742400 	.word	0x4a742400
 8006cf8:	4b189680 	.word	0x4b189680

08006cfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006d02:	f7ff fe81 	bl	8006a08 <HAL_RCC_GetSysClockFreq>
 8006d06:	4602      	mov	r2, r0
 8006d08:	4b10      	ldr	r3, [pc, #64]	; (8006d4c <HAL_RCC_GetHCLKFreq+0x50>)
 8006d0a:	699b      	ldr	r3, [r3, #24]
 8006d0c:	0a1b      	lsrs	r3, r3, #8
 8006d0e:	f003 030f 	and.w	r3, r3, #15
 8006d12:	490f      	ldr	r1, [pc, #60]	; (8006d50 <HAL_RCC_GetHCLKFreq+0x54>)
 8006d14:	5ccb      	ldrb	r3, [r1, r3]
 8006d16:	f003 031f 	and.w	r3, r3, #31
 8006d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d1e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d20:	4b0a      	ldr	r3, [pc, #40]	; (8006d4c <HAL_RCC_GetHCLKFreq+0x50>)
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	f003 030f 	and.w	r3, r3, #15
 8006d28:	4a09      	ldr	r2, [pc, #36]	; (8006d50 <HAL_RCC_GetHCLKFreq+0x54>)
 8006d2a:	5cd3      	ldrb	r3, [r2, r3]
 8006d2c:	f003 031f 	and.w	r3, r3, #31
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	fa22 f303 	lsr.w	r3, r2, r3
 8006d36:	4a07      	ldr	r2, [pc, #28]	; (8006d54 <HAL_RCC_GetHCLKFreq+0x58>)
 8006d38:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006d3a:	4a07      	ldr	r2, [pc, #28]	; (8006d58 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006d40:	4b04      	ldr	r3, [pc, #16]	; (8006d54 <HAL_RCC_GetHCLKFreq+0x58>)
 8006d42:	681b      	ldr	r3, [r3, #0]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3708      	adds	r7, #8
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	58024400 	.word	0x58024400
 8006d50:	0800d32c 	.word	0x0800d32c
 8006d54:	20000018 	.word	0x20000018
 8006d58:	20000014 	.word	0x20000014

08006d5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006d60:	f7ff ffcc 	bl	8006cfc <HAL_RCC_GetHCLKFreq>
 8006d64:	4602      	mov	r2, r0
 8006d66:	4b06      	ldr	r3, [pc, #24]	; (8006d80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d68:	69db      	ldr	r3, [r3, #28]
 8006d6a:	091b      	lsrs	r3, r3, #4
 8006d6c:	f003 0307 	and.w	r3, r3, #7
 8006d70:	4904      	ldr	r1, [pc, #16]	; (8006d84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d72:	5ccb      	ldrb	r3, [r1, r3]
 8006d74:	f003 031f 	and.w	r3, r3, #31
 8006d78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	58024400 	.word	0x58024400
 8006d84:	0800d32c 	.word	0x0800d32c

08006d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006d8c:	f7ff ffb6 	bl	8006cfc <HAL_RCC_GetHCLKFreq>
 8006d90:	4602      	mov	r2, r0
 8006d92:	4b06      	ldr	r3, [pc, #24]	; (8006dac <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d94:	69db      	ldr	r3, [r3, #28]
 8006d96:	0a1b      	lsrs	r3, r3, #8
 8006d98:	f003 0307 	and.w	r3, r3, #7
 8006d9c:	4904      	ldr	r1, [pc, #16]	; (8006db0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006d9e:	5ccb      	ldrb	r3, [r1, r3]
 8006da0:	f003 031f 	and.w	r3, r3, #31
 8006da4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	58024400 	.word	0x58024400
 8006db0:	0800d32c 	.word	0x0800d32c

08006db4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8006db8:	4b07      	ldr	r3, [pc, #28]	; (8006dd8 <HAL_RCC_NMI_IRQHandler+0x24>)
 8006dba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dc4:	d105      	bne.n	8006dd2 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8006dc6:	f000 f809 	bl	8006ddc <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8006dca:	4b03      	ldr	r3, [pc, #12]	; (8006dd8 <HAL_RCC_NMI_IRQHandler+0x24>)
 8006dcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006dd0:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 8006dd2:	bf00      	nop
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	58024400 	.word	0x58024400

08006ddc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8006de0:	bf00      	nop
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr
	...

08006dec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006dec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006df0:	b0ca      	sub	sp, #296	; 0x128
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006df8:	2300      	movs	r3, #0
 8006dfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006dfe:	2300      	movs	r3, #0
 8006e00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006e10:	2500      	movs	r5, #0
 8006e12:	ea54 0305 	orrs.w	r3, r4, r5
 8006e16:	d049      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e1e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e22:	d02f      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006e24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e28:	d828      	bhi.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006e2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e2e:	d01a      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006e30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e34:	d822      	bhi.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d003      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006e3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e3e:	d007      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006e40:	e01c      	b.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e42:	4bb8      	ldr	r3, [pc, #736]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e46:	4ab7      	ldr	r2, [pc, #732]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006e4e:	e01a      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e54:	3308      	adds	r3, #8
 8006e56:	2102      	movs	r1, #2
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f001 fce5 	bl	8008828 <RCCEx_PLL2_Config>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006e64:	e00f      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e6a:	3328      	adds	r3, #40	; 0x28
 8006e6c:	2102      	movs	r1, #2
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f001 fd8c 	bl	800898c <RCCEx_PLL3_Config>
 8006e74:	4603      	mov	r3, r0
 8006e76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006e7a:	e004      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e82:	e000      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006e84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10a      	bne.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006e8e:	4ba5      	ldr	r3, [pc, #660]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e92:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e9c:	4aa1      	ldr	r2, [pc, #644]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e9e:	430b      	orrs	r3, r1
 8006ea0:	6513      	str	r3, [r2, #80]	; 0x50
 8006ea2:	e003      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ea4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ea8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006eb8:	f04f 0900 	mov.w	r9, #0
 8006ebc:	ea58 0309 	orrs.w	r3, r8, r9
 8006ec0:	d047      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ec8:	2b04      	cmp	r3, #4
 8006eca:	d82a      	bhi.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006ecc:	a201      	add	r2, pc, #4	; (adr r2, 8006ed4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed2:	bf00      	nop
 8006ed4:	08006ee9 	.word	0x08006ee9
 8006ed8:	08006ef7 	.word	0x08006ef7
 8006edc:	08006f0d 	.word	0x08006f0d
 8006ee0:	08006f2b 	.word	0x08006f2b
 8006ee4:	08006f2b 	.word	0x08006f2b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ee8:	4b8e      	ldr	r3, [pc, #568]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eec:	4a8d      	ldr	r2, [pc, #564]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006eee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ef2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ef4:	e01a      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006efa:	3308      	adds	r3, #8
 8006efc:	2100      	movs	r1, #0
 8006efe:	4618      	mov	r0, r3
 8006f00:	f001 fc92 	bl	8008828 <RCCEx_PLL2_Config>
 8006f04:	4603      	mov	r3, r0
 8006f06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f0a:	e00f      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f10:	3328      	adds	r3, #40	; 0x28
 8006f12:	2100      	movs	r1, #0
 8006f14:	4618      	mov	r0, r3
 8006f16:	f001 fd39 	bl	800898c <RCCEx_PLL3_Config>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f20:	e004      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f28:	e000      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006f2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10a      	bne.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f34:	4b7b      	ldr	r3, [pc, #492]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f38:	f023 0107 	bic.w	r1, r3, #7
 8006f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f42:	4a78      	ldr	r2, [pc, #480]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f44:	430b      	orrs	r3, r1
 8006f46:	6513      	str	r3, [r2, #80]	; 0x50
 8006f48:	e003      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006f5e:	f04f 0b00 	mov.w	fp, #0
 8006f62:	ea5a 030b 	orrs.w	r3, sl, fp
 8006f66:	d04c      	beq.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f72:	d030      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006f74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f78:	d829      	bhi.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006f7a:	2bc0      	cmp	r3, #192	; 0xc0
 8006f7c:	d02d      	beq.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006f7e:	2bc0      	cmp	r3, #192	; 0xc0
 8006f80:	d825      	bhi.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006f82:	2b80      	cmp	r3, #128	; 0x80
 8006f84:	d018      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006f86:	2b80      	cmp	r3, #128	; 0x80
 8006f88:	d821      	bhi.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d002      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006f8e:	2b40      	cmp	r3, #64	; 0x40
 8006f90:	d007      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006f92:	e01c      	b.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f94:	4b63      	ldr	r3, [pc, #396]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f98:	4a62      	ldr	r2, [pc, #392]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006fa0:	e01c      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fa6:	3308      	adds	r3, #8
 8006fa8:	2100      	movs	r1, #0
 8006faa:	4618      	mov	r0, r3
 8006fac:	f001 fc3c 	bl	8008828 <RCCEx_PLL2_Config>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006fb6:	e011      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fbc:	3328      	adds	r3, #40	; 0x28
 8006fbe:	2100      	movs	r1, #0
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f001 fce3 	bl	800898c <RCCEx_PLL3_Config>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006fcc:	e006      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006fd4:	e002      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006fd6:	bf00      	nop
 8006fd8:	e000      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006fda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fdc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d10a      	bne.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006fe4:	4b4f      	ldr	r3, [pc, #316]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fe8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ff2:	4a4c      	ldr	r2, [pc, #304]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ff4:	430b      	orrs	r3, r1
 8006ff6:	6513      	str	r3, [r2, #80]	; 0x50
 8006ff8:	e003      	b.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ffa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ffe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007002:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800700e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007012:	2300      	movs	r3, #0
 8007014:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007018:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800701c:	460b      	mov	r3, r1
 800701e:	4313      	orrs	r3, r2
 8007020:	d053      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007026:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800702a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800702e:	d035      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007030:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007034:	d82e      	bhi.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007036:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800703a:	d031      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800703c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007040:	d828      	bhi.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007042:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007046:	d01a      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007048:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800704c:	d822      	bhi.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800704e:	2b00      	cmp	r3, #0
 8007050:	d003      	beq.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007052:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007056:	d007      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007058:	e01c      	b.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800705a:	4b32      	ldr	r3, [pc, #200]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800705c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705e:	4a31      	ldr	r2, [pc, #196]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007064:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007066:	e01c      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007068:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800706c:	3308      	adds	r3, #8
 800706e:	2100      	movs	r1, #0
 8007070:	4618      	mov	r0, r3
 8007072:	f001 fbd9 	bl	8008828 <RCCEx_PLL2_Config>
 8007076:	4603      	mov	r3, r0
 8007078:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800707c:	e011      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800707e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007082:	3328      	adds	r3, #40	; 0x28
 8007084:	2100      	movs	r1, #0
 8007086:	4618      	mov	r0, r3
 8007088:	f001 fc80 	bl	800898c <RCCEx_PLL3_Config>
 800708c:	4603      	mov	r3, r0
 800708e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007092:	e006      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800709a:	e002      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800709c:	bf00      	nop
 800709e:	e000      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80070a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10b      	bne.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80070aa:	4b1e      	ldr	r3, [pc, #120]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ae:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80070b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80070ba:	4a1a      	ldr	r2, [pc, #104]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070bc:	430b      	orrs	r3, r1
 80070be:	6593      	str	r3, [r2, #88]	; 0x58
 80070c0:	e003      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80070ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80070d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80070da:	2300      	movs	r3, #0
 80070dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80070e0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80070e4:	460b      	mov	r3, r1
 80070e6:	4313      	orrs	r3, r2
 80070e8:	d056      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80070ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80070f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80070f6:	d038      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80070f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80070fc:	d831      	bhi.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80070fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007102:	d034      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007104:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007108:	d82b      	bhi.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800710a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800710e:	d01d      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007110:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007114:	d825      	bhi.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007116:	2b00      	cmp	r3, #0
 8007118:	d006      	beq.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800711a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800711e:	d00a      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007120:	e01f      	b.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007122:	bf00      	nop
 8007124:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007128:	4ba2      	ldr	r3, [pc, #648]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800712a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712c:	4aa1      	ldr	r2, [pc, #644]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800712e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007132:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007134:	e01c      	b.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007136:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800713a:	3308      	adds	r3, #8
 800713c:	2100      	movs	r1, #0
 800713e:	4618      	mov	r0, r3
 8007140:	f001 fb72 	bl	8008828 <RCCEx_PLL2_Config>
 8007144:	4603      	mov	r3, r0
 8007146:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800714a:	e011      	b.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800714c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007150:	3328      	adds	r3, #40	; 0x28
 8007152:	2100      	movs	r1, #0
 8007154:	4618      	mov	r0, r3
 8007156:	f001 fc19 	bl	800898c <RCCEx_PLL3_Config>
 800715a:	4603      	mov	r3, r0
 800715c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007160:	e006      	b.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007168:	e002      	b.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800716a:	bf00      	nop
 800716c:	e000      	b.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800716e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007170:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007174:	2b00      	cmp	r3, #0
 8007176:	d10b      	bne.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007178:	4b8e      	ldr	r3, [pc, #568]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800717a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800717c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007180:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007184:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007188:	4a8a      	ldr	r2, [pc, #552]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800718a:	430b      	orrs	r3, r1
 800718c:	6593      	str	r3, [r2, #88]	; 0x58
 800718e:	e003      	b.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007190:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007194:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007198:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800719c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80071a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80071a8:	2300      	movs	r3, #0
 80071aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80071ae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80071b2:	460b      	mov	r3, r1
 80071b4:	4313      	orrs	r3, r2
 80071b6:	d03a      	beq.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80071b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071be:	2b30      	cmp	r3, #48	; 0x30
 80071c0:	d01f      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80071c2:	2b30      	cmp	r3, #48	; 0x30
 80071c4:	d819      	bhi.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80071c6:	2b20      	cmp	r3, #32
 80071c8:	d00c      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80071ca:	2b20      	cmp	r3, #32
 80071cc:	d815      	bhi.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d019      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80071d2:	2b10      	cmp	r3, #16
 80071d4:	d111      	bne.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071d6:	4b77      	ldr	r3, [pc, #476]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071da:	4a76      	ldr	r2, [pc, #472]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80071e2:	e011      	b.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80071e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071e8:	3308      	adds	r3, #8
 80071ea:	2102      	movs	r1, #2
 80071ec:	4618      	mov	r0, r3
 80071ee:	f001 fb1b 	bl	8008828 <RCCEx_PLL2_Config>
 80071f2:	4603      	mov	r3, r0
 80071f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80071f8:	e006      	b.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007200:	e002      	b.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007202:	bf00      	nop
 8007204:	e000      	b.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007206:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007208:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800720c:	2b00      	cmp	r3, #0
 800720e:	d10a      	bne.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007210:	4b68      	ldr	r3, [pc, #416]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007214:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007218:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800721c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800721e:	4a65      	ldr	r2, [pc, #404]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007220:	430b      	orrs	r3, r1
 8007222:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007224:	e003      	b.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007226:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800722a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800722e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007236:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800723a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800723e:	2300      	movs	r3, #0
 8007240:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007244:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007248:	460b      	mov	r3, r1
 800724a:	4313      	orrs	r3, r2
 800724c:	d051      	beq.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800724e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007254:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007258:	d035      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800725a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800725e:	d82e      	bhi.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007260:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007264:	d031      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007266:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800726a:	d828      	bhi.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800726c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007270:	d01a      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007272:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007276:	d822      	bhi.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007278:	2b00      	cmp	r3, #0
 800727a:	d003      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800727c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007280:	d007      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007282:	e01c      	b.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007284:	4b4b      	ldr	r3, [pc, #300]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007288:	4a4a      	ldr	r2, [pc, #296]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800728a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800728e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007290:	e01c      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007296:	3308      	adds	r3, #8
 8007298:	2100      	movs	r1, #0
 800729a:	4618      	mov	r0, r3
 800729c:	f001 fac4 	bl	8008828 <RCCEx_PLL2_Config>
 80072a0:	4603      	mov	r3, r0
 80072a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80072a6:	e011      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80072a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072ac:	3328      	adds	r3, #40	; 0x28
 80072ae:	2100      	movs	r1, #0
 80072b0:	4618      	mov	r0, r3
 80072b2:	f001 fb6b 	bl	800898c <RCCEx_PLL3_Config>
 80072b6:	4603      	mov	r3, r0
 80072b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80072bc:	e006      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80072c4:	e002      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80072c6:	bf00      	nop
 80072c8:	e000      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80072ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10a      	bne.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80072d4:	4b37      	ldr	r3, [pc, #220]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072d8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80072dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072e2:	4a34      	ldr	r2, [pc, #208]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072e4:	430b      	orrs	r3, r1
 80072e6:	6513      	str	r3, [r2, #80]	; 0x50
 80072e8:	e003      	b.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80072f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fa:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80072fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007302:	2300      	movs	r3, #0
 8007304:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007308:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800730c:	460b      	mov	r3, r1
 800730e:	4313      	orrs	r3, r2
 8007310:	d056      	beq.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007316:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007318:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800731c:	d033      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800731e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007322:	d82c      	bhi.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007324:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007328:	d02f      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800732a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800732e:	d826      	bhi.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007330:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007334:	d02b      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007336:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800733a:	d820      	bhi.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800733c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007340:	d012      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007342:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007346:	d81a      	bhi.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007348:	2b00      	cmp	r3, #0
 800734a:	d022      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800734c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007350:	d115      	bne.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007356:	3308      	adds	r3, #8
 8007358:	2101      	movs	r1, #1
 800735a:	4618      	mov	r0, r3
 800735c:	f001 fa64 	bl	8008828 <RCCEx_PLL2_Config>
 8007360:	4603      	mov	r3, r0
 8007362:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007366:	e015      	b.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007368:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800736c:	3328      	adds	r3, #40	; 0x28
 800736e:	2101      	movs	r1, #1
 8007370:	4618      	mov	r0, r3
 8007372:	f001 fb0b 	bl	800898c <RCCEx_PLL3_Config>
 8007376:	4603      	mov	r3, r0
 8007378:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800737c:	e00a      	b.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007384:	e006      	b.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007386:	bf00      	nop
 8007388:	e004      	b.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800738a:	bf00      	nop
 800738c:	e002      	b.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800738e:	bf00      	nop
 8007390:	e000      	b.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007392:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007394:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007398:	2b00      	cmp	r3, #0
 800739a:	d10d      	bne.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800739c:	4b05      	ldr	r3, [pc, #20]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800739e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073a0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80073a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073aa:	4a02      	ldr	r2, [pc, #8]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073ac:	430b      	orrs	r3, r1
 80073ae:	6513      	str	r3, [r2, #80]	; 0x50
 80073b0:	e006      	b.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80073b2:	bf00      	nop
 80073b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80073c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80073cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80073d0:	2300      	movs	r3, #0
 80073d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073d6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80073da:	460b      	mov	r3, r1
 80073dc:	4313      	orrs	r3, r2
 80073de:	d055      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80073e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80073e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073ec:	d033      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80073ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073f2:	d82c      	bhi.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80073f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073f8:	d02f      	beq.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80073fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073fe:	d826      	bhi.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007400:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007404:	d02b      	beq.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007406:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800740a:	d820      	bhi.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800740c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007410:	d012      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007412:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007416:	d81a      	bhi.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007418:	2b00      	cmp	r3, #0
 800741a:	d022      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800741c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007420:	d115      	bne.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007422:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007426:	3308      	adds	r3, #8
 8007428:	2101      	movs	r1, #1
 800742a:	4618      	mov	r0, r3
 800742c:	f001 f9fc 	bl	8008828 <RCCEx_PLL2_Config>
 8007430:	4603      	mov	r3, r0
 8007432:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007436:	e015      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007438:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800743c:	3328      	adds	r3, #40	; 0x28
 800743e:	2101      	movs	r1, #1
 8007440:	4618      	mov	r0, r3
 8007442:	f001 faa3 	bl	800898c <RCCEx_PLL3_Config>
 8007446:	4603      	mov	r3, r0
 8007448:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800744c:	e00a      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007454:	e006      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007456:	bf00      	nop
 8007458:	e004      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800745a:	bf00      	nop
 800745c:	e002      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800745e:	bf00      	nop
 8007460:	e000      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007462:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007464:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007468:	2b00      	cmp	r3, #0
 800746a:	d10b      	bne.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800746c:	4ba3      	ldr	r3, [pc, #652]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800746e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007470:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007474:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007478:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800747c:	4a9f      	ldr	r2, [pc, #636]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800747e:	430b      	orrs	r3, r1
 8007480:	6593      	str	r3, [r2, #88]	; 0x58
 8007482:	e003      	b.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007484:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007488:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800748c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007494:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007498:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800749c:	2300      	movs	r3, #0
 800749e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80074a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80074a6:	460b      	mov	r3, r1
 80074a8:	4313      	orrs	r3, r2
 80074aa:	d037      	beq.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80074ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074b6:	d00e      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80074b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074bc:	d816      	bhi.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x700>
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d018      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80074c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074c6:	d111      	bne.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074c8:	4b8c      	ldr	r3, [pc, #560]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074cc:	4a8b      	ldr	r2, [pc, #556]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80074d4:	e00f      	b.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074da:	3308      	adds	r3, #8
 80074dc:	2101      	movs	r1, #1
 80074de:	4618      	mov	r0, r3
 80074e0:	f001 f9a2 	bl	8008828 <RCCEx_PLL2_Config>
 80074e4:	4603      	mov	r3, r0
 80074e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80074ea:	e004      	b.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80074f2:	e000      	b.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80074f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10a      	bne.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80074fe:	4b7f      	ldr	r3, [pc, #508]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007502:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800750a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800750c:	4a7b      	ldr	r2, [pc, #492]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800750e:	430b      	orrs	r3, r1
 8007510:	6513      	str	r3, [r2, #80]	; 0x50
 8007512:	e003      	b.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007514:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007518:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800751c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007524:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007528:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800752c:	2300      	movs	r3, #0
 800752e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007532:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8007536:	460b      	mov	r3, r1
 8007538:	4313      	orrs	r3, r2
 800753a:	d039      	beq.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800753c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007542:	2b03      	cmp	r3, #3
 8007544:	d81c      	bhi.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007546:	a201      	add	r2, pc, #4	; (adr r2, 800754c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800754c:	08007589 	.word	0x08007589
 8007550:	0800755d 	.word	0x0800755d
 8007554:	0800756b 	.word	0x0800756b
 8007558:	08007589 	.word	0x08007589
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800755c:	4b67      	ldr	r3, [pc, #412]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800755e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007560:	4a66      	ldr	r2, [pc, #408]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007566:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007568:	e00f      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800756a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800756e:	3308      	adds	r3, #8
 8007570:	2102      	movs	r1, #2
 8007572:	4618      	mov	r0, r3
 8007574:	f001 f958 	bl	8008828 <RCCEx_PLL2_Config>
 8007578:	4603      	mov	r3, r0
 800757a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800757e:	e004      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007586:	e000      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800758a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10a      	bne.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007592:	4b5a      	ldr	r3, [pc, #360]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007596:	f023 0103 	bic.w	r1, r3, #3
 800759a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800759e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075a0:	4a56      	ldr	r2, [pc, #344]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075a2:	430b      	orrs	r3, r1
 80075a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80075a6:	e003      	b.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80075b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80075bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80075c0:	2300      	movs	r3, #0
 80075c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80075c6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80075ca:	460b      	mov	r3, r1
 80075cc:	4313      	orrs	r3, r2
 80075ce:	f000 809f 	beq.w	8007710 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075d2:	4b4b      	ldr	r3, [pc, #300]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a4a      	ldr	r2, [pc, #296]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80075d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80075de:	f7fb f993 	bl	8002908 <HAL_GetTick>
 80075e2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075e6:	e00b      	b.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075e8:	f7fb f98e 	bl	8002908 <HAL_GetTick>
 80075ec:	4602      	mov	r2, r0
 80075ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	2b64      	cmp	r3, #100	; 0x64
 80075f6:	d903      	bls.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80075f8:	2303      	movs	r3, #3
 80075fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80075fe:	e005      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007600:	4b3f      	ldr	r3, [pc, #252]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007608:	2b00      	cmp	r3, #0
 800760a:	d0ed      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800760c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007610:	2b00      	cmp	r3, #0
 8007612:	d179      	bne.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007614:	4b39      	ldr	r3, [pc, #228]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007616:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007618:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800761c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007620:	4053      	eors	r3, r2
 8007622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007626:	2b00      	cmp	r3, #0
 8007628:	d015      	beq.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800762a:	4b34      	ldr	r3, [pc, #208]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800762c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800762e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007632:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007636:	4b31      	ldr	r3, [pc, #196]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800763a:	4a30      	ldr	r2, [pc, #192]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800763c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007640:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007642:	4b2e      	ldr	r3, [pc, #184]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007646:	4a2d      	ldr	r2, [pc, #180]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800764c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800764e:	4a2b      	ldr	r2, [pc, #172]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007650:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007654:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800765a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800765e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007662:	d118      	bne.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007664:	f7fb f950 	bl	8002908 <HAL_GetTick>
 8007668:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800766c:	e00d      	b.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800766e:	f7fb f94b 	bl	8002908 <HAL_GetTick>
 8007672:	4602      	mov	r2, r0
 8007674:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007678:	1ad2      	subs	r2, r2, r3
 800767a:	f241 3388 	movw	r3, #5000	; 0x1388
 800767e:	429a      	cmp	r2, r3
 8007680:	d903      	bls.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007682:	2303      	movs	r3, #3
 8007684:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8007688:	e005      	b.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800768a:	4b1c      	ldr	r3, [pc, #112]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800768c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800768e:	f003 0302 	and.w	r3, r3, #2
 8007692:	2b00      	cmp	r3, #0
 8007694:	d0eb      	beq.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007696:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800769a:	2b00      	cmp	r3, #0
 800769c:	d129      	bne.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800769e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80076a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076ae:	d10e      	bne.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80076b0:	4b12      	ldr	r3, [pc, #72]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076b2:	691b      	ldr	r3, [r3, #16]
 80076b4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80076b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80076c0:	091a      	lsrs	r2, r3, #4
 80076c2:	4b10      	ldr	r3, [pc, #64]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80076c4:	4013      	ands	r3, r2
 80076c6:	4a0d      	ldr	r2, [pc, #52]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076c8:	430b      	orrs	r3, r1
 80076ca:	6113      	str	r3, [r2, #16]
 80076cc:	e005      	b.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80076ce:	4b0b      	ldr	r3, [pc, #44]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	4a0a      	ldr	r2, [pc, #40]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076d4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80076d8:	6113      	str	r3, [r2, #16]
 80076da:	4b08      	ldr	r3, [pc, #32]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076dc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80076de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80076e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076ea:	4a04      	ldr	r2, [pc, #16]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076ec:	430b      	orrs	r3, r1
 80076ee:	6713      	str	r3, [r2, #112]	; 0x70
 80076f0:	e00e      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80076f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80076fa:	e009      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80076fc:	58024400 	.word	0x58024400
 8007700:	58024800 	.word	0x58024800
 8007704:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007708:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800770c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007710:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007718:	f002 0301 	and.w	r3, r2, #1
 800771c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007720:	2300      	movs	r3, #0
 8007722:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007726:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800772a:	460b      	mov	r3, r1
 800772c:	4313      	orrs	r3, r2
 800772e:	f000 8089 	beq.w	8007844 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007736:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007738:	2b28      	cmp	r3, #40	; 0x28
 800773a:	d86b      	bhi.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800773c:	a201      	add	r2, pc, #4	; (adr r2, 8007744 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800773e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007742:	bf00      	nop
 8007744:	0800781d 	.word	0x0800781d
 8007748:	08007815 	.word	0x08007815
 800774c:	08007815 	.word	0x08007815
 8007750:	08007815 	.word	0x08007815
 8007754:	08007815 	.word	0x08007815
 8007758:	08007815 	.word	0x08007815
 800775c:	08007815 	.word	0x08007815
 8007760:	08007815 	.word	0x08007815
 8007764:	080077e9 	.word	0x080077e9
 8007768:	08007815 	.word	0x08007815
 800776c:	08007815 	.word	0x08007815
 8007770:	08007815 	.word	0x08007815
 8007774:	08007815 	.word	0x08007815
 8007778:	08007815 	.word	0x08007815
 800777c:	08007815 	.word	0x08007815
 8007780:	08007815 	.word	0x08007815
 8007784:	080077ff 	.word	0x080077ff
 8007788:	08007815 	.word	0x08007815
 800778c:	08007815 	.word	0x08007815
 8007790:	08007815 	.word	0x08007815
 8007794:	08007815 	.word	0x08007815
 8007798:	08007815 	.word	0x08007815
 800779c:	08007815 	.word	0x08007815
 80077a0:	08007815 	.word	0x08007815
 80077a4:	0800781d 	.word	0x0800781d
 80077a8:	08007815 	.word	0x08007815
 80077ac:	08007815 	.word	0x08007815
 80077b0:	08007815 	.word	0x08007815
 80077b4:	08007815 	.word	0x08007815
 80077b8:	08007815 	.word	0x08007815
 80077bc:	08007815 	.word	0x08007815
 80077c0:	08007815 	.word	0x08007815
 80077c4:	0800781d 	.word	0x0800781d
 80077c8:	08007815 	.word	0x08007815
 80077cc:	08007815 	.word	0x08007815
 80077d0:	08007815 	.word	0x08007815
 80077d4:	08007815 	.word	0x08007815
 80077d8:	08007815 	.word	0x08007815
 80077dc:	08007815 	.word	0x08007815
 80077e0:	08007815 	.word	0x08007815
 80077e4:	0800781d 	.word	0x0800781d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077ec:	3308      	adds	r3, #8
 80077ee:	2101      	movs	r1, #1
 80077f0:	4618      	mov	r0, r3
 80077f2:	f001 f819 	bl	8008828 <RCCEx_PLL2_Config>
 80077f6:	4603      	mov	r3, r0
 80077f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80077fc:	e00f      	b.n	800781e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007802:	3328      	adds	r3, #40	; 0x28
 8007804:	2101      	movs	r1, #1
 8007806:	4618      	mov	r0, r3
 8007808:	f001 f8c0 	bl	800898c <RCCEx_PLL3_Config>
 800780c:	4603      	mov	r3, r0
 800780e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007812:	e004      	b.n	800781e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800781a:	e000      	b.n	800781e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800781c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800781e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007822:	2b00      	cmp	r3, #0
 8007824:	d10a      	bne.n	800783c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007826:	4bbf      	ldr	r3, [pc, #764]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800782a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800782e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007832:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007834:	4abb      	ldr	r2, [pc, #748]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007836:	430b      	orrs	r3, r1
 8007838:	6553      	str	r3, [r2, #84]	; 0x54
 800783a:	e003      	b.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800783c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007840:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007844:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784c:	f002 0302 	and.w	r3, r2, #2
 8007850:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007854:	2300      	movs	r3, #0
 8007856:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800785a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800785e:	460b      	mov	r3, r1
 8007860:	4313      	orrs	r3, r2
 8007862:	d041      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007868:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800786a:	2b05      	cmp	r3, #5
 800786c:	d824      	bhi.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800786e:	a201      	add	r2, pc, #4	; (adr r2, 8007874 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007874:	080078c1 	.word	0x080078c1
 8007878:	0800788d 	.word	0x0800788d
 800787c:	080078a3 	.word	0x080078a3
 8007880:	080078c1 	.word	0x080078c1
 8007884:	080078c1 	.word	0x080078c1
 8007888:	080078c1 	.word	0x080078c1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800788c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007890:	3308      	adds	r3, #8
 8007892:	2101      	movs	r1, #1
 8007894:	4618      	mov	r0, r3
 8007896:	f000 ffc7 	bl	8008828 <RCCEx_PLL2_Config>
 800789a:	4603      	mov	r3, r0
 800789c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80078a0:	e00f      	b.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80078a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078a6:	3328      	adds	r3, #40	; 0x28
 80078a8:	2101      	movs	r1, #1
 80078aa:	4618      	mov	r0, r3
 80078ac:	f001 f86e 	bl	800898c <RCCEx_PLL3_Config>
 80078b0:	4603      	mov	r3, r0
 80078b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80078b6:	e004      	b.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80078be:	e000      	b.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80078c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d10a      	bne.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80078ca:	4b96      	ldr	r3, [pc, #600]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ce:	f023 0107 	bic.w	r1, r3, #7
 80078d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078d8:	4a92      	ldr	r2, [pc, #584]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078da:	430b      	orrs	r3, r1
 80078dc:	6553      	str	r3, [r2, #84]	; 0x54
 80078de:	e003      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80078e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f0:	f002 0304 	and.w	r3, r2, #4
 80078f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078f8:	2300      	movs	r3, #0
 80078fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078fe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007902:	460b      	mov	r3, r1
 8007904:	4313      	orrs	r3, r2
 8007906:	d044      	beq.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800790c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007910:	2b05      	cmp	r3, #5
 8007912:	d825      	bhi.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007914:	a201      	add	r2, pc, #4	; (adr r2, 800791c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800791a:	bf00      	nop
 800791c:	08007969 	.word	0x08007969
 8007920:	08007935 	.word	0x08007935
 8007924:	0800794b 	.word	0x0800794b
 8007928:	08007969 	.word	0x08007969
 800792c:	08007969 	.word	0x08007969
 8007930:	08007969 	.word	0x08007969
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007938:	3308      	adds	r3, #8
 800793a:	2101      	movs	r1, #1
 800793c:	4618      	mov	r0, r3
 800793e:	f000 ff73 	bl	8008828 <RCCEx_PLL2_Config>
 8007942:	4603      	mov	r3, r0
 8007944:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007948:	e00f      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800794a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800794e:	3328      	adds	r3, #40	; 0x28
 8007950:	2101      	movs	r1, #1
 8007952:	4618      	mov	r0, r3
 8007954:	f001 f81a 	bl	800898c <RCCEx_PLL3_Config>
 8007958:	4603      	mov	r3, r0
 800795a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800795e:	e004      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007966:	e000      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007968:	bf00      	nop
    }

    if (ret == HAL_OK)
 800796a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10b      	bne.n	800798a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007972:	4b6c      	ldr	r3, [pc, #432]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007976:	f023 0107 	bic.w	r1, r3, #7
 800797a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800797e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007982:	4a68      	ldr	r2, [pc, #416]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007984:	430b      	orrs	r3, r1
 8007986:	6593      	str	r3, [r2, #88]	; 0x58
 8007988:	e003      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800798a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800798e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799a:	f002 0320 	and.w	r3, r2, #32
 800799e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80079a2:	2300      	movs	r3, #0
 80079a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80079a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80079ac:	460b      	mov	r3, r1
 80079ae:	4313      	orrs	r3, r2
 80079b0:	d055      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80079b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079be:	d033      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80079c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079c4:	d82c      	bhi.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80079c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079ca:	d02f      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80079cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079d0:	d826      	bhi.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80079d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80079d6:	d02b      	beq.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80079d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80079dc:	d820      	bhi.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80079de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079e2:	d012      	beq.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80079e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079e8:	d81a      	bhi.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d022      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80079ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079f2:	d115      	bne.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079f8:	3308      	adds	r3, #8
 80079fa:	2100      	movs	r1, #0
 80079fc:	4618      	mov	r0, r3
 80079fe:	f000 ff13 	bl	8008828 <RCCEx_PLL2_Config>
 8007a02:	4603      	mov	r3, r0
 8007a04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007a08:	e015      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a0e:	3328      	adds	r3, #40	; 0x28
 8007a10:	2102      	movs	r1, #2
 8007a12:	4618      	mov	r0, r3
 8007a14:	f000 ffba 	bl	800898c <RCCEx_PLL3_Config>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007a1e:	e00a      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a26:	e006      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007a28:	bf00      	nop
 8007a2a:	e004      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007a2c:	bf00      	nop
 8007a2e:	e002      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007a30:	bf00      	nop
 8007a32:	e000      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007a34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d10b      	bne.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a3e:	4b39      	ldr	r3, [pc, #228]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a42:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a4e:	4a35      	ldr	r2, [pc, #212]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a50:	430b      	orrs	r3, r1
 8007a52:	6553      	str	r3, [r2, #84]	; 0x54
 8007a54:	e003      	b.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a66:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007a6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007a6e:	2300      	movs	r3, #0
 8007a70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007a74:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007a78:	460b      	mov	r3, r1
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	d058      	beq.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a86:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007a8a:	d033      	beq.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007a8c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007a90:	d82c      	bhi.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a96:	d02f      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a9c:	d826      	bhi.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007a9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007aa2:	d02b      	beq.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007aa4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007aa8:	d820      	bhi.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007aaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007aae:	d012      	beq.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007ab0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ab4:	d81a      	bhi.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d022      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007abe:	d115      	bne.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ac4:	3308      	adds	r3, #8
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f000 fead 	bl	8008828 <RCCEx_PLL2_Config>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007ad4:	e015      	b.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ada:	3328      	adds	r3, #40	; 0x28
 8007adc:	2102      	movs	r1, #2
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f000 ff54 	bl	800898c <RCCEx_PLL3_Config>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007aea:	e00a      	b.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007af2:	e006      	b.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007af4:	bf00      	nop
 8007af6:	e004      	b.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007af8:	bf00      	nop
 8007afa:	e002      	b.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007afc:	bf00      	nop
 8007afe:	e000      	b.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007b00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d10e      	bne.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007b0a:	4b06      	ldr	r3, [pc, #24]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b0e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8007b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b1a:	4a02      	ldr	r2, [pc, #8]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b1c:	430b      	orrs	r3, r1
 8007b1e:	6593      	str	r3, [r2, #88]	; 0x58
 8007b20:	e006      	b.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007b22:	bf00      	nop
 8007b24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b38:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007b3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007b40:	2300      	movs	r3, #0
 8007b42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b46:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	d055      	beq.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007b58:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007b5c:	d033      	beq.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007b5e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007b62:	d82c      	bhi.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b68:	d02f      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007b6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b6e:	d826      	bhi.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007b70:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007b74:	d02b      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007b76:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007b7a:	d820      	bhi.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007b7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b80:	d012      	beq.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007b82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b86:	d81a      	bhi.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d022      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007b8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b90:	d115      	bne.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b96:	3308      	adds	r3, #8
 8007b98:	2100      	movs	r1, #0
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f000 fe44 	bl	8008828 <RCCEx_PLL2_Config>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007ba6:	e015      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bac:	3328      	adds	r3, #40	; 0x28
 8007bae:	2102      	movs	r1, #2
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f000 feeb 	bl	800898c <RCCEx_PLL3_Config>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007bbc:	e00a      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007bc4:	e006      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007bc6:	bf00      	nop
 8007bc8:	e004      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007bca:	bf00      	nop
 8007bcc:	e002      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007bce:	bf00      	nop
 8007bd0:	e000      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007bd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d10b      	bne.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007bdc:	4ba1      	ldr	r3, [pc, #644]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007be0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007be8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007bec:	4a9d      	ldr	r2, [pc, #628]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bee:	430b      	orrs	r3, r1
 8007bf0:	6593      	str	r3, [r2, #88]	; 0x58
 8007bf2:	e003      	b.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bf4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bf8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c04:	f002 0308 	and.w	r3, r2, #8
 8007c08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007c12:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007c16:	460b      	mov	r3, r1
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	d01e      	beq.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c28:	d10c      	bne.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c2e:	3328      	adds	r3, #40	; 0x28
 8007c30:	2102      	movs	r1, #2
 8007c32:	4618      	mov	r0, r3
 8007c34:	f000 feaa 	bl	800898c <RCCEx_PLL3_Config>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d002      	beq.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007c44:	4b87      	ldr	r3, [pc, #540]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c48:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c54:	4a83      	ldr	r2, [pc, #524]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c56:	430b      	orrs	r3, r1
 8007c58:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c62:	f002 0310 	and.w	r3, r2, #16
 8007c66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007c70:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007c74:	460b      	mov	r3, r1
 8007c76:	4313      	orrs	r3, r2
 8007c78:	d01e      	beq.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c86:	d10c      	bne.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c8c:	3328      	adds	r3, #40	; 0x28
 8007c8e:	2102      	movs	r1, #2
 8007c90:	4618      	mov	r0, r3
 8007c92:	f000 fe7b 	bl	800898c <RCCEx_PLL3_Config>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d002      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007ca2:	4b70      	ldr	r3, [pc, #448]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ca6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007cb2:	4a6c      	ldr	r2, [pc, #432]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cb4:	430b      	orrs	r3, r1
 8007cb6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007cc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007cc8:	2300      	movs	r3, #0
 8007cca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007cce:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	d03e      	beq.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cdc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007ce0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ce4:	d022      	beq.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007ce6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cea:	d81b      	bhi.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d003      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cf4:	d00b      	beq.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007cf6:	e015      	b.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cfc:	3308      	adds	r3, #8
 8007cfe:	2100      	movs	r1, #0
 8007d00:	4618      	mov	r0, r3
 8007d02:	f000 fd91 	bl	8008828 <RCCEx_PLL2_Config>
 8007d06:	4603      	mov	r3, r0
 8007d08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007d0c:	e00f      	b.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d12:	3328      	adds	r3, #40	; 0x28
 8007d14:	2102      	movs	r1, #2
 8007d16:	4618      	mov	r0, r3
 8007d18:	f000 fe38 	bl	800898c <RCCEx_PLL3_Config>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007d22:	e004      	b.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d2a:	e000      	b.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007d2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d10b      	bne.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d36:	4b4b      	ldr	r3, [pc, #300]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d3a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007d46:	4a47      	ldr	r2, [pc, #284]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d48:	430b      	orrs	r3, r1
 8007d4a:	6593      	str	r3, [r2, #88]	; 0x58
 8007d4c:	e003      	b.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007d62:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d64:	2300      	movs	r3, #0
 8007d66:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007d68:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	d03b      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d7e:	d01f      	beq.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007d80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d84:	d818      	bhi.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007d86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d8a:	d003      	beq.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007d8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d90:	d007      	beq.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007d92:	e011      	b.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d94:	4b33      	ldr	r3, [pc, #204]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d98:	4a32      	ldr	r2, [pc, #200]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007da0:	e00f      	b.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007da6:	3328      	adds	r3, #40	; 0x28
 8007da8:	2101      	movs	r1, #1
 8007daa:	4618      	mov	r0, r3
 8007dac:	f000 fdee 	bl	800898c <RCCEx_PLL3_Config>
 8007db0:	4603      	mov	r3, r0
 8007db2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007db6:	e004      	b.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007dbe:	e000      	b.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007dc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d10b      	bne.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007dca:	4b26      	ldr	r3, [pc, #152]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dce:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dda:	4a22      	ldr	r2, [pc, #136]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ddc:	430b      	orrs	r3, r1
 8007dde:	6553      	str	r3, [r2, #84]	; 0x54
 8007de0:	e003      	b.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007de2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007de6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007df6:	673b      	str	r3, [r7, #112]	; 0x70
 8007df8:	2300      	movs	r3, #0
 8007dfa:	677b      	str	r3, [r7, #116]	; 0x74
 8007dfc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007e00:	460b      	mov	r3, r1
 8007e02:	4313      	orrs	r3, r2
 8007e04:	d034      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d003      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e14:	d007      	beq.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007e16:	e011      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e18:	4b12      	ldr	r3, [pc, #72]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1c:	4a11      	ldr	r2, [pc, #68]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007e24:	e00e      	b.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e2a:	3308      	adds	r3, #8
 8007e2c:	2102      	movs	r1, #2
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f000 fcfa 	bl	8008828 <RCCEx_PLL2_Config>
 8007e34:	4603      	mov	r3, r0
 8007e36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007e3a:	e003      	b.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d10d      	bne.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007e4c:	4b05      	ldr	r3, [pc, #20]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e5a:	4a02      	ldr	r2, [pc, #8]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e5c:	430b      	orrs	r3, r1
 8007e5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007e60:	e006      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007e62:	bf00      	nop
 8007e64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e78:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007e7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e7e:	2300      	movs	r3, #0
 8007e80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e82:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007e86:	460b      	mov	r3, r1
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	d00c      	beq.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e90:	3328      	adds	r3, #40	; 0x28
 8007e92:	2102      	movs	r1, #2
 8007e94:	4618      	mov	r0, r3
 8007e96:	f000 fd79 	bl	800898c <RCCEx_PLL3_Config>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d002      	beq.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eae:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007eb2:	663b      	str	r3, [r7, #96]	; 0x60
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	667b      	str	r3, [r7, #100]	; 0x64
 8007eb8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	d038      	beq.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007eca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ece:	d018      	beq.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007ed0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ed4:	d811      	bhi.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007ed6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007eda:	d014      	beq.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007edc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ee0:	d80b      	bhi.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d011      	beq.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007ee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eea:	d106      	bne.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007eec:	4bc3      	ldr	r3, [pc, #780]	; (80081fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef0:	4ac2      	ldr	r2, [pc, #776]	; (80081fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ef2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ef6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007ef8:	e008      	b.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007f00:	e004      	b.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007f02:	bf00      	nop
 8007f04:	e002      	b.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007f06:	bf00      	nop
 8007f08:	e000      	b.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007f0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d10b      	bne.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f14:	4bb9      	ldr	r3, [pc, #740]	; (80081fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f18:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f24:	4ab5      	ldr	r2, [pc, #724]	; (80081fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f26:	430b      	orrs	r3, r1
 8007f28:	6553      	str	r3, [r2, #84]	; 0x54
 8007f2a:	e003      	b.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007f40:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f42:	2300      	movs	r3, #0
 8007f44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f46:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	d009      	beq.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007f50:	4baa      	ldr	r3, [pc, #680]	; (80081fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f54:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f5e:	4aa7      	ldr	r2, [pc, #668]	; (80081fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f60:	430b      	orrs	r3, r1
 8007f62:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007f70:	653b      	str	r3, [r7, #80]	; 0x50
 8007f72:	2300      	movs	r3, #0
 8007f74:	657b      	str	r3, [r7, #84]	; 0x54
 8007f76:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	d00a      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007f80:	4b9e      	ldr	r3, [pc, #632]	; (80081fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f8c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007f90:	4a9a      	ldr	r2, [pc, #616]	; (80081fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f92:	430b      	orrs	r3, r1
 8007f94:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007fa2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fa8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007fac:	460b      	mov	r3, r1
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	d009      	beq.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007fb2:	4b92      	ldr	r3, [pc, #584]	; (80081fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fb6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fc0:	4a8e      	ldr	r2, [pc, #568]	; (80081fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fc2:	430b      	orrs	r3, r1
 8007fc4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fce:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007fd2:	643b      	str	r3, [r7, #64]	; 0x40
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	647b      	str	r3, [r7, #68]	; 0x44
 8007fd8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007fdc:	460b      	mov	r3, r1
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	d00e      	beq.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007fe2:	4b86      	ldr	r3, [pc, #536]	; (80081fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	4a85      	ldr	r2, [pc, #532]	; (80081fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fe8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007fec:	6113      	str	r3, [r2, #16]
 8007fee:	4b83      	ldr	r3, [pc, #524]	; (80081fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ff0:	6919      	ldr	r1, [r3, #16]
 8007ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ff6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007ffa:	4a80      	ldr	r2, [pc, #512]	; (80081fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ffc:	430b      	orrs	r3, r1
 8007ffe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008000:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008008:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800800c:	63bb      	str	r3, [r7, #56]	; 0x38
 800800e:	2300      	movs	r3, #0
 8008010:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008012:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8008016:	460b      	mov	r3, r1
 8008018:	4313      	orrs	r3, r2
 800801a:	d009      	beq.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800801c:	4b77      	ldr	r3, [pc, #476]	; (80081fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800801e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008020:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800802a:	4a74      	ldr	r2, [pc, #464]	; (80081fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800802c:	430b      	orrs	r3, r1
 800802e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008030:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008038:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800803c:	633b      	str	r3, [r7, #48]	; 0x30
 800803e:	2300      	movs	r3, #0
 8008040:	637b      	str	r3, [r7, #52]	; 0x34
 8008042:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8008046:	460b      	mov	r3, r1
 8008048:	4313      	orrs	r3, r2
 800804a:	d00a      	beq.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800804c:	4b6b      	ldr	r3, [pc, #428]	; (80081fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800804e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008050:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8008054:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008058:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800805c:	4a67      	ldr	r2, [pc, #412]	; (80081fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800805e:	430b      	orrs	r3, r1
 8008060:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008062:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806a:	2100      	movs	r1, #0
 800806c:	62b9      	str	r1, [r7, #40]	; 0x28
 800806e:	f003 0301 	and.w	r3, r3, #1
 8008072:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008074:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008078:	460b      	mov	r3, r1
 800807a:	4313      	orrs	r3, r2
 800807c:	d011      	beq.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800807e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008082:	3308      	adds	r3, #8
 8008084:	2100      	movs	r1, #0
 8008086:	4618      	mov	r0, r3
 8008088:	f000 fbce 	bl	8008828 <RCCEx_PLL2_Config>
 800808c:	4603      	mov	r3, r0
 800808e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008092:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008096:	2b00      	cmp	r3, #0
 8008098:	d003      	beq.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800809a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800809e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80080a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080aa:	2100      	movs	r1, #0
 80080ac:	6239      	str	r1, [r7, #32]
 80080ae:	f003 0302 	and.w	r3, r3, #2
 80080b2:	627b      	str	r3, [r7, #36]	; 0x24
 80080b4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80080b8:	460b      	mov	r3, r1
 80080ba:	4313      	orrs	r3, r2
 80080bc:	d011      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80080be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080c2:	3308      	adds	r3, #8
 80080c4:	2101      	movs	r1, #1
 80080c6:	4618      	mov	r0, r3
 80080c8:	f000 fbae 	bl	8008828 <RCCEx_PLL2_Config>
 80080cc:	4603      	mov	r3, r0
 80080ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80080d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d003      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80080e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ea:	2100      	movs	r1, #0
 80080ec:	61b9      	str	r1, [r7, #24]
 80080ee:	f003 0304 	and.w	r3, r3, #4
 80080f2:	61fb      	str	r3, [r7, #28]
 80080f4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80080f8:	460b      	mov	r3, r1
 80080fa:	4313      	orrs	r3, r2
 80080fc:	d011      	beq.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80080fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008102:	3308      	adds	r3, #8
 8008104:	2102      	movs	r1, #2
 8008106:	4618      	mov	r0, r3
 8008108:	f000 fb8e 	bl	8008828 <RCCEx_PLL2_Config>
 800810c:	4603      	mov	r3, r0
 800810e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008112:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008116:	2b00      	cmp	r3, #0
 8008118:	d003      	beq.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800811a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800811e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812a:	2100      	movs	r1, #0
 800812c:	6139      	str	r1, [r7, #16]
 800812e:	f003 0308 	and.w	r3, r3, #8
 8008132:	617b      	str	r3, [r7, #20]
 8008134:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008138:	460b      	mov	r3, r1
 800813a:	4313      	orrs	r3, r2
 800813c:	d011      	beq.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800813e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008142:	3328      	adds	r3, #40	; 0x28
 8008144:	2100      	movs	r1, #0
 8008146:	4618      	mov	r0, r3
 8008148:	f000 fc20 	bl	800898c <RCCEx_PLL3_Config>
 800814c:	4603      	mov	r3, r0
 800814e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8008152:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008156:	2b00      	cmp	r3, #0
 8008158:	d003      	beq.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800815a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800815e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816a:	2100      	movs	r1, #0
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	f003 0310 	and.w	r3, r3, #16
 8008172:	60fb      	str	r3, [r7, #12]
 8008174:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008178:	460b      	mov	r3, r1
 800817a:	4313      	orrs	r3, r2
 800817c:	d011      	beq.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800817e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008182:	3328      	adds	r3, #40	; 0x28
 8008184:	2101      	movs	r1, #1
 8008186:	4618      	mov	r0, r3
 8008188:	f000 fc00 	bl	800898c <RCCEx_PLL3_Config>
 800818c:	4603      	mov	r3, r0
 800818e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008192:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008196:	2b00      	cmp	r3, #0
 8008198:	d003      	beq.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800819a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800819e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80081a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081aa:	2100      	movs	r1, #0
 80081ac:	6039      	str	r1, [r7, #0]
 80081ae:	f003 0320 	and.w	r3, r3, #32
 80081b2:	607b      	str	r3, [r7, #4]
 80081b4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80081b8:	460b      	mov	r3, r1
 80081ba:	4313      	orrs	r3, r2
 80081bc:	d011      	beq.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80081be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081c2:	3328      	adds	r3, #40	; 0x28
 80081c4:	2102      	movs	r1, #2
 80081c6:	4618      	mov	r0, r3
 80081c8:	f000 fbe0 	bl	800898c <RCCEx_PLL3_Config>
 80081cc:	4603      	mov	r3, r0
 80081ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80081d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d003      	beq.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80081e2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d101      	bne.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80081ea:	2300      	movs	r3, #0
 80081ec:	e000      	b.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80081f6:	46bd      	mov	sp, r7
 80081f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081fc:	58024400 	.word	0x58024400

08008200 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008204:	f7fe fd7a 	bl	8006cfc <HAL_RCC_GetHCLKFreq>
 8008208:	4602      	mov	r2, r0
 800820a:	4b06      	ldr	r3, [pc, #24]	; (8008224 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800820c:	6a1b      	ldr	r3, [r3, #32]
 800820e:	091b      	lsrs	r3, r3, #4
 8008210:	f003 0307 	and.w	r3, r3, #7
 8008214:	4904      	ldr	r1, [pc, #16]	; (8008228 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008216:	5ccb      	ldrb	r3, [r1, r3]
 8008218:	f003 031f 	and.w	r3, r3, #31
 800821c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008220:	4618      	mov	r0, r3
 8008222:	bd80      	pop	{r7, pc}
 8008224:	58024400 	.word	0x58024400
 8008228:	0800d32c 	.word	0x0800d32c

0800822c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800822c:	b480      	push	{r7}
 800822e:	b089      	sub	sp, #36	; 0x24
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008234:	4ba1      	ldr	r3, [pc, #644]	; (80084bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008238:	f003 0303 	and.w	r3, r3, #3
 800823c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800823e:	4b9f      	ldr	r3, [pc, #636]	; (80084bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008242:	0b1b      	lsrs	r3, r3, #12
 8008244:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008248:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800824a:	4b9c      	ldr	r3, [pc, #624]	; (80084bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800824c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824e:	091b      	lsrs	r3, r3, #4
 8008250:	f003 0301 	and.w	r3, r3, #1
 8008254:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008256:	4b99      	ldr	r3, [pc, #612]	; (80084bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800825a:	08db      	lsrs	r3, r3, #3
 800825c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008260:	693a      	ldr	r2, [r7, #16]
 8008262:	fb02 f303 	mul.w	r3, r2, r3
 8008266:	ee07 3a90 	vmov	s15, r3
 800826a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800826e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	2b00      	cmp	r3, #0
 8008276:	f000 8111 	beq.w	800849c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	2b02      	cmp	r3, #2
 800827e:	f000 8083 	beq.w	8008388 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	2b02      	cmp	r3, #2
 8008286:	f200 80a1 	bhi.w	80083cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800828a:	69bb      	ldr	r3, [r7, #24]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d003      	beq.n	8008298 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008290:	69bb      	ldr	r3, [r7, #24]
 8008292:	2b01      	cmp	r3, #1
 8008294:	d056      	beq.n	8008344 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008296:	e099      	b.n	80083cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008298:	4b88      	ldr	r3, [pc, #544]	; (80084bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f003 0320 	and.w	r3, r3, #32
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d02d      	beq.n	8008300 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082a4:	4b85      	ldr	r3, [pc, #532]	; (80084bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	08db      	lsrs	r3, r3, #3
 80082aa:	f003 0303 	and.w	r3, r3, #3
 80082ae:	4a84      	ldr	r2, [pc, #528]	; (80084c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80082b0:	fa22 f303 	lsr.w	r3, r2, r3
 80082b4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	ee07 3a90 	vmov	s15, r3
 80082bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	ee07 3a90 	vmov	s15, r3
 80082c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ce:	4b7b      	ldr	r3, [pc, #492]	; (80084bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082d6:	ee07 3a90 	vmov	s15, r3
 80082da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082de:	ed97 6a03 	vldr	s12, [r7, #12]
 80082e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80084c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80082fe:	e087      	b.n	8008410 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	ee07 3a90 	vmov	s15, r3
 8008306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800830a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80084c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800830e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008312:	4b6a      	ldr	r3, [pc, #424]	; (80084bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800831a:	ee07 3a90 	vmov	s15, r3
 800831e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008322:	ed97 6a03 	vldr	s12, [r7, #12]
 8008326:	eddf 5a67 	vldr	s11, [pc, #412]	; 80084c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800832a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800832e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800833a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800833e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008342:	e065      	b.n	8008410 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	ee07 3a90 	vmov	s15, r3
 800834a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800834e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80084cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008356:	4b59      	ldr	r3, [pc, #356]	; (80084bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800835a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800835e:	ee07 3a90 	vmov	s15, r3
 8008362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008366:	ed97 6a03 	vldr	s12, [r7, #12]
 800836a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80084c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800836e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800837a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800837e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008382:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008386:	e043      	b.n	8008410 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	ee07 3a90 	vmov	s15, r3
 800838e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008392:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80084d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800839a:	4b48      	ldr	r3, [pc, #288]	; (80084bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800839c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800839e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083a2:	ee07 3a90 	vmov	s15, r3
 80083a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80083ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 80084c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083ca:	e021      	b.n	8008410 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	ee07 3a90 	vmov	s15, r3
 80083d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80084cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80083da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083de:	4b37      	ldr	r3, [pc, #220]	; (80084bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083e6:	ee07 3a90 	vmov	s15, r3
 80083ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80083f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80084c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800840a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800840e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008410:	4b2a      	ldr	r3, [pc, #168]	; (80084bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008414:	0a5b      	lsrs	r3, r3, #9
 8008416:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800841a:	ee07 3a90 	vmov	s15, r3
 800841e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008422:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008426:	ee37 7a87 	vadd.f32	s14, s15, s14
 800842a:	edd7 6a07 	vldr	s13, [r7, #28]
 800842e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008432:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008436:	ee17 2a90 	vmov	r2, s15
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800843e:	4b1f      	ldr	r3, [pc, #124]	; (80084bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008442:	0c1b      	lsrs	r3, r3, #16
 8008444:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008448:	ee07 3a90 	vmov	s15, r3
 800844c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008450:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008454:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008458:	edd7 6a07 	vldr	s13, [r7, #28]
 800845c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008460:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008464:	ee17 2a90 	vmov	r2, s15
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800846c:	4b13      	ldr	r3, [pc, #76]	; (80084bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800846e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008470:	0e1b      	lsrs	r3, r3, #24
 8008472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008476:	ee07 3a90 	vmov	s15, r3
 800847a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800847e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008482:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008486:	edd7 6a07 	vldr	s13, [r7, #28]
 800848a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800848e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008492:	ee17 2a90 	vmov	r2, s15
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800849a:	e008      	b.n	80084ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	609a      	str	r2, [r3, #8]
}
 80084ae:	bf00      	nop
 80084b0:	3724      	adds	r7, #36	; 0x24
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr
 80084ba:	bf00      	nop
 80084bc:	58024400 	.word	0x58024400
 80084c0:	03d09000 	.word	0x03d09000
 80084c4:	46000000 	.word	0x46000000
 80084c8:	4c742400 	.word	0x4c742400
 80084cc:	4a742400 	.word	0x4a742400
 80084d0:	4b189680 	.word	0x4b189680

080084d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b089      	sub	sp, #36	; 0x24
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80084dc:	4ba1      	ldr	r3, [pc, #644]	; (8008764 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e0:	f003 0303 	and.w	r3, r3, #3
 80084e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80084e6:	4b9f      	ldr	r3, [pc, #636]	; (8008764 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ea:	0d1b      	lsrs	r3, r3, #20
 80084ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80084f2:	4b9c      	ldr	r3, [pc, #624]	; (8008764 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f6:	0a1b      	lsrs	r3, r3, #8
 80084f8:	f003 0301 	and.w	r3, r3, #1
 80084fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80084fe:	4b99      	ldr	r3, [pc, #612]	; (8008764 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008502:	08db      	lsrs	r3, r3, #3
 8008504:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008508:	693a      	ldr	r2, [r7, #16]
 800850a:	fb02 f303 	mul.w	r3, r2, r3
 800850e:	ee07 3a90 	vmov	s15, r3
 8008512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008516:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	2b00      	cmp	r3, #0
 800851e:	f000 8111 	beq.w	8008744 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	2b02      	cmp	r3, #2
 8008526:	f000 8083 	beq.w	8008630 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	2b02      	cmp	r3, #2
 800852e:	f200 80a1 	bhi.w	8008674 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008532:	69bb      	ldr	r3, [r7, #24]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d003      	beq.n	8008540 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	2b01      	cmp	r3, #1
 800853c:	d056      	beq.n	80085ec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800853e:	e099      	b.n	8008674 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008540:	4b88      	ldr	r3, [pc, #544]	; (8008764 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f003 0320 	and.w	r3, r3, #32
 8008548:	2b00      	cmp	r3, #0
 800854a:	d02d      	beq.n	80085a8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800854c:	4b85      	ldr	r3, [pc, #532]	; (8008764 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	08db      	lsrs	r3, r3, #3
 8008552:	f003 0303 	and.w	r3, r3, #3
 8008556:	4a84      	ldr	r2, [pc, #528]	; (8008768 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008558:	fa22 f303 	lsr.w	r3, r2, r3
 800855c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	ee07 3a90 	vmov	s15, r3
 8008564:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	ee07 3a90 	vmov	s15, r3
 800856e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008576:	4b7b      	ldr	r3, [pc, #492]	; (8008764 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800857e:	ee07 3a90 	vmov	s15, r3
 8008582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008586:	ed97 6a03 	vldr	s12, [r7, #12]
 800858a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800876c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800858e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008596:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800859a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800859e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80085a6:	e087      	b.n	80086b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	ee07 3a90 	vmov	s15, r3
 80085ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008770 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80085b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085ba:	4b6a      	ldr	r3, [pc, #424]	; (8008764 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085c2:	ee07 3a90 	vmov	s15, r3
 80085c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80085ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800876c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085ea:	e065      	b.n	80086b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	ee07 3a90 	vmov	s15, r3
 80085f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008774 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80085fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085fe:	4b59      	ldr	r3, [pc, #356]	; (8008764 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008606:	ee07 3a90 	vmov	s15, r3
 800860a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800860e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008612:	eddf 5a56 	vldr	s11, [pc, #344]	; 800876c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800861a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800861e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800862a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800862e:	e043      	b.n	80086b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	ee07 3a90 	vmov	s15, r3
 8008636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800863a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008778 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800863e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008642:	4b48      	ldr	r3, [pc, #288]	; (8008764 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800864a:	ee07 3a90 	vmov	s15, r3
 800864e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008652:	ed97 6a03 	vldr	s12, [r7, #12]
 8008656:	eddf 5a45 	vldr	s11, [pc, #276]	; 800876c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800865a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800865e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008662:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800866a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800866e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008672:	e021      	b.n	80086b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	ee07 3a90 	vmov	s15, r3
 800867a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800867e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008774 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008686:	4b37      	ldr	r3, [pc, #220]	; (8008764 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800868e:	ee07 3a90 	vmov	s15, r3
 8008692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008696:	ed97 6a03 	vldr	s12, [r7, #12]
 800869a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800876c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800869e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086b6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80086b8:	4b2a      	ldr	r3, [pc, #168]	; (8008764 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086bc:	0a5b      	lsrs	r3, r3, #9
 80086be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086c2:	ee07 3a90 	vmov	s15, r3
 80086c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80086d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086de:	ee17 2a90 	vmov	r2, s15
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80086e6:	4b1f      	ldr	r3, [pc, #124]	; (8008764 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ea:	0c1b      	lsrs	r3, r3, #16
 80086ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086f0:	ee07 3a90 	vmov	s15, r3
 80086f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008700:	edd7 6a07 	vldr	s13, [r7, #28]
 8008704:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800870c:	ee17 2a90 	vmov	r2, s15
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008714:	4b13      	ldr	r3, [pc, #76]	; (8008764 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008718:	0e1b      	lsrs	r3, r3, #24
 800871a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800871e:	ee07 3a90 	vmov	s15, r3
 8008722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008726:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800872a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800872e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008732:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008736:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800873a:	ee17 2a90 	vmov	r2, s15
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008742:	e008      	b.n	8008756 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	609a      	str	r2, [r3, #8]
}
 8008756:	bf00      	nop
 8008758:	3724      	adds	r7, #36	; 0x24
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr
 8008762:	bf00      	nop
 8008764:	58024400 	.word	0x58024400
 8008768:	03d09000 	.word	0x03d09000
 800876c:	46000000 	.word	0x46000000
 8008770:	4c742400 	.word	0x4c742400
 8008774:	4a742400 	.word	0x4a742400
 8008778:	4b189680 	.word	0x4b189680

0800877c <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8008784:	4b26      	ldr	r3, [pc, #152]	; (8008820 <HAL_RCCEx_CRSConfig+0xa4>)
 8008786:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800878a:	4a25      	ldr	r2, [pc, #148]	; (8008820 <HAL_RCCEx_CRSConfig+0xa4>)
 800878c:	f043 0302 	orr.w	r3, r3, #2
 8008790:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 8008794:	4b22      	ldr	r3, [pc, #136]	; (8008820 <HAL_RCCEx_CRSConfig+0xa4>)
 8008796:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800879a:	4a21      	ldr	r2, [pc, #132]	; (8008820 <HAL_RCCEx_CRSConfig+0xa4>)
 800879c:	f023 0302 	bic.w	r3, r3, #2
 80087a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 80087a4:	f7fa f900 	bl	80029a8 <HAL_GetREVID>
 80087a8:	4603      	mov	r3, r0
 80087aa:	f241 0203 	movw	r2, #4099	; 0x1003
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d80b      	bhi.n	80087ca <HAL_RCCEx_CRSConfig+0x4e>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80087ba:	d106      	bne.n	80087ca <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	60fb      	str	r3, [r7, #12]
 80087c8:	e008      	b.n	80087dc <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	431a      	orrs	r2, r3
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	4313      	orrs	r3, r2
 80087da:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	68db      	ldr	r3, [r3, #12]
 80087e0:	68fa      	ldr	r2, [r7, #12]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	041b      	lsls	r3, r3, #16
 80087ec:	68fa      	ldr	r2, [r7, #12]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 80087f2:	4a0c      	ldr	r2, [pc, #48]	; (8008824 <HAL_RCCEx_CRSConfig+0xa8>)
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 80087f8:	4b0a      	ldr	r3, [pc, #40]	; (8008824 <HAL_RCCEx_CRSConfig+0xa8>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	695b      	ldr	r3, [r3, #20]
 8008804:	021b      	lsls	r3, r3, #8
 8008806:	4907      	ldr	r1, [pc, #28]	; (8008824 <HAL_RCCEx_CRSConfig+0xa8>)
 8008808:	4313      	orrs	r3, r2
 800880a:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800880c:	4b05      	ldr	r3, [pc, #20]	; (8008824 <HAL_RCCEx_CRSConfig+0xa8>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a04      	ldr	r2, [pc, #16]	; (8008824 <HAL_RCCEx_CRSConfig+0xa8>)
 8008812:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008816:	6013      	str	r3, [r2, #0]
}
 8008818:	bf00      	nop
 800881a:	3710      	adds	r7, #16
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}
 8008820:	58024400 	.word	0x58024400
 8008824:	40008400 	.word	0x40008400

08008828 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008832:	2300      	movs	r3, #0
 8008834:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008836:	4b53      	ldr	r3, [pc, #332]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 8008838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800883a:	f003 0303 	and.w	r3, r3, #3
 800883e:	2b03      	cmp	r3, #3
 8008840:	d101      	bne.n	8008846 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008842:	2301      	movs	r3, #1
 8008844:	e099      	b.n	800897a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008846:	4b4f      	ldr	r3, [pc, #316]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a4e      	ldr	r2, [pc, #312]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 800884c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008850:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008852:	f7fa f859 	bl	8002908 <HAL_GetTick>
 8008856:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008858:	e008      	b.n	800886c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800885a:	f7fa f855 	bl	8002908 <HAL_GetTick>
 800885e:	4602      	mov	r2, r0
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	1ad3      	subs	r3, r2, r3
 8008864:	2b02      	cmp	r3, #2
 8008866:	d901      	bls.n	800886c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008868:	2303      	movs	r3, #3
 800886a:	e086      	b.n	800897a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800886c:	4b45      	ldr	r3, [pc, #276]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008874:	2b00      	cmp	r3, #0
 8008876:	d1f0      	bne.n	800885a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008878:	4b42      	ldr	r3, [pc, #264]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 800887a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800887c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	031b      	lsls	r3, r3, #12
 8008886:	493f      	ldr	r1, [pc, #252]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 8008888:	4313      	orrs	r3, r2
 800888a:	628b      	str	r3, [r1, #40]	; 0x28
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	3b01      	subs	r3, #1
 8008892:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	3b01      	subs	r3, #1
 800889c:	025b      	lsls	r3, r3, #9
 800889e:	b29b      	uxth	r3, r3
 80088a0:	431a      	orrs	r2, r3
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	3b01      	subs	r3, #1
 80088a8:	041b      	lsls	r3, r3, #16
 80088aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80088ae:	431a      	orrs	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	691b      	ldr	r3, [r3, #16]
 80088b4:	3b01      	subs	r3, #1
 80088b6:	061b      	lsls	r3, r3, #24
 80088b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80088bc:	4931      	ldr	r1, [pc, #196]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 80088be:	4313      	orrs	r3, r2
 80088c0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80088c2:	4b30      	ldr	r3, [pc, #192]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 80088c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	695b      	ldr	r3, [r3, #20]
 80088ce:	492d      	ldr	r1, [pc, #180]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 80088d0:	4313      	orrs	r3, r2
 80088d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80088d4:	4b2b      	ldr	r3, [pc, #172]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 80088d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d8:	f023 0220 	bic.w	r2, r3, #32
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	699b      	ldr	r3, [r3, #24]
 80088e0:	4928      	ldr	r1, [pc, #160]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 80088e2:	4313      	orrs	r3, r2
 80088e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80088e6:	4b27      	ldr	r3, [pc, #156]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 80088e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ea:	4a26      	ldr	r2, [pc, #152]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 80088ec:	f023 0310 	bic.w	r3, r3, #16
 80088f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80088f2:	4b24      	ldr	r3, [pc, #144]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 80088f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088f6:	4b24      	ldr	r3, [pc, #144]	; (8008988 <RCCEx_PLL2_Config+0x160>)
 80088f8:	4013      	ands	r3, r2
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	69d2      	ldr	r2, [r2, #28]
 80088fe:	00d2      	lsls	r2, r2, #3
 8008900:	4920      	ldr	r1, [pc, #128]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 8008902:	4313      	orrs	r3, r2
 8008904:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008906:	4b1f      	ldr	r3, [pc, #124]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 8008908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890a:	4a1e      	ldr	r2, [pc, #120]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 800890c:	f043 0310 	orr.w	r3, r3, #16
 8008910:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d106      	bne.n	8008926 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008918:	4b1a      	ldr	r3, [pc, #104]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 800891a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800891c:	4a19      	ldr	r2, [pc, #100]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 800891e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008922:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008924:	e00f      	b.n	8008946 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	2b01      	cmp	r3, #1
 800892a:	d106      	bne.n	800893a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800892c:	4b15      	ldr	r3, [pc, #84]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 800892e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008930:	4a14      	ldr	r2, [pc, #80]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 8008932:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008936:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008938:	e005      	b.n	8008946 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800893a:	4b12      	ldr	r3, [pc, #72]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 800893c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800893e:	4a11      	ldr	r2, [pc, #68]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 8008940:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008944:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008946:	4b0f      	ldr	r3, [pc, #60]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a0e      	ldr	r2, [pc, #56]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 800894c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008950:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008952:	f7f9 ffd9 	bl	8002908 <HAL_GetTick>
 8008956:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008958:	e008      	b.n	800896c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800895a:	f7f9 ffd5 	bl	8002908 <HAL_GetTick>
 800895e:	4602      	mov	r2, r0
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	1ad3      	subs	r3, r2, r3
 8008964:	2b02      	cmp	r3, #2
 8008966:	d901      	bls.n	800896c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008968:	2303      	movs	r3, #3
 800896a:	e006      	b.n	800897a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800896c:	4b05      	ldr	r3, [pc, #20]	; (8008984 <RCCEx_PLL2_Config+0x15c>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008974:	2b00      	cmp	r3, #0
 8008976:	d0f0      	beq.n	800895a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008978:	7bfb      	ldrb	r3, [r7, #15]
}
 800897a:	4618      	mov	r0, r3
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	58024400 	.word	0x58024400
 8008988:	ffff0007 	.word	0xffff0007

0800898c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008996:	2300      	movs	r3, #0
 8008998:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800899a:	4b53      	ldr	r3, [pc, #332]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 800899c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800899e:	f003 0303 	and.w	r3, r3, #3
 80089a2:	2b03      	cmp	r3, #3
 80089a4:	d101      	bne.n	80089aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	e099      	b.n	8008ade <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80089aa:	4b4f      	ldr	r3, [pc, #316]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a4e      	ldr	r2, [pc, #312]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 80089b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089b6:	f7f9 ffa7 	bl	8002908 <HAL_GetTick>
 80089ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80089bc:	e008      	b.n	80089d0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80089be:	f7f9 ffa3 	bl	8002908 <HAL_GetTick>
 80089c2:	4602      	mov	r2, r0
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	1ad3      	subs	r3, r2, r3
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	d901      	bls.n	80089d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80089cc:	2303      	movs	r3, #3
 80089ce:	e086      	b.n	8008ade <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80089d0:	4b45      	ldr	r3, [pc, #276]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d1f0      	bne.n	80089be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80089dc:	4b42      	ldr	r3, [pc, #264]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 80089de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	051b      	lsls	r3, r3, #20
 80089ea:	493f      	ldr	r1, [pc, #252]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 80089ec:	4313      	orrs	r3, r2
 80089ee:	628b      	str	r3, [r1, #40]	; 0x28
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	3b01      	subs	r3, #1
 80089f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	3b01      	subs	r3, #1
 8008a00:	025b      	lsls	r3, r3, #9
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	431a      	orrs	r2, r3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	041b      	lsls	r3, r3, #16
 8008a0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008a12:	431a      	orrs	r2, r3
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	061b      	lsls	r3, r3, #24
 8008a1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008a20:	4931      	ldr	r1, [pc, #196]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 8008a22:	4313      	orrs	r3, r2
 8008a24:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008a26:	4b30      	ldr	r3, [pc, #192]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 8008a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	695b      	ldr	r3, [r3, #20]
 8008a32:	492d      	ldr	r1, [pc, #180]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 8008a34:	4313      	orrs	r3, r2
 8008a36:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008a38:	4b2b      	ldr	r3, [pc, #172]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 8008a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a3c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	699b      	ldr	r3, [r3, #24]
 8008a44:	4928      	ldr	r1, [pc, #160]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 8008a46:	4313      	orrs	r3, r2
 8008a48:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008a4a:	4b27      	ldr	r3, [pc, #156]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 8008a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4e:	4a26      	ldr	r2, [pc, #152]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 8008a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008a56:	4b24      	ldr	r3, [pc, #144]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 8008a58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a5a:	4b24      	ldr	r3, [pc, #144]	; (8008aec <RCCEx_PLL3_Config+0x160>)
 8008a5c:	4013      	ands	r3, r2
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	69d2      	ldr	r2, [r2, #28]
 8008a62:	00d2      	lsls	r2, r2, #3
 8008a64:	4920      	ldr	r1, [pc, #128]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 8008a66:	4313      	orrs	r3, r2
 8008a68:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008a6a:	4b1f      	ldr	r3, [pc, #124]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 8008a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a6e:	4a1e      	ldr	r2, [pc, #120]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 8008a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d106      	bne.n	8008a8a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008a7c:	4b1a      	ldr	r3, [pc, #104]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 8008a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a80:	4a19      	ldr	r2, [pc, #100]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 8008a82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008a86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008a88:	e00f      	b.n	8008aaa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d106      	bne.n	8008a9e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008a90:	4b15      	ldr	r3, [pc, #84]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 8008a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a94:	4a14      	ldr	r2, [pc, #80]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 8008a96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008a9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008a9c:	e005      	b.n	8008aaa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008a9e:	4b12      	ldr	r3, [pc, #72]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 8008aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa2:	4a11      	ldr	r2, [pc, #68]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 8008aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008aa8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008aaa:	4b0f      	ldr	r3, [pc, #60]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a0e      	ldr	r2, [pc, #56]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 8008ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ab4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ab6:	f7f9 ff27 	bl	8002908 <HAL_GetTick>
 8008aba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008abc:	e008      	b.n	8008ad0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008abe:	f7f9 ff23 	bl	8002908 <HAL_GetTick>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	1ad3      	subs	r3, r2, r3
 8008ac8:	2b02      	cmp	r3, #2
 8008aca:	d901      	bls.n	8008ad0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008acc:	2303      	movs	r3, #3
 8008ace:	e006      	b.n	8008ade <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ad0:	4b05      	ldr	r3, [pc, #20]	; (8008ae8 <RCCEx_PLL3_Config+0x15c>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d0f0      	beq.n	8008abe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	58024400 	.word	0x58024400
 8008aec:	ffff0007 	.word	0xffff0007

08008af0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d101      	bne.n	8008b02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	e049      	b.n	8008b96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d106      	bne.n	8008b1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f7f9 fbf8 	bl	800230c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2202      	movs	r2, #2
 8008b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	3304      	adds	r3, #4
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	4610      	mov	r0, r2
 8008b30:	f000 f92e 	bl	8008d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2201      	movs	r2, #1
 8008b38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2201      	movs	r2, #1
 8008b48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3708      	adds	r7, #8
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
	...

08008ba0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b084      	sub	sp, #16
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008baa:	2300      	movs	r3, #0
 8008bac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d101      	bne.n	8008bbc <HAL_TIM_ConfigClockSource+0x1c>
 8008bb8:	2302      	movs	r3, #2
 8008bba:	e0dc      	b.n	8008d76 <HAL_TIM_ConfigClockSource+0x1d6>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2202      	movs	r2, #2
 8008bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008bd4:	68ba      	ldr	r2, [r7, #8]
 8008bd6:	4b6a      	ldr	r3, [pc, #424]	; (8008d80 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008bd8:	4013      	ands	r3, r2
 8008bda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008be2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	68ba      	ldr	r2, [r7, #8]
 8008bea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a64      	ldr	r2, [pc, #400]	; (8008d84 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	f000 80a9 	beq.w	8008d4a <HAL_TIM_ConfigClockSource+0x1aa>
 8008bf8:	4a62      	ldr	r2, [pc, #392]	; (8008d84 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	f200 80ae 	bhi.w	8008d5c <HAL_TIM_ConfigClockSource+0x1bc>
 8008c00:	4a61      	ldr	r2, [pc, #388]	; (8008d88 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	f000 80a1 	beq.w	8008d4a <HAL_TIM_ConfigClockSource+0x1aa>
 8008c08:	4a5f      	ldr	r2, [pc, #380]	; (8008d88 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	f200 80a6 	bhi.w	8008d5c <HAL_TIM_ConfigClockSource+0x1bc>
 8008c10:	4a5e      	ldr	r2, [pc, #376]	; (8008d8c <HAL_TIM_ConfigClockSource+0x1ec>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	f000 8099 	beq.w	8008d4a <HAL_TIM_ConfigClockSource+0x1aa>
 8008c18:	4a5c      	ldr	r2, [pc, #368]	; (8008d8c <HAL_TIM_ConfigClockSource+0x1ec>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	f200 809e 	bhi.w	8008d5c <HAL_TIM_ConfigClockSource+0x1bc>
 8008c20:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008c24:	f000 8091 	beq.w	8008d4a <HAL_TIM_ConfigClockSource+0x1aa>
 8008c28:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008c2c:	f200 8096 	bhi.w	8008d5c <HAL_TIM_ConfigClockSource+0x1bc>
 8008c30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c34:	f000 8089 	beq.w	8008d4a <HAL_TIM_ConfigClockSource+0x1aa>
 8008c38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c3c:	f200 808e 	bhi.w	8008d5c <HAL_TIM_ConfigClockSource+0x1bc>
 8008c40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c44:	d03e      	beq.n	8008cc4 <HAL_TIM_ConfigClockSource+0x124>
 8008c46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c4a:	f200 8087 	bhi.w	8008d5c <HAL_TIM_ConfigClockSource+0x1bc>
 8008c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c52:	f000 8086 	beq.w	8008d62 <HAL_TIM_ConfigClockSource+0x1c2>
 8008c56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c5a:	d87f      	bhi.n	8008d5c <HAL_TIM_ConfigClockSource+0x1bc>
 8008c5c:	2b70      	cmp	r3, #112	; 0x70
 8008c5e:	d01a      	beq.n	8008c96 <HAL_TIM_ConfigClockSource+0xf6>
 8008c60:	2b70      	cmp	r3, #112	; 0x70
 8008c62:	d87b      	bhi.n	8008d5c <HAL_TIM_ConfigClockSource+0x1bc>
 8008c64:	2b60      	cmp	r3, #96	; 0x60
 8008c66:	d050      	beq.n	8008d0a <HAL_TIM_ConfigClockSource+0x16a>
 8008c68:	2b60      	cmp	r3, #96	; 0x60
 8008c6a:	d877      	bhi.n	8008d5c <HAL_TIM_ConfigClockSource+0x1bc>
 8008c6c:	2b50      	cmp	r3, #80	; 0x50
 8008c6e:	d03c      	beq.n	8008cea <HAL_TIM_ConfigClockSource+0x14a>
 8008c70:	2b50      	cmp	r3, #80	; 0x50
 8008c72:	d873      	bhi.n	8008d5c <HAL_TIM_ConfigClockSource+0x1bc>
 8008c74:	2b40      	cmp	r3, #64	; 0x40
 8008c76:	d058      	beq.n	8008d2a <HAL_TIM_ConfigClockSource+0x18a>
 8008c78:	2b40      	cmp	r3, #64	; 0x40
 8008c7a:	d86f      	bhi.n	8008d5c <HAL_TIM_ConfigClockSource+0x1bc>
 8008c7c:	2b30      	cmp	r3, #48	; 0x30
 8008c7e:	d064      	beq.n	8008d4a <HAL_TIM_ConfigClockSource+0x1aa>
 8008c80:	2b30      	cmp	r3, #48	; 0x30
 8008c82:	d86b      	bhi.n	8008d5c <HAL_TIM_ConfigClockSource+0x1bc>
 8008c84:	2b20      	cmp	r3, #32
 8008c86:	d060      	beq.n	8008d4a <HAL_TIM_ConfigClockSource+0x1aa>
 8008c88:	2b20      	cmp	r3, #32
 8008c8a:	d867      	bhi.n	8008d5c <HAL_TIM_ConfigClockSource+0x1bc>
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d05c      	beq.n	8008d4a <HAL_TIM_ConfigClockSource+0x1aa>
 8008c90:	2b10      	cmp	r3, #16
 8008c92:	d05a      	beq.n	8008d4a <HAL_TIM_ConfigClockSource+0x1aa>
 8008c94:	e062      	b.n	8008d5c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6818      	ldr	r0, [r3, #0]
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	6899      	ldr	r1, [r3, #8]
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	685a      	ldr	r2, [r3, #4]
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	68db      	ldr	r3, [r3, #12]
 8008ca6:	f000 f98b 	bl	8008fc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008cb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	68ba      	ldr	r2, [r7, #8]
 8008cc0:	609a      	str	r2, [r3, #8]
      break;
 8008cc2:	e04f      	b.n	8008d64 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6818      	ldr	r0, [r3, #0]
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	6899      	ldr	r1, [r3, #8]
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	685a      	ldr	r2, [r3, #4]
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	f000 f974 	bl	8008fc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	689a      	ldr	r2, [r3, #8]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ce6:	609a      	str	r2, [r3, #8]
      break;
 8008ce8:	e03c      	b.n	8008d64 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6818      	ldr	r0, [r3, #0]
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	6859      	ldr	r1, [r3, #4]
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	f000 f8e4 	bl	8008ec4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2150      	movs	r1, #80	; 0x50
 8008d02:	4618      	mov	r0, r3
 8008d04:	f000 f93e 	bl	8008f84 <TIM_ITRx_SetConfig>
      break;
 8008d08:	e02c      	b.n	8008d64 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6818      	ldr	r0, [r3, #0]
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	6859      	ldr	r1, [r3, #4]
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	461a      	mov	r2, r3
 8008d18:	f000 f903 	bl	8008f22 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2160      	movs	r1, #96	; 0x60
 8008d22:	4618      	mov	r0, r3
 8008d24:	f000 f92e 	bl	8008f84 <TIM_ITRx_SetConfig>
      break;
 8008d28:	e01c      	b.n	8008d64 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6818      	ldr	r0, [r3, #0]
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	6859      	ldr	r1, [r3, #4]
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	461a      	mov	r2, r3
 8008d38:	f000 f8c4 	bl	8008ec4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2140      	movs	r1, #64	; 0x40
 8008d42:	4618      	mov	r0, r3
 8008d44:	f000 f91e 	bl	8008f84 <TIM_ITRx_SetConfig>
      break;
 8008d48:	e00c      	b.n	8008d64 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4619      	mov	r1, r3
 8008d54:	4610      	mov	r0, r2
 8008d56:	f000 f915 	bl	8008f84 <TIM_ITRx_SetConfig>
      break;
 8008d5a:	e003      	b.n	8008d64 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8008d60:	e000      	b.n	8008d64 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008d62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2201      	movs	r2, #1
 8008d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	ffceff88 	.word	0xffceff88
 8008d84:	00100040 	.word	0x00100040
 8008d88:	00100030 	.word	0x00100030
 8008d8c:	00100020 	.word	0x00100020

08008d90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b085      	sub	sp, #20
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a40      	ldr	r2, [pc, #256]	; (8008ea4 <TIM_Base_SetConfig+0x114>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d013      	beq.n	8008dd0 <TIM_Base_SetConfig+0x40>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dae:	d00f      	beq.n	8008dd0 <TIM_Base_SetConfig+0x40>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4a3d      	ldr	r2, [pc, #244]	; (8008ea8 <TIM_Base_SetConfig+0x118>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d00b      	beq.n	8008dd0 <TIM_Base_SetConfig+0x40>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	4a3c      	ldr	r2, [pc, #240]	; (8008eac <TIM_Base_SetConfig+0x11c>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d007      	beq.n	8008dd0 <TIM_Base_SetConfig+0x40>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4a3b      	ldr	r2, [pc, #236]	; (8008eb0 <TIM_Base_SetConfig+0x120>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d003      	beq.n	8008dd0 <TIM_Base_SetConfig+0x40>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	4a3a      	ldr	r2, [pc, #232]	; (8008eb4 <TIM_Base_SetConfig+0x124>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d108      	bne.n	8008de2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	68fa      	ldr	r2, [r7, #12]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4a2f      	ldr	r2, [pc, #188]	; (8008ea4 <TIM_Base_SetConfig+0x114>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d01f      	beq.n	8008e2a <TIM_Base_SetConfig+0x9a>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008df0:	d01b      	beq.n	8008e2a <TIM_Base_SetConfig+0x9a>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4a2c      	ldr	r2, [pc, #176]	; (8008ea8 <TIM_Base_SetConfig+0x118>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d017      	beq.n	8008e2a <TIM_Base_SetConfig+0x9a>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	4a2b      	ldr	r2, [pc, #172]	; (8008eac <TIM_Base_SetConfig+0x11c>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d013      	beq.n	8008e2a <TIM_Base_SetConfig+0x9a>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a2a      	ldr	r2, [pc, #168]	; (8008eb0 <TIM_Base_SetConfig+0x120>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d00f      	beq.n	8008e2a <TIM_Base_SetConfig+0x9a>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4a29      	ldr	r2, [pc, #164]	; (8008eb4 <TIM_Base_SetConfig+0x124>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d00b      	beq.n	8008e2a <TIM_Base_SetConfig+0x9a>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	4a28      	ldr	r2, [pc, #160]	; (8008eb8 <TIM_Base_SetConfig+0x128>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d007      	beq.n	8008e2a <TIM_Base_SetConfig+0x9a>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4a27      	ldr	r2, [pc, #156]	; (8008ebc <TIM_Base_SetConfig+0x12c>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d003      	beq.n	8008e2a <TIM_Base_SetConfig+0x9a>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4a26      	ldr	r2, [pc, #152]	; (8008ec0 <TIM_Base_SetConfig+0x130>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d108      	bne.n	8008e3c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	68fa      	ldr	r2, [r7, #12]
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	695b      	ldr	r3, [r3, #20]
 8008e46:	4313      	orrs	r3, r2
 8008e48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	68fa      	ldr	r2, [r7, #12]
 8008e4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	689a      	ldr	r2, [r3, #8]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4a10      	ldr	r2, [pc, #64]	; (8008ea4 <TIM_Base_SetConfig+0x114>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d00f      	beq.n	8008e88 <TIM_Base_SetConfig+0xf8>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4a12      	ldr	r2, [pc, #72]	; (8008eb4 <TIM_Base_SetConfig+0x124>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d00b      	beq.n	8008e88 <TIM_Base_SetConfig+0xf8>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	4a11      	ldr	r2, [pc, #68]	; (8008eb8 <TIM_Base_SetConfig+0x128>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d007      	beq.n	8008e88 <TIM_Base_SetConfig+0xf8>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	4a10      	ldr	r2, [pc, #64]	; (8008ebc <TIM_Base_SetConfig+0x12c>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d003      	beq.n	8008e88 <TIM_Base_SetConfig+0xf8>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4a0f      	ldr	r2, [pc, #60]	; (8008ec0 <TIM_Base_SetConfig+0x130>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d103      	bne.n	8008e90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	691a      	ldr	r2, [r3, #16]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2201      	movs	r2, #1
 8008e94:	615a      	str	r2, [r3, #20]
}
 8008e96:	bf00      	nop
 8008e98:	3714      	adds	r7, #20
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	40010000 	.word	0x40010000
 8008ea8:	40000400 	.word	0x40000400
 8008eac:	40000800 	.word	0x40000800
 8008eb0:	40000c00 	.word	0x40000c00
 8008eb4:	40010400 	.word	0x40010400
 8008eb8:	40014000 	.word	0x40014000
 8008ebc:	40014400 	.word	0x40014400
 8008ec0:	40014800 	.word	0x40014800

08008ec4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b087      	sub	sp, #28
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	60b9      	str	r1, [r7, #8]
 8008ece:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6a1b      	ldr	r3, [r3, #32]
 8008ed4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	6a1b      	ldr	r3, [r3, #32]
 8008eda:	f023 0201 	bic.w	r2, r3, #1
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	699b      	ldr	r3, [r3, #24]
 8008ee6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008eee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	011b      	lsls	r3, r3, #4
 8008ef4:	693a      	ldr	r2, [r7, #16]
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	f023 030a 	bic.w	r3, r3, #10
 8008f00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f02:	697a      	ldr	r2, [r7, #20]
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	4313      	orrs	r3, r2
 8008f08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	693a      	ldr	r2, [r7, #16]
 8008f0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	697a      	ldr	r2, [r7, #20]
 8008f14:	621a      	str	r2, [r3, #32]
}
 8008f16:	bf00      	nop
 8008f18:	371c      	adds	r7, #28
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr

08008f22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f22:	b480      	push	{r7}
 8008f24:	b087      	sub	sp, #28
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	60f8      	str	r0, [r7, #12]
 8008f2a:	60b9      	str	r1, [r7, #8]
 8008f2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	6a1b      	ldr	r3, [r3, #32]
 8008f32:	f023 0210 	bic.w	r2, r3, #16
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	699b      	ldr	r3, [r3, #24]
 8008f3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	6a1b      	ldr	r3, [r3, #32]
 8008f44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	031b      	lsls	r3, r3, #12
 8008f52:	697a      	ldr	r2, [r7, #20]
 8008f54:	4313      	orrs	r3, r2
 8008f56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008f5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	011b      	lsls	r3, r3, #4
 8008f64:	693a      	ldr	r2, [r7, #16]
 8008f66:	4313      	orrs	r3, r2
 8008f68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	697a      	ldr	r2, [r7, #20]
 8008f6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	693a      	ldr	r2, [r7, #16]
 8008f74:	621a      	str	r2, [r3, #32]
}
 8008f76:	bf00      	nop
 8008f78:	371c      	adds	r7, #28
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
	...

08008f84 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b085      	sub	sp, #20
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f94:	68fa      	ldr	r2, [r7, #12]
 8008f96:	4b09      	ldr	r3, [pc, #36]	; (8008fbc <TIM_ITRx_SetConfig+0x38>)
 8008f98:	4013      	ands	r3, r2
 8008f9a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f9c:	683a      	ldr	r2, [r7, #0]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	f043 0307 	orr.w	r3, r3, #7
 8008fa6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	68fa      	ldr	r2, [r7, #12]
 8008fac:	609a      	str	r2, [r3, #8]
}
 8008fae:	bf00      	nop
 8008fb0:	3714      	adds	r7, #20
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr
 8008fba:	bf00      	nop
 8008fbc:	ffcfff8f 	.word	0xffcfff8f

08008fc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b087      	sub	sp, #28
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	607a      	str	r2, [r7, #4]
 8008fcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008fda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	021a      	lsls	r2, r3, #8
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	431a      	orrs	r2, r3
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	697a      	ldr	r2, [r7, #20]
 8008fea:	4313      	orrs	r3, r2
 8008fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	697a      	ldr	r2, [r7, #20]
 8008ff2:	609a      	str	r2, [r3, #8]
}
 8008ff4:	bf00      	nop
 8008ff6:	371c      	adds	r7, #28
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr

08009000 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009000:	b480      	push	{r7}
 8009002:	b085      	sub	sp, #20
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009010:	2b01      	cmp	r3, #1
 8009012:	d101      	bne.n	8009018 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009014:	2302      	movs	r3, #2
 8009016:	e06d      	b.n	80090f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2202      	movs	r2, #2
 8009024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a30      	ldr	r2, [pc, #192]	; (8009100 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d004      	beq.n	800904c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a2f      	ldr	r2, [pc, #188]	; (8009104 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d108      	bne.n	800905e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009052:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	68fa      	ldr	r2, [r7, #12]
 800905a:	4313      	orrs	r3, r2
 800905c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009064:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	4313      	orrs	r3, r2
 800906e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	68fa      	ldr	r2, [r7, #12]
 8009076:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a20      	ldr	r2, [pc, #128]	; (8009100 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d022      	beq.n	80090c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800908a:	d01d      	beq.n	80090c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a1d      	ldr	r2, [pc, #116]	; (8009108 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d018      	beq.n	80090c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a1c      	ldr	r2, [pc, #112]	; (800910c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d013      	beq.n	80090c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a1a      	ldr	r2, [pc, #104]	; (8009110 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d00e      	beq.n	80090c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a15      	ldr	r2, [pc, #84]	; (8009104 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d009      	beq.n	80090c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a16      	ldr	r2, [pc, #88]	; (8009114 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d004      	beq.n	80090c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a15      	ldr	r2, [pc, #84]	; (8009118 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d10c      	bne.n	80090e2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	68ba      	ldr	r2, [r7, #8]
 80090d6:	4313      	orrs	r3, r2
 80090d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	68ba      	ldr	r2, [r7, #8]
 80090e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2201      	movs	r2, #1
 80090e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090f2:	2300      	movs	r3, #0
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3714      	adds	r7, #20
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr
 8009100:	40010000 	.word	0x40010000
 8009104:	40010400 	.word	0x40010400
 8009108:	40000400 	.word	0x40000400
 800910c:	40000800 	.word	0x40000800
 8009110:	40000c00 	.word	0x40000c00
 8009114:	40001800 	.word	0x40001800
 8009118:	40014000 	.word	0x40014000

0800911c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d101      	bne.n	800912e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	e042      	b.n	80091b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009134:	2b00      	cmp	r3, #0
 8009136:	d106      	bne.n	8009146 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2200      	movs	r2, #0
 800913c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f7f9 f91d 	bl	8002380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2224      	movs	r2, #36	; 0x24
 800914a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f022 0201 	bic.w	r2, r2, #1
 800915c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 f8ba 	bl	80092d8 <UART_SetConfig>
 8009164:	4603      	mov	r3, r0
 8009166:	2b01      	cmp	r3, #1
 8009168:	d101      	bne.n	800916e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800916a:	2301      	movs	r3, #1
 800916c:	e022      	b.n	80091b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009172:	2b00      	cmp	r3, #0
 8009174:	d002      	beq.n	800917c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 fe16 	bl	8009da8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	685a      	ldr	r2, [r3, #4]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800918a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	689a      	ldr	r2, [r3, #8]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800919a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f042 0201 	orr.w	r2, r2, #1
 80091aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 fe9d 	bl	8009eec <UART_CheckIdleState>
 80091b2:	4603      	mov	r3, r0
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3708      	adds	r7, #8
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b08a      	sub	sp, #40	; 0x28
 80091c0:	af02      	add	r7, sp, #8
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	60b9      	str	r1, [r7, #8]
 80091c6:	603b      	str	r3, [r7, #0]
 80091c8:	4613      	mov	r3, r2
 80091ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091d2:	2b20      	cmp	r3, #32
 80091d4:	d17b      	bne.n	80092ce <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d002      	beq.n	80091e2 <HAL_UART_Transmit+0x26>
 80091dc:	88fb      	ldrh	r3, [r7, #6]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d101      	bne.n	80091e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80091e2:	2301      	movs	r3, #1
 80091e4:	e074      	b.n	80092d0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2200      	movs	r2, #0
 80091ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2221      	movs	r2, #33	; 0x21
 80091f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80091f6:	f7f9 fb87 	bl	8002908 <HAL_GetTick>
 80091fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	88fa      	ldrh	r2, [r7, #6]
 8009200:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	88fa      	ldrh	r2, [r7, #6]
 8009208:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009214:	d108      	bne.n	8009228 <HAL_UART_Transmit+0x6c>
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	691b      	ldr	r3, [r3, #16]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d104      	bne.n	8009228 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800921e:	2300      	movs	r3, #0
 8009220:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	61bb      	str	r3, [r7, #24]
 8009226:	e003      	b.n	8009230 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800922c:	2300      	movs	r3, #0
 800922e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009230:	e030      	b.n	8009294 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	9300      	str	r3, [sp, #0]
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	2200      	movs	r2, #0
 800923a:	2180      	movs	r1, #128	; 0x80
 800923c:	68f8      	ldr	r0, [r7, #12]
 800923e:	f000 feff 	bl	800a040 <UART_WaitOnFlagUntilTimeout>
 8009242:	4603      	mov	r3, r0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d005      	beq.n	8009254 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2220      	movs	r2, #32
 800924c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8009250:	2303      	movs	r3, #3
 8009252:	e03d      	b.n	80092d0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d10b      	bne.n	8009272 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	881b      	ldrh	r3, [r3, #0]
 800925e:	461a      	mov	r2, r3
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009268:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	3302      	adds	r3, #2
 800926e:	61bb      	str	r3, [r7, #24]
 8009270:	e007      	b.n	8009282 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	781a      	ldrb	r2, [r3, #0]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	3301      	adds	r3, #1
 8009280:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009288:	b29b      	uxth	r3, r3
 800928a:	3b01      	subs	r3, #1
 800928c:	b29a      	uxth	r2, r3
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800929a:	b29b      	uxth	r3, r3
 800929c:	2b00      	cmp	r3, #0
 800929e:	d1c8      	bne.n	8009232 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	9300      	str	r3, [sp, #0]
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	2200      	movs	r2, #0
 80092a8:	2140      	movs	r1, #64	; 0x40
 80092aa:	68f8      	ldr	r0, [r7, #12]
 80092ac:	f000 fec8 	bl	800a040 <UART_WaitOnFlagUntilTimeout>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d005      	beq.n	80092c2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2220      	movs	r2, #32
 80092ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80092be:	2303      	movs	r3, #3
 80092c0:	e006      	b.n	80092d0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2220      	movs	r2, #32
 80092c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80092ca:	2300      	movs	r3, #0
 80092cc:	e000      	b.n	80092d0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80092ce:	2302      	movs	r3, #2
  }
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3720      	adds	r7, #32
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092dc:	b092      	sub	sp, #72	; 0x48
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80092e2:	2300      	movs	r3, #0
 80092e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	689a      	ldr	r2, [r3, #8]
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	691b      	ldr	r3, [r3, #16]
 80092f0:	431a      	orrs	r2, r3
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	695b      	ldr	r3, [r3, #20]
 80092f6:	431a      	orrs	r2, r3
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	69db      	ldr	r3, [r3, #28]
 80092fc:	4313      	orrs	r3, r2
 80092fe:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	4bbe      	ldr	r3, [pc, #760]	; (8009600 <UART_SetConfig+0x328>)
 8009308:	4013      	ands	r3, r2
 800930a:	697a      	ldr	r2, [r7, #20]
 800930c:	6812      	ldr	r2, [r2, #0]
 800930e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009310:	430b      	orrs	r3, r1
 8009312:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	68da      	ldr	r2, [r3, #12]
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	430a      	orrs	r2, r1
 8009328:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	699b      	ldr	r3, [r3, #24]
 800932e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4ab3      	ldr	r2, [pc, #716]	; (8009604 <UART_SetConfig+0x32c>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d004      	beq.n	8009344 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	6a1b      	ldr	r3, [r3, #32]
 800933e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009340:	4313      	orrs	r3, r2
 8009342:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	689a      	ldr	r2, [r3, #8]
 800934a:	4baf      	ldr	r3, [pc, #700]	; (8009608 <UART_SetConfig+0x330>)
 800934c:	4013      	ands	r3, r2
 800934e:	697a      	ldr	r2, [r7, #20]
 8009350:	6812      	ldr	r2, [r2, #0]
 8009352:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009354:	430b      	orrs	r3, r1
 8009356:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800935e:	f023 010f 	bic.w	r1, r3, #15
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	430a      	orrs	r2, r1
 800936c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4aa6      	ldr	r2, [pc, #664]	; (800960c <UART_SetConfig+0x334>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d177      	bne.n	8009468 <UART_SetConfig+0x190>
 8009378:	4ba5      	ldr	r3, [pc, #660]	; (8009610 <UART_SetConfig+0x338>)
 800937a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800937c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009380:	2b28      	cmp	r3, #40	; 0x28
 8009382:	d86d      	bhi.n	8009460 <UART_SetConfig+0x188>
 8009384:	a201      	add	r2, pc, #4	; (adr r2, 800938c <UART_SetConfig+0xb4>)
 8009386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800938a:	bf00      	nop
 800938c:	08009431 	.word	0x08009431
 8009390:	08009461 	.word	0x08009461
 8009394:	08009461 	.word	0x08009461
 8009398:	08009461 	.word	0x08009461
 800939c:	08009461 	.word	0x08009461
 80093a0:	08009461 	.word	0x08009461
 80093a4:	08009461 	.word	0x08009461
 80093a8:	08009461 	.word	0x08009461
 80093ac:	08009439 	.word	0x08009439
 80093b0:	08009461 	.word	0x08009461
 80093b4:	08009461 	.word	0x08009461
 80093b8:	08009461 	.word	0x08009461
 80093bc:	08009461 	.word	0x08009461
 80093c0:	08009461 	.word	0x08009461
 80093c4:	08009461 	.word	0x08009461
 80093c8:	08009461 	.word	0x08009461
 80093cc:	08009441 	.word	0x08009441
 80093d0:	08009461 	.word	0x08009461
 80093d4:	08009461 	.word	0x08009461
 80093d8:	08009461 	.word	0x08009461
 80093dc:	08009461 	.word	0x08009461
 80093e0:	08009461 	.word	0x08009461
 80093e4:	08009461 	.word	0x08009461
 80093e8:	08009461 	.word	0x08009461
 80093ec:	08009449 	.word	0x08009449
 80093f0:	08009461 	.word	0x08009461
 80093f4:	08009461 	.word	0x08009461
 80093f8:	08009461 	.word	0x08009461
 80093fc:	08009461 	.word	0x08009461
 8009400:	08009461 	.word	0x08009461
 8009404:	08009461 	.word	0x08009461
 8009408:	08009461 	.word	0x08009461
 800940c:	08009451 	.word	0x08009451
 8009410:	08009461 	.word	0x08009461
 8009414:	08009461 	.word	0x08009461
 8009418:	08009461 	.word	0x08009461
 800941c:	08009461 	.word	0x08009461
 8009420:	08009461 	.word	0x08009461
 8009424:	08009461 	.word	0x08009461
 8009428:	08009461 	.word	0x08009461
 800942c:	08009459 	.word	0x08009459
 8009430:	2301      	movs	r3, #1
 8009432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009436:	e222      	b.n	800987e <UART_SetConfig+0x5a6>
 8009438:	2304      	movs	r3, #4
 800943a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800943e:	e21e      	b.n	800987e <UART_SetConfig+0x5a6>
 8009440:	2308      	movs	r3, #8
 8009442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009446:	e21a      	b.n	800987e <UART_SetConfig+0x5a6>
 8009448:	2310      	movs	r3, #16
 800944a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800944e:	e216      	b.n	800987e <UART_SetConfig+0x5a6>
 8009450:	2320      	movs	r3, #32
 8009452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009456:	e212      	b.n	800987e <UART_SetConfig+0x5a6>
 8009458:	2340      	movs	r3, #64	; 0x40
 800945a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800945e:	e20e      	b.n	800987e <UART_SetConfig+0x5a6>
 8009460:	2380      	movs	r3, #128	; 0x80
 8009462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009466:	e20a      	b.n	800987e <UART_SetConfig+0x5a6>
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a69      	ldr	r2, [pc, #420]	; (8009614 <UART_SetConfig+0x33c>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d130      	bne.n	80094d4 <UART_SetConfig+0x1fc>
 8009472:	4b67      	ldr	r3, [pc, #412]	; (8009610 <UART_SetConfig+0x338>)
 8009474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009476:	f003 0307 	and.w	r3, r3, #7
 800947a:	2b05      	cmp	r3, #5
 800947c:	d826      	bhi.n	80094cc <UART_SetConfig+0x1f4>
 800947e:	a201      	add	r2, pc, #4	; (adr r2, 8009484 <UART_SetConfig+0x1ac>)
 8009480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009484:	0800949d 	.word	0x0800949d
 8009488:	080094a5 	.word	0x080094a5
 800948c:	080094ad 	.word	0x080094ad
 8009490:	080094b5 	.word	0x080094b5
 8009494:	080094bd 	.word	0x080094bd
 8009498:	080094c5 	.word	0x080094c5
 800949c:	2300      	movs	r3, #0
 800949e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094a2:	e1ec      	b.n	800987e <UART_SetConfig+0x5a6>
 80094a4:	2304      	movs	r3, #4
 80094a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094aa:	e1e8      	b.n	800987e <UART_SetConfig+0x5a6>
 80094ac:	2308      	movs	r3, #8
 80094ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094b2:	e1e4      	b.n	800987e <UART_SetConfig+0x5a6>
 80094b4:	2310      	movs	r3, #16
 80094b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094ba:	e1e0      	b.n	800987e <UART_SetConfig+0x5a6>
 80094bc:	2320      	movs	r3, #32
 80094be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094c2:	e1dc      	b.n	800987e <UART_SetConfig+0x5a6>
 80094c4:	2340      	movs	r3, #64	; 0x40
 80094c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094ca:	e1d8      	b.n	800987e <UART_SetConfig+0x5a6>
 80094cc:	2380      	movs	r3, #128	; 0x80
 80094ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094d2:	e1d4      	b.n	800987e <UART_SetConfig+0x5a6>
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4a4f      	ldr	r2, [pc, #316]	; (8009618 <UART_SetConfig+0x340>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d130      	bne.n	8009540 <UART_SetConfig+0x268>
 80094de:	4b4c      	ldr	r3, [pc, #304]	; (8009610 <UART_SetConfig+0x338>)
 80094e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094e2:	f003 0307 	and.w	r3, r3, #7
 80094e6:	2b05      	cmp	r3, #5
 80094e8:	d826      	bhi.n	8009538 <UART_SetConfig+0x260>
 80094ea:	a201      	add	r2, pc, #4	; (adr r2, 80094f0 <UART_SetConfig+0x218>)
 80094ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f0:	08009509 	.word	0x08009509
 80094f4:	08009511 	.word	0x08009511
 80094f8:	08009519 	.word	0x08009519
 80094fc:	08009521 	.word	0x08009521
 8009500:	08009529 	.word	0x08009529
 8009504:	08009531 	.word	0x08009531
 8009508:	2300      	movs	r3, #0
 800950a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800950e:	e1b6      	b.n	800987e <UART_SetConfig+0x5a6>
 8009510:	2304      	movs	r3, #4
 8009512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009516:	e1b2      	b.n	800987e <UART_SetConfig+0x5a6>
 8009518:	2308      	movs	r3, #8
 800951a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800951e:	e1ae      	b.n	800987e <UART_SetConfig+0x5a6>
 8009520:	2310      	movs	r3, #16
 8009522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009526:	e1aa      	b.n	800987e <UART_SetConfig+0x5a6>
 8009528:	2320      	movs	r3, #32
 800952a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800952e:	e1a6      	b.n	800987e <UART_SetConfig+0x5a6>
 8009530:	2340      	movs	r3, #64	; 0x40
 8009532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009536:	e1a2      	b.n	800987e <UART_SetConfig+0x5a6>
 8009538:	2380      	movs	r3, #128	; 0x80
 800953a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800953e:	e19e      	b.n	800987e <UART_SetConfig+0x5a6>
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a35      	ldr	r2, [pc, #212]	; (800961c <UART_SetConfig+0x344>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d130      	bne.n	80095ac <UART_SetConfig+0x2d4>
 800954a:	4b31      	ldr	r3, [pc, #196]	; (8009610 <UART_SetConfig+0x338>)
 800954c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800954e:	f003 0307 	and.w	r3, r3, #7
 8009552:	2b05      	cmp	r3, #5
 8009554:	d826      	bhi.n	80095a4 <UART_SetConfig+0x2cc>
 8009556:	a201      	add	r2, pc, #4	; (adr r2, 800955c <UART_SetConfig+0x284>)
 8009558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800955c:	08009575 	.word	0x08009575
 8009560:	0800957d 	.word	0x0800957d
 8009564:	08009585 	.word	0x08009585
 8009568:	0800958d 	.word	0x0800958d
 800956c:	08009595 	.word	0x08009595
 8009570:	0800959d 	.word	0x0800959d
 8009574:	2300      	movs	r3, #0
 8009576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800957a:	e180      	b.n	800987e <UART_SetConfig+0x5a6>
 800957c:	2304      	movs	r3, #4
 800957e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009582:	e17c      	b.n	800987e <UART_SetConfig+0x5a6>
 8009584:	2308      	movs	r3, #8
 8009586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800958a:	e178      	b.n	800987e <UART_SetConfig+0x5a6>
 800958c:	2310      	movs	r3, #16
 800958e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009592:	e174      	b.n	800987e <UART_SetConfig+0x5a6>
 8009594:	2320      	movs	r3, #32
 8009596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800959a:	e170      	b.n	800987e <UART_SetConfig+0x5a6>
 800959c:	2340      	movs	r3, #64	; 0x40
 800959e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095a2:	e16c      	b.n	800987e <UART_SetConfig+0x5a6>
 80095a4:	2380      	movs	r3, #128	; 0x80
 80095a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095aa:	e168      	b.n	800987e <UART_SetConfig+0x5a6>
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a1b      	ldr	r2, [pc, #108]	; (8009620 <UART_SetConfig+0x348>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d142      	bne.n	800963c <UART_SetConfig+0x364>
 80095b6:	4b16      	ldr	r3, [pc, #88]	; (8009610 <UART_SetConfig+0x338>)
 80095b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095ba:	f003 0307 	and.w	r3, r3, #7
 80095be:	2b05      	cmp	r3, #5
 80095c0:	d838      	bhi.n	8009634 <UART_SetConfig+0x35c>
 80095c2:	a201      	add	r2, pc, #4	; (adr r2, 80095c8 <UART_SetConfig+0x2f0>)
 80095c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c8:	080095e1 	.word	0x080095e1
 80095cc:	080095e9 	.word	0x080095e9
 80095d0:	080095f1 	.word	0x080095f1
 80095d4:	080095f9 	.word	0x080095f9
 80095d8:	08009625 	.word	0x08009625
 80095dc:	0800962d 	.word	0x0800962d
 80095e0:	2300      	movs	r3, #0
 80095e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095e6:	e14a      	b.n	800987e <UART_SetConfig+0x5a6>
 80095e8:	2304      	movs	r3, #4
 80095ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095ee:	e146      	b.n	800987e <UART_SetConfig+0x5a6>
 80095f0:	2308      	movs	r3, #8
 80095f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095f6:	e142      	b.n	800987e <UART_SetConfig+0x5a6>
 80095f8:	2310      	movs	r3, #16
 80095fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095fe:	e13e      	b.n	800987e <UART_SetConfig+0x5a6>
 8009600:	cfff69f3 	.word	0xcfff69f3
 8009604:	58000c00 	.word	0x58000c00
 8009608:	11fff4ff 	.word	0x11fff4ff
 800960c:	40011000 	.word	0x40011000
 8009610:	58024400 	.word	0x58024400
 8009614:	40004400 	.word	0x40004400
 8009618:	40004800 	.word	0x40004800
 800961c:	40004c00 	.word	0x40004c00
 8009620:	40005000 	.word	0x40005000
 8009624:	2320      	movs	r3, #32
 8009626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800962a:	e128      	b.n	800987e <UART_SetConfig+0x5a6>
 800962c:	2340      	movs	r3, #64	; 0x40
 800962e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009632:	e124      	b.n	800987e <UART_SetConfig+0x5a6>
 8009634:	2380      	movs	r3, #128	; 0x80
 8009636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800963a:	e120      	b.n	800987e <UART_SetConfig+0x5a6>
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4acb      	ldr	r2, [pc, #812]	; (8009970 <UART_SetConfig+0x698>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d176      	bne.n	8009734 <UART_SetConfig+0x45c>
 8009646:	4bcb      	ldr	r3, [pc, #812]	; (8009974 <UART_SetConfig+0x69c>)
 8009648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800964a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800964e:	2b28      	cmp	r3, #40	; 0x28
 8009650:	d86c      	bhi.n	800972c <UART_SetConfig+0x454>
 8009652:	a201      	add	r2, pc, #4	; (adr r2, 8009658 <UART_SetConfig+0x380>)
 8009654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009658:	080096fd 	.word	0x080096fd
 800965c:	0800972d 	.word	0x0800972d
 8009660:	0800972d 	.word	0x0800972d
 8009664:	0800972d 	.word	0x0800972d
 8009668:	0800972d 	.word	0x0800972d
 800966c:	0800972d 	.word	0x0800972d
 8009670:	0800972d 	.word	0x0800972d
 8009674:	0800972d 	.word	0x0800972d
 8009678:	08009705 	.word	0x08009705
 800967c:	0800972d 	.word	0x0800972d
 8009680:	0800972d 	.word	0x0800972d
 8009684:	0800972d 	.word	0x0800972d
 8009688:	0800972d 	.word	0x0800972d
 800968c:	0800972d 	.word	0x0800972d
 8009690:	0800972d 	.word	0x0800972d
 8009694:	0800972d 	.word	0x0800972d
 8009698:	0800970d 	.word	0x0800970d
 800969c:	0800972d 	.word	0x0800972d
 80096a0:	0800972d 	.word	0x0800972d
 80096a4:	0800972d 	.word	0x0800972d
 80096a8:	0800972d 	.word	0x0800972d
 80096ac:	0800972d 	.word	0x0800972d
 80096b0:	0800972d 	.word	0x0800972d
 80096b4:	0800972d 	.word	0x0800972d
 80096b8:	08009715 	.word	0x08009715
 80096bc:	0800972d 	.word	0x0800972d
 80096c0:	0800972d 	.word	0x0800972d
 80096c4:	0800972d 	.word	0x0800972d
 80096c8:	0800972d 	.word	0x0800972d
 80096cc:	0800972d 	.word	0x0800972d
 80096d0:	0800972d 	.word	0x0800972d
 80096d4:	0800972d 	.word	0x0800972d
 80096d8:	0800971d 	.word	0x0800971d
 80096dc:	0800972d 	.word	0x0800972d
 80096e0:	0800972d 	.word	0x0800972d
 80096e4:	0800972d 	.word	0x0800972d
 80096e8:	0800972d 	.word	0x0800972d
 80096ec:	0800972d 	.word	0x0800972d
 80096f0:	0800972d 	.word	0x0800972d
 80096f4:	0800972d 	.word	0x0800972d
 80096f8:	08009725 	.word	0x08009725
 80096fc:	2301      	movs	r3, #1
 80096fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009702:	e0bc      	b.n	800987e <UART_SetConfig+0x5a6>
 8009704:	2304      	movs	r3, #4
 8009706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800970a:	e0b8      	b.n	800987e <UART_SetConfig+0x5a6>
 800970c:	2308      	movs	r3, #8
 800970e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009712:	e0b4      	b.n	800987e <UART_SetConfig+0x5a6>
 8009714:	2310      	movs	r3, #16
 8009716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800971a:	e0b0      	b.n	800987e <UART_SetConfig+0x5a6>
 800971c:	2320      	movs	r3, #32
 800971e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009722:	e0ac      	b.n	800987e <UART_SetConfig+0x5a6>
 8009724:	2340      	movs	r3, #64	; 0x40
 8009726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800972a:	e0a8      	b.n	800987e <UART_SetConfig+0x5a6>
 800972c:	2380      	movs	r3, #128	; 0x80
 800972e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009732:	e0a4      	b.n	800987e <UART_SetConfig+0x5a6>
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a8f      	ldr	r2, [pc, #572]	; (8009978 <UART_SetConfig+0x6a0>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d130      	bne.n	80097a0 <UART_SetConfig+0x4c8>
 800973e:	4b8d      	ldr	r3, [pc, #564]	; (8009974 <UART_SetConfig+0x69c>)
 8009740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009742:	f003 0307 	and.w	r3, r3, #7
 8009746:	2b05      	cmp	r3, #5
 8009748:	d826      	bhi.n	8009798 <UART_SetConfig+0x4c0>
 800974a:	a201      	add	r2, pc, #4	; (adr r2, 8009750 <UART_SetConfig+0x478>)
 800974c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009750:	08009769 	.word	0x08009769
 8009754:	08009771 	.word	0x08009771
 8009758:	08009779 	.word	0x08009779
 800975c:	08009781 	.word	0x08009781
 8009760:	08009789 	.word	0x08009789
 8009764:	08009791 	.word	0x08009791
 8009768:	2300      	movs	r3, #0
 800976a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800976e:	e086      	b.n	800987e <UART_SetConfig+0x5a6>
 8009770:	2304      	movs	r3, #4
 8009772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009776:	e082      	b.n	800987e <UART_SetConfig+0x5a6>
 8009778:	2308      	movs	r3, #8
 800977a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800977e:	e07e      	b.n	800987e <UART_SetConfig+0x5a6>
 8009780:	2310      	movs	r3, #16
 8009782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009786:	e07a      	b.n	800987e <UART_SetConfig+0x5a6>
 8009788:	2320      	movs	r3, #32
 800978a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800978e:	e076      	b.n	800987e <UART_SetConfig+0x5a6>
 8009790:	2340      	movs	r3, #64	; 0x40
 8009792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009796:	e072      	b.n	800987e <UART_SetConfig+0x5a6>
 8009798:	2380      	movs	r3, #128	; 0x80
 800979a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800979e:	e06e      	b.n	800987e <UART_SetConfig+0x5a6>
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a75      	ldr	r2, [pc, #468]	; (800997c <UART_SetConfig+0x6a4>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d130      	bne.n	800980c <UART_SetConfig+0x534>
 80097aa:	4b72      	ldr	r3, [pc, #456]	; (8009974 <UART_SetConfig+0x69c>)
 80097ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097ae:	f003 0307 	and.w	r3, r3, #7
 80097b2:	2b05      	cmp	r3, #5
 80097b4:	d826      	bhi.n	8009804 <UART_SetConfig+0x52c>
 80097b6:	a201      	add	r2, pc, #4	; (adr r2, 80097bc <UART_SetConfig+0x4e4>)
 80097b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097bc:	080097d5 	.word	0x080097d5
 80097c0:	080097dd 	.word	0x080097dd
 80097c4:	080097e5 	.word	0x080097e5
 80097c8:	080097ed 	.word	0x080097ed
 80097cc:	080097f5 	.word	0x080097f5
 80097d0:	080097fd 	.word	0x080097fd
 80097d4:	2300      	movs	r3, #0
 80097d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097da:	e050      	b.n	800987e <UART_SetConfig+0x5a6>
 80097dc:	2304      	movs	r3, #4
 80097de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097e2:	e04c      	b.n	800987e <UART_SetConfig+0x5a6>
 80097e4:	2308      	movs	r3, #8
 80097e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097ea:	e048      	b.n	800987e <UART_SetConfig+0x5a6>
 80097ec:	2310      	movs	r3, #16
 80097ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097f2:	e044      	b.n	800987e <UART_SetConfig+0x5a6>
 80097f4:	2320      	movs	r3, #32
 80097f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097fa:	e040      	b.n	800987e <UART_SetConfig+0x5a6>
 80097fc:	2340      	movs	r3, #64	; 0x40
 80097fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009802:	e03c      	b.n	800987e <UART_SetConfig+0x5a6>
 8009804:	2380      	movs	r3, #128	; 0x80
 8009806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800980a:	e038      	b.n	800987e <UART_SetConfig+0x5a6>
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a5b      	ldr	r2, [pc, #364]	; (8009980 <UART_SetConfig+0x6a8>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d130      	bne.n	8009878 <UART_SetConfig+0x5a0>
 8009816:	4b57      	ldr	r3, [pc, #348]	; (8009974 <UART_SetConfig+0x69c>)
 8009818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800981a:	f003 0307 	and.w	r3, r3, #7
 800981e:	2b05      	cmp	r3, #5
 8009820:	d826      	bhi.n	8009870 <UART_SetConfig+0x598>
 8009822:	a201      	add	r2, pc, #4	; (adr r2, 8009828 <UART_SetConfig+0x550>)
 8009824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009828:	08009841 	.word	0x08009841
 800982c:	08009849 	.word	0x08009849
 8009830:	08009851 	.word	0x08009851
 8009834:	08009859 	.word	0x08009859
 8009838:	08009861 	.word	0x08009861
 800983c:	08009869 	.word	0x08009869
 8009840:	2302      	movs	r3, #2
 8009842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009846:	e01a      	b.n	800987e <UART_SetConfig+0x5a6>
 8009848:	2304      	movs	r3, #4
 800984a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800984e:	e016      	b.n	800987e <UART_SetConfig+0x5a6>
 8009850:	2308      	movs	r3, #8
 8009852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009856:	e012      	b.n	800987e <UART_SetConfig+0x5a6>
 8009858:	2310      	movs	r3, #16
 800985a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800985e:	e00e      	b.n	800987e <UART_SetConfig+0x5a6>
 8009860:	2320      	movs	r3, #32
 8009862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009866:	e00a      	b.n	800987e <UART_SetConfig+0x5a6>
 8009868:	2340      	movs	r3, #64	; 0x40
 800986a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800986e:	e006      	b.n	800987e <UART_SetConfig+0x5a6>
 8009870:	2380      	movs	r3, #128	; 0x80
 8009872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009876:	e002      	b.n	800987e <UART_SetConfig+0x5a6>
 8009878:	2380      	movs	r3, #128	; 0x80
 800987a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a3f      	ldr	r2, [pc, #252]	; (8009980 <UART_SetConfig+0x6a8>)
 8009884:	4293      	cmp	r3, r2
 8009886:	f040 80f8 	bne.w	8009a7a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800988a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800988e:	2b20      	cmp	r3, #32
 8009890:	dc46      	bgt.n	8009920 <UART_SetConfig+0x648>
 8009892:	2b02      	cmp	r3, #2
 8009894:	f2c0 8082 	blt.w	800999c <UART_SetConfig+0x6c4>
 8009898:	3b02      	subs	r3, #2
 800989a:	2b1e      	cmp	r3, #30
 800989c:	d87e      	bhi.n	800999c <UART_SetConfig+0x6c4>
 800989e:	a201      	add	r2, pc, #4	; (adr r2, 80098a4 <UART_SetConfig+0x5cc>)
 80098a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a4:	08009927 	.word	0x08009927
 80098a8:	0800999d 	.word	0x0800999d
 80098ac:	0800992f 	.word	0x0800992f
 80098b0:	0800999d 	.word	0x0800999d
 80098b4:	0800999d 	.word	0x0800999d
 80098b8:	0800999d 	.word	0x0800999d
 80098bc:	0800993f 	.word	0x0800993f
 80098c0:	0800999d 	.word	0x0800999d
 80098c4:	0800999d 	.word	0x0800999d
 80098c8:	0800999d 	.word	0x0800999d
 80098cc:	0800999d 	.word	0x0800999d
 80098d0:	0800999d 	.word	0x0800999d
 80098d4:	0800999d 	.word	0x0800999d
 80098d8:	0800999d 	.word	0x0800999d
 80098dc:	0800994f 	.word	0x0800994f
 80098e0:	0800999d 	.word	0x0800999d
 80098e4:	0800999d 	.word	0x0800999d
 80098e8:	0800999d 	.word	0x0800999d
 80098ec:	0800999d 	.word	0x0800999d
 80098f0:	0800999d 	.word	0x0800999d
 80098f4:	0800999d 	.word	0x0800999d
 80098f8:	0800999d 	.word	0x0800999d
 80098fc:	0800999d 	.word	0x0800999d
 8009900:	0800999d 	.word	0x0800999d
 8009904:	0800999d 	.word	0x0800999d
 8009908:	0800999d 	.word	0x0800999d
 800990c:	0800999d 	.word	0x0800999d
 8009910:	0800999d 	.word	0x0800999d
 8009914:	0800999d 	.word	0x0800999d
 8009918:	0800999d 	.word	0x0800999d
 800991c:	0800998f 	.word	0x0800998f
 8009920:	2b40      	cmp	r3, #64	; 0x40
 8009922:	d037      	beq.n	8009994 <UART_SetConfig+0x6bc>
 8009924:	e03a      	b.n	800999c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009926:	f7fe fc6b 	bl	8008200 <HAL_RCCEx_GetD3PCLK1Freq>
 800992a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800992c:	e03c      	b.n	80099a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800992e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009932:	4618      	mov	r0, r3
 8009934:	f7fe fc7a 	bl	800822c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800993c:	e034      	b.n	80099a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800993e:	f107 0318 	add.w	r3, r7, #24
 8009942:	4618      	mov	r0, r3
 8009944:	f7fe fdc6 	bl	80084d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009948:	69fb      	ldr	r3, [r7, #28]
 800994a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800994c:	e02c      	b.n	80099a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800994e:	4b09      	ldr	r3, [pc, #36]	; (8009974 <UART_SetConfig+0x69c>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f003 0320 	and.w	r3, r3, #32
 8009956:	2b00      	cmp	r3, #0
 8009958:	d016      	beq.n	8009988 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800995a:	4b06      	ldr	r3, [pc, #24]	; (8009974 <UART_SetConfig+0x69c>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	08db      	lsrs	r3, r3, #3
 8009960:	f003 0303 	and.w	r3, r3, #3
 8009964:	4a07      	ldr	r2, [pc, #28]	; (8009984 <UART_SetConfig+0x6ac>)
 8009966:	fa22 f303 	lsr.w	r3, r2, r3
 800996a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800996c:	e01c      	b.n	80099a8 <UART_SetConfig+0x6d0>
 800996e:	bf00      	nop
 8009970:	40011400 	.word	0x40011400
 8009974:	58024400 	.word	0x58024400
 8009978:	40007800 	.word	0x40007800
 800997c:	40007c00 	.word	0x40007c00
 8009980:	58000c00 	.word	0x58000c00
 8009984:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009988:	4b9d      	ldr	r3, [pc, #628]	; (8009c00 <UART_SetConfig+0x928>)
 800998a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800998c:	e00c      	b.n	80099a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800998e:	4b9d      	ldr	r3, [pc, #628]	; (8009c04 <UART_SetConfig+0x92c>)
 8009990:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009992:	e009      	b.n	80099a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009994:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009998:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800999a:	e005      	b.n	80099a8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800999c:	2300      	movs	r3, #0
 800999e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80099a0:	2301      	movs	r3, #1
 80099a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80099a6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80099a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	f000 81de 	beq.w	8009d6c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b4:	4a94      	ldr	r2, [pc, #592]	; (8009c08 <UART_SetConfig+0x930>)
 80099b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099ba:	461a      	mov	r2, r3
 80099bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099be:	fbb3 f3f2 	udiv	r3, r3, r2
 80099c2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	685a      	ldr	r2, [r3, #4]
 80099c8:	4613      	mov	r3, r2
 80099ca:	005b      	lsls	r3, r3, #1
 80099cc:	4413      	add	r3, r2
 80099ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d305      	bcc.n	80099e0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80099da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099dc:	429a      	cmp	r2, r3
 80099de:	d903      	bls.n	80099e8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80099e0:	2301      	movs	r3, #1
 80099e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80099e6:	e1c1      	b.n	8009d6c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099ea:	2200      	movs	r2, #0
 80099ec:	60bb      	str	r3, [r7, #8]
 80099ee:	60fa      	str	r2, [r7, #12]
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f4:	4a84      	ldr	r2, [pc, #528]	; (8009c08 <UART_SetConfig+0x930>)
 80099f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	2200      	movs	r2, #0
 80099fe:	603b      	str	r3, [r7, #0]
 8009a00:	607a      	str	r2, [r7, #4]
 8009a02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009a0a:	f7f7 f949 	bl	8000ca0 <__aeabi_uldivmod>
 8009a0e:	4602      	mov	r2, r0
 8009a10:	460b      	mov	r3, r1
 8009a12:	4610      	mov	r0, r2
 8009a14:	4619      	mov	r1, r3
 8009a16:	f04f 0200 	mov.w	r2, #0
 8009a1a:	f04f 0300 	mov.w	r3, #0
 8009a1e:	020b      	lsls	r3, r1, #8
 8009a20:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009a24:	0202      	lsls	r2, r0, #8
 8009a26:	6979      	ldr	r1, [r7, #20]
 8009a28:	6849      	ldr	r1, [r1, #4]
 8009a2a:	0849      	lsrs	r1, r1, #1
 8009a2c:	2000      	movs	r0, #0
 8009a2e:	460c      	mov	r4, r1
 8009a30:	4605      	mov	r5, r0
 8009a32:	eb12 0804 	adds.w	r8, r2, r4
 8009a36:	eb43 0905 	adc.w	r9, r3, r5
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	469a      	mov	sl, r3
 8009a42:	4693      	mov	fp, r2
 8009a44:	4652      	mov	r2, sl
 8009a46:	465b      	mov	r3, fp
 8009a48:	4640      	mov	r0, r8
 8009a4a:	4649      	mov	r1, r9
 8009a4c:	f7f7 f928 	bl	8000ca0 <__aeabi_uldivmod>
 8009a50:	4602      	mov	r2, r0
 8009a52:	460b      	mov	r3, r1
 8009a54:	4613      	mov	r3, r2
 8009a56:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a5e:	d308      	bcc.n	8009a72 <UART_SetConfig+0x79a>
 8009a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a66:	d204      	bcs.n	8009a72 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a6e:	60da      	str	r2, [r3, #12]
 8009a70:	e17c      	b.n	8009d6c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009a78:	e178      	b.n	8009d6c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	69db      	ldr	r3, [r3, #28]
 8009a7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a82:	f040 80c5 	bne.w	8009c10 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009a86:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009a8a:	2b20      	cmp	r3, #32
 8009a8c:	dc48      	bgt.n	8009b20 <UART_SetConfig+0x848>
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	db7b      	blt.n	8009b8a <UART_SetConfig+0x8b2>
 8009a92:	2b20      	cmp	r3, #32
 8009a94:	d879      	bhi.n	8009b8a <UART_SetConfig+0x8b2>
 8009a96:	a201      	add	r2, pc, #4	; (adr r2, 8009a9c <UART_SetConfig+0x7c4>)
 8009a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a9c:	08009b27 	.word	0x08009b27
 8009aa0:	08009b2f 	.word	0x08009b2f
 8009aa4:	08009b8b 	.word	0x08009b8b
 8009aa8:	08009b8b 	.word	0x08009b8b
 8009aac:	08009b37 	.word	0x08009b37
 8009ab0:	08009b8b 	.word	0x08009b8b
 8009ab4:	08009b8b 	.word	0x08009b8b
 8009ab8:	08009b8b 	.word	0x08009b8b
 8009abc:	08009b47 	.word	0x08009b47
 8009ac0:	08009b8b 	.word	0x08009b8b
 8009ac4:	08009b8b 	.word	0x08009b8b
 8009ac8:	08009b8b 	.word	0x08009b8b
 8009acc:	08009b8b 	.word	0x08009b8b
 8009ad0:	08009b8b 	.word	0x08009b8b
 8009ad4:	08009b8b 	.word	0x08009b8b
 8009ad8:	08009b8b 	.word	0x08009b8b
 8009adc:	08009b57 	.word	0x08009b57
 8009ae0:	08009b8b 	.word	0x08009b8b
 8009ae4:	08009b8b 	.word	0x08009b8b
 8009ae8:	08009b8b 	.word	0x08009b8b
 8009aec:	08009b8b 	.word	0x08009b8b
 8009af0:	08009b8b 	.word	0x08009b8b
 8009af4:	08009b8b 	.word	0x08009b8b
 8009af8:	08009b8b 	.word	0x08009b8b
 8009afc:	08009b8b 	.word	0x08009b8b
 8009b00:	08009b8b 	.word	0x08009b8b
 8009b04:	08009b8b 	.word	0x08009b8b
 8009b08:	08009b8b 	.word	0x08009b8b
 8009b0c:	08009b8b 	.word	0x08009b8b
 8009b10:	08009b8b 	.word	0x08009b8b
 8009b14:	08009b8b 	.word	0x08009b8b
 8009b18:	08009b8b 	.word	0x08009b8b
 8009b1c:	08009b7d 	.word	0x08009b7d
 8009b20:	2b40      	cmp	r3, #64	; 0x40
 8009b22:	d02e      	beq.n	8009b82 <UART_SetConfig+0x8aa>
 8009b24:	e031      	b.n	8009b8a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b26:	f7fd f919 	bl	8006d5c <HAL_RCC_GetPCLK1Freq>
 8009b2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009b2c:	e033      	b.n	8009b96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b2e:	f7fd f92b 	bl	8006d88 <HAL_RCC_GetPCLK2Freq>
 8009b32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009b34:	e02f      	b.n	8009b96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7fe fb76 	bl	800822c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b44:	e027      	b.n	8009b96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b46:	f107 0318 	add.w	r3, r7, #24
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f7fe fcc2 	bl	80084d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009b50:	69fb      	ldr	r3, [r7, #28]
 8009b52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b54:	e01f      	b.n	8009b96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b56:	4b2d      	ldr	r3, [pc, #180]	; (8009c0c <UART_SetConfig+0x934>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f003 0320 	and.w	r3, r3, #32
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d009      	beq.n	8009b76 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009b62:	4b2a      	ldr	r3, [pc, #168]	; (8009c0c <UART_SetConfig+0x934>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	08db      	lsrs	r3, r3, #3
 8009b68:	f003 0303 	and.w	r3, r3, #3
 8009b6c:	4a24      	ldr	r2, [pc, #144]	; (8009c00 <UART_SetConfig+0x928>)
 8009b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8009b72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009b74:	e00f      	b.n	8009b96 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009b76:	4b22      	ldr	r3, [pc, #136]	; (8009c00 <UART_SetConfig+0x928>)
 8009b78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b7a:	e00c      	b.n	8009b96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009b7c:	4b21      	ldr	r3, [pc, #132]	; (8009c04 <UART_SetConfig+0x92c>)
 8009b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b80:	e009      	b.n	8009b96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b88:	e005      	b.n	8009b96 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009b94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	f000 80e7 	beq.w	8009d6c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba2:	4a19      	ldr	r2, [pc, #100]	; (8009c08 <UART_SetConfig+0x930>)
 8009ba4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ba8:	461a      	mov	r2, r3
 8009baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bac:	fbb3 f3f2 	udiv	r3, r3, r2
 8009bb0:	005a      	lsls	r2, r3, #1
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	085b      	lsrs	r3, r3, #1
 8009bb8:	441a      	add	r2, r3
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bc2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc6:	2b0f      	cmp	r3, #15
 8009bc8:	d916      	bls.n	8009bf8 <UART_SetConfig+0x920>
 8009bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bd0:	d212      	bcs.n	8009bf8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	f023 030f 	bic.w	r3, r3, #15
 8009bda:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bde:	085b      	lsrs	r3, r3, #1
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	f003 0307 	and.w	r3, r3, #7
 8009be6:	b29a      	uxth	r2, r3
 8009be8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009bea:	4313      	orrs	r3, r2
 8009bec:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009bf4:	60da      	str	r2, [r3, #12]
 8009bf6:	e0b9      	b.n	8009d6c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009bfe:	e0b5      	b.n	8009d6c <UART_SetConfig+0xa94>
 8009c00:	03d09000 	.word	0x03d09000
 8009c04:	003d0900 	.word	0x003d0900
 8009c08:	0800d33c 	.word	0x0800d33c
 8009c0c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c10:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009c14:	2b20      	cmp	r3, #32
 8009c16:	dc49      	bgt.n	8009cac <UART_SetConfig+0x9d4>
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	db7c      	blt.n	8009d16 <UART_SetConfig+0xa3e>
 8009c1c:	2b20      	cmp	r3, #32
 8009c1e:	d87a      	bhi.n	8009d16 <UART_SetConfig+0xa3e>
 8009c20:	a201      	add	r2, pc, #4	; (adr r2, 8009c28 <UART_SetConfig+0x950>)
 8009c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c26:	bf00      	nop
 8009c28:	08009cb3 	.word	0x08009cb3
 8009c2c:	08009cbb 	.word	0x08009cbb
 8009c30:	08009d17 	.word	0x08009d17
 8009c34:	08009d17 	.word	0x08009d17
 8009c38:	08009cc3 	.word	0x08009cc3
 8009c3c:	08009d17 	.word	0x08009d17
 8009c40:	08009d17 	.word	0x08009d17
 8009c44:	08009d17 	.word	0x08009d17
 8009c48:	08009cd3 	.word	0x08009cd3
 8009c4c:	08009d17 	.word	0x08009d17
 8009c50:	08009d17 	.word	0x08009d17
 8009c54:	08009d17 	.word	0x08009d17
 8009c58:	08009d17 	.word	0x08009d17
 8009c5c:	08009d17 	.word	0x08009d17
 8009c60:	08009d17 	.word	0x08009d17
 8009c64:	08009d17 	.word	0x08009d17
 8009c68:	08009ce3 	.word	0x08009ce3
 8009c6c:	08009d17 	.word	0x08009d17
 8009c70:	08009d17 	.word	0x08009d17
 8009c74:	08009d17 	.word	0x08009d17
 8009c78:	08009d17 	.word	0x08009d17
 8009c7c:	08009d17 	.word	0x08009d17
 8009c80:	08009d17 	.word	0x08009d17
 8009c84:	08009d17 	.word	0x08009d17
 8009c88:	08009d17 	.word	0x08009d17
 8009c8c:	08009d17 	.word	0x08009d17
 8009c90:	08009d17 	.word	0x08009d17
 8009c94:	08009d17 	.word	0x08009d17
 8009c98:	08009d17 	.word	0x08009d17
 8009c9c:	08009d17 	.word	0x08009d17
 8009ca0:	08009d17 	.word	0x08009d17
 8009ca4:	08009d17 	.word	0x08009d17
 8009ca8:	08009d09 	.word	0x08009d09
 8009cac:	2b40      	cmp	r3, #64	; 0x40
 8009cae:	d02e      	beq.n	8009d0e <UART_SetConfig+0xa36>
 8009cb0:	e031      	b.n	8009d16 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009cb2:	f7fd f853 	bl	8006d5c <HAL_RCC_GetPCLK1Freq>
 8009cb6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009cb8:	e033      	b.n	8009d22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009cba:	f7fd f865 	bl	8006d88 <HAL_RCC_GetPCLK2Freq>
 8009cbe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009cc0:	e02f      	b.n	8009d22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7fe fab0 	bl	800822c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009cd0:	e027      	b.n	8009d22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cd2:	f107 0318 	add.w	r3, r7, #24
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f7fe fbfc 	bl	80084d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009cdc:	69fb      	ldr	r3, [r7, #28]
 8009cde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ce0:	e01f      	b.n	8009d22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ce2:	4b2d      	ldr	r3, [pc, #180]	; (8009d98 <UART_SetConfig+0xac0>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f003 0320 	and.w	r3, r3, #32
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d009      	beq.n	8009d02 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009cee:	4b2a      	ldr	r3, [pc, #168]	; (8009d98 <UART_SetConfig+0xac0>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	08db      	lsrs	r3, r3, #3
 8009cf4:	f003 0303 	and.w	r3, r3, #3
 8009cf8:	4a28      	ldr	r2, [pc, #160]	; (8009d9c <UART_SetConfig+0xac4>)
 8009cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8009cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009d00:	e00f      	b.n	8009d22 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009d02:	4b26      	ldr	r3, [pc, #152]	; (8009d9c <UART_SetConfig+0xac4>)
 8009d04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d06:	e00c      	b.n	8009d22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009d08:	4b25      	ldr	r3, [pc, #148]	; (8009da0 <UART_SetConfig+0xac8>)
 8009d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d0c:	e009      	b.n	8009d22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d14:	e005      	b.n	8009d22 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009d16:	2300      	movs	r3, #0
 8009d18:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009d20:	bf00      	nop
    }

    if (pclk != 0U)
 8009d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d021      	beq.n	8009d6c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d2c:	4a1d      	ldr	r2, [pc, #116]	; (8009da4 <UART_SetConfig+0xacc>)
 8009d2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d32:	461a      	mov	r2, r3
 8009d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d36:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	085b      	lsrs	r3, r3, #1
 8009d40:	441a      	add	r2, r3
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d4a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d4e:	2b0f      	cmp	r3, #15
 8009d50:	d909      	bls.n	8009d66 <UART_SetConfig+0xa8e>
 8009d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d58:	d205      	bcs.n	8009d66 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d5c:	b29a      	uxth	r2, r3
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	60da      	str	r2, [r3, #12]
 8009d64:	e002      	b.n	8009d6c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009d66:	2301      	movs	r3, #1
 8009d68:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	2201      	movs	r2, #1
 8009d70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	2201      	movs	r2, #1
 8009d78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	2200      	movs	r2, #0
 8009d86:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009d88:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3748      	adds	r7, #72	; 0x48
 8009d90:	46bd      	mov	sp, r7
 8009d92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d96:	bf00      	nop
 8009d98:	58024400 	.word	0x58024400
 8009d9c:	03d09000 	.word	0x03d09000
 8009da0:	003d0900 	.word	0x003d0900
 8009da4:	0800d33c 	.word	0x0800d33c

08009da8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b083      	sub	sp, #12
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009db4:	f003 0301 	and.w	r3, r3, #1
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d00a      	beq.n	8009dd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	430a      	orrs	r2, r1
 8009dd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dd6:	f003 0302 	and.w	r3, r3, #2
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d00a      	beq.n	8009df4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	430a      	orrs	r2, r1
 8009df2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009df8:	f003 0304 	and.w	r3, r3, #4
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d00a      	beq.n	8009e16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	430a      	orrs	r2, r1
 8009e14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e1a:	f003 0308 	and.w	r3, r3, #8
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d00a      	beq.n	8009e38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	430a      	orrs	r2, r1
 8009e36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e3c:	f003 0310 	and.w	r3, r3, #16
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d00a      	beq.n	8009e5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	689b      	ldr	r3, [r3, #8]
 8009e4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	430a      	orrs	r2, r1
 8009e58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e5e:	f003 0320 	and.w	r3, r3, #32
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d00a      	beq.n	8009e7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	689b      	ldr	r3, [r3, #8]
 8009e6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	430a      	orrs	r2, r1
 8009e7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d01a      	beq.n	8009ebe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	430a      	orrs	r2, r1
 8009e9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ea2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ea6:	d10a      	bne.n	8009ebe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	430a      	orrs	r2, r1
 8009ebc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d00a      	beq.n	8009ee0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	430a      	orrs	r2, r1
 8009ede:	605a      	str	r2, [r3, #4]
  }
}
 8009ee0:	bf00      	nop
 8009ee2:	370c      	adds	r7, #12
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr

08009eec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b098      	sub	sp, #96	; 0x60
 8009ef0:	af02      	add	r7, sp, #8
 8009ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009efc:	f7f8 fd04 	bl	8002908 <HAL_GetTick>
 8009f00:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f003 0308 	and.w	r3, r3, #8
 8009f0c:	2b08      	cmp	r3, #8
 8009f0e:	d12f      	bne.n	8009f70 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f14:	9300      	str	r3, [sp, #0]
 8009f16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 f88e 	bl	800a040 <UART_WaitOnFlagUntilTimeout>
 8009f24:	4603      	mov	r3, r0
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d022      	beq.n	8009f70 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f32:	e853 3f00 	ldrex	r3, [r3]
 8009f36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f3e:	653b      	str	r3, [r7, #80]	; 0x50
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	461a      	mov	r2, r3
 8009f46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f48:	647b      	str	r3, [r7, #68]	; 0x44
 8009f4a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009f4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f50:	e841 2300 	strex	r3, r2, [r1]
 8009f54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d1e6      	bne.n	8009f2a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2220      	movs	r2, #32
 8009f60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2200      	movs	r2, #0
 8009f68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f6c:	2303      	movs	r3, #3
 8009f6e:	e063      	b.n	800a038 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f003 0304 	and.w	r3, r3, #4
 8009f7a:	2b04      	cmp	r3, #4
 8009f7c:	d149      	bne.n	800a012 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f7e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f82:	9300      	str	r3, [sp, #0]
 8009f84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f86:	2200      	movs	r2, #0
 8009f88:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f000 f857 	bl	800a040 <UART_WaitOnFlagUntilTimeout>
 8009f92:	4603      	mov	r3, r0
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d03c      	beq.n	800a012 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa0:	e853 3f00 	ldrex	r3, [r3]
 8009fa4:	623b      	str	r3, [r7, #32]
   return(result);
 8009fa6:	6a3b      	ldr	r3, [r7, #32]
 8009fa8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009fac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fb6:	633b      	str	r3, [r7, #48]	; 0x30
 8009fb8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fbe:	e841 2300 	strex	r3, r2, [r1]
 8009fc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d1e6      	bne.n	8009f98 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	3308      	adds	r3, #8
 8009fd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	e853 3f00 	ldrex	r3, [r3]
 8009fd8:	60fb      	str	r3, [r7, #12]
   return(result);
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	f023 0301 	bic.w	r3, r3, #1
 8009fe0:	64bb      	str	r3, [r7, #72]	; 0x48
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	3308      	adds	r3, #8
 8009fe8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009fea:	61fa      	str	r2, [r7, #28]
 8009fec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fee:	69b9      	ldr	r1, [r7, #24]
 8009ff0:	69fa      	ldr	r2, [r7, #28]
 8009ff2:	e841 2300 	strex	r3, r2, [r1]
 8009ff6:	617b      	str	r3, [r7, #20]
   return(result);
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d1e5      	bne.n	8009fca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2220      	movs	r2, #32
 800a002:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a00e:	2303      	movs	r3, #3
 800a010:	e012      	b.n	800a038 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2220      	movs	r2, #32
 800a016:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2220      	movs	r2, #32
 800a01e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2200      	movs	r2, #0
 800a026:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2200      	movs	r2, #0
 800a02c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2200      	movs	r2, #0
 800a032:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a036:	2300      	movs	r3, #0
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3758      	adds	r7, #88	; 0x58
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	60b9      	str	r1, [r7, #8]
 800a04a:	603b      	str	r3, [r7, #0]
 800a04c:	4613      	mov	r3, r2
 800a04e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a050:	e049      	b.n	800a0e6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a052:	69bb      	ldr	r3, [r7, #24]
 800a054:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a058:	d045      	beq.n	800a0e6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a05a:	f7f8 fc55 	bl	8002908 <HAL_GetTick>
 800a05e:	4602      	mov	r2, r0
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	1ad3      	subs	r3, r2, r3
 800a064:	69ba      	ldr	r2, [r7, #24]
 800a066:	429a      	cmp	r2, r3
 800a068:	d302      	bcc.n	800a070 <UART_WaitOnFlagUntilTimeout+0x30>
 800a06a:	69bb      	ldr	r3, [r7, #24]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d101      	bne.n	800a074 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a070:	2303      	movs	r3, #3
 800a072:	e048      	b.n	800a106 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f003 0304 	and.w	r3, r3, #4
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d031      	beq.n	800a0e6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	69db      	ldr	r3, [r3, #28]
 800a088:	f003 0308 	and.w	r3, r3, #8
 800a08c:	2b08      	cmp	r3, #8
 800a08e:	d110      	bne.n	800a0b2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	2208      	movs	r2, #8
 800a096:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a098:	68f8      	ldr	r0, [r7, #12]
 800a09a:	f000 f839 	bl	800a110 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2208      	movs	r2, #8
 800a0a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	e029      	b.n	800a106 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	69db      	ldr	r3, [r3, #28]
 800a0b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a0bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0c0:	d111      	bne.n	800a0e6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a0ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a0cc:	68f8      	ldr	r0, [r7, #12]
 800a0ce:	f000 f81f 	bl	800a110 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2220      	movs	r2, #32
 800a0d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a0e2:	2303      	movs	r3, #3
 800a0e4:	e00f      	b.n	800a106 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	69da      	ldr	r2, [r3, #28]
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	4013      	ands	r3, r2
 800a0f0:	68ba      	ldr	r2, [r7, #8]
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	bf0c      	ite	eq
 800a0f6:	2301      	moveq	r3, #1
 800a0f8:	2300      	movne	r3, #0
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	79fb      	ldrb	r3, [r7, #7]
 800a100:	429a      	cmp	r2, r3
 800a102:	d0a6      	beq.n	800a052 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a104:	2300      	movs	r3, #0
}
 800a106:	4618      	mov	r0, r3
 800a108:	3710      	adds	r7, #16
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
	...

0800a110 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a110:	b480      	push	{r7}
 800a112:	b095      	sub	sp, #84	; 0x54
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a11e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a120:	e853 3f00 	ldrex	r3, [r3]
 800a124:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a128:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a12c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	461a      	mov	r2, r3
 800a134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a136:	643b      	str	r3, [r7, #64]	; 0x40
 800a138:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a13a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a13c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a13e:	e841 2300 	strex	r3, r2, [r1]
 800a142:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a146:	2b00      	cmp	r3, #0
 800a148:	d1e6      	bne.n	800a118 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	3308      	adds	r3, #8
 800a150:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a152:	6a3b      	ldr	r3, [r7, #32]
 800a154:	e853 3f00 	ldrex	r3, [r3]
 800a158:	61fb      	str	r3, [r7, #28]
   return(result);
 800a15a:	69fa      	ldr	r2, [r7, #28]
 800a15c:	4b1e      	ldr	r3, [pc, #120]	; (800a1d8 <UART_EndRxTransfer+0xc8>)
 800a15e:	4013      	ands	r3, r2
 800a160:	64bb      	str	r3, [r7, #72]	; 0x48
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	3308      	adds	r3, #8
 800a168:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a16a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a16c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a16e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a172:	e841 2300 	strex	r3, r2, [r1]
 800a176:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d1e5      	bne.n	800a14a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a182:	2b01      	cmp	r3, #1
 800a184:	d118      	bne.n	800a1b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	e853 3f00 	ldrex	r3, [r3]
 800a192:	60bb      	str	r3, [r7, #8]
   return(result);
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	f023 0310 	bic.w	r3, r3, #16
 800a19a:	647b      	str	r3, [r7, #68]	; 0x44
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1a4:	61bb      	str	r3, [r7, #24]
 800a1a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a8:	6979      	ldr	r1, [r7, #20]
 800a1aa:	69ba      	ldr	r2, [r7, #24]
 800a1ac:	e841 2300 	strex	r3, r2, [r1]
 800a1b0:	613b      	str	r3, [r7, #16]
   return(result);
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d1e6      	bne.n	800a186 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2220      	movs	r2, #32
 800a1bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a1cc:	bf00      	nop
 800a1ce:	3754      	adds	r7, #84	; 0x54
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr
 800a1d8:	effffffe 	.word	0xeffffffe

0800a1dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b085      	sub	sp, #20
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a1ea:	2b01      	cmp	r3, #1
 800a1ec:	d101      	bne.n	800a1f2 <HAL_UARTEx_DisableFifoMode+0x16>
 800a1ee:	2302      	movs	r3, #2
 800a1f0:	e027      	b.n	800a242 <HAL_UARTEx_DisableFifoMode+0x66>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2224      	movs	r2, #36	; 0x24
 800a1fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	681a      	ldr	r2, [r3, #0]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f022 0201 	bic.w	r2, r2, #1
 800a218:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a220:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2200      	movs	r2, #0
 800a226:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	68fa      	ldr	r2, [r7, #12]
 800a22e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2220      	movs	r2, #32
 800a234:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a240:	2300      	movs	r3, #0
}
 800a242:	4618      	mov	r0, r3
 800a244:	3714      	adds	r7, #20
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr

0800a24e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b084      	sub	sp, #16
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
 800a256:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a25e:	2b01      	cmp	r3, #1
 800a260:	d101      	bne.n	800a266 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a262:	2302      	movs	r3, #2
 800a264:	e02d      	b.n	800a2c2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2201      	movs	r2, #1
 800a26a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2224      	movs	r2, #36	; 0x24
 800a272:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f022 0201 	bic.w	r2, r2, #1
 800a28c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	689b      	ldr	r3, [r3, #8]
 800a294:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	683a      	ldr	r2, [r7, #0]
 800a29e:	430a      	orrs	r2, r1
 800a2a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 f850 	bl	800a348 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	68fa      	ldr	r2, [r7, #12]
 800a2ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2220      	movs	r2, #32
 800a2b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a2c0:	2300      	movs	r3, #0
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3710      	adds	r7, #16
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}

0800a2ca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b084      	sub	sp, #16
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
 800a2d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d101      	bne.n	800a2e2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a2de:	2302      	movs	r3, #2
 800a2e0:	e02d      	b.n	800a33e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2224      	movs	r2, #36	; 0x24
 800a2ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	681a      	ldr	r2, [r3, #0]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f022 0201 	bic.w	r2, r2, #1
 800a308:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	689b      	ldr	r3, [r3, #8]
 800a310:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	683a      	ldr	r2, [r7, #0]
 800a31a:	430a      	orrs	r2, r1
 800a31c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 f812 	bl	800a348 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	68fa      	ldr	r2, [r7, #12]
 800a32a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2220      	movs	r2, #32
 800a330:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2200      	movs	r2, #0
 800a338:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a33c:	2300      	movs	r3, #0
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3710      	adds	r7, #16
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
	...

0800a348 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a348:	b480      	push	{r7}
 800a34a:	b085      	sub	sp, #20
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a354:	2b00      	cmp	r3, #0
 800a356:	d108      	bne.n	800a36a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2201      	movs	r2, #1
 800a35c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2201      	movs	r2, #1
 800a364:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a368:	e031      	b.n	800a3ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a36a:	2310      	movs	r3, #16
 800a36c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a36e:	2310      	movs	r3, #16
 800a370:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	0e5b      	lsrs	r3, r3, #25
 800a37a:	b2db      	uxtb	r3, r3
 800a37c:	f003 0307 	and.w	r3, r3, #7
 800a380:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	0f5b      	lsrs	r3, r3, #29
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	f003 0307 	and.w	r3, r3, #7
 800a390:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a392:	7bbb      	ldrb	r3, [r7, #14]
 800a394:	7b3a      	ldrb	r2, [r7, #12]
 800a396:	4911      	ldr	r1, [pc, #68]	; (800a3dc <UARTEx_SetNbDataToProcess+0x94>)
 800a398:	5c8a      	ldrb	r2, [r1, r2]
 800a39a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a39e:	7b3a      	ldrb	r2, [r7, #12]
 800a3a0:	490f      	ldr	r1, [pc, #60]	; (800a3e0 <UARTEx_SetNbDataToProcess+0x98>)
 800a3a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a3a4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3a8:	b29a      	uxth	r2, r3
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a3b0:	7bfb      	ldrb	r3, [r7, #15]
 800a3b2:	7b7a      	ldrb	r2, [r7, #13]
 800a3b4:	4909      	ldr	r1, [pc, #36]	; (800a3dc <UARTEx_SetNbDataToProcess+0x94>)
 800a3b6:	5c8a      	ldrb	r2, [r1, r2]
 800a3b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a3bc:	7b7a      	ldrb	r2, [r7, #13]
 800a3be:	4908      	ldr	r1, [pc, #32]	; (800a3e0 <UARTEx_SetNbDataToProcess+0x98>)
 800a3c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a3c2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3c6:	b29a      	uxth	r2, r3
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a3ce:	bf00      	nop
 800a3d0:	3714      	adds	r7, #20
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr
 800a3da:	bf00      	nop
 800a3dc:	0800d354 	.word	0x0800d354
 800a3e0:	0800d35c 	.word	0x0800d35c

0800a3e4 <__errno>:
 800a3e4:	4b01      	ldr	r3, [pc, #4]	; (800a3ec <__errno+0x8>)
 800a3e6:	6818      	ldr	r0, [r3, #0]
 800a3e8:	4770      	bx	lr
 800a3ea:	bf00      	nop
 800a3ec:	2000003c 	.word	0x2000003c

0800a3f0 <__libc_init_array>:
 800a3f0:	b570      	push	{r4, r5, r6, lr}
 800a3f2:	4d0d      	ldr	r5, [pc, #52]	; (800a428 <__libc_init_array+0x38>)
 800a3f4:	4c0d      	ldr	r4, [pc, #52]	; (800a42c <__libc_init_array+0x3c>)
 800a3f6:	1b64      	subs	r4, r4, r5
 800a3f8:	10a4      	asrs	r4, r4, #2
 800a3fa:	2600      	movs	r6, #0
 800a3fc:	42a6      	cmp	r6, r4
 800a3fe:	d109      	bne.n	800a414 <__libc_init_array+0x24>
 800a400:	4d0b      	ldr	r5, [pc, #44]	; (800a430 <__libc_init_array+0x40>)
 800a402:	4c0c      	ldr	r4, [pc, #48]	; (800a434 <__libc_init_array+0x44>)
 800a404:	f002 fd1c 	bl	800ce40 <_init>
 800a408:	1b64      	subs	r4, r4, r5
 800a40a:	10a4      	asrs	r4, r4, #2
 800a40c:	2600      	movs	r6, #0
 800a40e:	42a6      	cmp	r6, r4
 800a410:	d105      	bne.n	800a41e <__libc_init_array+0x2e>
 800a412:	bd70      	pop	{r4, r5, r6, pc}
 800a414:	f855 3b04 	ldr.w	r3, [r5], #4
 800a418:	4798      	blx	r3
 800a41a:	3601      	adds	r6, #1
 800a41c:	e7ee      	b.n	800a3fc <__libc_init_array+0xc>
 800a41e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a422:	4798      	blx	r3
 800a424:	3601      	adds	r6, #1
 800a426:	e7f2      	b.n	800a40e <__libc_init_array+0x1e>
 800a428:	0800d744 	.word	0x0800d744
 800a42c:	0800d744 	.word	0x0800d744
 800a430:	0800d744 	.word	0x0800d744
 800a434:	0800d748 	.word	0x0800d748

0800a438 <memcpy>:
 800a438:	440a      	add	r2, r1
 800a43a:	4291      	cmp	r1, r2
 800a43c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a440:	d100      	bne.n	800a444 <memcpy+0xc>
 800a442:	4770      	bx	lr
 800a444:	b510      	push	{r4, lr}
 800a446:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a44a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a44e:	4291      	cmp	r1, r2
 800a450:	d1f9      	bne.n	800a446 <memcpy+0xe>
 800a452:	bd10      	pop	{r4, pc}

0800a454 <memset>:
 800a454:	4402      	add	r2, r0
 800a456:	4603      	mov	r3, r0
 800a458:	4293      	cmp	r3, r2
 800a45a:	d100      	bne.n	800a45e <memset+0xa>
 800a45c:	4770      	bx	lr
 800a45e:	f803 1b01 	strb.w	r1, [r3], #1
 800a462:	e7f9      	b.n	800a458 <memset+0x4>

0800a464 <__cvt>:
 800a464:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a466:	ed2d 8b02 	vpush	{d8}
 800a46a:	eeb0 8b40 	vmov.f64	d8, d0
 800a46e:	b085      	sub	sp, #20
 800a470:	4617      	mov	r7, r2
 800a472:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a474:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a476:	ee18 2a90 	vmov	r2, s17
 800a47a:	f025 0520 	bic.w	r5, r5, #32
 800a47e:	2a00      	cmp	r2, #0
 800a480:	bfb6      	itet	lt
 800a482:	222d      	movlt	r2, #45	; 0x2d
 800a484:	2200      	movge	r2, #0
 800a486:	eeb1 8b40 	vneglt.f64	d8, d0
 800a48a:	2d46      	cmp	r5, #70	; 0x46
 800a48c:	460c      	mov	r4, r1
 800a48e:	701a      	strb	r2, [r3, #0]
 800a490:	d004      	beq.n	800a49c <__cvt+0x38>
 800a492:	2d45      	cmp	r5, #69	; 0x45
 800a494:	d100      	bne.n	800a498 <__cvt+0x34>
 800a496:	3401      	adds	r4, #1
 800a498:	2102      	movs	r1, #2
 800a49a:	e000      	b.n	800a49e <__cvt+0x3a>
 800a49c:	2103      	movs	r1, #3
 800a49e:	ab03      	add	r3, sp, #12
 800a4a0:	9301      	str	r3, [sp, #4]
 800a4a2:	ab02      	add	r3, sp, #8
 800a4a4:	9300      	str	r3, [sp, #0]
 800a4a6:	4622      	mov	r2, r4
 800a4a8:	4633      	mov	r3, r6
 800a4aa:	eeb0 0b48 	vmov.f64	d0, d8
 800a4ae:	f000 fdf7 	bl	800b0a0 <_dtoa_r>
 800a4b2:	2d47      	cmp	r5, #71	; 0x47
 800a4b4:	d101      	bne.n	800a4ba <__cvt+0x56>
 800a4b6:	07fb      	lsls	r3, r7, #31
 800a4b8:	d51a      	bpl.n	800a4f0 <__cvt+0x8c>
 800a4ba:	2d46      	cmp	r5, #70	; 0x46
 800a4bc:	eb00 0204 	add.w	r2, r0, r4
 800a4c0:	d10c      	bne.n	800a4dc <__cvt+0x78>
 800a4c2:	7803      	ldrb	r3, [r0, #0]
 800a4c4:	2b30      	cmp	r3, #48	; 0x30
 800a4c6:	d107      	bne.n	800a4d8 <__cvt+0x74>
 800a4c8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a4cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4d0:	bf1c      	itt	ne
 800a4d2:	f1c4 0401 	rsbne	r4, r4, #1
 800a4d6:	6034      	strne	r4, [r6, #0]
 800a4d8:	6833      	ldr	r3, [r6, #0]
 800a4da:	441a      	add	r2, r3
 800a4dc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a4e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4e4:	bf08      	it	eq
 800a4e6:	9203      	streq	r2, [sp, #12]
 800a4e8:	2130      	movs	r1, #48	; 0x30
 800a4ea:	9b03      	ldr	r3, [sp, #12]
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d307      	bcc.n	800a500 <__cvt+0x9c>
 800a4f0:	9b03      	ldr	r3, [sp, #12]
 800a4f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a4f4:	1a1b      	subs	r3, r3, r0
 800a4f6:	6013      	str	r3, [r2, #0]
 800a4f8:	b005      	add	sp, #20
 800a4fa:	ecbd 8b02 	vpop	{d8}
 800a4fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a500:	1c5c      	adds	r4, r3, #1
 800a502:	9403      	str	r4, [sp, #12]
 800a504:	7019      	strb	r1, [r3, #0]
 800a506:	e7f0      	b.n	800a4ea <__cvt+0x86>

0800a508 <__exponent>:
 800a508:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a50a:	4603      	mov	r3, r0
 800a50c:	2900      	cmp	r1, #0
 800a50e:	bfb8      	it	lt
 800a510:	4249      	neglt	r1, r1
 800a512:	f803 2b02 	strb.w	r2, [r3], #2
 800a516:	bfb4      	ite	lt
 800a518:	222d      	movlt	r2, #45	; 0x2d
 800a51a:	222b      	movge	r2, #43	; 0x2b
 800a51c:	2909      	cmp	r1, #9
 800a51e:	7042      	strb	r2, [r0, #1]
 800a520:	dd2a      	ble.n	800a578 <__exponent+0x70>
 800a522:	f10d 0407 	add.w	r4, sp, #7
 800a526:	46a4      	mov	ip, r4
 800a528:	270a      	movs	r7, #10
 800a52a:	46a6      	mov	lr, r4
 800a52c:	460a      	mov	r2, r1
 800a52e:	fb91 f6f7 	sdiv	r6, r1, r7
 800a532:	fb07 1516 	mls	r5, r7, r6, r1
 800a536:	3530      	adds	r5, #48	; 0x30
 800a538:	2a63      	cmp	r2, #99	; 0x63
 800a53a:	f104 34ff 	add.w	r4, r4, #4294967295
 800a53e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a542:	4631      	mov	r1, r6
 800a544:	dcf1      	bgt.n	800a52a <__exponent+0x22>
 800a546:	3130      	adds	r1, #48	; 0x30
 800a548:	f1ae 0502 	sub.w	r5, lr, #2
 800a54c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a550:	1c44      	adds	r4, r0, #1
 800a552:	4629      	mov	r1, r5
 800a554:	4561      	cmp	r1, ip
 800a556:	d30a      	bcc.n	800a56e <__exponent+0x66>
 800a558:	f10d 0209 	add.w	r2, sp, #9
 800a55c:	eba2 020e 	sub.w	r2, r2, lr
 800a560:	4565      	cmp	r5, ip
 800a562:	bf88      	it	hi
 800a564:	2200      	movhi	r2, #0
 800a566:	4413      	add	r3, r2
 800a568:	1a18      	subs	r0, r3, r0
 800a56a:	b003      	add	sp, #12
 800a56c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a56e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a572:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a576:	e7ed      	b.n	800a554 <__exponent+0x4c>
 800a578:	2330      	movs	r3, #48	; 0x30
 800a57a:	3130      	adds	r1, #48	; 0x30
 800a57c:	7083      	strb	r3, [r0, #2]
 800a57e:	70c1      	strb	r1, [r0, #3]
 800a580:	1d03      	adds	r3, r0, #4
 800a582:	e7f1      	b.n	800a568 <__exponent+0x60>
 800a584:	0000      	movs	r0, r0
	...

0800a588 <_printf_float>:
 800a588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a58c:	b08b      	sub	sp, #44	; 0x2c
 800a58e:	460c      	mov	r4, r1
 800a590:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800a594:	4616      	mov	r6, r2
 800a596:	461f      	mov	r7, r3
 800a598:	4605      	mov	r5, r0
 800a59a:	f001 fca7 	bl	800beec <_localeconv_r>
 800a59e:	f8d0 b000 	ldr.w	fp, [r0]
 800a5a2:	4658      	mov	r0, fp
 800a5a4:	f7f6 fb24 	bl	8000bf0 <strlen>
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	9308      	str	r3, [sp, #32]
 800a5ac:	f8d8 3000 	ldr.w	r3, [r8]
 800a5b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a5b4:	6822      	ldr	r2, [r4, #0]
 800a5b6:	3307      	adds	r3, #7
 800a5b8:	f023 0307 	bic.w	r3, r3, #7
 800a5bc:	f103 0108 	add.w	r1, r3, #8
 800a5c0:	f8c8 1000 	str.w	r1, [r8]
 800a5c4:	4682      	mov	sl, r0
 800a5c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a5ca:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800a5ce:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800a830 <_printf_float+0x2a8>
 800a5d2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800a5d6:	eeb0 6bc0 	vabs.f64	d6, d0
 800a5da:	eeb4 6b47 	vcmp.f64	d6, d7
 800a5de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5e2:	dd24      	ble.n	800a62e <_printf_float+0xa6>
 800a5e4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a5e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5ec:	d502      	bpl.n	800a5f4 <_printf_float+0x6c>
 800a5ee:	232d      	movs	r3, #45	; 0x2d
 800a5f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5f4:	4b90      	ldr	r3, [pc, #576]	; (800a838 <_printf_float+0x2b0>)
 800a5f6:	4891      	ldr	r0, [pc, #580]	; (800a83c <_printf_float+0x2b4>)
 800a5f8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a5fc:	bf94      	ite	ls
 800a5fe:	4698      	movls	r8, r3
 800a600:	4680      	movhi	r8, r0
 800a602:	2303      	movs	r3, #3
 800a604:	6123      	str	r3, [r4, #16]
 800a606:	f022 0204 	bic.w	r2, r2, #4
 800a60a:	2300      	movs	r3, #0
 800a60c:	6022      	str	r2, [r4, #0]
 800a60e:	9304      	str	r3, [sp, #16]
 800a610:	9700      	str	r7, [sp, #0]
 800a612:	4633      	mov	r3, r6
 800a614:	aa09      	add	r2, sp, #36	; 0x24
 800a616:	4621      	mov	r1, r4
 800a618:	4628      	mov	r0, r5
 800a61a:	f000 f9d3 	bl	800a9c4 <_printf_common>
 800a61e:	3001      	adds	r0, #1
 800a620:	f040 808a 	bne.w	800a738 <_printf_float+0x1b0>
 800a624:	f04f 30ff 	mov.w	r0, #4294967295
 800a628:	b00b      	add	sp, #44	; 0x2c
 800a62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a62e:	eeb4 0b40 	vcmp.f64	d0, d0
 800a632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a636:	d709      	bvc.n	800a64c <_printf_float+0xc4>
 800a638:	ee10 3a90 	vmov	r3, s1
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	bfbc      	itt	lt
 800a640:	232d      	movlt	r3, #45	; 0x2d
 800a642:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a646:	487e      	ldr	r0, [pc, #504]	; (800a840 <_printf_float+0x2b8>)
 800a648:	4b7e      	ldr	r3, [pc, #504]	; (800a844 <_printf_float+0x2bc>)
 800a64a:	e7d5      	b.n	800a5f8 <_printf_float+0x70>
 800a64c:	6863      	ldr	r3, [r4, #4]
 800a64e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800a652:	9104      	str	r1, [sp, #16]
 800a654:	1c59      	adds	r1, r3, #1
 800a656:	d13c      	bne.n	800a6d2 <_printf_float+0x14a>
 800a658:	2306      	movs	r3, #6
 800a65a:	6063      	str	r3, [r4, #4]
 800a65c:	2300      	movs	r3, #0
 800a65e:	9303      	str	r3, [sp, #12]
 800a660:	ab08      	add	r3, sp, #32
 800a662:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800a666:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a66a:	ab07      	add	r3, sp, #28
 800a66c:	6861      	ldr	r1, [r4, #4]
 800a66e:	9300      	str	r3, [sp, #0]
 800a670:	6022      	str	r2, [r4, #0]
 800a672:	f10d 031b 	add.w	r3, sp, #27
 800a676:	4628      	mov	r0, r5
 800a678:	f7ff fef4 	bl	800a464 <__cvt>
 800a67c:	9b04      	ldr	r3, [sp, #16]
 800a67e:	9907      	ldr	r1, [sp, #28]
 800a680:	2b47      	cmp	r3, #71	; 0x47
 800a682:	4680      	mov	r8, r0
 800a684:	d108      	bne.n	800a698 <_printf_float+0x110>
 800a686:	1cc8      	adds	r0, r1, #3
 800a688:	db02      	blt.n	800a690 <_printf_float+0x108>
 800a68a:	6863      	ldr	r3, [r4, #4]
 800a68c:	4299      	cmp	r1, r3
 800a68e:	dd41      	ble.n	800a714 <_printf_float+0x18c>
 800a690:	f1a9 0902 	sub.w	r9, r9, #2
 800a694:	fa5f f989 	uxtb.w	r9, r9
 800a698:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a69c:	d820      	bhi.n	800a6e0 <_printf_float+0x158>
 800a69e:	3901      	subs	r1, #1
 800a6a0:	464a      	mov	r2, r9
 800a6a2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a6a6:	9107      	str	r1, [sp, #28]
 800a6a8:	f7ff ff2e 	bl	800a508 <__exponent>
 800a6ac:	9a08      	ldr	r2, [sp, #32]
 800a6ae:	9004      	str	r0, [sp, #16]
 800a6b0:	1813      	adds	r3, r2, r0
 800a6b2:	2a01      	cmp	r2, #1
 800a6b4:	6123      	str	r3, [r4, #16]
 800a6b6:	dc02      	bgt.n	800a6be <_printf_float+0x136>
 800a6b8:	6822      	ldr	r2, [r4, #0]
 800a6ba:	07d2      	lsls	r2, r2, #31
 800a6bc:	d501      	bpl.n	800a6c2 <_printf_float+0x13a>
 800a6be:	3301      	adds	r3, #1
 800a6c0:	6123      	str	r3, [r4, #16]
 800a6c2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d0a2      	beq.n	800a610 <_printf_float+0x88>
 800a6ca:	232d      	movs	r3, #45	; 0x2d
 800a6cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6d0:	e79e      	b.n	800a610 <_printf_float+0x88>
 800a6d2:	9904      	ldr	r1, [sp, #16]
 800a6d4:	2947      	cmp	r1, #71	; 0x47
 800a6d6:	d1c1      	bne.n	800a65c <_printf_float+0xd4>
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d1bf      	bne.n	800a65c <_printf_float+0xd4>
 800a6dc:	2301      	movs	r3, #1
 800a6de:	e7bc      	b.n	800a65a <_printf_float+0xd2>
 800a6e0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a6e4:	d118      	bne.n	800a718 <_printf_float+0x190>
 800a6e6:	2900      	cmp	r1, #0
 800a6e8:	6863      	ldr	r3, [r4, #4]
 800a6ea:	dd0b      	ble.n	800a704 <_printf_float+0x17c>
 800a6ec:	6121      	str	r1, [r4, #16]
 800a6ee:	b913      	cbnz	r3, 800a6f6 <_printf_float+0x16e>
 800a6f0:	6822      	ldr	r2, [r4, #0]
 800a6f2:	07d0      	lsls	r0, r2, #31
 800a6f4:	d502      	bpl.n	800a6fc <_printf_float+0x174>
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	440b      	add	r3, r1
 800a6fa:	6123      	str	r3, [r4, #16]
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	65a1      	str	r1, [r4, #88]	; 0x58
 800a700:	9304      	str	r3, [sp, #16]
 800a702:	e7de      	b.n	800a6c2 <_printf_float+0x13a>
 800a704:	b913      	cbnz	r3, 800a70c <_printf_float+0x184>
 800a706:	6822      	ldr	r2, [r4, #0]
 800a708:	07d2      	lsls	r2, r2, #31
 800a70a:	d501      	bpl.n	800a710 <_printf_float+0x188>
 800a70c:	3302      	adds	r3, #2
 800a70e:	e7f4      	b.n	800a6fa <_printf_float+0x172>
 800a710:	2301      	movs	r3, #1
 800a712:	e7f2      	b.n	800a6fa <_printf_float+0x172>
 800a714:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a718:	9b08      	ldr	r3, [sp, #32]
 800a71a:	4299      	cmp	r1, r3
 800a71c:	db05      	blt.n	800a72a <_printf_float+0x1a2>
 800a71e:	6823      	ldr	r3, [r4, #0]
 800a720:	6121      	str	r1, [r4, #16]
 800a722:	07d8      	lsls	r0, r3, #31
 800a724:	d5ea      	bpl.n	800a6fc <_printf_float+0x174>
 800a726:	1c4b      	adds	r3, r1, #1
 800a728:	e7e7      	b.n	800a6fa <_printf_float+0x172>
 800a72a:	2900      	cmp	r1, #0
 800a72c:	bfd4      	ite	le
 800a72e:	f1c1 0202 	rsble	r2, r1, #2
 800a732:	2201      	movgt	r2, #1
 800a734:	4413      	add	r3, r2
 800a736:	e7e0      	b.n	800a6fa <_printf_float+0x172>
 800a738:	6823      	ldr	r3, [r4, #0]
 800a73a:	055a      	lsls	r2, r3, #21
 800a73c:	d407      	bmi.n	800a74e <_printf_float+0x1c6>
 800a73e:	6923      	ldr	r3, [r4, #16]
 800a740:	4642      	mov	r2, r8
 800a742:	4631      	mov	r1, r6
 800a744:	4628      	mov	r0, r5
 800a746:	47b8      	blx	r7
 800a748:	3001      	adds	r0, #1
 800a74a:	d12a      	bne.n	800a7a2 <_printf_float+0x21a>
 800a74c:	e76a      	b.n	800a624 <_printf_float+0x9c>
 800a74e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a752:	f240 80e2 	bls.w	800a91a <_printf_float+0x392>
 800a756:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a75a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a75e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a762:	d133      	bne.n	800a7cc <_printf_float+0x244>
 800a764:	4a38      	ldr	r2, [pc, #224]	; (800a848 <_printf_float+0x2c0>)
 800a766:	2301      	movs	r3, #1
 800a768:	4631      	mov	r1, r6
 800a76a:	4628      	mov	r0, r5
 800a76c:	47b8      	blx	r7
 800a76e:	3001      	adds	r0, #1
 800a770:	f43f af58 	beq.w	800a624 <_printf_float+0x9c>
 800a774:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a778:	429a      	cmp	r2, r3
 800a77a:	db02      	blt.n	800a782 <_printf_float+0x1fa>
 800a77c:	6823      	ldr	r3, [r4, #0]
 800a77e:	07d8      	lsls	r0, r3, #31
 800a780:	d50f      	bpl.n	800a7a2 <_printf_float+0x21a>
 800a782:	4653      	mov	r3, sl
 800a784:	465a      	mov	r2, fp
 800a786:	4631      	mov	r1, r6
 800a788:	4628      	mov	r0, r5
 800a78a:	47b8      	blx	r7
 800a78c:	3001      	adds	r0, #1
 800a78e:	f43f af49 	beq.w	800a624 <_printf_float+0x9c>
 800a792:	f04f 0800 	mov.w	r8, #0
 800a796:	f104 091a 	add.w	r9, r4, #26
 800a79a:	9b08      	ldr	r3, [sp, #32]
 800a79c:	3b01      	subs	r3, #1
 800a79e:	4543      	cmp	r3, r8
 800a7a0:	dc09      	bgt.n	800a7b6 <_printf_float+0x22e>
 800a7a2:	6823      	ldr	r3, [r4, #0]
 800a7a4:	079b      	lsls	r3, r3, #30
 800a7a6:	f100 8108 	bmi.w	800a9ba <_printf_float+0x432>
 800a7aa:	68e0      	ldr	r0, [r4, #12]
 800a7ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7ae:	4298      	cmp	r0, r3
 800a7b0:	bfb8      	it	lt
 800a7b2:	4618      	movlt	r0, r3
 800a7b4:	e738      	b.n	800a628 <_printf_float+0xa0>
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	464a      	mov	r2, r9
 800a7ba:	4631      	mov	r1, r6
 800a7bc:	4628      	mov	r0, r5
 800a7be:	47b8      	blx	r7
 800a7c0:	3001      	adds	r0, #1
 800a7c2:	f43f af2f 	beq.w	800a624 <_printf_float+0x9c>
 800a7c6:	f108 0801 	add.w	r8, r8, #1
 800a7ca:	e7e6      	b.n	800a79a <_printf_float+0x212>
 800a7cc:	9b07      	ldr	r3, [sp, #28]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	dc3c      	bgt.n	800a84c <_printf_float+0x2c4>
 800a7d2:	4a1d      	ldr	r2, [pc, #116]	; (800a848 <_printf_float+0x2c0>)
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	4631      	mov	r1, r6
 800a7d8:	4628      	mov	r0, r5
 800a7da:	47b8      	blx	r7
 800a7dc:	3001      	adds	r0, #1
 800a7de:	f43f af21 	beq.w	800a624 <_printf_float+0x9c>
 800a7e2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a7e6:	4313      	orrs	r3, r2
 800a7e8:	d102      	bne.n	800a7f0 <_printf_float+0x268>
 800a7ea:	6823      	ldr	r3, [r4, #0]
 800a7ec:	07d9      	lsls	r1, r3, #31
 800a7ee:	d5d8      	bpl.n	800a7a2 <_printf_float+0x21a>
 800a7f0:	4653      	mov	r3, sl
 800a7f2:	465a      	mov	r2, fp
 800a7f4:	4631      	mov	r1, r6
 800a7f6:	4628      	mov	r0, r5
 800a7f8:	47b8      	blx	r7
 800a7fa:	3001      	adds	r0, #1
 800a7fc:	f43f af12 	beq.w	800a624 <_printf_float+0x9c>
 800a800:	f04f 0900 	mov.w	r9, #0
 800a804:	f104 0a1a 	add.w	sl, r4, #26
 800a808:	9b07      	ldr	r3, [sp, #28]
 800a80a:	425b      	negs	r3, r3
 800a80c:	454b      	cmp	r3, r9
 800a80e:	dc01      	bgt.n	800a814 <_printf_float+0x28c>
 800a810:	9b08      	ldr	r3, [sp, #32]
 800a812:	e795      	b.n	800a740 <_printf_float+0x1b8>
 800a814:	2301      	movs	r3, #1
 800a816:	4652      	mov	r2, sl
 800a818:	4631      	mov	r1, r6
 800a81a:	4628      	mov	r0, r5
 800a81c:	47b8      	blx	r7
 800a81e:	3001      	adds	r0, #1
 800a820:	f43f af00 	beq.w	800a624 <_printf_float+0x9c>
 800a824:	f109 0901 	add.w	r9, r9, #1
 800a828:	e7ee      	b.n	800a808 <_printf_float+0x280>
 800a82a:	bf00      	nop
 800a82c:	f3af 8000 	nop.w
 800a830:	ffffffff 	.word	0xffffffff
 800a834:	7fefffff 	.word	0x7fefffff
 800a838:	0800d368 	.word	0x0800d368
 800a83c:	0800d36c 	.word	0x0800d36c
 800a840:	0800d374 	.word	0x0800d374
 800a844:	0800d370 	.word	0x0800d370
 800a848:	0800d378 	.word	0x0800d378
 800a84c:	9a08      	ldr	r2, [sp, #32]
 800a84e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a850:	429a      	cmp	r2, r3
 800a852:	bfa8      	it	ge
 800a854:	461a      	movge	r2, r3
 800a856:	2a00      	cmp	r2, #0
 800a858:	4691      	mov	r9, r2
 800a85a:	dc38      	bgt.n	800a8ce <_printf_float+0x346>
 800a85c:	2300      	movs	r3, #0
 800a85e:	9305      	str	r3, [sp, #20]
 800a860:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a864:	f104 021a 	add.w	r2, r4, #26
 800a868:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a86a:	9905      	ldr	r1, [sp, #20]
 800a86c:	9304      	str	r3, [sp, #16]
 800a86e:	eba3 0309 	sub.w	r3, r3, r9
 800a872:	428b      	cmp	r3, r1
 800a874:	dc33      	bgt.n	800a8de <_printf_float+0x356>
 800a876:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	db3c      	blt.n	800a8f8 <_printf_float+0x370>
 800a87e:	6823      	ldr	r3, [r4, #0]
 800a880:	07da      	lsls	r2, r3, #31
 800a882:	d439      	bmi.n	800a8f8 <_printf_float+0x370>
 800a884:	9b08      	ldr	r3, [sp, #32]
 800a886:	9a04      	ldr	r2, [sp, #16]
 800a888:	9907      	ldr	r1, [sp, #28]
 800a88a:	1a9a      	subs	r2, r3, r2
 800a88c:	eba3 0901 	sub.w	r9, r3, r1
 800a890:	4591      	cmp	r9, r2
 800a892:	bfa8      	it	ge
 800a894:	4691      	movge	r9, r2
 800a896:	f1b9 0f00 	cmp.w	r9, #0
 800a89a:	dc35      	bgt.n	800a908 <_printf_float+0x380>
 800a89c:	f04f 0800 	mov.w	r8, #0
 800a8a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8a4:	f104 0a1a 	add.w	sl, r4, #26
 800a8a8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a8ac:	1a9b      	subs	r3, r3, r2
 800a8ae:	eba3 0309 	sub.w	r3, r3, r9
 800a8b2:	4543      	cmp	r3, r8
 800a8b4:	f77f af75 	ble.w	800a7a2 <_printf_float+0x21a>
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	4652      	mov	r2, sl
 800a8bc:	4631      	mov	r1, r6
 800a8be:	4628      	mov	r0, r5
 800a8c0:	47b8      	blx	r7
 800a8c2:	3001      	adds	r0, #1
 800a8c4:	f43f aeae 	beq.w	800a624 <_printf_float+0x9c>
 800a8c8:	f108 0801 	add.w	r8, r8, #1
 800a8cc:	e7ec      	b.n	800a8a8 <_printf_float+0x320>
 800a8ce:	4613      	mov	r3, r2
 800a8d0:	4631      	mov	r1, r6
 800a8d2:	4642      	mov	r2, r8
 800a8d4:	4628      	mov	r0, r5
 800a8d6:	47b8      	blx	r7
 800a8d8:	3001      	adds	r0, #1
 800a8da:	d1bf      	bne.n	800a85c <_printf_float+0x2d4>
 800a8dc:	e6a2      	b.n	800a624 <_printf_float+0x9c>
 800a8de:	2301      	movs	r3, #1
 800a8e0:	4631      	mov	r1, r6
 800a8e2:	4628      	mov	r0, r5
 800a8e4:	9204      	str	r2, [sp, #16]
 800a8e6:	47b8      	blx	r7
 800a8e8:	3001      	adds	r0, #1
 800a8ea:	f43f ae9b 	beq.w	800a624 <_printf_float+0x9c>
 800a8ee:	9b05      	ldr	r3, [sp, #20]
 800a8f0:	9a04      	ldr	r2, [sp, #16]
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	9305      	str	r3, [sp, #20]
 800a8f6:	e7b7      	b.n	800a868 <_printf_float+0x2e0>
 800a8f8:	4653      	mov	r3, sl
 800a8fa:	465a      	mov	r2, fp
 800a8fc:	4631      	mov	r1, r6
 800a8fe:	4628      	mov	r0, r5
 800a900:	47b8      	blx	r7
 800a902:	3001      	adds	r0, #1
 800a904:	d1be      	bne.n	800a884 <_printf_float+0x2fc>
 800a906:	e68d      	b.n	800a624 <_printf_float+0x9c>
 800a908:	9a04      	ldr	r2, [sp, #16]
 800a90a:	464b      	mov	r3, r9
 800a90c:	4442      	add	r2, r8
 800a90e:	4631      	mov	r1, r6
 800a910:	4628      	mov	r0, r5
 800a912:	47b8      	blx	r7
 800a914:	3001      	adds	r0, #1
 800a916:	d1c1      	bne.n	800a89c <_printf_float+0x314>
 800a918:	e684      	b.n	800a624 <_printf_float+0x9c>
 800a91a:	9a08      	ldr	r2, [sp, #32]
 800a91c:	2a01      	cmp	r2, #1
 800a91e:	dc01      	bgt.n	800a924 <_printf_float+0x39c>
 800a920:	07db      	lsls	r3, r3, #31
 800a922:	d537      	bpl.n	800a994 <_printf_float+0x40c>
 800a924:	2301      	movs	r3, #1
 800a926:	4642      	mov	r2, r8
 800a928:	4631      	mov	r1, r6
 800a92a:	4628      	mov	r0, r5
 800a92c:	47b8      	blx	r7
 800a92e:	3001      	adds	r0, #1
 800a930:	f43f ae78 	beq.w	800a624 <_printf_float+0x9c>
 800a934:	4653      	mov	r3, sl
 800a936:	465a      	mov	r2, fp
 800a938:	4631      	mov	r1, r6
 800a93a:	4628      	mov	r0, r5
 800a93c:	47b8      	blx	r7
 800a93e:	3001      	adds	r0, #1
 800a940:	f43f ae70 	beq.w	800a624 <_printf_float+0x9c>
 800a944:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a948:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a94c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a950:	d01b      	beq.n	800a98a <_printf_float+0x402>
 800a952:	9b08      	ldr	r3, [sp, #32]
 800a954:	f108 0201 	add.w	r2, r8, #1
 800a958:	3b01      	subs	r3, #1
 800a95a:	4631      	mov	r1, r6
 800a95c:	4628      	mov	r0, r5
 800a95e:	47b8      	blx	r7
 800a960:	3001      	adds	r0, #1
 800a962:	d10e      	bne.n	800a982 <_printf_float+0x3fa>
 800a964:	e65e      	b.n	800a624 <_printf_float+0x9c>
 800a966:	2301      	movs	r3, #1
 800a968:	464a      	mov	r2, r9
 800a96a:	4631      	mov	r1, r6
 800a96c:	4628      	mov	r0, r5
 800a96e:	47b8      	blx	r7
 800a970:	3001      	adds	r0, #1
 800a972:	f43f ae57 	beq.w	800a624 <_printf_float+0x9c>
 800a976:	f108 0801 	add.w	r8, r8, #1
 800a97a:	9b08      	ldr	r3, [sp, #32]
 800a97c:	3b01      	subs	r3, #1
 800a97e:	4543      	cmp	r3, r8
 800a980:	dcf1      	bgt.n	800a966 <_printf_float+0x3de>
 800a982:	9b04      	ldr	r3, [sp, #16]
 800a984:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a988:	e6db      	b.n	800a742 <_printf_float+0x1ba>
 800a98a:	f04f 0800 	mov.w	r8, #0
 800a98e:	f104 091a 	add.w	r9, r4, #26
 800a992:	e7f2      	b.n	800a97a <_printf_float+0x3f2>
 800a994:	2301      	movs	r3, #1
 800a996:	4642      	mov	r2, r8
 800a998:	e7df      	b.n	800a95a <_printf_float+0x3d2>
 800a99a:	2301      	movs	r3, #1
 800a99c:	464a      	mov	r2, r9
 800a99e:	4631      	mov	r1, r6
 800a9a0:	4628      	mov	r0, r5
 800a9a2:	47b8      	blx	r7
 800a9a4:	3001      	adds	r0, #1
 800a9a6:	f43f ae3d 	beq.w	800a624 <_printf_float+0x9c>
 800a9aa:	f108 0801 	add.w	r8, r8, #1
 800a9ae:	68e3      	ldr	r3, [r4, #12]
 800a9b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a9b2:	1a5b      	subs	r3, r3, r1
 800a9b4:	4543      	cmp	r3, r8
 800a9b6:	dcf0      	bgt.n	800a99a <_printf_float+0x412>
 800a9b8:	e6f7      	b.n	800a7aa <_printf_float+0x222>
 800a9ba:	f04f 0800 	mov.w	r8, #0
 800a9be:	f104 0919 	add.w	r9, r4, #25
 800a9c2:	e7f4      	b.n	800a9ae <_printf_float+0x426>

0800a9c4 <_printf_common>:
 800a9c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9c8:	4616      	mov	r6, r2
 800a9ca:	4699      	mov	r9, r3
 800a9cc:	688a      	ldr	r2, [r1, #8]
 800a9ce:	690b      	ldr	r3, [r1, #16]
 800a9d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	bfb8      	it	lt
 800a9d8:	4613      	movlt	r3, r2
 800a9da:	6033      	str	r3, [r6, #0]
 800a9dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a9e0:	4607      	mov	r7, r0
 800a9e2:	460c      	mov	r4, r1
 800a9e4:	b10a      	cbz	r2, 800a9ea <_printf_common+0x26>
 800a9e6:	3301      	adds	r3, #1
 800a9e8:	6033      	str	r3, [r6, #0]
 800a9ea:	6823      	ldr	r3, [r4, #0]
 800a9ec:	0699      	lsls	r1, r3, #26
 800a9ee:	bf42      	ittt	mi
 800a9f0:	6833      	ldrmi	r3, [r6, #0]
 800a9f2:	3302      	addmi	r3, #2
 800a9f4:	6033      	strmi	r3, [r6, #0]
 800a9f6:	6825      	ldr	r5, [r4, #0]
 800a9f8:	f015 0506 	ands.w	r5, r5, #6
 800a9fc:	d106      	bne.n	800aa0c <_printf_common+0x48>
 800a9fe:	f104 0a19 	add.w	sl, r4, #25
 800aa02:	68e3      	ldr	r3, [r4, #12]
 800aa04:	6832      	ldr	r2, [r6, #0]
 800aa06:	1a9b      	subs	r3, r3, r2
 800aa08:	42ab      	cmp	r3, r5
 800aa0a:	dc26      	bgt.n	800aa5a <_printf_common+0x96>
 800aa0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa10:	1e13      	subs	r3, r2, #0
 800aa12:	6822      	ldr	r2, [r4, #0]
 800aa14:	bf18      	it	ne
 800aa16:	2301      	movne	r3, #1
 800aa18:	0692      	lsls	r2, r2, #26
 800aa1a:	d42b      	bmi.n	800aa74 <_printf_common+0xb0>
 800aa1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa20:	4649      	mov	r1, r9
 800aa22:	4638      	mov	r0, r7
 800aa24:	47c0      	blx	r8
 800aa26:	3001      	adds	r0, #1
 800aa28:	d01e      	beq.n	800aa68 <_printf_common+0xa4>
 800aa2a:	6823      	ldr	r3, [r4, #0]
 800aa2c:	68e5      	ldr	r5, [r4, #12]
 800aa2e:	6832      	ldr	r2, [r6, #0]
 800aa30:	f003 0306 	and.w	r3, r3, #6
 800aa34:	2b04      	cmp	r3, #4
 800aa36:	bf08      	it	eq
 800aa38:	1aad      	subeq	r5, r5, r2
 800aa3a:	68a3      	ldr	r3, [r4, #8]
 800aa3c:	6922      	ldr	r2, [r4, #16]
 800aa3e:	bf0c      	ite	eq
 800aa40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa44:	2500      	movne	r5, #0
 800aa46:	4293      	cmp	r3, r2
 800aa48:	bfc4      	itt	gt
 800aa4a:	1a9b      	subgt	r3, r3, r2
 800aa4c:	18ed      	addgt	r5, r5, r3
 800aa4e:	2600      	movs	r6, #0
 800aa50:	341a      	adds	r4, #26
 800aa52:	42b5      	cmp	r5, r6
 800aa54:	d11a      	bne.n	800aa8c <_printf_common+0xc8>
 800aa56:	2000      	movs	r0, #0
 800aa58:	e008      	b.n	800aa6c <_printf_common+0xa8>
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	4652      	mov	r2, sl
 800aa5e:	4649      	mov	r1, r9
 800aa60:	4638      	mov	r0, r7
 800aa62:	47c0      	blx	r8
 800aa64:	3001      	adds	r0, #1
 800aa66:	d103      	bne.n	800aa70 <_printf_common+0xac>
 800aa68:	f04f 30ff 	mov.w	r0, #4294967295
 800aa6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa70:	3501      	adds	r5, #1
 800aa72:	e7c6      	b.n	800aa02 <_printf_common+0x3e>
 800aa74:	18e1      	adds	r1, r4, r3
 800aa76:	1c5a      	adds	r2, r3, #1
 800aa78:	2030      	movs	r0, #48	; 0x30
 800aa7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aa7e:	4422      	add	r2, r4
 800aa80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aa88:	3302      	adds	r3, #2
 800aa8a:	e7c7      	b.n	800aa1c <_printf_common+0x58>
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	4622      	mov	r2, r4
 800aa90:	4649      	mov	r1, r9
 800aa92:	4638      	mov	r0, r7
 800aa94:	47c0      	blx	r8
 800aa96:	3001      	adds	r0, #1
 800aa98:	d0e6      	beq.n	800aa68 <_printf_common+0xa4>
 800aa9a:	3601      	adds	r6, #1
 800aa9c:	e7d9      	b.n	800aa52 <_printf_common+0x8e>
	...

0800aaa0 <_printf_i>:
 800aaa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aaa4:	7e0f      	ldrb	r7, [r1, #24]
 800aaa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aaa8:	2f78      	cmp	r7, #120	; 0x78
 800aaaa:	4691      	mov	r9, r2
 800aaac:	4680      	mov	r8, r0
 800aaae:	460c      	mov	r4, r1
 800aab0:	469a      	mov	sl, r3
 800aab2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aab6:	d807      	bhi.n	800aac8 <_printf_i+0x28>
 800aab8:	2f62      	cmp	r7, #98	; 0x62
 800aaba:	d80a      	bhi.n	800aad2 <_printf_i+0x32>
 800aabc:	2f00      	cmp	r7, #0
 800aabe:	f000 80d8 	beq.w	800ac72 <_printf_i+0x1d2>
 800aac2:	2f58      	cmp	r7, #88	; 0x58
 800aac4:	f000 80a3 	beq.w	800ac0e <_printf_i+0x16e>
 800aac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aacc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aad0:	e03a      	b.n	800ab48 <_printf_i+0xa8>
 800aad2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aad6:	2b15      	cmp	r3, #21
 800aad8:	d8f6      	bhi.n	800aac8 <_printf_i+0x28>
 800aada:	a101      	add	r1, pc, #4	; (adr r1, 800aae0 <_printf_i+0x40>)
 800aadc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aae0:	0800ab39 	.word	0x0800ab39
 800aae4:	0800ab4d 	.word	0x0800ab4d
 800aae8:	0800aac9 	.word	0x0800aac9
 800aaec:	0800aac9 	.word	0x0800aac9
 800aaf0:	0800aac9 	.word	0x0800aac9
 800aaf4:	0800aac9 	.word	0x0800aac9
 800aaf8:	0800ab4d 	.word	0x0800ab4d
 800aafc:	0800aac9 	.word	0x0800aac9
 800ab00:	0800aac9 	.word	0x0800aac9
 800ab04:	0800aac9 	.word	0x0800aac9
 800ab08:	0800aac9 	.word	0x0800aac9
 800ab0c:	0800ac59 	.word	0x0800ac59
 800ab10:	0800ab7d 	.word	0x0800ab7d
 800ab14:	0800ac3b 	.word	0x0800ac3b
 800ab18:	0800aac9 	.word	0x0800aac9
 800ab1c:	0800aac9 	.word	0x0800aac9
 800ab20:	0800ac7b 	.word	0x0800ac7b
 800ab24:	0800aac9 	.word	0x0800aac9
 800ab28:	0800ab7d 	.word	0x0800ab7d
 800ab2c:	0800aac9 	.word	0x0800aac9
 800ab30:	0800aac9 	.word	0x0800aac9
 800ab34:	0800ac43 	.word	0x0800ac43
 800ab38:	682b      	ldr	r3, [r5, #0]
 800ab3a:	1d1a      	adds	r2, r3, #4
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	602a      	str	r2, [r5, #0]
 800ab40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab48:	2301      	movs	r3, #1
 800ab4a:	e0a3      	b.n	800ac94 <_printf_i+0x1f4>
 800ab4c:	6820      	ldr	r0, [r4, #0]
 800ab4e:	6829      	ldr	r1, [r5, #0]
 800ab50:	0606      	lsls	r6, r0, #24
 800ab52:	f101 0304 	add.w	r3, r1, #4
 800ab56:	d50a      	bpl.n	800ab6e <_printf_i+0xce>
 800ab58:	680e      	ldr	r6, [r1, #0]
 800ab5a:	602b      	str	r3, [r5, #0]
 800ab5c:	2e00      	cmp	r6, #0
 800ab5e:	da03      	bge.n	800ab68 <_printf_i+0xc8>
 800ab60:	232d      	movs	r3, #45	; 0x2d
 800ab62:	4276      	negs	r6, r6
 800ab64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab68:	485e      	ldr	r0, [pc, #376]	; (800ace4 <_printf_i+0x244>)
 800ab6a:	230a      	movs	r3, #10
 800ab6c:	e019      	b.n	800aba2 <_printf_i+0x102>
 800ab6e:	680e      	ldr	r6, [r1, #0]
 800ab70:	602b      	str	r3, [r5, #0]
 800ab72:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ab76:	bf18      	it	ne
 800ab78:	b236      	sxthne	r6, r6
 800ab7a:	e7ef      	b.n	800ab5c <_printf_i+0xbc>
 800ab7c:	682b      	ldr	r3, [r5, #0]
 800ab7e:	6820      	ldr	r0, [r4, #0]
 800ab80:	1d19      	adds	r1, r3, #4
 800ab82:	6029      	str	r1, [r5, #0]
 800ab84:	0601      	lsls	r1, r0, #24
 800ab86:	d501      	bpl.n	800ab8c <_printf_i+0xec>
 800ab88:	681e      	ldr	r6, [r3, #0]
 800ab8a:	e002      	b.n	800ab92 <_printf_i+0xf2>
 800ab8c:	0646      	lsls	r6, r0, #25
 800ab8e:	d5fb      	bpl.n	800ab88 <_printf_i+0xe8>
 800ab90:	881e      	ldrh	r6, [r3, #0]
 800ab92:	4854      	ldr	r0, [pc, #336]	; (800ace4 <_printf_i+0x244>)
 800ab94:	2f6f      	cmp	r7, #111	; 0x6f
 800ab96:	bf0c      	ite	eq
 800ab98:	2308      	moveq	r3, #8
 800ab9a:	230a      	movne	r3, #10
 800ab9c:	2100      	movs	r1, #0
 800ab9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aba2:	6865      	ldr	r5, [r4, #4]
 800aba4:	60a5      	str	r5, [r4, #8]
 800aba6:	2d00      	cmp	r5, #0
 800aba8:	bfa2      	ittt	ge
 800abaa:	6821      	ldrge	r1, [r4, #0]
 800abac:	f021 0104 	bicge.w	r1, r1, #4
 800abb0:	6021      	strge	r1, [r4, #0]
 800abb2:	b90e      	cbnz	r6, 800abb8 <_printf_i+0x118>
 800abb4:	2d00      	cmp	r5, #0
 800abb6:	d04d      	beq.n	800ac54 <_printf_i+0x1b4>
 800abb8:	4615      	mov	r5, r2
 800abba:	fbb6 f1f3 	udiv	r1, r6, r3
 800abbe:	fb03 6711 	mls	r7, r3, r1, r6
 800abc2:	5dc7      	ldrb	r7, [r0, r7]
 800abc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800abc8:	4637      	mov	r7, r6
 800abca:	42bb      	cmp	r3, r7
 800abcc:	460e      	mov	r6, r1
 800abce:	d9f4      	bls.n	800abba <_printf_i+0x11a>
 800abd0:	2b08      	cmp	r3, #8
 800abd2:	d10b      	bne.n	800abec <_printf_i+0x14c>
 800abd4:	6823      	ldr	r3, [r4, #0]
 800abd6:	07de      	lsls	r6, r3, #31
 800abd8:	d508      	bpl.n	800abec <_printf_i+0x14c>
 800abda:	6923      	ldr	r3, [r4, #16]
 800abdc:	6861      	ldr	r1, [r4, #4]
 800abde:	4299      	cmp	r1, r3
 800abe0:	bfde      	ittt	le
 800abe2:	2330      	movle	r3, #48	; 0x30
 800abe4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800abe8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800abec:	1b52      	subs	r2, r2, r5
 800abee:	6122      	str	r2, [r4, #16]
 800abf0:	f8cd a000 	str.w	sl, [sp]
 800abf4:	464b      	mov	r3, r9
 800abf6:	aa03      	add	r2, sp, #12
 800abf8:	4621      	mov	r1, r4
 800abfa:	4640      	mov	r0, r8
 800abfc:	f7ff fee2 	bl	800a9c4 <_printf_common>
 800ac00:	3001      	adds	r0, #1
 800ac02:	d14c      	bne.n	800ac9e <_printf_i+0x1fe>
 800ac04:	f04f 30ff 	mov.w	r0, #4294967295
 800ac08:	b004      	add	sp, #16
 800ac0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac0e:	4835      	ldr	r0, [pc, #212]	; (800ace4 <_printf_i+0x244>)
 800ac10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ac14:	6829      	ldr	r1, [r5, #0]
 800ac16:	6823      	ldr	r3, [r4, #0]
 800ac18:	f851 6b04 	ldr.w	r6, [r1], #4
 800ac1c:	6029      	str	r1, [r5, #0]
 800ac1e:	061d      	lsls	r5, r3, #24
 800ac20:	d514      	bpl.n	800ac4c <_printf_i+0x1ac>
 800ac22:	07df      	lsls	r7, r3, #31
 800ac24:	bf44      	itt	mi
 800ac26:	f043 0320 	orrmi.w	r3, r3, #32
 800ac2a:	6023      	strmi	r3, [r4, #0]
 800ac2c:	b91e      	cbnz	r6, 800ac36 <_printf_i+0x196>
 800ac2e:	6823      	ldr	r3, [r4, #0]
 800ac30:	f023 0320 	bic.w	r3, r3, #32
 800ac34:	6023      	str	r3, [r4, #0]
 800ac36:	2310      	movs	r3, #16
 800ac38:	e7b0      	b.n	800ab9c <_printf_i+0xfc>
 800ac3a:	6823      	ldr	r3, [r4, #0]
 800ac3c:	f043 0320 	orr.w	r3, r3, #32
 800ac40:	6023      	str	r3, [r4, #0]
 800ac42:	2378      	movs	r3, #120	; 0x78
 800ac44:	4828      	ldr	r0, [pc, #160]	; (800ace8 <_printf_i+0x248>)
 800ac46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ac4a:	e7e3      	b.n	800ac14 <_printf_i+0x174>
 800ac4c:	0659      	lsls	r1, r3, #25
 800ac4e:	bf48      	it	mi
 800ac50:	b2b6      	uxthmi	r6, r6
 800ac52:	e7e6      	b.n	800ac22 <_printf_i+0x182>
 800ac54:	4615      	mov	r5, r2
 800ac56:	e7bb      	b.n	800abd0 <_printf_i+0x130>
 800ac58:	682b      	ldr	r3, [r5, #0]
 800ac5a:	6826      	ldr	r6, [r4, #0]
 800ac5c:	6961      	ldr	r1, [r4, #20]
 800ac5e:	1d18      	adds	r0, r3, #4
 800ac60:	6028      	str	r0, [r5, #0]
 800ac62:	0635      	lsls	r5, r6, #24
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	d501      	bpl.n	800ac6c <_printf_i+0x1cc>
 800ac68:	6019      	str	r1, [r3, #0]
 800ac6a:	e002      	b.n	800ac72 <_printf_i+0x1d2>
 800ac6c:	0670      	lsls	r0, r6, #25
 800ac6e:	d5fb      	bpl.n	800ac68 <_printf_i+0x1c8>
 800ac70:	8019      	strh	r1, [r3, #0]
 800ac72:	2300      	movs	r3, #0
 800ac74:	6123      	str	r3, [r4, #16]
 800ac76:	4615      	mov	r5, r2
 800ac78:	e7ba      	b.n	800abf0 <_printf_i+0x150>
 800ac7a:	682b      	ldr	r3, [r5, #0]
 800ac7c:	1d1a      	adds	r2, r3, #4
 800ac7e:	602a      	str	r2, [r5, #0]
 800ac80:	681d      	ldr	r5, [r3, #0]
 800ac82:	6862      	ldr	r2, [r4, #4]
 800ac84:	2100      	movs	r1, #0
 800ac86:	4628      	mov	r0, r5
 800ac88:	f7f5 ffba 	bl	8000c00 <memchr>
 800ac8c:	b108      	cbz	r0, 800ac92 <_printf_i+0x1f2>
 800ac8e:	1b40      	subs	r0, r0, r5
 800ac90:	6060      	str	r0, [r4, #4]
 800ac92:	6863      	ldr	r3, [r4, #4]
 800ac94:	6123      	str	r3, [r4, #16]
 800ac96:	2300      	movs	r3, #0
 800ac98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac9c:	e7a8      	b.n	800abf0 <_printf_i+0x150>
 800ac9e:	6923      	ldr	r3, [r4, #16]
 800aca0:	462a      	mov	r2, r5
 800aca2:	4649      	mov	r1, r9
 800aca4:	4640      	mov	r0, r8
 800aca6:	47d0      	blx	sl
 800aca8:	3001      	adds	r0, #1
 800acaa:	d0ab      	beq.n	800ac04 <_printf_i+0x164>
 800acac:	6823      	ldr	r3, [r4, #0]
 800acae:	079b      	lsls	r3, r3, #30
 800acb0:	d413      	bmi.n	800acda <_printf_i+0x23a>
 800acb2:	68e0      	ldr	r0, [r4, #12]
 800acb4:	9b03      	ldr	r3, [sp, #12]
 800acb6:	4298      	cmp	r0, r3
 800acb8:	bfb8      	it	lt
 800acba:	4618      	movlt	r0, r3
 800acbc:	e7a4      	b.n	800ac08 <_printf_i+0x168>
 800acbe:	2301      	movs	r3, #1
 800acc0:	4632      	mov	r2, r6
 800acc2:	4649      	mov	r1, r9
 800acc4:	4640      	mov	r0, r8
 800acc6:	47d0      	blx	sl
 800acc8:	3001      	adds	r0, #1
 800acca:	d09b      	beq.n	800ac04 <_printf_i+0x164>
 800accc:	3501      	adds	r5, #1
 800acce:	68e3      	ldr	r3, [r4, #12]
 800acd0:	9903      	ldr	r1, [sp, #12]
 800acd2:	1a5b      	subs	r3, r3, r1
 800acd4:	42ab      	cmp	r3, r5
 800acd6:	dcf2      	bgt.n	800acbe <_printf_i+0x21e>
 800acd8:	e7eb      	b.n	800acb2 <_printf_i+0x212>
 800acda:	2500      	movs	r5, #0
 800acdc:	f104 0619 	add.w	r6, r4, #25
 800ace0:	e7f5      	b.n	800acce <_printf_i+0x22e>
 800ace2:	bf00      	nop
 800ace4:	0800d37a 	.word	0x0800d37a
 800ace8:	0800d38b 	.word	0x0800d38b

0800acec <iprintf>:
 800acec:	b40f      	push	{r0, r1, r2, r3}
 800acee:	4b0a      	ldr	r3, [pc, #40]	; (800ad18 <iprintf+0x2c>)
 800acf0:	b513      	push	{r0, r1, r4, lr}
 800acf2:	681c      	ldr	r4, [r3, #0]
 800acf4:	b124      	cbz	r4, 800ad00 <iprintf+0x14>
 800acf6:	69a3      	ldr	r3, [r4, #24]
 800acf8:	b913      	cbnz	r3, 800ad00 <iprintf+0x14>
 800acfa:	4620      	mov	r0, r4
 800acfc:	f001 f858 	bl	800bdb0 <__sinit>
 800ad00:	ab05      	add	r3, sp, #20
 800ad02:	9a04      	ldr	r2, [sp, #16]
 800ad04:	68a1      	ldr	r1, [r4, #8]
 800ad06:	9301      	str	r3, [sp, #4]
 800ad08:	4620      	mov	r0, r4
 800ad0a:	f001 fe07 	bl	800c91c <_vfiprintf_r>
 800ad0e:	b002      	add	sp, #8
 800ad10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad14:	b004      	add	sp, #16
 800ad16:	4770      	bx	lr
 800ad18:	2000003c 	.word	0x2000003c

0800ad1c <_puts_r>:
 800ad1c:	b570      	push	{r4, r5, r6, lr}
 800ad1e:	460e      	mov	r6, r1
 800ad20:	4605      	mov	r5, r0
 800ad22:	b118      	cbz	r0, 800ad2c <_puts_r+0x10>
 800ad24:	6983      	ldr	r3, [r0, #24]
 800ad26:	b90b      	cbnz	r3, 800ad2c <_puts_r+0x10>
 800ad28:	f001 f842 	bl	800bdb0 <__sinit>
 800ad2c:	69ab      	ldr	r3, [r5, #24]
 800ad2e:	68ac      	ldr	r4, [r5, #8]
 800ad30:	b913      	cbnz	r3, 800ad38 <_puts_r+0x1c>
 800ad32:	4628      	mov	r0, r5
 800ad34:	f001 f83c 	bl	800bdb0 <__sinit>
 800ad38:	4b2c      	ldr	r3, [pc, #176]	; (800adec <_puts_r+0xd0>)
 800ad3a:	429c      	cmp	r4, r3
 800ad3c:	d120      	bne.n	800ad80 <_puts_r+0x64>
 800ad3e:	686c      	ldr	r4, [r5, #4]
 800ad40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad42:	07db      	lsls	r3, r3, #31
 800ad44:	d405      	bmi.n	800ad52 <_puts_r+0x36>
 800ad46:	89a3      	ldrh	r3, [r4, #12]
 800ad48:	0598      	lsls	r0, r3, #22
 800ad4a:	d402      	bmi.n	800ad52 <_puts_r+0x36>
 800ad4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad4e:	f001 f8d2 	bl	800bef6 <__retarget_lock_acquire_recursive>
 800ad52:	89a3      	ldrh	r3, [r4, #12]
 800ad54:	0719      	lsls	r1, r3, #28
 800ad56:	d51d      	bpl.n	800ad94 <_puts_r+0x78>
 800ad58:	6923      	ldr	r3, [r4, #16]
 800ad5a:	b1db      	cbz	r3, 800ad94 <_puts_r+0x78>
 800ad5c:	3e01      	subs	r6, #1
 800ad5e:	68a3      	ldr	r3, [r4, #8]
 800ad60:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ad64:	3b01      	subs	r3, #1
 800ad66:	60a3      	str	r3, [r4, #8]
 800ad68:	bb39      	cbnz	r1, 800adba <_puts_r+0x9e>
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	da38      	bge.n	800ade0 <_puts_r+0xc4>
 800ad6e:	4622      	mov	r2, r4
 800ad70:	210a      	movs	r1, #10
 800ad72:	4628      	mov	r0, r5
 800ad74:	f000 f848 	bl	800ae08 <__swbuf_r>
 800ad78:	3001      	adds	r0, #1
 800ad7a:	d011      	beq.n	800ada0 <_puts_r+0x84>
 800ad7c:	250a      	movs	r5, #10
 800ad7e:	e011      	b.n	800ada4 <_puts_r+0x88>
 800ad80:	4b1b      	ldr	r3, [pc, #108]	; (800adf0 <_puts_r+0xd4>)
 800ad82:	429c      	cmp	r4, r3
 800ad84:	d101      	bne.n	800ad8a <_puts_r+0x6e>
 800ad86:	68ac      	ldr	r4, [r5, #8]
 800ad88:	e7da      	b.n	800ad40 <_puts_r+0x24>
 800ad8a:	4b1a      	ldr	r3, [pc, #104]	; (800adf4 <_puts_r+0xd8>)
 800ad8c:	429c      	cmp	r4, r3
 800ad8e:	bf08      	it	eq
 800ad90:	68ec      	ldreq	r4, [r5, #12]
 800ad92:	e7d5      	b.n	800ad40 <_puts_r+0x24>
 800ad94:	4621      	mov	r1, r4
 800ad96:	4628      	mov	r0, r5
 800ad98:	f000 f888 	bl	800aeac <__swsetup_r>
 800ad9c:	2800      	cmp	r0, #0
 800ad9e:	d0dd      	beq.n	800ad5c <_puts_r+0x40>
 800ada0:	f04f 35ff 	mov.w	r5, #4294967295
 800ada4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ada6:	07da      	lsls	r2, r3, #31
 800ada8:	d405      	bmi.n	800adb6 <_puts_r+0x9a>
 800adaa:	89a3      	ldrh	r3, [r4, #12]
 800adac:	059b      	lsls	r3, r3, #22
 800adae:	d402      	bmi.n	800adb6 <_puts_r+0x9a>
 800adb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adb2:	f001 f8a1 	bl	800bef8 <__retarget_lock_release_recursive>
 800adb6:	4628      	mov	r0, r5
 800adb8:	bd70      	pop	{r4, r5, r6, pc}
 800adba:	2b00      	cmp	r3, #0
 800adbc:	da04      	bge.n	800adc8 <_puts_r+0xac>
 800adbe:	69a2      	ldr	r2, [r4, #24]
 800adc0:	429a      	cmp	r2, r3
 800adc2:	dc06      	bgt.n	800add2 <_puts_r+0xb6>
 800adc4:	290a      	cmp	r1, #10
 800adc6:	d004      	beq.n	800add2 <_puts_r+0xb6>
 800adc8:	6823      	ldr	r3, [r4, #0]
 800adca:	1c5a      	adds	r2, r3, #1
 800adcc:	6022      	str	r2, [r4, #0]
 800adce:	7019      	strb	r1, [r3, #0]
 800add0:	e7c5      	b.n	800ad5e <_puts_r+0x42>
 800add2:	4622      	mov	r2, r4
 800add4:	4628      	mov	r0, r5
 800add6:	f000 f817 	bl	800ae08 <__swbuf_r>
 800adda:	3001      	adds	r0, #1
 800addc:	d1bf      	bne.n	800ad5e <_puts_r+0x42>
 800adde:	e7df      	b.n	800ada0 <_puts_r+0x84>
 800ade0:	6823      	ldr	r3, [r4, #0]
 800ade2:	250a      	movs	r5, #10
 800ade4:	1c5a      	adds	r2, r3, #1
 800ade6:	6022      	str	r2, [r4, #0]
 800ade8:	701d      	strb	r5, [r3, #0]
 800adea:	e7db      	b.n	800ada4 <_puts_r+0x88>
 800adec:	0800d44c 	.word	0x0800d44c
 800adf0:	0800d46c 	.word	0x0800d46c
 800adf4:	0800d42c 	.word	0x0800d42c

0800adf8 <puts>:
 800adf8:	4b02      	ldr	r3, [pc, #8]	; (800ae04 <puts+0xc>)
 800adfa:	4601      	mov	r1, r0
 800adfc:	6818      	ldr	r0, [r3, #0]
 800adfe:	f7ff bf8d 	b.w	800ad1c <_puts_r>
 800ae02:	bf00      	nop
 800ae04:	2000003c 	.word	0x2000003c

0800ae08 <__swbuf_r>:
 800ae08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae0a:	460e      	mov	r6, r1
 800ae0c:	4614      	mov	r4, r2
 800ae0e:	4605      	mov	r5, r0
 800ae10:	b118      	cbz	r0, 800ae1a <__swbuf_r+0x12>
 800ae12:	6983      	ldr	r3, [r0, #24]
 800ae14:	b90b      	cbnz	r3, 800ae1a <__swbuf_r+0x12>
 800ae16:	f000 ffcb 	bl	800bdb0 <__sinit>
 800ae1a:	4b21      	ldr	r3, [pc, #132]	; (800aea0 <__swbuf_r+0x98>)
 800ae1c:	429c      	cmp	r4, r3
 800ae1e:	d12b      	bne.n	800ae78 <__swbuf_r+0x70>
 800ae20:	686c      	ldr	r4, [r5, #4]
 800ae22:	69a3      	ldr	r3, [r4, #24]
 800ae24:	60a3      	str	r3, [r4, #8]
 800ae26:	89a3      	ldrh	r3, [r4, #12]
 800ae28:	071a      	lsls	r2, r3, #28
 800ae2a:	d52f      	bpl.n	800ae8c <__swbuf_r+0x84>
 800ae2c:	6923      	ldr	r3, [r4, #16]
 800ae2e:	b36b      	cbz	r3, 800ae8c <__swbuf_r+0x84>
 800ae30:	6923      	ldr	r3, [r4, #16]
 800ae32:	6820      	ldr	r0, [r4, #0]
 800ae34:	1ac0      	subs	r0, r0, r3
 800ae36:	6963      	ldr	r3, [r4, #20]
 800ae38:	b2f6      	uxtb	r6, r6
 800ae3a:	4283      	cmp	r3, r0
 800ae3c:	4637      	mov	r7, r6
 800ae3e:	dc04      	bgt.n	800ae4a <__swbuf_r+0x42>
 800ae40:	4621      	mov	r1, r4
 800ae42:	4628      	mov	r0, r5
 800ae44:	f000 ff20 	bl	800bc88 <_fflush_r>
 800ae48:	bb30      	cbnz	r0, 800ae98 <__swbuf_r+0x90>
 800ae4a:	68a3      	ldr	r3, [r4, #8]
 800ae4c:	3b01      	subs	r3, #1
 800ae4e:	60a3      	str	r3, [r4, #8]
 800ae50:	6823      	ldr	r3, [r4, #0]
 800ae52:	1c5a      	adds	r2, r3, #1
 800ae54:	6022      	str	r2, [r4, #0]
 800ae56:	701e      	strb	r6, [r3, #0]
 800ae58:	6963      	ldr	r3, [r4, #20]
 800ae5a:	3001      	adds	r0, #1
 800ae5c:	4283      	cmp	r3, r0
 800ae5e:	d004      	beq.n	800ae6a <__swbuf_r+0x62>
 800ae60:	89a3      	ldrh	r3, [r4, #12]
 800ae62:	07db      	lsls	r3, r3, #31
 800ae64:	d506      	bpl.n	800ae74 <__swbuf_r+0x6c>
 800ae66:	2e0a      	cmp	r6, #10
 800ae68:	d104      	bne.n	800ae74 <__swbuf_r+0x6c>
 800ae6a:	4621      	mov	r1, r4
 800ae6c:	4628      	mov	r0, r5
 800ae6e:	f000 ff0b 	bl	800bc88 <_fflush_r>
 800ae72:	b988      	cbnz	r0, 800ae98 <__swbuf_r+0x90>
 800ae74:	4638      	mov	r0, r7
 800ae76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae78:	4b0a      	ldr	r3, [pc, #40]	; (800aea4 <__swbuf_r+0x9c>)
 800ae7a:	429c      	cmp	r4, r3
 800ae7c:	d101      	bne.n	800ae82 <__swbuf_r+0x7a>
 800ae7e:	68ac      	ldr	r4, [r5, #8]
 800ae80:	e7cf      	b.n	800ae22 <__swbuf_r+0x1a>
 800ae82:	4b09      	ldr	r3, [pc, #36]	; (800aea8 <__swbuf_r+0xa0>)
 800ae84:	429c      	cmp	r4, r3
 800ae86:	bf08      	it	eq
 800ae88:	68ec      	ldreq	r4, [r5, #12]
 800ae8a:	e7ca      	b.n	800ae22 <__swbuf_r+0x1a>
 800ae8c:	4621      	mov	r1, r4
 800ae8e:	4628      	mov	r0, r5
 800ae90:	f000 f80c 	bl	800aeac <__swsetup_r>
 800ae94:	2800      	cmp	r0, #0
 800ae96:	d0cb      	beq.n	800ae30 <__swbuf_r+0x28>
 800ae98:	f04f 37ff 	mov.w	r7, #4294967295
 800ae9c:	e7ea      	b.n	800ae74 <__swbuf_r+0x6c>
 800ae9e:	bf00      	nop
 800aea0:	0800d44c 	.word	0x0800d44c
 800aea4:	0800d46c 	.word	0x0800d46c
 800aea8:	0800d42c 	.word	0x0800d42c

0800aeac <__swsetup_r>:
 800aeac:	4b32      	ldr	r3, [pc, #200]	; (800af78 <__swsetup_r+0xcc>)
 800aeae:	b570      	push	{r4, r5, r6, lr}
 800aeb0:	681d      	ldr	r5, [r3, #0]
 800aeb2:	4606      	mov	r6, r0
 800aeb4:	460c      	mov	r4, r1
 800aeb6:	b125      	cbz	r5, 800aec2 <__swsetup_r+0x16>
 800aeb8:	69ab      	ldr	r3, [r5, #24]
 800aeba:	b913      	cbnz	r3, 800aec2 <__swsetup_r+0x16>
 800aebc:	4628      	mov	r0, r5
 800aebe:	f000 ff77 	bl	800bdb0 <__sinit>
 800aec2:	4b2e      	ldr	r3, [pc, #184]	; (800af7c <__swsetup_r+0xd0>)
 800aec4:	429c      	cmp	r4, r3
 800aec6:	d10f      	bne.n	800aee8 <__swsetup_r+0x3c>
 800aec8:	686c      	ldr	r4, [r5, #4]
 800aeca:	89a3      	ldrh	r3, [r4, #12]
 800aecc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aed0:	0719      	lsls	r1, r3, #28
 800aed2:	d42c      	bmi.n	800af2e <__swsetup_r+0x82>
 800aed4:	06dd      	lsls	r5, r3, #27
 800aed6:	d411      	bmi.n	800aefc <__swsetup_r+0x50>
 800aed8:	2309      	movs	r3, #9
 800aeda:	6033      	str	r3, [r6, #0]
 800aedc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aee0:	81a3      	strh	r3, [r4, #12]
 800aee2:	f04f 30ff 	mov.w	r0, #4294967295
 800aee6:	e03e      	b.n	800af66 <__swsetup_r+0xba>
 800aee8:	4b25      	ldr	r3, [pc, #148]	; (800af80 <__swsetup_r+0xd4>)
 800aeea:	429c      	cmp	r4, r3
 800aeec:	d101      	bne.n	800aef2 <__swsetup_r+0x46>
 800aeee:	68ac      	ldr	r4, [r5, #8]
 800aef0:	e7eb      	b.n	800aeca <__swsetup_r+0x1e>
 800aef2:	4b24      	ldr	r3, [pc, #144]	; (800af84 <__swsetup_r+0xd8>)
 800aef4:	429c      	cmp	r4, r3
 800aef6:	bf08      	it	eq
 800aef8:	68ec      	ldreq	r4, [r5, #12]
 800aefa:	e7e6      	b.n	800aeca <__swsetup_r+0x1e>
 800aefc:	0758      	lsls	r0, r3, #29
 800aefe:	d512      	bpl.n	800af26 <__swsetup_r+0x7a>
 800af00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af02:	b141      	cbz	r1, 800af16 <__swsetup_r+0x6a>
 800af04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af08:	4299      	cmp	r1, r3
 800af0a:	d002      	beq.n	800af12 <__swsetup_r+0x66>
 800af0c:	4630      	mov	r0, r6
 800af0e:	f001 fbfb 	bl	800c708 <_free_r>
 800af12:	2300      	movs	r3, #0
 800af14:	6363      	str	r3, [r4, #52]	; 0x34
 800af16:	89a3      	ldrh	r3, [r4, #12]
 800af18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af1c:	81a3      	strh	r3, [r4, #12]
 800af1e:	2300      	movs	r3, #0
 800af20:	6063      	str	r3, [r4, #4]
 800af22:	6923      	ldr	r3, [r4, #16]
 800af24:	6023      	str	r3, [r4, #0]
 800af26:	89a3      	ldrh	r3, [r4, #12]
 800af28:	f043 0308 	orr.w	r3, r3, #8
 800af2c:	81a3      	strh	r3, [r4, #12]
 800af2e:	6923      	ldr	r3, [r4, #16]
 800af30:	b94b      	cbnz	r3, 800af46 <__swsetup_r+0x9a>
 800af32:	89a3      	ldrh	r3, [r4, #12]
 800af34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af3c:	d003      	beq.n	800af46 <__swsetup_r+0x9a>
 800af3e:	4621      	mov	r1, r4
 800af40:	4630      	mov	r0, r6
 800af42:	f000 ffff 	bl	800bf44 <__smakebuf_r>
 800af46:	89a0      	ldrh	r0, [r4, #12]
 800af48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af4c:	f010 0301 	ands.w	r3, r0, #1
 800af50:	d00a      	beq.n	800af68 <__swsetup_r+0xbc>
 800af52:	2300      	movs	r3, #0
 800af54:	60a3      	str	r3, [r4, #8]
 800af56:	6963      	ldr	r3, [r4, #20]
 800af58:	425b      	negs	r3, r3
 800af5a:	61a3      	str	r3, [r4, #24]
 800af5c:	6923      	ldr	r3, [r4, #16]
 800af5e:	b943      	cbnz	r3, 800af72 <__swsetup_r+0xc6>
 800af60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800af64:	d1ba      	bne.n	800aedc <__swsetup_r+0x30>
 800af66:	bd70      	pop	{r4, r5, r6, pc}
 800af68:	0781      	lsls	r1, r0, #30
 800af6a:	bf58      	it	pl
 800af6c:	6963      	ldrpl	r3, [r4, #20]
 800af6e:	60a3      	str	r3, [r4, #8]
 800af70:	e7f4      	b.n	800af5c <__swsetup_r+0xb0>
 800af72:	2000      	movs	r0, #0
 800af74:	e7f7      	b.n	800af66 <__swsetup_r+0xba>
 800af76:	bf00      	nop
 800af78:	2000003c 	.word	0x2000003c
 800af7c:	0800d44c 	.word	0x0800d44c
 800af80:	0800d46c 	.word	0x0800d46c
 800af84:	0800d42c 	.word	0x0800d42c

0800af88 <quorem>:
 800af88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af8c:	6903      	ldr	r3, [r0, #16]
 800af8e:	690c      	ldr	r4, [r1, #16]
 800af90:	42a3      	cmp	r3, r4
 800af92:	4607      	mov	r7, r0
 800af94:	f2c0 8081 	blt.w	800b09a <quorem+0x112>
 800af98:	3c01      	subs	r4, #1
 800af9a:	f101 0814 	add.w	r8, r1, #20
 800af9e:	f100 0514 	add.w	r5, r0, #20
 800afa2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800afa6:	9301      	str	r3, [sp, #4]
 800afa8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800afac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800afb0:	3301      	adds	r3, #1
 800afb2:	429a      	cmp	r2, r3
 800afb4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800afb8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800afbc:	fbb2 f6f3 	udiv	r6, r2, r3
 800afc0:	d331      	bcc.n	800b026 <quorem+0x9e>
 800afc2:	f04f 0e00 	mov.w	lr, #0
 800afc6:	4640      	mov	r0, r8
 800afc8:	46ac      	mov	ip, r5
 800afca:	46f2      	mov	sl, lr
 800afcc:	f850 2b04 	ldr.w	r2, [r0], #4
 800afd0:	b293      	uxth	r3, r2
 800afd2:	fb06 e303 	mla	r3, r6, r3, lr
 800afd6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800afda:	b29b      	uxth	r3, r3
 800afdc:	ebaa 0303 	sub.w	r3, sl, r3
 800afe0:	f8dc a000 	ldr.w	sl, [ip]
 800afe4:	0c12      	lsrs	r2, r2, #16
 800afe6:	fa13 f38a 	uxtah	r3, r3, sl
 800afea:	fb06 e202 	mla	r2, r6, r2, lr
 800afee:	9300      	str	r3, [sp, #0]
 800aff0:	9b00      	ldr	r3, [sp, #0]
 800aff2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800aff6:	b292      	uxth	r2, r2
 800aff8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800affc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b000:	f8bd 3000 	ldrh.w	r3, [sp]
 800b004:	4581      	cmp	r9, r0
 800b006:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b00a:	f84c 3b04 	str.w	r3, [ip], #4
 800b00e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b012:	d2db      	bcs.n	800afcc <quorem+0x44>
 800b014:	f855 300b 	ldr.w	r3, [r5, fp]
 800b018:	b92b      	cbnz	r3, 800b026 <quorem+0x9e>
 800b01a:	9b01      	ldr	r3, [sp, #4]
 800b01c:	3b04      	subs	r3, #4
 800b01e:	429d      	cmp	r5, r3
 800b020:	461a      	mov	r2, r3
 800b022:	d32e      	bcc.n	800b082 <quorem+0xfa>
 800b024:	613c      	str	r4, [r7, #16]
 800b026:	4638      	mov	r0, r7
 800b028:	f001 fa56 	bl	800c4d8 <__mcmp>
 800b02c:	2800      	cmp	r0, #0
 800b02e:	db24      	blt.n	800b07a <quorem+0xf2>
 800b030:	3601      	adds	r6, #1
 800b032:	4628      	mov	r0, r5
 800b034:	f04f 0c00 	mov.w	ip, #0
 800b038:	f858 2b04 	ldr.w	r2, [r8], #4
 800b03c:	f8d0 e000 	ldr.w	lr, [r0]
 800b040:	b293      	uxth	r3, r2
 800b042:	ebac 0303 	sub.w	r3, ip, r3
 800b046:	0c12      	lsrs	r2, r2, #16
 800b048:	fa13 f38e 	uxtah	r3, r3, lr
 800b04c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b050:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b054:	b29b      	uxth	r3, r3
 800b056:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b05a:	45c1      	cmp	r9, r8
 800b05c:	f840 3b04 	str.w	r3, [r0], #4
 800b060:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b064:	d2e8      	bcs.n	800b038 <quorem+0xb0>
 800b066:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b06a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b06e:	b922      	cbnz	r2, 800b07a <quorem+0xf2>
 800b070:	3b04      	subs	r3, #4
 800b072:	429d      	cmp	r5, r3
 800b074:	461a      	mov	r2, r3
 800b076:	d30a      	bcc.n	800b08e <quorem+0x106>
 800b078:	613c      	str	r4, [r7, #16]
 800b07a:	4630      	mov	r0, r6
 800b07c:	b003      	add	sp, #12
 800b07e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b082:	6812      	ldr	r2, [r2, #0]
 800b084:	3b04      	subs	r3, #4
 800b086:	2a00      	cmp	r2, #0
 800b088:	d1cc      	bne.n	800b024 <quorem+0x9c>
 800b08a:	3c01      	subs	r4, #1
 800b08c:	e7c7      	b.n	800b01e <quorem+0x96>
 800b08e:	6812      	ldr	r2, [r2, #0]
 800b090:	3b04      	subs	r3, #4
 800b092:	2a00      	cmp	r2, #0
 800b094:	d1f0      	bne.n	800b078 <quorem+0xf0>
 800b096:	3c01      	subs	r4, #1
 800b098:	e7eb      	b.n	800b072 <quorem+0xea>
 800b09a:	2000      	movs	r0, #0
 800b09c:	e7ee      	b.n	800b07c <quorem+0xf4>
	...

0800b0a0 <_dtoa_r>:
 800b0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0a4:	ed2d 8b02 	vpush	{d8}
 800b0a8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b0aa:	b091      	sub	sp, #68	; 0x44
 800b0ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b0b0:	ec59 8b10 	vmov	r8, r9, d0
 800b0b4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800b0b6:	9106      	str	r1, [sp, #24]
 800b0b8:	4606      	mov	r6, r0
 800b0ba:	9208      	str	r2, [sp, #32]
 800b0bc:	930c      	str	r3, [sp, #48]	; 0x30
 800b0be:	b975      	cbnz	r5, 800b0de <_dtoa_r+0x3e>
 800b0c0:	2010      	movs	r0, #16
 800b0c2:	f000 ff7f 	bl	800bfc4 <malloc>
 800b0c6:	4602      	mov	r2, r0
 800b0c8:	6270      	str	r0, [r6, #36]	; 0x24
 800b0ca:	b920      	cbnz	r0, 800b0d6 <_dtoa_r+0x36>
 800b0cc:	4baa      	ldr	r3, [pc, #680]	; (800b378 <_dtoa_r+0x2d8>)
 800b0ce:	21ea      	movs	r1, #234	; 0xea
 800b0d0:	48aa      	ldr	r0, [pc, #680]	; (800b37c <_dtoa_r+0x2dc>)
 800b0d2:	f001 fdb9 	bl	800cc48 <__assert_func>
 800b0d6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b0da:	6005      	str	r5, [r0, #0]
 800b0dc:	60c5      	str	r5, [r0, #12]
 800b0de:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b0e0:	6819      	ldr	r1, [r3, #0]
 800b0e2:	b151      	cbz	r1, 800b0fa <_dtoa_r+0x5a>
 800b0e4:	685a      	ldr	r2, [r3, #4]
 800b0e6:	604a      	str	r2, [r1, #4]
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	4093      	lsls	r3, r2
 800b0ec:	608b      	str	r3, [r1, #8]
 800b0ee:	4630      	mov	r0, r6
 800b0f0:	f000 ffb0 	bl	800c054 <_Bfree>
 800b0f4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	601a      	str	r2, [r3, #0]
 800b0fa:	f1b9 0300 	subs.w	r3, r9, #0
 800b0fe:	bfbb      	ittet	lt
 800b100:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b104:	9303      	strlt	r3, [sp, #12]
 800b106:	2300      	movge	r3, #0
 800b108:	2201      	movlt	r2, #1
 800b10a:	bfac      	ite	ge
 800b10c:	6023      	strge	r3, [r4, #0]
 800b10e:	6022      	strlt	r2, [r4, #0]
 800b110:	4b9b      	ldr	r3, [pc, #620]	; (800b380 <_dtoa_r+0x2e0>)
 800b112:	9c03      	ldr	r4, [sp, #12]
 800b114:	43a3      	bics	r3, r4
 800b116:	d11c      	bne.n	800b152 <_dtoa_r+0xb2>
 800b118:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b11a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b11e:	6013      	str	r3, [r2, #0]
 800b120:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800b124:	ea53 0308 	orrs.w	r3, r3, r8
 800b128:	f000 84fd 	beq.w	800bb26 <_dtoa_r+0xa86>
 800b12c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b12e:	b963      	cbnz	r3, 800b14a <_dtoa_r+0xaa>
 800b130:	4b94      	ldr	r3, [pc, #592]	; (800b384 <_dtoa_r+0x2e4>)
 800b132:	e01f      	b.n	800b174 <_dtoa_r+0xd4>
 800b134:	4b94      	ldr	r3, [pc, #592]	; (800b388 <_dtoa_r+0x2e8>)
 800b136:	9301      	str	r3, [sp, #4]
 800b138:	3308      	adds	r3, #8
 800b13a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b13c:	6013      	str	r3, [r2, #0]
 800b13e:	9801      	ldr	r0, [sp, #4]
 800b140:	b011      	add	sp, #68	; 0x44
 800b142:	ecbd 8b02 	vpop	{d8}
 800b146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b14a:	4b8e      	ldr	r3, [pc, #568]	; (800b384 <_dtoa_r+0x2e4>)
 800b14c:	9301      	str	r3, [sp, #4]
 800b14e:	3303      	adds	r3, #3
 800b150:	e7f3      	b.n	800b13a <_dtoa_r+0x9a>
 800b152:	ed9d 8b02 	vldr	d8, [sp, #8]
 800b156:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b15a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b15e:	d10b      	bne.n	800b178 <_dtoa_r+0xd8>
 800b160:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b162:	2301      	movs	r3, #1
 800b164:	6013      	str	r3, [r2, #0]
 800b166:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b168:	2b00      	cmp	r3, #0
 800b16a:	f000 84d9 	beq.w	800bb20 <_dtoa_r+0xa80>
 800b16e:	4887      	ldr	r0, [pc, #540]	; (800b38c <_dtoa_r+0x2ec>)
 800b170:	6018      	str	r0, [r3, #0]
 800b172:	1e43      	subs	r3, r0, #1
 800b174:	9301      	str	r3, [sp, #4]
 800b176:	e7e2      	b.n	800b13e <_dtoa_r+0x9e>
 800b178:	a90f      	add	r1, sp, #60	; 0x3c
 800b17a:	aa0e      	add	r2, sp, #56	; 0x38
 800b17c:	4630      	mov	r0, r6
 800b17e:	eeb0 0b48 	vmov.f64	d0, d8
 800b182:	f001 fa4f 	bl	800c624 <__d2b>
 800b186:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800b18a:	4605      	mov	r5, r0
 800b18c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b18e:	2900      	cmp	r1, #0
 800b190:	d046      	beq.n	800b220 <_dtoa_r+0x180>
 800b192:	ee18 4a90 	vmov	r4, s17
 800b196:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b19a:	ec53 2b18 	vmov	r2, r3, d8
 800b19e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800b1a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b1a6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b1aa:	2400      	movs	r4, #0
 800b1ac:	ec43 2b16 	vmov	d6, r2, r3
 800b1b0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800b1b4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800b360 <_dtoa_r+0x2c0>
 800b1b8:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b1bc:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800b368 <_dtoa_r+0x2c8>
 800b1c0:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b1c4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800b370 <_dtoa_r+0x2d0>
 800b1c8:	ee07 1a90 	vmov	s15, r1
 800b1cc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800b1d0:	eeb0 7b46 	vmov.f64	d7, d6
 800b1d4:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b1d8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b1dc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b1e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1e4:	ee16 ba90 	vmov	fp, s13
 800b1e8:	940a      	str	r4, [sp, #40]	; 0x28
 800b1ea:	d508      	bpl.n	800b1fe <_dtoa_r+0x15e>
 800b1ec:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b1f0:	eeb4 6b47 	vcmp.f64	d6, d7
 800b1f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1f8:	bf18      	it	ne
 800b1fa:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800b1fe:	f1bb 0f16 	cmp.w	fp, #22
 800b202:	d82f      	bhi.n	800b264 <_dtoa_r+0x1c4>
 800b204:	4b62      	ldr	r3, [pc, #392]	; (800b390 <_dtoa_r+0x2f0>)
 800b206:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b20a:	ed93 7b00 	vldr	d7, [r3]
 800b20e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b216:	d501      	bpl.n	800b21c <_dtoa_r+0x17c>
 800b218:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b21c:	2300      	movs	r3, #0
 800b21e:	e022      	b.n	800b266 <_dtoa_r+0x1c6>
 800b220:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b222:	4401      	add	r1, r0
 800b224:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800b228:	2b20      	cmp	r3, #32
 800b22a:	bfc1      	itttt	gt
 800b22c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b230:	fa04 f303 	lslgt.w	r3, r4, r3
 800b234:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800b238:	fa28 f804 	lsrgt.w	r8, r8, r4
 800b23c:	bfd6      	itet	le
 800b23e:	f1c3 0320 	rsble	r3, r3, #32
 800b242:	ea43 0808 	orrgt.w	r8, r3, r8
 800b246:	fa08 f803 	lslle.w	r8, r8, r3
 800b24a:	ee07 8a90 	vmov	s15, r8
 800b24e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b252:	3901      	subs	r1, #1
 800b254:	ee17 4a90 	vmov	r4, s15
 800b258:	ec53 2b17 	vmov	r2, r3, d7
 800b25c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800b260:	2401      	movs	r4, #1
 800b262:	e7a3      	b.n	800b1ac <_dtoa_r+0x10c>
 800b264:	2301      	movs	r3, #1
 800b266:	930b      	str	r3, [sp, #44]	; 0x2c
 800b268:	1a43      	subs	r3, r0, r1
 800b26a:	1e5a      	subs	r2, r3, #1
 800b26c:	bf45      	ittet	mi
 800b26e:	f1c3 0301 	rsbmi	r3, r3, #1
 800b272:	9304      	strmi	r3, [sp, #16]
 800b274:	2300      	movpl	r3, #0
 800b276:	2300      	movmi	r3, #0
 800b278:	9205      	str	r2, [sp, #20]
 800b27a:	bf54      	ite	pl
 800b27c:	9304      	strpl	r3, [sp, #16]
 800b27e:	9305      	strmi	r3, [sp, #20]
 800b280:	f1bb 0f00 	cmp.w	fp, #0
 800b284:	db18      	blt.n	800b2b8 <_dtoa_r+0x218>
 800b286:	9b05      	ldr	r3, [sp, #20]
 800b288:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800b28c:	445b      	add	r3, fp
 800b28e:	9305      	str	r3, [sp, #20]
 800b290:	2300      	movs	r3, #0
 800b292:	9a06      	ldr	r2, [sp, #24]
 800b294:	2a09      	cmp	r2, #9
 800b296:	d849      	bhi.n	800b32c <_dtoa_r+0x28c>
 800b298:	2a05      	cmp	r2, #5
 800b29a:	bfc4      	itt	gt
 800b29c:	3a04      	subgt	r2, #4
 800b29e:	9206      	strgt	r2, [sp, #24]
 800b2a0:	9a06      	ldr	r2, [sp, #24]
 800b2a2:	f1a2 0202 	sub.w	r2, r2, #2
 800b2a6:	bfcc      	ite	gt
 800b2a8:	2400      	movgt	r4, #0
 800b2aa:	2401      	movle	r4, #1
 800b2ac:	2a03      	cmp	r2, #3
 800b2ae:	d848      	bhi.n	800b342 <_dtoa_r+0x2a2>
 800b2b0:	e8df f002 	tbb	[pc, r2]
 800b2b4:	3a2c2e0b 	.word	0x3a2c2e0b
 800b2b8:	9b04      	ldr	r3, [sp, #16]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	eba3 030b 	sub.w	r3, r3, fp
 800b2c0:	9304      	str	r3, [sp, #16]
 800b2c2:	9209      	str	r2, [sp, #36]	; 0x24
 800b2c4:	f1cb 0300 	rsb	r3, fp, #0
 800b2c8:	e7e3      	b.n	800b292 <_dtoa_r+0x1f2>
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	9207      	str	r2, [sp, #28]
 800b2ce:	9a08      	ldr	r2, [sp, #32]
 800b2d0:	2a00      	cmp	r2, #0
 800b2d2:	dc39      	bgt.n	800b348 <_dtoa_r+0x2a8>
 800b2d4:	f04f 0a01 	mov.w	sl, #1
 800b2d8:	46d1      	mov	r9, sl
 800b2da:	4652      	mov	r2, sl
 800b2dc:	f8cd a020 	str.w	sl, [sp, #32]
 800b2e0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800b2e2:	2100      	movs	r1, #0
 800b2e4:	6079      	str	r1, [r7, #4]
 800b2e6:	2004      	movs	r0, #4
 800b2e8:	f100 0c14 	add.w	ip, r0, #20
 800b2ec:	4594      	cmp	ip, r2
 800b2ee:	6879      	ldr	r1, [r7, #4]
 800b2f0:	d92f      	bls.n	800b352 <_dtoa_r+0x2b2>
 800b2f2:	4630      	mov	r0, r6
 800b2f4:	930d      	str	r3, [sp, #52]	; 0x34
 800b2f6:	f000 fe6d 	bl	800bfd4 <_Balloc>
 800b2fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2fc:	9001      	str	r0, [sp, #4]
 800b2fe:	4602      	mov	r2, r0
 800b300:	2800      	cmp	r0, #0
 800b302:	d149      	bne.n	800b398 <_dtoa_r+0x2f8>
 800b304:	4b23      	ldr	r3, [pc, #140]	; (800b394 <_dtoa_r+0x2f4>)
 800b306:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b30a:	e6e1      	b.n	800b0d0 <_dtoa_r+0x30>
 800b30c:	2201      	movs	r2, #1
 800b30e:	e7dd      	b.n	800b2cc <_dtoa_r+0x22c>
 800b310:	2200      	movs	r2, #0
 800b312:	9207      	str	r2, [sp, #28]
 800b314:	9a08      	ldr	r2, [sp, #32]
 800b316:	eb0b 0a02 	add.w	sl, fp, r2
 800b31a:	f10a 0901 	add.w	r9, sl, #1
 800b31e:	464a      	mov	r2, r9
 800b320:	2a01      	cmp	r2, #1
 800b322:	bfb8      	it	lt
 800b324:	2201      	movlt	r2, #1
 800b326:	e7db      	b.n	800b2e0 <_dtoa_r+0x240>
 800b328:	2201      	movs	r2, #1
 800b32a:	e7f2      	b.n	800b312 <_dtoa_r+0x272>
 800b32c:	2401      	movs	r4, #1
 800b32e:	2200      	movs	r2, #0
 800b330:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800b334:	f04f 3aff 	mov.w	sl, #4294967295
 800b338:	2100      	movs	r1, #0
 800b33a:	46d1      	mov	r9, sl
 800b33c:	2212      	movs	r2, #18
 800b33e:	9108      	str	r1, [sp, #32]
 800b340:	e7ce      	b.n	800b2e0 <_dtoa_r+0x240>
 800b342:	2201      	movs	r2, #1
 800b344:	9207      	str	r2, [sp, #28]
 800b346:	e7f5      	b.n	800b334 <_dtoa_r+0x294>
 800b348:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b34c:	46d1      	mov	r9, sl
 800b34e:	4652      	mov	r2, sl
 800b350:	e7c6      	b.n	800b2e0 <_dtoa_r+0x240>
 800b352:	3101      	adds	r1, #1
 800b354:	6079      	str	r1, [r7, #4]
 800b356:	0040      	lsls	r0, r0, #1
 800b358:	e7c6      	b.n	800b2e8 <_dtoa_r+0x248>
 800b35a:	bf00      	nop
 800b35c:	f3af 8000 	nop.w
 800b360:	636f4361 	.word	0x636f4361
 800b364:	3fd287a7 	.word	0x3fd287a7
 800b368:	8b60c8b3 	.word	0x8b60c8b3
 800b36c:	3fc68a28 	.word	0x3fc68a28
 800b370:	509f79fb 	.word	0x509f79fb
 800b374:	3fd34413 	.word	0x3fd34413
 800b378:	0800d3a9 	.word	0x0800d3a9
 800b37c:	0800d3c0 	.word	0x0800d3c0
 800b380:	7ff00000 	.word	0x7ff00000
 800b384:	0800d3a5 	.word	0x0800d3a5
 800b388:	0800d39c 	.word	0x0800d39c
 800b38c:	0800d379 	.word	0x0800d379
 800b390:	0800d510 	.word	0x0800d510
 800b394:	0800d41b 	.word	0x0800d41b
 800b398:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800b39a:	9901      	ldr	r1, [sp, #4]
 800b39c:	6011      	str	r1, [r2, #0]
 800b39e:	f1b9 0f0e 	cmp.w	r9, #14
 800b3a2:	d86c      	bhi.n	800b47e <_dtoa_r+0x3de>
 800b3a4:	2c00      	cmp	r4, #0
 800b3a6:	d06a      	beq.n	800b47e <_dtoa_r+0x3de>
 800b3a8:	f1bb 0f00 	cmp.w	fp, #0
 800b3ac:	f340 80a0 	ble.w	800b4f0 <_dtoa_r+0x450>
 800b3b0:	49c1      	ldr	r1, [pc, #772]	; (800b6b8 <_dtoa_r+0x618>)
 800b3b2:	f00b 020f 	and.w	r2, fp, #15
 800b3b6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800b3ba:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b3be:	ed92 7b00 	vldr	d7, [r2]
 800b3c2:	ea4f 112b 	mov.w	r1, fp, asr #4
 800b3c6:	f000 8087 	beq.w	800b4d8 <_dtoa_r+0x438>
 800b3ca:	4abc      	ldr	r2, [pc, #752]	; (800b6bc <_dtoa_r+0x61c>)
 800b3cc:	ed92 6b08 	vldr	d6, [r2, #32]
 800b3d0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800b3d4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b3d8:	f001 010f 	and.w	r1, r1, #15
 800b3dc:	2203      	movs	r2, #3
 800b3de:	48b7      	ldr	r0, [pc, #732]	; (800b6bc <_dtoa_r+0x61c>)
 800b3e0:	2900      	cmp	r1, #0
 800b3e2:	d17b      	bne.n	800b4dc <_dtoa_r+0x43c>
 800b3e4:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b3e8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b3ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b3f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b3f2:	2900      	cmp	r1, #0
 800b3f4:	f000 80a2 	beq.w	800b53c <_dtoa_r+0x49c>
 800b3f8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b3fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b400:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b408:	f140 8098 	bpl.w	800b53c <_dtoa_r+0x49c>
 800b40c:	f1b9 0f00 	cmp.w	r9, #0
 800b410:	f000 8094 	beq.w	800b53c <_dtoa_r+0x49c>
 800b414:	f1ba 0f00 	cmp.w	sl, #0
 800b418:	dd2f      	ble.n	800b47a <_dtoa_r+0x3da>
 800b41a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800b41e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b422:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b426:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b42a:	3201      	adds	r2, #1
 800b42c:	4650      	mov	r0, sl
 800b42e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b432:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800b436:	ee07 2a90 	vmov	s15, r2
 800b43a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b43e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b442:	ee15 4a90 	vmov	r4, s11
 800b446:	ec52 1b15 	vmov	r1, r2, d5
 800b44a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800b44e:	2800      	cmp	r0, #0
 800b450:	d177      	bne.n	800b542 <_dtoa_r+0x4a2>
 800b452:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b456:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b45a:	ec42 1b17 	vmov	d7, r1, r2
 800b45e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b466:	f300 8263 	bgt.w	800b930 <_dtoa_r+0x890>
 800b46a:	eeb1 7b47 	vneg.f64	d7, d7
 800b46e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b476:	f100 8258 	bmi.w	800b92a <_dtoa_r+0x88a>
 800b47a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b47e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b480:	2a00      	cmp	r2, #0
 800b482:	f2c0 811d 	blt.w	800b6c0 <_dtoa_r+0x620>
 800b486:	f1bb 0f0e 	cmp.w	fp, #14
 800b48a:	f300 8119 	bgt.w	800b6c0 <_dtoa_r+0x620>
 800b48e:	4b8a      	ldr	r3, [pc, #552]	; (800b6b8 <_dtoa_r+0x618>)
 800b490:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b494:	ed93 6b00 	vldr	d6, [r3]
 800b498:	9b08      	ldr	r3, [sp, #32]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	f280 80b7 	bge.w	800b60e <_dtoa_r+0x56e>
 800b4a0:	f1b9 0f00 	cmp.w	r9, #0
 800b4a4:	f300 80b3 	bgt.w	800b60e <_dtoa_r+0x56e>
 800b4a8:	f040 823f 	bne.w	800b92a <_dtoa_r+0x88a>
 800b4ac:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b4b0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b4b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b4b8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b4bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4c0:	464c      	mov	r4, r9
 800b4c2:	464f      	mov	r7, r9
 800b4c4:	f280 8215 	bge.w	800b8f2 <_dtoa_r+0x852>
 800b4c8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b4cc:	2331      	movs	r3, #49	; 0x31
 800b4ce:	f808 3b01 	strb.w	r3, [r8], #1
 800b4d2:	f10b 0b01 	add.w	fp, fp, #1
 800b4d6:	e211      	b.n	800b8fc <_dtoa_r+0x85c>
 800b4d8:	2202      	movs	r2, #2
 800b4da:	e780      	b.n	800b3de <_dtoa_r+0x33e>
 800b4dc:	07cc      	lsls	r4, r1, #31
 800b4de:	d504      	bpl.n	800b4ea <_dtoa_r+0x44a>
 800b4e0:	ed90 6b00 	vldr	d6, [r0]
 800b4e4:	3201      	adds	r2, #1
 800b4e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b4ea:	1049      	asrs	r1, r1, #1
 800b4ec:	3008      	adds	r0, #8
 800b4ee:	e777      	b.n	800b3e0 <_dtoa_r+0x340>
 800b4f0:	d022      	beq.n	800b538 <_dtoa_r+0x498>
 800b4f2:	f1cb 0100 	rsb	r1, fp, #0
 800b4f6:	4a70      	ldr	r2, [pc, #448]	; (800b6b8 <_dtoa_r+0x618>)
 800b4f8:	f001 000f 	and.w	r0, r1, #15
 800b4fc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800b500:	ed92 7b00 	vldr	d7, [r2]
 800b504:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b508:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b50c:	486b      	ldr	r0, [pc, #428]	; (800b6bc <_dtoa_r+0x61c>)
 800b50e:	1109      	asrs	r1, r1, #4
 800b510:	2400      	movs	r4, #0
 800b512:	2202      	movs	r2, #2
 800b514:	b929      	cbnz	r1, 800b522 <_dtoa_r+0x482>
 800b516:	2c00      	cmp	r4, #0
 800b518:	f43f af6a 	beq.w	800b3f0 <_dtoa_r+0x350>
 800b51c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b520:	e766      	b.n	800b3f0 <_dtoa_r+0x350>
 800b522:	07cf      	lsls	r7, r1, #31
 800b524:	d505      	bpl.n	800b532 <_dtoa_r+0x492>
 800b526:	ed90 6b00 	vldr	d6, [r0]
 800b52a:	3201      	adds	r2, #1
 800b52c:	2401      	movs	r4, #1
 800b52e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b532:	1049      	asrs	r1, r1, #1
 800b534:	3008      	adds	r0, #8
 800b536:	e7ed      	b.n	800b514 <_dtoa_r+0x474>
 800b538:	2202      	movs	r2, #2
 800b53a:	e759      	b.n	800b3f0 <_dtoa_r+0x350>
 800b53c:	465f      	mov	r7, fp
 800b53e:	4648      	mov	r0, r9
 800b540:	e775      	b.n	800b42e <_dtoa_r+0x38e>
 800b542:	ec42 1b17 	vmov	d7, r1, r2
 800b546:	4a5c      	ldr	r2, [pc, #368]	; (800b6b8 <_dtoa_r+0x618>)
 800b548:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800b54c:	ed12 4b02 	vldr	d4, [r2, #-8]
 800b550:	9a01      	ldr	r2, [sp, #4]
 800b552:	1814      	adds	r4, r2, r0
 800b554:	9a07      	ldr	r2, [sp, #28]
 800b556:	b352      	cbz	r2, 800b5ae <_dtoa_r+0x50e>
 800b558:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800b55c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800b560:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b564:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b568:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b56c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b570:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b574:	ee14 2a90 	vmov	r2, s9
 800b578:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b57c:	3230      	adds	r2, #48	; 0x30
 800b57e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b582:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b58a:	f808 2b01 	strb.w	r2, [r8], #1
 800b58e:	d439      	bmi.n	800b604 <_dtoa_r+0x564>
 800b590:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b594:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b59c:	d472      	bmi.n	800b684 <_dtoa_r+0x5e4>
 800b59e:	45a0      	cmp	r8, r4
 800b5a0:	f43f af6b 	beq.w	800b47a <_dtoa_r+0x3da>
 800b5a4:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b5a8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b5ac:	e7e0      	b.n	800b570 <_dtoa_r+0x4d0>
 800b5ae:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b5b2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b5b6:	4621      	mov	r1, r4
 800b5b8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b5bc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b5c0:	ee14 2a90 	vmov	r2, s9
 800b5c4:	3230      	adds	r2, #48	; 0x30
 800b5c6:	f808 2b01 	strb.w	r2, [r8], #1
 800b5ca:	45a0      	cmp	r8, r4
 800b5cc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b5d0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b5d4:	d118      	bne.n	800b608 <_dtoa_r+0x568>
 800b5d6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b5da:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b5de:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b5e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5e6:	dc4d      	bgt.n	800b684 <_dtoa_r+0x5e4>
 800b5e8:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b5ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b5f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5f4:	f57f af41 	bpl.w	800b47a <_dtoa_r+0x3da>
 800b5f8:	4688      	mov	r8, r1
 800b5fa:	3901      	subs	r1, #1
 800b5fc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800b600:	2b30      	cmp	r3, #48	; 0x30
 800b602:	d0f9      	beq.n	800b5f8 <_dtoa_r+0x558>
 800b604:	46bb      	mov	fp, r7
 800b606:	e02a      	b.n	800b65e <_dtoa_r+0x5be>
 800b608:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b60c:	e7d6      	b.n	800b5bc <_dtoa_r+0x51c>
 800b60e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b612:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800b616:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b61a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b61e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b622:	ee15 3a10 	vmov	r3, s10
 800b626:	3330      	adds	r3, #48	; 0x30
 800b628:	f808 3b01 	strb.w	r3, [r8], #1
 800b62c:	9b01      	ldr	r3, [sp, #4]
 800b62e:	eba8 0303 	sub.w	r3, r8, r3
 800b632:	4599      	cmp	r9, r3
 800b634:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b638:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b63c:	d133      	bne.n	800b6a6 <_dtoa_r+0x606>
 800b63e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b642:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b64a:	dc1a      	bgt.n	800b682 <_dtoa_r+0x5e2>
 800b64c:	eeb4 7b46 	vcmp.f64	d7, d6
 800b650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b654:	d103      	bne.n	800b65e <_dtoa_r+0x5be>
 800b656:	ee15 3a10 	vmov	r3, s10
 800b65a:	07d9      	lsls	r1, r3, #31
 800b65c:	d411      	bmi.n	800b682 <_dtoa_r+0x5e2>
 800b65e:	4629      	mov	r1, r5
 800b660:	4630      	mov	r0, r6
 800b662:	f000 fcf7 	bl	800c054 <_Bfree>
 800b666:	2300      	movs	r3, #0
 800b668:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b66a:	f888 3000 	strb.w	r3, [r8]
 800b66e:	f10b 0301 	add.w	r3, fp, #1
 800b672:	6013      	str	r3, [r2, #0]
 800b674:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b676:	2b00      	cmp	r3, #0
 800b678:	f43f ad61 	beq.w	800b13e <_dtoa_r+0x9e>
 800b67c:	f8c3 8000 	str.w	r8, [r3]
 800b680:	e55d      	b.n	800b13e <_dtoa_r+0x9e>
 800b682:	465f      	mov	r7, fp
 800b684:	4643      	mov	r3, r8
 800b686:	4698      	mov	r8, r3
 800b688:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b68c:	2a39      	cmp	r2, #57	; 0x39
 800b68e:	d106      	bne.n	800b69e <_dtoa_r+0x5fe>
 800b690:	9a01      	ldr	r2, [sp, #4]
 800b692:	429a      	cmp	r2, r3
 800b694:	d1f7      	bne.n	800b686 <_dtoa_r+0x5e6>
 800b696:	9901      	ldr	r1, [sp, #4]
 800b698:	2230      	movs	r2, #48	; 0x30
 800b69a:	3701      	adds	r7, #1
 800b69c:	700a      	strb	r2, [r1, #0]
 800b69e:	781a      	ldrb	r2, [r3, #0]
 800b6a0:	3201      	adds	r2, #1
 800b6a2:	701a      	strb	r2, [r3, #0]
 800b6a4:	e7ae      	b.n	800b604 <_dtoa_r+0x564>
 800b6a6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b6aa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b6ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6b2:	d1b2      	bne.n	800b61a <_dtoa_r+0x57a>
 800b6b4:	e7d3      	b.n	800b65e <_dtoa_r+0x5be>
 800b6b6:	bf00      	nop
 800b6b8:	0800d510 	.word	0x0800d510
 800b6bc:	0800d4e8 	.word	0x0800d4e8
 800b6c0:	9907      	ldr	r1, [sp, #28]
 800b6c2:	2900      	cmp	r1, #0
 800b6c4:	f000 80d0 	beq.w	800b868 <_dtoa_r+0x7c8>
 800b6c8:	9906      	ldr	r1, [sp, #24]
 800b6ca:	2901      	cmp	r1, #1
 800b6cc:	f300 80b4 	bgt.w	800b838 <_dtoa_r+0x798>
 800b6d0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b6d2:	2900      	cmp	r1, #0
 800b6d4:	f000 80ac 	beq.w	800b830 <_dtoa_r+0x790>
 800b6d8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b6dc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b6e0:	461c      	mov	r4, r3
 800b6e2:	930a      	str	r3, [sp, #40]	; 0x28
 800b6e4:	9b04      	ldr	r3, [sp, #16]
 800b6e6:	4413      	add	r3, r2
 800b6e8:	9304      	str	r3, [sp, #16]
 800b6ea:	9b05      	ldr	r3, [sp, #20]
 800b6ec:	2101      	movs	r1, #1
 800b6ee:	4413      	add	r3, r2
 800b6f0:	4630      	mov	r0, r6
 800b6f2:	9305      	str	r3, [sp, #20]
 800b6f4:	f000 fd66 	bl	800c1c4 <__i2b>
 800b6f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6fa:	4607      	mov	r7, r0
 800b6fc:	f1b8 0f00 	cmp.w	r8, #0
 800b700:	dd0d      	ble.n	800b71e <_dtoa_r+0x67e>
 800b702:	9a05      	ldr	r2, [sp, #20]
 800b704:	2a00      	cmp	r2, #0
 800b706:	dd0a      	ble.n	800b71e <_dtoa_r+0x67e>
 800b708:	4542      	cmp	r2, r8
 800b70a:	9904      	ldr	r1, [sp, #16]
 800b70c:	bfa8      	it	ge
 800b70e:	4642      	movge	r2, r8
 800b710:	1a89      	subs	r1, r1, r2
 800b712:	9104      	str	r1, [sp, #16]
 800b714:	9905      	ldr	r1, [sp, #20]
 800b716:	eba8 0802 	sub.w	r8, r8, r2
 800b71a:	1a8a      	subs	r2, r1, r2
 800b71c:	9205      	str	r2, [sp, #20]
 800b71e:	b303      	cbz	r3, 800b762 <_dtoa_r+0x6c2>
 800b720:	9a07      	ldr	r2, [sp, #28]
 800b722:	2a00      	cmp	r2, #0
 800b724:	f000 80a5 	beq.w	800b872 <_dtoa_r+0x7d2>
 800b728:	2c00      	cmp	r4, #0
 800b72a:	dd13      	ble.n	800b754 <_dtoa_r+0x6b4>
 800b72c:	4639      	mov	r1, r7
 800b72e:	4622      	mov	r2, r4
 800b730:	4630      	mov	r0, r6
 800b732:	930d      	str	r3, [sp, #52]	; 0x34
 800b734:	f000 fe06 	bl	800c344 <__pow5mult>
 800b738:	462a      	mov	r2, r5
 800b73a:	4601      	mov	r1, r0
 800b73c:	4607      	mov	r7, r0
 800b73e:	4630      	mov	r0, r6
 800b740:	f000 fd56 	bl	800c1f0 <__multiply>
 800b744:	4629      	mov	r1, r5
 800b746:	900a      	str	r0, [sp, #40]	; 0x28
 800b748:	4630      	mov	r0, r6
 800b74a:	f000 fc83 	bl	800c054 <_Bfree>
 800b74e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b750:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b752:	4615      	mov	r5, r2
 800b754:	1b1a      	subs	r2, r3, r4
 800b756:	d004      	beq.n	800b762 <_dtoa_r+0x6c2>
 800b758:	4629      	mov	r1, r5
 800b75a:	4630      	mov	r0, r6
 800b75c:	f000 fdf2 	bl	800c344 <__pow5mult>
 800b760:	4605      	mov	r5, r0
 800b762:	2101      	movs	r1, #1
 800b764:	4630      	mov	r0, r6
 800b766:	f000 fd2d 	bl	800c1c4 <__i2b>
 800b76a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	4604      	mov	r4, r0
 800b770:	f340 8081 	ble.w	800b876 <_dtoa_r+0x7d6>
 800b774:	461a      	mov	r2, r3
 800b776:	4601      	mov	r1, r0
 800b778:	4630      	mov	r0, r6
 800b77a:	f000 fde3 	bl	800c344 <__pow5mult>
 800b77e:	9b06      	ldr	r3, [sp, #24]
 800b780:	2b01      	cmp	r3, #1
 800b782:	4604      	mov	r4, r0
 800b784:	dd7a      	ble.n	800b87c <_dtoa_r+0x7dc>
 800b786:	2300      	movs	r3, #0
 800b788:	930a      	str	r3, [sp, #40]	; 0x28
 800b78a:	6922      	ldr	r2, [r4, #16]
 800b78c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b790:	6910      	ldr	r0, [r2, #16]
 800b792:	f000 fcc7 	bl	800c124 <__hi0bits>
 800b796:	f1c0 0020 	rsb	r0, r0, #32
 800b79a:	9b05      	ldr	r3, [sp, #20]
 800b79c:	4418      	add	r0, r3
 800b79e:	f010 001f 	ands.w	r0, r0, #31
 800b7a2:	f000 808c 	beq.w	800b8be <_dtoa_r+0x81e>
 800b7a6:	f1c0 0220 	rsb	r2, r0, #32
 800b7aa:	2a04      	cmp	r2, #4
 800b7ac:	f340 8085 	ble.w	800b8ba <_dtoa_r+0x81a>
 800b7b0:	f1c0 001c 	rsb	r0, r0, #28
 800b7b4:	9b04      	ldr	r3, [sp, #16]
 800b7b6:	4403      	add	r3, r0
 800b7b8:	9304      	str	r3, [sp, #16]
 800b7ba:	9b05      	ldr	r3, [sp, #20]
 800b7bc:	4403      	add	r3, r0
 800b7be:	4480      	add	r8, r0
 800b7c0:	9305      	str	r3, [sp, #20]
 800b7c2:	9b04      	ldr	r3, [sp, #16]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	dd05      	ble.n	800b7d4 <_dtoa_r+0x734>
 800b7c8:	4629      	mov	r1, r5
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	4630      	mov	r0, r6
 800b7ce:	f000 fe13 	bl	800c3f8 <__lshift>
 800b7d2:	4605      	mov	r5, r0
 800b7d4:	9b05      	ldr	r3, [sp, #20]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	dd05      	ble.n	800b7e6 <_dtoa_r+0x746>
 800b7da:	4621      	mov	r1, r4
 800b7dc:	461a      	mov	r2, r3
 800b7de:	4630      	mov	r0, r6
 800b7e0:	f000 fe0a 	bl	800c3f8 <__lshift>
 800b7e4:	4604      	mov	r4, r0
 800b7e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d06a      	beq.n	800b8c2 <_dtoa_r+0x822>
 800b7ec:	4621      	mov	r1, r4
 800b7ee:	4628      	mov	r0, r5
 800b7f0:	f000 fe72 	bl	800c4d8 <__mcmp>
 800b7f4:	2800      	cmp	r0, #0
 800b7f6:	da64      	bge.n	800b8c2 <_dtoa_r+0x822>
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	4629      	mov	r1, r5
 800b7fc:	220a      	movs	r2, #10
 800b7fe:	4630      	mov	r0, r6
 800b800:	f000 fc4a 	bl	800c098 <__multadd>
 800b804:	9b07      	ldr	r3, [sp, #28]
 800b806:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b80a:	4605      	mov	r5, r0
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	f000 8191 	beq.w	800bb34 <_dtoa_r+0xa94>
 800b812:	4639      	mov	r1, r7
 800b814:	2300      	movs	r3, #0
 800b816:	220a      	movs	r2, #10
 800b818:	4630      	mov	r0, r6
 800b81a:	f000 fc3d 	bl	800c098 <__multadd>
 800b81e:	f1ba 0f00 	cmp.w	sl, #0
 800b822:	4607      	mov	r7, r0
 800b824:	f300 808d 	bgt.w	800b942 <_dtoa_r+0x8a2>
 800b828:	9b06      	ldr	r3, [sp, #24]
 800b82a:	2b02      	cmp	r3, #2
 800b82c:	dc50      	bgt.n	800b8d0 <_dtoa_r+0x830>
 800b82e:	e088      	b.n	800b942 <_dtoa_r+0x8a2>
 800b830:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b832:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b836:	e751      	b.n	800b6dc <_dtoa_r+0x63c>
 800b838:	f109 34ff 	add.w	r4, r9, #4294967295
 800b83c:	42a3      	cmp	r3, r4
 800b83e:	bfbf      	itttt	lt
 800b840:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800b842:	1ae3      	sublt	r3, r4, r3
 800b844:	18d2      	addlt	r2, r2, r3
 800b846:	9209      	strlt	r2, [sp, #36]	; 0x24
 800b848:	bfb6      	itet	lt
 800b84a:	4623      	movlt	r3, r4
 800b84c:	1b1c      	subge	r4, r3, r4
 800b84e:	2400      	movlt	r4, #0
 800b850:	f1b9 0f00 	cmp.w	r9, #0
 800b854:	bfb5      	itete	lt
 800b856:	9a04      	ldrlt	r2, [sp, #16]
 800b858:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800b85c:	eba2 0809 	sublt.w	r8, r2, r9
 800b860:	464a      	movge	r2, r9
 800b862:	bfb8      	it	lt
 800b864:	2200      	movlt	r2, #0
 800b866:	e73c      	b.n	800b6e2 <_dtoa_r+0x642>
 800b868:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b86c:	9f07      	ldr	r7, [sp, #28]
 800b86e:	461c      	mov	r4, r3
 800b870:	e744      	b.n	800b6fc <_dtoa_r+0x65c>
 800b872:	461a      	mov	r2, r3
 800b874:	e770      	b.n	800b758 <_dtoa_r+0x6b8>
 800b876:	9b06      	ldr	r3, [sp, #24]
 800b878:	2b01      	cmp	r3, #1
 800b87a:	dc18      	bgt.n	800b8ae <_dtoa_r+0x80e>
 800b87c:	9b02      	ldr	r3, [sp, #8]
 800b87e:	b9b3      	cbnz	r3, 800b8ae <_dtoa_r+0x80e>
 800b880:	9b03      	ldr	r3, [sp, #12]
 800b882:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b886:	b9a2      	cbnz	r2, 800b8b2 <_dtoa_r+0x812>
 800b888:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b88c:	0d12      	lsrs	r2, r2, #20
 800b88e:	0512      	lsls	r2, r2, #20
 800b890:	b18a      	cbz	r2, 800b8b6 <_dtoa_r+0x816>
 800b892:	9b04      	ldr	r3, [sp, #16]
 800b894:	3301      	adds	r3, #1
 800b896:	9304      	str	r3, [sp, #16]
 800b898:	9b05      	ldr	r3, [sp, #20]
 800b89a:	3301      	adds	r3, #1
 800b89c:	9305      	str	r3, [sp, #20]
 800b89e:	2301      	movs	r3, #1
 800b8a0:	930a      	str	r3, [sp, #40]	; 0x28
 800b8a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	f47f af70 	bne.w	800b78a <_dtoa_r+0x6ea>
 800b8aa:	2001      	movs	r0, #1
 800b8ac:	e775      	b.n	800b79a <_dtoa_r+0x6fa>
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	e7f6      	b.n	800b8a0 <_dtoa_r+0x800>
 800b8b2:	9b02      	ldr	r3, [sp, #8]
 800b8b4:	e7f4      	b.n	800b8a0 <_dtoa_r+0x800>
 800b8b6:	920a      	str	r2, [sp, #40]	; 0x28
 800b8b8:	e7f3      	b.n	800b8a2 <_dtoa_r+0x802>
 800b8ba:	d082      	beq.n	800b7c2 <_dtoa_r+0x722>
 800b8bc:	4610      	mov	r0, r2
 800b8be:	301c      	adds	r0, #28
 800b8c0:	e778      	b.n	800b7b4 <_dtoa_r+0x714>
 800b8c2:	f1b9 0f00 	cmp.w	r9, #0
 800b8c6:	dc37      	bgt.n	800b938 <_dtoa_r+0x898>
 800b8c8:	9b06      	ldr	r3, [sp, #24]
 800b8ca:	2b02      	cmp	r3, #2
 800b8cc:	dd34      	ble.n	800b938 <_dtoa_r+0x898>
 800b8ce:	46ca      	mov	sl, r9
 800b8d0:	f1ba 0f00 	cmp.w	sl, #0
 800b8d4:	d10d      	bne.n	800b8f2 <_dtoa_r+0x852>
 800b8d6:	4621      	mov	r1, r4
 800b8d8:	4653      	mov	r3, sl
 800b8da:	2205      	movs	r2, #5
 800b8dc:	4630      	mov	r0, r6
 800b8de:	f000 fbdb 	bl	800c098 <__multadd>
 800b8e2:	4601      	mov	r1, r0
 800b8e4:	4604      	mov	r4, r0
 800b8e6:	4628      	mov	r0, r5
 800b8e8:	f000 fdf6 	bl	800c4d8 <__mcmp>
 800b8ec:	2800      	cmp	r0, #0
 800b8ee:	f73f adeb 	bgt.w	800b4c8 <_dtoa_r+0x428>
 800b8f2:	9b08      	ldr	r3, [sp, #32]
 800b8f4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b8f8:	ea6f 0b03 	mvn.w	fp, r3
 800b8fc:	f04f 0900 	mov.w	r9, #0
 800b900:	4621      	mov	r1, r4
 800b902:	4630      	mov	r0, r6
 800b904:	f000 fba6 	bl	800c054 <_Bfree>
 800b908:	2f00      	cmp	r7, #0
 800b90a:	f43f aea8 	beq.w	800b65e <_dtoa_r+0x5be>
 800b90e:	f1b9 0f00 	cmp.w	r9, #0
 800b912:	d005      	beq.n	800b920 <_dtoa_r+0x880>
 800b914:	45b9      	cmp	r9, r7
 800b916:	d003      	beq.n	800b920 <_dtoa_r+0x880>
 800b918:	4649      	mov	r1, r9
 800b91a:	4630      	mov	r0, r6
 800b91c:	f000 fb9a 	bl	800c054 <_Bfree>
 800b920:	4639      	mov	r1, r7
 800b922:	4630      	mov	r0, r6
 800b924:	f000 fb96 	bl	800c054 <_Bfree>
 800b928:	e699      	b.n	800b65e <_dtoa_r+0x5be>
 800b92a:	2400      	movs	r4, #0
 800b92c:	4627      	mov	r7, r4
 800b92e:	e7e0      	b.n	800b8f2 <_dtoa_r+0x852>
 800b930:	46bb      	mov	fp, r7
 800b932:	4604      	mov	r4, r0
 800b934:	4607      	mov	r7, r0
 800b936:	e5c7      	b.n	800b4c8 <_dtoa_r+0x428>
 800b938:	9b07      	ldr	r3, [sp, #28]
 800b93a:	46ca      	mov	sl, r9
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	f000 8100 	beq.w	800bb42 <_dtoa_r+0xaa2>
 800b942:	f1b8 0f00 	cmp.w	r8, #0
 800b946:	dd05      	ble.n	800b954 <_dtoa_r+0x8b4>
 800b948:	4639      	mov	r1, r7
 800b94a:	4642      	mov	r2, r8
 800b94c:	4630      	mov	r0, r6
 800b94e:	f000 fd53 	bl	800c3f8 <__lshift>
 800b952:	4607      	mov	r7, r0
 800b954:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b956:	2b00      	cmp	r3, #0
 800b958:	d05d      	beq.n	800ba16 <_dtoa_r+0x976>
 800b95a:	6879      	ldr	r1, [r7, #4]
 800b95c:	4630      	mov	r0, r6
 800b95e:	f000 fb39 	bl	800bfd4 <_Balloc>
 800b962:	4680      	mov	r8, r0
 800b964:	b928      	cbnz	r0, 800b972 <_dtoa_r+0x8d2>
 800b966:	4b82      	ldr	r3, [pc, #520]	; (800bb70 <_dtoa_r+0xad0>)
 800b968:	4602      	mov	r2, r0
 800b96a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b96e:	f7ff bbaf 	b.w	800b0d0 <_dtoa_r+0x30>
 800b972:	693a      	ldr	r2, [r7, #16]
 800b974:	3202      	adds	r2, #2
 800b976:	0092      	lsls	r2, r2, #2
 800b978:	f107 010c 	add.w	r1, r7, #12
 800b97c:	300c      	adds	r0, #12
 800b97e:	f7fe fd5b 	bl	800a438 <memcpy>
 800b982:	2201      	movs	r2, #1
 800b984:	4641      	mov	r1, r8
 800b986:	4630      	mov	r0, r6
 800b988:	f000 fd36 	bl	800c3f8 <__lshift>
 800b98c:	9b01      	ldr	r3, [sp, #4]
 800b98e:	3301      	adds	r3, #1
 800b990:	9304      	str	r3, [sp, #16]
 800b992:	9b01      	ldr	r3, [sp, #4]
 800b994:	4453      	add	r3, sl
 800b996:	9308      	str	r3, [sp, #32]
 800b998:	9b02      	ldr	r3, [sp, #8]
 800b99a:	f003 0301 	and.w	r3, r3, #1
 800b99e:	46b9      	mov	r9, r7
 800b9a0:	9307      	str	r3, [sp, #28]
 800b9a2:	4607      	mov	r7, r0
 800b9a4:	9b04      	ldr	r3, [sp, #16]
 800b9a6:	4621      	mov	r1, r4
 800b9a8:	3b01      	subs	r3, #1
 800b9aa:	4628      	mov	r0, r5
 800b9ac:	9302      	str	r3, [sp, #8]
 800b9ae:	f7ff faeb 	bl	800af88 <quorem>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	3330      	adds	r3, #48	; 0x30
 800b9b6:	9005      	str	r0, [sp, #20]
 800b9b8:	4649      	mov	r1, r9
 800b9ba:	4628      	mov	r0, r5
 800b9bc:	9309      	str	r3, [sp, #36]	; 0x24
 800b9be:	f000 fd8b 	bl	800c4d8 <__mcmp>
 800b9c2:	463a      	mov	r2, r7
 800b9c4:	4682      	mov	sl, r0
 800b9c6:	4621      	mov	r1, r4
 800b9c8:	4630      	mov	r0, r6
 800b9ca:	f000 fda1 	bl	800c510 <__mdiff>
 800b9ce:	68c2      	ldr	r2, [r0, #12]
 800b9d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9d2:	4680      	mov	r8, r0
 800b9d4:	bb0a      	cbnz	r2, 800ba1a <_dtoa_r+0x97a>
 800b9d6:	4601      	mov	r1, r0
 800b9d8:	4628      	mov	r0, r5
 800b9da:	f000 fd7d 	bl	800c4d8 <__mcmp>
 800b9de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	4641      	mov	r1, r8
 800b9e4:	4630      	mov	r0, r6
 800b9e6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800b9ea:	f000 fb33 	bl	800c054 <_Bfree>
 800b9ee:	9b06      	ldr	r3, [sp, #24]
 800b9f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b9f2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b9f6:	ea43 0102 	orr.w	r1, r3, r2
 800b9fa:	9b07      	ldr	r3, [sp, #28]
 800b9fc:	430b      	orrs	r3, r1
 800b9fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba00:	d10d      	bne.n	800ba1e <_dtoa_r+0x97e>
 800ba02:	2b39      	cmp	r3, #57	; 0x39
 800ba04:	d029      	beq.n	800ba5a <_dtoa_r+0x9ba>
 800ba06:	f1ba 0f00 	cmp.w	sl, #0
 800ba0a:	dd01      	ble.n	800ba10 <_dtoa_r+0x970>
 800ba0c:	9b05      	ldr	r3, [sp, #20]
 800ba0e:	3331      	adds	r3, #49	; 0x31
 800ba10:	9a02      	ldr	r2, [sp, #8]
 800ba12:	7013      	strb	r3, [r2, #0]
 800ba14:	e774      	b.n	800b900 <_dtoa_r+0x860>
 800ba16:	4638      	mov	r0, r7
 800ba18:	e7b8      	b.n	800b98c <_dtoa_r+0x8ec>
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	e7e1      	b.n	800b9e2 <_dtoa_r+0x942>
 800ba1e:	f1ba 0f00 	cmp.w	sl, #0
 800ba22:	db06      	blt.n	800ba32 <_dtoa_r+0x992>
 800ba24:	9906      	ldr	r1, [sp, #24]
 800ba26:	ea41 0a0a 	orr.w	sl, r1, sl
 800ba2a:	9907      	ldr	r1, [sp, #28]
 800ba2c:	ea5a 0101 	orrs.w	r1, sl, r1
 800ba30:	d120      	bne.n	800ba74 <_dtoa_r+0x9d4>
 800ba32:	2a00      	cmp	r2, #0
 800ba34:	ddec      	ble.n	800ba10 <_dtoa_r+0x970>
 800ba36:	4629      	mov	r1, r5
 800ba38:	2201      	movs	r2, #1
 800ba3a:	4630      	mov	r0, r6
 800ba3c:	9304      	str	r3, [sp, #16]
 800ba3e:	f000 fcdb 	bl	800c3f8 <__lshift>
 800ba42:	4621      	mov	r1, r4
 800ba44:	4605      	mov	r5, r0
 800ba46:	f000 fd47 	bl	800c4d8 <__mcmp>
 800ba4a:	2800      	cmp	r0, #0
 800ba4c:	9b04      	ldr	r3, [sp, #16]
 800ba4e:	dc02      	bgt.n	800ba56 <_dtoa_r+0x9b6>
 800ba50:	d1de      	bne.n	800ba10 <_dtoa_r+0x970>
 800ba52:	07da      	lsls	r2, r3, #31
 800ba54:	d5dc      	bpl.n	800ba10 <_dtoa_r+0x970>
 800ba56:	2b39      	cmp	r3, #57	; 0x39
 800ba58:	d1d8      	bne.n	800ba0c <_dtoa_r+0x96c>
 800ba5a:	9a02      	ldr	r2, [sp, #8]
 800ba5c:	2339      	movs	r3, #57	; 0x39
 800ba5e:	7013      	strb	r3, [r2, #0]
 800ba60:	4643      	mov	r3, r8
 800ba62:	4698      	mov	r8, r3
 800ba64:	3b01      	subs	r3, #1
 800ba66:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800ba6a:	2a39      	cmp	r2, #57	; 0x39
 800ba6c:	d051      	beq.n	800bb12 <_dtoa_r+0xa72>
 800ba6e:	3201      	adds	r2, #1
 800ba70:	701a      	strb	r2, [r3, #0]
 800ba72:	e745      	b.n	800b900 <_dtoa_r+0x860>
 800ba74:	2a00      	cmp	r2, #0
 800ba76:	dd03      	ble.n	800ba80 <_dtoa_r+0x9e0>
 800ba78:	2b39      	cmp	r3, #57	; 0x39
 800ba7a:	d0ee      	beq.n	800ba5a <_dtoa_r+0x9ba>
 800ba7c:	3301      	adds	r3, #1
 800ba7e:	e7c7      	b.n	800ba10 <_dtoa_r+0x970>
 800ba80:	9a04      	ldr	r2, [sp, #16]
 800ba82:	9908      	ldr	r1, [sp, #32]
 800ba84:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ba88:	428a      	cmp	r2, r1
 800ba8a:	d02b      	beq.n	800bae4 <_dtoa_r+0xa44>
 800ba8c:	4629      	mov	r1, r5
 800ba8e:	2300      	movs	r3, #0
 800ba90:	220a      	movs	r2, #10
 800ba92:	4630      	mov	r0, r6
 800ba94:	f000 fb00 	bl	800c098 <__multadd>
 800ba98:	45b9      	cmp	r9, r7
 800ba9a:	4605      	mov	r5, r0
 800ba9c:	f04f 0300 	mov.w	r3, #0
 800baa0:	f04f 020a 	mov.w	r2, #10
 800baa4:	4649      	mov	r1, r9
 800baa6:	4630      	mov	r0, r6
 800baa8:	d107      	bne.n	800baba <_dtoa_r+0xa1a>
 800baaa:	f000 faf5 	bl	800c098 <__multadd>
 800baae:	4681      	mov	r9, r0
 800bab0:	4607      	mov	r7, r0
 800bab2:	9b04      	ldr	r3, [sp, #16]
 800bab4:	3301      	adds	r3, #1
 800bab6:	9304      	str	r3, [sp, #16]
 800bab8:	e774      	b.n	800b9a4 <_dtoa_r+0x904>
 800baba:	f000 faed 	bl	800c098 <__multadd>
 800babe:	4639      	mov	r1, r7
 800bac0:	4681      	mov	r9, r0
 800bac2:	2300      	movs	r3, #0
 800bac4:	220a      	movs	r2, #10
 800bac6:	4630      	mov	r0, r6
 800bac8:	f000 fae6 	bl	800c098 <__multadd>
 800bacc:	4607      	mov	r7, r0
 800bace:	e7f0      	b.n	800bab2 <_dtoa_r+0xa12>
 800bad0:	f1ba 0f00 	cmp.w	sl, #0
 800bad4:	9a01      	ldr	r2, [sp, #4]
 800bad6:	bfcc      	ite	gt
 800bad8:	46d0      	movgt	r8, sl
 800bada:	f04f 0801 	movle.w	r8, #1
 800bade:	4490      	add	r8, r2
 800bae0:	f04f 0900 	mov.w	r9, #0
 800bae4:	4629      	mov	r1, r5
 800bae6:	2201      	movs	r2, #1
 800bae8:	4630      	mov	r0, r6
 800baea:	9302      	str	r3, [sp, #8]
 800baec:	f000 fc84 	bl	800c3f8 <__lshift>
 800baf0:	4621      	mov	r1, r4
 800baf2:	4605      	mov	r5, r0
 800baf4:	f000 fcf0 	bl	800c4d8 <__mcmp>
 800baf8:	2800      	cmp	r0, #0
 800bafa:	dcb1      	bgt.n	800ba60 <_dtoa_r+0x9c0>
 800bafc:	d102      	bne.n	800bb04 <_dtoa_r+0xa64>
 800bafe:	9b02      	ldr	r3, [sp, #8]
 800bb00:	07db      	lsls	r3, r3, #31
 800bb02:	d4ad      	bmi.n	800ba60 <_dtoa_r+0x9c0>
 800bb04:	4643      	mov	r3, r8
 800bb06:	4698      	mov	r8, r3
 800bb08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb0c:	2a30      	cmp	r2, #48	; 0x30
 800bb0e:	d0fa      	beq.n	800bb06 <_dtoa_r+0xa66>
 800bb10:	e6f6      	b.n	800b900 <_dtoa_r+0x860>
 800bb12:	9a01      	ldr	r2, [sp, #4]
 800bb14:	429a      	cmp	r2, r3
 800bb16:	d1a4      	bne.n	800ba62 <_dtoa_r+0x9c2>
 800bb18:	f10b 0b01 	add.w	fp, fp, #1
 800bb1c:	2331      	movs	r3, #49	; 0x31
 800bb1e:	e778      	b.n	800ba12 <_dtoa_r+0x972>
 800bb20:	4b14      	ldr	r3, [pc, #80]	; (800bb74 <_dtoa_r+0xad4>)
 800bb22:	f7ff bb27 	b.w	800b174 <_dtoa_r+0xd4>
 800bb26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	f47f ab03 	bne.w	800b134 <_dtoa_r+0x94>
 800bb2e:	4b12      	ldr	r3, [pc, #72]	; (800bb78 <_dtoa_r+0xad8>)
 800bb30:	f7ff bb20 	b.w	800b174 <_dtoa_r+0xd4>
 800bb34:	f1ba 0f00 	cmp.w	sl, #0
 800bb38:	dc03      	bgt.n	800bb42 <_dtoa_r+0xaa2>
 800bb3a:	9b06      	ldr	r3, [sp, #24]
 800bb3c:	2b02      	cmp	r3, #2
 800bb3e:	f73f aec7 	bgt.w	800b8d0 <_dtoa_r+0x830>
 800bb42:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bb46:	4621      	mov	r1, r4
 800bb48:	4628      	mov	r0, r5
 800bb4a:	f7ff fa1d 	bl	800af88 <quorem>
 800bb4e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800bb52:	f808 3b01 	strb.w	r3, [r8], #1
 800bb56:	9a01      	ldr	r2, [sp, #4]
 800bb58:	eba8 0202 	sub.w	r2, r8, r2
 800bb5c:	4592      	cmp	sl, r2
 800bb5e:	ddb7      	ble.n	800bad0 <_dtoa_r+0xa30>
 800bb60:	4629      	mov	r1, r5
 800bb62:	2300      	movs	r3, #0
 800bb64:	220a      	movs	r2, #10
 800bb66:	4630      	mov	r0, r6
 800bb68:	f000 fa96 	bl	800c098 <__multadd>
 800bb6c:	4605      	mov	r5, r0
 800bb6e:	e7ea      	b.n	800bb46 <_dtoa_r+0xaa6>
 800bb70:	0800d41b 	.word	0x0800d41b
 800bb74:	0800d378 	.word	0x0800d378
 800bb78:	0800d39c 	.word	0x0800d39c

0800bb7c <__sflush_r>:
 800bb7c:	898a      	ldrh	r2, [r1, #12]
 800bb7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb82:	4605      	mov	r5, r0
 800bb84:	0710      	lsls	r0, r2, #28
 800bb86:	460c      	mov	r4, r1
 800bb88:	d458      	bmi.n	800bc3c <__sflush_r+0xc0>
 800bb8a:	684b      	ldr	r3, [r1, #4]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	dc05      	bgt.n	800bb9c <__sflush_r+0x20>
 800bb90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	dc02      	bgt.n	800bb9c <__sflush_r+0x20>
 800bb96:	2000      	movs	r0, #0
 800bb98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb9e:	2e00      	cmp	r6, #0
 800bba0:	d0f9      	beq.n	800bb96 <__sflush_r+0x1a>
 800bba2:	2300      	movs	r3, #0
 800bba4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bba8:	682f      	ldr	r7, [r5, #0]
 800bbaa:	602b      	str	r3, [r5, #0]
 800bbac:	d032      	beq.n	800bc14 <__sflush_r+0x98>
 800bbae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bbb0:	89a3      	ldrh	r3, [r4, #12]
 800bbb2:	075a      	lsls	r2, r3, #29
 800bbb4:	d505      	bpl.n	800bbc2 <__sflush_r+0x46>
 800bbb6:	6863      	ldr	r3, [r4, #4]
 800bbb8:	1ac0      	subs	r0, r0, r3
 800bbba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bbbc:	b10b      	cbz	r3, 800bbc2 <__sflush_r+0x46>
 800bbbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bbc0:	1ac0      	subs	r0, r0, r3
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	4602      	mov	r2, r0
 800bbc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bbc8:	6a21      	ldr	r1, [r4, #32]
 800bbca:	4628      	mov	r0, r5
 800bbcc:	47b0      	blx	r6
 800bbce:	1c43      	adds	r3, r0, #1
 800bbd0:	89a3      	ldrh	r3, [r4, #12]
 800bbd2:	d106      	bne.n	800bbe2 <__sflush_r+0x66>
 800bbd4:	6829      	ldr	r1, [r5, #0]
 800bbd6:	291d      	cmp	r1, #29
 800bbd8:	d82c      	bhi.n	800bc34 <__sflush_r+0xb8>
 800bbda:	4a2a      	ldr	r2, [pc, #168]	; (800bc84 <__sflush_r+0x108>)
 800bbdc:	40ca      	lsrs	r2, r1
 800bbde:	07d6      	lsls	r6, r2, #31
 800bbe0:	d528      	bpl.n	800bc34 <__sflush_r+0xb8>
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	6062      	str	r2, [r4, #4]
 800bbe6:	04d9      	lsls	r1, r3, #19
 800bbe8:	6922      	ldr	r2, [r4, #16]
 800bbea:	6022      	str	r2, [r4, #0]
 800bbec:	d504      	bpl.n	800bbf8 <__sflush_r+0x7c>
 800bbee:	1c42      	adds	r2, r0, #1
 800bbf0:	d101      	bne.n	800bbf6 <__sflush_r+0x7a>
 800bbf2:	682b      	ldr	r3, [r5, #0]
 800bbf4:	b903      	cbnz	r3, 800bbf8 <__sflush_r+0x7c>
 800bbf6:	6560      	str	r0, [r4, #84]	; 0x54
 800bbf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbfa:	602f      	str	r7, [r5, #0]
 800bbfc:	2900      	cmp	r1, #0
 800bbfe:	d0ca      	beq.n	800bb96 <__sflush_r+0x1a>
 800bc00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc04:	4299      	cmp	r1, r3
 800bc06:	d002      	beq.n	800bc0e <__sflush_r+0x92>
 800bc08:	4628      	mov	r0, r5
 800bc0a:	f000 fd7d 	bl	800c708 <_free_r>
 800bc0e:	2000      	movs	r0, #0
 800bc10:	6360      	str	r0, [r4, #52]	; 0x34
 800bc12:	e7c1      	b.n	800bb98 <__sflush_r+0x1c>
 800bc14:	6a21      	ldr	r1, [r4, #32]
 800bc16:	2301      	movs	r3, #1
 800bc18:	4628      	mov	r0, r5
 800bc1a:	47b0      	blx	r6
 800bc1c:	1c41      	adds	r1, r0, #1
 800bc1e:	d1c7      	bne.n	800bbb0 <__sflush_r+0x34>
 800bc20:	682b      	ldr	r3, [r5, #0]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d0c4      	beq.n	800bbb0 <__sflush_r+0x34>
 800bc26:	2b1d      	cmp	r3, #29
 800bc28:	d001      	beq.n	800bc2e <__sflush_r+0xb2>
 800bc2a:	2b16      	cmp	r3, #22
 800bc2c:	d101      	bne.n	800bc32 <__sflush_r+0xb6>
 800bc2e:	602f      	str	r7, [r5, #0]
 800bc30:	e7b1      	b.n	800bb96 <__sflush_r+0x1a>
 800bc32:	89a3      	ldrh	r3, [r4, #12]
 800bc34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc38:	81a3      	strh	r3, [r4, #12]
 800bc3a:	e7ad      	b.n	800bb98 <__sflush_r+0x1c>
 800bc3c:	690f      	ldr	r7, [r1, #16]
 800bc3e:	2f00      	cmp	r7, #0
 800bc40:	d0a9      	beq.n	800bb96 <__sflush_r+0x1a>
 800bc42:	0793      	lsls	r3, r2, #30
 800bc44:	680e      	ldr	r6, [r1, #0]
 800bc46:	bf08      	it	eq
 800bc48:	694b      	ldreq	r3, [r1, #20]
 800bc4a:	600f      	str	r7, [r1, #0]
 800bc4c:	bf18      	it	ne
 800bc4e:	2300      	movne	r3, #0
 800bc50:	eba6 0807 	sub.w	r8, r6, r7
 800bc54:	608b      	str	r3, [r1, #8]
 800bc56:	f1b8 0f00 	cmp.w	r8, #0
 800bc5a:	dd9c      	ble.n	800bb96 <__sflush_r+0x1a>
 800bc5c:	6a21      	ldr	r1, [r4, #32]
 800bc5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bc60:	4643      	mov	r3, r8
 800bc62:	463a      	mov	r2, r7
 800bc64:	4628      	mov	r0, r5
 800bc66:	47b0      	blx	r6
 800bc68:	2800      	cmp	r0, #0
 800bc6a:	dc06      	bgt.n	800bc7a <__sflush_r+0xfe>
 800bc6c:	89a3      	ldrh	r3, [r4, #12]
 800bc6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc72:	81a3      	strh	r3, [r4, #12]
 800bc74:	f04f 30ff 	mov.w	r0, #4294967295
 800bc78:	e78e      	b.n	800bb98 <__sflush_r+0x1c>
 800bc7a:	4407      	add	r7, r0
 800bc7c:	eba8 0800 	sub.w	r8, r8, r0
 800bc80:	e7e9      	b.n	800bc56 <__sflush_r+0xda>
 800bc82:	bf00      	nop
 800bc84:	20400001 	.word	0x20400001

0800bc88 <_fflush_r>:
 800bc88:	b538      	push	{r3, r4, r5, lr}
 800bc8a:	690b      	ldr	r3, [r1, #16]
 800bc8c:	4605      	mov	r5, r0
 800bc8e:	460c      	mov	r4, r1
 800bc90:	b913      	cbnz	r3, 800bc98 <_fflush_r+0x10>
 800bc92:	2500      	movs	r5, #0
 800bc94:	4628      	mov	r0, r5
 800bc96:	bd38      	pop	{r3, r4, r5, pc}
 800bc98:	b118      	cbz	r0, 800bca2 <_fflush_r+0x1a>
 800bc9a:	6983      	ldr	r3, [r0, #24]
 800bc9c:	b90b      	cbnz	r3, 800bca2 <_fflush_r+0x1a>
 800bc9e:	f000 f887 	bl	800bdb0 <__sinit>
 800bca2:	4b14      	ldr	r3, [pc, #80]	; (800bcf4 <_fflush_r+0x6c>)
 800bca4:	429c      	cmp	r4, r3
 800bca6:	d11b      	bne.n	800bce0 <_fflush_r+0x58>
 800bca8:	686c      	ldr	r4, [r5, #4]
 800bcaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d0ef      	beq.n	800bc92 <_fflush_r+0xa>
 800bcb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bcb4:	07d0      	lsls	r0, r2, #31
 800bcb6:	d404      	bmi.n	800bcc2 <_fflush_r+0x3a>
 800bcb8:	0599      	lsls	r1, r3, #22
 800bcba:	d402      	bmi.n	800bcc2 <_fflush_r+0x3a>
 800bcbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcbe:	f000 f91a 	bl	800bef6 <__retarget_lock_acquire_recursive>
 800bcc2:	4628      	mov	r0, r5
 800bcc4:	4621      	mov	r1, r4
 800bcc6:	f7ff ff59 	bl	800bb7c <__sflush_r>
 800bcca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bccc:	07da      	lsls	r2, r3, #31
 800bcce:	4605      	mov	r5, r0
 800bcd0:	d4e0      	bmi.n	800bc94 <_fflush_r+0xc>
 800bcd2:	89a3      	ldrh	r3, [r4, #12]
 800bcd4:	059b      	lsls	r3, r3, #22
 800bcd6:	d4dd      	bmi.n	800bc94 <_fflush_r+0xc>
 800bcd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcda:	f000 f90d 	bl	800bef8 <__retarget_lock_release_recursive>
 800bcde:	e7d9      	b.n	800bc94 <_fflush_r+0xc>
 800bce0:	4b05      	ldr	r3, [pc, #20]	; (800bcf8 <_fflush_r+0x70>)
 800bce2:	429c      	cmp	r4, r3
 800bce4:	d101      	bne.n	800bcea <_fflush_r+0x62>
 800bce6:	68ac      	ldr	r4, [r5, #8]
 800bce8:	e7df      	b.n	800bcaa <_fflush_r+0x22>
 800bcea:	4b04      	ldr	r3, [pc, #16]	; (800bcfc <_fflush_r+0x74>)
 800bcec:	429c      	cmp	r4, r3
 800bcee:	bf08      	it	eq
 800bcf0:	68ec      	ldreq	r4, [r5, #12]
 800bcf2:	e7da      	b.n	800bcaa <_fflush_r+0x22>
 800bcf4:	0800d44c 	.word	0x0800d44c
 800bcf8:	0800d46c 	.word	0x0800d46c
 800bcfc:	0800d42c 	.word	0x0800d42c

0800bd00 <std>:
 800bd00:	2300      	movs	r3, #0
 800bd02:	b510      	push	{r4, lr}
 800bd04:	4604      	mov	r4, r0
 800bd06:	e9c0 3300 	strd	r3, r3, [r0]
 800bd0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd0e:	6083      	str	r3, [r0, #8]
 800bd10:	8181      	strh	r1, [r0, #12]
 800bd12:	6643      	str	r3, [r0, #100]	; 0x64
 800bd14:	81c2      	strh	r2, [r0, #14]
 800bd16:	6183      	str	r3, [r0, #24]
 800bd18:	4619      	mov	r1, r3
 800bd1a:	2208      	movs	r2, #8
 800bd1c:	305c      	adds	r0, #92	; 0x5c
 800bd1e:	f7fe fb99 	bl	800a454 <memset>
 800bd22:	4b05      	ldr	r3, [pc, #20]	; (800bd38 <std+0x38>)
 800bd24:	6263      	str	r3, [r4, #36]	; 0x24
 800bd26:	4b05      	ldr	r3, [pc, #20]	; (800bd3c <std+0x3c>)
 800bd28:	62a3      	str	r3, [r4, #40]	; 0x28
 800bd2a:	4b05      	ldr	r3, [pc, #20]	; (800bd40 <std+0x40>)
 800bd2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bd2e:	4b05      	ldr	r3, [pc, #20]	; (800bd44 <std+0x44>)
 800bd30:	6224      	str	r4, [r4, #32]
 800bd32:	6323      	str	r3, [r4, #48]	; 0x30
 800bd34:	bd10      	pop	{r4, pc}
 800bd36:	bf00      	nop
 800bd38:	0800cb9d 	.word	0x0800cb9d
 800bd3c:	0800cbbf 	.word	0x0800cbbf
 800bd40:	0800cbf7 	.word	0x0800cbf7
 800bd44:	0800cc1b 	.word	0x0800cc1b

0800bd48 <_cleanup_r>:
 800bd48:	4901      	ldr	r1, [pc, #4]	; (800bd50 <_cleanup_r+0x8>)
 800bd4a:	f000 b8af 	b.w	800beac <_fwalk_reent>
 800bd4e:	bf00      	nop
 800bd50:	0800bc89 	.word	0x0800bc89

0800bd54 <__sfmoreglue>:
 800bd54:	b570      	push	{r4, r5, r6, lr}
 800bd56:	2268      	movs	r2, #104	; 0x68
 800bd58:	1e4d      	subs	r5, r1, #1
 800bd5a:	4355      	muls	r5, r2
 800bd5c:	460e      	mov	r6, r1
 800bd5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bd62:	f000 fd3d 	bl	800c7e0 <_malloc_r>
 800bd66:	4604      	mov	r4, r0
 800bd68:	b140      	cbz	r0, 800bd7c <__sfmoreglue+0x28>
 800bd6a:	2100      	movs	r1, #0
 800bd6c:	e9c0 1600 	strd	r1, r6, [r0]
 800bd70:	300c      	adds	r0, #12
 800bd72:	60a0      	str	r0, [r4, #8]
 800bd74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bd78:	f7fe fb6c 	bl	800a454 <memset>
 800bd7c:	4620      	mov	r0, r4
 800bd7e:	bd70      	pop	{r4, r5, r6, pc}

0800bd80 <__sfp_lock_acquire>:
 800bd80:	4801      	ldr	r0, [pc, #4]	; (800bd88 <__sfp_lock_acquire+0x8>)
 800bd82:	f000 b8b8 	b.w	800bef6 <__retarget_lock_acquire_recursive>
 800bd86:	bf00      	nop
 800bd88:	20000641 	.word	0x20000641

0800bd8c <__sfp_lock_release>:
 800bd8c:	4801      	ldr	r0, [pc, #4]	; (800bd94 <__sfp_lock_release+0x8>)
 800bd8e:	f000 b8b3 	b.w	800bef8 <__retarget_lock_release_recursive>
 800bd92:	bf00      	nop
 800bd94:	20000641 	.word	0x20000641

0800bd98 <__sinit_lock_acquire>:
 800bd98:	4801      	ldr	r0, [pc, #4]	; (800bda0 <__sinit_lock_acquire+0x8>)
 800bd9a:	f000 b8ac 	b.w	800bef6 <__retarget_lock_acquire_recursive>
 800bd9e:	bf00      	nop
 800bda0:	20000642 	.word	0x20000642

0800bda4 <__sinit_lock_release>:
 800bda4:	4801      	ldr	r0, [pc, #4]	; (800bdac <__sinit_lock_release+0x8>)
 800bda6:	f000 b8a7 	b.w	800bef8 <__retarget_lock_release_recursive>
 800bdaa:	bf00      	nop
 800bdac:	20000642 	.word	0x20000642

0800bdb0 <__sinit>:
 800bdb0:	b510      	push	{r4, lr}
 800bdb2:	4604      	mov	r4, r0
 800bdb4:	f7ff fff0 	bl	800bd98 <__sinit_lock_acquire>
 800bdb8:	69a3      	ldr	r3, [r4, #24]
 800bdba:	b11b      	cbz	r3, 800bdc4 <__sinit+0x14>
 800bdbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdc0:	f7ff bff0 	b.w	800bda4 <__sinit_lock_release>
 800bdc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bdc8:	6523      	str	r3, [r4, #80]	; 0x50
 800bdca:	4b13      	ldr	r3, [pc, #76]	; (800be18 <__sinit+0x68>)
 800bdcc:	4a13      	ldr	r2, [pc, #76]	; (800be1c <__sinit+0x6c>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	62a2      	str	r2, [r4, #40]	; 0x28
 800bdd2:	42a3      	cmp	r3, r4
 800bdd4:	bf04      	itt	eq
 800bdd6:	2301      	moveq	r3, #1
 800bdd8:	61a3      	streq	r3, [r4, #24]
 800bdda:	4620      	mov	r0, r4
 800bddc:	f000 f820 	bl	800be20 <__sfp>
 800bde0:	6060      	str	r0, [r4, #4]
 800bde2:	4620      	mov	r0, r4
 800bde4:	f000 f81c 	bl	800be20 <__sfp>
 800bde8:	60a0      	str	r0, [r4, #8]
 800bdea:	4620      	mov	r0, r4
 800bdec:	f000 f818 	bl	800be20 <__sfp>
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	60e0      	str	r0, [r4, #12]
 800bdf4:	2104      	movs	r1, #4
 800bdf6:	6860      	ldr	r0, [r4, #4]
 800bdf8:	f7ff ff82 	bl	800bd00 <std>
 800bdfc:	68a0      	ldr	r0, [r4, #8]
 800bdfe:	2201      	movs	r2, #1
 800be00:	2109      	movs	r1, #9
 800be02:	f7ff ff7d 	bl	800bd00 <std>
 800be06:	68e0      	ldr	r0, [r4, #12]
 800be08:	2202      	movs	r2, #2
 800be0a:	2112      	movs	r1, #18
 800be0c:	f7ff ff78 	bl	800bd00 <std>
 800be10:	2301      	movs	r3, #1
 800be12:	61a3      	str	r3, [r4, #24]
 800be14:	e7d2      	b.n	800bdbc <__sinit+0xc>
 800be16:	bf00      	nop
 800be18:	0800d364 	.word	0x0800d364
 800be1c:	0800bd49 	.word	0x0800bd49

0800be20 <__sfp>:
 800be20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be22:	4607      	mov	r7, r0
 800be24:	f7ff ffac 	bl	800bd80 <__sfp_lock_acquire>
 800be28:	4b1e      	ldr	r3, [pc, #120]	; (800bea4 <__sfp+0x84>)
 800be2a:	681e      	ldr	r6, [r3, #0]
 800be2c:	69b3      	ldr	r3, [r6, #24]
 800be2e:	b913      	cbnz	r3, 800be36 <__sfp+0x16>
 800be30:	4630      	mov	r0, r6
 800be32:	f7ff ffbd 	bl	800bdb0 <__sinit>
 800be36:	3648      	adds	r6, #72	; 0x48
 800be38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800be3c:	3b01      	subs	r3, #1
 800be3e:	d503      	bpl.n	800be48 <__sfp+0x28>
 800be40:	6833      	ldr	r3, [r6, #0]
 800be42:	b30b      	cbz	r3, 800be88 <__sfp+0x68>
 800be44:	6836      	ldr	r6, [r6, #0]
 800be46:	e7f7      	b.n	800be38 <__sfp+0x18>
 800be48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800be4c:	b9d5      	cbnz	r5, 800be84 <__sfp+0x64>
 800be4e:	4b16      	ldr	r3, [pc, #88]	; (800bea8 <__sfp+0x88>)
 800be50:	60e3      	str	r3, [r4, #12]
 800be52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800be56:	6665      	str	r5, [r4, #100]	; 0x64
 800be58:	f000 f84c 	bl	800bef4 <__retarget_lock_init_recursive>
 800be5c:	f7ff ff96 	bl	800bd8c <__sfp_lock_release>
 800be60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800be64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800be68:	6025      	str	r5, [r4, #0]
 800be6a:	61a5      	str	r5, [r4, #24]
 800be6c:	2208      	movs	r2, #8
 800be6e:	4629      	mov	r1, r5
 800be70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800be74:	f7fe faee 	bl	800a454 <memset>
 800be78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800be7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800be80:	4620      	mov	r0, r4
 800be82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be84:	3468      	adds	r4, #104	; 0x68
 800be86:	e7d9      	b.n	800be3c <__sfp+0x1c>
 800be88:	2104      	movs	r1, #4
 800be8a:	4638      	mov	r0, r7
 800be8c:	f7ff ff62 	bl	800bd54 <__sfmoreglue>
 800be90:	4604      	mov	r4, r0
 800be92:	6030      	str	r0, [r6, #0]
 800be94:	2800      	cmp	r0, #0
 800be96:	d1d5      	bne.n	800be44 <__sfp+0x24>
 800be98:	f7ff ff78 	bl	800bd8c <__sfp_lock_release>
 800be9c:	230c      	movs	r3, #12
 800be9e:	603b      	str	r3, [r7, #0]
 800bea0:	e7ee      	b.n	800be80 <__sfp+0x60>
 800bea2:	bf00      	nop
 800bea4:	0800d364 	.word	0x0800d364
 800bea8:	ffff0001 	.word	0xffff0001

0800beac <_fwalk_reent>:
 800beac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800beb0:	4606      	mov	r6, r0
 800beb2:	4688      	mov	r8, r1
 800beb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800beb8:	2700      	movs	r7, #0
 800beba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bebe:	f1b9 0901 	subs.w	r9, r9, #1
 800bec2:	d505      	bpl.n	800bed0 <_fwalk_reent+0x24>
 800bec4:	6824      	ldr	r4, [r4, #0]
 800bec6:	2c00      	cmp	r4, #0
 800bec8:	d1f7      	bne.n	800beba <_fwalk_reent+0xe>
 800beca:	4638      	mov	r0, r7
 800becc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bed0:	89ab      	ldrh	r3, [r5, #12]
 800bed2:	2b01      	cmp	r3, #1
 800bed4:	d907      	bls.n	800bee6 <_fwalk_reent+0x3a>
 800bed6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800beda:	3301      	adds	r3, #1
 800bedc:	d003      	beq.n	800bee6 <_fwalk_reent+0x3a>
 800bede:	4629      	mov	r1, r5
 800bee0:	4630      	mov	r0, r6
 800bee2:	47c0      	blx	r8
 800bee4:	4307      	orrs	r7, r0
 800bee6:	3568      	adds	r5, #104	; 0x68
 800bee8:	e7e9      	b.n	800bebe <_fwalk_reent+0x12>
	...

0800beec <_localeconv_r>:
 800beec:	4800      	ldr	r0, [pc, #0]	; (800bef0 <_localeconv_r+0x4>)
 800beee:	4770      	bx	lr
 800bef0:	20000190 	.word	0x20000190

0800bef4 <__retarget_lock_init_recursive>:
 800bef4:	4770      	bx	lr

0800bef6 <__retarget_lock_acquire_recursive>:
 800bef6:	4770      	bx	lr

0800bef8 <__retarget_lock_release_recursive>:
 800bef8:	4770      	bx	lr

0800befa <__swhatbuf_r>:
 800befa:	b570      	push	{r4, r5, r6, lr}
 800befc:	460e      	mov	r6, r1
 800befe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf02:	2900      	cmp	r1, #0
 800bf04:	b096      	sub	sp, #88	; 0x58
 800bf06:	4614      	mov	r4, r2
 800bf08:	461d      	mov	r5, r3
 800bf0a:	da08      	bge.n	800bf1e <__swhatbuf_r+0x24>
 800bf0c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bf10:	2200      	movs	r2, #0
 800bf12:	602a      	str	r2, [r5, #0]
 800bf14:	061a      	lsls	r2, r3, #24
 800bf16:	d410      	bmi.n	800bf3a <__swhatbuf_r+0x40>
 800bf18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf1c:	e00e      	b.n	800bf3c <__swhatbuf_r+0x42>
 800bf1e:	466a      	mov	r2, sp
 800bf20:	f000 fed2 	bl	800ccc8 <_fstat_r>
 800bf24:	2800      	cmp	r0, #0
 800bf26:	dbf1      	blt.n	800bf0c <__swhatbuf_r+0x12>
 800bf28:	9a01      	ldr	r2, [sp, #4]
 800bf2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bf2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bf32:	425a      	negs	r2, r3
 800bf34:	415a      	adcs	r2, r3
 800bf36:	602a      	str	r2, [r5, #0]
 800bf38:	e7ee      	b.n	800bf18 <__swhatbuf_r+0x1e>
 800bf3a:	2340      	movs	r3, #64	; 0x40
 800bf3c:	2000      	movs	r0, #0
 800bf3e:	6023      	str	r3, [r4, #0]
 800bf40:	b016      	add	sp, #88	; 0x58
 800bf42:	bd70      	pop	{r4, r5, r6, pc}

0800bf44 <__smakebuf_r>:
 800bf44:	898b      	ldrh	r3, [r1, #12]
 800bf46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf48:	079d      	lsls	r5, r3, #30
 800bf4a:	4606      	mov	r6, r0
 800bf4c:	460c      	mov	r4, r1
 800bf4e:	d507      	bpl.n	800bf60 <__smakebuf_r+0x1c>
 800bf50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bf54:	6023      	str	r3, [r4, #0]
 800bf56:	6123      	str	r3, [r4, #16]
 800bf58:	2301      	movs	r3, #1
 800bf5a:	6163      	str	r3, [r4, #20]
 800bf5c:	b002      	add	sp, #8
 800bf5e:	bd70      	pop	{r4, r5, r6, pc}
 800bf60:	ab01      	add	r3, sp, #4
 800bf62:	466a      	mov	r2, sp
 800bf64:	f7ff ffc9 	bl	800befa <__swhatbuf_r>
 800bf68:	9900      	ldr	r1, [sp, #0]
 800bf6a:	4605      	mov	r5, r0
 800bf6c:	4630      	mov	r0, r6
 800bf6e:	f000 fc37 	bl	800c7e0 <_malloc_r>
 800bf72:	b948      	cbnz	r0, 800bf88 <__smakebuf_r+0x44>
 800bf74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf78:	059a      	lsls	r2, r3, #22
 800bf7a:	d4ef      	bmi.n	800bf5c <__smakebuf_r+0x18>
 800bf7c:	f023 0303 	bic.w	r3, r3, #3
 800bf80:	f043 0302 	orr.w	r3, r3, #2
 800bf84:	81a3      	strh	r3, [r4, #12]
 800bf86:	e7e3      	b.n	800bf50 <__smakebuf_r+0xc>
 800bf88:	4b0d      	ldr	r3, [pc, #52]	; (800bfc0 <__smakebuf_r+0x7c>)
 800bf8a:	62b3      	str	r3, [r6, #40]	; 0x28
 800bf8c:	89a3      	ldrh	r3, [r4, #12]
 800bf8e:	6020      	str	r0, [r4, #0]
 800bf90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf94:	81a3      	strh	r3, [r4, #12]
 800bf96:	9b00      	ldr	r3, [sp, #0]
 800bf98:	6163      	str	r3, [r4, #20]
 800bf9a:	9b01      	ldr	r3, [sp, #4]
 800bf9c:	6120      	str	r0, [r4, #16]
 800bf9e:	b15b      	cbz	r3, 800bfb8 <__smakebuf_r+0x74>
 800bfa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfa4:	4630      	mov	r0, r6
 800bfa6:	f000 fea1 	bl	800ccec <_isatty_r>
 800bfaa:	b128      	cbz	r0, 800bfb8 <__smakebuf_r+0x74>
 800bfac:	89a3      	ldrh	r3, [r4, #12]
 800bfae:	f023 0303 	bic.w	r3, r3, #3
 800bfb2:	f043 0301 	orr.w	r3, r3, #1
 800bfb6:	81a3      	strh	r3, [r4, #12]
 800bfb8:	89a0      	ldrh	r0, [r4, #12]
 800bfba:	4305      	orrs	r5, r0
 800bfbc:	81a5      	strh	r5, [r4, #12]
 800bfbe:	e7cd      	b.n	800bf5c <__smakebuf_r+0x18>
 800bfc0:	0800bd49 	.word	0x0800bd49

0800bfc4 <malloc>:
 800bfc4:	4b02      	ldr	r3, [pc, #8]	; (800bfd0 <malloc+0xc>)
 800bfc6:	4601      	mov	r1, r0
 800bfc8:	6818      	ldr	r0, [r3, #0]
 800bfca:	f000 bc09 	b.w	800c7e0 <_malloc_r>
 800bfce:	bf00      	nop
 800bfd0:	2000003c 	.word	0x2000003c

0800bfd4 <_Balloc>:
 800bfd4:	b570      	push	{r4, r5, r6, lr}
 800bfd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bfd8:	4604      	mov	r4, r0
 800bfda:	460d      	mov	r5, r1
 800bfdc:	b976      	cbnz	r6, 800bffc <_Balloc+0x28>
 800bfde:	2010      	movs	r0, #16
 800bfe0:	f7ff fff0 	bl	800bfc4 <malloc>
 800bfe4:	4602      	mov	r2, r0
 800bfe6:	6260      	str	r0, [r4, #36]	; 0x24
 800bfe8:	b920      	cbnz	r0, 800bff4 <_Balloc+0x20>
 800bfea:	4b18      	ldr	r3, [pc, #96]	; (800c04c <_Balloc+0x78>)
 800bfec:	4818      	ldr	r0, [pc, #96]	; (800c050 <_Balloc+0x7c>)
 800bfee:	2166      	movs	r1, #102	; 0x66
 800bff0:	f000 fe2a 	bl	800cc48 <__assert_func>
 800bff4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bff8:	6006      	str	r6, [r0, #0]
 800bffa:	60c6      	str	r6, [r0, #12]
 800bffc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bffe:	68f3      	ldr	r3, [r6, #12]
 800c000:	b183      	cbz	r3, 800c024 <_Balloc+0x50>
 800c002:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c004:	68db      	ldr	r3, [r3, #12]
 800c006:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c00a:	b9b8      	cbnz	r0, 800c03c <_Balloc+0x68>
 800c00c:	2101      	movs	r1, #1
 800c00e:	fa01 f605 	lsl.w	r6, r1, r5
 800c012:	1d72      	adds	r2, r6, #5
 800c014:	0092      	lsls	r2, r2, #2
 800c016:	4620      	mov	r0, r4
 800c018:	f000 fb60 	bl	800c6dc <_calloc_r>
 800c01c:	b160      	cbz	r0, 800c038 <_Balloc+0x64>
 800c01e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c022:	e00e      	b.n	800c042 <_Balloc+0x6e>
 800c024:	2221      	movs	r2, #33	; 0x21
 800c026:	2104      	movs	r1, #4
 800c028:	4620      	mov	r0, r4
 800c02a:	f000 fb57 	bl	800c6dc <_calloc_r>
 800c02e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c030:	60f0      	str	r0, [r6, #12]
 800c032:	68db      	ldr	r3, [r3, #12]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d1e4      	bne.n	800c002 <_Balloc+0x2e>
 800c038:	2000      	movs	r0, #0
 800c03a:	bd70      	pop	{r4, r5, r6, pc}
 800c03c:	6802      	ldr	r2, [r0, #0]
 800c03e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c042:	2300      	movs	r3, #0
 800c044:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c048:	e7f7      	b.n	800c03a <_Balloc+0x66>
 800c04a:	bf00      	nop
 800c04c:	0800d3a9 	.word	0x0800d3a9
 800c050:	0800d48c 	.word	0x0800d48c

0800c054 <_Bfree>:
 800c054:	b570      	push	{r4, r5, r6, lr}
 800c056:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c058:	4605      	mov	r5, r0
 800c05a:	460c      	mov	r4, r1
 800c05c:	b976      	cbnz	r6, 800c07c <_Bfree+0x28>
 800c05e:	2010      	movs	r0, #16
 800c060:	f7ff ffb0 	bl	800bfc4 <malloc>
 800c064:	4602      	mov	r2, r0
 800c066:	6268      	str	r0, [r5, #36]	; 0x24
 800c068:	b920      	cbnz	r0, 800c074 <_Bfree+0x20>
 800c06a:	4b09      	ldr	r3, [pc, #36]	; (800c090 <_Bfree+0x3c>)
 800c06c:	4809      	ldr	r0, [pc, #36]	; (800c094 <_Bfree+0x40>)
 800c06e:	218a      	movs	r1, #138	; 0x8a
 800c070:	f000 fdea 	bl	800cc48 <__assert_func>
 800c074:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c078:	6006      	str	r6, [r0, #0]
 800c07a:	60c6      	str	r6, [r0, #12]
 800c07c:	b13c      	cbz	r4, 800c08e <_Bfree+0x3a>
 800c07e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c080:	6862      	ldr	r2, [r4, #4]
 800c082:	68db      	ldr	r3, [r3, #12]
 800c084:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c088:	6021      	str	r1, [r4, #0]
 800c08a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c08e:	bd70      	pop	{r4, r5, r6, pc}
 800c090:	0800d3a9 	.word	0x0800d3a9
 800c094:	0800d48c 	.word	0x0800d48c

0800c098 <__multadd>:
 800c098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c09c:	690d      	ldr	r5, [r1, #16]
 800c09e:	4607      	mov	r7, r0
 800c0a0:	460c      	mov	r4, r1
 800c0a2:	461e      	mov	r6, r3
 800c0a4:	f101 0c14 	add.w	ip, r1, #20
 800c0a8:	2000      	movs	r0, #0
 800c0aa:	f8dc 3000 	ldr.w	r3, [ip]
 800c0ae:	b299      	uxth	r1, r3
 800c0b0:	fb02 6101 	mla	r1, r2, r1, r6
 800c0b4:	0c1e      	lsrs	r6, r3, #16
 800c0b6:	0c0b      	lsrs	r3, r1, #16
 800c0b8:	fb02 3306 	mla	r3, r2, r6, r3
 800c0bc:	b289      	uxth	r1, r1
 800c0be:	3001      	adds	r0, #1
 800c0c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c0c4:	4285      	cmp	r5, r0
 800c0c6:	f84c 1b04 	str.w	r1, [ip], #4
 800c0ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c0ce:	dcec      	bgt.n	800c0aa <__multadd+0x12>
 800c0d0:	b30e      	cbz	r6, 800c116 <__multadd+0x7e>
 800c0d2:	68a3      	ldr	r3, [r4, #8]
 800c0d4:	42ab      	cmp	r3, r5
 800c0d6:	dc19      	bgt.n	800c10c <__multadd+0x74>
 800c0d8:	6861      	ldr	r1, [r4, #4]
 800c0da:	4638      	mov	r0, r7
 800c0dc:	3101      	adds	r1, #1
 800c0de:	f7ff ff79 	bl	800bfd4 <_Balloc>
 800c0e2:	4680      	mov	r8, r0
 800c0e4:	b928      	cbnz	r0, 800c0f2 <__multadd+0x5a>
 800c0e6:	4602      	mov	r2, r0
 800c0e8:	4b0c      	ldr	r3, [pc, #48]	; (800c11c <__multadd+0x84>)
 800c0ea:	480d      	ldr	r0, [pc, #52]	; (800c120 <__multadd+0x88>)
 800c0ec:	21b5      	movs	r1, #181	; 0xb5
 800c0ee:	f000 fdab 	bl	800cc48 <__assert_func>
 800c0f2:	6922      	ldr	r2, [r4, #16]
 800c0f4:	3202      	adds	r2, #2
 800c0f6:	f104 010c 	add.w	r1, r4, #12
 800c0fa:	0092      	lsls	r2, r2, #2
 800c0fc:	300c      	adds	r0, #12
 800c0fe:	f7fe f99b 	bl	800a438 <memcpy>
 800c102:	4621      	mov	r1, r4
 800c104:	4638      	mov	r0, r7
 800c106:	f7ff ffa5 	bl	800c054 <_Bfree>
 800c10a:	4644      	mov	r4, r8
 800c10c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c110:	3501      	adds	r5, #1
 800c112:	615e      	str	r6, [r3, #20]
 800c114:	6125      	str	r5, [r4, #16]
 800c116:	4620      	mov	r0, r4
 800c118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c11c:	0800d41b 	.word	0x0800d41b
 800c120:	0800d48c 	.word	0x0800d48c

0800c124 <__hi0bits>:
 800c124:	0c03      	lsrs	r3, r0, #16
 800c126:	041b      	lsls	r3, r3, #16
 800c128:	b9d3      	cbnz	r3, 800c160 <__hi0bits+0x3c>
 800c12a:	0400      	lsls	r0, r0, #16
 800c12c:	2310      	movs	r3, #16
 800c12e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c132:	bf04      	itt	eq
 800c134:	0200      	lsleq	r0, r0, #8
 800c136:	3308      	addeq	r3, #8
 800c138:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c13c:	bf04      	itt	eq
 800c13e:	0100      	lsleq	r0, r0, #4
 800c140:	3304      	addeq	r3, #4
 800c142:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c146:	bf04      	itt	eq
 800c148:	0080      	lsleq	r0, r0, #2
 800c14a:	3302      	addeq	r3, #2
 800c14c:	2800      	cmp	r0, #0
 800c14e:	db05      	blt.n	800c15c <__hi0bits+0x38>
 800c150:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c154:	f103 0301 	add.w	r3, r3, #1
 800c158:	bf08      	it	eq
 800c15a:	2320      	moveq	r3, #32
 800c15c:	4618      	mov	r0, r3
 800c15e:	4770      	bx	lr
 800c160:	2300      	movs	r3, #0
 800c162:	e7e4      	b.n	800c12e <__hi0bits+0xa>

0800c164 <__lo0bits>:
 800c164:	6803      	ldr	r3, [r0, #0]
 800c166:	f013 0207 	ands.w	r2, r3, #7
 800c16a:	4601      	mov	r1, r0
 800c16c:	d00b      	beq.n	800c186 <__lo0bits+0x22>
 800c16e:	07da      	lsls	r2, r3, #31
 800c170:	d423      	bmi.n	800c1ba <__lo0bits+0x56>
 800c172:	0798      	lsls	r0, r3, #30
 800c174:	bf49      	itett	mi
 800c176:	085b      	lsrmi	r3, r3, #1
 800c178:	089b      	lsrpl	r3, r3, #2
 800c17a:	2001      	movmi	r0, #1
 800c17c:	600b      	strmi	r3, [r1, #0]
 800c17e:	bf5c      	itt	pl
 800c180:	600b      	strpl	r3, [r1, #0]
 800c182:	2002      	movpl	r0, #2
 800c184:	4770      	bx	lr
 800c186:	b298      	uxth	r0, r3
 800c188:	b9a8      	cbnz	r0, 800c1b6 <__lo0bits+0x52>
 800c18a:	0c1b      	lsrs	r3, r3, #16
 800c18c:	2010      	movs	r0, #16
 800c18e:	b2da      	uxtb	r2, r3
 800c190:	b90a      	cbnz	r2, 800c196 <__lo0bits+0x32>
 800c192:	3008      	adds	r0, #8
 800c194:	0a1b      	lsrs	r3, r3, #8
 800c196:	071a      	lsls	r2, r3, #28
 800c198:	bf04      	itt	eq
 800c19a:	091b      	lsreq	r3, r3, #4
 800c19c:	3004      	addeq	r0, #4
 800c19e:	079a      	lsls	r2, r3, #30
 800c1a0:	bf04      	itt	eq
 800c1a2:	089b      	lsreq	r3, r3, #2
 800c1a4:	3002      	addeq	r0, #2
 800c1a6:	07da      	lsls	r2, r3, #31
 800c1a8:	d403      	bmi.n	800c1b2 <__lo0bits+0x4e>
 800c1aa:	085b      	lsrs	r3, r3, #1
 800c1ac:	f100 0001 	add.w	r0, r0, #1
 800c1b0:	d005      	beq.n	800c1be <__lo0bits+0x5a>
 800c1b2:	600b      	str	r3, [r1, #0]
 800c1b4:	4770      	bx	lr
 800c1b6:	4610      	mov	r0, r2
 800c1b8:	e7e9      	b.n	800c18e <__lo0bits+0x2a>
 800c1ba:	2000      	movs	r0, #0
 800c1bc:	4770      	bx	lr
 800c1be:	2020      	movs	r0, #32
 800c1c0:	4770      	bx	lr
	...

0800c1c4 <__i2b>:
 800c1c4:	b510      	push	{r4, lr}
 800c1c6:	460c      	mov	r4, r1
 800c1c8:	2101      	movs	r1, #1
 800c1ca:	f7ff ff03 	bl	800bfd4 <_Balloc>
 800c1ce:	4602      	mov	r2, r0
 800c1d0:	b928      	cbnz	r0, 800c1de <__i2b+0x1a>
 800c1d2:	4b05      	ldr	r3, [pc, #20]	; (800c1e8 <__i2b+0x24>)
 800c1d4:	4805      	ldr	r0, [pc, #20]	; (800c1ec <__i2b+0x28>)
 800c1d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c1da:	f000 fd35 	bl	800cc48 <__assert_func>
 800c1de:	2301      	movs	r3, #1
 800c1e0:	6144      	str	r4, [r0, #20]
 800c1e2:	6103      	str	r3, [r0, #16]
 800c1e4:	bd10      	pop	{r4, pc}
 800c1e6:	bf00      	nop
 800c1e8:	0800d41b 	.word	0x0800d41b
 800c1ec:	0800d48c 	.word	0x0800d48c

0800c1f0 <__multiply>:
 800c1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1f4:	4691      	mov	r9, r2
 800c1f6:	690a      	ldr	r2, [r1, #16]
 800c1f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	bfb8      	it	lt
 800c200:	460b      	movlt	r3, r1
 800c202:	460c      	mov	r4, r1
 800c204:	bfbc      	itt	lt
 800c206:	464c      	movlt	r4, r9
 800c208:	4699      	movlt	r9, r3
 800c20a:	6927      	ldr	r7, [r4, #16]
 800c20c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c210:	68a3      	ldr	r3, [r4, #8]
 800c212:	6861      	ldr	r1, [r4, #4]
 800c214:	eb07 060a 	add.w	r6, r7, sl
 800c218:	42b3      	cmp	r3, r6
 800c21a:	b085      	sub	sp, #20
 800c21c:	bfb8      	it	lt
 800c21e:	3101      	addlt	r1, #1
 800c220:	f7ff fed8 	bl	800bfd4 <_Balloc>
 800c224:	b930      	cbnz	r0, 800c234 <__multiply+0x44>
 800c226:	4602      	mov	r2, r0
 800c228:	4b44      	ldr	r3, [pc, #272]	; (800c33c <__multiply+0x14c>)
 800c22a:	4845      	ldr	r0, [pc, #276]	; (800c340 <__multiply+0x150>)
 800c22c:	f240 115d 	movw	r1, #349	; 0x15d
 800c230:	f000 fd0a 	bl	800cc48 <__assert_func>
 800c234:	f100 0514 	add.w	r5, r0, #20
 800c238:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c23c:	462b      	mov	r3, r5
 800c23e:	2200      	movs	r2, #0
 800c240:	4543      	cmp	r3, r8
 800c242:	d321      	bcc.n	800c288 <__multiply+0x98>
 800c244:	f104 0314 	add.w	r3, r4, #20
 800c248:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c24c:	f109 0314 	add.w	r3, r9, #20
 800c250:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c254:	9202      	str	r2, [sp, #8]
 800c256:	1b3a      	subs	r2, r7, r4
 800c258:	3a15      	subs	r2, #21
 800c25a:	f022 0203 	bic.w	r2, r2, #3
 800c25e:	3204      	adds	r2, #4
 800c260:	f104 0115 	add.w	r1, r4, #21
 800c264:	428f      	cmp	r7, r1
 800c266:	bf38      	it	cc
 800c268:	2204      	movcc	r2, #4
 800c26a:	9201      	str	r2, [sp, #4]
 800c26c:	9a02      	ldr	r2, [sp, #8]
 800c26e:	9303      	str	r3, [sp, #12]
 800c270:	429a      	cmp	r2, r3
 800c272:	d80c      	bhi.n	800c28e <__multiply+0x9e>
 800c274:	2e00      	cmp	r6, #0
 800c276:	dd03      	ble.n	800c280 <__multiply+0x90>
 800c278:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d05a      	beq.n	800c336 <__multiply+0x146>
 800c280:	6106      	str	r6, [r0, #16]
 800c282:	b005      	add	sp, #20
 800c284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c288:	f843 2b04 	str.w	r2, [r3], #4
 800c28c:	e7d8      	b.n	800c240 <__multiply+0x50>
 800c28e:	f8b3 a000 	ldrh.w	sl, [r3]
 800c292:	f1ba 0f00 	cmp.w	sl, #0
 800c296:	d024      	beq.n	800c2e2 <__multiply+0xf2>
 800c298:	f104 0e14 	add.w	lr, r4, #20
 800c29c:	46a9      	mov	r9, r5
 800c29e:	f04f 0c00 	mov.w	ip, #0
 800c2a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c2a6:	f8d9 1000 	ldr.w	r1, [r9]
 800c2aa:	fa1f fb82 	uxth.w	fp, r2
 800c2ae:	b289      	uxth	r1, r1
 800c2b0:	fb0a 110b 	mla	r1, sl, fp, r1
 800c2b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c2b8:	f8d9 2000 	ldr.w	r2, [r9]
 800c2bc:	4461      	add	r1, ip
 800c2be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c2c2:	fb0a c20b 	mla	r2, sl, fp, ip
 800c2c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c2ca:	b289      	uxth	r1, r1
 800c2cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c2d0:	4577      	cmp	r7, lr
 800c2d2:	f849 1b04 	str.w	r1, [r9], #4
 800c2d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c2da:	d8e2      	bhi.n	800c2a2 <__multiply+0xb2>
 800c2dc:	9a01      	ldr	r2, [sp, #4]
 800c2de:	f845 c002 	str.w	ip, [r5, r2]
 800c2e2:	9a03      	ldr	r2, [sp, #12]
 800c2e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c2e8:	3304      	adds	r3, #4
 800c2ea:	f1b9 0f00 	cmp.w	r9, #0
 800c2ee:	d020      	beq.n	800c332 <__multiply+0x142>
 800c2f0:	6829      	ldr	r1, [r5, #0]
 800c2f2:	f104 0c14 	add.w	ip, r4, #20
 800c2f6:	46ae      	mov	lr, r5
 800c2f8:	f04f 0a00 	mov.w	sl, #0
 800c2fc:	f8bc b000 	ldrh.w	fp, [ip]
 800c300:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c304:	fb09 220b 	mla	r2, r9, fp, r2
 800c308:	4492      	add	sl, r2
 800c30a:	b289      	uxth	r1, r1
 800c30c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c310:	f84e 1b04 	str.w	r1, [lr], #4
 800c314:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c318:	f8be 1000 	ldrh.w	r1, [lr]
 800c31c:	0c12      	lsrs	r2, r2, #16
 800c31e:	fb09 1102 	mla	r1, r9, r2, r1
 800c322:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c326:	4567      	cmp	r7, ip
 800c328:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c32c:	d8e6      	bhi.n	800c2fc <__multiply+0x10c>
 800c32e:	9a01      	ldr	r2, [sp, #4]
 800c330:	50a9      	str	r1, [r5, r2]
 800c332:	3504      	adds	r5, #4
 800c334:	e79a      	b.n	800c26c <__multiply+0x7c>
 800c336:	3e01      	subs	r6, #1
 800c338:	e79c      	b.n	800c274 <__multiply+0x84>
 800c33a:	bf00      	nop
 800c33c:	0800d41b 	.word	0x0800d41b
 800c340:	0800d48c 	.word	0x0800d48c

0800c344 <__pow5mult>:
 800c344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c348:	4615      	mov	r5, r2
 800c34a:	f012 0203 	ands.w	r2, r2, #3
 800c34e:	4606      	mov	r6, r0
 800c350:	460f      	mov	r7, r1
 800c352:	d007      	beq.n	800c364 <__pow5mult+0x20>
 800c354:	4c25      	ldr	r4, [pc, #148]	; (800c3ec <__pow5mult+0xa8>)
 800c356:	3a01      	subs	r2, #1
 800c358:	2300      	movs	r3, #0
 800c35a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c35e:	f7ff fe9b 	bl	800c098 <__multadd>
 800c362:	4607      	mov	r7, r0
 800c364:	10ad      	asrs	r5, r5, #2
 800c366:	d03d      	beq.n	800c3e4 <__pow5mult+0xa0>
 800c368:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c36a:	b97c      	cbnz	r4, 800c38c <__pow5mult+0x48>
 800c36c:	2010      	movs	r0, #16
 800c36e:	f7ff fe29 	bl	800bfc4 <malloc>
 800c372:	4602      	mov	r2, r0
 800c374:	6270      	str	r0, [r6, #36]	; 0x24
 800c376:	b928      	cbnz	r0, 800c384 <__pow5mult+0x40>
 800c378:	4b1d      	ldr	r3, [pc, #116]	; (800c3f0 <__pow5mult+0xac>)
 800c37a:	481e      	ldr	r0, [pc, #120]	; (800c3f4 <__pow5mult+0xb0>)
 800c37c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c380:	f000 fc62 	bl	800cc48 <__assert_func>
 800c384:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c388:	6004      	str	r4, [r0, #0]
 800c38a:	60c4      	str	r4, [r0, #12]
 800c38c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c390:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c394:	b94c      	cbnz	r4, 800c3aa <__pow5mult+0x66>
 800c396:	f240 2171 	movw	r1, #625	; 0x271
 800c39a:	4630      	mov	r0, r6
 800c39c:	f7ff ff12 	bl	800c1c4 <__i2b>
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c3a6:	4604      	mov	r4, r0
 800c3a8:	6003      	str	r3, [r0, #0]
 800c3aa:	f04f 0900 	mov.w	r9, #0
 800c3ae:	07eb      	lsls	r3, r5, #31
 800c3b0:	d50a      	bpl.n	800c3c8 <__pow5mult+0x84>
 800c3b2:	4639      	mov	r1, r7
 800c3b4:	4622      	mov	r2, r4
 800c3b6:	4630      	mov	r0, r6
 800c3b8:	f7ff ff1a 	bl	800c1f0 <__multiply>
 800c3bc:	4639      	mov	r1, r7
 800c3be:	4680      	mov	r8, r0
 800c3c0:	4630      	mov	r0, r6
 800c3c2:	f7ff fe47 	bl	800c054 <_Bfree>
 800c3c6:	4647      	mov	r7, r8
 800c3c8:	106d      	asrs	r5, r5, #1
 800c3ca:	d00b      	beq.n	800c3e4 <__pow5mult+0xa0>
 800c3cc:	6820      	ldr	r0, [r4, #0]
 800c3ce:	b938      	cbnz	r0, 800c3e0 <__pow5mult+0x9c>
 800c3d0:	4622      	mov	r2, r4
 800c3d2:	4621      	mov	r1, r4
 800c3d4:	4630      	mov	r0, r6
 800c3d6:	f7ff ff0b 	bl	800c1f0 <__multiply>
 800c3da:	6020      	str	r0, [r4, #0]
 800c3dc:	f8c0 9000 	str.w	r9, [r0]
 800c3e0:	4604      	mov	r4, r0
 800c3e2:	e7e4      	b.n	800c3ae <__pow5mult+0x6a>
 800c3e4:	4638      	mov	r0, r7
 800c3e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3ea:	bf00      	nop
 800c3ec:	0800d5d8 	.word	0x0800d5d8
 800c3f0:	0800d3a9 	.word	0x0800d3a9
 800c3f4:	0800d48c 	.word	0x0800d48c

0800c3f8 <__lshift>:
 800c3f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3fc:	460c      	mov	r4, r1
 800c3fe:	6849      	ldr	r1, [r1, #4]
 800c400:	6923      	ldr	r3, [r4, #16]
 800c402:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c406:	68a3      	ldr	r3, [r4, #8]
 800c408:	4607      	mov	r7, r0
 800c40a:	4691      	mov	r9, r2
 800c40c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c410:	f108 0601 	add.w	r6, r8, #1
 800c414:	42b3      	cmp	r3, r6
 800c416:	db0b      	blt.n	800c430 <__lshift+0x38>
 800c418:	4638      	mov	r0, r7
 800c41a:	f7ff fddb 	bl	800bfd4 <_Balloc>
 800c41e:	4605      	mov	r5, r0
 800c420:	b948      	cbnz	r0, 800c436 <__lshift+0x3e>
 800c422:	4602      	mov	r2, r0
 800c424:	4b2a      	ldr	r3, [pc, #168]	; (800c4d0 <__lshift+0xd8>)
 800c426:	482b      	ldr	r0, [pc, #172]	; (800c4d4 <__lshift+0xdc>)
 800c428:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c42c:	f000 fc0c 	bl	800cc48 <__assert_func>
 800c430:	3101      	adds	r1, #1
 800c432:	005b      	lsls	r3, r3, #1
 800c434:	e7ee      	b.n	800c414 <__lshift+0x1c>
 800c436:	2300      	movs	r3, #0
 800c438:	f100 0114 	add.w	r1, r0, #20
 800c43c:	f100 0210 	add.w	r2, r0, #16
 800c440:	4618      	mov	r0, r3
 800c442:	4553      	cmp	r3, sl
 800c444:	db37      	blt.n	800c4b6 <__lshift+0xbe>
 800c446:	6920      	ldr	r0, [r4, #16]
 800c448:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c44c:	f104 0314 	add.w	r3, r4, #20
 800c450:	f019 091f 	ands.w	r9, r9, #31
 800c454:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c458:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c45c:	d02f      	beq.n	800c4be <__lshift+0xc6>
 800c45e:	f1c9 0e20 	rsb	lr, r9, #32
 800c462:	468a      	mov	sl, r1
 800c464:	f04f 0c00 	mov.w	ip, #0
 800c468:	681a      	ldr	r2, [r3, #0]
 800c46a:	fa02 f209 	lsl.w	r2, r2, r9
 800c46e:	ea42 020c 	orr.w	r2, r2, ip
 800c472:	f84a 2b04 	str.w	r2, [sl], #4
 800c476:	f853 2b04 	ldr.w	r2, [r3], #4
 800c47a:	4298      	cmp	r0, r3
 800c47c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c480:	d8f2      	bhi.n	800c468 <__lshift+0x70>
 800c482:	1b03      	subs	r3, r0, r4
 800c484:	3b15      	subs	r3, #21
 800c486:	f023 0303 	bic.w	r3, r3, #3
 800c48a:	3304      	adds	r3, #4
 800c48c:	f104 0215 	add.w	r2, r4, #21
 800c490:	4290      	cmp	r0, r2
 800c492:	bf38      	it	cc
 800c494:	2304      	movcc	r3, #4
 800c496:	f841 c003 	str.w	ip, [r1, r3]
 800c49a:	f1bc 0f00 	cmp.w	ip, #0
 800c49e:	d001      	beq.n	800c4a4 <__lshift+0xac>
 800c4a0:	f108 0602 	add.w	r6, r8, #2
 800c4a4:	3e01      	subs	r6, #1
 800c4a6:	4638      	mov	r0, r7
 800c4a8:	612e      	str	r6, [r5, #16]
 800c4aa:	4621      	mov	r1, r4
 800c4ac:	f7ff fdd2 	bl	800c054 <_Bfree>
 800c4b0:	4628      	mov	r0, r5
 800c4b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c4ba:	3301      	adds	r3, #1
 800c4bc:	e7c1      	b.n	800c442 <__lshift+0x4a>
 800c4be:	3904      	subs	r1, #4
 800c4c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c4c8:	4298      	cmp	r0, r3
 800c4ca:	d8f9      	bhi.n	800c4c0 <__lshift+0xc8>
 800c4cc:	e7ea      	b.n	800c4a4 <__lshift+0xac>
 800c4ce:	bf00      	nop
 800c4d0:	0800d41b 	.word	0x0800d41b
 800c4d4:	0800d48c 	.word	0x0800d48c

0800c4d8 <__mcmp>:
 800c4d8:	b530      	push	{r4, r5, lr}
 800c4da:	6902      	ldr	r2, [r0, #16]
 800c4dc:	690c      	ldr	r4, [r1, #16]
 800c4de:	1b12      	subs	r2, r2, r4
 800c4e0:	d10e      	bne.n	800c500 <__mcmp+0x28>
 800c4e2:	f100 0314 	add.w	r3, r0, #20
 800c4e6:	3114      	adds	r1, #20
 800c4e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c4ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c4f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c4f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c4f8:	42a5      	cmp	r5, r4
 800c4fa:	d003      	beq.n	800c504 <__mcmp+0x2c>
 800c4fc:	d305      	bcc.n	800c50a <__mcmp+0x32>
 800c4fe:	2201      	movs	r2, #1
 800c500:	4610      	mov	r0, r2
 800c502:	bd30      	pop	{r4, r5, pc}
 800c504:	4283      	cmp	r3, r0
 800c506:	d3f3      	bcc.n	800c4f0 <__mcmp+0x18>
 800c508:	e7fa      	b.n	800c500 <__mcmp+0x28>
 800c50a:	f04f 32ff 	mov.w	r2, #4294967295
 800c50e:	e7f7      	b.n	800c500 <__mcmp+0x28>

0800c510 <__mdiff>:
 800c510:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c514:	460c      	mov	r4, r1
 800c516:	4606      	mov	r6, r0
 800c518:	4611      	mov	r1, r2
 800c51a:	4620      	mov	r0, r4
 800c51c:	4690      	mov	r8, r2
 800c51e:	f7ff ffdb 	bl	800c4d8 <__mcmp>
 800c522:	1e05      	subs	r5, r0, #0
 800c524:	d110      	bne.n	800c548 <__mdiff+0x38>
 800c526:	4629      	mov	r1, r5
 800c528:	4630      	mov	r0, r6
 800c52a:	f7ff fd53 	bl	800bfd4 <_Balloc>
 800c52e:	b930      	cbnz	r0, 800c53e <__mdiff+0x2e>
 800c530:	4b3a      	ldr	r3, [pc, #232]	; (800c61c <__mdiff+0x10c>)
 800c532:	4602      	mov	r2, r0
 800c534:	f240 2132 	movw	r1, #562	; 0x232
 800c538:	4839      	ldr	r0, [pc, #228]	; (800c620 <__mdiff+0x110>)
 800c53a:	f000 fb85 	bl	800cc48 <__assert_func>
 800c53e:	2301      	movs	r3, #1
 800c540:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c544:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c548:	bfa4      	itt	ge
 800c54a:	4643      	movge	r3, r8
 800c54c:	46a0      	movge	r8, r4
 800c54e:	4630      	mov	r0, r6
 800c550:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c554:	bfa6      	itte	ge
 800c556:	461c      	movge	r4, r3
 800c558:	2500      	movge	r5, #0
 800c55a:	2501      	movlt	r5, #1
 800c55c:	f7ff fd3a 	bl	800bfd4 <_Balloc>
 800c560:	b920      	cbnz	r0, 800c56c <__mdiff+0x5c>
 800c562:	4b2e      	ldr	r3, [pc, #184]	; (800c61c <__mdiff+0x10c>)
 800c564:	4602      	mov	r2, r0
 800c566:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c56a:	e7e5      	b.n	800c538 <__mdiff+0x28>
 800c56c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c570:	6926      	ldr	r6, [r4, #16]
 800c572:	60c5      	str	r5, [r0, #12]
 800c574:	f104 0914 	add.w	r9, r4, #20
 800c578:	f108 0514 	add.w	r5, r8, #20
 800c57c:	f100 0e14 	add.w	lr, r0, #20
 800c580:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c584:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c588:	f108 0210 	add.w	r2, r8, #16
 800c58c:	46f2      	mov	sl, lr
 800c58e:	2100      	movs	r1, #0
 800c590:	f859 3b04 	ldr.w	r3, [r9], #4
 800c594:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c598:	fa1f f883 	uxth.w	r8, r3
 800c59c:	fa11 f18b 	uxtah	r1, r1, fp
 800c5a0:	0c1b      	lsrs	r3, r3, #16
 800c5a2:	eba1 0808 	sub.w	r8, r1, r8
 800c5a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c5aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c5ae:	fa1f f888 	uxth.w	r8, r8
 800c5b2:	1419      	asrs	r1, r3, #16
 800c5b4:	454e      	cmp	r6, r9
 800c5b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c5ba:	f84a 3b04 	str.w	r3, [sl], #4
 800c5be:	d8e7      	bhi.n	800c590 <__mdiff+0x80>
 800c5c0:	1b33      	subs	r3, r6, r4
 800c5c2:	3b15      	subs	r3, #21
 800c5c4:	f023 0303 	bic.w	r3, r3, #3
 800c5c8:	3304      	adds	r3, #4
 800c5ca:	3415      	adds	r4, #21
 800c5cc:	42a6      	cmp	r6, r4
 800c5ce:	bf38      	it	cc
 800c5d0:	2304      	movcc	r3, #4
 800c5d2:	441d      	add	r5, r3
 800c5d4:	4473      	add	r3, lr
 800c5d6:	469e      	mov	lr, r3
 800c5d8:	462e      	mov	r6, r5
 800c5da:	4566      	cmp	r6, ip
 800c5dc:	d30e      	bcc.n	800c5fc <__mdiff+0xec>
 800c5de:	f10c 0203 	add.w	r2, ip, #3
 800c5e2:	1b52      	subs	r2, r2, r5
 800c5e4:	f022 0203 	bic.w	r2, r2, #3
 800c5e8:	3d03      	subs	r5, #3
 800c5ea:	45ac      	cmp	ip, r5
 800c5ec:	bf38      	it	cc
 800c5ee:	2200      	movcc	r2, #0
 800c5f0:	441a      	add	r2, r3
 800c5f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c5f6:	b17b      	cbz	r3, 800c618 <__mdiff+0x108>
 800c5f8:	6107      	str	r7, [r0, #16]
 800c5fa:	e7a3      	b.n	800c544 <__mdiff+0x34>
 800c5fc:	f856 8b04 	ldr.w	r8, [r6], #4
 800c600:	fa11 f288 	uxtah	r2, r1, r8
 800c604:	1414      	asrs	r4, r2, #16
 800c606:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c60a:	b292      	uxth	r2, r2
 800c60c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c610:	f84e 2b04 	str.w	r2, [lr], #4
 800c614:	1421      	asrs	r1, r4, #16
 800c616:	e7e0      	b.n	800c5da <__mdiff+0xca>
 800c618:	3f01      	subs	r7, #1
 800c61a:	e7ea      	b.n	800c5f2 <__mdiff+0xe2>
 800c61c:	0800d41b 	.word	0x0800d41b
 800c620:	0800d48c 	.word	0x0800d48c

0800c624 <__d2b>:
 800c624:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c628:	4689      	mov	r9, r1
 800c62a:	2101      	movs	r1, #1
 800c62c:	ec57 6b10 	vmov	r6, r7, d0
 800c630:	4690      	mov	r8, r2
 800c632:	f7ff fccf 	bl	800bfd4 <_Balloc>
 800c636:	4604      	mov	r4, r0
 800c638:	b930      	cbnz	r0, 800c648 <__d2b+0x24>
 800c63a:	4602      	mov	r2, r0
 800c63c:	4b25      	ldr	r3, [pc, #148]	; (800c6d4 <__d2b+0xb0>)
 800c63e:	4826      	ldr	r0, [pc, #152]	; (800c6d8 <__d2b+0xb4>)
 800c640:	f240 310a 	movw	r1, #778	; 0x30a
 800c644:	f000 fb00 	bl	800cc48 <__assert_func>
 800c648:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c64c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c650:	bb35      	cbnz	r5, 800c6a0 <__d2b+0x7c>
 800c652:	2e00      	cmp	r6, #0
 800c654:	9301      	str	r3, [sp, #4]
 800c656:	d028      	beq.n	800c6aa <__d2b+0x86>
 800c658:	4668      	mov	r0, sp
 800c65a:	9600      	str	r6, [sp, #0]
 800c65c:	f7ff fd82 	bl	800c164 <__lo0bits>
 800c660:	9900      	ldr	r1, [sp, #0]
 800c662:	b300      	cbz	r0, 800c6a6 <__d2b+0x82>
 800c664:	9a01      	ldr	r2, [sp, #4]
 800c666:	f1c0 0320 	rsb	r3, r0, #32
 800c66a:	fa02 f303 	lsl.w	r3, r2, r3
 800c66e:	430b      	orrs	r3, r1
 800c670:	40c2      	lsrs	r2, r0
 800c672:	6163      	str	r3, [r4, #20]
 800c674:	9201      	str	r2, [sp, #4]
 800c676:	9b01      	ldr	r3, [sp, #4]
 800c678:	61a3      	str	r3, [r4, #24]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	bf14      	ite	ne
 800c67e:	2202      	movne	r2, #2
 800c680:	2201      	moveq	r2, #1
 800c682:	6122      	str	r2, [r4, #16]
 800c684:	b1d5      	cbz	r5, 800c6bc <__d2b+0x98>
 800c686:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c68a:	4405      	add	r5, r0
 800c68c:	f8c9 5000 	str.w	r5, [r9]
 800c690:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c694:	f8c8 0000 	str.w	r0, [r8]
 800c698:	4620      	mov	r0, r4
 800c69a:	b003      	add	sp, #12
 800c69c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c6a4:	e7d5      	b.n	800c652 <__d2b+0x2e>
 800c6a6:	6161      	str	r1, [r4, #20]
 800c6a8:	e7e5      	b.n	800c676 <__d2b+0x52>
 800c6aa:	a801      	add	r0, sp, #4
 800c6ac:	f7ff fd5a 	bl	800c164 <__lo0bits>
 800c6b0:	9b01      	ldr	r3, [sp, #4]
 800c6b2:	6163      	str	r3, [r4, #20]
 800c6b4:	2201      	movs	r2, #1
 800c6b6:	6122      	str	r2, [r4, #16]
 800c6b8:	3020      	adds	r0, #32
 800c6ba:	e7e3      	b.n	800c684 <__d2b+0x60>
 800c6bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c6c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c6c4:	f8c9 0000 	str.w	r0, [r9]
 800c6c8:	6918      	ldr	r0, [r3, #16]
 800c6ca:	f7ff fd2b 	bl	800c124 <__hi0bits>
 800c6ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c6d2:	e7df      	b.n	800c694 <__d2b+0x70>
 800c6d4:	0800d41b 	.word	0x0800d41b
 800c6d8:	0800d48c 	.word	0x0800d48c

0800c6dc <_calloc_r>:
 800c6dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6de:	fba1 2402 	umull	r2, r4, r1, r2
 800c6e2:	b94c      	cbnz	r4, 800c6f8 <_calloc_r+0x1c>
 800c6e4:	4611      	mov	r1, r2
 800c6e6:	9201      	str	r2, [sp, #4]
 800c6e8:	f000 f87a 	bl	800c7e0 <_malloc_r>
 800c6ec:	9a01      	ldr	r2, [sp, #4]
 800c6ee:	4605      	mov	r5, r0
 800c6f0:	b930      	cbnz	r0, 800c700 <_calloc_r+0x24>
 800c6f2:	4628      	mov	r0, r5
 800c6f4:	b003      	add	sp, #12
 800c6f6:	bd30      	pop	{r4, r5, pc}
 800c6f8:	220c      	movs	r2, #12
 800c6fa:	6002      	str	r2, [r0, #0]
 800c6fc:	2500      	movs	r5, #0
 800c6fe:	e7f8      	b.n	800c6f2 <_calloc_r+0x16>
 800c700:	4621      	mov	r1, r4
 800c702:	f7fd fea7 	bl	800a454 <memset>
 800c706:	e7f4      	b.n	800c6f2 <_calloc_r+0x16>

0800c708 <_free_r>:
 800c708:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c70a:	2900      	cmp	r1, #0
 800c70c:	d044      	beq.n	800c798 <_free_r+0x90>
 800c70e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c712:	9001      	str	r0, [sp, #4]
 800c714:	2b00      	cmp	r3, #0
 800c716:	f1a1 0404 	sub.w	r4, r1, #4
 800c71a:	bfb8      	it	lt
 800c71c:	18e4      	addlt	r4, r4, r3
 800c71e:	f000 fb19 	bl	800cd54 <__malloc_lock>
 800c722:	4a1e      	ldr	r2, [pc, #120]	; (800c79c <_free_r+0x94>)
 800c724:	9801      	ldr	r0, [sp, #4]
 800c726:	6813      	ldr	r3, [r2, #0]
 800c728:	b933      	cbnz	r3, 800c738 <_free_r+0x30>
 800c72a:	6063      	str	r3, [r4, #4]
 800c72c:	6014      	str	r4, [r2, #0]
 800c72e:	b003      	add	sp, #12
 800c730:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c734:	f000 bb14 	b.w	800cd60 <__malloc_unlock>
 800c738:	42a3      	cmp	r3, r4
 800c73a:	d908      	bls.n	800c74e <_free_r+0x46>
 800c73c:	6825      	ldr	r5, [r4, #0]
 800c73e:	1961      	adds	r1, r4, r5
 800c740:	428b      	cmp	r3, r1
 800c742:	bf01      	itttt	eq
 800c744:	6819      	ldreq	r1, [r3, #0]
 800c746:	685b      	ldreq	r3, [r3, #4]
 800c748:	1949      	addeq	r1, r1, r5
 800c74a:	6021      	streq	r1, [r4, #0]
 800c74c:	e7ed      	b.n	800c72a <_free_r+0x22>
 800c74e:	461a      	mov	r2, r3
 800c750:	685b      	ldr	r3, [r3, #4]
 800c752:	b10b      	cbz	r3, 800c758 <_free_r+0x50>
 800c754:	42a3      	cmp	r3, r4
 800c756:	d9fa      	bls.n	800c74e <_free_r+0x46>
 800c758:	6811      	ldr	r1, [r2, #0]
 800c75a:	1855      	adds	r5, r2, r1
 800c75c:	42a5      	cmp	r5, r4
 800c75e:	d10b      	bne.n	800c778 <_free_r+0x70>
 800c760:	6824      	ldr	r4, [r4, #0]
 800c762:	4421      	add	r1, r4
 800c764:	1854      	adds	r4, r2, r1
 800c766:	42a3      	cmp	r3, r4
 800c768:	6011      	str	r1, [r2, #0]
 800c76a:	d1e0      	bne.n	800c72e <_free_r+0x26>
 800c76c:	681c      	ldr	r4, [r3, #0]
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	6053      	str	r3, [r2, #4]
 800c772:	4421      	add	r1, r4
 800c774:	6011      	str	r1, [r2, #0]
 800c776:	e7da      	b.n	800c72e <_free_r+0x26>
 800c778:	d902      	bls.n	800c780 <_free_r+0x78>
 800c77a:	230c      	movs	r3, #12
 800c77c:	6003      	str	r3, [r0, #0]
 800c77e:	e7d6      	b.n	800c72e <_free_r+0x26>
 800c780:	6825      	ldr	r5, [r4, #0]
 800c782:	1961      	adds	r1, r4, r5
 800c784:	428b      	cmp	r3, r1
 800c786:	bf04      	itt	eq
 800c788:	6819      	ldreq	r1, [r3, #0]
 800c78a:	685b      	ldreq	r3, [r3, #4]
 800c78c:	6063      	str	r3, [r4, #4]
 800c78e:	bf04      	itt	eq
 800c790:	1949      	addeq	r1, r1, r5
 800c792:	6021      	streq	r1, [r4, #0]
 800c794:	6054      	str	r4, [r2, #4]
 800c796:	e7ca      	b.n	800c72e <_free_r+0x26>
 800c798:	b003      	add	sp, #12
 800c79a:	bd30      	pop	{r4, r5, pc}
 800c79c:	20000644 	.word	0x20000644

0800c7a0 <sbrk_aligned>:
 800c7a0:	b570      	push	{r4, r5, r6, lr}
 800c7a2:	4e0e      	ldr	r6, [pc, #56]	; (800c7dc <sbrk_aligned+0x3c>)
 800c7a4:	460c      	mov	r4, r1
 800c7a6:	6831      	ldr	r1, [r6, #0]
 800c7a8:	4605      	mov	r5, r0
 800c7aa:	b911      	cbnz	r1, 800c7b2 <sbrk_aligned+0x12>
 800c7ac:	f000 f9e6 	bl	800cb7c <_sbrk_r>
 800c7b0:	6030      	str	r0, [r6, #0]
 800c7b2:	4621      	mov	r1, r4
 800c7b4:	4628      	mov	r0, r5
 800c7b6:	f000 f9e1 	bl	800cb7c <_sbrk_r>
 800c7ba:	1c43      	adds	r3, r0, #1
 800c7bc:	d00a      	beq.n	800c7d4 <sbrk_aligned+0x34>
 800c7be:	1cc4      	adds	r4, r0, #3
 800c7c0:	f024 0403 	bic.w	r4, r4, #3
 800c7c4:	42a0      	cmp	r0, r4
 800c7c6:	d007      	beq.n	800c7d8 <sbrk_aligned+0x38>
 800c7c8:	1a21      	subs	r1, r4, r0
 800c7ca:	4628      	mov	r0, r5
 800c7cc:	f000 f9d6 	bl	800cb7c <_sbrk_r>
 800c7d0:	3001      	adds	r0, #1
 800c7d2:	d101      	bne.n	800c7d8 <sbrk_aligned+0x38>
 800c7d4:	f04f 34ff 	mov.w	r4, #4294967295
 800c7d8:	4620      	mov	r0, r4
 800c7da:	bd70      	pop	{r4, r5, r6, pc}
 800c7dc:	20000648 	.word	0x20000648

0800c7e0 <_malloc_r>:
 800c7e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7e4:	1ccd      	adds	r5, r1, #3
 800c7e6:	f025 0503 	bic.w	r5, r5, #3
 800c7ea:	3508      	adds	r5, #8
 800c7ec:	2d0c      	cmp	r5, #12
 800c7ee:	bf38      	it	cc
 800c7f0:	250c      	movcc	r5, #12
 800c7f2:	2d00      	cmp	r5, #0
 800c7f4:	4607      	mov	r7, r0
 800c7f6:	db01      	blt.n	800c7fc <_malloc_r+0x1c>
 800c7f8:	42a9      	cmp	r1, r5
 800c7fa:	d905      	bls.n	800c808 <_malloc_r+0x28>
 800c7fc:	230c      	movs	r3, #12
 800c7fe:	603b      	str	r3, [r7, #0]
 800c800:	2600      	movs	r6, #0
 800c802:	4630      	mov	r0, r6
 800c804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c808:	4e2e      	ldr	r6, [pc, #184]	; (800c8c4 <_malloc_r+0xe4>)
 800c80a:	f000 faa3 	bl	800cd54 <__malloc_lock>
 800c80e:	6833      	ldr	r3, [r6, #0]
 800c810:	461c      	mov	r4, r3
 800c812:	bb34      	cbnz	r4, 800c862 <_malloc_r+0x82>
 800c814:	4629      	mov	r1, r5
 800c816:	4638      	mov	r0, r7
 800c818:	f7ff ffc2 	bl	800c7a0 <sbrk_aligned>
 800c81c:	1c43      	adds	r3, r0, #1
 800c81e:	4604      	mov	r4, r0
 800c820:	d14d      	bne.n	800c8be <_malloc_r+0xde>
 800c822:	6834      	ldr	r4, [r6, #0]
 800c824:	4626      	mov	r6, r4
 800c826:	2e00      	cmp	r6, #0
 800c828:	d140      	bne.n	800c8ac <_malloc_r+0xcc>
 800c82a:	6823      	ldr	r3, [r4, #0]
 800c82c:	4631      	mov	r1, r6
 800c82e:	4638      	mov	r0, r7
 800c830:	eb04 0803 	add.w	r8, r4, r3
 800c834:	f000 f9a2 	bl	800cb7c <_sbrk_r>
 800c838:	4580      	cmp	r8, r0
 800c83a:	d13a      	bne.n	800c8b2 <_malloc_r+0xd2>
 800c83c:	6821      	ldr	r1, [r4, #0]
 800c83e:	3503      	adds	r5, #3
 800c840:	1a6d      	subs	r5, r5, r1
 800c842:	f025 0503 	bic.w	r5, r5, #3
 800c846:	3508      	adds	r5, #8
 800c848:	2d0c      	cmp	r5, #12
 800c84a:	bf38      	it	cc
 800c84c:	250c      	movcc	r5, #12
 800c84e:	4629      	mov	r1, r5
 800c850:	4638      	mov	r0, r7
 800c852:	f7ff ffa5 	bl	800c7a0 <sbrk_aligned>
 800c856:	3001      	adds	r0, #1
 800c858:	d02b      	beq.n	800c8b2 <_malloc_r+0xd2>
 800c85a:	6823      	ldr	r3, [r4, #0]
 800c85c:	442b      	add	r3, r5
 800c85e:	6023      	str	r3, [r4, #0]
 800c860:	e00e      	b.n	800c880 <_malloc_r+0xa0>
 800c862:	6822      	ldr	r2, [r4, #0]
 800c864:	1b52      	subs	r2, r2, r5
 800c866:	d41e      	bmi.n	800c8a6 <_malloc_r+0xc6>
 800c868:	2a0b      	cmp	r2, #11
 800c86a:	d916      	bls.n	800c89a <_malloc_r+0xba>
 800c86c:	1961      	adds	r1, r4, r5
 800c86e:	42a3      	cmp	r3, r4
 800c870:	6025      	str	r5, [r4, #0]
 800c872:	bf18      	it	ne
 800c874:	6059      	strne	r1, [r3, #4]
 800c876:	6863      	ldr	r3, [r4, #4]
 800c878:	bf08      	it	eq
 800c87a:	6031      	streq	r1, [r6, #0]
 800c87c:	5162      	str	r2, [r4, r5]
 800c87e:	604b      	str	r3, [r1, #4]
 800c880:	4638      	mov	r0, r7
 800c882:	f104 060b 	add.w	r6, r4, #11
 800c886:	f000 fa6b 	bl	800cd60 <__malloc_unlock>
 800c88a:	f026 0607 	bic.w	r6, r6, #7
 800c88e:	1d23      	adds	r3, r4, #4
 800c890:	1af2      	subs	r2, r6, r3
 800c892:	d0b6      	beq.n	800c802 <_malloc_r+0x22>
 800c894:	1b9b      	subs	r3, r3, r6
 800c896:	50a3      	str	r3, [r4, r2]
 800c898:	e7b3      	b.n	800c802 <_malloc_r+0x22>
 800c89a:	6862      	ldr	r2, [r4, #4]
 800c89c:	42a3      	cmp	r3, r4
 800c89e:	bf0c      	ite	eq
 800c8a0:	6032      	streq	r2, [r6, #0]
 800c8a2:	605a      	strne	r2, [r3, #4]
 800c8a4:	e7ec      	b.n	800c880 <_malloc_r+0xa0>
 800c8a6:	4623      	mov	r3, r4
 800c8a8:	6864      	ldr	r4, [r4, #4]
 800c8aa:	e7b2      	b.n	800c812 <_malloc_r+0x32>
 800c8ac:	4634      	mov	r4, r6
 800c8ae:	6876      	ldr	r6, [r6, #4]
 800c8b0:	e7b9      	b.n	800c826 <_malloc_r+0x46>
 800c8b2:	230c      	movs	r3, #12
 800c8b4:	603b      	str	r3, [r7, #0]
 800c8b6:	4638      	mov	r0, r7
 800c8b8:	f000 fa52 	bl	800cd60 <__malloc_unlock>
 800c8bc:	e7a1      	b.n	800c802 <_malloc_r+0x22>
 800c8be:	6025      	str	r5, [r4, #0]
 800c8c0:	e7de      	b.n	800c880 <_malloc_r+0xa0>
 800c8c2:	bf00      	nop
 800c8c4:	20000644 	.word	0x20000644

0800c8c8 <__sfputc_r>:
 800c8c8:	6893      	ldr	r3, [r2, #8]
 800c8ca:	3b01      	subs	r3, #1
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	b410      	push	{r4}
 800c8d0:	6093      	str	r3, [r2, #8]
 800c8d2:	da08      	bge.n	800c8e6 <__sfputc_r+0x1e>
 800c8d4:	6994      	ldr	r4, [r2, #24]
 800c8d6:	42a3      	cmp	r3, r4
 800c8d8:	db01      	blt.n	800c8de <__sfputc_r+0x16>
 800c8da:	290a      	cmp	r1, #10
 800c8dc:	d103      	bne.n	800c8e6 <__sfputc_r+0x1e>
 800c8de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8e2:	f7fe ba91 	b.w	800ae08 <__swbuf_r>
 800c8e6:	6813      	ldr	r3, [r2, #0]
 800c8e8:	1c58      	adds	r0, r3, #1
 800c8ea:	6010      	str	r0, [r2, #0]
 800c8ec:	7019      	strb	r1, [r3, #0]
 800c8ee:	4608      	mov	r0, r1
 800c8f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8f4:	4770      	bx	lr

0800c8f6 <__sfputs_r>:
 800c8f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8f8:	4606      	mov	r6, r0
 800c8fa:	460f      	mov	r7, r1
 800c8fc:	4614      	mov	r4, r2
 800c8fe:	18d5      	adds	r5, r2, r3
 800c900:	42ac      	cmp	r4, r5
 800c902:	d101      	bne.n	800c908 <__sfputs_r+0x12>
 800c904:	2000      	movs	r0, #0
 800c906:	e007      	b.n	800c918 <__sfputs_r+0x22>
 800c908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c90c:	463a      	mov	r2, r7
 800c90e:	4630      	mov	r0, r6
 800c910:	f7ff ffda 	bl	800c8c8 <__sfputc_r>
 800c914:	1c43      	adds	r3, r0, #1
 800c916:	d1f3      	bne.n	800c900 <__sfputs_r+0xa>
 800c918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c91c <_vfiprintf_r>:
 800c91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c920:	460d      	mov	r5, r1
 800c922:	b09d      	sub	sp, #116	; 0x74
 800c924:	4614      	mov	r4, r2
 800c926:	4698      	mov	r8, r3
 800c928:	4606      	mov	r6, r0
 800c92a:	b118      	cbz	r0, 800c934 <_vfiprintf_r+0x18>
 800c92c:	6983      	ldr	r3, [r0, #24]
 800c92e:	b90b      	cbnz	r3, 800c934 <_vfiprintf_r+0x18>
 800c930:	f7ff fa3e 	bl	800bdb0 <__sinit>
 800c934:	4b89      	ldr	r3, [pc, #548]	; (800cb5c <_vfiprintf_r+0x240>)
 800c936:	429d      	cmp	r5, r3
 800c938:	d11b      	bne.n	800c972 <_vfiprintf_r+0x56>
 800c93a:	6875      	ldr	r5, [r6, #4]
 800c93c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c93e:	07d9      	lsls	r1, r3, #31
 800c940:	d405      	bmi.n	800c94e <_vfiprintf_r+0x32>
 800c942:	89ab      	ldrh	r3, [r5, #12]
 800c944:	059a      	lsls	r2, r3, #22
 800c946:	d402      	bmi.n	800c94e <_vfiprintf_r+0x32>
 800c948:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c94a:	f7ff fad4 	bl	800bef6 <__retarget_lock_acquire_recursive>
 800c94e:	89ab      	ldrh	r3, [r5, #12]
 800c950:	071b      	lsls	r3, r3, #28
 800c952:	d501      	bpl.n	800c958 <_vfiprintf_r+0x3c>
 800c954:	692b      	ldr	r3, [r5, #16]
 800c956:	b9eb      	cbnz	r3, 800c994 <_vfiprintf_r+0x78>
 800c958:	4629      	mov	r1, r5
 800c95a:	4630      	mov	r0, r6
 800c95c:	f7fe faa6 	bl	800aeac <__swsetup_r>
 800c960:	b1c0      	cbz	r0, 800c994 <_vfiprintf_r+0x78>
 800c962:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c964:	07dc      	lsls	r4, r3, #31
 800c966:	d50e      	bpl.n	800c986 <_vfiprintf_r+0x6a>
 800c968:	f04f 30ff 	mov.w	r0, #4294967295
 800c96c:	b01d      	add	sp, #116	; 0x74
 800c96e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c972:	4b7b      	ldr	r3, [pc, #492]	; (800cb60 <_vfiprintf_r+0x244>)
 800c974:	429d      	cmp	r5, r3
 800c976:	d101      	bne.n	800c97c <_vfiprintf_r+0x60>
 800c978:	68b5      	ldr	r5, [r6, #8]
 800c97a:	e7df      	b.n	800c93c <_vfiprintf_r+0x20>
 800c97c:	4b79      	ldr	r3, [pc, #484]	; (800cb64 <_vfiprintf_r+0x248>)
 800c97e:	429d      	cmp	r5, r3
 800c980:	bf08      	it	eq
 800c982:	68f5      	ldreq	r5, [r6, #12]
 800c984:	e7da      	b.n	800c93c <_vfiprintf_r+0x20>
 800c986:	89ab      	ldrh	r3, [r5, #12]
 800c988:	0598      	lsls	r0, r3, #22
 800c98a:	d4ed      	bmi.n	800c968 <_vfiprintf_r+0x4c>
 800c98c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c98e:	f7ff fab3 	bl	800bef8 <__retarget_lock_release_recursive>
 800c992:	e7e9      	b.n	800c968 <_vfiprintf_r+0x4c>
 800c994:	2300      	movs	r3, #0
 800c996:	9309      	str	r3, [sp, #36]	; 0x24
 800c998:	2320      	movs	r3, #32
 800c99a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c99e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9a2:	2330      	movs	r3, #48	; 0x30
 800c9a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cb68 <_vfiprintf_r+0x24c>
 800c9a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c9ac:	f04f 0901 	mov.w	r9, #1
 800c9b0:	4623      	mov	r3, r4
 800c9b2:	469a      	mov	sl, r3
 800c9b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9b8:	b10a      	cbz	r2, 800c9be <_vfiprintf_r+0xa2>
 800c9ba:	2a25      	cmp	r2, #37	; 0x25
 800c9bc:	d1f9      	bne.n	800c9b2 <_vfiprintf_r+0x96>
 800c9be:	ebba 0b04 	subs.w	fp, sl, r4
 800c9c2:	d00b      	beq.n	800c9dc <_vfiprintf_r+0xc0>
 800c9c4:	465b      	mov	r3, fp
 800c9c6:	4622      	mov	r2, r4
 800c9c8:	4629      	mov	r1, r5
 800c9ca:	4630      	mov	r0, r6
 800c9cc:	f7ff ff93 	bl	800c8f6 <__sfputs_r>
 800c9d0:	3001      	adds	r0, #1
 800c9d2:	f000 80aa 	beq.w	800cb2a <_vfiprintf_r+0x20e>
 800c9d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9d8:	445a      	add	r2, fp
 800c9da:	9209      	str	r2, [sp, #36]	; 0x24
 800c9dc:	f89a 3000 	ldrb.w	r3, [sl]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	f000 80a2 	beq.w	800cb2a <_vfiprintf_r+0x20e>
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	f04f 32ff 	mov.w	r2, #4294967295
 800c9ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9f0:	f10a 0a01 	add.w	sl, sl, #1
 800c9f4:	9304      	str	r3, [sp, #16]
 800c9f6:	9307      	str	r3, [sp, #28]
 800c9f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c9fc:	931a      	str	r3, [sp, #104]	; 0x68
 800c9fe:	4654      	mov	r4, sl
 800ca00:	2205      	movs	r2, #5
 800ca02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca06:	4858      	ldr	r0, [pc, #352]	; (800cb68 <_vfiprintf_r+0x24c>)
 800ca08:	f7f4 f8fa 	bl	8000c00 <memchr>
 800ca0c:	9a04      	ldr	r2, [sp, #16]
 800ca0e:	b9d8      	cbnz	r0, 800ca48 <_vfiprintf_r+0x12c>
 800ca10:	06d1      	lsls	r1, r2, #27
 800ca12:	bf44      	itt	mi
 800ca14:	2320      	movmi	r3, #32
 800ca16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca1a:	0713      	lsls	r3, r2, #28
 800ca1c:	bf44      	itt	mi
 800ca1e:	232b      	movmi	r3, #43	; 0x2b
 800ca20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca24:	f89a 3000 	ldrb.w	r3, [sl]
 800ca28:	2b2a      	cmp	r3, #42	; 0x2a
 800ca2a:	d015      	beq.n	800ca58 <_vfiprintf_r+0x13c>
 800ca2c:	9a07      	ldr	r2, [sp, #28]
 800ca2e:	4654      	mov	r4, sl
 800ca30:	2000      	movs	r0, #0
 800ca32:	f04f 0c0a 	mov.w	ip, #10
 800ca36:	4621      	mov	r1, r4
 800ca38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca3c:	3b30      	subs	r3, #48	; 0x30
 800ca3e:	2b09      	cmp	r3, #9
 800ca40:	d94e      	bls.n	800cae0 <_vfiprintf_r+0x1c4>
 800ca42:	b1b0      	cbz	r0, 800ca72 <_vfiprintf_r+0x156>
 800ca44:	9207      	str	r2, [sp, #28]
 800ca46:	e014      	b.n	800ca72 <_vfiprintf_r+0x156>
 800ca48:	eba0 0308 	sub.w	r3, r0, r8
 800ca4c:	fa09 f303 	lsl.w	r3, r9, r3
 800ca50:	4313      	orrs	r3, r2
 800ca52:	9304      	str	r3, [sp, #16]
 800ca54:	46a2      	mov	sl, r4
 800ca56:	e7d2      	b.n	800c9fe <_vfiprintf_r+0xe2>
 800ca58:	9b03      	ldr	r3, [sp, #12]
 800ca5a:	1d19      	adds	r1, r3, #4
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	9103      	str	r1, [sp, #12]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	bfbb      	ittet	lt
 800ca64:	425b      	neglt	r3, r3
 800ca66:	f042 0202 	orrlt.w	r2, r2, #2
 800ca6a:	9307      	strge	r3, [sp, #28]
 800ca6c:	9307      	strlt	r3, [sp, #28]
 800ca6e:	bfb8      	it	lt
 800ca70:	9204      	strlt	r2, [sp, #16]
 800ca72:	7823      	ldrb	r3, [r4, #0]
 800ca74:	2b2e      	cmp	r3, #46	; 0x2e
 800ca76:	d10c      	bne.n	800ca92 <_vfiprintf_r+0x176>
 800ca78:	7863      	ldrb	r3, [r4, #1]
 800ca7a:	2b2a      	cmp	r3, #42	; 0x2a
 800ca7c:	d135      	bne.n	800caea <_vfiprintf_r+0x1ce>
 800ca7e:	9b03      	ldr	r3, [sp, #12]
 800ca80:	1d1a      	adds	r2, r3, #4
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	9203      	str	r2, [sp, #12]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	bfb8      	it	lt
 800ca8a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca8e:	3402      	adds	r4, #2
 800ca90:	9305      	str	r3, [sp, #20]
 800ca92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cb78 <_vfiprintf_r+0x25c>
 800ca96:	7821      	ldrb	r1, [r4, #0]
 800ca98:	2203      	movs	r2, #3
 800ca9a:	4650      	mov	r0, sl
 800ca9c:	f7f4 f8b0 	bl	8000c00 <memchr>
 800caa0:	b140      	cbz	r0, 800cab4 <_vfiprintf_r+0x198>
 800caa2:	2340      	movs	r3, #64	; 0x40
 800caa4:	eba0 000a 	sub.w	r0, r0, sl
 800caa8:	fa03 f000 	lsl.w	r0, r3, r0
 800caac:	9b04      	ldr	r3, [sp, #16]
 800caae:	4303      	orrs	r3, r0
 800cab0:	3401      	adds	r4, #1
 800cab2:	9304      	str	r3, [sp, #16]
 800cab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cab8:	482c      	ldr	r0, [pc, #176]	; (800cb6c <_vfiprintf_r+0x250>)
 800caba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cabe:	2206      	movs	r2, #6
 800cac0:	f7f4 f89e 	bl	8000c00 <memchr>
 800cac4:	2800      	cmp	r0, #0
 800cac6:	d03f      	beq.n	800cb48 <_vfiprintf_r+0x22c>
 800cac8:	4b29      	ldr	r3, [pc, #164]	; (800cb70 <_vfiprintf_r+0x254>)
 800caca:	bb1b      	cbnz	r3, 800cb14 <_vfiprintf_r+0x1f8>
 800cacc:	9b03      	ldr	r3, [sp, #12]
 800cace:	3307      	adds	r3, #7
 800cad0:	f023 0307 	bic.w	r3, r3, #7
 800cad4:	3308      	adds	r3, #8
 800cad6:	9303      	str	r3, [sp, #12]
 800cad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cada:	443b      	add	r3, r7
 800cadc:	9309      	str	r3, [sp, #36]	; 0x24
 800cade:	e767      	b.n	800c9b0 <_vfiprintf_r+0x94>
 800cae0:	fb0c 3202 	mla	r2, ip, r2, r3
 800cae4:	460c      	mov	r4, r1
 800cae6:	2001      	movs	r0, #1
 800cae8:	e7a5      	b.n	800ca36 <_vfiprintf_r+0x11a>
 800caea:	2300      	movs	r3, #0
 800caec:	3401      	adds	r4, #1
 800caee:	9305      	str	r3, [sp, #20]
 800caf0:	4619      	mov	r1, r3
 800caf2:	f04f 0c0a 	mov.w	ip, #10
 800caf6:	4620      	mov	r0, r4
 800caf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cafc:	3a30      	subs	r2, #48	; 0x30
 800cafe:	2a09      	cmp	r2, #9
 800cb00:	d903      	bls.n	800cb0a <_vfiprintf_r+0x1ee>
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d0c5      	beq.n	800ca92 <_vfiprintf_r+0x176>
 800cb06:	9105      	str	r1, [sp, #20]
 800cb08:	e7c3      	b.n	800ca92 <_vfiprintf_r+0x176>
 800cb0a:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb0e:	4604      	mov	r4, r0
 800cb10:	2301      	movs	r3, #1
 800cb12:	e7f0      	b.n	800caf6 <_vfiprintf_r+0x1da>
 800cb14:	ab03      	add	r3, sp, #12
 800cb16:	9300      	str	r3, [sp, #0]
 800cb18:	462a      	mov	r2, r5
 800cb1a:	4b16      	ldr	r3, [pc, #88]	; (800cb74 <_vfiprintf_r+0x258>)
 800cb1c:	a904      	add	r1, sp, #16
 800cb1e:	4630      	mov	r0, r6
 800cb20:	f7fd fd32 	bl	800a588 <_printf_float>
 800cb24:	4607      	mov	r7, r0
 800cb26:	1c78      	adds	r0, r7, #1
 800cb28:	d1d6      	bne.n	800cad8 <_vfiprintf_r+0x1bc>
 800cb2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb2c:	07d9      	lsls	r1, r3, #31
 800cb2e:	d405      	bmi.n	800cb3c <_vfiprintf_r+0x220>
 800cb30:	89ab      	ldrh	r3, [r5, #12]
 800cb32:	059a      	lsls	r2, r3, #22
 800cb34:	d402      	bmi.n	800cb3c <_vfiprintf_r+0x220>
 800cb36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb38:	f7ff f9de 	bl	800bef8 <__retarget_lock_release_recursive>
 800cb3c:	89ab      	ldrh	r3, [r5, #12]
 800cb3e:	065b      	lsls	r3, r3, #25
 800cb40:	f53f af12 	bmi.w	800c968 <_vfiprintf_r+0x4c>
 800cb44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb46:	e711      	b.n	800c96c <_vfiprintf_r+0x50>
 800cb48:	ab03      	add	r3, sp, #12
 800cb4a:	9300      	str	r3, [sp, #0]
 800cb4c:	462a      	mov	r2, r5
 800cb4e:	4b09      	ldr	r3, [pc, #36]	; (800cb74 <_vfiprintf_r+0x258>)
 800cb50:	a904      	add	r1, sp, #16
 800cb52:	4630      	mov	r0, r6
 800cb54:	f7fd ffa4 	bl	800aaa0 <_printf_i>
 800cb58:	e7e4      	b.n	800cb24 <_vfiprintf_r+0x208>
 800cb5a:	bf00      	nop
 800cb5c:	0800d44c 	.word	0x0800d44c
 800cb60:	0800d46c 	.word	0x0800d46c
 800cb64:	0800d42c 	.word	0x0800d42c
 800cb68:	0800d5e4 	.word	0x0800d5e4
 800cb6c:	0800d5ee 	.word	0x0800d5ee
 800cb70:	0800a589 	.word	0x0800a589
 800cb74:	0800c8f7 	.word	0x0800c8f7
 800cb78:	0800d5ea 	.word	0x0800d5ea

0800cb7c <_sbrk_r>:
 800cb7c:	b538      	push	{r3, r4, r5, lr}
 800cb7e:	4d06      	ldr	r5, [pc, #24]	; (800cb98 <_sbrk_r+0x1c>)
 800cb80:	2300      	movs	r3, #0
 800cb82:	4604      	mov	r4, r0
 800cb84:	4608      	mov	r0, r1
 800cb86:	602b      	str	r3, [r5, #0]
 800cb88:	f7f5 fd50 	bl	800262c <_sbrk>
 800cb8c:	1c43      	adds	r3, r0, #1
 800cb8e:	d102      	bne.n	800cb96 <_sbrk_r+0x1a>
 800cb90:	682b      	ldr	r3, [r5, #0]
 800cb92:	b103      	cbz	r3, 800cb96 <_sbrk_r+0x1a>
 800cb94:	6023      	str	r3, [r4, #0]
 800cb96:	bd38      	pop	{r3, r4, r5, pc}
 800cb98:	2000064c 	.word	0x2000064c

0800cb9c <__sread>:
 800cb9c:	b510      	push	{r4, lr}
 800cb9e:	460c      	mov	r4, r1
 800cba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cba4:	f000 f8e2 	bl	800cd6c <_read_r>
 800cba8:	2800      	cmp	r0, #0
 800cbaa:	bfab      	itete	ge
 800cbac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cbae:	89a3      	ldrhlt	r3, [r4, #12]
 800cbb0:	181b      	addge	r3, r3, r0
 800cbb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cbb6:	bfac      	ite	ge
 800cbb8:	6563      	strge	r3, [r4, #84]	; 0x54
 800cbba:	81a3      	strhlt	r3, [r4, #12]
 800cbbc:	bd10      	pop	{r4, pc}

0800cbbe <__swrite>:
 800cbbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbc2:	461f      	mov	r7, r3
 800cbc4:	898b      	ldrh	r3, [r1, #12]
 800cbc6:	05db      	lsls	r3, r3, #23
 800cbc8:	4605      	mov	r5, r0
 800cbca:	460c      	mov	r4, r1
 800cbcc:	4616      	mov	r6, r2
 800cbce:	d505      	bpl.n	800cbdc <__swrite+0x1e>
 800cbd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbd4:	2302      	movs	r3, #2
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	f000 f898 	bl	800cd0c <_lseek_r>
 800cbdc:	89a3      	ldrh	r3, [r4, #12]
 800cbde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbe2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cbe6:	81a3      	strh	r3, [r4, #12]
 800cbe8:	4632      	mov	r2, r6
 800cbea:	463b      	mov	r3, r7
 800cbec:	4628      	mov	r0, r5
 800cbee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbf2:	f000 b817 	b.w	800cc24 <_write_r>

0800cbf6 <__sseek>:
 800cbf6:	b510      	push	{r4, lr}
 800cbf8:	460c      	mov	r4, r1
 800cbfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbfe:	f000 f885 	bl	800cd0c <_lseek_r>
 800cc02:	1c43      	adds	r3, r0, #1
 800cc04:	89a3      	ldrh	r3, [r4, #12]
 800cc06:	bf15      	itete	ne
 800cc08:	6560      	strne	r0, [r4, #84]	; 0x54
 800cc0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cc0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cc12:	81a3      	strheq	r3, [r4, #12]
 800cc14:	bf18      	it	ne
 800cc16:	81a3      	strhne	r3, [r4, #12]
 800cc18:	bd10      	pop	{r4, pc}

0800cc1a <__sclose>:
 800cc1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc1e:	f000 b831 	b.w	800cc84 <_close_r>
	...

0800cc24 <_write_r>:
 800cc24:	b538      	push	{r3, r4, r5, lr}
 800cc26:	4d07      	ldr	r5, [pc, #28]	; (800cc44 <_write_r+0x20>)
 800cc28:	4604      	mov	r4, r0
 800cc2a:	4608      	mov	r0, r1
 800cc2c:	4611      	mov	r1, r2
 800cc2e:	2200      	movs	r2, #0
 800cc30:	602a      	str	r2, [r5, #0]
 800cc32:	461a      	mov	r2, r3
 800cc34:	f7f5 fca9 	bl	800258a <_write>
 800cc38:	1c43      	adds	r3, r0, #1
 800cc3a:	d102      	bne.n	800cc42 <_write_r+0x1e>
 800cc3c:	682b      	ldr	r3, [r5, #0]
 800cc3e:	b103      	cbz	r3, 800cc42 <_write_r+0x1e>
 800cc40:	6023      	str	r3, [r4, #0]
 800cc42:	bd38      	pop	{r3, r4, r5, pc}
 800cc44:	2000064c 	.word	0x2000064c

0800cc48 <__assert_func>:
 800cc48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc4a:	4614      	mov	r4, r2
 800cc4c:	461a      	mov	r2, r3
 800cc4e:	4b09      	ldr	r3, [pc, #36]	; (800cc74 <__assert_func+0x2c>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	4605      	mov	r5, r0
 800cc54:	68d8      	ldr	r0, [r3, #12]
 800cc56:	b14c      	cbz	r4, 800cc6c <__assert_func+0x24>
 800cc58:	4b07      	ldr	r3, [pc, #28]	; (800cc78 <__assert_func+0x30>)
 800cc5a:	9100      	str	r1, [sp, #0]
 800cc5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cc60:	4906      	ldr	r1, [pc, #24]	; (800cc7c <__assert_func+0x34>)
 800cc62:	462b      	mov	r3, r5
 800cc64:	f000 f81e 	bl	800cca4 <fiprintf>
 800cc68:	f000 f89f 	bl	800cdaa <abort>
 800cc6c:	4b04      	ldr	r3, [pc, #16]	; (800cc80 <__assert_func+0x38>)
 800cc6e:	461c      	mov	r4, r3
 800cc70:	e7f3      	b.n	800cc5a <__assert_func+0x12>
 800cc72:	bf00      	nop
 800cc74:	2000003c 	.word	0x2000003c
 800cc78:	0800d5f5 	.word	0x0800d5f5
 800cc7c:	0800d602 	.word	0x0800d602
 800cc80:	0800d630 	.word	0x0800d630

0800cc84 <_close_r>:
 800cc84:	b538      	push	{r3, r4, r5, lr}
 800cc86:	4d06      	ldr	r5, [pc, #24]	; (800cca0 <_close_r+0x1c>)
 800cc88:	2300      	movs	r3, #0
 800cc8a:	4604      	mov	r4, r0
 800cc8c:	4608      	mov	r0, r1
 800cc8e:	602b      	str	r3, [r5, #0]
 800cc90:	f7f5 fc97 	bl	80025c2 <_close>
 800cc94:	1c43      	adds	r3, r0, #1
 800cc96:	d102      	bne.n	800cc9e <_close_r+0x1a>
 800cc98:	682b      	ldr	r3, [r5, #0]
 800cc9a:	b103      	cbz	r3, 800cc9e <_close_r+0x1a>
 800cc9c:	6023      	str	r3, [r4, #0]
 800cc9e:	bd38      	pop	{r3, r4, r5, pc}
 800cca0:	2000064c 	.word	0x2000064c

0800cca4 <fiprintf>:
 800cca4:	b40e      	push	{r1, r2, r3}
 800cca6:	b503      	push	{r0, r1, lr}
 800cca8:	4601      	mov	r1, r0
 800ccaa:	ab03      	add	r3, sp, #12
 800ccac:	4805      	ldr	r0, [pc, #20]	; (800ccc4 <fiprintf+0x20>)
 800ccae:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccb2:	6800      	ldr	r0, [r0, #0]
 800ccb4:	9301      	str	r3, [sp, #4]
 800ccb6:	f7ff fe31 	bl	800c91c <_vfiprintf_r>
 800ccba:	b002      	add	sp, #8
 800ccbc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ccc0:	b003      	add	sp, #12
 800ccc2:	4770      	bx	lr
 800ccc4:	2000003c 	.word	0x2000003c

0800ccc8 <_fstat_r>:
 800ccc8:	b538      	push	{r3, r4, r5, lr}
 800ccca:	4d07      	ldr	r5, [pc, #28]	; (800cce8 <_fstat_r+0x20>)
 800cccc:	2300      	movs	r3, #0
 800ccce:	4604      	mov	r4, r0
 800ccd0:	4608      	mov	r0, r1
 800ccd2:	4611      	mov	r1, r2
 800ccd4:	602b      	str	r3, [r5, #0]
 800ccd6:	f7f5 fc80 	bl	80025da <_fstat>
 800ccda:	1c43      	adds	r3, r0, #1
 800ccdc:	d102      	bne.n	800cce4 <_fstat_r+0x1c>
 800ccde:	682b      	ldr	r3, [r5, #0]
 800cce0:	b103      	cbz	r3, 800cce4 <_fstat_r+0x1c>
 800cce2:	6023      	str	r3, [r4, #0]
 800cce4:	bd38      	pop	{r3, r4, r5, pc}
 800cce6:	bf00      	nop
 800cce8:	2000064c 	.word	0x2000064c

0800ccec <_isatty_r>:
 800ccec:	b538      	push	{r3, r4, r5, lr}
 800ccee:	4d06      	ldr	r5, [pc, #24]	; (800cd08 <_isatty_r+0x1c>)
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	4604      	mov	r4, r0
 800ccf4:	4608      	mov	r0, r1
 800ccf6:	602b      	str	r3, [r5, #0]
 800ccf8:	f7f5 fc7f 	bl	80025fa <_isatty>
 800ccfc:	1c43      	adds	r3, r0, #1
 800ccfe:	d102      	bne.n	800cd06 <_isatty_r+0x1a>
 800cd00:	682b      	ldr	r3, [r5, #0]
 800cd02:	b103      	cbz	r3, 800cd06 <_isatty_r+0x1a>
 800cd04:	6023      	str	r3, [r4, #0]
 800cd06:	bd38      	pop	{r3, r4, r5, pc}
 800cd08:	2000064c 	.word	0x2000064c

0800cd0c <_lseek_r>:
 800cd0c:	b538      	push	{r3, r4, r5, lr}
 800cd0e:	4d07      	ldr	r5, [pc, #28]	; (800cd2c <_lseek_r+0x20>)
 800cd10:	4604      	mov	r4, r0
 800cd12:	4608      	mov	r0, r1
 800cd14:	4611      	mov	r1, r2
 800cd16:	2200      	movs	r2, #0
 800cd18:	602a      	str	r2, [r5, #0]
 800cd1a:	461a      	mov	r2, r3
 800cd1c:	f7f5 fc78 	bl	8002610 <_lseek>
 800cd20:	1c43      	adds	r3, r0, #1
 800cd22:	d102      	bne.n	800cd2a <_lseek_r+0x1e>
 800cd24:	682b      	ldr	r3, [r5, #0]
 800cd26:	b103      	cbz	r3, 800cd2a <_lseek_r+0x1e>
 800cd28:	6023      	str	r3, [r4, #0]
 800cd2a:	bd38      	pop	{r3, r4, r5, pc}
 800cd2c:	2000064c 	.word	0x2000064c

0800cd30 <__ascii_mbtowc>:
 800cd30:	b082      	sub	sp, #8
 800cd32:	b901      	cbnz	r1, 800cd36 <__ascii_mbtowc+0x6>
 800cd34:	a901      	add	r1, sp, #4
 800cd36:	b142      	cbz	r2, 800cd4a <__ascii_mbtowc+0x1a>
 800cd38:	b14b      	cbz	r3, 800cd4e <__ascii_mbtowc+0x1e>
 800cd3a:	7813      	ldrb	r3, [r2, #0]
 800cd3c:	600b      	str	r3, [r1, #0]
 800cd3e:	7812      	ldrb	r2, [r2, #0]
 800cd40:	1e10      	subs	r0, r2, #0
 800cd42:	bf18      	it	ne
 800cd44:	2001      	movne	r0, #1
 800cd46:	b002      	add	sp, #8
 800cd48:	4770      	bx	lr
 800cd4a:	4610      	mov	r0, r2
 800cd4c:	e7fb      	b.n	800cd46 <__ascii_mbtowc+0x16>
 800cd4e:	f06f 0001 	mvn.w	r0, #1
 800cd52:	e7f8      	b.n	800cd46 <__ascii_mbtowc+0x16>

0800cd54 <__malloc_lock>:
 800cd54:	4801      	ldr	r0, [pc, #4]	; (800cd5c <__malloc_lock+0x8>)
 800cd56:	f7ff b8ce 	b.w	800bef6 <__retarget_lock_acquire_recursive>
 800cd5a:	bf00      	nop
 800cd5c:	20000640 	.word	0x20000640

0800cd60 <__malloc_unlock>:
 800cd60:	4801      	ldr	r0, [pc, #4]	; (800cd68 <__malloc_unlock+0x8>)
 800cd62:	f7ff b8c9 	b.w	800bef8 <__retarget_lock_release_recursive>
 800cd66:	bf00      	nop
 800cd68:	20000640 	.word	0x20000640

0800cd6c <_read_r>:
 800cd6c:	b538      	push	{r3, r4, r5, lr}
 800cd6e:	4d07      	ldr	r5, [pc, #28]	; (800cd8c <_read_r+0x20>)
 800cd70:	4604      	mov	r4, r0
 800cd72:	4608      	mov	r0, r1
 800cd74:	4611      	mov	r1, r2
 800cd76:	2200      	movs	r2, #0
 800cd78:	602a      	str	r2, [r5, #0]
 800cd7a:	461a      	mov	r2, r3
 800cd7c:	f7f5 fbe8 	bl	8002550 <_read>
 800cd80:	1c43      	adds	r3, r0, #1
 800cd82:	d102      	bne.n	800cd8a <_read_r+0x1e>
 800cd84:	682b      	ldr	r3, [r5, #0]
 800cd86:	b103      	cbz	r3, 800cd8a <_read_r+0x1e>
 800cd88:	6023      	str	r3, [r4, #0]
 800cd8a:	bd38      	pop	{r3, r4, r5, pc}
 800cd8c:	2000064c 	.word	0x2000064c

0800cd90 <__ascii_wctomb>:
 800cd90:	b149      	cbz	r1, 800cda6 <__ascii_wctomb+0x16>
 800cd92:	2aff      	cmp	r2, #255	; 0xff
 800cd94:	bf85      	ittet	hi
 800cd96:	238a      	movhi	r3, #138	; 0x8a
 800cd98:	6003      	strhi	r3, [r0, #0]
 800cd9a:	700a      	strbls	r2, [r1, #0]
 800cd9c:	f04f 30ff 	movhi.w	r0, #4294967295
 800cda0:	bf98      	it	ls
 800cda2:	2001      	movls	r0, #1
 800cda4:	4770      	bx	lr
 800cda6:	4608      	mov	r0, r1
 800cda8:	4770      	bx	lr

0800cdaa <abort>:
 800cdaa:	b508      	push	{r3, lr}
 800cdac:	2006      	movs	r0, #6
 800cdae:	f000 f82b 	bl	800ce08 <raise>
 800cdb2:	2001      	movs	r0, #1
 800cdb4:	f7f5 fbc2 	bl	800253c <_exit>

0800cdb8 <_raise_r>:
 800cdb8:	291f      	cmp	r1, #31
 800cdba:	b538      	push	{r3, r4, r5, lr}
 800cdbc:	4604      	mov	r4, r0
 800cdbe:	460d      	mov	r5, r1
 800cdc0:	d904      	bls.n	800cdcc <_raise_r+0x14>
 800cdc2:	2316      	movs	r3, #22
 800cdc4:	6003      	str	r3, [r0, #0]
 800cdc6:	f04f 30ff 	mov.w	r0, #4294967295
 800cdca:	bd38      	pop	{r3, r4, r5, pc}
 800cdcc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cdce:	b112      	cbz	r2, 800cdd6 <_raise_r+0x1e>
 800cdd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cdd4:	b94b      	cbnz	r3, 800cdea <_raise_r+0x32>
 800cdd6:	4620      	mov	r0, r4
 800cdd8:	f000 f830 	bl	800ce3c <_getpid_r>
 800cddc:	462a      	mov	r2, r5
 800cdde:	4601      	mov	r1, r0
 800cde0:	4620      	mov	r0, r4
 800cde2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cde6:	f000 b817 	b.w	800ce18 <_kill_r>
 800cdea:	2b01      	cmp	r3, #1
 800cdec:	d00a      	beq.n	800ce04 <_raise_r+0x4c>
 800cdee:	1c59      	adds	r1, r3, #1
 800cdf0:	d103      	bne.n	800cdfa <_raise_r+0x42>
 800cdf2:	2316      	movs	r3, #22
 800cdf4:	6003      	str	r3, [r0, #0]
 800cdf6:	2001      	movs	r0, #1
 800cdf8:	e7e7      	b.n	800cdca <_raise_r+0x12>
 800cdfa:	2400      	movs	r4, #0
 800cdfc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ce00:	4628      	mov	r0, r5
 800ce02:	4798      	blx	r3
 800ce04:	2000      	movs	r0, #0
 800ce06:	e7e0      	b.n	800cdca <_raise_r+0x12>

0800ce08 <raise>:
 800ce08:	4b02      	ldr	r3, [pc, #8]	; (800ce14 <raise+0xc>)
 800ce0a:	4601      	mov	r1, r0
 800ce0c:	6818      	ldr	r0, [r3, #0]
 800ce0e:	f7ff bfd3 	b.w	800cdb8 <_raise_r>
 800ce12:	bf00      	nop
 800ce14:	2000003c 	.word	0x2000003c

0800ce18 <_kill_r>:
 800ce18:	b538      	push	{r3, r4, r5, lr}
 800ce1a:	4d07      	ldr	r5, [pc, #28]	; (800ce38 <_kill_r+0x20>)
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	4604      	mov	r4, r0
 800ce20:	4608      	mov	r0, r1
 800ce22:	4611      	mov	r1, r2
 800ce24:	602b      	str	r3, [r5, #0]
 800ce26:	f7f5 fb79 	bl	800251c <_kill>
 800ce2a:	1c43      	adds	r3, r0, #1
 800ce2c:	d102      	bne.n	800ce34 <_kill_r+0x1c>
 800ce2e:	682b      	ldr	r3, [r5, #0]
 800ce30:	b103      	cbz	r3, 800ce34 <_kill_r+0x1c>
 800ce32:	6023      	str	r3, [r4, #0]
 800ce34:	bd38      	pop	{r3, r4, r5, pc}
 800ce36:	bf00      	nop
 800ce38:	2000064c 	.word	0x2000064c

0800ce3c <_getpid_r>:
 800ce3c:	f7f5 bb66 	b.w	800250c <_getpid>

0800ce40 <_init>:
 800ce40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce42:	bf00      	nop
 800ce44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce46:	bc08      	pop	{r3}
 800ce48:	469e      	mov	lr, r3
 800ce4a:	4770      	bx	lr

0800ce4c <_fini>:
 800ce4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce4e:	bf00      	nop
 800ce50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce52:	bc08      	pop	{r3}
 800ce54:	469e      	mov	lr, r3
 800ce56:	4770      	bx	lr

0800ce58 <__run_sweep_veneer>:
 800ce58:	f85f f000 	ldr.w	pc, [pc]	; 800ce5c <__run_sweep_veneer+0x4>
 800ce5c:	000007a1 	.word	0x000007a1

0800ce60 <__start_pop_veneer>:
 800ce60:	f85f f000 	ldr.w	pc, [pc]	; 800ce64 <__start_pop_veneer+0x4>
 800ce64:	000000bd 	.word	0x000000bd

0800ce68 <__init_synthesiser_veneer>:
 800ce68:	f85f f000 	ldr.w	pc, [pc]	; 800ce6c <__init_synthesiser_veneer+0x4>
 800ce6c:	000003a3 	.word	0x000003a3

0800ce70 <__timer_delay_veneer>:
 800ce70:	f85f f000 	ldr.w	pc, [pc]	; 800ce74 <__timer_delay_veneer+0x4>
 800ce74:	00000061 	.word	0x00000061

0800ce78 <__set_frequency_hz_veneer>:
 800ce78:	f85f f000 	ldr.w	pc, [pc]	; 800ce7c <__set_frequency_hz_veneer+0x4>
 800ce7c:	000006dd 	.word	0x000006dd

0800ce80 <__set_aom_atten_veneer>:
 800ce80:	f85f f000 	ldr.w	pc, [pc]	; 800ce84 <__set_aom_atten_veneer+0x4>
 800ce84:	000001e1 	.word	0x000001e1

0800ce88 <__stop_pop_veneer>:
 800ce88:	f85f f000 	ldr.w	pc, [pc]	; 800ce8c <__stop_pop_veneer+0x4>
 800ce8c:	0000016d 	.word	0x0000016d
