
atomic_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .itcm         00000948  00000000  08000298  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000e238  08000be0  08000be0  00020be0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .user_flash   00000000  08100000  08100000  00030210  2**0
                  CONTENTS
  4 .rodata       000008f4  0800ee18  0800ee18  0002ee18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  0800f70c  0800f70c  0002f70c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  0800f714  0800f714  0002f714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f718  0800f718  0002f718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800f71c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  20000210  0800f92c  00030210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000514  0800f92c  00030514  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 12 .debug_info   000247c0  00000000  00000000  0003023e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003735  00000000  00000000  000549fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c48  00000000  00000000  00058138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b00  00000000  00000000  00059d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000053b4  00000000  00000000  0005b880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021549  00000000  00000000  00060c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00191398  00000000  00000000  0008217d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00213515  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008abc  00000000  00000000  00213568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .itcm:

00000000 <start_timer>:
	HAL_GPIO_WritePin(ATT_8_GPIO_Port, ATT_8_Pin, a.ATT_8DB);
	HAL_GPIO_WritePin(ATT_16_GPIO_Port, ATT_16_Pin, a.ATT_16DB);
}
#endif //ATTENUATOR_CODE

uint32_t start_timer(TIM_TypeDef * timer) {
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
   8:	687b      	ldr	r3, [r7, #4]
   a:	681b      	ldr	r3, [r3, #0]
   c:	f023 0201 	bic.w	r2, r3, #1
  10:	687b      	ldr	r3, [r7, #4]
  12:	601a      	str	r2, [r3, #0]
	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
  14:	687b      	ldr	r3, [r7, #4]
  16:	695b      	ldr	r3, [r3, #20]
  18:	f043 0201 	orr.w	r2, r3, #1
  1c:	687b      	ldr	r3, [r7, #4]
  1e:	615a      	str	r2, [r3, #20]
	timer->CR1 |= TIM_CR1_CEN;
  20:	687b      	ldr	r3, [r7, #4]
  22:	681b      	ldr	r3, [r3, #0]
  24:	f043 0201 	orr.w	r2, r3, #1
  28:	687b      	ldr	r3, [r7, #4]
  2a:	601a      	str	r2, [r3, #0]
	return timer->CNT;
  2c:	687b      	ldr	r3, [r7, #4]
  2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24

}
  30:	4618      	mov	r0, r3
  32:	370c      	adds	r7, #12
  34:	46bd      	mov	sp, r7
  36:	f85d 7b04 	ldr.w	r7, [sp], #4
  3a:	4770      	bx	lr

0000003c <stop_timer>:

uint32_t stop_timer(TIM_TypeDef *timer) {
  3c:	b480      	push	{r7}
  3e:	b083      	sub	sp, #12
  40:	af00      	add	r7, sp, #0
  42:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
  44:	687b      	ldr	r3, [r7, #4]
  46:	681b      	ldr	r3, [r3, #0]
  48:	f023 0201 	bic.w	r2, r3, #1
  4c:	687b      	ldr	r3, [r7, #4]
  4e:	601a      	str	r2, [r3, #0]
	return timer->CNT;
  50:	687b      	ldr	r3, [r7, #4]
  52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
  54:	4618      	mov	r0, r3
  56:	370c      	adds	r7, #12
  58:	46bd      	mov	sp, r7
  5a:	f85d 7b04 	ldr.w	r7, [sp], #4
  5e:	4770      	bx	lr

00000060 <timer_delay>:

void timer_delay(TIM_TypeDef *timer, const uint32_t delay_count){
  60:	b480      	push	{r7}
  62:	b085      	sub	sp, #20
  64:	af00      	add	r7, sp, #0
  66:	6078      	str	r0, [r7, #4]
  68:	6039      	str	r1, [r7, #0]

	timer->CR1 &= ~(TIM_CR1_CEN); // Disable the timer
  6a:	687b      	ldr	r3, [r7, #4]
  6c:	681b      	ldr	r3, [r3, #0]
  6e:	f023 0201 	bic.w	r2, r3, #1
  72:	687b      	ldr	r3, [r7, #4]
  74:	601a      	str	r2, [r3, #0]
	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
  76:	687b      	ldr	r3, [r7, #4]
  78:	695b      	ldr	r3, [r3, #20]
  7a:	f043 0201 	orr.w	r2, r3, #1
  7e:	687b      	ldr	r3, [r7, #4]
  80:	615a      	str	r2, [r3, #20]
	timer->CR1 |= TIM_CR1_CEN; // Enable the timer
  82:	687b      	ldr	r3, [r7, #4]
  84:	681b      	ldr	r3, [r3, #0]
  86:	f043 0201 	orr.w	r2, r3, #1
  8a:	687b      	ldr	r3, [r7, #4]
  8c:	601a      	str	r2, [r3, #0]
	uint32_t start = timer->CNT; // Get the start value of the timer
  8e:	687b      	ldr	r3, [r7, #4]
  90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  92:	60fb      	str	r3, [r7, #12]

	/* Note that we don't consider overflow, if the timer is clocked at 1 MHz
	 * a 16 bit counter will take approximately 65 ms to overflow. */

	while((timer->CNT - start) < delay_count){} // Loop until delay_us has expired
  94:	bf00      	nop
  96:	687b      	ldr	r3, [r7, #4]
  98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  9a:	68fb      	ldr	r3, [r7, #12]
  9c:	1ad3      	subs	r3, r2, r3
  9e:	683a      	ldr	r2, [r7, #0]
  a0:	429a      	cmp	r2, r3
  a2:	d8f8      	bhi.n	96 <timer_delay+0x36>
	timer->CR1 &= ~(TIM_CR1_CEN); // Disable the timer
  a4:	687b      	ldr	r3, [r7, #4]
  a6:	681b      	ldr	r3, [r3, #0]
  a8:	f023 0201 	bic.w	r2, r3, #1
  ac:	687b      	ldr	r3, [r7, #4]
  ae:	601a      	str	r2, [r3, #0]

}
  b0:	bf00      	nop
  b2:	3714      	adds	r7, #20
  b4:	46bd      	mov	sp, r7
  b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  ba:	4770      	bx	lr

000000bc <start_pop>:

	printf("POP cycle stopped!\r\n");

}

static void start_pop() {
  bc:	b580      	push	{r7, lr}
  be:	af00      	add	r7, sp, #0

	/* Timer A is the LASER enable, Timer E is the microwave pulse */
	if (HAL_HRTIM_WaveformOutputStart(&hhrtim,
  c0:	f240 1103 	movw	r1, #259	; 0x103
  c4:	4821      	ldr	r0, [pc, #132]	; (14c <start_pop+0x90>)
  c6:	f000 fc13 	bl	8f0 <__HAL_HRTIM_WaveformOutputStart_veneer>
  ca:	4603      	mov	r3, r0
  cc:	2b00      	cmp	r3, #0
  ce:	d004      	beq.n	da <start_pop+0x1e>
	HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1) != HAL_OK) {
		printf("Failed to start POP!\r\n");
  d0:	481f      	ldr	r0, [pc, #124]	; (150 <start_pop+0x94>)
  d2:	f000 fc2d 	bl	930 <__puts_veneer>
		Error_Handler();
  d6:	f000 fc23 	bl	920 <__Error_Handler_veneer>
	}

#ifdef POP_START_PULSE

	if (HAL_HRTIM_WaveformSetOutputLevel(&hhrtim,
  da:	2302      	movs	r3, #2
  dc:	2202      	movs	r2, #2
  de:	2100      	movs	r1, #0
  e0:	481a      	ldr	r0, [pc, #104]	; (14c <start_pop+0x90>)
  e2:	f000 fc09 	bl	8f8 <__HAL_HRTIM_WaveformSetOutputLevel_veneer>
  e6:	4603      	mov	r3, r0
  e8:	2b00      	cmp	r3, #0
  ea:	d004      	beq.n	f6 <start_pop+0x3a>
	HRTIM_TIMERINDEX_TIMER_A,
	HRTIM_OUTPUT_TA2, HRTIM_OUTPUTLEVEL_INACTIVE) != HAL_OK) {
		printf("POP failure point C!\r\n");
  ec:	4819      	ldr	r0, [pc, #100]	; (154 <start_pop+0x98>)
  ee:	f000 fc1f 	bl	930 <__puts_veneer>
		Error_Handler();
  f2:	f000 fc15 	bl	920 <__Error_Handler_veneer>
	}

	timer_delay(SLOW_TIMER, 1000);
  f6:	4b18      	ldr	r3, [pc, #96]	; (158 <start_pop+0x9c>)
  f8:	681b      	ldr	r3, [r3, #0]
  fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  fe:	4618      	mov	r0, r3
 100:	f7ff ffae 	bl	60 <timer_delay>

	if (HAL_HRTIM_WaveformSetOutputLevel(&hhrtim,
 104:	2301      	movs	r3, #1
 106:	2202      	movs	r2, #2
 108:	2100      	movs	r1, #0
 10a:	4810      	ldr	r0, [pc, #64]	; (14c <start_pop+0x90>)
 10c:	f000 fbf4 	bl	8f8 <__HAL_HRTIM_WaveformSetOutputLevel_veneer>
 110:	4603      	mov	r3, r0
 112:	2b00      	cmp	r3, #0
 114:	d004      	beq.n	120 <start_pop+0x64>
	HRTIM_TIMERINDEX_TIMER_A,
	HRTIM_OUTPUT_TA2, HRTIM_OUTPUTLEVEL_ACTIVE) != HAL_OK) {
		printf("POP failure point D!\r\n");
 116:	4811      	ldr	r0, [pc, #68]	; (15c <start_pop+0xa0>)
 118:	f000 fc0a 	bl	930 <__puts_veneer>
		Error_Handler();
 11c:	f000 fc00 	bl	920 <__Error_Handler_veneer>
	}

#endif

	if (HAL_HRTIM_WaveformCounterStart_IT(&hhrtim,
 120:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 124:	4809      	ldr	r0, [pc, #36]	; (14c <start_pop+0x90>)
 126:	f000 fbf3 	bl	910 <__HAL_HRTIM_WaveformCountStart_IT_veneer>
 12a:	4603      	mov	r3, r0
 12c:	2b00      	cmp	r3, #0
 12e:	d004      	beq.n	13a <start_pop+0x7e>
	HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E) != HAL_OK) {
		printf("POP failure point E!\r\n");
 130:	480b      	ldr	r0, [pc, #44]	; (160 <start_pop+0xa4>)
 132:	f000 fbfd 	bl	930 <__puts_veneer>
		Error_Handler();
 136:	f000 fbf3 	bl	920 <__Error_Handler_veneer>
	}

	pop_running = true;
 13a:	4b0a      	ldr	r3, [pc, #40]	; (164 <start_pop+0xa8>)
 13c:	2201      	movs	r2, #1
 13e:	701a      	strb	r2, [r3, #0]

	printf("POP cycle running!\r\n");
 140:	4809      	ldr	r0, [pc, #36]	; (168 <start_pop+0xac>)
 142:	f000 fbf5 	bl	930 <__puts_veneer>

}
 146:	bf00      	nop
 148:	bd80      	pop	{r7, pc}
 14a:	bf00      	nop
 14c:	200002a4 	.word	0x200002a4
 150:	0800ee18 	.word	0x0800ee18
 154:	0800ee30 	.word	0x0800ee30
 158:	20000000 	.word	0x20000000
 15c:	0800ee48 	.word	0x0800ee48
 160:	0800ee60 	.word	0x0800ee60
 164:	200004e4 	.word	0x200004e4
 168:	0800ee78 	.word	0x0800ee78

0000016c <stop_pop>:
static void stop_pop() {
 16c:	b580      	push	{r7, lr}
 16e:	af00      	add	r7, sp, #0
	if (HAL_HRTIM_WaveformOutputStop(&hhrtim,
 170:	f240 1103 	movw	r1, #259	; 0x103
 174:	4813      	ldr	r0, [pc, #76]	; (1c4 <stop_pop+0x58>)
 176:	f000 fbc7 	bl	908 <__HAL_HRTIM_WaveformOutputStop_veneer>
 17a:	4603      	mov	r3, r0
 17c:	2b00      	cmp	r3, #0
 17e:	d004      	beq.n	18a <stop_pop+0x1e>
		printf("POP failure point A!\r\n");
 180:	4811      	ldr	r0, [pc, #68]	; (1c8 <stop_pop+0x5c>)
 182:	f000 fbd5 	bl	930 <__puts_veneer>
		Error_Handler();
 186:	f000 fbcb 	bl	920 <__Error_Handler_veneer>
	if (HAL_HRTIM_WaveformCounterStop_IT(&hhrtim,
 18a:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 18e:	480d      	ldr	r0, [pc, #52]	; (1c4 <stop_pop+0x58>)
 190:	f000 fbc2 	bl	918 <__HAL_HRTIM_WaveformCountStop_IT_veneer>
 194:	4603      	mov	r3, r0
 196:	2b00      	cmp	r3, #0
 198:	d004      	beq.n	1a4 <stop_pop+0x38>
		printf("POP failure point B!\r\n");
 19a:	480c      	ldr	r0, [pc, #48]	; (1cc <stop_pop+0x60>)
 19c:	f000 fbc8 	bl	930 <__puts_veneer>
		Error_Handler();
 1a0:	f000 fbbe 	bl	920 <__Error_Handler_veneer>
	pop_cycle_count = 0;
 1a4:	4b0a      	ldr	r3, [pc, #40]	; (1d0 <stop_pop+0x64>)
 1a6:	2200      	movs	r2, #0
 1a8:	601a      	str	r2, [r3, #0]
	pop_running = false;
 1aa:	4b0a      	ldr	r3, [pc, #40]	; (1d4 <stop_pop+0x68>)
 1ac:	2200      	movs	r2, #0
 1ae:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0); //turn off amber LED
 1b0:	2200      	movs	r2, #0
 1b2:	2102      	movs	r1, #2
 1b4:	4808      	ldr	r0, [pc, #32]	; (1d8 <stop_pop+0x6c>)
 1b6:	f000 fbc3 	bl	940 <__HAL_GPIO_WritePin_veneer>
	printf("POP cycle stopped!\r\n");
 1ba:	4808      	ldr	r0, [pc, #32]	; (1dc <stop_pop+0x70>)
 1bc:	f000 fbb8 	bl	930 <__puts_veneer>
}
 1c0:	bf00      	nop
 1c2:	bd80      	pop	{r7, pc}
 1c4:	200002a4 	.word	0x200002a4
 1c8:	0800ee8c 	.word	0x0800ee8c
 1cc:	0800eea4 	.word	0x0800eea4
 1d0:	200004e8 	.word	0x200004e8
 1d4:	200004e4 	.word	0x200004e4
 1d8:	58021000 	.word	0x58021000
 1dc:	0800eebc 	.word	0x0800eebc

000001e0 <set_aom_atten>:
static void set_aom_atten(const struct AttenuatorSettings a) {
 1e0:	b580      	push	{r7, lr}
 1e2:	b082      	sub	sp, #8
 1e4:	af00      	add	r7, sp, #0
 1e6:	7138      	strb	r0, [r7, #4]
	HAL_GPIO_WritePin(ATT_LE_GPIO_Port, ATT_LE_Pin, GPIO_PIN_SET);
 1e8:	2201      	movs	r2, #1
 1ea:	2180      	movs	r1, #128	; 0x80
 1ec:	4822      	ldr	r0, [pc, #136]	; (278 <_Min_Heap_Size+0x78>)
 1ee:	f000 fba7 	bl	940 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_025_GPIO_Port, ATT_025_Pin, a.ATT_0DB25);
 1f2:	793b      	ldrb	r3, [r7, #4]
 1f4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 1f8:	b2db      	uxtb	r3, r3
 1fa:	461a      	mov	r2, r3
 1fc:	2140      	movs	r1, #64	; 0x40
 1fe:	481e      	ldr	r0, [pc, #120]	; (278 <_Min_Heap_Size+0x78>)
 200:	f000 fb9e 	bl	940 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_05_GPIO_Port, ATT_05_Pin, a.ATT_0DB5);
 204:	793b      	ldrb	r3, [r7, #4]
 206:	f3c3 0340 	ubfx	r3, r3, #1, #1
 20a:	b2db      	uxtb	r3, r3
 20c:	461a      	mov	r2, r3
 20e:	2120      	movs	r1, #32
 210:	4819      	ldr	r0, [pc, #100]	; (278 <_Min_Heap_Size+0x78>)
 212:	f000 fb95 	bl	940 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_1_GPIO_Port, ATT_1_Pin, a.ATT_1DB);
 216:	793b      	ldrb	r3, [r7, #4]
 218:	f3c3 0380 	ubfx	r3, r3, #2, #1
 21c:	b2db      	uxtb	r3, r3
 21e:	461a      	mov	r2, r3
 220:	2110      	movs	r1, #16
 222:	4815      	ldr	r0, [pc, #84]	; (278 <_Min_Heap_Size+0x78>)
 224:	f000 fb8c 	bl	940 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_2_GPIO_Port, ATT_2_Pin, a.ATT_2DB);
 228:	793b      	ldrb	r3, [r7, #4]
 22a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 22e:	b2db      	uxtb	r3, r3
 230:	461a      	mov	r2, r3
 232:	2108      	movs	r1, #8
 234:	4810      	ldr	r0, [pc, #64]	; (278 <_Min_Heap_Size+0x78>)
 236:	f000 fb83 	bl	940 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_4_GPIO_Port, ATT_4_Pin, a.ATT_4DB);
 23a:	793b      	ldrb	r3, [r7, #4]
 23c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 240:	b2db      	uxtb	r3, r3
 242:	461a      	mov	r2, r3
 244:	2104      	movs	r1, #4
 246:	480d      	ldr	r0, [pc, #52]	; (27c <_Min_Heap_Size+0x7c>)
 248:	f000 fb7a 	bl	940 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_8_GPIO_Port, ATT_8_Pin, a.ATT_8DB);
 24c:	793b      	ldrb	r3, [r7, #4]
 24e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 252:	b2db      	uxtb	r3, r3
 254:	461a      	mov	r2, r3
 256:	2110      	movs	r1, #16
 258:	4808      	ldr	r0, [pc, #32]	; (27c <_Min_Heap_Size+0x7c>)
 25a:	f000 fb71 	bl	940 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_16_GPIO_Port, ATT_16_Pin, a.ATT_16DB);
 25e:	793b      	ldrb	r3, [r7, #4]
 260:	f3c3 1380 	ubfx	r3, r3, #6, #1
 264:	b2db      	uxtb	r3, r3
 266:	461a      	mov	r2, r3
 268:	2120      	movs	r1, #32
 26a:	4804      	ldr	r0, [pc, #16]	; (27c <_Min_Heap_Size+0x7c>)
 26c:	f000 fb68 	bl	940 <__HAL_GPIO_WritePin_veneer>
}
 270:	bf00      	nop
 272:	3708      	adds	r7, #8
 274:	46bd      	mov	sp, r7
 276:	bd80      	pop	{r7, pc}
 278:	58020c00 	.word	0x58020c00
 27c:	58021000 	.word	0x58021000

00000280 <synth_writereg>:
extern uint32_t start_timer(TIM_TypeDef * timer);
extern uint32_t stop_timer(TIM_TypeDef * timer);
extern void timer_delay(TIM_TypeDef *timer, uint32_t delay_us);
extern void Error_Handler(void);

static uint32_t synth_writereg(const uint32_t data, const uint32_t reg_address, const uint32_t chip_address, const bool verify) {
 280:	b580      	push	{r7, lr}
 282:	b08a      	sub	sp, #40	; 0x28
 284:	af00      	add	r7, sp, #0
 286:	60f8      	str	r0, [r7, #12]
 288:	60b9      	str	r1, [r7, #8]
 28a:	607a      	str	r2, [r7, #4]
 28c:	70fb      	strb	r3, [r7, #3]

	uint32_t read_data = 0;
 28e:	2300      	movs	r3, #0
 290:	627b      	str	r3, [r7, #36]	; 0x24
	const uint32_t write_data = (data << 8) | (reg_address << 3) | chip_address; // This is what we will write, 32 bits in total.
 292:	68fb      	ldr	r3, [r7, #12]
 294:	021a      	lsls	r2, r3, #8
 296:	68bb      	ldr	r3, [r7, #8]
 298:	00db      	lsls	r3, r3, #3
 29a:	4313      	orrs	r3, r2
 29c:	687a      	ldr	r2, [r7, #4]
 29e:	4313      	orrs	r3, r2
 2a0:	61fb      	str	r3, [r7, #28]
#ifdef SPI_DEBUG
	printf("SPI BYTES WRITTEN: 0x%X \r\n", write_data);
#endif
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
 2a2:	2200      	movs	r2, #0
 2a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 2a8:	4830      	ldr	r0, [pc, #192]	; (36c <synth_writereg+0xec>)
 2aa:	f000 fb49 	bl	940 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 0); // Take SEN low to indicate we are sending data
 2ae:	2200      	movs	r2, #0
 2b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 2b4:	482d      	ldr	r0, [pc, #180]	; (36c <synth_writereg+0xec>)
 2b6:	f000 fb43 	bl	940 <__HAL_GPIO_WritePin_veneer>

	/* Clock in the data */
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
 2ba:	2300      	movs	r3, #0
 2bc:	623b      	str	r3, [r7, #32]
 2be:	e036      	b.n	32e <synth_writereg+0xae>

		/* Data written on the rising edge */
		uint32_t bit = (SYNTH_SPI_BITS - 1 - i);
 2c0:	2220      	movs	r2, #32
 2c2:	6a3b      	ldr	r3, [r7, #32]
 2c4:	1ad3      	subs	r3, r2, r3
 2c6:	3b01      	subs	r3, #1
 2c8:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(MOSI_GPIO_Port, MOSI_Pin, !!(write_data & (1 << bit)));
 2ca:	2201      	movs	r2, #1
 2cc:	697b      	ldr	r3, [r7, #20]
 2ce:	fa02 f303 	lsl.w	r3, r2, r3
 2d2:	461a      	mov	r2, r3
 2d4:	69fb      	ldr	r3, [r7, #28]
 2d6:	4013      	ands	r3, r2
 2d8:	2b00      	cmp	r3, #0
 2da:	bf14      	ite	ne
 2dc:	2301      	movne	r3, #1
 2de:	2300      	moveq	r3, #0
 2e0:	b2db      	uxtb	r3, r3
 2e2:	461a      	mov	r2, r3
 2e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 2e8:	4820      	ldr	r0, [pc, #128]	; (36c <synth_writereg+0xec>)
 2ea:	f000 fb29 	bl	940 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 1);
 2ee:	2201      	movs	r2, #1
 2f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 2f4:	481d      	ldr	r0, [pc, #116]	; (36c <synth_writereg+0xec>)
 2f6:	f000 fb23 	bl	940 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
 2fa:	2200      	movs	r2, #0
 2fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 300:	481a      	ldr	r0, [pc, #104]	; (36c <synth_writereg+0xec>)
 302:	f000 fb1d 	bl	940 <__HAL_GPIO_WritePin_veneer>

		/* Data read on the falling edge */
		read_data = read_data
				| (HAL_GPIO_ReadPin(MISO_GPIO_Port, MISO_Pin)
 306:	f44f 6180 	mov.w	r1, #1024	; 0x400
 30a:	4818      	ldr	r0, [pc, #96]	; (36c <synth_writereg+0xec>)
 30c:	f000 fb0c 	bl	928 <__HAL_GPIO_ReadPin_veneer>
 310:	4603      	mov	r3, r0
 312:	4619      	mov	r1, r3
						<< (SYNTH_SPI_BITS - 1 - i));
 314:	2220      	movs	r2, #32
 316:	6a3b      	ldr	r3, [r7, #32]
 318:	1ad3      	subs	r3, r2, r3
 31a:	3b01      	subs	r3, #1
 31c:	fa01 f303 	lsl.w	r3, r1, r3
 320:	461a      	mov	r2, r3
		read_data = read_data
 322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 324:	4313      	orrs	r3, r2
 326:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
 328:	6a3b      	ldr	r3, [r7, #32]
 32a:	3301      	adds	r3, #1
 32c:	623b      	str	r3, [r7, #32]
 32e:	2220      	movs	r2, #32
 330:	6a3b      	ldr	r3, [r7, #32]
 332:	4293      	cmp	r3, r2
 334:	d3c4      	bcc.n	2c0 <synth_writereg+0x40>
	}

	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1); // Assert the SEN line to register the transmitted data
 336:	2201      	movs	r2, #1
 338:	f44f 6100 	mov.w	r1, #2048	; 0x800
 33c:	480b      	ldr	r0, [pc, #44]	; (36c <synth_writereg+0xec>)
 33e:	f000 faff 	bl	940 <__HAL_GPIO_WritePin_veneer>

	if (verify) {
 342:	78fb      	ldrb	r3, [r7, #3]
 344:	2b00      	cmp	r3, #0
 346:	d00c      	beq.n	362 <synth_writereg+0xe2>
		const uint32_t verify_data = synth_readreg(reg_address); // Data returned on the second cycle
 348:	68b8      	ldr	r0, [r7, #8]
 34a:	f000 f813 	bl	374 <synth_readreg>
 34e:	61b8      	str	r0, [r7, #24]
		if (verify_data != data) {
 350:	69ba      	ldr	r2, [r7, #24]
 352:	68fb      	ldr	r3, [r7, #12]
 354:	429a      	cmp	r2, r3
 356:	d004      	beq.n	362 <synth_writereg+0xe2>
			printf("SPI transmission error!\n");
 358:	4805      	ldr	r0, [pc, #20]	; (370 <synth_writereg+0xf0>)
 35a:	f000 fae9 	bl	930 <__puts_veneer>
			Error_Handler(); // We enter an infinite loop here
 35e:	f000 fadf 	bl	920 <__Error_Handler_veneer>
		}
	}

	return read_data;
 362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 364:	4618      	mov	r0, r3
 366:	3728      	adds	r7, #40	; 0x28
 368:	46bd      	mov	sp, r7
 36a:	bd80      	pop	{r7, pc}
 36c:	58020800 	.word	0x58020800
 370:	0800f0e0 	.word	0x0800f0e0

00000374 <synth_readreg>:

static uint32_t synth_readreg(const uint32_t reg_address){
 374:	b580      	push	{r7, lr}
 376:	b084      	sub	sp, #16
 378:	af00      	add	r7, sp, #0
 37a:	6078      	str	r0, [r7, #4]

    synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY); // First cycle to send the read address
 37c:	2300      	movs	r3, #0
 37e:	2200      	movs	r2, #0
 380:	2100      	movs	r1, #0
 382:	6878      	ldr	r0, [r7, #4]
 384:	f7ff ff7c 	bl	280 <synth_writereg>
    const uint32_t read_data = synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY);  // Data returned on the second cycle
 388:	2300      	movs	r3, #0
 38a:	2200      	movs	r2, #0
 38c:	2100      	movs	r1, #0
 38e:	6878      	ldr	r0, [r7, #4]
 390:	f7ff ff76 	bl	280 <synth_writereg>
 394:	60f8      	str	r0, [r7, #12]

    return (read_data >> 8); // We only care about the first 24 bits returned.
 396:	68fb      	ldr	r3, [r7, #12]
 398:	0a1b      	lsrs	r3, r3, #8

}
 39a:	4618      	mov	r0, r3
 39c:	3710      	adds	r7, #16
 39e:	46bd      	mov	sp, r7
 3a0:	bd80      	pop	{r7, pc}

000003a2 <set_MW_power>:

/* Program LO2 output gain */
uint32_t set_MW_power (const uint8_t mw_power) {
 3a2:	b580      	push	{r7, lr}
 3a4:	b084      	sub	sp, #16
 3a6:	af00      	add	r7, sp, #0
 3a8:	4603      	mov	r3, r0
 3aa:	71fb      	strb	r3, [r7, #7]
	if (mw_power > 3) {//check that LO2GAIN is an integer from 0 to 3 inclusive
 3ac:	79fb      	ldrb	r3, [r7, #7]
 3ae:	2b03      	cmp	r3, #3
 3b0:	d904      	bls.n	3bc <set_MW_power+0x1a>
		printf("illegal mw_power - must be an integer from 0 to 3!\n");
 3b2:	4813      	ldr	r0, [pc, #76]	; (400 <_Min_Stack_Size>)
 3b4:	f000 fabc 	bl	930 <__puts_veneer>
		Error_Handler(); // We enter an infinite loop here
 3b8:	f000 fab2 	bl	920 <__Error_Handler_veneer>
	}
	uint32_t read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
 3bc:	2016      	movs	r0, #22
 3be:	f7ff ffd9 	bl	374 <synth_readreg>
 3c2:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
 3c4:	68fb      	ldr	r3, [r7, #12]
 3c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 3ca:	60fb      	str	r3, [r7, #12]
	read_data |= (mw_power << 8);	// Set LO2GAIN value.
 3cc:	79fb      	ldrb	r3, [r7, #7]
 3ce:	021b      	lsls	r3, r3, #8
 3d0:	461a      	mov	r2, r3
 3d2:	68fb      	ldr	r3, [r7, #12]
 3d4:	4313      	orrs	r3, r2
 3d6:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
 3d8:	2301      	movs	r3, #1
 3da:	2200      	movs	r2, #0
 3dc:	2116      	movs	r1, #22
 3de:	68f8      	ldr	r0, [r7, #12]
 3e0:	f7ff ff4e 	bl	280 <synth_writereg>
	#ifdef MW_VERBOSE
		printf("PROGRAMMED GAIN DIVIDER REGISTER: 0x%lX \r\n", read_data);
 3e4:	68f9      	ldr	r1, [r7, #12]
 3e6:	4807      	ldr	r0, [pc, #28]	; (404 <_Min_Stack_Size+0x4>)
 3e8:	f000 faa6 	bl	938 <__printf_veneer>
	#endif
	printf("LO2 gain setting: %u \r\n", mw_power);
 3ec:	79fb      	ldrb	r3, [r7, #7]
 3ee:	4619      	mov	r1, r3
 3f0:	4805      	ldr	r0, [pc, #20]	; (408 <_Min_Stack_Size+0x8>)
 3f2:	f000 faa1 	bl	938 <__printf_veneer>
	return SUCCESS;
 3f6:	2300      	movs	r3, #0
}
 3f8:	4618      	mov	r0, r3
 3fa:	3710      	adds	r7, #16
 3fc:	46bd      	mov	sp, r7
 3fe:	bd80      	pop	{r7, pc}
 400:	0800f0f8 	.word	0x0800f0f8
 404:	0800f12c 	.word	0x0800f12c
 408:	0800f158 	.word	0x0800f158

0000040c <init_synthesiser>:

uint32_t init_synthesiser(const uint8_t mw_power) {
 40c:	b580      	push	{r7, lr}
 40e:	b084      	sub	sp, #16
 410:	af00      	add	r7, sp, #0
 412:	4603      	mov	r3, r0
 414:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // Turn off the amber lock LED
 416:	2200      	movs	r2, #0
 418:	2102      	movs	r1, #2
 41a:	4861      	ldr	r0, [pc, #388]	; (5a0 <init_synthesiser+0x194>)
 41c:	f000 fa90 	bl	940 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
 420:	2201      	movs	r2, #1
 422:	2101      	movs	r1, #1
 424:	485f      	ldr	r0, [pc, #380]	; (5a4 <init_synthesiser+0x198>)
 426:	f000 fa8b 	bl	940 <__HAL_GPIO_WritePin_veneer>

	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
 42a:	2200      	movs	r2, #0
 42c:	f44f 7180 	mov.w	r1, #256	; 0x100
 430:	485d      	ldr	r0, [pc, #372]	; (5a8 <init_synthesiser+0x19c>)
 432:	f000 fa85 	bl	940 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1);
 436:	2201      	movs	r2, #1
 438:	f44f 6100 	mov.w	r1, #2048	; 0x800
 43c:	485a      	ldr	r0, [pc, #360]	; (5a8 <init_synthesiser+0x19c>)
 43e:	f000 fa7f 	bl	940 <__HAL_GPIO_WritePin_veneer>

	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 1); // Enable the main regulator.
 442:	2201      	movs	r2, #1
 444:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 448:	4857      	ldr	r0, [pc, #348]	; (5a8 <init_synthesiser+0x19c>)
 44a:	f000 fa79 	bl	940 <__HAL_GPIO_WritePin_veneer>

	HAL_Delay(100); // Wait 100 ms for the supply to stabilise.
 44e:	2064      	movs	r0, #100	; 0x64
 450:	f000 fa56 	bl	900 <__HAL_Delay_veneer>

	synth_writereg(0x1UL << 5, OPEN_MODE_READ_ADDRESS, 0x0, DONT_VERIFY); // Soft reset.
 454:	2300      	movs	r3, #0
 456:	2200      	movs	r2, #0
 458:	2100      	movs	r1, #0
 45a:	2020      	movs	r0, #32
 45c:	f7ff ff10 	bl	280 <synth_writereg>
	synth_writereg(0x41BFFF, ANALOG_EN_REGISTER, 0x0, VERIFY); // Set the SDO output level to 3.3 Volts
 460:	2301      	movs	r3, #1
 462:	2200      	movs	r2, #0
 464:	2108      	movs	r1, #8
 466:	4851      	ldr	r0, [pc, #324]	; (5ac <init_synthesiser+0x1a0>)
 468:	f7ff ff0a 	bl	280 <synth_writereg>

	uint32_t read_data = synth_readreg(ID_REGISTER); // Read the ID register to check the chip is communicating
 46c:	2000      	movs	r0, #0
 46e:	f7ff ff81 	bl	374 <synth_readreg>
 472:	60f8      	str	r0, [r7, #12]
	/* Check we have the correct ID */
	if (read_data != SYNTH_ID) {
 474:	4a4e      	ldr	r2, [pc, #312]	; (5b0 <init_synthesiser+0x1a4>)
 476:	68fb      	ldr	r3, [r7, #12]
 478:	4293      	cmp	r3, r2
 47a:	d00a      	beq.n	492 <init_synthesiser+0x86>
		HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0); // Disable the main regulator.
 47c:	2200      	movs	r2, #0
 47e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 482:	4849      	ldr	r0, [pc, #292]	; (5a8 <init_synthesiser+0x19c>)
 484:	f000 fa5c 	bl	940 <__HAL_GPIO_WritePin_veneer>
		printf("Incorrect synthesiser ID!\r\n");
 488:	484a      	ldr	r0, [pc, #296]	; (5b4 <init_synthesiser+0x1a8>)
 48a:	f000 fa51 	bl	930 <__puts_veneer>
		return ERROR;
 48e:	2301      	movs	r3, #1
 490:	e07b      	b.n	58a <init_synthesiser+0x17e>
	}

	/* Everything looks good, we can communicate with the chip :-) */
	printf("HMC835 Detected.\r\n");
 492:	4849      	ldr	r0, [pc, #292]	; (5b8 <init_synthesiser+0x1ac>)
 494:	f000 fa4c 	bl	930 <__puts_veneer>

	/* Enables Single-Ended output mode for LO2 output */
	read_data = synth_readreg(MODES_REGISTER); // Get the current value of the modes register
 498:	2017      	movs	r0, #23
 49a:	f7ff ff6b 	bl	374 <synth_readreg>
 49e:	60f8      	str	r0, [r7, #12]
#ifdef MW_VERBOSE
	printf("READ MODES REGISTER: 0x%lX \r\n", read_data);
 4a0:	68f9      	ldr	r1, [r7, #12]
 4a2:	4846      	ldr	r0, [pc, #280]	; (5bc <init_synthesiser+0x1b0>)
 4a4:	f000 fa48 	bl	938 <__printf_veneer>
#endif
	read_data |= (0x1UL << 9);     // Enable single ended output for LO2 (LO2_P)
 4a8:	68fb      	ldr	r3, [r7, #12]
 4aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 4ae:	60fb      	str	r3, [r7, #12]
	read_data  &= ~(AUTO_MUTE << 7); //can disable auto_mute - see variable declarations
 4b0:	2301      	movs	r3, #1
 4b2:	01db      	lsls	r3, r3, #7
 4b4:	43db      	mvns	r3, r3
 4b6:	461a      	mov	r2, r3
 4b8:	68fb      	ldr	r3, [r7, #12]
 4ba:	4013      	ands	r3, r2
 4bc:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, MODES_REGISTER, 0x0, VERIFY); // Send
 4be:	2301      	movs	r3, #1
 4c0:	2200      	movs	r2, #0
 4c2:	2117      	movs	r1, #23
 4c4:	68f8      	ldr	r0, [r7, #12]
 4c6:	f7ff fedb 	bl	280 <synth_writereg>
#ifdef MW_VERBOSE
	printf("PROGRAMMED MODES REGISTER: 0x%lX \r\n", read_data);
 4ca:	68f9      	ldr	r1, [r7, #12]
 4cc:	483c      	ldr	r0, [pc, #240]	; (5c0 <init_synthesiser+0x1b4>)
 4ce:	f000 fa33 	bl	938 <__printf_veneer>
	//read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get the current value.
	//read_data &= 0xFFFFFFF8; // Zero the first 3 LSBs.
	//read_data |= 0x07;
	//synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Update the VCO divide register.

	synth_writereg(1, REFDIV_REGISTER, 0x0, VERIFY); // Reference divider setting.
 4d2:	2301      	movs	r3, #1
 4d4:	2200      	movs	r2, #0
 4d6:	2102      	movs	r1, #2
 4d8:	2001      	movs	r0, #1
 4da:	f7ff fed1 	bl	280 <synth_writereg>
#ifdef MW_VERBOSE
	printf("PROGRAMMED DIVIDER REGISTER: 0x01 \r\n");
 4de:	4839      	ldr	r0, [pc, #228]	; (5c4 <init_synthesiser+0x1b8>)
 4e0:	f000 fa26 	bl	930 <__puts_veneer>
#endif

	/* Lock detect training: This must be done after any change to the PD
	 * reference frequency or after power cycle. */
	read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get contents of lock detect register
 4e4:	2007      	movs	r0, #7
 4e6:	f7ff ff45 	bl	374 <synth_readreg>
 4ea:	60f8      	str	r0, [r7, #12]
#ifdef MW_VERBOSE
	printf("READ LOCK_DETECT_REGISTER: 0x%lX \r\n", read_data);
 4ec:	68f9      	ldr	r1, [r7, #12]
 4ee:	4836      	ldr	r0, [pc, #216]	; (5c8 <init_synthesiser+0x1bc>)
 4f0:	f000 fa22 	bl	938 <__printf_veneer>
#endif
	read_data |= (0x1UL << 11);      // Enable lock-detect counters.
 4f4:	68fb      	ldr	r3, [r7, #12]
 4f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 4fa:	60fb      	str	r3, [r7, #12]
	read_data |= (0x1UL << 14);      // Enable the lock-detect timer.
 4fc:	68fb      	ldr	r3, [r7, #12]
 4fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 502:	60fb      	str	r3, [r7, #12]
	read_data |= (0x1UL << 20);      // Train the lock-detect timer.
 504:	68fb      	ldr	r3, [r7, #12]
 506:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 50a:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Send
 50c:	2301      	movs	r3, #1
 50e:	2200      	movs	r2, #0
 510:	2107      	movs	r1, #7
 512:	68f8      	ldr	r0, [r7, #12]
 514:	f7ff feb4 	bl	280 <synth_writereg>
#ifdef MW_VERBOSE
	printf("PROGRAMMED LOCK DETECT REGISTER: 0x%lX \r\n", read_data);
 518:	68f9      	ldr	r1, [r7, #12]
 51a:	482c      	ldr	r0, [pc, #176]	; (5cc <init_synthesiser+0x1c0>)
 51c:	f000 fa0c 	bl	938 <__printf_veneer>
#endif
	HAL_Delay(10); // Wait 10 ms for training to complete, not sure if we really need to do this.
 520:	200a      	movs	r0, #10
 522:	f000 f9ed 	bl	900 <__HAL_Delay_veneer>

	/* Program LO2 output gain */
	if (mw_power > 3) {//check that LO2GAIN is an integer from 0 to 3 inclusive
 526:	79fb      	ldrb	r3, [r7, #7]
 528:	2b03      	cmp	r3, #3
 52a:	d904      	bls.n	536 <init_synthesiser+0x12a>
		printf("illegal mw_power - must be an integer from 0 to 3!\n");
 52c:	4828      	ldr	r0, [pc, #160]	; (5d0 <init_synthesiser+0x1c4>)
 52e:	f000 f9ff 	bl	930 <__puts_veneer>
		Error_Handler(); // We enter an infinite loop here
 532:	f000 f9f5 	bl	920 <__Error_Handler_veneer>
	}
	read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
 536:	2016      	movs	r0, #22
 538:	f7ff ff1c 	bl	374 <synth_readreg>
 53c:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
 53e:	68fb      	ldr	r3, [r7, #12]
 540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 544:	60fb      	str	r3, [r7, #12]
	read_data |= (mw_power << 8);	// Set LO2GAIN value.
 546:	79fb      	ldrb	r3, [r7, #7]
 548:	021b      	lsls	r3, r3, #8
 54a:	461a      	mov	r2, r3
 54c:	68fb      	ldr	r3, [r7, #12]
 54e:	4313      	orrs	r3, r2
 550:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
 552:	2301      	movs	r3, #1
 554:	2200      	movs	r2, #0
 556:	2116      	movs	r1, #22
 558:	68f8      	ldr	r0, [r7, #12]
 55a:	f7ff fe91 	bl	280 <synth_writereg>
#ifdef MW_VERBOSE
	printf("PROGRAMMED GAIN DIVIDER REGISTER: 0x%lX \r\n", read_data);
 55e:	68f9      	ldr	r1, [r7, #12]
 560:	481c      	ldr	r0, [pc, #112]	; (5d4 <init_synthesiser+0x1c8>)
 562:	f000 f9e9 	bl	938 <__printf_veneer>
	printf("LO2 gain setting: %u \r\n", mw_power);
 566:	79fb      	ldrb	r3, [r7, #7]
 568:	4619      	mov	r1, r3
 56a:	481b      	ldr	r0, [pc, #108]	; (5d8 <init_synthesiser+0x1cc>)
 56c:	f000 f9e4 	bl	938 <__printf_veneer>
#endif

	/* Sets output frequency to the hyperfine value */
	set_frequency_hz(HYPERFINE);
 570:	ed9f 7b09 	vldr	d7, [pc, #36]	; 598 <init_synthesiser+0x18c>
 574:	eeb0 0b47 	vmov.f64	d0, d7
 578:	f000 f8f8 	bl	76c <set_frequency_hz>
	printf("Single frequency output: %f Hz \r\n", HYPERFINE);
 57c:	a306      	add	r3, pc, #24	; (adr r3, 598 <init_synthesiser+0x18c>)
 57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 582:	4816      	ldr	r0, [pc, #88]	; (5dc <init_synthesiser+0x1d0>)
 584:	f000 f9d8 	bl	938 <__printf_veneer>
	return SUCCESS;
 588:	2300      	movs	r3, #0
}
 58a:	4618      	mov	r0, r3
 58c:	3710      	adds	r7, #16
 58e:	46bd      	mov	sp, r7
 590:	bd80      	pop	{r7, pc}
 592:	bf00      	nop
 594:	f3af 8000 	nop.w
 598:	6d600000 	.word	0x6d600000
 59c:	41e69e35 	.word	0x41e69e35
 5a0:	58021000 	.word	0x58021000
 5a4:	58021800 	.word	0x58021800
 5a8:	58020800 	.word	0x58020800
 5ac:	0041bfff 	.word	0x0041bfff
 5b0:	00c7701a 	.word	0x00c7701a
 5b4:	0800f170 	.word	0x0800f170
 5b8:	0800f18c 	.word	0x0800f18c
 5bc:	0800f1a0 	.word	0x0800f1a0
 5c0:	0800f1c0 	.word	0x0800f1c0
 5c4:	0800f1e4 	.word	0x0800f1e4
 5c8:	0800f208 	.word	0x0800f208
 5cc:	0800f22c 	.word	0x0800f22c
 5d0:	0800f0f8 	.word	0x0800f0f8
 5d4:	0800f12c 	.word	0x0800f12c
 5d8:	0800f158 	.word	0x0800f158
 5dc:	0800f258 	.word	0x0800f258

000005e0 <check_lock>:

static const bool check_lock(uint32_t timeout) {
 5e0:	b580      	push	{r7, lr}
 5e2:	b084      	sub	sp, #16
 5e4:	af00      	add	r7, sp, #0
 5e6:	6078      	str	r0, [r7, #4]

	bool locked = false;
 5e8:	2300      	movs	r3, #0
 5ea:	73fb      	strb	r3, [r7, #15]

	/* Check for lock */
	uint32_t start = start_timer(FAST_TIMER);
 5ec:	4b16      	ldr	r3, [pc, #88]	; (648 <check_lock+0x68>)
 5ee:	681b      	ldr	r3, [r3, #0]
 5f0:	4618      	mov	r0, r3
 5f2:	f7ff fd05 	bl	0 <start_timer>
 5f6:	60b8      	str	r0, [r7, #8]

	while ((FAST_TIMER->CNT - start) < timeout) {
 5f8:	e014      	b.n	624 <check_lock+0x44>
		//printf("Debug lock while condition\r\n");
		//locked = synth_readreg(0x12) & (1UL << 1);
		locked = synth_readreg(GPOLD_REGISTER) & (1UL << 1);
 5fa:	2012      	movs	r0, #18
 5fc:	f7ff feba 	bl	374 <synth_readreg>
 600:	4603      	mov	r3, r0
 602:	f003 0302 	and.w	r3, r3, #2
 606:	2b00      	cmp	r3, #0
 608:	bf14      	ite	ne
 60a:	2301      	movne	r3, #1
 60c:	2300      	moveq	r3, #0
 60e:	73fb      	strb	r3, [r7, #15]
		if (locked) {
 610:	7bfb      	ldrb	r3, [r7, #15]
 612:	2b00      	cmp	r3, #0
 614:	d006      	beq.n	624 <check_lock+0x44>
			stop_timer(FAST_TIMER);
 616:	4b0c      	ldr	r3, [pc, #48]	; (648 <check_lock+0x68>)
 618:	681b      	ldr	r3, [r3, #0]
 61a:	4618      	mov	r0, r3
 61c:	f7ff fd0e 	bl	3c <stop_timer>
			return true;
 620:	2301      	movs	r3, #1
 622:	e00d      	b.n	640 <check_lock+0x60>
	while ((FAST_TIMER->CNT - start) < timeout) {
 624:	4b08      	ldr	r3, [pc, #32]	; (648 <check_lock+0x68>)
 626:	681b      	ldr	r3, [r3, #0]
 628:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 62a:	68bb      	ldr	r3, [r7, #8]
 62c:	1ad3      	subs	r3, r2, r3
 62e:	687a      	ldr	r2, [r7, #4]
 630:	429a      	cmp	r2, r3
 632:	d8e2      	bhi.n	5fa <check_lock+0x1a>
		}
	}

	stop_timer(FAST_TIMER);
 634:	4b04      	ldr	r3, [pc, #16]	; (648 <check_lock+0x68>)
 636:	681b      	ldr	r3, [r3, #0]
 638:	4618      	mov	r0, r3
 63a:	f7ff fcff 	bl	3c <stop_timer>
	return false;
 63e:	2300      	movs	r3, #0
}
 640:	4618      	mov	r0, r3
 642:	3710      	adds	r7, #16
 644:	46bd      	mov	sp, r7
 646:	bd80      	pop	{r7, pc}
 648:	20000008 	.word	0x20000008

0000064c <mute_mw_outputs>:

static void mute_mw_outputs() {
 64c:	b580      	push	{r7, lr}
 64e:	b082      	sub	sp, #8
 650:	af00      	add	r7, sp, #0
	uint32_t read_data = 0x0;
 652:	2300      	movs	r3, #0
 654:	607b      	str	r3, [r7, #4]

	/* Mute the outputs by setting k value to zero */
	read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
 656:	2016      	movs	r0, #22
 658:	f7ff fe8c 	bl	374 <synth_readreg>
 65c:	6078      	str	r0, [r7, #4]
	read_data &= 0xFFFFFFC0; // Zero the first 6 LSBs (VCO division value - mute).
 65e:	687b      	ldr	r3, [r7, #4]
 660:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 664:	607b      	str	r3, [r7, #4]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
 666:	2301      	movs	r3, #1
 668:	2200      	movs	r2, #0
 66a:	2116      	movs	r1, #22
 66c:	6878      	ldr	r0, [r7, #4]
 66e:	f7ff fe07 	bl	280 <synth_writereg>
}
 672:	bf00      	nop
 674:	3708      	adds	r7, #8
 676:	46bd      	mov	sp, r7
 678:	bd80      	pop	{r7, pc}

0000067a <set_frequency>:

static void set_frequency(const uint32_t integer, const uint32_t fraction, const uint32_t vco_divider, bool mute) {
 67a:	b580      	push	{r7, lr}
 67c:	b086      	sub	sp, #24
 67e:	af00      	add	r7, sp, #0
 680:	60f8      	str	r0, [r7, #12]
 682:	60b9      	str	r1, [r7, #8]
 684:	607a      	str	r2, [r7, #4]
 686:	70fb      	strb	r3, [r7, #3]

	static uint32_t last_integer = -1, last_fraction = -1, last_vcodiv = -1;

	uint32_t read_data = 0x0;
 688:	2300      	movs	r3, #0
 68a:	617b      	str	r3, [r7, #20]

	if (mute) {
 68c:	78fb      	ldrb	r3, [r7, #3]
 68e:	2b00      	cmp	r3, #0
 690:	d001      	beq.n	696 <set_frequency+0x1c>
		mute_mw_outputs();
 692:	f7ff ffdb 	bl	64c <mute_mw_outputs>
	}

	if (last_integer == -1 || (last_integer != integer)) {
 696:	4b30      	ldr	r3, [pc, #192]	; (758 <set_frequency+0xde>)
 698:	681b      	ldr	r3, [r3, #0]
 69a:	f1b3 3fff 	cmp.w	r3, #4294967295
 69e:	d004      	beq.n	6aa <set_frequency+0x30>
 6a0:	4b2d      	ldr	r3, [pc, #180]	; (758 <set_frequency+0xde>)
 6a2:	681b      	ldr	r3, [r3, #0]
 6a4:	68fa      	ldr	r2, [r7, #12]
 6a6:	429a      	cmp	r2, r3
 6a8:	d008      	beq.n	6bc <set_frequency+0x42>
		synth_writereg(integer, INTEGER_FREQUENCY_REGISTER, 0x0, VERIFY);   // Integer register.
 6aa:	2301      	movs	r3, #1
 6ac:	2200      	movs	r2, #0
 6ae:	2103      	movs	r1, #3
 6b0:	68f8      	ldr	r0, [r7, #12]
 6b2:	f7ff fde5 	bl	280 <synth_writereg>
		last_integer = integer;
 6b6:	4a28      	ldr	r2, [pc, #160]	; (758 <set_frequency+0xde>)
 6b8:	68fb      	ldr	r3, [r7, #12]
 6ba:	6013      	str	r3, [r2, #0]
	}

	if (last_fraction == -1 || (last_fraction != fraction)) {
 6bc:	4b27      	ldr	r3, [pc, #156]	; (75c <set_frequency+0xe2>)
 6be:	681b      	ldr	r3, [r3, #0]
 6c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 6c4:	d004      	beq.n	6d0 <set_frequency+0x56>
 6c6:	4b25      	ldr	r3, [pc, #148]	; (75c <set_frequency+0xe2>)
 6c8:	681b      	ldr	r3, [r3, #0]
 6ca:	68ba      	ldr	r2, [r7, #8]
 6cc:	429a      	cmp	r2, r3
 6ce:	d008      	beq.n	6e2 <set_frequency+0x68>
		synth_writereg(fraction, FRACTIONAL_FREQUENCY_REGISTER, 0x0, VERIFY);  // Fractional register.
 6d0:	2301      	movs	r3, #1
 6d2:	2200      	movs	r2, #0
 6d4:	2104      	movs	r1, #4
 6d6:	68b8      	ldr	r0, [r7, #8]
 6d8:	f7ff fdd2 	bl	280 <synth_writereg>
		last_fraction = fraction;
 6dc:	4a1f      	ldr	r2, [pc, #124]	; (75c <set_frequency+0xe2>)
 6de:	68bb      	ldr	r3, [r7, #8]
 6e0:	6013      	str	r3, [r2, #0]
	}

	if (last_vcodiv == -1 || (last_vcodiv != vco_divider) || mute) {
 6e2:	4b1f      	ldr	r3, [pc, #124]	; (760 <set_frequency+0xe6>)
 6e4:	681b      	ldr	r3, [r3, #0]
 6e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 6ea:	d007      	beq.n	6fc <set_frequency+0x82>
 6ec:	4b1c      	ldr	r3, [pc, #112]	; (760 <set_frequency+0xe6>)
 6ee:	681b      	ldr	r3, [r3, #0]
 6f0:	687a      	ldr	r2, [r7, #4]
 6f2:	429a      	cmp	r2, r3
 6f4:	d102      	bne.n	6fc <set_frequency+0x82>
 6f6:	78fb      	ldrb	r3, [r7, #3]
 6f8:	2b00      	cmp	r3, #0
 6fa:	d014      	beq.n	726 <set_frequency+0xac>
		read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
 6fc:	2016      	movs	r0, #22
 6fe:	f7ff fe39 	bl	374 <synth_readreg>
 702:	6178      	str	r0, [r7, #20]
		read_data &= 0xFFFFFFC0; // Zero the first 6 LSBs (VCO division value - mute).
 704:	697b      	ldr	r3, [r7, #20]
 706:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 70a:	617b      	str	r3, [r7, #20]
		read_data |= vco_divider; // This will set k which will un-mute the outputs */
 70c:	697a      	ldr	r2, [r7, #20]
 70e:	687b      	ldr	r3, [r7, #4]
 710:	4313      	orrs	r3, r2
 712:	617b      	str	r3, [r7, #20]
		synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
 714:	2301      	movs	r3, #1
 716:	2200      	movs	r2, #0
 718:	2116      	movs	r1, #22
 71a:	6978      	ldr	r0, [r7, #20]
 71c:	f7ff fdb0 	bl	280 <synth_writereg>
		last_vcodiv = vco_divider;
 720:	4a0f      	ldr	r2, [pc, #60]	; (760 <set_frequency+0xe6>)
 722:	687b      	ldr	r3, [r7, #4]
 724:	6013      	str	r3, [r2, #0]
	}

	if (!check_lock(LOCK_WAIT_US)) {
 726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 72a:	4618      	mov	r0, r3
 72c:	f7ff ff58 	bl	5e0 <check_lock>
 730:	4603      	mov	r3, r0
 732:	f083 0301 	eor.w	r3, r3, #1
 736:	b2db      	uxtb	r3, r3
 738:	2b00      	cmp	r3, #0
 73a:	d009      	beq.n	750 <set_frequency+0xd6>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); //turn off amber LED
 73c:	2200      	movs	r2, #0
 73e:	2102      	movs	r1, #2
 740:	4808      	ldr	r0, [pc, #32]	; (764 <set_frequency+0xea>)
 742:	f000 f8fd 	bl	940 <__HAL_GPIO_WritePin_veneer>
		printf("Lock failed within set_frequency!\r\n");
 746:	4808      	ldr	r0, [pc, #32]	; (768 <set_frequency+0xee>)
 748:	f000 f8f2 	bl	930 <__puts_veneer>
#ifdef HALT_ON_LOSS_OF_LOCK
		Error_Handler();
 74c:	f000 f8e8 	bl	920 <__Error_Handler_veneer>
#endif //HALT_ON_LOSS_OF_LOCK
	}

}
 750:	bf00      	nop
 752:	3718      	adds	r7, #24
 754:	46bd      	mov	sp, r7
 756:	bd80      	pop	{r7, pc}
 758:	2000000c 	.word	0x2000000c
 75c:	20000010 	.word	0x20000010
 760:	20000014 	.word	0x20000014
 764:	58021000 	.word	0x58021000
 768:	0800f27c 	.word	0x0800f27c

0000076c <set_frequency_hz>:

void set_frequency_hz(const double fo) {
 76c:	b580      	push	{r7, lr}
 76e:	b088      	sub	sp, #32
 770:	af00      	add	r7, sp, #0
 772:	ed87 0b00 	vstr	d0, [r7]

	/* For the k divider we need to find the smallest even integer or use a max of 62*/
	uint32_t k = VCO_MAX_FREQ / fo;
 776:	ed9f 5b28 	vldr	d5, [pc, #160]	; 818 <set_frequency_hz+0xac>
 77a:	ed97 6b00 	vldr	d6, [r7]
 77e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 782:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 786:	ee17 3a90 	vmov	r3, s15
 78a:	61fb      	str	r3, [r7, #28]

	if (k != 1) {
 78c:	69fb      	ldr	r3, [r7, #28]
 78e:	2b01      	cmp	r3, #1
 790:	d00b      	beq.n	7aa <set_frequency_hz+0x3e>
		while (k > 62 || k % 2) {
 792:	e002      	b.n	79a <set_frequency_hz+0x2e>
			k = k - 1;
 794:	69fb      	ldr	r3, [r7, #28]
 796:	3b01      	subs	r3, #1
 798:	61fb      	str	r3, [r7, #28]
		while (k > 62 || k % 2) {
 79a:	69fb      	ldr	r3, [r7, #28]
 79c:	2b3e      	cmp	r3, #62	; 0x3e
 79e:	d8f9      	bhi.n	794 <set_frequency_hz+0x28>
 7a0:	69fb      	ldr	r3, [r7, #28]
 7a2:	f003 0301 	and.w	r3, r3, #1
 7a6:	2b00      	cmp	r3, #0
 7a8:	d1f4      	bne.n	794 <set_frequency_hz+0x28>
		}
	}

	/* Calculate the N division ratio */
	const double N = ((fo * k) / REF_FREQ);
 7aa:	69fb      	ldr	r3, [r7, #28]
 7ac:	ee07 3a90 	vmov	s15, r3
 7b0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 7b4:	ed97 7b00 	vldr	d7, [r7]
 7b8:	ee26 6b07 	vmul.f64	d6, d6, d7
 7bc:	ed9f 5b18 	vldr	d5, [pc, #96]	; 820 <set_frequency_hz+0xb4>
 7c0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 7c4:	ed87 7b04 	vstr	d7, [r7, #16]

	/* Extract the fractional and integer parts */
	const uint32_t NINT = N;
 7c8:	ed97 7b04 	vldr	d7, [r7, #16]
 7cc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 7d0:	ee17 3a90 	vmov	r3, s15
 7d4:	60fb      	str	r3, [r7, #12]
	const uint32_t NFRAC = ((N - NINT) * (1 << 24)) + 0.5;
 7d6:	68fb      	ldr	r3, [r7, #12]
 7d8:	ee07 3a90 	vmov	s15, r3
 7dc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 7e0:	ed97 6b04 	vldr	d6, [r7, #16]
 7e4:	ee36 7b47 	vsub.f64	d7, d6, d7
 7e8:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 828 <set_frequency_hz+0xbc>
 7ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 7f0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 7f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 7f8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 7fc:	ee17 3a90 	vmov	r3, s15
 800:	60bb      	str	r3, [r7, #8]
		printf("Failed to establish synthesiser frequency accurately\r\n");
		Error_Handler();
	}
#endif

	set_frequency(NINT, NFRAC, k, MANUAL_MUTE);
 802:	2301      	movs	r3, #1
 804:	69fa      	ldr	r2, [r7, #28]
 806:	68b9      	ldr	r1, [r7, #8]
 808:	68f8      	ldr	r0, [r7, #12]
 80a:	f7ff ff36 	bl	67a <set_frequency>

}
 80e:	bf00      	nop
 810:	3720      	adds	r7, #32
 812:	46bd      	mov	sp, r7
 814:	bd80      	pop	{r7, pc}
 816:	bf00      	nop
 818:	20000000 	.word	0x20000000
 81c:	41ee8c21 	.word	0x41ee8c21
 820:	00000000 	.word	0x00000000
 824:	4187d784 	.word	0x4187d784
 828:	00000000 	.word	0x00000000
 82c:	41700000 	.word	0x41700000

00000830 <run_sweep>:

void run_sweep() {
 830:	b580      	push	{r7, lr}
 832:	b084      	sub	sp, #16
 834:	af00      	add	r7, sp, #0

	/* Output used for triggering external scope */
//	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
//	printf("Setting trigger output high \r\n");
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
 836:	2200      	movs	r2, #0
 838:	2101      	movs	r1, #1
 83a:	4825      	ldr	r0, [pc, #148]	; (8d0 <run_sweep+0xa0>)
 83c:	f000 f880 	bl	940 <__HAL_GPIO_WritePin_veneer>
#ifdef MW_VERBOSE
	printf("Setting trigger output low \r\n");
 840:	4824      	ldr	r0, [pc, #144]	; (8d4 <run_sweep+0xa4>)
 842:	f000 f875 	bl	930 <__puts_veneer>
#endif

	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // Assume we are locked, the LED will be disabled if lock fails.
 846:	2201      	movs	r2, #1
 848:	2102      	movs	r1, #2
 84a:	4823      	ldr	r0, [pc, #140]	; (8d8 <run_sweep+0xa8>)
 84c:	f000 f878 	bl	940 <__HAL_GPIO_WritePin_veneer>
	double dac_val = 0;
#endif

	//__disable_irq(); //Simon's code had IRQs disabled

	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
 850:	2200      	movs	r2, #0
 852:	2101      	movs	r1, #1
 854:	481e      	ldr	r0, [pc, #120]	; (8d0 <run_sweep+0xa0>)
 856:	f000 f873 	bl	940 <__HAL_GPIO_WritePin_veneer>

	for (uint32_t i = 0; i < num_points; i++) {
 85a:	2300      	movs	r3, #0
 85c:	60fb      	str	r3, [r7, #12]
 85e:	e01e      	b.n	89e <run_sweep+0x6e>

		double fo = start_freq + (i * sweep_settings.step_size);
 860:	68fb      	ldr	r3, [r7, #12]
 862:	ee07 3a90 	vmov	s15, r3
 866:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 86a:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8c8 <run_sweep+0x98>
 86e:	ee27 6b06 	vmul.f64	d6, d7, d6
 872:	4b1a      	ldr	r3, [pc, #104]	; (8dc <run_sweep+0xac>)
 874:	ed93 7b00 	vldr	d7, [r3]
 878:	ee36 7b07 	vadd.f64	d7, d6, d7
 87c:	ed87 7b00 	vstr	d7, [r7]
		set_frequency_hz(fo);
 880:	ed97 0b00 	vldr	d0, [r7]
 884:	f7ff ff72 	bl	76c <set_frequency_hz>
			printf("Failure to program value to DAC \r\n");
			Error_Handler();
		}
#endif

		timer_delay(FAST_TIMER, DWELL_TIME_US);
 888:	4b15      	ldr	r3, [pc, #84]	; (8e0 <run_sweep+0xb0>)
 88a:	681b      	ldr	r3, [r3, #0]
 88c:	f241 1208 	movw	r2, #4360	; 0x1108
 890:	4611      	mov	r1, r2
 892:	4618      	mov	r0, r3
 894:	f7ff fbe4 	bl	60 <timer_delay>
	for (uint32_t i = 0; i < num_points; i++) {
 898:	68fb      	ldr	r3, [r7, #12]
 89a:	3301      	adds	r3, #1
 89c:	60fb      	str	r3, [r7, #12]
 89e:	4b11      	ldr	r3, [pc, #68]	; (8e4 <run_sweep+0xb4>)
 8a0:	681b      	ldr	r3, [r3, #0]
 8a2:	68fa      	ldr	r2, [r7, #12]
 8a4:	429a      	cmp	r2, r3
 8a6:	d3db      	bcc.n	860 <run_sweep+0x30>

	}

	//__enable_irq(); //Simon's code had IRQs disabled

	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
 8a8:	2201      	movs	r2, #1
 8aa:	2101      	movs	r1, #1
 8ac:	4808      	ldr	r0, [pc, #32]	; (8d0 <run_sweep+0xa0>)
 8ae:	f000 f847 	bl	940 <__HAL_GPIO_WritePin_veneer>
	printf("Total Points: %lu\r\n", num_points);
 8b2:	4b0c      	ldr	r3, [pc, #48]	; (8e4 <run_sweep+0xb4>)
 8b4:	681b      	ldr	r3, [r3, #0]
 8b6:	4619      	mov	r1, r3
 8b8:	480b      	ldr	r0, [pc, #44]	; (8e8 <run_sweep+0xb8>)
 8ba:	f000 f83d 	bl	938 <__printf_veneer>
	/* Zero and stop the DAC */
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
	//HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
#endif

}
 8be:	bf00      	nop
 8c0:	3710      	adds	r7, #16
 8c2:	46bd      	mov	sp, r7
 8c4:	bd80      	pop	{r7, pc}
 8c6:	bf00      	nop
 8c8:	00000000 	.word	0x00000000
 8cc:	4017d784 	.word	0x4017d784
 8d0:	58021800 	.word	0x58021800
 8d4:	0800f2a0 	.word	0x0800f2a0
 8d8:	58021000 	.word	0x58021000
 8dc:	0800f2f0 	.word	0x0800f2f0
 8e0:	20000008 	.word	0x20000008
 8e4:	0800f2f8 	.word	0x0800f2f8
 8e8:	0800f2c0 	.word	0x0800f2c0
 8ec:	00000000 	.word	0x00000000

000008f0 <__HAL_HRTIM_WaveformOutputStart_veneer>:
 8f0:	f85f f000 	ldr.w	pc, [pc]	; 8f4 <__HAL_HRTIM_WaveformOutputStart_veneer+0x4>
 8f4:	080056d5 	.word	0x080056d5

000008f8 <__HAL_HRTIM_WaveformSetOutputLevel_veneer>:
 8f8:	f85f f000 	ldr.w	pc, [pc]	; 8fc <__HAL_HRTIM_WaveformSetOutputLevel_veneer+0x4>
 8fc:	080054e9 	.word	0x080054e9

00000900 <__HAL_Delay_veneer>:
 900:	f85f f000 	ldr.w	pc, [pc]	; 904 <__HAL_Delay_veneer+0x4>
 904:	0800296d 	.word	0x0800296d

00000908 <__HAL_HRTIM_WaveformOutputStop_veneer>:
 908:	f85f f000 	ldr.w	pc, [pc]	; 90c <__HAL_HRTIM_WaveformOutputStop_veneer+0x4>
 90c:	0800572f 	.word	0x0800572f

00000910 <__HAL_HRTIM_WaveformCountStart_IT_veneer>:
 910:	f85f f000 	ldr.w	pc, [pc]	; 914 <__HAL_HRTIM_WaveformCountStart_IT_veneer+0x4>
 914:	08005789 	.word	0x08005789

00000918 <__HAL_HRTIM_WaveformCountStop_IT_veneer>:
 918:	f85f f000 	ldr.w	pc, [pc]	; 91c <__HAL_HRTIM_WaveformCountStop_IT_veneer+0x4>
 91c:	08005869 	.word	0x08005869

00000920 <__Error_Handler_veneer>:
 920:	f85f f000 	ldr.w	pc, [pc]	; 924 <__Error_Handler_veneer+0x4>
 924:	08001f79 	.word	0x08001f79

00000928 <__HAL_GPIO_ReadPin_veneer>:
 928:	f85f f000 	ldr.w	pc, [pc]	; 92c <__HAL_GPIO_ReadPin_veneer+0x4>
 92c:	08004df5 	.word	0x08004df5

00000930 <__puts_veneer>:
 930:	f85f f000 	ldr.w	pc, [pc]	; 934 <__puts_veneer+0x4>
 934:	0800cd79 	.word	0x0800cd79

00000938 <__printf_veneer>:
 938:	f85f f000 	ldr.w	pc, [pc]	; 93c <__printf_veneer+0x4>
 93c:	0800cc6d 	.word	0x0800cc6d

00000940 <__HAL_GPIO_WritePin_veneer>:
 940:	f85f f000 	ldr.w	pc, [pc]	; 944 <__HAL_GPIO_WritePin_veneer+0x4>
 944:	08004e25 	.word	0x08004e25

Disassembly of section .text:

08000be0 <__do_global_dtors_aux>:
 8000be0:	b510      	push	{r4, lr}
 8000be2:	4c05      	ldr	r4, [pc, #20]	; (8000bf8 <__do_global_dtors_aux+0x18>)
 8000be4:	7823      	ldrb	r3, [r4, #0]
 8000be6:	b933      	cbnz	r3, 8000bf6 <__do_global_dtors_aux+0x16>
 8000be8:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <__do_global_dtors_aux+0x1c>)
 8000bea:	b113      	cbz	r3, 8000bf2 <__do_global_dtors_aux+0x12>
 8000bec:	4804      	ldr	r0, [pc, #16]	; (8000c00 <__do_global_dtors_aux+0x20>)
 8000bee:	f3af 8000 	nop.w
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	7023      	strb	r3, [r4, #0]
 8000bf6:	bd10      	pop	{r4, pc}
 8000bf8:	20000210 	.word	0x20000210
 8000bfc:	00000000 	.word	0x00000000
 8000c00:	0800edc0 	.word	0x0800edc0

08000c04 <frame_dummy>:
 8000c04:	b508      	push	{r3, lr}
 8000c06:	4b03      	ldr	r3, [pc, #12]	; (8000c14 <frame_dummy+0x10>)
 8000c08:	b11b      	cbz	r3, 8000c12 <frame_dummy+0xe>
 8000c0a:	4903      	ldr	r1, [pc, #12]	; (8000c18 <frame_dummy+0x14>)
 8000c0c:	4803      	ldr	r0, [pc, #12]	; (8000c1c <frame_dummy+0x18>)
 8000c0e:	f3af 8000 	nop.w
 8000c12:	bd08      	pop	{r3, pc}
 8000c14:	00000000 	.word	0x00000000
 8000c18:	20000214 	.word	0x20000214
 8000c1c:	0800edc0 	.word	0x0800edc0

08000c20 <strlen>:
 8000c20:	4603      	mov	r3, r0
 8000c22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000c26:	2a00      	cmp	r2, #0
 8000c28:	d1fb      	bne.n	8000c22 <strlen+0x2>
 8000c2a:	1a18      	subs	r0, r3, r0
 8000c2c:	3801      	subs	r0, #1
 8000c2e:	4770      	bx	lr

08000c30 <memchr>:
 8000c30:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000c34:	2a10      	cmp	r2, #16
 8000c36:	db2b      	blt.n	8000c90 <memchr+0x60>
 8000c38:	f010 0f07 	tst.w	r0, #7
 8000c3c:	d008      	beq.n	8000c50 <memchr+0x20>
 8000c3e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000c42:	3a01      	subs	r2, #1
 8000c44:	428b      	cmp	r3, r1
 8000c46:	d02d      	beq.n	8000ca4 <memchr+0x74>
 8000c48:	f010 0f07 	tst.w	r0, #7
 8000c4c:	b342      	cbz	r2, 8000ca0 <memchr+0x70>
 8000c4e:	d1f6      	bne.n	8000c3e <memchr+0xe>
 8000c50:	b4f0      	push	{r4, r5, r6, r7}
 8000c52:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000c56:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8000c5a:	f022 0407 	bic.w	r4, r2, #7
 8000c5e:	f07f 0700 	mvns.w	r7, #0
 8000c62:	2300      	movs	r3, #0
 8000c64:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000c68:	3c08      	subs	r4, #8
 8000c6a:	ea85 0501 	eor.w	r5, r5, r1
 8000c6e:	ea86 0601 	eor.w	r6, r6, r1
 8000c72:	fa85 f547 	uadd8	r5, r5, r7
 8000c76:	faa3 f587 	sel	r5, r3, r7
 8000c7a:	fa86 f647 	uadd8	r6, r6, r7
 8000c7e:	faa5 f687 	sel	r6, r5, r7
 8000c82:	b98e      	cbnz	r6, 8000ca8 <memchr+0x78>
 8000c84:	d1ee      	bne.n	8000c64 <memchr+0x34>
 8000c86:	bcf0      	pop	{r4, r5, r6, r7}
 8000c88:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000c8c:	f002 0207 	and.w	r2, r2, #7
 8000c90:	b132      	cbz	r2, 8000ca0 <memchr+0x70>
 8000c92:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000c96:	3a01      	subs	r2, #1
 8000c98:	ea83 0301 	eor.w	r3, r3, r1
 8000c9c:	b113      	cbz	r3, 8000ca4 <memchr+0x74>
 8000c9e:	d1f8      	bne.n	8000c92 <memchr+0x62>
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	4770      	bx	lr
 8000ca4:	3801      	subs	r0, #1
 8000ca6:	4770      	bx	lr
 8000ca8:	2d00      	cmp	r5, #0
 8000caa:	bf06      	itte	eq
 8000cac:	4635      	moveq	r5, r6
 8000cae:	3803      	subeq	r0, #3
 8000cb0:	3807      	subne	r0, #7
 8000cb2:	f015 0f01 	tst.w	r5, #1
 8000cb6:	d107      	bne.n	8000cc8 <memchr+0x98>
 8000cb8:	3001      	adds	r0, #1
 8000cba:	f415 7f80 	tst.w	r5, #256	; 0x100
 8000cbe:	bf02      	ittt	eq
 8000cc0:	3001      	addeq	r0, #1
 8000cc2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000cc6:	3001      	addeq	r0, #1
 8000cc8:	bcf0      	pop	{r4, r5, r6, r7}
 8000cca:	3801      	subs	r0, #1
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__aeabi_uldivmod>:
 8000cd0:	b953      	cbnz	r3, 8000ce8 <__aeabi_uldivmod+0x18>
 8000cd2:	b94a      	cbnz	r2, 8000ce8 <__aeabi_uldivmod+0x18>
 8000cd4:	2900      	cmp	r1, #0
 8000cd6:	bf08      	it	eq
 8000cd8:	2800      	cmpeq	r0, #0
 8000cda:	bf1c      	itt	ne
 8000cdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce4:	f000 b974 	b.w	8000fd0 <__aeabi_idiv0>
 8000ce8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf0:	f000 f806 	bl	8000d00 <__udivmoddi4>
 8000cf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cfc:	b004      	add	sp, #16
 8000cfe:	4770      	bx	lr

08000d00 <__udivmoddi4>:
 8000d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d04:	9d08      	ldr	r5, [sp, #32]
 8000d06:	4604      	mov	r4, r0
 8000d08:	468e      	mov	lr, r1
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d14d      	bne.n	8000daa <__udivmoddi4+0xaa>
 8000d0e:	428a      	cmp	r2, r1
 8000d10:	4694      	mov	ip, r2
 8000d12:	d969      	bls.n	8000de8 <__udivmoddi4+0xe8>
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	b152      	cbz	r2, 8000d30 <__udivmoddi4+0x30>
 8000d1a:	fa01 f302 	lsl.w	r3, r1, r2
 8000d1e:	f1c2 0120 	rsb	r1, r2, #32
 8000d22:	fa20 f101 	lsr.w	r1, r0, r1
 8000d26:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d2a:	ea41 0e03 	orr.w	lr, r1, r3
 8000d2e:	4094      	lsls	r4, r2
 8000d30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d34:	0c21      	lsrs	r1, r4, #16
 8000d36:	fbbe f6f8 	udiv	r6, lr, r8
 8000d3a:	fa1f f78c 	uxth.w	r7, ip
 8000d3e:	fb08 e316 	mls	r3, r8, r6, lr
 8000d42:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d46:	fb06 f107 	mul.w	r1, r6, r7
 8000d4a:	4299      	cmp	r1, r3
 8000d4c:	d90a      	bls.n	8000d64 <__udivmoddi4+0x64>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d56:	f080 811f 	bcs.w	8000f98 <__udivmoddi4+0x298>
 8000d5a:	4299      	cmp	r1, r3
 8000d5c:	f240 811c 	bls.w	8000f98 <__udivmoddi4+0x298>
 8000d60:	3e02      	subs	r6, #2
 8000d62:	4463      	add	r3, ip
 8000d64:	1a5b      	subs	r3, r3, r1
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d74:	fb00 f707 	mul.w	r7, r0, r7
 8000d78:	42a7      	cmp	r7, r4
 8000d7a:	d90a      	bls.n	8000d92 <__udivmoddi4+0x92>
 8000d7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d80:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d84:	f080 810a 	bcs.w	8000f9c <__udivmoddi4+0x29c>
 8000d88:	42a7      	cmp	r7, r4
 8000d8a:	f240 8107 	bls.w	8000f9c <__udivmoddi4+0x29c>
 8000d8e:	4464      	add	r4, ip
 8000d90:	3802      	subs	r0, #2
 8000d92:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d96:	1be4      	subs	r4, r4, r7
 8000d98:	2600      	movs	r6, #0
 8000d9a:	b11d      	cbz	r5, 8000da4 <__udivmoddi4+0xa4>
 8000d9c:	40d4      	lsrs	r4, r2
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e9c5 4300 	strd	r4, r3, [r5]
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	428b      	cmp	r3, r1
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0xc2>
 8000dae:	2d00      	cmp	r5, #0
 8000db0:	f000 80ef 	beq.w	8000f92 <__udivmoddi4+0x292>
 8000db4:	2600      	movs	r6, #0
 8000db6:	e9c5 0100 	strd	r0, r1, [r5]
 8000dba:	4630      	mov	r0, r6
 8000dbc:	4631      	mov	r1, r6
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	fab3 f683 	clz	r6, r3
 8000dc6:	2e00      	cmp	r6, #0
 8000dc8:	d14a      	bne.n	8000e60 <__udivmoddi4+0x160>
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d302      	bcc.n	8000dd4 <__udivmoddi4+0xd4>
 8000dce:	4282      	cmp	r2, r0
 8000dd0:	f200 80f9 	bhi.w	8000fc6 <__udivmoddi4+0x2c6>
 8000dd4:	1a84      	subs	r4, r0, r2
 8000dd6:	eb61 0303 	sbc.w	r3, r1, r3
 8000dda:	2001      	movs	r0, #1
 8000ddc:	469e      	mov	lr, r3
 8000dde:	2d00      	cmp	r5, #0
 8000de0:	d0e0      	beq.n	8000da4 <__udivmoddi4+0xa4>
 8000de2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000de6:	e7dd      	b.n	8000da4 <__udivmoddi4+0xa4>
 8000de8:	b902      	cbnz	r2, 8000dec <__udivmoddi4+0xec>
 8000dea:	deff      	udf	#255	; 0xff
 8000dec:	fab2 f282 	clz	r2, r2
 8000df0:	2a00      	cmp	r2, #0
 8000df2:	f040 8092 	bne.w	8000f1a <__udivmoddi4+0x21a>
 8000df6:	eba1 010c 	sub.w	r1, r1, ip
 8000dfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	2601      	movs	r6, #1
 8000e04:	0c20      	lsrs	r0, r4, #16
 8000e06:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e0a:	fb07 1113 	mls	r1, r7, r3, r1
 8000e0e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e12:	fb0e f003 	mul.w	r0, lr, r3
 8000e16:	4288      	cmp	r0, r1
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x12c>
 8000e1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x12a>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f200 80cb 	bhi.w	8000fc0 <__udivmoddi4+0x2c0>
 8000e2a:	4643      	mov	r3, r8
 8000e2c:	1a09      	subs	r1, r1, r0
 8000e2e:	b2a4      	uxth	r4, r4
 8000e30:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e34:	fb07 1110 	mls	r1, r7, r0, r1
 8000e38:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e40:	45a6      	cmp	lr, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x156>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e4c:	d202      	bcs.n	8000e54 <__udivmoddi4+0x154>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f200 80bb 	bhi.w	8000fca <__udivmoddi4+0x2ca>
 8000e54:	4608      	mov	r0, r1
 8000e56:	eba4 040e 	sub.w	r4, r4, lr
 8000e5a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e5e:	e79c      	b.n	8000d9a <__udivmoddi4+0x9a>
 8000e60:	f1c6 0720 	rsb	r7, r6, #32
 8000e64:	40b3      	lsls	r3, r6
 8000e66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e6e:	fa20 f407 	lsr.w	r4, r0, r7
 8000e72:	fa01 f306 	lsl.w	r3, r1, r6
 8000e76:	431c      	orrs	r4, r3
 8000e78:	40f9      	lsrs	r1, r7
 8000e7a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e7e:	fa00 f306 	lsl.w	r3, r0, r6
 8000e82:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e86:	0c20      	lsrs	r0, r4, #16
 8000e88:	fa1f fe8c 	uxth.w	lr, ip
 8000e8c:	fb09 1118 	mls	r1, r9, r8, r1
 8000e90:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e94:	fb08 f00e 	mul.w	r0, r8, lr
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	fa02 f206 	lsl.w	r2, r2, r6
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b8>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea8:	f080 8088 	bcs.w	8000fbc <__udivmoddi4+0x2bc>
 8000eac:	4288      	cmp	r0, r1
 8000eae:	f240 8085 	bls.w	8000fbc <__udivmoddi4+0x2bc>
 8000eb2:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb6:	4461      	add	r1, ip
 8000eb8:	1a09      	subs	r1, r1, r0
 8000eba:	b2a4      	uxth	r4, r4
 8000ebc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ec0:	fb09 1110 	mls	r1, r9, r0, r1
 8000ec4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ec8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ecc:	458e      	cmp	lr, r1
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1e2>
 8000ed0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ed8:	d26c      	bcs.n	8000fb4 <__udivmoddi4+0x2b4>
 8000eda:	458e      	cmp	lr, r1
 8000edc:	d96a      	bls.n	8000fb4 <__udivmoddi4+0x2b4>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	4461      	add	r1, ip
 8000ee2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ee6:	fba0 9402 	umull	r9, r4, r0, r2
 8000eea:	eba1 010e 	sub.w	r1, r1, lr
 8000eee:	42a1      	cmp	r1, r4
 8000ef0:	46c8      	mov	r8, r9
 8000ef2:	46a6      	mov	lr, r4
 8000ef4:	d356      	bcc.n	8000fa4 <__udivmoddi4+0x2a4>
 8000ef6:	d053      	beq.n	8000fa0 <__udivmoddi4+0x2a0>
 8000ef8:	b15d      	cbz	r5, 8000f12 <__udivmoddi4+0x212>
 8000efa:	ebb3 0208 	subs.w	r2, r3, r8
 8000efe:	eb61 010e 	sbc.w	r1, r1, lr
 8000f02:	fa01 f707 	lsl.w	r7, r1, r7
 8000f06:	fa22 f306 	lsr.w	r3, r2, r6
 8000f0a:	40f1      	lsrs	r1, r6
 8000f0c:	431f      	orrs	r7, r3
 8000f0e:	e9c5 7100 	strd	r7, r1, [r5]
 8000f12:	2600      	movs	r6, #0
 8000f14:	4631      	mov	r1, r6
 8000f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1a:	f1c2 0320 	rsb	r3, r2, #32
 8000f1e:	40d8      	lsrs	r0, r3
 8000f20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f24:	fa21 f303 	lsr.w	r3, r1, r3
 8000f28:	4091      	lsls	r1, r2
 8000f2a:	4301      	orrs	r1, r0
 8000f2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f30:	fa1f fe8c 	uxth.w	lr, ip
 8000f34:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f38:	fb07 3610 	mls	r6, r7, r0, r3
 8000f3c:	0c0b      	lsrs	r3, r1, #16
 8000f3e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f42:	fb00 f60e 	mul.w	r6, r0, lr
 8000f46:	429e      	cmp	r6, r3
 8000f48:	fa04 f402 	lsl.w	r4, r4, r2
 8000f4c:	d908      	bls.n	8000f60 <__udivmoddi4+0x260>
 8000f4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f56:	d22f      	bcs.n	8000fb8 <__udivmoddi4+0x2b8>
 8000f58:	429e      	cmp	r6, r3
 8000f5a:	d92d      	bls.n	8000fb8 <__udivmoddi4+0x2b8>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4463      	add	r3, ip
 8000f60:	1b9b      	subs	r3, r3, r6
 8000f62:	b289      	uxth	r1, r1
 8000f64:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f68:	fb07 3316 	mls	r3, r7, r6, r3
 8000f6c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f70:	fb06 f30e 	mul.w	r3, r6, lr
 8000f74:	428b      	cmp	r3, r1
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x28a>
 8000f78:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f80:	d216      	bcs.n	8000fb0 <__udivmoddi4+0x2b0>
 8000f82:	428b      	cmp	r3, r1
 8000f84:	d914      	bls.n	8000fb0 <__udivmoddi4+0x2b0>
 8000f86:	3e02      	subs	r6, #2
 8000f88:	4461      	add	r1, ip
 8000f8a:	1ac9      	subs	r1, r1, r3
 8000f8c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f90:	e738      	b.n	8000e04 <__udivmoddi4+0x104>
 8000f92:	462e      	mov	r6, r5
 8000f94:	4628      	mov	r0, r5
 8000f96:	e705      	b.n	8000da4 <__udivmoddi4+0xa4>
 8000f98:	4606      	mov	r6, r0
 8000f9a:	e6e3      	b.n	8000d64 <__udivmoddi4+0x64>
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	e6f8      	b.n	8000d92 <__udivmoddi4+0x92>
 8000fa0:	454b      	cmp	r3, r9
 8000fa2:	d2a9      	bcs.n	8000ef8 <__udivmoddi4+0x1f8>
 8000fa4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fac:	3801      	subs	r0, #1
 8000fae:	e7a3      	b.n	8000ef8 <__udivmoddi4+0x1f8>
 8000fb0:	4646      	mov	r6, r8
 8000fb2:	e7ea      	b.n	8000f8a <__udivmoddi4+0x28a>
 8000fb4:	4620      	mov	r0, r4
 8000fb6:	e794      	b.n	8000ee2 <__udivmoddi4+0x1e2>
 8000fb8:	4640      	mov	r0, r8
 8000fba:	e7d1      	b.n	8000f60 <__udivmoddi4+0x260>
 8000fbc:	46d0      	mov	r8, sl
 8000fbe:	e77b      	b.n	8000eb8 <__udivmoddi4+0x1b8>
 8000fc0:	3b02      	subs	r3, #2
 8000fc2:	4461      	add	r1, ip
 8000fc4:	e732      	b.n	8000e2c <__udivmoddi4+0x12c>
 8000fc6:	4630      	mov	r0, r6
 8000fc8:	e709      	b.n	8000dde <__udivmoddi4+0xde>
 8000fca:	4464      	add	r4, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e742      	b.n	8000e56 <__udivmoddi4+0x156>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <__io_putchar>:
PUTCHAR_PROTOTYPE {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8000fdc:	1d39      	adds	r1, r7, #4
 8000fde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	4803      	ldr	r0, [pc, #12]	; (8000ff4 <__io_putchar+0x20>)
 8000fe6:	f00a f8ab 	bl	800b140 <HAL_UART_Transmit>
	return ch;
 8000fea:	687b      	ldr	r3, [r7, #4]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000450 	.word	0x20000450

08000ff8 <HAL_LPTIM_AutoReloadMatchCallback>:
//		}
//
//	}
//}

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin); //toggle green LED
 8001000:	2101      	movs	r1, #1
 8001002:	4803      	ldr	r0, [pc, #12]	; (8001010 <HAL_LPTIM_AutoReloadMatchCallback+0x18>)
 8001004:	f003 ff27 	bl	8004e56 <HAL_GPIO_TogglePin>
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	58020400 	.word	0x58020400

08001014 <HAL_HRTIM_Compare2EventCallback>:

void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]

	/* Called when the first microwave pulse goes low */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_E) {
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	2b04      	cmp	r3, #4
 8001022:	d11e      	bne.n	8001062 <HAL_HRTIM_Compare2EventCallback+0x4e>
#ifdef ATTENUATOR_CODE
		/* Configure the LASER AOM drive attenuator */
		const struct AttenuatorSettings a = {0,0,0,0,0,1,0}; // 8 dB
 8001024:	7b3b      	ldrb	r3, [r7, #12]
 8001026:	f36f 0300 	bfc	r3, #0, #1
 800102a:	733b      	strb	r3, [r7, #12]
 800102c:	7b3b      	ldrb	r3, [r7, #12]
 800102e:	f36f 0341 	bfc	r3, #1, #1
 8001032:	733b      	strb	r3, [r7, #12]
 8001034:	7b3b      	ldrb	r3, [r7, #12]
 8001036:	f36f 0382 	bfc	r3, #2, #1
 800103a:	733b      	strb	r3, [r7, #12]
 800103c:	7b3b      	ldrb	r3, [r7, #12]
 800103e:	f36f 03c3 	bfc	r3, #3, #1
 8001042:	733b      	strb	r3, [r7, #12]
 8001044:	7b3b      	ldrb	r3, [r7, #12]
 8001046:	f36f 1304 	bfc	r3, #4, #1
 800104a:	733b      	strb	r3, [r7, #12]
 800104c:	7b3b      	ldrb	r3, [r7, #12]
 800104e:	f043 0320 	orr.w	r3, r3, #32
 8001052:	733b      	strb	r3, [r7, #12]
 8001054:	7b3b      	ldrb	r3, [r7, #12]
 8001056:	f36f 1386 	bfc	r3, #6, #1
 800105a:	733b      	strb	r3, [r7, #12]
		set_aom_atten(a);
 800105c:	7b38      	ldrb	r0, [r7, #12]
 800105e:	f00d febf 	bl	800ede0 <__set_aom_atten_veneer>
#endif //ATTENUATOR_CODE
	}

}
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <HAL_HRTIM_Compare3EventCallback>:

void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]

	/* Called at the end of a POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d175      	bne.n	8001168 <HAL_HRTIM_Compare3EventCallback+0xfc>
#ifdef ATTENUATOR_CODE
		/* Reset the attenuator to 0 dB */
		const struct AttenuatorSettings a = { 0, 0, 0, 0, 0, 0, 0 }; // 0 dB
 800107c:	2300      	movs	r3, #0
 800107e:	723b      	strb	r3, [r7, #8]
		set_aom_atten(a);
 8001080:	7a38      	ldrb	r0, [r7, #8]
 8001082:	f00d fead 	bl	800ede0 <__set_aom_atten_veneer>
#endif //ATTENUATOR_CODE

		const double start_freq = ((long)(sweep_settings.req_start_freq/sweep_settings.step_size)) * sweep_settings.step_size;
 8001086:	4b3a      	ldr	r3, [pc, #232]	; (8001170 <HAL_HRTIM_Compare3EventCallback+0x104>)
 8001088:	ed93 5b00 	vldr	d5, [r3]
 800108c:	4b38      	ldr	r3, [pc, #224]	; (8001170 <HAL_HRTIM_Compare3EventCallback+0x104>)
 800108e:	ed93 6b04 	vldr	d6, [r3, #16]
 8001092:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001096:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800109a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800109e:	4b34      	ldr	r3, [pc, #208]	; (8001170 <HAL_HRTIM_Compare3EventCallback+0x104>)
 80010a0:	ed93 7b04 	vldr	d7, [r3, #16]
 80010a4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80010a8:	ed87 7b06 	vstr	d7, [r7, #24]
		const double stop_freq = ((long)((sweep_settings.req_stop_freq/sweep_settings.step_size) + 0.5)) * sweep_settings.step_size;
 80010ac:	4b30      	ldr	r3, [pc, #192]	; (8001170 <HAL_HRTIM_Compare3EventCallback+0x104>)
 80010ae:	ed93 5b02 	vldr	d5, [r3, #8]
 80010b2:	4b2f      	ldr	r3, [pc, #188]	; (8001170 <HAL_HRTIM_Compare3EventCallback+0x104>)
 80010b4:	ed93 6b04 	vldr	d6, [r3, #16]
 80010b8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80010bc:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80010c0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80010c4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80010c8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80010cc:	4b28      	ldr	r3, [pc, #160]	; (8001170 <HAL_HRTIM_Compare3EventCallback+0x104>)
 80010ce:	ed93 7b04 	vldr	d7, [r3, #16]
 80010d2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80010d6:	ed87 7b04 	vstr	d7, [r7, #16]
		const uint32_t num_points = ((stop_freq - start_freq)/sweep_settings.step_size) + 1;
 80010da:	ed97 6b04 	vldr	d6, [r7, #16]
 80010de:	ed97 7b06 	vldr	d7, [r7, #24]
 80010e2:	ee36 5b47 	vsub.f64	d5, d6, d7
 80010e6:	4b22      	ldr	r3, [pc, #136]	; (8001170 <HAL_HRTIM_Compare3EventCallback+0x104>)
 80010e8:	ed93 6b04 	vldr	d6, [r3, #16]
 80010ec:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80010f0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80010f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80010f8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80010fc:	ee17 3a90 	vmov	r3, s15
 8001100:	60fb      	str	r3, [r7, #12]
//		static const double stop_freq = ((long)((sweep_settings.req_stop_freq/sweep_settings.step_size) + 0.5)) * sweep_settings.step_size;
//		static const uint32_t num_points = ((stop_freq - start_freq)/sweep_settings.step_size) + 1;
		static uint32_t i = 0;

		/* Configure the Microwave frequency */
		if (i == num_points) {
 8001102:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <HAL_HRTIM_Compare3EventCallback+0x108>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	429a      	cmp	r2, r3
 800110a:	d106      	bne.n	800111a <HAL_HRTIM_Compare3EventCallback+0xae>
			stop_pop();
 800110c:	f00d fe7c 	bl	800ee08 <__stop_pop_veneer>
			i = 0;
 8001110:	4b18      	ldr	r3, [pc, #96]	; (8001174 <HAL_HRTIM_Compare3EventCallback+0x108>)
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
			start_pop();
 8001116:	f00d fe73 	bl	800ee00 <__start_pop_veneer>
		}

#ifdef SYNTH_ENABLE
		set_frequency_hz(start_freq + (i * sweep_settings.step_size));
 800111a:	4b16      	ldr	r3, [pc, #88]	; (8001174 <HAL_HRTIM_Compare3EventCallback+0x108>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	ee07 3a90 	vmov	s15, r3
 8001122:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001126:	4b12      	ldr	r3, [pc, #72]	; (8001170 <HAL_HRTIM_Compare3EventCallback+0x104>)
 8001128:	ed93 7b04 	vldr	d7, [r3, #16]
 800112c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001130:	ed97 7b06 	vldr	d7, [r7, #24]
 8001134:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001138:	eeb0 0b47 	vmov.f64	d0, d7
 800113c:	f00d fe4c 	bl	800edd8 <__set_frequency_hz_veneer>
#endif

		i = i + 1;
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <HAL_HRTIM_Compare3EventCallback+0x108>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	3301      	adds	r3, #1
 8001146:	4a0b      	ldr	r2, [pc, #44]	; (8001174 <HAL_HRTIM_Compare3EventCallback+0x108>)
 8001148:	6013      	str	r3, [r2, #0]

		pop_cycle_count = pop_cycle_count + 1;
 800114a:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <HAL_HRTIM_Compare3EventCallback+0x10c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	3301      	adds	r3, #1
 8001150:	4a09      	ldr	r2, [pc, #36]	; (8001178 <HAL_HRTIM_Compare3EventCallback+0x10c>)
 8001152:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); //toggle amber LED
 8001154:	2102      	movs	r1, #2
 8001156:	4809      	ldr	r0, [pc, #36]	; (800117c <HAL_HRTIM_Compare3EventCallback+0x110>)
 8001158:	f003 fe7d 	bl	8004e56 <HAL_GPIO_TogglePin>
		printf("POP Cycle %lu done.\r\n", pop_cycle_count);
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_HRTIM_Compare3EventCallback+0x10c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4619      	mov	r1, r3
 8001162:	4807      	ldr	r0, [pc, #28]	; (8001180 <HAL_HRTIM_Compare3EventCallback+0x114>)
 8001164:	f00b fd82 	bl	800cc6c <iprintf>

	/* Called when the second microwave pulse goes high */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_E) {
	}

}
 8001168:	bf00      	nop
 800116a:	3720      	adds	r7, #32
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	0800f2d8 	.word	0x0800f2d8
 8001174:	200004f8 	.word	0x200004f8
 8001178:	200004e8 	.word	0x200004e8
 800117c:	58021000 	.word	0x58021000
 8001180:	0800eed0 	.word	0x0800eed0

08001184 <HAL_HRTIM_RepetitionEventCallback>:

void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef *hhrtim,
		uint32_t TimerIdx) {
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]

	/* Called at the start of the next POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
	}
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* Copy from FLASH to itcm */
  memcpy(&_sitcm, &_siitcm, ((void*) &_eitcm - (void*) &_sitcm));
 80011a2:	4a98      	ldr	r2, [pc, #608]	; (8001404 <main+0x268>)
 80011a4:	4b98      	ldr	r3, [pc, #608]	; (8001408 <main+0x26c>)
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	461a      	mov	r2, r3
 80011aa:	4998      	ldr	r1, [pc, #608]	; (800140c <main+0x270>)
 80011ac:	4896      	ldr	r0, [pc, #600]	; (8001408 <main+0x26c>)
 80011ae:	f00b f905 	bl	800c3bc <memcpy>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80011b2:	4b97      	ldr	r3, [pc, #604]	; (8001410 <main+0x274>)
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d11b      	bne.n	80011f6 <main+0x5a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80011be:	f3bf 8f4f 	dsb	sy
}
 80011c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011c4:	f3bf 8f6f 	isb	sy
}
 80011c8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011ca:	4b91      	ldr	r3, [pc, #580]	; (8001410 <main+0x274>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011d2:	f3bf 8f4f 	dsb	sy
}
 80011d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011d8:	f3bf 8f6f 	isb	sy
}
 80011dc:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80011de:	4b8c      	ldr	r3, [pc, #560]	; (8001410 <main+0x274>)
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	4a8b      	ldr	r2, [pc, #556]	; (8001410 <main+0x274>)
 80011e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80011ea:	f3bf 8f4f 	dsb	sy
}
 80011ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011f0:	f3bf 8f6f 	isb	sy
}
 80011f4:	e000      	b.n	80011f8 <main+0x5c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80011f6:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80011f8:	4b85      	ldr	r3, [pc, #532]	; (8001410 <main+0x274>)
 80011fa:	695b      	ldr	r3, [r3, #20]
 80011fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d138      	bne.n	8001276 <main+0xda>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001204:	4b82      	ldr	r3, [pc, #520]	; (8001410 <main+0x274>)
 8001206:	2200      	movs	r2, #0
 8001208:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800120c:	f3bf 8f4f 	dsb	sy
}
 8001210:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001212:	4b7f      	ldr	r3, [pc, #508]	; (8001410 <main+0x274>)
 8001214:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001218:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	0b5b      	lsrs	r3, r3, #13
 800121e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001222:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	08db      	lsrs	r3, r3, #3
 8001228:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800122c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	015a      	lsls	r2, r3, #5
 8001232:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001236:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800123c:	4974      	ldr	r1, [pc, #464]	; (8001410 <main+0x274>)
 800123e:	4313      	orrs	r3, r2
 8001240:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	1e5a      	subs	r2, r3, #1
 8001248:	607a      	str	r2, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1ef      	bne.n	800122e <main+0x92>
    } while(sets-- != 0U);
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	1e5a      	subs	r2, r3, #1
 8001252:	60ba      	str	r2, [r7, #8]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1e5      	bne.n	8001224 <main+0x88>
  __ASM volatile ("dsb 0xF":::"memory");
 8001258:	f3bf 8f4f 	dsb	sy
}
 800125c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800125e:	4b6c      	ldr	r3, [pc, #432]	; (8001410 <main+0x274>)
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	4a6b      	ldr	r2, [pc, #428]	; (8001410 <main+0x274>)
 8001264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001268:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800126a:	f3bf 8f4f 	dsb	sy
}
 800126e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001270:	f3bf 8f6f 	isb	sy
}
 8001274:	e000      	b.n	8001278 <main+0xdc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001276:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001278:	f001 fae6 	bl	8002848 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800127c:	f000 f8fa 	bl	8001474 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001280:	f000 fcba 	bl	8001bf8 <MX_GPIO_Init>
  MX_LPTIM1_Init();
 8001284:	f000 fb9a 	bl	80019bc <MX_LPTIM1_Init>
  MX_DAC1_Init();
 8001288:	f000 fa14 	bl	80016b4 <MX_DAC1_Init>
  MX_USART3_UART_Init();
 800128c:	f000 fc66 	bl	8001b5c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001290:	f000 fc16 	bl	8001ac0 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001294:	f000 fbc0 	bl	8001a18 <MX_TIM1_Init>
  MX_HRTIM_Init();
 8001298:	f000 fa3e 	bl	8001718 <MX_HRTIM_Init>
  MX_ADC3_Init();
 800129c:	f000 f9a8 	bl	80015f0 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  printf("\033c"); //clears screen
 80012a0:	485c      	ldr	r0, [pc, #368]	; (8001414 <main+0x278>)
 80012a2:	f00b fce3 	bl	800cc6c <iprintf>
  printf("Atomic Clock - Source __TIMESTAMP__: %s\r\n", __TIMESTAMP__);
 80012a6:	495c      	ldr	r1, [pc, #368]	; (8001418 <main+0x27c>)
 80012a8:	485c      	ldr	r0, [pc, #368]	; (800141c <main+0x280>)
 80012aa:	f00b fcdf 	bl	800cc6c <iprintf>

#ifdef SYNTH_ENABLE
	if (init_synthesiser(MW_power) != SUCCESS) {
 80012ae:	4b5c      	ldr	r3, [pc, #368]	; (8001420 <main+0x284>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f00d fd9c 	bl	800edf0 <__init_synthesiser_veneer>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d004      	beq.n	80012c8 <main+0x12c>
		printf("Synthesiser initialisation failed!\r\n");
 80012be:	4859      	ldr	r0, [pc, #356]	; (8001424 <main+0x288>)
 80012c0:	f00b fd5a 	bl	800cd78 <puts>
		Error_Handler();
 80012c4:	f000 fe58 	bl	8001f78 <Error_Handler>
	}
#endif

	/* Start a low power timer to flash an LED approximately every second */
	if (HAL_LPTIM_Counter_Start_IT(&hlptim1, 1024) != HAL_OK) {
 80012c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012cc:	4856      	ldr	r0, [pc, #344]	; (8001428 <main+0x28c>)
 80012ce:	f005 fad1 	bl	8006874 <HAL_LPTIM_Counter_Start_IT>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d004      	beq.n	80012e2 <main+0x146>
		printf("Failed to start slow flashing LED!\r\n");
 80012d8:	4854      	ldr	r0, [pc, #336]	; (800142c <main+0x290>)
 80012da:	f00b fd4d 	bl	800cd78 <puts>
		Error_Handler();
 80012de:	f000 fe4b 	bl	8001f78 <Error_Handler>
	}

	/* Start the DAC and zero its output */
	if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK) {
 80012e2:	2100      	movs	r1, #0
 80012e4:	4852      	ldr	r0, [pc, #328]	; (8001430 <main+0x294>)
 80012e6:	f003 fa20 	bl	800472a <HAL_DAC_Start>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d004      	beq.n	80012fa <main+0x15e>
		printf("Failure to initialise DAC \r\n");
 80012f0:	4850      	ldr	r0, [pc, #320]	; (8001434 <main+0x298>)
 80012f2:	f00b fd41 	bl	800cd78 <puts>
		Error_Handler();
 80012f6:	f000 fe3f 	bl	8001f78 <Error_Handler>
	}
	printf("Setting DAC output to 1.00V \r\n");
 80012fa:	484f      	ldr	r0, [pc, #316]	; (8001438 <main+0x29c>)
 80012fc:	f00b fd3c 	bl	800cd78 <puts>
	if(HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1241) != HAL_OK){
 8001300:	f240 43d9 	movw	r3, #1241	; 0x4d9
 8001304:	2200      	movs	r2, #0
 8001306:	2100      	movs	r1, #0
 8001308:	4849      	ldr	r0, [pc, #292]	; (8001430 <main+0x294>)
 800130a:	f003 fa60 	bl	80047ce <HAL_DAC_SetValue>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d004      	beq.n	800131e <main+0x182>
			printf("DAC setup failed!\r\n");
 8001314:	4849      	ldr	r0, [pc, #292]	; (800143c <main+0x2a0>)
 8001316:	f00b fd2f 	bl	800cd78 <puts>
		Error_Handler();
 800131a:	f000 fe2d 	bl	8001f78 <Error_Handler>
//	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
//	printf("Setting trigger output low \r\n");

	/* Spare SMA pin */
//	SPARE_SMA_GPIO_Port, SPARE_SMA_Pin
	HAL_GPIO_WritePin(SPARE_SMA_GPIO_Port, SPARE_SMA_Pin, GPIO_PIN_SET); // Sets spare SMA output high
 800131e:	2201      	movs	r2, #1
 8001320:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001324:	4846      	ldr	r0, [pc, #280]	; (8001440 <main+0x2a4>)
 8001326:	f003 fd7d 	bl	8004e24 <HAL_GPIO_WritePin>
	printf("Setting spare SMA output high \r\n");
 800132a:	4846      	ldr	r0, [pc, #280]	; (8001444 <main+0x2a8>)
 800132c:	f00b fd24 	bl	800cd78 <puts>
//	HAL_GPIO_WritePin(SPARE_SMA_GPIO_Port, SPARE_SMA_Pin, GPIO_PIN_RESET); // Sets spare SMA output low

	/* Fire up the ADC */
	// external trigger, single conversion selected in ioc file
	// calibrate ADC for better accuracy and start it w/ interrupt
	if(HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK){
 8001330:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001334:	2100      	movs	r1, #0
 8001336:	4844      	ldr	r0, [pc, #272]	; (8001448 <main+0x2ac>)
 8001338:	f003 f830 	bl	800439c <HAL_ADCEx_Calibration_Start>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d004      	beq.n	800134c <main+0x1b0>
		printf("ADC calibration failure \r\n");
 8001342:	4842      	ldr	r0, [pc, #264]	; (800144c <main+0x2b0>)
 8001344:	f00b fd18 	bl	800cd78 <puts>
		Error_Handler();
 8001348:	f000 fe16 	bl	8001f78 <Error_Handler>
	}
	printf("ADC calibrated successfully \r\n");
 800134c:	4840      	ldr	r0, [pc, #256]	; (8001450 <main+0x2b4>)
 800134e:	f00b fd13 	bl	800cd78 <puts>
	//Start the ADC with interrupts enabled
	if(HAL_ADC_Start_IT(&hadc3) != HAL_OK){
 8001352:	483d      	ldr	r0, [pc, #244]	; (8001448 <main+0x2ac>)
 8001354:	f001 ff0e 	bl	8003174 <HAL_ADC_Start_IT>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d004      	beq.n	8001368 <main+0x1cc>
		printf("Failed to start ADC with interrupt capability \r\n");
 800135e:	483d      	ldr	r0, [pc, #244]	; (8001454 <main+0x2b8>)
 8001360:	f00b fd0a 	bl	800cd78 <puts>
	                Error_Handler();
 8001364:	f000 fe08 	bl	8001f78 <Error_Handler>
	}
	printf("ADC interrupt callback enabled \r\n");
 8001368:	483b      	ldr	r0, [pc, #236]	; (8001458 <main+0x2bc>)
 800136a:	f00b fd05 	bl	800cd78 <puts>
//		if (pin_status != last_pin_status) {
//			printf("Blue button status: %u \r\n", pin_status);
//			last_pin_status = pin_status;
//		}

		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 800136e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001372:	483a      	ldr	r0, [pc, #232]	; (800145c <main+0x2c0>)
 8001374:	f003 fd3e 	bl	8004df4 <HAL_GPIO_ReadPin>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	bf14      	ite	ne
 800137e:	2301      	movne	r3, #1
 8001380:	2300      	moveq	r3, #0
 8001382:	b2da      	uxtb	r2, r3
 8001384:	4b36      	ldr	r3, [pc, #216]	; (8001460 <main+0x2c4>)
 8001386:	701a      	strb	r2, [r3, #0]
		if (blue_button_status) {// If blue button is pressed
 8001388:	4b35      	ldr	r3, [pc, #212]	; (8001460 <main+0x2c4>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	d020      	beq.n	80013d4 <main+0x238>
			printf("Blue button pressed....\r\n");
 8001392:	4834      	ldr	r0, [pc, #208]	; (8001464 <main+0x2c8>)
 8001394:	f00b fcf0 	bl	800cd78 <puts>
			//change the MW power each time the button is pressed, unless it's the first time round this loop
			if (mw_sweep_started) {
 8001398:	4b33      	ldr	r3, [pc, #204]	; (8001468 <main+0x2cc>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d00d      	beq.n	80013be <main+0x222>
				++MW_power; //increase MW_power value by 1
 80013a2:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <main+0x284>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	3301      	adds	r3, #1
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <main+0x284>)
 80013ac:	701a      	strb	r2, [r3, #0]
				if (MW_power>3) { //Loop MW_power back round to 0 if above maximum permissible value i.e. 3
 80013ae:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <main+0x284>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b03      	cmp	r3, #3
 80013b4:	d909      	bls.n	80013ca <main+0x22e>
					MW_power = 0;
 80013b6:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <main+0x284>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
 80013bc:	e005      	b.n	80013ca <main+0x22e>
				}
			} else {
					printf("Initiating sweep.\r\n");
 80013be:	482b      	ldr	r0, [pc, #172]	; (800146c <main+0x2d0>)
 80013c0:	f00b fcda 	bl	800cd78 <puts>
					mw_sweep_started = true;
 80013c4:	4b28      	ldr	r3, [pc, #160]	; (8001468 <main+0x2cc>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	701a      	strb	r2, [r3, #0]
			}
			set_MW_power(MW_power);
 80013ca:	4b15      	ldr	r3, [pc, #84]	; (8001420 <main+0x284>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f00d fd1e 	bl	800ee10 <__set_MW_power_veneer>
		}

		if (mw_sweep_started) {//won't execute until the first time the blue button is pressed
 80013d4:	4b24      	ldr	r3, [pc, #144]	; (8001468 <main+0x2cc>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d0c7      	beq.n	800136e <main+0x1d2>
			/* Run the frequency sweep */
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET); //turn on red LED
 80013de:	2201      	movs	r2, #1
 80013e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013e4:	4816      	ldr	r0, [pc, #88]	; (8001440 <main+0x2a4>)
 80013e6:	f003 fd1d 	bl	8004e24 <HAL_GPIO_WritePin>
			run_sweep();
 80013ea:	f00d fd05 	bl	800edf8 <__run_sweep_veneer>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET); //turn off red LED
 80013ee:	2200      	movs	r2, #0
 80013f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013f4:	4812      	ldr	r0, [pc, #72]	; (8001440 <main+0x2a4>)
 80013f6:	f003 fd15 	bl	8004e24 <HAL_GPIO_WritePin>
			printf("Sweep complete.\r\n");
 80013fa:	481d      	ldr	r0, [pc, #116]	; (8001470 <main+0x2d4>)
 80013fc:	f00b fcbc 	bl	800cd78 <puts>
		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 8001400:	e7b5      	b.n	800136e <main+0x1d2>
 8001402:	bf00      	nop
 8001404:	00000948 	.word	0x00000948
 8001408:	00000000 	.word	0x00000000
 800140c:	08000298 	.word	0x08000298
 8001410:	e000ed00 	.word	0xe000ed00
 8001414:	0800eee8 	.word	0x0800eee8
 8001418:	0800eeec 	.word	0x0800eeec
 800141c:	0800ef08 	.word	0x0800ef08
 8001420:	20000004 	.word	0x20000004
 8001424:	0800ef34 	.word	0x0800ef34
 8001428:	20000380 	.word	0x20000380
 800142c:	0800ef58 	.word	0x0800ef58
 8001430:	20000290 	.word	0x20000290
 8001434:	0800ef7c 	.word	0x0800ef7c
 8001438:	0800ef98 	.word	0x0800ef98
 800143c:	0800efb8 	.word	0x0800efb8
 8001440:	58020400 	.word	0x58020400
 8001444:	0800efcc 	.word	0x0800efcc
 8001448:	2000022c 	.word	0x2000022c
 800144c:	0800efec 	.word	0x0800efec
 8001450:	0800f008 	.word	0x0800f008
 8001454:	0800f028 	.word	0x0800f028
 8001458:	0800f058 	.word	0x0800f058
 800145c:	58020800 	.word	0x58020800
 8001460:	200004ec 	.word	0x200004ec
 8001464:	0800f07c 	.word	0x0800f07c
 8001468:	200004e5 	.word	0x200004e5
 800146c:	0800f098 	.word	0x0800f098
 8001470:	0800f0ac 	.word	0x0800f0ac

08001474 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b0a4      	sub	sp, #144	; 0x90
 8001478:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800147a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800147e:	224c      	movs	r2, #76	; 0x4c
 8001480:	2100      	movs	r1, #0
 8001482:	4618      	mov	r0, r3
 8001484:	f00a ffa8 	bl	800c3d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800148c:	2220      	movs	r2, #32
 800148e:	2100      	movs	r1, #0
 8001490:	4618      	mov	r0, r3
 8001492:	f00a ffa1 	bl	800c3d8 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8001496:	f107 030c 	add.w	r3, r7, #12
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
 80014a4:	611a      	str	r2, [r3, #16]
 80014a6:	615a      	str	r2, [r3, #20]

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80014a8:	2002      	movs	r0, #2
 80014aa:	f005 fd43 	bl	8006f34 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	4b4c      	ldr	r3, [pc, #304]	; (80015e4 <SystemClock_Config+0x170>)
 80014b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b6:	4a4b      	ldr	r2, [pc, #300]	; (80015e4 <SystemClock_Config+0x170>)
 80014b8:	f023 0301 	bic.w	r3, r3, #1
 80014bc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80014be:	4b49      	ldr	r3, [pc, #292]	; (80015e4 <SystemClock_Config+0x170>)
 80014c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	4b47      	ldr	r3, [pc, #284]	; (80015e8 <SystemClock_Config+0x174>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	4a46      	ldr	r2, [pc, #280]	; (80015e8 <SystemClock_Config+0x174>)
 80014ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014d2:	6193      	str	r3, [r2, #24]
 80014d4:	4b44      	ldr	r3, [pc, #272]	; (80015e8 <SystemClock_Config+0x174>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80014e0:	bf00      	nop
 80014e2:	4b41      	ldr	r3, [pc, #260]	; (80015e8 <SystemClock_Config+0x174>)
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014ee:	d1f8      	bne.n	80014e2 <SystemClock_Config+0x6e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80014f0:	f005 fd10 	bl	8006f14 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80014f4:	f001 fa5e 	bl	80029b4 <HAL_GetREVID>
 80014f8:	4b3c      	ldr	r3, [pc, #240]	; (80015ec <SystemClock_Config+0x178>)
 80014fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fc:	4a3b      	ldr	r2, [pc, #236]	; (80015ec <SystemClock_Config+0x178>)
 80014fe:	f023 0318 	bic.w	r3, r3, #24
 8001502:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8001504:	2325      	movs	r3, #37	; 0x25
 8001506:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001508:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800150c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800150e:	2301      	movs	r3, #1
 8001510:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001512:	2301      	movs	r3, #1
 8001514:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001516:	2302      	movs	r3, #2
 8001518:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800151a:	2302      	movs	r3, #2
 800151c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800151e:	2301      	movs	r3, #1
 8001520:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001522:	2350      	movs	r3, #80	; 0x50
 8001524:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001526:	2302      	movs	r3, #2
 8001528:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800152a:	2304      	movs	r3, #4
 800152c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800152e:	2302      	movs	r3, #2
 8001530:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001534:	230c      	movs	r3, #12
 8001536:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800153a:	2300      	movs	r3, #0
 800153c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001546:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800154a:	4618      	mov	r0, r3
 800154c:	f005 fd2c 	bl	8006fa8 <HAL_RCC_OscConfig>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001556:	f000 fd0f 	bl	8001f78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800155a:	233f      	movs	r3, #63	; 0x3f
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155e:	2303      	movs	r3, #3
 8001560:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001562:	2300      	movs	r3, #0
 8001564:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 8001566:	2309      	movs	r3, #9
 8001568:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800156a:	2300      	movs	r3, #0
 800156c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800156e:	2300      	movs	r3, #0
 8001570:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV16;
 8001572:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001576:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001578:	2300      	movs	r3, #0
 800157a:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800157c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001580:	2101      	movs	r1, #1
 8001582:	4618      	mov	r0, r3
 8001584:	f006 f96a 	bl	800785c <HAL_RCC_ClockConfig>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <SystemClock_Config+0x11e>
  {
    Error_Handler();
 800158e:	f000 fcf3 	bl	8001f78 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001592:	f006 fb19 	bl	8007bc8 <HAL_RCC_EnableCSS>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <SystemClock_Config+0x178>)
 8001598:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800159c:	4a13      	ldr	r2, [pc, #76]	; (80015ec <SystemClock_Config+0x178>)
 800159e:	f043 0302 	orr.w	r3, r3, #2
 80015a2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80015a6:	4b11      	ldr	r3, [pc, #68]	; (80015ec <SystemClock_Config+0x178>)
 80015a8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 80015b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80015bc:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 80015c2:	f240 53b7 	movw	r3, #1463	; 0x5b7
 80015c6:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 80015c8:	2322      	movs	r3, #34	; 0x22
 80015ca:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 80015cc:	2320      	movs	r3, #32
 80015ce:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 80015d0:	f107 030c 	add.w	r3, r7, #12
 80015d4:	4618      	mov	r0, r3
 80015d6:	f009 f893 	bl	800a700 <HAL_RCCEx_CRSConfig>
}
 80015da:	bf00      	nop
 80015dc:	3790      	adds	r7, #144	; 0x90
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	58000400 	.word	0x58000400
 80015e8:	58024800 	.word	0x58024800
 80015ec:	58024400 	.word	0x58024400

080015f0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
 8001604:	615a      	str	r2, [r3, #20]
 8001606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001608:	4b28      	ldr	r3, [pc, #160]	; (80016ac <MX_ADC3_Init+0xbc>)
 800160a:	4a29      	ldr	r2, [pc, #164]	; (80016b0 <MX_ADC3_Init+0xc0>)
 800160c:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800160e:	4b27      	ldr	r3, [pc, #156]	; (80016ac <MX_ADC3_Init+0xbc>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001614:	4b25      	ldr	r3, [pc, #148]	; (80016ac <MX_ADC3_Init+0xbc>)
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800161a:	4b24      	ldr	r3, [pc, #144]	; (80016ac <MX_ADC3_Init+0xbc>)
 800161c:	2204      	movs	r2, #4
 800161e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001620:	4b22      	ldr	r3, [pc, #136]	; (80016ac <MX_ADC3_Init+0xbc>)
 8001622:	2200      	movs	r2, #0
 8001624:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001626:	4b21      	ldr	r3, [pc, #132]	; (80016ac <MX_ADC3_Init+0xbc>)
 8001628:	2200      	movs	r2, #0
 800162a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 800162c:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <MX_ADC3_Init+0xbc>)
 800162e:	2201      	movs	r2, #1
 8001630:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001632:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <MX_ADC3_Init+0xbc>)
 8001634:	2200      	movs	r2, #0
 8001636:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 8001638:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <MX_ADC3_Init+0xbc>)
 800163a:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800163e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001640:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <MX_ADC3_Init+0xbc>)
 8001642:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001646:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001648:	4b18      	ldr	r3, [pc, #96]	; (80016ac <MX_ADC3_Init+0xbc>)
 800164a:	2200      	movs	r2, #0
 800164c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800164e:	4b17      	ldr	r3, [pc, #92]	; (80016ac <MX_ADC3_Init+0xbc>)
 8001650:	2200      	movs	r2, #0
 8001652:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001654:	4b15      	ldr	r3, [pc, #84]	; (80016ac <MX_ADC3_Init+0xbc>)
 8001656:	2200      	movs	r2, #0
 8001658:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800165a:	4b14      	ldr	r3, [pc, #80]	; (80016ac <MX_ADC3_Init+0xbc>)
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001662:	4812      	ldr	r0, [pc, #72]	; (80016ac <MX_ADC3_Init+0xbc>)
 8001664:	f001 fbe4 	bl	8002e30 <HAL_ADC_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_ADC3_Init+0x82>
  {
    Error_Handler();
 800166e:	f000 fc83 	bl	8001f78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001672:	2301      	movs	r3, #1
 8001674:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001676:	2306      	movs	r3, #6
 8001678:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800167e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001682:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001684:	2304      	movs	r3, #4
 8001686:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800168c:	2300      	movs	r3, #0
 800168e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001690:	1d3b      	adds	r3, r7, #4
 8001692:	4619      	mov	r1, r3
 8001694:	4805      	ldr	r0, [pc, #20]	; (80016ac <MX_ADC3_Init+0xbc>)
 8001696:	f002 f909 	bl	80038ac <HAL_ADC_ConfigChannel>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 80016a0:	f000 fc6a 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80016a4:	bf00      	nop
 80016a6:	3720      	adds	r7, #32
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	2000022c 	.word	0x2000022c
 80016b0:	58026000 	.word	0x58026000

080016b4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	; 0x28
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	2224      	movs	r2, #36	; 0x24
 80016be:	2100      	movs	r1, #0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f00a fe89 	bl	800c3d8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80016c6:	4b12      	ldr	r3, [pc, #72]	; (8001710 <MX_DAC1_Init+0x5c>)
 80016c8:	4a12      	ldr	r2, [pc, #72]	; (8001714 <MX_DAC1_Init+0x60>)
 80016ca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80016cc:	4810      	ldr	r0, [pc, #64]	; (8001710 <MX_DAC1_Init+0x5c>)
 80016ce:	f003 f80a 	bl	80046e6 <HAL_DAC_Init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80016d8:	f000 fc4e 	bl	8001f78 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80016dc:	2300      	movs	r3, #0
 80016de:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80016e8:	2301      	movs	r3, #1
 80016ea:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	2200      	movs	r2, #0
 80016f4:	4619      	mov	r1, r3
 80016f6:	4806      	ldr	r0, [pc, #24]	; (8001710 <MX_DAC1_Init+0x5c>)
 80016f8:	f003 f88e 	bl	8004818 <HAL_DAC_ConfigChannel>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001702:	f000 fc39 	bl	8001f78 <Error_Handler>
//    Error_Handler();
//  }

  /* USER CODE END DAC1_Init 2 */

}
 8001706:	bf00      	nop
 8001708:	3728      	adds	r7, #40	; 0x28
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000290 	.word	0x20000290
 8001714:	40007400 	.word	0x40007400

08001718 <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b0a4      	sub	sp, #144	; 0x90
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 800171e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 800172c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001730:	2254      	movs	r2, #84	; 0x54
 8001732:	2100      	movs	r1, #0
 8001734:	4618      	mov	r0, r3
 8001736:	f00a fe4f 	bl	800c3d8 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 800173a:	f107 0320 	add.w	r3, r7, #32
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8001746:	463b      	mov	r3, r7
 8001748:	2220      	movs	r2, #32
 800174a:	2100      	movs	r1, #0
 800174c:	4618      	mov	r0, r3
 800174e:	f00a fe43 	bl	800c3d8 <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */

  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 8001752:	4b98      	ldr	r3, [pc, #608]	; (80019b4 <MX_HRTIM_Init+0x29c>)
 8001754:	4a98      	ldr	r2, [pc, #608]	; (80019b8 <MX_HRTIM_Init+0x2a0>)
 8001756:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8001758:	4b96      	ldr	r3, [pc, #600]	; (80019b4 <MX_HRTIM_Init+0x29c>)
 800175a:	2200      	movs	r2, #0
 800175c:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 800175e:	4b95      	ldr	r3, [pc, #596]	; (80019b4 <MX_HRTIM_Init+0x29c>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8001764:	4893      	ldr	r0, [pc, #588]	; (80019b4 <MX_HRTIM_Init+0x29c>)
 8001766:	f003 fbb5 	bl	8004ed4 <HAL_HRTIM_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_HRTIM_Init+0x5c>
  {
    Error_Handler();
 8001770:	f000 fc02 	bl	8001f78 <Error_Handler>
  }
  pTimeBaseCfg.Period = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH+POP_CYCLE_DELAY;
 8001774:	f24c 2318 	movw	r3, #49688	; 0xc218
 8001778:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 800177c:	2300      	movs	r3, #0
 800177e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV4;
 8001782:	2307      	movs	r3, #7
 8001784:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8001788:	2308      	movs	r3, #8
 800178a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 800178e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001792:	461a      	mov	r2, r3
 8001794:	2100      	movs	r1, #0
 8001796:	4887      	ldr	r0, [pc, #540]	; (80019b4 <MX_HRTIM_Init+0x29c>)
 8001798:	f003 fc6c 	bl	8005074 <HAL_HRTIM_TimeBaseConfig>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_HRTIM_Init+0x8e>
  {
    Error_Handler();
 80017a2:	f000 fbe9 	bl	8001f78 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP3|HRTIM_TIM_IT_REP;
 80017a6:	2314      	movs	r3, #20
 80017a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 80017aa:	2300      	movs	r3, #0
 80017ac:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 80017ae:	2300      	movs	r3, #0
 80017b0:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 80017b2:	2300      	movs	r3, #0
 80017b4:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 80017b6:	2301      	movs	r3, #1
 80017b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 80017ba:	2300      	movs	r3, #0
 80017bc:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 80017be:	2300      	movs	r3, #0
 80017c0:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 80017c2:	2300      	movs	r3, #0
 80017c4:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 80017ca:	2300      	movs	r3, #0
 80017cc:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 80017ce:	2300      	movs	r3, #0
 80017d0:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 80017d2:	2300      	movs	r3, #0
 80017d4:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 80017d6:	2300      	movs	r3, #0
 80017d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 80017da:	2300      	movs	r3, #0
 80017dc:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 80017de:	2300      	movs	r3, #0
 80017e0:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 80017e6:	2300      	movs	r3, #0
 80017e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 80017ea:	2300      	movs	r3, #0
 80017ec:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 80017f2:	2300      	movs	r3, #0
 80017f4:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 80017f6:	2300      	movs	r3, #0
 80017f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 80017fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017fe:	461a      	mov	r2, r3
 8001800:	2100      	movs	r1, #0
 8001802:	486c      	ldr	r0, [pc, #432]	; (80019b4 <MX_HRTIM_Init+0x29c>)
 8001804:	f003 fc5e 	bl	80050c4 <HAL_HRTIM_WaveformTimerConfig>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_HRTIM_Init+0xfa>
  {
    Error_Handler();
 800180e:	f000 fbb3 	bl	8001f78 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP2|HRTIM_TIM_IT_CMP3;
 8001812:	2306      	movs	r3, #6
 8001814:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8001816:	2300      	movs	r3, #0
 8001818:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 800181a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800181e:	461a      	mov	r2, r3
 8001820:	2104      	movs	r1, #4
 8001822:	4864      	ldr	r0, [pc, #400]	; (80019b4 <MX_HRTIM_Init+0x29c>)
 8001824:	f003 fc4e 	bl	80050c4 <HAL_HRTIM_WaveformTimerConfig>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_HRTIM_Init+0x11a>
  {
    Error_Handler();
 800182e:	f000 fba3 	bl	8001f78 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH;
 8001832:	f240 631b 	movw	r3, #1563	; 0x61b
 8001836:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8001838:	f107 0320 	add.w	r3, r7, #32
 800183c:	2201      	movs	r2, #1
 800183e:	2100      	movs	r1, #0
 8001840:	485c      	ldr	r0, [pc, #368]	; (80019b4 <MX_HRTIM_Init+0x29c>)
 8001842:	f003 fcb1 	bl	80051a8 <HAL_HRTIM_WaveformCompareConfig>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_HRTIM_Init+0x138>
  {
    Error_Handler();
 800184c:	f000 fb94 	bl	8001f78 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME;
 8001850:	f244 5395 	movw	r3, #17813	; 0x4595
 8001854:	623b      	str	r3, [r7, #32]
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8001856:	2300      	movs	r3, #0
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 800185a:	2300      	movs	r3, #0
 800185c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 800185e:	f107 0320 	add.w	r3, r7, #32
 8001862:	2202      	movs	r2, #2
 8001864:	2100      	movs	r1, #0
 8001866:	4853      	ldr	r0, [pc, #332]	; (80019b4 <MX_HRTIM_Init+0x29c>)
 8001868:	f003 fc9e 	bl	80051a8 <HAL_HRTIM_WaveformCompareConfig>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_HRTIM_Init+0x15e>
  {
    Error_Handler();
 8001872:	f000 fb81 	bl	8001f78 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH;
 8001876:	f640 536e 	movw	r3, #3438	; 0xd6e
 800187a:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 800187c:	f107 0320 	add.w	r3, r7, #32
 8001880:	2202      	movs	r2, #2
 8001882:	2104      	movs	r1, #4
 8001884:	484b      	ldr	r0, [pc, #300]	; (80019b4 <MX_HRTIM_Init+0x29c>)
 8001886:	f003 fc8f 	bl	80051a8 <HAL_HRTIM_WaveformCompareConfig>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_HRTIM_Init+0x17c>
  {
    Error_Handler();
 8001890:	f000 fb72 	bl	8001f78 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH;
 8001894:	f644 0306 	movw	r3, #18438	; 0x4806
 8001898:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 800189a:	f107 0320 	add.w	r3, r7, #32
 800189e:	2204      	movs	r2, #4
 80018a0:	2100      	movs	r1, #0
 80018a2:	4844      	ldr	r0, [pc, #272]	; (80019b4 <MX_HRTIM_Init+0x29c>)
 80018a4:	f003 fc80 	bl	80051a8 <HAL_HRTIM_WaveformCompareConfig>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_HRTIM_Init+0x19a>
  {
    Error_Handler();
 80018ae:	f000 fb63 	bl	8001f78 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME+MICROWAVE_WIDTH;
 80018b2:	f244 435d 	movw	r3, #17501	; 0x445d
 80018b6:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_4, &pCompareCfg) != HAL_OK)
 80018b8:	f107 0320 	add.w	r3, r7, #32
 80018bc:	2208      	movs	r2, #8
 80018be:	2104      	movs	r1, #4
 80018c0:	483c      	ldr	r0, [pc, #240]	; (80019b4 <MX_HRTIM_Init+0x29c>)
 80018c2:	f003 fc71 	bl	80051a8 <HAL_HRTIM_WaveformCompareConfig>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_HRTIM_Init+0x1b8>
  {
    Error_Handler();
 80018cc:	f000 fb54 	bl	8001f78 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 80018d0:	2302      	movs	r3, #2
 80018d2:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1|HRTIM_OUTPUTSET_TIMCMP3;
 80018d4:	2328      	movs	r3, #40	; 0x28
 80018d6:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMPER;
 80018d8:	2314      	movs	r3, #20
 80018da:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 80018dc:	2300      	movs	r3, #0
 80018de:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 80018e0:	2308      	movs	r3, #8
 80018e2:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 80018f0:	463b      	mov	r3, r7
 80018f2:	2201      	movs	r2, #1
 80018f4:	2100      	movs	r1, #0
 80018f6:	482f      	ldr	r0, [pc, #188]	; (80019b4 <MX_HRTIM_Init+0x29c>)
 80018f8:	f003 fdc4 	bl	8005484 <HAL_HRTIM_WaveformOutputConfig>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_HRTIM_Init+0x1ee>
  {
    Error_Handler();
 8001902:	f000 fb39 	bl	8001f78 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8001906:	2300      	movs	r3, #0
 8001908:	603b      	str	r3, [r7, #0]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMCMP4;
 800190a:	2350      	movs	r3, #80	; 0x50
 800190c:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 8001912:	463b      	mov	r3, r7
 8001914:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001918:	2104      	movs	r1, #4
 800191a:	4826      	ldr	r0, [pc, #152]	; (80019b4 <MX_HRTIM_Init+0x29c>)
 800191c:	f003 fdb2 	bl	8005484 <HAL_HRTIM_WaveformOutputConfig>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_HRTIM_Init+0x212>
  {
    Error_Handler();
 8001926:	f000 fb27 	bl	8001f78 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 800192a:	2302      	movs	r3, #2
 800192c:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP3;
 800192e:	2320      	movs	r3, #32
 8001930:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 8001932:	2310      	movs	r3, #16
 8001934:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 8001936:	2308      	movs	r3, #8
 8001938:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 800193a:	463b      	mov	r3, r7
 800193c:	2202      	movs	r2, #2
 800193e:	2100      	movs	r1, #0
 8001940:	481c      	ldr	r0, [pc, #112]	; (80019b4 <MX_HRTIM_Init+0x29c>)
 8001942:	f003 fd9f 	bl	8005484 <HAL_HRTIM_WaveformOutputConfig>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_HRTIM_Init+0x238>
  {
    Error_Handler();
 800194c:	f000 fb14 	bl	8001f78 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8001950:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001954:	461a      	mov	r2, r3
 8001956:	2104      	movs	r1, #4
 8001958:	4816      	ldr	r0, [pc, #88]	; (80019b4 <MX_HRTIM_Init+0x29c>)
 800195a:	f003 fb8b 	bl	8005074 <HAL_HRTIM_TimeBaseConfig>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_HRTIM_Init+0x250>
  {
    Error_Handler();
 8001964:	f000 fb08 	bl	8001f78 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY;
 8001968:	f240 7353 	movw	r3, #1875	; 0x753
 800196c:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 800196e:	f107 0320 	add.w	r3, r7, #32
 8001972:	2201      	movs	r2, #1
 8001974:	2104      	movs	r1, #4
 8001976:	480f      	ldr	r0, [pc, #60]	; (80019b4 <MX_HRTIM_Init+0x29c>)
 8001978:	f003 fc16 	bl	80051a8 <HAL_HRTIM_WaveformCompareConfig>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_HRTIM_Init+0x26e>
  {
    Error_Handler();
 8001982:	f000 faf9 	bl	8001f78 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME;
 8001986:	f643 6342 	movw	r3, #15938	; 0x3e42
 800198a:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 800198c:	f107 0320 	add.w	r3, r7, #32
 8001990:	2204      	movs	r2, #4
 8001992:	2104      	movs	r1, #4
 8001994:	4807      	ldr	r0, [pc, #28]	; (80019b4 <MX_HRTIM_Init+0x29c>)
 8001996:	f003 fc07 	bl	80051a8 <HAL_HRTIM_WaveformCompareConfig>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_HRTIM_Init+0x28c>
  {
    Error_Handler();
 80019a0:	f000 faea 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 80019a4:	4803      	ldr	r0, [pc, #12]	; (80019b4 <MX_HRTIM_Init+0x29c>)
 80019a6:	f000 fc29 	bl	80021fc <HAL_HRTIM_MspPostInit>

}
 80019aa:	bf00      	nop
 80019ac:	3790      	adds	r7, #144	; 0x90
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200002a4 	.word	0x200002a4
 80019b8:	40017400 	.word	0x40017400

080019bc <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80019c0:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <MX_LPTIM1_Init+0x54>)
 80019c2:	4a14      	ldr	r2, [pc, #80]	; (8001a14 <MX_LPTIM1_Init+0x58>)
 80019c4:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80019c6:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <MX_LPTIM1_Init+0x54>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV32;
 80019cc:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <MX_LPTIM1_Init+0x54>)
 80019ce:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80019d2:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80019d4:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <MX_LPTIM1_Init+0x54>)
 80019d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019da:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80019dc:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <MX_LPTIM1_Init+0x54>)
 80019de:	2200      	movs	r2, #0
 80019e0:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80019e2:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <MX_LPTIM1_Init+0x54>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80019e8:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <MX_LPTIM1_Init+0x54>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80019ee:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <MX_LPTIM1_Init+0x54>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <MX_LPTIM1_Init+0x54>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80019fa:	4805      	ldr	r0, [pc, #20]	; (8001a10 <MX_LPTIM1_Init+0x54>)
 80019fc:	f004 fe8a 	bl	8006714 <HAL_LPTIM_Init>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8001a06:	f000 fab7 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000380 	.word	0x20000380
 8001a14:	40002400 	.word	0x40002400

08001a18 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a1e:	f107 0310 	add.w	r3, r7, #16
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a2c:	1d3b      	adds	r3, r7, #4
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a36:	4b20      	ldr	r3, [pc, #128]	; (8001ab8 <MX_TIM1_Init+0xa0>)
 8001a38:	4a20      	ldr	r2, [pc, #128]	; (8001abc <MX_TIM1_Init+0xa4>)
 8001a3a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1249;
 8001a3c:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <MX_TIM1_Init+0xa0>)
 8001a3e:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001a42:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a44:	4b1c      	ldr	r3, [pc, #112]	; (8001ab8 <MX_TIM1_Init+0xa0>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a4a:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <MX_TIM1_Init+0xa0>)
 8001a4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a50:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a52:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <MX_TIM1_Init+0xa0>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a58:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <MX_TIM1_Init+0xa0>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a5e:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <MX_TIM1_Init+0xa0>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a64:	4814      	ldr	r0, [pc, #80]	; (8001ab8 <MX_TIM1_Init+0xa0>)
 8001a66:	f009 f805 	bl	800aa74 <HAL_TIM_Base_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001a70:	f000 fa82 	bl	8001f78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a78:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a7a:	f107 0310 	add.w	r3, r7, #16
 8001a7e:	4619      	mov	r1, r3
 8001a80:	480d      	ldr	r0, [pc, #52]	; (8001ab8 <MX_TIM1_Init+0xa0>)
 8001a82:	f009 f84f 	bl	800ab24 <HAL_TIM_ConfigClockSource>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001a8c:	f000 fa74 	bl	8001f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a90:	2300      	movs	r3, #0
 8001a92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a94:	2300      	movs	r3, #0
 8001a96:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <MX_TIM1_Init+0xa0>)
 8001aa2:	f009 fa6f 	bl	800af84 <HAL_TIMEx_MasterConfigSynchronization>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001aac:	f000 fa64 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ab0:	bf00      	nop
 8001ab2:	3720      	adds	r7, #32
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	200003b8 	.word	0x200003b8
 8001abc:	40010000 	.word	0x40010000

08001ac0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ac6:	f107 0310 	add.w	r3, r7, #16
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ade:	4b1d      	ldr	r3, [pc, #116]	; (8001b54 <MX_TIM3_Init+0x94>)
 8001ae0:	4a1d      	ldr	r2, [pc, #116]	; (8001b58 <MX_TIM3_Init+0x98>)
 8001ae2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 124;
 8001ae4:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <MX_TIM3_Init+0x94>)
 8001ae6:	227c      	movs	r2, #124	; 0x7c
 8001ae8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aea:	4b1a      	ldr	r3, [pc, #104]	; (8001b54 <MX_TIM3_Init+0x94>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001af0:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <MX_TIM3_Init+0x94>)
 8001af2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001af6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af8:	4b16      	ldr	r3, [pc, #88]	; (8001b54 <MX_TIM3_Init+0x94>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <MX_TIM3_Init+0x94>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b04:	4813      	ldr	r0, [pc, #76]	; (8001b54 <MX_TIM3_Init+0x94>)
 8001b06:	f008 ffb5 	bl	800aa74 <HAL_TIM_Base_Init>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001b10:	f000 fa32 	bl	8001f78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b1a:	f107 0310 	add.w	r3, r7, #16
 8001b1e:	4619      	mov	r1, r3
 8001b20:	480c      	ldr	r0, [pc, #48]	; (8001b54 <MX_TIM3_Init+0x94>)
 8001b22:	f008 ffff 	bl	800ab24 <HAL_TIM_ConfigClockSource>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001b2c:	f000 fa24 	bl	8001f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b30:	2300      	movs	r3, #0
 8001b32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b34:	2300      	movs	r3, #0
 8001b36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b38:	1d3b      	adds	r3, r7, #4
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4805      	ldr	r0, [pc, #20]	; (8001b54 <MX_TIM3_Init+0x94>)
 8001b3e:	f009 fa21 	bl	800af84 <HAL_TIMEx_MasterConfigSynchronization>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001b48:	f000 fa16 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b4c:	bf00      	nop
 8001b4e:	3720      	adds	r7, #32
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20000404 	.word	0x20000404
 8001b58:	40000400 	.word	0x40000400

08001b5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b60:	4b22      	ldr	r3, [pc, #136]	; (8001bec <MX_USART3_UART_Init+0x90>)
 8001b62:	4a23      	ldr	r2, [pc, #140]	; (8001bf0 <MX_USART3_UART_Init+0x94>)
 8001b64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8001b66:	4b21      	ldr	r3, [pc, #132]	; (8001bec <MX_USART3_UART_Init+0x90>)
 8001b68:	4a22      	ldr	r2, [pc, #136]	; (8001bf4 <MX_USART3_UART_Init+0x98>)
 8001b6a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b6c:	4b1f      	ldr	r3, [pc, #124]	; (8001bec <MX_USART3_UART_Init+0x90>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b72:	4b1e      	ldr	r3, [pc, #120]	; (8001bec <MX_USART3_UART_Init+0x90>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b78:	4b1c      	ldr	r3, [pc, #112]	; (8001bec <MX_USART3_UART_Init+0x90>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b7e:	4b1b      	ldr	r3, [pc, #108]	; (8001bec <MX_USART3_UART_Init+0x90>)
 8001b80:	220c      	movs	r2, #12
 8001b82:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b84:	4b19      	ldr	r3, [pc, #100]	; (8001bec <MX_USART3_UART_Init+0x90>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b8a:	4b18      	ldr	r3, [pc, #96]	; (8001bec <MX_USART3_UART_Init+0x90>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b90:	4b16      	ldr	r3, [pc, #88]	; (8001bec <MX_USART3_UART_Init+0x90>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b96:	4b15      	ldr	r3, [pc, #84]	; (8001bec <MX_USART3_UART_Init+0x90>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b9c:	4b13      	ldr	r3, [pc, #76]	; (8001bec <MX_USART3_UART_Init+0x90>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ba2:	4812      	ldr	r0, [pc, #72]	; (8001bec <MX_USART3_UART_Init+0x90>)
 8001ba4:	f009 fa7c 	bl	800b0a0 <HAL_UART_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8001bae:	f000 f9e3 	bl	8001f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	480d      	ldr	r0, [pc, #52]	; (8001bec <MX_USART3_UART_Init+0x90>)
 8001bb6:	f00a fb0c 	bl	800c1d2 <HAL_UARTEx_SetTxFifoThreshold>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8001bc0:	f000 f9da 	bl	8001f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4809      	ldr	r0, [pc, #36]	; (8001bec <MX_USART3_UART_Init+0x90>)
 8001bc8:	f00a fb41 	bl	800c24e <HAL_UARTEx_SetRxFifoThreshold>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8001bd2:	f000 f9d1 	bl	8001f78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001bd6:	4805      	ldr	r0, [pc, #20]	; (8001bec <MX_USART3_UART_Init+0x90>)
 8001bd8:	f00a fac2 	bl	800c160 <HAL_UARTEx_DisableFifoMode>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8001be2:	f000 f9c9 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000450 	.word	0x20000450
 8001bf0:	40004800 	.word	0x40004800
 8001bf4:	000f4240 	.word	0x000f4240

08001bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08e      	sub	sp, #56	; 0x38
 8001bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]
 8001c08:	609a      	str	r2, [r3, #8]
 8001c0a:	60da      	str	r2, [r3, #12]
 8001c0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c0e:	4bc1      	ldr	r3, [pc, #772]	; (8001f14 <MX_GPIO_Init+0x31c>)
 8001c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c14:	4abf      	ldr	r2, [pc, #764]	; (8001f14 <MX_GPIO_Init+0x31c>)
 8001c16:	f043 0310 	orr.w	r3, r3, #16
 8001c1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c1e:	4bbd      	ldr	r3, [pc, #756]	; (8001f14 <MX_GPIO_Init+0x31c>)
 8001c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c24:	f003 0310 	and.w	r3, r3, #16
 8001c28:	623b      	str	r3, [r7, #32]
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c2c:	4bb9      	ldr	r3, [pc, #740]	; (8001f14 <MX_GPIO_Init+0x31c>)
 8001c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c32:	4ab8      	ldr	r2, [pc, #736]	; (8001f14 <MX_GPIO_Init+0x31c>)
 8001c34:	f043 0304 	orr.w	r3, r3, #4
 8001c38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c3c:	4bb5      	ldr	r3, [pc, #724]	; (8001f14 <MX_GPIO_Init+0x31c>)
 8001c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	61fb      	str	r3, [r7, #28]
 8001c48:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c4a:	4bb2      	ldr	r3, [pc, #712]	; (8001f14 <MX_GPIO_Init+0x31c>)
 8001c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c50:	4ab0      	ldr	r2, [pc, #704]	; (8001f14 <MX_GPIO_Init+0x31c>)
 8001c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c5a:	4bae      	ldr	r3, [pc, #696]	; (8001f14 <MX_GPIO_Init+0x31c>)
 8001c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c64:	61bb      	str	r3, [r7, #24]
 8001c66:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c68:	4baa      	ldr	r3, [pc, #680]	; (8001f14 <MX_GPIO_Init+0x31c>)
 8001c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c6e:	4aa9      	ldr	r2, [pc, #676]	; (8001f14 <MX_GPIO_Init+0x31c>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c78:	4ba6      	ldr	r3, [pc, #664]	; (8001f14 <MX_GPIO_Init+0x31c>)
 8001c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c86:	4ba3      	ldr	r3, [pc, #652]	; (8001f14 <MX_GPIO_Init+0x31c>)
 8001c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c8c:	4aa1      	ldr	r2, [pc, #644]	; (8001f14 <MX_GPIO_Init+0x31c>)
 8001c8e:	f043 0302 	orr.w	r3, r3, #2
 8001c92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c96:	4b9f      	ldr	r3, [pc, #636]	; (8001f14 <MX_GPIO_Init+0x31c>)
 8001c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ca4:	4b9b      	ldr	r3, [pc, #620]	; (8001f14 <MX_GPIO_Init+0x31c>)
 8001ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001caa:	4a9a      	ldr	r2, [pc, #616]	; (8001f14 <MX_GPIO_Init+0x31c>)
 8001cac:	f043 0320 	orr.w	r3, r3, #32
 8001cb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cb4:	4b97      	ldr	r3, [pc, #604]	; (8001f14 <MX_GPIO_Init+0x31c>)
 8001cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cba:	f003 0320 	and.w	r3, r3, #32
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cc2:	4b94      	ldr	r3, [pc, #592]	; (8001f14 <MX_GPIO_Init+0x31c>)
 8001cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc8:	4a92      	ldr	r2, [pc, #584]	; (8001f14 <MX_GPIO_Init+0x31c>)
 8001cca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cd2:	4b90      	ldr	r3, [pc, #576]	; (8001f14 <MX_GPIO_Init+0x31c>)
 8001cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ce0:	4b8c      	ldr	r3, [pc, #560]	; (8001f14 <MX_GPIO_Init+0x31c>)
 8001ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce6:	4a8b      	ldr	r2, [pc, #556]	; (8001f14 <MX_GPIO_Init+0x31c>)
 8001ce8:	f043 0308 	orr.w	r3, r3, #8
 8001cec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cf0:	4b88      	ldr	r3, [pc, #544]	; (8001f14 <MX_GPIO_Init+0x31c>)
 8001cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	607b      	str	r3, [r7, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ATT_4_Pin|ATT_8_Pin|ATT_16_Pin, GPIO_PIN_SET);
 8001cfe:	2201      	movs	r2, #1
 8001d00:	2134      	movs	r1, #52	; 0x34
 8001d02:	4885      	ldr	r0, [pc, #532]	; (8001f18 <MX_GPIO_Init+0x320>)
 8001d04:	f003 f88e 	bl	8004e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|SPARE_SMA_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f245 0101 	movw	r1, #20481	; 0x5001
 8001d0e:	4883      	ldr	r0, [pc, #524]	; (8001f1c <MX_GPIO_Init+0x324>)
 8001d10:	f003 f888 	bl	8004e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET);
 8001d14:	2200      	movs	r2, #0
 8001d16:	2101      	movs	r1, #1
 8001d18:	4881      	ldr	r0, [pc, #516]	; (8001f20 <MX_GPIO_Init+0x328>)
 8001d1a:	f003 f883 	bl	8004e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d24:	487f      	ldr	r0, [pc, #508]	; (8001f24 <MX_GPIO_Init+0x32c>)
 8001d26:	f003 f87d 	bl	8004e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SCLK_Pin|MOSI_Pin|REG_EN_Pin, GPIO_PIN_RESET);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8001d30:	487d      	ldr	r0, [pc, #500]	; (8001f28 <MX_GPIO_Init+0x330>)
 8001d32:	f003 f877 	bl	8004e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8001d36:	2201      	movs	r2, #1
 8001d38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d3c:	487a      	ldr	r0, [pc, #488]	; (8001f28 <MX_GPIO_Init+0x330>)
 8001d3e:	f003 f871 	bl	8004e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ATT_2_Pin|ATT_1_Pin|ATT_05_Pin|ATT_025_Pin
 8001d42:	2201      	movs	r2, #1
 8001d44:	21f8      	movs	r1, #248	; 0xf8
 8001d46:	4877      	ldr	r0, [pc, #476]	; (8001f24 <MX_GPIO_Init+0x32c>)
 8001d48:	f003 f86c 	bl	8004e24 <HAL_GPIO_WritePin>
                          |ATT_LE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2102      	movs	r1, #2
 8001d50:	4871      	ldr	r0, [pc, #452]	; (8001f18 <MX_GPIO_Init+0x320>)
 8001d52:	f003 f867 	bl	8004e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ATT_4_Pin ATT_8_Pin ATT_16_Pin LD2_Pin */
  GPIO_InitStruct.Pin = ATT_4_Pin|ATT_8_Pin|ATT_16_Pin|LD2_Pin;
 8001d56:	2336      	movs	r3, #54	; 0x36
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d62:	2300      	movs	r3, #0
 8001d64:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	486a      	ldr	r0, [pc, #424]	; (8001f18 <MX_GPIO_Init+0x320>)
 8001d6e:	f002 fe91 	bl	8004a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8001d72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d78:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d86:	4619      	mov	r1, r3
 8001d88:	4867      	ldr	r0, [pc, #412]	; (8001f28 <MX_GPIO_Init+0x330>)
 8001d8a:	f002 fe83 	bl	8004a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001d8e:	2332      	movs	r3, #50	; 0x32
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d92:	2302      	movs	r3, #2
 8001d94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d9e:	230b      	movs	r3, #11
 8001da0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da6:	4619      	mov	r1, r3
 8001da8:	485f      	ldr	r0, [pc, #380]	; (8001f28 <MX_GPIO_Init+0x330>)
 8001daa:	f002 fe73 	bl	8004a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001dae:	2386      	movs	r3, #134	; 0x86
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db2:	2302      	movs	r3, #2
 8001db4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001dbe:	230b      	movs	r3, #11
 8001dc0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4858      	ldr	r0, [pc, #352]	; (8001f2c <MX_GPIO_Init+0x334>)
 8001dca:	f002 fe63 	bl	8004a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin SPARE_SMA_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|SPARE_SMA_Pin|LD3_Pin;
 8001dce:	f245 0301 	movw	r3, #20481	; 0x5001
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de4:	4619      	mov	r1, r3
 8001de6:	484d      	ldr	r0, [pc, #308]	; (8001f1c <MX_GPIO_Init+0x324>)
 8001de8:	f002 fe54 	bl	8004a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001dec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001df2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001df6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e00:	4619      	mov	r1, r3
 8001e02:	484b      	ldr	r0, [pc, #300]	; (8001f30 <MX_GPIO_Init+0x338>)
 8001e04:	f002 fe46 	bl	8004a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : SCOPE_TRIG_OUT_Pin */
  GPIO_InitStruct.Pin = SCOPE_TRIG_OUT_Pin;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e14:	2300      	movs	r3, #0
 8001e16:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SCOPE_TRIG_OUT_GPIO_Port, &GPIO_InitStruct);
 8001e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4840      	ldr	r0, [pc, #256]	; (8001f20 <MX_GPIO_Init+0x328>)
 8001e20:	f002 fe38 	bl	8004a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001e24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e32:	2300      	movs	r3, #0
 8001e34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e36:	230b      	movs	r3, #11
 8001e38:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4836      	ldr	r0, [pc, #216]	; (8001f1c <MX_GPIO_Init+0x324>)
 8001e42:	f002 fe27 	bl	8004a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ATT_2_Pin ATT_1_Pin ATT_05_Pin
                           ATT_025_Pin ATT_LE_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ATT_2_Pin|ATT_1_Pin|ATT_05_Pin
 8001e46:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
                          |ATT_025_Pin|ATT_LE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e54:	2300      	movs	r3, #0
 8001e56:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4831      	ldr	r0, [pc, #196]	; (8001f24 <MX_GPIO_Init+0x32c>)
 8001e60:	f002 fe18 	bl	8004a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001e64:	2380      	movs	r3, #128	; 0x80
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e68:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e76:	4619      	mov	r1, r3
 8001e78:	4829      	ldr	r0, [pc, #164]	; (8001f20 <MX_GPIO_Init+0x328>)
 8001e7a:	f002 fe0b 	bl	8004a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCLK_Pin MOSI_Pin SEN_Pin REG_EN_Pin */
  GPIO_InitStruct.Pin = SCLK_Pin|MOSI_Pin|SEN_Pin|REG_EN_Pin;
 8001e7e:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e84:	2301      	movs	r3, #1
 8001e86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e94:	4619      	mov	r1, r3
 8001e96:	4824      	ldr	r0, [pc, #144]	; (8001f28 <MX_GPIO_Init+0x330>)
 8001e98:	f002 fdfc 	bl	8004a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001e9c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001eae:	230a      	movs	r3, #10
 8001eb0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	481c      	ldr	r0, [pc, #112]	; (8001f2c <MX_GPIO_Init+0x334>)
 8001eba:	f002 fdeb 	bl	8004a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : MISO_Pin */
  GPIO_InitStruct.Pin = MISO_Pin;
 8001ebe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 8001ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4815      	ldr	r0, [pc, #84]	; (8001f28 <MX_GPIO_Init+0x330>)
 8001ed4:	f002 fdde 	bl	8004a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001ed8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001eea:	230b      	movs	r3, #11
 8001eec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	480a      	ldr	r0, [pc, #40]	; (8001f20 <MX_GPIO_Init+0x328>)
 8001ef6:	f002 fdcd 	bl	8004a94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001efa:	2200      	movs	r2, #0
 8001efc:	2100      	movs	r1, #0
 8001efe:	2028      	movs	r0, #40	; 0x28
 8001f00:	f002 fbbd 	bl	800467e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f04:	2028      	movs	r0, #40	; 0x28
 8001f06:	f002 fbd4 	bl	80046b2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f0a:	bf00      	nop
 8001f0c:	3738      	adds	r7, #56	; 0x38
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	58024400 	.word	0x58024400
 8001f18:	58021000 	.word	0x58021000
 8001f1c:	58020400 	.word	0x58020400
 8001f20:	58021800 	.word	0x58021800
 8001f24:	58020c00 	.word	0x58020c00
 8001f28:	58020800 	.word	0x58020800
 8001f2c:	58020000 	.word	0x58020000
 8001f30:	58021400 	.word	0x58021400

08001f34 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  adc_val = HAL_ADC_GetValue(&hadc3);
 8001f3c:	480a      	ldr	r0, [pc, #40]	; (8001f68 <HAL_ADC_ConvCpltCallback+0x34>)
 8001f3e:	f001 fa59 	bl	80033f4 <HAL_ADC_GetValue>
 8001f42:	4603      	mov	r3, r0
 8001f44:	4a09      	ldr	r2, [pc, #36]	; (8001f6c <HAL_ADC_ConvCpltCallback+0x38>)
 8001f46:	6013      	str	r3, [r2, #0]
  //printf("ADC value: %lu \r\n", adc_val);
  dac_val = adc_val >> 4;
 8001f48:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <HAL_ADC_ConvCpltCallback+0x38>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	091b      	lsrs	r3, r3, #4
 8001f4e:	4a08      	ldr	r2, [pc, #32]	; (8001f70 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001f50:	6013      	str	r3, [r2, #0]
	  printf("ADC reading: %lu, max: %lu, min: %lu \r\n", adc_val, adc_max, adc_min);
  }
#endif //QUANTIFY_ADC_NOISE
  //printf("ADC value: %lu, DAC value: %lu \r\n", adc_val, dac_val);
  //printf("ADC reading: %lu, max: %lu, min: %lu \r\n", adc_val, adc_max, adc_min);
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_val);
 8001f52:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2200      	movs	r2, #0
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4806      	ldr	r0, [pc, #24]	; (8001f74 <HAL_ADC_ConvCpltCallback+0x40>)
 8001f5c:	f002 fc37 	bl	80047ce <HAL_DAC_SetValue>
  //HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
}
 8001f60:	bf00      	nop
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	2000022c 	.word	0x2000022c
 8001f6c:	200004f0 	.word	0x200004f0
 8001f70:	200004f4 	.word	0x200004f4
 8001f74:	20000290 	.word	0x20000290

08001f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001f7c:	b672      	cpsid	i
}
 8001f7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	__disable_irq();

	printf("Error handler routine called\r\n");
 8001f80:	4810      	ldr	r0, [pc, #64]	; (8001fc4 <Error_Handler+0x4c>)
 8001f82:	f00a fef9 	bl	800cd78 <puts>

	/* Disable the AOM */
	HAL_HRTIM_WaveformOutputStop(&hhrtim, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1);
 8001f86:	f240 1103 	movw	r1, #259	; 0x103
 8001f8a:	480f      	ldr	r0, [pc, #60]	; (8001fc8 <Error_Handler+0x50>)
 8001f8c:	f003 fbcf 	bl	800572e <HAL_HRTIM_WaveformOutputStop>
	HAL_HRTIM_WaveformCounterStop_IT(&hhrtim, HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E);
 8001f90:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 8001f94:	480c      	ldr	r0, [pc, #48]	; (8001fc8 <Error_Handler+0x50>)
 8001f96:	f003 fc67 	bl	8005868 <HAL_HRTIM_WaveformCountStop_IT>

	/* Power down the synthesiser */
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fa0:	480a      	ldr	r0, [pc, #40]	; (8001fcc <Error_Handler+0x54>)
 8001fa2:	f002 ff3f 	bl	8004e24 <HAL_GPIO_WritePin>

	while (1) {
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 8001fa6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001faa:	4809      	ldr	r0, [pc, #36]	; (8001fd0 <Error_Handler+0x58>)
 8001fac:	f002 ff53 	bl	8004e56 <HAL_GPIO_TogglePin>
		timer_delay(SLOW_TIMER, ERROR_LED_DELAY);
 8001fb0:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <Error_Handler+0x5c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fb8:	4611      	mov	r1, r2
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f00c ff14 	bl	800ede8 <__timer_delay_veneer>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 8001fc0:	e7f1      	b.n	8001fa6 <Error_Handler+0x2e>
 8001fc2:	bf00      	nop
 8001fc4:	0800f0c0 	.word	0x0800f0c0
 8001fc8:	200002a4 	.word	0x200002a4
 8001fcc:	58020800 	.word	0x58020800
 8001fd0:	58020400 	.word	0x58020400
 8001fd4:	20000000 	.word	0x20000000

08001fd8 <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fde:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <HAL_MspInit+0x30>)
 8001fe0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fe4:	4a08      	ldr	r2, [pc, #32]	; (8002008 <HAL_MspInit+0x30>)
 8001fe6:	f043 0302 	orr.w	r3, r3, #2
 8001fea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001fee:	4b06      	ldr	r3, [pc, #24]	; (8002008 <HAL_MspInit+0x30>)
 8001ff0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	607b      	str	r3, [r7, #4]
 8001ffa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	58024400 	.word	0x58024400

0800200c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b0b4      	sub	sp, #208	; 0xd0
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002014:	f107 0310 	add.w	r3, r7, #16
 8002018:	22c0      	movs	r2, #192	; 0xc0
 800201a:	2100      	movs	r1, #0
 800201c:	4618      	mov	r0, r3
 800201e:	f00a f9db 	bl	800c3d8 <memset>
  if(hadc->Instance==ADC3)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a2b      	ldr	r2, [pc, #172]	; (80020d4 <HAL_ADC_MspInit+0xc8>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d14e      	bne.n	80020ca <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800202c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002030:	f04f 0300 	mov.w	r3, #0
 8002034:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8002038:	2301      	movs	r3, #1
 800203a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 800203c:	2313      	movs	r3, #19
 800203e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 79;
 8002040:	234f      	movs	r3, #79	; 0x4f
 8002042:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002044:	2302      	movs	r3, #2
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002048:	2302      	movs	r3, #2
 800204a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800204c:	23c0      	movs	r3, #192	; 0xc0
 800204e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8002050:	2320      	movs	r3, #32
 8002052:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002058:	2300      	movs	r3, #0
 800205a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800205e:	f107 0310 	add.w	r3, r7, #16
 8002062:	4618      	mov	r0, r3
 8002064:	f005 ffb2 	bl	8007fcc <HAL_RCCEx_PeriphCLKConfig>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 800206e:	f7ff ff83 	bl	8001f78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002072:	4b19      	ldr	r3, [pc, #100]	; (80020d8 <HAL_ADC_MspInit+0xcc>)
 8002074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002078:	4a17      	ldr	r2, [pc, #92]	; (80020d8 <HAL_ADC_MspInit+0xcc>)
 800207a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800207e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002082:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <HAL_ADC_MspInit+0xcc>)
 8002084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002088:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002090:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <HAL_ADC_MspInit+0xcc>)
 8002092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002096:	4a10      	ldr	r2, [pc, #64]	; (80020d8 <HAL_ADC_MspInit+0xcc>)
 8002098:	f043 0304 	orr.w	r3, r3, #4
 800209c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020a0:	4b0d      	ldr	r3, [pc, #52]	; (80020d8 <HAL_ADC_MspInit+0xcc>)
 80020a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020a6:	f003 0304 	and.w	r3, r3, #4
 80020aa:	60bb      	str	r3, [r7, #8]
 80020ac:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80020ae:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80020b2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80020b6:	f000 fc89 	bl	80029cc <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 80020ba:	2200      	movs	r2, #0
 80020bc:	2100      	movs	r1, #0
 80020be:	207f      	movs	r0, #127	; 0x7f
 80020c0:	f002 fadd 	bl	800467e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80020c4:	207f      	movs	r0, #127	; 0x7f
 80020c6:	f002 faf4 	bl	80046b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80020ca:	bf00      	nop
 80020cc:	37d0      	adds	r7, #208	; 0xd0
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	58026000 	.word	0x58026000
 80020d8:	58024400 	.word	0x58024400

080020dc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08a      	sub	sp, #40	; 0x28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a18      	ldr	r2, [pc, #96]	; (800215c <HAL_DAC_MspInit+0x80>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d129      	bne.n	8002152 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80020fe:	4b18      	ldr	r3, [pc, #96]	; (8002160 <HAL_DAC_MspInit+0x84>)
 8002100:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002104:	4a16      	ldr	r2, [pc, #88]	; (8002160 <HAL_DAC_MspInit+0x84>)
 8002106:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800210a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800210e:	4b14      	ldr	r3, [pc, #80]	; (8002160 <HAL_DAC_MspInit+0x84>)
 8002110:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002114:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002118:	613b      	str	r3, [r7, #16]
 800211a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211c:	4b10      	ldr	r3, [pc, #64]	; (8002160 <HAL_DAC_MspInit+0x84>)
 800211e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002122:	4a0f      	ldr	r2, [pc, #60]	; (8002160 <HAL_DAC_MspInit+0x84>)
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800212c:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <HAL_DAC_MspInit+0x84>)
 800212e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800213a:	2310      	movs	r3, #16
 800213c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800213e:	2303      	movs	r3, #3
 8002140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002146:	f107 0314 	add.w	r3, r7, #20
 800214a:	4619      	mov	r1, r3
 800214c:	4805      	ldr	r0, [pc, #20]	; (8002164 <HAL_DAC_MspInit+0x88>)
 800214e:	f002 fca1 	bl	8004a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002152:	bf00      	nop
 8002154:	3728      	adds	r7, #40	; 0x28
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40007400 	.word	0x40007400
 8002160:	58024400 	.word	0x58024400
 8002164:	58020000 	.word	0x58020000

08002168 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b0b4      	sub	sp, #208	; 0xd0
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002170:	f107 0310 	add.w	r3, r7, #16
 8002174:	22c0      	movs	r2, #192	; 0xc0
 8002176:	2100      	movs	r1, #0
 8002178:	4618      	mov	r0, r3
 800217a:	f00a f92d 	bl	800c3d8 <memset>
  if(hhrtim->Instance==HRTIM1)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a1c      	ldr	r2, [pc, #112]	; (80021f4 <HAL_HRTIM_MspInit+0x8c>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d131      	bne.n	80021ec <HAL_HRTIM_MspInit+0x84>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 8002188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800218c:	f04f 0300 	mov.w	r3, #0
 8002190:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 8002194:	2300      	movs	r3, #0
 8002196:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800219a:	f107 0310 	add.w	r3, r7, #16
 800219e:	4618      	mov	r0, r3
 80021a0:	f005 ff14 	bl	8007fcc <HAL_RCCEx_PeriphCLKConfig>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 80021aa:	f7ff fee5 	bl	8001f78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 80021ae:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <HAL_HRTIM_MspInit+0x90>)
 80021b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021b4:	4a10      	ldr	r2, [pc, #64]	; (80021f8 <HAL_HRTIM_MspInit+0x90>)
 80021b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80021ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80021be:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <HAL_HRTIM_MspInit+0x90>)
 80021c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	68fb      	ldr	r3, [r7, #12]
    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_TIMA_IRQn, 0, 0);
 80021cc:	2200      	movs	r2, #0
 80021ce:	2100      	movs	r1, #0
 80021d0:	2068      	movs	r0, #104	; 0x68
 80021d2:	f002 fa54 	bl	800467e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMA_IRQn);
 80021d6:	2068      	movs	r0, #104	; 0x68
 80021d8:	f002 fa6b 	bl	80046b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(HRTIM1_TIME_IRQn, 0, 0);
 80021dc:	2200      	movs	r2, #0
 80021de:	2100      	movs	r1, #0
 80021e0:	206c      	movs	r0, #108	; 0x6c
 80021e2:	f002 fa4c 	bl	800467e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIME_IRQn);
 80021e6:	206c      	movs	r0, #108	; 0x6c
 80021e8:	f002 fa63 	bl	80046b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 80021ec:	bf00      	nop
 80021ee:	37d0      	adds	r7, #208	; 0xd0
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40017400 	.word	0x40017400
 80021f8:	58024400 	.word	0x58024400

080021fc <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08a      	sub	sp, #40	; 0x28
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	f107 0314 	add.w	r3, r7, #20
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a22      	ldr	r2, [pc, #136]	; (80022a4 <HAL_HRTIM_MspPostInit+0xa8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d13d      	bne.n	800229a <HAL_HRTIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800221e:	4b22      	ldr	r3, [pc, #136]	; (80022a8 <HAL_HRTIM_MspPostInit+0xac>)
 8002220:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002224:	4a20      	ldr	r2, [pc, #128]	; (80022a8 <HAL_HRTIM_MspPostInit+0xac>)
 8002226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800222a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800222e:	4b1e      	ldr	r3, [pc, #120]	; (80022a8 <HAL_HRTIM_MspPostInit+0xac>)
 8002230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002238:	613b      	str	r3, [r7, #16]
 800223a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800223c:	4b1a      	ldr	r3, [pc, #104]	; (80022a8 <HAL_HRTIM_MspPostInit+0xac>)
 800223e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002242:	4a19      	ldr	r2, [pc, #100]	; (80022a8 <HAL_HRTIM_MspPostInit+0xac>)
 8002244:	f043 0304 	orr.w	r3, r3, #4
 8002248:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800224c:	4b16      	ldr	r3, [pc, #88]	; (80022a8 <HAL_HRTIM_MspPostInit+0xac>)
 800224e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002252:	f003 0304 	and.w	r3, r3, #4
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
    /**HRTIM GPIO Configuration
    PG6     ------> HRTIM_CHE1
    PC6     ------> HRTIM_CHA1
    PC7     ------> HRTIM_CHA2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800225a:	2340      	movs	r3, #64	; 0x40
 800225c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225e:	2302      	movs	r3, #2
 8002260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002266:	2303      	movs	r3, #3
 8002268:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 800226a:	2302      	movs	r3, #2
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800226e:	f107 0314 	add.w	r3, r7, #20
 8002272:	4619      	mov	r1, r3
 8002274:	480d      	ldr	r0, [pc, #52]	; (80022ac <HAL_HRTIM_MspPostInit+0xb0>)
 8002276:	f002 fc0d 	bl	8004a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800227a:	23c0      	movs	r3, #192	; 0xc0
 800227c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227e:	2302      	movs	r3, #2
 8002280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002286:	2303      	movs	r3, #3
 8002288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 800228a:	2301      	movs	r3, #1
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800228e:	f107 0314 	add.w	r3, r7, #20
 8002292:	4619      	mov	r1, r3
 8002294:	4806      	ldr	r0, [pc, #24]	; (80022b0 <HAL_HRTIM_MspPostInit+0xb4>)
 8002296:	f002 fbfd 	bl	8004a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 800229a:	bf00      	nop
 800229c:	3728      	adds	r7, #40	; 0x28
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40017400 	.word	0x40017400
 80022a8:	58024400 	.word	0x58024400
 80022ac:	58021800 	.word	0x58021800
 80022b0:	58020800 	.word	0x58020800

080022b4 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b0b4      	sub	sp, #208	; 0xd0
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022bc:	f107 0310 	add.w	r3, r7, #16
 80022c0:	22c0      	movs	r2, #192	; 0xc0
 80022c2:	2100      	movs	r1, #0
 80022c4:	4618      	mov	r0, r3
 80022c6:	f00a f887 	bl	800c3d8 <memset>
  if(hlptim->Instance==LPTIM1)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a19      	ldr	r2, [pc, #100]	; (8002334 <HAL_LPTIM_MspInit+0x80>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d12a      	bne.n	800232a <HAL_LPTIM_MspInit+0x76>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80022d4:	f04f 0220 	mov.w	r2, #32
 80022d8:	f04f 0300 	mov.w	r3, #0
 80022dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 80022e0:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80022e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022e8:	f107 0310 	add.w	r3, r7, #16
 80022ec:	4618      	mov	r0, r3
 80022ee:	f005 fe6d 	bl	8007fcc <HAL_RCCEx_PeriphCLKConfig>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <HAL_LPTIM_MspInit+0x48>
    {
      Error_Handler();
 80022f8:	f7ff fe3e 	bl	8001f78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80022fc:	4b0e      	ldr	r3, [pc, #56]	; (8002338 <HAL_LPTIM_MspInit+0x84>)
 80022fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002302:	4a0d      	ldr	r2, [pc, #52]	; (8002338 <HAL_LPTIM_MspInit+0x84>)
 8002304:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002308:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800230c:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <HAL_LPTIM_MspInit+0x84>)
 800230e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002312:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 800231a:	2200      	movs	r2, #0
 800231c:	2100      	movs	r1, #0
 800231e:	205d      	movs	r0, #93	; 0x5d
 8002320:	f002 f9ad 	bl	800467e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8002324:	205d      	movs	r0, #93	; 0x5d
 8002326:	f002 f9c4 	bl	80046b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 800232a:	bf00      	nop
 800232c:	37d0      	adds	r7, #208	; 0xd0
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40002400 	.word	0x40002400
 8002338:	58024400 	.word	0x58024400

0800233c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a16      	ldr	r2, [pc, #88]	; (80023a4 <HAL_TIM_Base_MspInit+0x68>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d10f      	bne.n	800236e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800234e:	4b16      	ldr	r3, [pc, #88]	; (80023a8 <HAL_TIM_Base_MspInit+0x6c>)
 8002350:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002354:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <HAL_TIM_Base_MspInit+0x6c>)
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800235e:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <HAL_TIM_Base_MspInit+0x6c>)
 8002360:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800236c:	e013      	b.n	8002396 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM3)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a0e      	ldr	r2, [pc, #56]	; (80023ac <HAL_TIM_Base_MspInit+0x70>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d10e      	bne.n	8002396 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002378:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <HAL_TIM_Base_MspInit+0x6c>)
 800237a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800237e:	4a0a      	ldr	r2, [pc, #40]	; (80023a8 <HAL_TIM_Base_MspInit+0x6c>)
 8002380:	f043 0302 	orr.w	r3, r3, #2
 8002384:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002388:	4b07      	ldr	r3, [pc, #28]	; (80023a8 <HAL_TIM_Base_MspInit+0x6c>)
 800238a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	68bb      	ldr	r3, [r7, #8]
}
 8002396:	bf00      	nop
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	40010000 	.word	0x40010000
 80023a8:	58024400 	.word	0x58024400
 80023ac:	40000400 	.word	0x40000400

080023b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b0ba      	sub	sp, #232	; 0xe8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	60da      	str	r2, [r3, #12]
 80023c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023c8:	f107 0310 	add.w	r3, r7, #16
 80023cc:	22c0      	movs	r2, #192	; 0xc0
 80023ce:	2100      	movs	r1, #0
 80023d0:	4618      	mov	r0, r3
 80023d2:	f00a f801 	bl	800c3d8 <memset>
  if(huart->Instance==USART3)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a27      	ldr	r2, [pc, #156]	; (8002478 <HAL_UART_MspInit+0xc8>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d146      	bne.n	800246e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80023e0:	f04f 0202 	mov.w	r2, #2
 80023e4:	f04f 0300 	mov.w	r3, #0
 80023e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80023ec:	2300      	movs	r3, #0
 80023ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023f2:	f107 0310 	add.w	r3, r7, #16
 80023f6:	4618      	mov	r0, r3
 80023f8:	f005 fde8 	bl	8007fcc <HAL_RCCEx_PeriphCLKConfig>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002402:	f7ff fdb9 	bl	8001f78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002406:	4b1d      	ldr	r3, [pc, #116]	; (800247c <HAL_UART_MspInit+0xcc>)
 8002408:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800240c:	4a1b      	ldr	r2, [pc, #108]	; (800247c <HAL_UART_MspInit+0xcc>)
 800240e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002412:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002416:	4b19      	ldr	r3, [pc, #100]	; (800247c <HAL_UART_MspInit+0xcc>)
 8002418:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800241c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002424:	4b15      	ldr	r3, [pc, #84]	; (800247c <HAL_UART_MspInit+0xcc>)
 8002426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800242a:	4a14      	ldr	r2, [pc, #80]	; (800247c <HAL_UART_MspInit+0xcc>)
 800242c:	f043 0308 	orr.w	r3, r3, #8
 8002430:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002434:	4b11      	ldr	r3, [pc, #68]	; (800247c <HAL_UART_MspInit+0xcc>)
 8002436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	60bb      	str	r3, [r7, #8]
 8002440:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002442:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002446:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244a:	2302      	movs	r3, #2
 800244c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002450:	2300      	movs	r3, #0
 8002452:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002456:	2300      	movs	r3, #0
 8002458:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800245c:	2307      	movs	r3, #7
 800245e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002462:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002466:	4619      	mov	r1, r3
 8002468:	4805      	ldr	r0, [pc, #20]	; (8002480 <HAL_UART_MspInit+0xd0>)
 800246a:	f002 fb13 	bl	8004a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800246e:	bf00      	nop
 8002470:	37e8      	adds	r7, #232	; 0xe8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40004800 	.word	0x40004800
 800247c:	58024400 	.word	0x58024400
 8002480:	58020c00 	.word	0x58020c00

08002484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002488:	f005 fd84 	bl	8007f94 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
		Error_Handler();
 800248c:	f7ff fd74 	bl	8001f78 <Error_Handler>
 8002490:	e7fc      	b.n	800248c <NMI_Handler+0x8>

08002492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Error_Handler();
 8002496:	f7ff fd6f 	bl	8001f78 <Error_Handler>
 800249a:	e7fc      	b.n	8002496 <HardFault_Handler+0x4>

0800249c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  Error_Handler();
 80024a0:	f7ff fd6a 	bl	8001f78 <Error_Handler>
 80024a4:	e7fc      	b.n	80024a0 <MemManage_Handler+0x4>

080024a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  Error_Handler();
 80024aa:	f7ff fd65 	bl	8001f78 <Error_Handler>
 80024ae:	e7fc      	b.n	80024aa <BusFault_Handler+0x4>

080024b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  Error_Handler();
 80024b4:	f7ff fd60 	bl	8001f78 <Error_Handler>
 80024b8:	e7fc      	b.n	80024b4 <UsageFault_Handler+0x4>

080024ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024ba:	b480      	push	{r7}
 80024bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024cc:	bf00      	nop
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024d6:	b480      	push	{r7}
 80024d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024e8:	f000 fa20 	bl	800292c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024ec:	bf00      	nop
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80024f4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80024f8:	f002 fcc7 	bl	8004e8a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 80024fc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002500:	f002 fcc3 	bl	8004e8a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002504:	bf00      	nop
 8002506:	bd80      	pop	{r7, pc}

08002508 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */
  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 800250c:	4802      	ldr	r0, [pc, #8]	; (8002518 <LPTIM1_IRQHandler+0x10>)
 800250e:	f004 fa18 	bl	8006942 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */
  /* USER CODE END LPTIM1_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000380 	.word	0x20000380

0800251c <HRTIM1_TIMA_IRQHandler>:

/**
  * @brief This function handles HRTIM timer A global interrupt.
  */
void HRTIM1_TIMA_IRQHandler(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 0 */

  /* USER CODE END HRTIM1_TIMA_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_A);
 8002520:	2100      	movs	r1, #0
 8002522:	4802      	ldr	r0, [pc, #8]	; (800252c <HRTIM1_TIMA_IRQHandler+0x10>)
 8002524:	f003 fa1e 	bl	8005964 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 1 */

  /* USER CODE END HRTIM1_TIMA_IRQn 1 */
}
 8002528:	bf00      	nop
 800252a:	bd80      	pop	{r7, pc}
 800252c:	200002a4 	.word	0x200002a4

08002530 <HRTIM1_TIME_IRQHandler>:

/**
  * @brief This function handles HRTIM timer E global interrupt.
  */
void HRTIM1_TIME_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 0 */

  /* USER CODE END HRTIM1_TIME_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_E);
 8002534:	2104      	movs	r1, #4
 8002536:	4802      	ldr	r0, [pc, #8]	; (8002540 <HRTIM1_TIME_IRQHandler+0x10>)
 8002538:	f003 fa14 	bl	8005964 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 1 */

  /* USER CODE END HRTIM1_TIME_IRQn 1 */
}
 800253c:	bf00      	nop
 800253e:	bd80      	pop	{r7, pc}
 8002540:	200002a4 	.word	0x200002a4

08002544 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8002548:	4802      	ldr	r0, [pc, #8]	; (8002554 <ADC3_IRQHandler+0x10>)
 800254a:	f000 ff61 	bl	8003410 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	2000022c 	.word	0x2000022c

08002558 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
	return 1;
 800255c:	2301      	movs	r3, #1
}
 800255e:	4618      	mov	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <_kill>:

int _kill(int pid, int sig)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002572:	f009 fef9 	bl	800c368 <__errno>
 8002576:	4603      	mov	r3, r0
 8002578:	2216      	movs	r2, #22
 800257a:	601a      	str	r2, [r3, #0]
	return -1;
 800257c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002580:	4618      	mov	r0, r3
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <_exit>:

void _exit (int status)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002590:	f04f 31ff 	mov.w	r1, #4294967295
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f7ff ffe7 	bl	8002568 <_kill>
	while (1) {}		/* Make sure we hang here */
 800259a:	e7fe      	b.n	800259a <_exit+0x12>

0800259c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]
 80025ac:	e00a      	b.n	80025c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025ae:	f3af 8000 	nop.w
 80025b2:	4601      	mov	r1, r0
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	1c5a      	adds	r2, r3, #1
 80025b8:	60ba      	str	r2, [r7, #8]
 80025ba:	b2ca      	uxtb	r2, r1
 80025bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	3301      	adds	r3, #1
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	dbf0      	blt.n	80025ae <_read+0x12>
	}

return len;
 80025cc:	687b      	ldr	r3, [r7, #4]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b086      	sub	sp, #24
 80025da:	af00      	add	r7, sp, #0
 80025dc:	60f8      	str	r0, [r7, #12]
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e2:	2300      	movs	r3, #0
 80025e4:	617b      	str	r3, [r7, #20]
 80025e6:	e009      	b.n	80025fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	1c5a      	adds	r2, r3, #1
 80025ec:	60ba      	str	r2, [r7, #8]
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fe fcef 	bl	8000fd4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	3301      	adds	r3, #1
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	429a      	cmp	r2, r3
 8002602:	dbf1      	blt.n	80025e8 <_write+0x12>
	}
	return len;
 8002604:	687b      	ldr	r3, [r7, #4]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <_close>:

int _close(int file)
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
	return -1;
 8002616:	f04f 33ff 	mov.w	r3, #4294967295
}
 800261a:	4618      	mov	r0, r3
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
 800262e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002636:	605a      	str	r2, [r3, #4]
	return 0;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <_isatty>:

int _isatty(int file)
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
	return 1;
 800264e:	2301      	movs	r3, #1
}
 8002650:	4618      	mov	r0, r3
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
	return 0;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
	...

08002678 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002680:	4a14      	ldr	r2, [pc, #80]	; (80026d4 <_sbrk+0x5c>)
 8002682:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <_sbrk+0x60>)
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800268c:	4b13      	ldr	r3, [pc, #76]	; (80026dc <_sbrk+0x64>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d102      	bne.n	800269a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002694:	4b11      	ldr	r3, [pc, #68]	; (80026dc <_sbrk+0x64>)
 8002696:	4a12      	ldr	r2, [pc, #72]	; (80026e0 <_sbrk+0x68>)
 8002698:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800269a:	4b10      	ldr	r3, [pc, #64]	; (80026dc <_sbrk+0x64>)
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d207      	bcs.n	80026b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026a8:	f009 fe5e 	bl	800c368 <__errno>
 80026ac:	4603      	mov	r3, r0
 80026ae:	220c      	movs	r2, #12
 80026b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026b2:	f04f 33ff 	mov.w	r3, #4294967295
 80026b6:	e009      	b.n	80026cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026b8:	4b08      	ldr	r3, [pc, #32]	; (80026dc <_sbrk+0x64>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026be:	4b07      	ldr	r3, [pc, #28]	; (80026dc <_sbrk+0x64>)
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4413      	add	r3, r2
 80026c6:	4a05      	ldr	r2, [pc, #20]	; (80026dc <_sbrk+0x64>)
 80026c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026ca:	68fb      	ldr	r3, [r7, #12]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	20020000 	.word	0x20020000
 80026d8:	00000400 	.word	0x00000400
 80026dc:	200004fc 	.word	0x200004fc
 80026e0:	20000518 	.word	0x20000518

080026e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80026e8:	4b37      	ldr	r3, [pc, #220]	; (80027c8 <SystemInit+0xe4>)
 80026ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ee:	4a36      	ldr	r2, [pc, #216]	; (80027c8 <SystemInit+0xe4>)
 80026f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80026f8:	4b34      	ldr	r3, [pc, #208]	; (80027cc <SystemInit+0xe8>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 030f 	and.w	r3, r3, #15
 8002700:	2b06      	cmp	r3, #6
 8002702:	d807      	bhi.n	8002714 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */

	  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002704:	4b31      	ldr	r3, [pc, #196]	; (80027cc <SystemInit+0xe8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f023 030f 	bic.w	r3, r3, #15
 800270c:	4a2f      	ldr	r2, [pc, #188]	; (80027cc <SystemInit+0xe8>)
 800270e:	f043 0307 	orr.w	r3, r3, #7
 8002712:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002714:	4b2e      	ldr	r3, [pc, #184]	; (80027d0 <SystemInit+0xec>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a2d      	ldr	r2, [pc, #180]	; (80027d0 <SystemInit+0xec>)
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002720:	4b2b      	ldr	r3, [pc, #172]	; (80027d0 <SystemInit+0xec>)
 8002722:	2200      	movs	r2, #0
 8002724:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002726:	4b2a      	ldr	r3, [pc, #168]	; (80027d0 <SystemInit+0xec>)
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	4929      	ldr	r1, [pc, #164]	; (80027d0 <SystemInit+0xec>)
 800272c:	4b29      	ldr	r3, [pc, #164]	; (80027d4 <SystemInit+0xf0>)
 800272e:	4013      	ands	r3, r2
 8002730:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002732:	4b26      	ldr	r3, [pc, #152]	; (80027cc <SystemInit+0xe8>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	2b00      	cmp	r3, #0
 800273c:	d007      	beq.n	800274e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800273e:	4b23      	ldr	r3, [pc, #140]	; (80027cc <SystemInit+0xe8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f023 030f 	bic.w	r3, r3, #15
 8002746:	4a21      	ldr	r2, [pc, #132]	; (80027cc <SystemInit+0xe8>)
 8002748:	f043 0307 	orr.w	r3, r3, #7
 800274c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800274e:	4b20      	ldr	r3, [pc, #128]	; (80027d0 <SystemInit+0xec>)
 8002750:	2200      	movs	r2, #0
 8002752:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002754:	4b1e      	ldr	r3, [pc, #120]	; (80027d0 <SystemInit+0xec>)
 8002756:	2200      	movs	r2, #0
 8002758:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800275a:	4b1d      	ldr	r3, [pc, #116]	; (80027d0 <SystemInit+0xec>)
 800275c:	2200      	movs	r2, #0
 800275e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002760:	4b1b      	ldr	r3, [pc, #108]	; (80027d0 <SystemInit+0xec>)
 8002762:	4a1d      	ldr	r2, [pc, #116]	; (80027d8 <SystemInit+0xf4>)
 8002764:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002766:	4b1a      	ldr	r3, [pc, #104]	; (80027d0 <SystemInit+0xec>)
 8002768:	4a1c      	ldr	r2, [pc, #112]	; (80027dc <SystemInit+0xf8>)
 800276a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800276c:	4b18      	ldr	r3, [pc, #96]	; (80027d0 <SystemInit+0xec>)
 800276e:	4a1c      	ldr	r2, [pc, #112]	; (80027e0 <SystemInit+0xfc>)
 8002770:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002772:	4b17      	ldr	r3, [pc, #92]	; (80027d0 <SystemInit+0xec>)
 8002774:	2200      	movs	r2, #0
 8002776:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002778:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <SystemInit+0xec>)
 800277a:	4a19      	ldr	r2, [pc, #100]	; (80027e0 <SystemInit+0xfc>)
 800277c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800277e:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <SystemInit+0xec>)
 8002780:	2200      	movs	r2, #0
 8002782:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002784:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <SystemInit+0xec>)
 8002786:	4a16      	ldr	r2, [pc, #88]	; (80027e0 <SystemInit+0xfc>)
 8002788:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800278a:	4b11      	ldr	r3, [pc, #68]	; (80027d0 <SystemInit+0xec>)
 800278c:	2200      	movs	r2, #0
 800278e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002790:	4b0f      	ldr	r3, [pc, #60]	; (80027d0 <SystemInit+0xec>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a0e      	ldr	r2, [pc, #56]	; (80027d0 <SystemInit+0xec>)
 8002796:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800279a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800279c:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <SystemInit+0xec>)
 800279e:	2200      	movs	r2, #0
 80027a0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80027a2:	4b10      	ldr	r3, [pc, #64]	; (80027e4 <SystemInit+0x100>)
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	4b10      	ldr	r3, [pc, #64]	; (80027e8 <SystemInit+0x104>)
 80027a8:	4013      	ands	r3, r2
 80027aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027ae:	d202      	bcs.n	80027b6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80027b0:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <SystemInit+0x108>)
 80027b2:	2201      	movs	r2, #1
 80027b4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80027b6:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <SystemInit+0x10c>)
 80027b8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80027bc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80027be:	bf00      	nop
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	e000ed00 	.word	0xe000ed00
 80027cc:	52002000 	.word	0x52002000
 80027d0:	58024400 	.word	0x58024400
 80027d4:	eaf6ed7f 	.word	0xeaf6ed7f
 80027d8:	02020200 	.word	0x02020200
 80027dc:	01ff0000 	.word	0x01ff0000
 80027e0:	01010280 	.word	0x01010280
 80027e4:	5c001000 	.word	0x5c001000
 80027e8:	ffff0000 	.word	0xffff0000
 80027ec:	51008108 	.word	0x51008108
 80027f0:	52004000 	.word	0x52004000

080027f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80027f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800282c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80027f8:	f7ff ff74 	bl	80026e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027fc:	480c      	ldr	r0, [pc, #48]	; (8002830 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027fe:	490d      	ldr	r1, [pc, #52]	; (8002834 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002800:	4a0d      	ldr	r2, [pc, #52]	; (8002838 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002804:	e002      	b.n	800280c <LoopCopyDataInit>

08002806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800280a:	3304      	adds	r3, #4

0800280c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800280c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800280e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002810:	d3f9      	bcc.n	8002806 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002812:	4a0a      	ldr	r2, [pc, #40]	; (800283c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002814:	4c0a      	ldr	r4, [pc, #40]	; (8002840 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002818:	e001      	b.n	800281e <LoopFillZerobss>

0800281a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800281a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800281c:	3204      	adds	r2, #4

0800281e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800281e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002820:	d3fb      	bcc.n	800281a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002822:	f009 fda7 	bl	800c374 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002826:	f7fe fcb9 	bl	800119c <main>
  bx  lr
 800282a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800282c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002834:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8002838:	0800f71c 	.word	0x0800f71c
  ldr r2, =_sbss
 800283c:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8002840:	20000514 	.word	0x20000514

08002844 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002844:	e7fe      	b.n	8002844 <ADC_IRQHandler>
	...

08002848 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800284e:	2003      	movs	r0, #3
 8002850:	f001 ff0a 	bl	8004668 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002854:	f005 f9c8 	bl	8007be8 <HAL_RCC_GetSysClockFreq>
 8002858:	4602      	mov	r2, r0
 800285a:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <HAL_Init+0x68>)
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	0a1b      	lsrs	r3, r3, #8
 8002860:	f003 030f 	and.w	r3, r3, #15
 8002864:	4913      	ldr	r1, [pc, #76]	; (80028b4 <HAL_Init+0x6c>)
 8002866:	5ccb      	ldrb	r3, [r1, r3]
 8002868:	f003 031f 	and.w	r3, r3, #31
 800286c:	fa22 f303 	lsr.w	r3, r2, r3
 8002870:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002872:	4b0f      	ldr	r3, [pc, #60]	; (80028b0 <HAL_Init+0x68>)
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	4a0e      	ldr	r2, [pc, #56]	; (80028b4 <HAL_Init+0x6c>)
 800287c:	5cd3      	ldrb	r3, [r2, r3]
 800287e:	f003 031f 	and.w	r3, r3, #31
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	fa22 f303 	lsr.w	r3, r2, r3
 8002888:	4a0b      	ldr	r2, [pc, #44]	; (80028b8 <HAL_Init+0x70>)
 800288a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800288c:	4a0b      	ldr	r2, [pc, #44]	; (80028bc <HAL_Init+0x74>)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002892:	2000      	movs	r0, #0
 8002894:	f000 f814 	bl	80028c0 <HAL_InitTick>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e002      	b.n	80028a8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80028a2:	f7ff fb99 	bl	8001fd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	58024400 	.word	0x58024400
 80028b4:	0800f2fc 	.word	0x0800f2fc
 80028b8:	2000001c 	.word	0x2000001c
 80028bc:	20000018 	.word	0x20000018

080028c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80028c8:	4b15      	ldr	r3, [pc, #84]	; (8002920 <HAL_InitTick+0x60>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e021      	b.n	8002918 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80028d4:	4b13      	ldr	r3, [pc, #76]	; (8002924 <HAL_InitTick+0x64>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	4b11      	ldr	r3, [pc, #68]	; (8002920 <HAL_InitTick+0x60>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	4619      	mov	r1, r3
 80028de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ea:	4618      	mov	r0, r3
 80028ec:	f001 feef 	bl	80046ce <HAL_SYSTICK_Config>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e00e      	b.n	8002918 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b0f      	cmp	r3, #15
 80028fe:	d80a      	bhi.n	8002916 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002900:	2200      	movs	r2, #0
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	f04f 30ff 	mov.w	r0, #4294967295
 8002908:	f001 feb9 	bl	800467e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800290c:	4a06      	ldr	r2, [pc, #24]	; (8002928 <HAL_InitTick+0x68>)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002912:	2300      	movs	r3, #0
 8002914:	e000      	b.n	8002918 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
}
 8002918:	4618      	mov	r0, r3
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	20000024 	.word	0x20000024
 8002924:	20000018 	.word	0x20000018
 8002928:	20000020 	.word	0x20000020

0800292c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002930:	4b06      	ldr	r3, [pc, #24]	; (800294c <HAL_IncTick+0x20>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	461a      	mov	r2, r3
 8002936:	4b06      	ldr	r3, [pc, #24]	; (8002950 <HAL_IncTick+0x24>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4413      	add	r3, r2
 800293c:	4a04      	ldr	r2, [pc, #16]	; (8002950 <HAL_IncTick+0x24>)
 800293e:	6013      	str	r3, [r2, #0]
}
 8002940:	bf00      	nop
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	20000024 	.word	0x20000024
 8002950:	20000500 	.word	0x20000500

08002954 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  return uwTick;
 8002958:	4b03      	ldr	r3, [pc, #12]	; (8002968 <HAL_GetTick+0x14>)
 800295a:	681b      	ldr	r3, [r3, #0]
}
 800295c:	4618      	mov	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	20000500 	.word	0x20000500

0800296c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002974:	f7ff ffee 	bl	8002954 <HAL_GetTick>
 8002978:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002984:	d005      	beq.n	8002992 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002986:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <HAL_Delay+0x44>)
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	461a      	mov	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4413      	add	r3, r2
 8002990:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002992:	bf00      	nop
 8002994:	f7ff ffde 	bl	8002954 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d8f7      	bhi.n	8002994 <HAL_Delay+0x28>
  {
  }
}
 80029a4:	bf00      	nop
 80029a6:	bf00      	nop
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20000024 	.word	0x20000024

080029b4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80029b8:	4b03      	ldr	r3, [pc, #12]	; (80029c8 <HAL_GetREVID+0x14>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	0c1b      	lsrs	r3, r3, #16
}
 80029be:	4618      	mov	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	5c001000 	.word	0x5c001000

080029cc <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80029d6:	4b07      	ldr	r3, [pc, #28]	; (80029f4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	43db      	mvns	r3, r3
 80029de:	401a      	ands	r2, r3
 80029e0:	4904      	ldr	r1, [pc, #16]	; (80029f4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	604b      	str	r3, [r1, #4]
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	58000400 	.word	0x58000400

080029f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	609a      	str	r2, [r3, #8]
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	609a      	str	r2, [r3, #8]
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
 8002a6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	3360      	adds	r3, #96	; 0x60
 8002a72:	461a      	mov	r2, r3
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	430b      	orrs	r3, r1
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002a94:	bf00      	nop
 8002a96:	371c      	adds	r7, #28
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	f003 031f 	and.w	r3, r3, #31
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	611a      	str	r2, [r3, #16]
}
 8002ac6:	bf00      	nop
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b087      	sub	sp, #28
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	60f8      	str	r0, [r7, #12]
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	3360      	adds	r3, #96	; 0x60
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	431a      	orrs	r2, r3
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	601a      	str	r2, [r3, #0]
  }
}
 8002afc:	bf00      	nop
 8002afe:	371c      	adds	r7, #28
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e000      	b.n	8002b22 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b087      	sub	sp, #28
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	60f8      	str	r0, [r7, #12]
 8002b36:	60b9      	str	r1, [r7, #8]
 8002b38:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	3330      	adds	r3, #48	; 0x30
 8002b3e:	461a      	mov	r2, r3
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	0a1b      	lsrs	r3, r3, #8
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	f003 030c 	and.w	r3, r3, #12
 8002b4a:	4413      	add	r3, r2
 8002b4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	f003 031f 	and.w	r3, r3, #31
 8002b58:	211f      	movs	r1, #31
 8002b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	401a      	ands	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	0e9b      	lsrs	r3, r3, #26
 8002b66:	f003 011f 	and.w	r1, r3, #31
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f003 031f 	and.w	r3, r3, #31
 8002b70:	fa01 f303 	lsl.w	r3, r1, r3
 8002b74:	431a      	orrs	r2, r3
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b7a:	bf00      	nop
 8002b7c:	371c      	adds	r7, #28
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b92:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e000      	b.n	8002ba0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b087      	sub	sp, #28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	3314      	adds	r3, #20
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	0e5b      	lsrs	r3, r3, #25
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	4413      	add	r3, r2
 8002bca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	0d1b      	lsrs	r3, r3, #20
 8002bd4:	f003 031f 	and.w	r3, r3, #31
 8002bd8:	2107      	movs	r1, #7
 8002bda:	fa01 f303 	lsl.w	r3, r1, r3
 8002bde:	43db      	mvns	r3, r3
 8002be0:	401a      	ands	r2, r3
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	0d1b      	lsrs	r3, r3, #20
 8002be6:	f003 031f 	and.w	r3, r3, #31
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002bf6:	bf00      	nop
 8002bf8:	371c      	adds	r7, #28
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
	...

08002c04 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	401a      	ands	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f003 0318 	and.w	r3, r3, #24
 8002c26:	4908      	ldr	r1, [pc, #32]	; (8002c48 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002c28:	40d9      	lsrs	r1, r3
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	400b      	ands	r3, r1
 8002c2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c32:	431a      	orrs	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002c3a:	bf00      	nop
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	000fffff 	.word	0x000fffff

08002c4c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 031f 	and.w	r3, r3, #31
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	4b04      	ldr	r3, [pc, #16]	; (8002ca4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002c92:	4013      	ands	r3, r2
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6093      	str	r3, [r2, #8]
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	5fffffc0 	.word	0x5fffffc0

08002ca8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cbc:	d101      	bne.n	8002cc2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <LL_ADC_EnableInternalRegulator+0x24>)
 8002cde:	4013      	ands	r3, r2
 8002ce0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	6fffffc0 	.word	0x6fffffc0

08002cf8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d0c:	d101      	bne.n	8002d12 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <LL_ADC_Enable+0x24>)
 8002d2e:	4013      	ands	r3, r2
 8002d30:	f043 0201 	orr.w	r2, r3, #1
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	7fffffc0 	.word	0x7fffffc0

08002d48 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <LL_ADC_Disable+0x24>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	f043 0202 	orr.w	r2, r3, #2
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	7fffffc0 	.word	0x7fffffc0

08002d70 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d101      	bne.n	8002d88 <LL_ADC_IsEnabled+0x18>
 8002d84:	2301      	movs	r3, #1
 8002d86:	e000      	b.n	8002d8a <LL_ADC_IsEnabled+0x1a>
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d101      	bne.n	8002dae <LL_ADC_IsDisableOngoing+0x18>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e000      	b.n	8002db0 <LL_ADC_IsDisableOngoing+0x1a>
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <LL_ADC_REG_StartConversion+0x24>)
 8002dca:	4013      	ands	r3, r2
 8002dcc:	f043 0204 	orr.w	r2, r3, #4
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	7fffffc0 	.word	0x7fffffc0

08002de4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b04      	cmp	r3, #4
 8002df6:	d101      	bne.n	8002dfc <LL_ADC_REG_IsConversionOngoing+0x18>
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e000      	b.n	8002dfe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d101      	bne.n	8002e22 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e30:	b590      	push	{r4, r7, lr}
 8002e32:	b089      	sub	sp, #36	; 0x24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e18f      	b.n	800316a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d109      	bne.n	8002e6c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7ff f8d7 	bl	800200c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff ff19 	bl	8002ca8 <LL_ADC_IsDeepPowerDownEnabled>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d004      	beq.n	8002e86 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff feff 	bl	8002c84 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff ff34 	bl	8002cf8 <LL_ADC_IsInternalRegulatorEnabled>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d114      	bne.n	8002ec0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff ff18 	bl	8002cd0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ea0:	4b87      	ldr	r3, [pc, #540]	; (80030c0 <HAL_ADC_Init+0x290>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	099b      	lsrs	r3, r3, #6
 8002ea6:	4a87      	ldr	r2, [pc, #540]	; (80030c4 <HAL_ADC_Init+0x294>)
 8002ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8002eac:	099b      	lsrs	r3, r3, #6
 8002eae:	3301      	adds	r3, #1
 8002eb0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002eb2:	e002      	b.n	8002eba <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1f9      	bne.n	8002eb4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff ff17 	bl	8002cf8 <LL_ADC_IsInternalRegulatorEnabled>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10d      	bne.n	8002eec <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed4:	f043 0210 	orr.w	r2, r3, #16
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee0:	f043 0201 	orr.w	r2, r3, #1
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff ff77 	bl	8002de4 <LL_ADC_REG_IsConversionOngoing>
 8002ef6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efc:	f003 0310 	and.w	r3, r3, #16
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f040 8129 	bne.w	8003158 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f040 8125 	bne.w	8003158 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f12:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f16:	f043 0202 	orr.w	r2, r3, #2
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff ff24 	bl	8002d70 <LL_ADC_IsEnabled>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d136      	bne.n	8002f9c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a65      	ldr	r2, [pc, #404]	; (80030c8 <HAL_ADC_Init+0x298>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d004      	beq.n	8002f42 <HAL_ADC_Init+0x112>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a63      	ldr	r2, [pc, #396]	; (80030cc <HAL_ADC_Init+0x29c>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d10e      	bne.n	8002f60 <HAL_ADC_Init+0x130>
 8002f42:	4861      	ldr	r0, [pc, #388]	; (80030c8 <HAL_ADC_Init+0x298>)
 8002f44:	f7ff ff14 	bl	8002d70 <LL_ADC_IsEnabled>
 8002f48:	4604      	mov	r4, r0
 8002f4a:	4860      	ldr	r0, [pc, #384]	; (80030cc <HAL_ADC_Init+0x29c>)
 8002f4c:	f7ff ff10 	bl	8002d70 <LL_ADC_IsEnabled>
 8002f50:	4603      	mov	r3, r0
 8002f52:	4323      	orrs	r3, r4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	bf0c      	ite	eq
 8002f58:	2301      	moveq	r3, #1
 8002f5a:	2300      	movne	r3, #0
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	e008      	b.n	8002f72 <HAL_ADC_Init+0x142>
 8002f60:	485b      	ldr	r0, [pc, #364]	; (80030d0 <HAL_ADC_Init+0x2a0>)
 8002f62:	f7ff ff05 	bl	8002d70 <LL_ADC_IsEnabled>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	bf0c      	ite	eq
 8002f6c:	2301      	moveq	r3, #1
 8002f6e:	2300      	movne	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d012      	beq.n	8002f9c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a53      	ldr	r2, [pc, #332]	; (80030c8 <HAL_ADC_Init+0x298>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d004      	beq.n	8002f8a <HAL_ADC_Init+0x15a>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a51      	ldr	r2, [pc, #324]	; (80030cc <HAL_ADC_Init+0x29c>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d101      	bne.n	8002f8e <HAL_ADC_Init+0x15e>
 8002f8a:	4a52      	ldr	r2, [pc, #328]	; (80030d4 <HAL_ADC_Init+0x2a4>)
 8002f8c:	e000      	b.n	8002f90 <HAL_ADC_Init+0x160>
 8002f8e:	4a52      	ldr	r2, [pc, #328]	; (80030d8 <HAL_ADC_Init+0x2a8>)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	4619      	mov	r1, r3
 8002f96:	4610      	mov	r0, r2
 8002f98:	f7ff fd2e 	bl	80029f8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002f9c:	f7ff fd0a 	bl	80029b4 <HAL_GetREVID>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	f241 0203 	movw	r2, #4099	; 0x1003
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d914      	bls.n	8002fd4 <HAL_ADC_Init+0x1a4>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	2b10      	cmp	r3, #16
 8002fb0:	d110      	bne.n	8002fd4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	7d5b      	ldrb	r3, [r3, #21]
 8002fb6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fbc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002fc2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	7f1b      	ldrb	r3, [r3, #28]
 8002fc8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002fca:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fcc:	f043 030c 	orr.w	r3, r3, #12
 8002fd0:	61bb      	str	r3, [r7, #24]
 8002fd2:	e00d      	b.n	8002ff0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	7d5b      	ldrb	r3, [r3, #21]
 8002fd8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fde:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002fe4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	7f1b      	ldrb	r3, [r3, #28]
 8002fea:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fec:	4313      	orrs	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	7f1b      	ldrb	r3, [r3, #28]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d106      	bne.n	8003006 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	045b      	lsls	r3, r3, #17
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	4313      	orrs	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	2b00      	cmp	r3, #0
 800300c:	d009      	beq.n	8003022 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003012:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4313      	orrs	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	4b2c      	ldr	r3, [pc, #176]	; (80030dc <HAL_ADC_Init+0x2ac>)
 800302a:	4013      	ands	r3, r2
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6812      	ldr	r2, [r2, #0]
 8003030:	69b9      	ldr	r1, [r7, #24]
 8003032:	430b      	orrs	r3, r1
 8003034:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff fed2 	bl	8002de4 <LL_ADC_REG_IsConversionOngoing>
 8003040:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff fedf 	bl	8002e0a <LL_ADC_INJ_IsConversionOngoing>
 800304c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d15f      	bne.n	8003114 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d15c      	bne.n	8003114 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	7d1b      	ldrb	r3, [r3, #20]
 800305e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003064:	4313      	orrs	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	4b1c      	ldr	r3, [pc, #112]	; (80030e0 <HAL_ADC_Init+0x2b0>)
 8003070:	4013      	ands	r3, r2
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	6812      	ldr	r2, [r2, #0]
 8003076:	69b9      	ldr	r1, [r7, #24]
 8003078:	430b      	orrs	r3, r1
 800307a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003082:	2b01      	cmp	r3, #1
 8003084:	d130      	bne.n	80030e8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	691a      	ldr	r2, [r3, #16]
 8003092:	4b14      	ldr	r3, [pc, #80]	; (80030e4 <HAL_ADC_Init+0x2b4>)
 8003094:	4013      	ands	r3, r2
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800309a:	3a01      	subs	r2, #1
 800309c:	0411      	lsls	r1, r2, #16
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030a2:	4311      	orrs	r1, r2
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80030a8:	4311      	orrs	r1, r2
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80030ae:	430a      	orrs	r2, r1
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0201 	orr.w	r2, r2, #1
 80030ba:	611a      	str	r2, [r3, #16]
 80030bc:	e01c      	b.n	80030f8 <HAL_ADC_Init+0x2c8>
 80030be:	bf00      	nop
 80030c0:	20000018 	.word	0x20000018
 80030c4:	053e2d63 	.word	0x053e2d63
 80030c8:	40022000 	.word	0x40022000
 80030cc:	40022100 	.word	0x40022100
 80030d0:	58026000 	.word	0x58026000
 80030d4:	40022300 	.word	0x40022300
 80030d8:	58026300 	.word	0x58026300
 80030dc:	fff0c003 	.word	0xfff0c003
 80030e0:	ffffbffc 	.word	0xffffbffc
 80030e4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	691a      	ldr	r2, [r3, #16]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0201 	bic.w	r2, r2, #1
 80030f6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f001 f806 	bl	8004120 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d10c      	bne.n	8003136 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	f023 010f 	bic.w	r1, r3, #15
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	1e5a      	subs	r2, r3, #1
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	631a      	str	r2, [r3, #48]	; 0x30
 8003134:	e007      	b.n	8003146 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 020f 	bic.w	r2, r2, #15
 8003144:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314a:	f023 0303 	bic.w	r3, r3, #3
 800314e:	f043 0201 	orr.w	r2, r3, #1
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	655a      	str	r2, [r3, #84]	; 0x54
 8003156:	e007      	b.n	8003168 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315c:	f043 0210 	orr.w	r2, r3, #16
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003168:	7ffb      	ldrb	r3, [r7, #31]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3724      	adds	r7, #36	; 0x24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd90      	pop	{r4, r7, pc}
 8003172:	bf00      	nop

08003174 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a90      	ldr	r2, [pc, #576]	; (80033c4 <HAL_ADC_Start_IT+0x250>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d004      	beq.n	8003190 <HAL_ADC_Start_IT+0x1c>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a8f      	ldr	r2, [pc, #572]	; (80033c8 <HAL_ADC_Start_IT+0x254>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d101      	bne.n	8003194 <HAL_ADC_Start_IT+0x20>
 8003190:	4b8e      	ldr	r3, [pc, #568]	; (80033cc <HAL_ADC_Start_IT+0x258>)
 8003192:	e000      	b.n	8003196 <HAL_ADC_Start_IT+0x22>
 8003194:	4b8e      	ldr	r3, [pc, #568]	; (80033d0 <HAL_ADC_Start_IT+0x25c>)
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff fd58 	bl	8002c4c <LL_ADC_GetMultimode>
 800319c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff fe1e 	bl	8002de4 <LL_ADC_REG_IsConversionOngoing>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f040 8119 	bne.w	80033e2 <HAL_ADC_Start_IT+0x26e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d101      	bne.n	80031be <HAL_ADC_Start_IT+0x4a>
 80031ba:	2302      	movs	r3, #2
 80031bc:	e116      	b.n	80033ec <HAL_ADC_Start_IT+0x278>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 fec0 	bl	8003f4c <ADC_Enable>
 80031cc:	4603      	mov	r3, r0
 80031ce:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80031d0:	7dfb      	ldrb	r3, [r7, #23]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f040 8100 	bne.w	80033d8 <HAL_ADC_Start_IT+0x264>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031dc:	4b7d      	ldr	r3, [pc, #500]	; (80033d4 <HAL_ADC_Start_IT+0x260>)
 80031de:	4013      	ands	r3, r2
 80031e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a76      	ldr	r2, [pc, #472]	; (80033c8 <HAL_ADC_Start_IT+0x254>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d002      	beq.n	80031f8 <HAL_ADC_Start_IT+0x84>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	e000      	b.n	80031fa <HAL_ADC_Start_IT+0x86>
 80031f8:	4b72      	ldr	r3, [pc, #456]	; (80033c4 <HAL_ADC_Start_IT+0x250>)
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6812      	ldr	r2, [r2, #0]
 80031fe:	4293      	cmp	r3, r2
 8003200:	d002      	beq.n	8003208 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d105      	bne.n	8003214 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003218:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d006      	beq.n	800322e <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003224:	f023 0206 	bic.w	r2, r3, #6
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	659a      	str	r2, [r3, #88]	; 0x58
 800322c:	e002      	b.n	8003234 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	221c      	movs	r2, #28
 800323a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 021c 	bic.w	r2, r2, #28
 8003252:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	2b08      	cmp	r3, #8
 800325a:	d108      	bne.n	800326e <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0208 	orr.w	r2, r2, #8
 800326a:	605a      	str	r2, [r3, #4]
          break;
 800326c:	e008      	b.n	8003280 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f042 0204 	orr.w	r2, r2, #4
 800327c:	605a      	str	r2, [r3, #4]
          break;
 800327e:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003284:	2b00      	cmp	r3, #0
 8003286:	d107      	bne.n	8003298 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f042 0210 	orr.w	r2, r2, #16
 8003296:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a4a      	ldr	r2, [pc, #296]	; (80033c8 <HAL_ADC_Start_IT+0x254>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d002      	beq.n	80032a8 <HAL_ADC_Start_IT+0x134>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	e000      	b.n	80032aa <HAL_ADC_Start_IT+0x136>
 80032a8:	4b46      	ldr	r3, [pc, #280]	; (80033c4 <HAL_ADC_Start_IT+0x250>)
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6812      	ldr	r2, [r2, #0]
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d008      	beq.n	80032c4 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d005      	beq.n	80032c4 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	2b05      	cmp	r3, #5
 80032bc:	d002      	beq.n	80032c4 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	2b09      	cmp	r3, #9
 80032c2:	d13b      	bne.n	800333c <HAL_ADC_Start_IT+0x1c8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d02d      	beq.n	800332e <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	2b08      	cmp	r3, #8
 80032e8:	d110      	bne.n	800330c <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0220 	bic.w	r2, r2, #32
 80032f8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003308:	605a      	str	r2, [r3, #4]
              break;
 800330a:	e011      	b.n	8003330 <HAL_ADC_Start_IT+0x1bc>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800331a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0220 	orr.w	r2, r2, #32
 800332a:	605a      	str	r2, [r3, #4]
              break;
 800332c:	e000      	b.n	8003330 <HAL_ADC_Start_IT+0x1bc>
          }
        }
 800332e:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff fd41 	bl	8002dbc <LL_ADC_REG_StartConversion>
 800333a:	e056      	b.n	80033ea <HAL_ADC_Start_IT+0x276>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003340:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a1e      	ldr	r2, [pc, #120]	; (80033c8 <HAL_ADC_Start_IT+0x254>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d002      	beq.n	8003358 <HAL_ADC_Start_IT+0x1e4>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	e000      	b.n	800335a <HAL_ADC_Start_IT+0x1e6>
 8003358:	4b1a      	ldr	r3, [pc, #104]	; (80033c4 <HAL_ADC_Start_IT+0x250>)
 800335a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d03f      	beq.n	80033e8 <HAL_ADC_Start_IT+0x274>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003370:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	2b08      	cmp	r3, #8
 800337e:	d110      	bne.n	80033a2 <HAL_ADC_Start_IT+0x22e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0220 	bic.w	r2, r2, #32
 800338e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800339e:	605a      	str	r2, [r3, #4]
              break;
 80033a0:	e023      	b.n	80033ea <HAL_ADC_Start_IT+0x276>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033b0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f042 0220 	orr.w	r2, r2, #32
 80033c0:	605a      	str	r2, [r3, #4]
              break;
 80033c2:	e012      	b.n	80033ea <HAL_ADC_Start_IT+0x276>
 80033c4:	40022000 	.word	0x40022000
 80033c8:	40022100 	.word	0x40022100
 80033cc:	40022300 	.word	0x40022300
 80033d0:	58026300 	.word	0x58026300
 80033d4:	fffff0fe 	.word	0xfffff0fe
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80033e0:	e003      	b.n	80033ea <HAL_ADC_Start_IT+0x276>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80033e2:	2302      	movs	r3, #2
 80033e4:	75fb      	strb	r3, [r7, #23]
 80033e6:	e000      	b.n	80033ea <HAL_ADC_Start_IT+0x276>
        }
 80033e8:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 80033ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3718      	adds	r7, #24
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003402:	4618      	mov	r0, r3
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
	...

08003410 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b08a      	sub	sp, #40	; 0x28
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003418:	2300      	movs	r3, #0
 800341a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a87      	ldr	r2, [pc, #540]	; (8003650 <HAL_ADC_IRQHandler+0x240>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d004      	beq.n	8003440 <HAL_ADC_IRQHandler+0x30>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a86      	ldr	r2, [pc, #536]	; (8003654 <HAL_ADC_IRQHandler+0x244>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d101      	bne.n	8003444 <HAL_ADC_IRQHandler+0x34>
 8003440:	4b85      	ldr	r3, [pc, #532]	; (8003658 <HAL_ADC_IRQHandler+0x248>)
 8003442:	e000      	b.n	8003446 <HAL_ADC_IRQHandler+0x36>
 8003444:	4b85      	ldr	r3, [pc, #532]	; (800365c <HAL_ADC_IRQHandler+0x24c>)
 8003446:	4618      	mov	r0, r3
 8003448:	f7ff fc00 	bl	8002c4c <LL_ADC_GetMultimode>
 800344c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d017      	beq.n	8003488 <HAL_ADC_IRQHandler+0x78>
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d012      	beq.n	8003488 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003466:	f003 0310 	and.w	r3, r3, #16
 800346a:	2b00      	cmp	r3, #0
 800346c:	d105      	bne.n	800347a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003472:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f001 f81a 	bl	80044b4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2202      	movs	r2, #2
 8003486:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b00      	cmp	r3, #0
 8003490:	d004      	beq.n	800349c <HAL_ADC_IRQHandler+0x8c>
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10a      	bne.n	80034b2 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 8083 	beq.w	80035ae <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d07d      	beq.n	80035ae <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b6:	f003 0310 	and.w	r3, r3, #16
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d105      	bne.n	80034ca <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff fb1a 	bl	8002b08 <LL_ADC_REG_IsTriggerSourceSWStart>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d062      	beq.n	80035a0 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a5d      	ldr	r2, [pc, #372]	; (8003654 <HAL_ADC_IRQHandler+0x244>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d002      	beq.n	80034ea <HAL_ADC_IRQHandler+0xda>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	e000      	b.n	80034ec <HAL_ADC_IRQHandler+0xdc>
 80034ea:	4b59      	ldr	r3, [pc, #356]	; (8003650 <HAL_ADC_IRQHandler+0x240>)
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6812      	ldr	r2, [r2, #0]
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d008      	beq.n	8003506 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d005      	beq.n	8003506 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2b05      	cmp	r3, #5
 80034fe:	d002      	beq.n	8003506 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	2b09      	cmp	r3, #9
 8003504:	d104      	bne.n	8003510 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	623b      	str	r3, [r7, #32]
 800350e:	e00c      	b.n	800352a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a4f      	ldr	r2, [pc, #316]	; (8003654 <HAL_ADC_IRQHandler+0x244>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d002      	beq.n	8003520 <HAL_ADC_IRQHandler+0x110>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	e000      	b.n	8003522 <HAL_ADC_IRQHandler+0x112>
 8003520:	4b4b      	ldr	r3, [pc, #300]	; (8003650 <HAL_ADC_IRQHandler+0x240>)
 8003522:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d135      	bne.n	80035a0 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0308 	and.w	r3, r3, #8
 800353e:	2b08      	cmp	r3, #8
 8003540:	d12e      	bne.n	80035a0 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff fc4c 	bl	8002de4 <LL_ADC_REG_IsConversionOngoing>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d11a      	bne.n	8003588 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 020c 	bic.w	r2, r2, #12
 8003560:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003566:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003572:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d112      	bne.n	80035a0 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357e:	f043 0201 	orr.w	r2, r3, #1
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	655a      	str	r2, [r3, #84]	; 0x54
 8003586:	e00b      	b.n	80035a0 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358c:	f043 0210 	orr.w	r2, r3, #16
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003598:	f043 0201 	orr.w	r2, r3, #1
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7fe fcc7 	bl	8001f34 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	220c      	movs	r2, #12
 80035ac:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	f003 0320 	and.w	r3, r3, #32
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d004      	beq.n	80035c2 <HAL_ADC_IRQHandler+0x1b2>
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	f003 0320 	and.w	r3, r3, #32
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10b      	bne.n	80035da <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 80a0 	beq.w	800370e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 809a 	beq.w	800370e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035de:	f003 0310 	and.w	r3, r3, #16
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d105      	bne.n	80035f2 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ea:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff fac5 	bl	8002b86 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80035fc:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff fa80 	bl	8002b08 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003608:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a11      	ldr	r2, [pc, #68]	; (8003654 <HAL_ADC_IRQHandler+0x244>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d002      	beq.n	800361a <HAL_ADC_IRQHandler+0x20a>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	e000      	b.n	800361c <HAL_ADC_IRQHandler+0x20c>
 800361a:	4b0d      	ldr	r3, [pc, #52]	; (8003650 <HAL_ADC_IRQHandler+0x240>)
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6812      	ldr	r2, [r2, #0]
 8003620:	4293      	cmp	r3, r2
 8003622:	d008      	beq.n	8003636 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d005      	beq.n	8003636 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	2b06      	cmp	r3, #6
 800362e:	d002      	beq.n	8003636 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	2b07      	cmp	r3, #7
 8003634:	d104      	bne.n	8003640 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	623b      	str	r3, [r7, #32]
 800363e:	e014      	b.n	800366a <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a03      	ldr	r2, [pc, #12]	; (8003654 <HAL_ADC_IRQHandler+0x244>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d00a      	beq.n	8003660 <HAL_ADC_IRQHandler+0x250>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	e008      	b.n	8003662 <HAL_ADC_IRQHandler+0x252>
 8003650:	40022000 	.word	0x40022000
 8003654:	40022100 	.word	0x40022100
 8003658:	40022300 	.word	0x40022300
 800365c:	58026300 	.word	0x58026300
 8003660:	4b84      	ldr	r3, [pc, #528]	; (8003874 <HAL_ADC_IRQHandler+0x464>)
 8003662:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d047      	beq.n	8003700 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d007      	beq.n	800368a <HAL_ADC_IRQHandler+0x27a>
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d03f      	beq.n	8003700 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003686:	2b00      	cmp	r3, #0
 8003688:	d13a      	bne.n	8003700 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003694:	2b40      	cmp	r3, #64	; 0x40
 8003696:	d133      	bne.n	8003700 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d12e      	bne.n	8003700 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff fbaf 	bl	8002e0a <LL_ADC_INJ_IsConversionOngoing>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d11a      	bne.n	80036e8 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036c0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d112      	bne.n	8003700 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036de:	f043 0201 	orr.w	r2, r3, #1
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	655a      	str	r2, [r3, #84]	; 0x54
 80036e6:	e00b      	b.n	8003700 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ec:	f043 0210 	orr.w	r2, r3, #16
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f8:	f043 0201 	orr.w	r2, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 feaf 	bl	8004464 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2260      	movs	r2, #96	; 0x60
 800370c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003714:	2b00      	cmp	r3, #0
 8003716:	d011      	beq.n	800373c <HAL_ADC_IRQHandler+0x32c>
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00c      	beq.n	800373c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003726:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f8a8 	bl	8003884 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2280      	movs	r2, #128	; 0x80
 800373a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003742:	2b00      	cmp	r3, #0
 8003744:	d012      	beq.n	800376c <HAL_ADC_IRQHandler+0x35c>
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00d      	beq.n	800376c <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003754:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 fe95 	bl	800448c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f44f 7280 	mov.w	r2, #256	; 0x100
 800376a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003772:	2b00      	cmp	r3, #0
 8003774:	d012      	beq.n	800379c <HAL_ADC_IRQHandler+0x38c>
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00d      	beq.n	800379c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003784:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 fe87 	bl	80044a0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f44f 7200 	mov.w	r2, #512	; 0x200
 800379a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	f003 0310 	and.w	r3, r3, #16
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d043      	beq.n	800382e <HAL_ADC_IRQHandler+0x41e>
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	f003 0310 	and.w	r3, r3, #16
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d03e      	beq.n	800382e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d102      	bne.n	80037be <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80037b8:	2301      	movs	r3, #1
 80037ba:	627b      	str	r3, [r7, #36]	; 0x24
 80037bc:	e021      	b.n	8003802 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d015      	beq.n	80037f0 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a2a      	ldr	r2, [pc, #168]	; (8003874 <HAL_ADC_IRQHandler+0x464>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d004      	beq.n	80037d8 <HAL_ADC_IRQHandler+0x3c8>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a29      	ldr	r2, [pc, #164]	; (8003878 <HAL_ADC_IRQHandler+0x468>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d101      	bne.n	80037dc <HAL_ADC_IRQHandler+0x3cc>
 80037d8:	4b28      	ldr	r3, [pc, #160]	; (800387c <HAL_ADC_IRQHandler+0x46c>)
 80037da:	e000      	b.n	80037de <HAL_ADC_IRQHandler+0x3ce>
 80037dc:	4b28      	ldr	r3, [pc, #160]	; (8003880 <HAL_ADC_IRQHandler+0x470>)
 80037de:	4618      	mov	r0, r3
 80037e0:	f7ff fa42 	bl	8002c68 <LL_ADC_GetMultiDMATransfer>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00b      	beq.n	8003802 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80037ea:	2301      	movs	r3, #1
 80037ec:	627b      	str	r3, [r7, #36]	; 0x24
 80037ee:	e008      	b.n	8003802 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	f003 0303 	and.w	r3, r3, #3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80037fe:	2301      	movs	r3, #1
 8003800:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	2b01      	cmp	r3, #1
 8003806:	d10e      	bne.n	8003826 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003818:	f043 0202 	orr.w	r2, r3, #2
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f839 	bl	8003898 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2210      	movs	r2, #16
 800382c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003834:	2b00      	cmp	r3, #0
 8003836:	d018      	beq.n	800386a <HAL_ADC_IRQHandler+0x45a>
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800383e:	2b00      	cmp	r3, #0
 8003840:	d013      	beq.n	800386a <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003846:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003852:	f043 0208 	orr.w	r2, r3, #8
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003862:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 fe07 	bl	8004478 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800386a:	bf00      	nop
 800386c:	3728      	adds	r7, #40	; 0x28
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40022000 	.word	0x40022000
 8003878:	40022100 	.word	0x40022100
 800387c:	40022300 	.word	0x40022300
 8003880:	58026300 	.word	0x58026300

08003884 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80038ac:	b590      	push	{r4, r7, lr}
 80038ae:	b0a1      	sub	sp, #132	; 0x84
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038b6:	2300      	movs	r3, #0
 80038b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80038bc:	2300      	movs	r3, #0
 80038be:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	4a9d      	ldr	r2, [pc, #628]	; (8003b3c <HAL_ADC_ConfigChannel+0x290>)
 80038c6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d101      	bne.n	80038d6 <HAL_ADC_ConfigChannel+0x2a>
 80038d2:	2302      	movs	r3, #2
 80038d4:	e321      	b.n	8003f1a <HAL_ADC_ConfigChannel+0x66e>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7ff fa7e 	bl	8002de4 <LL_ADC_REG_IsConversionOngoing>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f040 8306 	bne.w	8003efc <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d108      	bne.n	800390e <HAL_ADC_ConfigChannel+0x62>
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	0e9b      	lsrs	r3, r3, #26
 8003902:	f003 031f 	and.w	r3, r3, #31
 8003906:	2201      	movs	r2, #1
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	e016      	b.n	800393c <HAL_ADC_ConfigChannel+0x90>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003914:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003916:	fa93 f3a3 	rbit	r3, r3
 800391a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800391c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800391e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003920:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003926:	2320      	movs	r3, #32
 8003928:	e003      	b.n	8003932 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800392a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800392c:	fab3 f383 	clz	r3, r3
 8003930:	b2db      	uxtb	r3, r3
 8003932:	f003 031f 	and.w	r3, r3, #31
 8003936:	2201      	movs	r2, #1
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6812      	ldr	r2, [r2, #0]
 8003940:	69d1      	ldr	r1, [r2, #28]
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6812      	ldr	r2, [r2, #0]
 8003946:	430b      	orrs	r3, r1
 8003948:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6818      	ldr	r0, [r3, #0]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	6859      	ldr	r1, [r3, #4]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	461a      	mov	r2, r3
 8003958:	f7ff f8e9 	bl	8002b2e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff fa3f 	bl	8002de4 <LL_ADC_REG_IsConversionOngoing>
 8003966:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff fa4c 	bl	8002e0a <LL_ADC_INJ_IsConversionOngoing>
 8003972:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003974:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003976:	2b00      	cmp	r3, #0
 8003978:	f040 80b3 	bne.w	8003ae2 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800397c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800397e:	2b00      	cmp	r3, #0
 8003980:	f040 80af 	bne.w	8003ae2 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6818      	ldr	r0, [r3, #0]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	6819      	ldr	r1, [r3, #0]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	461a      	mov	r2, r3
 8003992:	f7ff f90b 	bl	8002bac <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003996:	4b6a      	ldr	r3, [pc, #424]	; (8003b40 <HAL_ADC_ConfigChannel+0x294>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800399e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039a2:	d10b      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x110>
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	695a      	ldr	r2, [r3, #20]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	089b      	lsrs	r3, r3, #2
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ba:	e01d      	b.n	80039f8 <HAL_ADC_ConfigChannel+0x14c>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f003 0310 	and.w	r3, r3, #16
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10b      	bne.n	80039e2 <HAL_ADC_ConfigChannel+0x136>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	695a      	ldr	r2, [r3, #20]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	089b      	lsrs	r3, r3, #2
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	e00a      	b.n	80039f8 <HAL_ADC_ConfigChannel+0x14c>
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	695a      	ldr	r2, [r3, #20]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	089b      	lsrs	r3, r3, #2
 80039ee:	f003 0304 	and.w	r3, r3, #4
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d027      	beq.n	8003a52 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6818      	ldr	r0, [r3, #0]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	6919      	ldr	r1, [r3, #16]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a10:	f7ff f826 	bl	8002a60 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6818      	ldr	r0, [r3, #0]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	6919      	ldr	r1, [r3, #16]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	7e5b      	ldrb	r3, [r3, #25]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d102      	bne.n	8003a2a <HAL_ADC_ConfigChannel+0x17e>
 8003a24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003a28:	e000      	b.n	8003a2c <HAL_ADC_ConfigChannel+0x180>
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	f7ff f850 	bl	8002ad2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6818      	ldr	r0, [r3, #0]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	6919      	ldr	r1, [r3, #16]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	7e1b      	ldrb	r3, [r3, #24]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d102      	bne.n	8003a48 <HAL_ADC_ConfigChannel+0x19c>
 8003a42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a46:	e000      	b.n	8003a4a <HAL_ADC_ConfigChannel+0x19e>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	f7ff f828 	bl	8002aa0 <LL_ADC_SetDataRightShift>
 8003a50:	e047      	b.n	8003ae2 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	069b      	lsls	r3, r3, #26
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d107      	bne.n	8003a76 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003a74:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	069b      	lsls	r3, r3, #26
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d107      	bne.n	8003a9a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003a98:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aa0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	069b      	lsls	r3, r3, #26
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d107      	bne.n	8003abe <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003abc:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ac4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	069b      	lsls	r3, r3, #26
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d107      	bne.n	8003ae2 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003ae0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff f942 	bl	8002d70 <LL_ADC_IsEnabled>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f040 820d 	bne.w	8003f0e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6818      	ldr	r0, [r3, #0]
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	6819      	ldr	r1, [r3, #0]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	461a      	mov	r2, r3
 8003b02:	f7ff f87f 	bl	8002c04 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	4a0c      	ldr	r2, [pc, #48]	; (8003b3c <HAL_ADC_ConfigChannel+0x290>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	f040 8133 	bne.w	8003d78 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d110      	bne.n	8003b44 <HAL_ADC_ConfigChannel+0x298>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	0e9b      	lsrs	r3, r3, #26
 8003b28:	3301      	adds	r3, #1
 8003b2a:	f003 031f 	and.w	r3, r3, #31
 8003b2e:	2b09      	cmp	r3, #9
 8003b30:	bf94      	ite	ls
 8003b32:	2301      	movls	r3, #1
 8003b34:	2300      	movhi	r3, #0
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	e01e      	b.n	8003b78 <HAL_ADC_ConfigChannel+0x2cc>
 8003b3a:	bf00      	nop
 8003b3c:	47ff0000 	.word	0x47ff0000
 8003b40:	5c001000 	.word	0x5c001000
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b4c:	fa93 f3a3 	rbit	r3, r3
 8003b50:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003b52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b54:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003b56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003b5c:	2320      	movs	r3, #32
 8003b5e:	e003      	b.n	8003b68 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003b60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b62:	fab3 f383 	clz	r3, r3
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	3301      	adds	r3, #1
 8003b6a:	f003 031f 	and.w	r3, r3, #31
 8003b6e:	2b09      	cmp	r3, #9
 8003b70:	bf94      	ite	ls
 8003b72:	2301      	movls	r3, #1
 8003b74:	2300      	movhi	r3, #0
 8003b76:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d079      	beq.n	8003c70 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d107      	bne.n	8003b98 <HAL_ADC_ConfigChannel+0x2ec>
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	0e9b      	lsrs	r3, r3, #26
 8003b8e:	3301      	adds	r3, #1
 8003b90:	069b      	lsls	r3, r3, #26
 8003b92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b96:	e015      	b.n	8003bc4 <HAL_ADC_ConfigChannel+0x318>
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ba0:	fa93 f3a3 	rbit	r3, r3
 8003ba4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ba8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003bb0:	2320      	movs	r3, #32
 8003bb2:	e003      	b.n	8003bbc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003bb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bb6:	fab3 f383 	clz	r3, r3
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	069b      	lsls	r3, r3, #26
 8003bc0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d109      	bne.n	8003be4 <HAL_ADC_ConfigChannel+0x338>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	0e9b      	lsrs	r3, r3, #26
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	f003 031f 	and.w	r3, r3, #31
 8003bdc:	2101      	movs	r1, #1
 8003bde:	fa01 f303 	lsl.w	r3, r1, r3
 8003be2:	e017      	b.n	8003c14 <HAL_ADC_ConfigChannel+0x368>
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bec:	fa93 f3a3 	rbit	r3, r3
 8003bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bf4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003bf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003bfc:	2320      	movs	r3, #32
 8003bfe:	e003      	b.n	8003c08 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c02:	fab3 f383 	clz	r3, r3
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	3301      	adds	r3, #1
 8003c0a:	f003 031f 	and.w	r3, r3, #31
 8003c0e:	2101      	movs	r1, #1
 8003c10:	fa01 f303 	lsl.w	r3, r1, r3
 8003c14:	ea42 0103 	orr.w	r1, r2, r3
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10a      	bne.n	8003c3a <HAL_ADC_ConfigChannel+0x38e>
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	0e9b      	lsrs	r3, r3, #26
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	f003 021f 	and.w	r2, r3, #31
 8003c30:	4613      	mov	r3, r2
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	4413      	add	r3, r2
 8003c36:	051b      	lsls	r3, r3, #20
 8003c38:	e018      	b.n	8003c6c <HAL_ADC_ConfigChannel+0x3c0>
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c42:	fa93 f3a3 	rbit	r3, r3
 8003c46:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003c52:	2320      	movs	r3, #32
 8003c54:	e003      	b.n	8003c5e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c58:	fab3 f383 	clz	r3, r3
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	3301      	adds	r3, #1
 8003c60:	f003 021f 	and.w	r2, r3, #31
 8003c64:	4613      	mov	r3, r2
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	4413      	add	r3, r2
 8003c6a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c6c:	430b      	orrs	r3, r1
 8003c6e:	e07e      	b.n	8003d6e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d107      	bne.n	8003c8c <HAL_ADC_ConfigChannel+0x3e0>
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	0e9b      	lsrs	r3, r3, #26
 8003c82:	3301      	adds	r3, #1
 8003c84:	069b      	lsls	r3, r3, #26
 8003c86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c8a:	e015      	b.n	8003cb8 <HAL_ADC_ConfigChannel+0x40c>
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c94:	fa93 f3a3 	rbit	r3, r3
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003ca4:	2320      	movs	r3, #32
 8003ca6:	e003      	b.n	8003cb0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003caa:	fab3 f383 	clz	r3, r3
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	069b      	lsls	r3, r3, #26
 8003cb4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d109      	bne.n	8003cd8 <HAL_ADC_ConfigChannel+0x42c>
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	0e9b      	lsrs	r3, r3, #26
 8003cca:	3301      	adds	r3, #1
 8003ccc:	f003 031f 	and.w	r3, r3, #31
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd6:	e017      	b.n	8003d08 <HAL_ADC_ConfigChannel+0x45c>
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	fa93 f3a3 	rbit	r3, r3
 8003ce4:	61bb      	str	r3, [r7, #24]
  return result;
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003cea:	6a3b      	ldr	r3, [r7, #32]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003cf0:	2320      	movs	r3, #32
 8003cf2:	e003      	b.n	8003cfc <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
 8003cf6:	fab3 f383 	clz	r3, r3
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	f003 031f 	and.w	r3, r3, #31
 8003d02:	2101      	movs	r1, #1
 8003d04:	fa01 f303 	lsl.w	r3, r1, r3
 8003d08:	ea42 0103 	orr.w	r1, r2, r3
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10d      	bne.n	8003d34 <HAL_ADC_ConfigChannel+0x488>
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	0e9b      	lsrs	r3, r3, #26
 8003d1e:	3301      	adds	r3, #1
 8003d20:	f003 021f 	and.w	r2, r3, #31
 8003d24:	4613      	mov	r3, r2
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	4413      	add	r3, r2
 8003d2a:	3b1e      	subs	r3, #30
 8003d2c:	051b      	lsls	r3, r3, #20
 8003d2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d32:	e01b      	b.n	8003d6c <HAL_ADC_ConfigChannel+0x4c0>
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	fa93 f3a3 	rbit	r3, r3
 8003d40:	60fb      	str	r3, [r7, #12]
  return result;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003d4c:	2320      	movs	r3, #32
 8003d4e:	e003      	b.n	8003d58 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	fab3 f383 	clz	r3, r3
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	3301      	adds	r3, #1
 8003d5a:	f003 021f 	and.w	r2, r3, #31
 8003d5e:	4613      	mov	r3, r2
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	4413      	add	r3, r2
 8003d64:	3b1e      	subs	r3, #30
 8003d66:	051b      	lsls	r3, r3, #20
 8003d68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d6c:	430b      	orrs	r3, r1
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	6892      	ldr	r2, [r2, #8]
 8003d72:	4619      	mov	r1, r3
 8003d74:	f7fe ff1a 	bl	8002bac <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f280 80c6 	bge.w	8003f0e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a67      	ldr	r2, [pc, #412]	; (8003f24 <HAL_ADC_ConfigChannel+0x678>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d004      	beq.n	8003d96 <HAL_ADC_ConfigChannel+0x4ea>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a65      	ldr	r2, [pc, #404]	; (8003f28 <HAL_ADC_ConfigChannel+0x67c>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d101      	bne.n	8003d9a <HAL_ADC_ConfigChannel+0x4ee>
 8003d96:	4b65      	ldr	r3, [pc, #404]	; (8003f2c <HAL_ADC_ConfigChannel+0x680>)
 8003d98:	e000      	b.n	8003d9c <HAL_ADC_ConfigChannel+0x4f0>
 8003d9a:	4b65      	ldr	r3, [pc, #404]	; (8003f30 <HAL_ADC_ConfigChannel+0x684>)
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7fe fe51 	bl	8002a44 <LL_ADC_GetCommonPathInternalCh>
 8003da2:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a5e      	ldr	r2, [pc, #376]	; (8003f24 <HAL_ADC_ConfigChannel+0x678>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d004      	beq.n	8003db8 <HAL_ADC_ConfigChannel+0x50c>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a5d      	ldr	r2, [pc, #372]	; (8003f28 <HAL_ADC_ConfigChannel+0x67c>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d10e      	bne.n	8003dd6 <HAL_ADC_ConfigChannel+0x52a>
 8003db8:	485a      	ldr	r0, [pc, #360]	; (8003f24 <HAL_ADC_ConfigChannel+0x678>)
 8003dba:	f7fe ffd9 	bl	8002d70 <LL_ADC_IsEnabled>
 8003dbe:	4604      	mov	r4, r0
 8003dc0:	4859      	ldr	r0, [pc, #356]	; (8003f28 <HAL_ADC_ConfigChannel+0x67c>)
 8003dc2:	f7fe ffd5 	bl	8002d70 <LL_ADC_IsEnabled>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	4323      	orrs	r3, r4
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	bf0c      	ite	eq
 8003dce:	2301      	moveq	r3, #1
 8003dd0:	2300      	movne	r3, #0
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	e008      	b.n	8003de8 <HAL_ADC_ConfigChannel+0x53c>
 8003dd6:	4857      	ldr	r0, [pc, #348]	; (8003f34 <HAL_ADC_ConfigChannel+0x688>)
 8003dd8:	f7fe ffca 	bl	8002d70 <LL_ADC_IsEnabled>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	bf0c      	ite	eq
 8003de2:	2301      	moveq	r3, #1
 8003de4:	2300      	movne	r3, #0
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d07d      	beq.n	8003ee8 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a51      	ldr	r2, [pc, #324]	; (8003f38 <HAL_ADC_ConfigChannel+0x68c>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d130      	bne.n	8003e58 <HAL_ADC_ConfigChannel+0x5ac>
 8003df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003df8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d12b      	bne.n	8003e58 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a4b      	ldr	r2, [pc, #300]	; (8003f34 <HAL_ADC_ConfigChannel+0x688>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	f040 8081 	bne.w	8003f0e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a44      	ldr	r2, [pc, #272]	; (8003f24 <HAL_ADC_ConfigChannel+0x678>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d004      	beq.n	8003e20 <HAL_ADC_ConfigChannel+0x574>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a43      	ldr	r2, [pc, #268]	; (8003f28 <HAL_ADC_ConfigChannel+0x67c>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d101      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x578>
 8003e20:	4a42      	ldr	r2, [pc, #264]	; (8003f2c <HAL_ADC_ConfigChannel+0x680>)
 8003e22:	e000      	b.n	8003e26 <HAL_ADC_ConfigChannel+0x57a>
 8003e24:	4a42      	ldr	r2, [pc, #264]	; (8003f30 <HAL_ADC_ConfigChannel+0x684>)
 8003e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	4610      	mov	r0, r2
 8003e30:	f7fe fdf5 	bl	8002a1e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e34:	4b41      	ldr	r3, [pc, #260]	; (8003f3c <HAL_ADC_ConfigChannel+0x690>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	099b      	lsrs	r3, r3, #6
 8003e3a:	4a41      	ldr	r2, [pc, #260]	; (8003f40 <HAL_ADC_ConfigChannel+0x694>)
 8003e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e40:	099b      	lsrs	r3, r3, #6
 8003e42:	3301      	adds	r3, #1
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003e48:	e002      	b.n	8003e50 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1f9      	bne.n	8003e4a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e56:	e05a      	b.n	8003f0e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a39      	ldr	r2, [pc, #228]	; (8003f44 <HAL_ADC_ConfigChannel+0x698>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d11e      	bne.n	8003ea0 <HAL_ADC_ConfigChannel+0x5f4>
 8003e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d119      	bne.n	8003ea0 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a30      	ldr	r2, [pc, #192]	; (8003f34 <HAL_ADC_ConfigChannel+0x688>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d14b      	bne.n	8003f0e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a2a      	ldr	r2, [pc, #168]	; (8003f24 <HAL_ADC_ConfigChannel+0x678>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d004      	beq.n	8003e8a <HAL_ADC_ConfigChannel+0x5de>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a28      	ldr	r2, [pc, #160]	; (8003f28 <HAL_ADC_ConfigChannel+0x67c>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d101      	bne.n	8003e8e <HAL_ADC_ConfigChannel+0x5e2>
 8003e8a:	4a28      	ldr	r2, [pc, #160]	; (8003f2c <HAL_ADC_ConfigChannel+0x680>)
 8003e8c:	e000      	b.n	8003e90 <HAL_ADC_ConfigChannel+0x5e4>
 8003e8e:	4a28      	ldr	r2, [pc, #160]	; (8003f30 <HAL_ADC_ConfigChannel+0x684>)
 8003e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e96:	4619      	mov	r1, r3
 8003e98:	4610      	mov	r0, r2
 8003e9a:	f7fe fdc0 	bl	8002a1e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e9e:	e036      	b.n	8003f0e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a28      	ldr	r2, [pc, #160]	; (8003f48 <HAL_ADC_ConfigChannel+0x69c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d131      	bne.n	8003f0e <HAL_ADC_ConfigChannel+0x662>
 8003eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d12c      	bne.n	8003f0e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a1e      	ldr	r2, [pc, #120]	; (8003f34 <HAL_ADC_ConfigChannel+0x688>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d127      	bne.n	8003f0e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a18      	ldr	r2, [pc, #96]	; (8003f24 <HAL_ADC_ConfigChannel+0x678>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d004      	beq.n	8003ed2 <HAL_ADC_ConfigChannel+0x626>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a16      	ldr	r2, [pc, #88]	; (8003f28 <HAL_ADC_ConfigChannel+0x67c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d101      	bne.n	8003ed6 <HAL_ADC_ConfigChannel+0x62a>
 8003ed2:	4a16      	ldr	r2, [pc, #88]	; (8003f2c <HAL_ADC_ConfigChannel+0x680>)
 8003ed4:	e000      	b.n	8003ed8 <HAL_ADC_ConfigChannel+0x62c>
 8003ed6:	4a16      	ldr	r2, [pc, #88]	; (8003f30 <HAL_ADC_ConfigChannel+0x684>)
 8003ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ede:	4619      	mov	r1, r3
 8003ee0:	4610      	mov	r0, r2
 8003ee2:	f7fe fd9c 	bl	8002a1e <LL_ADC_SetCommonPathInternalCh>
 8003ee6:	e012      	b.n	8003f0e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eec:	f043 0220 	orr.w	r2, r3, #32
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003efa:	e008      	b.n	8003f0e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f00:	f043 0220 	orr.w	r2, r3, #32
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003f16:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3784      	adds	r7, #132	; 0x84
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd90      	pop	{r4, r7, pc}
 8003f22:	bf00      	nop
 8003f24:	40022000 	.word	0x40022000
 8003f28:	40022100 	.word	0x40022100
 8003f2c:	40022300 	.word	0x40022300
 8003f30:	58026300 	.word	0x58026300
 8003f34:	58026000 	.word	0x58026000
 8003f38:	cb840000 	.word	0xcb840000
 8003f3c:	20000018 	.word	0x20000018
 8003f40:	053e2d63 	.word	0x053e2d63
 8003f44:	c7520000 	.word	0xc7520000
 8003f48:	cfb80000 	.word	0xcfb80000

08003f4c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7fe ff09 	bl	8002d70 <LL_ADC_IsEnabled>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d16e      	bne.n	8004042 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689a      	ldr	r2, [r3, #8]
 8003f6a:	4b38      	ldr	r3, [pc, #224]	; (800404c <ADC_Enable+0x100>)
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00d      	beq.n	8003f8e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f76:	f043 0210 	orr.w	r2, r3, #16
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f82:	f043 0201 	orr.w	r2, r3, #1
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e05a      	b.n	8004044 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7fe fec4 	bl	8002d20 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003f98:	f7fe fcdc 	bl	8002954 <HAL_GetTick>
 8003f9c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a2b      	ldr	r2, [pc, #172]	; (8004050 <ADC_Enable+0x104>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d004      	beq.n	8003fb2 <ADC_Enable+0x66>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a29      	ldr	r2, [pc, #164]	; (8004054 <ADC_Enable+0x108>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d101      	bne.n	8003fb6 <ADC_Enable+0x6a>
 8003fb2:	4b29      	ldr	r3, [pc, #164]	; (8004058 <ADC_Enable+0x10c>)
 8003fb4:	e000      	b.n	8003fb8 <ADC_Enable+0x6c>
 8003fb6:	4b29      	ldr	r3, [pc, #164]	; (800405c <ADC_Enable+0x110>)
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7fe fe47 	bl	8002c4c <LL_ADC_GetMultimode>
 8003fbe:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a23      	ldr	r2, [pc, #140]	; (8004054 <ADC_Enable+0x108>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d002      	beq.n	8003fd0 <ADC_Enable+0x84>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	e000      	b.n	8003fd2 <ADC_Enable+0x86>
 8003fd0:	4b1f      	ldr	r3, [pc, #124]	; (8004050 <ADC_Enable+0x104>)
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	6812      	ldr	r2, [r2, #0]
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d02c      	beq.n	8004034 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d130      	bne.n	8004042 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fe0:	e028      	b.n	8004034 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fe fec2 	bl	8002d70 <LL_ADC_IsEnabled>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d104      	bne.n	8003ffc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fe fe92 	bl	8002d20 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ffc:	f7fe fcaa 	bl	8002954 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d914      	bls.n	8004034 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b01      	cmp	r3, #1
 8004016:	d00d      	beq.n	8004034 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401c:	f043 0210 	orr.w	r2, r3, #16
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004028:	f043 0201 	orr.w	r2, r3, #1
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e007      	b.n	8004044 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b01      	cmp	r3, #1
 8004040:	d1cf      	bne.n	8003fe2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	8000003f 	.word	0x8000003f
 8004050:	40022000 	.word	0x40022000
 8004054:	40022100 	.word	0x40022100
 8004058:	40022300 	.word	0x40022300
 800405c:	58026300 	.word	0x58026300

08004060 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4618      	mov	r0, r3
 800406e:	f7fe fe92 	bl	8002d96 <LL_ADC_IsDisableOngoing>
 8004072:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4618      	mov	r0, r3
 800407a:	f7fe fe79 	bl	8002d70 <LL_ADC_IsEnabled>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d047      	beq.n	8004114 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d144      	bne.n	8004114 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f003 030d 	and.w	r3, r3, #13
 8004094:	2b01      	cmp	r3, #1
 8004096:	d10c      	bne.n	80040b2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4618      	mov	r0, r3
 800409e:	f7fe fe53 	bl	8002d48 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2203      	movs	r2, #3
 80040a8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80040aa:	f7fe fc53 	bl	8002954 <HAL_GetTick>
 80040ae:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80040b0:	e029      	b.n	8004106 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b6:	f043 0210 	orr.w	r2, r3, #16
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c2:	f043 0201 	orr.w	r2, r3, #1
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e023      	b.n	8004116 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80040ce:	f7fe fc41 	bl	8002954 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d914      	bls.n	8004106 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00d      	beq.n	8004106 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ee:	f043 0210 	orr.w	r2, r3, #16
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fa:	f043 0201 	orr.w	r2, r3, #1
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e007      	b.n	8004116 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1dc      	bne.n	80040ce <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
	...

08004120 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a7a      	ldr	r2, [pc, #488]	; (8004318 <ADC_ConfigureBoostMode+0x1f8>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d004      	beq.n	800413c <ADC_ConfigureBoostMode+0x1c>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a79      	ldr	r2, [pc, #484]	; (800431c <ADC_ConfigureBoostMode+0x1fc>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d109      	bne.n	8004150 <ADC_ConfigureBoostMode+0x30>
 800413c:	4b78      	ldr	r3, [pc, #480]	; (8004320 <ADC_ConfigureBoostMode+0x200>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004144:	2b00      	cmp	r3, #0
 8004146:	bf14      	ite	ne
 8004148:	2301      	movne	r3, #1
 800414a:	2300      	moveq	r3, #0
 800414c:	b2db      	uxtb	r3, r3
 800414e:	e008      	b.n	8004162 <ADC_ConfigureBoostMode+0x42>
 8004150:	4b74      	ldr	r3, [pc, #464]	; (8004324 <ADC_ConfigureBoostMode+0x204>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004158:	2b00      	cmp	r3, #0
 800415a:	bf14      	ite	ne
 800415c:	2301      	movne	r3, #1
 800415e:	2300      	moveq	r3, #0
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d01c      	beq.n	80041a0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004166:	f003 feb9 	bl	8007edc <HAL_RCC_GetHCLKFreq>
 800416a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004174:	d010      	beq.n	8004198 <ADC_ConfigureBoostMode+0x78>
 8004176:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800417a:	d873      	bhi.n	8004264 <ADC_ConfigureBoostMode+0x144>
 800417c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004180:	d002      	beq.n	8004188 <ADC_ConfigureBoostMode+0x68>
 8004182:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004186:	d16d      	bne.n	8004264 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	0c1b      	lsrs	r3, r3, #16
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	fbb2 f3f3 	udiv	r3, r2, r3
 8004194:	60fb      	str	r3, [r7, #12]
        break;
 8004196:	e068      	b.n	800426a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	089b      	lsrs	r3, r3, #2
 800419c:	60fb      	str	r3, [r7, #12]
        break;
 800419e:	e064      	b.n	800426a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80041a0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80041a4:	f04f 0100 	mov.w	r1, #0
 80041a8:	f005 f91a 	bl	80093e0 <HAL_RCCEx_GetPeriphCLKFreq>
 80041ac:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80041b6:	d051      	beq.n	800425c <ADC_ConfigureBoostMode+0x13c>
 80041b8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80041bc:	d854      	bhi.n	8004268 <ADC_ConfigureBoostMode+0x148>
 80041be:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80041c2:	d047      	beq.n	8004254 <ADC_ConfigureBoostMode+0x134>
 80041c4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80041c8:	d84e      	bhi.n	8004268 <ADC_ConfigureBoostMode+0x148>
 80041ca:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80041ce:	d03d      	beq.n	800424c <ADC_ConfigureBoostMode+0x12c>
 80041d0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80041d4:	d848      	bhi.n	8004268 <ADC_ConfigureBoostMode+0x148>
 80041d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041da:	d033      	beq.n	8004244 <ADC_ConfigureBoostMode+0x124>
 80041dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041e0:	d842      	bhi.n	8004268 <ADC_ConfigureBoostMode+0x148>
 80041e2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80041e6:	d029      	beq.n	800423c <ADC_ConfigureBoostMode+0x11c>
 80041e8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80041ec:	d83c      	bhi.n	8004268 <ADC_ConfigureBoostMode+0x148>
 80041ee:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80041f2:	d01a      	beq.n	800422a <ADC_ConfigureBoostMode+0x10a>
 80041f4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80041f8:	d836      	bhi.n	8004268 <ADC_ConfigureBoostMode+0x148>
 80041fa:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80041fe:	d014      	beq.n	800422a <ADC_ConfigureBoostMode+0x10a>
 8004200:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004204:	d830      	bhi.n	8004268 <ADC_ConfigureBoostMode+0x148>
 8004206:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800420a:	d00e      	beq.n	800422a <ADC_ConfigureBoostMode+0x10a>
 800420c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004210:	d82a      	bhi.n	8004268 <ADC_ConfigureBoostMode+0x148>
 8004212:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004216:	d008      	beq.n	800422a <ADC_ConfigureBoostMode+0x10a>
 8004218:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800421c:	d824      	bhi.n	8004268 <ADC_ConfigureBoostMode+0x148>
 800421e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004222:	d002      	beq.n	800422a <ADC_ConfigureBoostMode+0x10a>
 8004224:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004228:	d11e      	bne.n	8004268 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	0c9b      	lsrs	r3, r3, #18
 8004230:	005b      	lsls	r3, r3, #1
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	fbb2 f3f3 	udiv	r3, r2, r3
 8004238:	60fb      	str	r3, [r7, #12]
        break;
 800423a:	e016      	b.n	800426a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	091b      	lsrs	r3, r3, #4
 8004240:	60fb      	str	r3, [r7, #12]
        break;
 8004242:	e012      	b.n	800426a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	095b      	lsrs	r3, r3, #5
 8004248:	60fb      	str	r3, [r7, #12]
        break;
 800424a:	e00e      	b.n	800426a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	099b      	lsrs	r3, r3, #6
 8004250:	60fb      	str	r3, [r7, #12]
        break;
 8004252:	e00a      	b.n	800426a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	09db      	lsrs	r3, r3, #7
 8004258:	60fb      	str	r3, [r7, #12]
        break;
 800425a:	e006      	b.n	800426a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	0a1b      	lsrs	r3, r3, #8
 8004260:	60fb      	str	r3, [r7, #12]
        break;
 8004262:	e002      	b.n	800426a <ADC_ConfigureBoostMode+0x14a>
        break;
 8004264:	bf00      	nop
 8004266:	e000      	b.n	800426a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004268:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800426a:	f7fe fba3 	bl	80029b4 <HAL_GetREVID>
 800426e:	4603      	mov	r3, r0
 8004270:	f241 0203 	movw	r2, #4099	; 0x1003
 8004274:	4293      	cmp	r3, r2
 8004276:	d815      	bhi.n	80042a4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4a2b      	ldr	r2, [pc, #172]	; (8004328 <ADC_ConfigureBoostMode+0x208>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d908      	bls.n	8004292 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689a      	ldr	r2, [r3, #8]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800428e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004290:	e03e      	b.n	8004310 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042a0:	609a      	str	r2, [r3, #8]
}
 80042a2:	e035      	b.n	8004310 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	085b      	lsrs	r3, r3, #1
 80042a8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	4a1f      	ldr	r2, [pc, #124]	; (800432c <ADC_ConfigureBoostMode+0x20c>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d808      	bhi.n	80042c4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	689a      	ldr	r2, [r3, #8]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80042c0:	609a      	str	r2, [r3, #8]
}
 80042c2:	e025      	b.n	8004310 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4a1a      	ldr	r2, [pc, #104]	; (8004330 <ADC_ConfigureBoostMode+0x210>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d80a      	bhi.n	80042e2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042de:	609a      	str	r2, [r3, #8]
}
 80042e0:	e016      	b.n	8004310 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4a13      	ldr	r2, [pc, #76]	; (8004334 <ADC_ConfigureBoostMode+0x214>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d80a      	bhi.n	8004300 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042fc:	609a      	str	r2, [r3, #8]
}
 80042fe:	e007      	b.n	8004310 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689a      	ldr	r2, [r3, #8]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800430e:	609a      	str	r2, [r3, #8]
}
 8004310:	bf00      	nop
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	40022000 	.word	0x40022000
 800431c:	40022100 	.word	0x40022100
 8004320:	40022300 	.word	0x40022300
 8004324:	58026300 	.word	0x58026300
 8004328:	01312d00 	.word	0x01312d00
 800432c:	005f5e10 	.word	0x005f5e10
 8004330:	00bebc20 	.word	0x00bebc20
 8004334:	017d7840 	.word	0x017d7840

08004338 <LL_ADC_StartCalibration>:
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	4b09      	ldr	r3, [pc, #36]	; (8004370 <LL_ADC_StartCalibration+0x38>)
 800434a:	4013      	ands	r3, r2
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004358:	430a      	orrs	r2, r1
 800435a:	4313      	orrs	r3, r2
 800435c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	609a      	str	r2, [r3, #8]
}
 8004364:	bf00      	nop
 8004366:	3714      	adds	r7, #20
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	3ffeffc0 	.word	0x3ffeffc0

08004374 <LL_ADC_IsCalibrationOnGoing>:
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004384:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004388:	d101      	bne.n	800438e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800438a:	2301      	movs	r3, #1
 800438c:	e000      	b.n	8004390 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80043a8:	2300      	movs	r3, #0
 80043aa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d101      	bne.n	80043ba <HAL_ADCEx_Calibration_Start+0x1e>
 80043b6:	2302      	movs	r3, #2
 80043b8:	e04c      	b.n	8004454 <HAL_ADCEx_Calibration_Start+0xb8>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f7ff fe4c 	bl	8004060 <ADC_Disable>
 80043c8:	4603      	mov	r3, r0
 80043ca:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80043cc:	7dfb      	ldrb	r3, [r7, #23]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d135      	bne.n	800443e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043d6:	4b21      	ldr	r3, [pc, #132]	; (800445c <HAL_ADCEx_Calibration_Start+0xc0>)
 80043d8:	4013      	ands	r3, r2
 80043da:	f043 0202 	orr.w	r2, r3, #2
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	68b9      	ldr	r1, [r7, #8]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7ff ffa4 	bl	8004338 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80043f0:	e014      	b.n	800441c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	3301      	adds	r3, #1
 80043f6:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	4a19      	ldr	r2, [pc, #100]	; (8004460 <HAL_ADCEx_Calibration_Start+0xc4>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d30d      	bcc.n	800441c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004404:	f023 0312 	bic.w	r3, r3, #18
 8004408:	f043 0210 	orr.w	r2, r3, #16
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e01b      	b.n	8004454 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff ffa7 	bl	8004374 <LL_ADC_IsCalibrationOnGoing>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1e2      	bne.n	80043f2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004430:	f023 0303 	bic.w	r3, r3, #3
 8004434:	f043 0201 	orr.w	r2, r3, #1
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	655a      	str	r2, [r3, #84]	; 0x54
 800443c:	e005      	b.n	800444a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004442:	f043 0210 	orr.w	r2, r3, #16
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004452:	7dfb      	ldrb	r3, [r7, #23]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3718      	adds	r7, #24
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	ffffeefd 	.word	0xffffeefd
 8004460:	25c3f800 	.word	0x25c3f800

08004464 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <__NVIC_SetPriorityGrouping>:
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f003 0307 	and.w	r3, r3, #7
 80044d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044d8:	4b0b      	ldr	r3, [pc, #44]	; (8004508 <__NVIC_SetPriorityGrouping+0x40>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044e4:	4013      	ands	r3, r2
 80044e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80044f0:	4b06      	ldr	r3, [pc, #24]	; (800450c <__NVIC_SetPriorityGrouping+0x44>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044f6:	4a04      	ldr	r2, [pc, #16]	; (8004508 <__NVIC_SetPriorityGrouping+0x40>)
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	60d3      	str	r3, [r2, #12]
}
 80044fc:	bf00      	nop
 80044fe:	3714      	adds	r7, #20
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	e000ed00 	.word	0xe000ed00
 800450c:	05fa0000 	.word	0x05fa0000

08004510 <__NVIC_GetPriorityGrouping>:
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004514:	4b04      	ldr	r3, [pc, #16]	; (8004528 <__NVIC_GetPriorityGrouping+0x18>)
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	0a1b      	lsrs	r3, r3, #8
 800451a:	f003 0307 	and.w	r3, r3, #7
}
 800451e:	4618      	mov	r0, r3
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	e000ed00 	.word	0xe000ed00

0800452c <__NVIC_EnableIRQ>:
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	4603      	mov	r3, r0
 8004534:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004536:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800453a:	2b00      	cmp	r3, #0
 800453c:	db0b      	blt.n	8004556 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800453e:	88fb      	ldrh	r3, [r7, #6]
 8004540:	f003 021f 	and.w	r2, r3, #31
 8004544:	4907      	ldr	r1, [pc, #28]	; (8004564 <__NVIC_EnableIRQ+0x38>)
 8004546:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800454a:	095b      	lsrs	r3, r3, #5
 800454c:	2001      	movs	r0, #1
 800454e:	fa00 f202 	lsl.w	r2, r0, r2
 8004552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004556:	bf00      	nop
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	e000e100 	.word	0xe000e100

08004568 <__NVIC_SetPriority>:
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	4603      	mov	r3, r0
 8004570:	6039      	str	r1, [r7, #0]
 8004572:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004574:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004578:	2b00      	cmp	r3, #0
 800457a:	db0a      	blt.n	8004592 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	b2da      	uxtb	r2, r3
 8004580:	490c      	ldr	r1, [pc, #48]	; (80045b4 <__NVIC_SetPriority+0x4c>)
 8004582:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004586:	0112      	lsls	r2, r2, #4
 8004588:	b2d2      	uxtb	r2, r2
 800458a:	440b      	add	r3, r1
 800458c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004590:	e00a      	b.n	80045a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	b2da      	uxtb	r2, r3
 8004596:	4908      	ldr	r1, [pc, #32]	; (80045b8 <__NVIC_SetPriority+0x50>)
 8004598:	88fb      	ldrh	r3, [r7, #6]
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	3b04      	subs	r3, #4
 80045a0:	0112      	lsls	r2, r2, #4
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	440b      	add	r3, r1
 80045a6:	761a      	strb	r2, [r3, #24]
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr
 80045b4:	e000e100 	.word	0xe000e100
 80045b8:	e000ed00 	.word	0xe000ed00

080045bc <NVIC_EncodePriority>:
{
 80045bc:	b480      	push	{r7}
 80045be:	b089      	sub	sp, #36	; 0x24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f003 0307 	and.w	r3, r3, #7
 80045ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	f1c3 0307 	rsb	r3, r3, #7
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	bf28      	it	cs
 80045da:	2304      	movcs	r3, #4
 80045dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	3304      	adds	r3, #4
 80045e2:	2b06      	cmp	r3, #6
 80045e4:	d902      	bls.n	80045ec <NVIC_EncodePriority+0x30>
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	3b03      	subs	r3, #3
 80045ea:	e000      	b.n	80045ee <NVIC_EncodePriority+0x32>
 80045ec:	2300      	movs	r3, #0
 80045ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045f0:	f04f 32ff 	mov.w	r2, #4294967295
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	fa02 f303 	lsl.w	r3, r2, r3
 80045fa:	43da      	mvns	r2, r3
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	401a      	ands	r2, r3
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004604:	f04f 31ff 	mov.w	r1, #4294967295
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	fa01 f303 	lsl.w	r3, r1, r3
 800460e:	43d9      	mvns	r1, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004614:	4313      	orrs	r3, r2
}
 8004616:	4618      	mov	r0, r3
 8004618:	3724      	adds	r7, #36	; 0x24
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
	...

08004624 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3b01      	subs	r3, #1
 8004630:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004634:	d301      	bcc.n	800463a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004636:	2301      	movs	r3, #1
 8004638:	e00f      	b.n	800465a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800463a:	4a0a      	ldr	r2, [pc, #40]	; (8004664 <SysTick_Config+0x40>)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	3b01      	subs	r3, #1
 8004640:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004642:	210f      	movs	r1, #15
 8004644:	f04f 30ff 	mov.w	r0, #4294967295
 8004648:	f7ff ff8e 	bl	8004568 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800464c:	4b05      	ldr	r3, [pc, #20]	; (8004664 <SysTick_Config+0x40>)
 800464e:	2200      	movs	r2, #0
 8004650:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004652:	4b04      	ldr	r3, [pc, #16]	; (8004664 <SysTick_Config+0x40>)
 8004654:	2207      	movs	r2, #7
 8004656:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	e000e010 	.word	0xe000e010

08004668 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f7ff ff29 	bl	80044c8 <__NVIC_SetPriorityGrouping>
}
 8004676:	bf00      	nop
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b086      	sub	sp, #24
 8004682:	af00      	add	r7, sp, #0
 8004684:	4603      	mov	r3, r0
 8004686:	60b9      	str	r1, [r7, #8]
 8004688:	607a      	str	r2, [r7, #4]
 800468a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800468c:	f7ff ff40 	bl	8004510 <__NVIC_GetPriorityGrouping>
 8004690:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	68b9      	ldr	r1, [r7, #8]
 8004696:	6978      	ldr	r0, [r7, #20]
 8004698:	f7ff ff90 	bl	80045bc <NVIC_EncodePriority>
 800469c:	4602      	mov	r2, r0
 800469e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80046a2:	4611      	mov	r1, r2
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff ff5f 	bl	8004568 <__NVIC_SetPriority>
}
 80046aa:	bf00      	nop
 80046ac:	3718      	adds	r7, #24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b082      	sub	sp, #8
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	4603      	mov	r3, r0
 80046ba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff ff33 	bl	800452c <__NVIC_EnableIRQ>
}
 80046c6:	bf00      	nop
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b082      	sub	sp, #8
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7ff ffa4 	bl	8004624 <SysTick_Config>
 80046dc:	4603      	mov	r3, r0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b082      	sub	sp, #8
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e014      	b.n	8004722 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	791b      	ldrb	r3, [r3, #4]
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d105      	bne.n	800470e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f7fd fce7 	bl	80020dc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2202      	movs	r2, #2
 8004712:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800472a:	b480      	push	{r7}
 800472c:	b083      	sub	sp, #12
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
 8004732:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	795b      	ldrb	r3, [r3, #5]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d101      	bne.n	8004740 <HAL_DAC_Start+0x16>
 800473c:	2302      	movs	r3, #2
 800473e:	e040      	b.n	80047c2 <HAL_DAC_Start+0x98>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2202      	movs	r2, #2
 800474a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6819      	ldr	r1, [r3, #0]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	f003 0310 	and.w	r3, r3, #16
 8004758:	2201      	movs	r2, #1
 800475a:	409a      	lsls	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10f      	bne.n	800478a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004774:	2b02      	cmp	r3, #2
 8004776:	d11d      	bne.n	80047b4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f042 0201 	orr.w	r2, r2, #1
 8004786:	605a      	str	r2, [r3, #4]
 8004788:	e014      	b.n	80047b4 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	f003 0310 	and.w	r3, r3, #16
 800479a:	2102      	movs	r1, #2
 800479c:	fa01 f303 	lsl.w	r3, r1, r3
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d107      	bne.n	80047b4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 0202 	orr.w	r2, r2, #2
 80047b2:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b087      	sub	sp, #28
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	60f8      	str	r0, [r7, #12]
 80047d6:	60b9      	str	r1, [r7, #8]
 80047d8:	607a      	str	r2, [r7, #4]
 80047da:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80047dc:	2300      	movs	r3, #0
 80047de:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d105      	bne.n	80047f8 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4413      	add	r3, r2
 80047f2:	3308      	adds	r3, #8
 80047f4:	617b      	str	r3, [r7, #20]
 80047f6:	e004      	b.n	8004802 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4413      	add	r3, r2
 80047fe:	3314      	adds	r3, #20
 8004800:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	461a      	mov	r2, r3
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	371c      	adds	r7, #28
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b088      	sub	sp, #32
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	795b      	ldrb	r3, [r3, #5]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d101      	bne.n	8004830 <HAL_DAC_ConfigChannel+0x18>
 800482c:	2302      	movs	r3, #2
 800482e:	e12a      	b.n	8004a86 <HAL_DAC_ConfigChannel+0x26e>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2201      	movs	r2, #1
 8004834:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2202      	movs	r2, #2
 800483a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2b04      	cmp	r3, #4
 8004842:	f040 8081 	bne.w	8004948 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004846:	f7fe f885 	bl	8002954 <HAL_GetTick>
 800484a:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d140      	bne.n	80048d4 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004852:	e018      	b.n	8004886 <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004854:	f7fe f87e 	bl	8002954 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b01      	cmp	r3, #1
 8004860:	d911      	bls.n	8004886 <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004868:	4b89      	ldr	r3, [pc, #548]	; (8004a90 <HAL_DAC_ConfigChannel+0x278>)
 800486a:	4013      	ands	r3, r2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00a      	beq.n	8004886 <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	f043 0208 	orr.w	r2, r3, #8
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2203      	movs	r2, #3
 8004880:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e0ff      	b.n	8004a86 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800488c:	4b80      	ldr	r3, [pc, #512]	; (8004a90 <HAL_DAC_ConfigChannel+0x278>)
 800488e:	4013      	ands	r3, r2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1df      	bne.n	8004854 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8004894:	2001      	movs	r0, #1
 8004896:	f7fe f869 	bl	800296c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	6992      	ldr	r2, [r2, #24]
 80048a2:	641a      	str	r2, [r3, #64]	; 0x40
 80048a4:	e023      	b.n	80048ee <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80048a6:	f7fe f855 	bl	8002954 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d90f      	bls.n	80048d4 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	da0a      	bge.n	80048d4 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	f043 0208 	orr.w	r2, r3, #8
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2203      	movs	r2, #3
 80048ce:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e0d8      	b.n	8004a86 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048da:	2b00      	cmp	r3, #0
 80048dc:	dbe3      	blt.n	80048a6 <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 80048de:	2001      	movs	r0, #1
 80048e0:	f7fe f844 	bl	800296c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	6992      	ldr	r2, [r2, #24]
 80048ec:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f003 0310 	and.w	r3, r3, #16
 80048fa:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80048fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004902:	43db      	mvns	r3, r3
 8004904:	ea02 0103 	and.w	r1, r2, r3
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	69da      	ldr	r2, [r3, #28]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f003 0310 	and.w	r3, r3, #16
 8004912:	409a      	lsls	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	430a      	orrs	r2, r1
 800491a:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f003 0310 	and.w	r3, r3, #16
 8004928:	21ff      	movs	r1, #255	; 0xff
 800492a:	fa01 f303 	lsl.w	r3, r1, r3
 800492e:	43db      	mvns	r3, r3
 8004930:	ea02 0103 	and.w	r1, r2, r3
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	6a1a      	ldr	r2, [r3, #32]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f003 0310 	and.w	r3, r3, #16
 800493e:	409a      	lsls	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	430a      	orrs	r2, r1
 8004946:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d11d      	bne.n	800498c <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004956:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f003 0310 	and.w	r3, r3, #16
 800495e:	221f      	movs	r2, #31
 8004960:	fa02 f303 	lsl.w	r3, r2, r3
 8004964:	43db      	mvns	r3, r3
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	4013      	ands	r3, r2
 800496a:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f003 0310 	and.w	r3, r3, #16
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	fa02 f303 	lsl.w	r3, r2, r3
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	4313      	orrs	r3, r2
 8004982:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004992:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f003 0310 	and.w	r3, r3, #16
 800499a:	2207      	movs	r2, #7
 800499c:	fa02 f303 	lsl.w	r3, r2, r3
 80049a0:	43db      	mvns	r3, r3
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	4013      	ands	r3, r2
 80049a6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d102      	bne.n	80049b6 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 80049b0:	2300      	movs	r3, #0
 80049b2:	61fb      	str	r3, [r7, #28]
 80049b4:	e00f      	b.n	80049d6 <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d102      	bne.n	80049c4 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80049be:	2301      	movs	r3, #1
 80049c0:	61fb      	str	r3, [r7, #28]
 80049c2:	e008      	b.n	80049d6 <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d102      	bne.n	80049d2 <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80049cc:	2301      	movs	r3, #1
 80049ce:	61fb      	str	r3, [r7, #28]
 80049d0:	e001      	b.n	80049d6 <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80049d2:	2300      	movs	r3, #0
 80049d4:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	4313      	orrs	r3, r2
 80049e0:	69fa      	ldr	r2, [r7, #28]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f003 0310 	and.w	r3, r3, #16
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	fa02 f303 	lsl.w	r3, r2, r3
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6819      	ldr	r1, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f003 0310 	and.w	r3, r3, #16
 8004a0c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a10:	fa02 f303 	lsl.w	r3, r2, r3
 8004a14:	43da      	mvns	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	400a      	ands	r2, r1
 8004a1c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f003 0310 	and.w	r3, r3, #16
 8004a2c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004a30:	fa02 f303 	lsl.w	r3, r2, r3
 8004a34:	43db      	mvns	r3, r3
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	4013      	ands	r3, r2
 8004a3a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f003 0310 	and.w	r3, r3, #16
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6819      	ldr	r1, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f003 0310 	and.w	r3, r3, #16
 8004a68:	22c0      	movs	r2, #192	; 0xc0
 8004a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6e:	43da      	mvns	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	400a      	ands	r2, r1
 8004a76:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3720      	adds	r7, #32
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	20008000 	.word	0x20008000

08004a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b089      	sub	sp, #36	; 0x24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004aa2:	4b89      	ldr	r3, [pc, #548]	; (8004cc8 <HAL_GPIO_Init+0x234>)
 8004aa4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004aa6:	e194      	b.n	8004dd2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	2101      	movs	r1, #1
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 8186 	beq.w	8004dcc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f003 0303 	and.w	r3, r3, #3
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d005      	beq.n	8004ad8 <HAL_GPIO_Init+0x44>
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f003 0303 	and.w	r3, r3, #3
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d130      	bne.n	8004b3a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	2203      	movs	r2, #3
 8004ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae8:	43db      	mvns	r3, r3
 8004aea:	69ba      	ldr	r2, [r7, #24]
 8004aec:	4013      	ands	r3, r2
 8004aee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	68da      	ldr	r2, [r3, #12]
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	fa02 f303 	lsl.w	r3, r2, r3
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b0e:	2201      	movs	r2, #1
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	fa02 f303 	lsl.w	r3, r2, r3
 8004b16:	43db      	mvns	r3, r3
 8004b18:	69ba      	ldr	r2, [r7, #24]
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	091b      	lsrs	r3, r3, #4
 8004b24:	f003 0201 	and.w	r2, r3, #1
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f003 0303 	and.w	r3, r3, #3
 8004b42:	2b03      	cmp	r3, #3
 8004b44:	d017      	beq.n	8004b76 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	2203      	movs	r2, #3
 8004b52:	fa02 f303 	lsl.w	r3, r2, r3
 8004b56:	43db      	mvns	r3, r3
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	689a      	ldr	r2, [r3, #8]
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	005b      	lsls	r3, r3, #1
 8004b66:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	69ba      	ldr	r2, [r7, #24]
 8004b74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f003 0303 	and.w	r3, r3, #3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d123      	bne.n	8004bca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	08da      	lsrs	r2, r3, #3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	3208      	adds	r2, #8
 8004b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	f003 0307 	and.w	r3, r3, #7
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	220f      	movs	r2, #15
 8004b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9e:	43db      	mvns	r3, r3
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	691a      	ldr	r2, [r3, #16]
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb6:	69ba      	ldr	r2, [r7, #24]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	08da      	lsrs	r2, r3, #3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3208      	adds	r2, #8
 8004bc4:	69b9      	ldr	r1, [r7, #24]
 8004bc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	2203      	movs	r2, #3
 8004bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bda:	43db      	mvns	r3, r3
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	4013      	ands	r3, r2
 8004be0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f003 0203 	and.w	r2, r3, #3
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf2:	69ba      	ldr	r2, [r7, #24]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	69ba      	ldr	r2, [r7, #24]
 8004bfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f000 80e0 	beq.w	8004dcc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c0c:	4b2f      	ldr	r3, [pc, #188]	; (8004ccc <HAL_GPIO_Init+0x238>)
 8004c0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c12:	4a2e      	ldr	r2, [pc, #184]	; (8004ccc <HAL_GPIO_Init+0x238>)
 8004c14:	f043 0302 	orr.w	r3, r3, #2
 8004c18:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004c1c:	4b2b      	ldr	r3, [pc, #172]	; (8004ccc <HAL_GPIO_Init+0x238>)
 8004c1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	60fb      	str	r3, [r7, #12]
 8004c28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c2a:	4a29      	ldr	r2, [pc, #164]	; (8004cd0 <HAL_GPIO_Init+0x23c>)
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	089b      	lsrs	r3, r3, #2
 8004c30:	3302      	adds	r3, #2
 8004c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	f003 0303 	and.w	r3, r3, #3
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	220f      	movs	r2, #15
 8004c42:	fa02 f303 	lsl.w	r3, r2, r3
 8004c46:	43db      	mvns	r3, r3
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a20      	ldr	r2, [pc, #128]	; (8004cd4 <HAL_GPIO_Init+0x240>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d052      	beq.n	8004cfc <HAL_GPIO_Init+0x268>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a1f      	ldr	r2, [pc, #124]	; (8004cd8 <HAL_GPIO_Init+0x244>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d031      	beq.n	8004cc2 <HAL_GPIO_Init+0x22e>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a1e      	ldr	r2, [pc, #120]	; (8004cdc <HAL_GPIO_Init+0x248>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d02b      	beq.n	8004cbe <HAL_GPIO_Init+0x22a>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a1d      	ldr	r2, [pc, #116]	; (8004ce0 <HAL_GPIO_Init+0x24c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d025      	beq.n	8004cba <HAL_GPIO_Init+0x226>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a1c      	ldr	r2, [pc, #112]	; (8004ce4 <HAL_GPIO_Init+0x250>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d01f      	beq.n	8004cb6 <HAL_GPIO_Init+0x222>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a1b      	ldr	r2, [pc, #108]	; (8004ce8 <HAL_GPIO_Init+0x254>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d019      	beq.n	8004cb2 <HAL_GPIO_Init+0x21e>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a1a      	ldr	r2, [pc, #104]	; (8004cec <HAL_GPIO_Init+0x258>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d013      	beq.n	8004cae <HAL_GPIO_Init+0x21a>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a19      	ldr	r2, [pc, #100]	; (8004cf0 <HAL_GPIO_Init+0x25c>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d00d      	beq.n	8004caa <HAL_GPIO_Init+0x216>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a18      	ldr	r2, [pc, #96]	; (8004cf4 <HAL_GPIO_Init+0x260>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d007      	beq.n	8004ca6 <HAL_GPIO_Init+0x212>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a17      	ldr	r2, [pc, #92]	; (8004cf8 <HAL_GPIO_Init+0x264>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d101      	bne.n	8004ca2 <HAL_GPIO_Init+0x20e>
 8004c9e:	2309      	movs	r3, #9
 8004ca0:	e02d      	b.n	8004cfe <HAL_GPIO_Init+0x26a>
 8004ca2:	230a      	movs	r3, #10
 8004ca4:	e02b      	b.n	8004cfe <HAL_GPIO_Init+0x26a>
 8004ca6:	2308      	movs	r3, #8
 8004ca8:	e029      	b.n	8004cfe <HAL_GPIO_Init+0x26a>
 8004caa:	2307      	movs	r3, #7
 8004cac:	e027      	b.n	8004cfe <HAL_GPIO_Init+0x26a>
 8004cae:	2306      	movs	r3, #6
 8004cb0:	e025      	b.n	8004cfe <HAL_GPIO_Init+0x26a>
 8004cb2:	2305      	movs	r3, #5
 8004cb4:	e023      	b.n	8004cfe <HAL_GPIO_Init+0x26a>
 8004cb6:	2304      	movs	r3, #4
 8004cb8:	e021      	b.n	8004cfe <HAL_GPIO_Init+0x26a>
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e01f      	b.n	8004cfe <HAL_GPIO_Init+0x26a>
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	e01d      	b.n	8004cfe <HAL_GPIO_Init+0x26a>
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e01b      	b.n	8004cfe <HAL_GPIO_Init+0x26a>
 8004cc6:	bf00      	nop
 8004cc8:	58000080 	.word	0x58000080
 8004ccc:	58024400 	.word	0x58024400
 8004cd0:	58000400 	.word	0x58000400
 8004cd4:	58020000 	.word	0x58020000
 8004cd8:	58020400 	.word	0x58020400
 8004cdc:	58020800 	.word	0x58020800
 8004ce0:	58020c00 	.word	0x58020c00
 8004ce4:	58021000 	.word	0x58021000
 8004ce8:	58021400 	.word	0x58021400
 8004cec:	58021800 	.word	0x58021800
 8004cf0:	58021c00 	.word	0x58021c00
 8004cf4:	58022000 	.word	0x58022000
 8004cf8:	58022400 	.word	0x58022400
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	69fa      	ldr	r2, [r7, #28]
 8004d00:	f002 0203 	and.w	r2, r2, #3
 8004d04:	0092      	lsls	r2, r2, #2
 8004d06:	4093      	lsls	r3, r2
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d0e:	4938      	ldr	r1, [pc, #224]	; (8004df0 <HAL_GPIO_Init+0x35c>)
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	089b      	lsrs	r3, r3, #2
 8004d14:	3302      	adds	r3, #2
 8004d16:	69ba      	ldr	r2, [r7, #24]
 8004d18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	43db      	mvns	r3, r3
 8004d28:	69ba      	ldr	r2, [r7, #24]
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004d42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	43db      	mvns	r3, r3
 8004d56:	69ba      	ldr	r2, [r7, #24]
 8004d58:	4013      	ands	r3, r2
 8004d5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d003      	beq.n	8004d70 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004d70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	43db      	mvns	r3, r3
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	4013      	ands	r3, r2
 8004d86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d003      	beq.n	8004d9c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	69ba      	ldr	r2, [r7, #24]
 8004da0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	43db      	mvns	r3, r3
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	4013      	ands	r3, r2
 8004db0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004dbe:	69ba      	ldr	r2, [r7, #24]
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f47f ae63 	bne.w	8004aa8 <HAL_GPIO_Init+0x14>
  }
}
 8004de2:	bf00      	nop
 8004de4:	bf00      	nop
 8004de6:	3724      	adds	r7, #36	; 0x24
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	58000400 	.word	0x58000400

08004df4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691a      	ldr	r2, [r3, #16]
 8004e04:	887b      	ldrh	r3, [r7, #2]
 8004e06:	4013      	ands	r3, r2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d002      	beq.n	8004e12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	73fb      	strb	r3, [r7, #15]
 8004e10:	e001      	b.n	8004e16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004e12:	2300      	movs	r3, #0
 8004e14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	807b      	strh	r3, [r7, #2]
 8004e30:	4613      	mov	r3, r2
 8004e32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e34:	787b      	ldrb	r3, [r7, #1]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d003      	beq.n	8004e42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e3a:	887a      	ldrh	r2, [r7, #2]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004e40:	e003      	b.n	8004e4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004e42:	887b      	ldrh	r3, [r7, #2]
 8004e44:	041a      	lsls	r2, r3, #16
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	619a      	str	r2, [r3, #24]
}
 8004e4a:	bf00      	nop
 8004e4c:	370c      	adds	r7, #12
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b085      	sub	sp, #20
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
 8004e5e:	460b      	mov	r3, r1
 8004e60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e68:	887a      	ldrh	r2, [r7, #2]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	041a      	lsls	r2, r3, #16
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	43d9      	mvns	r1, r3
 8004e74:	887b      	ldrh	r3, [r7, #2]
 8004e76:	400b      	ands	r3, r1
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	619a      	str	r2, [r3, #24]
}
 8004e7e:	bf00      	nop
 8004e80:	3714      	adds	r7, #20
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b082      	sub	sp, #8
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	4603      	mov	r3, r0
 8004e92:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e98:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e9c:	88fb      	ldrh	r3, [r7, #6]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d008      	beq.n	8004eb6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ea4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ea8:	88fb      	ldrh	r3, [r7, #6]
 8004eaa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004eae:	88fb      	ldrh	r3, [r7, #6]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f000 f804 	bl	8004ebe <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004eb6:	bf00      	nop
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e0bd      	b.n	8005062 <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2202      	movs	r2, #2
 8004eea:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d031      	beq.n	8004f8e <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a4f      	ldr	r2, [pc, #316]	; (800506c <HAL_HRTIM_Init+0x198>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d10e      	bne.n	8004f52 <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8004f34:	4b4e      	ldr	r3, [pc, #312]	; (8005070 <HAL_HRTIM_Init+0x19c>)
 8004f36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f3a:	4a4d      	ldr	r2, [pc, #308]	; (8005070 <HAL_HRTIM_Init+0x19c>)
 8004f3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f40:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004f44:	4b4a      	ldr	r3, [pc, #296]	; (8005070 <HAL_HRTIM_Init+0x19c>)
 8004f46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f4e:	60fb      	str	r3, [r7, #12]
 8004f50:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004f60:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004f76:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7fd f8ea 	bl	8002168 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d012      	beq.n	8004fc6 <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fae:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	75fb      	strb	r3, [r7, #23]
 8004fda:	e03e      	b.n	800505a <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8004fdc:	7dfa      	ldrb	r2, [r7, #23]
 8004fde:	6879      	ldr	r1, [r7, #4]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	1a9b      	subs	r3, r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	440b      	add	r3, r1
 8004fea:	3318      	adds	r3, #24
 8004fec:	2200      	movs	r2, #0
 8004fee:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8004ff0:	7dfa      	ldrb	r2, [r7, #23]
 8004ff2:	6879      	ldr	r1, [r7, #4]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	1a9b      	subs	r3, r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	440b      	add	r3, r1
 8004ffe:	331c      	adds	r3, #28
 8005000:	2200      	movs	r2, #0
 8005002:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8005004:	7dfa      	ldrb	r2, [r7, #23]
 8005006:	6879      	ldr	r1, [r7, #4]
 8005008:	4613      	mov	r3, r2
 800500a:	00db      	lsls	r3, r3, #3
 800500c:	1a9b      	subs	r3, r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	440b      	add	r3, r1
 8005012:	3320      	adds	r3, #32
 8005014:	2200      	movs	r2, #0
 8005016:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8005018:	7dfa      	ldrb	r2, [r7, #23]
 800501a:	6879      	ldr	r1, [r7, #4]
 800501c:	4613      	mov	r3, r2
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	1a9b      	subs	r3, r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	440b      	add	r3, r1
 8005026:	3324      	adds	r3, #36	; 0x24
 8005028:	2200      	movs	r2, #0
 800502a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 800502c:	7dfa      	ldrb	r2, [r7, #23]
 800502e:	6879      	ldr	r1, [r7, #4]
 8005030:	4613      	mov	r3, r2
 8005032:	00db      	lsls	r3, r3, #3
 8005034:	1a9b      	subs	r3, r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	440b      	add	r3, r1
 800503a:	3328      	adds	r3, #40	; 0x28
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8005040:	7dfa      	ldrb	r2, [r7, #23]
 8005042:	6879      	ldr	r1, [r7, #4]
 8005044:	4613      	mov	r3, r2
 8005046:	00db      	lsls	r3, r3, #3
 8005048:	1a9b      	subs	r3, r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	440b      	add	r3, r1
 800504e:	3330      	adds	r3, #48	; 0x30
 8005050:	2200      	movs	r2, #0
 8005052:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8005054:	7dfb      	ldrb	r3, [r7, #23]
 8005056:	3301      	adds	r3, #1
 8005058:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800505a:	7dfb      	ldrb	r3, [r7, #23]
 800505c:	2b05      	cmp	r3, #5
 800505e:	d9bd      	bls.n	8004fdc <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3718      	adds	r7, #24
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	40017400 	.word	0x40017400
 8005070:	58024400 	.word	0x58024400

08005074 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b02      	cmp	r3, #2
 800508a:	d101      	bne.n	8005090 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 800508c:	2302      	movs	r3, #2
 800508e:	e015      	b.n	80050bc <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	2b05      	cmp	r3, #5
 800509c:	d104      	bne.n	80050a8 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 800509e:	6879      	ldr	r1, [r7, #4]
 80050a0:	68f8      	ldr	r0, [r7, #12]
 80050a2:	f000 fd43 	bl	8005b2c <HRTIM_MasterBase_Config>
 80050a6:	e004      	b.n	80050b2 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	68b9      	ldr	r1, [r7, #8]
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 fd6c 	bl	8005b8a <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d101      	bne.n	80050e0 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 80050dc:	2302      	movs	r3, #2
 80050de:	e05f      	b.n	80051a0 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d101      	bne.n	80050ee <HAL_HRTIM_WaveformTimerConfig+0x2a>
 80050ea:	2302      	movs	r3, #2
 80050ec:	e058      	b.n	80051a0 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2202      	movs	r2, #2
 80050fa:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	2b05      	cmp	r3, #5
 8005102:	d104      	bne.n	800510e <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8005104:	6879      	ldr	r1, [r7, #4]
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f000 fd7f 	bl	8005c0a <HRTIM_MasterWaveform_Config>
 800510c:	e004      	b.n	8005118 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	68b9      	ldr	r1, [r7, #8]
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f000 fde0 	bl	8005cd8 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6819      	ldr	r1, [r3, #0]
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	4613      	mov	r3, r2
 8005122:	00db      	lsls	r3, r3, #3
 8005124:	1a9b      	subs	r3, r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4403      	add	r3, r0
 800512a:	3320      	adds	r3, #32
 800512c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6859      	ldr	r1, [r3, #4]
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	4613      	mov	r3, r2
 8005138:	00db      	lsls	r3, r3, #3
 800513a:	1a9b      	subs	r3, r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	4403      	add	r3, r0
 8005140:	3324      	adds	r3, #36	; 0x24
 8005142:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6899      	ldr	r1, [r3, #8]
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	4613      	mov	r3, r2
 800514e:	00db      	lsls	r3, r3, #3
 8005150:	1a9b      	subs	r3, r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4403      	add	r3, r0
 8005156:	3328      	adds	r3, #40	; 0x28
 8005158:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68d9      	ldr	r1, [r3, #12]
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	68ba      	ldr	r2, [r7, #8]
 8005162:	4613      	mov	r3, r2
 8005164:	00db      	lsls	r3, r3, #3
 8005166:	1a9b      	subs	r3, r3, r2
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	4403      	add	r3, r0
 800516c:	332c      	adds	r3, #44	; 0x2c
 800516e:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6919      	ldr	r1, [r3, #16]
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	4613      	mov	r3, r2
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	1a9b      	subs	r3, r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4403      	add	r3, r0
 8005182:	3330      	adds	r3, #48	; 0x30
 8005184:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8005186:	68b9      	ldr	r1, [r7, #8]
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f000 ffe3 	bl	8006154 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
 80051b4:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d101      	bne.n	80051c6 <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 80051c2:	2302      	movs	r3, #2
 80051c4:	e157      	b.n	8005476 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d101      	bne.n	80051d4 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 80051d0:	2302      	movs	r3, #2
 80051d2:	e150      	b.n	8005476 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2202      	movs	r2, #2
 80051e0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	2b05      	cmp	r3, #5
 80051e8:	d140      	bne.n	800526c <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	3b01      	subs	r3, #1
 80051ee:	2b07      	cmp	r3, #7
 80051f0:	d82a      	bhi.n	8005248 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 80051f2:	a201      	add	r2, pc, #4	; (adr r2, 80051f8 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 80051f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f8:	08005219 	.word	0x08005219
 80051fc:	08005225 	.word	0x08005225
 8005200:	08005249 	.word	0x08005249
 8005204:	08005231 	.word	0x08005231
 8005208:	08005249 	.word	0x08005249
 800520c:	08005249 	.word	0x08005249
 8005210:	08005249 	.word	0x08005249
 8005214:	0800523d 	.word	0x0800523d
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	683a      	ldr	r2, [r7, #0]
 800521e:	6812      	ldr	r2, [r2, #0]
 8005220:	61da      	str	r2, [r3, #28]
        break;
 8005222:	e01a      	b.n	800525a <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	6812      	ldr	r2, [r2, #0]
 800522c:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 800522e:	e014      	b.n	800525a <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	683a      	ldr	r2, [r7, #0]
 8005236:	6812      	ldr	r2, [r2, #0]
 8005238:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 800523a:	e00e      	b.n	800525a <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	6812      	ldr	r2, [r2, #0]
 8005244:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8005246:	e008      	b.n	800525a <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2207      	movs	r2, #7
 800524c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 8005258:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b07      	cmp	r3, #7
 8005264:	f040 80fe 	bne.w	8005464 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e104      	b.n	8005476 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	3b01      	subs	r3, #1
 8005270:	2b07      	cmp	r3, #7
 8005272:	f200 80e3 	bhi.w	800543c <HAL_HRTIM_WaveformCompareConfig+0x294>
 8005276:	a201      	add	r2, pc, #4	; (adr r2, 800527c <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8005278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527c:	0800529d 	.word	0x0800529d
 8005280:	080052b1 	.word	0x080052b1
 8005284:	0800543d 	.word	0x0800543d
 8005288:	0800536d 	.word	0x0800536d
 800528c:	0800543d 	.word	0x0800543d
 8005290:	0800543d 	.word	0x0800543d
 8005294:	0800543d 	.word	0x0800543d
 8005298:	08005381 	.word	0x08005381
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6819      	ldr	r1, [r3, #0]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	01db      	lsls	r3, r3, #7
 80052a8:	440b      	add	r3, r1
 80052aa:	339c      	adds	r3, #156	; 0x9c
 80052ac:	601a      	str	r2, [r3, #0]
        break;
 80052ae:	e0d1      	b.n	8005454 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6819      	ldr	r1, [r3, #0]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	01db      	lsls	r3, r3, #7
 80052bc:	440b      	add	r3, r1
 80052be:	33a4      	adds	r3, #164	; 0xa4
 80052c0:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d03f      	beq.n	800534a <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	3301      	adds	r3, #1
 80052d2:	01db      	lsls	r3, r3, #7
 80052d4:	4413      	add	r3, r2
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	6811      	ldr	r1, [r2, #0]
 80052dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	3301      	adds	r3, #1
 80052e4:	01db      	lsls	r3, r3, #7
 80052e6:	440b      	add	r3, r1
 80052e8:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	3301      	adds	r3, #1
 80052f2:	01db      	lsls	r3, r3, #7
 80052f4:	4413      	add	r3, r2
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	68f9      	ldr	r1, [r7, #12]
 80052fe:	6809      	ldr	r1, [r1, #0]
 8005300:	431a      	orrs	r2, r3
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	3301      	adds	r3, #1
 8005306:	01db      	lsls	r3, r3, #7
 8005308:	440b      	add	r3, r1
 800530a:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005314:	d109      	bne.n	800532a <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6819      	ldr	r1, [r3, #0]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	689a      	ldr	r2, [r3, #8]
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	01db      	lsls	r3, r3, #7
 8005322:	440b      	add	r3, r1
 8005324:	339c      	adds	r3, #156	; 0x9c
 8005326:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8005328:	e091      	b.n	800544e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005332:	f040 808c 	bne.w	800544e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6819      	ldr	r1, [r3, #0]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	689a      	ldr	r2, [r3, #8]
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	01db      	lsls	r3, r3, #7
 8005342:	440b      	add	r3, r1
 8005344:	33a8      	adds	r3, #168	; 0xa8
 8005346:	601a      	str	r2, [r3, #0]
         break;
 8005348:	e081      	b.n	800544e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	3301      	adds	r3, #1
 8005352:	01db      	lsls	r3, r3, #7
 8005354:	4413      	add	r3, r2
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	6811      	ldr	r1, [r2, #0]
 800535c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	3301      	adds	r3, #1
 8005364:	01db      	lsls	r3, r3, #7
 8005366:	440b      	add	r3, r1
 8005368:	601a      	str	r2, [r3, #0]
         break;
 800536a:	e070      	b.n	800544e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6819      	ldr	r1, [r3, #0]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	01db      	lsls	r3, r3, #7
 8005378:	440b      	add	r3, r1
 800537a:	33a8      	adds	r3, #168	; 0xa8
 800537c:	601a      	str	r2, [r3, #0]
        break;
 800537e:	e069      	b.n	8005454 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6819      	ldr	r1, [r3, #0]
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	01db      	lsls	r3, r3, #7
 800538c:	440b      	add	r3, r1
 800538e:	33ac      	adds	r3, #172	; 0xac
 8005390:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d03f      	beq.n	800541a <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	3301      	adds	r3, #1
 80053a2:	01db      	lsls	r3, r3, #7
 80053a4:	4413      	add	r3, r2
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	6811      	ldr	r1, [r2, #0]
 80053ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	3301      	adds	r3, #1
 80053b4:	01db      	lsls	r3, r3, #7
 80053b6:	440b      	add	r3, r1
 80053b8:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	3301      	adds	r3, #1
 80053c2:	01db      	lsls	r3, r3, #7
 80053c4:	4413      	add	r3, r2
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	68f9      	ldr	r1, [r7, #12]
 80053d0:	6809      	ldr	r1, [r1, #0]
 80053d2:	431a      	orrs	r2, r3
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	3301      	adds	r3, #1
 80053d8:	01db      	lsls	r3, r3, #7
 80053da:	440b      	add	r3, r1
 80053dc:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053e6:	d109      	bne.n	80053fc <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6819      	ldr	r1, [r3, #0]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	689a      	ldr	r2, [r3, #8]
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	01db      	lsls	r3, r3, #7
 80053f4:	440b      	add	r3, r1
 80053f6:	339c      	adds	r3, #156	; 0x9c
 80053f8:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 80053fa:	e02a      	b.n	8005452 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005404:	d125      	bne.n	8005452 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6819      	ldr	r1, [r3, #0]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	689a      	ldr	r2, [r3, #8]
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	01db      	lsls	r3, r3, #7
 8005412:	440b      	add	r3, r1
 8005414:	33a8      	adds	r3, #168	; 0xa8
 8005416:	601a      	str	r2, [r3, #0]
         break;
 8005418:	e01b      	b.n	8005452 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	3301      	adds	r3, #1
 8005422:	01db      	lsls	r3, r3, #7
 8005424:	4413      	add	r3, r2
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	6811      	ldr	r1, [r2, #0]
 800542c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	3301      	adds	r3, #1
 8005434:	01db      	lsls	r3, r3, #7
 8005436:	440b      	add	r3, r1
 8005438:	601a      	str	r2, [r3, #0]
         break;
 800543a:	e00a      	b.n	8005452 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2207      	movs	r2, #7
 8005440:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 800544c:	e002      	b.n	8005454 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 800544e:	bf00      	nop
 8005450:	e000      	b.n	8005454 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8005452:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b07      	cmp	r3, #7
 800545e:	d101      	bne.n	8005464 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e008      	b.n	8005476 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3714      	adds	r7, #20
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop

08005484 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
 8005490:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b02      	cmp	r3, #2
 800549c:	d101      	bne.n	80054a2 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 800549e:	2302      	movs	r3, #2
 80054a0:	e01d      	b.n	80054de <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d101      	bne.n	80054b0 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 80054ac:	2302      	movs	r3, #2
 80054ae:	e016      	b.n	80054de <HAL_HRTIM_WaveformOutputConfig+0x5a>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2202      	movs	r2, #2
 80054bc:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	68b9      	ldr	r1, [r7, #8]
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f000 fd46 	bl	8005f58 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
	...

080054e8 <HAL_HRTIM_WaveformSetOutputLevel>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformSetOutputLevel(HRTIM_HandleTypeDef * hhrtim,
                                                   uint32_t TimerIdx,
                                                   uint32_t Output,
                                                   uint32_t OutputLevel)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
 80054f4:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMER_OUTPUT(TimerIdx, Output));
  assert_param(IS_HRTIM_OUTPUTLEVEL(OutputLevel));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d101      	bne.n	8005506 <HAL_HRTIM_WaveformSetOutputLevel+0x1e>
  {
     return HAL_BUSY;
 8005502:	2302      	movs	r3, #2
 8005504:	e0df      	b.n	80056c6 <HAL_HRTIM_WaveformSetOutputLevel+0x1de>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800550c:	2b01      	cmp	r3, #1
 800550e:	d101      	bne.n	8005514 <HAL_HRTIM_WaveformSetOutputLevel+0x2c>
 8005510:	2302      	movs	r3, #2
 8005512:	e0d8      	b.n	80056c6 <HAL_HRTIM_WaveformSetOutputLevel+0x1de>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2202      	movs	r2, #2
 8005520:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Force timer output level */
  switch (Output)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800552a:	f000 808d 	beq.w	8005648 <HAL_HRTIM_WaveformSetOutputLevel+0x160>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005534:	f200 80ad 	bhi.w	8005692 <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800553e:	d05e      	beq.n	80055fe <HAL_HRTIM_WaveformSetOutputLevel+0x116>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005546:	f200 80a4 	bhi.w	8005692 <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b80      	cmp	r3, #128	; 0x80
 800554e:	d07b      	beq.n	8005648 <HAL_HRTIM_WaveformSetOutputLevel+0x160>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b80      	cmp	r3, #128	; 0x80
 8005554:	f200 809d 	bhi.w	8005692 <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b20      	cmp	r3, #32
 800555c:	d84c      	bhi.n	80055f8 <HAL_HRTIM_WaveformSetOutputLevel+0x110>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	f000 8096 	beq.w	8005692 <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	3b01      	subs	r3, #1
 800556a:	2b1f      	cmp	r3, #31
 800556c:	f200 8091 	bhi.w	8005692 <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 8005570:	a201      	add	r2, pc, #4	; (adr r2, 8005578 <HAL_HRTIM_WaveformSetOutputLevel+0x90>)
 8005572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005576:	bf00      	nop
 8005578:	080055ff 	.word	0x080055ff
 800557c:	08005649 	.word	0x08005649
 8005580:	08005693 	.word	0x08005693
 8005584:	080055ff 	.word	0x080055ff
 8005588:	08005693 	.word	0x08005693
 800558c:	08005693 	.word	0x08005693
 8005590:	08005693 	.word	0x08005693
 8005594:	08005649 	.word	0x08005649
 8005598:	08005693 	.word	0x08005693
 800559c:	08005693 	.word	0x08005693
 80055a0:	08005693 	.word	0x08005693
 80055a4:	08005693 	.word	0x08005693
 80055a8:	08005693 	.word	0x08005693
 80055ac:	08005693 	.word	0x08005693
 80055b0:	08005693 	.word	0x08005693
 80055b4:	080055ff 	.word	0x080055ff
 80055b8:	08005693 	.word	0x08005693
 80055bc:	08005693 	.word	0x08005693
 80055c0:	08005693 	.word	0x08005693
 80055c4:	08005693 	.word	0x08005693
 80055c8:	08005693 	.word	0x08005693
 80055cc:	08005693 	.word	0x08005693
 80055d0:	08005693 	.word	0x08005693
 80055d4:	08005693 	.word	0x08005693
 80055d8:	08005693 	.word	0x08005693
 80055dc:	08005693 	.word	0x08005693
 80055e0:	08005693 	.word	0x08005693
 80055e4:	08005693 	.word	0x08005693
 80055e8:	08005693 	.word	0x08005693
 80055ec:	08005693 	.word	0x08005693
 80055f0:	08005693 	.word	0x08005693
 80055f4:	08005649 	.word	0x08005649
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b40      	cmp	r3, #64	; 0x40
 80055fc:	d149      	bne.n	8005692 <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
  case HRTIM_OUTPUT_TB1:
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      if (OutputLevel == HRTIM_OUTPUTLEVEL_ACTIVE)
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d110      	bne.n	8005626 <HAL_HRTIM_WaveformSetOutputLevel+0x13e>
      {
        /* Force output to its active state */
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R,HRTIM_SET1R_SST);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	01db      	lsls	r3, r3, #7
 800560c:	4413      	add	r3, r2
 800560e:	33bc      	adds	r3, #188	; 0xbc
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	6811      	ldr	r1, [r2, #0]
 8005616:	f043 0201 	orr.w	r2, r3, #1
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	01db      	lsls	r3, r3, #7
 800561e:	440b      	add	r3, r1
 8005620:	33bc      	adds	r3, #188	; 0xbc
 8005622:	601a      	str	r2, [r3, #0]
      else
      {
        /* Force output to its inactive state */
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R, HRTIM_RST1R_SRT);
      }
      break;
 8005624:	e03e      	b.n	80056a4 <HAL_HRTIM_WaveformSetOutputLevel+0x1bc>
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R, HRTIM_RST1R_SRT);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	01db      	lsls	r3, r3, #7
 800562e:	4413      	add	r3, r2
 8005630:	33c0      	adds	r3, #192	; 0xc0
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	6811      	ldr	r1, [r2, #0]
 8005638:	f043 0201 	orr.w	r2, r3, #1
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	01db      	lsls	r3, r3, #7
 8005640:	440b      	add	r3, r1
 8005642:	33c0      	adds	r3, #192	; 0xc0
 8005644:	601a      	str	r2, [r3, #0]
      break;
 8005646:	e02d      	b.n	80056a4 <HAL_HRTIM_WaveformSetOutputLevel+0x1bc>
  case HRTIM_OUTPUT_TB2:
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      if (OutputLevel == HRTIM_OUTPUTLEVEL_ACTIVE)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d110      	bne.n	8005670 <HAL_HRTIM_WaveformSetOutputLevel+0x188>
      {
        /* Force output to its active state */
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R, HRTIM_SET2R_SST);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	01db      	lsls	r3, r3, #7
 8005656:	4413      	add	r3, r2
 8005658:	33c4      	adds	r3, #196	; 0xc4
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	6811      	ldr	r1, [r2, #0]
 8005660:	f043 0201 	orr.w	r2, r3, #1
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	01db      	lsls	r3, r3, #7
 8005668:	440b      	add	r3, r1
 800566a:	33c4      	adds	r3, #196	; 0xc4
 800566c:	601a      	str	r2, [r3, #0]
      else
      {
        /* Force output to its inactive state */
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R, HRTIM_RST2R_SRT);
      }
      break;
 800566e:	e019      	b.n	80056a4 <HAL_HRTIM_WaveformSetOutputLevel+0x1bc>
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R, HRTIM_RST2R_SRT);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	01db      	lsls	r3, r3, #7
 8005678:	4413      	add	r3, r2
 800567a:	33c8      	adds	r3, #200	; 0xc8
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	6811      	ldr	r1, [r2, #0]
 8005682:	f043 0201 	orr.w	r2, r3, #1
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	01db      	lsls	r3, r3, #7
 800568a:	440b      	add	r3, r1
 800568c:	33c8      	adds	r3, #200	; 0xc8
 800568e:	601a      	str	r2, [r3, #0]
      break;
 8005690:	e008      	b.n	80056a4 <HAL_HRTIM_WaveformSetOutputLevel+0x1bc>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2207      	movs	r2, #7
 8005696:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 80056a2:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b07      	cmp	r3, #7
 80056ae:	d101      	bne.n	80056b4 <HAL_HRTIM_WaveformSetOutputLevel+0x1cc>
  {
     return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e008      	b.n	80056c6 <HAL_HRTIM_WaveformSetOutputLevel+0x1de>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3714      	adds	r7, #20
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop

080056d4 <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d101      	bne.n	80056ec <HAL_HRTIM_WaveformOutputStart+0x18>
 80056e8:	2302      	movs	r3, #2
 80056ea:	e01a      	b.n	8005722 <HAL_HRTIM_WaveformOutputStart+0x4e>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2202      	movs	r2, #2
 80056f8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	430a      	orrs	r2, r1
 800570c:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	370c      	adds	r7, #12
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 800572e:	b480      	push	{r7}
 8005730:	b083      	sub	sp, #12
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
 8005736:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800573e:	2b01      	cmp	r3, #1
 8005740:	d101      	bne.n	8005746 <HAL_HRTIM_WaveformOutputStop+0x18>
 8005742:	2302      	movs	r3, #2
 8005744:	e01a      	b.n	800577c <HAL_HRTIM_WaveformOutputStop+0x4e>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2202      	movs	r2, #2
 8005752:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f8d3 1398 	ldr.w	r1, [r3, #920]	; 0x398
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	430a      	orrs	r2, r1
 8005766:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <HAL_HRTIM_WaveformCountStart_IT>:
  *       function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart_IT(HRTIM_HandleTypeDef * hhrtim,
                                                    uint32_t Timers)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8005798:	2b01      	cmp	r3, #1
 800579a:	d101      	bne.n	80057a0 <HAL_HRTIM_WaveformCountStart_IT+0x18>
 800579c:	2302      	movs	r3, #2
 800579e:	e05b      	b.n	8005858 <HAL_HRTIM_WaveformCountStart_IT+0xd0>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable HRTIM interrupts (if required) */
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Enable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d009      	beq.n	80057e4 <HAL_HRTIM_WaveformCountStart_IT+0x5c>
  {
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim,
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68d9      	ldr	r1, [r3, #12]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	60da      	str	r2, [r3, #12]
                                 hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
  }

  /* Enable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80057e4:	2300      	movs	r3, #0
 80057e6:	73fb      	strb	r3, [r7, #15]
 80057e8:	e022      	b.n	8005830 <HAL_HRTIM_WaveformCountStart_IT+0xa8>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 80057ea:	7bfb      	ldrb	r3, [r7, #15]
 80057ec:	4a1d      	ldr	r2, [pc, #116]	; (8005864 <HAL_HRTIM_WaveformCountStart_IT+0xdc>)
 80057ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	4013      	ands	r3, r2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d017      	beq.n	800582a <HAL_HRTIM_WaveformCountStart_IT+0xa2>
    {
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	7bfb      	ldrb	r3, [r7, #15]
 8005800:	01db      	lsls	r3, r3, #7
 8005802:	4413      	add	r3, r2
 8005804:	338c      	adds	r3, #140	; 0x8c
 8005806:	6818      	ldr	r0, [r3, #0]
 8005808:	7bfa      	ldrb	r2, [r7, #15]
 800580a:	6879      	ldr	r1, [r7, #4]
 800580c:	4613      	mov	r3, r2
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	1a9b      	subs	r3, r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	440b      	add	r3, r1
 8005816:	3320      	adds	r3, #32
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6819      	ldr	r1, [r3, #0]
 800581e:	7bfb      	ldrb	r3, [r7, #15]
 8005820:	4302      	orrs	r2, r0
 8005822:	01db      	lsls	r3, r3, #7
 8005824:	440b      	add	r3, r1
 8005826:	338c      	adds	r3, #140	; 0x8c
 8005828:	601a      	str	r2, [r3, #0]
       timer_idx++)
 800582a:	7bfb      	ldrb	r3, [r7, #15]
 800582c:	3301      	adds	r3, #1
 800582e:	73fb      	strb	r3, [r7, #15]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8005830:	7bfb      	ldrb	r3, [r7, #15]
 8005832:	2b04      	cmp	r3, #4
 8005834:	d9d9      	bls.n	80057ea <HAL_HRTIM_WaveformCountStart_IT+0x62>
                                  hhrtim->TimerParam[timer_idx].InterruptRequests);
    }
  }

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	6819      	ldr	r1, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	683a      	ldr	r2, [r7, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2201      	movs	r2, #1
 800584a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;}
 8005856:	2300      	movs	r3, #0
 8005858:	4618      	mov	r0, r3
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr
 8005864:	20000028 	.word	0x20000028

08005868 <HAL_HRTIM_WaveformCountStop_IT>:
  * @note The counter of a timer is stopped only if all timer outputs are disabled
  * @note All enabled timer related interrupts are disabled.
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStop_IT(HRTIM_HandleTypeDef * hhrtim,
                                                   uint32_t Timers)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  /* ++ WA */
  __IO uint32_t delai = (uint32_t)(0x17FU);
 8005872:	f240 137f 	movw	r3, #383	; 0x17f
 8005876:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800587e:	2b01      	cmp	r3, #1
 8005880:	d101      	bne.n	8005886 <HAL_HRTIM_WaveformCountStop_IT+0x1e>
 8005882:	2302      	movs	r3, #2
 8005884:	e065      	b.n	8005952 <HAL_HRTIM_WaveformCountStop_IT+0xea>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2202      	movs	r2, #2
 8005892:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Disable HRTIM interrupts (if required) */
  __HAL_HRTIM_DISABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	43da      	mvns	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	400a      	ands	r2, r1
 80058aa:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Disable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00a      	beq.n	80058ce <HAL_HRTIM_WaveformCountStop_IT+0x66>
  {
    /* Interrupts enable flag must be cleared one by one */
    __HAL_HRTIM_MASTER_DISABLE_IT(hhrtim, hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68d9      	ldr	r1, [r3, #12]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80058c4:	43da      	mvns	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	400a      	ands	r2, r1
 80058cc:	60da      	str	r2, [r3, #12]
  }

  /* Disable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80058ce:	2300      	movs	r3, #0
 80058d0:	73fb      	strb	r3, [r7, #15]
 80058d2:	e023      	b.n	800591c <HAL_HRTIM_WaveformCountStop_IT+0xb4>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 80058d4:	7bfb      	ldrb	r3, [r7, #15]
 80058d6:	4a22      	ldr	r2, [pc, #136]	; (8005960 <HAL_HRTIM_WaveformCountStop_IT+0xf8>)
 80058d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	4013      	ands	r3, r2
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d018      	beq.n	8005916 <HAL_HRTIM_WaveformCountStop_IT+0xae>
    {
      __HAL_HRTIM_TIMER_DISABLE_IT(hhrtim, timer_idx, hhrtim->TimerParam[timer_idx].InterruptRequests);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
 80058ea:	01db      	lsls	r3, r3, #7
 80058ec:	4413      	add	r3, r2
 80058ee:	338c      	adds	r3, #140	; 0x8c
 80058f0:	6818      	ldr	r0, [r3, #0]
 80058f2:	7bfa      	ldrb	r2, [r7, #15]
 80058f4:	6879      	ldr	r1, [r7, #4]
 80058f6:	4613      	mov	r3, r2
 80058f8:	00db      	lsls	r3, r3, #3
 80058fa:	1a9b      	subs	r3, r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	440b      	add	r3, r1
 8005900:	3320      	adds	r3, #32
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	43da      	mvns	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6819      	ldr	r1, [r3, #0]
 800590a:	7bfb      	ldrb	r3, [r7, #15]
 800590c:	4002      	ands	r2, r0
 800590e:	01db      	lsls	r3, r3, #7
 8005910:	440b      	add	r3, r1
 8005912:	338c      	adds	r3, #140	; 0x8c
 8005914:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8005916:	7bfb      	ldrb	r3, [r7, #15]
 8005918:	3301      	adds	r3, #1
 800591a:	73fb      	strb	r3, [r7, #15]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800591c:	7bfb      	ldrb	r3, [r7, #15]
 800591e:	2b04      	cmp	r3, #4
 8005920:	d9d8      	bls.n	80058d4 <HAL_HRTIM_WaveformCountStop_IT+0x6c>
    }
  }

  /* ++ WA */
  do { delai--; } while (delai != 0U);
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	3b01      	subs	r3, #1
 8005926:	60bb      	str	r3, [r7, #8]
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1f9      	bne.n	8005922 <HAL_HRTIM_WaveformCountStop_IT+0xba>
  /* -- WA */

  /* Disable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR &= ~(Timers);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	6819      	ldr	r1, [r3, #0]
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	43da      	mvns	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	400a      	ands	r2, r1
 800593e:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3714      	adds	r7, #20
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	20000028 	.word	0x20000028

08005964 <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	2bff      	cmp	r3, #255	; 0xff
 8005972:	d103      	bne.n	800597c <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 fc4f 	bl	8006218 <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 800597a:	e00a      	b.n	8005992 <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	2b05      	cmp	r3, #5
 8005980:	d103      	bne.n	800598a <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 fcc6 	bl	8006314 <HRTIM_Master_ISR>
}
 8005988:	e003      	b.n	8005992 <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 800598a:	6839      	ldr	r1, [r7, #0]
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 fd6b 	bl	8006468 <HRTIM_Timer_ISR>
}
 8005992:	bf00      	nop
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 80059a2:	bf00      	nop
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b083      	sub	sp, #12
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 80059b6:	bf00      	nop
 80059b8:	370c      	adds	r7, #12
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr

080059c2 <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b083      	sub	sp, #12
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 80059ca:	bf00      	nop
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80059d6:	b480      	push	{r7}
 80059d8:	b083      	sub	sp, #12
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 80059de:	bf00      	nop
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr

080059ea <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80059ea:	b480      	push	{r7}
 80059ec:	b083      	sub	sp, #12
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 80059f2:	bf00      	nop
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b083      	sub	sp, #12
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 8005a06:	bf00      	nop
 8005a08:	370c      	adds	r7, #12
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b083      	sub	sp, #12
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 8005a1a:	bf00      	nop
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8005a26:	b480      	push	{r7}
 8005a28:	b083      	sub	sp, #12
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 8005a2e:	bf00      	nop
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr

08005a3a <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b083      	sub	sp, #12
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
 8005a42:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 8005a5a:	bf00      	nop
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr

08005a66 <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b083      	sub	sp, #12
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
 8005a6e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 8005a86:	bf00      	nop
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr

08005a92 <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8005a92:	b480      	push	{r7}
 8005a94:	b083      	sub	sp, #12
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
 8005a9a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 8005a9c:	bf00      	nop
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 8005ab2:	bf00      	nop
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b083      	sub	sp, #12
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
 8005ac6:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b083      	sub	sp, #12
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
 8005af2:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 8005b0a:	bf00      	nop
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b083      	sub	sp, #12
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
 8005b1e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f023 0307 	bic.w	r3, r3, #7
 8005b44:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f023 0318 	bic.w	r3, r3, #24
 8005b56:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	6812      	ldr	r2, [r2, #0]
 8005b72:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	683a      	ldr	r2, [r7, #0]
 8005b7a:	6852      	ldr	r2, [r2, #4]
 8005b7c:	619a      	str	r2, [r3, #24]
}
 8005b7e:	bf00      	nop
 8005b80:	3714      	adds	r7, #20
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b087      	sub	sp, #28
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	60f8      	str	r0, [r7, #12]
 8005b92:	60b9      	str	r1, [r7, #8]
 8005b94:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	01db      	lsls	r3, r3, #7
 8005ba0:	4413      	add	r3, r2
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	f023 0307 	bic.w	r3, r3, #7
 8005bac:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f023 0318 	bic.w	r3, r3, #24
 8005bbe:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	01db      	lsls	r3, r3, #7
 8005bd4:	4413      	add	r3, r2
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6819      	ldr	r1, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	01db      	lsls	r3, r3, #7
 8005be6:	440b      	add	r3, r1
 8005be8:	3394      	adds	r3, #148	; 0x94
 8005bea:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6819      	ldr	r1, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685a      	ldr	r2, [r3, #4]
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	01db      	lsls	r3, r3, #7
 8005bf8:	440b      	add	r3, r1
 8005bfa:	3398      	adds	r3, #152	; 0x98
 8005bfc:	601a      	str	r2, [r3, #0]
}
 8005bfe:	bf00      	nop
 8005c00:	371c      	adds	r7, #28
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr

08005c0a <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8005c0a:	b480      	push	{r7}
 8005c0c:	b085      	sub	sp, #20
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
 8005c12:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8005c24:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f023 0320 	bic.w	r3, r3, #32
 8005c2c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c3e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c50:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005c62:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	6a1b      	ldr	r3, [r3, #32]
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8005c74:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005c86:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005c9a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cac:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68ba      	ldr	r2, [r7, #8]
 8005cc6:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8005cca:	bf00      	nop
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
	...

08005cd8 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b08b      	sub	sp, #44	; 0x2c
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	3301      	adds	r3, #1
 8005cec:	01db      	lsls	r3, r3, #7
 8005cee:	4413      	add	r3, r2
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	6811      	ldr	r1, [r2, #0]
 8005cf6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	01db      	lsls	r3, r3, #7
 8005d00:	440b      	add	r3, r1
 8005d02:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	01db      	lsls	r3, r3, #7
 8005d0e:	4413      	add	r3, r2
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	01db      	lsls	r3, r3, #7
 8005d1c:	4413      	add	r3, r2
 8005d1e:	33e8      	adds	r3, #232	; 0xe8
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	01db      	lsls	r3, r3, #7
 8005d2c:	4413      	add	r3, r2
 8005d2e:	33e4      	adds	r3, #228	; 0xe4
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8005d3c:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d40:	f023 0320 	bic.w	r3, r3, #32
 8005d44:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8005d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d56:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8005d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d68:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d70:	4313      	orrs	r3, r2
 8005d72:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005d7a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a1b      	ldr	r3, [r3, #32]
 8005d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d82:	4313      	orrs	r3, r2
 8005d84:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8005d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d88:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8005d8c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d94:	4313      	orrs	r3, r2
 8005d96:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8005d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005d9e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005da6:	4313      	orrs	r3, r2
 8005da8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8005daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005db0:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dba:	d103      	bne.n	8005dc4 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dc2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dca:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ddc:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005de4:	4313      	orrs	r3, r2
 8005de6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8005de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dea:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8005dee:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005df6:	4313      	orrs	r3, r2
 8005df8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	f023 031f 	bic.w	r3, r3, #31
 8005e00:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e06:	f003 031f 	and.w	r3, r3, #31
 8005e0a:	69ba      	ldr	r2, [r7, #24]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e16:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e1c:	69ba      	ldr	r2, [r7, #24]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d108      	bne.n	8005e3c <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8005e2a:	6a3b      	ldr	r3, [r7, #32]
 8005e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e30:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e36:	6a3a      	ldr	r2, [r7, #32]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e40:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8005e44:	d004      	beq.n	8005e50 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e4a:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8005e4e:	d103      	bne.n	8005e58 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e54:	2b40      	cmp	r3, #64	; 0x40
 8005e56:	d108      	bne.n	8005e6a <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8005e58:	6a3b      	ldr	r3, [r7, #32]
 8005e5a:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8005e5e:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e64:	6a3a      	ldr	r2, [r7, #32]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e6e:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	2b04      	cmp	r3, #4
 8005e74:	d843      	bhi.n	8005efe <HRTIM_TimingUnitWaveform_Config+0x226>
 8005e76:	a201      	add	r2, pc, #4	; (adr r2, 8005e7c <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8005e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e7c:	08005e91 	.word	0x08005e91
 8005e80:	08005ea7 	.word	0x08005ea7
 8005e84:	08005ebd 	.word	0x08005ebd
 8005e88:	08005ed3 	.word	0x08005ed3
 8005e8c:	08005ee9 	.word	0x08005ee9
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005e96:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9c:	005b      	lsls	r3, r3, #1
 8005e9e:	69fa      	ldr	r2, [r7, #28]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	61fb      	str	r3, [r7, #28]
      break;
 8005ea4:	e02c      	b.n	8005f00 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005eac:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	69fa      	ldr	r2, [r7, #28]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	61fb      	str	r3, [r7, #28]
      break;
 8005eba:	e021      	b.n	8005f00 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005ec2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec8:	00db      	lsls	r3, r3, #3
 8005eca:	69fa      	ldr	r2, [r7, #28]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	61fb      	str	r3, [r7, #28]
      break;
 8005ed0:	e016      	b.n	8005f00 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005ed8:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ede:	011b      	lsls	r3, r3, #4
 8005ee0:	69fa      	ldr	r2, [r7, #28]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	61fb      	str	r3, [r7, #28]
      break;
 8005ee6:	e00b      	b.n	8005f00 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005eee:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef4:	015b      	lsls	r3, r3, #5
 8005ef6:	69fa      	ldr	r2, [r7, #28]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	61fb      	str	r3, [r7, #28]
      break;
 8005efc:	e000      	b.n	8005f00 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8005efe:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	3301      	adds	r3, #1
 8005f08:	01db      	lsls	r3, r3, #7
 8005f0a:	4413      	add	r3, r2
 8005f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f0e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	01db      	lsls	r3, r3, #7
 8005f18:	4413      	add	r3, r2
 8005f1a:	33e8      	adds	r3, #232	; 0xe8
 8005f1c:	69ba      	ldr	r2, [r7, #24]
 8005f1e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	01db      	lsls	r3, r3, #7
 8005f28:	4413      	add	r3, r2
 8005f2a:	33e4      	adds	r3, #228	; 0xe4
 8005f2c:	6a3a      	ldr	r2, [r7, #32]
 8005f2e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	01db      	lsls	r3, r3, #7
 8005f38:	4413      	add	r3, r2
 8005f3a:	33d4      	adds	r3, #212	; 0xd4
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	69fa      	ldr	r2, [r7, #28]
 8005f46:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8005f4a:	bf00      	nop
 8005f4c:	372c      	adds	r7, #44	; 0x2c
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop

08005f58 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b089      	sub	sp, #36	; 0x24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
 8005f64:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8005f66:	2300      	movs	r3, #0
 8005f68:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	01db      	lsls	r3, r3, #7
 8005f72:	4413      	add	r3, r2
 8005f74:	33e4      	adds	r3, #228	; 0xe4
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	01db      	lsls	r3, r3, #7
 8005f82:	4413      	add	r3, r2
 8005f84:	33b8      	adds	r3, #184	; 0xb8
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	617b      	str	r3, [r7, #20]

  switch (Output)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f90:	d076      	beq.n	8006080 <HRTIM_OutputConfig+0x128>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f98:	f200 8087 	bhi.w	80060aa <HRTIM_OutputConfig+0x152>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fa2:	d05a      	beq.n	800605a <HRTIM_OutputConfig+0x102>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005faa:	d87e      	bhi.n	80060aa <HRTIM_OutputConfig+0x152>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b80      	cmp	r3, #128	; 0x80
 8005fb0:	d066      	beq.n	8006080 <HRTIM_OutputConfig+0x128>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b80      	cmp	r3, #128	; 0x80
 8005fb6:	d878      	bhi.n	80060aa <HRTIM_OutputConfig+0x152>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b20      	cmp	r3, #32
 8005fbc:	d84a      	bhi.n	8006054 <HRTIM_OutputConfig+0xfc>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d072      	beq.n	80060aa <HRTIM_OutputConfig+0x152>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	2b1f      	cmp	r3, #31
 8005fca:	d86e      	bhi.n	80060aa <HRTIM_OutputConfig+0x152>
 8005fcc:	a201      	add	r2, pc, #4	; (adr r2, 8005fd4 <HRTIM_OutputConfig+0x7c>)
 8005fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd2:	bf00      	nop
 8005fd4:	0800605b 	.word	0x0800605b
 8005fd8:	08006081 	.word	0x08006081
 8005fdc:	080060ab 	.word	0x080060ab
 8005fe0:	0800605b 	.word	0x0800605b
 8005fe4:	080060ab 	.word	0x080060ab
 8005fe8:	080060ab 	.word	0x080060ab
 8005fec:	080060ab 	.word	0x080060ab
 8005ff0:	08006081 	.word	0x08006081
 8005ff4:	080060ab 	.word	0x080060ab
 8005ff8:	080060ab 	.word	0x080060ab
 8005ffc:	080060ab 	.word	0x080060ab
 8006000:	080060ab 	.word	0x080060ab
 8006004:	080060ab 	.word	0x080060ab
 8006008:	080060ab 	.word	0x080060ab
 800600c:	080060ab 	.word	0x080060ab
 8006010:	0800605b 	.word	0x0800605b
 8006014:	080060ab 	.word	0x080060ab
 8006018:	080060ab 	.word	0x080060ab
 800601c:	080060ab 	.word	0x080060ab
 8006020:	080060ab 	.word	0x080060ab
 8006024:	080060ab 	.word	0x080060ab
 8006028:	080060ab 	.word	0x080060ab
 800602c:	080060ab 	.word	0x080060ab
 8006030:	080060ab 	.word	0x080060ab
 8006034:	080060ab 	.word	0x080060ab
 8006038:	080060ab 	.word	0x080060ab
 800603c:	080060ab 	.word	0x080060ab
 8006040:	080060ab 	.word	0x080060ab
 8006044:	080060ab 	.word	0x080060ab
 8006048:	080060ab 	.word	0x080060ab
 800604c:	080060ab 	.word	0x080060ab
 8006050:	08006081 	.word	0x08006081
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b40      	cmp	r3, #64	; 0x40
 8006058:	d127      	bne.n	80060aa <HRTIM_OutputConfig+0x152>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6819      	ldr	r1, [r3, #0]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	685a      	ldr	r2, [r3, #4]
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	01db      	lsls	r3, r3, #7
 8006066:	440b      	add	r3, r1
 8006068:	33bc      	adds	r3, #188	; 0xbc
 800606a:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6819      	ldr	r1, [r3, #0]
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	01db      	lsls	r3, r3, #7
 8006078:	440b      	add	r3, r1
 800607a:	33c0      	adds	r3, #192	; 0xc0
 800607c:	601a      	str	r2, [r3, #0]
      break;
 800607e:	e015      	b.n	80060ac <HRTIM_OutputConfig+0x154>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6819      	ldr	r1, [r3, #0]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	685a      	ldr	r2, [r3, #4]
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	01db      	lsls	r3, r3, #7
 800608c:	440b      	add	r3, r1
 800608e:	33c4      	adds	r3, #196	; 0xc4
 8006090:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6819      	ldr	r1, [r3, #0]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	689a      	ldr	r2, [r3, #8]
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	01db      	lsls	r3, r3, #7
 800609e:	440b      	add	r3, r1
 80060a0:	33c8      	adds	r3, #200	; 0xc8
 80060a2:	601a      	str	r2, [r3, #0]
      shift = 16U;
 80060a4:	2310      	movs	r3, #16
 80060a6:	61bb      	str	r3, [r7, #24]
      break;
 80060a8:	e000      	b.n	80060ac <HRTIM_OutputConfig+0x154>
    }

  default:
    break;
 80060aa:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 80060ac:	22fe      	movs	r2, #254	; 0xfe
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 80060b4:	43db      	mvns	r3, r3
 80060b6:	69fa      	ldr	r2, [r7, #28]
 80060b8:	4013      	ands	r3, r2
 80060ba:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	fa02 f303 	lsl.w	r3, r2, r3
 80060c6:	69fa      	ldr	r2, [r7, #28]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	68da      	ldr	r2, [r3, #12]
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	fa02 f303 	lsl.w	r3, r2, r3
 80060d6:	69fa      	ldr	r2, [r7, #28]
 80060d8:	4313      	orrs	r3, r2
 80060da:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	691a      	ldr	r2, [r3, #16]
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	fa02 f303 	lsl.w	r3, r2, r3
 80060e6:	69fa      	ldr	r2, [r7, #28]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	695a      	ldr	r2, [r3, #20]
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	fa02 f303 	lsl.w	r3, r2, r3
 80060f6:	69fa      	ldr	r2, [r7, #28]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	699a      	ldr	r2, [r3, #24]
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	fa02 f303 	lsl.w	r3, r2, r3
 8006106:	69fa      	ldr	r2, [r7, #28]
 8006108:	4313      	orrs	r3, r2
 800610a:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	2b08      	cmp	r3, #8
 8006112:	d111      	bne.n	8006138 <HRTIM_OutputConfig+0x1e0>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 800611a:	2b00      	cmp	r3, #0
 800611c:	d10c      	bne.n	8006138 <HRTIM_OutputConfig+0x1e0>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8006124:	2b00      	cmp	r3, #0
 8006126:	d107      	bne.n	8006138 <HRTIM_OutputConfig+0x1e0>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	69da      	ldr	r2, [r3, #28]
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	fa02 f303 	lsl.w	r3, r2, r3
 8006132:	69fa      	ldr	r2, [r7, #28]
 8006134:	4313      	orrs	r3, r2
 8006136:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	01db      	lsls	r3, r3, #7
 8006140:	4413      	add	r3, r2
 8006142:	33e4      	adds	r3, #228	; 0xe4
 8006144:	69fa      	ldr	r2, [r7, #28]
 8006146:	601a      	str	r2, [r3, #0]
}
 8006148:	bf00      	nop
 800614a:	3724      	adds	r7, #36	; 0x24
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	2b05      	cmp	r3, #5
 8006162:	d851      	bhi.n	8006208 <HRTIM_ForceRegistersUpdate+0xb4>
 8006164:	a201      	add	r2, pc, #4	; (adr r2, 800616c <HRTIM_ForceRegistersUpdate+0x18>)
 8006166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800616a:	bf00      	nop
 800616c:	0800619b 	.word	0x0800619b
 8006170:	080061b1 	.word	0x080061b1
 8006174:	080061c7 	.word	0x080061c7
 8006178:	080061dd 	.word	0x080061dd
 800617c:	080061f3 	.word	0x080061f3
 8006180:	08006185 	.word	0x08006185
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f042 0201 	orr.w	r2, r2, #1
 8006194:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006198:	e037      	b.n	800620a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f042 0202 	orr.w	r2, r2, #2
 80061aa:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80061ae:	e02c      	b.n	800620a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f042 0204 	orr.w	r2, r2, #4
 80061c0:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80061c4:	e021      	b.n	800620a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f042 0208 	orr.w	r2, r2, #8
 80061d6:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80061da:	e016      	b.n	800620a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f042 0210 	orr.w	r2, r2, #16
 80061ec:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80061f0:	e00b      	b.n	800620a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f042 0220 	orr.w	r2, r2, #32
 8006202:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006206:	e000      	b.n	800620a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8006208:	bf00      	nop
  }
}
 800620a:	bf00      	nop
 800620c:	370c      	adds	r7, #12
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop

08006218 <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8006228:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8006232:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00c      	beq.n	8006258 <HRTIM_HRTIM_ISR+0x40>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	2b00      	cmp	r3, #0
 8006246:	d007      	beq.n	8006258 <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2201      	movs	r2, #1
 800624e:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f7ff fba1 	bl	800599a <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f003 0302 	and.w	r3, r3, #2
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00c      	beq.n	800627c <HRTIM_HRTIM_ISR+0x64>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	f003 0302 	and.w	r3, r3, #2
 8006268:	2b00      	cmp	r3, #0
 800626a:	d007      	beq.n	800627c <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2202      	movs	r2, #2
 8006272:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f7ff fb99 	bl	80059ae <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f003 0304 	and.w	r3, r3, #4
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00c      	beq.n	80062a0 <HRTIM_HRTIM_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	f003 0304 	and.w	r3, r3, #4
 800628c:	2b00      	cmp	r3, #0
 800628e:	d007      	beq.n	80062a0 <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2204      	movs	r2, #4
 8006296:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f7ff fb91 	bl	80059c2 <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f003 0308 	and.w	r3, r3, #8
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00c      	beq.n	80062c4 <HRTIM_HRTIM_ISR+0xac>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	f003 0308 	and.w	r3, r3, #8
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d007      	beq.n	80062c4 <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2208      	movs	r2, #8
 80062ba:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f7ff fb89 	bl	80059d6 <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f003 0310 	and.w	r3, r3, #16
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00c      	beq.n	80062e8 <HRTIM_HRTIM_ISR+0xd0>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	f003 0310 	and.w	r3, r3, #16
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d007      	beq.n	80062e8 <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2210      	movs	r2, #16
 80062de:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7ff fb81 	bl	80059ea <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f003 0320 	and.w	r3, r3, #32
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00c      	beq.n	800630c <HRTIM_HRTIM_ISR+0xf4>
  {
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	f003 0320 	and.w	r3, r3, #32
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d007      	beq.n	800630c <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2220      	movs	r2, #32
 8006302:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f7ff fb79 	bl	80059fe <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 800630c:	bf00      	nop
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b086      	sub	sp, #24
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8006324:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800632e:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	60bb      	str	r3, [r7, #8]

  /* Burst mode period event */
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00d      	beq.n	8006366 <HRTIM_Master_ISR+0x52>
  {
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d008      	beq.n	8006366 <HRTIM_Master_ISR+0x52>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800635c:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f7ff fb56 	bl	8005a12 <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f003 0301 	and.w	r3, r3, #1
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00c      	beq.n	800638a <HRTIM_Master_ISR+0x76>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	f003 0301 	and.w	r3, r3, #1
 8006376:	2b00      	cmp	r3, #0
 8006378:	d007      	beq.n	800638a <HRTIM_Master_ISR+0x76>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2201      	movs	r2, #1
 8006380:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8006382:	2105      	movs	r1, #5
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f7ff fb63 	bl	8005a50 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f003 0302 	and.w	r3, r3, #2
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00c      	beq.n	80063ae <HRTIM_Master_ISR+0x9a>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	f003 0302 	and.w	r3, r3, #2
 800639a:	2b00      	cmp	r3, #0
 800639c:	d007      	beq.n	80063ae <HRTIM_Master_ISR+0x9a>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2202      	movs	r2, #2
 80063a4:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80063a6:	2105      	movs	r1, #5
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f7fa fe33 	bl	8001014 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f003 0304 	and.w	r3, r3, #4
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00c      	beq.n	80063d2 <HRTIM_Master_ISR+0xbe>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f003 0304 	and.w	r3, r3, #4
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d007      	beq.n	80063d2 <HRTIM_Master_ISR+0xbe>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2204      	movs	r2, #4
 80063c8:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80063ca:	2105      	movs	r1, #5
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f7fa fe4d 	bl	800106c <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f003 0308 	and.w	r3, r3, #8
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00c      	beq.n	80063f6 <HRTIM_Master_ISR+0xe2>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	f003 0308 	and.w	r3, r3, #8
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d007      	beq.n	80063f6 <HRTIM_Master_ISR+0xe2>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2208      	movs	r2, #8
 80063ec:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80063ee:	2105      	movs	r1, #5
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f7ff fb38 	bl	8005a66 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f003 0310 	and.w	r3, r3, #16
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00c      	beq.n	800641a <HRTIM_Master_ISR+0x106>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	f003 0310 	and.w	r3, r3, #16
 8006406:	2b00      	cmp	r3, #0
 8006408:	d007      	beq.n	800641a <HRTIM_Master_ISR+0x106>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2210      	movs	r2, #16
 8006410:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8006412:	2105      	movs	r1, #5
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f7fa feb5 	bl	8001184 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f003 0320 	and.w	r3, r3, #32
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00b      	beq.n	800643c <HRTIM_Master_ISR+0x128>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	f003 0320 	and.w	r3, r3, #32
 800642a:	2b00      	cmp	r3, #0
 800642c:	d006      	beq.n	800643c <HRTIM_Master_ISR+0x128>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2220      	movs	r2, #32
 8006434:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f7ff faf5 	bl	8005a26 <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00c      	beq.n	8006460 <HRTIM_Master_ISR+0x14c>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800644c:	2b00      	cmp	r3, #0
 800644e:	d007      	beq.n	8006460 <HRTIM_Master_ISR+0x14c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2240      	movs	r2, #64	; 0x40
 8006456:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8006458:	2105      	movs	r1, #5
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f7ff faed 	bl	8005a3a <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8006460:	bf00      	nop
 8006462:	3718      	adds	r7, #24
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	3301      	adds	r3, #1
 800647a:	01db      	lsls	r3, r3, #7
 800647c:	4413      	add	r3, r2
 800647e:	3304      	adds	r3, #4
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	01db      	lsls	r3, r3, #7
 800648c:	4413      	add	r3, r2
 800648e:	338c      	adds	r3, #140	; 0x8c
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	2b00      	cmp	r3, #0
 800649c:	d010      	beq.n	80064c0 <HRTIM_Timer_ISR+0x58>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	f003 0301 	and.w	r3, r3, #1
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00b      	beq.n	80064c0 <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	01db      	lsls	r3, r3, #7
 80064b0:	4413      	add	r3, r2
 80064b2:	3388      	adds	r3, #136	; 0x88
 80064b4:	2201      	movs	r2, #1
 80064b6:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 80064b8:	6839      	ldr	r1, [r7, #0]
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7ff fac8 	bl	8005a50 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f003 0302 	and.w	r3, r3, #2
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d010      	beq.n	80064ec <HRTIM_Timer_ISR+0x84>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	f003 0302 	and.w	r3, r3, #2
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00b      	beq.n	80064ec <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	01db      	lsls	r3, r3, #7
 80064dc:	4413      	add	r3, r2
 80064de:	3388      	adds	r3, #136	; 0x88
 80064e0:	2202      	movs	r2, #2
 80064e2:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 80064e4:	6839      	ldr	r1, [r7, #0]
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7fa fd94 	bl	8001014 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f003 0304 	and.w	r3, r3, #4
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d010      	beq.n	8006518 <HRTIM_Timer_ISR+0xb0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	f003 0304 	and.w	r3, r3, #4
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00b      	beq.n	8006518 <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	01db      	lsls	r3, r3, #7
 8006508:	4413      	add	r3, r2
 800650a:	3388      	adds	r3, #136	; 0x88
 800650c:	2204      	movs	r2, #4
 800650e:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 8006510:	6839      	ldr	r1, [r7, #0]
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f7fa fdaa 	bl	800106c <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f003 0308 	and.w	r3, r3, #8
 800651e:	2b00      	cmp	r3, #0
 8006520:	d010      	beq.n	8006544 <HRTIM_Timer_ISR+0xdc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	f003 0308 	and.w	r3, r3, #8
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00b      	beq.n	8006544 <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	01db      	lsls	r3, r3, #7
 8006534:	4413      	add	r3, r2
 8006536:	3388      	adds	r3, #136	; 0x88
 8006538:	2208      	movs	r2, #8
 800653a:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 800653c:	6839      	ldr	r1, [r7, #0]
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f7ff fa91 	bl	8005a66 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f003 0310 	and.w	r3, r3, #16
 800654a:	2b00      	cmp	r3, #0
 800654c:	d010      	beq.n	8006570 <HRTIM_Timer_ISR+0x108>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	f003 0310 	and.w	r3, r3, #16
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00b      	beq.n	8006570 <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	01db      	lsls	r3, r3, #7
 8006560:	4413      	add	r3, r2
 8006562:	3388      	adds	r3, #136	; 0x88
 8006564:	2210      	movs	r2, #16
 8006566:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 8006568:	6839      	ldr	r1, [r7, #0]
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f7fa fe0a 	bl	8001184 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006576:	2b00      	cmp	r3, #0
 8006578:	d010      	beq.n	800659c <HRTIM_Timer_ISR+0x134>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00b      	beq.n	800659c <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	01db      	lsls	r3, r3, #7
 800658c:	4413      	add	r3, r2
 800658e:	3388      	adds	r3, #136	; 0x88
 8006590:	2240      	movs	r2, #64	; 0x40
 8006592:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 8006594:	6839      	ldr	r1, [r7, #0]
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f7ff fa4f 	bl	8005a3a <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d010      	beq.n	80065c8 <HRTIM_Timer_ISR+0x160>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00b      	beq.n	80065c8 <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	01db      	lsls	r3, r3, #7
 80065b8:	4413      	add	r3, r2
 80065ba:	3388      	adds	r3, #136	; 0x88
 80065bc:	2280      	movs	r2, #128	; 0x80
 80065be:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 80065c0:	6839      	ldr	r1, [r7, #0]
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7ff fa5a 	bl	8005a7c <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d011      	beq.n	80065f6 <HRTIM_Timer_ISR+0x18e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00c      	beq.n	80065f6 <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	01db      	lsls	r3, r3, #7
 80065e4:	4413      	add	r3, r2
 80065e6:	3388      	adds	r3, #136	; 0x88
 80065e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065ec:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 80065ee:	6839      	ldr	r1, [r7, #0]
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f7ff fa4e 	bl	8005a92 <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d011      	beq.n	8006624 <HRTIM_Timer_ISR+0x1bc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00c      	beq.n	8006624 <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	01db      	lsls	r3, r3, #7
 8006612:	4413      	add	r3, r2
 8006614:	3388      	adds	r3, #136	; 0x88
 8006616:	f44f 7200 	mov.w	r2, #512	; 0x200
 800661a:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 800661c:	6839      	ldr	r1, [r7, #0]
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f7ff fa58 	bl	8005ad4 <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800662a:	2b00      	cmp	r3, #0
 800662c:	d011      	beq.n	8006652 <HRTIM_Timer_ISR+0x1ea>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00c      	beq.n	8006652 <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	01db      	lsls	r3, r3, #7
 8006640:	4413      	add	r3, r2
 8006642:	3388      	adds	r3, #136	; 0x88
 8006644:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006648:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 800664a:	6839      	ldr	r1, [r7, #0]
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f7ff fa4c 	bl	8005aea <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006658:	2b00      	cmp	r3, #0
 800665a:	d011      	beq.n	8006680 <HRTIM_Timer_ISR+0x218>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00c      	beq.n	8006680 <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	01db      	lsls	r3, r3, #7
 800666e:	4413      	add	r3, r2
 8006670:	3388      	adds	r3, #136	; 0x88
 8006672:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006676:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 8006678:	6839      	ldr	r1, [r7, #0]
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f7ff fa40 	bl	8005b00 <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d011      	beq.n	80066ae <HRTIM_Timer_ISR+0x246>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00c      	beq.n	80066ae <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	01db      	lsls	r3, r3, #7
 800669c:	4413      	add	r3, r2
 800669e:	3388      	adds	r3, #136	; 0x88
 80066a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80066a4:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 80066a6:	6839      	ldr	r1, [r7, #0]
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f7ff fa34 	bl	8005b16 <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d011      	beq.n	80066dc <HRTIM_Timer_ISR+0x274>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00c      	beq.n	80066dc <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	01db      	lsls	r3, r3, #7
 80066ca:	4413      	add	r3, r2
 80066cc:	3388      	adds	r3, #136	; 0x88
 80066ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80066d2:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 80066d4:	6839      	ldr	r1, [r7, #0]
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f7ff f9f1 	bl	8005abe <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d011      	beq.n	800670a <HRTIM_Timer_ISR+0x2a2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00c      	beq.n	800670a <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	01db      	lsls	r3, r3, #7
 80066f8:	4413      	add	r3, r2
 80066fa:	3388      	adds	r3, #136	; 0x88
 80066fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006700:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 8006702:	6839      	ldr	r1, [r7, #0]
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f7ff f9cf 	bl	8005aa8 <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 800670a:	bf00      	nop
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
	...

08006714 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e097      	b.n	8006856 <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006732:	b2db      	uxtb	r3, r3
 8006734:	2b00      	cmp	r3, #0
 8006736:	d106      	bne.n	8006746 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f7fb fdb7 	bl	80022b4 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2202      	movs	r2, #2
 800674a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	2b01      	cmp	r3, #1
 800675c:	d004      	beq.n	8006768 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006762:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006766:	d103      	bne.n	8006770 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f023 031e 	bic.w	r3, r3, #30
 800676e:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	695b      	ldr	r3, [r3, #20]
 8006774:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006778:	4293      	cmp	r3, r2
 800677a:	d003      	beq.n	8006784 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	4b38      	ldr	r3, [pc, #224]	; (8006860 <HAL_LPTIM_Init+0x14c>)
 8006780:	4013      	ands	r3, r2
 8006782:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	4b37      	ldr	r3, [pc, #220]	; (8006864 <HAL_LPTIM_Init+0x150>)
 8006788:	4013      	ands	r3, r2
 800678a:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8006794:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800679a:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80067a0:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80067a6:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d107      	bne.n	80067c6 <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80067be:	4313      	orrs	r3, r2
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d004      	beq.n	80067d8 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80067d6:	d107      	bne.n	80067e8 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80067e0:	4313      	orrs	r3, r2
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d00a      	beq.n	800680a <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80067fc:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8006802:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	4313      	orrs	r3, r2
 8006808:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a14      	ldr	r2, [pc, #80]	; (8006868 <HAL_LPTIM_Init+0x154>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d004      	beq.n	8006826 <HAL_LPTIM_Init+0x112>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a12      	ldr	r2, [pc, #72]	; (800686c <HAL_LPTIM_Init+0x158>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d108      	bne.n	8006838 <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	430a      	orrs	r2, r1
 8006834:	625a      	str	r2, [r3, #36]	; 0x24
 8006836:	e009      	b.n	800684c <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a0c      	ldr	r2, [pc, #48]	; (8006870 <HAL_LPTIM_Init+0x15c>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d104      	bne.n	800684c <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800684a:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	ffff1f3f 	.word	0xffff1f3f
 8006864:	ff19f1fe 	.word	0xff19f1fe
 8006868:	40002400 	.word	0x40002400
 800686c:	58002400 	.word	0x58002400
 8006870:	58002800 	.word	0x58002800

08006874 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2202      	movs	r2, #2
 8006882:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	2b01      	cmp	r3, #1
 800688c:	d00c      	beq.n	80068a8 <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006892:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006896:	d107      	bne.n	80068a8 <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68da      	ldr	r2, [r3, #12]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 80068a6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	691a      	ldr	r2, [r3, #16]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f042 0201 	orr.w	r2, r2, #1
 80068b6:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2210      	movs	r2, #16
 80068be:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	683a      	ldr	r2, [r7, #0]
 80068c6:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80068c8:	2110      	movs	r1, #16
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f91e 	bl	8006b0c <LPTIM_WaitForFlag>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b03      	cmp	r3, #3
 80068d4:	d101      	bne.n	80068da <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e02f      	b.n	800693a <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 f946 	bl	8006b6c <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 f905 	bl	8006af0 <HAL_LPTIM_GetState>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b03      	cmp	r3, #3
 80068ea:	d101      	bne.n	80068f0 <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e024      	b.n	800693a <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	689a      	ldr	r2, [r3, #8]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f042 0210 	orr.w	r2, r2, #16
 80068fe:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689a      	ldr	r2, [r3, #8]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f042 0202 	orr.w	r2, r2, #2
 800690e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	691a      	ldr	r2, [r3, #16]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f042 0201 	orr.w	r2, r2, #1
 800691e:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	691a      	ldr	r2, [r3, #16]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f042 0204 	orr.w	r2, r2, #4
 800692e:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b082      	sub	sp, #8
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 0301 	and.w	r3, r3, #1
 8006954:	2b01      	cmp	r3, #1
 8006956:	d10d      	bne.n	8006974 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	2b01      	cmp	r3, #1
 8006964:	d106      	bne.n	8006974 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2201      	movs	r2, #1
 800696c:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 f882 	bl	8006a78 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0302 	and.w	r3, r3, #2
 800697e:	2b02      	cmp	r3, #2
 8006980:	d10d      	bne.n	800699e <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	f003 0302 	and.w	r3, r3, #2
 800698c:	2b02      	cmp	r3, #2
 800698e:	d106      	bne.n	800699e <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2202      	movs	r2, #2
 8006996:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f7fa fb2d 	bl	8000ff8 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0304 	and.w	r3, r3, #4
 80069a8:	2b04      	cmp	r3, #4
 80069aa:	d10d      	bne.n	80069c8 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f003 0304 	and.w	r3, r3, #4
 80069b6:	2b04      	cmp	r3, #4
 80069b8:	d106      	bne.n	80069c8 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2204      	movs	r2, #4
 80069c0:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 f862 	bl	8006a8c <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0308 	and.w	r3, r3, #8
 80069d2:	2b08      	cmp	r3, #8
 80069d4:	d10d      	bne.n	80069f2 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	f003 0308 	and.w	r3, r3, #8
 80069e0:	2b08      	cmp	r3, #8
 80069e2:	d106      	bne.n	80069f2 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2208      	movs	r2, #8
 80069ea:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 f857 	bl	8006aa0 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0310 	and.w	r3, r3, #16
 80069fc:	2b10      	cmp	r3, #16
 80069fe:	d10d      	bne.n	8006a1c <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	f003 0310 	and.w	r3, r3, #16
 8006a0a:	2b10      	cmp	r3, #16
 8006a0c:	d106      	bne.n	8006a1c <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2210      	movs	r2, #16
 8006a14:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f84c 	bl	8006ab4 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0320 	and.w	r3, r3, #32
 8006a26:	2b20      	cmp	r3, #32
 8006a28:	d10d      	bne.n	8006a46 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f003 0320 	and.w	r3, r3, #32
 8006a34:	2b20      	cmp	r3, #32
 8006a36:	d106      	bne.n	8006a46 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2220      	movs	r2, #32
 8006a3e:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 f841 	bl	8006ac8 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a50:	2b40      	cmp	r3, #64	; 0x40
 8006a52:	d10d      	bne.n	8006a70 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a5e:	2b40      	cmp	r3, #64	; 0x40
 8006a60:	d106      	bne.n	8006a70 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2240      	movs	r2, #64	; 0x40
 8006a68:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f836 	bl	8006adc <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a70:	bf00      	nop
 8006a72:	3708      	adds	r7, #8
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8006a80:	bf00      	nop
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8006aa8:	bf00      	nop
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8006ad0:	bf00      	nop
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006afe:	b2db      	uxtb	r3, r3
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8006b16:	2300      	movs	r3, #0
 8006b18:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8006b1a:	4b12      	ldr	r3, [pc, #72]	; (8006b64 <LPTIM_WaitForFlag+0x58>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a12      	ldr	r2, [pc, #72]	; (8006b68 <LPTIM_WaitForFlag+0x5c>)
 8006b20:	fba2 2303 	umull	r2, r3, r2, r3
 8006b24:	0b9b      	lsrs	r3, r3, #14
 8006b26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006b2a:	fb02 f303 	mul.w	r3, r2, r3
 8006b2e:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	3b01      	subs	r3, #1
 8006b34:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d101      	bne.n	8006b40 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	4013      	ands	r3, r2
 8006b4a:	683a      	ldr	r2, [r7, #0]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d002      	beq.n	8006b56 <LPTIM_WaitForFlag+0x4a>
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1ec      	bne.n	8006b30 <LPTIM_WaitForFlag+0x24>

  return result;
 8006b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3714      	adds	r7, #20
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr
 8006b64:	20000018 	.word	0x20000018
 8006b68:	d1b71759 	.word	0xd1b71759

08006b6c <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b08c      	sub	sp, #48	; 0x30
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8006b74:	2300      	movs	r3, #0
 8006b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b78:	f3ef 8310 	mrs	r3, PRIMASK
 8006b7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8006b80:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b82:	2301      	movs	r3, #1
 8006b84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	f383 8810 	msr	PRIMASK, r3
}
 8006b8c:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a81      	ldr	r2, [pc, #516]	; (8006d98 <LPTIM_Disable+0x22c>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d02d      	beq.n	8006bf4 <LPTIM_Disable+0x88>
 8006b98:	4a7f      	ldr	r2, [pc, #508]	; (8006d98 <LPTIM_Disable+0x22c>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d830      	bhi.n	8006c00 <LPTIM_Disable+0x94>
 8006b9e:	4a7f      	ldr	r2, [pc, #508]	; (8006d9c <LPTIM_Disable+0x230>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d021      	beq.n	8006be8 <LPTIM_Disable+0x7c>
 8006ba4:	4a7d      	ldr	r2, [pc, #500]	; (8006d9c <LPTIM_Disable+0x230>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d82a      	bhi.n	8006c00 <LPTIM_Disable+0x94>
 8006baa:	4a7d      	ldr	r2, [pc, #500]	; (8006da0 <LPTIM_Disable+0x234>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d015      	beq.n	8006bdc <LPTIM_Disable+0x70>
 8006bb0:	4a7b      	ldr	r2, [pc, #492]	; (8006da0 <LPTIM_Disable+0x234>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d824      	bhi.n	8006c00 <LPTIM_Disable+0x94>
 8006bb6:	4a7b      	ldr	r2, [pc, #492]	; (8006da4 <LPTIM_Disable+0x238>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d003      	beq.n	8006bc4 <LPTIM_Disable+0x58>
 8006bbc:	4a7a      	ldr	r2, [pc, #488]	; (8006da8 <LPTIM_Disable+0x23c>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d006      	beq.n	8006bd0 <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8006bc2:	e01d      	b.n	8006c00 <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006bc4:	4b79      	ldr	r3, [pc, #484]	; (8006dac <LPTIM_Disable+0x240>)
 8006bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8006bce:	e018      	b.n	8006c02 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006bd0:	4b76      	ldr	r3, [pc, #472]	; (8006dac <LPTIM_Disable+0x240>)
 8006bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bd4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8006bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8006bda:	e012      	b.n	8006c02 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8006bdc:	4b73      	ldr	r3, [pc, #460]	; (8006dac <LPTIM_Disable+0x240>)
 8006bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006be0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006be4:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8006be6:	e00c      	b.n	8006c02 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 8006be8:	4b70      	ldr	r3, [pc, #448]	; (8006dac <LPTIM_Disable+0x240>)
 8006bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8006bf2:	e006      	b.n	8006c02 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 8006bf4:	4b6d      	ldr	r3, [pc, #436]	; (8006dac <LPTIM_Disable+0x240>)
 8006bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bf8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8006bfe:	e000      	b.n	8006c02 <LPTIM_Disable+0x96>
      break;
 8006c00:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	695b      	ldr	r3, [r3, #20]
 8006c18:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	699b      	ldr	r3, [r3, #24]
 8006c20:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c28:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a5a      	ldr	r2, [pc, #360]	; (8006d98 <LPTIM_Disable+0x22c>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d059      	beq.n	8006ce8 <LPTIM_Disable+0x17c>
 8006c34:	4a58      	ldr	r2, [pc, #352]	; (8006d98 <LPTIM_Disable+0x22c>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d867      	bhi.n	8006d0a <LPTIM_Disable+0x19e>
 8006c3a:	4a58      	ldr	r2, [pc, #352]	; (8006d9c <LPTIM_Disable+0x230>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d042      	beq.n	8006cc6 <LPTIM_Disable+0x15a>
 8006c40:	4a56      	ldr	r2, [pc, #344]	; (8006d9c <LPTIM_Disable+0x230>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d861      	bhi.n	8006d0a <LPTIM_Disable+0x19e>
 8006c46:	4a56      	ldr	r2, [pc, #344]	; (8006da0 <LPTIM_Disable+0x234>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d02b      	beq.n	8006ca4 <LPTIM_Disable+0x138>
 8006c4c:	4a54      	ldr	r2, [pc, #336]	; (8006da0 <LPTIM_Disable+0x234>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d85b      	bhi.n	8006d0a <LPTIM_Disable+0x19e>
 8006c52:	4a54      	ldr	r2, [pc, #336]	; (8006da4 <LPTIM_Disable+0x238>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d003      	beq.n	8006c60 <LPTIM_Disable+0xf4>
 8006c58:	4a53      	ldr	r2, [pc, #332]	; (8006da8 <LPTIM_Disable+0x23c>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d011      	beq.n	8006c82 <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8006c5e:	e054      	b.n	8006d0a <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8006c60:	4b52      	ldr	r3, [pc, #328]	; (8006dac <LPTIM_Disable+0x240>)
 8006c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c66:	4a51      	ldr	r2, [pc, #324]	; (8006dac <LPTIM_Disable+0x240>)
 8006c68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8006c70:	4b4e      	ldr	r3, [pc, #312]	; (8006dac <LPTIM_Disable+0x240>)
 8006c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c76:	4a4d      	ldr	r2, [pc, #308]	; (8006dac <LPTIM_Disable+0x240>)
 8006c78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      break;
 8006c80:	e044      	b.n	8006d0c <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8006c82:	4b4a      	ldr	r3, [pc, #296]	; (8006dac <LPTIM_Disable+0x240>)
 8006c84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c88:	4a48      	ldr	r2, [pc, #288]	; (8006dac <LPTIM_Disable+0x240>)
 8006c8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c8e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8006c92:	4b46      	ldr	r3, [pc, #280]	; (8006dac <LPTIM_Disable+0x240>)
 8006c94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c98:	4a44      	ldr	r2, [pc, #272]	; (8006dac <LPTIM_Disable+0x240>)
 8006c9a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c9e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8006ca2:	e033      	b.n	8006d0c <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8006ca4:	4b41      	ldr	r3, [pc, #260]	; (8006dac <LPTIM_Disable+0x240>)
 8006ca6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006caa:	4a40      	ldr	r2, [pc, #256]	; (8006dac <LPTIM_Disable+0x240>)
 8006cac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006cb0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8006cb4:	4b3d      	ldr	r3, [pc, #244]	; (8006dac <LPTIM_Disable+0x240>)
 8006cb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006cba:	4a3c      	ldr	r2, [pc, #240]	; (8006dac <LPTIM_Disable+0x240>)
 8006cbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cc0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8006cc4:	e022      	b.n	8006d0c <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 8006cc6:	4b39      	ldr	r3, [pc, #228]	; (8006dac <LPTIM_Disable+0x240>)
 8006cc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ccc:	4a37      	ldr	r2, [pc, #220]	; (8006dac <LPTIM_Disable+0x240>)
 8006cce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006cd2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 8006cd6:	4b35      	ldr	r3, [pc, #212]	; (8006dac <LPTIM_Disable+0x240>)
 8006cd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006cdc:	4a33      	ldr	r2, [pc, #204]	; (8006dac <LPTIM_Disable+0x240>)
 8006cde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ce2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8006ce6:	e011      	b.n	8006d0c <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 8006ce8:	4b30      	ldr	r3, [pc, #192]	; (8006dac <LPTIM_Disable+0x240>)
 8006cea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006cee:	4a2f      	ldr	r2, [pc, #188]	; (8006dac <LPTIM_Disable+0x240>)
 8006cf0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006cf4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 8006cf8:	4b2c      	ldr	r3, [pc, #176]	; (8006dac <LPTIM_Disable+0x240>)
 8006cfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006cfe:	4a2b      	ldr	r2, [pc, #172]	; (8006dac <LPTIM_Disable+0x240>)
 8006d00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d04:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8006d08:	e000      	b.n	8006d0c <LPTIM_Disable+0x1a0>
      break;
 8006d0a:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d103      	bne.n	8006d1a <LPTIM_Disable+0x1ae>
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f000 80d0 	beq.w	8006eba <LPTIM_Disable+0x34e>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a1e      	ldr	r2, [pc, #120]	; (8006d98 <LPTIM_Disable+0x22c>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d031      	beq.n	8006d88 <LPTIM_Disable+0x21c>
 8006d24:	4a1c      	ldr	r2, [pc, #112]	; (8006d98 <LPTIM_Disable+0x22c>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d842      	bhi.n	8006db0 <LPTIM_Disable+0x244>
 8006d2a:	4a1c      	ldr	r2, [pc, #112]	; (8006d9c <LPTIM_Disable+0x230>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d024      	beq.n	8006d7a <LPTIM_Disable+0x20e>
 8006d30:	4a1a      	ldr	r2, [pc, #104]	; (8006d9c <LPTIM_Disable+0x230>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d83c      	bhi.n	8006db0 <LPTIM_Disable+0x244>
 8006d36:	4a1a      	ldr	r2, [pc, #104]	; (8006da0 <LPTIM_Disable+0x234>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d017      	beq.n	8006d6c <LPTIM_Disable+0x200>
 8006d3c:	4a18      	ldr	r2, [pc, #96]	; (8006da0 <LPTIM_Disable+0x234>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d836      	bhi.n	8006db0 <LPTIM_Disable+0x244>
 8006d42:	4a18      	ldr	r2, [pc, #96]	; (8006da4 <LPTIM_Disable+0x238>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d003      	beq.n	8006d50 <LPTIM_Disable+0x1e4>
 8006d48:	4a17      	ldr	r2, [pc, #92]	; (8006da8 <LPTIM_Disable+0x23c>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d007      	beq.n	8006d5e <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8006d4e:	e02f      	b.n	8006db0 <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 8006d50:	4b16      	ldr	r3, [pc, #88]	; (8006dac <LPTIM_Disable+0x240>)
 8006d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d54:	4a15      	ldr	r2, [pc, #84]	; (8006dac <LPTIM_Disable+0x240>)
 8006d56:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8006d5a:	6553      	str	r3, [r2, #84]	; 0x54
        break;
 8006d5c:	e029      	b.n	8006db2 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 8006d5e:	4b13      	ldr	r3, [pc, #76]	; (8006dac <LPTIM_Disable+0x240>)
 8006d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d62:	4a12      	ldr	r2, [pc, #72]	; (8006dac <LPTIM_Disable+0x240>)
 8006d64:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8006d68:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8006d6a:	e022      	b.n	8006db2 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 8006d6c:	4b0f      	ldr	r3, [pc, #60]	; (8006dac <LPTIM_Disable+0x240>)
 8006d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d70:	4a0e      	ldr	r2, [pc, #56]	; (8006dac <LPTIM_Disable+0x240>)
 8006d72:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006d76:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8006d78:	e01b      	b.n	8006db2 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 8006d7a:	4b0c      	ldr	r3, [pc, #48]	; (8006dac <LPTIM_Disable+0x240>)
 8006d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d7e:	4a0b      	ldr	r2, [pc, #44]	; (8006dac <LPTIM_Disable+0x240>)
 8006d80:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006d84:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8006d86:	e014      	b.n	8006db2 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 8006d88:	4b08      	ldr	r3, [pc, #32]	; (8006dac <LPTIM_Disable+0x240>)
 8006d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d8c:	4a07      	ldr	r2, [pc, #28]	; (8006dac <LPTIM_Disable+0x240>)
 8006d8e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006d92:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8006d94:	e00d      	b.n	8006db2 <LPTIM_Disable+0x246>
 8006d96:	bf00      	nop
 8006d98:	58003000 	.word	0x58003000
 8006d9c:	58002c00 	.word	0x58002c00
 8006da0:	58002800 	.word	0x58002800
 8006da4:	40002400 	.word	0x40002400
 8006da8:	58002400 	.word	0x58002400
 8006dac:	58024400 	.word	0x58024400
        break;
 8006db0:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d01a      	beq.n	8006dee <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	691a      	ldr	r2, [r3, #16]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f042 0201 	orr.w	r2, r2, #1
 8006dc6:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	69fa      	ldr	r2, [r7, #28]
 8006dce:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8006dd0:	2108      	movs	r1, #8
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f7ff fe9a 	bl	8006b0c <LPTIM_WaitForFlag>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b03      	cmp	r3, #3
 8006ddc:	d103      	bne.n	8006de6 <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2203      	movs	r2, #3
 8006de2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2208      	movs	r2, #8
 8006dec:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d01a      	beq.n	8006e2a <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	691a      	ldr	r2, [r3, #16]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f042 0201 	orr.w	r2, r2, #1
 8006e02:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	69ba      	ldr	r2, [r7, #24]
 8006e0a:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8006e0c:	2110      	movs	r1, #16
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f7ff fe7c 	bl	8006b0c <LPTIM_WaitForFlag>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b03      	cmp	r3, #3
 8006e18:	d103      	bne.n	8006e22 <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2203      	movs	r2, #3
 8006e1e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2210      	movs	r2, #16
 8006e28:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a33      	ldr	r2, [pc, #204]	; (8006efc <LPTIM_Disable+0x390>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d039      	beq.n	8006ea8 <LPTIM_Disable+0x33c>
 8006e34:	4a31      	ldr	r2, [pc, #196]	; (8006efc <LPTIM_Disable+0x390>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d841      	bhi.n	8006ebe <LPTIM_Disable+0x352>
 8006e3a:	4a31      	ldr	r2, [pc, #196]	; (8006f00 <LPTIM_Disable+0x394>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d02a      	beq.n	8006e96 <LPTIM_Disable+0x32a>
 8006e40:	4a2f      	ldr	r2, [pc, #188]	; (8006f00 <LPTIM_Disable+0x394>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d83b      	bhi.n	8006ebe <LPTIM_Disable+0x352>
 8006e46:	4a2f      	ldr	r2, [pc, #188]	; (8006f04 <LPTIM_Disable+0x398>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d01b      	beq.n	8006e84 <LPTIM_Disable+0x318>
 8006e4c:	4a2d      	ldr	r2, [pc, #180]	; (8006f04 <LPTIM_Disable+0x398>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d835      	bhi.n	8006ebe <LPTIM_Disable+0x352>
 8006e52:	4a2d      	ldr	r2, [pc, #180]	; (8006f08 <LPTIM_Disable+0x39c>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d003      	beq.n	8006e60 <LPTIM_Disable+0x2f4>
 8006e58:	4a2c      	ldr	r2, [pc, #176]	; (8006f0c <LPTIM_Disable+0x3a0>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d009      	beq.n	8006e72 <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8006e5e:	e02e      	b.n	8006ebe <LPTIM_Disable+0x352>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8006e60:	4b2b      	ldr	r3, [pc, #172]	; (8006f10 <LPTIM_Disable+0x3a4>)
 8006e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e64:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006e68:	4929      	ldr	r1, [pc, #164]	; (8006f10 <LPTIM_Disable+0x3a4>)
 8006e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	654b      	str	r3, [r1, #84]	; 0x54
        break;
 8006e70:	e026      	b.n	8006ec0 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8006e72:	4b27      	ldr	r3, [pc, #156]	; (8006f10 <LPTIM_Disable+0x3a4>)
 8006e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e76:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e7a:	4925      	ldr	r1, [pc, #148]	; (8006f10 <LPTIM_Disable+0x3a4>)
 8006e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8006e82:	e01d      	b.n	8006ec0 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8006e84:	4b22      	ldr	r3, [pc, #136]	; (8006f10 <LPTIM_Disable+0x3a4>)
 8006e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e88:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e8c:	4920      	ldr	r1, [pc, #128]	; (8006f10 <LPTIM_Disable+0x3a4>)
 8006e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e90:	4313      	orrs	r3, r2
 8006e92:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8006e94:	e014      	b.n	8006ec0 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 8006e96:	4b1e      	ldr	r3, [pc, #120]	; (8006f10 <LPTIM_Disable+0x3a4>)
 8006e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e9e:	491c      	ldr	r1, [pc, #112]	; (8006f10 <LPTIM_Disable+0x3a4>)
 8006ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8006ea6:	e00b      	b.n	8006ec0 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 8006ea8:	4b19      	ldr	r3, [pc, #100]	; (8006f10 <LPTIM_Disable+0x3a4>)
 8006eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006eb0:	4917      	ldr	r1, [pc, #92]	; (8006f10 <LPTIM_Disable+0x3a4>)
 8006eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8006eb8:	e002      	b.n	8006ec0 <LPTIM_Disable+0x354>
    }
  }
 8006eba:	bf00      	nop
 8006ebc:	e000      	b.n	8006ec0 <LPTIM_Disable+0x354>
        break;
 8006ebe:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	691a      	ldr	r2, [r3, #16]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f022 0201 	bic.w	r2, r2, #1
 8006ece:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ed6:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	6a3a      	ldr	r2, [r7, #32]
 8006ede:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	697a      	ldr	r2, [r7, #20]
 8006ee6:	625a      	str	r2, [r3, #36]	; 0x24
 8006ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eea:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	f383 8810 	msr	PRIMASK, r3
}
 8006ef2:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8006ef4:	bf00      	nop
 8006ef6:	3730      	adds	r7, #48	; 0x30
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	58003000 	.word	0x58003000
 8006f00:	58002c00 	.word	0x58002c00
 8006f04:	58002800 	.word	0x58002800
 8006f08:	40002400 	.word	0x40002400
 8006f0c:	58002400 	.word	0x58002400
 8006f10:	58024400 	.word	0x58024400

08006f14 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8006f14:	b480      	push	{r7}
 8006f16:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8006f18:	4b05      	ldr	r3, [pc, #20]	; (8006f30 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a04      	ldr	r2, [pc, #16]	; (8006f30 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f22:	6013      	str	r3, [r2, #0]
}
 8006f24:	bf00      	nop
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop
 8006f30:	58024800 	.word	0x58024800

08006f34 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006f3c:	4b19      	ldr	r3, [pc, #100]	; (8006fa4 <HAL_PWREx_ConfigSupply+0x70>)
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	f003 0304 	and.w	r3, r3, #4
 8006f44:	2b04      	cmp	r3, #4
 8006f46:	d00a      	beq.n	8006f5e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006f48:	4b16      	ldr	r3, [pc, #88]	; (8006fa4 <HAL_PWREx_ConfigSupply+0x70>)
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	f003 0307 	and.w	r3, r3, #7
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d001      	beq.n	8006f5a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e01f      	b.n	8006f9a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	e01d      	b.n	8006f9a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006f5e:	4b11      	ldr	r3, [pc, #68]	; (8006fa4 <HAL_PWREx_ConfigSupply+0x70>)
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	f023 0207 	bic.w	r2, r3, #7
 8006f66:	490f      	ldr	r1, [pc, #60]	; (8006fa4 <HAL_PWREx_ConfigSupply+0x70>)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006f6e:	f7fb fcf1 	bl	8002954 <HAL_GetTick>
 8006f72:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006f74:	e009      	b.n	8006f8a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006f76:	f7fb fced 	bl	8002954 <HAL_GetTick>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	1ad3      	subs	r3, r2, r3
 8006f80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f84:	d901      	bls.n	8006f8a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e007      	b.n	8006f9a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006f8a:	4b06      	ldr	r3, [pc, #24]	; (8006fa4 <HAL_PWREx_ConfigSupply+0x70>)
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f96:	d1ee      	bne.n	8006f76 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	58024800 	.word	0x58024800

08006fa8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b08c      	sub	sp, #48	; 0x30
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d102      	bne.n	8006fbc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	f000 bc48 	b.w	800784c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0301 	and.w	r3, r3, #1
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f000 8088 	beq.w	80070da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fca:	4b99      	ldr	r3, [pc, #612]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006fd4:	4b96      	ldr	r3, [pc, #600]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 8006fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fdc:	2b10      	cmp	r3, #16
 8006fde:	d007      	beq.n	8006ff0 <HAL_RCC_OscConfig+0x48>
 8006fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe2:	2b18      	cmp	r3, #24
 8006fe4:	d111      	bne.n	800700a <HAL_RCC_OscConfig+0x62>
 8006fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe8:	f003 0303 	and.w	r3, r3, #3
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d10c      	bne.n	800700a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ff0:	4b8f      	ldr	r3, [pc, #572]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d06d      	beq.n	80070d8 <HAL_RCC_OscConfig+0x130>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d169      	bne.n	80070d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	f000 bc21 	b.w	800784c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007012:	d106      	bne.n	8007022 <HAL_RCC_OscConfig+0x7a>
 8007014:	4b86      	ldr	r3, [pc, #536]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a85      	ldr	r2, [pc, #532]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 800701a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800701e:	6013      	str	r3, [r2, #0]
 8007020:	e02e      	b.n	8007080 <HAL_RCC_OscConfig+0xd8>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10c      	bne.n	8007044 <HAL_RCC_OscConfig+0x9c>
 800702a:	4b81      	ldr	r3, [pc, #516]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a80      	ldr	r2, [pc, #512]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 8007030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007034:	6013      	str	r3, [r2, #0]
 8007036:	4b7e      	ldr	r3, [pc, #504]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a7d      	ldr	r2, [pc, #500]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 800703c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007040:	6013      	str	r3, [r2, #0]
 8007042:	e01d      	b.n	8007080 <HAL_RCC_OscConfig+0xd8>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800704c:	d10c      	bne.n	8007068 <HAL_RCC_OscConfig+0xc0>
 800704e:	4b78      	ldr	r3, [pc, #480]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a77      	ldr	r2, [pc, #476]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 8007054:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007058:	6013      	str	r3, [r2, #0]
 800705a:	4b75      	ldr	r3, [pc, #468]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a74      	ldr	r2, [pc, #464]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 8007060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007064:	6013      	str	r3, [r2, #0]
 8007066:	e00b      	b.n	8007080 <HAL_RCC_OscConfig+0xd8>
 8007068:	4b71      	ldr	r3, [pc, #452]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a70      	ldr	r2, [pc, #448]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 800706e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007072:	6013      	str	r3, [r2, #0]
 8007074:	4b6e      	ldr	r3, [pc, #440]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a6d      	ldr	r2, [pc, #436]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 800707a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800707e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d013      	beq.n	80070b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007088:	f7fb fc64 	bl	8002954 <HAL_GetTick>
 800708c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800708e:	e008      	b.n	80070a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007090:	f7fb fc60 	bl	8002954 <HAL_GetTick>
 8007094:	4602      	mov	r2, r0
 8007096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	2b64      	cmp	r3, #100	; 0x64
 800709c:	d901      	bls.n	80070a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800709e:	2303      	movs	r3, #3
 80070a0:	e3d4      	b.n	800784c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80070a2:	4b63      	ldr	r3, [pc, #396]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d0f0      	beq.n	8007090 <HAL_RCC_OscConfig+0xe8>
 80070ae:	e014      	b.n	80070da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070b0:	f7fb fc50 	bl	8002954 <HAL_GetTick>
 80070b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80070b6:	e008      	b.n	80070ca <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070b8:	f7fb fc4c 	bl	8002954 <HAL_GetTick>
 80070bc:	4602      	mov	r2, r0
 80070be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	2b64      	cmp	r3, #100	; 0x64
 80070c4:	d901      	bls.n	80070ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e3c0      	b.n	800784c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80070ca:	4b59      	ldr	r3, [pc, #356]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1f0      	bne.n	80070b8 <HAL_RCC_OscConfig+0x110>
 80070d6:	e000      	b.n	80070da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0302 	and.w	r3, r3, #2
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f000 80ca 	beq.w	800727c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070e8:	4b51      	ldr	r3, [pc, #324]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070f0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80070f2:	4b4f      	ldr	r3, [pc, #316]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 80070f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80070f8:	6a3b      	ldr	r3, [r7, #32]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d007      	beq.n	800710e <HAL_RCC_OscConfig+0x166>
 80070fe:	6a3b      	ldr	r3, [r7, #32]
 8007100:	2b18      	cmp	r3, #24
 8007102:	d156      	bne.n	80071b2 <HAL_RCC_OscConfig+0x20a>
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	f003 0303 	and.w	r3, r3, #3
 800710a:	2b00      	cmp	r3, #0
 800710c:	d151      	bne.n	80071b2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800710e:	4b48      	ldr	r3, [pc, #288]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0304 	and.w	r3, r3, #4
 8007116:	2b00      	cmp	r3, #0
 8007118:	d005      	beq.n	8007126 <HAL_RCC_OscConfig+0x17e>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d101      	bne.n	8007126 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e392      	b.n	800784c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007126:	4b42      	ldr	r3, [pc, #264]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f023 0219 	bic.w	r2, r3, #25
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	493f      	ldr	r1, [pc, #252]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 8007134:	4313      	orrs	r3, r2
 8007136:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007138:	f7fb fc0c 	bl	8002954 <HAL_GetTick>
 800713c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800713e:	e008      	b.n	8007152 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007140:	f7fb fc08 	bl	8002954 <HAL_GetTick>
 8007144:	4602      	mov	r2, r0
 8007146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	2b02      	cmp	r3, #2
 800714c:	d901      	bls.n	8007152 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800714e:	2303      	movs	r3, #3
 8007150:	e37c      	b.n	800784c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007152:	4b37      	ldr	r3, [pc, #220]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 0304 	and.w	r3, r3, #4
 800715a:	2b00      	cmp	r3, #0
 800715c:	d0f0      	beq.n	8007140 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800715e:	f7fb fc29 	bl	80029b4 <HAL_GetREVID>
 8007162:	4603      	mov	r3, r0
 8007164:	f241 0203 	movw	r2, #4099	; 0x1003
 8007168:	4293      	cmp	r3, r2
 800716a:	d817      	bhi.n	800719c <HAL_RCC_OscConfig+0x1f4>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	2b40      	cmp	r3, #64	; 0x40
 8007172:	d108      	bne.n	8007186 <HAL_RCC_OscConfig+0x1de>
 8007174:	4b2e      	ldr	r3, [pc, #184]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800717c:	4a2c      	ldr	r2, [pc, #176]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 800717e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007182:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007184:	e07a      	b.n	800727c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007186:	4b2a      	ldr	r3, [pc, #168]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	031b      	lsls	r3, r3, #12
 8007194:	4926      	ldr	r1, [pc, #152]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 8007196:	4313      	orrs	r3, r2
 8007198:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800719a:	e06f      	b.n	800727c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800719c:	4b24      	ldr	r3, [pc, #144]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	061b      	lsls	r3, r3, #24
 80071aa:	4921      	ldr	r1, [pc, #132]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 80071ac:	4313      	orrs	r3, r2
 80071ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071b0:	e064      	b.n	800727c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d047      	beq.n	800724a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80071ba:	4b1d      	ldr	r3, [pc, #116]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f023 0219 	bic.w	r2, r3, #25
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	491a      	ldr	r1, [pc, #104]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 80071c8:	4313      	orrs	r3, r2
 80071ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071cc:	f7fb fbc2 	bl	8002954 <HAL_GetTick>
 80071d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80071d2:	e008      	b.n	80071e6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071d4:	f7fb fbbe 	bl	8002954 <HAL_GetTick>
 80071d8:	4602      	mov	r2, r0
 80071da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d901      	bls.n	80071e6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e332      	b.n	800784c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80071e6:	4b12      	ldr	r3, [pc, #72]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f003 0304 	and.w	r3, r3, #4
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d0f0      	beq.n	80071d4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071f2:	f7fb fbdf 	bl	80029b4 <HAL_GetREVID>
 80071f6:	4603      	mov	r3, r0
 80071f8:	f241 0203 	movw	r2, #4099	; 0x1003
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d819      	bhi.n	8007234 <HAL_RCC_OscConfig+0x28c>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	2b40      	cmp	r3, #64	; 0x40
 8007206:	d108      	bne.n	800721a <HAL_RCC_OscConfig+0x272>
 8007208:	4b09      	ldr	r3, [pc, #36]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007210:	4a07      	ldr	r2, [pc, #28]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 8007212:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007216:	6053      	str	r3, [r2, #4]
 8007218:	e030      	b.n	800727c <HAL_RCC_OscConfig+0x2d4>
 800721a:	4b05      	ldr	r3, [pc, #20]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	031b      	lsls	r3, r3, #12
 8007228:	4901      	ldr	r1, [pc, #4]	; (8007230 <HAL_RCC_OscConfig+0x288>)
 800722a:	4313      	orrs	r3, r2
 800722c:	604b      	str	r3, [r1, #4]
 800722e:	e025      	b.n	800727c <HAL_RCC_OscConfig+0x2d4>
 8007230:	58024400 	.word	0x58024400
 8007234:	4b9a      	ldr	r3, [pc, #616]	; (80074a0 <HAL_RCC_OscConfig+0x4f8>)
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	061b      	lsls	r3, r3, #24
 8007242:	4997      	ldr	r1, [pc, #604]	; (80074a0 <HAL_RCC_OscConfig+0x4f8>)
 8007244:	4313      	orrs	r3, r2
 8007246:	604b      	str	r3, [r1, #4]
 8007248:	e018      	b.n	800727c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800724a:	4b95      	ldr	r3, [pc, #596]	; (80074a0 <HAL_RCC_OscConfig+0x4f8>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a94      	ldr	r2, [pc, #592]	; (80074a0 <HAL_RCC_OscConfig+0x4f8>)
 8007250:	f023 0301 	bic.w	r3, r3, #1
 8007254:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007256:	f7fb fb7d 	bl	8002954 <HAL_GetTick>
 800725a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800725c:	e008      	b.n	8007270 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800725e:	f7fb fb79 	bl	8002954 <HAL_GetTick>
 8007262:	4602      	mov	r2, r0
 8007264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	2b02      	cmp	r3, #2
 800726a:	d901      	bls.n	8007270 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800726c:	2303      	movs	r3, #3
 800726e:	e2ed      	b.n	800784c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007270:	4b8b      	ldr	r3, [pc, #556]	; (80074a0 <HAL_RCC_OscConfig+0x4f8>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0304 	and.w	r3, r3, #4
 8007278:	2b00      	cmp	r3, #0
 800727a:	d1f0      	bne.n	800725e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0310 	and.w	r3, r3, #16
 8007284:	2b00      	cmp	r3, #0
 8007286:	f000 80a9 	beq.w	80073dc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800728a:	4b85      	ldr	r3, [pc, #532]	; (80074a0 <HAL_RCC_OscConfig+0x4f8>)
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007292:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007294:	4b82      	ldr	r3, [pc, #520]	; (80074a0 <HAL_RCC_OscConfig+0x4f8>)
 8007296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007298:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	2b08      	cmp	r3, #8
 800729e:	d007      	beq.n	80072b0 <HAL_RCC_OscConfig+0x308>
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	2b18      	cmp	r3, #24
 80072a4:	d13a      	bne.n	800731c <HAL_RCC_OscConfig+0x374>
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	f003 0303 	and.w	r3, r3, #3
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d135      	bne.n	800731c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80072b0:	4b7b      	ldr	r3, [pc, #492]	; (80074a0 <HAL_RCC_OscConfig+0x4f8>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d005      	beq.n	80072c8 <HAL_RCC_OscConfig+0x320>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	69db      	ldr	r3, [r3, #28]
 80072c0:	2b80      	cmp	r3, #128	; 0x80
 80072c2:	d001      	beq.n	80072c8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	e2c1      	b.n	800784c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80072c8:	f7fb fb74 	bl	80029b4 <HAL_GetREVID>
 80072cc:	4603      	mov	r3, r0
 80072ce:	f241 0203 	movw	r2, #4099	; 0x1003
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d817      	bhi.n	8007306 <HAL_RCC_OscConfig+0x35e>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a1b      	ldr	r3, [r3, #32]
 80072da:	2b20      	cmp	r3, #32
 80072dc:	d108      	bne.n	80072f0 <HAL_RCC_OscConfig+0x348>
 80072de:	4b70      	ldr	r3, [pc, #448]	; (80074a0 <HAL_RCC_OscConfig+0x4f8>)
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80072e6:	4a6e      	ldr	r2, [pc, #440]	; (80074a0 <HAL_RCC_OscConfig+0x4f8>)
 80072e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072ec:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80072ee:	e075      	b.n	80073dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80072f0:	4b6b      	ldr	r3, [pc, #428]	; (80074a0 <HAL_RCC_OscConfig+0x4f8>)
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a1b      	ldr	r3, [r3, #32]
 80072fc:	069b      	lsls	r3, r3, #26
 80072fe:	4968      	ldr	r1, [pc, #416]	; (80074a0 <HAL_RCC_OscConfig+0x4f8>)
 8007300:	4313      	orrs	r3, r2
 8007302:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007304:	e06a      	b.n	80073dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007306:	4b66      	ldr	r3, [pc, #408]	; (80074a0 <HAL_RCC_OscConfig+0x4f8>)
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a1b      	ldr	r3, [r3, #32]
 8007312:	061b      	lsls	r3, r3, #24
 8007314:	4962      	ldr	r1, [pc, #392]	; (80074a0 <HAL_RCC_OscConfig+0x4f8>)
 8007316:	4313      	orrs	r3, r2
 8007318:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800731a:	e05f      	b.n	80073dc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	69db      	ldr	r3, [r3, #28]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d042      	beq.n	80073aa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007324:	4b5e      	ldr	r3, [pc, #376]	; (80074a0 <HAL_RCC_OscConfig+0x4f8>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a5d      	ldr	r2, [pc, #372]	; (80074a0 <HAL_RCC_OscConfig+0x4f8>)
 800732a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800732e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007330:	f7fb fb10 	bl	8002954 <HAL_GetTick>
 8007334:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007336:	e008      	b.n	800734a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007338:	f7fb fb0c 	bl	8002954 <HAL_GetTick>
 800733c:	4602      	mov	r2, r0
 800733e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	2b02      	cmp	r3, #2
 8007344:	d901      	bls.n	800734a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007346:	2303      	movs	r3, #3
 8007348:	e280      	b.n	800784c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800734a:	4b55      	ldr	r3, [pc, #340]	; (80074a0 <HAL_RCC_OscConfig+0x4f8>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007352:	2b00      	cmp	r3, #0
 8007354:	d0f0      	beq.n	8007338 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007356:	f7fb fb2d 	bl	80029b4 <HAL_GetREVID>
 800735a:	4603      	mov	r3, r0
 800735c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007360:	4293      	cmp	r3, r2
 8007362:	d817      	bhi.n	8007394 <HAL_RCC_OscConfig+0x3ec>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a1b      	ldr	r3, [r3, #32]
 8007368:	2b20      	cmp	r3, #32
 800736a:	d108      	bne.n	800737e <HAL_RCC_OscConfig+0x3d6>
 800736c:	4b4c      	ldr	r3, [pc, #304]	; (80074a0 <HAL_RCC_OscConfig+0x4f8>)
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007374:	4a4a      	ldr	r2, [pc, #296]	; (80074a0 <HAL_RCC_OscConfig+0x4f8>)
 8007376:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800737a:	6053      	str	r3, [r2, #4]
 800737c:	e02e      	b.n	80073dc <HAL_RCC_OscConfig+0x434>
 800737e:	4b48      	ldr	r3, [pc, #288]	; (80074a0 <HAL_RCC_OscConfig+0x4f8>)
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a1b      	ldr	r3, [r3, #32]
 800738a:	069b      	lsls	r3, r3, #26
 800738c:	4944      	ldr	r1, [pc, #272]	; (80074a0 <HAL_RCC_OscConfig+0x4f8>)
 800738e:	4313      	orrs	r3, r2
 8007390:	604b      	str	r3, [r1, #4]
 8007392:	e023      	b.n	80073dc <HAL_RCC_OscConfig+0x434>
 8007394:	4b42      	ldr	r3, [pc, #264]	; (80074a0 <HAL_RCC_OscConfig+0x4f8>)
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a1b      	ldr	r3, [r3, #32]
 80073a0:	061b      	lsls	r3, r3, #24
 80073a2:	493f      	ldr	r1, [pc, #252]	; (80074a0 <HAL_RCC_OscConfig+0x4f8>)
 80073a4:	4313      	orrs	r3, r2
 80073a6:	60cb      	str	r3, [r1, #12]
 80073a8:	e018      	b.n	80073dc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80073aa:	4b3d      	ldr	r3, [pc, #244]	; (80074a0 <HAL_RCC_OscConfig+0x4f8>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a3c      	ldr	r2, [pc, #240]	; (80074a0 <HAL_RCC_OscConfig+0x4f8>)
 80073b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073b6:	f7fb facd 	bl	8002954 <HAL_GetTick>
 80073ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80073bc:	e008      	b.n	80073d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80073be:	f7fb fac9 	bl	8002954 <HAL_GetTick>
 80073c2:	4602      	mov	r2, r0
 80073c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d901      	bls.n	80073d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e23d      	b.n	800784c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80073d0:	4b33      	ldr	r3, [pc, #204]	; (80074a0 <HAL_RCC_OscConfig+0x4f8>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d1f0      	bne.n	80073be <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0308 	and.w	r3, r3, #8
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d036      	beq.n	8007456 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	695b      	ldr	r3, [r3, #20]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d019      	beq.n	8007424 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073f0:	4b2b      	ldr	r3, [pc, #172]	; (80074a0 <HAL_RCC_OscConfig+0x4f8>)
 80073f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073f4:	4a2a      	ldr	r2, [pc, #168]	; (80074a0 <HAL_RCC_OscConfig+0x4f8>)
 80073f6:	f043 0301 	orr.w	r3, r3, #1
 80073fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073fc:	f7fb faaa 	bl	8002954 <HAL_GetTick>
 8007400:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007402:	e008      	b.n	8007416 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007404:	f7fb faa6 	bl	8002954 <HAL_GetTick>
 8007408:	4602      	mov	r2, r0
 800740a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	2b02      	cmp	r3, #2
 8007410:	d901      	bls.n	8007416 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	e21a      	b.n	800784c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007416:	4b22      	ldr	r3, [pc, #136]	; (80074a0 <HAL_RCC_OscConfig+0x4f8>)
 8007418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800741a:	f003 0302 	and.w	r3, r3, #2
 800741e:	2b00      	cmp	r3, #0
 8007420:	d0f0      	beq.n	8007404 <HAL_RCC_OscConfig+0x45c>
 8007422:	e018      	b.n	8007456 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007424:	4b1e      	ldr	r3, [pc, #120]	; (80074a0 <HAL_RCC_OscConfig+0x4f8>)
 8007426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007428:	4a1d      	ldr	r2, [pc, #116]	; (80074a0 <HAL_RCC_OscConfig+0x4f8>)
 800742a:	f023 0301 	bic.w	r3, r3, #1
 800742e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007430:	f7fb fa90 	bl	8002954 <HAL_GetTick>
 8007434:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007436:	e008      	b.n	800744a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007438:	f7fb fa8c 	bl	8002954 <HAL_GetTick>
 800743c:	4602      	mov	r2, r0
 800743e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	2b02      	cmp	r3, #2
 8007444:	d901      	bls.n	800744a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e200      	b.n	800784c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800744a:	4b15      	ldr	r3, [pc, #84]	; (80074a0 <HAL_RCC_OscConfig+0x4f8>)
 800744c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800744e:	f003 0302 	and.w	r3, r3, #2
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1f0      	bne.n	8007438 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 0320 	and.w	r3, r3, #32
 800745e:	2b00      	cmp	r3, #0
 8007460:	d039      	beq.n	80074d6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	699b      	ldr	r3, [r3, #24]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d01c      	beq.n	80074a4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800746a:	4b0d      	ldr	r3, [pc, #52]	; (80074a0 <HAL_RCC_OscConfig+0x4f8>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a0c      	ldr	r2, [pc, #48]	; (80074a0 <HAL_RCC_OscConfig+0x4f8>)
 8007470:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007474:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007476:	f7fb fa6d 	bl	8002954 <HAL_GetTick>
 800747a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800747c:	e008      	b.n	8007490 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800747e:	f7fb fa69 	bl	8002954 <HAL_GetTick>
 8007482:	4602      	mov	r2, r0
 8007484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007486:	1ad3      	subs	r3, r2, r3
 8007488:	2b02      	cmp	r3, #2
 800748a:	d901      	bls.n	8007490 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800748c:	2303      	movs	r3, #3
 800748e:	e1dd      	b.n	800784c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007490:	4b03      	ldr	r3, [pc, #12]	; (80074a0 <HAL_RCC_OscConfig+0x4f8>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007498:	2b00      	cmp	r3, #0
 800749a:	d0f0      	beq.n	800747e <HAL_RCC_OscConfig+0x4d6>
 800749c:	e01b      	b.n	80074d6 <HAL_RCC_OscConfig+0x52e>
 800749e:	bf00      	nop
 80074a0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80074a4:	4b9b      	ldr	r3, [pc, #620]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a9a      	ldr	r2, [pc, #616]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 80074aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80074b0:	f7fb fa50 	bl	8002954 <HAL_GetTick>
 80074b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80074b6:	e008      	b.n	80074ca <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80074b8:	f7fb fa4c 	bl	8002954 <HAL_GetTick>
 80074bc:	4602      	mov	r2, r0
 80074be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c0:	1ad3      	subs	r3, r2, r3
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d901      	bls.n	80074ca <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80074c6:	2303      	movs	r3, #3
 80074c8:	e1c0      	b.n	800784c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80074ca:	4b92      	ldr	r3, [pc, #584]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d1f0      	bne.n	80074b8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0304 	and.w	r3, r3, #4
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f000 8081 	beq.w	80075e6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80074e4:	4b8c      	ldr	r3, [pc, #560]	; (8007718 <HAL_RCC_OscConfig+0x770>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a8b      	ldr	r2, [pc, #556]	; (8007718 <HAL_RCC_OscConfig+0x770>)
 80074ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80074f0:	f7fb fa30 	bl	8002954 <HAL_GetTick>
 80074f4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074f6:	e008      	b.n	800750a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074f8:	f7fb fa2c 	bl	8002954 <HAL_GetTick>
 80074fc:	4602      	mov	r2, r0
 80074fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	2b64      	cmp	r3, #100	; 0x64
 8007504:	d901      	bls.n	800750a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007506:	2303      	movs	r3, #3
 8007508:	e1a0      	b.n	800784c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800750a:	4b83      	ldr	r3, [pc, #524]	; (8007718 <HAL_RCC_OscConfig+0x770>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007512:	2b00      	cmp	r3, #0
 8007514:	d0f0      	beq.n	80074f8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	2b01      	cmp	r3, #1
 800751c:	d106      	bne.n	800752c <HAL_RCC_OscConfig+0x584>
 800751e:	4b7d      	ldr	r3, [pc, #500]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 8007520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007522:	4a7c      	ldr	r2, [pc, #496]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 8007524:	f043 0301 	orr.w	r3, r3, #1
 8007528:	6713      	str	r3, [r2, #112]	; 0x70
 800752a:	e02d      	b.n	8007588 <HAL_RCC_OscConfig+0x5e0>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10c      	bne.n	800754e <HAL_RCC_OscConfig+0x5a6>
 8007534:	4b77      	ldr	r3, [pc, #476]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 8007536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007538:	4a76      	ldr	r2, [pc, #472]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 800753a:	f023 0301 	bic.w	r3, r3, #1
 800753e:	6713      	str	r3, [r2, #112]	; 0x70
 8007540:	4b74      	ldr	r3, [pc, #464]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 8007542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007544:	4a73      	ldr	r2, [pc, #460]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 8007546:	f023 0304 	bic.w	r3, r3, #4
 800754a:	6713      	str	r3, [r2, #112]	; 0x70
 800754c:	e01c      	b.n	8007588 <HAL_RCC_OscConfig+0x5e0>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	2b05      	cmp	r3, #5
 8007554:	d10c      	bne.n	8007570 <HAL_RCC_OscConfig+0x5c8>
 8007556:	4b6f      	ldr	r3, [pc, #444]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 8007558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800755a:	4a6e      	ldr	r2, [pc, #440]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 800755c:	f043 0304 	orr.w	r3, r3, #4
 8007560:	6713      	str	r3, [r2, #112]	; 0x70
 8007562:	4b6c      	ldr	r3, [pc, #432]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 8007564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007566:	4a6b      	ldr	r2, [pc, #428]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 8007568:	f043 0301 	orr.w	r3, r3, #1
 800756c:	6713      	str	r3, [r2, #112]	; 0x70
 800756e:	e00b      	b.n	8007588 <HAL_RCC_OscConfig+0x5e0>
 8007570:	4b68      	ldr	r3, [pc, #416]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 8007572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007574:	4a67      	ldr	r2, [pc, #412]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 8007576:	f023 0301 	bic.w	r3, r3, #1
 800757a:	6713      	str	r3, [r2, #112]	; 0x70
 800757c:	4b65      	ldr	r3, [pc, #404]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 800757e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007580:	4a64      	ldr	r2, [pc, #400]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 8007582:	f023 0304 	bic.w	r3, r3, #4
 8007586:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d015      	beq.n	80075bc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007590:	f7fb f9e0 	bl	8002954 <HAL_GetTick>
 8007594:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007596:	e00a      	b.n	80075ae <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007598:	f7fb f9dc 	bl	8002954 <HAL_GetTick>
 800759c:	4602      	mov	r2, r0
 800759e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d901      	bls.n	80075ae <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80075aa:	2303      	movs	r3, #3
 80075ac:	e14e      	b.n	800784c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075ae:	4b59      	ldr	r3, [pc, #356]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 80075b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075b2:	f003 0302 	and.w	r3, r3, #2
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d0ee      	beq.n	8007598 <HAL_RCC_OscConfig+0x5f0>
 80075ba:	e014      	b.n	80075e6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075bc:	f7fb f9ca 	bl	8002954 <HAL_GetTick>
 80075c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80075c2:	e00a      	b.n	80075da <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075c4:	f7fb f9c6 	bl	8002954 <HAL_GetTick>
 80075c8:	4602      	mov	r2, r0
 80075ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075cc:	1ad3      	subs	r3, r2, r3
 80075ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d901      	bls.n	80075da <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80075d6:	2303      	movs	r3, #3
 80075d8:	e138      	b.n	800784c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80075da:	4b4e      	ldr	r3, [pc, #312]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 80075dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075de:	f003 0302 	and.w	r3, r3, #2
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1ee      	bne.n	80075c4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	f000 812d 	beq.w	800784a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80075f0:	4b48      	ldr	r3, [pc, #288]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075f8:	2b18      	cmp	r3, #24
 80075fa:	f000 80bd 	beq.w	8007778 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007602:	2b02      	cmp	r3, #2
 8007604:	f040 809e 	bne.w	8007744 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007608:	4b42      	ldr	r3, [pc, #264]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a41      	ldr	r2, [pc, #260]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 800760e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007612:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007614:	f7fb f99e 	bl	8002954 <HAL_GetTick>
 8007618:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800761a:	e008      	b.n	800762e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800761c:	f7fb f99a 	bl	8002954 <HAL_GetTick>
 8007620:	4602      	mov	r2, r0
 8007622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007624:	1ad3      	subs	r3, r2, r3
 8007626:	2b02      	cmp	r3, #2
 8007628:	d901      	bls.n	800762e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800762a:	2303      	movs	r3, #3
 800762c:	e10e      	b.n	800784c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800762e:	4b39      	ldr	r3, [pc, #228]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007636:	2b00      	cmp	r3, #0
 8007638:	d1f0      	bne.n	800761c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800763a:	4b36      	ldr	r3, [pc, #216]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 800763c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800763e:	4b37      	ldr	r3, [pc, #220]	; (800771c <HAL_RCC_OscConfig+0x774>)
 8007640:	4013      	ands	r3, r2
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800764a:	0112      	lsls	r2, r2, #4
 800764c:	430a      	orrs	r2, r1
 800764e:	4931      	ldr	r1, [pc, #196]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 8007650:	4313      	orrs	r3, r2
 8007652:	628b      	str	r3, [r1, #40]	; 0x28
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007658:	3b01      	subs	r3, #1
 800765a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007662:	3b01      	subs	r3, #1
 8007664:	025b      	lsls	r3, r3, #9
 8007666:	b29b      	uxth	r3, r3
 8007668:	431a      	orrs	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800766e:	3b01      	subs	r3, #1
 8007670:	041b      	lsls	r3, r3, #16
 8007672:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007676:	431a      	orrs	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800767c:	3b01      	subs	r3, #1
 800767e:	061b      	lsls	r3, r3, #24
 8007680:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007684:	4923      	ldr	r1, [pc, #140]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 8007686:	4313      	orrs	r3, r2
 8007688:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800768a:	4b22      	ldr	r3, [pc, #136]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 800768c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768e:	4a21      	ldr	r2, [pc, #132]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 8007690:	f023 0301 	bic.w	r3, r3, #1
 8007694:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007696:	4b1f      	ldr	r3, [pc, #124]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 8007698:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800769a:	4b21      	ldr	r3, [pc, #132]	; (8007720 <HAL_RCC_OscConfig+0x778>)
 800769c:	4013      	ands	r3, r2
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80076a2:	00d2      	lsls	r2, r2, #3
 80076a4:	491b      	ldr	r1, [pc, #108]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 80076a6:	4313      	orrs	r3, r2
 80076a8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80076aa:	4b1a      	ldr	r3, [pc, #104]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 80076ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ae:	f023 020c 	bic.w	r2, r3, #12
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b6:	4917      	ldr	r1, [pc, #92]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 80076b8:	4313      	orrs	r3, r2
 80076ba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80076bc:	4b15      	ldr	r3, [pc, #84]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 80076be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c0:	f023 0202 	bic.w	r2, r3, #2
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076c8:	4912      	ldr	r1, [pc, #72]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 80076ca:	4313      	orrs	r3, r2
 80076cc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80076ce:	4b11      	ldr	r3, [pc, #68]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 80076d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d2:	4a10      	ldr	r2, [pc, #64]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 80076d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076da:	4b0e      	ldr	r3, [pc, #56]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 80076dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076de:	4a0d      	ldr	r2, [pc, #52]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 80076e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80076e6:	4b0b      	ldr	r3, [pc, #44]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 80076e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ea:	4a0a      	ldr	r2, [pc, #40]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 80076ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80076f2:	4b08      	ldr	r3, [pc, #32]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 80076f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f6:	4a07      	ldr	r2, [pc, #28]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 80076f8:	f043 0301 	orr.w	r3, r3, #1
 80076fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076fe:	4b05      	ldr	r3, [pc, #20]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a04      	ldr	r2, [pc, #16]	; (8007714 <HAL_RCC_OscConfig+0x76c>)
 8007704:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800770a:	f7fb f923 	bl	8002954 <HAL_GetTick>
 800770e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007710:	e011      	b.n	8007736 <HAL_RCC_OscConfig+0x78e>
 8007712:	bf00      	nop
 8007714:	58024400 	.word	0x58024400
 8007718:	58024800 	.word	0x58024800
 800771c:	fffffc0c 	.word	0xfffffc0c
 8007720:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007724:	f7fb f916 	bl	8002954 <HAL_GetTick>
 8007728:	4602      	mov	r2, r0
 800772a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	2b02      	cmp	r3, #2
 8007730:	d901      	bls.n	8007736 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007732:	2303      	movs	r3, #3
 8007734:	e08a      	b.n	800784c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007736:	4b47      	ldr	r3, [pc, #284]	; (8007854 <HAL_RCC_OscConfig+0x8ac>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800773e:	2b00      	cmp	r3, #0
 8007740:	d0f0      	beq.n	8007724 <HAL_RCC_OscConfig+0x77c>
 8007742:	e082      	b.n	800784a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007744:	4b43      	ldr	r3, [pc, #268]	; (8007854 <HAL_RCC_OscConfig+0x8ac>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a42      	ldr	r2, [pc, #264]	; (8007854 <HAL_RCC_OscConfig+0x8ac>)
 800774a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800774e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007750:	f7fb f900 	bl	8002954 <HAL_GetTick>
 8007754:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007756:	e008      	b.n	800776a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007758:	f7fb f8fc 	bl	8002954 <HAL_GetTick>
 800775c:	4602      	mov	r2, r0
 800775e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	2b02      	cmp	r3, #2
 8007764:	d901      	bls.n	800776a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007766:	2303      	movs	r3, #3
 8007768:	e070      	b.n	800784c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800776a:	4b3a      	ldr	r3, [pc, #232]	; (8007854 <HAL_RCC_OscConfig+0x8ac>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1f0      	bne.n	8007758 <HAL_RCC_OscConfig+0x7b0>
 8007776:	e068      	b.n	800784a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007778:	4b36      	ldr	r3, [pc, #216]	; (8007854 <HAL_RCC_OscConfig+0x8ac>)
 800777a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800777c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800777e:	4b35      	ldr	r3, [pc, #212]	; (8007854 <HAL_RCC_OscConfig+0x8ac>)
 8007780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007782:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007788:	2b01      	cmp	r3, #1
 800778a:	d031      	beq.n	80077f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	f003 0203 	and.w	r2, r3, #3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007796:	429a      	cmp	r2, r3
 8007798:	d12a      	bne.n	80077f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	091b      	lsrs	r3, r3, #4
 800779e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d122      	bne.n	80077f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d11a      	bne.n	80077f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	0a5b      	lsrs	r3, r3, #9
 80077be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077c6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d111      	bne.n	80077f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	0c1b      	lsrs	r3, r3, #16
 80077d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80077da:	429a      	cmp	r2, r3
 80077dc:	d108      	bne.n	80077f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	0e1b      	lsrs	r3, r3, #24
 80077e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d001      	beq.n	80077f4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	e02b      	b.n	800784c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80077f4:	4b17      	ldr	r3, [pc, #92]	; (8007854 <HAL_RCC_OscConfig+0x8ac>)
 80077f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077f8:	08db      	lsrs	r3, r3, #3
 80077fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077fe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007804:	693a      	ldr	r2, [r7, #16]
 8007806:	429a      	cmp	r2, r3
 8007808:	d01f      	beq.n	800784a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800780a:	4b12      	ldr	r3, [pc, #72]	; (8007854 <HAL_RCC_OscConfig+0x8ac>)
 800780c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780e:	4a11      	ldr	r2, [pc, #68]	; (8007854 <HAL_RCC_OscConfig+0x8ac>)
 8007810:	f023 0301 	bic.w	r3, r3, #1
 8007814:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007816:	f7fb f89d 	bl	8002954 <HAL_GetTick>
 800781a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800781c:	bf00      	nop
 800781e:	f7fb f899 	bl	8002954 <HAL_GetTick>
 8007822:	4602      	mov	r2, r0
 8007824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007826:	4293      	cmp	r3, r2
 8007828:	d0f9      	beq.n	800781e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800782a:	4b0a      	ldr	r3, [pc, #40]	; (8007854 <HAL_RCC_OscConfig+0x8ac>)
 800782c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800782e:	4b0a      	ldr	r3, [pc, #40]	; (8007858 <HAL_RCC_OscConfig+0x8b0>)
 8007830:	4013      	ands	r3, r2
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007836:	00d2      	lsls	r2, r2, #3
 8007838:	4906      	ldr	r1, [pc, #24]	; (8007854 <HAL_RCC_OscConfig+0x8ac>)
 800783a:	4313      	orrs	r3, r2
 800783c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800783e:	4b05      	ldr	r3, [pc, #20]	; (8007854 <HAL_RCC_OscConfig+0x8ac>)
 8007840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007842:	4a04      	ldr	r2, [pc, #16]	; (8007854 <HAL_RCC_OscConfig+0x8ac>)
 8007844:	f043 0301 	orr.w	r3, r3, #1
 8007848:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3730      	adds	r7, #48	; 0x30
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	58024400 	.word	0x58024400
 8007858:	ffff0007 	.word	0xffff0007

0800785c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b086      	sub	sp, #24
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d101      	bne.n	8007870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	e19c      	b.n	8007baa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007870:	4b8a      	ldr	r3, [pc, #552]	; (8007a9c <HAL_RCC_ClockConfig+0x240>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 030f 	and.w	r3, r3, #15
 8007878:	683a      	ldr	r2, [r7, #0]
 800787a:	429a      	cmp	r2, r3
 800787c:	d910      	bls.n	80078a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800787e:	4b87      	ldr	r3, [pc, #540]	; (8007a9c <HAL_RCC_ClockConfig+0x240>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f023 020f 	bic.w	r2, r3, #15
 8007886:	4985      	ldr	r1, [pc, #532]	; (8007a9c <HAL_RCC_ClockConfig+0x240>)
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	4313      	orrs	r3, r2
 800788c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800788e:	4b83      	ldr	r3, [pc, #524]	; (8007a9c <HAL_RCC_ClockConfig+0x240>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 030f 	and.w	r3, r3, #15
 8007896:	683a      	ldr	r2, [r7, #0]
 8007898:	429a      	cmp	r2, r3
 800789a:	d001      	beq.n	80078a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	e184      	b.n	8007baa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 0304 	and.w	r3, r3, #4
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d010      	beq.n	80078ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	691a      	ldr	r2, [r3, #16]
 80078b0:	4b7b      	ldr	r3, [pc, #492]	; (8007aa0 <HAL_RCC_ClockConfig+0x244>)
 80078b2:	699b      	ldr	r3, [r3, #24]
 80078b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d908      	bls.n	80078ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80078bc:	4b78      	ldr	r3, [pc, #480]	; (8007aa0 <HAL_RCC_ClockConfig+0x244>)
 80078be:	699b      	ldr	r3, [r3, #24]
 80078c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	691b      	ldr	r3, [r3, #16]
 80078c8:	4975      	ldr	r1, [pc, #468]	; (8007aa0 <HAL_RCC_ClockConfig+0x244>)
 80078ca:	4313      	orrs	r3, r2
 80078cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f003 0308 	and.w	r3, r3, #8
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d010      	beq.n	80078fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	695a      	ldr	r2, [r3, #20]
 80078de:	4b70      	ldr	r3, [pc, #448]	; (8007aa0 <HAL_RCC_ClockConfig+0x244>)
 80078e0:	69db      	ldr	r3, [r3, #28]
 80078e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d908      	bls.n	80078fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80078ea:	4b6d      	ldr	r3, [pc, #436]	; (8007aa0 <HAL_RCC_ClockConfig+0x244>)
 80078ec:	69db      	ldr	r3, [r3, #28]
 80078ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	496a      	ldr	r1, [pc, #424]	; (8007aa0 <HAL_RCC_ClockConfig+0x244>)
 80078f8:	4313      	orrs	r3, r2
 80078fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 0310 	and.w	r3, r3, #16
 8007904:	2b00      	cmp	r3, #0
 8007906:	d010      	beq.n	800792a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	699a      	ldr	r2, [r3, #24]
 800790c:	4b64      	ldr	r3, [pc, #400]	; (8007aa0 <HAL_RCC_ClockConfig+0x244>)
 800790e:	69db      	ldr	r3, [r3, #28]
 8007910:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007914:	429a      	cmp	r2, r3
 8007916:	d908      	bls.n	800792a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007918:	4b61      	ldr	r3, [pc, #388]	; (8007aa0 <HAL_RCC_ClockConfig+0x244>)
 800791a:	69db      	ldr	r3, [r3, #28]
 800791c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	699b      	ldr	r3, [r3, #24]
 8007924:	495e      	ldr	r1, [pc, #376]	; (8007aa0 <HAL_RCC_ClockConfig+0x244>)
 8007926:	4313      	orrs	r3, r2
 8007928:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f003 0320 	and.w	r3, r3, #32
 8007932:	2b00      	cmp	r3, #0
 8007934:	d010      	beq.n	8007958 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	69da      	ldr	r2, [r3, #28]
 800793a:	4b59      	ldr	r3, [pc, #356]	; (8007aa0 <HAL_RCC_ClockConfig+0x244>)
 800793c:	6a1b      	ldr	r3, [r3, #32]
 800793e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007942:	429a      	cmp	r2, r3
 8007944:	d908      	bls.n	8007958 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007946:	4b56      	ldr	r3, [pc, #344]	; (8007aa0 <HAL_RCC_ClockConfig+0x244>)
 8007948:	6a1b      	ldr	r3, [r3, #32]
 800794a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	69db      	ldr	r3, [r3, #28]
 8007952:	4953      	ldr	r1, [pc, #332]	; (8007aa0 <HAL_RCC_ClockConfig+0x244>)
 8007954:	4313      	orrs	r3, r2
 8007956:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f003 0302 	and.w	r3, r3, #2
 8007960:	2b00      	cmp	r3, #0
 8007962:	d010      	beq.n	8007986 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	68da      	ldr	r2, [r3, #12]
 8007968:	4b4d      	ldr	r3, [pc, #308]	; (8007aa0 <HAL_RCC_ClockConfig+0x244>)
 800796a:	699b      	ldr	r3, [r3, #24]
 800796c:	f003 030f 	and.w	r3, r3, #15
 8007970:	429a      	cmp	r2, r3
 8007972:	d908      	bls.n	8007986 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007974:	4b4a      	ldr	r3, [pc, #296]	; (8007aa0 <HAL_RCC_ClockConfig+0x244>)
 8007976:	699b      	ldr	r3, [r3, #24]
 8007978:	f023 020f 	bic.w	r2, r3, #15
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	4947      	ldr	r1, [pc, #284]	; (8007aa0 <HAL_RCC_ClockConfig+0x244>)
 8007982:	4313      	orrs	r3, r2
 8007984:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 0301 	and.w	r3, r3, #1
 800798e:	2b00      	cmp	r3, #0
 8007990:	d055      	beq.n	8007a3e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007992:	4b43      	ldr	r3, [pc, #268]	; (8007aa0 <HAL_RCC_ClockConfig+0x244>)
 8007994:	699b      	ldr	r3, [r3, #24]
 8007996:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	4940      	ldr	r1, [pc, #256]	; (8007aa0 <HAL_RCC_ClockConfig+0x244>)
 80079a0:	4313      	orrs	r3, r2
 80079a2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d107      	bne.n	80079bc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80079ac:	4b3c      	ldr	r3, [pc, #240]	; (8007aa0 <HAL_RCC_ClockConfig+0x244>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d121      	bne.n	80079fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	e0f6      	b.n	8007baa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	2b03      	cmp	r3, #3
 80079c2:	d107      	bne.n	80079d4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80079c4:	4b36      	ldr	r3, [pc, #216]	; (8007aa0 <HAL_RCC_ClockConfig+0x244>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d115      	bne.n	80079fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	e0ea      	b.n	8007baa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d107      	bne.n	80079ec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80079dc:	4b30      	ldr	r3, [pc, #192]	; (8007aa0 <HAL_RCC_ClockConfig+0x244>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d109      	bne.n	80079fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	e0de      	b.n	8007baa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079ec:	4b2c      	ldr	r3, [pc, #176]	; (8007aa0 <HAL_RCC_ClockConfig+0x244>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f003 0304 	and.w	r3, r3, #4
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d101      	bne.n	80079fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	e0d6      	b.n	8007baa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80079fc:	4b28      	ldr	r3, [pc, #160]	; (8007aa0 <HAL_RCC_ClockConfig+0x244>)
 80079fe:	691b      	ldr	r3, [r3, #16]
 8007a00:	f023 0207 	bic.w	r2, r3, #7
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	4925      	ldr	r1, [pc, #148]	; (8007aa0 <HAL_RCC_ClockConfig+0x244>)
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a0e:	f7fa ffa1 	bl	8002954 <HAL_GetTick>
 8007a12:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a14:	e00a      	b.n	8007a2c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a16:	f7fa ff9d 	bl	8002954 <HAL_GetTick>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d901      	bls.n	8007a2c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	e0be      	b.n	8007baa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a2c:	4b1c      	ldr	r3, [pc, #112]	; (8007aa0 <HAL_RCC_ClockConfig+0x244>)
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	00db      	lsls	r3, r3, #3
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d1eb      	bne.n	8007a16 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 0302 	and.w	r3, r3, #2
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d010      	beq.n	8007a6c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	68da      	ldr	r2, [r3, #12]
 8007a4e:	4b14      	ldr	r3, [pc, #80]	; (8007aa0 <HAL_RCC_ClockConfig+0x244>)
 8007a50:	699b      	ldr	r3, [r3, #24]
 8007a52:	f003 030f 	and.w	r3, r3, #15
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d208      	bcs.n	8007a6c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a5a:	4b11      	ldr	r3, [pc, #68]	; (8007aa0 <HAL_RCC_ClockConfig+0x244>)
 8007a5c:	699b      	ldr	r3, [r3, #24]
 8007a5e:	f023 020f 	bic.w	r2, r3, #15
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	490e      	ldr	r1, [pc, #56]	; (8007aa0 <HAL_RCC_ClockConfig+0x244>)
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007a6c:	4b0b      	ldr	r3, [pc, #44]	; (8007a9c <HAL_RCC_ClockConfig+0x240>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 030f 	and.w	r3, r3, #15
 8007a74:	683a      	ldr	r2, [r7, #0]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d214      	bcs.n	8007aa4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a7a:	4b08      	ldr	r3, [pc, #32]	; (8007a9c <HAL_RCC_ClockConfig+0x240>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f023 020f 	bic.w	r2, r3, #15
 8007a82:	4906      	ldr	r1, [pc, #24]	; (8007a9c <HAL_RCC_ClockConfig+0x240>)
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a8a:	4b04      	ldr	r3, [pc, #16]	; (8007a9c <HAL_RCC_ClockConfig+0x240>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 030f 	and.w	r3, r3, #15
 8007a92:	683a      	ldr	r2, [r7, #0]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d005      	beq.n	8007aa4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e086      	b.n	8007baa <HAL_RCC_ClockConfig+0x34e>
 8007a9c:	52002000 	.word	0x52002000
 8007aa0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f003 0304 	and.w	r3, r3, #4
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d010      	beq.n	8007ad2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	691a      	ldr	r2, [r3, #16]
 8007ab4:	4b3f      	ldr	r3, [pc, #252]	; (8007bb4 <HAL_RCC_ClockConfig+0x358>)
 8007ab6:	699b      	ldr	r3, [r3, #24]
 8007ab8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d208      	bcs.n	8007ad2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007ac0:	4b3c      	ldr	r3, [pc, #240]	; (8007bb4 <HAL_RCC_ClockConfig+0x358>)
 8007ac2:	699b      	ldr	r3, [r3, #24]
 8007ac4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	4939      	ldr	r1, [pc, #228]	; (8007bb4 <HAL_RCC_ClockConfig+0x358>)
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 0308 	and.w	r3, r3, #8
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d010      	beq.n	8007b00 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	695a      	ldr	r2, [r3, #20]
 8007ae2:	4b34      	ldr	r3, [pc, #208]	; (8007bb4 <HAL_RCC_ClockConfig+0x358>)
 8007ae4:	69db      	ldr	r3, [r3, #28]
 8007ae6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d208      	bcs.n	8007b00 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007aee:	4b31      	ldr	r3, [pc, #196]	; (8007bb4 <HAL_RCC_ClockConfig+0x358>)
 8007af0:	69db      	ldr	r3, [r3, #28]
 8007af2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	695b      	ldr	r3, [r3, #20]
 8007afa:	492e      	ldr	r1, [pc, #184]	; (8007bb4 <HAL_RCC_ClockConfig+0x358>)
 8007afc:	4313      	orrs	r3, r2
 8007afe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f003 0310 	and.w	r3, r3, #16
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d010      	beq.n	8007b2e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	699a      	ldr	r2, [r3, #24]
 8007b10:	4b28      	ldr	r3, [pc, #160]	; (8007bb4 <HAL_RCC_ClockConfig+0x358>)
 8007b12:	69db      	ldr	r3, [r3, #28]
 8007b14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d208      	bcs.n	8007b2e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007b1c:	4b25      	ldr	r3, [pc, #148]	; (8007bb4 <HAL_RCC_ClockConfig+0x358>)
 8007b1e:	69db      	ldr	r3, [r3, #28]
 8007b20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	699b      	ldr	r3, [r3, #24]
 8007b28:	4922      	ldr	r1, [pc, #136]	; (8007bb4 <HAL_RCC_ClockConfig+0x358>)
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f003 0320 	and.w	r3, r3, #32
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d010      	beq.n	8007b5c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	69da      	ldr	r2, [r3, #28]
 8007b3e:	4b1d      	ldr	r3, [pc, #116]	; (8007bb4 <HAL_RCC_ClockConfig+0x358>)
 8007b40:	6a1b      	ldr	r3, [r3, #32]
 8007b42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d208      	bcs.n	8007b5c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007b4a:	4b1a      	ldr	r3, [pc, #104]	; (8007bb4 <HAL_RCC_ClockConfig+0x358>)
 8007b4c:	6a1b      	ldr	r3, [r3, #32]
 8007b4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	69db      	ldr	r3, [r3, #28]
 8007b56:	4917      	ldr	r1, [pc, #92]	; (8007bb4 <HAL_RCC_ClockConfig+0x358>)
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007b5c:	f000 f844 	bl	8007be8 <HAL_RCC_GetSysClockFreq>
 8007b60:	4602      	mov	r2, r0
 8007b62:	4b14      	ldr	r3, [pc, #80]	; (8007bb4 <HAL_RCC_ClockConfig+0x358>)
 8007b64:	699b      	ldr	r3, [r3, #24]
 8007b66:	0a1b      	lsrs	r3, r3, #8
 8007b68:	f003 030f 	and.w	r3, r3, #15
 8007b6c:	4912      	ldr	r1, [pc, #72]	; (8007bb8 <HAL_RCC_ClockConfig+0x35c>)
 8007b6e:	5ccb      	ldrb	r3, [r1, r3]
 8007b70:	f003 031f 	and.w	r3, r3, #31
 8007b74:	fa22 f303 	lsr.w	r3, r2, r3
 8007b78:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007b7a:	4b0e      	ldr	r3, [pc, #56]	; (8007bb4 <HAL_RCC_ClockConfig+0x358>)
 8007b7c:	699b      	ldr	r3, [r3, #24]
 8007b7e:	f003 030f 	and.w	r3, r3, #15
 8007b82:	4a0d      	ldr	r2, [pc, #52]	; (8007bb8 <HAL_RCC_ClockConfig+0x35c>)
 8007b84:	5cd3      	ldrb	r3, [r2, r3]
 8007b86:	f003 031f 	and.w	r3, r3, #31
 8007b8a:	693a      	ldr	r2, [r7, #16]
 8007b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b90:	4a0a      	ldr	r2, [pc, #40]	; (8007bbc <HAL_RCC_ClockConfig+0x360>)
 8007b92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007b94:	4a0a      	ldr	r2, [pc, #40]	; (8007bc0 <HAL_RCC_ClockConfig+0x364>)
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007b9a:	4b0a      	ldr	r3, [pc, #40]	; (8007bc4 <HAL_RCC_ClockConfig+0x368>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7fa fe8e 	bl	80028c0 <HAL_InitTick>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3718      	adds	r7, #24
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	58024400 	.word	0x58024400
 8007bb8:	0800f2fc 	.word	0x0800f2fc
 8007bbc:	2000001c 	.word	0x2000001c
 8007bc0:	20000018 	.word	0x20000018
 8007bc4:	20000020 	.word	0x20000020

08007bc8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8007bcc:	4b05      	ldr	r3, [pc, #20]	; (8007be4 <HAL_RCC_EnableCSS+0x1c>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a04      	ldr	r2, [pc, #16]	; (8007be4 <HAL_RCC_EnableCSS+0x1c>)
 8007bd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007bd6:	6013      	str	r3, [r2, #0]
}
 8007bd8:	bf00      	nop
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	58024400 	.word	0x58024400

08007be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b089      	sub	sp, #36	; 0x24
 8007bec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007bee:	4bb3      	ldr	r3, [pc, #716]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007bf6:	2b18      	cmp	r3, #24
 8007bf8:	f200 8155 	bhi.w	8007ea6 <HAL_RCC_GetSysClockFreq+0x2be>
 8007bfc:	a201      	add	r2, pc, #4	; (adr r2, 8007c04 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c02:	bf00      	nop
 8007c04:	08007c69 	.word	0x08007c69
 8007c08:	08007ea7 	.word	0x08007ea7
 8007c0c:	08007ea7 	.word	0x08007ea7
 8007c10:	08007ea7 	.word	0x08007ea7
 8007c14:	08007ea7 	.word	0x08007ea7
 8007c18:	08007ea7 	.word	0x08007ea7
 8007c1c:	08007ea7 	.word	0x08007ea7
 8007c20:	08007ea7 	.word	0x08007ea7
 8007c24:	08007c8f 	.word	0x08007c8f
 8007c28:	08007ea7 	.word	0x08007ea7
 8007c2c:	08007ea7 	.word	0x08007ea7
 8007c30:	08007ea7 	.word	0x08007ea7
 8007c34:	08007ea7 	.word	0x08007ea7
 8007c38:	08007ea7 	.word	0x08007ea7
 8007c3c:	08007ea7 	.word	0x08007ea7
 8007c40:	08007ea7 	.word	0x08007ea7
 8007c44:	08007c95 	.word	0x08007c95
 8007c48:	08007ea7 	.word	0x08007ea7
 8007c4c:	08007ea7 	.word	0x08007ea7
 8007c50:	08007ea7 	.word	0x08007ea7
 8007c54:	08007ea7 	.word	0x08007ea7
 8007c58:	08007ea7 	.word	0x08007ea7
 8007c5c:	08007ea7 	.word	0x08007ea7
 8007c60:	08007ea7 	.word	0x08007ea7
 8007c64:	08007c9b 	.word	0x08007c9b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c68:	4b94      	ldr	r3, [pc, #592]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 0320 	and.w	r3, r3, #32
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d009      	beq.n	8007c88 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c74:	4b91      	ldr	r3, [pc, #580]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	08db      	lsrs	r3, r3, #3
 8007c7a:	f003 0303 	and.w	r3, r3, #3
 8007c7e:	4a90      	ldr	r2, [pc, #576]	; (8007ec0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c80:	fa22 f303 	lsr.w	r3, r2, r3
 8007c84:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007c86:	e111      	b.n	8007eac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007c88:	4b8d      	ldr	r3, [pc, #564]	; (8007ec0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c8a:	61bb      	str	r3, [r7, #24]
      break;
 8007c8c:	e10e      	b.n	8007eac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007c8e:	4b8d      	ldr	r3, [pc, #564]	; (8007ec4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007c90:	61bb      	str	r3, [r7, #24]
      break;
 8007c92:	e10b      	b.n	8007eac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007c94:	4b8c      	ldr	r3, [pc, #560]	; (8007ec8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007c96:	61bb      	str	r3, [r7, #24]
      break;
 8007c98:	e108      	b.n	8007eac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c9a:	4b88      	ldr	r3, [pc, #544]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9e:	f003 0303 	and.w	r3, r3, #3
 8007ca2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007ca4:	4b85      	ldr	r3, [pc, #532]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca8:	091b      	lsrs	r3, r3, #4
 8007caa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007cb0:	4b82      	ldr	r3, [pc, #520]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb4:	f003 0301 	and.w	r3, r3, #1
 8007cb8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007cba:	4b80      	ldr	r3, [pc, #512]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cbe:	08db      	lsrs	r3, r3, #3
 8007cc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	fb02 f303 	mul.w	r3, r2, r3
 8007cca:	ee07 3a90 	vmov	s15, r3
 8007cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cd2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	f000 80e1 	beq.w	8007ea0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	2b02      	cmp	r3, #2
 8007ce2:	f000 8083 	beq.w	8007dec <HAL_RCC_GetSysClockFreq+0x204>
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	f200 80a1 	bhi.w	8007e30 <HAL_RCC_GetSysClockFreq+0x248>
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d003      	beq.n	8007cfc <HAL_RCC_GetSysClockFreq+0x114>
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d056      	beq.n	8007da8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007cfa:	e099      	b.n	8007e30 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cfc:	4b6f      	ldr	r3, [pc, #444]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 0320 	and.w	r3, r3, #32
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d02d      	beq.n	8007d64 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d08:	4b6c      	ldr	r3, [pc, #432]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	08db      	lsrs	r3, r3, #3
 8007d0e:	f003 0303 	and.w	r3, r3, #3
 8007d12:	4a6b      	ldr	r2, [pc, #428]	; (8007ec0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007d14:	fa22 f303 	lsr.w	r3, r2, r3
 8007d18:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	ee07 3a90 	vmov	s15, r3
 8007d20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	ee07 3a90 	vmov	s15, r3
 8007d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d32:	4b62      	ldr	r3, [pc, #392]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d3a:	ee07 3a90 	vmov	s15, r3
 8007d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d42:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d46:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007ecc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d5e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007d62:	e087      	b.n	8007e74 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	ee07 3a90 	vmov	s15, r3
 8007d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d6e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007ed0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d76:	4b51      	ldr	r3, [pc, #324]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d7e:	ee07 3a90 	vmov	s15, r3
 8007d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d86:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d8a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007ecc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007da2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007da6:	e065      	b.n	8007e74 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	ee07 3a90 	vmov	s15, r3
 8007dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007db2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007ed4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dba:	4b40      	ldr	r3, [pc, #256]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dc2:	ee07 3a90 	vmov	s15, r3
 8007dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dca:	ed97 6a02 	vldr	s12, [r7, #8]
 8007dce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007ecc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007de6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007dea:	e043      	b.n	8007e74 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	ee07 3a90 	vmov	s15, r3
 8007df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007df6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007ed8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dfe:	4b2f      	ldr	r3, [pc, #188]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e06:	ee07 3a90 	vmov	s15, r3
 8007e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e12:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007ecc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007e2e:	e021      	b.n	8007e74 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	ee07 3a90 	vmov	s15, r3
 8007e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e3a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007ed4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e42:	4b1e      	ldr	r3, [pc, #120]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e4a:	ee07 3a90 	vmov	s15, r3
 8007e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e52:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e56:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007ecc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007e72:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007e74:	4b11      	ldr	r3, [pc, #68]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e78:	0a5b      	lsrs	r3, r3, #9
 8007e7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e7e:	3301      	adds	r3, #1
 8007e80:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	ee07 3a90 	vmov	s15, r3
 8007e88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007e8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e98:	ee17 3a90 	vmov	r3, s15
 8007e9c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007e9e:	e005      	b.n	8007eac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	61bb      	str	r3, [r7, #24]
      break;
 8007ea4:	e002      	b.n	8007eac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007ea6:	4b07      	ldr	r3, [pc, #28]	; (8007ec4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007ea8:	61bb      	str	r3, [r7, #24]
      break;
 8007eaa:	bf00      	nop
  }

  return sysclockfreq;
 8007eac:	69bb      	ldr	r3, [r7, #24]
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3724      	adds	r7, #36	; 0x24
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr
 8007eba:	bf00      	nop
 8007ebc:	58024400 	.word	0x58024400
 8007ec0:	03d09000 	.word	0x03d09000
 8007ec4:	003d0900 	.word	0x003d0900
 8007ec8:	00989680 	.word	0x00989680
 8007ecc:	46000000 	.word	0x46000000
 8007ed0:	4c742400 	.word	0x4c742400
 8007ed4:	4a742400 	.word	0x4a742400
 8007ed8:	4b189680 	.word	0x4b189680

08007edc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007ee2:	f7ff fe81 	bl	8007be8 <HAL_RCC_GetSysClockFreq>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	4b10      	ldr	r3, [pc, #64]	; (8007f2c <HAL_RCC_GetHCLKFreq+0x50>)
 8007eea:	699b      	ldr	r3, [r3, #24]
 8007eec:	0a1b      	lsrs	r3, r3, #8
 8007eee:	f003 030f 	and.w	r3, r3, #15
 8007ef2:	490f      	ldr	r1, [pc, #60]	; (8007f30 <HAL_RCC_GetHCLKFreq+0x54>)
 8007ef4:	5ccb      	ldrb	r3, [r1, r3]
 8007ef6:	f003 031f 	and.w	r3, r3, #31
 8007efa:	fa22 f303 	lsr.w	r3, r2, r3
 8007efe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007f00:	4b0a      	ldr	r3, [pc, #40]	; (8007f2c <HAL_RCC_GetHCLKFreq+0x50>)
 8007f02:	699b      	ldr	r3, [r3, #24]
 8007f04:	f003 030f 	and.w	r3, r3, #15
 8007f08:	4a09      	ldr	r2, [pc, #36]	; (8007f30 <HAL_RCC_GetHCLKFreq+0x54>)
 8007f0a:	5cd3      	ldrb	r3, [r2, r3]
 8007f0c:	f003 031f 	and.w	r3, r3, #31
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	fa22 f303 	lsr.w	r3, r2, r3
 8007f16:	4a07      	ldr	r2, [pc, #28]	; (8007f34 <HAL_RCC_GetHCLKFreq+0x58>)
 8007f18:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007f1a:	4a07      	ldr	r2, [pc, #28]	; (8007f38 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007f20:	4b04      	ldr	r3, [pc, #16]	; (8007f34 <HAL_RCC_GetHCLKFreq+0x58>)
 8007f22:	681b      	ldr	r3, [r3, #0]
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	58024400 	.word	0x58024400
 8007f30:	0800f2fc 	.word	0x0800f2fc
 8007f34:	2000001c 	.word	0x2000001c
 8007f38:	20000018 	.word	0x20000018

08007f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007f40:	f7ff ffcc 	bl	8007edc <HAL_RCC_GetHCLKFreq>
 8007f44:	4602      	mov	r2, r0
 8007f46:	4b06      	ldr	r3, [pc, #24]	; (8007f60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f48:	69db      	ldr	r3, [r3, #28]
 8007f4a:	091b      	lsrs	r3, r3, #4
 8007f4c:	f003 0307 	and.w	r3, r3, #7
 8007f50:	4904      	ldr	r1, [pc, #16]	; (8007f64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007f52:	5ccb      	ldrb	r3, [r1, r3]
 8007f54:	f003 031f 	and.w	r3, r3, #31
 8007f58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	58024400 	.word	0x58024400
 8007f64:	0800f2fc 	.word	0x0800f2fc

08007f68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007f6c:	f7ff ffb6 	bl	8007edc <HAL_RCC_GetHCLKFreq>
 8007f70:	4602      	mov	r2, r0
 8007f72:	4b06      	ldr	r3, [pc, #24]	; (8007f8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f74:	69db      	ldr	r3, [r3, #28]
 8007f76:	0a1b      	lsrs	r3, r3, #8
 8007f78:	f003 0307 	and.w	r3, r3, #7
 8007f7c:	4904      	ldr	r1, [pc, #16]	; (8007f90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007f7e:	5ccb      	ldrb	r3, [r1, r3]
 8007f80:	f003 031f 	and.w	r3, r3, #31
 8007f84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	58024400 	.word	0x58024400
 8007f90:	0800f2fc 	.word	0x0800f2fc

08007f94 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8007f98:	4b07      	ldr	r3, [pc, #28]	; (8007fb8 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007f9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fa4:	d105      	bne.n	8007fb2 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8007fa6:	f000 f809 	bl	8007fbc <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8007faa:	4b03      	ldr	r3, [pc, #12]	; (8007fb8 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007fac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007fb0:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 8007fb2:	bf00      	nop
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	58024400 	.word	0x58024400

08007fbc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8007fc0:	bf00      	nop
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr
	...

08007fcc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007fcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fd0:	b0ca      	sub	sp, #296	; 0x128
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007fd8:	2300      	movs	r3, #0
 8007fda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007fde:	2300      	movs	r3, #0
 8007fe0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fec:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8007ff0:	2500      	movs	r5, #0
 8007ff2:	ea54 0305 	orrs.w	r3, r4, r5
 8007ff6:	d049      	beq.n	800808c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ffc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ffe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008002:	d02f      	beq.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008004:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008008:	d828      	bhi.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800800a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800800e:	d01a      	beq.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008010:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008014:	d822      	bhi.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008016:	2b00      	cmp	r3, #0
 8008018:	d003      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800801a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800801e:	d007      	beq.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008020:	e01c      	b.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008022:	4bb8      	ldr	r3, [pc, #736]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008026:	4ab7      	ldr	r2, [pc, #732]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800802c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800802e:	e01a      	b.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008030:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008034:	3308      	adds	r3, #8
 8008036:	2102      	movs	r1, #2
 8008038:	4618      	mov	r0, r3
 800803a:	f002 fbb7 	bl	800a7ac <RCCEx_PLL2_Config>
 800803e:	4603      	mov	r3, r0
 8008040:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008044:	e00f      	b.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008046:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800804a:	3328      	adds	r3, #40	; 0x28
 800804c:	2102      	movs	r1, #2
 800804e:	4618      	mov	r0, r3
 8008050:	f002 fc5e 	bl	800a910 <RCCEx_PLL3_Config>
 8008054:	4603      	mov	r3, r0
 8008056:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800805a:	e004      	b.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008062:	e000      	b.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008064:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008066:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800806a:	2b00      	cmp	r3, #0
 800806c:	d10a      	bne.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800806e:	4ba5      	ldr	r3, [pc, #660]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008072:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008076:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800807a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800807c:	4aa1      	ldr	r2, [pc, #644]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800807e:	430b      	orrs	r3, r1
 8008080:	6513      	str	r3, [r2, #80]	; 0x50
 8008082:	e003      	b.n	800808c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008084:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008088:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800808c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008094:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8008098:	f04f 0900 	mov.w	r9, #0
 800809c:	ea58 0309 	orrs.w	r3, r8, r9
 80080a0:	d047      	beq.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80080a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080a8:	2b04      	cmp	r3, #4
 80080aa:	d82a      	bhi.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80080ac:	a201      	add	r2, pc, #4	; (adr r2, 80080b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80080ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b2:	bf00      	nop
 80080b4:	080080c9 	.word	0x080080c9
 80080b8:	080080d7 	.word	0x080080d7
 80080bc:	080080ed 	.word	0x080080ed
 80080c0:	0800810b 	.word	0x0800810b
 80080c4:	0800810b 	.word	0x0800810b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080c8:	4b8e      	ldr	r3, [pc, #568]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80080ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080cc:	4a8d      	ldr	r2, [pc, #564]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80080ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80080d4:	e01a      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080da:	3308      	adds	r3, #8
 80080dc:	2100      	movs	r1, #0
 80080de:	4618      	mov	r0, r3
 80080e0:	f002 fb64 	bl	800a7ac <RCCEx_PLL2_Config>
 80080e4:	4603      	mov	r3, r0
 80080e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80080ea:	e00f      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80080ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080f0:	3328      	adds	r3, #40	; 0x28
 80080f2:	2100      	movs	r1, #0
 80080f4:	4618      	mov	r0, r3
 80080f6:	f002 fc0b 	bl	800a910 <RCCEx_PLL3_Config>
 80080fa:	4603      	mov	r3, r0
 80080fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008100:	e004      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008108:	e000      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800810a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800810c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10a      	bne.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008114:	4b7b      	ldr	r3, [pc, #492]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008118:	f023 0107 	bic.w	r1, r3, #7
 800811c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008122:	4a78      	ldr	r2, [pc, #480]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008124:	430b      	orrs	r3, r1
 8008126:	6513      	str	r3, [r2, #80]	; 0x50
 8008128:	e003      	b.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800812a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800812e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008132:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800813e:	f04f 0b00 	mov.w	fp, #0
 8008142:	ea5a 030b 	orrs.w	r3, sl, fp
 8008146:	d04c      	beq.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008148:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800814c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800814e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008152:	d030      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008154:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008158:	d829      	bhi.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800815a:	2bc0      	cmp	r3, #192	; 0xc0
 800815c:	d02d      	beq.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800815e:	2bc0      	cmp	r3, #192	; 0xc0
 8008160:	d825      	bhi.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008162:	2b80      	cmp	r3, #128	; 0x80
 8008164:	d018      	beq.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008166:	2b80      	cmp	r3, #128	; 0x80
 8008168:	d821      	bhi.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800816a:	2b00      	cmp	r3, #0
 800816c:	d002      	beq.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800816e:	2b40      	cmp	r3, #64	; 0x40
 8008170:	d007      	beq.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008172:	e01c      	b.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008174:	4b63      	ldr	r3, [pc, #396]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008178:	4a62      	ldr	r2, [pc, #392]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800817a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800817e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008180:	e01c      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008186:	3308      	adds	r3, #8
 8008188:	2100      	movs	r1, #0
 800818a:	4618      	mov	r0, r3
 800818c:	f002 fb0e 	bl	800a7ac <RCCEx_PLL2_Config>
 8008190:	4603      	mov	r3, r0
 8008192:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008196:	e011      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008198:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800819c:	3328      	adds	r3, #40	; 0x28
 800819e:	2100      	movs	r1, #0
 80081a0:	4618      	mov	r0, r3
 80081a2:	f002 fbb5 	bl	800a910 <RCCEx_PLL3_Config>
 80081a6:	4603      	mov	r3, r0
 80081a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80081ac:	e006      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80081b4:	e002      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80081b6:	bf00      	nop
 80081b8:	e000      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80081ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d10a      	bne.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80081c4:	4b4f      	ldr	r3, [pc, #316]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081c8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80081cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081d2:	4a4c      	ldr	r2, [pc, #304]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081d4:	430b      	orrs	r3, r1
 80081d6:	6513      	str	r3, [r2, #80]	; 0x50
 80081d8:	e003      	b.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80081e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ea:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80081ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80081f2:	2300      	movs	r3, #0
 80081f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80081f8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80081fc:	460b      	mov	r3, r1
 80081fe:	4313      	orrs	r3, r2
 8008200:	d053      	beq.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008202:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008206:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800820a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800820e:	d035      	beq.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008210:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008214:	d82e      	bhi.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008216:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800821a:	d031      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800821c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008220:	d828      	bhi.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008222:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008226:	d01a      	beq.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008228:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800822c:	d822      	bhi.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800822e:	2b00      	cmp	r3, #0
 8008230:	d003      	beq.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008232:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008236:	d007      	beq.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008238:	e01c      	b.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800823a:	4b32      	ldr	r3, [pc, #200]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800823c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800823e:	4a31      	ldr	r2, [pc, #196]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008244:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008246:	e01c      	b.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008248:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800824c:	3308      	adds	r3, #8
 800824e:	2100      	movs	r1, #0
 8008250:	4618      	mov	r0, r3
 8008252:	f002 faab 	bl	800a7ac <RCCEx_PLL2_Config>
 8008256:	4603      	mov	r3, r0
 8008258:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800825c:	e011      	b.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800825e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008262:	3328      	adds	r3, #40	; 0x28
 8008264:	2100      	movs	r1, #0
 8008266:	4618      	mov	r0, r3
 8008268:	f002 fb52 	bl	800a910 <RCCEx_PLL3_Config>
 800826c:	4603      	mov	r3, r0
 800826e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008272:	e006      	b.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800827a:	e002      	b.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800827c:	bf00      	nop
 800827e:	e000      	b.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008280:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008282:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008286:	2b00      	cmp	r3, #0
 8008288:	d10b      	bne.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800828a:	4b1e      	ldr	r3, [pc, #120]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800828c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800828e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8008292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008296:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800829a:	4a1a      	ldr	r2, [pc, #104]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800829c:	430b      	orrs	r3, r1
 800829e:	6593      	str	r3, [r2, #88]	; 0x58
 80082a0:	e003      	b.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80082aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80082b6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80082ba:	2300      	movs	r3, #0
 80082bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80082c0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80082c4:	460b      	mov	r3, r1
 80082c6:	4313      	orrs	r3, r2
 80082c8:	d056      	beq.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80082ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80082d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80082d6:	d038      	beq.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80082d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80082dc:	d831      	bhi.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80082de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80082e2:	d034      	beq.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80082e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80082e8:	d82b      	bhi.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80082ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082ee:	d01d      	beq.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80082f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082f4:	d825      	bhi.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d006      	beq.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80082fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80082fe:	d00a      	beq.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008300:	e01f      	b.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008302:	bf00      	nop
 8008304:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008308:	4ba2      	ldr	r3, [pc, #648]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800830a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800830c:	4aa1      	ldr	r2, [pc, #644]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800830e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008312:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008314:	e01c      	b.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800831a:	3308      	adds	r3, #8
 800831c:	2100      	movs	r1, #0
 800831e:	4618      	mov	r0, r3
 8008320:	f002 fa44 	bl	800a7ac <RCCEx_PLL2_Config>
 8008324:	4603      	mov	r3, r0
 8008326:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800832a:	e011      	b.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800832c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008330:	3328      	adds	r3, #40	; 0x28
 8008332:	2100      	movs	r1, #0
 8008334:	4618      	mov	r0, r3
 8008336:	f002 faeb 	bl	800a910 <RCCEx_PLL3_Config>
 800833a:	4603      	mov	r3, r0
 800833c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008340:	e006      	b.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008348:	e002      	b.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800834a:	bf00      	nop
 800834c:	e000      	b.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800834e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008350:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008354:	2b00      	cmp	r3, #0
 8008356:	d10b      	bne.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008358:	4b8e      	ldr	r3, [pc, #568]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800835a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800835c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008360:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008364:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008368:	4a8a      	ldr	r2, [pc, #552]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800836a:	430b      	orrs	r3, r1
 800836c:	6593      	str	r3, [r2, #88]	; 0x58
 800836e:	e003      	b.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008370:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008374:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008378:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800837c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008380:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008384:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008388:	2300      	movs	r3, #0
 800838a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800838e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008392:	460b      	mov	r3, r1
 8008394:	4313      	orrs	r3, r2
 8008396:	d03a      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008398:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800839c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800839e:	2b30      	cmp	r3, #48	; 0x30
 80083a0:	d01f      	beq.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80083a2:	2b30      	cmp	r3, #48	; 0x30
 80083a4:	d819      	bhi.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80083a6:	2b20      	cmp	r3, #32
 80083a8:	d00c      	beq.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80083aa:	2b20      	cmp	r3, #32
 80083ac:	d815      	bhi.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d019      	beq.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80083b2:	2b10      	cmp	r3, #16
 80083b4:	d111      	bne.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083b6:	4b77      	ldr	r3, [pc, #476]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80083b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ba:	4a76      	ldr	r2, [pc, #472]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80083bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80083c2:	e011      	b.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80083c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083c8:	3308      	adds	r3, #8
 80083ca:	2102      	movs	r1, #2
 80083cc:	4618      	mov	r0, r3
 80083ce:	f002 f9ed 	bl	800a7ac <RCCEx_PLL2_Config>
 80083d2:	4603      	mov	r3, r0
 80083d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80083d8:	e006      	b.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80083e0:	e002      	b.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80083e2:	bf00      	nop
 80083e4:	e000      	b.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80083e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d10a      	bne.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80083f0:	4b68      	ldr	r3, [pc, #416]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80083f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083f4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80083f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083fe:	4a65      	ldr	r2, [pc, #404]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008400:	430b      	orrs	r3, r1
 8008402:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008404:	e003      	b.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008406:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800840a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800840e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008416:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800841a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800841e:	2300      	movs	r3, #0
 8008420:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008424:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008428:	460b      	mov	r3, r1
 800842a:	4313      	orrs	r3, r2
 800842c:	d051      	beq.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800842e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008432:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008434:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008438:	d035      	beq.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800843a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800843e:	d82e      	bhi.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008440:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008444:	d031      	beq.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008446:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800844a:	d828      	bhi.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800844c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008450:	d01a      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008452:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008456:	d822      	bhi.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008458:	2b00      	cmp	r3, #0
 800845a:	d003      	beq.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800845c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008460:	d007      	beq.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008462:	e01c      	b.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008464:	4b4b      	ldr	r3, [pc, #300]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008468:	4a4a      	ldr	r2, [pc, #296]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800846a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800846e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008470:	e01c      	b.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008476:	3308      	adds	r3, #8
 8008478:	2100      	movs	r1, #0
 800847a:	4618      	mov	r0, r3
 800847c:	f002 f996 	bl	800a7ac <RCCEx_PLL2_Config>
 8008480:	4603      	mov	r3, r0
 8008482:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008486:	e011      	b.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008488:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800848c:	3328      	adds	r3, #40	; 0x28
 800848e:	2100      	movs	r1, #0
 8008490:	4618      	mov	r0, r3
 8008492:	f002 fa3d 	bl	800a910 <RCCEx_PLL3_Config>
 8008496:	4603      	mov	r3, r0
 8008498:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800849c:	e006      	b.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80084a4:	e002      	b.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80084a6:	bf00      	nop
 80084a8:	e000      	b.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80084aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d10a      	bne.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80084b4:	4b37      	ldr	r3, [pc, #220]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80084b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084b8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80084bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084c2:	4a34      	ldr	r2, [pc, #208]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80084c4:	430b      	orrs	r3, r1
 80084c6:	6513      	str	r3, [r2, #80]	; 0x50
 80084c8:	e003      	b.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80084d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084da:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80084de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80084e2:	2300      	movs	r3, #0
 80084e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80084e8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80084ec:	460b      	mov	r3, r1
 80084ee:	4313      	orrs	r3, r2
 80084f0:	d056      	beq.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80084f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80084fc:	d033      	beq.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80084fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008502:	d82c      	bhi.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008504:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008508:	d02f      	beq.n	800856a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800850a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800850e:	d826      	bhi.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008510:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008514:	d02b      	beq.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008516:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800851a:	d820      	bhi.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800851c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008520:	d012      	beq.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008522:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008526:	d81a      	bhi.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008528:	2b00      	cmp	r3, #0
 800852a:	d022      	beq.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800852c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008530:	d115      	bne.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008532:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008536:	3308      	adds	r3, #8
 8008538:	2101      	movs	r1, #1
 800853a:	4618      	mov	r0, r3
 800853c:	f002 f936 	bl	800a7ac <RCCEx_PLL2_Config>
 8008540:	4603      	mov	r3, r0
 8008542:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008546:	e015      	b.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008548:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800854c:	3328      	adds	r3, #40	; 0x28
 800854e:	2101      	movs	r1, #1
 8008550:	4618      	mov	r0, r3
 8008552:	f002 f9dd 	bl	800a910 <RCCEx_PLL3_Config>
 8008556:	4603      	mov	r3, r0
 8008558:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800855c:	e00a      	b.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800855e:	2301      	movs	r3, #1
 8008560:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008564:	e006      	b.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008566:	bf00      	nop
 8008568:	e004      	b.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800856a:	bf00      	nop
 800856c:	e002      	b.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800856e:	bf00      	nop
 8008570:	e000      	b.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008572:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008574:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008578:	2b00      	cmp	r3, #0
 800857a:	d10d      	bne.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800857c:	4b05      	ldr	r3, [pc, #20]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800857e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008580:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008588:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800858a:	4a02      	ldr	r2, [pc, #8]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800858c:	430b      	orrs	r3, r1
 800858e:	6513      	str	r3, [r2, #80]	; 0x50
 8008590:	e006      	b.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008592:	bf00      	nop
 8008594:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008598:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800859c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80085a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80085ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80085b0:	2300      	movs	r3, #0
 80085b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80085b6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80085ba:	460b      	mov	r3, r1
 80085bc:	4313      	orrs	r3, r2
 80085be:	d055      	beq.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80085c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80085c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085cc:	d033      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80085ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085d2:	d82c      	bhi.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80085d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085d8:	d02f      	beq.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80085da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085de:	d826      	bhi.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80085e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80085e4:	d02b      	beq.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80085e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80085ea:	d820      	bhi.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80085ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085f0:	d012      	beq.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80085f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085f6:	d81a      	bhi.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d022      	beq.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80085fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008600:	d115      	bne.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008602:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008606:	3308      	adds	r3, #8
 8008608:	2101      	movs	r1, #1
 800860a:	4618      	mov	r0, r3
 800860c:	f002 f8ce 	bl	800a7ac <RCCEx_PLL2_Config>
 8008610:	4603      	mov	r3, r0
 8008612:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008616:	e015      	b.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008618:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800861c:	3328      	adds	r3, #40	; 0x28
 800861e:	2101      	movs	r1, #1
 8008620:	4618      	mov	r0, r3
 8008622:	f002 f975 	bl	800a910 <RCCEx_PLL3_Config>
 8008626:	4603      	mov	r3, r0
 8008628:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800862c:	e00a      	b.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008634:	e006      	b.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008636:	bf00      	nop
 8008638:	e004      	b.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800863a:	bf00      	nop
 800863c:	e002      	b.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800863e:	bf00      	nop
 8008640:	e000      	b.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008642:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008644:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008648:	2b00      	cmp	r3, #0
 800864a:	d10b      	bne.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800864c:	4ba3      	ldr	r3, [pc, #652]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800864e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008650:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008654:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008658:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800865c:	4a9f      	ldr	r2, [pc, #636]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800865e:	430b      	orrs	r3, r1
 8008660:	6593      	str	r3, [r2, #88]	; 0x58
 8008662:	e003      	b.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008664:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008668:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800866c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008674:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008678:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800867c:	2300      	movs	r3, #0
 800867e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008682:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008686:	460b      	mov	r3, r1
 8008688:	4313      	orrs	r3, r2
 800868a:	d037      	beq.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800868c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008692:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008696:	d00e      	beq.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008698:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800869c:	d816      	bhi.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x700>
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d018      	beq.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80086a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086a6:	d111      	bne.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086a8:	4b8c      	ldr	r3, [pc, #560]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80086aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ac:	4a8b      	ldr	r2, [pc, #556]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80086ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80086b4:	e00f      	b.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80086b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086ba:	3308      	adds	r3, #8
 80086bc:	2101      	movs	r1, #1
 80086be:	4618      	mov	r0, r3
 80086c0:	f002 f874 	bl	800a7ac <RCCEx_PLL2_Config>
 80086c4:	4603      	mov	r3, r0
 80086c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80086ca:	e004      	b.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80086d2:	e000      	b.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80086d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d10a      	bne.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80086de:	4b7f      	ldr	r3, [pc, #508]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80086e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086e2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80086e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ec:	4a7b      	ldr	r2, [pc, #492]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80086ee:	430b      	orrs	r3, r1
 80086f0:	6513      	str	r3, [r2, #80]	; 0x50
 80086f2:	e003      	b.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80086fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008704:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8008708:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800870c:	2300      	movs	r3, #0
 800870e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008712:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8008716:	460b      	mov	r3, r1
 8008718:	4313      	orrs	r3, r2
 800871a:	d039      	beq.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800871c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008722:	2b03      	cmp	r3, #3
 8008724:	d81c      	bhi.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008726:	a201      	add	r2, pc, #4	; (adr r2, 800872c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800872c:	08008769 	.word	0x08008769
 8008730:	0800873d 	.word	0x0800873d
 8008734:	0800874b 	.word	0x0800874b
 8008738:	08008769 	.word	0x08008769
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800873c:	4b67      	ldr	r3, [pc, #412]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800873e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008740:	4a66      	ldr	r2, [pc, #408]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008746:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008748:	e00f      	b.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800874a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800874e:	3308      	adds	r3, #8
 8008750:	2102      	movs	r1, #2
 8008752:	4618      	mov	r0, r3
 8008754:	f002 f82a 	bl	800a7ac <RCCEx_PLL2_Config>
 8008758:	4603      	mov	r3, r0
 800875a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800875e:	e004      	b.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008766:	e000      	b.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008768:	bf00      	nop
    }

    if (ret == HAL_OK)
 800876a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800876e:	2b00      	cmp	r3, #0
 8008770:	d10a      	bne.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008772:	4b5a      	ldr	r3, [pc, #360]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008776:	f023 0103 	bic.w	r1, r3, #3
 800877a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800877e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008780:	4a56      	ldr	r2, [pc, #344]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008782:	430b      	orrs	r3, r1
 8008784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008786:	e003      	b.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008788:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800878c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008798:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800879c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80087a0:	2300      	movs	r3, #0
 80087a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80087a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80087aa:	460b      	mov	r3, r1
 80087ac:	4313      	orrs	r3, r2
 80087ae:	f000 809f 	beq.w	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80087b2:	4b4b      	ldr	r3, [pc, #300]	; (80088e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a4a      	ldr	r2, [pc, #296]	; (80088e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80087b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80087be:	f7fa f8c9 	bl	8002954 <HAL_GetTick>
 80087c2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80087c6:	e00b      	b.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80087c8:	f7fa f8c4 	bl	8002954 <HAL_GetTick>
 80087cc:	4602      	mov	r2, r0
 80087ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80087d2:	1ad3      	subs	r3, r2, r3
 80087d4:	2b64      	cmp	r3, #100	; 0x64
 80087d6:	d903      	bls.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80087d8:	2303      	movs	r3, #3
 80087da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80087de:	e005      	b.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80087e0:	4b3f      	ldr	r3, [pc, #252]	; (80088e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d0ed      	beq.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80087ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d179      	bne.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80087f4:	4b39      	ldr	r3, [pc, #228]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80087f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008800:	4053      	eors	r3, r2
 8008802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008806:	2b00      	cmp	r3, #0
 8008808:	d015      	beq.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800880a:	4b34      	ldr	r3, [pc, #208]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800880c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800880e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008812:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008816:	4b31      	ldr	r3, [pc, #196]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800881a:	4a30      	ldr	r2, [pc, #192]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800881c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008820:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008822:	4b2e      	ldr	r3, [pc, #184]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008826:	4a2d      	ldr	r2, [pc, #180]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008828:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800882c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800882e:	4a2b      	ldr	r2, [pc, #172]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008830:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008834:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800883a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800883e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008842:	d118      	bne.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008844:	f7fa f886 	bl	8002954 <HAL_GetTick>
 8008848:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800884c:	e00d      	b.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800884e:	f7fa f881 	bl	8002954 <HAL_GetTick>
 8008852:	4602      	mov	r2, r0
 8008854:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008858:	1ad2      	subs	r2, r2, r3
 800885a:	f241 3388 	movw	r3, #5000	; 0x1388
 800885e:	429a      	cmp	r2, r3
 8008860:	d903      	bls.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8008862:	2303      	movs	r3, #3
 8008864:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8008868:	e005      	b.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800886a:	4b1c      	ldr	r3, [pc, #112]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800886c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800886e:	f003 0302 	and.w	r3, r3, #2
 8008872:	2b00      	cmp	r3, #0
 8008874:	d0eb      	beq.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008876:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800887a:	2b00      	cmp	r3, #0
 800887c:	d129      	bne.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800887e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008882:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800888a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800888e:	d10e      	bne.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008890:	4b12      	ldr	r3, [pc, #72]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008892:	691b      	ldr	r3, [r3, #16]
 8008894:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800889c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80088a0:	091a      	lsrs	r2, r3, #4
 80088a2:	4b10      	ldr	r3, [pc, #64]	; (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80088a4:	4013      	ands	r3, r2
 80088a6:	4a0d      	ldr	r2, [pc, #52]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088a8:	430b      	orrs	r3, r1
 80088aa:	6113      	str	r3, [r2, #16]
 80088ac:	e005      	b.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80088ae:	4b0b      	ldr	r3, [pc, #44]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088b0:	691b      	ldr	r3, [r3, #16]
 80088b2:	4a0a      	ldr	r2, [pc, #40]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088b4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80088b8:	6113      	str	r3, [r2, #16]
 80088ba:	4b08      	ldr	r3, [pc, #32]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088bc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80088be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80088c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80088ca:	4a04      	ldr	r2, [pc, #16]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088cc:	430b      	orrs	r3, r1
 80088ce:	6713      	str	r3, [r2, #112]	; 0x70
 80088d0:	e00e      	b.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80088d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80088da:	e009      	b.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80088dc:	58024400 	.word	0x58024400
 80088e0:	58024800 	.word	0x58024800
 80088e4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80088f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f8:	f002 0301 	and.w	r3, r2, #1
 80088fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008900:	2300      	movs	r3, #0
 8008902:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008906:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800890a:	460b      	mov	r3, r1
 800890c:	4313      	orrs	r3, r2
 800890e:	f000 8089 	beq.w	8008a24 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008912:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008916:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008918:	2b28      	cmp	r3, #40	; 0x28
 800891a:	d86b      	bhi.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800891c:	a201      	add	r2, pc, #4	; (adr r2, 8008924 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800891e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008922:	bf00      	nop
 8008924:	080089fd 	.word	0x080089fd
 8008928:	080089f5 	.word	0x080089f5
 800892c:	080089f5 	.word	0x080089f5
 8008930:	080089f5 	.word	0x080089f5
 8008934:	080089f5 	.word	0x080089f5
 8008938:	080089f5 	.word	0x080089f5
 800893c:	080089f5 	.word	0x080089f5
 8008940:	080089f5 	.word	0x080089f5
 8008944:	080089c9 	.word	0x080089c9
 8008948:	080089f5 	.word	0x080089f5
 800894c:	080089f5 	.word	0x080089f5
 8008950:	080089f5 	.word	0x080089f5
 8008954:	080089f5 	.word	0x080089f5
 8008958:	080089f5 	.word	0x080089f5
 800895c:	080089f5 	.word	0x080089f5
 8008960:	080089f5 	.word	0x080089f5
 8008964:	080089df 	.word	0x080089df
 8008968:	080089f5 	.word	0x080089f5
 800896c:	080089f5 	.word	0x080089f5
 8008970:	080089f5 	.word	0x080089f5
 8008974:	080089f5 	.word	0x080089f5
 8008978:	080089f5 	.word	0x080089f5
 800897c:	080089f5 	.word	0x080089f5
 8008980:	080089f5 	.word	0x080089f5
 8008984:	080089fd 	.word	0x080089fd
 8008988:	080089f5 	.word	0x080089f5
 800898c:	080089f5 	.word	0x080089f5
 8008990:	080089f5 	.word	0x080089f5
 8008994:	080089f5 	.word	0x080089f5
 8008998:	080089f5 	.word	0x080089f5
 800899c:	080089f5 	.word	0x080089f5
 80089a0:	080089f5 	.word	0x080089f5
 80089a4:	080089fd 	.word	0x080089fd
 80089a8:	080089f5 	.word	0x080089f5
 80089ac:	080089f5 	.word	0x080089f5
 80089b0:	080089f5 	.word	0x080089f5
 80089b4:	080089f5 	.word	0x080089f5
 80089b8:	080089f5 	.word	0x080089f5
 80089bc:	080089f5 	.word	0x080089f5
 80089c0:	080089f5 	.word	0x080089f5
 80089c4:	080089fd 	.word	0x080089fd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80089c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089cc:	3308      	adds	r3, #8
 80089ce:	2101      	movs	r1, #1
 80089d0:	4618      	mov	r0, r3
 80089d2:	f001 feeb 	bl	800a7ac <RCCEx_PLL2_Config>
 80089d6:	4603      	mov	r3, r0
 80089d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80089dc:	e00f      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80089de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089e2:	3328      	adds	r3, #40	; 0x28
 80089e4:	2101      	movs	r1, #1
 80089e6:	4618      	mov	r0, r3
 80089e8:	f001 ff92 	bl	800a910 <RCCEx_PLL3_Config>
 80089ec:	4603      	mov	r3, r0
 80089ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80089f2:	e004      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089f4:	2301      	movs	r3, #1
 80089f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80089fa:	e000      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80089fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d10a      	bne.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008a06:	4bbf      	ldr	r3, [pc, #764]	; (8008d04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a0a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8008a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a14:	4abb      	ldr	r2, [pc, #748]	; (8008d04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008a16:	430b      	orrs	r3, r1
 8008a18:	6553      	str	r3, [r2, #84]	; 0x54
 8008a1a:	e003      	b.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2c:	f002 0302 	and.w	r3, r2, #2
 8008a30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008a34:	2300      	movs	r3, #0
 8008a36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008a3a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8008a3e:	460b      	mov	r3, r1
 8008a40:	4313      	orrs	r3, r2
 8008a42:	d041      	beq.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a4a:	2b05      	cmp	r3, #5
 8008a4c:	d824      	bhi.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008a4e:	a201      	add	r2, pc, #4	; (adr r2, 8008a54 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a54:	08008aa1 	.word	0x08008aa1
 8008a58:	08008a6d 	.word	0x08008a6d
 8008a5c:	08008a83 	.word	0x08008a83
 8008a60:	08008aa1 	.word	0x08008aa1
 8008a64:	08008aa1 	.word	0x08008aa1
 8008a68:	08008aa1 	.word	0x08008aa1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a70:	3308      	adds	r3, #8
 8008a72:	2101      	movs	r1, #1
 8008a74:	4618      	mov	r0, r3
 8008a76:	f001 fe99 	bl	800a7ac <RCCEx_PLL2_Config>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008a80:	e00f      	b.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a86:	3328      	adds	r3, #40	; 0x28
 8008a88:	2101      	movs	r1, #1
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f001 ff40 	bl	800a910 <RCCEx_PLL3_Config>
 8008a90:	4603      	mov	r3, r0
 8008a92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008a96:	e004      	b.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008a9e:	e000      	b.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008aa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008aa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d10a      	bne.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008aaa:	4b96      	ldr	r3, [pc, #600]	; (8008d04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aae:	f023 0107 	bic.w	r1, r3, #7
 8008ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ab6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ab8:	4a92      	ldr	r2, [pc, #584]	; (8008d04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008aba:	430b      	orrs	r3, r1
 8008abc:	6553      	str	r3, [r2, #84]	; 0x54
 8008abe:	e003      	b.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ac0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ac4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad0:	f002 0304 	and.w	r3, r2, #4
 8008ad4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008ad8:	2300      	movs	r3, #0
 8008ada:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ade:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	d044      	beq.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008af0:	2b05      	cmp	r3, #5
 8008af2:	d825      	bhi.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008af4:	a201      	add	r2, pc, #4	; (adr r2, 8008afc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008afa:	bf00      	nop
 8008afc:	08008b49 	.word	0x08008b49
 8008b00:	08008b15 	.word	0x08008b15
 8008b04:	08008b2b 	.word	0x08008b2b
 8008b08:	08008b49 	.word	0x08008b49
 8008b0c:	08008b49 	.word	0x08008b49
 8008b10:	08008b49 	.word	0x08008b49
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b18:	3308      	adds	r3, #8
 8008b1a:	2101      	movs	r1, #1
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f001 fe45 	bl	800a7ac <RCCEx_PLL2_Config>
 8008b22:	4603      	mov	r3, r0
 8008b24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008b28:	e00f      	b.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b2e:	3328      	adds	r3, #40	; 0x28
 8008b30:	2101      	movs	r1, #1
 8008b32:	4618      	mov	r0, r3
 8008b34:	f001 feec 	bl	800a910 <RCCEx_PLL3_Config>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008b3e:	e004      	b.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b40:	2301      	movs	r3, #1
 8008b42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008b46:	e000      	b.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008b48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d10b      	bne.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008b52:	4b6c      	ldr	r3, [pc, #432]	; (8008d04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b56:	f023 0107 	bic.w	r1, r3, #7
 8008b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b62:	4a68      	ldr	r2, [pc, #416]	; (8008d04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008b64:	430b      	orrs	r3, r1
 8008b66:	6593      	str	r3, [r2, #88]	; 0x58
 8008b68:	e003      	b.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7a:	f002 0320 	and.w	r3, r2, #32
 8008b7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008b82:	2300      	movs	r3, #0
 8008b84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008b88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008b8c:	460b      	mov	r3, r1
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	d055      	beq.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b9e:	d033      	beq.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008ba0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ba4:	d82c      	bhi.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008baa:	d02f      	beq.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bb0:	d826      	bhi.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008bb2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008bb6:	d02b      	beq.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008bb8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008bbc:	d820      	bhi.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008bbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bc2:	d012      	beq.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008bc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bc8:	d81a      	bhi.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d022      	beq.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008bce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008bd2:	d115      	bne.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bd8:	3308      	adds	r3, #8
 8008bda:	2100      	movs	r1, #0
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f001 fde5 	bl	800a7ac <RCCEx_PLL2_Config>
 8008be2:	4603      	mov	r3, r0
 8008be4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008be8:	e015      	b.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bee:	3328      	adds	r3, #40	; 0x28
 8008bf0:	2102      	movs	r1, #2
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f001 fe8c 	bl	800a910 <RCCEx_PLL3_Config>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008bfe:	e00a      	b.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c00:	2301      	movs	r3, #1
 8008c02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008c06:	e006      	b.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008c08:	bf00      	nop
 8008c0a:	e004      	b.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008c0c:	bf00      	nop
 8008c0e:	e002      	b.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008c10:	bf00      	nop
 8008c12:	e000      	b.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008c14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d10b      	bne.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008c1e:	4b39      	ldr	r3, [pc, #228]	; (8008d04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c22:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c2e:	4a35      	ldr	r2, [pc, #212]	; (8008d04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008c30:	430b      	orrs	r3, r1
 8008c32:	6553      	str	r3, [r2, #84]	; 0x54
 8008c34:	e003      	b.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c46:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8008c4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008c4e:	2300      	movs	r3, #0
 8008c50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008c54:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8008c58:	460b      	mov	r3, r1
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	d058      	beq.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008c66:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008c6a:	d033      	beq.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008c6c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008c70:	d82c      	bhi.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c76:	d02f      	beq.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c7c:	d826      	bhi.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008c7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c82:	d02b      	beq.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008c84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c88:	d820      	bhi.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008c8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c8e:	d012      	beq.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008c90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c94:	d81a      	bhi.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d022      	beq.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c9e:	d115      	bne.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ca4:	3308      	adds	r3, #8
 8008ca6:	2100      	movs	r1, #0
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f001 fd7f 	bl	800a7ac <RCCEx_PLL2_Config>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008cb4:	e015      	b.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cba:	3328      	adds	r3, #40	; 0x28
 8008cbc:	2102      	movs	r1, #2
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f001 fe26 	bl	800a910 <RCCEx_PLL3_Config>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008cca:	e00a      	b.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008cd2:	e006      	b.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008cd4:	bf00      	nop
 8008cd6:	e004      	b.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008cd8:	bf00      	nop
 8008cda:	e002      	b.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008cdc:	bf00      	nop
 8008cde:	e000      	b.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d10e      	bne.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008cea:	4b06      	ldr	r3, [pc, #24]	; (8008d04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cee:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8008cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008cfa:	4a02      	ldr	r2, [pc, #8]	; (8008d04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008cfc:	430b      	orrs	r3, r1
 8008cfe:	6593      	str	r3, [r2, #88]	; 0x58
 8008d00:	e006      	b.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008d02:	bf00      	nop
 8008d04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d18:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008d1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008d20:	2300      	movs	r3, #0
 8008d22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008d26:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	d055      	beq.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008d38:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008d3c:	d033      	beq.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008d3e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008d42:	d82c      	bhi.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008d44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d48:	d02f      	beq.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008d4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d4e:	d826      	bhi.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008d50:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008d54:	d02b      	beq.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008d56:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008d5a:	d820      	bhi.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008d5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d60:	d012      	beq.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008d62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d66:	d81a      	bhi.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d022      	beq.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008d6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d70:	d115      	bne.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d76:	3308      	adds	r3, #8
 8008d78:	2100      	movs	r1, #0
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f001 fd16 	bl	800a7ac <RCCEx_PLL2_Config>
 8008d80:	4603      	mov	r3, r0
 8008d82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008d86:	e015      	b.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d8c:	3328      	adds	r3, #40	; 0x28
 8008d8e:	2102      	movs	r1, #2
 8008d90:	4618      	mov	r0, r3
 8008d92:	f001 fdbd 	bl	800a910 <RCCEx_PLL3_Config>
 8008d96:	4603      	mov	r3, r0
 8008d98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008d9c:	e00a      	b.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008da4:	e006      	b.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008da6:	bf00      	nop
 8008da8:	e004      	b.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008daa:	bf00      	nop
 8008dac:	e002      	b.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008dae:	bf00      	nop
 8008db0:	e000      	b.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008db2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008db4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d10b      	bne.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008dbc:	4ba1      	ldr	r3, [pc, #644]	; (8009044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dc0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8008dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008dcc:	4a9d      	ldr	r2, [pc, #628]	; (8009044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008dce:	430b      	orrs	r3, r1
 8008dd0:	6593      	str	r3, [r2, #88]	; 0x58
 8008dd2:	e003      	b.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008dd8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de4:	f002 0308 	and.w	r3, r2, #8
 8008de8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008dec:	2300      	movs	r3, #0
 8008dee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008df2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8008df6:	460b      	mov	r3, r1
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	d01e      	beq.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e08:	d10c      	bne.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e0e:	3328      	adds	r3, #40	; 0x28
 8008e10:	2102      	movs	r1, #2
 8008e12:	4618      	mov	r0, r3
 8008e14:	f001 fd7c 	bl	800a910 <RCCEx_PLL3_Config>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d002      	beq.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008e24:	4b87      	ldr	r3, [pc, #540]	; (8009044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e28:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e34:	4a83      	ldr	r2, [pc, #524]	; (8009044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e36:	430b      	orrs	r3, r1
 8008e38:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e42:	f002 0310 	and.w	r3, r2, #16
 8008e46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008e50:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8008e54:	460b      	mov	r3, r1
 8008e56:	4313      	orrs	r3, r2
 8008e58:	d01e      	beq.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e66:	d10c      	bne.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e6c:	3328      	adds	r3, #40	; 0x28
 8008e6e:	2102      	movs	r1, #2
 8008e70:	4618      	mov	r0, r3
 8008e72:	f001 fd4d 	bl	800a910 <RCCEx_PLL3_Config>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d002      	beq.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008e82:	4b70      	ldr	r3, [pc, #448]	; (8009044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e92:	4a6c      	ldr	r2, [pc, #432]	; (8009044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e94:	430b      	orrs	r3, r1
 8008e96:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8008ea4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008eae:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	d03e      	beq.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ebc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008ec0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ec4:	d022      	beq.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008ec6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008eca:	d81b      	bhi.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d003      	beq.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ed4:	d00b      	beq.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008ed6:	e015      	b.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008edc:	3308      	adds	r3, #8
 8008ede:	2100      	movs	r1, #0
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f001 fc63 	bl	800a7ac <RCCEx_PLL2_Config>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008eec:	e00f      	b.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ef2:	3328      	adds	r3, #40	; 0x28
 8008ef4:	2102      	movs	r1, #2
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f001 fd0a 	bl	800a910 <RCCEx_PLL3_Config>
 8008efc:	4603      	mov	r3, r0
 8008efe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008f02:	e004      	b.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f04:	2301      	movs	r3, #1
 8008f06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008f0a:	e000      	b.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008f0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d10b      	bne.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008f16:	4b4b      	ldr	r3, [pc, #300]	; (8009044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f1a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008f26:	4a47      	ldr	r2, [pc, #284]	; (8009044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f28:	430b      	orrs	r3, r1
 8008f2a:	6593      	str	r3, [r2, #88]	; 0x58
 8008f2c:	e003      	b.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f3e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8008f42:	67bb      	str	r3, [r7, #120]	; 0x78
 8008f44:	2300      	movs	r3, #0
 8008f46:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008f48:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	d03b      	beq.n	8008fca <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f5a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f5e:	d01f      	beq.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008f60:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f64:	d818      	bhi.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008f66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f6a:	d003      	beq.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008f6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f70:	d007      	beq.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008f72:	e011      	b.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f74:	4b33      	ldr	r3, [pc, #204]	; (8009044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f78:	4a32      	ldr	r2, [pc, #200]	; (8009044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008f80:	e00f      	b.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f86:	3328      	adds	r3, #40	; 0x28
 8008f88:	2101      	movs	r1, #1
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f001 fcc0 	bl	800a910 <RCCEx_PLL3_Config>
 8008f90:	4603      	mov	r3, r0
 8008f92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008f96:	e004      	b.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008f9e:	e000      	b.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008fa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d10b      	bne.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008faa:	4b26      	ldr	r3, [pc, #152]	; (8009044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fae:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fba:	4a22      	ldr	r2, [pc, #136]	; (8009044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008fbc:	430b      	orrs	r3, r1
 8008fbe:	6553      	str	r3, [r2, #84]	; 0x54
 8008fc0:	e003      	b.n	8008fca <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8008fd6:	673b      	str	r3, [r7, #112]	; 0x70
 8008fd8:	2300      	movs	r3, #0
 8008fda:	677b      	str	r3, [r7, #116]	; 0x74
 8008fdc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	d034      	beq.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d003      	beq.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ff4:	d007      	beq.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008ff6:	e011      	b.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ff8:	4b12      	ldr	r3, [pc, #72]	; (8009044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ffc:	4a11      	ldr	r2, [pc, #68]	; (8009044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ffe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009002:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009004:	e00e      	b.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800900a:	3308      	adds	r3, #8
 800900c:	2102      	movs	r1, #2
 800900e:	4618      	mov	r0, r3
 8009010:	f001 fbcc 	bl	800a7ac <RCCEx_PLL2_Config>
 8009014:	4603      	mov	r3, r0
 8009016:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800901a:	e003      	b.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800901c:	2301      	movs	r3, #1
 800901e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009022:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009024:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009028:	2b00      	cmp	r3, #0
 800902a:	d10d      	bne.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800902c:	4b05      	ldr	r3, [pc, #20]	; (8009044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800902e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009030:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009034:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800903a:	4a02      	ldr	r2, [pc, #8]	; (8009044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800903c:	430b      	orrs	r3, r1
 800903e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009040:	e006      	b.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009042:	bf00      	nop
 8009044:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009048:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800904c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009058:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800905c:	66bb      	str	r3, [r7, #104]	; 0x68
 800905e:	2300      	movs	r3, #0
 8009060:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009062:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009066:	460b      	mov	r3, r1
 8009068:	4313      	orrs	r3, r2
 800906a:	d00c      	beq.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800906c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009070:	3328      	adds	r3, #40	; 0x28
 8009072:	2102      	movs	r1, #2
 8009074:	4618      	mov	r0, r3
 8009076:	f001 fc4b 	bl	800a910 <RCCEx_PLL3_Config>
 800907a:	4603      	mov	r3, r0
 800907c:	2b00      	cmp	r3, #0
 800907e:	d002      	beq.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009080:	2301      	movs	r3, #1
 8009082:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009086:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800908a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800908e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009092:	663b      	str	r3, [r7, #96]	; 0x60
 8009094:	2300      	movs	r3, #0
 8009096:	667b      	str	r3, [r7, #100]	; 0x64
 8009098:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800909c:	460b      	mov	r3, r1
 800909e:	4313      	orrs	r3, r2
 80090a0:	d038      	beq.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80090a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80090ae:	d018      	beq.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80090b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80090b4:	d811      	bhi.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80090b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090ba:	d014      	beq.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80090bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090c0:	d80b      	bhi.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d011      	beq.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80090c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090ca:	d106      	bne.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090cc:	4bc3      	ldr	r3, [pc, #780]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80090ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d0:	4ac2      	ldr	r2, [pc, #776]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80090d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80090d8:	e008      	b.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090da:	2301      	movs	r3, #1
 80090dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80090e0:	e004      	b.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80090e2:	bf00      	nop
 80090e4:	e002      	b.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80090e6:	bf00      	nop
 80090e8:	e000      	b.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80090ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d10b      	bne.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80090f4:	4bb9      	ldr	r3, [pc, #740]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80090f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090f8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80090fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009100:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009104:	4ab5      	ldr	r2, [pc, #724]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009106:	430b      	orrs	r3, r1
 8009108:	6553      	str	r3, [r2, #84]	; 0x54
 800910a:	e003      	b.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800910c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009110:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009114:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009120:	65bb      	str	r3, [r7, #88]	; 0x58
 8009122:	2300      	movs	r3, #0
 8009124:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009126:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800912a:	460b      	mov	r3, r1
 800912c:	4313      	orrs	r3, r2
 800912e:	d009      	beq.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009130:	4baa      	ldr	r3, [pc, #680]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009134:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009138:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800913c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800913e:	4aa7      	ldr	r2, [pc, #668]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009140:	430b      	orrs	r3, r1
 8009142:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8009150:	653b      	str	r3, [r7, #80]	; 0x50
 8009152:	2300      	movs	r3, #0
 8009154:	657b      	str	r3, [r7, #84]	; 0x54
 8009156:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800915a:	460b      	mov	r3, r1
 800915c:	4313      	orrs	r3, r2
 800915e:	d00a      	beq.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009160:	4b9e      	ldr	r3, [pc, #632]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009162:	691b      	ldr	r3, [r3, #16]
 8009164:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8009168:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800916c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009170:	4a9a      	ldr	r2, [pc, #616]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009172:	430b      	orrs	r3, r1
 8009174:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800917a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009182:	64bb      	str	r3, [r7, #72]	; 0x48
 8009184:	2300      	movs	r3, #0
 8009186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009188:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800918c:	460b      	mov	r3, r1
 800918e:	4313      	orrs	r3, r2
 8009190:	d009      	beq.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009192:	4b92      	ldr	r3, [pc, #584]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009196:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800919a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800919e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091a0:	4a8e      	ldr	r2, [pc, #568]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80091a2:	430b      	orrs	r3, r1
 80091a4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80091a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ae:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80091b2:	643b      	str	r3, [r7, #64]	; 0x40
 80091b4:	2300      	movs	r3, #0
 80091b6:	647b      	str	r3, [r7, #68]	; 0x44
 80091b8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80091bc:	460b      	mov	r3, r1
 80091be:	4313      	orrs	r3, r2
 80091c0:	d00e      	beq.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80091c2:	4b86      	ldr	r3, [pc, #536]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80091c4:	691b      	ldr	r3, [r3, #16]
 80091c6:	4a85      	ldr	r2, [pc, #532]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80091c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80091cc:	6113      	str	r3, [r2, #16]
 80091ce:	4b83      	ldr	r3, [pc, #524]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80091d0:	6919      	ldr	r1, [r3, #16]
 80091d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80091da:	4a80      	ldr	r2, [pc, #512]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80091dc:	430b      	orrs	r3, r1
 80091de:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80091e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80091ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80091ee:	2300      	movs	r3, #0
 80091f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091f2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80091f6:	460b      	mov	r3, r1
 80091f8:	4313      	orrs	r3, r2
 80091fa:	d009      	beq.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80091fc:	4b77      	ldr	r3, [pc, #476]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80091fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009200:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800920a:	4a74      	ldr	r2, [pc, #464]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800920c:	430b      	orrs	r3, r1
 800920e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009218:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800921c:	633b      	str	r3, [r7, #48]	; 0x30
 800921e:	2300      	movs	r3, #0
 8009220:	637b      	str	r3, [r7, #52]	; 0x34
 8009222:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009226:	460b      	mov	r3, r1
 8009228:	4313      	orrs	r3, r2
 800922a:	d00a      	beq.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800922c:	4b6b      	ldr	r3, [pc, #428]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800922e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009230:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8009234:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009238:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800923c:	4a67      	ldr	r2, [pc, #412]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800923e:	430b      	orrs	r3, r1
 8009240:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924a:	2100      	movs	r1, #0
 800924c:	62b9      	str	r1, [r7, #40]	; 0x28
 800924e:	f003 0301 	and.w	r3, r3, #1
 8009252:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009254:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009258:	460b      	mov	r3, r1
 800925a:	4313      	orrs	r3, r2
 800925c:	d011      	beq.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800925e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009262:	3308      	adds	r3, #8
 8009264:	2100      	movs	r1, #0
 8009266:	4618      	mov	r0, r3
 8009268:	f001 faa0 	bl	800a7ac <RCCEx_PLL2_Config>
 800926c:	4603      	mov	r3, r0
 800926e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009272:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009276:	2b00      	cmp	r3, #0
 8009278:	d003      	beq.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800927a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800927e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009282:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928a:	2100      	movs	r1, #0
 800928c:	6239      	str	r1, [r7, #32]
 800928e:	f003 0302 	and.w	r3, r3, #2
 8009292:	627b      	str	r3, [r7, #36]	; 0x24
 8009294:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009298:	460b      	mov	r3, r1
 800929a:	4313      	orrs	r3, r2
 800929c:	d011      	beq.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800929e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092a2:	3308      	adds	r3, #8
 80092a4:	2101      	movs	r1, #1
 80092a6:	4618      	mov	r0, r3
 80092a8:	f001 fa80 	bl	800a7ac <RCCEx_PLL2_Config>
 80092ac:	4603      	mov	r3, r0
 80092ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80092b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d003      	beq.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80092c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ca:	2100      	movs	r1, #0
 80092cc:	61b9      	str	r1, [r7, #24]
 80092ce:	f003 0304 	and.w	r3, r3, #4
 80092d2:	61fb      	str	r3, [r7, #28]
 80092d4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80092d8:	460b      	mov	r3, r1
 80092da:	4313      	orrs	r3, r2
 80092dc:	d011      	beq.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80092de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092e2:	3308      	adds	r3, #8
 80092e4:	2102      	movs	r1, #2
 80092e6:	4618      	mov	r0, r3
 80092e8:	f001 fa60 	bl	800a7ac <RCCEx_PLL2_Config>
 80092ec:	4603      	mov	r3, r0
 80092ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80092f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d003      	beq.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009302:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930a:	2100      	movs	r1, #0
 800930c:	6139      	str	r1, [r7, #16]
 800930e:	f003 0308 	and.w	r3, r3, #8
 8009312:	617b      	str	r3, [r7, #20]
 8009314:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009318:	460b      	mov	r3, r1
 800931a:	4313      	orrs	r3, r2
 800931c:	d011      	beq.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800931e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009322:	3328      	adds	r3, #40	; 0x28
 8009324:	2100      	movs	r1, #0
 8009326:	4618      	mov	r0, r3
 8009328:	f001 faf2 	bl	800a910 <RCCEx_PLL3_Config>
 800932c:	4603      	mov	r3, r0
 800932e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8009332:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009336:	2b00      	cmp	r3, #0
 8009338:	d003      	beq.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800933a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800933e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009342:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934a:	2100      	movs	r1, #0
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	f003 0310 	and.w	r3, r3, #16
 8009352:	60fb      	str	r3, [r7, #12]
 8009354:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009358:	460b      	mov	r3, r1
 800935a:	4313      	orrs	r3, r2
 800935c:	d011      	beq.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800935e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009362:	3328      	adds	r3, #40	; 0x28
 8009364:	2101      	movs	r1, #1
 8009366:	4618      	mov	r0, r3
 8009368:	f001 fad2 	bl	800a910 <RCCEx_PLL3_Config>
 800936c:	4603      	mov	r3, r0
 800936e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009372:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009376:	2b00      	cmp	r3, #0
 8009378:	d003      	beq.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800937a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800937e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938a:	2100      	movs	r1, #0
 800938c:	6039      	str	r1, [r7, #0]
 800938e:	f003 0320 	and.w	r3, r3, #32
 8009392:	607b      	str	r3, [r7, #4]
 8009394:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009398:	460b      	mov	r3, r1
 800939a:	4313      	orrs	r3, r2
 800939c:	d011      	beq.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800939e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093a2:	3328      	adds	r3, #40	; 0x28
 80093a4:	2102      	movs	r1, #2
 80093a6:	4618      	mov	r0, r3
 80093a8:	f001 fab2 	bl	800a910 <RCCEx_PLL3_Config>
 80093ac:	4603      	mov	r3, r0
 80093ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80093b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d003      	beq.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80093c2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d101      	bne.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80093ca:	2300      	movs	r3, #0
 80093cc:	e000      	b.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80093d6:	46bd      	mov	sp, r7
 80093d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80093dc:	58024400 	.word	0x58024400

080093e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b090      	sub	sp, #64	; 0x40
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80093ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093ee:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80093f2:	430b      	orrs	r3, r1
 80093f4:	f040 8094 	bne.w	8009520 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80093f8:	4b9e      	ldr	r3, [pc, #632]	; (8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80093fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093fc:	f003 0307 	and.w	r3, r3, #7
 8009400:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009404:	2b04      	cmp	r3, #4
 8009406:	f200 8087 	bhi.w	8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800940a:	a201      	add	r2, pc, #4	; (adr r2, 8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800940c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009410:	08009425 	.word	0x08009425
 8009414:	0800944d 	.word	0x0800944d
 8009418:	08009475 	.word	0x08009475
 800941c:	08009511 	.word	0x08009511
 8009420:	0800949d 	.word	0x0800949d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009424:	4b93      	ldr	r3, [pc, #588]	; (8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800942c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009430:	d108      	bne.n	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009436:	4618      	mov	r0, r3
 8009438:	f001 f810 	bl	800a45c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800943c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009440:	f000 bd45 	b.w	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009444:	2300      	movs	r3, #0
 8009446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009448:	f000 bd41 	b.w	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800944c:	4b89      	ldr	r3, [pc, #548]	; (8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009454:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009458:	d108      	bne.n	800946c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800945a:	f107 0318 	add.w	r3, r7, #24
 800945e:	4618      	mov	r0, r3
 8009460:	f000 fd54 	bl	8009f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009464:	69bb      	ldr	r3, [r7, #24]
 8009466:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009468:	f000 bd31 	b.w	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800946c:	2300      	movs	r3, #0
 800946e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009470:	f000 bd2d 	b.w	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009474:	4b7f      	ldr	r3, [pc, #508]	; (8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800947c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009480:	d108      	bne.n	8009494 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009482:	f107 030c 	add.w	r3, r7, #12
 8009486:	4618      	mov	r0, r3
 8009488:	f000 fe94 	bl	800a1b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009490:	f000 bd1d 	b.w	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009494:	2300      	movs	r3, #0
 8009496:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009498:	f000 bd19 	b.w	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800949c:	4b75      	ldr	r3, [pc, #468]	; (8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800949e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80094a4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094a6:	4b73      	ldr	r3, [pc, #460]	; (8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f003 0304 	and.w	r3, r3, #4
 80094ae:	2b04      	cmp	r3, #4
 80094b0:	d10c      	bne.n	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80094b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d109      	bne.n	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80094b8:	4b6e      	ldr	r3, [pc, #440]	; (8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	08db      	lsrs	r3, r3, #3
 80094be:	f003 0303 	and.w	r3, r3, #3
 80094c2:	4a6d      	ldr	r2, [pc, #436]	; (8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80094c4:	fa22 f303 	lsr.w	r3, r2, r3
 80094c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094ca:	e01f      	b.n	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80094cc:	4b69      	ldr	r3, [pc, #420]	; (8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094d8:	d106      	bne.n	80094e8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80094da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094e0:	d102      	bne.n	80094e8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80094e2:	4b66      	ldr	r3, [pc, #408]	; (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80094e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094e6:	e011      	b.n	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80094e8:	4b62      	ldr	r3, [pc, #392]	; (8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094f4:	d106      	bne.n	8009504 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80094f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094fc:	d102      	bne.n	8009504 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80094fe:	4b60      	ldr	r3, [pc, #384]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009500:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009502:	e003      	b.n	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009504:	2300      	movs	r3, #0
 8009506:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009508:	f000 bce1 	b.w	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800950c:	f000 bcdf 	b.w	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009510:	4b5c      	ldr	r3, [pc, #368]	; (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009512:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009514:	f000 bcdb 	b.w	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009518:	2300      	movs	r3, #0
 800951a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800951c:	f000 bcd7 	b.w	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009520:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009524:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8009528:	430b      	orrs	r3, r1
 800952a:	f040 80ad 	bne.w	8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800952e:	4b51      	ldr	r3, [pc, #324]	; (8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009532:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8009536:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800953e:	d056      	beq.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8009540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009546:	f200 8090 	bhi.w	800966a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800954a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800954c:	2bc0      	cmp	r3, #192	; 0xc0
 800954e:	f000 8088 	beq.w	8009662 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8009552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009554:	2bc0      	cmp	r3, #192	; 0xc0
 8009556:	f200 8088 	bhi.w	800966a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800955a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800955c:	2b80      	cmp	r3, #128	; 0x80
 800955e:	d032      	beq.n	80095c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009562:	2b80      	cmp	r3, #128	; 0x80
 8009564:	f200 8081 	bhi.w	800966a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800956a:	2b00      	cmp	r3, #0
 800956c:	d003      	beq.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800956e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009570:	2b40      	cmp	r3, #64	; 0x40
 8009572:	d014      	beq.n	800959e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009574:	e079      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009576:	4b3f      	ldr	r3, [pc, #252]	; (8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800957e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009582:	d108      	bne.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009588:	4618      	mov	r0, r3
 800958a:	f000 ff67 	bl	800a45c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800958e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009590:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009592:	f000 bc9c 	b.w	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009596:	2300      	movs	r3, #0
 8009598:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800959a:	f000 bc98 	b.w	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800959e:	4b35      	ldr	r3, [pc, #212]	; (8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095aa:	d108      	bne.n	80095be <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095ac:	f107 0318 	add.w	r3, r7, #24
 80095b0:	4618      	mov	r0, r3
 80095b2:	f000 fcab 	bl	8009f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80095b6:	69bb      	ldr	r3, [r7, #24]
 80095b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095ba:	f000 bc88 	b.w	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095be:	2300      	movs	r3, #0
 80095c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095c2:	f000 bc84 	b.w	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80095c6:	4b2b      	ldr	r3, [pc, #172]	; (8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095d2:	d108      	bne.n	80095e6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095d4:	f107 030c 	add.w	r3, r7, #12
 80095d8:	4618      	mov	r0, r3
 80095da:	f000 fdeb 	bl	800a1b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095e2:	f000 bc74 	b.w	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095e6:	2300      	movs	r3, #0
 80095e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095ea:	f000 bc70 	b.w	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80095ee:	4b21      	ldr	r3, [pc, #132]	; (8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80095f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80095f6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80095f8:	4b1e      	ldr	r3, [pc, #120]	; (8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f003 0304 	and.w	r3, r3, #4
 8009600:	2b04      	cmp	r3, #4
 8009602:	d10c      	bne.n	800961e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8009604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009606:	2b00      	cmp	r3, #0
 8009608:	d109      	bne.n	800961e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800960a:	4b1a      	ldr	r3, [pc, #104]	; (8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	08db      	lsrs	r3, r3, #3
 8009610:	f003 0303 	and.w	r3, r3, #3
 8009614:	4a18      	ldr	r2, [pc, #96]	; (8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009616:	fa22 f303 	lsr.w	r3, r2, r3
 800961a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800961c:	e01f      	b.n	800965e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800961e:	4b15      	ldr	r3, [pc, #84]	; (8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800962a:	d106      	bne.n	800963a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800962c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800962e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009632:	d102      	bne.n	800963a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009634:	4b11      	ldr	r3, [pc, #68]	; (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009636:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009638:	e011      	b.n	800965e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800963a:	4b0e      	ldr	r3, [pc, #56]	; (8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009642:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009646:	d106      	bne.n	8009656 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800964a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800964e:	d102      	bne.n	8009656 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009650:	4b0b      	ldr	r3, [pc, #44]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009652:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009654:	e003      	b.n	800965e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009656:	2300      	movs	r3, #0
 8009658:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800965a:	f000 bc38 	b.w	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800965e:	f000 bc36 	b.w	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009662:	4b08      	ldr	r3, [pc, #32]	; (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009664:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009666:	f000 bc32 	b.w	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800966a:	2300      	movs	r3, #0
 800966c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800966e:	f000 bc2e 	b.w	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009672:	bf00      	nop
 8009674:	58024400 	.word	0x58024400
 8009678:	03d09000 	.word	0x03d09000
 800967c:	003d0900 	.word	0x003d0900
 8009680:	00989680 	.word	0x00989680
 8009684:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009688:	e9d7 2300 	ldrd	r2, r3, [r7]
 800968c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8009690:	430b      	orrs	r3, r1
 8009692:	f040 809c 	bne.w	80097ce <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009696:	4b9e      	ldr	r3, [pc, #632]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800969a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800969e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80096a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80096a6:	d054      	beq.n	8009752 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80096a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80096ae:	f200 808b 	bhi.w	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80096b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80096b8:	f000 8083 	beq.w	80097c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80096bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096be:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80096c2:	f200 8081 	bhi.w	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80096c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80096cc:	d02f      	beq.n	800972e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80096ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80096d4:	d878      	bhi.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80096d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d004      	beq.n	80096e6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80096dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096e2:	d012      	beq.n	800970a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80096e4:	e070      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80096e6:	4b8a      	ldr	r3, [pc, #552]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80096f2:	d107      	bne.n	8009704 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80096f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096f8:	4618      	mov	r0, r3
 80096fa:	f000 feaf 	bl	800a45c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80096fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009700:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009702:	e3e4      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009704:	2300      	movs	r3, #0
 8009706:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009708:	e3e1      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800970a:	4b81      	ldr	r3, [pc, #516]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009712:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009716:	d107      	bne.n	8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009718:	f107 0318 	add.w	r3, r7, #24
 800971c:	4618      	mov	r0, r3
 800971e:	f000 fbf5 	bl	8009f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009722:	69bb      	ldr	r3, [r7, #24]
 8009724:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009726:	e3d2      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009728:	2300      	movs	r3, #0
 800972a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800972c:	e3cf      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800972e:	4b78      	ldr	r3, [pc, #480]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009736:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800973a:	d107      	bne.n	800974c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800973c:	f107 030c 	add.w	r3, r7, #12
 8009740:	4618      	mov	r0, r3
 8009742:	f000 fd37 	bl	800a1b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800974a:	e3c0      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800974c:	2300      	movs	r3, #0
 800974e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009750:	e3bd      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009752:	4b6f      	ldr	r3, [pc, #444]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009756:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800975a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800975c:	4b6c      	ldr	r3, [pc, #432]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f003 0304 	and.w	r3, r3, #4
 8009764:	2b04      	cmp	r3, #4
 8009766:	d10c      	bne.n	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800976a:	2b00      	cmp	r3, #0
 800976c:	d109      	bne.n	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800976e:	4b68      	ldr	r3, [pc, #416]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	08db      	lsrs	r3, r3, #3
 8009774:	f003 0303 	and.w	r3, r3, #3
 8009778:	4a66      	ldr	r2, [pc, #408]	; (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800977a:	fa22 f303 	lsr.w	r3, r2, r3
 800977e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009780:	e01e      	b.n	80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009782:	4b63      	ldr	r3, [pc, #396]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800978a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800978e:	d106      	bne.n	800979e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009792:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009796:	d102      	bne.n	800979e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009798:	4b5f      	ldr	r3, [pc, #380]	; (8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800979a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800979c:	e010      	b.n	80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800979e:	4b5c      	ldr	r3, [pc, #368]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097aa:	d106      	bne.n	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80097ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097b2:	d102      	bne.n	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80097b4:	4b59      	ldr	r3, [pc, #356]	; (800991c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80097b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097b8:	e002      	b.n	80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80097ba:	2300      	movs	r3, #0
 80097bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80097be:	e386      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80097c0:	e385      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80097c2:	4b57      	ldr	r3, [pc, #348]	; (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80097c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097c6:	e382      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80097c8:	2300      	movs	r3, #0
 80097ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097cc:	e37f      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80097ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097d2:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80097d6:	430b      	orrs	r3, r1
 80097d8:	f040 80a7 	bne.w	800992a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80097dc:	4b4c      	ldr	r3, [pc, #304]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80097de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097e0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80097e4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80097e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80097ec:	d055      	beq.n	800989a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80097ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80097f4:	f200 8096 	bhi.w	8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80097f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80097fe:	f000 8084 	beq.w	800990a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009804:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009808:	f200 808c 	bhi.w	8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800980c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800980e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009812:	d030      	beq.n	8009876 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8009814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009816:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800981a:	f200 8083 	bhi.w	8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800981e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009820:	2b00      	cmp	r3, #0
 8009822:	d004      	beq.n	800982e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8009824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009826:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800982a:	d012      	beq.n	8009852 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800982c:	e07a      	b.n	8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800982e:	4b38      	ldr	r3, [pc, #224]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009836:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800983a:	d107      	bne.n	800984c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800983c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009840:	4618      	mov	r0, r3
 8009842:	f000 fe0b 	bl	800a45c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009848:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800984a:	e340      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800984c:	2300      	movs	r3, #0
 800984e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009850:	e33d      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009852:	4b2f      	ldr	r3, [pc, #188]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800985a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800985e:	d107      	bne.n	8009870 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009860:	f107 0318 	add.w	r3, r7, #24
 8009864:	4618      	mov	r0, r3
 8009866:	f000 fb51 	bl	8009f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800986a:	69bb      	ldr	r3, [r7, #24]
 800986c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800986e:	e32e      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009870:	2300      	movs	r3, #0
 8009872:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009874:	e32b      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009876:	4b26      	ldr	r3, [pc, #152]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800987e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009882:	d107      	bne.n	8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009884:	f107 030c 	add.w	r3, r7, #12
 8009888:	4618      	mov	r0, r3
 800988a:	f000 fc93 	bl	800a1b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009892:	e31c      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009894:	2300      	movs	r3, #0
 8009896:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009898:	e319      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800989a:	4b1d      	ldr	r3, [pc, #116]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800989c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800989e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80098a2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80098a4:	4b1a      	ldr	r3, [pc, #104]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f003 0304 	and.w	r3, r3, #4
 80098ac:	2b04      	cmp	r3, #4
 80098ae:	d10c      	bne.n	80098ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80098b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d109      	bne.n	80098ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098b6:	4b16      	ldr	r3, [pc, #88]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	08db      	lsrs	r3, r3, #3
 80098bc:	f003 0303 	and.w	r3, r3, #3
 80098c0:	4a14      	ldr	r2, [pc, #80]	; (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80098c2:	fa22 f303 	lsr.w	r3, r2, r3
 80098c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098c8:	e01e      	b.n	8009908 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80098ca:	4b11      	ldr	r3, [pc, #68]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098d6:	d106      	bne.n	80098e6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80098d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098de:	d102      	bne.n	80098e6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80098e0:	4b0d      	ldr	r3, [pc, #52]	; (8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80098e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098e4:	e010      	b.n	8009908 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80098e6:	4b0a      	ldr	r3, [pc, #40]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098f2:	d106      	bne.n	8009902 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80098f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098fa:	d102      	bne.n	8009902 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80098fc:	4b07      	ldr	r3, [pc, #28]	; (800991c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80098fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009900:	e002      	b.n	8009908 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009902:	2300      	movs	r3, #0
 8009904:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009906:	e2e2      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009908:	e2e1      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800990a:	4b05      	ldr	r3, [pc, #20]	; (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800990c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800990e:	e2de      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009910:	58024400 	.word	0x58024400
 8009914:	03d09000 	.word	0x03d09000
 8009918:	003d0900 	.word	0x003d0900
 800991c:	00989680 	.word	0x00989680
 8009920:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8009924:	2300      	movs	r3, #0
 8009926:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009928:	e2d1      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800992a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800992e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8009932:	430b      	orrs	r3, r1
 8009934:	f040 809c 	bne.w	8009a70 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009938:	4b93      	ldr	r3, [pc, #588]	; (8009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800993a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800993c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009940:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009944:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009948:	d054      	beq.n	80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800994a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800994c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009950:	f200 808b 	bhi.w	8009a6a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009956:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800995a:	f000 8083 	beq.w	8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800995e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009960:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009964:	f200 8081 	bhi.w	8009a6a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800996a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800996e:	d02f      	beq.n	80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009976:	d878      	bhi.n	8009a6a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800997a:	2b00      	cmp	r3, #0
 800997c:	d004      	beq.n	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800997e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009984:	d012      	beq.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8009986:	e070      	b.n	8009a6a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009988:	4b7f      	ldr	r3, [pc, #508]	; (8009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009990:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009994:	d107      	bne.n	80099a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800999a:	4618      	mov	r0, r3
 800999c:	f000 fd5e 	bl	800a45c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80099a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099a4:	e293      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099a6:	2300      	movs	r3, #0
 80099a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099aa:	e290      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80099ac:	4b76      	ldr	r3, [pc, #472]	; (8009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80099b8:	d107      	bne.n	80099ca <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099ba:	f107 0318 	add.w	r3, r7, #24
 80099be:	4618      	mov	r0, r3
 80099c0:	f000 faa4 	bl	8009f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80099c4:	69bb      	ldr	r3, [r7, #24]
 80099c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099c8:	e281      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099ca:	2300      	movs	r3, #0
 80099cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099ce:	e27e      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80099d0:	4b6d      	ldr	r3, [pc, #436]	; (8009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80099d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099dc:	d107      	bne.n	80099ee <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099de:	f107 030c 	add.w	r3, r7, #12
 80099e2:	4618      	mov	r0, r3
 80099e4:	f000 fbe6 	bl	800a1b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099ec:	e26f      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099ee:	2300      	movs	r3, #0
 80099f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099f2:	e26c      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80099f4:	4b64      	ldr	r3, [pc, #400]	; (8009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80099f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80099fc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80099fe:	4b62      	ldr	r3, [pc, #392]	; (8009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f003 0304 	and.w	r3, r3, #4
 8009a06:	2b04      	cmp	r3, #4
 8009a08:	d10c      	bne.n	8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8009a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d109      	bne.n	8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a10:	4b5d      	ldr	r3, [pc, #372]	; (8009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	08db      	lsrs	r3, r3, #3
 8009a16:	f003 0303 	and.w	r3, r3, #3
 8009a1a:	4a5c      	ldr	r2, [pc, #368]	; (8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8009a20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a22:	e01e      	b.n	8009a62 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a24:	4b58      	ldr	r3, [pc, #352]	; (8009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a30:	d106      	bne.n	8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8009a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a38:	d102      	bne.n	8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009a3a:	4b55      	ldr	r3, [pc, #340]	; (8009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a3e:	e010      	b.n	8009a62 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a40:	4b51      	ldr	r3, [pc, #324]	; (8009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a4c:	d106      	bne.n	8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8009a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a54:	d102      	bne.n	8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009a56:	4b4f      	ldr	r3, [pc, #316]	; (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009a58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a5a:	e002      	b.n	8009a62 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009a60:	e235      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009a62:	e234      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009a64:	4b4c      	ldr	r3, [pc, #304]	; (8009b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009a66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a68:	e231      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a6e:	e22e      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009a70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a74:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8009a78:	430b      	orrs	r3, r1
 8009a7a:	f040 808f 	bne.w	8009b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009a7e:	4b42      	ldr	r3, [pc, #264]	; (8009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a82:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8009a86:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8009a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009a8e:	d06b      	beq.n	8009b68 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009a96:	d874      	bhi.n	8009b82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009a9e:	d056      	beq.n	8009b4e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009aa6:	d86c      	bhi.n	8009b82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aaa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009aae:	d03b      	beq.n	8009b28 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009ab6:	d864      	bhi.n	8009b82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009abe:	d021      	beq.n	8009b04 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ac6:	d85c      	bhi.n	8009b82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d004      	beq.n	8009ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ad4:	d004      	beq.n	8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8009ad6:	e054      	b.n	8009b82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009ad8:	f7fe fa30 	bl	8007f3c <HAL_RCC_GetPCLK1Freq>
 8009adc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009ade:	e1f6      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ae0:	4b29      	ldr	r3, [pc, #164]	; (8009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ae8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009aec:	d107      	bne.n	8009afe <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009aee:	f107 0318 	add.w	r3, r7, #24
 8009af2:	4618      	mov	r0, r3
 8009af4:	f000 fa0a 	bl	8009f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009af8:	69fb      	ldr	r3, [r7, #28]
 8009afa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009afc:	e1e7      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009afe:	2300      	movs	r3, #0
 8009b00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b02:	e1e4      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b04:	4b20      	ldr	r3, [pc, #128]	; (8009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b10:	d107      	bne.n	8009b22 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b12:	f107 030c 	add.w	r3, r7, #12
 8009b16:	4618      	mov	r0, r3
 8009b18:	f000 fb4c 	bl	800a1b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b20:	e1d5      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b22:	2300      	movs	r3, #0
 8009b24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b26:	e1d2      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009b28:	4b17      	ldr	r3, [pc, #92]	; (8009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f003 0304 	and.w	r3, r3, #4
 8009b30:	2b04      	cmp	r3, #4
 8009b32:	d109      	bne.n	8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b34:	4b14      	ldr	r3, [pc, #80]	; (8009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	08db      	lsrs	r3, r3, #3
 8009b3a:	f003 0303 	and.w	r3, r3, #3
 8009b3e:	4a13      	ldr	r2, [pc, #76]	; (8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009b40:	fa22 f303 	lsr.w	r3, r2, r3
 8009b44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b46:	e1c2      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b4c:	e1bf      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009b4e:	4b0e      	ldr	r3, [pc, #56]	; (8009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b5a:	d102      	bne.n	8009b62 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8009b5c:	4b0c      	ldr	r3, [pc, #48]	; (8009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b60:	e1b5      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b62:	2300      	movs	r3, #0
 8009b64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b66:	e1b2      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009b68:	4b07      	ldr	r3, [pc, #28]	; (8009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b74:	d102      	bne.n	8009b7c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8009b76:	4b07      	ldr	r3, [pc, #28]	; (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009b78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b7a:	e1a8      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b80:	e1a5      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009b82:	2300      	movs	r3, #0
 8009b84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b86:	e1a2      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009b88:	58024400 	.word	0x58024400
 8009b8c:	03d09000 	.word	0x03d09000
 8009b90:	003d0900 	.word	0x003d0900
 8009b94:	00989680 	.word	0x00989680
 8009b98:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009b9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ba0:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8009ba4:	430b      	orrs	r3, r1
 8009ba6:	d173      	bne.n	8009c90 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009ba8:	4b9c      	ldr	r3, [pc, #624]	; (8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009bb0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009bb8:	d02f      	beq.n	8009c1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009bc0:	d863      	bhi.n	8009c8a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8009bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d004      	beq.n	8009bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bce:	d012      	beq.n	8009bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009bd0:	e05b      	b.n	8009c8a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009bd2:	4b92      	ldr	r3, [pc, #584]	; (8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009bda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009bde:	d107      	bne.n	8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009be0:	f107 0318 	add.w	r3, r7, #24
 8009be4:	4618      	mov	r0, r3
 8009be6:	f000 f991 	bl	8009f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009bea:	69bb      	ldr	r3, [r7, #24]
 8009bec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bee:	e16e      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bf4:	e16b      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009bf6:	4b89      	ldr	r3, [pc, #548]	; (8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c02:	d107      	bne.n	8009c14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c04:	f107 030c 	add.w	r3, r7, #12
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f000 fad3 	bl	800a1b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c12:	e15c      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c14:	2300      	movs	r3, #0
 8009c16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c18:	e159      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009c1a:	4b80      	ldr	r3, [pc, #512]	; (8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009c22:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c24:	4b7d      	ldr	r3, [pc, #500]	; (8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f003 0304 	and.w	r3, r3, #4
 8009c2c:	2b04      	cmp	r3, #4
 8009c2e:	d10c      	bne.n	8009c4a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d109      	bne.n	8009c4a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c36:	4b79      	ldr	r3, [pc, #484]	; (8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	08db      	lsrs	r3, r3, #3
 8009c3c:	f003 0303 	and.w	r3, r3, #3
 8009c40:	4a77      	ldr	r2, [pc, #476]	; (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009c42:	fa22 f303 	lsr.w	r3, r2, r3
 8009c46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c48:	e01e      	b.n	8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009c4a:	4b74      	ldr	r3, [pc, #464]	; (8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c56:	d106      	bne.n	8009c66 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c5e:	d102      	bne.n	8009c66 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009c60:	4b70      	ldr	r3, [pc, #448]	; (8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009c62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c64:	e010      	b.n	8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009c66:	4b6d      	ldr	r3, [pc, #436]	; (8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c72:	d106      	bne.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8009c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c7a:	d102      	bne.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009c7c:	4b6a      	ldr	r3, [pc, #424]	; (8009e28 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c80:	e002      	b.n	8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009c82:	2300      	movs	r3, #0
 8009c84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009c86:	e122      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009c88:	e121      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c8e:	e11e      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009c90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c94:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8009c98:	430b      	orrs	r3, r1
 8009c9a:	d133      	bne.n	8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009c9c:	4b5f      	ldr	r3, [pc, #380]	; (8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ca4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d004      	beq.n	8009cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cb2:	d012      	beq.n	8009cda <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009cb4:	e023      	b.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009cb6:	4b59      	ldr	r3, [pc, #356]	; (8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009cc2:	d107      	bne.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f000 fbc7 	bl	800a45c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cd2:	e0fc      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009cd8:	e0f9      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009cda:	4b50      	ldr	r3, [pc, #320]	; (8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ce2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ce6:	d107      	bne.n	8009cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ce8:	f107 0318 	add.w	r3, r7, #24
 8009cec:	4618      	mov	r0, r3
 8009cee:	f000 f90d 	bl	8009f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009cf2:	6a3b      	ldr	r3, [r7, #32]
 8009cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cf6:	e0ea      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009cfc:	e0e7      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d02:	e0e4      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009d04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d08:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8009d0c:	430b      	orrs	r3, r1
 8009d0e:	f040 808d 	bne.w	8009e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009d12:	4b42      	ldr	r3, [pc, #264]	; (8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d16:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009d1a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d22:	d06b      	beq.n	8009dfc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d2a:	d874      	bhi.n	8009e16 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d32:	d056      	beq.n	8009de2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d3a:	d86c      	bhi.n	8009e16 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d3e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009d42:	d03b      	beq.n	8009dbc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8009d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009d4a:	d864      	bhi.n	8009e16 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d52:	d021      	beq.n	8009d98 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d5a:	d85c      	bhi.n	8009e16 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d004      	beq.n	8009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8009d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d68:	d004      	beq.n	8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8009d6a:	e054      	b.n	8009e16 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009d6c:	f000 f8b8 	bl	8009ee0 <HAL_RCCEx_GetD3PCLK1Freq>
 8009d70:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009d72:	e0ac      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d74:	4b29      	ldr	r3, [pc, #164]	; (8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d80:	d107      	bne.n	8009d92 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d82:	f107 0318 	add.w	r3, r7, #24
 8009d86:	4618      	mov	r0, r3
 8009d88:	f000 f8c0 	bl	8009f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d90:	e09d      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d92:	2300      	movs	r3, #0
 8009d94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d96:	e09a      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009d98:	4b20      	ldr	r3, [pc, #128]	; (8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009da0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009da4:	d107      	bne.n	8009db6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009da6:	f107 030c 	add.w	r3, r7, #12
 8009daa:	4618      	mov	r0, r3
 8009dac:	f000 fa02 	bl	800a1b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009db4:	e08b      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009db6:	2300      	movs	r3, #0
 8009db8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dba:	e088      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009dbc:	4b17      	ldr	r3, [pc, #92]	; (8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f003 0304 	and.w	r3, r3, #4
 8009dc4:	2b04      	cmp	r3, #4
 8009dc6:	d109      	bne.n	8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009dc8:	4b14      	ldr	r3, [pc, #80]	; (8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	08db      	lsrs	r3, r3, #3
 8009dce:	f003 0303 	and.w	r3, r3, #3
 8009dd2:	4a13      	ldr	r2, [pc, #76]	; (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8009dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dda:	e078      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009de0:	e075      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009de2:	4b0e      	ldr	r3, [pc, #56]	; (8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dee:	d102      	bne.n	8009df6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009df0:	4b0c      	ldr	r3, [pc, #48]	; (8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009df2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009df4:	e06b      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009df6:	2300      	movs	r3, #0
 8009df8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dfa:	e068      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009dfc:	4b07      	ldr	r3, [pc, #28]	; (8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e08:	d102      	bne.n	8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8009e0a:	4b07      	ldr	r3, [pc, #28]	; (8009e28 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e0e:	e05e      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e10:	2300      	movs	r3, #0
 8009e12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e14:	e05b      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009e16:	2300      	movs	r3, #0
 8009e18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e1a:	e058      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009e1c:	58024400 	.word	0x58024400
 8009e20:	03d09000 	.word	0x03d09000
 8009e24:	003d0900 	.word	0x003d0900
 8009e28:	00989680 	.word	0x00989680
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009e2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e30:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8009e34:	430b      	orrs	r3, r1
 8009e36:	d148      	bne.n	8009eca <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009e38:	4b27      	ldr	r3, [pc, #156]	; (8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009e40:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e48:	d02a      	beq.n	8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8009e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e50:	d838      	bhi.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8009e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d004      	beq.n	8009e62 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e5e:	d00d      	beq.n	8009e7c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009e60:	e030      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009e62:	4b1d      	ldr	r3, [pc, #116]	; (8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e6e:	d102      	bne.n	8009e76 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009e70:	4b1a      	ldr	r3, [pc, #104]	; (8009edc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8009e72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e74:	e02b      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e76:	2300      	movs	r3, #0
 8009e78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e7a:	e028      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009e7c:	4b16      	ldr	r3, [pc, #88]	; (8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e88:	d107      	bne.n	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f000 fae4 	bl	800a45c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e98:	e019      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e9e:	e016      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ea0:	4b0d      	ldr	r3, [pc, #52]	; (8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ea8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009eac:	d107      	bne.n	8009ebe <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009eae:	f107 0318 	add.w	r3, r7, #24
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f000 f82a 	bl	8009f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009eb8:	69fb      	ldr	r3, [r7, #28]
 8009eba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ebc:	e007      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ec2:	e004      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ec8:	e001      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8009ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3740      	adds	r7, #64	; 0x40
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	58024400 	.word	0x58024400
 8009edc:	00989680 	.word	0x00989680

08009ee0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009ee4:	f7fd fffa 	bl	8007edc <HAL_RCC_GetHCLKFreq>
 8009ee8:	4602      	mov	r2, r0
 8009eea:	4b06      	ldr	r3, [pc, #24]	; (8009f04 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009eec:	6a1b      	ldr	r3, [r3, #32]
 8009eee:	091b      	lsrs	r3, r3, #4
 8009ef0:	f003 0307 	and.w	r3, r3, #7
 8009ef4:	4904      	ldr	r1, [pc, #16]	; (8009f08 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009ef6:	5ccb      	ldrb	r3, [r1, r3]
 8009ef8:	f003 031f 	and.w	r3, r3, #31
 8009efc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	bd80      	pop	{r7, pc}
 8009f04:	58024400 	.word	0x58024400
 8009f08:	0800f2fc 	.word	0x0800f2fc

08009f0c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b089      	sub	sp, #36	; 0x24
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f14:	4ba1      	ldr	r3, [pc, #644]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f18:	f003 0303 	and.w	r3, r3, #3
 8009f1c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009f1e:	4b9f      	ldr	r3, [pc, #636]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f22:	0b1b      	lsrs	r3, r3, #12
 8009f24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f28:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009f2a:	4b9c      	ldr	r3, [pc, #624]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f2e:	091b      	lsrs	r3, r3, #4
 8009f30:	f003 0301 	and.w	r3, r3, #1
 8009f34:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009f36:	4b99      	ldr	r3, [pc, #612]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f3a:	08db      	lsrs	r3, r3, #3
 8009f3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f40:	693a      	ldr	r2, [r7, #16]
 8009f42:	fb02 f303 	mul.w	r3, r2, r3
 8009f46:	ee07 3a90 	vmov	s15, r3
 8009f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	f000 8111 	beq.w	800a17c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009f5a:	69bb      	ldr	r3, [r7, #24]
 8009f5c:	2b02      	cmp	r3, #2
 8009f5e:	f000 8083 	beq.w	800a068 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009f62:	69bb      	ldr	r3, [r7, #24]
 8009f64:	2b02      	cmp	r3, #2
 8009f66:	f200 80a1 	bhi.w	800a0ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d003      	beq.n	8009f78 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009f70:	69bb      	ldr	r3, [r7, #24]
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d056      	beq.n	800a024 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009f76:	e099      	b.n	800a0ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f78:	4b88      	ldr	r3, [pc, #544]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f003 0320 	and.w	r3, r3, #32
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d02d      	beq.n	8009fe0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f84:	4b85      	ldr	r3, [pc, #532]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	08db      	lsrs	r3, r3, #3
 8009f8a:	f003 0303 	and.w	r3, r3, #3
 8009f8e:	4a84      	ldr	r2, [pc, #528]	; (800a1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009f90:	fa22 f303 	lsr.w	r3, r2, r3
 8009f94:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	ee07 3a90 	vmov	s15, r3
 8009f9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	ee07 3a90 	vmov	s15, r3
 8009fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fae:	4b7b      	ldr	r3, [pc, #492]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fb6:	ee07 3a90 	vmov	s15, r3
 8009fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fc2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fda:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009fde:	e087      	b.n	800a0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	ee07 3a90 	vmov	s15, r3
 8009fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ff2:	4b6a      	ldr	r3, [pc, #424]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ffa:	ee07 3a90 	vmov	s15, r3
 8009ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a002:	ed97 6a03 	vldr	s12, [r7, #12]
 800a006:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a00a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a00e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a012:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a01a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a01e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a022:	e065      	b.n	800a0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	ee07 3a90 	vmov	s15, r3
 800a02a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a02e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a1ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a036:	4b59      	ldr	r3, [pc, #356]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a03a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a03e:	ee07 3a90 	vmov	s15, r3
 800a042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a046:	ed97 6a03 	vldr	s12, [r7, #12]
 800a04a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a04e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a056:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a05a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a05e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a062:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a066:	e043      	b.n	800a0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	ee07 3a90 	vmov	s15, r3
 800a06e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a072:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a07a:	4b48      	ldr	r3, [pc, #288]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a07e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a082:	ee07 3a90 	vmov	s15, r3
 800a086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a08a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a08e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a09a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a09e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0aa:	e021      	b.n	800a0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	ee07 3a90 	vmov	s15, r3
 800a0b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a1ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a0ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0be:	4b37      	ldr	r3, [pc, #220]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0c6:	ee07 3a90 	vmov	s15, r3
 800a0ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a0d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0ee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a0f0:	4b2a      	ldr	r3, [pc, #168]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0f4:	0a5b      	lsrs	r3, r3, #9
 800a0f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0fa:	ee07 3a90 	vmov	s15, r3
 800a0fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a102:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a106:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a10a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a10e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a112:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a116:	ee17 2a90 	vmov	r2, s15
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a11e:	4b1f      	ldr	r3, [pc, #124]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a122:	0c1b      	lsrs	r3, r3, #16
 800a124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a128:	ee07 3a90 	vmov	s15, r3
 800a12c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a130:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a134:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a138:	edd7 6a07 	vldr	s13, [r7, #28]
 800a13c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a144:	ee17 2a90 	vmov	r2, s15
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a14c:	4b13      	ldr	r3, [pc, #76]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a14e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a150:	0e1b      	lsrs	r3, r3, #24
 800a152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a156:	ee07 3a90 	vmov	s15, r3
 800a15a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a15e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a162:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a166:	edd7 6a07 	vldr	s13, [r7, #28]
 800a16a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a16e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a172:	ee17 2a90 	vmov	r2, s15
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a17a:	e008      	b.n	800a18e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2200      	movs	r2, #0
 800a186:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2200      	movs	r2, #0
 800a18c:	609a      	str	r2, [r3, #8]
}
 800a18e:	bf00      	nop
 800a190:	3724      	adds	r7, #36	; 0x24
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr
 800a19a:	bf00      	nop
 800a19c:	58024400 	.word	0x58024400
 800a1a0:	03d09000 	.word	0x03d09000
 800a1a4:	46000000 	.word	0x46000000
 800a1a8:	4c742400 	.word	0x4c742400
 800a1ac:	4a742400 	.word	0x4a742400
 800a1b0:	4b189680 	.word	0x4b189680

0800a1b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b089      	sub	sp, #36	; 0x24
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a1bc:	4ba1      	ldr	r3, [pc, #644]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1c0:	f003 0303 	and.w	r3, r3, #3
 800a1c4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a1c6:	4b9f      	ldr	r3, [pc, #636]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ca:	0d1b      	lsrs	r3, r3, #20
 800a1cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1d0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a1d2:	4b9c      	ldr	r3, [pc, #624]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d6:	0a1b      	lsrs	r3, r3, #8
 800a1d8:	f003 0301 	and.w	r3, r3, #1
 800a1dc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a1de:	4b99      	ldr	r3, [pc, #612]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1e2:	08db      	lsrs	r3, r3, #3
 800a1e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a1e8:	693a      	ldr	r2, [r7, #16]
 800a1ea:	fb02 f303 	mul.w	r3, r2, r3
 800a1ee:	ee07 3a90 	vmov	s15, r3
 800a1f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	f000 8111 	beq.w	800a424 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a202:	69bb      	ldr	r3, [r7, #24]
 800a204:	2b02      	cmp	r3, #2
 800a206:	f000 8083 	beq.w	800a310 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a20a:	69bb      	ldr	r3, [r7, #24]
 800a20c:	2b02      	cmp	r3, #2
 800a20e:	f200 80a1 	bhi.w	800a354 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a212:	69bb      	ldr	r3, [r7, #24]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d003      	beq.n	800a220 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a218:	69bb      	ldr	r3, [r7, #24]
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d056      	beq.n	800a2cc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a21e:	e099      	b.n	800a354 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a220:	4b88      	ldr	r3, [pc, #544]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f003 0320 	and.w	r3, r3, #32
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d02d      	beq.n	800a288 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a22c:	4b85      	ldr	r3, [pc, #532]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	08db      	lsrs	r3, r3, #3
 800a232:	f003 0303 	and.w	r3, r3, #3
 800a236:	4a84      	ldr	r2, [pc, #528]	; (800a448 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a238:	fa22 f303 	lsr.w	r3, r2, r3
 800a23c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	ee07 3a90 	vmov	s15, r3
 800a244:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	ee07 3a90 	vmov	s15, r3
 800a24e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a256:	4b7b      	ldr	r3, [pc, #492]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a25a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a25e:	ee07 3a90 	vmov	s15, r3
 800a262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a266:	ed97 6a03 	vldr	s12, [r7, #12]
 800a26a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a44c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a26e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a276:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a27a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a27e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a282:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a286:	e087      	b.n	800a398 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	ee07 3a90 	vmov	s15, r3
 800a28e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a292:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a29a:	4b6a      	ldr	r3, [pc, #424]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a29c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a29e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2a2:	ee07 3a90 	vmov	s15, r3
 800a2a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2ae:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a44c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a2b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a2ca:	e065      	b.n	800a398 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	ee07 3a90 	vmov	s15, r3
 800a2d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2d6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a2da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2de:	4b59      	ldr	r3, [pc, #356]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2e6:	ee07 3a90 	vmov	s15, r3
 800a2ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2f2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a44c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a2f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a30a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a30e:	e043      	b.n	800a398 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	ee07 3a90 	vmov	s15, r3
 800a316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a31a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a458 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a31e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a322:	4b48      	ldr	r3, [pc, #288]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a32a:	ee07 3a90 	vmov	s15, r3
 800a32e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a332:	ed97 6a03 	vldr	s12, [r7, #12]
 800a336:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a44c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a33a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a33e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a342:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a34a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a34e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a352:	e021      	b.n	800a398 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	ee07 3a90 	vmov	s15, r3
 800a35a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a35e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a366:	4b37      	ldr	r3, [pc, #220]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a36a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a36e:	ee07 3a90 	vmov	s15, r3
 800a372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a376:	ed97 6a03 	vldr	s12, [r7, #12]
 800a37a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a44c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a37e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a38a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a38e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a392:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a396:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a398:	4b2a      	ldr	r3, [pc, #168]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a39a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a39c:	0a5b      	lsrs	r3, r3, #9
 800a39e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3a2:	ee07 3a90 	vmov	s15, r3
 800a3a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a3ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3b2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3be:	ee17 2a90 	vmov	r2, s15
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a3c6:	4b1f      	ldr	r3, [pc, #124]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ca:	0c1b      	lsrs	r3, r3, #16
 800a3cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3d0:	ee07 3a90 	vmov	s15, r3
 800a3d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a3dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3e0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3ec:	ee17 2a90 	vmov	r2, s15
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a3f4:	4b13      	ldr	r3, [pc, #76]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3f8:	0e1b      	lsrs	r3, r3, #24
 800a3fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3fe:	ee07 3a90 	vmov	s15, r3
 800a402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a406:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a40a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a40e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a416:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a41a:	ee17 2a90 	vmov	r2, s15
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a422:	e008      	b.n	800a436 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2200      	movs	r2, #0
 800a428:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2200      	movs	r2, #0
 800a42e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2200      	movs	r2, #0
 800a434:	609a      	str	r2, [r3, #8]
}
 800a436:	bf00      	nop
 800a438:	3724      	adds	r7, #36	; 0x24
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr
 800a442:	bf00      	nop
 800a444:	58024400 	.word	0x58024400
 800a448:	03d09000 	.word	0x03d09000
 800a44c:	46000000 	.word	0x46000000
 800a450:	4c742400 	.word	0x4c742400
 800a454:	4a742400 	.word	0x4a742400
 800a458:	4b189680 	.word	0x4b189680

0800a45c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b089      	sub	sp, #36	; 0x24
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a464:	4ba0      	ldr	r3, [pc, #640]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a468:	f003 0303 	and.w	r3, r3, #3
 800a46c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a46e:	4b9e      	ldr	r3, [pc, #632]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a472:	091b      	lsrs	r3, r3, #4
 800a474:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a478:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a47a:	4b9b      	ldr	r3, [pc, #620]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a47c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a47e:	f003 0301 	and.w	r3, r3, #1
 800a482:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a484:	4b98      	ldr	r3, [pc, #608]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a488:	08db      	lsrs	r3, r3, #3
 800a48a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a48e:	693a      	ldr	r2, [r7, #16]
 800a490:	fb02 f303 	mul.w	r3, r2, r3
 800a494:	ee07 3a90 	vmov	s15, r3
 800a498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a49c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	f000 8111 	beq.w	800a6ca <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	2b02      	cmp	r3, #2
 800a4ac:	f000 8083 	beq.w	800a5b6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a4b0:	69bb      	ldr	r3, [r7, #24]
 800a4b2:	2b02      	cmp	r3, #2
 800a4b4:	f200 80a1 	bhi.w	800a5fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a4b8:	69bb      	ldr	r3, [r7, #24]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d003      	beq.n	800a4c6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a4be:	69bb      	ldr	r3, [r7, #24]
 800a4c0:	2b01      	cmp	r3, #1
 800a4c2:	d056      	beq.n	800a572 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a4c4:	e099      	b.n	800a5fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4c6:	4b88      	ldr	r3, [pc, #544]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f003 0320 	and.w	r3, r3, #32
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d02d      	beq.n	800a52e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4d2:	4b85      	ldr	r3, [pc, #532]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	08db      	lsrs	r3, r3, #3
 800a4d8:	f003 0303 	and.w	r3, r3, #3
 800a4dc:	4a83      	ldr	r2, [pc, #524]	; (800a6ec <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a4de:	fa22 f303 	lsr.w	r3, r2, r3
 800a4e2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	ee07 3a90 	vmov	s15, r3
 800a4ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	ee07 3a90 	vmov	s15, r3
 800a4f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4fc:	4b7a      	ldr	r3, [pc, #488]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a4fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a504:	ee07 3a90 	vmov	s15, r3
 800a508:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a50c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a510:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a514:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a518:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a51c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a520:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a524:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a528:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a52c:	e087      	b.n	800a63e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	ee07 3a90 	vmov	s15, r3
 800a534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a538:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a6f4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a53c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a540:	4b69      	ldr	r3, [pc, #420]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a548:	ee07 3a90 	vmov	s15, r3
 800a54c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a550:	ed97 6a03 	vldr	s12, [r7, #12]
 800a554:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a558:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a55c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a560:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a564:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a568:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a56c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a570:	e065      	b.n	800a63e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	ee07 3a90 	vmov	s15, r3
 800a578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a57c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a6f8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a580:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a584:	4b58      	ldr	r3, [pc, #352]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a58c:	ee07 3a90 	vmov	s15, r3
 800a590:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a594:	ed97 6a03 	vldr	s12, [r7, #12]
 800a598:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a59c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a5b4:	e043      	b.n	800a63e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	ee07 3a90 	vmov	s15, r3
 800a5bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5c0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a6fc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a5c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5c8:	4b47      	ldr	r3, [pc, #284]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a5ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5d0:	ee07 3a90 	vmov	s15, r3
 800a5d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5d8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5dc:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a5e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a5f8:	e021      	b.n	800a63e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	ee07 3a90 	vmov	s15, r3
 800a600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a604:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a6f4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a608:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a60c:	4b36      	ldr	r3, [pc, #216]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a60e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a614:	ee07 3a90 	vmov	s15, r3
 800a618:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a61c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a620:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a624:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a628:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a62c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a630:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a634:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a638:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a63c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a63e:	4b2a      	ldr	r3, [pc, #168]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a642:	0a5b      	lsrs	r3, r3, #9
 800a644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a648:	ee07 3a90 	vmov	s15, r3
 800a64c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a650:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a654:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a658:	edd7 6a07 	vldr	s13, [r7, #28]
 800a65c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a664:	ee17 2a90 	vmov	r2, s15
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a66c:	4b1e      	ldr	r3, [pc, #120]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a66e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a670:	0c1b      	lsrs	r3, r3, #16
 800a672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a676:	ee07 3a90 	vmov	s15, r3
 800a67a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a67e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a682:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a686:	edd7 6a07 	vldr	s13, [r7, #28]
 800a68a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a68e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a692:	ee17 2a90 	vmov	r2, s15
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a69a:	4b13      	ldr	r3, [pc, #76]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a69c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a69e:	0e1b      	lsrs	r3, r3, #24
 800a6a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6a4:	ee07 3a90 	vmov	s15, r3
 800a6a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a6b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a6b4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6c0:	ee17 2a90 	vmov	r2, s15
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a6c8:	e008      	b.n	800a6dc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	609a      	str	r2, [r3, #8]
}
 800a6dc:	bf00      	nop
 800a6de:	3724      	adds	r7, #36	; 0x24
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr
 800a6e8:	58024400 	.word	0x58024400
 800a6ec:	03d09000 	.word	0x03d09000
 800a6f0:	46000000 	.word	0x46000000
 800a6f4:	4c742400 	.word	0x4c742400
 800a6f8:	4a742400 	.word	0x4a742400
 800a6fc:	4b189680 	.word	0x4b189680

0800a700 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b084      	sub	sp, #16
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800a708:	4b26      	ldr	r3, [pc, #152]	; (800a7a4 <HAL_RCCEx_CRSConfig+0xa4>)
 800a70a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a70e:	4a25      	ldr	r2, [pc, #148]	; (800a7a4 <HAL_RCCEx_CRSConfig+0xa4>)
 800a710:	f043 0302 	orr.w	r3, r3, #2
 800a714:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 800a718:	4b22      	ldr	r3, [pc, #136]	; (800a7a4 <HAL_RCCEx_CRSConfig+0xa4>)
 800a71a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a71e:	4a21      	ldr	r2, [pc, #132]	; (800a7a4 <HAL_RCCEx_CRSConfig+0xa4>)
 800a720:	f023 0302 	bic.w	r3, r3, #2
 800a724:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 800a728:	f7f8 f944 	bl	80029b4 <HAL_GetREVID>
 800a72c:	4603      	mov	r3, r0
 800a72e:	f241 0203 	movw	r2, #4099	; 0x1003
 800a732:	4293      	cmp	r3, r2
 800a734:	d80b      	bhi.n	800a74e <HAL_RCCEx_CRSConfig+0x4e>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	685b      	ldr	r3, [r3, #4]
 800a73a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a73e:	d106      	bne.n	800a74e <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	4313      	orrs	r3, r2
 800a74a:	60fb      	str	r3, [r7, #12]
 800a74c:	e008      	b.n	800a760 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	431a      	orrs	r2, r3
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	689b      	ldr	r3, [r3, #8]
 800a75c:	4313      	orrs	r3, r2
 800a75e:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	68db      	ldr	r3, [r3, #12]
 800a764:	68fa      	ldr	r2, [r7, #12]
 800a766:	4313      	orrs	r3, r2
 800a768:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	691b      	ldr	r3, [r3, #16]
 800a76e:	041b      	lsls	r3, r3, #16
 800a770:	68fa      	ldr	r2, [r7, #12]
 800a772:	4313      	orrs	r3, r2
 800a774:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800a776:	4a0c      	ldr	r2, [pc, #48]	; (800a7a8 <HAL_RCCEx_CRSConfig+0xa8>)
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800a77c:	4b0a      	ldr	r3, [pc, #40]	; (800a7a8 <HAL_RCCEx_CRSConfig+0xa8>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	695b      	ldr	r3, [r3, #20]
 800a788:	021b      	lsls	r3, r3, #8
 800a78a:	4907      	ldr	r1, [pc, #28]	; (800a7a8 <HAL_RCCEx_CRSConfig+0xa8>)
 800a78c:	4313      	orrs	r3, r2
 800a78e:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800a790:	4b05      	ldr	r3, [pc, #20]	; (800a7a8 <HAL_RCCEx_CRSConfig+0xa8>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a04      	ldr	r2, [pc, #16]	; (800a7a8 <HAL_RCCEx_CRSConfig+0xa8>)
 800a796:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a79a:	6013      	str	r3, [r2, #0]
}
 800a79c:	bf00      	nop
 800a79e:	3710      	adds	r7, #16
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	58024400 	.word	0x58024400
 800a7a8:	40008400 	.word	0x40008400

0800a7ac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b084      	sub	sp, #16
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a7ba:	4b53      	ldr	r3, [pc, #332]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a7bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7be:	f003 0303 	and.w	r3, r3, #3
 800a7c2:	2b03      	cmp	r3, #3
 800a7c4:	d101      	bne.n	800a7ca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	e099      	b.n	800a8fe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a7ca:	4b4f      	ldr	r3, [pc, #316]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4a4e      	ldr	r2, [pc, #312]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a7d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a7d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7d6:	f7f8 f8bd 	bl	8002954 <HAL_GetTick>
 800a7da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a7dc:	e008      	b.n	800a7f0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a7de:	f7f8 f8b9 	bl	8002954 <HAL_GetTick>
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	1ad3      	subs	r3, r2, r3
 800a7e8:	2b02      	cmp	r3, #2
 800a7ea:	d901      	bls.n	800a7f0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a7ec:	2303      	movs	r3, #3
 800a7ee:	e086      	b.n	800a8fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a7f0:	4b45      	ldr	r3, [pc, #276]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d1f0      	bne.n	800a7de <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a7fc:	4b42      	ldr	r3, [pc, #264]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a7fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a800:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	031b      	lsls	r3, r3, #12
 800a80a:	493f      	ldr	r1, [pc, #252]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a80c:	4313      	orrs	r3, r2
 800a80e:	628b      	str	r3, [r1, #40]	; 0x28
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	3b01      	subs	r3, #1
 800a816:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	689b      	ldr	r3, [r3, #8]
 800a81e:	3b01      	subs	r3, #1
 800a820:	025b      	lsls	r3, r3, #9
 800a822:	b29b      	uxth	r3, r3
 800a824:	431a      	orrs	r2, r3
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	68db      	ldr	r3, [r3, #12]
 800a82a:	3b01      	subs	r3, #1
 800a82c:	041b      	lsls	r3, r3, #16
 800a82e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a832:	431a      	orrs	r2, r3
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	691b      	ldr	r3, [r3, #16]
 800a838:	3b01      	subs	r3, #1
 800a83a:	061b      	lsls	r3, r3, #24
 800a83c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a840:	4931      	ldr	r1, [pc, #196]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a842:	4313      	orrs	r3, r2
 800a844:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a846:	4b30      	ldr	r3, [pc, #192]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a84a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	695b      	ldr	r3, [r3, #20]
 800a852:	492d      	ldr	r1, [pc, #180]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a854:	4313      	orrs	r3, r2
 800a856:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a858:	4b2b      	ldr	r3, [pc, #172]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a85c:	f023 0220 	bic.w	r2, r3, #32
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	699b      	ldr	r3, [r3, #24]
 800a864:	4928      	ldr	r1, [pc, #160]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a866:	4313      	orrs	r3, r2
 800a868:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a86a:	4b27      	ldr	r3, [pc, #156]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a86c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a86e:	4a26      	ldr	r2, [pc, #152]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a870:	f023 0310 	bic.w	r3, r3, #16
 800a874:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a876:	4b24      	ldr	r3, [pc, #144]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a878:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a87a:	4b24      	ldr	r3, [pc, #144]	; (800a90c <RCCEx_PLL2_Config+0x160>)
 800a87c:	4013      	ands	r3, r2
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	69d2      	ldr	r2, [r2, #28]
 800a882:	00d2      	lsls	r2, r2, #3
 800a884:	4920      	ldr	r1, [pc, #128]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a886:	4313      	orrs	r3, r2
 800a888:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a88a:	4b1f      	ldr	r3, [pc, #124]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a88c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a88e:	4a1e      	ldr	r2, [pc, #120]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a890:	f043 0310 	orr.w	r3, r3, #16
 800a894:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d106      	bne.n	800a8aa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a89c:	4b1a      	ldr	r3, [pc, #104]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a89e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a0:	4a19      	ldr	r2, [pc, #100]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a8a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a8a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a8a8:	e00f      	b.n	800a8ca <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d106      	bne.n	800a8be <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a8b0:	4b15      	ldr	r3, [pc, #84]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a8b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8b4:	4a14      	ldr	r2, [pc, #80]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a8b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a8ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a8bc:	e005      	b.n	800a8ca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a8be:	4b12      	ldr	r3, [pc, #72]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a8c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8c2:	4a11      	ldr	r2, [pc, #68]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a8c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a8c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a8ca:	4b0f      	ldr	r3, [pc, #60]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4a0e      	ldr	r2, [pc, #56]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a8d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a8d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a8d6:	f7f8 f83d 	bl	8002954 <HAL_GetTick>
 800a8da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a8dc:	e008      	b.n	800a8f0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a8de:	f7f8 f839 	bl	8002954 <HAL_GetTick>
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	1ad3      	subs	r3, r2, r3
 800a8e8:	2b02      	cmp	r3, #2
 800a8ea:	d901      	bls.n	800a8f0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a8ec:	2303      	movs	r3, #3
 800a8ee:	e006      	b.n	800a8fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a8f0:	4b05      	ldr	r3, [pc, #20]	; (800a908 <RCCEx_PLL2_Config+0x15c>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d0f0      	beq.n	800a8de <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a8fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3710      	adds	r7, #16
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
 800a906:	bf00      	nop
 800a908:	58024400 	.word	0x58024400
 800a90c:	ffff0007 	.word	0xffff0007

0800a910 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a91a:	2300      	movs	r3, #0
 800a91c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a91e:	4b53      	ldr	r3, [pc, #332]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800a920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a922:	f003 0303 	and.w	r3, r3, #3
 800a926:	2b03      	cmp	r3, #3
 800a928:	d101      	bne.n	800a92e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a92a:	2301      	movs	r3, #1
 800a92c:	e099      	b.n	800aa62 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a92e:	4b4f      	ldr	r3, [pc, #316]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	4a4e      	ldr	r2, [pc, #312]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800a934:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a938:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a93a:	f7f8 f80b 	bl	8002954 <HAL_GetTick>
 800a93e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a940:	e008      	b.n	800a954 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a942:	f7f8 f807 	bl	8002954 <HAL_GetTick>
 800a946:	4602      	mov	r2, r0
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	1ad3      	subs	r3, r2, r3
 800a94c:	2b02      	cmp	r3, #2
 800a94e:	d901      	bls.n	800a954 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a950:	2303      	movs	r3, #3
 800a952:	e086      	b.n	800aa62 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a954:	4b45      	ldr	r3, [pc, #276]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d1f0      	bne.n	800a942 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a960:	4b42      	ldr	r3, [pc, #264]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800a962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a964:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	051b      	lsls	r3, r3, #20
 800a96e:	493f      	ldr	r1, [pc, #252]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800a970:	4313      	orrs	r3, r2
 800a972:	628b      	str	r3, [r1, #40]	; 0x28
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	685b      	ldr	r3, [r3, #4]
 800a978:	3b01      	subs	r3, #1
 800a97a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	689b      	ldr	r3, [r3, #8]
 800a982:	3b01      	subs	r3, #1
 800a984:	025b      	lsls	r3, r3, #9
 800a986:	b29b      	uxth	r3, r3
 800a988:	431a      	orrs	r2, r3
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	68db      	ldr	r3, [r3, #12]
 800a98e:	3b01      	subs	r3, #1
 800a990:	041b      	lsls	r3, r3, #16
 800a992:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a996:	431a      	orrs	r2, r3
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	691b      	ldr	r3, [r3, #16]
 800a99c:	3b01      	subs	r3, #1
 800a99e:	061b      	lsls	r3, r3, #24
 800a9a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a9a4:	4931      	ldr	r1, [pc, #196]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a9aa:	4b30      	ldr	r3, [pc, #192]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800a9ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	695b      	ldr	r3, [r3, #20]
 800a9b6:	492d      	ldr	r1, [pc, #180]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a9bc:	4b2b      	ldr	r3, [pc, #172]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800a9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	699b      	ldr	r3, [r3, #24]
 800a9c8:	4928      	ldr	r1, [pc, #160]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a9ce:	4b27      	ldr	r3, [pc, #156]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800a9d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d2:	4a26      	ldr	r2, [pc, #152]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800a9d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a9da:	4b24      	ldr	r3, [pc, #144]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800a9dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a9de:	4b24      	ldr	r3, [pc, #144]	; (800aa70 <RCCEx_PLL3_Config+0x160>)
 800a9e0:	4013      	ands	r3, r2
 800a9e2:	687a      	ldr	r2, [r7, #4]
 800a9e4:	69d2      	ldr	r2, [r2, #28]
 800a9e6:	00d2      	lsls	r2, r2, #3
 800a9e8:	4920      	ldr	r1, [pc, #128]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a9ee:	4b1f      	ldr	r3, [pc, #124]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800a9f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f2:	4a1e      	ldr	r2, [pc, #120]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800a9f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d106      	bne.n	800aa0e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800aa00:	4b1a      	ldr	r3, [pc, #104]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800aa02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa04:	4a19      	ldr	r2, [pc, #100]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800aa06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800aa0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aa0c:	e00f      	b.n	800aa2e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	2b01      	cmp	r3, #1
 800aa12:	d106      	bne.n	800aa22 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800aa14:	4b15      	ldr	r3, [pc, #84]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800aa16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa18:	4a14      	ldr	r2, [pc, #80]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800aa1a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800aa1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aa20:	e005      	b.n	800aa2e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800aa22:	4b12      	ldr	r3, [pc, #72]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800aa24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa26:	4a11      	ldr	r2, [pc, #68]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800aa28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aa2c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800aa2e:	4b0f      	ldr	r3, [pc, #60]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4a0e      	ldr	r2, [pc, #56]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800aa34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa3a:	f7f7 ff8b 	bl	8002954 <HAL_GetTick>
 800aa3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800aa40:	e008      	b.n	800aa54 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800aa42:	f7f7 ff87 	bl	8002954 <HAL_GetTick>
 800aa46:	4602      	mov	r2, r0
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	1ad3      	subs	r3, r2, r3
 800aa4c:	2b02      	cmp	r3, #2
 800aa4e:	d901      	bls.n	800aa54 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800aa50:	2303      	movs	r3, #3
 800aa52:	e006      	b.n	800aa62 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800aa54:	4b05      	ldr	r3, [pc, #20]	; (800aa6c <RCCEx_PLL3_Config+0x15c>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d0f0      	beq.n	800aa42 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800aa60:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3710      	adds	r7, #16
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}
 800aa6a:	bf00      	nop
 800aa6c:	58024400 	.word	0x58024400
 800aa70:	ffff0007 	.word	0xffff0007

0800aa74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b082      	sub	sp, #8
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d101      	bne.n	800aa86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aa82:	2301      	movs	r3, #1
 800aa84:	e049      	b.n	800ab1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d106      	bne.n	800aaa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2200      	movs	r2, #0
 800aa96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f7f7 fc4e 	bl	800233c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2202      	movs	r2, #2
 800aaa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681a      	ldr	r2, [r3, #0]
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	3304      	adds	r3, #4
 800aab0:	4619      	mov	r1, r3
 800aab2:	4610      	mov	r0, r2
 800aab4:	f000 f92e 	bl	800ad14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2201      	movs	r2, #1
 800aabc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2201      	movs	r2, #1
 800aac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2201      	movs	r2, #1
 800aacc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2201      	movs	r2, #1
 800aad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2201      	movs	r2, #1
 800aadc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2201      	movs	r2, #1
 800aae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2201      	movs	r2, #1
 800aaec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2201      	movs	r2, #1
 800aafc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2201      	movs	r2, #1
 800ab04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2201      	movs	r2, #1
 800ab14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab18:	2300      	movs	r3, #0
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3708      	adds	r7, #8
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}
	...

0800ab24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b084      	sub	sp, #16
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab38:	2b01      	cmp	r3, #1
 800ab3a:	d101      	bne.n	800ab40 <HAL_TIM_ConfigClockSource+0x1c>
 800ab3c:	2302      	movs	r3, #2
 800ab3e:	e0dc      	b.n	800acfa <HAL_TIM_ConfigClockSource+0x1d6>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2201      	movs	r2, #1
 800ab44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2202      	movs	r2, #2
 800ab4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	689b      	ldr	r3, [r3, #8]
 800ab56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ab58:	68ba      	ldr	r2, [r7, #8]
 800ab5a:	4b6a      	ldr	r3, [pc, #424]	; (800ad04 <HAL_TIM_ConfigClockSource+0x1e0>)
 800ab5c:	4013      	ands	r3, r2
 800ab5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	68ba      	ldr	r2, [r7, #8]
 800ab6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	4a64      	ldr	r2, [pc, #400]	; (800ad08 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	f000 80a9 	beq.w	800acce <HAL_TIM_ConfigClockSource+0x1aa>
 800ab7c:	4a62      	ldr	r2, [pc, #392]	; (800ad08 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	f200 80ae 	bhi.w	800ace0 <HAL_TIM_ConfigClockSource+0x1bc>
 800ab84:	4a61      	ldr	r2, [pc, #388]	; (800ad0c <HAL_TIM_ConfigClockSource+0x1e8>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	f000 80a1 	beq.w	800acce <HAL_TIM_ConfigClockSource+0x1aa>
 800ab8c:	4a5f      	ldr	r2, [pc, #380]	; (800ad0c <HAL_TIM_ConfigClockSource+0x1e8>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	f200 80a6 	bhi.w	800ace0 <HAL_TIM_ConfigClockSource+0x1bc>
 800ab94:	4a5e      	ldr	r2, [pc, #376]	; (800ad10 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	f000 8099 	beq.w	800acce <HAL_TIM_ConfigClockSource+0x1aa>
 800ab9c:	4a5c      	ldr	r2, [pc, #368]	; (800ad10 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	f200 809e 	bhi.w	800ace0 <HAL_TIM_ConfigClockSource+0x1bc>
 800aba4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800aba8:	f000 8091 	beq.w	800acce <HAL_TIM_ConfigClockSource+0x1aa>
 800abac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800abb0:	f200 8096 	bhi.w	800ace0 <HAL_TIM_ConfigClockSource+0x1bc>
 800abb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800abb8:	f000 8089 	beq.w	800acce <HAL_TIM_ConfigClockSource+0x1aa>
 800abbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800abc0:	f200 808e 	bhi.w	800ace0 <HAL_TIM_ConfigClockSource+0x1bc>
 800abc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abc8:	d03e      	beq.n	800ac48 <HAL_TIM_ConfigClockSource+0x124>
 800abca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abce:	f200 8087 	bhi.w	800ace0 <HAL_TIM_ConfigClockSource+0x1bc>
 800abd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abd6:	f000 8086 	beq.w	800ace6 <HAL_TIM_ConfigClockSource+0x1c2>
 800abda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abde:	d87f      	bhi.n	800ace0 <HAL_TIM_ConfigClockSource+0x1bc>
 800abe0:	2b70      	cmp	r3, #112	; 0x70
 800abe2:	d01a      	beq.n	800ac1a <HAL_TIM_ConfigClockSource+0xf6>
 800abe4:	2b70      	cmp	r3, #112	; 0x70
 800abe6:	d87b      	bhi.n	800ace0 <HAL_TIM_ConfigClockSource+0x1bc>
 800abe8:	2b60      	cmp	r3, #96	; 0x60
 800abea:	d050      	beq.n	800ac8e <HAL_TIM_ConfigClockSource+0x16a>
 800abec:	2b60      	cmp	r3, #96	; 0x60
 800abee:	d877      	bhi.n	800ace0 <HAL_TIM_ConfigClockSource+0x1bc>
 800abf0:	2b50      	cmp	r3, #80	; 0x50
 800abf2:	d03c      	beq.n	800ac6e <HAL_TIM_ConfigClockSource+0x14a>
 800abf4:	2b50      	cmp	r3, #80	; 0x50
 800abf6:	d873      	bhi.n	800ace0 <HAL_TIM_ConfigClockSource+0x1bc>
 800abf8:	2b40      	cmp	r3, #64	; 0x40
 800abfa:	d058      	beq.n	800acae <HAL_TIM_ConfigClockSource+0x18a>
 800abfc:	2b40      	cmp	r3, #64	; 0x40
 800abfe:	d86f      	bhi.n	800ace0 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac00:	2b30      	cmp	r3, #48	; 0x30
 800ac02:	d064      	beq.n	800acce <HAL_TIM_ConfigClockSource+0x1aa>
 800ac04:	2b30      	cmp	r3, #48	; 0x30
 800ac06:	d86b      	bhi.n	800ace0 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac08:	2b20      	cmp	r3, #32
 800ac0a:	d060      	beq.n	800acce <HAL_TIM_ConfigClockSource+0x1aa>
 800ac0c:	2b20      	cmp	r3, #32
 800ac0e:	d867      	bhi.n	800ace0 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d05c      	beq.n	800acce <HAL_TIM_ConfigClockSource+0x1aa>
 800ac14:	2b10      	cmp	r3, #16
 800ac16:	d05a      	beq.n	800acce <HAL_TIM_ConfigClockSource+0x1aa>
 800ac18:	e062      	b.n	800ace0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6818      	ldr	r0, [r3, #0]
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	6899      	ldr	r1, [r3, #8]
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	685a      	ldr	r2, [r3, #4]
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	68db      	ldr	r3, [r3, #12]
 800ac2a:	f000 f98b 	bl	800af44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	689b      	ldr	r3, [r3, #8]
 800ac34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ac3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	68ba      	ldr	r2, [r7, #8]
 800ac44:	609a      	str	r2, [r3, #8]
      break;
 800ac46:	e04f      	b.n	800ace8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6818      	ldr	r0, [r3, #0]
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	6899      	ldr	r1, [r3, #8]
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	685a      	ldr	r2, [r3, #4]
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	68db      	ldr	r3, [r3, #12]
 800ac58:	f000 f974 	bl	800af44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	689a      	ldr	r2, [r3, #8]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ac6a:	609a      	str	r2, [r3, #8]
      break;
 800ac6c:	e03c      	b.n	800ace8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6818      	ldr	r0, [r3, #0]
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	6859      	ldr	r1, [r3, #4]
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	68db      	ldr	r3, [r3, #12]
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	f000 f8e4 	bl	800ae48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	2150      	movs	r1, #80	; 0x50
 800ac86:	4618      	mov	r0, r3
 800ac88:	f000 f93e 	bl	800af08 <TIM_ITRx_SetConfig>
      break;
 800ac8c:	e02c      	b.n	800ace8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6818      	ldr	r0, [r3, #0]
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	6859      	ldr	r1, [r3, #4]
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	68db      	ldr	r3, [r3, #12]
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	f000 f903 	bl	800aea6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	2160      	movs	r1, #96	; 0x60
 800aca6:	4618      	mov	r0, r3
 800aca8:	f000 f92e 	bl	800af08 <TIM_ITRx_SetConfig>
      break;
 800acac:	e01c      	b.n	800ace8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6818      	ldr	r0, [r3, #0]
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	6859      	ldr	r1, [r3, #4]
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	68db      	ldr	r3, [r3, #12]
 800acba:	461a      	mov	r2, r3
 800acbc:	f000 f8c4 	bl	800ae48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	2140      	movs	r1, #64	; 0x40
 800acc6:	4618      	mov	r0, r3
 800acc8:	f000 f91e 	bl	800af08 <TIM_ITRx_SetConfig>
      break;
 800accc:	e00c      	b.n	800ace8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681a      	ldr	r2, [r3, #0]
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4619      	mov	r1, r3
 800acd8:	4610      	mov	r0, r2
 800acda:	f000 f915 	bl	800af08 <TIM_ITRx_SetConfig>
      break;
 800acde:	e003      	b.n	800ace8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ace0:	2301      	movs	r3, #1
 800ace2:	73fb      	strb	r3, [r7, #15]
      break;
 800ace4:	e000      	b.n	800ace8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ace6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2201      	movs	r2, #1
 800acec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2200      	movs	r2, #0
 800acf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800acf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3710      	adds	r7, #16
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}
 800ad02:	bf00      	nop
 800ad04:	ffceff88 	.word	0xffceff88
 800ad08:	00100040 	.word	0x00100040
 800ad0c:	00100030 	.word	0x00100030
 800ad10:	00100020 	.word	0x00100020

0800ad14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b085      	sub	sp, #20
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	4a40      	ldr	r2, [pc, #256]	; (800ae28 <TIM_Base_SetConfig+0x114>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d013      	beq.n	800ad54 <TIM_Base_SetConfig+0x40>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad32:	d00f      	beq.n	800ad54 <TIM_Base_SetConfig+0x40>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	4a3d      	ldr	r2, [pc, #244]	; (800ae2c <TIM_Base_SetConfig+0x118>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d00b      	beq.n	800ad54 <TIM_Base_SetConfig+0x40>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	4a3c      	ldr	r2, [pc, #240]	; (800ae30 <TIM_Base_SetConfig+0x11c>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d007      	beq.n	800ad54 <TIM_Base_SetConfig+0x40>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	4a3b      	ldr	r2, [pc, #236]	; (800ae34 <TIM_Base_SetConfig+0x120>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d003      	beq.n	800ad54 <TIM_Base_SetConfig+0x40>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	4a3a      	ldr	r2, [pc, #232]	; (800ae38 <TIM_Base_SetConfig+0x124>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d108      	bne.n	800ad66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	68fa      	ldr	r2, [r7, #12]
 800ad62:	4313      	orrs	r3, r2
 800ad64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	4a2f      	ldr	r2, [pc, #188]	; (800ae28 <TIM_Base_SetConfig+0x114>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d01f      	beq.n	800adae <TIM_Base_SetConfig+0x9a>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad74:	d01b      	beq.n	800adae <TIM_Base_SetConfig+0x9a>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	4a2c      	ldr	r2, [pc, #176]	; (800ae2c <TIM_Base_SetConfig+0x118>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d017      	beq.n	800adae <TIM_Base_SetConfig+0x9a>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	4a2b      	ldr	r2, [pc, #172]	; (800ae30 <TIM_Base_SetConfig+0x11c>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d013      	beq.n	800adae <TIM_Base_SetConfig+0x9a>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	4a2a      	ldr	r2, [pc, #168]	; (800ae34 <TIM_Base_SetConfig+0x120>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d00f      	beq.n	800adae <TIM_Base_SetConfig+0x9a>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	4a29      	ldr	r2, [pc, #164]	; (800ae38 <TIM_Base_SetConfig+0x124>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d00b      	beq.n	800adae <TIM_Base_SetConfig+0x9a>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	4a28      	ldr	r2, [pc, #160]	; (800ae3c <TIM_Base_SetConfig+0x128>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d007      	beq.n	800adae <TIM_Base_SetConfig+0x9a>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	4a27      	ldr	r2, [pc, #156]	; (800ae40 <TIM_Base_SetConfig+0x12c>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d003      	beq.n	800adae <TIM_Base_SetConfig+0x9a>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	4a26      	ldr	r2, [pc, #152]	; (800ae44 <TIM_Base_SetConfig+0x130>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d108      	bne.n	800adc0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800adb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	68db      	ldr	r3, [r3, #12]
 800adba:	68fa      	ldr	r2, [r7, #12]
 800adbc:	4313      	orrs	r3, r2
 800adbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	695b      	ldr	r3, [r3, #20]
 800adca:	4313      	orrs	r3, r2
 800adcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	68fa      	ldr	r2, [r7, #12]
 800add2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	689a      	ldr	r2, [r3, #8]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	681a      	ldr	r2, [r3, #0]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	4a10      	ldr	r2, [pc, #64]	; (800ae28 <TIM_Base_SetConfig+0x114>)
 800ade8:	4293      	cmp	r3, r2
 800adea:	d00f      	beq.n	800ae0c <TIM_Base_SetConfig+0xf8>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	4a12      	ldr	r2, [pc, #72]	; (800ae38 <TIM_Base_SetConfig+0x124>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d00b      	beq.n	800ae0c <TIM_Base_SetConfig+0xf8>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	4a11      	ldr	r2, [pc, #68]	; (800ae3c <TIM_Base_SetConfig+0x128>)
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d007      	beq.n	800ae0c <TIM_Base_SetConfig+0xf8>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	4a10      	ldr	r2, [pc, #64]	; (800ae40 <TIM_Base_SetConfig+0x12c>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d003      	beq.n	800ae0c <TIM_Base_SetConfig+0xf8>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	4a0f      	ldr	r2, [pc, #60]	; (800ae44 <TIM_Base_SetConfig+0x130>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d103      	bne.n	800ae14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	691a      	ldr	r2, [r3, #16]
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2201      	movs	r2, #1
 800ae18:	615a      	str	r2, [r3, #20]
}
 800ae1a:	bf00      	nop
 800ae1c:	3714      	adds	r7, #20
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae24:	4770      	bx	lr
 800ae26:	bf00      	nop
 800ae28:	40010000 	.word	0x40010000
 800ae2c:	40000400 	.word	0x40000400
 800ae30:	40000800 	.word	0x40000800
 800ae34:	40000c00 	.word	0x40000c00
 800ae38:	40010400 	.word	0x40010400
 800ae3c:	40014000 	.word	0x40014000
 800ae40:	40014400 	.word	0x40014400
 800ae44:	40014800 	.word	0x40014800

0800ae48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b087      	sub	sp, #28
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	6a1b      	ldr	r3, [r3, #32]
 800ae58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	6a1b      	ldr	r3, [r3, #32]
 800ae5e:	f023 0201 	bic.w	r2, r3, #1
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	699b      	ldr	r3, [r3, #24]
 800ae6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae6c:	693b      	ldr	r3, [r7, #16]
 800ae6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	011b      	lsls	r3, r3, #4
 800ae78:	693a      	ldr	r2, [r7, #16]
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	f023 030a 	bic.w	r3, r3, #10
 800ae84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ae86:	697a      	ldr	r2, [r7, #20]
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	693a      	ldr	r2, [r7, #16]
 800ae92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	697a      	ldr	r2, [r7, #20]
 800ae98:	621a      	str	r2, [r3, #32]
}
 800ae9a:	bf00      	nop
 800ae9c:	371c      	adds	r7, #28
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea4:	4770      	bx	lr

0800aea6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aea6:	b480      	push	{r7}
 800aea8:	b087      	sub	sp, #28
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	60f8      	str	r0, [r7, #12]
 800aeae:	60b9      	str	r1, [r7, #8]
 800aeb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	6a1b      	ldr	r3, [r3, #32]
 800aeb6:	f023 0210 	bic.w	r2, r3, #16
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	699b      	ldr	r3, [r3, #24]
 800aec2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	6a1b      	ldr	r3, [r3, #32]
 800aec8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aed0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	031b      	lsls	r3, r3, #12
 800aed6:	697a      	ldr	r2, [r7, #20]
 800aed8:	4313      	orrs	r3, r2
 800aeda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aee2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	011b      	lsls	r3, r3, #4
 800aee8:	693a      	ldr	r2, [r7, #16]
 800aeea:	4313      	orrs	r3, r2
 800aeec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	697a      	ldr	r2, [r7, #20]
 800aef2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	693a      	ldr	r2, [r7, #16]
 800aef8:	621a      	str	r2, [r3, #32]
}
 800aefa:	bf00      	nop
 800aefc:	371c      	adds	r7, #28
 800aefe:	46bd      	mov	sp, r7
 800af00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af04:	4770      	bx	lr
	...

0800af08 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800af08:	b480      	push	{r7}
 800af0a:	b085      	sub	sp, #20
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	689b      	ldr	r3, [r3, #8]
 800af16:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af18:	68fa      	ldr	r2, [r7, #12]
 800af1a:	4b09      	ldr	r3, [pc, #36]	; (800af40 <TIM_ITRx_SetConfig+0x38>)
 800af1c:	4013      	ands	r3, r2
 800af1e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800af20:	683a      	ldr	r2, [r7, #0]
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	4313      	orrs	r3, r2
 800af26:	f043 0307 	orr.w	r3, r3, #7
 800af2a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	68fa      	ldr	r2, [r7, #12]
 800af30:	609a      	str	r2, [r3, #8]
}
 800af32:	bf00      	nop
 800af34:	3714      	adds	r7, #20
 800af36:	46bd      	mov	sp, r7
 800af38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3c:	4770      	bx	lr
 800af3e:	bf00      	nop
 800af40:	ffcfff8f 	.word	0xffcfff8f

0800af44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800af44:	b480      	push	{r7}
 800af46:	b087      	sub	sp, #28
 800af48:	af00      	add	r7, sp, #0
 800af4a:	60f8      	str	r0, [r7, #12]
 800af4c:	60b9      	str	r1, [r7, #8]
 800af4e:	607a      	str	r2, [r7, #4]
 800af50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	689b      	ldr	r3, [r3, #8]
 800af56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	021a      	lsls	r2, r3, #8
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	431a      	orrs	r2, r3
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	4313      	orrs	r3, r2
 800af6c:	697a      	ldr	r2, [r7, #20]
 800af6e:	4313      	orrs	r3, r2
 800af70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	697a      	ldr	r2, [r7, #20]
 800af76:	609a      	str	r2, [r3, #8]
}
 800af78:	bf00      	nop
 800af7a:	371c      	adds	r7, #28
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr

0800af84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800af84:	b480      	push	{r7}
 800af86:	b085      	sub	sp, #20
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af94:	2b01      	cmp	r3, #1
 800af96:	d101      	bne.n	800af9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800af98:	2302      	movs	r3, #2
 800af9a:	e06d      	b.n	800b078 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2201      	movs	r2, #1
 800afa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2202      	movs	r2, #2
 800afa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	685b      	ldr	r3, [r3, #4]
 800afb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	689b      	ldr	r3, [r3, #8]
 800afba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	4a30      	ldr	r2, [pc, #192]	; (800b084 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d004      	beq.n	800afd0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4a2f      	ldr	r2, [pc, #188]	; (800b088 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d108      	bne.n	800afe2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800afd6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	685b      	ldr	r3, [r3, #4]
 800afdc:	68fa      	ldr	r2, [r7, #12]
 800afde:	4313      	orrs	r3, r2
 800afe0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afe8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	68fa      	ldr	r2, [r7, #12]
 800aff0:	4313      	orrs	r3, r2
 800aff2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	68fa      	ldr	r2, [r7, #12]
 800affa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	4a20      	ldr	r2, [pc, #128]	; (800b084 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b002:	4293      	cmp	r3, r2
 800b004:	d022      	beq.n	800b04c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b00e:	d01d      	beq.n	800b04c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	4a1d      	ldr	r2, [pc, #116]	; (800b08c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b016:	4293      	cmp	r3, r2
 800b018:	d018      	beq.n	800b04c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	4a1c      	ldr	r2, [pc, #112]	; (800b090 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b020:	4293      	cmp	r3, r2
 800b022:	d013      	beq.n	800b04c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	4a1a      	ldr	r2, [pc, #104]	; (800b094 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d00e      	beq.n	800b04c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	4a15      	ldr	r2, [pc, #84]	; (800b088 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d009      	beq.n	800b04c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4a16      	ldr	r2, [pc, #88]	; (800b098 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d004      	beq.n	800b04c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4a15      	ldr	r2, [pc, #84]	; (800b09c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d10c      	bne.n	800b066 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b052:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	689b      	ldr	r3, [r3, #8]
 800b058:	68ba      	ldr	r2, [r7, #8]
 800b05a:	4313      	orrs	r3, r2
 800b05c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	68ba      	ldr	r2, [r7, #8]
 800b064:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2201      	movs	r2, #1
 800b06a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2200      	movs	r2, #0
 800b072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b076:	2300      	movs	r3, #0
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3714      	adds	r7, #20
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr
 800b084:	40010000 	.word	0x40010000
 800b088:	40010400 	.word	0x40010400
 800b08c:	40000400 	.word	0x40000400
 800b090:	40000800 	.word	0x40000800
 800b094:	40000c00 	.word	0x40000c00
 800b098:	40001800 	.word	0x40001800
 800b09c:	40014000 	.word	0x40014000

0800b0a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d101      	bne.n	800b0b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	e042      	b.n	800b138 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d106      	bne.n	800b0ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f7f7 f973 	bl	80023b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2224      	movs	r2, #36	; 0x24
 800b0ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	681a      	ldr	r2, [r3, #0]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f022 0201 	bic.w	r2, r2, #1
 800b0e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f000 f8ba 	bl	800b25c <UART_SetConfig>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	2b01      	cmp	r3, #1
 800b0ec:	d101      	bne.n	800b0f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	e022      	b.n	800b138 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d002      	beq.n	800b100 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f000 fe16 	bl	800bd2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	685a      	ldr	r2, [r3, #4]
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b10e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	689a      	ldr	r2, [r3, #8]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b11e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	681a      	ldr	r2, [r3, #0]
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f042 0201 	orr.w	r2, r2, #1
 800b12e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f000 fe9d 	bl	800be70 <UART_CheckIdleState>
 800b136:	4603      	mov	r3, r0
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3708      	adds	r7, #8
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b08a      	sub	sp, #40	; 0x28
 800b144:	af02      	add	r7, sp, #8
 800b146:	60f8      	str	r0, [r7, #12]
 800b148:	60b9      	str	r1, [r7, #8]
 800b14a:	603b      	str	r3, [r7, #0]
 800b14c:	4613      	mov	r3, r2
 800b14e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b156:	2b20      	cmp	r3, #32
 800b158:	d17b      	bne.n	800b252 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d002      	beq.n	800b166 <HAL_UART_Transmit+0x26>
 800b160:	88fb      	ldrh	r3, [r7, #6]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d101      	bne.n	800b16a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b166:	2301      	movs	r3, #1
 800b168:	e074      	b.n	800b254 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	2200      	movs	r2, #0
 800b16e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	2221      	movs	r2, #33	; 0x21
 800b176:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b17a:	f7f7 fbeb 	bl	8002954 <HAL_GetTick>
 800b17e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	88fa      	ldrh	r2, [r7, #6]
 800b184:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	88fa      	ldrh	r2, [r7, #6]
 800b18c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	689b      	ldr	r3, [r3, #8]
 800b194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b198:	d108      	bne.n	800b1ac <HAL_UART_Transmit+0x6c>
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	691b      	ldr	r3, [r3, #16]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d104      	bne.n	800b1ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	61bb      	str	r3, [r7, #24]
 800b1aa:	e003      	b.n	800b1b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b1b4:	e030      	b.n	800b218 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	9300      	str	r3, [sp, #0]
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	2180      	movs	r1, #128	; 0x80
 800b1c0:	68f8      	ldr	r0, [r7, #12]
 800b1c2:	f000 feff 	bl	800bfc4 <UART_WaitOnFlagUntilTimeout>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d005      	beq.n	800b1d8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2220      	movs	r2, #32
 800b1d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800b1d4:	2303      	movs	r3, #3
 800b1d6:	e03d      	b.n	800b254 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b1d8:	69fb      	ldr	r3, [r7, #28]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d10b      	bne.n	800b1f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b1de:	69bb      	ldr	r3, [r7, #24]
 800b1e0:	881b      	ldrh	r3, [r3, #0]
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b1ec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b1ee:	69bb      	ldr	r3, [r7, #24]
 800b1f0:	3302      	adds	r3, #2
 800b1f2:	61bb      	str	r3, [r7, #24]
 800b1f4:	e007      	b.n	800b206 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b1f6:	69fb      	ldr	r3, [r7, #28]
 800b1f8:	781a      	ldrb	r2, [r3, #0]
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b200:	69fb      	ldr	r3, [r7, #28]
 800b202:	3301      	adds	r3, #1
 800b204:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b20c:	b29b      	uxth	r3, r3
 800b20e:	3b01      	subs	r3, #1
 800b210:	b29a      	uxth	r2, r3
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b21e:	b29b      	uxth	r3, r3
 800b220:	2b00      	cmp	r3, #0
 800b222:	d1c8      	bne.n	800b1b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	9300      	str	r3, [sp, #0]
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	2200      	movs	r2, #0
 800b22c:	2140      	movs	r1, #64	; 0x40
 800b22e:	68f8      	ldr	r0, [r7, #12]
 800b230:	f000 fec8 	bl	800bfc4 <UART_WaitOnFlagUntilTimeout>
 800b234:	4603      	mov	r3, r0
 800b236:	2b00      	cmp	r3, #0
 800b238:	d005      	beq.n	800b246 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	2220      	movs	r2, #32
 800b23e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800b242:	2303      	movs	r3, #3
 800b244:	e006      	b.n	800b254 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2220      	movs	r2, #32
 800b24a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800b24e:	2300      	movs	r3, #0
 800b250:	e000      	b.n	800b254 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b252:	2302      	movs	r3, #2
  }
}
 800b254:	4618      	mov	r0, r3
 800b256:	3720      	adds	r7, #32
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}

0800b25c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b25c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b260:	b092      	sub	sp, #72	; 0x48
 800b262:	af00      	add	r7, sp, #0
 800b264:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b266:	2300      	movs	r3, #0
 800b268:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	689a      	ldr	r2, [r3, #8]
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	691b      	ldr	r3, [r3, #16]
 800b274:	431a      	orrs	r2, r3
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	695b      	ldr	r3, [r3, #20]
 800b27a:	431a      	orrs	r2, r3
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	69db      	ldr	r3, [r3, #28]
 800b280:	4313      	orrs	r3, r2
 800b282:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	681a      	ldr	r2, [r3, #0]
 800b28a:	4bbe      	ldr	r3, [pc, #760]	; (800b584 <UART_SetConfig+0x328>)
 800b28c:	4013      	ands	r3, r2
 800b28e:	697a      	ldr	r2, [r7, #20]
 800b290:	6812      	ldr	r2, [r2, #0]
 800b292:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b294:	430b      	orrs	r3, r1
 800b296:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	68da      	ldr	r2, [r3, #12]
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	430a      	orrs	r2, r1
 800b2ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	699b      	ldr	r3, [r3, #24]
 800b2b2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	4ab3      	ldr	r2, [pc, #716]	; (800b588 <UART_SetConfig+0x32c>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d004      	beq.n	800b2c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	6a1b      	ldr	r3, [r3, #32]
 800b2c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	689a      	ldr	r2, [r3, #8]
 800b2ce:	4baf      	ldr	r3, [pc, #700]	; (800b58c <UART_SetConfig+0x330>)
 800b2d0:	4013      	ands	r3, r2
 800b2d2:	697a      	ldr	r2, [r7, #20]
 800b2d4:	6812      	ldr	r2, [r2, #0]
 800b2d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b2d8:	430b      	orrs	r3, r1
 800b2da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e2:	f023 010f 	bic.w	r1, r3, #15
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	430a      	orrs	r2, r1
 800b2f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	4aa6      	ldr	r2, [pc, #664]	; (800b590 <UART_SetConfig+0x334>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d177      	bne.n	800b3ec <UART_SetConfig+0x190>
 800b2fc:	4ba5      	ldr	r3, [pc, #660]	; (800b594 <UART_SetConfig+0x338>)
 800b2fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b300:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b304:	2b28      	cmp	r3, #40	; 0x28
 800b306:	d86d      	bhi.n	800b3e4 <UART_SetConfig+0x188>
 800b308:	a201      	add	r2, pc, #4	; (adr r2, 800b310 <UART_SetConfig+0xb4>)
 800b30a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b30e:	bf00      	nop
 800b310:	0800b3b5 	.word	0x0800b3b5
 800b314:	0800b3e5 	.word	0x0800b3e5
 800b318:	0800b3e5 	.word	0x0800b3e5
 800b31c:	0800b3e5 	.word	0x0800b3e5
 800b320:	0800b3e5 	.word	0x0800b3e5
 800b324:	0800b3e5 	.word	0x0800b3e5
 800b328:	0800b3e5 	.word	0x0800b3e5
 800b32c:	0800b3e5 	.word	0x0800b3e5
 800b330:	0800b3bd 	.word	0x0800b3bd
 800b334:	0800b3e5 	.word	0x0800b3e5
 800b338:	0800b3e5 	.word	0x0800b3e5
 800b33c:	0800b3e5 	.word	0x0800b3e5
 800b340:	0800b3e5 	.word	0x0800b3e5
 800b344:	0800b3e5 	.word	0x0800b3e5
 800b348:	0800b3e5 	.word	0x0800b3e5
 800b34c:	0800b3e5 	.word	0x0800b3e5
 800b350:	0800b3c5 	.word	0x0800b3c5
 800b354:	0800b3e5 	.word	0x0800b3e5
 800b358:	0800b3e5 	.word	0x0800b3e5
 800b35c:	0800b3e5 	.word	0x0800b3e5
 800b360:	0800b3e5 	.word	0x0800b3e5
 800b364:	0800b3e5 	.word	0x0800b3e5
 800b368:	0800b3e5 	.word	0x0800b3e5
 800b36c:	0800b3e5 	.word	0x0800b3e5
 800b370:	0800b3cd 	.word	0x0800b3cd
 800b374:	0800b3e5 	.word	0x0800b3e5
 800b378:	0800b3e5 	.word	0x0800b3e5
 800b37c:	0800b3e5 	.word	0x0800b3e5
 800b380:	0800b3e5 	.word	0x0800b3e5
 800b384:	0800b3e5 	.word	0x0800b3e5
 800b388:	0800b3e5 	.word	0x0800b3e5
 800b38c:	0800b3e5 	.word	0x0800b3e5
 800b390:	0800b3d5 	.word	0x0800b3d5
 800b394:	0800b3e5 	.word	0x0800b3e5
 800b398:	0800b3e5 	.word	0x0800b3e5
 800b39c:	0800b3e5 	.word	0x0800b3e5
 800b3a0:	0800b3e5 	.word	0x0800b3e5
 800b3a4:	0800b3e5 	.word	0x0800b3e5
 800b3a8:	0800b3e5 	.word	0x0800b3e5
 800b3ac:	0800b3e5 	.word	0x0800b3e5
 800b3b0:	0800b3dd 	.word	0x0800b3dd
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3ba:	e222      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b3bc:	2304      	movs	r3, #4
 800b3be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3c2:	e21e      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b3c4:	2308      	movs	r3, #8
 800b3c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3ca:	e21a      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b3cc:	2310      	movs	r3, #16
 800b3ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3d2:	e216      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b3d4:	2320      	movs	r3, #32
 800b3d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3da:	e212      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b3dc:	2340      	movs	r3, #64	; 0x40
 800b3de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3e2:	e20e      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b3e4:	2380      	movs	r3, #128	; 0x80
 800b3e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3ea:	e20a      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4a69      	ldr	r2, [pc, #420]	; (800b598 <UART_SetConfig+0x33c>)
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d130      	bne.n	800b458 <UART_SetConfig+0x1fc>
 800b3f6:	4b67      	ldr	r3, [pc, #412]	; (800b594 <UART_SetConfig+0x338>)
 800b3f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3fa:	f003 0307 	and.w	r3, r3, #7
 800b3fe:	2b05      	cmp	r3, #5
 800b400:	d826      	bhi.n	800b450 <UART_SetConfig+0x1f4>
 800b402:	a201      	add	r2, pc, #4	; (adr r2, 800b408 <UART_SetConfig+0x1ac>)
 800b404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b408:	0800b421 	.word	0x0800b421
 800b40c:	0800b429 	.word	0x0800b429
 800b410:	0800b431 	.word	0x0800b431
 800b414:	0800b439 	.word	0x0800b439
 800b418:	0800b441 	.word	0x0800b441
 800b41c:	0800b449 	.word	0x0800b449
 800b420:	2300      	movs	r3, #0
 800b422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b426:	e1ec      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b428:	2304      	movs	r3, #4
 800b42a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b42e:	e1e8      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b430:	2308      	movs	r3, #8
 800b432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b436:	e1e4      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b438:	2310      	movs	r3, #16
 800b43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b43e:	e1e0      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b440:	2320      	movs	r3, #32
 800b442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b446:	e1dc      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b448:	2340      	movs	r3, #64	; 0x40
 800b44a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b44e:	e1d8      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b450:	2380      	movs	r3, #128	; 0x80
 800b452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b456:	e1d4      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4a4f      	ldr	r2, [pc, #316]	; (800b59c <UART_SetConfig+0x340>)
 800b45e:	4293      	cmp	r3, r2
 800b460:	d130      	bne.n	800b4c4 <UART_SetConfig+0x268>
 800b462:	4b4c      	ldr	r3, [pc, #304]	; (800b594 <UART_SetConfig+0x338>)
 800b464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b466:	f003 0307 	and.w	r3, r3, #7
 800b46a:	2b05      	cmp	r3, #5
 800b46c:	d826      	bhi.n	800b4bc <UART_SetConfig+0x260>
 800b46e:	a201      	add	r2, pc, #4	; (adr r2, 800b474 <UART_SetConfig+0x218>)
 800b470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b474:	0800b48d 	.word	0x0800b48d
 800b478:	0800b495 	.word	0x0800b495
 800b47c:	0800b49d 	.word	0x0800b49d
 800b480:	0800b4a5 	.word	0x0800b4a5
 800b484:	0800b4ad 	.word	0x0800b4ad
 800b488:	0800b4b5 	.word	0x0800b4b5
 800b48c:	2300      	movs	r3, #0
 800b48e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b492:	e1b6      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b494:	2304      	movs	r3, #4
 800b496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b49a:	e1b2      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b49c:	2308      	movs	r3, #8
 800b49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4a2:	e1ae      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b4a4:	2310      	movs	r3, #16
 800b4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4aa:	e1aa      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b4ac:	2320      	movs	r3, #32
 800b4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4b2:	e1a6      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b4b4:	2340      	movs	r3, #64	; 0x40
 800b4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4ba:	e1a2      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b4bc:	2380      	movs	r3, #128	; 0x80
 800b4be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4c2:	e19e      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	4a35      	ldr	r2, [pc, #212]	; (800b5a0 <UART_SetConfig+0x344>)
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d130      	bne.n	800b530 <UART_SetConfig+0x2d4>
 800b4ce:	4b31      	ldr	r3, [pc, #196]	; (800b594 <UART_SetConfig+0x338>)
 800b4d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4d2:	f003 0307 	and.w	r3, r3, #7
 800b4d6:	2b05      	cmp	r3, #5
 800b4d8:	d826      	bhi.n	800b528 <UART_SetConfig+0x2cc>
 800b4da:	a201      	add	r2, pc, #4	; (adr r2, 800b4e0 <UART_SetConfig+0x284>)
 800b4dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4e0:	0800b4f9 	.word	0x0800b4f9
 800b4e4:	0800b501 	.word	0x0800b501
 800b4e8:	0800b509 	.word	0x0800b509
 800b4ec:	0800b511 	.word	0x0800b511
 800b4f0:	0800b519 	.word	0x0800b519
 800b4f4:	0800b521 	.word	0x0800b521
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4fe:	e180      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b500:	2304      	movs	r3, #4
 800b502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b506:	e17c      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b508:	2308      	movs	r3, #8
 800b50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b50e:	e178      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b510:	2310      	movs	r3, #16
 800b512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b516:	e174      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b518:	2320      	movs	r3, #32
 800b51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b51e:	e170      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b520:	2340      	movs	r3, #64	; 0x40
 800b522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b526:	e16c      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b528:	2380      	movs	r3, #128	; 0x80
 800b52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b52e:	e168      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	4a1b      	ldr	r2, [pc, #108]	; (800b5a4 <UART_SetConfig+0x348>)
 800b536:	4293      	cmp	r3, r2
 800b538:	d142      	bne.n	800b5c0 <UART_SetConfig+0x364>
 800b53a:	4b16      	ldr	r3, [pc, #88]	; (800b594 <UART_SetConfig+0x338>)
 800b53c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b53e:	f003 0307 	and.w	r3, r3, #7
 800b542:	2b05      	cmp	r3, #5
 800b544:	d838      	bhi.n	800b5b8 <UART_SetConfig+0x35c>
 800b546:	a201      	add	r2, pc, #4	; (adr r2, 800b54c <UART_SetConfig+0x2f0>)
 800b548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b54c:	0800b565 	.word	0x0800b565
 800b550:	0800b56d 	.word	0x0800b56d
 800b554:	0800b575 	.word	0x0800b575
 800b558:	0800b57d 	.word	0x0800b57d
 800b55c:	0800b5a9 	.word	0x0800b5a9
 800b560:	0800b5b1 	.word	0x0800b5b1
 800b564:	2300      	movs	r3, #0
 800b566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b56a:	e14a      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b56c:	2304      	movs	r3, #4
 800b56e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b572:	e146      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b574:	2308      	movs	r3, #8
 800b576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b57a:	e142      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b57c:	2310      	movs	r3, #16
 800b57e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b582:	e13e      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b584:	cfff69f3 	.word	0xcfff69f3
 800b588:	58000c00 	.word	0x58000c00
 800b58c:	11fff4ff 	.word	0x11fff4ff
 800b590:	40011000 	.word	0x40011000
 800b594:	58024400 	.word	0x58024400
 800b598:	40004400 	.word	0x40004400
 800b59c:	40004800 	.word	0x40004800
 800b5a0:	40004c00 	.word	0x40004c00
 800b5a4:	40005000 	.word	0x40005000
 800b5a8:	2320      	movs	r3, #32
 800b5aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5ae:	e128      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b5b0:	2340      	movs	r3, #64	; 0x40
 800b5b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5b6:	e124      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b5b8:	2380      	movs	r3, #128	; 0x80
 800b5ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5be:	e120      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	4acb      	ldr	r2, [pc, #812]	; (800b8f4 <UART_SetConfig+0x698>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d176      	bne.n	800b6b8 <UART_SetConfig+0x45c>
 800b5ca:	4bcb      	ldr	r3, [pc, #812]	; (800b8f8 <UART_SetConfig+0x69c>)
 800b5cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b5d2:	2b28      	cmp	r3, #40	; 0x28
 800b5d4:	d86c      	bhi.n	800b6b0 <UART_SetConfig+0x454>
 800b5d6:	a201      	add	r2, pc, #4	; (adr r2, 800b5dc <UART_SetConfig+0x380>)
 800b5d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5dc:	0800b681 	.word	0x0800b681
 800b5e0:	0800b6b1 	.word	0x0800b6b1
 800b5e4:	0800b6b1 	.word	0x0800b6b1
 800b5e8:	0800b6b1 	.word	0x0800b6b1
 800b5ec:	0800b6b1 	.word	0x0800b6b1
 800b5f0:	0800b6b1 	.word	0x0800b6b1
 800b5f4:	0800b6b1 	.word	0x0800b6b1
 800b5f8:	0800b6b1 	.word	0x0800b6b1
 800b5fc:	0800b689 	.word	0x0800b689
 800b600:	0800b6b1 	.word	0x0800b6b1
 800b604:	0800b6b1 	.word	0x0800b6b1
 800b608:	0800b6b1 	.word	0x0800b6b1
 800b60c:	0800b6b1 	.word	0x0800b6b1
 800b610:	0800b6b1 	.word	0x0800b6b1
 800b614:	0800b6b1 	.word	0x0800b6b1
 800b618:	0800b6b1 	.word	0x0800b6b1
 800b61c:	0800b691 	.word	0x0800b691
 800b620:	0800b6b1 	.word	0x0800b6b1
 800b624:	0800b6b1 	.word	0x0800b6b1
 800b628:	0800b6b1 	.word	0x0800b6b1
 800b62c:	0800b6b1 	.word	0x0800b6b1
 800b630:	0800b6b1 	.word	0x0800b6b1
 800b634:	0800b6b1 	.word	0x0800b6b1
 800b638:	0800b6b1 	.word	0x0800b6b1
 800b63c:	0800b699 	.word	0x0800b699
 800b640:	0800b6b1 	.word	0x0800b6b1
 800b644:	0800b6b1 	.word	0x0800b6b1
 800b648:	0800b6b1 	.word	0x0800b6b1
 800b64c:	0800b6b1 	.word	0x0800b6b1
 800b650:	0800b6b1 	.word	0x0800b6b1
 800b654:	0800b6b1 	.word	0x0800b6b1
 800b658:	0800b6b1 	.word	0x0800b6b1
 800b65c:	0800b6a1 	.word	0x0800b6a1
 800b660:	0800b6b1 	.word	0x0800b6b1
 800b664:	0800b6b1 	.word	0x0800b6b1
 800b668:	0800b6b1 	.word	0x0800b6b1
 800b66c:	0800b6b1 	.word	0x0800b6b1
 800b670:	0800b6b1 	.word	0x0800b6b1
 800b674:	0800b6b1 	.word	0x0800b6b1
 800b678:	0800b6b1 	.word	0x0800b6b1
 800b67c:	0800b6a9 	.word	0x0800b6a9
 800b680:	2301      	movs	r3, #1
 800b682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b686:	e0bc      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b688:	2304      	movs	r3, #4
 800b68a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b68e:	e0b8      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b690:	2308      	movs	r3, #8
 800b692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b696:	e0b4      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b698:	2310      	movs	r3, #16
 800b69a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b69e:	e0b0      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b6a0:	2320      	movs	r3, #32
 800b6a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6a6:	e0ac      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b6a8:	2340      	movs	r3, #64	; 0x40
 800b6aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6ae:	e0a8      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b6b0:	2380      	movs	r3, #128	; 0x80
 800b6b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6b6:	e0a4      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4a8f      	ldr	r2, [pc, #572]	; (800b8fc <UART_SetConfig+0x6a0>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d130      	bne.n	800b724 <UART_SetConfig+0x4c8>
 800b6c2:	4b8d      	ldr	r3, [pc, #564]	; (800b8f8 <UART_SetConfig+0x69c>)
 800b6c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6c6:	f003 0307 	and.w	r3, r3, #7
 800b6ca:	2b05      	cmp	r3, #5
 800b6cc:	d826      	bhi.n	800b71c <UART_SetConfig+0x4c0>
 800b6ce:	a201      	add	r2, pc, #4	; (adr r2, 800b6d4 <UART_SetConfig+0x478>)
 800b6d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6d4:	0800b6ed 	.word	0x0800b6ed
 800b6d8:	0800b6f5 	.word	0x0800b6f5
 800b6dc:	0800b6fd 	.word	0x0800b6fd
 800b6e0:	0800b705 	.word	0x0800b705
 800b6e4:	0800b70d 	.word	0x0800b70d
 800b6e8:	0800b715 	.word	0x0800b715
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6f2:	e086      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b6f4:	2304      	movs	r3, #4
 800b6f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6fa:	e082      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b6fc:	2308      	movs	r3, #8
 800b6fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b702:	e07e      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b704:	2310      	movs	r3, #16
 800b706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b70a:	e07a      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b70c:	2320      	movs	r3, #32
 800b70e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b712:	e076      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b714:	2340      	movs	r3, #64	; 0x40
 800b716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b71a:	e072      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b71c:	2380      	movs	r3, #128	; 0x80
 800b71e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b722:	e06e      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	4a75      	ldr	r2, [pc, #468]	; (800b900 <UART_SetConfig+0x6a4>)
 800b72a:	4293      	cmp	r3, r2
 800b72c:	d130      	bne.n	800b790 <UART_SetConfig+0x534>
 800b72e:	4b72      	ldr	r3, [pc, #456]	; (800b8f8 <UART_SetConfig+0x69c>)
 800b730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b732:	f003 0307 	and.w	r3, r3, #7
 800b736:	2b05      	cmp	r3, #5
 800b738:	d826      	bhi.n	800b788 <UART_SetConfig+0x52c>
 800b73a:	a201      	add	r2, pc, #4	; (adr r2, 800b740 <UART_SetConfig+0x4e4>)
 800b73c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b740:	0800b759 	.word	0x0800b759
 800b744:	0800b761 	.word	0x0800b761
 800b748:	0800b769 	.word	0x0800b769
 800b74c:	0800b771 	.word	0x0800b771
 800b750:	0800b779 	.word	0x0800b779
 800b754:	0800b781 	.word	0x0800b781
 800b758:	2300      	movs	r3, #0
 800b75a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b75e:	e050      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b760:	2304      	movs	r3, #4
 800b762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b766:	e04c      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b768:	2308      	movs	r3, #8
 800b76a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b76e:	e048      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b770:	2310      	movs	r3, #16
 800b772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b776:	e044      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b778:	2320      	movs	r3, #32
 800b77a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b77e:	e040      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b780:	2340      	movs	r3, #64	; 0x40
 800b782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b786:	e03c      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b788:	2380      	movs	r3, #128	; 0x80
 800b78a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b78e:	e038      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	4a5b      	ldr	r2, [pc, #364]	; (800b904 <UART_SetConfig+0x6a8>)
 800b796:	4293      	cmp	r3, r2
 800b798:	d130      	bne.n	800b7fc <UART_SetConfig+0x5a0>
 800b79a:	4b57      	ldr	r3, [pc, #348]	; (800b8f8 <UART_SetConfig+0x69c>)
 800b79c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b79e:	f003 0307 	and.w	r3, r3, #7
 800b7a2:	2b05      	cmp	r3, #5
 800b7a4:	d826      	bhi.n	800b7f4 <UART_SetConfig+0x598>
 800b7a6:	a201      	add	r2, pc, #4	; (adr r2, 800b7ac <UART_SetConfig+0x550>)
 800b7a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7ac:	0800b7c5 	.word	0x0800b7c5
 800b7b0:	0800b7cd 	.word	0x0800b7cd
 800b7b4:	0800b7d5 	.word	0x0800b7d5
 800b7b8:	0800b7dd 	.word	0x0800b7dd
 800b7bc:	0800b7e5 	.word	0x0800b7e5
 800b7c0:	0800b7ed 	.word	0x0800b7ed
 800b7c4:	2302      	movs	r3, #2
 800b7c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7ca:	e01a      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b7cc:	2304      	movs	r3, #4
 800b7ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7d2:	e016      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b7d4:	2308      	movs	r3, #8
 800b7d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7da:	e012      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b7dc:	2310      	movs	r3, #16
 800b7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7e2:	e00e      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b7e4:	2320      	movs	r3, #32
 800b7e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7ea:	e00a      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b7ec:	2340      	movs	r3, #64	; 0x40
 800b7ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7f2:	e006      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b7f4:	2380      	movs	r3, #128	; 0x80
 800b7f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7fa:	e002      	b.n	800b802 <UART_SetConfig+0x5a6>
 800b7fc:	2380      	movs	r3, #128	; 0x80
 800b7fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	4a3f      	ldr	r2, [pc, #252]	; (800b904 <UART_SetConfig+0x6a8>)
 800b808:	4293      	cmp	r3, r2
 800b80a:	f040 80f8 	bne.w	800b9fe <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b80e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b812:	2b20      	cmp	r3, #32
 800b814:	dc46      	bgt.n	800b8a4 <UART_SetConfig+0x648>
 800b816:	2b02      	cmp	r3, #2
 800b818:	f2c0 8082 	blt.w	800b920 <UART_SetConfig+0x6c4>
 800b81c:	3b02      	subs	r3, #2
 800b81e:	2b1e      	cmp	r3, #30
 800b820:	d87e      	bhi.n	800b920 <UART_SetConfig+0x6c4>
 800b822:	a201      	add	r2, pc, #4	; (adr r2, 800b828 <UART_SetConfig+0x5cc>)
 800b824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b828:	0800b8ab 	.word	0x0800b8ab
 800b82c:	0800b921 	.word	0x0800b921
 800b830:	0800b8b3 	.word	0x0800b8b3
 800b834:	0800b921 	.word	0x0800b921
 800b838:	0800b921 	.word	0x0800b921
 800b83c:	0800b921 	.word	0x0800b921
 800b840:	0800b8c3 	.word	0x0800b8c3
 800b844:	0800b921 	.word	0x0800b921
 800b848:	0800b921 	.word	0x0800b921
 800b84c:	0800b921 	.word	0x0800b921
 800b850:	0800b921 	.word	0x0800b921
 800b854:	0800b921 	.word	0x0800b921
 800b858:	0800b921 	.word	0x0800b921
 800b85c:	0800b921 	.word	0x0800b921
 800b860:	0800b8d3 	.word	0x0800b8d3
 800b864:	0800b921 	.word	0x0800b921
 800b868:	0800b921 	.word	0x0800b921
 800b86c:	0800b921 	.word	0x0800b921
 800b870:	0800b921 	.word	0x0800b921
 800b874:	0800b921 	.word	0x0800b921
 800b878:	0800b921 	.word	0x0800b921
 800b87c:	0800b921 	.word	0x0800b921
 800b880:	0800b921 	.word	0x0800b921
 800b884:	0800b921 	.word	0x0800b921
 800b888:	0800b921 	.word	0x0800b921
 800b88c:	0800b921 	.word	0x0800b921
 800b890:	0800b921 	.word	0x0800b921
 800b894:	0800b921 	.word	0x0800b921
 800b898:	0800b921 	.word	0x0800b921
 800b89c:	0800b921 	.word	0x0800b921
 800b8a0:	0800b913 	.word	0x0800b913
 800b8a4:	2b40      	cmp	r3, #64	; 0x40
 800b8a6:	d037      	beq.n	800b918 <UART_SetConfig+0x6bc>
 800b8a8:	e03a      	b.n	800b920 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b8aa:	f7fe fb19 	bl	8009ee0 <HAL_RCCEx_GetD3PCLK1Freq>
 800b8ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b8b0:	e03c      	b.n	800b92c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7fe fb28 	bl	8009f0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8c0:	e034      	b.n	800b92c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8c2:	f107 0318 	add.w	r3, r7, #24
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f7fe fc74 	bl	800a1b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b8cc:	69fb      	ldr	r3, [r7, #28]
 800b8ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8d0:	e02c      	b.n	800b92c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8d2:	4b09      	ldr	r3, [pc, #36]	; (800b8f8 <UART_SetConfig+0x69c>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	f003 0320 	and.w	r3, r3, #32
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d016      	beq.n	800b90c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b8de:	4b06      	ldr	r3, [pc, #24]	; (800b8f8 <UART_SetConfig+0x69c>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	08db      	lsrs	r3, r3, #3
 800b8e4:	f003 0303 	and.w	r3, r3, #3
 800b8e8:	4a07      	ldr	r2, [pc, #28]	; (800b908 <UART_SetConfig+0x6ac>)
 800b8ea:	fa22 f303 	lsr.w	r3, r2, r3
 800b8ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b8f0:	e01c      	b.n	800b92c <UART_SetConfig+0x6d0>
 800b8f2:	bf00      	nop
 800b8f4:	40011400 	.word	0x40011400
 800b8f8:	58024400 	.word	0x58024400
 800b8fc:	40007800 	.word	0x40007800
 800b900:	40007c00 	.word	0x40007c00
 800b904:	58000c00 	.word	0x58000c00
 800b908:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b90c:	4b9d      	ldr	r3, [pc, #628]	; (800bb84 <UART_SetConfig+0x928>)
 800b90e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b910:	e00c      	b.n	800b92c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b912:	4b9d      	ldr	r3, [pc, #628]	; (800bb88 <UART_SetConfig+0x92c>)
 800b914:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b916:	e009      	b.n	800b92c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b918:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b91c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b91e:	e005      	b.n	800b92c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b920:	2300      	movs	r3, #0
 800b922:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b924:	2301      	movs	r3, #1
 800b926:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b92a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b92c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b92e:	2b00      	cmp	r3, #0
 800b930:	f000 81de 	beq.w	800bcf0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b938:	4a94      	ldr	r2, [pc, #592]	; (800bb8c <UART_SetConfig+0x930>)
 800b93a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b93e:	461a      	mov	r2, r3
 800b940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b942:	fbb3 f3f2 	udiv	r3, r3, r2
 800b946:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	685a      	ldr	r2, [r3, #4]
 800b94c:	4613      	mov	r3, r2
 800b94e:	005b      	lsls	r3, r3, #1
 800b950:	4413      	add	r3, r2
 800b952:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b954:	429a      	cmp	r2, r3
 800b956:	d305      	bcc.n	800b964 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b95e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b960:	429a      	cmp	r2, r3
 800b962:	d903      	bls.n	800b96c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b964:	2301      	movs	r3, #1
 800b966:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b96a:	e1c1      	b.n	800bcf0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b96c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b96e:	2200      	movs	r2, #0
 800b970:	60bb      	str	r3, [r7, #8]
 800b972:	60fa      	str	r2, [r7, #12]
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b978:	4a84      	ldr	r2, [pc, #528]	; (800bb8c <UART_SetConfig+0x930>)
 800b97a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b97e:	b29b      	uxth	r3, r3
 800b980:	2200      	movs	r2, #0
 800b982:	603b      	str	r3, [r7, #0]
 800b984:	607a      	str	r2, [r7, #4]
 800b986:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b98a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b98e:	f7f5 f99f 	bl	8000cd0 <__aeabi_uldivmod>
 800b992:	4602      	mov	r2, r0
 800b994:	460b      	mov	r3, r1
 800b996:	4610      	mov	r0, r2
 800b998:	4619      	mov	r1, r3
 800b99a:	f04f 0200 	mov.w	r2, #0
 800b99e:	f04f 0300 	mov.w	r3, #0
 800b9a2:	020b      	lsls	r3, r1, #8
 800b9a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b9a8:	0202      	lsls	r2, r0, #8
 800b9aa:	6979      	ldr	r1, [r7, #20]
 800b9ac:	6849      	ldr	r1, [r1, #4]
 800b9ae:	0849      	lsrs	r1, r1, #1
 800b9b0:	2000      	movs	r0, #0
 800b9b2:	460c      	mov	r4, r1
 800b9b4:	4605      	mov	r5, r0
 800b9b6:	eb12 0804 	adds.w	r8, r2, r4
 800b9ba:	eb43 0905 	adc.w	r9, r3, r5
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	469a      	mov	sl, r3
 800b9c6:	4693      	mov	fp, r2
 800b9c8:	4652      	mov	r2, sl
 800b9ca:	465b      	mov	r3, fp
 800b9cc:	4640      	mov	r0, r8
 800b9ce:	4649      	mov	r1, r9
 800b9d0:	f7f5 f97e 	bl	8000cd0 <__aeabi_uldivmod>
 800b9d4:	4602      	mov	r2, r0
 800b9d6:	460b      	mov	r3, r1
 800b9d8:	4613      	mov	r3, r2
 800b9da:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b9e2:	d308      	bcc.n	800b9f6 <UART_SetConfig+0x79a>
 800b9e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b9ea:	d204      	bcs.n	800b9f6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9f2:	60da      	str	r2, [r3, #12]
 800b9f4:	e17c      	b.n	800bcf0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b9fc:	e178      	b.n	800bcf0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	69db      	ldr	r3, [r3, #28]
 800ba02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba06:	f040 80c5 	bne.w	800bb94 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ba0a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ba0e:	2b20      	cmp	r3, #32
 800ba10:	dc48      	bgt.n	800baa4 <UART_SetConfig+0x848>
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	db7b      	blt.n	800bb0e <UART_SetConfig+0x8b2>
 800ba16:	2b20      	cmp	r3, #32
 800ba18:	d879      	bhi.n	800bb0e <UART_SetConfig+0x8b2>
 800ba1a:	a201      	add	r2, pc, #4	; (adr r2, 800ba20 <UART_SetConfig+0x7c4>)
 800ba1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba20:	0800baab 	.word	0x0800baab
 800ba24:	0800bab3 	.word	0x0800bab3
 800ba28:	0800bb0f 	.word	0x0800bb0f
 800ba2c:	0800bb0f 	.word	0x0800bb0f
 800ba30:	0800babb 	.word	0x0800babb
 800ba34:	0800bb0f 	.word	0x0800bb0f
 800ba38:	0800bb0f 	.word	0x0800bb0f
 800ba3c:	0800bb0f 	.word	0x0800bb0f
 800ba40:	0800bacb 	.word	0x0800bacb
 800ba44:	0800bb0f 	.word	0x0800bb0f
 800ba48:	0800bb0f 	.word	0x0800bb0f
 800ba4c:	0800bb0f 	.word	0x0800bb0f
 800ba50:	0800bb0f 	.word	0x0800bb0f
 800ba54:	0800bb0f 	.word	0x0800bb0f
 800ba58:	0800bb0f 	.word	0x0800bb0f
 800ba5c:	0800bb0f 	.word	0x0800bb0f
 800ba60:	0800badb 	.word	0x0800badb
 800ba64:	0800bb0f 	.word	0x0800bb0f
 800ba68:	0800bb0f 	.word	0x0800bb0f
 800ba6c:	0800bb0f 	.word	0x0800bb0f
 800ba70:	0800bb0f 	.word	0x0800bb0f
 800ba74:	0800bb0f 	.word	0x0800bb0f
 800ba78:	0800bb0f 	.word	0x0800bb0f
 800ba7c:	0800bb0f 	.word	0x0800bb0f
 800ba80:	0800bb0f 	.word	0x0800bb0f
 800ba84:	0800bb0f 	.word	0x0800bb0f
 800ba88:	0800bb0f 	.word	0x0800bb0f
 800ba8c:	0800bb0f 	.word	0x0800bb0f
 800ba90:	0800bb0f 	.word	0x0800bb0f
 800ba94:	0800bb0f 	.word	0x0800bb0f
 800ba98:	0800bb0f 	.word	0x0800bb0f
 800ba9c:	0800bb0f 	.word	0x0800bb0f
 800baa0:	0800bb01 	.word	0x0800bb01
 800baa4:	2b40      	cmp	r3, #64	; 0x40
 800baa6:	d02e      	beq.n	800bb06 <UART_SetConfig+0x8aa>
 800baa8:	e031      	b.n	800bb0e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800baaa:	f7fc fa47 	bl	8007f3c <HAL_RCC_GetPCLK1Freq>
 800baae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bab0:	e033      	b.n	800bb1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bab2:	f7fc fa59 	bl	8007f68 <HAL_RCC_GetPCLK2Freq>
 800bab6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bab8:	e02f      	b.n	800bb1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800baba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800babe:	4618      	mov	r0, r3
 800bac0:	f7fe fa24 	bl	8009f0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bac8:	e027      	b.n	800bb1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800baca:	f107 0318 	add.w	r3, r7, #24
 800bace:	4618      	mov	r0, r3
 800bad0:	f7fe fb70 	bl	800a1b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bad4:	69fb      	ldr	r3, [r7, #28]
 800bad6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bad8:	e01f      	b.n	800bb1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bada:	4b2d      	ldr	r3, [pc, #180]	; (800bb90 <UART_SetConfig+0x934>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f003 0320 	and.w	r3, r3, #32
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d009      	beq.n	800bafa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bae6:	4b2a      	ldr	r3, [pc, #168]	; (800bb90 <UART_SetConfig+0x934>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	08db      	lsrs	r3, r3, #3
 800baec:	f003 0303 	and.w	r3, r3, #3
 800baf0:	4a24      	ldr	r2, [pc, #144]	; (800bb84 <UART_SetConfig+0x928>)
 800baf2:	fa22 f303 	lsr.w	r3, r2, r3
 800baf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800baf8:	e00f      	b.n	800bb1a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800bafa:	4b22      	ldr	r3, [pc, #136]	; (800bb84 <UART_SetConfig+0x928>)
 800bafc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bafe:	e00c      	b.n	800bb1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bb00:	4b21      	ldr	r3, [pc, #132]	; (800bb88 <UART_SetConfig+0x92c>)
 800bb02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb04:	e009      	b.n	800bb1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb0c:	e005      	b.n	800bb1a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bb12:	2301      	movs	r3, #1
 800bb14:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800bb18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bb1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	f000 80e7 	beq.w	800bcf0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb26:	4a19      	ldr	r2, [pc, #100]	; (800bb8c <UART_SetConfig+0x930>)
 800bb28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb2c:	461a      	mov	r2, r3
 800bb2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb30:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb34:	005a      	lsls	r2, r3, #1
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	685b      	ldr	r3, [r3, #4]
 800bb3a:	085b      	lsrs	r3, r3, #1
 800bb3c:	441a      	add	r2, r3
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	685b      	ldr	r3, [r3, #4]
 800bb42:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb46:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb4a:	2b0f      	cmp	r3, #15
 800bb4c:	d916      	bls.n	800bb7c <UART_SetConfig+0x920>
 800bb4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb54:	d212      	bcs.n	800bb7c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bb56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb58:	b29b      	uxth	r3, r3
 800bb5a:	f023 030f 	bic.w	r3, r3, #15
 800bb5e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bb60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb62:	085b      	lsrs	r3, r3, #1
 800bb64:	b29b      	uxth	r3, r3
 800bb66:	f003 0307 	and.w	r3, r3, #7
 800bb6a:	b29a      	uxth	r2, r3
 800bb6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800bb78:	60da      	str	r2, [r3, #12]
 800bb7a:	e0b9      	b.n	800bcf0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800bb82:	e0b5      	b.n	800bcf0 <UART_SetConfig+0xa94>
 800bb84:	03d09000 	.word	0x03d09000
 800bb88:	003d0900 	.word	0x003d0900
 800bb8c:	0800f30c 	.word	0x0800f30c
 800bb90:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800bb94:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bb98:	2b20      	cmp	r3, #32
 800bb9a:	dc49      	bgt.n	800bc30 <UART_SetConfig+0x9d4>
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	db7c      	blt.n	800bc9a <UART_SetConfig+0xa3e>
 800bba0:	2b20      	cmp	r3, #32
 800bba2:	d87a      	bhi.n	800bc9a <UART_SetConfig+0xa3e>
 800bba4:	a201      	add	r2, pc, #4	; (adr r2, 800bbac <UART_SetConfig+0x950>)
 800bba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbaa:	bf00      	nop
 800bbac:	0800bc37 	.word	0x0800bc37
 800bbb0:	0800bc3f 	.word	0x0800bc3f
 800bbb4:	0800bc9b 	.word	0x0800bc9b
 800bbb8:	0800bc9b 	.word	0x0800bc9b
 800bbbc:	0800bc47 	.word	0x0800bc47
 800bbc0:	0800bc9b 	.word	0x0800bc9b
 800bbc4:	0800bc9b 	.word	0x0800bc9b
 800bbc8:	0800bc9b 	.word	0x0800bc9b
 800bbcc:	0800bc57 	.word	0x0800bc57
 800bbd0:	0800bc9b 	.word	0x0800bc9b
 800bbd4:	0800bc9b 	.word	0x0800bc9b
 800bbd8:	0800bc9b 	.word	0x0800bc9b
 800bbdc:	0800bc9b 	.word	0x0800bc9b
 800bbe0:	0800bc9b 	.word	0x0800bc9b
 800bbe4:	0800bc9b 	.word	0x0800bc9b
 800bbe8:	0800bc9b 	.word	0x0800bc9b
 800bbec:	0800bc67 	.word	0x0800bc67
 800bbf0:	0800bc9b 	.word	0x0800bc9b
 800bbf4:	0800bc9b 	.word	0x0800bc9b
 800bbf8:	0800bc9b 	.word	0x0800bc9b
 800bbfc:	0800bc9b 	.word	0x0800bc9b
 800bc00:	0800bc9b 	.word	0x0800bc9b
 800bc04:	0800bc9b 	.word	0x0800bc9b
 800bc08:	0800bc9b 	.word	0x0800bc9b
 800bc0c:	0800bc9b 	.word	0x0800bc9b
 800bc10:	0800bc9b 	.word	0x0800bc9b
 800bc14:	0800bc9b 	.word	0x0800bc9b
 800bc18:	0800bc9b 	.word	0x0800bc9b
 800bc1c:	0800bc9b 	.word	0x0800bc9b
 800bc20:	0800bc9b 	.word	0x0800bc9b
 800bc24:	0800bc9b 	.word	0x0800bc9b
 800bc28:	0800bc9b 	.word	0x0800bc9b
 800bc2c:	0800bc8d 	.word	0x0800bc8d
 800bc30:	2b40      	cmp	r3, #64	; 0x40
 800bc32:	d02e      	beq.n	800bc92 <UART_SetConfig+0xa36>
 800bc34:	e031      	b.n	800bc9a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc36:	f7fc f981 	bl	8007f3c <HAL_RCC_GetPCLK1Freq>
 800bc3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bc3c:	e033      	b.n	800bca6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc3e:	f7fc f993 	bl	8007f68 <HAL_RCC_GetPCLK2Freq>
 800bc42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bc44:	e02f      	b.n	800bca6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f7fe f95e 	bl	8009f0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bc50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc54:	e027      	b.n	800bca6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc56:	f107 0318 	add.w	r3, r7, #24
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7fe faaa 	bl	800a1b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bc60:	69fb      	ldr	r3, [r7, #28]
 800bc62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc64:	e01f      	b.n	800bca6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc66:	4b2d      	ldr	r3, [pc, #180]	; (800bd1c <UART_SetConfig+0xac0>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f003 0320 	and.w	r3, r3, #32
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d009      	beq.n	800bc86 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bc72:	4b2a      	ldr	r3, [pc, #168]	; (800bd1c <UART_SetConfig+0xac0>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	08db      	lsrs	r3, r3, #3
 800bc78:	f003 0303 	and.w	r3, r3, #3
 800bc7c:	4a28      	ldr	r2, [pc, #160]	; (800bd20 <UART_SetConfig+0xac4>)
 800bc7e:	fa22 f303 	lsr.w	r3, r2, r3
 800bc82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bc84:	e00f      	b.n	800bca6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800bc86:	4b26      	ldr	r3, [pc, #152]	; (800bd20 <UART_SetConfig+0xac4>)
 800bc88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc8a:	e00c      	b.n	800bca6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bc8c:	4b25      	ldr	r3, [pc, #148]	; (800bd24 <UART_SetConfig+0xac8>)
 800bc8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc90:	e009      	b.n	800bca6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc98:	e005      	b.n	800bca6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bc9e:	2301      	movs	r3, #1
 800bca0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800bca4:	bf00      	nop
    }

    if (pclk != 0U)
 800bca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d021      	beq.n	800bcf0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb0:	4a1d      	ldr	r2, [pc, #116]	; (800bd28 <UART_SetConfig+0xacc>)
 800bcb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcba:	fbb3 f2f2 	udiv	r2, r3, r2
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	685b      	ldr	r3, [r3, #4]
 800bcc2:	085b      	lsrs	r3, r3, #1
 800bcc4:	441a      	add	r2, r3
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	685b      	ldr	r3, [r3, #4]
 800bcca:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcce:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bcd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd2:	2b0f      	cmp	r3, #15
 800bcd4:	d909      	bls.n	800bcea <UART_SetConfig+0xa8e>
 800bcd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bcdc:	d205      	bcs.n	800bcea <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bcde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bce0:	b29a      	uxth	r2, r3
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	60da      	str	r2, [r3, #12]
 800bce8:	e002      	b.n	800bcf0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bcea:	2301      	movs	r3, #1
 800bcec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	2201      	movs	r2, #1
 800bcf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	2200      	movs	r2, #0
 800bd04:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800bd0c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3748      	adds	r7, #72	; 0x48
 800bd14:	46bd      	mov	sp, r7
 800bd16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bd1a:	bf00      	nop
 800bd1c:	58024400 	.word	0x58024400
 800bd20:	03d09000 	.word	0x03d09000
 800bd24:	003d0900 	.word	0x003d0900
 800bd28:	0800f30c 	.word	0x0800f30c

0800bd2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b083      	sub	sp, #12
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd38:	f003 0301 	and.w	r3, r3, #1
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d00a      	beq.n	800bd56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	685b      	ldr	r3, [r3, #4]
 800bd46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	430a      	orrs	r2, r1
 800bd54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd5a:	f003 0302 	and.w	r3, r3, #2
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d00a      	beq.n	800bd78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	685b      	ldr	r3, [r3, #4]
 800bd68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	430a      	orrs	r2, r1
 800bd76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd7c:	f003 0304 	and.w	r3, r3, #4
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d00a      	beq.n	800bd9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	685b      	ldr	r3, [r3, #4]
 800bd8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	430a      	orrs	r2, r1
 800bd98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd9e:	f003 0308 	and.w	r3, r3, #8
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d00a      	beq.n	800bdbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	685b      	ldr	r3, [r3, #4]
 800bdac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	430a      	orrs	r2, r1
 800bdba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdc0:	f003 0310 	and.w	r3, r3, #16
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d00a      	beq.n	800bdde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	689b      	ldr	r3, [r3, #8]
 800bdce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	430a      	orrs	r2, r1
 800bddc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bde2:	f003 0320 	and.w	r3, r3, #32
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d00a      	beq.n	800be00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	689b      	ldr	r3, [r3, #8]
 800bdf0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	430a      	orrs	r2, r1
 800bdfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d01a      	beq.n	800be42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	685b      	ldr	r3, [r3, #4]
 800be12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	430a      	orrs	r2, r1
 800be20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be2a:	d10a      	bne.n	800be42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	685b      	ldr	r3, [r3, #4]
 800be32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	430a      	orrs	r2, r1
 800be40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d00a      	beq.n	800be64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	685b      	ldr	r3, [r3, #4]
 800be54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	430a      	orrs	r2, r1
 800be62:	605a      	str	r2, [r3, #4]
  }
}
 800be64:	bf00      	nop
 800be66:	370c      	adds	r7, #12
 800be68:	46bd      	mov	sp, r7
 800be6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6e:	4770      	bx	lr

0800be70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b098      	sub	sp, #96	; 0x60
 800be74:	af02      	add	r7, sp, #8
 800be76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2200      	movs	r2, #0
 800be7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800be80:	f7f6 fd68 	bl	8002954 <HAL_GetTick>
 800be84:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	f003 0308 	and.w	r3, r3, #8
 800be90:	2b08      	cmp	r3, #8
 800be92:	d12f      	bne.n	800bef4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800be98:	9300      	str	r3, [sp, #0]
 800be9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be9c:	2200      	movs	r2, #0
 800be9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f000 f88e 	bl	800bfc4 <UART_WaitOnFlagUntilTimeout>
 800bea8:	4603      	mov	r3, r0
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d022      	beq.n	800bef4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beb6:	e853 3f00 	ldrex	r3, [r3]
 800beba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bebe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bec2:	653b      	str	r3, [r7, #80]	; 0x50
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	461a      	mov	r2, r3
 800beca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800becc:	647b      	str	r3, [r7, #68]	; 0x44
 800bece:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bed0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bed2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bed4:	e841 2300 	strex	r3, r2, [r1]
 800bed8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800beda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d1e6      	bne.n	800beae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2220      	movs	r2, #32
 800bee4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2200      	movs	r2, #0
 800beec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bef0:	2303      	movs	r3, #3
 800bef2:	e063      	b.n	800bfbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	f003 0304 	and.w	r3, r3, #4
 800befe:	2b04      	cmp	r3, #4
 800bf00:	d149      	bne.n	800bf96 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf02:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bf06:	9300      	str	r3, [sp, #0]
 800bf08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f000 f857 	bl	800bfc4 <UART_WaitOnFlagUntilTimeout>
 800bf16:	4603      	mov	r3, r0
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d03c      	beq.n	800bf96 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf24:	e853 3f00 	ldrex	r3, [r3]
 800bf28:	623b      	str	r3, [r7, #32]
   return(result);
 800bf2a:	6a3b      	ldr	r3, [r7, #32]
 800bf2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf30:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	461a      	mov	r2, r3
 800bf38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf3a:	633b      	str	r3, [r7, #48]	; 0x30
 800bf3c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf42:	e841 2300 	strex	r3, r2, [r1]
 800bf46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bf48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d1e6      	bne.n	800bf1c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	3308      	adds	r3, #8
 800bf54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf56:	693b      	ldr	r3, [r7, #16]
 800bf58:	e853 3f00 	ldrex	r3, [r3]
 800bf5c:	60fb      	str	r3, [r7, #12]
   return(result);
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	f023 0301 	bic.w	r3, r3, #1
 800bf64:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	3308      	adds	r3, #8
 800bf6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf6e:	61fa      	str	r2, [r7, #28]
 800bf70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf72:	69b9      	ldr	r1, [r7, #24]
 800bf74:	69fa      	ldr	r2, [r7, #28]
 800bf76:	e841 2300 	strex	r3, r2, [r1]
 800bf7a:	617b      	str	r3, [r7, #20]
   return(result);
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d1e5      	bne.n	800bf4e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2220      	movs	r2, #32
 800bf86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf92:	2303      	movs	r3, #3
 800bf94:	e012      	b.n	800bfbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2220      	movs	r2, #32
 800bf9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2220      	movs	r2, #32
 800bfa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bfba:	2300      	movs	r3, #0
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3758      	adds	r7, #88	; 0x58
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b084      	sub	sp, #16
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	60f8      	str	r0, [r7, #12]
 800bfcc:	60b9      	str	r1, [r7, #8]
 800bfce:	603b      	str	r3, [r7, #0]
 800bfd0:	4613      	mov	r3, r2
 800bfd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bfd4:	e049      	b.n	800c06a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bfd6:	69bb      	ldr	r3, [r7, #24]
 800bfd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfdc:	d045      	beq.n	800c06a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bfde:	f7f6 fcb9 	bl	8002954 <HAL_GetTick>
 800bfe2:	4602      	mov	r2, r0
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	1ad3      	subs	r3, r2, r3
 800bfe8:	69ba      	ldr	r2, [r7, #24]
 800bfea:	429a      	cmp	r2, r3
 800bfec:	d302      	bcc.n	800bff4 <UART_WaitOnFlagUntilTimeout+0x30>
 800bfee:	69bb      	ldr	r3, [r7, #24]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d101      	bne.n	800bff8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bff4:	2303      	movs	r3, #3
 800bff6:	e048      	b.n	800c08a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f003 0304 	and.w	r3, r3, #4
 800c002:	2b00      	cmp	r3, #0
 800c004:	d031      	beq.n	800c06a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	69db      	ldr	r3, [r3, #28]
 800c00c:	f003 0308 	and.w	r3, r3, #8
 800c010:	2b08      	cmp	r3, #8
 800c012:	d110      	bne.n	800c036 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	2208      	movs	r2, #8
 800c01a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800c01c:	68f8      	ldr	r0, [r7, #12]
 800c01e:	f000 f839 	bl	800c094 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	2208      	movs	r2, #8
 800c026:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	2200      	movs	r2, #0
 800c02e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800c032:	2301      	movs	r3, #1
 800c034:	e029      	b.n	800c08a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	69db      	ldr	r3, [r3, #28]
 800c03c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c040:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c044:	d111      	bne.n	800c06a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c04e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c050:	68f8      	ldr	r0, [r7, #12]
 800c052:	f000 f81f 	bl	800c094 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	2220      	movs	r2, #32
 800c05a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2200      	movs	r2, #0
 800c062:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800c066:	2303      	movs	r3, #3
 800c068:	e00f      	b.n	800c08a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	69da      	ldr	r2, [r3, #28]
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	4013      	ands	r3, r2
 800c074:	68ba      	ldr	r2, [r7, #8]
 800c076:	429a      	cmp	r2, r3
 800c078:	bf0c      	ite	eq
 800c07a:	2301      	moveq	r3, #1
 800c07c:	2300      	movne	r3, #0
 800c07e:	b2db      	uxtb	r3, r3
 800c080:	461a      	mov	r2, r3
 800c082:	79fb      	ldrb	r3, [r7, #7]
 800c084:	429a      	cmp	r2, r3
 800c086:	d0a6      	beq.n	800bfd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c088:	2300      	movs	r3, #0
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3710      	adds	r7, #16
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}
	...

0800c094 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c094:	b480      	push	{r7}
 800c096:	b095      	sub	sp, #84	; 0x54
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0a4:	e853 3f00 	ldrex	r3, [r3]
 800c0a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c0b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0ba:	643b      	str	r3, [r7, #64]	; 0x40
 800c0bc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c0c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c0c2:	e841 2300 	strex	r3, r2, [r1]
 800c0c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d1e6      	bne.n	800c09c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	3308      	adds	r3, #8
 800c0d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0d6:	6a3b      	ldr	r3, [r7, #32]
 800c0d8:	e853 3f00 	ldrex	r3, [r3]
 800c0dc:	61fb      	str	r3, [r7, #28]
   return(result);
 800c0de:	69fa      	ldr	r2, [r7, #28]
 800c0e0:	4b1e      	ldr	r3, [pc, #120]	; (800c15c <UART_EndRxTransfer+0xc8>)
 800c0e2:	4013      	ands	r3, r2
 800c0e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	3308      	adds	r3, #8
 800c0ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c0ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c0f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c0f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0f6:	e841 2300 	strex	r3, r2, [r1]
 800c0fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d1e5      	bne.n	800c0ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c106:	2b01      	cmp	r3, #1
 800c108:	d118      	bne.n	800c13c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	e853 3f00 	ldrex	r3, [r3]
 800c116:	60bb      	str	r3, [r7, #8]
   return(result);
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	f023 0310 	bic.w	r3, r3, #16
 800c11e:	647b      	str	r3, [r7, #68]	; 0x44
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	461a      	mov	r2, r3
 800c126:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c128:	61bb      	str	r3, [r7, #24]
 800c12a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c12c:	6979      	ldr	r1, [r7, #20]
 800c12e:	69ba      	ldr	r2, [r7, #24]
 800c130:	e841 2300 	strex	r3, r2, [r1]
 800c134:	613b      	str	r3, [r7, #16]
   return(result);
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d1e6      	bne.n	800c10a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2220      	movs	r2, #32
 800c140:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2200      	movs	r2, #0
 800c148:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2200      	movs	r2, #0
 800c14e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c150:	bf00      	nop
 800c152:	3754      	adds	r7, #84	; 0x54
 800c154:	46bd      	mov	sp, r7
 800c156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15a:	4770      	bx	lr
 800c15c:	effffffe 	.word	0xeffffffe

0800c160 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c160:	b480      	push	{r7}
 800c162:	b085      	sub	sp, #20
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c16e:	2b01      	cmp	r3, #1
 800c170:	d101      	bne.n	800c176 <HAL_UARTEx_DisableFifoMode+0x16>
 800c172:	2302      	movs	r3, #2
 800c174:	e027      	b.n	800c1c6 <HAL_UARTEx_DisableFifoMode+0x66>
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2201      	movs	r2, #1
 800c17a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2224      	movs	r2, #36	; 0x24
 800c182:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	681a      	ldr	r2, [r3, #0]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f022 0201 	bic.w	r2, r2, #1
 800c19c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c1a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	68fa      	ldr	r2, [r7, #12]
 800c1b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2220      	movs	r2, #32
 800c1b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2200      	movs	r2, #0
 800c1c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c1c4:	2300      	movs	r3, #0
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3714      	adds	r7, #20
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d0:	4770      	bx	lr

0800c1d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c1d2:	b580      	push	{r7, lr}
 800c1d4:	b084      	sub	sp, #16
 800c1d6:	af00      	add	r7, sp, #0
 800c1d8:	6078      	str	r0, [r7, #4]
 800c1da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c1e2:	2b01      	cmp	r3, #1
 800c1e4:	d101      	bne.n	800c1ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c1e6:	2302      	movs	r3, #2
 800c1e8:	e02d      	b.n	800c246 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2201      	movs	r2, #1
 800c1ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2224      	movs	r2, #36	; 0x24
 800c1f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	681a      	ldr	r2, [r3, #0]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	f022 0201 	bic.w	r2, r2, #1
 800c210:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	689b      	ldr	r3, [r3, #8]
 800c218:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	683a      	ldr	r2, [r7, #0]
 800c222:	430a      	orrs	r2, r1
 800c224:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f000 f850 	bl	800c2cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	68fa      	ldr	r2, [r7, #12]
 800c232:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2220      	movs	r2, #32
 800c238:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2200      	movs	r2, #0
 800c240:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c244:	2300      	movs	r3, #0
}
 800c246:	4618      	mov	r0, r3
 800c248:	3710      	adds	r7, #16
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}

0800c24e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c24e:	b580      	push	{r7, lr}
 800c250:	b084      	sub	sp, #16
 800c252:	af00      	add	r7, sp, #0
 800c254:	6078      	str	r0, [r7, #4]
 800c256:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c25e:	2b01      	cmp	r3, #1
 800c260:	d101      	bne.n	800c266 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c262:	2302      	movs	r3, #2
 800c264:	e02d      	b.n	800c2c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2201      	movs	r2, #1
 800c26a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2224      	movs	r2, #36	; 0x24
 800c272:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	681a      	ldr	r2, [r3, #0]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	f022 0201 	bic.w	r2, r2, #1
 800c28c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	689b      	ldr	r3, [r3, #8]
 800c294:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	683a      	ldr	r2, [r7, #0]
 800c29e:	430a      	orrs	r2, r1
 800c2a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f000 f812 	bl	800c2cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	68fa      	ldr	r2, [r7, #12]
 800c2ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2220      	movs	r2, #32
 800c2b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c2c0:	2300      	movs	r3, #0
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3710      	adds	r7, #16
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
	...

0800c2cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b085      	sub	sp, #20
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d108      	bne.n	800c2ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2201      	movs	r2, #1
 800c2e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2201      	movs	r2, #1
 800c2e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c2ec:	e031      	b.n	800c352 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c2ee:	2310      	movs	r3, #16
 800c2f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c2f2:	2310      	movs	r3, #16
 800c2f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	689b      	ldr	r3, [r3, #8]
 800c2fc:	0e5b      	lsrs	r3, r3, #25
 800c2fe:	b2db      	uxtb	r3, r3
 800c300:	f003 0307 	and.w	r3, r3, #7
 800c304:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	689b      	ldr	r3, [r3, #8]
 800c30c:	0f5b      	lsrs	r3, r3, #29
 800c30e:	b2db      	uxtb	r3, r3
 800c310:	f003 0307 	and.w	r3, r3, #7
 800c314:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c316:	7bbb      	ldrb	r3, [r7, #14]
 800c318:	7b3a      	ldrb	r2, [r7, #12]
 800c31a:	4911      	ldr	r1, [pc, #68]	; (800c360 <UARTEx_SetNbDataToProcess+0x94>)
 800c31c:	5c8a      	ldrb	r2, [r1, r2]
 800c31e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c322:	7b3a      	ldrb	r2, [r7, #12]
 800c324:	490f      	ldr	r1, [pc, #60]	; (800c364 <UARTEx_SetNbDataToProcess+0x98>)
 800c326:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c328:	fb93 f3f2 	sdiv	r3, r3, r2
 800c32c:	b29a      	uxth	r2, r3
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c334:	7bfb      	ldrb	r3, [r7, #15]
 800c336:	7b7a      	ldrb	r2, [r7, #13]
 800c338:	4909      	ldr	r1, [pc, #36]	; (800c360 <UARTEx_SetNbDataToProcess+0x94>)
 800c33a:	5c8a      	ldrb	r2, [r1, r2]
 800c33c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c340:	7b7a      	ldrb	r2, [r7, #13]
 800c342:	4908      	ldr	r1, [pc, #32]	; (800c364 <UARTEx_SetNbDataToProcess+0x98>)
 800c344:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c346:	fb93 f3f2 	sdiv	r3, r3, r2
 800c34a:	b29a      	uxth	r2, r3
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c352:	bf00      	nop
 800c354:	3714      	adds	r7, #20
 800c356:	46bd      	mov	sp, r7
 800c358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35c:	4770      	bx	lr
 800c35e:	bf00      	nop
 800c360:	0800f324 	.word	0x0800f324
 800c364:	0800f32c 	.word	0x0800f32c

0800c368 <__errno>:
 800c368:	4b01      	ldr	r3, [pc, #4]	; (800c370 <__errno+0x8>)
 800c36a:	6818      	ldr	r0, [r3, #0]
 800c36c:	4770      	bx	lr
 800c36e:	bf00      	nop
 800c370:	20000040 	.word	0x20000040

0800c374 <__libc_init_array>:
 800c374:	b570      	push	{r4, r5, r6, lr}
 800c376:	4d0d      	ldr	r5, [pc, #52]	; (800c3ac <__libc_init_array+0x38>)
 800c378:	4c0d      	ldr	r4, [pc, #52]	; (800c3b0 <__libc_init_array+0x3c>)
 800c37a:	1b64      	subs	r4, r4, r5
 800c37c:	10a4      	asrs	r4, r4, #2
 800c37e:	2600      	movs	r6, #0
 800c380:	42a6      	cmp	r6, r4
 800c382:	d109      	bne.n	800c398 <__libc_init_array+0x24>
 800c384:	4d0b      	ldr	r5, [pc, #44]	; (800c3b4 <__libc_init_array+0x40>)
 800c386:	4c0c      	ldr	r4, [pc, #48]	; (800c3b8 <__libc_init_array+0x44>)
 800c388:	f002 fd1a 	bl	800edc0 <_init>
 800c38c:	1b64      	subs	r4, r4, r5
 800c38e:	10a4      	asrs	r4, r4, #2
 800c390:	2600      	movs	r6, #0
 800c392:	42a6      	cmp	r6, r4
 800c394:	d105      	bne.n	800c3a2 <__libc_init_array+0x2e>
 800c396:	bd70      	pop	{r4, r5, r6, pc}
 800c398:	f855 3b04 	ldr.w	r3, [r5], #4
 800c39c:	4798      	blx	r3
 800c39e:	3601      	adds	r6, #1
 800c3a0:	e7ee      	b.n	800c380 <__libc_init_array+0xc>
 800c3a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3a6:	4798      	blx	r3
 800c3a8:	3601      	adds	r6, #1
 800c3aa:	e7f2      	b.n	800c392 <__libc_init_array+0x1e>
 800c3ac:	0800f714 	.word	0x0800f714
 800c3b0:	0800f714 	.word	0x0800f714
 800c3b4:	0800f714 	.word	0x0800f714
 800c3b8:	0800f718 	.word	0x0800f718

0800c3bc <memcpy>:
 800c3bc:	440a      	add	r2, r1
 800c3be:	4291      	cmp	r1, r2
 800c3c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800c3c4:	d100      	bne.n	800c3c8 <memcpy+0xc>
 800c3c6:	4770      	bx	lr
 800c3c8:	b510      	push	{r4, lr}
 800c3ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3d2:	4291      	cmp	r1, r2
 800c3d4:	d1f9      	bne.n	800c3ca <memcpy+0xe>
 800c3d6:	bd10      	pop	{r4, pc}

0800c3d8 <memset>:
 800c3d8:	4402      	add	r2, r0
 800c3da:	4603      	mov	r3, r0
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	d100      	bne.n	800c3e2 <memset+0xa>
 800c3e0:	4770      	bx	lr
 800c3e2:	f803 1b01 	strb.w	r1, [r3], #1
 800c3e6:	e7f9      	b.n	800c3dc <memset+0x4>

0800c3e8 <__cvt>:
 800c3e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3ea:	ed2d 8b02 	vpush	{d8}
 800c3ee:	eeb0 8b40 	vmov.f64	d8, d0
 800c3f2:	b085      	sub	sp, #20
 800c3f4:	4617      	mov	r7, r2
 800c3f6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c3f8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c3fa:	ee18 2a90 	vmov	r2, s17
 800c3fe:	f025 0520 	bic.w	r5, r5, #32
 800c402:	2a00      	cmp	r2, #0
 800c404:	bfb6      	itet	lt
 800c406:	222d      	movlt	r2, #45	; 0x2d
 800c408:	2200      	movge	r2, #0
 800c40a:	eeb1 8b40 	vneglt.f64	d8, d0
 800c40e:	2d46      	cmp	r5, #70	; 0x46
 800c410:	460c      	mov	r4, r1
 800c412:	701a      	strb	r2, [r3, #0]
 800c414:	d004      	beq.n	800c420 <__cvt+0x38>
 800c416:	2d45      	cmp	r5, #69	; 0x45
 800c418:	d100      	bne.n	800c41c <__cvt+0x34>
 800c41a:	3401      	adds	r4, #1
 800c41c:	2102      	movs	r1, #2
 800c41e:	e000      	b.n	800c422 <__cvt+0x3a>
 800c420:	2103      	movs	r1, #3
 800c422:	ab03      	add	r3, sp, #12
 800c424:	9301      	str	r3, [sp, #4]
 800c426:	ab02      	add	r3, sp, #8
 800c428:	9300      	str	r3, [sp, #0]
 800c42a:	4622      	mov	r2, r4
 800c42c:	4633      	mov	r3, r6
 800c42e:	eeb0 0b48 	vmov.f64	d0, d8
 800c432:	f000 fdf5 	bl	800d020 <_dtoa_r>
 800c436:	2d47      	cmp	r5, #71	; 0x47
 800c438:	d101      	bne.n	800c43e <__cvt+0x56>
 800c43a:	07fb      	lsls	r3, r7, #31
 800c43c:	d51a      	bpl.n	800c474 <__cvt+0x8c>
 800c43e:	2d46      	cmp	r5, #70	; 0x46
 800c440:	eb00 0204 	add.w	r2, r0, r4
 800c444:	d10c      	bne.n	800c460 <__cvt+0x78>
 800c446:	7803      	ldrb	r3, [r0, #0]
 800c448:	2b30      	cmp	r3, #48	; 0x30
 800c44a:	d107      	bne.n	800c45c <__cvt+0x74>
 800c44c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c454:	bf1c      	itt	ne
 800c456:	f1c4 0401 	rsbne	r4, r4, #1
 800c45a:	6034      	strne	r4, [r6, #0]
 800c45c:	6833      	ldr	r3, [r6, #0]
 800c45e:	441a      	add	r2, r3
 800c460:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c468:	bf08      	it	eq
 800c46a:	9203      	streq	r2, [sp, #12]
 800c46c:	2130      	movs	r1, #48	; 0x30
 800c46e:	9b03      	ldr	r3, [sp, #12]
 800c470:	4293      	cmp	r3, r2
 800c472:	d307      	bcc.n	800c484 <__cvt+0x9c>
 800c474:	9b03      	ldr	r3, [sp, #12]
 800c476:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c478:	1a1b      	subs	r3, r3, r0
 800c47a:	6013      	str	r3, [r2, #0]
 800c47c:	b005      	add	sp, #20
 800c47e:	ecbd 8b02 	vpop	{d8}
 800c482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c484:	1c5c      	adds	r4, r3, #1
 800c486:	9403      	str	r4, [sp, #12]
 800c488:	7019      	strb	r1, [r3, #0]
 800c48a:	e7f0      	b.n	800c46e <__cvt+0x86>

0800c48c <__exponent>:
 800c48c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c48e:	4603      	mov	r3, r0
 800c490:	2900      	cmp	r1, #0
 800c492:	bfb8      	it	lt
 800c494:	4249      	neglt	r1, r1
 800c496:	f803 2b02 	strb.w	r2, [r3], #2
 800c49a:	bfb4      	ite	lt
 800c49c:	222d      	movlt	r2, #45	; 0x2d
 800c49e:	222b      	movge	r2, #43	; 0x2b
 800c4a0:	2909      	cmp	r1, #9
 800c4a2:	7042      	strb	r2, [r0, #1]
 800c4a4:	dd2a      	ble.n	800c4fc <__exponent+0x70>
 800c4a6:	f10d 0407 	add.w	r4, sp, #7
 800c4aa:	46a4      	mov	ip, r4
 800c4ac:	270a      	movs	r7, #10
 800c4ae:	46a6      	mov	lr, r4
 800c4b0:	460a      	mov	r2, r1
 800c4b2:	fb91 f6f7 	sdiv	r6, r1, r7
 800c4b6:	fb07 1516 	mls	r5, r7, r6, r1
 800c4ba:	3530      	adds	r5, #48	; 0x30
 800c4bc:	2a63      	cmp	r2, #99	; 0x63
 800c4be:	f104 34ff 	add.w	r4, r4, #4294967295
 800c4c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c4c6:	4631      	mov	r1, r6
 800c4c8:	dcf1      	bgt.n	800c4ae <__exponent+0x22>
 800c4ca:	3130      	adds	r1, #48	; 0x30
 800c4cc:	f1ae 0502 	sub.w	r5, lr, #2
 800c4d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c4d4:	1c44      	adds	r4, r0, #1
 800c4d6:	4629      	mov	r1, r5
 800c4d8:	4561      	cmp	r1, ip
 800c4da:	d30a      	bcc.n	800c4f2 <__exponent+0x66>
 800c4dc:	f10d 0209 	add.w	r2, sp, #9
 800c4e0:	eba2 020e 	sub.w	r2, r2, lr
 800c4e4:	4565      	cmp	r5, ip
 800c4e6:	bf88      	it	hi
 800c4e8:	2200      	movhi	r2, #0
 800c4ea:	4413      	add	r3, r2
 800c4ec:	1a18      	subs	r0, r3, r0
 800c4ee:	b003      	add	sp, #12
 800c4f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c4f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c4fa:	e7ed      	b.n	800c4d8 <__exponent+0x4c>
 800c4fc:	2330      	movs	r3, #48	; 0x30
 800c4fe:	3130      	adds	r1, #48	; 0x30
 800c500:	7083      	strb	r3, [r0, #2]
 800c502:	70c1      	strb	r1, [r0, #3]
 800c504:	1d03      	adds	r3, r0, #4
 800c506:	e7f1      	b.n	800c4ec <__exponent+0x60>

0800c508 <_printf_float>:
 800c508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c50c:	b08b      	sub	sp, #44	; 0x2c
 800c50e:	460c      	mov	r4, r1
 800c510:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800c514:	4616      	mov	r6, r2
 800c516:	461f      	mov	r7, r3
 800c518:	4605      	mov	r5, r0
 800c51a:	f001 fca7 	bl	800de6c <_localeconv_r>
 800c51e:	f8d0 b000 	ldr.w	fp, [r0]
 800c522:	4658      	mov	r0, fp
 800c524:	f7f4 fb7c 	bl	8000c20 <strlen>
 800c528:	2300      	movs	r3, #0
 800c52a:	9308      	str	r3, [sp, #32]
 800c52c:	f8d8 3000 	ldr.w	r3, [r8]
 800c530:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c534:	6822      	ldr	r2, [r4, #0]
 800c536:	3307      	adds	r3, #7
 800c538:	f023 0307 	bic.w	r3, r3, #7
 800c53c:	f103 0108 	add.w	r1, r3, #8
 800c540:	f8c8 1000 	str.w	r1, [r8]
 800c544:	4682      	mov	sl, r0
 800c546:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c54a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800c54e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800c7b0 <_printf_float+0x2a8>
 800c552:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800c556:	eeb0 6bc0 	vabs.f64	d6, d0
 800c55a:	eeb4 6b47 	vcmp.f64	d6, d7
 800c55e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c562:	dd24      	ble.n	800c5ae <_printf_float+0xa6>
 800c564:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c56c:	d502      	bpl.n	800c574 <_printf_float+0x6c>
 800c56e:	232d      	movs	r3, #45	; 0x2d
 800c570:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c574:	4b90      	ldr	r3, [pc, #576]	; (800c7b8 <_printf_float+0x2b0>)
 800c576:	4891      	ldr	r0, [pc, #580]	; (800c7bc <_printf_float+0x2b4>)
 800c578:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c57c:	bf94      	ite	ls
 800c57e:	4698      	movls	r8, r3
 800c580:	4680      	movhi	r8, r0
 800c582:	2303      	movs	r3, #3
 800c584:	6123      	str	r3, [r4, #16]
 800c586:	f022 0204 	bic.w	r2, r2, #4
 800c58a:	2300      	movs	r3, #0
 800c58c:	6022      	str	r2, [r4, #0]
 800c58e:	9304      	str	r3, [sp, #16]
 800c590:	9700      	str	r7, [sp, #0]
 800c592:	4633      	mov	r3, r6
 800c594:	aa09      	add	r2, sp, #36	; 0x24
 800c596:	4621      	mov	r1, r4
 800c598:	4628      	mov	r0, r5
 800c59a:	f000 f9d3 	bl	800c944 <_printf_common>
 800c59e:	3001      	adds	r0, #1
 800c5a0:	f040 808a 	bne.w	800c6b8 <_printf_float+0x1b0>
 800c5a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c5a8:	b00b      	add	sp, #44	; 0x2c
 800c5aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5ae:	eeb4 0b40 	vcmp.f64	d0, d0
 800c5b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5b6:	d709      	bvc.n	800c5cc <_printf_float+0xc4>
 800c5b8:	ee10 3a90 	vmov	r3, s1
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	bfbc      	itt	lt
 800c5c0:	232d      	movlt	r3, #45	; 0x2d
 800c5c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c5c6:	487e      	ldr	r0, [pc, #504]	; (800c7c0 <_printf_float+0x2b8>)
 800c5c8:	4b7e      	ldr	r3, [pc, #504]	; (800c7c4 <_printf_float+0x2bc>)
 800c5ca:	e7d5      	b.n	800c578 <_printf_float+0x70>
 800c5cc:	6863      	ldr	r3, [r4, #4]
 800c5ce:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800c5d2:	9104      	str	r1, [sp, #16]
 800c5d4:	1c59      	adds	r1, r3, #1
 800c5d6:	d13c      	bne.n	800c652 <_printf_float+0x14a>
 800c5d8:	2306      	movs	r3, #6
 800c5da:	6063      	str	r3, [r4, #4]
 800c5dc:	2300      	movs	r3, #0
 800c5de:	9303      	str	r3, [sp, #12]
 800c5e0:	ab08      	add	r3, sp, #32
 800c5e2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800c5e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c5ea:	ab07      	add	r3, sp, #28
 800c5ec:	6861      	ldr	r1, [r4, #4]
 800c5ee:	9300      	str	r3, [sp, #0]
 800c5f0:	6022      	str	r2, [r4, #0]
 800c5f2:	f10d 031b 	add.w	r3, sp, #27
 800c5f6:	4628      	mov	r0, r5
 800c5f8:	f7ff fef6 	bl	800c3e8 <__cvt>
 800c5fc:	9b04      	ldr	r3, [sp, #16]
 800c5fe:	9907      	ldr	r1, [sp, #28]
 800c600:	2b47      	cmp	r3, #71	; 0x47
 800c602:	4680      	mov	r8, r0
 800c604:	d108      	bne.n	800c618 <_printf_float+0x110>
 800c606:	1cc8      	adds	r0, r1, #3
 800c608:	db02      	blt.n	800c610 <_printf_float+0x108>
 800c60a:	6863      	ldr	r3, [r4, #4]
 800c60c:	4299      	cmp	r1, r3
 800c60e:	dd41      	ble.n	800c694 <_printf_float+0x18c>
 800c610:	f1a9 0902 	sub.w	r9, r9, #2
 800c614:	fa5f f989 	uxtb.w	r9, r9
 800c618:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c61c:	d820      	bhi.n	800c660 <_printf_float+0x158>
 800c61e:	3901      	subs	r1, #1
 800c620:	464a      	mov	r2, r9
 800c622:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c626:	9107      	str	r1, [sp, #28]
 800c628:	f7ff ff30 	bl	800c48c <__exponent>
 800c62c:	9a08      	ldr	r2, [sp, #32]
 800c62e:	9004      	str	r0, [sp, #16]
 800c630:	1813      	adds	r3, r2, r0
 800c632:	2a01      	cmp	r2, #1
 800c634:	6123      	str	r3, [r4, #16]
 800c636:	dc02      	bgt.n	800c63e <_printf_float+0x136>
 800c638:	6822      	ldr	r2, [r4, #0]
 800c63a:	07d2      	lsls	r2, r2, #31
 800c63c:	d501      	bpl.n	800c642 <_printf_float+0x13a>
 800c63e:	3301      	adds	r3, #1
 800c640:	6123      	str	r3, [r4, #16]
 800c642:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d0a2      	beq.n	800c590 <_printf_float+0x88>
 800c64a:	232d      	movs	r3, #45	; 0x2d
 800c64c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c650:	e79e      	b.n	800c590 <_printf_float+0x88>
 800c652:	9904      	ldr	r1, [sp, #16]
 800c654:	2947      	cmp	r1, #71	; 0x47
 800c656:	d1c1      	bne.n	800c5dc <_printf_float+0xd4>
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d1bf      	bne.n	800c5dc <_printf_float+0xd4>
 800c65c:	2301      	movs	r3, #1
 800c65e:	e7bc      	b.n	800c5da <_printf_float+0xd2>
 800c660:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c664:	d118      	bne.n	800c698 <_printf_float+0x190>
 800c666:	2900      	cmp	r1, #0
 800c668:	6863      	ldr	r3, [r4, #4]
 800c66a:	dd0b      	ble.n	800c684 <_printf_float+0x17c>
 800c66c:	6121      	str	r1, [r4, #16]
 800c66e:	b913      	cbnz	r3, 800c676 <_printf_float+0x16e>
 800c670:	6822      	ldr	r2, [r4, #0]
 800c672:	07d0      	lsls	r0, r2, #31
 800c674:	d502      	bpl.n	800c67c <_printf_float+0x174>
 800c676:	3301      	adds	r3, #1
 800c678:	440b      	add	r3, r1
 800c67a:	6123      	str	r3, [r4, #16]
 800c67c:	2300      	movs	r3, #0
 800c67e:	65a1      	str	r1, [r4, #88]	; 0x58
 800c680:	9304      	str	r3, [sp, #16]
 800c682:	e7de      	b.n	800c642 <_printf_float+0x13a>
 800c684:	b913      	cbnz	r3, 800c68c <_printf_float+0x184>
 800c686:	6822      	ldr	r2, [r4, #0]
 800c688:	07d2      	lsls	r2, r2, #31
 800c68a:	d501      	bpl.n	800c690 <_printf_float+0x188>
 800c68c:	3302      	adds	r3, #2
 800c68e:	e7f4      	b.n	800c67a <_printf_float+0x172>
 800c690:	2301      	movs	r3, #1
 800c692:	e7f2      	b.n	800c67a <_printf_float+0x172>
 800c694:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c698:	9b08      	ldr	r3, [sp, #32]
 800c69a:	4299      	cmp	r1, r3
 800c69c:	db05      	blt.n	800c6aa <_printf_float+0x1a2>
 800c69e:	6823      	ldr	r3, [r4, #0]
 800c6a0:	6121      	str	r1, [r4, #16]
 800c6a2:	07d8      	lsls	r0, r3, #31
 800c6a4:	d5ea      	bpl.n	800c67c <_printf_float+0x174>
 800c6a6:	1c4b      	adds	r3, r1, #1
 800c6a8:	e7e7      	b.n	800c67a <_printf_float+0x172>
 800c6aa:	2900      	cmp	r1, #0
 800c6ac:	bfd4      	ite	le
 800c6ae:	f1c1 0202 	rsble	r2, r1, #2
 800c6b2:	2201      	movgt	r2, #1
 800c6b4:	4413      	add	r3, r2
 800c6b6:	e7e0      	b.n	800c67a <_printf_float+0x172>
 800c6b8:	6823      	ldr	r3, [r4, #0]
 800c6ba:	055a      	lsls	r2, r3, #21
 800c6bc:	d407      	bmi.n	800c6ce <_printf_float+0x1c6>
 800c6be:	6923      	ldr	r3, [r4, #16]
 800c6c0:	4642      	mov	r2, r8
 800c6c2:	4631      	mov	r1, r6
 800c6c4:	4628      	mov	r0, r5
 800c6c6:	47b8      	blx	r7
 800c6c8:	3001      	adds	r0, #1
 800c6ca:	d12a      	bne.n	800c722 <_printf_float+0x21a>
 800c6cc:	e76a      	b.n	800c5a4 <_printf_float+0x9c>
 800c6ce:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c6d2:	f240 80e2 	bls.w	800c89a <_printf_float+0x392>
 800c6d6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c6da:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c6de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6e2:	d133      	bne.n	800c74c <_printf_float+0x244>
 800c6e4:	4a38      	ldr	r2, [pc, #224]	; (800c7c8 <_printf_float+0x2c0>)
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	4631      	mov	r1, r6
 800c6ea:	4628      	mov	r0, r5
 800c6ec:	47b8      	blx	r7
 800c6ee:	3001      	adds	r0, #1
 800c6f0:	f43f af58 	beq.w	800c5a4 <_printf_float+0x9c>
 800c6f4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	db02      	blt.n	800c702 <_printf_float+0x1fa>
 800c6fc:	6823      	ldr	r3, [r4, #0]
 800c6fe:	07d8      	lsls	r0, r3, #31
 800c700:	d50f      	bpl.n	800c722 <_printf_float+0x21a>
 800c702:	4653      	mov	r3, sl
 800c704:	465a      	mov	r2, fp
 800c706:	4631      	mov	r1, r6
 800c708:	4628      	mov	r0, r5
 800c70a:	47b8      	blx	r7
 800c70c:	3001      	adds	r0, #1
 800c70e:	f43f af49 	beq.w	800c5a4 <_printf_float+0x9c>
 800c712:	f04f 0800 	mov.w	r8, #0
 800c716:	f104 091a 	add.w	r9, r4, #26
 800c71a:	9b08      	ldr	r3, [sp, #32]
 800c71c:	3b01      	subs	r3, #1
 800c71e:	4543      	cmp	r3, r8
 800c720:	dc09      	bgt.n	800c736 <_printf_float+0x22e>
 800c722:	6823      	ldr	r3, [r4, #0]
 800c724:	079b      	lsls	r3, r3, #30
 800c726:	f100 8108 	bmi.w	800c93a <_printf_float+0x432>
 800c72a:	68e0      	ldr	r0, [r4, #12]
 800c72c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c72e:	4298      	cmp	r0, r3
 800c730:	bfb8      	it	lt
 800c732:	4618      	movlt	r0, r3
 800c734:	e738      	b.n	800c5a8 <_printf_float+0xa0>
 800c736:	2301      	movs	r3, #1
 800c738:	464a      	mov	r2, r9
 800c73a:	4631      	mov	r1, r6
 800c73c:	4628      	mov	r0, r5
 800c73e:	47b8      	blx	r7
 800c740:	3001      	adds	r0, #1
 800c742:	f43f af2f 	beq.w	800c5a4 <_printf_float+0x9c>
 800c746:	f108 0801 	add.w	r8, r8, #1
 800c74a:	e7e6      	b.n	800c71a <_printf_float+0x212>
 800c74c:	9b07      	ldr	r3, [sp, #28]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	dc3c      	bgt.n	800c7cc <_printf_float+0x2c4>
 800c752:	4a1d      	ldr	r2, [pc, #116]	; (800c7c8 <_printf_float+0x2c0>)
 800c754:	2301      	movs	r3, #1
 800c756:	4631      	mov	r1, r6
 800c758:	4628      	mov	r0, r5
 800c75a:	47b8      	blx	r7
 800c75c:	3001      	adds	r0, #1
 800c75e:	f43f af21 	beq.w	800c5a4 <_printf_float+0x9c>
 800c762:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c766:	4313      	orrs	r3, r2
 800c768:	d102      	bne.n	800c770 <_printf_float+0x268>
 800c76a:	6823      	ldr	r3, [r4, #0]
 800c76c:	07d9      	lsls	r1, r3, #31
 800c76e:	d5d8      	bpl.n	800c722 <_printf_float+0x21a>
 800c770:	4653      	mov	r3, sl
 800c772:	465a      	mov	r2, fp
 800c774:	4631      	mov	r1, r6
 800c776:	4628      	mov	r0, r5
 800c778:	47b8      	blx	r7
 800c77a:	3001      	adds	r0, #1
 800c77c:	f43f af12 	beq.w	800c5a4 <_printf_float+0x9c>
 800c780:	f04f 0900 	mov.w	r9, #0
 800c784:	f104 0a1a 	add.w	sl, r4, #26
 800c788:	9b07      	ldr	r3, [sp, #28]
 800c78a:	425b      	negs	r3, r3
 800c78c:	454b      	cmp	r3, r9
 800c78e:	dc01      	bgt.n	800c794 <_printf_float+0x28c>
 800c790:	9b08      	ldr	r3, [sp, #32]
 800c792:	e795      	b.n	800c6c0 <_printf_float+0x1b8>
 800c794:	2301      	movs	r3, #1
 800c796:	4652      	mov	r2, sl
 800c798:	4631      	mov	r1, r6
 800c79a:	4628      	mov	r0, r5
 800c79c:	47b8      	blx	r7
 800c79e:	3001      	adds	r0, #1
 800c7a0:	f43f af00 	beq.w	800c5a4 <_printf_float+0x9c>
 800c7a4:	f109 0901 	add.w	r9, r9, #1
 800c7a8:	e7ee      	b.n	800c788 <_printf_float+0x280>
 800c7aa:	bf00      	nop
 800c7ac:	f3af 8000 	nop.w
 800c7b0:	ffffffff 	.word	0xffffffff
 800c7b4:	7fefffff 	.word	0x7fefffff
 800c7b8:	0800f338 	.word	0x0800f338
 800c7bc:	0800f33c 	.word	0x0800f33c
 800c7c0:	0800f344 	.word	0x0800f344
 800c7c4:	0800f340 	.word	0x0800f340
 800c7c8:	0800f348 	.word	0x0800f348
 800c7cc:	9a08      	ldr	r2, [sp, #32]
 800c7ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	bfa8      	it	ge
 800c7d4:	461a      	movge	r2, r3
 800c7d6:	2a00      	cmp	r2, #0
 800c7d8:	4691      	mov	r9, r2
 800c7da:	dc38      	bgt.n	800c84e <_printf_float+0x346>
 800c7dc:	2300      	movs	r3, #0
 800c7de:	9305      	str	r3, [sp, #20]
 800c7e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c7e4:	f104 021a 	add.w	r2, r4, #26
 800c7e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c7ea:	9905      	ldr	r1, [sp, #20]
 800c7ec:	9304      	str	r3, [sp, #16]
 800c7ee:	eba3 0309 	sub.w	r3, r3, r9
 800c7f2:	428b      	cmp	r3, r1
 800c7f4:	dc33      	bgt.n	800c85e <_printf_float+0x356>
 800c7f6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	db3c      	blt.n	800c878 <_printf_float+0x370>
 800c7fe:	6823      	ldr	r3, [r4, #0]
 800c800:	07da      	lsls	r2, r3, #31
 800c802:	d439      	bmi.n	800c878 <_printf_float+0x370>
 800c804:	9b08      	ldr	r3, [sp, #32]
 800c806:	9a04      	ldr	r2, [sp, #16]
 800c808:	9907      	ldr	r1, [sp, #28]
 800c80a:	1a9a      	subs	r2, r3, r2
 800c80c:	eba3 0901 	sub.w	r9, r3, r1
 800c810:	4591      	cmp	r9, r2
 800c812:	bfa8      	it	ge
 800c814:	4691      	movge	r9, r2
 800c816:	f1b9 0f00 	cmp.w	r9, #0
 800c81a:	dc35      	bgt.n	800c888 <_printf_float+0x380>
 800c81c:	f04f 0800 	mov.w	r8, #0
 800c820:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c824:	f104 0a1a 	add.w	sl, r4, #26
 800c828:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c82c:	1a9b      	subs	r3, r3, r2
 800c82e:	eba3 0309 	sub.w	r3, r3, r9
 800c832:	4543      	cmp	r3, r8
 800c834:	f77f af75 	ble.w	800c722 <_printf_float+0x21a>
 800c838:	2301      	movs	r3, #1
 800c83a:	4652      	mov	r2, sl
 800c83c:	4631      	mov	r1, r6
 800c83e:	4628      	mov	r0, r5
 800c840:	47b8      	blx	r7
 800c842:	3001      	adds	r0, #1
 800c844:	f43f aeae 	beq.w	800c5a4 <_printf_float+0x9c>
 800c848:	f108 0801 	add.w	r8, r8, #1
 800c84c:	e7ec      	b.n	800c828 <_printf_float+0x320>
 800c84e:	4613      	mov	r3, r2
 800c850:	4631      	mov	r1, r6
 800c852:	4642      	mov	r2, r8
 800c854:	4628      	mov	r0, r5
 800c856:	47b8      	blx	r7
 800c858:	3001      	adds	r0, #1
 800c85a:	d1bf      	bne.n	800c7dc <_printf_float+0x2d4>
 800c85c:	e6a2      	b.n	800c5a4 <_printf_float+0x9c>
 800c85e:	2301      	movs	r3, #1
 800c860:	4631      	mov	r1, r6
 800c862:	4628      	mov	r0, r5
 800c864:	9204      	str	r2, [sp, #16]
 800c866:	47b8      	blx	r7
 800c868:	3001      	adds	r0, #1
 800c86a:	f43f ae9b 	beq.w	800c5a4 <_printf_float+0x9c>
 800c86e:	9b05      	ldr	r3, [sp, #20]
 800c870:	9a04      	ldr	r2, [sp, #16]
 800c872:	3301      	adds	r3, #1
 800c874:	9305      	str	r3, [sp, #20]
 800c876:	e7b7      	b.n	800c7e8 <_printf_float+0x2e0>
 800c878:	4653      	mov	r3, sl
 800c87a:	465a      	mov	r2, fp
 800c87c:	4631      	mov	r1, r6
 800c87e:	4628      	mov	r0, r5
 800c880:	47b8      	blx	r7
 800c882:	3001      	adds	r0, #1
 800c884:	d1be      	bne.n	800c804 <_printf_float+0x2fc>
 800c886:	e68d      	b.n	800c5a4 <_printf_float+0x9c>
 800c888:	9a04      	ldr	r2, [sp, #16]
 800c88a:	464b      	mov	r3, r9
 800c88c:	4442      	add	r2, r8
 800c88e:	4631      	mov	r1, r6
 800c890:	4628      	mov	r0, r5
 800c892:	47b8      	blx	r7
 800c894:	3001      	adds	r0, #1
 800c896:	d1c1      	bne.n	800c81c <_printf_float+0x314>
 800c898:	e684      	b.n	800c5a4 <_printf_float+0x9c>
 800c89a:	9a08      	ldr	r2, [sp, #32]
 800c89c:	2a01      	cmp	r2, #1
 800c89e:	dc01      	bgt.n	800c8a4 <_printf_float+0x39c>
 800c8a0:	07db      	lsls	r3, r3, #31
 800c8a2:	d537      	bpl.n	800c914 <_printf_float+0x40c>
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	4642      	mov	r2, r8
 800c8a8:	4631      	mov	r1, r6
 800c8aa:	4628      	mov	r0, r5
 800c8ac:	47b8      	blx	r7
 800c8ae:	3001      	adds	r0, #1
 800c8b0:	f43f ae78 	beq.w	800c5a4 <_printf_float+0x9c>
 800c8b4:	4653      	mov	r3, sl
 800c8b6:	465a      	mov	r2, fp
 800c8b8:	4631      	mov	r1, r6
 800c8ba:	4628      	mov	r0, r5
 800c8bc:	47b8      	blx	r7
 800c8be:	3001      	adds	r0, #1
 800c8c0:	f43f ae70 	beq.w	800c5a4 <_printf_float+0x9c>
 800c8c4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c8c8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c8cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8d0:	d01b      	beq.n	800c90a <_printf_float+0x402>
 800c8d2:	9b08      	ldr	r3, [sp, #32]
 800c8d4:	f108 0201 	add.w	r2, r8, #1
 800c8d8:	3b01      	subs	r3, #1
 800c8da:	4631      	mov	r1, r6
 800c8dc:	4628      	mov	r0, r5
 800c8de:	47b8      	blx	r7
 800c8e0:	3001      	adds	r0, #1
 800c8e2:	d10e      	bne.n	800c902 <_printf_float+0x3fa>
 800c8e4:	e65e      	b.n	800c5a4 <_printf_float+0x9c>
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	464a      	mov	r2, r9
 800c8ea:	4631      	mov	r1, r6
 800c8ec:	4628      	mov	r0, r5
 800c8ee:	47b8      	blx	r7
 800c8f0:	3001      	adds	r0, #1
 800c8f2:	f43f ae57 	beq.w	800c5a4 <_printf_float+0x9c>
 800c8f6:	f108 0801 	add.w	r8, r8, #1
 800c8fa:	9b08      	ldr	r3, [sp, #32]
 800c8fc:	3b01      	subs	r3, #1
 800c8fe:	4543      	cmp	r3, r8
 800c900:	dcf1      	bgt.n	800c8e6 <_printf_float+0x3de>
 800c902:	9b04      	ldr	r3, [sp, #16]
 800c904:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c908:	e6db      	b.n	800c6c2 <_printf_float+0x1ba>
 800c90a:	f04f 0800 	mov.w	r8, #0
 800c90e:	f104 091a 	add.w	r9, r4, #26
 800c912:	e7f2      	b.n	800c8fa <_printf_float+0x3f2>
 800c914:	2301      	movs	r3, #1
 800c916:	4642      	mov	r2, r8
 800c918:	e7df      	b.n	800c8da <_printf_float+0x3d2>
 800c91a:	2301      	movs	r3, #1
 800c91c:	464a      	mov	r2, r9
 800c91e:	4631      	mov	r1, r6
 800c920:	4628      	mov	r0, r5
 800c922:	47b8      	blx	r7
 800c924:	3001      	adds	r0, #1
 800c926:	f43f ae3d 	beq.w	800c5a4 <_printf_float+0x9c>
 800c92a:	f108 0801 	add.w	r8, r8, #1
 800c92e:	68e3      	ldr	r3, [r4, #12]
 800c930:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c932:	1a5b      	subs	r3, r3, r1
 800c934:	4543      	cmp	r3, r8
 800c936:	dcf0      	bgt.n	800c91a <_printf_float+0x412>
 800c938:	e6f7      	b.n	800c72a <_printf_float+0x222>
 800c93a:	f04f 0800 	mov.w	r8, #0
 800c93e:	f104 0919 	add.w	r9, r4, #25
 800c942:	e7f4      	b.n	800c92e <_printf_float+0x426>

0800c944 <_printf_common>:
 800c944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c948:	4616      	mov	r6, r2
 800c94a:	4699      	mov	r9, r3
 800c94c:	688a      	ldr	r2, [r1, #8]
 800c94e:	690b      	ldr	r3, [r1, #16]
 800c950:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c954:	4293      	cmp	r3, r2
 800c956:	bfb8      	it	lt
 800c958:	4613      	movlt	r3, r2
 800c95a:	6033      	str	r3, [r6, #0]
 800c95c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c960:	4607      	mov	r7, r0
 800c962:	460c      	mov	r4, r1
 800c964:	b10a      	cbz	r2, 800c96a <_printf_common+0x26>
 800c966:	3301      	adds	r3, #1
 800c968:	6033      	str	r3, [r6, #0]
 800c96a:	6823      	ldr	r3, [r4, #0]
 800c96c:	0699      	lsls	r1, r3, #26
 800c96e:	bf42      	ittt	mi
 800c970:	6833      	ldrmi	r3, [r6, #0]
 800c972:	3302      	addmi	r3, #2
 800c974:	6033      	strmi	r3, [r6, #0]
 800c976:	6825      	ldr	r5, [r4, #0]
 800c978:	f015 0506 	ands.w	r5, r5, #6
 800c97c:	d106      	bne.n	800c98c <_printf_common+0x48>
 800c97e:	f104 0a19 	add.w	sl, r4, #25
 800c982:	68e3      	ldr	r3, [r4, #12]
 800c984:	6832      	ldr	r2, [r6, #0]
 800c986:	1a9b      	subs	r3, r3, r2
 800c988:	42ab      	cmp	r3, r5
 800c98a:	dc26      	bgt.n	800c9da <_printf_common+0x96>
 800c98c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c990:	1e13      	subs	r3, r2, #0
 800c992:	6822      	ldr	r2, [r4, #0]
 800c994:	bf18      	it	ne
 800c996:	2301      	movne	r3, #1
 800c998:	0692      	lsls	r2, r2, #26
 800c99a:	d42b      	bmi.n	800c9f4 <_printf_common+0xb0>
 800c99c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c9a0:	4649      	mov	r1, r9
 800c9a2:	4638      	mov	r0, r7
 800c9a4:	47c0      	blx	r8
 800c9a6:	3001      	adds	r0, #1
 800c9a8:	d01e      	beq.n	800c9e8 <_printf_common+0xa4>
 800c9aa:	6823      	ldr	r3, [r4, #0]
 800c9ac:	68e5      	ldr	r5, [r4, #12]
 800c9ae:	6832      	ldr	r2, [r6, #0]
 800c9b0:	f003 0306 	and.w	r3, r3, #6
 800c9b4:	2b04      	cmp	r3, #4
 800c9b6:	bf08      	it	eq
 800c9b8:	1aad      	subeq	r5, r5, r2
 800c9ba:	68a3      	ldr	r3, [r4, #8]
 800c9bc:	6922      	ldr	r2, [r4, #16]
 800c9be:	bf0c      	ite	eq
 800c9c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c9c4:	2500      	movne	r5, #0
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	bfc4      	itt	gt
 800c9ca:	1a9b      	subgt	r3, r3, r2
 800c9cc:	18ed      	addgt	r5, r5, r3
 800c9ce:	2600      	movs	r6, #0
 800c9d0:	341a      	adds	r4, #26
 800c9d2:	42b5      	cmp	r5, r6
 800c9d4:	d11a      	bne.n	800ca0c <_printf_common+0xc8>
 800c9d6:	2000      	movs	r0, #0
 800c9d8:	e008      	b.n	800c9ec <_printf_common+0xa8>
 800c9da:	2301      	movs	r3, #1
 800c9dc:	4652      	mov	r2, sl
 800c9de:	4649      	mov	r1, r9
 800c9e0:	4638      	mov	r0, r7
 800c9e2:	47c0      	blx	r8
 800c9e4:	3001      	adds	r0, #1
 800c9e6:	d103      	bne.n	800c9f0 <_printf_common+0xac>
 800c9e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9f0:	3501      	adds	r5, #1
 800c9f2:	e7c6      	b.n	800c982 <_printf_common+0x3e>
 800c9f4:	18e1      	adds	r1, r4, r3
 800c9f6:	1c5a      	adds	r2, r3, #1
 800c9f8:	2030      	movs	r0, #48	; 0x30
 800c9fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c9fe:	4422      	add	r2, r4
 800ca00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ca08:	3302      	adds	r3, #2
 800ca0a:	e7c7      	b.n	800c99c <_printf_common+0x58>
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	4622      	mov	r2, r4
 800ca10:	4649      	mov	r1, r9
 800ca12:	4638      	mov	r0, r7
 800ca14:	47c0      	blx	r8
 800ca16:	3001      	adds	r0, #1
 800ca18:	d0e6      	beq.n	800c9e8 <_printf_common+0xa4>
 800ca1a:	3601      	adds	r6, #1
 800ca1c:	e7d9      	b.n	800c9d2 <_printf_common+0x8e>
	...

0800ca20 <_printf_i>:
 800ca20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca24:	7e0f      	ldrb	r7, [r1, #24]
 800ca26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ca28:	2f78      	cmp	r7, #120	; 0x78
 800ca2a:	4691      	mov	r9, r2
 800ca2c:	4680      	mov	r8, r0
 800ca2e:	460c      	mov	r4, r1
 800ca30:	469a      	mov	sl, r3
 800ca32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ca36:	d807      	bhi.n	800ca48 <_printf_i+0x28>
 800ca38:	2f62      	cmp	r7, #98	; 0x62
 800ca3a:	d80a      	bhi.n	800ca52 <_printf_i+0x32>
 800ca3c:	2f00      	cmp	r7, #0
 800ca3e:	f000 80d8 	beq.w	800cbf2 <_printf_i+0x1d2>
 800ca42:	2f58      	cmp	r7, #88	; 0x58
 800ca44:	f000 80a3 	beq.w	800cb8e <_printf_i+0x16e>
 800ca48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ca50:	e03a      	b.n	800cac8 <_printf_i+0xa8>
 800ca52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ca56:	2b15      	cmp	r3, #21
 800ca58:	d8f6      	bhi.n	800ca48 <_printf_i+0x28>
 800ca5a:	a101      	add	r1, pc, #4	; (adr r1, 800ca60 <_printf_i+0x40>)
 800ca5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ca60:	0800cab9 	.word	0x0800cab9
 800ca64:	0800cacd 	.word	0x0800cacd
 800ca68:	0800ca49 	.word	0x0800ca49
 800ca6c:	0800ca49 	.word	0x0800ca49
 800ca70:	0800ca49 	.word	0x0800ca49
 800ca74:	0800ca49 	.word	0x0800ca49
 800ca78:	0800cacd 	.word	0x0800cacd
 800ca7c:	0800ca49 	.word	0x0800ca49
 800ca80:	0800ca49 	.word	0x0800ca49
 800ca84:	0800ca49 	.word	0x0800ca49
 800ca88:	0800ca49 	.word	0x0800ca49
 800ca8c:	0800cbd9 	.word	0x0800cbd9
 800ca90:	0800cafd 	.word	0x0800cafd
 800ca94:	0800cbbb 	.word	0x0800cbbb
 800ca98:	0800ca49 	.word	0x0800ca49
 800ca9c:	0800ca49 	.word	0x0800ca49
 800caa0:	0800cbfb 	.word	0x0800cbfb
 800caa4:	0800ca49 	.word	0x0800ca49
 800caa8:	0800cafd 	.word	0x0800cafd
 800caac:	0800ca49 	.word	0x0800ca49
 800cab0:	0800ca49 	.word	0x0800ca49
 800cab4:	0800cbc3 	.word	0x0800cbc3
 800cab8:	682b      	ldr	r3, [r5, #0]
 800caba:	1d1a      	adds	r2, r3, #4
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	602a      	str	r2, [r5, #0]
 800cac0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cac4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cac8:	2301      	movs	r3, #1
 800caca:	e0a3      	b.n	800cc14 <_printf_i+0x1f4>
 800cacc:	6820      	ldr	r0, [r4, #0]
 800cace:	6829      	ldr	r1, [r5, #0]
 800cad0:	0606      	lsls	r6, r0, #24
 800cad2:	f101 0304 	add.w	r3, r1, #4
 800cad6:	d50a      	bpl.n	800caee <_printf_i+0xce>
 800cad8:	680e      	ldr	r6, [r1, #0]
 800cada:	602b      	str	r3, [r5, #0]
 800cadc:	2e00      	cmp	r6, #0
 800cade:	da03      	bge.n	800cae8 <_printf_i+0xc8>
 800cae0:	232d      	movs	r3, #45	; 0x2d
 800cae2:	4276      	negs	r6, r6
 800cae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cae8:	485e      	ldr	r0, [pc, #376]	; (800cc64 <_printf_i+0x244>)
 800caea:	230a      	movs	r3, #10
 800caec:	e019      	b.n	800cb22 <_printf_i+0x102>
 800caee:	680e      	ldr	r6, [r1, #0]
 800caf0:	602b      	str	r3, [r5, #0]
 800caf2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800caf6:	bf18      	it	ne
 800caf8:	b236      	sxthne	r6, r6
 800cafa:	e7ef      	b.n	800cadc <_printf_i+0xbc>
 800cafc:	682b      	ldr	r3, [r5, #0]
 800cafe:	6820      	ldr	r0, [r4, #0]
 800cb00:	1d19      	adds	r1, r3, #4
 800cb02:	6029      	str	r1, [r5, #0]
 800cb04:	0601      	lsls	r1, r0, #24
 800cb06:	d501      	bpl.n	800cb0c <_printf_i+0xec>
 800cb08:	681e      	ldr	r6, [r3, #0]
 800cb0a:	e002      	b.n	800cb12 <_printf_i+0xf2>
 800cb0c:	0646      	lsls	r6, r0, #25
 800cb0e:	d5fb      	bpl.n	800cb08 <_printf_i+0xe8>
 800cb10:	881e      	ldrh	r6, [r3, #0]
 800cb12:	4854      	ldr	r0, [pc, #336]	; (800cc64 <_printf_i+0x244>)
 800cb14:	2f6f      	cmp	r7, #111	; 0x6f
 800cb16:	bf0c      	ite	eq
 800cb18:	2308      	moveq	r3, #8
 800cb1a:	230a      	movne	r3, #10
 800cb1c:	2100      	movs	r1, #0
 800cb1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cb22:	6865      	ldr	r5, [r4, #4]
 800cb24:	60a5      	str	r5, [r4, #8]
 800cb26:	2d00      	cmp	r5, #0
 800cb28:	bfa2      	ittt	ge
 800cb2a:	6821      	ldrge	r1, [r4, #0]
 800cb2c:	f021 0104 	bicge.w	r1, r1, #4
 800cb30:	6021      	strge	r1, [r4, #0]
 800cb32:	b90e      	cbnz	r6, 800cb38 <_printf_i+0x118>
 800cb34:	2d00      	cmp	r5, #0
 800cb36:	d04d      	beq.n	800cbd4 <_printf_i+0x1b4>
 800cb38:	4615      	mov	r5, r2
 800cb3a:	fbb6 f1f3 	udiv	r1, r6, r3
 800cb3e:	fb03 6711 	mls	r7, r3, r1, r6
 800cb42:	5dc7      	ldrb	r7, [r0, r7]
 800cb44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cb48:	4637      	mov	r7, r6
 800cb4a:	42bb      	cmp	r3, r7
 800cb4c:	460e      	mov	r6, r1
 800cb4e:	d9f4      	bls.n	800cb3a <_printf_i+0x11a>
 800cb50:	2b08      	cmp	r3, #8
 800cb52:	d10b      	bne.n	800cb6c <_printf_i+0x14c>
 800cb54:	6823      	ldr	r3, [r4, #0]
 800cb56:	07de      	lsls	r6, r3, #31
 800cb58:	d508      	bpl.n	800cb6c <_printf_i+0x14c>
 800cb5a:	6923      	ldr	r3, [r4, #16]
 800cb5c:	6861      	ldr	r1, [r4, #4]
 800cb5e:	4299      	cmp	r1, r3
 800cb60:	bfde      	ittt	le
 800cb62:	2330      	movle	r3, #48	; 0x30
 800cb64:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cb68:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cb6c:	1b52      	subs	r2, r2, r5
 800cb6e:	6122      	str	r2, [r4, #16]
 800cb70:	f8cd a000 	str.w	sl, [sp]
 800cb74:	464b      	mov	r3, r9
 800cb76:	aa03      	add	r2, sp, #12
 800cb78:	4621      	mov	r1, r4
 800cb7a:	4640      	mov	r0, r8
 800cb7c:	f7ff fee2 	bl	800c944 <_printf_common>
 800cb80:	3001      	adds	r0, #1
 800cb82:	d14c      	bne.n	800cc1e <_printf_i+0x1fe>
 800cb84:	f04f 30ff 	mov.w	r0, #4294967295
 800cb88:	b004      	add	sp, #16
 800cb8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb8e:	4835      	ldr	r0, [pc, #212]	; (800cc64 <_printf_i+0x244>)
 800cb90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cb94:	6829      	ldr	r1, [r5, #0]
 800cb96:	6823      	ldr	r3, [r4, #0]
 800cb98:	f851 6b04 	ldr.w	r6, [r1], #4
 800cb9c:	6029      	str	r1, [r5, #0]
 800cb9e:	061d      	lsls	r5, r3, #24
 800cba0:	d514      	bpl.n	800cbcc <_printf_i+0x1ac>
 800cba2:	07df      	lsls	r7, r3, #31
 800cba4:	bf44      	itt	mi
 800cba6:	f043 0320 	orrmi.w	r3, r3, #32
 800cbaa:	6023      	strmi	r3, [r4, #0]
 800cbac:	b91e      	cbnz	r6, 800cbb6 <_printf_i+0x196>
 800cbae:	6823      	ldr	r3, [r4, #0]
 800cbb0:	f023 0320 	bic.w	r3, r3, #32
 800cbb4:	6023      	str	r3, [r4, #0]
 800cbb6:	2310      	movs	r3, #16
 800cbb8:	e7b0      	b.n	800cb1c <_printf_i+0xfc>
 800cbba:	6823      	ldr	r3, [r4, #0]
 800cbbc:	f043 0320 	orr.w	r3, r3, #32
 800cbc0:	6023      	str	r3, [r4, #0]
 800cbc2:	2378      	movs	r3, #120	; 0x78
 800cbc4:	4828      	ldr	r0, [pc, #160]	; (800cc68 <_printf_i+0x248>)
 800cbc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cbca:	e7e3      	b.n	800cb94 <_printf_i+0x174>
 800cbcc:	0659      	lsls	r1, r3, #25
 800cbce:	bf48      	it	mi
 800cbd0:	b2b6      	uxthmi	r6, r6
 800cbd2:	e7e6      	b.n	800cba2 <_printf_i+0x182>
 800cbd4:	4615      	mov	r5, r2
 800cbd6:	e7bb      	b.n	800cb50 <_printf_i+0x130>
 800cbd8:	682b      	ldr	r3, [r5, #0]
 800cbda:	6826      	ldr	r6, [r4, #0]
 800cbdc:	6961      	ldr	r1, [r4, #20]
 800cbde:	1d18      	adds	r0, r3, #4
 800cbe0:	6028      	str	r0, [r5, #0]
 800cbe2:	0635      	lsls	r5, r6, #24
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	d501      	bpl.n	800cbec <_printf_i+0x1cc>
 800cbe8:	6019      	str	r1, [r3, #0]
 800cbea:	e002      	b.n	800cbf2 <_printf_i+0x1d2>
 800cbec:	0670      	lsls	r0, r6, #25
 800cbee:	d5fb      	bpl.n	800cbe8 <_printf_i+0x1c8>
 800cbf0:	8019      	strh	r1, [r3, #0]
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	6123      	str	r3, [r4, #16]
 800cbf6:	4615      	mov	r5, r2
 800cbf8:	e7ba      	b.n	800cb70 <_printf_i+0x150>
 800cbfa:	682b      	ldr	r3, [r5, #0]
 800cbfc:	1d1a      	adds	r2, r3, #4
 800cbfe:	602a      	str	r2, [r5, #0]
 800cc00:	681d      	ldr	r5, [r3, #0]
 800cc02:	6862      	ldr	r2, [r4, #4]
 800cc04:	2100      	movs	r1, #0
 800cc06:	4628      	mov	r0, r5
 800cc08:	f7f4 f812 	bl	8000c30 <memchr>
 800cc0c:	b108      	cbz	r0, 800cc12 <_printf_i+0x1f2>
 800cc0e:	1b40      	subs	r0, r0, r5
 800cc10:	6060      	str	r0, [r4, #4]
 800cc12:	6863      	ldr	r3, [r4, #4]
 800cc14:	6123      	str	r3, [r4, #16]
 800cc16:	2300      	movs	r3, #0
 800cc18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc1c:	e7a8      	b.n	800cb70 <_printf_i+0x150>
 800cc1e:	6923      	ldr	r3, [r4, #16]
 800cc20:	462a      	mov	r2, r5
 800cc22:	4649      	mov	r1, r9
 800cc24:	4640      	mov	r0, r8
 800cc26:	47d0      	blx	sl
 800cc28:	3001      	adds	r0, #1
 800cc2a:	d0ab      	beq.n	800cb84 <_printf_i+0x164>
 800cc2c:	6823      	ldr	r3, [r4, #0]
 800cc2e:	079b      	lsls	r3, r3, #30
 800cc30:	d413      	bmi.n	800cc5a <_printf_i+0x23a>
 800cc32:	68e0      	ldr	r0, [r4, #12]
 800cc34:	9b03      	ldr	r3, [sp, #12]
 800cc36:	4298      	cmp	r0, r3
 800cc38:	bfb8      	it	lt
 800cc3a:	4618      	movlt	r0, r3
 800cc3c:	e7a4      	b.n	800cb88 <_printf_i+0x168>
 800cc3e:	2301      	movs	r3, #1
 800cc40:	4632      	mov	r2, r6
 800cc42:	4649      	mov	r1, r9
 800cc44:	4640      	mov	r0, r8
 800cc46:	47d0      	blx	sl
 800cc48:	3001      	adds	r0, #1
 800cc4a:	d09b      	beq.n	800cb84 <_printf_i+0x164>
 800cc4c:	3501      	adds	r5, #1
 800cc4e:	68e3      	ldr	r3, [r4, #12]
 800cc50:	9903      	ldr	r1, [sp, #12]
 800cc52:	1a5b      	subs	r3, r3, r1
 800cc54:	42ab      	cmp	r3, r5
 800cc56:	dcf2      	bgt.n	800cc3e <_printf_i+0x21e>
 800cc58:	e7eb      	b.n	800cc32 <_printf_i+0x212>
 800cc5a:	2500      	movs	r5, #0
 800cc5c:	f104 0619 	add.w	r6, r4, #25
 800cc60:	e7f5      	b.n	800cc4e <_printf_i+0x22e>
 800cc62:	bf00      	nop
 800cc64:	0800f34a 	.word	0x0800f34a
 800cc68:	0800f35b 	.word	0x0800f35b

0800cc6c <iprintf>:
 800cc6c:	b40f      	push	{r0, r1, r2, r3}
 800cc6e:	4b0a      	ldr	r3, [pc, #40]	; (800cc98 <iprintf+0x2c>)
 800cc70:	b513      	push	{r0, r1, r4, lr}
 800cc72:	681c      	ldr	r4, [r3, #0]
 800cc74:	b124      	cbz	r4, 800cc80 <iprintf+0x14>
 800cc76:	69a3      	ldr	r3, [r4, #24]
 800cc78:	b913      	cbnz	r3, 800cc80 <iprintf+0x14>
 800cc7a:	4620      	mov	r0, r4
 800cc7c:	f001 f858 	bl	800dd30 <__sinit>
 800cc80:	ab05      	add	r3, sp, #20
 800cc82:	9a04      	ldr	r2, [sp, #16]
 800cc84:	68a1      	ldr	r1, [r4, #8]
 800cc86:	9301      	str	r3, [sp, #4]
 800cc88:	4620      	mov	r0, r4
 800cc8a:	f001 fe07 	bl	800e89c <_vfiprintf_r>
 800cc8e:	b002      	add	sp, #8
 800cc90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc94:	b004      	add	sp, #16
 800cc96:	4770      	bx	lr
 800cc98:	20000040 	.word	0x20000040

0800cc9c <_puts_r>:
 800cc9c:	b570      	push	{r4, r5, r6, lr}
 800cc9e:	460e      	mov	r6, r1
 800cca0:	4605      	mov	r5, r0
 800cca2:	b118      	cbz	r0, 800ccac <_puts_r+0x10>
 800cca4:	6983      	ldr	r3, [r0, #24]
 800cca6:	b90b      	cbnz	r3, 800ccac <_puts_r+0x10>
 800cca8:	f001 f842 	bl	800dd30 <__sinit>
 800ccac:	69ab      	ldr	r3, [r5, #24]
 800ccae:	68ac      	ldr	r4, [r5, #8]
 800ccb0:	b913      	cbnz	r3, 800ccb8 <_puts_r+0x1c>
 800ccb2:	4628      	mov	r0, r5
 800ccb4:	f001 f83c 	bl	800dd30 <__sinit>
 800ccb8:	4b2c      	ldr	r3, [pc, #176]	; (800cd6c <_puts_r+0xd0>)
 800ccba:	429c      	cmp	r4, r3
 800ccbc:	d120      	bne.n	800cd00 <_puts_r+0x64>
 800ccbe:	686c      	ldr	r4, [r5, #4]
 800ccc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ccc2:	07db      	lsls	r3, r3, #31
 800ccc4:	d405      	bmi.n	800ccd2 <_puts_r+0x36>
 800ccc6:	89a3      	ldrh	r3, [r4, #12]
 800ccc8:	0598      	lsls	r0, r3, #22
 800ccca:	d402      	bmi.n	800ccd2 <_puts_r+0x36>
 800cccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ccce:	f001 f8d2 	bl	800de76 <__retarget_lock_acquire_recursive>
 800ccd2:	89a3      	ldrh	r3, [r4, #12]
 800ccd4:	0719      	lsls	r1, r3, #28
 800ccd6:	d51d      	bpl.n	800cd14 <_puts_r+0x78>
 800ccd8:	6923      	ldr	r3, [r4, #16]
 800ccda:	b1db      	cbz	r3, 800cd14 <_puts_r+0x78>
 800ccdc:	3e01      	subs	r6, #1
 800ccde:	68a3      	ldr	r3, [r4, #8]
 800cce0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cce4:	3b01      	subs	r3, #1
 800cce6:	60a3      	str	r3, [r4, #8]
 800cce8:	bb39      	cbnz	r1, 800cd3a <_puts_r+0x9e>
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	da38      	bge.n	800cd60 <_puts_r+0xc4>
 800ccee:	4622      	mov	r2, r4
 800ccf0:	210a      	movs	r1, #10
 800ccf2:	4628      	mov	r0, r5
 800ccf4:	f000 f848 	bl	800cd88 <__swbuf_r>
 800ccf8:	3001      	adds	r0, #1
 800ccfa:	d011      	beq.n	800cd20 <_puts_r+0x84>
 800ccfc:	250a      	movs	r5, #10
 800ccfe:	e011      	b.n	800cd24 <_puts_r+0x88>
 800cd00:	4b1b      	ldr	r3, [pc, #108]	; (800cd70 <_puts_r+0xd4>)
 800cd02:	429c      	cmp	r4, r3
 800cd04:	d101      	bne.n	800cd0a <_puts_r+0x6e>
 800cd06:	68ac      	ldr	r4, [r5, #8]
 800cd08:	e7da      	b.n	800ccc0 <_puts_r+0x24>
 800cd0a:	4b1a      	ldr	r3, [pc, #104]	; (800cd74 <_puts_r+0xd8>)
 800cd0c:	429c      	cmp	r4, r3
 800cd0e:	bf08      	it	eq
 800cd10:	68ec      	ldreq	r4, [r5, #12]
 800cd12:	e7d5      	b.n	800ccc0 <_puts_r+0x24>
 800cd14:	4621      	mov	r1, r4
 800cd16:	4628      	mov	r0, r5
 800cd18:	f000 f888 	bl	800ce2c <__swsetup_r>
 800cd1c:	2800      	cmp	r0, #0
 800cd1e:	d0dd      	beq.n	800ccdc <_puts_r+0x40>
 800cd20:	f04f 35ff 	mov.w	r5, #4294967295
 800cd24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd26:	07da      	lsls	r2, r3, #31
 800cd28:	d405      	bmi.n	800cd36 <_puts_r+0x9a>
 800cd2a:	89a3      	ldrh	r3, [r4, #12]
 800cd2c:	059b      	lsls	r3, r3, #22
 800cd2e:	d402      	bmi.n	800cd36 <_puts_r+0x9a>
 800cd30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd32:	f001 f8a1 	bl	800de78 <__retarget_lock_release_recursive>
 800cd36:	4628      	mov	r0, r5
 800cd38:	bd70      	pop	{r4, r5, r6, pc}
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	da04      	bge.n	800cd48 <_puts_r+0xac>
 800cd3e:	69a2      	ldr	r2, [r4, #24]
 800cd40:	429a      	cmp	r2, r3
 800cd42:	dc06      	bgt.n	800cd52 <_puts_r+0xb6>
 800cd44:	290a      	cmp	r1, #10
 800cd46:	d004      	beq.n	800cd52 <_puts_r+0xb6>
 800cd48:	6823      	ldr	r3, [r4, #0]
 800cd4a:	1c5a      	adds	r2, r3, #1
 800cd4c:	6022      	str	r2, [r4, #0]
 800cd4e:	7019      	strb	r1, [r3, #0]
 800cd50:	e7c5      	b.n	800ccde <_puts_r+0x42>
 800cd52:	4622      	mov	r2, r4
 800cd54:	4628      	mov	r0, r5
 800cd56:	f000 f817 	bl	800cd88 <__swbuf_r>
 800cd5a:	3001      	adds	r0, #1
 800cd5c:	d1bf      	bne.n	800ccde <_puts_r+0x42>
 800cd5e:	e7df      	b.n	800cd20 <_puts_r+0x84>
 800cd60:	6823      	ldr	r3, [r4, #0]
 800cd62:	250a      	movs	r5, #10
 800cd64:	1c5a      	adds	r2, r3, #1
 800cd66:	6022      	str	r2, [r4, #0]
 800cd68:	701d      	strb	r5, [r3, #0]
 800cd6a:	e7db      	b.n	800cd24 <_puts_r+0x88>
 800cd6c:	0800f41c 	.word	0x0800f41c
 800cd70:	0800f43c 	.word	0x0800f43c
 800cd74:	0800f3fc 	.word	0x0800f3fc

0800cd78 <puts>:
 800cd78:	4b02      	ldr	r3, [pc, #8]	; (800cd84 <puts+0xc>)
 800cd7a:	4601      	mov	r1, r0
 800cd7c:	6818      	ldr	r0, [r3, #0]
 800cd7e:	f7ff bf8d 	b.w	800cc9c <_puts_r>
 800cd82:	bf00      	nop
 800cd84:	20000040 	.word	0x20000040

0800cd88 <__swbuf_r>:
 800cd88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd8a:	460e      	mov	r6, r1
 800cd8c:	4614      	mov	r4, r2
 800cd8e:	4605      	mov	r5, r0
 800cd90:	b118      	cbz	r0, 800cd9a <__swbuf_r+0x12>
 800cd92:	6983      	ldr	r3, [r0, #24]
 800cd94:	b90b      	cbnz	r3, 800cd9a <__swbuf_r+0x12>
 800cd96:	f000 ffcb 	bl	800dd30 <__sinit>
 800cd9a:	4b21      	ldr	r3, [pc, #132]	; (800ce20 <__swbuf_r+0x98>)
 800cd9c:	429c      	cmp	r4, r3
 800cd9e:	d12b      	bne.n	800cdf8 <__swbuf_r+0x70>
 800cda0:	686c      	ldr	r4, [r5, #4]
 800cda2:	69a3      	ldr	r3, [r4, #24]
 800cda4:	60a3      	str	r3, [r4, #8]
 800cda6:	89a3      	ldrh	r3, [r4, #12]
 800cda8:	071a      	lsls	r2, r3, #28
 800cdaa:	d52f      	bpl.n	800ce0c <__swbuf_r+0x84>
 800cdac:	6923      	ldr	r3, [r4, #16]
 800cdae:	b36b      	cbz	r3, 800ce0c <__swbuf_r+0x84>
 800cdb0:	6923      	ldr	r3, [r4, #16]
 800cdb2:	6820      	ldr	r0, [r4, #0]
 800cdb4:	1ac0      	subs	r0, r0, r3
 800cdb6:	6963      	ldr	r3, [r4, #20]
 800cdb8:	b2f6      	uxtb	r6, r6
 800cdba:	4283      	cmp	r3, r0
 800cdbc:	4637      	mov	r7, r6
 800cdbe:	dc04      	bgt.n	800cdca <__swbuf_r+0x42>
 800cdc0:	4621      	mov	r1, r4
 800cdc2:	4628      	mov	r0, r5
 800cdc4:	f000 ff20 	bl	800dc08 <_fflush_r>
 800cdc8:	bb30      	cbnz	r0, 800ce18 <__swbuf_r+0x90>
 800cdca:	68a3      	ldr	r3, [r4, #8]
 800cdcc:	3b01      	subs	r3, #1
 800cdce:	60a3      	str	r3, [r4, #8]
 800cdd0:	6823      	ldr	r3, [r4, #0]
 800cdd2:	1c5a      	adds	r2, r3, #1
 800cdd4:	6022      	str	r2, [r4, #0]
 800cdd6:	701e      	strb	r6, [r3, #0]
 800cdd8:	6963      	ldr	r3, [r4, #20]
 800cdda:	3001      	adds	r0, #1
 800cddc:	4283      	cmp	r3, r0
 800cdde:	d004      	beq.n	800cdea <__swbuf_r+0x62>
 800cde0:	89a3      	ldrh	r3, [r4, #12]
 800cde2:	07db      	lsls	r3, r3, #31
 800cde4:	d506      	bpl.n	800cdf4 <__swbuf_r+0x6c>
 800cde6:	2e0a      	cmp	r6, #10
 800cde8:	d104      	bne.n	800cdf4 <__swbuf_r+0x6c>
 800cdea:	4621      	mov	r1, r4
 800cdec:	4628      	mov	r0, r5
 800cdee:	f000 ff0b 	bl	800dc08 <_fflush_r>
 800cdf2:	b988      	cbnz	r0, 800ce18 <__swbuf_r+0x90>
 800cdf4:	4638      	mov	r0, r7
 800cdf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdf8:	4b0a      	ldr	r3, [pc, #40]	; (800ce24 <__swbuf_r+0x9c>)
 800cdfa:	429c      	cmp	r4, r3
 800cdfc:	d101      	bne.n	800ce02 <__swbuf_r+0x7a>
 800cdfe:	68ac      	ldr	r4, [r5, #8]
 800ce00:	e7cf      	b.n	800cda2 <__swbuf_r+0x1a>
 800ce02:	4b09      	ldr	r3, [pc, #36]	; (800ce28 <__swbuf_r+0xa0>)
 800ce04:	429c      	cmp	r4, r3
 800ce06:	bf08      	it	eq
 800ce08:	68ec      	ldreq	r4, [r5, #12]
 800ce0a:	e7ca      	b.n	800cda2 <__swbuf_r+0x1a>
 800ce0c:	4621      	mov	r1, r4
 800ce0e:	4628      	mov	r0, r5
 800ce10:	f000 f80c 	bl	800ce2c <__swsetup_r>
 800ce14:	2800      	cmp	r0, #0
 800ce16:	d0cb      	beq.n	800cdb0 <__swbuf_r+0x28>
 800ce18:	f04f 37ff 	mov.w	r7, #4294967295
 800ce1c:	e7ea      	b.n	800cdf4 <__swbuf_r+0x6c>
 800ce1e:	bf00      	nop
 800ce20:	0800f41c 	.word	0x0800f41c
 800ce24:	0800f43c 	.word	0x0800f43c
 800ce28:	0800f3fc 	.word	0x0800f3fc

0800ce2c <__swsetup_r>:
 800ce2c:	4b32      	ldr	r3, [pc, #200]	; (800cef8 <__swsetup_r+0xcc>)
 800ce2e:	b570      	push	{r4, r5, r6, lr}
 800ce30:	681d      	ldr	r5, [r3, #0]
 800ce32:	4606      	mov	r6, r0
 800ce34:	460c      	mov	r4, r1
 800ce36:	b125      	cbz	r5, 800ce42 <__swsetup_r+0x16>
 800ce38:	69ab      	ldr	r3, [r5, #24]
 800ce3a:	b913      	cbnz	r3, 800ce42 <__swsetup_r+0x16>
 800ce3c:	4628      	mov	r0, r5
 800ce3e:	f000 ff77 	bl	800dd30 <__sinit>
 800ce42:	4b2e      	ldr	r3, [pc, #184]	; (800cefc <__swsetup_r+0xd0>)
 800ce44:	429c      	cmp	r4, r3
 800ce46:	d10f      	bne.n	800ce68 <__swsetup_r+0x3c>
 800ce48:	686c      	ldr	r4, [r5, #4]
 800ce4a:	89a3      	ldrh	r3, [r4, #12]
 800ce4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ce50:	0719      	lsls	r1, r3, #28
 800ce52:	d42c      	bmi.n	800ceae <__swsetup_r+0x82>
 800ce54:	06dd      	lsls	r5, r3, #27
 800ce56:	d411      	bmi.n	800ce7c <__swsetup_r+0x50>
 800ce58:	2309      	movs	r3, #9
 800ce5a:	6033      	str	r3, [r6, #0]
 800ce5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ce60:	81a3      	strh	r3, [r4, #12]
 800ce62:	f04f 30ff 	mov.w	r0, #4294967295
 800ce66:	e03e      	b.n	800cee6 <__swsetup_r+0xba>
 800ce68:	4b25      	ldr	r3, [pc, #148]	; (800cf00 <__swsetup_r+0xd4>)
 800ce6a:	429c      	cmp	r4, r3
 800ce6c:	d101      	bne.n	800ce72 <__swsetup_r+0x46>
 800ce6e:	68ac      	ldr	r4, [r5, #8]
 800ce70:	e7eb      	b.n	800ce4a <__swsetup_r+0x1e>
 800ce72:	4b24      	ldr	r3, [pc, #144]	; (800cf04 <__swsetup_r+0xd8>)
 800ce74:	429c      	cmp	r4, r3
 800ce76:	bf08      	it	eq
 800ce78:	68ec      	ldreq	r4, [r5, #12]
 800ce7a:	e7e6      	b.n	800ce4a <__swsetup_r+0x1e>
 800ce7c:	0758      	lsls	r0, r3, #29
 800ce7e:	d512      	bpl.n	800cea6 <__swsetup_r+0x7a>
 800ce80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce82:	b141      	cbz	r1, 800ce96 <__swsetup_r+0x6a>
 800ce84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce88:	4299      	cmp	r1, r3
 800ce8a:	d002      	beq.n	800ce92 <__swsetup_r+0x66>
 800ce8c:	4630      	mov	r0, r6
 800ce8e:	f001 fbfb 	bl	800e688 <_free_r>
 800ce92:	2300      	movs	r3, #0
 800ce94:	6363      	str	r3, [r4, #52]	; 0x34
 800ce96:	89a3      	ldrh	r3, [r4, #12]
 800ce98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ce9c:	81a3      	strh	r3, [r4, #12]
 800ce9e:	2300      	movs	r3, #0
 800cea0:	6063      	str	r3, [r4, #4]
 800cea2:	6923      	ldr	r3, [r4, #16]
 800cea4:	6023      	str	r3, [r4, #0]
 800cea6:	89a3      	ldrh	r3, [r4, #12]
 800cea8:	f043 0308 	orr.w	r3, r3, #8
 800ceac:	81a3      	strh	r3, [r4, #12]
 800ceae:	6923      	ldr	r3, [r4, #16]
 800ceb0:	b94b      	cbnz	r3, 800cec6 <__swsetup_r+0x9a>
 800ceb2:	89a3      	ldrh	r3, [r4, #12]
 800ceb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ceb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cebc:	d003      	beq.n	800cec6 <__swsetup_r+0x9a>
 800cebe:	4621      	mov	r1, r4
 800cec0:	4630      	mov	r0, r6
 800cec2:	f000 ffff 	bl	800dec4 <__smakebuf_r>
 800cec6:	89a0      	ldrh	r0, [r4, #12]
 800cec8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cecc:	f010 0301 	ands.w	r3, r0, #1
 800ced0:	d00a      	beq.n	800cee8 <__swsetup_r+0xbc>
 800ced2:	2300      	movs	r3, #0
 800ced4:	60a3      	str	r3, [r4, #8]
 800ced6:	6963      	ldr	r3, [r4, #20]
 800ced8:	425b      	negs	r3, r3
 800ceda:	61a3      	str	r3, [r4, #24]
 800cedc:	6923      	ldr	r3, [r4, #16]
 800cede:	b943      	cbnz	r3, 800cef2 <__swsetup_r+0xc6>
 800cee0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cee4:	d1ba      	bne.n	800ce5c <__swsetup_r+0x30>
 800cee6:	bd70      	pop	{r4, r5, r6, pc}
 800cee8:	0781      	lsls	r1, r0, #30
 800ceea:	bf58      	it	pl
 800ceec:	6963      	ldrpl	r3, [r4, #20]
 800ceee:	60a3      	str	r3, [r4, #8]
 800cef0:	e7f4      	b.n	800cedc <__swsetup_r+0xb0>
 800cef2:	2000      	movs	r0, #0
 800cef4:	e7f7      	b.n	800cee6 <__swsetup_r+0xba>
 800cef6:	bf00      	nop
 800cef8:	20000040 	.word	0x20000040
 800cefc:	0800f41c 	.word	0x0800f41c
 800cf00:	0800f43c 	.word	0x0800f43c
 800cf04:	0800f3fc 	.word	0x0800f3fc

0800cf08 <quorem>:
 800cf08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf0c:	6903      	ldr	r3, [r0, #16]
 800cf0e:	690c      	ldr	r4, [r1, #16]
 800cf10:	42a3      	cmp	r3, r4
 800cf12:	4607      	mov	r7, r0
 800cf14:	f2c0 8081 	blt.w	800d01a <quorem+0x112>
 800cf18:	3c01      	subs	r4, #1
 800cf1a:	f101 0814 	add.w	r8, r1, #20
 800cf1e:	f100 0514 	add.w	r5, r0, #20
 800cf22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cf26:	9301      	str	r3, [sp, #4]
 800cf28:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cf2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cf30:	3301      	adds	r3, #1
 800cf32:	429a      	cmp	r2, r3
 800cf34:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cf38:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cf3c:	fbb2 f6f3 	udiv	r6, r2, r3
 800cf40:	d331      	bcc.n	800cfa6 <quorem+0x9e>
 800cf42:	f04f 0e00 	mov.w	lr, #0
 800cf46:	4640      	mov	r0, r8
 800cf48:	46ac      	mov	ip, r5
 800cf4a:	46f2      	mov	sl, lr
 800cf4c:	f850 2b04 	ldr.w	r2, [r0], #4
 800cf50:	b293      	uxth	r3, r2
 800cf52:	fb06 e303 	mla	r3, r6, r3, lr
 800cf56:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cf5a:	b29b      	uxth	r3, r3
 800cf5c:	ebaa 0303 	sub.w	r3, sl, r3
 800cf60:	f8dc a000 	ldr.w	sl, [ip]
 800cf64:	0c12      	lsrs	r2, r2, #16
 800cf66:	fa13 f38a 	uxtah	r3, r3, sl
 800cf6a:	fb06 e202 	mla	r2, r6, r2, lr
 800cf6e:	9300      	str	r3, [sp, #0]
 800cf70:	9b00      	ldr	r3, [sp, #0]
 800cf72:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cf76:	b292      	uxth	r2, r2
 800cf78:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cf7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cf80:	f8bd 3000 	ldrh.w	r3, [sp]
 800cf84:	4581      	cmp	r9, r0
 800cf86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf8a:	f84c 3b04 	str.w	r3, [ip], #4
 800cf8e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cf92:	d2db      	bcs.n	800cf4c <quorem+0x44>
 800cf94:	f855 300b 	ldr.w	r3, [r5, fp]
 800cf98:	b92b      	cbnz	r3, 800cfa6 <quorem+0x9e>
 800cf9a:	9b01      	ldr	r3, [sp, #4]
 800cf9c:	3b04      	subs	r3, #4
 800cf9e:	429d      	cmp	r5, r3
 800cfa0:	461a      	mov	r2, r3
 800cfa2:	d32e      	bcc.n	800d002 <quorem+0xfa>
 800cfa4:	613c      	str	r4, [r7, #16]
 800cfa6:	4638      	mov	r0, r7
 800cfa8:	f001 fa56 	bl	800e458 <__mcmp>
 800cfac:	2800      	cmp	r0, #0
 800cfae:	db24      	blt.n	800cffa <quorem+0xf2>
 800cfb0:	3601      	adds	r6, #1
 800cfb2:	4628      	mov	r0, r5
 800cfb4:	f04f 0c00 	mov.w	ip, #0
 800cfb8:	f858 2b04 	ldr.w	r2, [r8], #4
 800cfbc:	f8d0 e000 	ldr.w	lr, [r0]
 800cfc0:	b293      	uxth	r3, r2
 800cfc2:	ebac 0303 	sub.w	r3, ip, r3
 800cfc6:	0c12      	lsrs	r2, r2, #16
 800cfc8:	fa13 f38e 	uxtah	r3, r3, lr
 800cfcc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cfd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cfd4:	b29b      	uxth	r3, r3
 800cfd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cfda:	45c1      	cmp	r9, r8
 800cfdc:	f840 3b04 	str.w	r3, [r0], #4
 800cfe0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cfe4:	d2e8      	bcs.n	800cfb8 <quorem+0xb0>
 800cfe6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cfea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cfee:	b922      	cbnz	r2, 800cffa <quorem+0xf2>
 800cff0:	3b04      	subs	r3, #4
 800cff2:	429d      	cmp	r5, r3
 800cff4:	461a      	mov	r2, r3
 800cff6:	d30a      	bcc.n	800d00e <quorem+0x106>
 800cff8:	613c      	str	r4, [r7, #16]
 800cffa:	4630      	mov	r0, r6
 800cffc:	b003      	add	sp, #12
 800cffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d002:	6812      	ldr	r2, [r2, #0]
 800d004:	3b04      	subs	r3, #4
 800d006:	2a00      	cmp	r2, #0
 800d008:	d1cc      	bne.n	800cfa4 <quorem+0x9c>
 800d00a:	3c01      	subs	r4, #1
 800d00c:	e7c7      	b.n	800cf9e <quorem+0x96>
 800d00e:	6812      	ldr	r2, [r2, #0]
 800d010:	3b04      	subs	r3, #4
 800d012:	2a00      	cmp	r2, #0
 800d014:	d1f0      	bne.n	800cff8 <quorem+0xf0>
 800d016:	3c01      	subs	r4, #1
 800d018:	e7eb      	b.n	800cff2 <quorem+0xea>
 800d01a:	2000      	movs	r0, #0
 800d01c:	e7ee      	b.n	800cffc <quorem+0xf4>
	...

0800d020 <_dtoa_r>:
 800d020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d024:	ed2d 8b02 	vpush	{d8}
 800d028:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d02a:	b091      	sub	sp, #68	; 0x44
 800d02c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d030:	ec59 8b10 	vmov	r8, r9, d0
 800d034:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800d036:	9106      	str	r1, [sp, #24]
 800d038:	4606      	mov	r6, r0
 800d03a:	9208      	str	r2, [sp, #32]
 800d03c:	930c      	str	r3, [sp, #48]	; 0x30
 800d03e:	b975      	cbnz	r5, 800d05e <_dtoa_r+0x3e>
 800d040:	2010      	movs	r0, #16
 800d042:	f000 ff7f 	bl	800df44 <malloc>
 800d046:	4602      	mov	r2, r0
 800d048:	6270      	str	r0, [r6, #36]	; 0x24
 800d04a:	b920      	cbnz	r0, 800d056 <_dtoa_r+0x36>
 800d04c:	4baa      	ldr	r3, [pc, #680]	; (800d2f8 <_dtoa_r+0x2d8>)
 800d04e:	21ea      	movs	r1, #234	; 0xea
 800d050:	48aa      	ldr	r0, [pc, #680]	; (800d2fc <_dtoa_r+0x2dc>)
 800d052:	f001 fdb9 	bl	800ebc8 <__assert_func>
 800d056:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d05a:	6005      	str	r5, [r0, #0]
 800d05c:	60c5      	str	r5, [r0, #12]
 800d05e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d060:	6819      	ldr	r1, [r3, #0]
 800d062:	b151      	cbz	r1, 800d07a <_dtoa_r+0x5a>
 800d064:	685a      	ldr	r2, [r3, #4]
 800d066:	604a      	str	r2, [r1, #4]
 800d068:	2301      	movs	r3, #1
 800d06a:	4093      	lsls	r3, r2
 800d06c:	608b      	str	r3, [r1, #8]
 800d06e:	4630      	mov	r0, r6
 800d070:	f000 ffb0 	bl	800dfd4 <_Bfree>
 800d074:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d076:	2200      	movs	r2, #0
 800d078:	601a      	str	r2, [r3, #0]
 800d07a:	f1b9 0300 	subs.w	r3, r9, #0
 800d07e:	bfbb      	ittet	lt
 800d080:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d084:	9303      	strlt	r3, [sp, #12]
 800d086:	2300      	movge	r3, #0
 800d088:	2201      	movlt	r2, #1
 800d08a:	bfac      	ite	ge
 800d08c:	6023      	strge	r3, [r4, #0]
 800d08e:	6022      	strlt	r2, [r4, #0]
 800d090:	4b9b      	ldr	r3, [pc, #620]	; (800d300 <_dtoa_r+0x2e0>)
 800d092:	9c03      	ldr	r4, [sp, #12]
 800d094:	43a3      	bics	r3, r4
 800d096:	d11c      	bne.n	800d0d2 <_dtoa_r+0xb2>
 800d098:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d09a:	f242 730f 	movw	r3, #9999	; 0x270f
 800d09e:	6013      	str	r3, [r2, #0]
 800d0a0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d0a4:	ea53 0308 	orrs.w	r3, r3, r8
 800d0a8:	f000 84fd 	beq.w	800daa6 <_dtoa_r+0xa86>
 800d0ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d0ae:	b963      	cbnz	r3, 800d0ca <_dtoa_r+0xaa>
 800d0b0:	4b94      	ldr	r3, [pc, #592]	; (800d304 <_dtoa_r+0x2e4>)
 800d0b2:	e01f      	b.n	800d0f4 <_dtoa_r+0xd4>
 800d0b4:	4b94      	ldr	r3, [pc, #592]	; (800d308 <_dtoa_r+0x2e8>)
 800d0b6:	9301      	str	r3, [sp, #4]
 800d0b8:	3308      	adds	r3, #8
 800d0ba:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d0bc:	6013      	str	r3, [r2, #0]
 800d0be:	9801      	ldr	r0, [sp, #4]
 800d0c0:	b011      	add	sp, #68	; 0x44
 800d0c2:	ecbd 8b02 	vpop	{d8}
 800d0c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ca:	4b8e      	ldr	r3, [pc, #568]	; (800d304 <_dtoa_r+0x2e4>)
 800d0cc:	9301      	str	r3, [sp, #4]
 800d0ce:	3303      	adds	r3, #3
 800d0d0:	e7f3      	b.n	800d0ba <_dtoa_r+0x9a>
 800d0d2:	ed9d 8b02 	vldr	d8, [sp, #8]
 800d0d6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d0da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0de:	d10b      	bne.n	800d0f8 <_dtoa_r+0xd8>
 800d0e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	6013      	str	r3, [r2, #0]
 800d0e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	f000 84d9 	beq.w	800daa0 <_dtoa_r+0xa80>
 800d0ee:	4887      	ldr	r0, [pc, #540]	; (800d30c <_dtoa_r+0x2ec>)
 800d0f0:	6018      	str	r0, [r3, #0]
 800d0f2:	1e43      	subs	r3, r0, #1
 800d0f4:	9301      	str	r3, [sp, #4]
 800d0f6:	e7e2      	b.n	800d0be <_dtoa_r+0x9e>
 800d0f8:	a90f      	add	r1, sp, #60	; 0x3c
 800d0fa:	aa0e      	add	r2, sp, #56	; 0x38
 800d0fc:	4630      	mov	r0, r6
 800d0fe:	eeb0 0b48 	vmov.f64	d0, d8
 800d102:	f001 fa4f 	bl	800e5a4 <__d2b>
 800d106:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800d10a:	4605      	mov	r5, r0
 800d10c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800d10e:	2900      	cmp	r1, #0
 800d110:	d046      	beq.n	800d1a0 <_dtoa_r+0x180>
 800d112:	ee18 4a90 	vmov	r4, s17
 800d116:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d11a:	ec53 2b18 	vmov	r2, r3, d8
 800d11e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800d122:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d126:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d12a:	2400      	movs	r4, #0
 800d12c:	ec43 2b16 	vmov	d6, r2, r3
 800d130:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800d134:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800d2e0 <_dtoa_r+0x2c0>
 800d138:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d13c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800d2e8 <_dtoa_r+0x2c8>
 800d140:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d144:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800d2f0 <_dtoa_r+0x2d0>
 800d148:	ee07 1a90 	vmov	s15, r1
 800d14c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800d150:	eeb0 7b46 	vmov.f64	d7, d6
 800d154:	eea4 7b05 	vfma.f64	d7, d4, d5
 800d158:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d15c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d164:	ee16 ba90 	vmov	fp, s13
 800d168:	940a      	str	r4, [sp, #40]	; 0x28
 800d16a:	d508      	bpl.n	800d17e <_dtoa_r+0x15e>
 800d16c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d170:	eeb4 6b47 	vcmp.f64	d6, d7
 800d174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d178:	bf18      	it	ne
 800d17a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800d17e:	f1bb 0f16 	cmp.w	fp, #22
 800d182:	d82f      	bhi.n	800d1e4 <_dtoa_r+0x1c4>
 800d184:	4b62      	ldr	r3, [pc, #392]	; (800d310 <_dtoa_r+0x2f0>)
 800d186:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d18a:	ed93 7b00 	vldr	d7, [r3]
 800d18e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d196:	d501      	bpl.n	800d19c <_dtoa_r+0x17c>
 800d198:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d19c:	2300      	movs	r3, #0
 800d19e:	e022      	b.n	800d1e6 <_dtoa_r+0x1c6>
 800d1a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d1a2:	4401      	add	r1, r0
 800d1a4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800d1a8:	2b20      	cmp	r3, #32
 800d1aa:	bfc1      	itttt	gt
 800d1ac:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d1b0:	fa04 f303 	lslgt.w	r3, r4, r3
 800d1b4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800d1b8:	fa28 f804 	lsrgt.w	r8, r8, r4
 800d1bc:	bfd6      	itet	le
 800d1be:	f1c3 0320 	rsble	r3, r3, #32
 800d1c2:	ea43 0808 	orrgt.w	r8, r3, r8
 800d1c6:	fa08 f803 	lslle.w	r8, r8, r3
 800d1ca:	ee07 8a90 	vmov	s15, r8
 800d1ce:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d1d2:	3901      	subs	r1, #1
 800d1d4:	ee17 4a90 	vmov	r4, s15
 800d1d8:	ec53 2b17 	vmov	r2, r3, d7
 800d1dc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800d1e0:	2401      	movs	r4, #1
 800d1e2:	e7a3      	b.n	800d12c <_dtoa_r+0x10c>
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800d1e8:	1a43      	subs	r3, r0, r1
 800d1ea:	1e5a      	subs	r2, r3, #1
 800d1ec:	bf45      	ittet	mi
 800d1ee:	f1c3 0301 	rsbmi	r3, r3, #1
 800d1f2:	9304      	strmi	r3, [sp, #16]
 800d1f4:	2300      	movpl	r3, #0
 800d1f6:	2300      	movmi	r3, #0
 800d1f8:	9205      	str	r2, [sp, #20]
 800d1fa:	bf54      	ite	pl
 800d1fc:	9304      	strpl	r3, [sp, #16]
 800d1fe:	9305      	strmi	r3, [sp, #20]
 800d200:	f1bb 0f00 	cmp.w	fp, #0
 800d204:	db18      	blt.n	800d238 <_dtoa_r+0x218>
 800d206:	9b05      	ldr	r3, [sp, #20]
 800d208:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800d20c:	445b      	add	r3, fp
 800d20e:	9305      	str	r3, [sp, #20]
 800d210:	2300      	movs	r3, #0
 800d212:	9a06      	ldr	r2, [sp, #24]
 800d214:	2a09      	cmp	r2, #9
 800d216:	d849      	bhi.n	800d2ac <_dtoa_r+0x28c>
 800d218:	2a05      	cmp	r2, #5
 800d21a:	bfc4      	itt	gt
 800d21c:	3a04      	subgt	r2, #4
 800d21e:	9206      	strgt	r2, [sp, #24]
 800d220:	9a06      	ldr	r2, [sp, #24]
 800d222:	f1a2 0202 	sub.w	r2, r2, #2
 800d226:	bfcc      	ite	gt
 800d228:	2400      	movgt	r4, #0
 800d22a:	2401      	movle	r4, #1
 800d22c:	2a03      	cmp	r2, #3
 800d22e:	d848      	bhi.n	800d2c2 <_dtoa_r+0x2a2>
 800d230:	e8df f002 	tbb	[pc, r2]
 800d234:	3a2c2e0b 	.word	0x3a2c2e0b
 800d238:	9b04      	ldr	r3, [sp, #16]
 800d23a:	2200      	movs	r2, #0
 800d23c:	eba3 030b 	sub.w	r3, r3, fp
 800d240:	9304      	str	r3, [sp, #16]
 800d242:	9209      	str	r2, [sp, #36]	; 0x24
 800d244:	f1cb 0300 	rsb	r3, fp, #0
 800d248:	e7e3      	b.n	800d212 <_dtoa_r+0x1f2>
 800d24a:	2200      	movs	r2, #0
 800d24c:	9207      	str	r2, [sp, #28]
 800d24e:	9a08      	ldr	r2, [sp, #32]
 800d250:	2a00      	cmp	r2, #0
 800d252:	dc39      	bgt.n	800d2c8 <_dtoa_r+0x2a8>
 800d254:	f04f 0a01 	mov.w	sl, #1
 800d258:	46d1      	mov	r9, sl
 800d25a:	4652      	mov	r2, sl
 800d25c:	f8cd a020 	str.w	sl, [sp, #32]
 800d260:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800d262:	2100      	movs	r1, #0
 800d264:	6079      	str	r1, [r7, #4]
 800d266:	2004      	movs	r0, #4
 800d268:	f100 0c14 	add.w	ip, r0, #20
 800d26c:	4594      	cmp	ip, r2
 800d26e:	6879      	ldr	r1, [r7, #4]
 800d270:	d92f      	bls.n	800d2d2 <_dtoa_r+0x2b2>
 800d272:	4630      	mov	r0, r6
 800d274:	930d      	str	r3, [sp, #52]	; 0x34
 800d276:	f000 fe6d 	bl	800df54 <_Balloc>
 800d27a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d27c:	9001      	str	r0, [sp, #4]
 800d27e:	4602      	mov	r2, r0
 800d280:	2800      	cmp	r0, #0
 800d282:	d149      	bne.n	800d318 <_dtoa_r+0x2f8>
 800d284:	4b23      	ldr	r3, [pc, #140]	; (800d314 <_dtoa_r+0x2f4>)
 800d286:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d28a:	e6e1      	b.n	800d050 <_dtoa_r+0x30>
 800d28c:	2201      	movs	r2, #1
 800d28e:	e7dd      	b.n	800d24c <_dtoa_r+0x22c>
 800d290:	2200      	movs	r2, #0
 800d292:	9207      	str	r2, [sp, #28]
 800d294:	9a08      	ldr	r2, [sp, #32]
 800d296:	eb0b 0a02 	add.w	sl, fp, r2
 800d29a:	f10a 0901 	add.w	r9, sl, #1
 800d29e:	464a      	mov	r2, r9
 800d2a0:	2a01      	cmp	r2, #1
 800d2a2:	bfb8      	it	lt
 800d2a4:	2201      	movlt	r2, #1
 800d2a6:	e7db      	b.n	800d260 <_dtoa_r+0x240>
 800d2a8:	2201      	movs	r2, #1
 800d2aa:	e7f2      	b.n	800d292 <_dtoa_r+0x272>
 800d2ac:	2401      	movs	r4, #1
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800d2b4:	f04f 3aff 	mov.w	sl, #4294967295
 800d2b8:	2100      	movs	r1, #0
 800d2ba:	46d1      	mov	r9, sl
 800d2bc:	2212      	movs	r2, #18
 800d2be:	9108      	str	r1, [sp, #32]
 800d2c0:	e7ce      	b.n	800d260 <_dtoa_r+0x240>
 800d2c2:	2201      	movs	r2, #1
 800d2c4:	9207      	str	r2, [sp, #28]
 800d2c6:	e7f5      	b.n	800d2b4 <_dtoa_r+0x294>
 800d2c8:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d2cc:	46d1      	mov	r9, sl
 800d2ce:	4652      	mov	r2, sl
 800d2d0:	e7c6      	b.n	800d260 <_dtoa_r+0x240>
 800d2d2:	3101      	adds	r1, #1
 800d2d4:	6079      	str	r1, [r7, #4]
 800d2d6:	0040      	lsls	r0, r0, #1
 800d2d8:	e7c6      	b.n	800d268 <_dtoa_r+0x248>
 800d2da:	bf00      	nop
 800d2dc:	f3af 8000 	nop.w
 800d2e0:	636f4361 	.word	0x636f4361
 800d2e4:	3fd287a7 	.word	0x3fd287a7
 800d2e8:	8b60c8b3 	.word	0x8b60c8b3
 800d2ec:	3fc68a28 	.word	0x3fc68a28
 800d2f0:	509f79fb 	.word	0x509f79fb
 800d2f4:	3fd34413 	.word	0x3fd34413
 800d2f8:	0800f379 	.word	0x0800f379
 800d2fc:	0800f390 	.word	0x0800f390
 800d300:	7ff00000 	.word	0x7ff00000
 800d304:	0800f375 	.word	0x0800f375
 800d308:	0800f36c 	.word	0x0800f36c
 800d30c:	0800f349 	.word	0x0800f349
 800d310:	0800f4e0 	.word	0x0800f4e0
 800d314:	0800f3eb 	.word	0x0800f3eb
 800d318:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800d31a:	9901      	ldr	r1, [sp, #4]
 800d31c:	6011      	str	r1, [r2, #0]
 800d31e:	f1b9 0f0e 	cmp.w	r9, #14
 800d322:	d86c      	bhi.n	800d3fe <_dtoa_r+0x3de>
 800d324:	2c00      	cmp	r4, #0
 800d326:	d06a      	beq.n	800d3fe <_dtoa_r+0x3de>
 800d328:	f1bb 0f00 	cmp.w	fp, #0
 800d32c:	f340 80a0 	ble.w	800d470 <_dtoa_r+0x450>
 800d330:	49c1      	ldr	r1, [pc, #772]	; (800d638 <_dtoa_r+0x618>)
 800d332:	f00b 020f 	and.w	r2, fp, #15
 800d336:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800d33a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d33e:	ed92 7b00 	vldr	d7, [r2]
 800d342:	ea4f 112b 	mov.w	r1, fp, asr #4
 800d346:	f000 8087 	beq.w	800d458 <_dtoa_r+0x438>
 800d34a:	4abc      	ldr	r2, [pc, #752]	; (800d63c <_dtoa_r+0x61c>)
 800d34c:	ed92 6b08 	vldr	d6, [r2, #32]
 800d350:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800d354:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d358:	f001 010f 	and.w	r1, r1, #15
 800d35c:	2203      	movs	r2, #3
 800d35e:	48b7      	ldr	r0, [pc, #732]	; (800d63c <_dtoa_r+0x61c>)
 800d360:	2900      	cmp	r1, #0
 800d362:	d17b      	bne.n	800d45c <_dtoa_r+0x43c>
 800d364:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d368:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d36c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d370:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d372:	2900      	cmp	r1, #0
 800d374:	f000 80a2 	beq.w	800d4bc <_dtoa_r+0x49c>
 800d378:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d37c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d380:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d388:	f140 8098 	bpl.w	800d4bc <_dtoa_r+0x49c>
 800d38c:	f1b9 0f00 	cmp.w	r9, #0
 800d390:	f000 8094 	beq.w	800d4bc <_dtoa_r+0x49c>
 800d394:	f1ba 0f00 	cmp.w	sl, #0
 800d398:	dd2f      	ble.n	800d3fa <_dtoa_r+0x3da>
 800d39a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800d39e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d3a2:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d3a6:	f10b 37ff 	add.w	r7, fp, #4294967295
 800d3aa:	3201      	adds	r2, #1
 800d3ac:	4650      	mov	r0, sl
 800d3ae:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d3b2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800d3b6:	ee07 2a90 	vmov	s15, r2
 800d3ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d3be:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d3c2:	ee15 4a90 	vmov	r4, s11
 800d3c6:	ec52 1b15 	vmov	r1, r2, d5
 800d3ca:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800d3ce:	2800      	cmp	r0, #0
 800d3d0:	d177      	bne.n	800d4c2 <_dtoa_r+0x4a2>
 800d3d2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d3d6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d3da:	ec42 1b17 	vmov	d7, r1, r2
 800d3de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d3e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3e6:	f300 8263 	bgt.w	800d8b0 <_dtoa_r+0x890>
 800d3ea:	eeb1 7b47 	vneg.f64	d7, d7
 800d3ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d3f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3f6:	f100 8258 	bmi.w	800d8aa <_dtoa_r+0x88a>
 800d3fa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d3fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d400:	2a00      	cmp	r2, #0
 800d402:	f2c0 811d 	blt.w	800d640 <_dtoa_r+0x620>
 800d406:	f1bb 0f0e 	cmp.w	fp, #14
 800d40a:	f300 8119 	bgt.w	800d640 <_dtoa_r+0x620>
 800d40e:	4b8a      	ldr	r3, [pc, #552]	; (800d638 <_dtoa_r+0x618>)
 800d410:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d414:	ed93 6b00 	vldr	d6, [r3]
 800d418:	9b08      	ldr	r3, [sp, #32]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	f280 80b7 	bge.w	800d58e <_dtoa_r+0x56e>
 800d420:	f1b9 0f00 	cmp.w	r9, #0
 800d424:	f300 80b3 	bgt.w	800d58e <_dtoa_r+0x56e>
 800d428:	f040 823f 	bne.w	800d8aa <_dtoa_r+0x88a>
 800d42c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d430:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d434:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d438:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d440:	464c      	mov	r4, r9
 800d442:	464f      	mov	r7, r9
 800d444:	f280 8215 	bge.w	800d872 <_dtoa_r+0x852>
 800d448:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d44c:	2331      	movs	r3, #49	; 0x31
 800d44e:	f808 3b01 	strb.w	r3, [r8], #1
 800d452:	f10b 0b01 	add.w	fp, fp, #1
 800d456:	e211      	b.n	800d87c <_dtoa_r+0x85c>
 800d458:	2202      	movs	r2, #2
 800d45a:	e780      	b.n	800d35e <_dtoa_r+0x33e>
 800d45c:	07cc      	lsls	r4, r1, #31
 800d45e:	d504      	bpl.n	800d46a <_dtoa_r+0x44a>
 800d460:	ed90 6b00 	vldr	d6, [r0]
 800d464:	3201      	adds	r2, #1
 800d466:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d46a:	1049      	asrs	r1, r1, #1
 800d46c:	3008      	adds	r0, #8
 800d46e:	e777      	b.n	800d360 <_dtoa_r+0x340>
 800d470:	d022      	beq.n	800d4b8 <_dtoa_r+0x498>
 800d472:	f1cb 0100 	rsb	r1, fp, #0
 800d476:	4a70      	ldr	r2, [pc, #448]	; (800d638 <_dtoa_r+0x618>)
 800d478:	f001 000f 	and.w	r0, r1, #15
 800d47c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d480:	ed92 7b00 	vldr	d7, [r2]
 800d484:	ee28 7b07 	vmul.f64	d7, d8, d7
 800d488:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d48c:	486b      	ldr	r0, [pc, #428]	; (800d63c <_dtoa_r+0x61c>)
 800d48e:	1109      	asrs	r1, r1, #4
 800d490:	2400      	movs	r4, #0
 800d492:	2202      	movs	r2, #2
 800d494:	b929      	cbnz	r1, 800d4a2 <_dtoa_r+0x482>
 800d496:	2c00      	cmp	r4, #0
 800d498:	f43f af6a 	beq.w	800d370 <_dtoa_r+0x350>
 800d49c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d4a0:	e766      	b.n	800d370 <_dtoa_r+0x350>
 800d4a2:	07cf      	lsls	r7, r1, #31
 800d4a4:	d505      	bpl.n	800d4b2 <_dtoa_r+0x492>
 800d4a6:	ed90 6b00 	vldr	d6, [r0]
 800d4aa:	3201      	adds	r2, #1
 800d4ac:	2401      	movs	r4, #1
 800d4ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d4b2:	1049      	asrs	r1, r1, #1
 800d4b4:	3008      	adds	r0, #8
 800d4b6:	e7ed      	b.n	800d494 <_dtoa_r+0x474>
 800d4b8:	2202      	movs	r2, #2
 800d4ba:	e759      	b.n	800d370 <_dtoa_r+0x350>
 800d4bc:	465f      	mov	r7, fp
 800d4be:	4648      	mov	r0, r9
 800d4c0:	e775      	b.n	800d3ae <_dtoa_r+0x38e>
 800d4c2:	ec42 1b17 	vmov	d7, r1, r2
 800d4c6:	4a5c      	ldr	r2, [pc, #368]	; (800d638 <_dtoa_r+0x618>)
 800d4c8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d4cc:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d4d0:	9a01      	ldr	r2, [sp, #4]
 800d4d2:	1814      	adds	r4, r2, r0
 800d4d4:	9a07      	ldr	r2, [sp, #28]
 800d4d6:	b352      	cbz	r2, 800d52e <_dtoa_r+0x50e>
 800d4d8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800d4dc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800d4e0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d4e4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d4e8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d4ec:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d4f0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d4f4:	ee14 2a90 	vmov	r2, s9
 800d4f8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d4fc:	3230      	adds	r2, #48	; 0x30
 800d4fe:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d502:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d50a:	f808 2b01 	strb.w	r2, [r8], #1
 800d50e:	d439      	bmi.n	800d584 <_dtoa_r+0x564>
 800d510:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d514:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d51c:	d472      	bmi.n	800d604 <_dtoa_r+0x5e4>
 800d51e:	45a0      	cmp	r8, r4
 800d520:	f43f af6b 	beq.w	800d3fa <_dtoa_r+0x3da>
 800d524:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d528:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d52c:	e7e0      	b.n	800d4f0 <_dtoa_r+0x4d0>
 800d52e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d532:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d536:	4621      	mov	r1, r4
 800d538:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d53c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d540:	ee14 2a90 	vmov	r2, s9
 800d544:	3230      	adds	r2, #48	; 0x30
 800d546:	f808 2b01 	strb.w	r2, [r8], #1
 800d54a:	45a0      	cmp	r8, r4
 800d54c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d550:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d554:	d118      	bne.n	800d588 <_dtoa_r+0x568>
 800d556:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d55a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d55e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d566:	dc4d      	bgt.n	800d604 <_dtoa_r+0x5e4>
 800d568:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d56c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d574:	f57f af41 	bpl.w	800d3fa <_dtoa_r+0x3da>
 800d578:	4688      	mov	r8, r1
 800d57a:	3901      	subs	r1, #1
 800d57c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800d580:	2b30      	cmp	r3, #48	; 0x30
 800d582:	d0f9      	beq.n	800d578 <_dtoa_r+0x558>
 800d584:	46bb      	mov	fp, r7
 800d586:	e02a      	b.n	800d5de <_dtoa_r+0x5be>
 800d588:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d58c:	e7d6      	b.n	800d53c <_dtoa_r+0x51c>
 800d58e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d592:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800d596:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d59a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d59e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d5a2:	ee15 3a10 	vmov	r3, s10
 800d5a6:	3330      	adds	r3, #48	; 0x30
 800d5a8:	f808 3b01 	strb.w	r3, [r8], #1
 800d5ac:	9b01      	ldr	r3, [sp, #4]
 800d5ae:	eba8 0303 	sub.w	r3, r8, r3
 800d5b2:	4599      	cmp	r9, r3
 800d5b4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d5b8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d5bc:	d133      	bne.n	800d626 <_dtoa_r+0x606>
 800d5be:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d5c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d5c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5ca:	dc1a      	bgt.n	800d602 <_dtoa_r+0x5e2>
 800d5cc:	eeb4 7b46 	vcmp.f64	d7, d6
 800d5d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5d4:	d103      	bne.n	800d5de <_dtoa_r+0x5be>
 800d5d6:	ee15 3a10 	vmov	r3, s10
 800d5da:	07d9      	lsls	r1, r3, #31
 800d5dc:	d411      	bmi.n	800d602 <_dtoa_r+0x5e2>
 800d5de:	4629      	mov	r1, r5
 800d5e0:	4630      	mov	r0, r6
 800d5e2:	f000 fcf7 	bl	800dfd4 <_Bfree>
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d5ea:	f888 3000 	strb.w	r3, [r8]
 800d5ee:	f10b 0301 	add.w	r3, fp, #1
 800d5f2:	6013      	str	r3, [r2, #0]
 800d5f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	f43f ad61 	beq.w	800d0be <_dtoa_r+0x9e>
 800d5fc:	f8c3 8000 	str.w	r8, [r3]
 800d600:	e55d      	b.n	800d0be <_dtoa_r+0x9e>
 800d602:	465f      	mov	r7, fp
 800d604:	4643      	mov	r3, r8
 800d606:	4698      	mov	r8, r3
 800d608:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d60c:	2a39      	cmp	r2, #57	; 0x39
 800d60e:	d106      	bne.n	800d61e <_dtoa_r+0x5fe>
 800d610:	9a01      	ldr	r2, [sp, #4]
 800d612:	429a      	cmp	r2, r3
 800d614:	d1f7      	bne.n	800d606 <_dtoa_r+0x5e6>
 800d616:	9901      	ldr	r1, [sp, #4]
 800d618:	2230      	movs	r2, #48	; 0x30
 800d61a:	3701      	adds	r7, #1
 800d61c:	700a      	strb	r2, [r1, #0]
 800d61e:	781a      	ldrb	r2, [r3, #0]
 800d620:	3201      	adds	r2, #1
 800d622:	701a      	strb	r2, [r3, #0]
 800d624:	e7ae      	b.n	800d584 <_dtoa_r+0x564>
 800d626:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d62a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d62e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d632:	d1b2      	bne.n	800d59a <_dtoa_r+0x57a>
 800d634:	e7d3      	b.n	800d5de <_dtoa_r+0x5be>
 800d636:	bf00      	nop
 800d638:	0800f4e0 	.word	0x0800f4e0
 800d63c:	0800f4b8 	.word	0x0800f4b8
 800d640:	9907      	ldr	r1, [sp, #28]
 800d642:	2900      	cmp	r1, #0
 800d644:	f000 80d0 	beq.w	800d7e8 <_dtoa_r+0x7c8>
 800d648:	9906      	ldr	r1, [sp, #24]
 800d64a:	2901      	cmp	r1, #1
 800d64c:	f300 80b4 	bgt.w	800d7b8 <_dtoa_r+0x798>
 800d650:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d652:	2900      	cmp	r1, #0
 800d654:	f000 80ac 	beq.w	800d7b0 <_dtoa_r+0x790>
 800d658:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d65c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d660:	461c      	mov	r4, r3
 800d662:	930a      	str	r3, [sp, #40]	; 0x28
 800d664:	9b04      	ldr	r3, [sp, #16]
 800d666:	4413      	add	r3, r2
 800d668:	9304      	str	r3, [sp, #16]
 800d66a:	9b05      	ldr	r3, [sp, #20]
 800d66c:	2101      	movs	r1, #1
 800d66e:	4413      	add	r3, r2
 800d670:	4630      	mov	r0, r6
 800d672:	9305      	str	r3, [sp, #20]
 800d674:	f000 fd66 	bl	800e144 <__i2b>
 800d678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d67a:	4607      	mov	r7, r0
 800d67c:	f1b8 0f00 	cmp.w	r8, #0
 800d680:	dd0d      	ble.n	800d69e <_dtoa_r+0x67e>
 800d682:	9a05      	ldr	r2, [sp, #20]
 800d684:	2a00      	cmp	r2, #0
 800d686:	dd0a      	ble.n	800d69e <_dtoa_r+0x67e>
 800d688:	4542      	cmp	r2, r8
 800d68a:	9904      	ldr	r1, [sp, #16]
 800d68c:	bfa8      	it	ge
 800d68e:	4642      	movge	r2, r8
 800d690:	1a89      	subs	r1, r1, r2
 800d692:	9104      	str	r1, [sp, #16]
 800d694:	9905      	ldr	r1, [sp, #20]
 800d696:	eba8 0802 	sub.w	r8, r8, r2
 800d69a:	1a8a      	subs	r2, r1, r2
 800d69c:	9205      	str	r2, [sp, #20]
 800d69e:	b303      	cbz	r3, 800d6e2 <_dtoa_r+0x6c2>
 800d6a0:	9a07      	ldr	r2, [sp, #28]
 800d6a2:	2a00      	cmp	r2, #0
 800d6a4:	f000 80a5 	beq.w	800d7f2 <_dtoa_r+0x7d2>
 800d6a8:	2c00      	cmp	r4, #0
 800d6aa:	dd13      	ble.n	800d6d4 <_dtoa_r+0x6b4>
 800d6ac:	4639      	mov	r1, r7
 800d6ae:	4622      	mov	r2, r4
 800d6b0:	4630      	mov	r0, r6
 800d6b2:	930d      	str	r3, [sp, #52]	; 0x34
 800d6b4:	f000 fe06 	bl	800e2c4 <__pow5mult>
 800d6b8:	462a      	mov	r2, r5
 800d6ba:	4601      	mov	r1, r0
 800d6bc:	4607      	mov	r7, r0
 800d6be:	4630      	mov	r0, r6
 800d6c0:	f000 fd56 	bl	800e170 <__multiply>
 800d6c4:	4629      	mov	r1, r5
 800d6c6:	900a      	str	r0, [sp, #40]	; 0x28
 800d6c8:	4630      	mov	r0, r6
 800d6ca:	f000 fc83 	bl	800dfd4 <_Bfree>
 800d6ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d6d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d6d2:	4615      	mov	r5, r2
 800d6d4:	1b1a      	subs	r2, r3, r4
 800d6d6:	d004      	beq.n	800d6e2 <_dtoa_r+0x6c2>
 800d6d8:	4629      	mov	r1, r5
 800d6da:	4630      	mov	r0, r6
 800d6dc:	f000 fdf2 	bl	800e2c4 <__pow5mult>
 800d6e0:	4605      	mov	r5, r0
 800d6e2:	2101      	movs	r1, #1
 800d6e4:	4630      	mov	r0, r6
 800d6e6:	f000 fd2d 	bl	800e144 <__i2b>
 800d6ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	4604      	mov	r4, r0
 800d6f0:	f340 8081 	ble.w	800d7f6 <_dtoa_r+0x7d6>
 800d6f4:	461a      	mov	r2, r3
 800d6f6:	4601      	mov	r1, r0
 800d6f8:	4630      	mov	r0, r6
 800d6fa:	f000 fde3 	bl	800e2c4 <__pow5mult>
 800d6fe:	9b06      	ldr	r3, [sp, #24]
 800d700:	2b01      	cmp	r3, #1
 800d702:	4604      	mov	r4, r0
 800d704:	dd7a      	ble.n	800d7fc <_dtoa_r+0x7dc>
 800d706:	2300      	movs	r3, #0
 800d708:	930a      	str	r3, [sp, #40]	; 0x28
 800d70a:	6922      	ldr	r2, [r4, #16]
 800d70c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d710:	6910      	ldr	r0, [r2, #16]
 800d712:	f000 fcc7 	bl	800e0a4 <__hi0bits>
 800d716:	f1c0 0020 	rsb	r0, r0, #32
 800d71a:	9b05      	ldr	r3, [sp, #20]
 800d71c:	4418      	add	r0, r3
 800d71e:	f010 001f 	ands.w	r0, r0, #31
 800d722:	f000 808c 	beq.w	800d83e <_dtoa_r+0x81e>
 800d726:	f1c0 0220 	rsb	r2, r0, #32
 800d72a:	2a04      	cmp	r2, #4
 800d72c:	f340 8085 	ble.w	800d83a <_dtoa_r+0x81a>
 800d730:	f1c0 001c 	rsb	r0, r0, #28
 800d734:	9b04      	ldr	r3, [sp, #16]
 800d736:	4403      	add	r3, r0
 800d738:	9304      	str	r3, [sp, #16]
 800d73a:	9b05      	ldr	r3, [sp, #20]
 800d73c:	4403      	add	r3, r0
 800d73e:	4480      	add	r8, r0
 800d740:	9305      	str	r3, [sp, #20]
 800d742:	9b04      	ldr	r3, [sp, #16]
 800d744:	2b00      	cmp	r3, #0
 800d746:	dd05      	ble.n	800d754 <_dtoa_r+0x734>
 800d748:	4629      	mov	r1, r5
 800d74a:	461a      	mov	r2, r3
 800d74c:	4630      	mov	r0, r6
 800d74e:	f000 fe13 	bl	800e378 <__lshift>
 800d752:	4605      	mov	r5, r0
 800d754:	9b05      	ldr	r3, [sp, #20]
 800d756:	2b00      	cmp	r3, #0
 800d758:	dd05      	ble.n	800d766 <_dtoa_r+0x746>
 800d75a:	4621      	mov	r1, r4
 800d75c:	461a      	mov	r2, r3
 800d75e:	4630      	mov	r0, r6
 800d760:	f000 fe0a 	bl	800e378 <__lshift>
 800d764:	4604      	mov	r4, r0
 800d766:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d06a      	beq.n	800d842 <_dtoa_r+0x822>
 800d76c:	4621      	mov	r1, r4
 800d76e:	4628      	mov	r0, r5
 800d770:	f000 fe72 	bl	800e458 <__mcmp>
 800d774:	2800      	cmp	r0, #0
 800d776:	da64      	bge.n	800d842 <_dtoa_r+0x822>
 800d778:	2300      	movs	r3, #0
 800d77a:	4629      	mov	r1, r5
 800d77c:	220a      	movs	r2, #10
 800d77e:	4630      	mov	r0, r6
 800d780:	f000 fc4a 	bl	800e018 <__multadd>
 800d784:	9b07      	ldr	r3, [sp, #28]
 800d786:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d78a:	4605      	mov	r5, r0
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	f000 8191 	beq.w	800dab4 <_dtoa_r+0xa94>
 800d792:	4639      	mov	r1, r7
 800d794:	2300      	movs	r3, #0
 800d796:	220a      	movs	r2, #10
 800d798:	4630      	mov	r0, r6
 800d79a:	f000 fc3d 	bl	800e018 <__multadd>
 800d79e:	f1ba 0f00 	cmp.w	sl, #0
 800d7a2:	4607      	mov	r7, r0
 800d7a4:	f300 808d 	bgt.w	800d8c2 <_dtoa_r+0x8a2>
 800d7a8:	9b06      	ldr	r3, [sp, #24]
 800d7aa:	2b02      	cmp	r3, #2
 800d7ac:	dc50      	bgt.n	800d850 <_dtoa_r+0x830>
 800d7ae:	e088      	b.n	800d8c2 <_dtoa_r+0x8a2>
 800d7b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d7b2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d7b6:	e751      	b.n	800d65c <_dtoa_r+0x63c>
 800d7b8:	f109 34ff 	add.w	r4, r9, #4294967295
 800d7bc:	42a3      	cmp	r3, r4
 800d7be:	bfbf      	itttt	lt
 800d7c0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800d7c2:	1ae3      	sublt	r3, r4, r3
 800d7c4:	18d2      	addlt	r2, r2, r3
 800d7c6:	9209      	strlt	r2, [sp, #36]	; 0x24
 800d7c8:	bfb6      	itet	lt
 800d7ca:	4623      	movlt	r3, r4
 800d7cc:	1b1c      	subge	r4, r3, r4
 800d7ce:	2400      	movlt	r4, #0
 800d7d0:	f1b9 0f00 	cmp.w	r9, #0
 800d7d4:	bfb5      	itete	lt
 800d7d6:	9a04      	ldrlt	r2, [sp, #16]
 800d7d8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800d7dc:	eba2 0809 	sublt.w	r8, r2, r9
 800d7e0:	464a      	movge	r2, r9
 800d7e2:	bfb8      	it	lt
 800d7e4:	2200      	movlt	r2, #0
 800d7e6:	e73c      	b.n	800d662 <_dtoa_r+0x642>
 800d7e8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d7ec:	9f07      	ldr	r7, [sp, #28]
 800d7ee:	461c      	mov	r4, r3
 800d7f0:	e744      	b.n	800d67c <_dtoa_r+0x65c>
 800d7f2:	461a      	mov	r2, r3
 800d7f4:	e770      	b.n	800d6d8 <_dtoa_r+0x6b8>
 800d7f6:	9b06      	ldr	r3, [sp, #24]
 800d7f8:	2b01      	cmp	r3, #1
 800d7fa:	dc18      	bgt.n	800d82e <_dtoa_r+0x80e>
 800d7fc:	9b02      	ldr	r3, [sp, #8]
 800d7fe:	b9b3      	cbnz	r3, 800d82e <_dtoa_r+0x80e>
 800d800:	9b03      	ldr	r3, [sp, #12]
 800d802:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d806:	b9a2      	cbnz	r2, 800d832 <_dtoa_r+0x812>
 800d808:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d80c:	0d12      	lsrs	r2, r2, #20
 800d80e:	0512      	lsls	r2, r2, #20
 800d810:	b18a      	cbz	r2, 800d836 <_dtoa_r+0x816>
 800d812:	9b04      	ldr	r3, [sp, #16]
 800d814:	3301      	adds	r3, #1
 800d816:	9304      	str	r3, [sp, #16]
 800d818:	9b05      	ldr	r3, [sp, #20]
 800d81a:	3301      	adds	r3, #1
 800d81c:	9305      	str	r3, [sp, #20]
 800d81e:	2301      	movs	r3, #1
 800d820:	930a      	str	r3, [sp, #40]	; 0x28
 800d822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d824:	2b00      	cmp	r3, #0
 800d826:	f47f af70 	bne.w	800d70a <_dtoa_r+0x6ea>
 800d82a:	2001      	movs	r0, #1
 800d82c:	e775      	b.n	800d71a <_dtoa_r+0x6fa>
 800d82e:	2300      	movs	r3, #0
 800d830:	e7f6      	b.n	800d820 <_dtoa_r+0x800>
 800d832:	9b02      	ldr	r3, [sp, #8]
 800d834:	e7f4      	b.n	800d820 <_dtoa_r+0x800>
 800d836:	920a      	str	r2, [sp, #40]	; 0x28
 800d838:	e7f3      	b.n	800d822 <_dtoa_r+0x802>
 800d83a:	d082      	beq.n	800d742 <_dtoa_r+0x722>
 800d83c:	4610      	mov	r0, r2
 800d83e:	301c      	adds	r0, #28
 800d840:	e778      	b.n	800d734 <_dtoa_r+0x714>
 800d842:	f1b9 0f00 	cmp.w	r9, #0
 800d846:	dc37      	bgt.n	800d8b8 <_dtoa_r+0x898>
 800d848:	9b06      	ldr	r3, [sp, #24]
 800d84a:	2b02      	cmp	r3, #2
 800d84c:	dd34      	ble.n	800d8b8 <_dtoa_r+0x898>
 800d84e:	46ca      	mov	sl, r9
 800d850:	f1ba 0f00 	cmp.w	sl, #0
 800d854:	d10d      	bne.n	800d872 <_dtoa_r+0x852>
 800d856:	4621      	mov	r1, r4
 800d858:	4653      	mov	r3, sl
 800d85a:	2205      	movs	r2, #5
 800d85c:	4630      	mov	r0, r6
 800d85e:	f000 fbdb 	bl	800e018 <__multadd>
 800d862:	4601      	mov	r1, r0
 800d864:	4604      	mov	r4, r0
 800d866:	4628      	mov	r0, r5
 800d868:	f000 fdf6 	bl	800e458 <__mcmp>
 800d86c:	2800      	cmp	r0, #0
 800d86e:	f73f adeb 	bgt.w	800d448 <_dtoa_r+0x428>
 800d872:	9b08      	ldr	r3, [sp, #32]
 800d874:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d878:	ea6f 0b03 	mvn.w	fp, r3
 800d87c:	f04f 0900 	mov.w	r9, #0
 800d880:	4621      	mov	r1, r4
 800d882:	4630      	mov	r0, r6
 800d884:	f000 fba6 	bl	800dfd4 <_Bfree>
 800d888:	2f00      	cmp	r7, #0
 800d88a:	f43f aea8 	beq.w	800d5de <_dtoa_r+0x5be>
 800d88e:	f1b9 0f00 	cmp.w	r9, #0
 800d892:	d005      	beq.n	800d8a0 <_dtoa_r+0x880>
 800d894:	45b9      	cmp	r9, r7
 800d896:	d003      	beq.n	800d8a0 <_dtoa_r+0x880>
 800d898:	4649      	mov	r1, r9
 800d89a:	4630      	mov	r0, r6
 800d89c:	f000 fb9a 	bl	800dfd4 <_Bfree>
 800d8a0:	4639      	mov	r1, r7
 800d8a2:	4630      	mov	r0, r6
 800d8a4:	f000 fb96 	bl	800dfd4 <_Bfree>
 800d8a8:	e699      	b.n	800d5de <_dtoa_r+0x5be>
 800d8aa:	2400      	movs	r4, #0
 800d8ac:	4627      	mov	r7, r4
 800d8ae:	e7e0      	b.n	800d872 <_dtoa_r+0x852>
 800d8b0:	46bb      	mov	fp, r7
 800d8b2:	4604      	mov	r4, r0
 800d8b4:	4607      	mov	r7, r0
 800d8b6:	e5c7      	b.n	800d448 <_dtoa_r+0x428>
 800d8b8:	9b07      	ldr	r3, [sp, #28]
 800d8ba:	46ca      	mov	sl, r9
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	f000 8100 	beq.w	800dac2 <_dtoa_r+0xaa2>
 800d8c2:	f1b8 0f00 	cmp.w	r8, #0
 800d8c6:	dd05      	ble.n	800d8d4 <_dtoa_r+0x8b4>
 800d8c8:	4639      	mov	r1, r7
 800d8ca:	4642      	mov	r2, r8
 800d8cc:	4630      	mov	r0, r6
 800d8ce:	f000 fd53 	bl	800e378 <__lshift>
 800d8d2:	4607      	mov	r7, r0
 800d8d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d05d      	beq.n	800d996 <_dtoa_r+0x976>
 800d8da:	6879      	ldr	r1, [r7, #4]
 800d8dc:	4630      	mov	r0, r6
 800d8de:	f000 fb39 	bl	800df54 <_Balloc>
 800d8e2:	4680      	mov	r8, r0
 800d8e4:	b928      	cbnz	r0, 800d8f2 <_dtoa_r+0x8d2>
 800d8e6:	4b82      	ldr	r3, [pc, #520]	; (800daf0 <_dtoa_r+0xad0>)
 800d8e8:	4602      	mov	r2, r0
 800d8ea:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d8ee:	f7ff bbaf 	b.w	800d050 <_dtoa_r+0x30>
 800d8f2:	693a      	ldr	r2, [r7, #16]
 800d8f4:	3202      	adds	r2, #2
 800d8f6:	0092      	lsls	r2, r2, #2
 800d8f8:	f107 010c 	add.w	r1, r7, #12
 800d8fc:	300c      	adds	r0, #12
 800d8fe:	f7fe fd5d 	bl	800c3bc <memcpy>
 800d902:	2201      	movs	r2, #1
 800d904:	4641      	mov	r1, r8
 800d906:	4630      	mov	r0, r6
 800d908:	f000 fd36 	bl	800e378 <__lshift>
 800d90c:	9b01      	ldr	r3, [sp, #4]
 800d90e:	3301      	adds	r3, #1
 800d910:	9304      	str	r3, [sp, #16]
 800d912:	9b01      	ldr	r3, [sp, #4]
 800d914:	4453      	add	r3, sl
 800d916:	9308      	str	r3, [sp, #32]
 800d918:	9b02      	ldr	r3, [sp, #8]
 800d91a:	f003 0301 	and.w	r3, r3, #1
 800d91e:	46b9      	mov	r9, r7
 800d920:	9307      	str	r3, [sp, #28]
 800d922:	4607      	mov	r7, r0
 800d924:	9b04      	ldr	r3, [sp, #16]
 800d926:	4621      	mov	r1, r4
 800d928:	3b01      	subs	r3, #1
 800d92a:	4628      	mov	r0, r5
 800d92c:	9302      	str	r3, [sp, #8]
 800d92e:	f7ff faeb 	bl	800cf08 <quorem>
 800d932:	4603      	mov	r3, r0
 800d934:	3330      	adds	r3, #48	; 0x30
 800d936:	9005      	str	r0, [sp, #20]
 800d938:	4649      	mov	r1, r9
 800d93a:	4628      	mov	r0, r5
 800d93c:	9309      	str	r3, [sp, #36]	; 0x24
 800d93e:	f000 fd8b 	bl	800e458 <__mcmp>
 800d942:	463a      	mov	r2, r7
 800d944:	4682      	mov	sl, r0
 800d946:	4621      	mov	r1, r4
 800d948:	4630      	mov	r0, r6
 800d94a:	f000 fda1 	bl	800e490 <__mdiff>
 800d94e:	68c2      	ldr	r2, [r0, #12]
 800d950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d952:	4680      	mov	r8, r0
 800d954:	bb0a      	cbnz	r2, 800d99a <_dtoa_r+0x97a>
 800d956:	4601      	mov	r1, r0
 800d958:	4628      	mov	r0, r5
 800d95a:	f000 fd7d 	bl	800e458 <__mcmp>
 800d95e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d960:	4602      	mov	r2, r0
 800d962:	4641      	mov	r1, r8
 800d964:	4630      	mov	r0, r6
 800d966:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800d96a:	f000 fb33 	bl	800dfd4 <_Bfree>
 800d96e:	9b06      	ldr	r3, [sp, #24]
 800d970:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d972:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d976:	ea43 0102 	orr.w	r1, r3, r2
 800d97a:	9b07      	ldr	r3, [sp, #28]
 800d97c:	430b      	orrs	r3, r1
 800d97e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d980:	d10d      	bne.n	800d99e <_dtoa_r+0x97e>
 800d982:	2b39      	cmp	r3, #57	; 0x39
 800d984:	d029      	beq.n	800d9da <_dtoa_r+0x9ba>
 800d986:	f1ba 0f00 	cmp.w	sl, #0
 800d98a:	dd01      	ble.n	800d990 <_dtoa_r+0x970>
 800d98c:	9b05      	ldr	r3, [sp, #20]
 800d98e:	3331      	adds	r3, #49	; 0x31
 800d990:	9a02      	ldr	r2, [sp, #8]
 800d992:	7013      	strb	r3, [r2, #0]
 800d994:	e774      	b.n	800d880 <_dtoa_r+0x860>
 800d996:	4638      	mov	r0, r7
 800d998:	e7b8      	b.n	800d90c <_dtoa_r+0x8ec>
 800d99a:	2201      	movs	r2, #1
 800d99c:	e7e1      	b.n	800d962 <_dtoa_r+0x942>
 800d99e:	f1ba 0f00 	cmp.w	sl, #0
 800d9a2:	db06      	blt.n	800d9b2 <_dtoa_r+0x992>
 800d9a4:	9906      	ldr	r1, [sp, #24]
 800d9a6:	ea41 0a0a 	orr.w	sl, r1, sl
 800d9aa:	9907      	ldr	r1, [sp, #28]
 800d9ac:	ea5a 0101 	orrs.w	r1, sl, r1
 800d9b0:	d120      	bne.n	800d9f4 <_dtoa_r+0x9d4>
 800d9b2:	2a00      	cmp	r2, #0
 800d9b4:	ddec      	ble.n	800d990 <_dtoa_r+0x970>
 800d9b6:	4629      	mov	r1, r5
 800d9b8:	2201      	movs	r2, #1
 800d9ba:	4630      	mov	r0, r6
 800d9bc:	9304      	str	r3, [sp, #16]
 800d9be:	f000 fcdb 	bl	800e378 <__lshift>
 800d9c2:	4621      	mov	r1, r4
 800d9c4:	4605      	mov	r5, r0
 800d9c6:	f000 fd47 	bl	800e458 <__mcmp>
 800d9ca:	2800      	cmp	r0, #0
 800d9cc:	9b04      	ldr	r3, [sp, #16]
 800d9ce:	dc02      	bgt.n	800d9d6 <_dtoa_r+0x9b6>
 800d9d0:	d1de      	bne.n	800d990 <_dtoa_r+0x970>
 800d9d2:	07da      	lsls	r2, r3, #31
 800d9d4:	d5dc      	bpl.n	800d990 <_dtoa_r+0x970>
 800d9d6:	2b39      	cmp	r3, #57	; 0x39
 800d9d8:	d1d8      	bne.n	800d98c <_dtoa_r+0x96c>
 800d9da:	9a02      	ldr	r2, [sp, #8]
 800d9dc:	2339      	movs	r3, #57	; 0x39
 800d9de:	7013      	strb	r3, [r2, #0]
 800d9e0:	4643      	mov	r3, r8
 800d9e2:	4698      	mov	r8, r3
 800d9e4:	3b01      	subs	r3, #1
 800d9e6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800d9ea:	2a39      	cmp	r2, #57	; 0x39
 800d9ec:	d051      	beq.n	800da92 <_dtoa_r+0xa72>
 800d9ee:	3201      	adds	r2, #1
 800d9f0:	701a      	strb	r2, [r3, #0]
 800d9f2:	e745      	b.n	800d880 <_dtoa_r+0x860>
 800d9f4:	2a00      	cmp	r2, #0
 800d9f6:	dd03      	ble.n	800da00 <_dtoa_r+0x9e0>
 800d9f8:	2b39      	cmp	r3, #57	; 0x39
 800d9fa:	d0ee      	beq.n	800d9da <_dtoa_r+0x9ba>
 800d9fc:	3301      	adds	r3, #1
 800d9fe:	e7c7      	b.n	800d990 <_dtoa_r+0x970>
 800da00:	9a04      	ldr	r2, [sp, #16]
 800da02:	9908      	ldr	r1, [sp, #32]
 800da04:	f802 3c01 	strb.w	r3, [r2, #-1]
 800da08:	428a      	cmp	r2, r1
 800da0a:	d02b      	beq.n	800da64 <_dtoa_r+0xa44>
 800da0c:	4629      	mov	r1, r5
 800da0e:	2300      	movs	r3, #0
 800da10:	220a      	movs	r2, #10
 800da12:	4630      	mov	r0, r6
 800da14:	f000 fb00 	bl	800e018 <__multadd>
 800da18:	45b9      	cmp	r9, r7
 800da1a:	4605      	mov	r5, r0
 800da1c:	f04f 0300 	mov.w	r3, #0
 800da20:	f04f 020a 	mov.w	r2, #10
 800da24:	4649      	mov	r1, r9
 800da26:	4630      	mov	r0, r6
 800da28:	d107      	bne.n	800da3a <_dtoa_r+0xa1a>
 800da2a:	f000 faf5 	bl	800e018 <__multadd>
 800da2e:	4681      	mov	r9, r0
 800da30:	4607      	mov	r7, r0
 800da32:	9b04      	ldr	r3, [sp, #16]
 800da34:	3301      	adds	r3, #1
 800da36:	9304      	str	r3, [sp, #16]
 800da38:	e774      	b.n	800d924 <_dtoa_r+0x904>
 800da3a:	f000 faed 	bl	800e018 <__multadd>
 800da3e:	4639      	mov	r1, r7
 800da40:	4681      	mov	r9, r0
 800da42:	2300      	movs	r3, #0
 800da44:	220a      	movs	r2, #10
 800da46:	4630      	mov	r0, r6
 800da48:	f000 fae6 	bl	800e018 <__multadd>
 800da4c:	4607      	mov	r7, r0
 800da4e:	e7f0      	b.n	800da32 <_dtoa_r+0xa12>
 800da50:	f1ba 0f00 	cmp.w	sl, #0
 800da54:	9a01      	ldr	r2, [sp, #4]
 800da56:	bfcc      	ite	gt
 800da58:	46d0      	movgt	r8, sl
 800da5a:	f04f 0801 	movle.w	r8, #1
 800da5e:	4490      	add	r8, r2
 800da60:	f04f 0900 	mov.w	r9, #0
 800da64:	4629      	mov	r1, r5
 800da66:	2201      	movs	r2, #1
 800da68:	4630      	mov	r0, r6
 800da6a:	9302      	str	r3, [sp, #8]
 800da6c:	f000 fc84 	bl	800e378 <__lshift>
 800da70:	4621      	mov	r1, r4
 800da72:	4605      	mov	r5, r0
 800da74:	f000 fcf0 	bl	800e458 <__mcmp>
 800da78:	2800      	cmp	r0, #0
 800da7a:	dcb1      	bgt.n	800d9e0 <_dtoa_r+0x9c0>
 800da7c:	d102      	bne.n	800da84 <_dtoa_r+0xa64>
 800da7e:	9b02      	ldr	r3, [sp, #8]
 800da80:	07db      	lsls	r3, r3, #31
 800da82:	d4ad      	bmi.n	800d9e0 <_dtoa_r+0x9c0>
 800da84:	4643      	mov	r3, r8
 800da86:	4698      	mov	r8, r3
 800da88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800da8c:	2a30      	cmp	r2, #48	; 0x30
 800da8e:	d0fa      	beq.n	800da86 <_dtoa_r+0xa66>
 800da90:	e6f6      	b.n	800d880 <_dtoa_r+0x860>
 800da92:	9a01      	ldr	r2, [sp, #4]
 800da94:	429a      	cmp	r2, r3
 800da96:	d1a4      	bne.n	800d9e2 <_dtoa_r+0x9c2>
 800da98:	f10b 0b01 	add.w	fp, fp, #1
 800da9c:	2331      	movs	r3, #49	; 0x31
 800da9e:	e778      	b.n	800d992 <_dtoa_r+0x972>
 800daa0:	4b14      	ldr	r3, [pc, #80]	; (800daf4 <_dtoa_r+0xad4>)
 800daa2:	f7ff bb27 	b.w	800d0f4 <_dtoa_r+0xd4>
 800daa6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	f47f ab03 	bne.w	800d0b4 <_dtoa_r+0x94>
 800daae:	4b12      	ldr	r3, [pc, #72]	; (800daf8 <_dtoa_r+0xad8>)
 800dab0:	f7ff bb20 	b.w	800d0f4 <_dtoa_r+0xd4>
 800dab4:	f1ba 0f00 	cmp.w	sl, #0
 800dab8:	dc03      	bgt.n	800dac2 <_dtoa_r+0xaa2>
 800daba:	9b06      	ldr	r3, [sp, #24]
 800dabc:	2b02      	cmp	r3, #2
 800dabe:	f73f aec7 	bgt.w	800d850 <_dtoa_r+0x830>
 800dac2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800dac6:	4621      	mov	r1, r4
 800dac8:	4628      	mov	r0, r5
 800daca:	f7ff fa1d 	bl	800cf08 <quorem>
 800dace:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800dad2:	f808 3b01 	strb.w	r3, [r8], #1
 800dad6:	9a01      	ldr	r2, [sp, #4]
 800dad8:	eba8 0202 	sub.w	r2, r8, r2
 800dadc:	4592      	cmp	sl, r2
 800dade:	ddb7      	ble.n	800da50 <_dtoa_r+0xa30>
 800dae0:	4629      	mov	r1, r5
 800dae2:	2300      	movs	r3, #0
 800dae4:	220a      	movs	r2, #10
 800dae6:	4630      	mov	r0, r6
 800dae8:	f000 fa96 	bl	800e018 <__multadd>
 800daec:	4605      	mov	r5, r0
 800daee:	e7ea      	b.n	800dac6 <_dtoa_r+0xaa6>
 800daf0:	0800f3eb 	.word	0x0800f3eb
 800daf4:	0800f348 	.word	0x0800f348
 800daf8:	0800f36c 	.word	0x0800f36c

0800dafc <__sflush_r>:
 800dafc:	898a      	ldrh	r2, [r1, #12]
 800dafe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db02:	4605      	mov	r5, r0
 800db04:	0710      	lsls	r0, r2, #28
 800db06:	460c      	mov	r4, r1
 800db08:	d458      	bmi.n	800dbbc <__sflush_r+0xc0>
 800db0a:	684b      	ldr	r3, [r1, #4]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	dc05      	bgt.n	800db1c <__sflush_r+0x20>
 800db10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800db12:	2b00      	cmp	r3, #0
 800db14:	dc02      	bgt.n	800db1c <__sflush_r+0x20>
 800db16:	2000      	movs	r0, #0
 800db18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800db1e:	2e00      	cmp	r6, #0
 800db20:	d0f9      	beq.n	800db16 <__sflush_r+0x1a>
 800db22:	2300      	movs	r3, #0
 800db24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800db28:	682f      	ldr	r7, [r5, #0]
 800db2a:	602b      	str	r3, [r5, #0]
 800db2c:	d032      	beq.n	800db94 <__sflush_r+0x98>
 800db2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800db30:	89a3      	ldrh	r3, [r4, #12]
 800db32:	075a      	lsls	r2, r3, #29
 800db34:	d505      	bpl.n	800db42 <__sflush_r+0x46>
 800db36:	6863      	ldr	r3, [r4, #4]
 800db38:	1ac0      	subs	r0, r0, r3
 800db3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800db3c:	b10b      	cbz	r3, 800db42 <__sflush_r+0x46>
 800db3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800db40:	1ac0      	subs	r0, r0, r3
 800db42:	2300      	movs	r3, #0
 800db44:	4602      	mov	r2, r0
 800db46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800db48:	6a21      	ldr	r1, [r4, #32]
 800db4a:	4628      	mov	r0, r5
 800db4c:	47b0      	blx	r6
 800db4e:	1c43      	adds	r3, r0, #1
 800db50:	89a3      	ldrh	r3, [r4, #12]
 800db52:	d106      	bne.n	800db62 <__sflush_r+0x66>
 800db54:	6829      	ldr	r1, [r5, #0]
 800db56:	291d      	cmp	r1, #29
 800db58:	d82c      	bhi.n	800dbb4 <__sflush_r+0xb8>
 800db5a:	4a2a      	ldr	r2, [pc, #168]	; (800dc04 <__sflush_r+0x108>)
 800db5c:	40ca      	lsrs	r2, r1
 800db5e:	07d6      	lsls	r6, r2, #31
 800db60:	d528      	bpl.n	800dbb4 <__sflush_r+0xb8>
 800db62:	2200      	movs	r2, #0
 800db64:	6062      	str	r2, [r4, #4]
 800db66:	04d9      	lsls	r1, r3, #19
 800db68:	6922      	ldr	r2, [r4, #16]
 800db6a:	6022      	str	r2, [r4, #0]
 800db6c:	d504      	bpl.n	800db78 <__sflush_r+0x7c>
 800db6e:	1c42      	adds	r2, r0, #1
 800db70:	d101      	bne.n	800db76 <__sflush_r+0x7a>
 800db72:	682b      	ldr	r3, [r5, #0]
 800db74:	b903      	cbnz	r3, 800db78 <__sflush_r+0x7c>
 800db76:	6560      	str	r0, [r4, #84]	; 0x54
 800db78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db7a:	602f      	str	r7, [r5, #0]
 800db7c:	2900      	cmp	r1, #0
 800db7e:	d0ca      	beq.n	800db16 <__sflush_r+0x1a>
 800db80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db84:	4299      	cmp	r1, r3
 800db86:	d002      	beq.n	800db8e <__sflush_r+0x92>
 800db88:	4628      	mov	r0, r5
 800db8a:	f000 fd7d 	bl	800e688 <_free_r>
 800db8e:	2000      	movs	r0, #0
 800db90:	6360      	str	r0, [r4, #52]	; 0x34
 800db92:	e7c1      	b.n	800db18 <__sflush_r+0x1c>
 800db94:	6a21      	ldr	r1, [r4, #32]
 800db96:	2301      	movs	r3, #1
 800db98:	4628      	mov	r0, r5
 800db9a:	47b0      	blx	r6
 800db9c:	1c41      	adds	r1, r0, #1
 800db9e:	d1c7      	bne.n	800db30 <__sflush_r+0x34>
 800dba0:	682b      	ldr	r3, [r5, #0]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d0c4      	beq.n	800db30 <__sflush_r+0x34>
 800dba6:	2b1d      	cmp	r3, #29
 800dba8:	d001      	beq.n	800dbae <__sflush_r+0xb2>
 800dbaa:	2b16      	cmp	r3, #22
 800dbac:	d101      	bne.n	800dbb2 <__sflush_r+0xb6>
 800dbae:	602f      	str	r7, [r5, #0]
 800dbb0:	e7b1      	b.n	800db16 <__sflush_r+0x1a>
 800dbb2:	89a3      	ldrh	r3, [r4, #12]
 800dbb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbb8:	81a3      	strh	r3, [r4, #12]
 800dbba:	e7ad      	b.n	800db18 <__sflush_r+0x1c>
 800dbbc:	690f      	ldr	r7, [r1, #16]
 800dbbe:	2f00      	cmp	r7, #0
 800dbc0:	d0a9      	beq.n	800db16 <__sflush_r+0x1a>
 800dbc2:	0793      	lsls	r3, r2, #30
 800dbc4:	680e      	ldr	r6, [r1, #0]
 800dbc6:	bf08      	it	eq
 800dbc8:	694b      	ldreq	r3, [r1, #20]
 800dbca:	600f      	str	r7, [r1, #0]
 800dbcc:	bf18      	it	ne
 800dbce:	2300      	movne	r3, #0
 800dbd0:	eba6 0807 	sub.w	r8, r6, r7
 800dbd4:	608b      	str	r3, [r1, #8]
 800dbd6:	f1b8 0f00 	cmp.w	r8, #0
 800dbda:	dd9c      	ble.n	800db16 <__sflush_r+0x1a>
 800dbdc:	6a21      	ldr	r1, [r4, #32]
 800dbde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dbe0:	4643      	mov	r3, r8
 800dbe2:	463a      	mov	r2, r7
 800dbe4:	4628      	mov	r0, r5
 800dbe6:	47b0      	blx	r6
 800dbe8:	2800      	cmp	r0, #0
 800dbea:	dc06      	bgt.n	800dbfa <__sflush_r+0xfe>
 800dbec:	89a3      	ldrh	r3, [r4, #12]
 800dbee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbf2:	81a3      	strh	r3, [r4, #12]
 800dbf4:	f04f 30ff 	mov.w	r0, #4294967295
 800dbf8:	e78e      	b.n	800db18 <__sflush_r+0x1c>
 800dbfa:	4407      	add	r7, r0
 800dbfc:	eba8 0800 	sub.w	r8, r8, r0
 800dc00:	e7e9      	b.n	800dbd6 <__sflush_r+0xda>
 800dc02:	bf00      	nop
 800dc04:	20400001 	.word	0x20400001

0800dc08 <_fflush_r>:
 800dc08:	b538      	push	{r3, r4, r5, lr}
 800dc0a:	690b      	ldr	r3, [r1, #16]
 800dc0c:	4605      	mov	r5, r0
 800dc0e:	460c      	mov	r4, r1
 800dc10:	b913      	cbnz	r3, 800dc18 <_fflush_r+0x10>
 800dc12:	2500      	movs	r5, #0
 800dc14:	4628      	mov	r0, r5
 800dc16:	bd38      	pop	{r3, r4, r5, pc}
 800dc18:	b118      	cbz	r0, 800dc22 <_fflush_r+0x1a>
 800dc1a:	6983      	ldr	r3, [r0, #24]
 800dc1c:	b90b      	cbnz	r3, 800dc22 <_fflush_r+0x1a>
 800dc1e:	f000 f887 	bl	800dd30 <__sinit>
 800dc22:	4b14      	ldr	r3, [pc, #80]	; (800dc74 <_fflush_r+0x6c>)
 800dc24:	429c      	cmp	r4, r3
 800dc26:	d11b      	bne.n	800dc60 <_fflush_r+0x58>
 800dc28:	686c      	ldr	r4, [r5, #4]
 800dc2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d0ef      	beq.n	800dc12 <_fflush_r+0xa>
 800dc32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dc34:	07d0      	lsls	r0, r2, #31
 800dc36:	d404      	bmi.n	800dc42 <_fflush_r+0x3a>
 800dc38:	0599      	lsls	r1, r3, #22
 800dc3a:	d402      	bmi.n	800dc42 <_fflush_r+0x3a>
 800dc3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc3e:	f000 f91a 	bl	800de76 <__retarget_lock_acquire_recursive>
 800dc42:	4628      	mov	r0, r5
 800dc44:	4621      	mov	r1, r4
 800dc46:	f7ff ff59 	bl	800dafc <__sflush_r>
 800dc4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc4c:	07da      	lsls	r2, r3, #31
 800dc4e:	4605      	mov	r5, r0
 800dc50:	d4e0      	bmi.n	800dc14 <_fflush_r+0xc>
 800dc52:	89a3      	ldrh	r3, [r4, #12]
 800dc54:	059b      	lsls	r3, r3, #22
 800dc56:	d4dd      	bmi.n	800dc14 <_fflush_r+0xc>
 800dc58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc5a:	f000 f90d 	bl	800de78 <__retarget_lock_release_recursive>
 800dc5e:	e7d9      	b.n	800dc14 <_fflush_r+0xc>
 800dc60:	4b05      	ldr	r3, [pc, #20]	; (800dc78 <_fflush_r+0x70>)
 800dc62:	429c      	cmp	r4, r3
 800dc64:	d101      	bne.n	800dc6a <_fflush_r+0x62>
 800dc66:	68ac      	ldr	r4, [r5, #8]
 800dc68:	e7df      	b.n	800dc2a <_fflush_r+0x22>
 800dc6a:	4b04      	ldr	r3, [pc, #16]	; (800dc7c <_fflush_r+0x74>)
 800dc6c:	429c      	cmp	r4, r3
 800dc6e:	bf08      	it	eq
 800dc70:	68ec      	ldreq	r4, [r5, #12]
 800dc72:	e7da      	b.n	800dc2a <_fflush_r+0x22>
 800dc74:	0800f41c 	.word	0x0800f41c
 800dc78:	0800f43c 	.word	0x0800f43c
 800dc7c:	0800f3fc 	.word	0x0800f3fc

0800dc80 <std>:
 800dc80:	2300      	movs	r3, #0
 800dc82:	b510      	push	{r4, lr}
 800dc84:	4604      	mov	r4, r0
 800dc86:	e9c0 3300 	strd	r3, r3, [r0]
 800dc8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dc8e:	6083      	str	r3, [r0, #8]
 800dc90:	8181      	strh	r1, [r0, #12]
 800dc92:	6643      	str	r3, [r0, #100]	; 0x64
 800dc94:	81c2      	strh	r2, [r0, #14]
 800dc96:	6183      	str	r3, [r0, #24]
 800dc98:	4619      	mov	r1, r3
 800dc9a:	2208      	movs	r2, #8
 800dc9c:	305c      	adds	r0, #92	; 0x5c
 800dc9e:	f7fe fb9b 	bl	800c3d8 <memset>
 800dca2:	4b05      	ldr	r3, [pc, #20]	; (800dcb8 <std+0x38>)
 800dca4:	6263      	str	r3, [r4, #36]	; 0x24
 800dca6:	4b05      	ldr	r3, [pc, #20]	; (800dcbc <std+0x3c>)
 800dca8:	62a3      	str	r3, [r4, #40]	; 0x28
 800dcaa:	4b05      	ldr	r3, [pc, #20]	; (800dcc0 <std+0x40>)
 800dcac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dcae:	4b05      	ldr	r3, [pc, #20]	; (800dcc4 <std+0x44>)
 800dcb0:	6224      	str	r4, [r4, #32]
 800dcb2:	6323      	str	r3, [r4, #48]	; 0x30
 800dcb4:	bd10      	pop	{r4, pc}
 800dcb6:	bf00      	nop
 800dcb8:	0800eb1d 	.word	0x0800eb1d
 800dcbc:	0800eb3f 	.word	0x0800eb3f
 800dcc0:	0800eb77 	.word	0x0800eb77
 800dcc4:	0800eb9b 	.word	0x0800eb9b

0800dcc8 <_cleanup_r>:
 800dcc8:	4901      	ldr	r1, [pc, #4]	; (800dcd0 <_cleanup_r+0x8>)
 800dcca:	f000 b8af 	b.w	800de2c <_fwalk_reent>
 800dcce:	bf00      	nop
 800dcd0:	0800dc09 	.word	0x0800dc09

0800dcd4 <__sfmoreglue>:
 800dcd4:	b570      	push	{r4, r5, r6, lr}
 800dcd6:	2268      	movs	r2, #104	; 0x68
 800dcd8:	1e4d      	subs	r5, r1, #1
 800dcda:	4355      	muls	r5, r2
 800dcdc:	460e      	mov	r6, r1
 800dcde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dce2:	f000 fd3d 	bl	800e760 <_malloc_r>
 800dce6:	4604      	mov	r4, r0
 800dce8:	b140      	cbz	r0, 800dcfc <__sfmoreglue+0x28>
 800dcea:	2100      	movs	r1, #0
 800dcec:	e9c0 1600 	strd	r1, r6, [r0]
 800dcf0:	300c      	adds	r0, #12
 800dcf2:	60a0      	str	r0, [r4, #8]
 800dcf4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dcf8:	f7fe fb6e 	bl	800c3d8 <memset>
 800dcfc:	4620      	mov	r0, r4
 800dcfe:	bd70      	pop	{r4, r5, r6, pc}

0800dd00 <__sfp_lock_acquire>:
 800dd00:	4801      	ldr	r0, [pc, #4]	; (800dd08 <__sfp_lock_acquire+0x8>)
 800dd02:	f000 b8b8 	b.w	800de76 <__retarget_lock_acquire_recursive>
 800dd06:	bf00      	nop
 800dd08:	20000505 	.word	0x20000505

0800dd0c <__sfp_lock_release>:
 800dd0c:	4801      	ldr	r0, [pc, #4]	; (800dd14 <__sfp_lock_release+0x8>)
 800dd0e:	f000 b8b3 	b.w	800de78 <__retarget_lock_release_recursive>
 800dd12:	bf00      	nop
 800dd14:	20000505 	.word	0x20000505

0800dd18 <__sinit_lock_acquire>:
 800dd18:	4801      	ldr	r0, [pc, #4]	; (800dd20 <__sinit_lock_acquire+0x8>)
 800dd1a:	f000 b8ac 	b.w	800de76 <__retarget_lock_acquire_recursive>
 800dd1e:	bf00      	nop
 800dd20:	20000506 	.word	0x20000506

0800dd24 <__sinit_lock_release>:
 800dd24:	4801      	ldr	r0, [pc, #4]	; (800dd2c <__sinit_lock_release+0x8>)
 800dd26:	f000 b8a7 	b.w	800de78 <__retarget_lock_release_recursive>
 800dd2a:	bf00      	nop
 800dd2c:	20000506 	.word	0x20000506

0800dd30 <__sinit>:
 800dd30:	b510      	push	{r4, lr}
 800dd32:	4604      	mov	r4, r0
 800dd34:	f7ff fff0 	bl	800dd18 <__sinit_lock_acquire>
 800dd38:	69a3      	ldr	r3, [r4, #24]
 800dd3a:	b11b      	cbz	r3, 800dd44 <__sinit+0x14>
 800dd3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd40:	f7ff bff0 	b.w	800dd24 <__sinit_lock_release>
 800dd44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800dd48:	6523      	str	r3, [r4, #80]	; 0x50
 800dd4a:	4b13      	ldr	r3, [pc, #76]	; (800dd98 <__sinit+0x68>)
 800dd4c:	4a13      	ldr	r2, [pc, #76]	; (800dd9c <__sinit+0x6c>)
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	62a2      	str	r2, [r4, #40]	; 0x28
 800dd52:	42a3      	cmp	r3, r4
 800dd54:	bf04      	itt	eq
 800dd56:	2301      	moveq	r3, #1
 800dd58:	61a3      	streq	r3, [r4, #24]
 800dd5a:	4620      	mov	r0, r4
 800dd5c:	f000 f820 	bl	800dda0 <__sfp>
 800dd60:	6060      	str	r0, [r4, #4]
 800dd62:	4620      	mov	r0, r4
 800dd64:	f000 f81c 	bl	800dda0 <__sfp>
 800dd68:	60a0      	str	r0, [r4, #8]
 800dd6a:	4620      	mov	r0, r4
 800dd6c:	f000 f818 	bl	800dda0 <__sfp>
 800dd70:	2200      	movs	r2, #0
 800dd72:	60e0      	str	r0, [r4, #12]
 800dd74:	2104      	movs	r1, #4
 800dd76:	6860      	ldr	r0, [r4, #4]
 800dd78:	f7ff ff82 	bl	800dc80 <std>
 800dd7c:	68a0      	ldr	r0, [r4, #8]
 800dd7e:	2201      	movs	r2, #1
 800dd80:	2109      	movs	r1, #9
 800dd82:	f7ff ff7d 	bl	800dc80 <std>
 800dd86:	68e0      	ldr	r0, [r4, #12]
 800dd88:	2202      	movs	r2, #2
 800dd8a:	2112      	movs	r1, #18
 800dd8c:	f7ff ff78 	bl	800dc80 <std>
 800dd90:	2301      	movs	r3, #1
 800dd92:	61a3      	str	r3, [r4, #24]
 800dd94:	e7d2      	b.n	800dd3c <__sinit+0xc>
 800dd96:	bf00      	nop
 800dd98:	0800f334 	.word	0x0800f334
 800dd9c:	0800dcc9 	.word	0x0800dcc9

0800dda0 <__sfp>:
 800dda0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dda2:	4607      	mov	r7, r0
 800dda4:	f7ff ffac 	bl	800dd00 <__sfp_lock_acquire>
 800dda8:	4b1e      	ldr	r3, [pc, #120]	; (800de24 <__sfp+0x84>)
 800ddaa:	681e      	ldr	r6, [r3, #0]
 800ddac:	69b3      	ldr	r3, [r6, #24]
 800ddae:	b913      	cbnz	r3, 800ddb6 <__sfp+0x16>
 800ddb0:	4630      	mov	r0, r6
 800ddb2:	f7ff ffbd 	bl	800dd30 <__sinit>
 800ddb6:	3648      	adds	r6, #72	; 0x48
 800ddb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ddbc:	3b01      	subs	r3, #1
 800ddbe:	d503      	bpl.n	800ddc8 <__sfp+0x28>
 800ddc0:	6833      	ldr	r3, [r6, #0]
 800ddc2:	b30b      	cbz	r3, 800de08 <__sfp+0x68>
 800ddc4:	6836      	ldr	r6, [r6, #0]
 800ddc6:	e7f7      	b.n	800ddb8 <__sfp+0x18>
 800ddc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ddcc:	b9d5      	cbnz	r5, 800de04 <__sfp+0x64>
 800ddce:	4b16      	ldr	r3, [pc, #88]	; (800de28 <__sfp+0x88>)
 800ddd0:	60e3      	str	r3, [r4, #12]
 800ddd2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ddd6:	6665      	str	r5, [r4, #100]	; 0x64
 800ddd8:	f000 f84c 	bl	800de74 <__retarget_lock_init_recursive>
 800dddc:	f7ff ff96 	bl	800dd0c <__sfp_lock_release>
 800dde0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dde4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dde8:	6025      	str	r5, [r4, #0]
 800ddea:	61a5      	str	r5, [r4, #24]
 800ddec:	2208      	movs	r2, #8
 800ddee:	4629      	mov	r1, r5
 800ddf0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ddf4:	f7fe faf0 	bl	800c3d8 <memset>
 800ddf8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ddfc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800de00:	4620      	mov	r0, r4
 800de02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de04:	3468      	adds	r4, #104	; 0x68
 800de06:	e7d9      	b.n	800ddbc <__sfp+0x1c>
 800de08:	2104      	movs	r1, #4
 800de0a:	4638      	mov	r0, r7
 800de0c:	f7ff ff62 	bl	800dcd4 <__sfmoreglue>
 800de10:	4604      	mov	r4, r0
 800de12:	6030      	str	r0, [r6, #0]
 800de14:	2800      	cmp	r0, #0
 800de16:	d1d5      	bne.n	800ddc4 <__sfp+0x24>
 800de18:	f7ff ff78 	bl	800dd0c <__sfp_lock_release>
 800de1c:	230c      	movs	r3, #12
 800de1e:	603b      	str	r3, [r7, #0]
 800de20:	e7ee      	b.n	800de00 <__sfp+0x60>
 800de22:	bf00      	nop
 800de24:	0800f334 	.word	0x0800f334
 800de28:	ffff0001 	.word	0xffff0001

0800de2c <_fwalk_reent>:
 800de2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de30:	4606      	mov	r6, r0
 800de32:	4688      	mov	r8, r1
 800de34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800de38:	2700      	movs	r7, #0
 800de3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800de3e:	f1b9 0901 	subs.w	r9, r9, #1
 800de42:	d505      	bpl.n	800de50 <_fwalk_reent+0x24>
 800de44:	6824      	ldr	r4, [r4, #0]
 800de46:	2c00      	cmp	r4, #0
 800de48:	d1f7      	bne.n	800de3a <_fwalk_reent+0xe>
 800de4a:	4638      	mov	r0, r7
 800de4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de50:	89ab      	ldrh	r3, [r5, #12]
 800de52:	2b01      	cmp	r3, #1
 800de54:	d907      	bls.n	800de66 <_fwalk_reent+0x3a>
 800de56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800de5a:	3301      	adds	r3, #1
 800de5c:	d003      	beq.n	800de66 <_fwalk_reent+0x3a>
 800de5e:	4629      	mov	r1, r5
 800de60:	4630      	mov	r0, r6
 800de62:	47c0      	blx	r8
 800de64:	4307      	orrs	r7, r0
 800de66:	3568      	adds	r5, #104	; 0x68
 800de68:	e7e9      	b.n	800de3e <_fwalk_reent+0x12>
	...

0800de6c <_localeconv_r>:
 800de6c:	4800      	ldr	r0, [pc, #0]	; (800de70 <_localeconv_r+0x4>)
 800de6e:	4770      	bx	lr
 800de70:	20000194 	.word	0x20000194

0800de74 <__retarget_lock_init_recursive>:
 800de74:	4770      	bx	lr

0800de76 <__retarget_lock_acquire_recursive>:
 800de76:	4770      	bx	lr

0800de78 <__retarget_lock_release_recursive>:
 800de78:	4770      	bx	lr

0800de7a <__swhatbuf_r>:
 800de7a:	b570      	push	{r4, r5, r6, lr}
 800de7c:	460e      	mov	r6, r1
 800de7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de82:	2900      	cmp	r1, #0
 800de84:	b096      	sub	sp, #88	; 0x58
 800de86:	4614      	mov	r4, r2
 800de88:	461d      	mov	r5, r3
 800de8a:	da08      	bge.n	800de9e <__swhatbuf_r+0x24>
 800de8c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800de90:	2200      	movs	r2, #0
 800de92:	602a      	str	r2, [r5, #0]
 800de94:	061a      	lsls	r2, r3, #24
 800de96:	d410      	bmi.n	800deba <__swhatbuf_r+0x40>
 800de98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de9c:	e00e      	b.n	800debc <__swhatbuf_r+0x42>
 800de9e:	466a      	mov	r2, sp
 800dea0:	f000 fed2 	bl	800ec48 <_fstat_r>
 800dea4:	2800      	cmp	r0, #0
 800dea6:	dbf1      	blt.n	800de8c <__swhatbuf_r+0x12>
 800dea8:	9a01      	ldr	r2, [sp, #4]
 800deaa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800deae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800deb2:	425a      	negs	r2, r3
 800deb4:	415a      	adcs	r2, r3
 800deb6:	602a      	str	r2, [r5, #0]
 800deb8:	e7ee      	b.n	800de98 <__swhatbuf_r+0x1e>
 800deba:	2340      	movs	r3, #64	; 0x40
 800debc:	2000      	movs	r0, #0
 800debe:	6023      	str	r3, [r4, #0]
 800dec0:	b016      	add	sp, #88	; 0x58
 800dec2:	bd70      	pop	{r4, r5, r6, pc}

0800dec4 <__smakebuf_r>:
 800dec4:	898b      	ldrh	r3, [r1, #12]
 800dec6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dec8:	079d      	lsls	r5, r3, #30
 800deca:	4606      	mov	r6, r0
 800decc:	460c      	mov	r4, r1
 800dece:	d507      	bpl.n	800dee0 <__smakebuf_r+0x1c>
 800ded0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ded4:	6023      	str	r3, [r4, #0]
 800ded6:	6123      	str	r3, [r4, #16]
 800ded8:	2301      	movs	r3, #1
 800deda:	6163      	str	r3, [r4, #20]
 800dedc:	b002      	add	sp, #8
 800dede:	bd70      	pop	{r4, r5, r6, pc}
 800dee0:	ab01      	add	r3, sp, #4
 800dee2:	466a      	mov	r2, sp
 800dee4:	f7ff ffc9 	bl	800de7a <__swhatbuf_r>
 800dee8:	9900      	ldr	r1, [sp, #0]
 800deea:	4605      	mov	r5, r0
 800deec:	4630      	mov	r0, r6
 800deee:	f000 fc37 	bl	800e760 <_malloc_r>
 800def2:	b948      	cbnz	r0, 800df08 <__smakebuf_r+0x44>
 800def4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800def8:	059a      	lsls	r2, r3, #22
 800defa:	d4ef      	bmi.n	800dedc <__smakebuf_r+0x18>
 800defc:	f023 0303 	bic.w	r3, r3, #3
 800df00:	f043 0302 	orr.w	r3, r3, #2
 800df04:	81a3      	strh	r3, [r4, #12]
 800df06:	e7e3      	b.n	800ded0 <__smakebuf_r+0xc>
 800df08:	4b0d      	ldr	r3, [pc, #52]	; (800df40 <__smakebuf_r+0x7c>)
 800df0a:	62b3      	str	r3, [r6, #40]	; 0x28
 800df0c:	89a3      	ldrh	r3, [r4, #12]
 800df0e:	6020      	str	r0, [r4, #0]
 800df10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df14:	81a3      	strh	r3, [r4, #12]
 800df16:	9b00      	ldr	r3, [sp, #0]
 800df18:	6163      	str	r3, [r4, #20]
 800df1a:	9b01      	ldr	r3, [sp, #4]
 800df1c:	6120      	str	r0, [r4, #16]
 800df1e:	b15b      	cbz	r3, 800df38 <__smakebuf_r+0x74>
 800df20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df24:	4630      	mov	r0, r6
 800df26:	f000 fea1 	bl	800ec6c <_isatty_r>
 800df2a:	b128      	cbz	r0, 800df38 <__smakebuf_r+0x74>
 800df2c:	89a3      	ldrh	r3, [r4, #12]
 800df2e:	f023 0303 	bic.w	r3, r3, #3
 800df32:	f043 0301 	orr.w	r3, r3, #1
 800df36:	81a3      	strh	r3, [r4, #12]
 800df38:	89a0      	ldrh	r0, [r4, #12]
 800df3a:	4305      	orrs	r5, r0
 800df3c:	81a5      	strh	r5, [r4, #12]
 800df3e:	e7cd      	b.n	800dedc <__smakebuf_r+0x18>
 800df40:	0800dcc9 	.word	0x0800dcc9

0800df44 <malloc>:
 800df44:	4b02      	ldr	r3, [pc, #8]	; (800df50 <malloc+0xc>)
 800df46:	4601      	mov	r1, r0
 800df48:	6818      	ldr	r0, [r3, #0]
 800df4a:	f000 bc09 	b.w	800e760 <_malloc_r>
 800df4e:	bf00      	nop
 800df50:	20000040 	.word	0x20000040

0800df54 <_Balloc>:
 800df54:	b570      	push	{r4, r5, r6, lr}
 800df56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800df58:	4604      	mov	r4, r0
 800df5a:	460d      	mov	r5, r1
 800df5c:	b976      	cbnz	r6, 800df7c <_Balloc+0x28>
 800df5e:	2010      	movs	r0, #16
 800df60:	f7ff fff0 	bl	800df44 <malloc>
 800df64:	4602      	mov	r2, r0
 800df66:	6260      	str	r0, [r4, #36]	; 0x24
 800df68:	b920      	cbnz	r0, 800df74 <_Balloc+0x20>
 800df6a:	4b18      	ldr	r3, [pc, #96]	; (800dfcc <_Balloc+0x78>)
 800df6c:	4818      	ldr	r0, [pc, #96]	; (800dfd0 <_Balloc+0x7c>)
 800df6e:	2166      	movs	r1, #102	; 0x66
 800df70:	f000 fe2a 	bl	800ebc8 <__assert_func>
 800df74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df78:	6006      	str	r6, [r0, #0]
 800df7a:	60c6      	str	r6, [r0, #12]
 800df7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800df7e:	68f3      	ldr	r3, [r6, #12]
 800df80:	b183      	cbz	r3, 800dfa4 <_Balloc+0x50>
 800df82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df84:	68db      	ldr	r3, [r3, #12]
 800df86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800df8a:	b9b8      	cbnz	r0, 800dfbc <_Balloc+0x68>
 800df8c:	2101      	movs	r1, #1
 800df8e:	fa01 f605 	lsl.w	r6, r1, r5
 800df92:	1d72      	adds	r2, r6, #5
 800df94:	0092      	lsls	r2, r2, #2
 800df96:	4620      	mov	r0, r4
 800df98:	f000 fb60 	bl	800e65c <_calloc_r>
 800df9c:	b160      	cbz	r0, 800dfb8 <_Balloc+0x64>
 800df9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dfa2:	e00e      	b.n	800dfc2 <_Balloc+0x6e>
 800dfa4:	2221      	movs	r2, #33	; 0x21
 800dfa6:	2104      	movs	r1, #4
 800dfa8:	4620      	mov	r0, r4
 800dfaa:	f000 fb57 	bl	800e65c <_calloc_r>
 800dfae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfb0:	60f0      	str	r0, [r6, #12]
 800dfb2:	68db      	ldr	r3, [r3, #12]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d1e4      	bne.n	800df82 <_Balloc+0x2e>
 800dfb8:	2000      	movs	r0, #0
 800dfba:	bd70      	pop	{r4, r5, r6, pc}
 800dfbc:	6802      	ldr	r2, [r0, #0]
 800dfbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dfc8:	e7f7      	b.n	800dfba <_Balloc+0x66>
 800dfca:	bf00      	nop
 800dfcc:	0800f379 	.word	0x0800f379
 800dfd0:	0800f45c 	.word	0x0800f45c

0800dfd4 <_Bfree>:
 800dfd4:	b570      	push	{r4, r5, r6, lr}
 800dfd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dfd8:	4605      	mov	r5, r0
 800dfda:	460c      	mov	r4, r1
 800dfdc:	b976      	cbnz	r6, 800dffc <_Bfree+0x28>
 800dfde:	2010      	movs	r0, #16
 800dfe0:	f7ff ffb0 	bl	800df44 <malloc>
 800dfe4:	4602      	mov	r2, r0
 800dfe6:	6268      	str	r0, [r5, #36]	; 0x24
 800dfe8:	b920      	cbnz	r0, 800dff4 <_Bfree+0x20>
 800dfea:	4b09      	ldr	r3, [pc, #36]	; (800e010 <_Bfree+0x3c>)
 800dfec:	4809      	ldr	r0, [pc, #36]	; (800e014 <_Bfree+0x40>)
 800dfee:	218a      	movs	r1, #138	; 0x8a
 800dff0:	f000 fdea 	bl	800ebc8 <__assert_func>
 800dff4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dff8:	6006      	str	r6, [r0, #0]
 800dffa:	60c6      	str	r6, [r0, #12]
 800dffc:	b13c      	cbz	r4, 800e00e <_Bfree+0x3a>
 800dffe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e000:	6862      	ldr	r2, [r4, #4]
 800e002:	68db      	ldr	r3, [r3, #12]
 800e004:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e008:	6021      	str	r1, [r4, #0]
 800e00a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e00e:	bd70      	pop	{r4, r5, r6, pc}
 800e010:	0800f379 	.word	0x0800f379
 800e014:	0800f45c 	.word	0x0800f45c

0800e018 <__multadd>:
 800e018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e01c:	690d      	ldr	r5, [r1, #16]
 800e01e:	4607      	mov	r7, r0
 800e020:	460c      	mov	r4, r1
 800e022:	461e      	mov	r6, r3
 800e024:	f101 0c14 	add.w	ip, r1, #20
 800e028:	2000      	movs	r0, #0
 800e02a:	f8dc 3000 	ldr.w	r3, [ip]
 800e02e:	b299      	uxth	r1, r3
 800e030:	fb02 6101 	mla	r1, r2, r1, r6
 800e034:	0c1e      	lsrs	r6, r3, #16
 800e036:	0c0b      	lsrs	r3, r1, #16
 800e038:	fb02 3306 	mla	r3, r2, r6, r3
 800e03c:	b289      	uxth	r1, r1
 800e03e:	3001      	adds	r0, #1
 800e040:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e044:	4285      	cmp	r5, r0
 800e046:	f84c 1b04 	str.w	r1, [ip], #4
 800e04a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e04e:	dcec      	bgt.n	800e02a <__multadd+0x12>
 800e050:	b30e      	cbz	r6, 800e096 <__multadd+0x7e>
 800e052:	68a3      	ldr	r3, [r4, #8]
 800e054:	42ab      	cmp	r3, r5
 800e056:	dc19      	bgt.n	800e08c <__multadd+0x74>
 800e058:	6861      	ldr	r1, [r4, #4]
 800e05a:	4638      	mov	r0, r7
 800e05c:	3101      	adds	r1, #1
 800e05e:	f7ff ff79 	bl	800df54 <_Balloc>
 800e062:	4680      	mov	r8, r0
 800e064:	b928      	cbnz	r0, 800e072 <__multadd+0x5a>
 800e066:	4602      	mov	r2, r0
 800e068:	4b0c      	ldr	r3, [pc, #48]	; (800e09c <__multadd+0x84>)
 800e06a:	480d      	ldr	r0, [pc, #52]	; (800e0a0 <__multadd+0x88>)
 800e06c:	21b5      	movs	r1, #181	; 0xb5
 800e06e:	f000 fdab 	bl	800ebc8 <__assert_func>
 800e072:	6922      	ldr	r2, [r4, #16]
 800e074:	3202      	adds	r2, #2
 800e076:	f104 010c 	add.w	r1, r4, #12
 800e07a:	0092      	lsls	r2, r2, #2
 800e07c:	300c      	adds	r0, #12
 800e07e:	f7fe f99d 	bl	800c3bc <memcpy>
 800e082:	4621      	mov	r1, r4
 800e084:	4638      	mov	r0, r7
 800e086:	f7ff ffa5 	bl	800dfd4 <_Bfree>
 800e08a:	4644      	mov	r4, r8
 800e08c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e090:	3501      	adds	r5, #1
 800e092:	615e      	str	r6, [r3, #20]
 800e094:	6125      	str	r5, [r4, #16]
 800e096:	4620      	mov	r0, r4
 800e098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e09c:	0800f3eb 	.word	0x0800f3eb
 800e0a0:	0800f45c 	.word	0x0800f45c

0800e0a4 <__hi0bits>:
 800e0a4:	0c03      	lsrs	r3, r0, #16
 800e0a6:	041b      	lsls	r3, r3, #16
 800e0a8:	b9d3      	cbnz	r3, 800e0e0 <__hi0bits+0x3c>
 800e0aa:	0400      	lsls	r0, r0, #16
 800e0ac:	2310      	movs	r3, #16
 800e0ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e0b2:	bf04      	itt	eq
 800e0b4:	0200      	lsleq	r0, r0, #8
 800e0b6:	3308      	addeq	r3, #8
 800e0b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e0bc:	bf04      	itt	eq
 800e0be:	0100      	lsleq	r0, r0, #4
 800e0c0:	3304      	addeq	r3, #4
 800e0c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e0c6:	bf04      	itt	eq
 800e0c8:	0080      	lsleq	r0, r0, #2
 800e0ca:	3302      	addeq	r3, #2
 800e0cc:	2800      	cmp	r0, #0
 800e0ce:	db05      	blt.n	800e0dc <__hi0bits+0x38>
 800e0d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e0d4:	f103 0301 	add.w	r3, r3, #1
 800e0d8:	bf08      	it	eq
 800e0da:	2320      	moveq	r3, #32
 800e0dc:	4618      	mov	r0, r3
 800e0de:	4770      	bx	lr
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	e7e4      	b.n	800e0ae <__hi0bits+0xa>

0800e0e4 <__lo0bits>:
 800e0e4:	6803      	ldr	r3, [r0, #0]
 800e0e6:	f013 0207 	ands.w	r2, r3, #7
 800e0ea:	4601      	mov	r1, r0
 800e0ec:	d00b      	beq.n	800e106 <__lo0bits+0x22>
 800e0ee:	07da      	lsls	r2, r3, #31
 800e0f0:	d423      	bmi.n	800e13a <__lo0bits+0x56>
 800e0f2:	0798      	lsls	r0, r3, #30
 800e0f4:	bf49      	itett	mi
 800e0f6:	085b      	lsrmi	r3, r3, #1
 800e0f8:	089b      	lsrpl	r3, r3, #2
 800e0fa:	2001      	movmi	r0, #1
 800e0fc:	600b      	strmi	r3, [r1, #0]
 800e0fe:	bf5c      	itt	pl
 800e100:	600b      	strpl	r3, [r1, #0]
 800e102:	2002      	movpl	r0, #2
 800e104:	4770      	bx	lr
 800e106:	b298      	uxth	r0, r3
 800e108:	b9a8      	cbnz	r0, 800e136 <__lo0bits+0x52>
 800e10a:	0c1b      	lsrs	r3, r3, #16
 800e10c:	2010      	movs	r0, #16
 800e10e:	b2da      	uxtb	r2, r3
 800e110:	b90a      	cbnz	r2, 800e116 <__lo0bits+0x32>
 800e112:	3008      	adds	r0, #8
 800e114:	0a1b      	lsrs	r3, r3, #8
 800e116:	071a      	lsls	r2, r3, #28
 800e118:	bf04      	itt	eq
 800e11a:	091b      	lsreq	r3, r3, #4
 800e11c:	3004      	addeq	r0, #4
 800e11e:	079a      	lsls	r2, r3, #30
 800e120:	bf04      	itt	eq
 800e122:	089b      	lsreq	r3, r3, #2
 800e124:	3002      	addeq	r0, #2
 800e126:	07da      	lsls	r2, r3, #31
 800e128:	d403      	bmi.n	800e132 <__lo0bits+0x4e>
 800e12a:	085b      	lsrs	r3, r3, #1
 800e12c:	f100 0001 	add.w	r0, r0, #1
 800e130:	d005      	beq.n	800e13e <__lo0bits+0x5a>
 800e132:	600b      	str	r3, [r1, #0]
 800e134:	4770      	bx	lr
 800e136:	4610      	mov	r0, r2
 800e138:	e7e9      	b.n	800e10e <__lo0bits+0x2a>
 800e13a:	2000      	movs	r0, #0
 800e13c:	4770      	bx	lr
 800e13e:	2020      	movs	r0, #32
 800e140:	4770      	bx	lr
	...

0800e144 <__i2b>:
 800e144:	b510      	push	{r4, lr}
 800e146:	460c      	mov	r4, r1
 800e148:	2101      	movs	r1, #1
 800e14a:	f7ff ff03 	bl	800df54 <_Balloc>
 800e14e:	4602      	mov	r2, r0
 800e150:	b928      	cbnz	r0, 800e15e <__i2b+0x1a>
 800e152:	4b05      	ldr	r3, [pc, #20]	; (800e168 <__i2b+0x24>)
 800e154:	4805      	ldr	r0, [pc, #20]	; (800e16c <__i2b+0x28>)
 800e156:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e15a:	f000 fd35 	bl	800ebc8 <__assert_func>
 800e15e:	2301      	movs	r3, #1
 800e160:	6144      	str	r4, [r0, #20]
 800e162:	6103      	str	r3, [r0, #16]
 800e164:	bd10      	pop	{r4, pc}
 800e166:	bf00      	nop
 800e168:	0800f3eb 	.word	0x0800f3eb
 800e16c:	0800f45c 	.word	0x0800f45c

0800e170 <__multiply>:
 800e170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e174:	4691      	mov	r9, r2
 800e176:	690a      	ldr	r2, [r1, #16]
 800e178:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e17c:	429a      	cmp	r2, r3
 800e17e:	bfb8      	it	lt
 800e180:	460b      	movlt	r3, r1
 800e182:	460c      	mov	r4, r1
 800e184:	bfbc      	itt	lt
 800e186:	464c      	movlt	r4, r9
 800e188:	4699      	movlt	r9, r3
 800e18a:	6927      	ldr	r7, [r4, #16]
 800e18c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e190:	68a3      	ldr	r3, [r4, #8]
 800e192:	6861      	ldr	r1, [r4, #4]
 800e194:	eb07 060a 	add.w	r6, r7, sl
 800e198:	42b3      	cmp	r3, r6
 800e19a:	b085      	sub	sp, #20
 800e19c:	bfb8      	it	lt
 800e19e:	3101      	addlt	r1, #1
 800e1a0:	f7ff fed8 	bl	800df54 <_Balloc>
 800e1a4:	b930      	cbnz	r0, 800e1b4 <__multiply+0x44>
 800e1a6:	4602      	mov	r2, r0
 800e1a8:	4b44      	ldr	r3, [pc, #272]	; (800e2bc <__multiply+0x14c>)
 800e1aa:	4845      	ldr	r0, [pc, #276]	; (800e2c0 <__multiply+0x150>)
 800e1ac:	f240 115d 	movw	r1, #349	; 0x15d
 800e1b0:	f000 fd0a 	bl	800ebc8 <__assert_func>
 800e1b4:	f100 0514 	add.w	r5, r0, #20
 800e1b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e1bc:	462b      	mov	r3, r5
 800e1be:	2200      	movs	r2, #0
 800e1c0:	4543      	cmp	r3, r8
 800e1c2:	d321      	bcc.n	800e208 <__multiply+0x98>
 800e1c4:	f104 0314 	add.w	r3, r4, #20
 800e1c8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e1cc:	f109 0314 	add.w	r3, r9, #20
 800e1d0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e1d4:	9202      	str	r2, [sp, #8]
 800e1d6:	1b3a      	subs	r2, r7, r4
 800e1d8:	3a15      	subs	r2, #21
 800e1da:	f022 0203 	bic.w	r2, r2, #3
 800e1de:	3204      	adds	r2, #4
 800e1e0:	f104 0115 	add.w	r1, r4, #21
 800e1e4:	428f      	cmp	r7, r1
 800e1e6:	bf38      	it	cc
 800e1e8:	2204      	movcc	r2, #4
 800e1ea:	9201      	str	r2, [sp, #4]
 800e1ec:	9a02      	ldr	r2, [sp, #8]
 800e1ee:	9303      	str	r3, [sp, #12]
 800e1f0:	429a      	cmp	r2, r3
 800e1f2:	d80c      	bhi.n	800e20e <__multiply+0x9e>
 800e1f4:	2e00      	cmp	r6, #0
 800e1f6:	dd03      	ble.n	800e200 <__multiply+0x90>
 800e1f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d05a      	beq.n	800e2b6 <__multiply+0x146>
 800e200:	6106      	str	r6, [r0, #16]
 800e202:	b005      	add	sp, #20
 800e204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e208:	f843 2b04 	str.w	r2, [r3], #4
 800e20c:	e7d8      	b.n	800e1c0 <__multiply+0x50>
 800e20e:	f8b3 a000 	ldrh.w	sl, [r3]
 800e212:	f1ba 0f00 	cmp.w	sl, #0
 800e216:	d024      	beq.n	800e262 <__multiply+0xf2>
 800e218:	f104 0e14 	add.w	lr, r4, #20
 800e21c:	46a9      	mov	r9, r5
 800e21e:	f04f 0c00 	mov.w	ip, #0
 800e222:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e226:	f8d9 1000 	ldr.w	r1, [r9]
 800e22a:	fa1f fb82 	uxth.w	fp, r2
 800e22e:	b289      	uxth	r1, r1
 800e230:	fb0a 110b 	mla	r1, sl, fp, r1
 800e234:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e238:	f8d9 2000 	ldr.w	r2, [r9]
 800e23c:	4461      	add	r1, ip
 800e23e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e242:	fb0a c20b 	mla	r2, sl, fp, ip
 800e246:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e24a:	b289      	uxth	r1, r1
 800e24c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e250:	4577      	cmp	r7, lr
 800e252:	f849 1b04 	str.w	r1, [r9], #4
 800e256:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e25a:	d8e2      	bhi.n	800e222 <__multiply+0xb2>
 800e25c:	9a01      	ldr	r2, [sp, #4]
 800e25e:	f845 c002 	str.w	ip, [r5, r2]
 800e262:	9a03      	ldr	r2, [sp, #12]
 800e264:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e268:	3304      	adds	r3, #4
 800e26a:	f1b9 0f00 	cmp.w	r9, #0
 800e26e:	d020      	beq.n	800e2b2 <__multiply+0x142>
 800e270:	6829      	ldr	r1, [r5, #0]
 800e272:	f104 0c14 	add.w	ip, r4, #20
 800e276:	46ae      	mov	lr, r5
 800e278:	f04f 0a00 	mov.w	sl, #0
 800e27c:	f8bc b000 	ldrh.w	fp, [ip]
 800e280:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e284:	fb09 220b 	mla	r2, r9, fp, r2
 800e288:	4492      	add	sl, r2
 800e28a:	b289      	uxth	r1, r1
 800e28c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e290:	f84e 1b04 	str.w	r1, [lr], #4
 800e294:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e298:	f8be 1000 	ldrh.w	r1, [lr]
 800e29c:	0c12      	lsrs	r2, r2, #16
 800e29e:	fb09 1102 	mla	r1, r9, r2, r1
 800e2a2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e2a6:	4567      	cmp	r7, ip
 800e2a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e2ac:	d8e6      	bhi.n	800e27c <__multiply+0x10c>
 800e2ae:	9a01      	ldr	r2, [sp, #4]
 800e2b0:	50a9      	str	r1, [r5, r2]
 800e2b2:	3504      	adds	r5, #4
 800e2b4:	e79a      	b.n	800e1ec <__multiply+0x7c>
 800e2b6:	3e01      	subs	r6, #1
 800e2b8:	e79c      	b.n	800e1f4 <__multiply+0x84>
 800e2ba:	bf00      	nop
 800e2bc:	0800f3eb 	.word	0x0800f3eb
 800e2c0:	0800f45c 	.word	0x0800f45c

0800e2c4 <__pow5mult>:
 800e2c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2c8:	4615      	mov	r5, r2
 800e2ca:	f012 0203 	ands.w	r2, r2, #3
 800e2ce:	4606      	mov	r6, r0
 800e2d0:	460f      	mov	r7, r1
 800e2d2:	d007      	beq.n	800e2e4 <__pow5mult+0x20>
 800e2d4:	4c25      	ldr	r4, [pc, #148]	; (800e36c <__pow5mult+0xa8>)
 800e2d6:	3a01      	subs	r2, #1
 800e2d8:	2300      	movs	r3, #0
 800e2da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e2de:	f7ff fe9b 	bl	800e018 <__multadd>
 800e2e2:	4607      	mov	r7, r0
 800e2e4:	10ad      	asrs	r5, r5, #2
 800e2e6:	d03d      	beq.n	800e364 <__pow5mult+0xa0>
 800e2e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e2ea:	b97c      	cbnz	r4, 800e30c <__pow5mult+0x48>
 800e2ec:	2010      	movs	r0, #16
 800e2ee:	f7ff fe29 	bl	800df44 <malloc>
 800e2f2:	4602      	mov	r2, r0
 800e2f4:	6270      	str	r0, [r6, #36]	; 0x24
 800e2f6:	b928      	cbnz	r0, 800e304 <__pow5mult+0x40>
 800e2f8:	4b1d      	ldr	r3, [pc, #116]	; (800e370 <__pow5mult+0xac>)
 800e2fa:	481e      	ldr	r0, [pc, #120]	; (800e374 <__pow5mult+0xb0>)
 800e2fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e300:	f000 fc62 	bl	800ebc8 <__assert_func>
 800e304:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e308:	6004      	str	r4, [r0, #0]
 800e30a:	60c4      	str	r4, [r0, #12]
 800e30c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e310:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e314:	b94c      	cbnz	r4, 800e32a <__pow5mult+0x66>
 800e316:	f240 2171 	movw	r1, #625	; 0x271
 800e31a:	4630      	mov	r0, r6
 800e31c:	f7ff ff12 	bl	800e144 <__i2b>
 800e320:	2300      	movs	r3, #0
 800e322:	f8c8 0008 	str.w	r0, [r8, #8]
 800e326:	4604      	mov	r4, r0
 800e328:	6003      	str	r3, [r0, #0]
 800e32a:	f04f 0900 	mov.w	r9, #0
 800e32e:	07eb      	lsls	r3, r5, #31
 800e330:	d50a      	bpl.n	800e348 <__pow5mult+0x84>
 800e332:	4639      	mov	r1, r7
 800e334:	4622      	mov	r2, r4
 800e336:	4630      	mov	r0, r6
 800e338:	f7ff ff1a 	bl	800e170 <__multiply>
 800e33c:	4639      	mov	r1, r7
 800e33e:	4680      	mov	r8, r0
 800e340:	4630      	mov	r0, r6
 800e342:	f7ff fe47 	bl	800dfd4 <_Bfree>
 800e346:	4647      	mov	r7, r8
 800e348:	106d      	asrs	r5, r5, #1
 800e34a:	d00b      	beq.n	800e364 <__pow5mult+0xa0>
 800e34c:	6820      	ldr	r0, [r4, #0]
 800e34e:	b938      	cbnz	r0, 800e360 <__pow5mult+0x9c>
 800e350:	4622      	mov	r2, r4
 800e352:	4621      	mov	r1, r4
 800e354:	4630      	mov	r0, r6
 800e356:	f7ff ff0b 	bl	800e170 <__multiply>
 800e35a:	6020      	str	r0, [r4, #0]
 800e35c:	f8c0 9000 	str.w	r9, [r0]
 800e360:	4604      	mov	r4, r0
 800e362:	e7e4      	b.n	800e32e <__pow5mult+0x6a>
 800e364:	4638      	mov	r0, r7
 800e366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e36a:	bf00      	nop
 800e36c:	0800f5a8 	.word	0x0800f5a8
 800e370:	0800f379 	.word	0x0800f379
 800e374:	0800f45c 	.word	0x0800f45c

0800e378 <__lshift>:
 800e378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e37c:	460c      	mov	r4, r1
 800e37e:	6849      	ldr	r1, [r1, #4]
 800e380:	6923      	ldr	r3, [r4, #16]
 800e382:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e386:	68a3      	ldr	r3, [r4, #8]
 800e388:	4607      	mov	r7, r0
 800e38a:	4691      	mov	r9, r2
 800e38c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e390:	f108 0601 	add.w	r6, r8, #1
 800e394:	42b3      	cmp	r3, r6
 800e396:	db0b      	blt.n	800e3b0 <__lshift+0x38>
 800e398:	4638      	mov	r0, r7
 800e39a:	f7ff fddb 	bl	800df54 <_Balloc>
 800e39e:	4605      	mov	r5, r0
 800e3a0:	b948      	cbnz	r0, 800e3b6 <__lshift+0x3e>
 800e3a2:	4602      	mov	r2, r0
 800e3a4:	4b2a      	ldr	r3, [pc, #168]	; (800e450 <__lshift+0xd8>)
 800e3a6:	482b      	ldr	r0, [pc, #172]	; (800e454 <__lshift+0xdc>)
 800e3a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e3ac:	f000 fc0c 	bl	800ebc8 <__assert_func>
 800e3b0:	3101      	adds	r1, #1
 800e3b2:	005b      	lsls	r3, r3, #1
 800e3b4:	e7ee      	b.n	800e394 <__lshift+0x1c>
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	f100 0114 	add.w	r1, r0, #20
 800e3bc:	f100 0210 	add.w	r2, r0, #16
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	4553      	cmp	r3, sl
 800e3c4:	db37      	blt.n	800e436 <__lshift+0xbe>
 800e3c6:	6920      	ldr	r0, [r4, #16]
 800e3c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e3cc:	f104 0314 	add.w	r3, r4, #20
 800e3d0:	f019 091f 	ands.w	r9, r9, #31
 800e3d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e3d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e3dc:	d02f      	beq.n	800e43e <__lshift+0xc6>
 800e3de:	f1c9 0e20 	rsb	lr, r9, #32
 800e3e2:	468a      	mov	sl, r1
 800e3e4:	f04f 0c00 	mov.w	ip, #0
 800e3e8:	681a      	ldr	r2, [r3, #0]
 800e3ea:	fa02 f209 	lsl.w	r2, r2, r9
 800e3ee:	ea42 020c 	orr.w	r2, r2, ip
 800e3f2:	f84a 2b04 	str.w	r2, [sl], #4
 800e3f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3fa:	4298      	cmp	r0, r3
 800e3fc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e400:	d8f2      	bhi.n	800e3e8 <__lshift+0x70>
 800e402:	1b03      	subs	r3, r0, r4
 800e404:	3b15      	subs	r3, #21
 800e406:	f023 0303 	bic.w	r3, r3, #3
 800e40a:	3304      	adds	r3, #4
 800e40c:	f104 0215 	add.w	r2, r4, #21
 800e410:	4290      	cmp	r0, r2
 800e412:	bf38      	it	cc
 800e414:	2304      	movcc	r3, #4
 800e416:	f841 c003 	str.w	ip, [r1, r3]
 800e41a:	f1bc 0f00 	cmp.w	ip, #0
 800e41e:	d001      	beq.n	800e424 <__lshift+0xac>
 800e420:	f108 0602 	add.w	r6, r8, #2
 800e424:	3e01      	subs	r6, #1
 800e426:	4638      	mov	r0, r7
 800e428:	612e      	str	r6, [r5, #16]
 800e42a:	4621      	mov	r1, r4
 800e42c:	f7ff fdd2 	bl	800dfd4 <_Bfree>
 800e430:	4628      	mov	r0, r5
 800e432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e436:	f842 0f04 	str.w	r0, [r2, #4]!
 800e43a:	3301      	adds	r3, #1
 800e43c:	e7c1      	b.n	800e3c2 <__lshift+0x4a>
 800e43e:	3904      	subs	r1, #4
 800e440:	f853 2b04 	ldr.w	r2, [r3], #4
 800e444:	f841 2f04 	str.w	r2, [r1, #4]!
 800e448:	4298      	cmp	r0, r3
 800e44a:	d8f9      	bhi.n	800e440 <__lshift+0xc8>
 800e44c:	e7ea      	b.n	800e424 <__lshift+0xac>
 800e44e:	bf00      	nop
 800e450:	0800f3eb 	.word	0x0800f3eb
 800e454:	0800f45c 	.word	0x0800f45c

0800e458 <__mcmp>:
 800e458:	b530      	push	{r4, r5, lr}
 800e45a:	6902      	ldr	r2, [r0, #16]
 800e45c:	690c      	ldr	r4, [r1, #16]
 800e45e:	1b12      	subs	r2, r2, r4
 800e460:	d10e      	bne.n	800e480 <__mcmp+0x28>
 800e462:	f100 0314 	add.w	r3, r0, #20
 800e466:	3114      	adds	r1, #20
 800e468:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e46c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e470:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e474:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e478:	42a5      	cmp	r5, r4
 800e47a:	d003      	beq.n	800e484 <__mcmp+0x2c>
 800e47c:	d305      	bcc.n	800e48a <__mcmp+0x32>
 800e47e:	2201      	movs	r2, #1
 800e480:	4610      	mov	r0, r2
 800e482:	bd30      	pop	{r4, r5, pc}
 800e484:	4283      	cmp	r3, r0
 800e486:	d3f3      	bcc.n	800e470 <__mcmp+0x18>
 800e488:	e7fa      	b.n	800e480 <__mcmp+0x28>
 800e48a:	f04f 32ff 	mov.w	r2, #4294967295
 800e48e:	e7f7      	b.n	800e480 <__mcmp+0x28>

0800e490 <__mdiff>:
 800e490:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e494:	460c      	mov	r4, r1
 800e496:	4606      	mov	r6, r0
 800e498:	4611      	mov	r1, r2
 800e49a:	4620      	mov	r0, r4
 800e49c:	4690      	mov	r8, r2
 800e49e:	f7ff ffdb 	bl	800e458 <__mcmp>
 800e4a2:	1e05      	subs	r5, r0, #0
 800e4a4:	d110      	bne.n	800e4c8 <__mdiff+0x38>
 800e4a6:	4629      	mov	r1, r5
 800e4a8:	4630      	mov	r0, r6
 800e4aa:	f7ff fd53 	bl	800df54 <_Balloc>
 800e4ae:	b930      	cbnz	r0, 800e4be <__mdiff+0x2e>
 800e4b0:	4b3a      	ldr	r3, [pc, #232]	; (800e59c <__mdiff+0x10c>)
 800e4b2:	4602      	mov	r2, r0
 800e4b4:	f240 2132 	movw	r1, #562	; 0x232
 800e4b8:	4839      	ldr	r0, [pc, #228]	; (800e5a0 <__mdiff+0x110>)
 800e4ba:	f000 fb85 	bl	800ebc8 <__assert_func>
 800e4be:	2301      	movs	r3, #1
 800e4c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e4c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4c8:	bfa4      	itt	ge
 800e4ca:	4643      	movge	r3, r8
 800e4cc:	46a0      	movge	r8, r4
 800e4ce:	4630      	mov	r0, r6
 800e4d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e4d4:	bfa6      	itte	ge
 800e4d6:	461c      	movge	r4, r3
 800e4d8:	2500      	movge	r5, #0
 800e4da:	2501      	movlt	r5, #1
 800e4dc:	f7ff fd3a 	bl	800df54 <_Balloc>
 800e4e0:	b920      	cbnz	r0, 800e4ec <__mdiff+0x5c>
 800e4e2:	4b2e      	ldr	r3, [pc, #184]	; (800e59c <__mdiff+0x10c>)
 800e4e4:	4602      	mov	r2, r0
 800e4e6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e4ea:	e7e5      	b.n	800e4b8 <__mdiff+0x28>
 800e4ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e4f0:	6926      	ldr	r6, [r4, #16]
 800e4f2:	60c5      	str	r5, [r0, #12]
 800e4f4:	f104 0914 	add.w	r9, r4, #20
 800e4f8:	f108 0514 	add.w	r5, r8, #20
 800e4fc:	f100 0e14 	add.w	lr, r0, #20
 800e500:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e504:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e508:	f108 0210 	add.w	r2, r8, #16
 800e50c:	46f2      	mov	sl, lr
 800e50e:	2100      	movs	r1, #0
 800e510:	f859 3b04 	ldr.w	r3, [r9], #4
 800e514:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e518:	fa1f f883 	uxth.w	r8, r3
 800e51c:	fa11 f18b 	uxtah	r1, r1, fp
 800e520:	0c1b      	lsrs	r3, r3, #16
 800e522:	eba1 0808 	sub.w	r8, r1, r8
 800e526:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e52a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e52e:	fa1f f888 	uxth.w	r8, r8
 800e532:	1419      	asrs	r1, r3, #16
 800e534:	454e      	cmp	r6, r9
 800e536:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e53a:	f84a 3b04 	str.w	r3, [sl], #4
 800e53e:	d8e7      	bhi.n	800e510 <__mdiff+0x80>
 800e540:	1b33      	subs	r3, r6, r4
 800e542:	3b15      	subs	r3, #21
 800e544:	f023 0303 	bic.w	r3, r3, #3
 800e548:	3304      	adds	r3, #4
 800e54a:	3415      	adds	r4, #21
 800e54c:	42a6      	cmp	r6, r4
 800e54e:	bf38      	it	cc
 800e550:	2304      	movcc	r3, #4
 800e552:	441d      	add	r5, r3
 800e554:	4473      	add	r3, lr
 800e556:	469e      	mov	lr, r3
 800e558:	462e      	mov	r6, r5
 800e55a:	4566      	cmp	r6, ip
 800e55c:	d30e      	bcc.n	800e57c <__mdiff+0xec>
 800e55e:	f10c 0203 	add.w	r2, ip, #3
 800e562:	1b52      	subs	r2, r2, r5
 800e564:	f022 0203 	bic.w	r2, r2, #3
 800e568:	3d03      	subs	r5, #3
 800e56a:	45ac      	cmp	ip, r5
 800e56c:	bf38      	it	cc
 800e56e:	2200      	movcc	r2, #0
 800e570:	441a      	add	r2, r3
 800e572:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e576:	b17b      	cbz	r3, 800e598 <__mdiff+0x108>
 800e578:	6107      	str	r7, [r0, #16]
 800e57a:	e7a3      	b.n	800e4c4 <__mdiff+0x34>
 800e57c:	f856 8b04 	ldr.w	r8, [r6], #4
 800e580:	fa11 f288 	uxtah	r2, r1, r8
 800e584:	1414      	asrs	r4, r2, #16
 800e586:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e58a:	b292      	uxth	r2, r2
 800e58c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e590:	f84e 2b04 	str.w	r2, [lr], #4
 800e594:	1421      	asrs	r1, r4, #16
 800e596:	e7e0      	b.n	800e55a <__mdiff+0xca>
 800e598:	3f01      	subs	r7, #1
 800e59a:	e7ea      	b.n	800e572 <__mdiff+0xe2>
 800e59c:	0800f3eb 	.word	0x0800f3eb
 800e5a0:	0800f45c 	.word	0x0800f45c

0800e5a4 <__d2b>:
 800e5a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e5a8:	4689      	mov	r9, r1
 800e5aa:	2101      	movs	r1, #1
 800e5ac:	ec57 6b10 	vmov	r6, r7, d0
 800e5b0:	4690      	mov	r8, r2
 800e5b2:	f7ff fccf 	bl	800df54 <_Balloc>
 800e5b6:	4604      	mov	r4, r0
 800e5b8:	b930      	cbnz	r0, 800e5c8 <__d2b+0x24>
 800e5ba:	4602      	mov	r2, r0
 800e5bc:	4b25      	ldr	r3, [pc, #148]	; (800e654 <__d2b+0xb0>)
 800e5be:	4826      	ldr	r0, [pc, #152]	; (800e658 <__d2b+0xb4>)
 800e5c0:	f240 310a 	movw	r1, #778	; 0x30a
 800e5c4:	f000 fb00 	bl	800ebc8 <__assert_func>
 800e5c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e5cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e5d0:	bb35      	cbnz	r5, 800e620 <__d2b+0x7c>
 800e5d2:	2e00      	cmp	r6, #0
 800e5d4:	9301      	str	r3, [sp, #4]
 800e5d6:	d028      	beq.n	800e62a <__d2b+0x86>
 800e5d8:	4668      	mov	r0, sp
 800e5da:	9600      	str	r6, [sp, #0]
 800e5dc:	f7ff fd82 	bl	800e0e4 <__lo0bits>
 800e5e0:	9900      	ldr	r1, [sp, #0]
 800e5e2:	b300      	cbz	r0, 800e626 <__d2b+0x82>
 800e5e4:	9a01      	ldr	r2, [sp, #4]
 800e5e6:	f1c0 0320 	rsb	r3, r0, #32
 800e5ea:	fa02 f303 	lsl.w	r3, r2, r3
 800e5ee:	430b      	orrs	r3, r1
 800e5f0:	40c2      	lsrs	r2, r0
 800e5f2:	6163      	str	r3, [r4, #20]
 800e5f4:	9201      	str	r2, [sp, #4]
 800e5f6:	9b01      	ldr	r3, [sp, #4]
 800e5f8:	61a3      	str	r3, [r4, #24]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	bf14      	ite	ne
 800e5fe:	2202      	movne	r2, #2
 800e600:	2201      	moveq	r2, #1
 800e602:	6122      	str	r2, [r4, #16]
 800e604:	b1d5      	cbz	r5, 800e63c <__d2b+0x98>
 800e606:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e60a:	4405      	add	r5, r0
 800e60c:	f8c9 5000 	str.w	r5, [r9]
 800e610:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e614:	f8c8 0000 	str.w	r0, [r8]
 800e618:	4620      	mov	r0, r4
 800e61a:	b003      	add	sp, #12
 800e61c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e620:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e624:	e7d5      	b.n	800e5d2 <__d2b+0x2e>
 800e626:	6161      	str	r1, [r4, #20]
 800e628:	e7e5      	b.n	800e5f6 <__d2b+0x52>
 800e62a:	a801      	add	r0, sp, #4
 800e62c:	f7ff fd5a 	bl	800e0e4 <__lo0bits>
 800e630:	9b01      	ldr	r3, [sp, #4]
 800e632:	6163      	str	r3, [r4, #20]
 800e634:	2201      	movs	r2, #1
 800e636:	6122      	str	r2, [r4, #16]
 800e638:	3020      	adds	r0, #32
 800e63a:	e7e3      	b.n	800e604 <__d2b+0x60>
 800e63c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e640:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e644:	f8c9 0000 	str.w	r0, [r9]
 800e648:	6918      	ldr	r0, [r3, #16]
 800e64a:	f7ff fd2b 	bl	800e0a4 <__hi0bits>
 800e64e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e652:	e7df      	b.n	800e614 <__d2b+0x70>
 800e654:	0800f3eb 	.word	0x0800f3eb
 800e658:	0800f45c 	.word	0x0800f45c

0800e65c <_calloc_r>:
 800e65c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e65e:	fba1 2402 	umull	r2, r4, r1, r2
 800e662:	b94c      	cbnz	r4, 800e678 <_calloc_r+0x1c>
 800e664:	4611      	mov	r1, r2
 800e666:	9201      	str	r2, [sp, #4]
 800e668:	f000 f87a 	bl	800e760 <_malloc_r>
 800e66c:	9a01      	ldr	r2, [sp, #4]
 800e66e:	4605      	mov	r5, r0
 800e670:	b930      	cbnz	r0, 800e680 <_calloc_r+0x24>
 800e672:	4628      	mov	r0, r5
 800e674:	b003      	add	sp, #12
 800e676:	bd30      	pop	{r4, r5, pc}
 800e678:	220c      	movs	r2, #12
 800e67a:	6002      	str	r2, [r0, #0]
 800e67c:	2500      	movs	r5, #0
 800e67e:	e7f8      	b.n	800e672 <_calloc_r+0x16>
 800e680:	4621      	mov	r1, r4
 800e682:	f7fd fea9 	bl	800c3d8 <memset>
 800e686:	e7f4      	b.n	800e672 <_calloc_r+0x16>

0800e688 <_free_r>:
 800e688:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e68a:	2900      	cmp	r1, #0
 800e68c:	d044      	beq.n	800e718 <_free_r+0x90>
 800e68e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e692:	9001      	str	r0, [sp, #4]
 800e694:	2b00      	cmp	r3, #0
 800e696:	f1a1 0404 	sub.w	r4, r1, #4
 800e69a:	bfb8      	it	lt
 800e69c:	18e4      	addlt	r4, r4, r3
 800e69e:	f000 fb19 	bl	800ecd4 <__malloc_lock>
 800e6a2:	4a1e      	ldr	r2, [pc, #120]	; (800e71c <_free_r+0x94>)
 800e6a4:	9801      	ldr	r0, [sp, #4]
 800e6a6:	6813      	ldr	r3, [r2, #0]
 800e6a8:	b933      	cbnz	r3, 800e6b8 <_free_r+0x30>
 800e6aa:	6063      	str	r3, [r4, #4]
 800e6ac:	6014      	str	r4, [r2, #0]
 800e6ae:	b003      	add	sp, #12
 800e6b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e6b4:	f000 bb14 	b.w	800ece0 <__malloc_unlock>
 800e6b8:	42a3      	cmp	r3, r4
 800e6ba:	d908      	bls.n	800e6ce <_free_r+0x46>
 800e6bc:	6825      	ldr	r5, [r4, #0]
 800e6be:	1961      	adds	r1, r4, r5
 800e6c0:	428b      	cmp	r3, r1
 800e6c2:	bf01      	itttt	eq
 800e6c4:	6819      	ldreq	r1, [r3, #0]
 800e6c6:	685b      	ldreq	r3, [r3, #4]
 800e6c8:	1949      	addeq	r1, r1, r5
 800e6ca:	6021      	streq	r1, [r4, #0]
 800e6cc:	e7ed      	b.n	800e6aa <_free_r+0x22>
 800e6ce:	461a      	mov	r2, r3
 800e6d0:	685b      	ldr	r3, [r3, #4]
 800e6d2:	b10b      	cbz	r3, 800e6d8 <_free_r+0x50>
 800e6d4:	42a3      	cmp	r3, r4
 800e6d6:	d9fa      	bls.n	800e6ce <_free_r+0x46>
 800e6d8:	6811      	ldr	r1, [r2, #0]
 800e6da:	1855      	adds	r5, r2, r1
 800e6dc:	42a5      	cmp	r5, r4
 800e6de:	d10b      	bne.n	800e6f8 <_free_r+0x70>
 800e6e0:	6824      	ldr	r4, [r4, #0]
 800e6e2:	4421      	add	r1, r4
 800e6e4:	1854      	adds	r4, r2, r1
 800e6e6:	42a3      	cmp	r3, r4
 800e6e8:	6011      	str	r1, [r2, #0]
 800e6ea:	d1e0      	bne.n	800e6ae <_free_r+0x26>
 800e6ec:	681c      	ldr	r4, [r3, #0]
 800e6ee:	685b      	ldr	r3, [r3, #4]
 800e6f0:	6053      	str	r3, [r2, #4]
 800e6f2:	4421      	add	r1, r4
 800e6f4:	6011      	str	r1, [r2, #0]
 800e6f6:	e7da      	b.n	800e6ae <_free_r+0x26>
 800e6f8:	d902      	bls.n	800e700 <_free_r+0x78>
 800e6fa:	230c      	movs	r3, #12
 800e6fc:	6003      	str	r3, [r0, #0]
 800e6fe:	e7d6      	b.n	800e6ae <_free_r+0x26>
 800e700:	6825      	ldr	r5, [r4, #0]
 800e702:	1961      	adds	r1, r4, r5
 800e704:	428b      	cmp	r3, r1
 800e706:	bf04      	itt	eq
 800e708:	6819      	ldreq	r1, [r3, #0]
 800e70a:	685b      	ldreq	r3, [r3, #4]
 800e70c:	6063      	str	r3, [r4, #4]
 800e70e:	bf04      	itt	eq
 800e710:	1949      	addeq	r1, r1, r5
 800e712:	6021      	streq	r1, [r4, #0]
 800e714:	6054      	str	r4, [r2, #4]
 800e716:	e7ca      	b.n	800e6ae <_free_r+0x26>
 800e718:	b003      	add	sp, #12
 800e71a:	bd30      	pop	{r4, r5, pc}
 800e71c:	20000508 	.word	0x20000508

0800e720 <sbrk_aligned>:
 800e720:	b570      	push	{r4, r5, r6, lr}
 800e722:	4e0e      	ldr	r6, [pc, #56]	; (800e75c <sbrk_aligned+0x3c>)
 800e724:	460c      	mov	r4, r1
 800e726:	6831      	ldr	r1, [r6, #0]
 800e728:	4605      	mov	r5, r0
 800e72a:	b911      	cbnz	r1, 800e732 <sbrk_aligned+0x12>
 800e72c:	f000 f9e6 	bl	800eafc <_sbrk_r>
 800e730:	6030      	str	r0, [r6, #0]
 800e732:	4621      	mov	r1, r4
 800e734:	4628      	mov	r0, r5
 800e736:	f000 f9e1 	bl	800eafc <_sbrk_r>
 800e73a:	1c43      	adds	r3, r0, #1
 800e73c:	d00a      	beq.n	800e754 <sbrk_aligned+0x34>
 800e73e:	1cc4      	adds	r4, r0, #3
 800e740:	f024 0403 	bic.w	r4, r4, #3
 800e744:	42a0      	cmp	r0, r4
 800e746:	d007      	beq.n	800e758 <sbrk_aligned+0x38>
 800e748:	1a21      	subs	r1, r4, r0
 800e74a:	4628      	mov	r0, r5
 800e74c:	f000 f9d6 	bl	800eafc <_sbrk_r>
 800e750:	3001      	adds	r0, #1
 800e752:	d101      	bne.n	800e758 <sbrk_aligned+0x38>
 800e754:	f04f 34ff 	mov.w	r4, #4294967295
 800e758:	4620      	mov	r0, r4
 800e75a:	bd70      	pop	{r4, r5, r6, pc}
 800e75c:	2000050c 	.word	0x2000050c

0800e760 <_malloc_r>:
 800e760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e764:	1ccd      	adds	r5, r1, #3
 800e766:	f025 0503 	bic.w	r5, r5, #3
 800e76a:	3508      	adds	r5, #8
 800e76c:	2d0c      	cmp	r5, #12
 800e76e:	bf38      	it	cc
 800e770:	250c      	movcc	r5, #12
 800e772:	2d00      	cmp	r5, #0
 800e774:	4607      	mov	r7, r0
 800e776:	db01      	blt.n	800e77c <_malloc_r+0x1c>
 800e778:	42a9      	cmp	r1, r5
 800e77a:	d905      	bls.n	800e788 <_malloc_r+0x28>
 800e77c:	230c      	movs	r3, #12
 800e77e:	603b      	str	r3, [r7, #0]
 800e780:	2600      	movs	r6, #0
 800e782:	4630      	mov	r0, r6
 800e784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e788:	4e2e      	ldr	r6, [pc, #184]	; (800e844 <_malloc_r+0xe4>)
 800e78a:	f000 faa3 	bl	800ecd4 <__malloc_lock>
 800e78e:	6833      	ldr	r3, [r6, #0]
 800e790:	461c      	mov	r4, r3
 800e792:	bb34      	cbnz	r4, 800e7e2 <_malloc_r+0x82>
 800e794:	4629      	mov	r1, r5
 800e796:	4638      	mov	r0, r7
 800e798:	f7ff ffc2 	bl	800e720 <sbrk_aligned>
 800e79c:	1c43      	adds	r3, r0, #1
 800e79e:	4604      	mov	r4, r0
 800e7a0:	d14d      	bne.n	800e83e <_malloc_r+0xde>
 800e7a2:	6834      	ldr	r4, [r6, #0]
 800e7a4:	4626      	mov	r6, r4
 800e7a6:	2e00      	cmp	r6, #0
 800e7a8:	d140      	bne.n	800e82c <_malloc_r+0xcc>
 800e7aa:	6823      	ldr	r3, [r4, #0]
 800e7ac:	4631      	mov	r1, r6
 800e7ae:	4638      	mov	r0, r7
 800e7b0:	eb04 0803 	add.w	r8, r4, r3
 800e7b4:	f000 f9a2 	bl	800eafc <_sbrk_r>
 800e7b8:	4580      	cmp	r8, r0
 800e7ba:	d13a      	bne.n	800e832 <_malloc_r+0xd2>
 800e7bc:	6821      	ldr	r1, [r4, #0]
 800e7be:	3503      	adds	r5, #3
 800e7c0:	1a6d      	subs	r5, r5, r1
 800e7c2:	f025 0503 	bic.w	r5, r5, #3
 800e7c6:	3508      	adds	r5, #8
 800e7c8:	2d0c      	cmp	r5, #12
 800e7ca:	bf38      	it	cc
 800e7cc:	250c      	movcc	r5, #12
 800e7ce:	4629      	mov	r1, r5
 800e7d0:	4638      	mov	r0, r7
 800e7d2:	f7ff ffa5 	bl	800e720 <sbrk_aligned>
 800e7d6:	3001      	adds	r0, #1
 800e7d8:	d02b      	beq.n	800e832 <_malloc_r+0xd2>
 800e7da:	6823      	ldr	r3, [r4, #0]
 800e7dc:	442b      	add	r3, r5
 800e7de:	6023      	str	r3, [r4, #0]
 800e7e0:	e00e      	b.n	800e800 <_malloc_r+0xa0>
 800e7e2:	6822      	ldr	r2, [r4, #0]
 800e7e4:	1b52      	subs	r2, r2, r5
 800e7e6:	d41e      	bmi.n	800e826 <_malloc_r+0xc6>
 800e7e8:	2a0b      	cmp	r2, #11
 800e7ea:	d916      	bls.n	800e81a <_malloc_r+0xba>
 800e7ec:	1961      	adds	r1, r4, r5
 800e7ee:	42a3      	cmp	r3, r4
 800e7f0:	6025      	str	r5, [r4, #0]
 800e7f2:	bf18      	it	ne
 800e7f4:	6059      	strne	r1, [r3, #4]
 800e7f6:	6863      	ldr	r3, [r4, #4]
 800e7f8:	bf08      	it	eq
 800e7fa:	6031      	streq	r1, [r6, #0]
 800e7fc:	5162      	str	r2, [r4, r5]
 800e7fe:	604b      	str	r3, [r1, #4]
 800e800:	4638      	mov	r0, r7
 800e802:	f104 060b 	add.w	r6, r4, #11
 800e806:	f000 fa6b 	bl	800ece0 <__malloc_unlock>
 800e80a:	f026 0607 	bic.w	r6, r6, #7
 800e80e:	1d23      	adds	r3, r4, #4
 800e810:	1af2      	subs	r2, r6, r3
 800e812:	d0b6      	beq.n	800e782 <_malloc_r+0x22>
 800e814:	1b9b      	subs	r3, r3, r6
 800e816:	50a3      	str	r3, [r4, r2]
 800e818:	e7b3      	b.n	800e782 <_malloc_r+0x22>
 800e81a:	6862      	ldr	r2, [r4, #4]
 800e81c:	42a3      	cmp	r3, r4
 800e81e:	bf0c      	ite	eq
 800e820:	6032      	streq	r2, [r6, #0]
 800e822:	605a      	strne	r2, [r3, #4]
 800e824:	e7ec      	b.n	800e800 <_malloc_r+0xa0>
 800e826:	4623      	mov	r3, r4
 800e828:	6864      	ldr	r4, [r4, #4]
 800e82a:	e7b2      	b.n	800e792 <_malloc_r+0x32>
 800e82c:	4634      	mov	r4, r6
 800e82e:	6876      	ldr	r6, [r6, #4]
 800e830:	e7b9      	b.n	800e7a6 <_malloc_r+0x46>
 800e832:	230c      	movs	r3, #12
 800e834:	603b      	str	r3, [r7, #0]
 800e836:	4638      	mov	r0, r7
 800e838:	f000 fa52 	bl	800ece0 <__malloc_unlock>
 800e83c:	e7a1      	b.n	800e782 <_malloc_r+0x22>
 800e83e:	6025      	str	r5, [r4, #0]
 800e840:	e7de      	b.n	800e800 <_malloc_r+0xa0>
 800e842:	bf00      	nop
 800e844:	20000508 	.word	0x20000508

0800e848 <__sfputc_r>:
 800e848:	6893      	ldr	r3, [r2, #8]
 800e84a:	3b01      	subs	r3, #1
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	b410      	push	{r4}
 800e850:	6093      	str	r3, [r2, #8]
 800e852:	da08      	bge.n	800e866 <__sfputc_r+0x1e>
 800e854:	6994      	ldr	r4, [r2, #24]
 800e856:	42a3      	cmp	r3, r4
 800e858:	db01      	blt.n	800e85e <__sfputc_r+0x16>
 800e85a:	290a      	cmp	r1, #10
 800e85c:	d103      	bne.n	800e866 <__sfputc_r+0x1e>
 800e85e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e862:	f7fe ba91 	b.w	800cd88 <__swbuf_r>
 800e866:	6813      	ldr	r3, [r2, #0]
 800e868:	1c58      	adds	r0, r3, #1
 800e86a:	6010      	str	r0, [r2, #0]
 800e86c:	7019      	strb	r1, [r3, #0]
 800e86e:	4608      	mov	r0, r1
 800e870:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e874:	4770      	bx	lr

0800e876 <__sfputs_r>:
 800e876:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e878:	4606      	mov	r6, r0
 800e87a:	460f      	mov	r7, r1
 800e87c:	4614      	mov	r4, r2
 800e87e:	18d5      	adds	r5, r2, r3
 800e880:	42ac      	cmp	r4, r5
 800e882:	d101      	bne.n	800e888 <__sfputs_r+0x12>
 800e884:	2000      	movs	r0, #0
 800e886:	e007      	b.n	800e898 <__sfputs_r+0x22>
 800e888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e88c:	463a      	mov	r2, r7
 800e88e:	4630      	mov	r0, r6
 800e890:	f7ff ffda 	bl	800e848 <__sfputc_r>
 800e894:	1c43      	adds	r3, r0, #1
 800e896:	d1f3      	bne.n	800e880 <__sfputs_r+0xa>
 800e898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e89c <_vfiprintf_r>:
 800e89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8a0:	460d      	mov	r5, r1
 800e8a2:	b09d      	sub	sp, #116	; 0x74
 800e8a4:	4614      	mov	r4, r2
 800e8a6:	4698      	mov	r8, r3
 800e8a8:	4606      	mov	r6, r0
 800e8aa:	b118      	cbz	r0, 800e8b4 <_vfiprintf_r+0x18>
 800e8ac:	6983      	ldr	r3, [r0, #24]
 800e8ae:	b90b      	cbnz	r3, 800e8b4 <_vfiprintf_r+0x18>
 800e8b0:	f7ff fa3e 	bl	800dd30 <__sinit>
 800e8b4:	4b89      	ldr	r3, [pc, #548]	; (800eadc <_vfiprintf_r+0x240>)
 800e8b6:	429d      	cmp	r5, r3
 800e8b8:	d11b      	bne.n	800e8f2 <_vfiprintf_r+0x56>
 800e8ba:	6875      	ldr	r5, [r6, #4]
 800e8bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e8be:	07d9      	lsls	r1, r3, #31
 800e8c0:	d405      	bmi.n	800e8ce <_vfiprintf_r+0x32>
 800e8c2:	89ab      	ldrh	r3, [r5, #12]
 800e8c4:	059a      	lsls	r2, r3, #22
 800e8c6:	d402      	bmi.n	800e8ce <_vfiprintf_r+0x32>
 800e8c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e8ca:	f7ff fad4 	bl	800de76 <__retarget_lock_acquire_recursive>
 800e8ce:	89ab      	ldrh	r3, [r5, #12]
 800e8d0:	071b      	lsls	r3, r3, #28
 800e8d2:	d501      	bpl.n	800e8d8 <_vfiprintf_r+0x3c>
 800e8d4:	692b      	ldr	r3, [r5, #16]
 800e8d6:	b9eb      	cbnz	r3, 800e914 <_vfiprintf_r+0x78>
 800e8d8:	4629      	mov	r1, r5
 800e8da:	4630      	mov	r0, r6
 800e8dc:	f7fe faa6 	bl	800ce2c <__swsetup_r>
 800e8e0:	b1c0      	cbz	r0, 800e914 <_vfiprintf_r+0x78>
 800e8e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e8e4:	07dc      	lsls	r4, r3, #31
 800e8e6:	d50e      	bpl.n	800e906 <_vfiprintf_r+0x6a>
 800e8e8:	f04f 30ff 	mov.w	r0, #4294967295
 800e8ec:	b01d      	add	sp, #116	; 0x74
 800e8ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8f2:	4b7b      	ldr	r3, [pc, #492]	; (800eae0 <_vfiprintf_r+0x244>)
 800e8f4:	429d      	cmp	r5, r3
 800e8f6:	d101      	bne.n	800e8fc <_vfiprintf_r+0x60>
 800e8f8:	68b5      	ldr	r5, [r6, #8]
 800e8fa:	e7df      	b.n	800e8bc <_vfiprintf_r+0x20>
 800e8fc:	4b79      	ldr	r3, [pc, #484]	; (800eae4 <_vfiprintf_r+0x248>)
 800e8fe:	429d      	cmp	r5, r3
 800e900:	bf08      	it	eq
 800e902:	68f5      	ldreq	r5, [r6, #12]
 800e904:	e7da      	b.n	800e8bc <_vfiprintf_r+0x20>
 800e906:	89ab      	ldrh	r3, [r5, #12]
 800e908:	0598      	lsls	r0, r3, #22
 800e90a:	d4ed      	bmi.n	800e8e8 <_vfiprintf_r+0x4c>
 800e90c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e90e:	f7ff fab3 	bl	800de78 <__retarget_lock_release_recursive>
 800e912:	e7e9      	b.n	800e8e8 <_vfiprintf_r+0x4c>
 800e914:	2300      	movs	r3, #0
 800e916:	9309      	str	r3, [sp, #36]	; 0x24
 800e918:	2320      	movs	r3, #32
 800e91a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e91e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e922:	2330      	movs	r3, #48	; 0x30
 800e924:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800eae8 <_vfiprintf_r+0x24c>
 800e928:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e92c:	f04f 0901 	mov.w	r9, #1
 800e930:	4623      	mov	r3, r4
 800e932:	469a      	mov	sl, r3
 800e934:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e938:	b10a      	cbz	r2, 800e93e <_vfiprintf_r+0xa2>
 800e93a:	2a25      	cmp	r2, #37	; 0x25
 800e93c:	d1f9      	bne.n	800e932 <_vfiprintf_r+0x96>
 800e93e:	ebba 0b04 	subs.w	fp, sl, r4
 800e942:	d00b      	beq.n	800e95c <_vfiprintf_r+0xc0>
 800e944:	465b      	mov	r3, fp
 800e946:	4622      	mov	r2, r4
 800e948:	4629      	mov	r1, r5
 800e94a:	4630      	mov	r0, r6
 800e94c:	f7ff ff93 	bl	800e876 <__sfputs_r>
 800e950:	3001      	adds	r0, #1
 800e952:	f000 80aa 	beq.w	800eaaa <_vfiprintf_r+0x20e>
 800e956:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e958:	445a      	add	r2, fp
 800e95a:	9209      	str	r2, [sp, #36]	; 0x24
 800e95c:	f89a 3000 	ldrb.w	r3, [sl]
 800e960:	2b00      	cmp	r3, #0
 800e962:	f000 80a2 	beq.w	800eaaa <_vfiprintf_r+0x20e>
 800e966:	2300      	movs	r3, #0
 800e968:	f04f 32ff 	mov.w	r2, #4294967295
 800e96c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e970:	f10a 0a01 	add.w	sl, sl, #1
 800e974:	9304      	str	r3, [sp, #16]
 800e976:	9307      	str	r3, [sp, #28]
 800e978:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e97c:	931a      	str	r3, [sp, #104]	; 0x68
 800e97e:	4654      	mov	r4, sl
 800e980:	2205      	movs	r2, #5
 800e982:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e986:	4858      	ldr	r0, [pc, #352]	; (800eae8 <_vfiprintf_r+0x24c>)
 800e988:	f7f2 f952 	bl	8000c30 <memchr>
 800e98c:	9a04      	ldr	r2, [sp, #16]
 800e98e:	b9d8      	cbnz	r0, 800e9c8 <_vfiprintf_r+0x12c>
 800e990:	06d1      	lsls	r1, r2, #27
 800e992:	bf44      	itt	mi
 800e994:	2320      	movmi	r3, #32
 800e996:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e99a:	0713      	lsls	r3, r2, #28
 800e99c:	bf44      	itt	mi
 800e99e:	232b      	movmi	r3, #43	; 0x2b
 800e9a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9a4:	f89a 3000 	ldrb.w	r3, [sl]
 800e9a8:	2b2a      	cmp	r3, #42	; 0x2a
 800e9aa:	d015      	beq.n	800e9d8 <_vfiprintf_r+0x13c>
 800e9ac:	9a07      	ldr	r2, [sp, #28]
 800e9ae:	4654      	mov	r4, sl
 800e9b0:	2000      	movs	r0, #0
 800e9b2:	f04f 0c0a 	mov.w	ip, #10
 800e9b6:	4621      	mov	r1, r4
 800e9b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9bc:	3b30      	subs	r3, #48	; 0x30
 800e9be:	2b09      	cmp	r3, #9
 800e9c0:	d94e      	bls.n	800ea60 <_vfiprintf_r+0x1c4>
 800e9c2:	b1b0      	cbz	r0, 800e9f2 <_vfiprintf_r+0x156>
 800e9c4:	9207      	str	r2, [sp, #28]
 800e9c6:	e014      	b.n	800e9f2 <_vfiprintf_r+0x156>
 800e9c8:	eba0 0308 	sub.w	r3, r0, r8
 800e9cc:	fa09 f303 	lsl.w	r3, r9, r3
 800e9d0:	4313      	orrs	r3, r2
 800e9d2:	9304      	str	r3, [sp, #16]
 800e9d4:	46a2      	mov	sl, r4
 800e9d6:	e7d2      	b.n	800e97e <_vfiprintf_r+0xe2>
 800e9d8:	9b03      	ldr	r3, [sp, #12]
 800e9da:	1d19      	adds	r1, r3, #4
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	9103      	str	r1, [sp, #12]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	bfbb      	ittet	lt
 800e9e4:	425b      	neglt	r3, r3
 800e9e6:	f042 0202 	orrlt.w	r2, r2, #2
 800e9ea:	9307      	strge	r3, [sp, #28]
 800e9ec:	9307      	strlt	r3, [sp, #28]
 800e9ee:	bfb8      	it	lt
 800e9f0:	9204      	strlt	r2, [sp, #16]
 800e9f2:	7823      	ldrb	r3, [r4, #0]
 800e9f4:	2b2e      	cmp	r3, #46	; 0x2e
 800e9f6:	d10c      	bne.n	800ea12 <_vfiprintf_r+0x176>
 800e9f8:	7863      	ldrb	r3, [r4, #1]
 800e9fa:	2b2a      	cmp	r3, #42	; 0x2a
 800e9fc:	d135      	bne.n	800ea6a <_vfiprintf_r+0x1ce>
 800e9fe:	9b03      	ldr	r3, [sp, #12]
 800ea00:	1d1a      	adds	r2, r3, #4
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	9203      	str	r2, [sp, #12]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	bfb8      	it	lt
 800ea0a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ea0e:	3402      	adds	r4, #2
 800ea10:	9305      	str	r3, [sp, #20]
 800ea12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800eaf8 <_vfiprintf_r+0x25c>
 800ea16:	7821      	ldrb	r1, [r4, #0]
 800ea18:	2203      	movs	r2, #3
 800ea1a:	4650      	mov	r0, sl
 800ea1c:	f7f2 f908 	bl	8000c30 <memchr>
 800ea20:	b140      	cbz	r0, 800ea34 <_vfiprintf_r+0x198>
 800ea22:	2340      	movs	r3, #64	; 0x40
 800ea24:	eba0 000a 	sub.w	r0, r0, sl
 800ea28:	fa03 f000 	lsl.w	r0, r3, r0
 800ea2c:	9b04      	ldr	r3, [sp, #16]
 800ea2e:	4303      	orrs	r3, r0
 800ea30:	3401      	adds	r4, #1
 800ea32:	9304      	str	r3, [sp, #16]
 800ea34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea38:	482c      	ldr	r0, [pc, #176]	; (800eaec <_vfiprintf_r+0x250>)
 800ea3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ea3e:	2206      	movs	r2, #6
 800ea40:	f7f2 f8f6 	bl	8000c30 <memchr>
 800ea44:	2800      	cmp	r0, #0
 800ea46:	d03f      	beq.n	800eac8 <_vfiprintf_r+0x22c>
 800ea48:	4b29      	ldr	r3, [pc, #164]	; (800eaf0 <_vfiprintf_r+0x254>)
 800ea4a:	bb1b      	cbnz	r3, 800ea94 <_vfiprintf_r+0x1f8>
 800ea4c:	9b03      	ldr	r3, [sp, #12]
 800ea4e:	3307      	adds	r3, #7
 800ea50:	f023 0307 	bic.w	r3, r3, #7
 800ea54:	3308      	adds	r3, #8
 800ea56:	9303      	str	r3, [sp, #12]
 800ea58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea5a:	443b      	add	r3, r7
 800ea5c:	9309      	str	r3, [sp, #36]	; 0x24
 800ea5e:	e767      	b.n	800e930 <_vfiprintf_r+0x94>
 800ea60:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea64:	460c      	mov	r4, r1
 800ea66:	2001      	movs	r0, #1
 800ea68:	e7a5      	b.n	800e9b6 <_vfiprintf_r+0x11a>
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	3401      	adds	r4, #1
 800ea6e:	9305      	str	r3, [sp, #20]
 800ea70:	4619      	mov	r1, r3
 800ea72:	f04f 0c0a 	mov.w	ip, #10
 800ea76:	4620      	mov	r0, r4
 800ea78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea7c:	3a30      	subs	r2, #48	; 0x30
 800ea7e:	2a09      	cmp	r2, #9
 800ea80:	d903      	bls.n	800ea8a <_vfiprintf_r+0x1ee>
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d0c5      	beq.n	800ea12 <_vfiprintf_r+0x176>
 800ea86:	9105      	str	r1, [sp, #20]
 800ea88:	e7c3      	b.n	800ea12 <_vfiprintf_r+0x176>
 800ea8a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea8e:	4604      	mov	r4, r0
 800ea90:	2301      	movs	r3, #1
 800ea92:	e7f0      	b.n	800ea76 <_vfiprintf_r+0x1da>
 800ea94:	ab03      	add	r3, sp, #12
 800ea96:	9300      	str	r3, [sp, #0]
 800ea98:	462a      	mov	r2, r5
 800ea9a:	4b16      	ldr	r3, [pc, #88]	; (800eaf4 <_vfiprintf_r+0x258>)
 800ea9c:	a904      	add	r1, sp, #16
 800ea9e:	4630      	mov	r0, r6
 800eaa0:	f7fd fd32 	bl	800c508 <_printf_float>
 800eaa4:	4607      	mov	r7, r0
 800eaa6:	1c78      	adds	r0, r7, #1
 800eaa8:	d1d6      	bne.n	800ea58 <_vfiprintf_r+0x1bc>
 800eaaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eaac:	07d9      	lsls	r1, r3, #31
 800eaae:	d405      	bmi.n	800eabc <_vfiprintf_r+0x220>
 800eab0:	89ab      	ldrh	r3, [r5, #12]
 800eab2:	059a      	lsls	r2, r3, #22
 800eab4:	d402      	bmi.n	800eabc <_vfiprintf_r+0x220>
 800eab6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eab8:	f7ff f9de 	bl	800de78 <__retarget_lock_release_recursive>
 800eabc:	89ab      	ldrh	r3, [r5, #12]
 800eabe:	065b      	lsls	r3, r3, #25
 800eac0:	f53f af12 	bmi.w	800e8e8 <_vfiprintf_r+0x4c>
 800eac4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eac6:	e711      	b.n	800e8ec <_vfiprintf_r+0x50>
 800eac8:	ab03      	add	r3, sp, #12
 800eaca:	9300      	str	r3, [sp, #0]
 800eacc:	462a      	mov	r2, r5
 800eace:	4b09      	ldr	r3, [pc, #36]	; (800eaf4 <_vfiprintf_r+0x258>)
 800ead0:	a904      	add	r1, sp, #16
 800ead2:	4630      	mov	r0, r6
 800ead4:	f7fd ffa4 	bl	800ca20 <_printf_i>
 800ead8:	e7e4      	b.n	800eaa4 <_vfiprintf_r+0x208>
 800eada:	bf00      	nop
 800eadc:	0800f41c 	.word	0x0800f41c
 800eae0:	0800f43c 	.word	0x0800f43c
 800eae4:	0800f3fc 	.word	0x0800f3fc
 800eae8:	0800f5b4 	.word	0x0800f5b4
 800eaec:	0800f5be 	.word	0x0800f5be
 800eaf0:	0800c509 	.word	0x0800c509
 800eaf4:	0800e877 	.word	0x0800e877
 800eaf8:	0800f5ba 	.word	0x0800f5ba

0800eafc <_sbrk_r>:
 800eafc:	b538      	push	{r3, r4, r5, lr}
 800eafe:	4d06      	ldr	r5, [pc, #24]	; (800eb18 <_sbrk_r+0x1c>)
 800eb00:	2300      	movs	r3, #0
 800eb02:	4604      	mov	r4, r0
 800eb04:	4608      	mov	r0, r1
 800eb06:	602b      	str	r3, [r5, #0]
 800eb08:	f7f3 fdb6 	bl	8002678 <_sbrk>
 800eb0c:	1c43      	adds	r3, r0, #1
 800eb0e:	d102      	bne.n	800eb16 <_sbrk_r+0x1a>
 800eb10:	682b      	ldr	r3, [r5, #0]
 800eb12:	b103      	cbz	r3, 800eb16 <_sbrk_r+0x1a>
 800eb14:	6023      	str	r3, [r4, #0]
 800eb16:	bd38      	pop	{r3, r4, r5, pc}
 800eb18:	20000510 	.word	0x20000510

0800eb1c <__sread>:
 800eb1c:	b510      	push	{r4, lr}
 800eb1e:	460c      	mov	r4, r1
 800eb20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb24:	f000 f8e2 	bl	800ecec <_read_r>
 800eb28:	2800      	cmp	r0, #0
 800eb2a:	bfab      	itete	ge
 800eb2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800eb2e:	89a3      	ldrhlt	r3, [r4, #12]
 800eb30:	181b      	addge	r3, r3, r0
 800eb32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800eb36:	bfac      	ite	ge
 800eb38:	6563      	strge	r3, [r4, #84]	; 0x54
 800eb3a:	81a3      	strhlt	r3, [r4, #12]
 800eb3c:	bd10      	pop	{r4, pc}

0800eb3e <__swrite>:
 800eb3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb42:	461f      	mov	r7, r3
 800eb44:	898b      	ldrh	r3, [r1, #12]
 800eb46:	05db      	lsls	r3, r3, #23
 800eb48:	4605      	mov	r5, r0
 800eb4a:	460c      	mov	r4, r1
 800eb4c:	4616      	mov	r6, r2
 800eb4e:	d505      	bpl.n	800eb5c <__swrite+0x1e>
 800eb50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb54:	2302      	movs	r3, #2
 800eb56:	2200      	movs	r2, #0
 800eb58:	f000 f898 	bl	800ec8c <_lseek_r>
 800eb5c:	89a3      	ldrh	r3, [r4, #12]
 800eb5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eb66:	81a3      	strh	r3, [r4, #12]
 800eb68:	4632      	mov	r2, r6
 800eb6a:	463b      	mov	r3, r7
 800eb6c:	4628      	mov	r0, r5
 800eb6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb72:	f000 b817 	b.w	800eba4 <_write_r>

0800eb76 <__sseek>:
 800eb76:	b510      	push	{r4, lr}
 800eb78:	460c      	mov	r4, r1
 800eb7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb7e:	f000 f885 	bl	800ec8c <_lseek_r>
 800eb82:	1c43      	adds	r3, r0, #1
 800eb84:	89a3      	ldrh	r3, [r4, #12]
 800eb86:	bf15      	itete	ne
 800eb88:	6560      	strne	r0, [r4, #84]	; 0x54
 800eb8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eb8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eb92:	81a3      	strheq	r3, [r4, #12]
 800eb94:	bf18      	it	ne
 800eb96:	81a3      	strhne	r3, [r4, #12]
 800eb98:	bd10      	pop	{r4, pc}

0800eb9a <__sclose>:
 800eb9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb9e:	f000 b831 	b.w	800ec04 <_close_r>
	...

0800eba4 <_write_r>:
 800eba4:	b538      	push	{r3, r4, r5, lr}
 800eba6:	4d07      	ldr	r5, [pc, #28]	; (800ebc4 <_write_r+0x20>)
 800eba8:	4604      	mov	r4, r0
 800ebaa:	4608      	mov	r0, r1
 800ebac:	4611      	mov	r1, r2
 800ebae:	2200      	movs	r2, #0
 800ebb0:	602a      	str	r2, [r5, #0]
 800ebb2:	461a      	mov	r2, r3
 800ebb4:	f7f3 fd0f 	bl	80025d6 <_write>
 800ebb8:	1c43      	adds	r3, r0, #1
 800ebba:	d102      	bne.n	800ebc2 <_write_r+0x1e>
 800ebbc:	682b      	ldr	r3, [r5, #0]
 800ebbe:	b103      	cbz	r3, 800ebc2 <_write_r+0x1e>
 800ebc0:	6023      	str	r3, [r4, #0]
 800ebc2:	bd38      	pop	{r3, r4, r5, pc}
 800ebc4:	20000510 	.word	0x20000510

0800ebc8 <__assert_func>:
 800ebc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ebca:	4614      	mov	r4, r2
 800ebcc:	461a      	mov	r2, r3
 800ebce:	4b09      	ldr	r3, [pc, #36]	; (800ebf4 <__assert_func+0x2c>)
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	4605      	mov	r5, r0
 800ebd4:	68d8      	ldr	r0, [r3, #12]
 800ebd6:	b14c      	cbz	r4, 800ebec <__assert_func+0x24>
 800ebd8:	4b07      	ldr	r3, [pc, #28]	; (800ebf8 <__assert_func+0x30>)
 800ebda:	9100      	str	r1, [sp, #0]
 800ebdc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ebe0:	4906      	ldr	r1, [pc, #24]	; (800ebfc <__assert_func+0x34>)
 800ebe2:	462b      	mov	r3, r5
 800ebe4:	f000 f81e 	bl	800ec24 <fiprintf>
 800ebe8:	f000 f89f 	bl	800ed2a <abort>
 800ebec:	4b04      	ldr	r3, [pc, #16]	; (800ec00 <__assert_func+0x38>)
 800ebee:	461c      	mov	r4, r3
 800ebf0:	e7f3      	b.n	800ebda <__assert_func+0x12>
 800ebf2:	bf00      	nop
 800ebf4:	20000040 	.word	0x20000040
 800ebf8:	0800f5c5 	.word	0x0800f5c5
 800ebfc:	0800f5d2 	.word	0x0800f5d2
 800ec00:	0800f600 	.word	0x0800f600

0800ec04 <_close_r>:
 800ec04:	b538      	push	{r3, r4, r5, lr}
 800ec06:	4d06      	ldr	r5, [pc, #24]	; (800ec20 <_close_r+0x1c>)
 800ec08:	2300      	movs	r3, #0
 800ec0a:	4604      	mov	r4, r0
 800ec0c:	4608      	mov	r0, r1
 800ec0e:	602b      	str	r3, [r5, #0]
 800ec10:	f7f3 fcfd 	bl	800260e <_close>
 800ec14:	1c43      	adds	r3, r0, #1
 800ec16:	d102      	bne.n	800ec1e <_close_r+0x1a>
 800ec18:	682b      	ldr	r3, [r5, #0]
 800ec1a:	b103      	cbz	r3, 800ec1e <_close_r+0x1a>
 800ec1c:	6023      	str	r3, [r4, #0]
 800ec1e:	bd38      	pop	{r3, r4, r5, pc}
 800ec20:	20000510 	.word	0x20000510

0800ec24 <fiprintf>:
 800ec24:	b40e      	push	{r1, r2, r3}
 800ec26:	b503      	push	{r0, r1, lr}
 800ec28:	4601      	mov	r1, r0
 800ec2a:	ab03      	add	r3, sp, #12
 800ec2c:	4805      	ldr	r0, [pc, #20]	; (800ec44 <fiprintf+0x20>)
 800ec2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec32:	6800      	ldr	r0, [r0, #0]
 800ec34:	9301      	str	r3, [sp, #4]
 800ec36:	f7ff fe31 	bl	800e89c <_vfiprintf_r>
 800ec3a:	b002      	add	sp, #8
 800ec3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec40:	b003      	add	sp, #12
 800ec42:	4770      	bx	lr
 800ec44:	20000040 	.word	0x20000040

0800ec48 <_fstat_r>:
 800ec48:	b538      	push	{r3, r4, r5, lr}
 800ec4a:	4d07      	ldr	r5, [pc, #28]	; (800ec68 <_fstat_r+0x20>)
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	4604      	mov	r4, r0
 800ec50:	4608      	mov	r0, r1
 800ec52:	4611      	mov	r1, r2
 800ec54:	602b      	str	r3, [r5, #0]
 800ec56:	f7f3 fce6 	bl	8002626 <_fstat>
 800ec5a:	1c43      	adds	r3, r0, #1
 800ec5c:	d102      	bne.n	800ec64 <_fstat_r+0x1c>
 800ec5e:	682b      	ldr	r3, [r5, #0]
 800ec60:	b103      	cbz	r3, 800ec64 <_fstat_r+0x1c>
 800ec62:	6023      	str	r3, [r4, #0]
 800ec64:	bd38      	pop	{r3, r4, r5, pc}
 800ec66:	bf00      	nop
 800ec68:	20000510 	.word	0x20000510

0800ec6c <_isatty_r>:
 800ec6c:	b538      	push	{r3, r4, r5, lr}
 800ec6e:	4d06      	ldr	r5, [pc, #24]	; (800ec88 <_isatty_r+0x1c>)
 800ec70:	2300      	movs	r3, #0
 800ec72:	4604      	mov	r4, r0
 800ec74:	4608      	mov	r0, r1
 800ec76:	602b      	str	r3, [r5, #0]
 800ec78:	f7f3 fce5 	bl	8002646 <_isatty>
 800ec7c:	1c43      	adds	r3, r0, #1
 800ec7e:	d102      	bne.n	800ec86 <_isatty_r+0x1a>
 800ec80:	682b      	ldr	r3, [r5, #0]
 800ec82:	b103      	cbz	r3, 800ec86 <_isatty_r+0x1a>
 800ec84:	6023      	str	r3, [r4, #0]
 800ec86:	bd38      	pop	{r3, r4, r5, pc}
 800ec88:	20000510 	.word	0x20000510

0800ec8c <_lseek_r>:
 800ec8c:	b538      	push	{r3, r4, r5, lr}
 800ec8e:	4d07      	ldr	r5, [pc, #28]	; (800ecac <_lseek_r+0x20>)
 800ec90:	4604      	mov	r4, r0
 800ec92:	4608      	mov	r0, r1
 800ec94:	4611      	mov	r1, r2
 800ec96:	2200      	movs	r2, #0
 800ec98:	602a      	str	r2, [r5, #0]
 800ec9a:	461a      	mov	r2, r3
 800ec9c:	f7f3 fcde 	bl	800265c <_lseek>
 800eca0:	1c43      	adds	r3, r0, #1
 800eca2:	d102      	bne.n	800ecaa <_lseek_r+0x1e>
 800eca4:	682b      	ldr	r3, [r5, #0]
 800eca6:	b103      	cbz	r3, 800ecaa <_lseek_r+0x1e>
 800eca8:	6023      	str	r3, [r4, #0]
 800ecaa:	bd38      	pop	{r3, r4, r5, pc}
 800ecac:	20000510 	.word	0x20000510

0800ecb0 <__ascii_mbtowc>:
 800ecb0:	b082      	sub	sp, #8
 800ecb2:	b901      	cbnz	r1, 800ecb6 <__ascii_mbtowc+0x6>
 800ecb4:	a901      	add	r1, sp, #4
 800ecb6:	b142      	cbz	r2, 800ecca <__ascii_mbtowc+0x1a>
 800ecb8:	b14b      	cbz	r3, 800ecce <__ascii_mbtowc+0x1e>
 800ecba:	7813      	ldrb	r3, [r2, #0]
 800ecbc:	600b      	str	r3, [r1, #0]
 800ecbe:	7812      	ldrb	r2, [r2, #0]
 800ecc0:	1e10      	subs	r0, r2, #0
 800ecc2:	bf18      	it	ne
 800ecc4:	2001      	movne	r0, #1
 800ecc6:	b002      	add	sp, #8
 800ecc8:	4770      	bx	lr
 800ecca:	4610      	mov	r0, r2
 800eccc:	e7fb      	b.n	800ecc6 <__ascii_mbtowc+0x16>
 800ecce:	f06f 0001 	mvn.w	r0, #1
 800ecd2:	e7f8      	b.n	800ecc6 <__ascii_mbtowc+0x16>

0800ecd4 <__malloc_lock>:
 800ecd4:	4801      	ldr	r0, [pc, #4]	; (800ecdc <__malloc_lock+0x8>)
 800ecd6:	f7ff b8ce 	b.w	800de76 <__retarget_lock_acquire_recursive>
 800ecda:	bf00      	nop
 800ecdc:	20000504 	.word	0x20000504

0800ece0 <__malloc_unlock>:
 800ece0:	4801      	ldr	r0, [pc, #4]	; (800ece8 <__malloc_unlock+0x8>)
 800ece2:	f7ff b8c9 	b.w	800de78 <__retarget_lock_release_recursive>
 800ece6:	bf00      	nop
 800ece8:	20000504 	.word	0x20000504

0800ecec <_read_r>:
 800ecec:	b538      	push	{r3, r4, r5, lr}
 800ecee:	4d07      	ldr	r5, [pc, #28]	; (800ed0c <_read_r+0x20>)
 800ecf0:	4604      	mov	r4, r0
 800ecf2:	4608      	mov	r0, r1
 800ecf4:	4611      	mov	r1, r2
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	602a      	str	r2, [r5, #0]
 800ecfa:	461a      	mov	r2, r3
 800ecfc:	f7f3 fc4e 	bl	800259c <_read>
 800ed00:	1c43      	adds	r3, r0, #1
 800ed02:	d102      	bne.n	800ed0a <_read_r+0x1e>
 800ed04:	682b      	ldr	r3, [r5, #0]
 800ed06:	b103      	cbz	r3, 800ed0a <_read_r+0x1e>
 800ed08:	6023      	str	r3, [r4, #0]
 800ed0a:	bd38      	pop	{r3, r4, r5, pc}
 800ed0c:	20000510 	.word	0x20000510

0800ed10 <__ascii_wctomb>:
 800ed10:	b149      	cbz	r1, 800ed26 <__ascii_wctomb+0x16>
 800ed12:	2aff      	cmp	r2, #255	; 0xff
 800ed14:	bf85      	ittet	hi
 800ed16:	238a      	movhi	r3, #138	; 0x8a
 800ed18:	6003      	strhi	r3, [r0, #0]
 800ed1a:	700a      	strbls	r2, [r1, #0]
 800ed1c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ed20:	bf98      	it	ls
 800ed22:	2001      	movls	r0, #1
 800ed24:	4770      	bx	lr
 800ed26:	4608      	mov	r0, r1
 800ed28:	4770      	bx	lr

0800ed2a <abort>:
 800ed2a:	b508      	push	{r3, lr}
 800ed2c:	2006      	movs	r0, #6
 800ed2e:	f000 f82b 	bl	800ed88 <raise>
 800ed32:	2001      	movs	r0, #1
 800ed34:	f7f3 fc28 	bl	8002588 <_exit>

0800ed38 <_raise_r>:
 800ed38:	291f      	cmp	r1, #31
 800ed3a:	b538      	push	{r3, r4, r5, lr}
 800ed3c:	4604      	mov	r4, r0
 800ed3e:	460d      	mov	r5, r1
 800ed40:	d904      	bls.n	800ed4c <_raise_r+0x14>
 800ed42:	2316      	movs	r3, #22
 800ed44:	6003      	str	r3, [r0, #0]
 800ed46:	f04f 30ff 	mov.w	r0, #4294967295
 800ed4a:	bd38      	pop	{r3, r4, r5, pc}
 800ed4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ed4e:	b112      	cbz	r2, 800ed56 <_raise_r+0x1e>
 800ed50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ed54:	b94b      	cbnz	r3, 800ed6a <_raise_r+0x32>
 800ed56:	4620      	mov	r0, r4
 800ed58:	f000 f830 	bl	800edbc <_getpid_r>
 800ed5c:	462a      	mov	r2, r5
 800ed5e:	4601      	mov	r1, r0
 800ed60:	4620      	mov	r0, r4
 800ed62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed66:	f000 b817 	b.w	800ed98 <_kill_r>
 800ed6a:	2b01      	cmp	r3, #1
 800ed6c:	d00a      	beq.n	800ed84 <_raise_r+0x4c>
 800ed6e:	1c59      	adds	r1, r3, #1
 800ed70:	d103      	bne.n	800ed7a <_raise_r+0x42>
 800ed72:	2316      	movs	r3, #22
 800ed74:	6003      	str	r3, [r0, #0]
 800ed76:	2001      	movs	r0, #1
 800ed78:	e7e7      	b.n	800ed4a <_raise_r+0x12>
 800ed7a:	2400      	movs	r4, #0
 800ed7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ed80:	4628      	mov	r0, r5
 800ed82:	4798      	blx	r3
 800ed84:	2000      	movs	r0, #0
 800ed86:	e7e0      	b.n	800ed4a <_raise_r+0x12>

0800ed88 <raise>:
 800ed88:	4b02      	ldr	r3, [pc, #8]	; (800ed94 <raise+0xc>)
 800ed8a:	4601      	mov	r1, r0
 800ed8c:	6818      	ldr	r0, [r3, #0]
 800ed8e:	f7ff bfd3 	b.w	800ed38 <_raise_r>
 800ed92:	bf00      	nop
 800ed94:	20000040 	.word	0x20000040

0800ed98 <_kill_r>:
 800ed98:	b538      	push	{r3, r4, r5, lr}
 800ed9a:	4d07      	ldr	r5, [pc, #28]	; (800edb8 <_kill_r+0x20>)
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	4604      	mov	r4, r0
 800eda0:	4608      	mov	r0, r1
 800eda2:	4611      	mov	r1, r2
 800eda4:	602b      	str	r3, [r5, #0]
 800eda6:	f7f3 fbdf 	bl	8002568 <_kill>
 800edaa:	1c43      	adds	r3, r0, #1
 800edac:	d102      	bne.n	800edb4 <_kill_r+0x1c>
 800edae:	682b      	ldr	r3, [r5, #0]
 800edb0:	b103      	cbz	r3, 800edb4 <_kill_r+0x1c>
 800edb2:	6023      	str	r3, [r4, #0]
 800edb4:	bd38      	pop	{r3, r4, r5, pc}
 800edb6:	bf00      	nop
 800edb8:	20000510 	.word	0x20000510

0800edbc <_getpid_r>:
 800edbc:	f7f3 bbcc 	b.w	8002558 <_getpid>

0800edc0 <_init>:
 800edc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edc2:	bf00      	nop
 800edc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edc6:	bc08      	pop	{r3}
 800edc8:	469e      	mov	lr, r3
 800edca:	4770      	bx	lr

0800edcc <_fini>:
 800edcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edce:	bf00      	nop
 800edd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edd2:	bc08      	pop	{r3}
 800edd4:	469e      	mov	lr, r3
 800edd6:	4770      	bx	lr

0800edd8 <__set_frequency_hz_veneer>:
 800edd8:	f85f f000 	ldr.w	pc, [pc]	; 800eddc <__set_frequency_hz_veneer+0x4>
 800eddc:	0000076d 	.word	0x0000076d

0800ede0 <__set_aom_atten_veneer>:
 800ede0:	f85f f000 	ldr.w	pc, [pc]	; 800ede4 <__set_aom_atten_veneer+0x4>
 800ede4:	000001e1 	.word	0x000001e1

0800ede8 <__timer_delay_veneer>:
 800ede8:	f85f f000 	ldr.w	pc, [pc]	; 800edec <__timer_delay_veneer+0x4>
 800edec:	00000061 	.word	0x00000061

0800edf0 <__init_synthesiser_veneer>:
 800edf0:	f85f f000 	ldr.w	pc, [pc]	; 800edf4 <__init_synthesiser_veneer+0x4>
 800edf4:	0000040d 	.word	0x0000040d

0800edf8 <__run_sweep_veneer>:
 800edf8:	f85f f000 	ldr.w	pc, [pc]	; 800edfc <__run_sweep_veneer+0x4>
 800edfc:	00000831 	.word	0x00000831

0800ee00 <__start_pop_veneer>:
 800ee00:	f85f f000 	ldr.w	pc, [pc]	; 800ee04 <__start_pop_veneer+0x4>
 800ee04:	000000bd 	.word	0x000000bd

0800ee08 <__stop_pop_veneer>:
 800ee08:	f85f f000 	ldr.w	pc, [pc]	; 800ee0c <__stop_pop_veneer+0x4>
 800ee0c:	0000016d 	.word	0x0000016d

0800ee10 <__set_MW_power_veneer>:
 800ee10:	f85f f000 	ldr.w	pc, [pc]	; 800ee14 <__set_MW_power_veneer+0x4>
 800ee14:	000003a3 	.word	0x000003a3
