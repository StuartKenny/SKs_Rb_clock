
atomic_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .itcm         00000b70  00000000  08000298  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000ed30  08000e10  08000e10  00020e10  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .user_flash   00000000  08100000  08100000  000402d0  2**0
                  CONTENTS
  4 .rodata       00000924  0800fb40  0800fb40  0002fb40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  08010464  08010464  00030464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  0801046c  0801046c  0003046c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010470  08010470  00030470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08010474  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  20000210  08010684  00040210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  20000270  080106e4  00040270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000003f4  200002d0  08010744  000402d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200006c4  08010744  000406c4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000402d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000294e4  00000000  00000000  000402fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003a30  00000000  00000000  000697e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001e50  00000000  00000000  0006d218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001cf8  00000000  00000000  0006f068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000058f8  00000000  00000000  00070d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000236c6  00000000  00000000  00076658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00197959  00000000  00000000  00099d1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00231677  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00009420  00000000  00000000  002316c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .itcm:

00000000 <start_timer>:
	HAL_GPIO_WritePin(ATT_8_GPIO_Port, ATT_8_Pin, a.ATT_8DB);
	HAL_GPIO_WritePin(ATT_16_GPIO_Port, ATT_16_Pin, a.ATT_16DB);
}
#endif //ATTENUATOR_CODE

uint32_t start_timer(TIM_TypeDef * timer) {
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
   8:	687b      	ldr	r3, [r7, #4]
   a:	681b      	ldr	r3, [r3, #0]
   c:	f023 0201 	bic.w	r2, r3, #1
  10:	687b      	ldr	r3, [r7, #4]
  12:	601a      	str	r2, [r3, #0]
	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
  14:	687b      	ldr	r3, [r7, #4]
  16:	695b      	ldr	r3, [r3, #20]
  18:	f043 0201 	orr.w	r2, r3, #1
  1c:	687b      	ldr	r3, [r7, #4]
  1e:	615a      	str	r2, [r3, #20]
	timer->CR1 |= TIM_CR1_CEN;
  20:	687b      	ldr	r3, [r7, #4]
  22:	681b      	ldr	r3, [r3, #0]
  24:	f043 0201 	orr.w	r2, r3, #1
  28:	687b      	ldr	r3, [r7, #4]
  2a:	601a      	str	r2, [r3, #0]
	return timer->CNT;
  2c:	687b      	ldr	r3, [r7, #4]
  2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24

}
  30:	4618      	mov	r0, r3
  32:	370c      	adds	r7, #12
  34:	46bd      	mov	sp, r7
  36:	f85d 7b04 	ldr.w	r7, [sp], #4
  3a:	4770      	bx	lr

0000003c <stop_timer>:

uint32_t stop_timer(TIM_TypeDef *timer) {
  3c:	b480      	push	{r7}
  3e:	b083      	sub	sp, #12
  40:	af00      	add	r7, sp, #0
  42:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
  44:	687b      	ldr	r3, [r7, #4]
  46:	681b      	ldr	r3, [r3, #0]
  48:	f023 0201 	bic.w	r2, r3, #1
  4c:	687b      	ldr	r3, [r7, #4]
  4e:	601a      	str	r2, [r3, #0]
	return timer->CNT;
  50:	687b      	ldr	r3, [r7, #4]
  52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
  54:	4618      	mov	r0, r3
  56:	370c      	adds	r7, #12
  58:	46bd      	mov	sp, r7
  5a:	f85d 7b04 	ldr.w	r7, [sp], #4
  5e:	4770      	bx	lr

00000060 <timer_delay>:

void timer_delay(TIM_TypeDef *timer, const uint32_t delay_count){
  60:	b480      	push	{r7}
  62:	b085      	sub	sp, #20
  64:	af00      	add	r7, sp, #0
  66:	6078      	str	r0, [r7, #4]
  68:	6039      	str	r1, [r7, #0]

	timer->CR1 &= ~(TIM_CR1_CEN); // Disable the timer
  6a:	687b      	ldr	r3, [r7, #4]
  6c:	681b      	ldr	r3, [r3, #0]
  6e:	f023 0201 	bic.w	r2, r3, #1
  72:	687b      	ldr	r3, [r7, #4]
  74:	601a      	str	r2, [r3, #0]
	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
  76:	687b      	ldr	r3, [r7, #4]
  78:	695b      	ldr	r3, [r3, #20]
  7a:	f043 0201 	orr.w	r2, r3, #1
  7e:	687b      	ldr	r3, [r7, #4]
  80:	615a      	str	r2, [r3, #20]
	timer->CR1 |= TIM_CR1_CEN; // Enable the timer
  82:	687b      	ldr	r3, [r7, #4]
  84:	681b      	ldr	r3, [r3, #0]
  86:	f043 0201 	orr.w	r2, r3, #1
  8a:	687b      	ldr	r3, [r7, #4]
  8c:	601a      	str	r2, [r3, #0]
	uint32_t start = timer->CNT; // Get the start value of the timer
  8e:	687b      	ldr	r3, [r7, #4]
  90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  92:	60fb      	str	r3, [r7, #12]

	/* Note that we don't consider overflow, if the timer is clocked at 1 MHz
	 * a 16 bit counter will take approximately 65 ms to overflow. */

	while((timer->CNT - start) < delay_count){} // Loop until delay_us has expired
  94:	bf00      	nop
  96:	687b      	ldr	r3, [r7, #4]
  98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  9a:	68fb      	ldr	r3, [r7, #12]
  9c:	1ad3      	subs	r3, r2, r3
  9e:	683a      	ldr	r2, [r7, #0]
  a0:	429a      	cmp	r2, r3
  a2:	d8f8      	bhi.n	96 <timer_delay+0x36>
	timer->CR1 &= ~(TIM_CR1_CEN); // Disable the timer
  a4:	687b      	ldr	r3, [r7, #4]
  a6:	681b      	ldr	r3, [r3, #0]
  a8:	f023 0201 	bic.w	r2, r3, #1
  ac:	687b      	ldr	r3, [r7, #4]
  ae:	601a      	str	r2, [r3, #0]

}
  b0:	bf00      	nop
  b2:	3714      	adds	r7, #20
  b4:	46bd      	mov	sp, r7
  b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  ba:	4770      	bx	lr

000000bc <start_pop>:

	printf("POP cycle stopped!\r\n");

}

static void start_pop() {
  bc:	b580      	push	{r7, lr}
  be:	af00      	add	r7, sp, #0

	/* Timer A is the LASER enable, Timer E is the microwave pulse */
	if (HAL_HRTIM_WaveformOutputStart(&hhrtim,
  c0:	f240 1103 	movw	r1, #259	; 0x103
  c4:	4821      	ldr	r0, [pc, #132]	; (14c <start_pop+0x90>)
  c6:	f000 fd4f 	bl	b68 <__HAL_HRTIM_WaveformOutputStart_veneer>
  ca:	4603      	mov	r3, r0
  cc:	2b00      	cmp	r3, #0
  ce:	d004      	beq.n	da <start_pop+0x1e>
	HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1) != HAL_OK) {
		printf("Failed to start POP!\r\n");
  d0:	481f      	ldr	r0, [pc, #124]	; (150 <start_pop+0x94>)
  d2:	f000 fd39 	bl	b48 <__puts_veneer>
		Error_Handler();
  d6:	f000 fd3b 	bl	b50 <__Error_Handler_veneer>
	}

#ifdef POP_START_PULSE

	if (HAL_HRTIM_WaveformSetOutputLevel(&hhrtim,
  da:	2302      	movs	r3, #2
  dc:	2202      	movs	r2, #2
  de:	2100      	movs	r1, #0
  e0:	481a      	ldr	r0, [pc, #104]	; (14c <start_pop+0x90>)
  e2:	f000 fd21 	bl	b28 <__HAL_HRTIM_WaveformSetOutputLevel_veneer>
  e6:	4603      	mov	r3, r0
  e8:	2b00      	cmp	r3, #0
  ea:	d004      	beq.n	f6 <start_pop+0x3a>
	HRTIM_TIMERINDEX_TIMER_A,
	HRTIM_OUTPUT_TA2, HRTIM_OUTPUTLEVEL_INACTIVE) != HAL_OK) {
		printf("POP failure point C!\r\n");
  ec:	4819      	ldr	r0, [pc, #100]	; (154 <start_pop+0x98>)
  ee:	f000 fd2b 	bl	b48 <__puts_veneer>
		Error_Handler();
  f2:	f000 fd2d 	bl	b50 <__Error_Handler_veneer>
	}

	timer_delay(SLOW_TIMER, 1000); //100ms delay
  f6:	4b18      	ldr	r3, [pc, #96]	; (158 <start_pop+0x9c>)
  f8:	681b      	ldr	r3, [r3, #0]
  fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  fe:	4618      	mov	r0, r3
 100:	f7ff ffae 	bl	60 <timer_delay>

	if (HAL_HRTIM_WaveformSetOutputLevel(&hhrtim,
 104:	2301      	movs	r3, #1
 106:	2202      	movs	r2, #2
 108:	2100      	movs	r1, #0
 10a:	4810      	ldr	r0, [pc, #64]	; (14c <start_pop+0x90>)
 10c:	f000 fd0c 	bl	b28 <__HAL_HRTIM_WaveformSetOutputLevel_veneer>
 110:	4603      	mov	r3, r0
 112:	2b00      	cmp	r3, #0
 114:	d004      	beq.n	120 <start_pop+0x64>
	HRTIM_TIMERINDEX_TIMER_A,
	HRTIM_OUTPUT_TA2, HRTIM_OUTPUTLEVEL_ACTIVE) != HAL_OK) {
		printf("POP failure point D!\r\n");
 116:	4811      	ldr	r0, [pc, #68]	; (15c <start_pop+0xa0>)
 118:	f000 fd16 	bl	b48 <__puts_veneer>
		Error_Handler();
 11c:	f000 fd18 	bl	b50 <__Error_Handler_veneer>
	}

#endif

	if (HAL_HRTIM_WaveformCounterStart_IT(&hhrtim,
 120:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 124:	4809      	ldr	r0, [pc, #36]	; (14c <start_pop+0x90>)
 126:	f000 fd07 	bl	b38 <__HAL_HRTIM_WaveformCountStart_IT_veneer>
 12a:	4603      	mov	r3, r0
 12c:	2b00      	cmp	r3, #0
 12e:	d004      	beq.n	13a <start_pop+0x7e>
	HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E) != HAL_OK) {
		printf("POP failure point E!\r\n");
 130:	480b      	ldr	r0, [pc, #44]	; (160 <start_pop+0xa4>)
 132:	f000 fd09 	bl	b48 <__puts_veneer>
		Error_Handler();
 136:	f000 fd0b 	bl	b50 <__Error_Handler_veneer>
	}

	pop_running = true;
 13a:	4b0a      	ldr	r3, [pc, #40]	; (164 <start_pop+0xa8>)
 13c:	2201      	movs	r2, #1
 13e:	701a      	strb	r2, [r3, #0]

	printf("POP cycle running!\r\n");
 140:	4809      	ldr	r0, [pc, #36]	; (168 <start_pop+0xac>)
 142:	f000 fd01 	bl	b48 <__puts_veneer>

}
 146:	bf00      	nop
 148:	bd80      	pop	{r7, pc}
 14a:	bf00      	nop
 14c:	2000044c 	.word	0x2000044c
 150:	0800fb40 	.word	0x0800fb40
 154:	0800fb58 	.word	0x0800fb58
 158:	20000000 	.word	0x20000000
 15c:	0800fb70 	.word	0x0800fb70
 160:	0800fb88 	.word	0x0800fb88
 164:	2000068c 	.word	0x2000068c
 168:	0800fba0 	.word	0x0800fba0

0000016c <stop_pop>:
static void stop_pop() {
 16c:	b580      	push	{r7, lr}
 16e:	af00      	add	r7, sp, #0
	if (HAL_HRTIM_WaveformOutputStop(&hhrtim,
 170:	f240 1103 	movw	r1, #259	; 0x103
 174:	4813      	ldr	r0, [pc, #76]	; (1c4 <stop_pop+0x58>)
 176:	f000 fcdb 	bl	b30 <__HAL_HRTIM_WaveformOutputStop_veneer>
 17a:	4603      	mov	r3, r0
 17c:	2b00      	cmp	r3, #0
 17e:	d004      	beq.n	18a <stop_pop+0x1e>
		printf("POP failure point A!\r\n");
 180:	4811      	ldr	r0, [pc, #68]	; (1c8 <stop_pop+0x5c>)
 182:	f000 fce1 	bl	b48 <__puts_veneer>
		Error_Handler();
 186:	f000 fce3 	bl	b50 <__Error_Handler_veneer>
	if (HAL_HRTIM_WaveformCounterStop_IT(&hhrtim,
 18a:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 18e:	480d      	ldr	r0, [pc, #52]	; (1c4 <stop_pop+0x58>)
 190:	f000 fce2 	bl	b58 <__HAL_HRTIM_WaveformCountStop_IT_veneer>
 194:	4603      	mov	r3, r0
 196:	2b00      	cmp	r3, #0
 198:	d004      	beq.n	1a4 <stop_pop+0x38>
		printf("POP failure point B!\r\n");
 19a:	480c      	ldr	r0, [pc, #48]	; (1cc <stop_pop+0x60>)
 19c:	f000 fcd4 	bl	b48 <__puts_veneer>
		Error_Handler();
 1a0:	f000 fcd6 	bl	b50 <__Error_Handler_veneer>
	pop_cycle_count = 0;
 1a4:	4b0a      	ldr	r3, [pc, #40]	; (1d0 <stop_pop+0x64>)
 1a6:	2200      	movs	r2, #0
 1a8:	601a      	str	r2, [r3, #0]
	pop_running = false;
 1aa:	4b0a      	ldr	r3, [pc, #40]	; (1d4 <stop_pop+0x68>)
 1ac:	2200      	movs	r2, #0
 1ae:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0); //turn off amber LED
 1b0:	2200      	movs	r2, #0
 1b2:	2102      	movs	r1, #2
 1b4:	4808      	ldr	r0, [pc, #32]	; (1d8 <stop_pop+0x6c>)
 1b6:	f000 fcc3 	bl	b40 <__HAL_GPIO_WritePin_veneer>
	printf("POP cycle stopped!\r\n");
 1ba:	4808      	ldr	r0, [pc, #32]	; (1dc <stop_pop+0x70>)
 1bc:	f000 fcc4 	bl	b48 <__puts_veneer>
}
 1c0:	bf00      	nop
 1c2:	bd80      	pop	{r7, pc}
 1c4:	2000044c 	.word	0x2000044c
 1c8:	0800fbb4 	.word	0x0800fbb4
 1cc:	0800fbcc 	.word	0x0800fbcc
 1d0:	20000690 	.word	0x20000690
 1d4:	2000068c 	.word	0x2000068c
 1d8:	58021000 	.word	0x58021000
 1dc:	0800fbe4 	.word	0x0800fbe4

000001e0 <set_aom_atten>:
static void set_aom_atten(const struct AttenuatorSettings a) {
 1e0:	b580      	push	{r7, lr}
 1e2:	b082      	sub	sp, #8
 1e4:	af00      	add	r7, sp, #0
 1e6:	7138      	strb	r0, [r7, #4]
	HAL_GPIO_WritePin(ATT_LE_GPIO_Port, ATT_LE_Pin, GPIO_PIN_SET);
 1e8:	2201      	movs	r2, #1
 1ea:	2180      	movs	r1, #128	; 0x80
 1ec:	4822      	ldr	r0, [pc, #136]	; (278 <_Min_Heap_Size+0x78>)
 1ee:	f000 fca7 	bl	b40 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_025_GPIO_Port, ATT_025_Pin, a.ATT_0DB25);
 1f2:	793b      	ldrb	r3, [r7, #4]
 1f4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 1f8:	b2db      	uxtb	r3, r3
 1fa:	461a      	mov	r2, r3
 1fc:	2140      	movs	r1, #64	; 0x40
 1fe:	481e      	ldr	r0, [pc, #120]	; (278 <_Min_Heap_Size+0x78>)
 200:	f000 fc9e 	bl	b40 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_05_GPIO_Port, ATT_05_Pin, a.ATT_0DB5);
 204:	793b      	ldrb	r3, [r7, #4]
 206:	f3c3 0340 	ubfx	r3, r3, #1, #1
 20a:	b2db      	uxtb	r3, r3
 20c:	461a      	mov	r2, r3
 20e:	2120      	movs	r1, #32
 210:	4819      	ldr	r0, [pc, #100]	; (278 <_Min_Heap_Size+0x78>)
 212:	f000 fc95 	bl	b40 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_1_GPIO_Port, ATT_1_Pin, a.ATT_1DB);
 216:	793b      	ldrb	r3, [r7, #4]
 218:	f3c3 0380 	ubfx	r3, r3, #2, #1
 21c:	b2db      	uxtb	r3, r3
 21e:	461a      	mov	r2, r3
 220:	2110      	movs	r1, #16
 222:	4815      	ldr	r0, [pc, #84]	; (278 <_Min_Heap_Size+0x78>)
 224:	f000 fc8c 	bl	b40 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_2_GPIO_Port, ATT_2_Pin, a.ATT_2DB);
 228:	793b      	ldrb	r3, [r7, #4]
 22a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 22e:	b2db      	uxtb	r3, r3
 230:	461a      	mov	r2, r3
 232:	2108      	movs	r1, #8
 234:	4810      	ldr	r0, [pc, #64]	; (278 <_Min_Heap_Size+0x78>)
 236:	f000 fc83 	bl	b40 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_4_GPIO_Port, ATT_4_Pin, a.ATT_4DB);
 23a:	793b      	ldrb	r3, [r7, #4]
 23c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 240:	b2db      	uxtb	r3, r3
 242:	461a      	mov	r2, r3
 244:	2104      	movs	r1, #4
 246:	480d      	ldr	r0, [pc, #52]	; (27c <_Min_Heap_Size+0x7c>)
 248:	f000 fc7a 	bl	b40 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_8_GPIO_Port, ATT_8_Pin, a.ATT_8DB);
 24c:	793b      	ldrb	r3, [r7, #4]
 24e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 252:	b2db      	uxtb	r3, r3
 254:	461a      	mov	r2, r3
 256:	2110      	movs	r1, #16
 258:	4808      	ldr	r0, [pc, #32]	; (27c <_Min_Heap_Size+0x7c>)
 25a:	f000 fc71 	bl	b40 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_16_GPIO_Port, ATT_16_Pin, a.ATT_16DB);
 25e:	793b      	ldrb	r3, [r7, #4]
 260:	f3c3 1380 	ubfx	r3, r3, #6, #1
 264:	b2db      	uxtb	r3, r3
 266:	461a      	mov	r2, r3
 268:	2120      	movs	r1, #32
 26a:	4804      	ldr	r0, [pc, #16]	; (27c <_Min_Heap_Size+0x7c>)
 26c:	f000 fc68 	bl	b40 <__HAL_GPIO_WritePin_veneer>
}
 270:	bf00      	nop
 272:	3708      	adds	r7, #8
 274:	46bd      	mov	sp, r7
 276:	bd80      	pop	{r7, pc}
 278:	58020c00 	.word	0x58020c00
 27c:	58021000 	.word	0x58021000

00000280 <synth_writereg>:
extern uint32_t start_timer(TIM_TypeDef * timer);
extern uint32_t stop_timer(TIM_TypeDef * timer);
extern void timer_delay(TIM_TypeDef *timer, uint32_t delay_us);
extern void Error_Handler(void);

static uint32_t synth_writereg(const uint32_t data, const uint32_t reg_address, const uint32_t chip_address, const bool verify) {
 280:	b580      	push	{r7, lr}
 282:	b08a      	sub	sp, #40	; 0x28
 284:	af00      	add	r7, sp, #0
 286:	60f8      	str	r0, [r7, #12]
 288:	60b9      	str	r1, [r7, #8]
 28a:	607a      	str	r2, [r7, #4]
 28c:	70fb      	strb	r3, [r7, #3]

	uint32_t read_data = 0;
 28e:	2300      	movs	r3, #0
 290:	627b      	str	r3, [r7, #36]	; 0x24
	const uint32_t write_data = (data << 8) | (reg_address << 3) | chip_address; // This is what we will write, 32 bits in total.
 292:	68fb      	ldr	r3, [r7, #12]
 294:	021a      	lsls	r2, r3, #8
 296:	68bb      	ldr	r3, [r7, #8]
 298:	00db      	lsls	r3, r3, #3
 29a:	4313      	orrs	r3, r2
 29c:	687a      	ldr	r2, [r7, #4]
 29e:	4313      	orrs	r3, r2
 2a0:	61fb      	str	r3, [r7, #28]
#ifdef SPI_DEBUG
	printf("SPI BYTES WRITTEN: 0x%X \r\n", write_data);
#endif
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
 2a2:	2200      	movs	r2, #0
 2a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 2a8:	4830      	ldr	r0, [pc, #192]	; (36c <synth_writereg+0xec>)
 2aa:	f000 fc49 	bl	b40 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 0); // Take SEN low to indicate we are sending data
 2ae:	2200      	movs	r2, #0
 2b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 2b4:	482d      	ldr	r0, [pc, #180]	; (36c <synth_writereg+0xec>)
 2b6:	f000 fc43 	bl	b40 <__HAL_GPIO_WritePin_veneer>

	/* Clock in the data */
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
 2ba:	2300      	movs	r3, #0
 2bc:	623b      	str	r3, [r7, #32]
 2be:	e036      	b.n	32e <synth_writereg+0xae>

		/* Data written on the rising edge */
		uint32_t bit = (SYNTH_SPI_BITS - 1 - i);
 2c0:	2220      	movs	r2, #32
 2c2:	6a3b      	ldr	r3, [r7, #32]
 2c4:	1ad3      	subs	r3, r2, r3
 2c6:	3b01      	subs	r3, #1
 2c8:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(MOSI_GPIO_Port, MOSI_Pin, !!(write_data & (1 << bit)));
 2ca:	2201      	movs	r2, #1
 2cc:	697b      	ldr	r3, [r7, #20]
 2ce:	fa02 f303 	lsl.w	r3, r2, r3
 2d2:	461a      	mov	r2, r3
 2d4:	69fb      	ldr	r3, [r7, #28]
 2d6:	4013      	ands	r3, r2
 2d8:	2b00      	cmp	r3, #0
 2da:	bf14      	ite	ne
 2dc:	2301      	movne	r3, #1
 2de:	2300      	moveq	r3, #0
 2e0:	b2db      	uxtb	r3, r3
 2e2:	461a      	mov	r2, r3
 2e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 2e8:	4820      	ldr	r0, [pc, #128]	; (36c <synth_writereg+0xec>)
 2ea:	f000 fc29 	bl	b40 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 1);
 2ee:	2201      	movs	r2, #1
 2f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 2f4:	481d      	ldr	r0, [pc, #116]	; (36c <synth_writereg+0xec>)
 2f6:	f000 fc23 	bl	b40 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
 2fa:	2200      	movs	r2, #0
 2fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 300:	481a      	ldr	r0, [pc, #104]	; (36c <synth_writereg+0xec>)
 302:	f000 fc1d 	bl	b40 <__HAL_GPIO_WritePin_veneer>

		/* Data read on the falling edge */
		read_data = read_data
				| (HAL_GPIO_ReadPin(MISO_GPIO_Port, MISO_Pin)
 306:	f44f 6180 	mov.w	r1, #1024	; 0x400
 30a:	4818      	ldr	r0, [pc, #96]	; (36c <synth_writereg+0xec>)
 30c:	f000 fc04 	bl	b18 <__HAL_GPIO_ReadPin_veneer>
 310:	4603      	mov	r3, r0
 312:	4619      	mov	r1, r3
						<< (SYNTH_SPI_BITS - 1 - i));
 314:	2220      	movs	r2, #32
 316:	6a3b      	ldr	r3, [r7, #32]
 318:	1ad3      	subs	r3, r2, r3
 31a:	3b01      	subs	r3, #1
 31c:	fa01 f303 	lsl.w	r3, r1, r3
 320:	461a      	mov	r2, r3
		read_data = read_data
 322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 324:	4313      	orrs	r3, r2
 326:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
 328:	6a3b      	ldr	r3, [r7, #32]
 32a:	3301      	adds	r3, #1
 32c:	623b      	str	r3, [r7, #32]
 32e:	2220      	movs	r2, #32
 330:	6a3b      	ldr	r3, [r7, #32]
 332:	4293      	cmp	r3, r2
 334:	d3c4      	bcc.n	2c0 <synth_writereg+0x40>
	}

	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1); // Assert the SEN line to register the transmitted data
 336:	2201      	movs	r2, #1
 338:	f44f 6100 	mov.w	r1, #2048	; 0x800
 33c:	480b      	ldr	r0, [pc, #44]	; (36c <synth_writereg+0xec>)
 33e:	f000 fbff 	bl	b40 <__HAL_GPIO_WritePin_veneer>

	if (verify) {
 342:	78fb      	ldrb	r3, [r7, #3]
 344:	2b00      	cmp	r3, #0
 346:	d00c      	beq.n	362 <synth_writereg+0xe2>
		const uint32_t verify_data = synth_readreg(reg_address); // Data returned on the second cycle
 348:	68b8      	ldr	r0, [r7, #8]
 34a:	f000 f813 	bl	374 <synth_readreg>
 34e:	61b8      	str	r0, [r7, #24]
		if (verify_data != data) {
 350:	69ba      	ldr	r2, [r7, #24]
 352:	68fb      	ldr	r3, [r7, #12]
 354:	429a      	cmp	r2, r3
 356:	d004      	beq.n	362 <synth_writereg+0xe2>
			printf("SPI transmission error!\n");
 358:	4805      	ldr	r0, [pc, #20]	; (370 <synth_writereg+0xf0>)
 35a:	f000 fbf5 	bl	b48 <__puts_veneer>
			Error_Handler(); // We enter an infinite loop here
 35e:	f000 fbf7 	bl	b50 <__Error_Handler_veneer>
		}
	}

	return read_data;
 362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 364:	4618      	mov	r0, r3
 366:	3728      	adds	r7, #40	; 0x28
 368:	46bd      	mov	sp, r7
 36a:	bd80      	pop	{r7, pc}
 36c:	58020800 	.word	0x58020800
 370:	0800fe74 	.word	0x0800fe74

00000374 <synth_readreg>:

static uint32_t synth_readreg(const uint32_t reg_address){
 374:	b580      	push	{r7, lr}
 376:	b084      	sub	sp, #16
 378:	af00      	add	r7, sp, #0
 37a:	6078      	str	r0, [r7, #4]

    synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY); // First cycle to send the read address
 37c:	2300      	movs	r3, #0
 37e:	2200      	movs	r2, #0
 380:	2100      	movs	r1, #0
 382:	6878      	ldr	r0, [r7, #4]
 384:	f7ff ff7c 	bl	280 <synth_writereg>
    const uint32_t read_data = synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY);  // Data returned on the second cycle
 388:	2300      	movs	r3, #0
 38a:	2200      	movs	r2, #0
 38c:	2100      	movs	r1, #0
 38e:	6878      	ldr	r0, [r7, #4]
 390:	f7ff ff76 	bl	280 <synth_writereg>
 394:	60f8      	str	r0, [r7, #12]

    return (read_data >> 8); // We only care about the first 24 bits returned.
 396:	68fb      	ldr	r3, [r7, #12]
 398:	0a1b      	lsrs	r3, r3, #8

}
 39a:	4618      	mov	r0, r3
 39c:	3710      	adds	r7, #16
 39e:	46bd      	mov	sp, r7
 3a0:	bd80      	pop	{r7, pc}

000003a2 <set_MW_power>:

/* Program LO2 output gain */
uint32_t set_MW_power (const uint8_t mw_power) {
 3a2:	b580      	push	{r7, lr}
 3a4:	b084      	sub	sp, #16
 3a6:	af00      	add	r7, sp, #0
 3a8:	4603      	mov	r3, r0
 3aa:	71fb      	strb	r3, [r7, #7]
	if (mw_power > 3) {//check that LO2GAIN is an integer from 0 to 3 inclusive
 3ac:	79fb      	ldrb	r3, [r7, #7]
 3ae:	2b03      	cmp	r3, #3
 3b0:	d904      	bls.n	3bc <set_MW_power+0x1a>
		printf("illegal mw_power - must be an integer from 0 to 3!\n");
 3b2:	4811      	ldr	r0, [pc, #68]	; (3f8 <set_MW_power+0x56>)
 3b4:	f000 fbc8 	bl	b48 <__puts_veneer>
		Error_Handler(); // We enter an infinite loop here
 3b8:	f000 fbca 	bl	b50 <__Error_Handler_veneer>
	}
	uint32_t read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
 3bc:	2016      	movs	r0, #22
 3be:	f7ff ffd9 	bl	374 <synth_readreg>
 3c2:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
 3c4:	68fb      	ldr	r3, [r7, #12]
 3c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 3ca:	60fb      	str	r3, [r7, #12]
	read_data |= (mw_power << 8);	// Set LO2GAIN value.
 3cc:	79fb      	ldrb	r3, [r7, #7]
 3ce:	021b      	lsls	r3, r3, #8
 3d0:	461a      	mov	r2, r3
 3d2:	68fb      	ldr	r3, [r7, #12]
 3d4:	4313      	orrs	r3, r2
 3d6:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
 3d8:	2301      	movs	r3, #1
 3da:	2200      	movs	r2, #0
 3dc:	2116      	movs	r1, #22
 3de:	68f8      	ldr	r0, [r7, #12]
 3e0:	f7ff ff4e 	bl	280 <synth_writereg>
	#ifdef MW_VERBOSE
		printf("PROGRAMMED GAIN DIVIDER REGISTER: 0x%lX \r\n", read_data);
	#endif
	printf("LO2 gain setting: %u \r\n", mw_power);
 3e4:	79fb      	ldrb	r3, [r7, #7]
 3e6:	4619      	mov	r1, r3
 3e8:	4804      	ldr	r0, [pc, #16]	; (3fc <set_MW_power+0x5a>)
 3ea:	f000 fbb9 	bl	b60 <__printf_veneer>
	return SUCCESS;
 3ee:	2300      	movs	r3, #0
}
 3f0:	4618      	mov	r0, r3
 3f2:	3710      	adds	r7, #16
 3f4:	46bd      	mov	sp, r7
 3f6:	bd80      	pop	{r7, pc}
 3f8:	0800fe8c 	.word	0x0800fe8c
 3fc:	0800fec0 	.word	0x0800fec0

00000400 <init_synthesiser>:

uint32_t init_synthesiser(const uint8_t mw_power) {
 400:	b580      	push	{r7, lr}
 402:	b084      	sub	sp, #16
 404:	af00      	add	r7, sp, #0
 406:	4603      	mov	r3, r0
 408:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // Turn off the amber lock LED
 40a:	2200      	movs	r2, #0
 40c:	2102      	movs	r1, #2
 40e:	4854      	ldr	r0, [pc, #336]	; (560 <init_synthesiser+0x160>)
 410:	f000 fb96 	bl	b40 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
 414:	2201      	movs	r2, #1
 416:	2101      	movs	r1, #1
 418:	4852      	ldr	r0, [pc, #328]	; (564 <init_synthesiser+0x164>)
 41a:	f000 fb91 	bl	b40 <__HAL_GPIO_WritePin_veneer>

	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
 41e:	2200      	movs	r2, #0
 420:	f44f 7180 	mov.w	r1, #256	; 0x100
 424:	4850      	ldr	r0, [pc, #320]	; (568 <init_synthesiser+0x168>)
 426:	f000 fb8b 	bl	b40 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1);
 42a:	2201      	movs	r2, #1
 42c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 430:	484d      	ldr	r0, [pc, #308]	; (568 <init_synthesiser+0x168>)
 432:	f000 fb85 	bl	b40 <__HAL_GPIO_WritePin_veneer>

	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 1); // Enable the main regulator.
 436:	2201      	movs	r2, #1
 438:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 43c:	484a      	ldr	r0, [pc, #296]	; (568 <init_synthesiser+0x168>)
 43e:	f000 fb7f 	bl	b40 <__HAL_GPIO_WritePin_veneer>

	HAL_Delay(100); // Wait 100 ms for the supply to stabilise.
 442:	2064      	movs	r0, #100	; 0x64
 444:	f000 fb6c 	bl	b20 <__HAL_Delay_veneer>

	synth_writereg(0x1UL << 5, OPEN_MODE_READ_ADDRESS, 0x0, DONT_VERIFY); // Soft reset.
 448:	2300      	movs	r3, #0
 44a:	2200      	movs	r2, #0
 44c:	2100      	movs	r1, #0
 44e:	2020      	movs	r0, #32
 450:	f7ff ff16 	bl	280 <synth_writereg>
	synth_writereg(0x41BFFF, ANALOG_EN_REGISTER, 0x0, VERIFY); // Set the SDO output level to 3.3 Volts
 454:	2301      	movs	r3, #1
 456:	2200      	movs	r2, #0
 458:	2108      	movs	r1, #8
 45a:	4844      	ldr	r0, [pc, #272]	; (56c <init_synthesiser+0x16c>)
 45c:	f7ff ff10 	bl	280 <synth_writereg>

	uint32_t read_data = synth_readreg(ID_REGISTER); // Read the ID register to check the chip is communicating
 460:	2000      	movs	r0, #0
 462:	f7ff ff87 	bl	374 <synth_readreg>
 466:	60f8      	str	r0, [r7, #12]
	/* Check we have the correct ID */
	if (read_data != SYNTH_ID) {
 468:	4a41      	ldr	r2, [pc, #260]	; (570 <init_synthesiser+0x170>)
 46a:	68fb      	ldr	r3, [r7, #12]
 46c:	4293      	cmp	r3, r2
 46e:	d00a      	beq.n	486 <init_synthesiser+0x86>
		HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0); // Disable the main regulator.
 470:	2200      	movs	r2, #0
 472:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 476:	483c      	ldr	r0, [pc, #240]	; (568 <init_synthesiser+0x168>)
 478:	f000 fb62 	bl	b40 <__HAL_GPIO_WritePin_veneer>
		printf("Incorrect synthesiser ID!\r\n");
 47c:	483d      	ldr	r0, [pc, #244]	; (574 <init_synthesiser+0x174>)
 47e:	f000 fb63 	bl	b48 <__puts_veneer>
		return ERROR;
 482:	2301      	movs	r3, #1
 484:	e062      	b.n	54c <init_synthesiser+0x14c>
	}

	/* Everything looks good, we can communicate with the chip :-) */
	printf("HMC835 Detected.\r\n");
 486:	483c      	ldr	r0, [pc, #240]	; (578 <init_synthesiser+0x178>)
 488:	f000 fb5e 	bl	b48 <__puts_veneer>

	/* Enables Single-Ended output mode for LO2 output */
	read_data = synth_readreg(MODES_REGISTER); // Get the current value of the modes register
 48c:	2017      	movs	r0, #23
 48e:	f7ff ff71 	bl	374 <synth_readreg>
 492:	60f8      	str	r0, [r7, #12]
#ifdef MW_VERBOSE
	printf("READ MODES REGISTER: 0x%lX \r\n", read_data);
#endif
	read_data |= (0x1UL << 9);     // Enable single ended output for LO2 (LO2_P)
 494:	68fb      	ldr	r3, [r7, #12]
 496:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 49a:	60fb      	str	r3, [r7, #12]
	read_data  &= ~(!AUTO_MUTE << 7); //can disable auto_mute - see variable declarations
 49c:	2301      	movs	r3, #1
 49e:	f083 0301 	eor.w	r3, r3, #1
 4a2:	b2db      	uxtb	r3, r3
 4a4:	01db      	lsls	r3, r3, #7
 4a6:	43db      	mvns	r3, r3
 4a8:	461a      	mov	r2, r3
 4aa:	68fb      	ldr	r3, [r7, #12]
 4ac:	4013      	ands	r3, r2
 4ae:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, MODES_REGISTER, 0x0, VERIFY); // Send
 4b0:	2301      	movs	r3, #1
 4b2:	2200      	movs	r2, #0
 4b4:	2117      	movs	r1, #23
 4b6:	68f8      	ldr	r0, [r7, #12]
 4b8:	f7ff fee2 	bl	280 <synth_writereg>
	//read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get the current value.
	//read_data &= 0xFFFFFFF8; // Zero the first 3 LSBs.
	//read_data |= 0x07;
	//synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Update the VCO divide register.

	synth_writereg(1, REFDIV_REGISTER, 0x0, VERIFY); // Reference divider setting.
 4bc:	2301      	movs	r3, #1
 4be:	2200      	movs	r2, #0
 4c0:	2102      	movs	r1, #2
 4c2:	2001      	movs	r0, #1
 4c4:	f7ff fedc 	bl	280 <synth_writereg>
	printf("PROGRAMMED DIVIDER REGISTER: 0x01 \r\n");
#endif

	/* Lock detect training: This must be done after any change to the PD
	 * reference frequency or after power cycle. */
	read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get contents of lock detect register
 4c8:	2007      	movs	r0, #7
 4ca:	f7ff ff53 	bl	374 <synth_readreg>
 4ce:	60f8      	str	r0, [r7, #12]
#ifdef MW_VERBOSE
	printf("READ LOCK_DETECT_REGISTER: 0x%lX \r\n", read_data);
#endif
	read_data |= (0x1UL << 11);      // Enable lock-detect counters.
 4d0:	68fb      	ldr	r3, [r7, #12]
 4d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 4d6:	60fb      	str	r3, [r7, #12]
	read_data |= (0x1UL << 14);      // Enable the lock-detect timer.
 4d8:	68fb      	ldr	r3, [r7, #12]
 4da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 4de:	60fb      	str	r3, [r7, #12]
	read_data |= (0x1UL << 20);      // Train the lock-detect timer.
 4e0:	68fb      	ldr	r3, [r7, #12]
 4e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 4e6:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Send
 4e8:	2301      	movs	r3, #1
 4ea:	2200      	movs	r2, #0
 4ec:	2107      	movs	r1, #7
 4ee:	68f8      	ldr	r0, [r7, #12]
 4f0:	f7ff fec6 	bl	280 <synth_writereg>
#ifdef MW_VERBOSE
	printf("PROGRAMMED LOCK DETECT REGISTER: 0x%lX \r\n", read_data);
#endif
	HAL_Delay(10); // Wait 10 ms for training to complete, not sure if we really need to do this.
 4f4:	200a      	movs	r0, #10
 4f6:	f000 fb13 	bl	b20 <__HAL_Delay_veneer>

	/* Program LO2 output gain */
	if (mw_power > 3) {//check that LO2GAIN is an integer from 0 to 3 inclusive
 4fa:	79fb      	ldrb	r3, [r7, #7]
 4fc:	2b03      	cmp	r3, #3
 4fe:	d904      	bls.n	50a <init_synthesiser+0x10a>
		printf("illegal mw_power - must be an integer from 0 to 3!\n");
 500:	481e      	ldr	r0, [pc, #120]	; (57c <init_synthesiser+0x17c>)
 502:	f000 fb21 	bl	b48 <__puts_veneer>
		Error_Handler(); // We enter an infinite loop here
 506:	f000 fb23 	bl	b50 <__Error_Handler_veneer>
	}
	read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
 50a:	2016      	movs	r0, #22
 50c:	f7ff ff32 	bl	374 <synth_readreg>
 510:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
 512:	68fb      	ldr	r3, [r7, #12]
 514:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 518:	60fb      	str	r3, [r7, #12]
	read_data |= (mw_power << 8);	// Set LO2GAIN value.
 51a:	79fb      	ldrb	r3, [r7, #7]
 51c:	021b      	lsls	r3, r3, #8
 51e:	461a      	mov	r2, r3
 520:	68fb      	ldr	r3, [r7, #12]
 522:	4313      	orrs	r3, r2
 524:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
 526:	2301      	movs	r3, #1
 528:	2200      	movs	r2, #0
 52a:	2116      	movs	r1, #22
 52c:	68f8      	ldr	r0, [r7, #12]
 52e:	f7ff fea7 	bl	280 <synth_writereg>
	printf("PROGRAMMED GAIN DIVIDER REGISTER: 0x%lX \r\n", read_data);
	printf("LO2 gain setting: %u \r\n", mw_power);
#endif

	/* Sets output frequency to the hyperfine value */
	set_frequency_hz(HYPERFINE);
 532:	ed9f 7b09 	vldr	d7, [pc, #36]	; 558 <init_synthesiser+0x158>
 536:	eeb0 0b47 	vmov.f64	d0, d7
 53a:	f000 f8e3 	bl	704 <set_frequency_hz>
	printf("Single frequency output: %f Hz \r\n", HYPERFINE);
 53e:	a306      	add	r3, pc, #24	; (adr r3, 558 <init_synthesiser+0x158>)
 540:	e9d3 2300 	ldrd	r2, r3, [r3]
 544:	480e      	ldr	r0, [pc, #56]	; (580 <init_synthesiser+0x180>)
 546:	f000 fb0b 	bl	b60 <__printf_veneer>
	return SUCCESS;
 54a:	2300      	movs	r3, #0
}
 54c:	4618      	mov	r0, r3
 54e:	3710      	adds	r7, #16
 550:	46bd      	mov	sp, r7
 552:	bd80      	pop	{r7, pc}
 554:	f3af 8000 	nop.w
 558:	6d600000 	.word	0x6d600000
 55c:	41e69e35 	.word	0x41e69e35
 560:	58021000 	.word	0x58021000
 564:	58021800 	.word	0x58021800
 568:	58020800 	.word	0x58020800
 56c:	0041bfff 	.word	0x0041bfff
 570:	00c7701a 	.word	0x00c7701a
 574:	0800fed8 	.word	0x0800fed8
 578:	0800fef4 	.word	0x0800fef4
 57c:	0800fe8c 	.word	0x0800fe8c
 580:	0800ff08 	.word	0x0800ff08

00000584 <poll_until_locked>:

static const bool poll_until_locked(uint32_t timeout) {
 584:	b580      	push	{r7, lr}
 586:	b084      	sub	sp, #16
 588:	af00      	add	r7, sp, #0
 58a:	6078      	str	r0, [r7, #4]

	bool locked = false;
 58c:	2300      	movs	r3, #0
 58e:	73fb      	strb	r3, [r7, #15]

	/* Check for lock */
	uint32_t start = start_timer(FAST_TIMER);
 590:	4b16      	ldr	r3, [pc, #88]	; (5ec <poll_until_locked+0x68>)
 592:	681b      	ldr	r3, [r3, #0]
 594:	4618      	mov	r0, r3
 596:	f7ff fd33 	bl	0 <start_timer>
 59a:	60b8      	str	r0, [r7, #8]

	while ((FAST_TIMER->CNT - start) < timeout) {
 59c:	e014      	b.n	5c8 <poll_until_locked+0x44>
		//printf("Debug lock while condition\r\n");
		locked = synth_readreg(GPOLD_REGISTER) & (1UL << 1);
 59e:	2012      	movs	r0, #18
 5a0:	f7ff fee8 	bl	374 <synth_readreg>
 5a4:	4603      	mov	r3, r0
 5a6:	f003 0302 	and.w	r3, r3, #2
 5aa:	2b00      	cmp	r3, #0
 5ac:	bf14      	ite	ne
 5ae:	2301      	movne	r3, #1
 5b0:	2300      	moveq	r3, #0
 5b2:	73fb      	strb	r3, [r7, #15]
		if (locked) {
 5b4:	7bfb      	ldrb	r3, [r7, #15]
 5b6:	2b00      	cmp	r3, #0
 5b8:	d006      	beq.n	5c8 <poll_until_locked+0x44>
			stop_timer(FAST_TIMER);
 5ba:	4b0c      	ldr	r3, [pc, #48]	; (5ec <poll_until_locked+0x68>)
 5bc:	681b      	ldr	r3, [r3, #0]
 5be:	4618      	mov	r0, r3
 5c0:	f7ff fd3c 	bl	3c <stop_timer>
			return true;
 5c4:	2301      	movs	r3, #1
 5c6:	e00d      	b.n	5e4 <poll_until_locked+0x60>
	while ((FAST_TIMER->CNT - start) < timeout) {
 5c8:	4b08      	ldr	r3, [pc, #32]	; (5ec <poll_until_locked+0x68>)
 5ca:	681b      	ldr	r3, [r3, #0]
 5cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 5ce:	68bb      	ldr	r3, [r7, #8]
 5d0:	1ad3      	subs	r3, r2, r3
 5d2:	687a      	ldr	r2, [r7, #4]
 5d4:	429a      	cmp	r2, r3
 5d6:	d8e2      	bhi.n	59e <poll_until_locked+0x1a>
		}
	}

	stop_timer(FAST_TIMER);
 5d8:	4b04      	ldr	r3, [pc, #16]	; (5ec <poll_until_locked+0x68>)
 5da:	681b      	ldr	r3, [r3, #0]
 5dc:	4618      	mov	r0, r3
 5de:	f7ff fd2d 	bl	3c <stop_timer>
	return false;
 5e2:	2300      	movs	r3, #0
}
 5e4:	4618      	mov	r0, r3
 5e6:	3710      	adds	r7, #16
 5e8:	46bd      	mov	sp, r7
 5ea:	bd80      	pop	{r7, pc}
 5ec:	20000004 	.word	0x20000004

000005f0 <lock_status>:

static const bool lock_status(void) {
 5f0:	b580      	push	{r7, lr}
 5f2:	b082      	sub	sp, #8
 5f4:	af00      	add	r7, sp, #0

	bool locked = synth_readreg(GPOLD_REGISTER) & (1UL << 1);
 5f6:	2012      	movs	r0, #18
 5f8:	f7ff febc 	bl	374 <synth_readreg>
 5fc:	4603      	mov	r3, r0
 5fe:	f003 0302 	and.w	r3, r3, #2
 602:	2b00      	cmp	r3, #0
 604:	bf14      	ite	ne
 606:	2301      	movne	r3, #1
 608:	2300      	moveq	r3, #0
 60a:	71fb      	strb	r3, [r7, #7]
	return locked;
 60c:	79fb      	ldrb	r3, [r7, #7]

}
 60e:	4618      	mov	r0, r3
 610:	3708      	adds	r7, #8
 612:	46bd      	mov	sp, r7
 614:	bd80      	pop	{r7, pc}

00000616 <mute_mw_outputs>:

static void mute_mw_outputs() {
 616:	b580      	push	{r7, lr}
 618:	b082      	sub	sp, #8
 61a:	af00      	add	r7, sp, #0
	uint32_t read_data = 0x0;
 61c:	2300      	movs	r3, #0
 61e:	607b      	str	r3, [r7, #4]

	/* Mute the outputs by setting k value to zero */
	read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
 620:	2016      	movs	r0, #22
 622:	f7ff fea7 	bl	374 <synth_readreg>
 626:	6078      	str	r0, [r7, #4]
	read_data &= 0xFFFFFFC0; // Zero the first 6 LSBs (VCO division value - mute).
 628:	687b      	ldr	r3, [r7, #4]
 62a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 62e:	607b      	str	r3, [r7, #4]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
 630:	2301      	movs	r3, #1
 632:	2200      	movs	r2, #0
 634:	2116      	movs	r1, #22
 636:	6878      	ldr	r0, [r7, #4]
 638:	f7ff fe22 	bl	280 <synth_writereg>
}
 63c:	bf00      	nop
 63e:	3708      	adds	r7, #8
 640:	46bd      	mov	sp, r7
 642:	bd80      	pop	{r7, pc}

00000644 <set_frequency>:

static void set_frequency(const uint32_t integer, const uint32_t fraction, const uint32_t vco_divider, bool mute) {
 644:	b580      	push	{r7, lr}
 646:	b086      	sub	sp, #24
 648:	af00      	add	r7, sp, #0
 64a:	60f8      	str	r0, [r7, #12]
 64c:	60b9      	str	r1, [r7, #8]
 64e:	607a      	str	r2, [r7, #4]
 650:	70fb      	strb	r3, [r7, #3]

	static uint32_t last_integer = -1, last_fraction = -1, last_vcodiv = -1;

	uint32_t read_data = 0x0;
 652:	2300      	movs	r3, #0
 654:	617b      	str	r3, [r7, #20]

	if (mute) {
 656:	78fb      	ldrb	r3, [r7, #3]
 658:	2b00      	cmp	r3, #0
 65a:	d001      	beq.n	660 <set_frequency+0x1c>
		mute_mw_outputs();
 65c:	f7ff ffdb 	bl	616 <mute_mw_outputs>
	}

	if (last_integer == -1 || (last_integer != integer)) {
 660:	4b25      	ldr	r3, [pc, #148]	; (6f8 <set_frequency+0xb4>)
 662:	681b      	ldr	r3, [r3, #0]
 664:	f1b3 3fff 	cmp.w	r3, #4294967295
 668:	d004      	beq.n	674 <set_frequency+0x30>
 66a:	4b23      	ldr	r3, [pc, #140]	; (6f8 <set_frequency+0xb4>)
 66c:	681b      	ldr	r3, [r3, #0]
 66e:	68fa      	ldr	r2, [r7, #12]
 670:	429a      	cmp	r2, r3
 672:	d008      	beq.n	686 <set_frequency+0x42>
		synth_writereg(integer, INTEGER_FREQUENCY_REGISTER, 0x0, VERIFY);   // Integer register.
 674:	2301      	movs	r3, #1
 676:	2200      	movs	r2, #0
 678:	2103      	movs	r1, #3
 67a:	68f8      	ldr	r0, [r7, #12]
 67c:	f7ff fe00 	bl	280 <synth_writereg>
		last_integer = integer;
 680:	4a1d      	ldr	r2, [pc, #116]	; (6f8 <set_frequency+0xb4>)
 682:	68fb      	ldr	r3, [r7, #12]
 684:	6013      	str	r3, [r2, #0]
	}

	if (last_fraction == -1 || (last_fraction != fraction)) {
 686:	4b1d      	ldr	r3, [pc, #116]	; (6fc <set_frequency+0xb8>)
 688:	681b      	ldr	r3, [r3, #0]
 68a:	f1b3 3fff 	cmp.w	r3, #4294967295
 68e:	d004      	beq.n	69a <set_frequency+0x56>
 690:	4b1a      	ldr	r3, [pc, #104]	; (6fc <set_frequency+0xb8>)
 692:	681b      	ldr	r3, [r3, #0]
 694:	68ba      	ldr	r2, [r7, #8]
 696:	429a      	cmp	r2, r3
 698:	d008      	beq.n	6ac <set_frequency+0x68>
		synth_writereg(fraction, FRACTIONAL_FREQUENCY_REGISTER, 0x0, VERIFY);  // Fractional register.
 69a:	2301      	movs	r3, #1
 69c:	2200      	movs	r2, #0
 69e:	2104      	movs	r1, #4
 6a0:	68b8      	ldr	r0, [r7, #8]
 6a2:	f7ff fded 	bl	280 <synth_writereg>
		last_fraction = fraction;
 6a6:	4a15      	ldr	r2, [pc, #84]	; (6fc <set_frequency+0xb8>)
 6a8:	68bb      	ldr	r3, [r7, #8]
 6aa:	6013      	str	r3, [r2, #0]
	}

	if (last_vcodiv == -1 || (last_vcodiv != vco_divider) || mute) {
 6ac:	4b14      	ldr	r3, [pc, #80]	; (700 <set_frequency+0xbc>)
 6ae:	681b      	ldr	r3, [r3, #0]
 6b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 6b4:	d007      	beq.n	6c6 <set_frequency+0x82>
 6b6:	4b12      	ldr	r3, [pc, #72]	; (700 <set_frequency+0xbc>)
 6b8:	681b      	ldr	r3, [r3, #0]
 6ba:	687a      	ldr	r2, [r7, #4]
 6bc:	429a      	cmp	r2, r3
 6be:	d102      	bne.n	6c6 <set_frequency+0x82>
 6c0:	78fb      	ldrb	r3, [r7, #3]
 6c2:	2b00      	cmp	r3, #0
 6c4:	d014      	beq.n	6f0 <set_frequency+0xac>
		read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
 6c6:	2016      	movs	r0, #22
 6c8:	f7ff fe54 	bl	374 <synth_readreg>
 6cc:	6178      	str	r0, [r7, #20]
		read_data &= 0xFFFFFFC0; // Zero the first 6 LSBs (VCO division value - mute).
 6ce:	697b      	ldr	r3, [r7, #20]
 6d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 6d4:	617b      	str	r3, [r7, #20]
		read_data |= vco_divider; // This will set k which will un-mute the outputs */
 6d6:	697a      	ldr	r2, [r7, #20]
 6d8:	687b      	ldr	r3, [r7, #4]
 6da:	4313      	orrs	r3, r2
 6dc:	617b      	str	r3, [r7, #20]
		synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
 6de:	2301      	movs	r3, #1
 6e0:	2200      	movs	r2, #0
 6e2:	2116      	movs	r1, #22
 6e4:	6978      	ldr	r0, [r7, #20]
 6e6:	f7ff fdcb 	bl	280 <synth_writereg>
		last_vcodiv = vco_divider;
 6ea:	4a05      	ldr	r2, [pc, #20]	; (700 <set_frequency+0xbc>)
 6ec:	687b      	ldr	r3, [r7, #4]
 6ee:	6013      	str	r3, [r2, #0]
	}

}
 6f0:	bf00      	nop
 6f2:	3718      	adds	r7, #24
 6f4:	46bd      	mov	sp, r7
 6f6:	bd80      	pop	{r7, pc}
 6f8:	2000000c 	.word	0x2000000c
 6fc:	20000010 	.word	0x20000010
 700:	20000014 	.word	0x20000014

00000704 <set_frequency_hz>:

void set_frequency_hz(const double fo) {
 704:	b580      	push	{r7, lr}
 706:	b088      	sub	sp, #32
 708:	af00      	add	r7, sp, #0
 70a:	ed87 0b00 	vstr	d0, [r7]

	/* For the k divider we need to find the smallest even integer or use a max of 62*/
	uint32_t k = VCO_MAX_FREQ / fo;
 70e:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 800 <set_frequency_hz+0xfc>
 712:	ed97 6b00 	vldr	d6, [r7]
 716:	ee85 7b06 	vdiv.f64	d7, d5, d6
 71a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 71e:	ee17 3a90 	vmov	r3, s15
 722:	61fb      	str	r3, [r7, #28]

	if (k != 1) {
 724:	69fb      	ldr	r3, [r7, #28]
 726:	2b01      	cmp	r3, #1
 728:	d00b      	beq.n	742 <set_frequency_hz+0x3e>
		while (k > 62 || k % 2) {
 72a:	e002      	b.n	732 <set_frequency_hz+0x2e>
			k = k - 1;
 72c:	69fb      	ldr	r3, [r7, #28]
 72e:	3b01      	subs	r3, #1
 730:	61fb      	str	r3, [r7, #28]
		while (k > 62 || k % 2) {
 732:	69fb      	ldr	r3, [r7, #28]
 734:	2b3e      	cmp	r3, #62	; 0x3e
 736:	d8f9      	bhi.n	72c <set_frequency_hz+0x28>
 738:	69fb      	ldr	r3, [r7, #28]
 73a:	f003 0301 	and.w	r3, r3, #1
 73e:	2b00      	cmp	r3, #0
 740:	d1f4      	bne.n	72c <set_frequency_hz+0x28>
		}
	}

	/* Calculate the N division ratio */
	const double N = ((fo * k) / REF_FREQ);
 742:	69fb      	ldr	r3, [r7, #28]
 744:	ee07 3a90 	vmov	s15, r3
 748:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 74c:	ed97 7b00 	vldr	d7, [r7]
 750:	ee26 6b07 	vmul.f64	d6, d6, d7
 754:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 808 <set_frequency_hz+0x104>
 758:	ee86 7b05 	vdiv.f64	d7, d6, d5
 75c:	ed87 7b04 	vstr	d7, [r7, #16]

	/* Extract the fractional and integer parts */
	const uint32_t NINT = N;
 760:	ed97 7b04 	vldr	d7, [r7, #16]
 764:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 768:	ee17 3a90 	vmov	r3, s15
 76c:	60fb      	str	r3, [r7, #12]
	const uint32_t NFRAC = ((N - NINT) * (1 << 24)) + 0.5;
 76e:	68fb      	ldr	r3, [r7, #12]
 770:	ee07 3a90 	vmov	s15, r3
 774:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 778:	ed97 6b04 	vldr	d6, [r7, #16]
 77c:	ee36 7b47 	vsub.f64	d7, d6, d7
 780:	ed9f 6b23 	vldr	d6, [pc, #140]	; 810 <set_frequency_hz+0x10c>
 784:	ee27 7b06 	vmul.f64	d7, d7, d6
 788:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 78c:	ee37 7b06 	vadd.f64	d7, d7, d6
 790:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 794:	ee17 3a90 	vmov	r3, s15
 798:	60bb      	str	r3, [r7, #8]
		printf("Failed to establish synthesiser frequency accurately\r\n");
		Error_Handler();
	}
#endif

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
 79a:	2201      	movs	r2, #1
 79c:	2102      	movs	r1, #2
 79e:	481e      	ldr	r0, [pc, #120]	; (818 <set_frequency_hz+0x114>)
 7a0:	f000 f9ce 	bl	b40 <__HAL_GPIO_WritePin_veneer>
	set_frequency(NINT, NFRAC, k, MANUAL_MUTE); //Sets only the necessary Hittite registers
 7a4:	2301      	movs	r3, #1
 7a6:	69fa      	ldr	r2, [r7, #28]
 7a8:	68b9      	ldr	r1, [r7, #8]
 7aa:	68f8      	ldr	r0, [r7, #12]
 7ac:	f7ff ff4a 	bl	644 <set_frequency>

	//MW stabilisation delay and check for lock
	timer_delay(FAST_TIMER, MW_STABILISE_TIME_US);
 7b0:	4b1a      	ldr	r3, [pc, #104]	; (81c <set_frequency_hz+0x118>)
 7b2:	681b      	ldr	r3, [r3, #0]
 7b4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 7b8:	4611      	mov	r1, r2
 7ba:	4618      	mov	r0, r3
 7bc:	f7ff fc50 	bl	60 <timer_delay>
	//if (!poll_until_locked(LOCK_WAIT_US)) {
	if (!lock_status()) {
 7c0:	f7ff ff16 	bl	5f0 <lock_status>
 7c4:	4603      	mov	r3, r0
 7c6:	f083 0301 	eor.w	r3, r3, #1
 7ca:	b2db      	uxtb	r3, r3
 7cc:	2b00      	cmp	r3, #0
 7ce:	d011      	beq.n	7f4 <set_frequency_hz+0xf0>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); //turn off amber LED
 7d0:	2200      	movs	r2, #0
 7d2:	2102      	movs	r1, #2
 7d4:	4812      	ldr	r0, [pc, #72]	; (820 <set_frequency_hz+0x11c>)
 7d6:	f000 f9b3 	bl	b40 <__HAL_GPIO_WritePin_veneer>
		printf("Failed to establish MW Lock within %ld us of setting frequency!\r\n", MW_STABILISE_TIME_US);
 7da:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 7de:	4619      	mov	r1, r3
 7e0:	4810      	ldr	r0, [pc, #64]	; (824 <set_frequency_hz+0x120>)
 7e2:	f000 f9bd 	bl	b60 <__printf_veneer>
#ifdef HALT_ON_LOSS_OF_LOCK
		Error_Handler();
 7e6:	f000 f9b3 	bl	b50 <__Error_Handler_veneer>
#endif //HALT_ON_LOSS_OF_LOCK
		HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Sets MW_invalid pin low
 7ea:	2200      	movs	r2, #0
 7ec:	2102      	movs	r1, #2
 7ee:	480a      	ldr	r0, [pc, #40]	; (818 <set_frequency_hz+0x114>)
 7f0:	f000 f9a6 	bl	b40 <__HAL_GPIO_WritePin_veneer>
	}

}
 7f4:	bf00      	nop
 7f6:	3720      	adds	r7, #32
 7f8:	46bd      	mov	sp, r7
 7fa:	bd80      	pop	{r7, pc}
 7fc:	f3af 8000 	nop.w
 800:	20000000 	.word	0x20000000
 804:	41ee8c21 	.word	0x41ee8c21
 808:	00000000 	.word	0x00000000
 80c:	4187d784 	.word	0x4187d784
 810:	00000000 	.word	0x00000000
 814:	41700000 	.word	0x41700000
 818:	58020400 	.word	0x58020400
 81c:	20000004 	.word	0x20000004
 820:	58021000 	.word	0x58021000
 824:	0800ff2c 	.word	0x0800ff2c

00000828 <run_sweep>:

void run_sweep() {
 828:	b580      	push	{r7, lr}
 82a:	b084      	sub	sp, #16
 82c:	af00      	add	r7, sp, #0

	/* Output used for triggering external scope */
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
 82e:	2200      	movs	r2, #0
 830:	2101      	movs	r1, #1
 832:	482f      	ldr	r0, [pc, #188]	; (8f0 <run_sweep+0xc8>)
 834:	f000 f984 	bl	b40 <__HAL_GPIO_WritePin_veneer>
#ifdef MW_VERBOSE
	printf("Setting trigger output low \r\n");
#endif

	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // Assume we are locked, the LED will be disabled if lock fails.
 838:	2201      	movs	r2, #1
 83a:	2102      	movs	r1, #2
 83c:	482d      	ldr	r0, [pc, #180]	; (8f4 <run_sweep+0xcc>)
 83e:	f000 f97f 	bl	b40 <__HAL_GPIO_WritePin_veneer>
	double dac_val = 0;
#endif

	//__disable_irq(); //Simon's code had IRQs disabled

	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
 842:	2200      	movs	r2, #0
 844:	2101      	movs	r1, #1
 846:	482a      	ldr	r0, [pc, #168]	; (8f0 <run_sweep+0xc8>)
 848:	f000 f97a 	bl	b40 <__HAL_GPIO_WritePin_veneer>

	for (uint32_t i = 0; i < num_points; i++) {
 84c:	2300      	movs	r3, #0
 84e:	60fb      	str	r3, [r7, #12]
 850:	e034      	b.n	8bc <run_sweep+0x94>

		double fo = start_freq + (i * sweep_settings.step_size);
 852:	68fb      	ldr	r3, [r7, #12]
 854:	ee07 3a90 	vmov	s15, r3
 858:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 85c:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8e8 <run_sweep+0xc0>
 860:	ee27 6b06 	vmul.f64	d6, d7, d6
 864:	4b24      	ldr	r3, [pc, #144]	; (8f8 <run_sweep+0xd0>)
 866:	ed93 7b00 	vldr	d7, [r3]
 86a:	ee36 7b07 	vadd.f64	d7, d6, d7
 86e:	ed87 7b00 	vstr	d7, [r7]
		set_frequency_hz(fo);
 872:	ed97 0b00 	vldr	d0, [r7]
 876:	f7ff ff45 	bl	704 <set_frequency_hz>
			printf("Failure to program value to DAC \r\n");
			Error_Handler();
		}
#endif

		timer_delay(FAST_TIMER, DWELL_TIME_US);
 87a:	4b20      	ldr	r3, [pc, #128]	; (8fc <run_sweep+0xd4>)
 87c:	681b      	ldr	r3, [r3, #0]
 87e:	f641 3258 	movw	r2, #7000	; 0x1b58
 882:	4611      	mov	r1, r2
 884:	4618      	mov	r0, r3
 886:	f7ff fbeb 	bl	60 <timer_delay>
		////////
		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 88a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 88e:	481c      	ldr	r0, [pc, #112]	; (900 <run_sweep+0xd8>)
 890:	f000 f942 	bl	b18 <__HAL_GPIO_ReadPin_veneer>
 894:	4603      	mov	r3, r0
 896:	2b00      	cmp	r3, #0
 898:	bf14      	ite	ne
 89a:	2301      	movne	r3, #1
 89c:	2300      	moveq	r3, #0
 89e:	b2da      	uxtb	r2, r3
 8a0:	4b18      	ldr	r3, [pc, #96]	; (904 <run_sweep+0xdc>)
 8a2:	701a      	strb	r2, [r3, #0]
		if (blue_button_status) {// If blue button is pressed
 8a4:	4b17      	ldr	r3, [pc, #92]	; (904 <run_sweep+0xdc>)
 8a6:	781b      	ldrb	r3, [r3, #0]
 8a8:	b2db      	uxtb	r3, r3
 8aa:	2b00      	cmp	r3, #0
 8ac:	d003      	beq.n	8b6 <run_sweep+0x8e>
			printf("Terminating sweep early as blue button pressed \r\n");
 8ae:	4816      	ldr	r0, [pc, #88]	; (908 <run_sweep+0xe0>)
 8b0:	f000 f94a 	bl	b48 <__puts_veneer>
			break;
 8b4:	e007      	b.n	8c6 <run_sweep+0x9e>
	for (uint32_t i = 0; i < num_points; i++) {
 8b6:	68fb      	ldr	r3, [r7, #12]
 8b8:	3301      	adds	r3, #1
 8ba:	60fb      	str	r3, [r7, #12]
 8bc:	4b13      	ldr	r3, [pc, #76]	; (90c <run_sweep+0xe4>)
 8be:	681b      	ldr	r3, [r3, #0]
 8c0:	68fa      	ldr	r2, [r7, #12]
 8c2:	429a      	cmp	r2, r3
 8c4:	d3c5      	bcc.n	852 <run_sweep+0x2a>
		}
	}

	//__enable_irq(); //Simon's code had IRQs disabled

	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
 8c6:	2201      	movs	r2, #1
 8c8:	2101      	movs	r1, #1
 8ca:	4809      	ldr	r0, [pc, #36]	; (8f0 <run_sweep+0xc8>)
 8cc:	f000 f938 	bl	b40 <__HAL_GPIO_WritePin_veneer>
	printf("Sweep complete: %lu points\r\n", num_points);
 8d0:	4b0e      	ldr	r3, [pc, #56]	; (90c <run_sweep+0xe4>)
 8d2:	681b      	ldr	r3, [r3, #0]
 8d4:	4619      	mov	r1, r3
 8d6:	480e      	ldr	r0, [pc, #56]	; (910 <run_sweep+0xe8>)
 8d8:	f000 f942 	bl	b60 <__printf_veneer>
	/* Zero and stop the DAC */
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
	//HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
#endif

}
 8dc:	bf00      	nop
 8de:	3710      	adds	r7, #16
 8e0:	46bd      	mov	sp, r7
 8e2:	bd80      	pop	{r7, pc}
 8e4:	f3af 8000 	nop.w
 8e8:	00000000 	.word	0x00000000
 8ec:	4007d784 	.word	0x4007d784
 8f0:	58021800 	.word	0x58021800
 8f4:	58021000 	.word	0x58021000
 8f8:	08010048 	.word	0x08010048
 8fc:	20000004 	.word	0x20000004
 900:	58020800 	.word	0x58020800
 904:	20000694 	.word	0x20000694
 908:	0800ff70 	.word	0x0800ff70
 90c:	08010050 	.word	0x08010050
 910:	0800ffa4 	.word	0x0800ffa4

00000914 <MW_frequency_toggle>:

/* Function to check MW settling time
 * Toggles between two MW frequencies
 */
void MW_frequency_toggle (const double f_one, const double f_two) {
 914:	b580      	push	{r7, lr}
 916:	b090      	sub	sp, #64	; 0x40
 918:	af02      	add	r7, sp, #8
 91a:	ed87 0b02 	vstr	d0, [r7, #8]
 91e:	ed87 1b00 	vstr	d1, [r7]
	printf("MW frequency toggling experiment\r\n");
 922:	4865      	ldr	r0, [pc, #404]	; (ab8 <MW_frequency_toggle+0x1a4>)
 924:	f000 f910 	bl	b48 <__puts_veneer>
	printf("Toggling between %f and %f Hz\r\n", f_one, f_two);
 928:	e9d7 2300 	ldrd	r2, r3, [r7]
 92c:	e9cd 2300 	strd	r2, r3, [sp]
 930:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 934:	4861      	ldr	r0, [pc, #388]	; (abc <MW_frequency_toggle+0x1a8>)
 936:	f000 f913 	bl	b60 <__printf_veneer>

	/* For the k divider we need to find the smallest even integer or use a max of 62*/
	uint32_t k_one = VCO_MAX_FREQ / f_one;
 93a:	ed9f 5b59 	vldr	d5, [pc, #356]	; aa0 <MW_frequency_toggle+0x18c>
 93e:	ed97 6b02 	vldr	d6, [r7, #8]
 942:	ee85 7b06 	vdiv.f64	d7, d5, d6
 946:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 94a:	ee17 3a90 	vmov	r3, s15
 94e:	637b      	str	r3, [r7, #52]	; 0x34
	if (k_one != 1) {
 950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 952:	2b01      	cmp	r3, #1
 954:	d00b      	beq.n	96e <MW_frequency_toggle+0x5a>
		while (k_one > 62 || k_one % 2) {
 956:	e002      	b.n	95e <MW_frequency_toggle+0x4a>
			k_one--;
 958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 95a:	3b01      	subs	r3, #1
 95c:	637b      	str	r3, [r7, #52]	; 0x34
		while (k_one > 62 || k_one % 2) {
 95e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 960:	2b3e      	cmp	r3, #62	; 0x3e
 962:	d8f9      	bhi.n	958 <MW_frequency_toggle+0x44>
 964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 966:	f003 0301 	and.w	r3, r3, #1
 96a:	2b00      	cmp	r3, #0
 96c:	d1f4      	bne.n	958 <MW_frequency_toggle+0x44>
		}
	}
	uint32_t k_two = VCO_MAX_FREQ / f_two;
 96e:	ed9f 5b4c 	vldr	d5, [pc, #304]	; aa0 <MW_frequency_toggle+0x18c>
 972:	ed97 6b00 	vldr	d6, [r7]
 976:	ee85 7b06 	vdiv.f64	d7, d5, d6
 97a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 97e:	ee17 3a90 	vmov	r3, s15
 982:	633b      	str	r3, [r7, #48]	; 0x30
	if (k_two != 1) {
 984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 986:	2b01      	cmp	r3, #1
 988:	d00b      	beq.n	9a2 <MW_frequency_toggle+0x8e>
		while (k_two > 62 || k_two % 2) {
 98a:	e002      	b.n	992 <MW_frequency_toggle+0x7e>
			k_two--;
 98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 98e:	3b01      	subs	r3, #1
 990:	633b      	str	r3, [r7, #48]	; 0x30
		while (k_two > 62 || k_two % 2) {
 992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 994:	2b3e      	cmp	r3, #62	; 0x3e
 996:	d8f9      	bhi.n	98c <MW_frequency_toggle+0x78>
 998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 99a:	f003 0301 	and.w	r3, r3, #1
 99e:	2b00      	cmp	r3, #0
 9a0:	d1f4      	bne.n	98c <MW_frequency_toggle+0x78>
		}
	}

	const double N_one = ((f_one * k_one) / REF_FREQ);
 9a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 9a4:	ee07 3a90 	vmov	s15, r3
 9a8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 9ac:	ed97 7b02 	vldr	d7, [r7, #8]
 9b0:	ee26 6b07 	vmul.f64	d6, d6, d7
 9b4:	ed9f 5b3c 	vldr	d5, [pc, #240]	; aa8 <MW_frequency_toggle+0x194>
 9b8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 9bc:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	const double N_two = ((f_two * k_two) / REF_FREQ);
 9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 9c2:	ee07 3a90 	vmov	s15, r3
 9c6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 9ca:	ed97 7b00 	vldr	d7, [r7]
 9ce:	ee26 6b07 	vmul.f64	d6, d6, d7
 9d2:	ed9f 5b35 	vldr	d5, [pc, #212]	; aa8 <MW_frequency_toggle+0x194>
 9d6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 9da:	ed87 7b08 	vstr	d7, [r7, #32]

	/* Extract the fractional and integer parts */
	const uint32_t N_one_INT = N_one;
 9de:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 9e2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 9e6:	ee17 3a90 	vmov	r3, s15
 9ea:	61fb      	str	r3, [r7, #28]
	const uint32_t N_one_FRAC = ((N_one - N_one_INT) * (1 << 24)) + 0.5;
 9ec:	69fb      	ldr	r3, [r7, #28]
 9ee:	ee07 3a90 	vmov	s15, r3
 9f2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 9f6:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 9fa:	ee36 7b47 	vsub.f64	d7, d6, d7
 9fe:	ed9f 6b2c 	vldr	d6, [pc, #176]	; ab0 <MW_frequency_toggle+0x19c>
 a02:	ee27 7b06 	vmul.f64	d7, d7, d6
 a06:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 a0a:	ee37 7b06 	vadd.f64	d7, d7, d6
 a0e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 a12:	ee17 3a90 	vmov	r3, s15
 a16:	61bb      	str	r3, [r7, #24]
	const uint32_t N_two_INT = N_two;
 a18:	ed97 7b08 	vldr	d7, [r7, #32]
 a1c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 a20:	ee17 3a90 	vmov	r3, s15
 a24:	617b      	str	r3, [r7, #20]
	const uint32_t N_two_FRAC = ((N_two - N_two_INT) * (1 << 24)) + 0.5;
 a26:	697b      	ldr	r3, [r7, #20]
 a28:	ee07 3a90 	vmov	s15, r3
 a2c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 a30:	ed97 6b08 	vldr	d6, [r7, #32]
 a34:	ee36 7b47 	vsub.f64	d7, d6, d7
 a38:	ed9f 6b1d 	vldr	d6, [pc, #116]	; ab0 <MW_frequency_toggle+0x19c>
 a3c:	ee27 7b06 	vmul.f64	d7, d7, d6
 a40:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 a44:	ee37 7b06 	vadd.f64	d7, d7, d6
 a48:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 a4c:	ee17 3a90 	vmov	r3, s15
 a50:	613b      	str	r3, [r7, #16]

	while (1) {
	set_frequency(N_one_INT, N_one_FRAC, k_one, MANUAL_MUTE); //Program necessary values for f_one
 a52:	2301      	movs	r3, #1
 a54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 a56:	69b9      	ldr	r1, [r7, #24]
 a58:	69f8      	ldr	r0, [r7, #28]
 a5a:	f7ff fdf3 	bl	644 <set_frequency>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
 a5e:	2200      	movs	r2, #0
 a60:	2101      	movs	r1, #1
 a62:	4817      	ldr	r0, [pc, #92]	; (ac0 <MW_frequency_toggle+0x1ac>)
 a64:	f000 f86c 	bl	b40 <__HAL_GPIO_WritePin_veneer>
	timer_delay(SLOW_TIMER, 1000); //100ms delay
 a68:	4b16      	ldr	r3, [pc, #88]	; (ac4 <MW_frequency_toggle+0x1b0>)
 a6a:	681b      	ldr	r3, [r3, #0]
 a6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 a70:	4618      	mov	r0, r3
 a72:	f7ff faf5 	bl	60 <timer_delay>
	set_frequency(N_two_INT, N_two_FRAC, k_two, MANUAL_MUTE); //Program necessary values for f_two
 a76:	2301      	movs	r3, #1
 a78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 a7a:	6939      	ldr	r1, [r7, #16]
 a7c:	6978      	ldr	r0, [r7, #20]
 a7e:	f7ff fde1 	bl	644 <set_frequency>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
 a82:	2201      	movs	r2, #1
 a84:	2101      	movs	r1, #1
 a86:	480e      	ldr	r0, [pc, #56]	; (ac0 <MW_frequency_toggle+0x1ac>)
 a88:	f000 f85a 	bl	b40 <__HAL_GPIO_WritePin_veneer>
	timer_delay(SLOW_TIMER, 1000); //100ms delay
 a8c:	4b0d      	ldr	r3, [pc, #52]	; (ac4 <MW_frequency_toggle+0x1b0>)
 a8e:	681b      	ldr	r3, [r3, #0]
 a90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 a94:	4618      	mov	r0, r3
 a96:	f7ff fae3 	bl	60 <timer_delay>
	set_frequency(N_one_INT, N_one_FRAC, k_one, MANUAL_MUTE); //Program necessary values for f_one
 a9a:	e7da      	b.n	a52 <MW_frequency_toggle+0x13e>
 a9c:	f3af 8000 	nop.w
 aa0:	20000000 	.word	0x20000000
 aa4:	41ee8c21 	.word	0x41ee8c21
 aa8:	00000000 	.word	0x00000000
 aac:	4187d784 	.word	0x4187d784
 ab0:	00000000 	.word	0x00000000
 ab4:	41700000 	.word	0x41700000
 ab8:	0800ffc4 	.word	0x0800ffc4
 abc:	0800ffe8 	.word	0x0800ffe8
 ac0:	58021800 	.word	0x58021800
 ac4:	20000000 	.word	0x20000000

00000ac8 <set_SDO_output>:
/* Selects SDO pin connectivity/functionality
 * By default, the SDO pin will output 'Lock detect' but can be connected
 * to other internal signals. See table 2.15 of HMC835 datasheet (v04.1113)
 * for more details all options
 */
 void set_SDO_output(const uint32_t GPO_setting) {
 ac8:	b580      	push	{r7, lr}
 aca:	b084      	sub	sp, #16
 acc:	af00      	add	r7, sp, #0
 ace:	6078      	str	r0, [r7, #4]
	//Default output on SDO pin is 'Lock detect output', value 0x01
	//VCO divider is 0x0A
	//See table 2.15 of HMC835 datasheet for more details (v04.1113)
	uint32_t read_data = 0x0;
 ad0:	2300      	movs	r3, #0
 ad2:	60fb      	str	r3, [r7, #12]

	if (GPO_setting > 31) {
 ad4:	687b      	ldr	r3, [r7, #4]
 ad6:	2b1f      	cmp	r3, #31
 ad8:	d904      	bls.n	ae4 <set_SDO_output+0x1c>
		printf("SDO pin value must be less that 32\r\n");
 ada:	480d      	ldr	r0, [pc, #52]	; (b10 <set_SDO_output+0x48>)
 adc:	f000 f834 	bl	b48 <__puts_veneer>
		Error_Handler();
 ae0:	f000 f836 	bl	b50 <__Error_Handler_veneer>
	}
	read_data = synth_readreg(GPO_REGISTER); // Get the current value.
 ae4:	200f      	movs	r0, #15
 ae6:	f7ff fc45 	bl	374 <synth_readreg>
 aea:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFFE0; // Zero the first 5 LSBs.
 aec:	68fb      	ldr	r3, [r7, #12]
 aee:	f023 031f 	bic.w	r3, r3, #31
 af2:	60fb      	str	r3, [r7, #12]
	//read_data |= 0x0A; //Select VCO divider output
	read_data |= GPO_setting; //Select GPO output dependent on function input value
 af4:	68fa      	ldr	r2, [r7, #12]
 af6:	687b      	ldr	r3, [r7, #4]
 af8:	4313      	orrs	r3, r2
 afa:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GPO_REGISTER, 0x0, VERIFY); // Update the GPO register.
 afc:	2301      	movs	r3, #1
 afe:	2200      	movs	r2, #0
 b00:	210f      	movs	r1, #15
 b02:	68f8      	ldr	r0, [r7, #12]
 b04:	f7ff fbbc 	bl	280 <synth_writereg>
}
 b08:	bf00      	nop
 b0a:	3710      	adds	r7, #16
 b0c:	46bd      	mov	sp, r7
 b0e:	bd80      	pop	{r7, pc}
 b10:	08010008 	.word	0x08010008
 b14:	00000000 	.word	0x00000000

00000b18 <__HAL_GPIO_ReadPin_veneer>:
 b18:	f85f f000 	ldr.w	pc, [pc]	; b1c <__HAL_GPIO_ReadPin_veneer+0x4>
 b1c:	08005b11 	.word	0x08005b11

00000b20 <__HAL_Delay_veneer>:
 b20:	f85f f000 	ldr.w	pc, [pc]	; b24 <__HAL_Delay_veneer+0x4>
 b24:	08002e19 	.word	0x08002e19

00000b28 <__HAL_HRTIM_WaveformSetOutputLevel_veneer>:
 b28:	f85f f000 	ldr.w	pc, [pc]	; b2c <__HAL_HRTIM_WaveformSetOutputLevel_veneer+0x4>
 b2c:	08006205 	.word	0x08006205

00000b30 <__HAL_HRTIM_WaveformOutputStop_veneer>:
 b30:	f85f f000 	ldr.w	pc, [pc]	; b34 <__HAL_HRTIM_WaveformOutputStop_veneer+0x4>
 b34:	0800644b 	.word	0x0800644b

00000b38 <__HAL_HRTIM_WaveformCountStart_IT_veneer>:
 b38:	f85f f000 	ldr.w	pc, [pc]	; b3c <__HAL_HRTIM_WaveformCountStart_IT_veneer+0x4>
 b3c:	080064a5 	.word	0x080064a5

00000b40 <__HAL_GPIO_WritePin_veneer>:
 b40:	f85f f000 	ldr.w	pc, [pc]	; b44 <__HAL_GPIO_WritePin_veneer+0x4>
 b44:	08005b41 	.word	0x08005b41

00000b48 <__puts_veneer>:
 b48:	f85f f000 	ldr.w	pc, [pc]	; b4c <__puts_veneer+0x4>
 b4c:	0800da99 	.word	0x0800da99

00000b50 <__Error_Handler_veneer>:
 b50:	f85f f000 	ldr.w	pc, [pc]	; b54 <__Error_Handler_veneer+0x4>
 b54:	08002289 	.word	0x08002289

00000b58 <__HAL_HRTIM_WaveformCountStop_IT_veneer>:
 b58:	f85f f000 	ldr.w	pc, [pc]	; b5c <__HAL_HRTIM_WaveformCountStop_IT_veneer+0x4>
 b5c:	08006585 	.word	0x08006585

00000b60 <__printf_veneer>:
 b60:	f85f f000 	ldr.w	pc, [pc]	; b64 <__printf_veneer+0x4>
 b64:	0800d98d 	.word	0x0800d98d

00000b68 <__HAL_HRTIM_WaveformOutputStart_veneer>:
 b68:	f85f f000 	ldr.w	pc, [pc]	; b6c <__HAL_HRTIM_WaveformOutputStart_veneer+0x4>
 b6c:	080063f1 	.word	0x080063f1

Disassembly of section .text:

08000e10 <__do_global_dtors_aux>:
 8000e10:	b510      	push	{r4, lr}
 8000e12:	4c05      	ldr	r4, [pc, #20]	; (8000e28 <__do_global_dtors_aux+0x18>)
 8000e14:	7823      	ldrb	r3, [r4, #0]
 8000e16:	b933      	cbnz	r3, 8000e26 <__do_global_dtors_aux+0x16>
 8000e18:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <__do_global_dtors_aux+0x1c>)
 8000e1a:	b113      	cbz	r3, 8000e22 <__do_global_dtors_aux+0x12>
 8000e1c:	4804      	ldr	r0, [pc, #16]	; (8000e30 <__do_global_dtors_aux+0x20>)
 8000e1e:	f3af 8000 	nop.w
 8000e22:	2301      	movs	r3, #1
 8000e24:	7023      	strb	r3, [r4, #0]
 8000e26:	bd10      	pop	{r4, pc}
 8000e28:	200002d0 	.word	0x200002d0
 8000e2c:	00000000 	.word	0x00000000
 8000e30:	0800fae0 	.word	0x0800fae0

08000e34 <frame_dummy>:
 8000e34:	b508      	push	{r3, lr}
 8000e36:	4b03      	ldr	r3, [pc, #12]	; (8000e44 <frame_dummy+0x10>)
 8000e38:	b11b      	cbz	r3, 8000e42 <frame_dummy+0xe>
 8000e3a:	4903      	ldr	r1, [pc, #12]	; (8000e48 <frame_dummy+0x14>)
 8000e3c:	4803      	ldr	r0, [pc, #12]	; (8000e4c <frame_dummy+0x18>)
 8000e3e:	f3af 8000 	nop.w
 8000e42:	bd08      	pop	{r3, pc}
 8000e44:	00000000 	.word	0x00000000
 8000e48:	200002d4 	.word	0x200002d4
 8000e4c:	0800fae0 	.word	0x0800fae0

08000e50 <strlen>:
 8000e50:	4603      	mov	r3, r0
 8000e52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e56:	2a00      	cmp	r2, #0
 8000e58:	d1fb      	bne.n	8000e52 <strlen+0x2>
 8000e5a:	1a18      	subs	r0, r3, r0
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	4770      	bx	lr

08000e60 <memchr>:
 8000e60:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000e64:	2a10      	cmp	r2, #16
 8000e66:	db2b      	blt.n	8000ec0 <memchr+0x60>
 8000e68:	f010 0f07 	tst.w	r0, #7
 8000e6c:	d008      	beq.n	8000e80 <memchr+0x20>
 8000e6e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000e72:	3a01      	subs	r2, #1
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d02d      	beq.n	8000ed4 <memchr+0x74>
 8000e78:	f010 0f07 	tst.w	r0, #7
 8000e7c:	b342      	cbz	r2, 8000ed0 <memchr+0x70>
 8000e7e:	d1f6      	bne.n	8000e6e <memchr+0xe>
 8000e80:	b4f0      	push	{r4, r5, r6, r7}
 8000e82:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000e86:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8000e8a:	f022 0407 	bic.w	r4, r2, #7
 8000e8e:	f07f 0700 	mvns.w	r7, #0
 8000e92:	2300      	movs	r3, #0
 8000e94:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000e98:	3c08      	subs	r4, #8
 8000e9a:	ea85 0501 	eor.w	r5, r5, r1
 8000e9e:	ea86 0601 	eor.w	r6, r6, r1
 8000ea2:	fa85 f547 	uadd8	r5, r5, r7
 8000ea6:	faa3 f587 	sel	r5, r3, r7
 8000eaa:	fa86 f647 	uadd8	r6, r6, r7
 8000eae:	faa5 f687 	sel	r6, r5, r7
 8000eb2:	b98e      	cbnz	r6, 8000ed8 <memchr+0x78>
 8000eb4:	d1ee      	bne.n	8000e94 <memchr+0x34>
 8000eb6:	bcf0      	pop	{r4, r5, r6, r7}
 8000eb8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000ebc:	f002 0207 	and.w	r2, r2, #7
 8000ec0:	b132      	cbz	r2, 8000ed0 <memchr+0x70>
 8000ec2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000ec6:	3a01      	subs	r2, #1
 8000ec8:	ea83 0301 	eor.w	r3, r3, r1
 8000ecc:	b113      	cbz	r3, 8000ed4 <memchr+0x74>
 8000ece:	d1f8      	bne.n	8000ec2 <memchr+0x62>
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	4770      	bx	lr
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	4770      	bx	lr
 8000ed8:	2d00      	cmp	r5, #0
 8000eda:	bf06      	itte	eq
 8000edc:	4635      	moveq	r5, r6
 8000ede:	3803      	subeq	r0, #3
 8000ee0:	3807      	subne	r0, #7
 8000ee2:	f015 0f01 	tst.w	r5, #1
 8000ee6:	d107      	bne.n	8000ef8 <memchr+0x98>
 8000ee8:	3001      	adds	r0, #1
 8000eea:	f415 7f80 	tst.w	r5, #256	; 0x100
 8000eee:	bf02      	ittt	eq
 8000ef0:	3001      	addeq	r0, #1
 8000ef2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000ef6:	3001      	addeq	r0, #1
 8000ef8:	bcf0      	pop	{r4, r5, r6, r7}
 8000efa:	3801      	subs	r0, #1
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <__aeabi_uldivmod>:
 8000f00:	b953      	cbnz	r3, 8000f18 <__aeabi_uldivmod+0x18>
 8000f02:	b94a      	cbnz	r2, 8000f18 <__aeabi_uldivmod+0x18>
 8000f04:	2900      	cmp	r1, #0
 8000f06:	bf08      	it	eq
 8000f08:	2800      	cmpeq	r0, #0
 8000f0a:	bf1c      	itt	ne
 8000f0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000f10:	f04f 30ff 	movne.w	r0, #4294967295
 8000f14:	f000 b974 	b.w	8001200 <__aeabi_idiv0>
 8000f18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f20:	f000 f806 	bl	8000f30 <__udivmoddi4>
 8000f24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f2c:	b004      	add	sp, #16
 8000f2e:	4770      	bx	lr

08000f30 <__udivmoddi4>:
 8000f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f34:	9d08      	ldr	r5, [sp, #32]
 8000f36:	4604      	mov	r4, r0
 8000f38:	468e      	mov	lr, r1
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d14d      	bne.n	8000fda <__udivmoddi4+0xaa>
 8000f3e:	428a      	cmp	r2, r1
 8000f40:	4694      	mov	ip, r2
 8000f42:	d969      	bls.n	8001018 <__udivmoddi4+0xe8>
 8000f44:	fab2 f282 	clz	r2, r2
 8000f48:	b152      	cbz	r2, 8000f60 <__udivmoddi4+0x30>
 8000f4a:	fa01 f302 	lsl.w	r3, r1, r2
 8000f4e:	f1c2 0120 	rsb	r1, r2, #32
 8000f52:	fa20 f101 	lsr.w	r1, r0, r1
 8000f56:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f5a:	ea41 0e03 	orr.w	lr, r1, r3
 8000f5e:	4094      	lsls	r4, r2
 8000f60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f64:	0c21      	lsrs	r1, r4, #16
 8000f66:	fbbe f6f8 	udiv	r6, lr, r8
 8000f6a:	fa1f f78c 	uxth.w	r7, ip
 8000f6e:	fb08 e316 	mls	r3, r8, r6, lr
 8000f72:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000f76:	fb06 f107 	mul.w	r1, r6, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d90a      	bls.n	8000f94 <__udivmoddi4+0x64>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000f86:	f080 811f 	bcs.w	80011c8 <__udivmoddi4+0x298>
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	f240 811c 	bls.w	80011c8 <__udivmoddi4+0x298>
 8000f90:	3e02      	subs	r6, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1a5b      	subs	r3, r3, r1
 8000f96:	b2a4      	uxth	r4, r4
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000fa0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa4:	fb00 f707 	mul.w	r7, r0, r7
 8000fa8:	42a7      	cmp	r7, r4
 8000faa:	d90a      	bls.n	8000fc2 <__udivmoddi4+0x92>
 8000fac:	eb1c 0404 	adds.w	r4, ip, r4
 8000fb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000fb4:	f080 810a 	bcs.w	80011cc <__udivmoddi4+0x29c>
 8000fb8:	42a7      	cmp	r7, r4
 8000fba:	f240 8107 	bls.w	80011cc <__udivmoddi4+0x29c>
 8000fbe:	4464      	add	r4, ip
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000fc6:	1be4      	subs	r4, r4, r7
 8000fc8:	2600      	movs	r6, #0
 8000fca:	b11d      	cbz	r5, 8000fd4 <__udivmoddi4+0xa4>
 8000fcc:	40d4      	lsrs	r4, r2
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000fd4:	4631      	mov	r1, r6
 8000fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fda:	428b      	cmp	r3, r1
 8000fdc:	d909      	bls.n	8000ff2 <__udivmoddi4+0xc2>
 8000fde:	2d00      	cmp	r5, #0
 8000fe0:	f000 80ef 	beq.w	80011c2 <__udivmoddi4+0x292>
 8000fe4:	2600      	movs	r6, #0
 8000fe6:	e9c5 0100 	strd	r0, r1, [r5]
 8000fea:	4630      	mov	r0, r6
 8000fec:	4631      	mov	r1, r6
 8000fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff2:	fab3 f683 	clz	r6, r3
 8000ff6:	2e00      	cmp	r6, #0
 8000ff8:	d14a      	bne.n	8001090 <__udivmoddi4+0x160>
 8000ffa:	428b      	cmp	r3, r1
 8000ffc:	d302      	bcc.n	8001004 <__udivmoddi4+0xd4>
 8000ffe:	4282      	cmp	r2, r0
 8001000:	f200 80f9 	bhi.w	80011f6 <__udivmoddi4+0x2c6>
 8001004:	1a84      	subs	r4, r0, r2
 8001006:	eb61 0303 	sbc.w	r3, r1, r3
 800100a:	2001      	movs	r0, #1
 800100c:	469e      	mov	lr, r3
 800100e:	2d00      	cmp	r5, #0
 8001010:	d0e0      	beq.n	8000fd4 <__udivmoddi4+0xa4>
 8001012:	e9c5 4e00 	strd	r4, lr, [r5]
 8001016:	e7dd      	b.n	8000fd4 <__udivmoddi4+0xa4>
 8001018:	b902      	cbnz	r2, 800101c <__udivmoddi4+0xec>
 800101a:	deff      	udf	#255	; 0xff
 800101c:	fab2 f282 	clz	r2, r2
 8001020:	2a00      	cmp	r2, #0
 8001022:	f040 8092 	bne.w	800114a <__udivmoddi4+0x21a>
 8001026:	eba1 010c 	sub.w	r1, r1, ip
 800102a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800102e:	fa1f fe8c 	uxth.w	lr, ip
 8001032:	2601      	movs	r6, #1
 8001034:	0c20      	lsrs	r0, r4, #16
 8001036:	fbb1 f3f7 	udiv	r3, r1, r7
 800103a:	fb07 1113 	mls	r1, r7, r3, r1
 800103e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001042:	fb0e f003 	mul.w	r0, lr, r3
 8001046:	4288      	cmp	r0, r1
 8001048:	d908      	bls.n	800105c <__udivmoddi4+0x12c>
 800104a:	eb1c 0101 	adds.w	r1, ip, r1
 800104e:	f103 38ff 	add.w	r8, r3, #4294967295
 8001052:	d202      	bcs.n	800105a <__udivmoddi4+0x12a>
 8001054:	4288      	cmp	r0, r1
 8001056:	f200 80cb 	bhi.w	80011f0 <__udivmoddi4+0x2c0>
 800105a:	4643      	mov	r3, r8
 800105c:	1a09      	subs	r1, r1, r0
 800105e:	b2a4      	uxth	r4, r4
 8001060:	fbb1 f0f7 	udiv	r0, r1, r7
 8001064:	fb07 1110 	mls	r1, r7, r0, r1
 8001068:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800106c:	fb0e fe00 	mul.w	lr, lr, r0
 8001070:	45a6      	cmp	lr, r4
 8001072:	d908      	bls.n	8001086 <__udivmoddi4+0x156>
 8001074:	eb1c 0404 	adds.w	r4, ip, r4
 8001078:	f100 31ff 	add.w	r1, r0, #4294967295
 800107c:	d202      	bcs.n	8001084 <__udivmoddi4+0x154>
 800107e:	45a6      	cmp	lr, r4
 8001080:	f200 80bb 	bhi.w	80011fa <__udivmoddi4+0x2ca>
 8001084:	4608      	mov	r0, r1
 8001086:	eba4 040e 	sub.w	r4, r4, lr
 800108a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800108e:	e79c      	b.n	8000fca <__udivmoddi4+0x9a>
 8001090:	f1c6 0720 	rsb	r7, r6, #32
 8001094:	40b3      	lsls	r3, r6
 8001096:	fa22 fc07 	lsr.w	ip, r2, r7
 800109a:	ea4c 0c03 	orr.w	ip, ip, r3
 800109e:	fa20 f407 	lsr.w	r4, r0, r7
 80010a2:	fa01 f306 	lsl.w	r3, r1, r6
 80010a6:	431c      	orrs	r4, r3
 80010a8:	40f9      	lsrs	r1, r7
 80010aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80010ae:	fa00 f306 	lsl.w	r3, r0, r6
 80010b2:	fbb1 f8f9 	udiv	r8, r1, r9
 80010b6:	0c20      	lsrs	r0, r4, #16
 80010b8:	fa1f fe8c 	uxth.w	lr, ip
 80010bc:	fb09 1118 	mls	r1, r9, r8, r1
 80010c0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80010c4:	fb08 f00e 	mul.w	r0, r8, lr
 80010c8:	4288      	cmp	r0, r1
 80010ca:	fa02 f206 	lsl.w	r2, r2, r6
 80010ce:	d90b      	bls.n	80010e8 <__udivmoddi4+0x1b8>
 80010d0:	eb1c 0101 	adds.w	r1, ip, r1
 80010d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80010d8:	f080 8088 	bcs.w	80011ec <__udivmoddi4+0x2bc>
 80010dc:	4288      	cmp	r0, r1
 80010de:	f240 8085 	bls.w	80011ec <__udivmoddi4+0x2bc>
 80010e2:	f1a8 0802 	sub.w	r8, r8, #2
 80010e6:	4461      	add	r1, ip
 80010e8:	1a09      	subs	r1, r1, r0
 80010ea:	b2a4      	uxth	r4, r4
 80010ec:	fbb1 f0f9 	udiv	r0, r1, r9
 80010f0:	fb09 1110 	mls	r1, r9, r0, r1
 80010f4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80010f8:	fb00 fe0e 	mul.w	lr, r0, lr
 80010fc:	458e      	cmp	lr, r1
 80010fe:	d908      	bls.n	8001112 <__udivmoddi4+0x1e2>
 8001100:	eb1c 0101 	adds.w	r1, ip, r1
 8001104:	f100 34ff 	add.w	r4, r0, #4294967295
 8001108:	d26c      	bcs.n	80011e4 <__udivmoddi4+0x2b4>
 800110a:	458e      	cmp	lr, r1
 800110c:	d96a      	bls.n	80011e4 <__udivmoddi4+0x2b4>
 800110e:	3802      	subs	r0, #2
 8001110:	4461      	add	r1, ip
 8001112:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001116:	fba0 9402 	umull	r9, r4, r0, r2
 800111a:	eba1 010e 	sub.w	r1, r1, lr
 800111e:	42a1      	cmp	r1, r4
 8001120:	46c8      	mov	r8, r9
 8001122:	46a6      	mov	lr, r4
 8001124:	d356      	bcc.n	80011d4 <__udivmoddi4+0x2a4>
 8001126:	d053      	beq.n	80011d0 <__udivmoddi4+0x2a0>
 8001128:	b15d      	cbz	r5, 8001142 <__udivmoddi4+0x212>
 800112a:	ebb3 0208 	subs.w	r2, r3, r8
 800112e:	eb61 010e 	sbc.w	r1, r1, lr
 8001132:	fa01 f707 	lsl.w	r7, r1, r7
 8001136:	fa22 f306 	lsr.w	r3, r2, r6
 800113a:	40f1      	lsrs	r1, r6
 800113c:	431f      	orrs	r7, r3
 800113e:	e9c5 7100 	strd	r7, r1, [r5]
 8001142:	2600      	movs	r6, #0
 8001144:	4631      	mov	r1, r6
 8001146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800114a:	f1c2 0320 	rsb	r3, r2, #32
 800114e:	40d8      	lsrs	r0, r3
 8001150:	fa0c fc02 	lsl.w	ip, ip, r2
 8001154:	fa21 f303 	lsr.w	r3, r1, r3
 8001158:	4091      	lsls	r1, r2
 800115a:	4301      	orrs	r1, r0
 800115c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001160:	fa1f fe8c 	uxth.w	lr, ip
 8001164:	fbb3 f0f7 	udiv	r0, r3, r7
 8001168:	fb07 3610 	mls	r6, r7, r0, r3
 800116c:	0c0b      	lsrs	r3, r1, #16
 800116e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001172:	fb00 f60e 	mul.w	r6, r0, lr
 8001176:	429e      	cmp	r6, r3
 8001178:	fa04 f402 	lsl.w	r4, r4, r2
 800117c:	d908      	bls.n	8001190 <__udivmoddi4+0x260>
 800117e:	eb1c 0303 	adds.w	r3, ip, r3
 8001182:	f100 38ff 	add.w	r8, r0, #4294967295
 8001186:	d22f      	bcs.n	80011e8 <__udivmoddi4+0x2b8>
 8001188:	429e      	cmp	r6, r3
 800118a:	d92d      	bls.n	80011e8 <__udivmoddi4+0x2b8>
 800118c:	3802      	subs	r0, #2
 800118e:	4463      	add	r3, ip
 8001190:	1b9b      	subs	r3, r3, r6
 8001192:	b289      	uxth	r1, r1
 8001194:	fbb3 f6f7 	udiv	r6, r3, r7
 8001198:	fb07 3316 	mls	r3, r7, r6, r3
 800119c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80011a0:	fb06 f30e 	mul.w	r3, r6, lr
 80011a4:	428b      	cmp	r3, r1
 80011a6:	d908      	bls.n	80011ba <__udivmoddi4+0x28a>
 80011a8:	eb1c 0101 	adds.w	r1, ip, r1
 80011ac:	f106 38ff 	add.w	r8, r6, #4294967295
 80011b0:	d216      	bcs.n	80011e0 <__udivmoddi4+0x2b0>
 80011b2:	428b      	cmp	r3, r1
 80011b4:	d914      	bls.n	80011e0 <__udivmoddi4+0x2b0>
 80011b6:	3e02      	subs	r6, #2
 80011b8:	4461      	add	r1, ip
 80011ba:	1ac9      	subs	r1, r1, r3
 80011bc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80011c0:	e738      	b.n	8001034 <__udivmoddi4+0x104>
 80011c2:	462e      	mov	r6, r5
 80011c4:	4628      	mov	r0, r5
 80011c6:	e705      	b.n	8000fd4 <__udivmoddi4+0xa4>
 80011c8:	4606      	mov	r6, r0
 80011ca:	e6e3      	b.n	8000f94 <__udivmoddi4+0x64>
 80011cc:	4618      	mov	r0, r3
 80011ce:	e6f8      	b.n	8000fc2 <__udivmoddi4+0x92>
 80011d0:	454b      	cmp	r3, r9
 80011d2:	d2a9      	bcs.n	8001128 <__udivmoddi4+0x1f8>
 80011d4:	ebb9 0802 	subs.w	r8, r9, r2
 80011d8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80011dc:	3801      	subs	r0, #1
 80011de:	e7a3      	b.n	8001128 <__udivmoddi4+0x1f8>
 80011e0:	4646      	mov	r6, r8
 80011e2:	e7ea      	b.n	80011ba <__udivmoddi4+0x28a>
 80011e4:	4620      	mov	r0, r4
 80011e6:	e794      	b.n	8001112 <__udivmoddi4+0x1e2>
 80011e8:	4640      	mov	r0, r8
 80011ea:	e7d1      	b.n	8001190 <__udivmoddi4+0x260>
 80011ec:	46d0      	mov	r8, sl
 80011ee:	e77b      	b.n	80010e8 <__udivmoddi4+0x1b8>
 80011f0:	3b02      	subs	r3, #2
 80011f2:	4461      	add	r1, ip
 80011f4:	e732      	b.n	800105c <__udivmoddi4+0x12c>
 80011f6:	4630      	mov	r0, r6
 80011f8:	e709      	b.n	800100e <__udivmoddi4+0xde>
 80011fa:	4464      	add	r4, ip
 80011fc:	3802      	subs	r0, #2
 80011fe:	e742      	b.n	8001086 <__udivmoddi4+0x156>

08001200 <__aeabi_idiv0>:
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop

08001204 <__io_putchar>:
PUTCHAR_PROTOTYPE {
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 800120c:	1d39      	adds	r1, r7, #4
 800120e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001212:	2201      	movs	r2, #1
 8001214:	4803      	ldr	r0, [pc, #12]	; (8001224 <__io_putchar+0x20>)
 8001216:	f00a fe21 	bl	800be5c <HAL_UART_Transmit>
	return ch;
 800121a:	687b      	ldr	r3, [r7, #4]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	200005f8 	.word	0x200005f8

08001228 <HAL_LPTIM_AutoReloadMatchCallback>:
//		}
//
//	}
//}

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin); //toggle green LED
 8001230:	2101      	movs	r1, #1
 8001232:	4803      	ldr	r0, [pc, #12]	; (8001240 <HAL_LPTIM_AutoReloadMatchCallback+0x18>)
 8001234:	f004 fc9d 	bl	8005b72 <HAL_GPIO_TogglePin>
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	58020400 	.word	0x58020400

08001244 <HAL_HRTIM_Compare2EventCallback>:

void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]

	/* Called when the first microwave pulse goes low */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_E) {
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	2b04      	cmp	r3, #4
 8001252:	d11e      	bne.n	8001292 <HAL_HRTIM_Compare2EventCallback+0x4e>
#ifdef ATTENUATOR_CODE
		/* Configure the LASER AOM drive attenuator */
		const struct AttenuatorSettings a = {0,0,0,0,0,1,0}; // 8 dB
 8001254:	7b3b      	ldrb	r3, [r7, #12]
 8001256:	f36f 0300 	bfc	r3, #0, #1
 800125a:	733b      	strb	r3, [r7, #12]
 800125c:	7b3b      	ldrb	r3, [r7, #12]
 800125e:	f36f 0341 	bfc	r3, #1, #1
 8001262:	733b      	strb	r3, [r7, #12]
 8001264:	7b3b      	ldrb	r3, [r7, #12]
 8001266:	f36f 0382 	bfc	r3, #2, #1
 800126a:	733b      	strb	r3, [r7, #12]
 800126c:	7b3b      	ldrb	r3, [r7, #12]
 800126e:	f36f 03c3 	bfc	r3, #3, #1
 8001272:	733b      	strb	r3, [r7, #12]
 8001274:	7b3b      	ldrb	r3, [r7, #12]
 8001276:	f36f 1304 	bfc	r3, #4, #1
 800127a:	733b      	strb	r3, [r7, #12]
 800127c:	7b3b      	ldrb	r3, [r7, #12]
 800127e:	f043 0320 	orr.w	r3, r3, #32
 8001282:	733b      	strb	r3, [r7, #12]
 8001284:	7b3b      	ldrb	r3, [r7, #12]
 8001286:	f36f 1386 	bfc	r3, #6, #1
 800128a:	733b      	strb	r3, [r7, #12]
		set_aom_atten(a);
 800128c:	7b38      	ldrb	r0, [r7, #12]
 800128e:	f00e fc53 	bl	800fb38 <__set_aom_atten_veneer>
#endif //ATTENUATOR_CODE
	}

}
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <HAL_HRTIM_Compare3EventCallback>:

void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b088      	sub	sp, #32
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]

	/* Called at the end of a POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d175      	bne.n	8001398 <HAL_HRTIM_Compare3EventCallback+0xfc>
#ifdef ATTENUATOR_CODE
		/* Reset the attenuator to 0 dB */
		const struct AttenuatorSettings a = { 0, 0, 0, 0, 0, 0, 0 }; // 0 dB
 80012ac:	2300      	movs	r3, #0
 80012ae:	723b      	strb	r3, [r7, #8]
		set_aom_atten(a);
 80012b0:	7a38      	ldrb	r0, [r7, #8]
 80012b2:	f00e fc41 	bl	800fb38 <__set_aom_atten_veneer>
#endif //ATTENUATOR_CODE

		const double start_freq = ((long)(sweep_settings.req_start_freq/sweep_settings.step_size)) * sweep_settings.step_size;
 80012b6:	4b3a      	ldr	r3, [pc, #232]	; (80013a0 <HAL_HRTIM_Compare3EventCallback+0x104>)
 80012b8:	ed93 5b00 	vldr	d5, [r3]
 80012bc:	4b38      	ldr	r3, [pc, #224]	; (80013a0 <HAL_HRTIM_Compare3EventCallback+0x104>)
 80012be:	ed93 6b04 	vldr	d6, [r3, #16]
 80012c2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80012c6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80012ca:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80012ce:	4b34      	ldr	r3, [pc, #208]	; (80013a0 <HAL_HRTIM_Compare3EventCallback+0x104>)
 80012d0:	ed93 7b04 	vldr	d7, [r3, #16]
 80012d4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012d8:	ed87 7b06 	vstr	d7, [r7, #24]
		const double stop_freq = ((long)((sweep_settings.req_stop_freq/sweep_settings.step_size) + 0.5)) * sweep_settings.step_size;
 80012dc:	4b30      	ldr	r3, [pc, #192]	; (80013a0 <HAL_HRTIM_Compare3EventCallback+0x104>)
 80012de:	ed93 5b02 	vldr	d5, [r3, #8]
 80012e2:	4b2f      	ldr	r3, [pc, #188]	; (80013a0 <HAL_HRTIM_Compare3EventCallback+0x104>)
 80012e4:	ed93 6b04 	vldr	d6, [r3, #16]
 80012e8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80012ec:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80012f0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80012f4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80012f8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80012fc:	4b28      	ldr	r3, [pc, #160]	; (80013a0 <HAL_HRTIM_Compare3EventCallback+0x104>)
 80012fe:	ed93 7b04 	vldr	d7, [r3, #16]
 8001302:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001306:	ed87 7b04 	vstr	d7, [r7, #16]
		const uint32_t num_points = ((stop_freq - start_freq)/sweep_settings.step_size) + 1;
 800130a:	ed97 6b04 	vldr	d6, [r7, #16]
 800130e:	ed97 7b06 	vldr	d7, [r7, #24]
 8001312:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001316:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <HAL_HRTIM_Compare3EventCallback+0x104>)
 8001318:	ed93 6b04 	vldr	d6, [r3, #16]
 800131c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001320:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001324:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001328:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800132c:	ee17 3a90 	vmov	r3, s15
 8001330:	60fb      	str	r3, [r7, #12]
//		static const double stop_freq = ((long)((sweep_settings.req_stop_freq/sweep_settings.step_size) + 0.5)) * sweep_settings.step_size;
//		static const uint32_t num_points = ((stop_freq - start_freq)/sweep_settings.step_size) + 1;
		static uint32_t i = 0;

		/* Configure the Microwave frequency */
		if (i == num_points) {
 8001332:	4b1c      	ldr	r3, [pc, #112]	; (80013a4 <HAL_HRTIM_Compare3EventCallback+0x108>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	429a      	cmp	r2, r3
 800133a:	d106      	bne.n	800134a <HAL_HRTIM_Compare3EventCallback+0xae>
			stop_pop();
 800133c:	f00e fbdc 	bl	800faf8 <__stop_pop_veneer>
			i = 0;
 8001340:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <HAL_HRTIM_Compare3EventCallback+0x108>)
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
			start_pop();
 8001346:	f00e fbe3 	bl	800fb10 <__start_pop_veneer>
		}

#ifdef SYNTH_ENABLE
		set_frequency_hz(start_freq + (i * sweep_settings.step_size));
 800134a:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <HAL_HRTIM_Compare3EventCallback+0x108>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	ee07 3a90 	vmov	s15, r3
 8001352:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001356:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <HAL_HRTIM_Compare3EventCallback+0x104>)
 8001358:	ed93 7b04 	vldr	d7, [r3, #16]
 800135c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001360:	ed97 7b06 	vldr	d7, [r7, #24]
 8001364:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001368:	eeb0 0b47 	vmov.f64	d0, d7
 800136c:	f00e fbc8 	bl	800fb00 <__set_frequency_hz_veneer>
#endif

		i = i + 1;
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <HAL_HRTIM_Compare3EventCallback+0x108>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	3301      	adds	r3, #1
 8001376:	4a0b      	ldr	r2, [pc, #44]	; (80013a4 <HAL_HRTIM_Compare3EventCallback+0x108>)
 8001378:	6013      	str	r3, [r2, #0]

		pop_cycle_count = pop_cycle_count + 1;
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <HAL_HRTIM_Compare3EventCallback+0x10c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	3301      	adds	r3, #1
 8001380:	4a09      	ldr	r2, [pc, #36]	; (80013a8 <HAL_HRTIM_Compare3EventCallback+0x10c>)
 8001382:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); //toggle amber LED
 8001384:	2102      	movs	r1, #2
 8001386:	4809      	ldr	r0, [pc, #36]	; (80013ac <HAL_HRTIM_Compare3EventCallback+0x110>)
 8001388:	f004 fbf3 	bl	8005b72 <HAL_GPIO_TogglePin>
		printf("POP Cycle %lu done.\r\n", pop_cycle_count);
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <HAL_HRTIM_Compare3EventCallback+0x10c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4619      	mov	r1, r3
 8001392:	4807      	ldr	r0, [pc, #28]	; (80013b0 <HAL_HRTIM_Compare3EventCallback+0x114>)
 8001394:	f00c fafa 	bl	800d98c <iprintf>

	/* Called when the second microwave pulse goes high */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_E) {
	}

}
 8001398:	bf00      	nop
 800139a:	3720      	adds	r7, #32
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	08010030 	.word	0x08010030
 80013a4:	200006a0 	.word	0x200006a0
 80013a8:	20000690 	.word	0x20000690
 80013ac:	58021000 	.word	0x58021000
 80013b0:	0800fbf8 	.word	0x0800fbf8

080013b4 <HAL_HRTIM_RepetitionEventCallback>:

void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef *hhrtim,
		uint32_t TimerIdx) {
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]

	/* Called at the start of the next POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
	}
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	0000      	movs	r0, r0
 80013cc:	0000      	movs	r0, r0
	...

080013d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* Copy from FLASH to itcm */
  memcpy(&_sitcm, &_siitcm, ((void*) &_eitcm - (void*) &_sitcm));
 80013d6:	4aa6      	ldr	r2, [pc, #664]	; (8001670 <main+0x2a0>)
 80013d8:	4ba6      	ldr	r3, [pc, #664]	; (8001674 <main+0x2a4>)
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	461a      	mov	r2, r3
 80013de:	49a6      	ldr	r1, [pc, #664]	; (8001678 <main+0x2a8>)
 80013e0:	48a4      	ldr	r0, [pc, #656]	; (8001674 <main+0x2a4>)
 80013e2:	f00b fe79 	bl	800d0d8 <memcpy>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80013e6:	4ba5      	ldr	r3, [pc, #660]	; (800167c <main+0x2ac>)
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d11b      	bne.n	800142a <main+0x5a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013f2:	f3bf 8f4f 	dsb	sy
}
 80013f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013f8:	f3bf 8f6f 	isb	sy
}
 80013fc:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80013fe:	4b9f      	ldr	r3, [pc, #636]	; (800167c <main+0x2ac>)
 8001400:	2200      	movs	r2, #0
 8001402:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001406:	f3bf 8f4f 	dsb	sy
}
 800140a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800140c:	f3bf 8f6f 	isb	sy
}
 8001410:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001412:	4b9a      	ldr	r3, [pc, #616]	; (800167c <main+0x2ac>)
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	4a99      	ldr	r2, [pc, #612]	; (800167c <main+0x2ac>)
 8001418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800141c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800141e:	f3bf 8f4f 	dsb	sy
}
 8001422:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001424:	f3bf 8f6f 	isb	sy
}
 8001428:	e000      	b.n	800142c <main+0x5c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800142a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800142c:	4b93      	ldr	r3, [pc, #588]	; (800167c <main+0x2ac>)
 800142e:	695b      	ldr	r3, [r3, #20]
 8001430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d138      	bne.n	80014aa <main+0xda>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001438:	4b90      	ldr	r3, [pc, #576]	; (800167c <main+0x2ac>)
 800143a:	2200      	movs	r2, #0
 800143c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001440:	f3bf 8f4f 	dsb	sy
}
 8001444:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001446:	4b8d      	ldr	r3, [pc, #564]	; (800167c <main+0x2ac>)
 8001448:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800144c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	0b5b      	lsrs	r3, r3, #13
 8001452:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001456:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	08db      	lsrs	r3, r3, #3
 800145c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001460:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	015a      	lsls	r2, r3, #5
 8001466:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800146a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001470:	4982      	ldr	r1, [pc, #520]	; (800167c <main+0x2ac>)
 8001472:	4313      	orrs	r3, r2
 8001474:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	1e5a      	subs	r2, r3, #1
 800147c:	607a      	str	r2, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1ef      	bne.n	8001462 <main+0x92>
    } while(sets-- != 0U);
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	1e5a      	subs	r2, r3, #1
 8001486:	60ba      	str	r2, [r7, #8]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1e5      	bne.n	8001458 <main+0x88>
  __ASM volatile ("dsb 0xF":::"memory");
 800148c:	f3bf 8f4f 	dsb	sy
}
 8001490:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001492:	4b7a      	ldr	r3, [pc, #488]	; (800167c <main+0x2ac>)
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	4a79      	ldr	r2, [pc, #484]	; (800167c <main+0x2ac>)
 8001498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800149c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800149e:	f3bf 8f4f 	dsb	sy
}
 80014a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014a4:	f3bf 8f6f 	isb	sy
}
 80014a8:	e000      	b.n	80014ac <main+0xdc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80014aa:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ac:	f001 fc22 	bl	8002cf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014b0:	f000 f95e 	bl	8001770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b4:	f000 fd6a 	bl	8001f8c <MX_GPIO_Init>
  MX_LPTIM1_Init();
 80014b8:	f000 fc4a 	bl	8001d50 <MX_LPTIM1_Init>
  MX_DAC1_Init();
 80014bc:	f000 fa78 	bl	80019b0 <MX_DAC1_Init>
  MX_USART3_UART_Init();
 80014c0:	f000 fd16 	bl	8001ef0 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80014c4:	f000 fcc6 	bl	8001e54 <MX_TIM3_Init>
  MX_TIM1_Init();
 80014c8:	f000 fc70 	bl	8001dac <MX_TIM1_Init>
  MX_HRTIM_Init();
 80014cc:	f000 faee 	bl	8001aac <MX_HRTIM_Init>
  MX_ADC3_Init();
 80014d0:	f000 fa0c 	bl	80018ec <MX_ADC3_Init>
  MX_ETH_Init();
 80014d4:	f000 fa9e 	bl	8001a14 <MX_ETH_Init>
  /* USER CODE BEGIN 2 */
  printf("\033c"); //clears screen
 80014d8:	4869      	ldr	r0, [pc, #420]	; (8001680 <main+0x2b0>)
 80014da:	f00c fa57 	bl	800d98c <iprintf>
  printf("Atomic Clock - Source __TIMESTAMP__: %s\r\n", __TIMESTAMP__);
 80014de:	4969      	ldr	r1, [pc, #420]	; (8001684 <main+0x2b4>)
 80014e0:	4869      	ldr	r0, [pc, #420]	; (8001688 <main+0x2b8>)
 80014e2:	f00c fa53 	bl	800d98c <iprintf>

#ifdef SYNTH_ENABLE
	if (init_synthesiser(MW_power) != SUCCESS) {
 80014e6:	4b69      	ldr	r3, [pc, #420]	; (800168c <main+0x2bc>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f00e fb18 	bl	800fb20 <__init_synthesiser_veneer>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d004      	beq.n	8001500 <main+0x130>
		printf("Synthesiser initialisation failed!\r\n");
 80014f6:	4866      	ldr	r0, [pc, #408]	; (8001690 <main+0x2c0>)
 80014f8:	f00c face 	bl	800da98 <puts>
		Error_Handler();
 80014fc:	f000 fec4 	bl	8002288 <Error_Handler>
	}
#ifdef MW_VERBOSE
	printf("LO2GAIN set at: 0x%x \r\n", MW_power);
 8001500:	4b62      	ldr	r3, [pc, #392]	; (800168c <main+0x2bc>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	4619      	mov	r1, r3
 8001506:	4863      	ldr	r0, [pc, #396]	; (8001694 <main+0x2c4>)
 8001508:	f00c fa40 	bl	800d98c <iprintf>
#endif	//MW_VERBOSE
#endif //SYNTH_ENABLE

	/* Start a low power timer to flash an LED approximately every second */
	if (HAL_LPTIM_Counter_Start_IT(&hlptim1, 1024) != HAL_OK) {
 800150c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001510:	4861      	ldr	r0, [pc, #388]	; (8001698 <main+0x2c8>)
 8001512:	f006 f83d 	bl	8007590 <HAL_LPTIM_Counter_Start_IT>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d004      	beq.n	8001526 <main+0x156>
		printf("Failed to start slow flashing LED!\r\n");
 800151c:	485f      	ldr	r0, [pc, #380]	; (800169c <main+0x2cc>)
 800151e:	f00c fabb 	bl	800da98 <puts>
		Error_Handler();
 8001522:	f000 feb1 	bl	8002288 <Error_Handler>
	}

	/* Start the DAC and zero its output */
	if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK) {
 8001526:	2100      	movs	r1, #0
 8001528:	485d      	ldr	r0, [pc, #372]	; (80016a0 <main+0x2d0>)
 800152a:	f003 fb68 	bl	8004bfe <HAL_DAC_Start>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d004      	beq.n	800153e <main+0x16e>
		printf("Failure to initialise DAC \r\n");
 8001534:	485b      	ldr	r0, [pc, #364]	; (80016a4 <main+0x2d4>)
 8001536:	f00c faaf 	bl	800da98 <puts>
		Error_Handler();
 800153a:	f000 fea5 	bl	8002288 <Error_Handler>
	}
	printf("Setting DAC output to 1.00V \r\n");
 800153e:	485a      	ldr	r0, [pc, #360]	; (80016a8 <main+0x2d8>)
 8001540:	f00c faaa 	bl	800da98 <puts>
	if(HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1241) != HAL_OK){
 8001544:	f240 43d9 	movw	r3, #1241	; 0x4d9
 8001548:	2200      	movs	r2, #0
 800154a:	2100      	movs	r1, #0
 800154c:	4854      	ldr	r0, [pc, #336]	; (80016a0 <main+0x2d0>)
 800154e:	f003 fba8 	bl	8004ca2 <HAL_DAC_SetValue>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d004      	beq.n	8001562 <main+0x192>
			printf("DAC setup failed!\r\n");
 8001558:	4854      	ldr	r0, [pc, #336]	; (80016ac <main+0x2dc>)
 800155a:	f00c fa9d 	bl	800da98 <puts>
		Error_Handler();
 800155e:	f000 fe93 	bl	8002288 <Error_Handler>
//	printf("Setting spare SMA output high \r\n");
//	HAL_GPIO_WritePin(SPARE_OUT_GPIO_Port, SPARE_OUT_Pin, GPIO_PIN_RESET); // Sets spare SMA output low

	/* Laser tuning pin */
//	LASER_TUNING_GPIO_Port, LASER_TUNING_Pin
	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_SET); // Laser_tuning output high
 8001562:	2201      	movs	r2, #1
 8001564:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001568:	4851      	ldr	r0, [pc, #324]	; (80016b0 <main+0x2e0>)
 800156a:	f004 fae9 	bl	8005b40 <HAL_GPIO_WritePin>
	printf("Requesting FPGA CW absorption \r\n");
 800156e:	4851      	ldr	r0, [pc, #324]	; (80016b4 <main+0x2e4>)
 8001570:	f00c fa92 	bl	800da98 <puts>
//	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_RESET); // Laser_tuning SMA output low

	/* MW invalid */
//	MW_INVALID_GPIO_Port, MW_INVALID_Pin
//	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); // MW_invalid output high
	printf("Setting MW invalid output low \r\n");
 8001574:	4850      	ldr	r0, [pc, #320]	; (80016b8 <main+0x2e8>)
 8001576:	f00c fa8f 	bl	800da98 <puts>
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); // MW_invalid output low
 800157a:	2200      	movs	r2, #0
 800157c:	2102      	movs	r1, #2
 800157e:	484c      	ldr	r0, [pc, #304]	; (80016b0 <main+0x2e0>)
 8001580:	f004 fade 	bl	8005b40 <HAL_GPIO_WritePin>

	/* Fire up the ADC */
	// external trigger, single conversion selected in ioc file
	// calibrate ADC for better accuracy and start it w/ interrupt
	if(HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK){
 8001584:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001588:	2100      	movs	r1, #0
 800158a:	484c      	ldr	r0, [pc, #304]	; (80016bc <main+0x2ec>)
 800158c:	f003 f970 	bl	8004870 <HAL_ADCEx_Calibration_Start>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d004      	beq.n	80015a0 <main+0x1d0>
		printf("ADC calibration failure \r\n");
 8001596:	484a      	ldr	r0, [pc, #296]	; (80016c0 <main+0x2f0>)
 8001598:	f00c fa7e 	bl	800da98 <puts>
		Error_Handler();
 800159c:	f000 fe74 	bl	8002288 <Error_Handler>
	}
	printf("ADC calibrated successfully \r\n");
 80015a0:	4848      	ldr	r0, [pc, #288]	; (80016c4 <main+0x2f4>)
 80015a2:	f00c fa79 	bl	800da98 <puts>
	//Start the ADC with interrupts enabled
	if(HAL_ADC_Start_IT(&hadc3) != HAL_OK){
 80015a6:	4845      	ldr	r0, [pc, #276]	; (80016bc <main+0x2ec>)
 80015a8:	f002 f84e 	bl	8003648 <HAL_ADC_Start_IT>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d004      	beq.n	80015bc <main+0x1ec>
		printf("Failed to start ADC with interrupt capability \r\n");
 80015b2:	4845      	ldr	r0, [pc, #276]	; (80016c8 <main+0x2f8>)
 80015b4:	f00c fa70 	bl	800da98 <puts>
	                Error_Handler();
 80015b8:	f000 fe66 	bl	8002288 <Error_Handler>
	}
	printf("ADC interrupt callback enabled \r\n");
 80015bc:	4843      	ldr	r0, [pc, #268]	; (80016cc <main+0x2fc>)
 80015be:	f00c fa6b 	bl	800da98 <puts>
//		if (pin_status != last_pin_status) {
//			printf("Blue button status: %u \r\n", pin_status);
//			last_pin_status = pin_status;
//		}

		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 80015c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015c6:	4842      	ldr	r0, [pc, #264]	; (80016d0 <main+0x300>)
 80015c8:	f004 faa2 	bl	8005b10 <HAL_GPIO_ReadPin>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	bf14      	ite	ne
 80015d2:	2301      	movne	r3, #1
 80015d4:	2300      	moveq	r3, #0
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	4b3e      	ldr	r3, [pc, #248]	; (80016d4 <main+0x304>)
 80015da:	701a      	strb	r2, [r3, #0]
		if (blue_button_status) {// If blue button is pressed
 80015dc:	4b3d      	ldr	r3, [pc, #244]	; (80016d4 <main+0x304>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 809a 	beq.w	800171c <main+0x34c>
			printf("Blue button pressed....\r\n");
 80015e8:	483b      	ldr	r0, [pc, #236]	; (80016d8 <main+0x308>)
 80015ea:	f00c fa55 	bl	800da98 <puts>
			printf("Requesting FPGA POP \r\n");
 80015ee:	483b      	ldr	r0, [pc, #236]	; (80016dc <main+0x30c>)
 80015f0:	f00c fa52 	bl	800da98 <puts>
			HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_RESET); // Laser_tuning SMA output low
 80015f4:	2200      	movs	r2, #0
 80015f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015fa:	482d      	ldr	r0, [pc, #180]	; (80016b0 <main+0x2e0>)
 80015fc:	f004 faa0 	bl	8005b40 <HAL_GPIO_WritePin>

			/* CODE FOR CHARACTERISING MW GENERATOR FREQUENCY SETTLING TIME */
			//MW_frequency_toggle (3035735189, 3035734189); //infinite loop toggling between centre of DR dip and 1kHz left of dip
			//MW_frequency_toggle (3035735189, 3035736189); //infinite loop toggling between centre of DR dip and 1 kHz right of dip
			set_MW_power(0x03); //set maximum MW power to improve contrast
 8001600:	2003      	movs	r0, #3
 8001602:	f00e fa81 	bl	800fb08 <__set_MW_power_veneer>
			//MW_frequency_toggle (3035733689, 3035733789); //infinite loop toggling 100Hz on left of DR dip
			MW_frequency_toggle (3035733689, 3035733699); //infinite loop toggling 10Hz on left of DR dip
 8001606:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8001660 <main+0x290>
 800160a:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8001668 <main+0x298>
 800160e:	f00e fa8f 	bl	800fb30 <__MW_frequency_toggle_veneer>

			//change the MW power each time the button is pressed, unless it's the first time round this loop
			if (mw_sweep_started) {
 8001612:	4b33      	ldr	r3, [pc, #204]	; (80016e0 <main+0x310>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	d018      	beq.n	800164e <main+0x27e>
				++MW_power; //increase MW_power value by 1
 800161c:	4b1b      	ldr	r3, [pc, #108]	; (800168c <main+0x2bc>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	3301      	adds	r3, #1
 8001622:	b2da      	uxtb	r2, r3
 8001624:	4b19      	ldr	r3, [pc, #100]	; (800168c <main+0x2bc>)
 8001626:	701a      	strb	r2, [r3, #0]
				if (MW_power>3) { //Loop MW_power back round to 0 if above maximum permissible value i.e. 3
 8001628:	4b18      	ldr	r3, [pc, #96]	; (800168c <main+0x2bc>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b03      	cmp	r3, #3
 800162e:	d902      	bls.n	8001636 <main+0x266>
					MW_power = 0;
 8001630:	4b16      	ldr	r3, [pc, #88]	; (800168c <main+0x2bc>)
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]
				}
				set_MW_power(MW_power);
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <main+0x2bc>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f00e fa64 	bl	800fb08 <__set_MW_power_veneer>
#ifdef MW_VERBOSE
				printf("LO2GAIN changed to: 0x%x \r\n", MW_power);
 8001640:	4b12      	ldr	r3, [pc, #72]	; (800168c <main+0x2bc>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	4619      	mov	r1, r3
 8001646:	4827      	ldr	r0, [pc, #156]	; (80016e4 <main+0x314>)
 8001648:	f00c f9a0 	bl	800d98c <iprintf>
 800164c:	e061      	b.n	8001712 <main+0x342>
#endif //MW_VERBOSE
			} else {
					printf("Initiating sweep.\r\n");
 800164e:	4826      	ldr	r0, [pc, #152]	; (80016e8 <main+0x318>)
 8001650:	f00c fa22 	bl	800da98 <puts>
					mw_sweep_started = true;
 8001654:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <main+0x310>)
 8001656:	2201      	movs	r2, #1
 8001658:	701a      	strb	r2, [r3, #0]
			}
			while(blue_button_status) {//remain here polling button until it is released
 800165a:	e05a      	b.n	8001712 <main+0x342>
 800165c:	f3af 8000 	nop.w
 8001660:	d8600000 	.word	0xd8600000
 8001664:	41e69e33 	.word	0x41e69e33
 8001668:	d7200000 	.word	0xd7200000
 800166c:	41e69e33 	.word	0x41e69e33
 8001670:	00000b70 	.word	0x00000b70
 8001674:	00000000 	.word	0x00000000
 8001678:	08000298 	.word	0x08000298
 800167c:	e000ed00 	.word	0xe000ed00
 8001680:	0800fc10 	.word	0x0800fc10
 8001684:	0800fc14 	.word	0x0800fc14
 8001688:	0800fc30 	.word	0x0800fc30
 800168c:	20000008 	.word	0x20000008
 8001690:	0800fc5c 	.word	0x0800fc5c
 8001694:	0800fc80 	.word	0x0800fc80
 8001698:	20000528 	.word	0x20000528
 800169c:	0800fc98 	.word	0x0800fc98
 80016a0:	20000388 	.word	0x20000388
 80016a4:	0800fcbc 	.word	0x0800fcbc
 80016a8:	0800fcd8 	.word	0x0800fcd8
 80016ac:	0800fcf8 	.word	0x0800fcf8
 80016b0:	58020400 	.word	0x58020400
 80016b4:	0800fd0c 	.word	0x0800fd0c
 80016b8:	0800fd2c 	.word	0x0800fd2c
 80016bc:	20000324 	.word	0x20000324
 80016c0:	0800fd4c 	.word	0x0800fd4c
 80016c4:	0800fd68 	.word	0x0800fd68
 80016c8:	0800fd88 	.word	0x0800fd88
 80016cc:	0800fdb8 	.word	0x0800fdb8
 80016d0:	58020800 	.word	0x58020800
 80016d4:	20000694 	.word	0x20000694
 80016d8:	0800fddc 	.word	0x0800fddc
 80016dc:	0800fdf8 	.word	0x0800fdf8
 80016e0:	2000068d 	.word	0x2000068d
 80016e4:	0800fe10 	.word	0x0800fe10
 80016e8:	0800fe2c 	.word	0x0800fe2c
				timer_delay(SLOW_TIMER, 100); //10ms delay
 80016ec:	4b19      	ldr	r3, [pc, #100]	; (8001754 <main+0x384>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2164      	movs	r1, #100	; 0x64
 80016f2:	4618      	mov	r0, r3
 80016f4:	f00e fa10 	bl	800fb18 <__timer_delay_veneer>
				blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 80016f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016fc:	4816      	ldr	r0, [pc, #88]	; (8001758 <main+0x388>)
 80016fe:	f004 fa07 	bl	8005b10 <HAL_GPIO_ReadPin>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	bf14      	ite	ne
 8001708:	2301      	movne	r3, #1
 800170a:	2300      	moveq	r3, #0
 800170c:	b2da      	uxtb	r2, r3
 800170e:	4b13      	ldr	r3, [pc, #76]	; (800175c <main+0x38c>)
 8001710:	701a      	strb	r2, [r3, #0]
			while(blue_button_status) {//remain here polling button until it is released
 8001712:	4b12      	ldr	r3, [pc, #72]	; (800175c <main+0x38c>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1e7      	bne.n	80016ec <main+0x31c>
			}
		}

		if (mw_sweep_started) {//won't execute until the first time the blue button is pressed
 800171c:	4b10      	ldr	r3, [pc, #64]	; (8001760 <main+0x390>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	f43f af4d 	beq.w	80015c2 <main+0x1f2>
			/* Run the frequency sweep */
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET); //turn on red LED
 8001728:	2201      	movs	r2, #1
 800172a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800172e:	480d      	ldr	r0, [pc, #52]	; (8001764 <main+0x394>)
 8001730:	f004 fa06 	bl	8005b40 <HAL_GPIO_WritePin>
			run_sweep();
 8001734:	f00e f9f8 	bl	800fb28 <__run_sweep_veneer>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET); //turn off red LED
 8001738:	2200      	movs	r2, #0
 800173a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800173e:	4809      	ldr	r0, [pc, #36]	; (8001764 <main+0x394>)
 8001740:	f004 f9fe 	bl	8005b40 <HAL_GPIO_WritePin>
			//printf("Sweep complete.\r\n");
			printf("LO2GAIN: 0x%x \r\n", MW_power);
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <main+0x398>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	4619      	mov	r1, r3
 800174a:	4808      	ldr	r0, [pc, #32]	; (800176c <main+0x39c>)
 800174c:	f00c f91e 	bl	800d98c <iprintf>
		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 8001750:	e737      	b.n	80015c2 <main+0x1f2>
 8001752:	bf00      	nop
 8001754:	20000000 	.word	0x20000000
 8001758:	58020800 	.word	0x58020800
 800175c:	20000694 	.word	0x20000694
 8001760:	2000068d 	.word	0x2000068d
 8001764:	58020400 	.word	0x58020400
 8001768:	20000008 	.word	0x20000008
 800176c:	0800fe40 	.word	0x0800fe40

08001770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b0a4      	sub	sp, #144	; 0x90
 8001774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001776:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800177a:	224c      	movs	r2, #76	; 0x4c
 800177c:	2100      	movs	r1, #0
 800177e:	4618      	mov	r0, r3
 8001780:	f00b fcb8 	bl	800d0f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001788:	2220      	movs	r2, #32
 800178a:	2100      	movs	r1, #0
 800178c:	4618      	mov	r0, r3
 800178e:	f00b fcb1 	bl	800d0f4 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8001792:	f107 030c 	add.w	r3, r7, #12
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
 80017a0:	611a      	str	r2, [r3, #16]
 80017a2:	615a      	str	r2, [r3, #20]

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80017a4:	2002      	movs	r0, #2
 80017a6:	f006 fa53 	bl	8007c50 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017aa:	2300      	movs	r3, #0
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	4b4c      	ldr	r3, [pc, #304]	; (80018e0 <SystemClock_Config+0x170>)
 80017b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b2:	4a4b      	ldr	r2, [pc, #300]	; (80018e0 <SystemClock_Config+0x170>)
 80017b4:	f023 0301 	bic.w	r3, r3, #1
 80017b8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80017ba:	4b49      	ldr	r3, [pc, #292]	; (80018e0 <SystemClock_Config+0x170>)
 80017bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	4b47      	ldr	r3, [pc, #284]	; (80018e4 <SystemClock_Config+0x174>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	4a46      	ldr	r2, [pc, #280]	; (80018e4 <SystemClock_Config+0x174>)
 80017ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017ce:	6193      	str	r3, [r2, #24]
 80017d0:	4b44      	ldr	r3, [pc, #272]	; (80018e4 <SystemClock_Config+0x174>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80017dc:	bf00      	nop
 80017de:	4b41      	ldr	r3, [pc, #260]	; (80018e4 <SystemClock_Config+0x174>)
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017ea:	d1f8      	bne.n	80017de <SystemClock_Config+0x6e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80017ec:	f006 fa20 	bl	8007c30 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80017f0:	f001 fb36 	bl	8002e60 <HAL_GetREVID>
 80017f4:	4b3c      	ldr	r3, [pc, #240]	; (80018e8 <SystemClock_Config+0x178>)
 80017f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f8:	4a3b      	ldr	r2, [pc, #236]	; (80018e8 <SystemClock_Config+0x178>)
 80017fa:	f023 0318 	bic.w	r3, r3, #24
 80017fe:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8001800:	2325      	movs	r3, #37	; 0x25
 8001802:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001804:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001808:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800180a:	2301      	movs	r3, #1
 800180c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800180e:	2301      	movs	r3, #1
 8001810:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001812:	2302      	movs	r3, #2
 8001814:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001816:	2302      	movs	r3, #2
 8001818:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800181a:	2301      	movs	r3, #1
 800181c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 80;
 800181e:	2350      	movs	r3, #80	; 0x50
 8001820:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001822:	2302      	movs	r3, #2
 8001824:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001826:	2304      	movs	r3, #4
 8001828:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800182a:	2302      	movs	r3, #2
 800182c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001830:	230c      	movs	r3, #12
 8001832:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001836:	2300      	movs	r3, #0
 8001838:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001842:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001846:	4618      	mov	r0, r3
 8001848:	f006 fa3c 	bl	8007cc4 <HAL_RCC_OscConfig>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001852:	f000 fd19 	bl	8002288 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001856:	233f      	movs	r3, #63	; 0x3f
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800185a:	2303      	movs	r3, #3
 800185c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800185e:	2300      	movs	r3, #0
 8001860:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 8001862:	2309      	movs	r3, #9
 8001864:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001866:	2300      	movs	r3, #0
 8001868:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800186a:	2300      	movs	r3, #0
 800186c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV16;
 800186e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001872:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001874:	2300      	movs	r3, #0
 8001876:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800187c:	2101      	movs	r1, #1
 800187e:	4618      	mov	r0, r3
 8001880:	f006 fe7a 	bl	8008578 <HAL_RCC_ClockConfig>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <SystemClock_Config+0x11e>
  {
    Error_Handler();
 800188a:	f000 fcfd 	bl	8002288 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800188e:	f007 f829 	bl	80088e4 <HAL_RCC_EnableCSS>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8001892:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <SystemClock_Config+0x178>)
 8001894:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001898:	4a13      	ldr	r2, [pc, #76]	; (80018e8 <SystemClock_Config+0x178>)
 800189a:	f043 0302 	orr.w	r3, r3, #2
 800189e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <SystemClock_Config+0x178>)
 80018a4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 80018b0:	2300      	movs	r3, #0
 80018b2:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 80018b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80018b8:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 80018be:	f240 53b7 	movw	r3, #1463	; 0x5b7
 80018c2:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 80018c4:	2322      	movs	r3, #34	; 0x22
 80018c6:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 80018c8:	2320      	movs	r3, #32
 80018ca:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 80018cc:	f107 030c 	add.w	r3, r7, #12
 80018d0:	4618      	mov	r0, r3
 80018d2:	f009 fda3 	bl	800b41c <HAL_RCCEx_CRSConfig>
}
 80018d6:	bf00      	nop
 80018d8:	3790      	adds	r7, #144	; 0x90
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	58000400 	.word	0x58000400
 80018e4:	58024800 	.word	0x58024800
 80018e8:	58024400 	.word	0x58024400

080018ec <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b088      	sub	sp, #32
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
 8001900:	615a      	str	r2, [r3, #20]
 8001902:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001904:	4b28      	ldr	r3, [pc, #160]	; (80019a8 <MX_ADC3_Init+0xbc>)
 8001906:	4a29      	ldr	r2, [pc, #164]	; (80019ac <MX_ADC3_Init+0xc0>)
 8001908:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800190a:	4b27      	ldr	r3, [pc, #156]	; (80019a8 <MX_ADC3_Init+0xbc>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001910:	4b25      	ldr	r3, [pc, #148]	; (80019a8 <MX_ADC3_Init+0xbc>)
 8001912:	2200      	movs	r2, #0
 8001914:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001916:	4b24      	ldr	r3, [pc, #144]	; (80019a8 <MX_ADC3_Init+0xbc>)
 8001918:	2204      	movs	r2, #4
 800191a:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800191c:	4b22      	ldr	r3, [pc, #136]	; (80019a8 <MX_ADC3_Init+0xbc>)
 800191e:	2200      	movs	r2, #0
 8001920:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001922:	4b21      	ldr	r3, [pc, #132]	; (80019a8 <MX_ADC3_Init+0xbc>)
 8001924:	2200      	movs	r2, #0
 8001926:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8001928:	4b1f      	ldr	r3, [pc, #124]	; (80019a8 <MX_ADC3_Init+0xbc>)
 800192a:	2201      	movs	r2, #1
 800192c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800192e:	4b1e      	ldr	r3, [pc, #120]	; (80019a8 <MX_ADC3_Init+0xbc>)
 8001930:	2200      	movs	r2, #0
 8001932:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 8001934:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <MX_ADC3_Init+0xbc>)
 8001936:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800193a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800193c:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <MX_ADC3_Init+0xbc>)
 800193e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001942:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001944:	4b18      	ldr	r3, [pc, #96]	; (80019a8 <MX_ADC3_Init+0xbc>)
 8001946:	2200      	movs	r2, #0
 8001948:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800194a:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <MX_ADC3_Init+0xbc>)
 800194c:	2200      	movs	r2, #0
 800194e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001950:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <MX_ADC3_Init+0xbc>)
 8001952:	2200      	movs	r2, #0
 8001954:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001956:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <MX_ADC3_Init+0xbc>)
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800195e:	4812      	ldr	r0, [pc, #72]	; (80019a8 <MX_ADC3_Init+0xbc>)
 8001960:	f001 fcd0 	bl	8003304 <HAL_ADC_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_ADC3_Init+0x82>
  {
    Error_Handler();
 800196a:	f000 fc8d 	bl	8002288 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800196e:	2301      	movs	r3, #1
 8001970:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001972:	2306      	movs	r3, #6
 8001974:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800197a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800197e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001980:	2304      	movs	r3, #4
 8001982:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001988:	2300      	movs	r3, #0
 800198a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800198c:	1d3b      	adds	r3, r7, #4
 800198e:	4619      	mov	r1, r3
 8001990:	4805      	ldr	r0, [pc, #20]	; (80019a8 <MX_ADC3_Init+0xbc>)
 8001992:	f002 f9f5 	bl	8003d80 <HAL_ADC_ConfigChannel>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 800199c:	f000 fc74 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80019a0:	bf00      	nop
 80019a2:	3720      	adds	r7, #32
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000324 	.word	0x20000324
 80019ac:	58026000 	.word	0x58026000

080019b0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	; 0x28
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	2224      	movs	r2, #36	; 0x24
 80019ba:	2100      	movs	r1, #0
 80019bc:	4618      	mov	r0, r3
 80019be:	f00b fb99 	bl	800d0f4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80019c2:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <MX_DAC1_Init+0x5c>)
 80019c4:	4a12      	ldr	r2, [pc, #72]	; (8001a10 <MX_DAC1_Init+0x60>)
 80019c6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80019c8:	4810      	ldr	r0, [pc, #64]	; (8001a0c <MX_DAC1_Init+0x5c>)
 80019ca:	f003 f8f6 	bl	8004bba <HAL_DAC_Init>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80019d4:	f000 fc58 	bl	8002288 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80019dc:	2300      	movs	r3, #0
 80019de:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80019e4:	2301      	movs	r3, #1
 80019e6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80019ec:	1d3b      	adds	r3, r7, #4
 80019ee:	2200      	movs	r2, #0
 80019f0:	4619      	mov	r1, r3
 80019f2:	4806      	ldr	r0, [pc, #24]	; (8001a0c <MX_DAC1_Init+0x5c>)
 80019f4:	f003 f97a 	bl	8004cec <HAL_DAC_ConfigChannel>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80019fe:	f000 fc43 	bl	8002288 <Error_Handler>
//    Error_Handler();
//  }

  /* USER CODE END DAC1_Init 2 */

}
 8001a02:	bf00      	nop
 8001a04:	3728      	adds	r7, #40	; 0x28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000388 	.word	0x20000388
 8001a10:	40007400 	.word	0x40007400

08001a14 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001a18:	4b1e      	ldr	r3, [pc, #120]	; (8001a94 <MX_ETH_Init+0x80>)
 8001a1a:	4a1f      	ldr	r2, [pc, #124]	; (8001a98 <MX_ETH_Init+0x84>)
 8001a1c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001a1e:	4b1f      	ldr	r3, [pc, #124]	; (8001a9c <MX_ETH_Init+0x88>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001a24:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <MX_ETH_Init+0x88>)
 8001a26:	2280      	movs	r2, #128	; 0x80
 8001a28:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001a2a:	4b1c      	ldr	r3, [pc, #112]	; (8001a9c <MX_ETH_Init+0x88>)
 8001a2c:	22e1      	movs	r2, #225	; 0xe1
 8001a2e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001a30:	4b1a      	ldr	r3, [pc, #104]	; (8001a9c <MX_ETH_Init+0x88>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001a36:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <MX_ETH_Init+0x88>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001a3c:	4b17      	ldr	r3, [pc, #92]	; (8001a9c <MX_ETH_Init+0x88>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001a42:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <MX_ETH_Init+0x80>)
 8001a44:	4a15      	ldr	r2, [pc, #84]	; (8001a9c <MX_ETH_Init+0x88>)
 8001a46:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001a48:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <MX_ETH_Init+0x80>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001a4e:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <MX_ETH_Init+0x80>)
 8001a50:	4a13      	ldr	r2, [pc, #76]	; (8001aa0 <MX_ETH_Init+0x8c>)
 8001a52:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001a54:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <MX_ETH_Init+0x80>)
 8001a56:	4a13      	ldr	r2, [pc, #76]	; (8001aa4 <MX_ETH_Init+0x90>)
 8001a58:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <MX_ETH_Init+0x80>)
 8001a5c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001a60:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001a62:	480c      	ldr	r0, [pc, #48]	; (8001a94 <MX_ETH_Init+0x80>)
 8001a64:	f003 fa80 	bl	8004f68 <HAL_ETH_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8001a6e:	f000 fc0b 	bl	8002288 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001a72:	2238      	movs	r2, #56	; 0x38
 8001a74:	2100      	movs	r1, #0
 8001a76:	480c      	ldr	r0, [pc, #48]	; (8001aa8 <MX_ETH_Init+0x94>)
 8001a78:	f00b fb3c 	bl	800d0f4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001a7c:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <MX_ETH_Init+0x94>)
 8001a7e:	2221      	movs	r2, #33	; 0x21
 8001a80:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001a82:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <MX_ETH_Init+0x94>)
 8001a84:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001a88:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001a8a:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <MX_ETH_Init+0x94>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001a90:	bf00      	nop
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	2000039c 	.word	0x2000039c
 8001a98:	40028000 	.word	0x40028000
 8001a9c:	200006a4 	.word	0x200006a4
 8001aa0:	20000270 	.word	0x20000270
 8001aa4:	20000210 	.word	0x20000210
 8001aa8:	200002ec 	.word	0x200002ec

08001aac <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b0a4      	sub	sp, #144	; 0x90
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8001ab2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	605a      	str	r2, [r3, #4]
 8001abc:	609a      	str	r2, [r3, #8]
 8001abe:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8001ac0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ac4:	2254      	movs	r2, #84	; 0x54
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f00b fb13 	bl	800d0f4 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8001ace:	f107 0320 	add.w	r3, r7, #32
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8001ada:	463b      	mov	r3, r7
 8001adc:	2220      	movs	r2, #32
 8001ade:	2100      	movs	r1, #0
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f00b fb07 	bl	800d0f4 <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */

  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 8001ae6:	4b98      	ldr	r3, [pc, #608]	; (8001d48 <MX_HRTIM_Init+0x29c>)
 8001ae8:	4a98      	ldr	r2, [pc, #608]	; (8001d4c <MX_HRTIM_Init+0x2a0>)
 8001aea:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8001aec:	4b96      	ldr	r3, [pc, #600]	; (8001d48 <MX_HRTIM_Init+0x29c>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8001af2:	4b95      	ldr	r3, [pc, #596]	; (8001d48 <MX_HRTIM_Init+0x29c>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8001af8:	4893      	ldr	r0, [pc, #588]	; (8001d48 <MX_HRTIM_Init+0x29c>)
 8001afa:	f004 f879 	bl	8005bf0 <HAL_HRTIM_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_HRTIM_Init+0x5c>
  {
    Error_Handler();
 8001b04:	f000 fbc0 	bl	8002288 <Error_Handler>
  }
  pTimeBaseCfg.Period = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH+POP_CYCLE_DELAY;
 8001b08:	f24c 2318 	movw	r3, #49688	; 0xc218
 8001b0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8001b10:	2300      	movs	r3, #0
 8001b12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV4;
 8001b16:	2307      	movs	r3, #7
 8001b18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8001b1c:	2308      	movs	r3, #8
 8001b1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8001b22:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b26:	461a      	mov	r2, r3
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4887      	ldr	r0, [pc, #540]	; (8001d48 <MX_HRTIM_Init+0x29c>)
 8001b2c:	f004 f930 	bl	8005d90 <HAL_HRTIM_TimeBaseConfig>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_HRTIM_Init+0x8e>
  {
    Error_Handler();
 8001b36:	f000 fba7 	bl	8002288 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP3|HRTIM_TIM_IT_REP;
 8001b3a:	2314      	movs	r3, #20
 8001b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 8001b42:	2300      	movs	r3, #0
 8001b44:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 8001b46:	2300      	movs	r3, #0
 8001b48:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8001b52:	2300      	movs	r3, #0
 8001b54:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8001b56:	2300      	movs	r3, #0
 8001b58:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8001b62:	2300      	movs	r3, #0
 8001b64:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8001b76:	2300      	movs	r3, #0
 8001b78:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8001b82:	2300      	movs	r3, #0
 8001b84:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8001b86:	2300      	movs	r3, #0
 8001b88:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8001b8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b92:	461a      	mov	r2, r3
 8001b94:	2100      	movs	r1, #0
 8001b96:	486c      	ldr	r0, [pc, #432]	; (8001d48 <MX_HRTIM_Init+0x29c>)
 8001b98:	f004 f922 	bl	8005de0 <HAL_HRTIM_WaveformTimerConfig>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_HRTIM_Init+0xfa>
  {
    Error_Handler();
 8001ba2:	f000 fb71 	bl	8002288 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP2|HRTIM_TIM_IT_CMP3;
 8001ba6:	2306      	movs	r3, #6
 8001ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8001baa:	2300      	movs	r3, #0
 8001bac:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 8001bae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	2104      	movs	r1, #4
 8001bb6:	4864      	ldr	r0, [pc, #400]	; (8001d48 <MX_HRTIM_Init+0x29c>)
 8001bb8:	f004 f912 	bl	8005de0 <HAL_HRTIM_WaveformTimerConfig>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_HRTIM_Init+0x11a>
  {
    Error_Handler();
 8001bc2:	f000 fb61 	bl	8002288 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH;
 8001bc6:	f240 631b 	movw	r3, #1563	; 0x61b
 8001bca:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8001bcc:	f107 0320 	add.w	r3, r7, #32
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	485c      	ldr	r0, [pc, #368]	; (8001d48 <MX_HRTIM_Init+0x29c>)
 8001bd6:	f004 f975 	bl	8005ec4 <HAL_HRTIM_WaveformCompareConfig>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_HRTIM_Init+0x138>
  {
    Error_Handler();
 8001be0:	f000 fb52 	bl	8002288 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME;
 8001be4:	f244 5395 	movw	r3, #17813	; 0x4595
 8001be8:	623b      	str	r3, [r7, #32]
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8001bea:	2300      	movs	r3, #0
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8001bf2:	f107 0320 	add.w	r3, r7, #32
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4853      	ldr	r0, [pc, #332]	; (8001d48 <MX_HRTIM_Init+0x29c>)
 8001bfc:	f004 f962 	bl	8005ec4 <HAL_HRTIM_WaveformCompareConfig>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_HRTIM_Init+0x15e>
  {
    Error_Handler();
 8001c06:	f000 fb3f 	bl	8002288 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH;
 8001c0a:	f640 536e 	movw	r3, #3438	; 0xd6e
 8001c0e:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8001c10:	f107 0320 	add.w	r3, r7, #32
 8001c14:	2202      	movs	r2, #2
 8001c16:	2104      	movs	r1, #4
 8001c18:	484b      	ldr	r0, [pc, #300]	; (8001d48 <MX_HRTIM_Init+0x29c>)
 8001c1a:	f004 f953 	bl	8005ec4 <HAL_HRTIM_WaveformCompareConfig>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_HRTIM_Init+0x17c>
  {
    Error_Handler();
 8001c24:	f000 fb30 	bl	8002288 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH;
 8001c28:	f644 0306 	movw	r3, #18438	; 0x4806
 8001c2c:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8001c2e:	f107 0320 	add.w	r3, r7, #32
 8001c32:	2204      	movs	r2, #4
 8001c34:	2100      	movs	r1, #0
 8001c36:	4844      	ldr	r0, [pc, #272]	; (8001d48 <MX_HRTIM_Init+0x29c>)
 8001c38:	f004 f944 	bl	8005ec4 <HAL_HRTIM_WaveformCompareConfig>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_HRTIM_Init+0x19a>
  {
    Error_Handler();
 8001c42:	f000 fb21 	bl	8002288 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME+MICROWAVE_WIDTH;
 8001c46:	f244 435d 	movw	r3, #17501	; 0x445d
 8001c4a:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_4, &pCompareCfg) != HAL_OK)
 8001c4c:	f107 0320 	add.w	r3, r7, #32
 8001c50:	2208      	movs	r2, #8
 8001c52:	2104      	movs	r1, #4
 8001c54:	483c      	ldr	r0, [pc, #240]	; (8001d48 <MX_HRTIM_Init+0x29c>)
 8001c56:	f004 f935 	bl	8005ec4 <HAL_HRTIM_WaveformCompareConfig>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_HRTIM_Init+0x1b8>
  {
    Error_Handler();
 8001c60:	f000 fb12 	bl	8002288 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 8001c64:	2302      	movs	r3, #2
 8001c66:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1|HRTIM_OUTPUTSET_TIMCMP3;
 8001c68:	2328      	movs	r3, #40	; 0x28
 8001c6a:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMPER;
 8001c6c:	2314      	movs	r3, #20
 8001c6e:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 8001c74:	2308      	movs	r3, #8
 8001c76:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8001c80:	2300      	movs	r3, #0
 8001c82:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8001c84:	463b      	mov	r3, r7
 8001c86:	2201      	movs	r2, #1
 8001c88:	2100      	movs	r1, #0
 8001c8a:	482f      	ldr	r0, [pc, #188]	; (8001d48 <MX_HRTIM_Init+0x29c>)
 8001c8c:	f004 fa88 	bl	80061a0 <HAL_HRTIM_WaveformOutputConfig>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_HRTIM_Init+0x1ee>
  {
    Error_Handler();
 8001c96:	f000 faf7 	bl	8002288 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	603b      	str	r3, [r7, #0]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMCMP4;
 8001c9e:	2350      	movs	r3, #80	; 0x50
 8001ca0:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 8001ca6:	463b      	mov	r3, r7
 8001ca8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cac:	2104      	movs	r1, #4
 8001cae:	4826      	ldr	r0, [pc, #152]	; (8001d48 <MX_HRTIM_Init+0x29c>)
 8001cb0:	f004 fa76 	bl	80061a0 <HAL_HRTIM_WaveformOutputConfig>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_HRTIM_Init+0x212>
  {
    Error_Handler();
 8001cba:	f000 fae5 	bl	8002288 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP3;
 8001cc2:	2320      	movs	r3, #32
 8001cc4:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 8001cc6:	2310      	movs	r3, #16
 8001cc8:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 8001cca:	2308      	movs	r3, #8
 8001ccc:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8001cce:	463b      	mov	r3, r7
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	481c      	ldr	r0, [pc, #112]	; (8001d48 <MX_HRTIM_Init+0x29c>)
 8001cd6:	f004 fa63 	bl	80061a0 <HAL_HRTIM_WaveformOutputConfig>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_HRTIM_Init+0x238>
  {
    Error_Handler();
 8001ce0:	f000 fad2 	bl	8002288 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8001ce4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001ce8:	461a      	mov	r2, r3
 8001cea:	2104      	movs	r1, #4
 8001cec:	4816      	ldr	r0, [pc, #88]	; (8001d48 <MX_HRTIM_Init+0x29c>)
 8001cee:	f004 f84f 	bl	8005d90 <HAL_HRTIM_TimeBaseConfig>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_HRTIM_Init+0x250>
  {
    Error_Handler();
 8001cf8:	f000 fac6 	bl	8002288 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY;
 8001cfc:	f240 7353 	movw	r3, #1875	; 0x753
 8001d00:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8001d02:	f107 0320 	add.w	r3, r7, #32
 8001d06:	2201      	movs	r2, #1
 8001d08:	2104      	movs	r1, #4
 8001d0a:	480f      	ldr	r0, [pc, #60]	; (8001d48 <MX_HRTIM_Init+0x29c>)
 8001d0c:	f004 f8da 	bl	8005ec4 <HAL_HRTIM_WaveformCompareConfig>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_HRTIM_Init+0x26e>
  {
    Error_Handler();
 8001d16:	f000 fab7 	bl	8002288 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME;
 8001d1a:	f643 6342 	movw	r3, #15938	; 0x3e42
 8001d1e:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8001d20:	f107 0320 	add.w	r3, r7, #32
 8001d24:	2204      	movs	r2, #4
 8001d26:	2104      	movs	r1, #4
 8001d28:	4807      	ldr	r0, [pc, #28]	; (8001d48 <MX_HRTIM_Init+0x29c>)
 8001d2a:	f004 f8cb 	bl	8005ec4 <HAL_HRTIM_WaveformCompareConfig>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_HRTIM_Init+0x28c>
  {
    Error_Handler();
 8001d34:	f000 faa8 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 8001d38:	4803      	ldr	r0, [pc, #12]	; (8001d48 <MX_HRTIM_Init+0x29c>)
 8001d3a:	f000 fcb5 	bl	80026a8 <HAL_HRTIM_MspPostInit>

}
 8001d3e:	bf00      	nop
 8001d40:	3790      	adds	r7, #144	; 0x90
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	2000044c 	.word	0x2000044c
 8001d4c:	40017400 	.word	0x40017400

08001d50 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001d54:	4b13      	ldr	r3, [pc, #76]	; (8001da4 <MX_LPTIM1_Init+0x54>)
 8001d56:	4a14      	ldr	r2, [pc, #80]	; (8001da8 <MX_LPTIM1_Init+0x58>)
 8001d58:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001d5a:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <MX_LPTIM1_Init+0x54>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV32;
 8001d60:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <MX_LPTIM1_Init+0x54>)
 8001d62:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8001d66:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001d68:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <MX_LPTIM1_Init+0x54>)
 8001d6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d6e:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001d70:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <MX_LPTIM1_Init+0x54>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001d76:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <MX_LPTIM1_Init+0x54>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001d7c:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <MX_LPTIM1_Init+0x54>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001d82:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <MX_LPTIM1_Init+0x54>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001d88:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <MX_LPTIM1_Init+0x54>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001d8e:	4805      	ldr	r0, [pc, #20]	; (8001da4 <MX_LPTIM1_Init+0x54>)
 8001d90:	f005 fb4e 	bl	8007430 <HAL_LPTIM_Init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8001d9a:	f000 fa75 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000528 	.word	0x20000528
 8001da8:	40002400 	.word	0x40002400

08001dac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b088      	sub	sp, #32
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001db2:	f107 0310 	add.w	r3, r7, #16
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	605a      	str	r2, [r3, #4]
 8001dbc:	609a      	str	r2, [r3, #8]
 8001dbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc0:	1d3b      	adds	r3, r7, #4
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001dca:	4b20      	ldr	r3, [pc, #128]	; (8001e4c <MX_TIM1_Init+0xa0>)
 8001dcc:	4a20      	ldr	r2, [pc, #128]	; (8001e50 <MX_TIM1_Init+0xa4>)
 8001dce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1249;
 8001dd0:	4b1e      	ldr	r3, [pc, #120]	; (8001e4c <MX_TIM1_Init+0xa0>)
 8001dd2:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001dd6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd8:	4b1c      	ldr	r3, [pc, #112]	; (8001e4c <MX_TIM1_Init+0xa0>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001dde:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <MX_TIM1_Init+0xa0>)
 8001de0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001de4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de6:	4b19      	ldr	r3, [pc, #100]	; (8001e4c <MX_TIM1_Init+0xa0>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001dec:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <MX_TIM1_Init+0xa0>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df2:	4b16      	ldr	r3, [pc, #88]	; (8001e4c <MX_TIM1_Init+0xa0>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001df8:	4814      	ldr	r0, [pc, #80]	; (8001e4c <MX_TIM1_Init+0xa0>)
 8001dfa:	f009 fcc9 	bl	800b790 <HAL_TIM_Base_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001e04:	f000 fa40 	bl	8002288 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e0e:	f107 0310 	add.w	r3, r7, #16
 8001e12:	4619      	mov	r1, r3
 8001e14:	480d      	ldr	r0, [pc, #52]	; (8001e4c <MX_TIM1_Init+0xa0>)
 8001e16:	f009 fd13 	bl	800b840 <HAL_TIM_ConfigClockSource>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001e20:	f000 fa32 	bl	8002288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e24:	2300      	movs	r3, #0
 8001e26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e30:	1d3b      	adds	r3, r7, #4
 8001e32:	4619      	mov	r1, r3
 8001e34:	4805      	ldr	r0, [pc, #20]	; (8001e4c <MX_TIM1_Init+0xa0>)
 8001e36:	f009 ff33 	bl	800bca0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001e40:	f000 fa22 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e44:	bf00      	nop
 8001e46:	3720      	adds	r7, #32
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20000560 	.word	0x20000560
 8001e50:	40010000 	.word	0x40010000

08001e54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b088      	sub	sp, #32
 8001e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e5a:	f107 0310 	add.w	r3, r7, #16
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	605a      	str	r2, [r3, #4]
 8001e64:	609a      	str	r2, [r3, #8]
 8001e66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e68:	1d3b      	adds	r3, r7, #4
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	605a      	str	r2, [r3, #4]
 8001e70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e72:	4b1d      	ldr	r3, [pc, #116]	; (8001ee8 <MX_TIM3_Init+0x94>)
 8001e74:	4a1d      	ldr	r2, [pc, #116]	; (8001eec <MX_TIM3_Init+0x98>)
 8001e76:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 124;
 8001e78:	4b1b      	ldr	r3, [pc, #108]	; (8001ee8 <MX_TIM3_Init+0x94>)
 8001e7a:	227c      	movs	r2, #124	; 0x7c
 8001e7c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <MX_TIM3_Init+0x94>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001e84:	4b18      	ldr	r3, [pc, #96]	; (8001ee8 <MX_TIM3_Init+0x94>)
 8001e86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e8a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e8c:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <MX_TIM3_Init+0x94>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e92:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <MX_TIM3_Init+0x94>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e98:	4813      	ldr	r0, [pc, #76]	; (8001ee8 <MX_TIM3_Init+0x94>)
 8001e9a:	f009 fc79 	bl	800b790 <HAL_TIM_Base_Init>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001ea4:	f000 f9f0 	bl	8002288 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001eae:	f107 0310 	add.w	r3, r7, #16
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	480c      	ldr	r0, [pc, #48]	; (8001ee8 <MX_TIM3_Init+0x94>)
 8001eb6:	f009 fcc3 	bl	800b840 <HAL_TIM_ConfigClockSource>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001ec0:	f000 f9e2 	bl	8002288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ecc:	1d3b      	adds	r3, r7, #4
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <MX_TIM3_Init+0x94>)
 8001ed2:	f009 fee5 	bl	800bca0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001edc:	f000 f9d4 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ee0:	bf00      	nop
 8001ee2:	3720      	adds	r7, #32
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	200005ac 	.word	0x200005ac
 8001eec:	40000400 	.word	0x40000400

08001ef0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ef4:	4b22      	ldr	r3, [pc, #136]	; (8001f80 <MX_USART3_UART_Init+0x90>)
 8001ef6:	4a23      	ldr	r2, [pc, #140]	; (8001f84 <MX_USART3_UART_Init+0x94>)
 8001ef8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8001efa:	4b21      	ldr	r3, [pc, #132]	; (8001f80 <MX_USART3_UART_Init+0x90>)
 8001efc:	4a22      	ldr	r2, [pc, #136]	; (8001f88 <MX_USART3_UART_Init+0x98>)
 8001efe:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f00:	4b1f      	ldr	r3, [pc, #124]	; (8001f80 <MX_USART3_UART_Init+0x90>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f06:	4b1e      	ldr	r3, [pc, #120]	; (8001f80 <MX_USART3_UART_Init+0x90>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f0c:	4b1c      	ldr	r3, [pc, #112]	; (8001f80 <MX_USART3_UART_Init+0x90>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f12:	4b1b      	ldr	r3, [pc, #108]	; (8001f80 <MX_USART3_UART_Init+0x90>)
 8001f14:	220c      	movs	r2, #12
 8001f16:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f18:	4b19      	ldr	r3, [pc, #100]	; (8001f80 <MX_USART3_UART_Init+0x90>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f1e:	4b18      	ldr	r3, [pc, #96]	; (8001f80 <MX_USART3_UART_Init+0x90>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f24:	4b16      	ldr	r3, [pc, #88]	; (8001f80 <MX_USART3_UART_Init+0x90>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f2a:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <MX_USART3_UART_Init+0x90>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f30:	4b13      	ldr	r3, [pc, #76]	; (8001f80 <MX_USART3_UART_Init+0x90>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f36:	4812      	ldr	r0, [pc, #72]	; (8001f80 <MX_USART3_UART_Init+0x90>)
 8001f38:	f009 ff40 	bl	800bdbc <HAL_UART_Init>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8001f42:	f000 f9a1 	bl	8002288 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f46:	2100      	movs	r1, #0
 8001f48:	480d      	ldr	r0, [pc, #52]	; (8001f80 <MX_USART3_UART_Init+0x90>)
 8001f4a:	f00a ffd0 	bl	800ceee <HAL_UARTEx_SetTxFifoThreshold>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8001f54:	f000 f998 	bl	8002288 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4809      	ldr	r0, [pc, #36]	; (8001f80 <MX_USART3_UART_Init+0x90>)
 8001f5c:	f00b f805 	bl	800cf6a <HAL_UARTEx_SetRxFifoThreshold>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8001f66:	f000 f98f 	bl	8002288 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001f6a:	4805      	ldr	r0, [pc, #20]	; (8001f80 <MX_USART3_UART_Init+0x90>)
 8001f6c:	f00a ff86 	bl	800ce7c <HAL_UARTEx_DisableFifoMode>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8001f76:	f000 f987 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	200005f8 	.word	0x200005f8
 8001f84:	40004800 	.word	0x40004800
 8001f88:	000f4240 	.word	0x000f4240

08001f8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08e      	sub	sp, #56	; 0x38
 8001f90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	605a      	str	r2, [r3, #4]
 8001f9c:	609a      	str	r2, [r3, #8]
 8001f9e:	60da      	str	r2, [r3, #12]
 8001fa0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fa2:	4ba0      	ldr	r3, [pc, #640]	; (8002224 <MX_GPIO_Init+0x298>)
 8001fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fa8:	4a9e      	ldr	r2, [pc, #632]	; (8002224 <MX_GPIO_Init+0x298>)
 8001faa:	f043 0310 	orr.w	r3, r3, #16
 8001fae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fb2:	4b9c      	ldr	r3, [pc, #624]	; (8002224 <MX_GPIO_Init+0x298>)
 8001fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fb8:	f003 0310 	and.w	r3, r3, #16
 8001fbc:	623b      	str	r3, [r7, #32]
 8001fbe:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fc0:	4b98      	ldr	r3, [pc, #608]	; (8002224 <MX_GPIO_Init+0x298>)
 8001fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fc6:	4a97      	ldr	r2, [pc, #604]	; (8002224 <MX_GPIO_Init+0x298>)
 8001fc8:	f043 0304 	orr.w	r3, r3, #4
 8001fcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fd0:	4b94      	ldr	r3, [pc, #592]	; (8002224 <MX_GPIO_Init+0x298>)
 8001fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fd6:	f003 0304 	and.w	r3, r3, #4
 8001fda:	61fb      	str	r3, [r7, #28]
 8001fdc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fde:	4b91      	ldr	r3, [pc, #580]	; (8002224 <MX_GPIO_Init+0x298>)
 8001fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fe4:	4a8f      	ldr	r2, [pc, #572]	; (8002224 <MX_GPIO_Init+0x298>)
 8001fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fee:	4b8d      	ldr	r3, [pc, #564]	; (8002224 <MX_GPIO_Init+0x298>)
 8001ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff8:	61bb      	str	r3, [r7, #24]
 8001ffa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffc:	4b89      	ldr	r3, [pc, #548]	; (8002224 <MX_GPIO_Init+0x298>)
 8001ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002002:	4a88      	ldr	r2, [pc, #544]	; (8002224 <MX_GPIO_Init+0x298>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800200c:	4b85      	ldr	r3, [pc, #532]	; (8002224 <MX_GPIO_Init+0x298>)
 800200e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	617b      	str	r3, [r7, #20]
 8002018:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800201a:	4b82      	ldr	r3, [pc, #520]	; (8002224 <MX_GPIO_Init+0x298>)
 800201c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002020:	4a80      	ldr	r2, [pc, #512]	; (8002224 <MX_GPIO_Init+0x298>)
 8002022:	f043 0302 	orr.w	r3, r3, #2
 8002026:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800202a:	4b7e      	ldr	r3, [pc, #504]	; (8002224 <MX_GPIO_Init+0x298>)
 800202c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002038:	4b7a      	ldr	r3, [pc, #488]	; (8002224 <MX_GPIO_Init+0x298>)
 800203a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800203e:	4a79      	ldr	r2, [pc, #484]	; (8002224 <MX_GPIO_Init+0x298>)
 8002040:	f043 0320 	orr.w	r3, r3, #32
 8002044:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002048:	4b76      	ldr	r3, [pc, #472]	; (8002224 <MX_GPIO_Init+0x298>)
 800204a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800204e:	f003 0320 	and.w	r3, r3, #32
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002056:	4b73      	ldr	r3, [pc, #460]	; (8002224 <MX_GPIO_Init+0x298>)
 8002058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800205c:	4a71      	ldr	r2, [pc, #452]	; (8002224 <MX_GPIO_Init+0x298>)
 800205e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002062:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002066:	4b6f      	ldr	r3, [pc, #444]	; (8002224 <MX_GPIO_Init+0x298>)
 8002068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800206c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002070:	60bb      	str	r3, [r7, #8]
 8002072:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002074:	4b6b      	ldr	r3, [pc, #428]	; (8002224 <MX_GPIO_Init+0x298>)
 8002076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800207a:	4a6a      	ldr	r2, [pc, #424]	; (8002224 <MX_GPIO_Init+0x298>)
 800207c:	f043 0308 	orr.w	r3, r3, #8
 8002080:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002084:	4b67      	ldr	r3, [pc, #412]	; (8002224 <MX_GPIO_Init+0x298>)
 8002086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	607b      	str	r3, [r7, #4]
 8002090:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ATT_4_Pin|ATT_8_Pin|ATT_16_Pin, GPIO_PIN_SET);
 8002092:	2201      	movs	r2, #1
 8002094:	2134      	movs	r1, #52	; 0x34
 8002096:	4864      	ldr	r0, [pc, #400]	; (8002228 <MX_GPIO_Init+0x29c>)
 8002098:	f003 fd52 	bl	8005b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|MW_INVALID_Pin|LASER_TUNING_Pin|LD3_Pin
 800209c:	2200      	movs	r2, #0
 800209e:	f245 1103 	movw	r1, #20739	; 0x5103
 80020a2:	4862      	ldr	r0, [pc, #392]	; (800222c <MX_GPIO_Init+0x2a0>)
 80020a4:	f003 fd4c 	bl	8005b40 <HAL_GPIO_WritePin>
                          |SPARE_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET);
 80020a8:	2200      	movs	r2, #0
 80020aa:	2101      	movs	r1, #1
 80020ac:	4860      	ldr	r0, [pc, #384]	; (8002230 <MX_GPIO_Init+0x2a4>)
 80020ae:	f003 fd47 	bl	8005b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80020b2:	2200      	movs	r2, #0
 80020b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020b8:	485e      	ldr	r0, [pc, #376]	; (8002234 <MX_GPIO_Init+0x2a8>)
 80020ba:	f003 fd41 	bl	8005b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SCLK_Pin|MOSI_Pin|REG_EN_Pin, GPIO_PIN_RESET);
 80020be:	2200      	movs	r2, #0
 80020c0:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 80020c4:	485c      	ldr	r0, [pc, #368]	; (8002238 <MX_GPIO_Init+0x2ac>)
 80020c6:	f003 fd3b 	bl	8005b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 80020ca:	2201      	movs	r2, #1
 80020cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020d0:	4859      	ldr	r0, [pc, #356]	; (8002238 <MX_GPIO_Init+0x2ac>)
 80020d2:	f003 fd35 	bl	8005b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ATT_2_Pin|ATT_1_Pin|ATT_05_Pin|ATT_025_Pin
 80020d6:	2201      	movs	r2, #1
 80020d8:	21f8      	movs	r1, #248	; 0xf8
 80020da:	4856      	ldr	r0, [pc, #344]	; (8002234 <MX_GPIO_Init+0x2a8>)
 80020dc:	f003 fd30 	bl	8005b40 <HAL_GPIO_WritePin>
                          |ATT_LE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80020e0:	2200      	movs	r2, #0
 80020e2:	2102      	movs	r1, #2
 80020e4:	4850      	ldr	r0, [pc, #320]	; (8002228 <MX_GPIO_Init+0x29c>)
 80020e6:	f003 fd2b 	bl	8005b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ATT_4_Pin ATT_8_Pin ATT_16_Pin LD2_Pin */
  GPIO_InitStruct.Pin = ATT_4_Pin|ATT_8_Pin|ATT_16_Pin|LD2_Pin;
 80020ea:	2336      	movs	r3, #54	; 0x36
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ee:	2301      	movs	r3, #1
 80020f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f6:	2300      	movs	r3, #0
 80020f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020fe:	4619      	mov	r1, r3
 8002100:	4849      	ldr	r0, [pc, #292]	; (8002228 <MX_GPIO_Init+0x29c>)
 8002102:	f003 fb55 	bl	80057b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8002106:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800210c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002110:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800211a:	4619      	mov	r1, r3
 800211c:	4846      	ldr	r0, [pc, #280]	; (8002238 <MX_GPIO_Init+0x2ac>)
 800211e:	f003 fb47 	bl	80057b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin MW_INVALID_Pin LASER_TUNING_Pin LD3_Pin
                           SPARE_OUT_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|MW_INVALID_Pin|LASER_TUNING_Pin|LD3_Pin
 8002122:	f245 1303 	movw	r3, #20739	; 0x5103
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPARE_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002128:	2301      	movs	r3, #1
 800212a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002130:	2300      	movs	r3, #0
 8002132:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002138:	4619      	mov	r1, r3
 800213a:	483c      	ldr	r0, [pc, #240]	; (800222c <MX_GPIO_Init+0x2a0>)
 800213c:	f003 fb38 	bl	80057b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002140:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002146:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800214a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002150:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002154:	4619      	mov	r1, r3
 8002156:	4839      	ldr	r0, [pc, #228]	; (800223c <MX_GPIO_Init+0x2b0>)
 8002158:	f003 fb2a 	bl	80057b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SCOPE_TRIG_OUT_Pin */
  GPIO_InitStruct.Pin = SCOPE_TRIG_OUT_Pin;
 800215c:	2301      	movs	r3, #1
 800215e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002160:	2301      	movs	r3, #1
 8002162:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002168:	2300      	movs	r3, #0
 800216a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SCOPE_TRIG_OUT_GPIO_Port, &GPIO_InitStruct);
 800216c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002170:	4619      	mov	r1, r3
 8002172:	482f      	ldr	r0, [pc, #188]	; (8002230 <MX_GPIO_Init+0x2a4>)
 8002174:	f003 fb1c 	bl	80057b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ATT_2_Pin ATT_1_Pin ATT_05_Pin
                           ATT_025_Pin ATT_LE_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ATT_2_Pin|ATT_1_Pin|ATT_05_Pin
 8002178:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
                          |ATT_025_Pin|ATT_LE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800217e:	2301      	movs	r3, #1
 8002180:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002186:	2300      	movs	r3, #0
 8002188:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800218a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800218e:	4619      	mov	r1, r3
 8002190:	4828      	ldr	r0, [pc, #160]	; (8002234 <MX_GPIO_Init+0x2a8>)
 8002192:	f003 fb0d 	bl	80057b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8002196:	2380      	movs	r3, #128	; 0x80
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800219a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800219e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80021a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a8:	4619      	mov	r1, r3
 80021aa:	4821      	ldr	r0, [pc, #132]	; (8002230 <MX_GPIO_Init+0x2a4>)
 80021ac:	f003 fb00 	bl	80057b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCLK_Pin MOSI_Pin SEN_Pin REG_EN_Pin */
  GPIO_InitStruct.Pin = SCLK_Pin|MOSI_Pin|SEN_Pin|REG_EN_Pin;
 80021b0:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b6:	2301      	movs	r3, #1
 80021b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80021ba:	2302      	movs	r3, #2
 80021bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021be:	2300      	movs	r3, #0
 80021c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c6:	4619      	mov	r1, r3
 80021c8:	481b      	ldr	r0, [pc, #108]	; (8002238 <MX_GPIO_Init+0x2ac>)
 80021ca:	f003 faf1 	bl	80057b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80021ce:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d4:	2302      	movs	r3, #2
 80021d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021dc:	2300      	movs	r3, #0
 80021de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80021e0:	230a      	movs	r3, #10
 80021e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e8:	4619      	mov	r1, r3
 80021ea:	4815      	ldr	r0, [pc, #84]	; (8002240 <MX_GPIO_Init+0x2b4>)
 80021ec:	f003 fae0 	bl	80057b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MISO_Pin */
  GPIO_InitStruct.Pin = MISO_Pin;
 80021f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021f6:	2300      	movs	r3, #0
 80021f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 80021fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002202:	4619      	mov	r1, r3
 8002204:	480c      	ldr	r0, [pc, #48]	; (8002238 <MX_GPIO_Init+0x2ac>)
 8002206:	f003 fad3 	bl	80057b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800220a:	2200      	movs	r2, #0
 800220c:	2100      	movs	r1, #0
 800220e:	2028      	movs	r0, #40	; 0x28
 8002210:	f002 fc9f 	bl	8004b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002214:	2028      	movs	r0, #40	; 0x28
 8002216:	f002 fcb6 	bl	8004b86 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800221a:	bf00      	nop
 800221c:	3738      	adds	r7, #56	; 0x38
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	58024400 	.word	0x58024400
 8002228:	58021000 	.word	0x58021000
 800222c:	58020400 	.word	0x58020400
 8002230:	58021800 	.word	0x58021800
 8002234:	58020c00 	.word	0x58020c00
 8002238:	58020800 	.word	0x58020800
 800223c:	58021400 	.word	0x58021400
 8002240:	58020000 	.word	0x58020000

08002244 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  adc_val = HAL_ADC_GetValue(&hadc3);
 800224c:	480a      	ldr	r0, [pc, #40]	; (8002278 <HAL_ADC_ConvCpltCallback+0x34>)
 800224e:	f001 fb3b 	bl	80038c8 <HAL_ADC_GetValue>
 8002252:	4603      	mov	r3, r0
 8002254:	4a09      	ldr	r2, [pc, #36]	; (800227c <HAL_ADC_ConvCpltCallback+0x38>)
 8002256:	6013      	str	r3, [r2, #0]
  //printf("ADC value: %lu \r\n", adc_val);
  dac_val = adc_val >> 4;
 8002258:	4b08      	ldr	r3, [pc, #32]	; (800227c <HAL_ADC_ConvCpltCallback+0x38>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	091b      	lsrs	r3, r3, #4
 800225e:	4a08      	ldr	r2, [pc, #32]	; (8002280 <HAL_ADC_ConvCpltCallback+0x3c>)
 8002260:	6013      	str	r3, [r2, #0]
	  printf("ADC reading: %lu, max: %lu, min: %lu \r\n", adc_val, adc_max, adc_min);
  }
  //printf("ADC reading: %lu, max: %lu, min: %lu \r\n", adc_val, adc_max, adc_min);
#endif //QUANTIFY_ADC_NOISE
  //printf("ADC value: %lu, DAC value: %lu \r\n", adc_val, dac_val);
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_val);
 8002262:	4b07      	ldr	r3, [pc, #28]	; (8002280 <HAL_ADC_ConvCpltCallback+0x3c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2200      	movs	r2, #0
 8002268:	2100      	movs	r1, #0
 800226a:	4806      	ldr	r0, [pc, #24]	; (8002284 <HAL_ADC_ConvCpltCallback+0x40>)
 800226c:	f002 fd19 	bl	8004ca2 <HAL_DAC_SetValue>
  //HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
}
 8002270:	bf00      	nop
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20000324 	.word	0x20000324
 800227c:	20000698 	.word	0x20000698
 8002280:	2000069c 	.word	0x2000069c
 8002284:	20000388 	.word	0x20000388

08002288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800228c:	b672      	cpsid	i
}
 800228e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	__disable_irq();

	printf("Error handler routine called\r\n");
 8002290:	4810      	ldr	r0, [pc, #64]	; (80022d4 <Error_Handler+0x4c>)
 8002292:	f00b fc01 	bl	800da98 <puts>

	/* Disable the AOM */
	HAL_HRTIM_WaveformOutputStop(&hhrtim, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1);
 8002296:	f240 1103 	movw	r1, #259	; 0x103
 800229a:	480f      	ldr	r0, [pc, #60]	; (80022d8 <Error_Handler+0x50>)
 800229c:	f004 f8d5 	bl	800644a <HAL_HRTIM_WaveformOutputStop>
	HAL_HRTIM_WaveformCounterStop_IT(&hhrtim, HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E);
 80022a0:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 80022a4:	480c      	ldr	r0, [pc, #48]	; (80022d8 <Error_Handler+0x50>)
 80022a6:	f004 f96d 	bl	8006584 <HAL_HRTIM_WaveformCountStop_IT>

	/* Power down the synthesiser */
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0);
 80022aa:	2200      	movs	r2, #0
 80022ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022b0:	480a      	ldr	r0, [pc, #40]	; (80022dc <Error_Handler+0x54>)
 80022b2:	f003 fc45 	bl	8005b40 <HAL_GPIO_WritePin>

	while (1) {
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 80022b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022ba:	4809      	ldr	r0, [pc, #36]	; (80022e0 <Error_Handler+0x58>)
 80022bc:	f003 fc59 	bl	8005b72 <HAL_GPIO_TogglePin>
		timer_delay(SLOW_TIMER, ERROR_LED_DELAY);
 80022c0:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <Error_Handler+0x5c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022c8:	4611      	mov	r1, r2
 80022ca:	4618      	mov	r0, r3
 80022cc:	f00d fc24 	bl	800fb18 <__timer_delay_veneer>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 80022d0:	e7f1      	b.n	80022b6 <Error_Handler+0x2e>
 80022d2:	bf00      	nop
 80022d4:	0800fe54 	.word	0x0800fe54
 80022d8:	2000044c 	.word	0x2000044c
 80022dc:	58020800 	.word	0x58020800
 80022e0:	58020400 	.word	0x58020400
 80022e4:	20000000 	.word	0x20000000

080022e8 <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ee:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <HAL_MspInit+0x30>)
 80022f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022f4:	4a08      	ldr	r2, [pc, #32]	; (8002318 <HAL_MspInit+0x30>)
 80022f6:	f043 0302 	orr.w	r3, r3, #2
 80022fa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_MspInit+0x30>)
 8002300:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	607b      	str	r3, [r7, #4]
 800230a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	58024400 	.word	0x58024400

0800231c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b0b4      	sub	sp, #208	; 0xd0
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002324:	f107 0310 	add.w	r3, r7, #16
 8002328:	22c0      	movs	r2, #192	; 0xc0
 800232a:	2100      	movs	r1, #0
 800232c:	4618      	mov	r0, r3
 800232e:	f00a fee1 	bl	800d0f4 <memset>
  if(hadc->Instance==ADC3)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a2b      	ldr	r2, [pc, #172]	; (80023e4 <HAL_ADC_MspInit+0xc8>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d14e      	bne.n	80023da <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800233c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002340:	f04f 0300 	mov.w	r3, #0
 8002344:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8002348:	2301      	movs	r3, #1
 800234a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 800234c:	2313      	movs	r3, #19
 800234e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 79;
 8002350:	234f      	movs	r3, #79	; 0x4f
 8002352:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002354:	2302      	movs	r3, #2
 8002356:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002358:	2302      	movs	r3, #2
 800235a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800235c:	23c0      	movs	r3, #192	; 0xc0
 800235e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8002360:	2320      	movs	r3, #32
 8002362:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002368:	2300      	movs	r3, #0
 800236a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800236e:	f107 0310 	add.w	r3, r7, #16
 8002372:	4618      	mov	r0, r3
 8002374:	f006 fcb8 	bl	8008ce8 <HAL_RCCEx_PeriphCLKConfig>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 800237e:	f7ff ff83 	bl	8002288 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002382:	4b19      	ldr	r3, [pc, #100]	; (80023e8 <HAL_ADC_MspInit+0xcc>)
 8002384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002388:	4a17      	ldr	r2, [pc, #92]	; (80023e8 <HAL_ADC_MspInit+0xcc>)
 800238a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800238e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002392:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <HAL_ADC_MspInit+0xcc>)
 8002394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002398:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023a0:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <HAL_ADC_MspInit+0xcc>)
 80023a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023a6:	4a10      	ldr	r2, [pc, #64]	; (80023e8 <HAL_ADC_MspInit+0xcc>)
 80023a8:	f043 0304 	orr.w	r3, r3, #4
 80023ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023b0:	4b0d      	ldr	r3, [pc, #52]	; (80023e8 <HAL_ADC_MspInit+0xcc>)
 80023b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	60bb      	str	r3, [r7, #8]
 80023bc:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80023be:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80023c2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80023c6:	f000 fd6b 	bl	8002ea0 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 80023ca:	2200      	movs	r2, #0
 80023cc:	2100      	movs	r1, #0
 80023ce:	207f      	movs	r0, #127	; 0x7f
 80023d0:	f002 fbbf 	bl	8004b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80023d4:	207f      	movs	r0, #127	; 0x7f
 80023d6:	f002 fbd6 	bl	8004b86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80023da:	bf00      	nop
 80023dc:	37d0      	adds	r7, #208	; 0xd0
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	58026000 	.word	0x58026000
 80023e8:	58024400 	.word	0x58024400

080023ec <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08a      	sub	sp, #40	; 0x28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	f107 0314 	add.w	r3, r7, #20
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a18      	ldr	r2, [pc, #96]	; (800246c <HAL_DAC_MspInit+0x80>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d129      	bne.n	8002462 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800240e:	4b18      	ldr	r3, [pc, #96]	; (8002470 <HAL_DAC_MspInit+0x84>)
 8002410:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002414:	4a16      	ldr	r2, [pc, #88]	; (8002470 <HAL_DAC_MspInit+0x84>)
 8002416:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800241a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800241e:	4b14      	ldr	r3, [pc, #80]	; (8002470 <HAL_DAC_MspInit+0x84>)
 8002420:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002424:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002428:	613b      	str	r3, [r7, #16]
 800242a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800242c:	4b10      	ldr	r3, [pc, #64]	; (8002470 <HAL_DAC_MspInit+0x84>)
 800242e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002432:	4a0f      	ldr	r2, [pc, #60]	; (8002470 <HAL_DAC_MspInit+0x84>)
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800243c:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <HAL_DAC_MspInit+0x84>)
 800243e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800244a:	2310      	movs	r3, #16
 800244c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800244e:	2303      	movs	r3, #3
 8002450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002452:	2300      	movs	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002456:	f107 0314 	add.w	r3, r7, #20
 800245a:	4619      	mov	r1, r3
 800245c:	4805      	ldr	r0, [pc, #20]	; (8002474 <HAL_DAC_MspInit+0x88>)
 800245e:	f003 f9a7 	bl	80057b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002462:	bf00      	nop
 8002464:	3728      	adds	r7, #40	; 0x28
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40007400 	.word	0x40007400
 8002470:	58024400 	.word	0x58024400
 8002474:	58020000 	.word	0x58020000

08002478 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b08e      	sub	sp, #56	; 0x38
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	60da      	str	r2, [r3, #12]
 800248e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a59      	ldr	r2, [pc, #356]	; (80025fc <HAL_ETH_MspInit+0x184>)
 8002496:	4293      	cmp	r3, r2
 8002498:	f040 80ab 	bne.w	80025f2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800249c:	4b58      	ldr	r3, [pc, #352]	; (8002600 <HAL_ETH_MspInit+0x188>)
 800249e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80024a2:	4a57      	ldr	r2, [pc, #348]	; (8002600 <HAL_ETH_MspInit+0x188>)
 80024a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024a8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80024ac:	4b54      	ldr	r3, [pc, #336]	; (8002600 <HAL_ETH_MspInit+0x188>)
 80024ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80024b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024b6:	623b      	str	r3, [r7, #32]
 80024b8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80024ba:	4b51      	ldr	r3, [pc, #324]	; (8002600 <HAL_ETH_MspInit+0x188>)
 80024bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80024c0:	4a4f      	ldr	r2, [pc, #316]	; (8002600 <HAL_ETH_MspInit+0x188>)
 80024c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80024ca:	4b4d      	ldr	r3, [pc, #308]	; (8002600 <HAL_ETH_MspInit+0x188>)
 80024cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80024d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d4:	61fb      	str	r3, [r7, #28]
 80024d6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80024d8:	4b49      	ldr	r3, [pc, #292]	; (8002600 <HAL_ETH_MspInit+0x188>)
 80024da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80024de:	4a48      	ldr	r2, [pc, #288]	; (8002600 <HAL_ETH_MspInit+0x188>)
 80024e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024e4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80024e8:	4b45      	ldr	r3, [pc, #276]	; (8002600 <HAL_ETH_MspInit+0x188>)
 80024ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80024ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f2:	61bb      	str	r3, [r7, #24]
 80024f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024f6:	4b42      	ldr	r3, [pc, #264]	; (8002600 <HAL_ETH_MspInit+0x188>)
 80024f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024fc:	4a40      	ldr	r2, [pc, #256]	; (8002600 <HAL_ETH_MspInit+0x188>)
 80024fe:	f043 0304 	orr.w	r3, r3, #4
 8002502:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002506:	4b3e      	ldr	r3, [pc, #248]	; (8002600 <HAL_ETH_MspInit+0x188>)
 8002508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	617b      	str	r3, [r7, #20]
 8002512:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002514:	4b3a      	ldr	r3, [pc, #232]	; (8002600 <HAL_ETH_MspInit+0x188>)
 8002516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800251a:	4a39      	ldr	r2, [pc, #228]	; (8002600 <HAL_ETH_MspInit+0x188>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002524:	4b36      	ldr	r3, [pc, #216]	; (8002600 <HAL_ETH_MspInit+0x188>)
 8002526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	613b      	str	r3, [r7, #16]
 8002530:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002532:	4b33      	ldr	r3, [pc, #204]	; (8002600 <HAL_ETH_MspInit+0x188>)
 8002534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002538:	4a31      	ldr	r2, [pc, #196]	; (8002600 <HAL_ETH_MspInit+0x188>)
 800253a:	f043 0302 	orr.w	r3, r3, #2
 800253e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002542:	4b2f      	ldr	r3, [pc, #188]	; (8002600 <HAL_ETH_MspInit+0x188>)
 8002544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002550:	4b2b      	ldr	r3, [pc, #172]	; (8002600 <HAL_ETH_MspInit+0x188>)
 8002552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002556:	4a2a      	ldr	r2, [pc, #168]	; (8002600 <HAL_ETH_MspInit+0x188>)
 8002558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800255c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002560:	4b27      	ldr	r3, [pc, #156]	; (8002600 <HAL_ETH_MspInit+0x188>)
 8002562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256a:	60bb      	str	r3, [r7, #8]
 800256c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800256e:	2332      	movs	r3, #50	; 0x32
 8002570:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002572:	2302      	movs	r3, #2
 8002574:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002576:	2300      	movs	r3, #0
 8002578:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257a:	2300      	movs	r3, #0
 800257c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800257e:	230b      	movs	r3, #11
 8002580:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002586:	4619      	mov	r1, r3
 8002588:	481e      	ldr	r0, [pc, #120]	; (8002604 <HAL_ETH_MspInit+0x18c>)
 800258a:	f003 f911 	bl	80057b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800258e:	2386      	movs	r3, #134	; 0x86
 8002590:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002592:	2302      	movs	r3, #2
 8002594:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259a:	2300      	movs	r3, #0
 800259c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800259e:	230b      	movs	r3, #11
 80025a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025a6:	4619      	mov	r1, r3
 80025a8:	4817      	ldr	r0, [pc, #92]	; (8002608 <HAL_ETH_MspInit+0x190>)
 80025aa:	f003 f901 	bl	80057b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80025ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b4:	2302      	movs	r3, #2
 80025b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025bc:	2300      	movs	r3, #0
 80025be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025c0:	230b      	movs	r3, #11
 80025c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025c8:	4619      	mov	r1, r3
 80025ca:	4810      	ldr	r0, [pc, #64]	; (800260c <HAL_ETH_MspInit+0x194>)
 80025cc:	f003 f8f0 	bl	80057b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80025d0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d6:	2302      	movs	r3, #2
 80025d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025de:	2300      	movs	r3, #0
 80025e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025e2:	230b      	movs	r3, #11
 80025e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ea:	4619      	mov	r1, r3
 80025ec:	4808      	ldr	r0, [pc, #32]	; (8002610 <HAL_ETH_MspInit+0x198>)
 80025ee:	f003 f8df 	bl	80057b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80025f2:	bf00      	nop
 80025f4:	3738      	adds	r7, #56	; 0x38
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40028000 	.word	0x40028000
 8002600:	58024400 	.word	0x58024400
 8002604:	58020800 	.word	0x58020800
 8002608:	58020000 	.word	0x58020000
 800260c:	58020400 	.word	0x58020400
 8002610:	58021800 	.word	0x58021800

08002614 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b0b4      	sub	sp, #208	; 0xd0
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800261c:	f107 0310 	add.w	r3, r7, #16
 8002620:	22c0      	movs	r2, #192	; 0xc0
 8002622:	2100      	movs	r1, #0
 8002624:	4618      	mov	r0, r3
 8002626:	f00a fd65 	bl	800d0f4 <memset>
  if(hhrtim->Instance==HRTIM1)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a1c      	ldr	r2, [pc, #112]	; (80026a0 <HAL_HRTIM_MspInit+0x8c>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d131      	bne.n	8002698 <HAL_HRTIM_MspInit+0x84>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 8002634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002638:	f04f 0300 	mov.w	r3, #0
 800263c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 8002640:	2300      	movs	r3, #0
 8002642:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002646:	f107 0310 	add.w	r3, r7, #16
 800264a:	4618      	mov	r0, r3
 800264c:	f006 fb4c 	bl	8008ce8 <HAL_RCCEx_PeriphCLKConfig>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 8002656:	f7ff fe17 	bl	8002288 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 800265a:	4b12      	ldr	r3, [pc, #72]	; (80026a4 <HAL_HRTIM_MspInit+0x90>)
 800265c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002660:	4a10      	ldr	r2, [pc, #64]	; (80026a4 <HAL_HRTIM_MspInit+0x90>)
 8002662:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002666:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800266a:	4b0e      	ldr	r3, [pc, #56]	; (80026a4 <HAL_HRTIM_MspInit+0x90>)
 800266c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002670:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	68fb      	ldr	r3, [r7, #12]
    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_TIMA_IRQn, 0, 0);
 8002678:	2200      	movs	r2, #0
 800267a:	2100      	movs	r1, #0
 800267c:	2068      	movs	r0, #104	; 0x68
 800267e:	f002 fa68 	bl	8004b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMA_IRQn);
 8002682:	2068      	movs	r0, #104	; 0x68
 8002684:	f002 fa7f 	bl	8004b86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(HRTIM1_TIME_IRQn, 0, 0);
 8002688:	2200      	movs	r2, #0
 800268a:	2100      	movs	r1, #0
 800268c:	206c      	movs	r0, #108	; 0x6c
 800268e:	f002 fa60 	bl	8004b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIME_IRQn);
 8002692:	206c      	movs	r0, #108	; 0x6c
 8002694:	f002 fa77 	bl	8004b86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8002698:	bf00      	nop
 800269a:	37d0      	adds	r7, #208	; 0xd0
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40017400 	.word	0x40017400
 80026a4:	58024400 	.word	0x58024400

080026a8 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08a      	sub	sp, #40	; 0x28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b0:	f107 0314 	add.w	r3, r7, #20
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	609a      	str	r2, [r3, #8]
 80026bc:	60da      	str	r2, [r3, #12]
 80026be:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a22      	ldr	r2, [pc, #136]	; (8002750 <HAL_HRTIM_MspPostInit+0xa8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d13d      	bne.n	8002746 <HAL_HRTIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80026ca:	4b22      	ldr	r3, [pc, #136]	; (8002754 <HAL_HRTIM_MspPostInit+0xac>)
 80026cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026d0:	4a20      	ldr	r2, [pc, #128]	; (8002754 <HAL_HRTIM_MspPostInit+0xac>)
 80026d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026da:	4b1e      	ldr	r3, [pc, #120]	; (8002754 <HAL_HRTIM_MspPostInit+0xac>)
 80026dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026e8:	4b1a      	ldr	r3, [pc, #104]	; (8002754 <HAL_HRTIM_MspPostInit+0xac>)
 80026ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ee:	4a19      	ldr	r2, [pc, #100]	; (8002754 <HAL_HRTIM_MspPostInit+0xac>)
 80026f0:	f043 0304 	orr.w	r3, r3, #4
 80026f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026f8:	4b16      	ldr	r3, [pc, #88]	; (8002754 <HAL_HRTIM_MspPostInit+0xac>)
 80026fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026fe:	f003 0304 	and.w	r3, r3, #4
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
    /**HRTIM GPIO Configuration
    PG6     ------> HRTIM_CHE1
    PC6     ------> HRTIM_CHA1
    PC7     ------> HRTIM_CHA2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002706:	2340      	movs	r3, #64	; 0x40
 8002708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270a:	2302      	movs	r3, #2
 800270c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	2300      	movs	r3, #0
 8002710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002712:	2303      	movs	r3, #3
 8002714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 8002716:	2302      	movs	r3, #2
 8002718:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800271a:	f107 0314 	add.w	r3, r7, #20
 800271e:	4619      	mov	r1, r3
 8002720:	480d      	ldr	r0, [pc, #52]	; (8002758 <HAL_HRTIM_MspPostInit+0xb0>)
 8002722:	f003 f845 	bl	80057b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002726:	23c0      	movs	r3, #192	; 0xc0
 8002728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272a:	2302      	movs	r3, #2
 800272c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272e:	2300      	movs	r3, #0
 8002730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002732:	2303      	movs	r3, #3
 8002734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 8002736:	2301      	movs	r3, #1
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800273a:	f107 0314 	add.w	r3, r7, #20
 800273e:	4619      	mov	r1, r3
 8002740:	4806      	ldr	r0, [pc, #24]	; (800275c <HAL_HRTIM_MspPostInit+0xb4>)
 8002742:	f003 f835 	bl	80057b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8002746:	bf00      	nop
 8002748:	3728      	adds	r7, #40	; 0x28
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40017400 	.word	0x40017400
 8002754:	58024400 	.word	0x58024400
 8002758:	58021800 	.word	0x58021800
 800275c:	58020800 	.word	0x58020800

08002760 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b0b4      	sub	sp, #208	; 0xd0
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002768:	f107 0310 	add.w	r3, r7, #16
 800276c:	22c0      	movs	r2, #192	; 0xc0
 800276e:	2100      	movs	r1, #0
 8002770:	4618      	mov	r0, r3
 8002772:	f00a fcbf 	bl	800d0f4 <memset>
  if(hlptim->Instance==LPTIM1)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a19      	ldr	r2, [pc, #100]	; (80027e0 <HAL_LPTIM_MspInit+0x80>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d12a      	bne.n	80027d6 <HAL_LPTIM_MspInit+0x76>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8002780:	f04f 0220 	mov.w	r2, #32
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 800278c:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002790:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002794:	f107 0310 	add.w	r3, r7, #16
 8002798:	4618      	mov	r0, r3
 800279a:	f006 faa5 	bl	8008ce8 <HAL_RCCEx_PeriphCLKConfig>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <HAL_LPTIM_MspInit+0x48>
    {
      Error_Handler();
 80027a4:	f7ff fd70 	bl	8002288 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80027a8:	4b0e      	ldr	r3, [pc, #56]	; (80027e4 <HAL_LPTIM_MspInit+0x84>)
 80027aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027ae:	4a0d      	ldr	r2, [pc, #52]	; (80027e4 <HAL_LPTIM_MspInit+0x84>)
 80027b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027b4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80027b8:	4b0a      	ldr	r3, [pc, #40]	; (80027e4 <HAL_LPTIM_MspInit+0x84>)
 80027ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 80027c6:	2200      	movs	r2, #0
 80027c8:	2100      	movs	r1, #0
 80027ca:	205d      	movs	r0, #93	; 0x5d
 80027cc:	f002 f9c1 	bl	8004b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80027d0:	205d      	movs	r0, #93	; 0x5d
 80027d2:	f002 f9d8 	bl	8004b86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 80027d6:	bf00      	nop
 80027d8:	37d0      	adds	r7, #208	; 0xd0
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40002400 	.word	0x40002400
 80027e4:	58024400 	.word	0x58024400

080027e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a16      	ldr	r2, [pc, #88]	; (8002850 <HAL_TIM_Base_MspInit+0x68>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d10f      	bne.n	800281a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027fa:	4b16      	ldr	r3, [pc, #88]	; (8002854 <HAL_TIM_Base_MspInit+0x6c>)
 80027fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002800:	4a14      	ldr	r2, [pc, #80]	; (8002854 <HAL_TIM_Base_MspInit+0x6c>)
 8002802:	f043 0301 	orr.w	r3, r3, #1
 8002806:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800280a:	4b12      	ldr	r3, [pc, #72]	; (8002854 <HAL_TIM_Base_MspInit+0x6c>)
 800280c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002818:	e013      	b.n	8002842 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM3)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a0e      	ldr	r2, [pc, #56]	; (8002858 <HAL_TIM_Base_MspInit+0x70>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d10e      	bne.n	8002842 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002824:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <HAL_TIM_Base_MspInit+0x6c>)
 8002826:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800282a:	4a0a      	ldr	r2, [pc, #40]	; (8002854 <HAL_TIM_Base_MspInit+0x6c>)
 800282c:	f043 0302 	orr.w	r3, r3, #2
 8002830:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002834:	4b07      	ldr	r3, [pc, #28]	; (8002854 <HAL_TIM_Base_MspInit+0x6c>)
 8002836:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	60bb      	str	r3, [r7, #8]
 8002840:	68bb      	ldr	r3, [r7, #8]
}
 8002842:	bf00      	nop
 8002844:	3714      	adds	r7, #20
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	40010000 	.word	0x40010000
 8002854:	58024400 	.word	0x58024400
 8002858:	40000400 	.word	0x40000400

0800285c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b0ba      	sub	sp, #232	; 0xe8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002864:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	60da      	str	r2, [r3, #12]
 8002872:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002874:	f107 0310 	add.w	r3, r7, #16
 8002878:	22c0      	movs	r2, #192	; 0xc0
 800287a:	2100      	movs	r1, #0
 800287c:	4618      	mov	r0, r3
 800287e:	f00a fc39 	bl	800d0f4 <memset>
  if(huart->Instance==USART3)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a27      	ldr	r2, [pc, #156]	; (8002924 <HAL_UART_MspInit+0xc8>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d146      	bne.n	800291a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800288c:	f04f 0202 	mov.w	r2, #2
 8002890:	f04f 0300 	mov.w	r3, #0
 8002894:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002898:	2300      	movs	r3, #0
 800289a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800289e:	f107 0310 	add.w	r3, r7, #16
 80028a2:	4618      	mov	r0, r3
 80028a4:	f006 fa20 	bl	8008ce8 <HAL_RCCEx_PeriphCLKConfig>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80028ae:	f7ff fceb 	bl	8002288 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80028b2:	4b1d      	ldr	r3, [pc, #116]	; (8002928 <HAL_UART_MspInit+0xcc>)
 80028b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028b8:	4a1b      	ldr	r2, [pc, #108]	; (8002928 <HAL_UART_MspInit+0xcc>)
 80028ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80028c2:	4b19      	ldr	r3, [pc, #100]	; (8002928 <HAL_UART_MspInit+0xcc>)
 80028c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028d0:	4b15      	ldr	r3, [pc, #84]	; (8002928 <HAL_UART_MspInit+0xcc>)
 80028d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028d6:	4a14      	ldr	r2, [pc, #80]	; (8002928 <HAL_UART_MspInit+0xcc>)
 80028d8:	f043 0308 	orr.w	r3, r3, #8
 80028dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028e0:	4b11      	ldr	r3, [pc, #68]	; (8002928 <HAL_UART_MspInit+0xcc>)
 80028e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	60bb      	str	r3, [r7, #8]
 80028ec:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80028ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f6:	2302      	movs	r3, #2
 80028f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fc:	2300      	movs	r3, #0
 80028fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002902:	2300      	movs	r3, #0
 8002904:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002908:	2307      	movs	r3, #7
 800290a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800290e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002912:	4619      	mov	r1, r3
 8002914:	4805      	ldr	r0, [pc, #20]	; (800292c <HAL_UART_MspInit+0xd0>)
 8002916:	f002 ff4b 	bl	80057b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800291a:	bf00      	nop
 800291c:	37e8      	adds	r7, #232	; 0xe8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40004800 	.word	0x40004800
 8002928:	58024400 	.word	0x58024400
 800292c:	58020c00 	.word	0x58020c00

08002930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002934:	f006 f9bc 	bl	8008cb0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
		Error_Handler();
 8002938:	f7ff fca6 	bl	8002288 <Error_Handler>
 800293c:	e7fc      	b.n	8002938 <NMI_Handler+0x8>

0800293e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Error_Handler();
 8002942:	f7ff fca1 	bl	8002288 <Error_Handler>
 8002946:	e7fc      	b.n	8002942 <HardFault_Handler+0x4>

08002948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  Error_Handler();
 800294c:	f7ff fc9c 	bl	8002288 <Error_Handler>
 8002950:	e7fc      	b.n	800294c <MemManage_Handler+0x4>

08002952 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  Error_Handler();
 8002956:	f7ff fc97 	bl	8002288 <Error_Handler>
 800295a:	e7fc      	b.n	8002956 <BusFault_Handler+0x4>

0800295c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  Error_Handler();
 8002960:	f7ff fc92 	bl	8002288 <Error_Handler>
 8002964:	e7fc      	b.n	8002960 <UsageFault_Handler+0x4>

08002966 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002966:	b480      	push	{r7}
 8002968:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800296a:	bf00      	nop
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002978:	bf00      	nop
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002982:	b480      	push	{r7}
 8002984:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002994:	f000 fa20 	bl	8002dd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002998:	bf00      	nop
 800299a:	bd80      	pop	{r7, pc}

0800299c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80029a0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80029a4:	f003 f8ff 	bl	8005ba6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 80029a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80029ac:	f003 f8fb 	bl	8005ba6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80029b0:	bf00      	nop
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */
  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80029b8:	4802      	ldr	r0, [pc, #8]	; (80029c4 <LPTIM1_IRQHandler+0x10>)
 80029ba:	f004 fe50 	bl	800765e <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */
  /* USER CODE END LPTIM1_IRQn 1 */
}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	20000528 	.word	0x20000528

080029c8 <HRTIM1_TIMA_IRQHandler>:

/**
  * @brief This function handles HRTIM timer A global interrupt.
  */
void HRTIM1_TIMA_IRQHandler(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 0 */

  /* USER CODE END HRTIM1_TIMA_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_A);
 80029cc:	2100      	movs	r1, #0
 80029ce:	4802      	ldr	r0, [pc, #8]	; (80029d8 <HRTIM1_TIMA_IRQHandler+0x10>)
 80029d0:	f003 fe56 	bl	8006680 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 1 */

  /* USER CODE END HRTIM1_TIMA_IRQn 1 */
}
 80029d4:	bf00      	nop
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	2000044c 	.word	0x2000044c

080029dc <HRTIM1_TIME_IRQHandler>:

/**
  * @brief This function handles HRTIM timer E global interrupt.
  */
void HRTIM1_TIME_IRQHandler(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 0 */

  /* USER CODE END HRTIM1_TIME_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_E);
 80029e0:	2104      	movs	r1, #4
 80029e2:	4802      	ldr	r0, [pc, #8]	; (80029ec <HRTIM1_TIME_IRQHandler+0x10>)
 80029e4:	f003 fe4c 	bl	8006680 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 1 */

  /* USER CODE END HRTIM1_TIME_IRQn 1 */
}
 80029e8:	bf00      	nop
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	2000044c 	.word	0x2000044c

080029f0 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80029f4:	4802      	ldr	r0, [pc, #8]	; (8002a00 <ADC3_IRQHandler+0x10>)
 80029f6:	f000 ff75 	bl	80038e4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 80029fa:	bf00      	nop
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	20000324 	.word	0x20000324

08002a04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
	return 1;
 8002a08:	2301      	movs	r3, #1
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <_kill>:

int _kill(int pid, int sig)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a1e:	f00a fb31 	bl	800d084 <__errno>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2216      	movs	r2, #22
 8002a26:	601a      	str	r2, [r3, #0]
	return -1;
 8002a28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <_exit>:

void _exit (int status)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff ffe7 	bl	8002a14 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a46:	e7fe      	b.n	8002a46 <_exit+0x12>

08002a48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	e00a      	b.n	8002a70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a5a:	f3af 8000 	nop.w
 8002a5e:	4601      	mov	r1, r0
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	60ba      	str	r2, [r7, #8]
 8002a66:	b2ca      	uxtb	r2, r1
 8002a68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	617b      	str	r3, [r7, #20]
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	dbf0      	blt.n	8002a5a <_read+0x12>
	}

return len;
 8002a78:	687b      	ldr	r3, [r7, #4]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3718      	adds	r7, #24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b086      	sub	sp, #24
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	60f8      	str	r0, [r7, #12]
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a8e:	2300      	movs	r3, #0
 8002a90:	617b      	str	r3, [r7, #20]
 8002a92:	e009      	b.n	8002aa8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	1c5a      	adds	r2, r3, #1
 8002a98:	60ba      	str	r2, [r7, #8]
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7fe fbb1 	bl	8001204 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	dbf1      	blt.n	8002a94 <_write+0x12>
	}
	return len;
 8002ab0:	687b      	ldr	r3, [r7, #4]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <_close>:

int _close(int file)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
	return -1;
 8002ac2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
 8002ada:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ae2:	605a      	str	r2, [r3, #4]
	return 0;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <_isatty>:

int _isatty(int file)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b083      	sub	sp, #12
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
	return 1;
 8002afa:	2301      	movs	r3, #1
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
	return 0;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
	...

08002b24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b2c:	4a14      	ldr	r2, [pc, #80]	; (8002b80 <_sbrk+0x5c>)
 8002b2e:	4b15      	ldr	r3, [pc, #84]	; (8002b84 <_sbrk+0x60>)
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b38:	4b13      	ldr	r3, [pc, #76]	; (8002b88 <_sbrk+0x64>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d102      	bne.n	8002b46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b40:	4b11      	ldr	r3, [pc, #68]	; (8002b88 <_sbrk+0x64>)
 8002b42:	4a12      	ldr	r2, [pc, #72]	; (8002b8c <_sbrk+0x68>)
 8002b44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b46:	4b10      	ldr	r3, [pc, #64]	; (8002b88 <_sbrk+0x64>)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d207      	bcs.n	8002b64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b54:	f00a fa96 	bl	800d084 <__errno>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	220c      	movs	r2, #12
 8002b5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b62:	e009      	b.n	8002b78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b64:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <_sbrk+0x64>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b6a:	4b07      	ldr	r3, [pc, #28]	; (8002b88 <_sbrk+0x64>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4413      	add	r3, r2
 8002b72:	4a05      	ldr	r2, [pc, #20]	; (8002b88 <_sbrk+0x64>)
 8002b74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b76:	68fb      	ldr	r3, [r7, #12]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	20020000 	.word	0x20020000
 8002b84:	00000400 	.word	0x00000400
 8002b88:	200006ac 	.word	0x200006ac
 8002b8c:	200006c8 	.word	0x200006c8

08002b90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002b94:	4b37      	ldr	r3, [pc, #220]	; (8002c74 <SystemInit+0xe4>)
 8002b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9a:	4a36      	ldr	r2, [pc, #216]	; (8002c74 <SystemInit+0xe4>)
 8002b9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ba0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002ba4:	4b34      	ldr	r3, [pc, #208]	; (8002c78 <SystemInit+0xe8>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 030f 	and.w	r3, r3, #15
 8002bac:	2b06      	cmp	r3, #6
 8002bae:	d807      	bhi.n	8002bc0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */

	  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002bb0:	4b31      	ldr	r3, [pc, #196]	; (8002c78 <SystemInit+0xe8>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f023 030f 	bic.w	r3, r3, #15
 8002bb8:	4a2f      	ldr	r2, [pc, #188]	; (8002c78 <SystemInit+0xe8>)
 8002bba:	f043 0307 	orr.w	r3, r3, #7
 8002bbe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002bc0:	4b2e      	ldr	r3, [pc, #184]	; (8002c7c <SystemInit+0xec>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a2d      	ldr	r2, [pc, #180]	; (8002c7c <SystemInit+0xec>)
 8002bc6:	f043 0301 	orr.w	r3, r3, #1
 8002bca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002bcc:	4b2b      	ldr	r3, [pc, #172]	; (8002c7c <SystemInit+0xec>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002bd2:	4b2a      	ldr	r3, [pc, #168]	; (8002c7c <SystemInit+0xec>)
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	4929      	ldr	r1, [pc, #164]	; (8002c7c <SystemInit+0xec>)
 8002bd8:	4b29      	ldr	r3, [pc, #164]	; (8002c80 <SystemInit+0xf0>)
 8002bda:	4013      	ands	r3, r2
 8002bdc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002bde:	4b26      	ldr	r3, [pc, #152]	; (8002c78 <SystemInit+0xe8>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d007      	beq.n	8002bfa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002bea:	4b23      	ldr	r3, [pc, #140]	; (8002c78 <SystemInit+0xe8>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f023 030f 	bic.w	r3, r3, #15
 8002bf2:	4a21      	ldr	r2, [pc, #132]	; (8002c78 <SystemInit+0xe8>)
 8002bf4:	f043 0307 	orr.w	r3, r3, #7
 8002bf8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002bfa:	4b20      	ldr	r3, [pc, #128]	; (8002c7c <SystemInit+0xec>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002c00:	4b1e      	ldr	r3, [pc, #120]	; (8002c7c <SystemInit+0xec>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002c06:	4b1d      	ldr	r3, [pc, #116]	; (8002c7c <SystemInit+0xec>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002c0c:	4b1b      	ldr	r3, [pc, #108]	; (8002c7c <SystemInit+0xec>)
 8002c0e:	4a1d      	ldr	r2, [pc, #116]	; (8002c84 <SystemInit+0xf4>)
 8002c10:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002c12:	4b1a      	ldr	r3, [pc, #104]	; (8002c7c <SystemInit+0xec>)
 8002c14:	4a1c      	ldr	r2, [pc, #112]	; (8002c88 <SystemInit+0xf8>)
 8002c16:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002c18:	4b18      	ldr	r3, [pc, #96]	; (8002c7c <SystemInit+0xec>)
 8002c1a:	4a1c      	ldr	r2, [pc, #112]	; (8002c8c <SystemInit+0xfc>)
 8002c1c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002c1e:	4b17      	ldr	r3, [pc, #92]	; (8002c7c <SystemInit+0xec>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002c24:	4b15      	ldr	r3, [pc, #84]	; (8002c7c <SystemInit+0xec>)
 8002c26:	4a19      	ldr	r2, [pc, #100]	; (8002c8c <SystemInit+0xfc>)
 8002c28:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002c2a:	4b14      	ldr	r3, [pc, #80]	; (8002c7c <SystemInit+0xec>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002c30:	4b12      	ldr	r3, [pc, #72]	; (8002c7c <SystemInit+0xec>)
 8002c32:	4a16      	ldr	r2, [pc, #88]	; (8002c8c <SystemInit+0xfc>)
 8002c34:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002c36:	4b11      	ldr	r3, [pc, #68]	; (8002c7c <SystemInit+0xec>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002c3c:	4b0f      	ldr	r3, [pc, #60]	; (8002c7c <SystemInit+0xec>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a0e      	ldr	r2, [pc, #56]	; (8002c7c <SystemInit+0xec>)
 8002c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c46:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002c48:	4b0c      	ldr	r3, [pc, #48]	; (8002c7c <SystemInit+0xec>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002c4e:	4b10      	ldr	r3, [pc, #64]	; (8002c90 <SystemInit+0x100>)
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	4b10      	ldr	r3, [pc, #64]	; (8002c94 <SystemInit+0x104>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c5a:	d202      	bcs.n	8002c62 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002c5c:	4b0e      	ldr	r3, [pc, #56]	; (8002c98 <SystemInit+0x108>)
 8002c5e:	2201      	movs	r2, #1
 8002c60:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002c62:	4b0e      	ldr	r3, [pc, #56]	; (8002c9c <SystemInit+0x10c>)
 8002c64:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002c68:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002c6a:	bf00      	nop
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	e000ed00 	.word	0xe000ed00
 8002c78:	52002000 	.word	0x52002000
 8002c7c:	58024400 	.word	0x58024400
 8002c80:	eaf6ed7f 	.word	0xeaf6ed7f
 8002c84:	02020200 	.word	0x02020200
 8002c88:	01ff0000 	.word	0x01ff0000
 8002c8c:	01010280 	.word	0x01010280
 8002c90:	5c001000 	.word	0x5c001000
 8002c94:	ffff0000 	.word	0xffff0000
 8002c98:	51008108 	.word	0x51008108
 8002c9c:	52004000 	.word	0x52004000

08002ca0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002ca0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cd8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ca4:	f7ff ff74 	bl	8002b90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ca8:	480c      	ldr	r0, [pc, #48]	; (8002cdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002caa:	490d      	ldr	r1, [pc, #52]	; (8002ce0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002cac:	4a0d      	ldr	r2, [pc, #52]	; (8002ce4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cb0:	e002      	b.n	8002cb8 <LoopCopyDataInit>

08002cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cb6:	3304      	adds	r3, #4

08002cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cbc:	d3f9      	bcc.n	8002cb2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cbe:	4a0a      	ldr	r2, [pc, #40]	; (8002ce8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002cc0:	4c0a      	ldr	r4, [pc, #40]	; (8002cec <LoopFillZerobss+0x22>)
  movs r3, #0
 8002cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cc4:	e001      	b.n	8002cca <LoopFillZerobss>

08002cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cc8:	3204      	adds	r2, #4

08002cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ccc:	d3fb      	bcc.n	8002cc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cce:	f00a f9df 	bl	800d090 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cd2:	f7fe fb7d 	bl	80013d0 <main>
  bx  lr
 8002cd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002cd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ce0:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8002ce4:	08010474 	.word	0x08010474
  ldr r2, =_sbss
 8002ce8:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8002cec:	200006c4 	.word	0x200006c4

08002cf0 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cf0:	e7fe      	b.n	8002cf0 <ADC_IRQHandler>
	...

08002cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cfa:	2003      	movs	r0, #3
 8002cfc:	f001 ff1e 	bl	8004b3c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d00:	f005 fe00 	bl	8008904 <HAL_RCC_GetSysClockFreq>
 8002d04:	4602      	mov	r2, r0
 8002d06:	4b15      	ldr	r3, [pc, #84]	; (8002d5c <HAL_Init+0x68>)
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	0a1b      	lsrs	r3, r3, #8
 8002d0c:	f003 030f 	and.w	r3, r3, #15
 8002d10:	4913      	ldr	r1, [pc, #76]	; (8002d60 <HAL_Init+0x6c>)
 8002d12:	5ccb      	ldrb	r3, [r1, r3]
 8002d14:	f003 031f 	and.w	r3, r3, #31
 8002d18:	fa22 f303 	lsr.w	r3, r2, r3
 8002d1c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d1e:	4b0f      	ldr	r3, [pc, #60]	; (8002d5c <HAL_Init+0x68>)
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	4a0e      	ldr	r2, [pc, #56]	; (8002d60 <HAL_Init+0x6c>)
 8002d28:	5cd3      	ldrb	r3, [r2, r3]
 8002d2a:	f003 031f 	and.w	r3, r3, #31
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	fa22 f303 	lsr.w	r3, r2, r3
 8002d34:	4a0b      	ldr	r2, [pc, #44]	; (8002d64 <HAL_Init+0x70>)
 8002d36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d38:	4a0b      	ldr	r2, [pc, #44]	; (8002d68 <HAL_Init+0x74>)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d3e:	2000      	movs	r0, #0
 8002d40:	f000 f814 	bl	8002d6c <HAL_InitTick>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e002      	b.n	8002d54 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002d4e:	f7ff facb 	bl	80022e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	58024400 	.word	0x58024400
 8002d60:	08010054 	.word	0x08010054
 8002d64:	2000001c 	.word	0x2000001c
 8002d68:	20000018 	.word	0x20000018

08002d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002d74:	4b15      	ldr	r3, [pc, #84]	; (8002dcc <HAL_InitTick+0x60>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e021      	b.n	8002dc4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002d80:	4b13      	ldr	r3, [pc, #76]	; (8002dd0 <HAL_InitTick+0x64>)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	4b11      	ldr	r3, [pc, #68]	; (8002dcc <HAL_InitTick+0x60>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	4619      	mov	r1, r3
 8002d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d96:	4618      	mov	r0, r3
 8002d98:	f001 ff03 	bl	8004ba2 <HAL_SYSTICK_Config>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e00e      	b.n	8002dc4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2b0f      	cmp	r3, #15
 8002daa:	d80a      	bhi.n	8002dc2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dac:	2200      	movs	r2, #0
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	f04f 30ff 	mov.w	r0, #4294967295
 8002db4:	f001 fecd 	bl	8004b52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002db8:	4a06      	ldr	r2, [pc, #24]	; (8002dd4 <HAL_InitTick+0x68>)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	e000      	b.n	8002dc4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	20000024 	.word	0x20000024
 8002dd0:	20000018 	.word	0x20000018
 8002dd4:	20000020 	.word	0x20000020

08002dd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ddc:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <HAL_IncTick+0x20>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	461a      	mov	r2, r3
 8002de2:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <HAL_IncTick+0x24>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4413      	add	r3, r2
 8002de8:	4a04      	ldr	r2, [pc, #16]	; (8002dfc <HAL_IncTick+0x24>)
 8002dea:	6013      	str	r3, [r2, #0]
}
 8002dec:	bf00      	nop
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	20000024 	.word	0x20000024
 8002dfc:	200006b0 	.word	0x200006b0

08002e00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  return uwTick;
 8002e04:	4b03      	ldr	r3, [pc, #12]	; (8002e14 <HAL_GetTick+0x14>)
 8002e06:	681b      	ldr	r3, [r3, #0]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	200006b0 	.word	0x200006b0

08002e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e20:	f7ff ffee 	bl	8002e00 <HAL_GetTick>
 8002e24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e30:	d005      	beq.n	8002e3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e32:	4b0a      	ldr	r3, [pc, #40]	; (8002e5c <HAL_Delay+0x44>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	461a      	mov	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e3e:	bf00      	nop
 8002e40:	f7ff ffde 	bl	8002e00 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d8f7      	bhi.n	8002e40 <HAL_Delay+0x28>
  {
  }
}
 8002e50:	bf00      	nop
 8002e52:	bf00      	nop
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20000024 	.word	0x20000024

08002e60 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002e64:	4b03      	ldr	r3, [pc, #12]	; (8002e74 <HAL_GetREVID+0x14>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	0c1b      	lsrs	r3, r3, #16
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	5c001000 	.word	0x5c001000

08002e78 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002e80:	4b06      	ldr	r3, [pc, #24]	; (8002e9c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002e88:	4904      	ldr	r1, [pc, #16]	; (8002e9c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	604b      	str	r3, [r1, #4]
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	58000400 	.word	0x58000400

08002ea0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002eaa:	4b07      	ldr	r3, [pc, #28]	; (8002ec8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	401a      	ands	r2, r3
 8002eb4:	4904      	ldr	r1, [pc, #16]	; (8002ec8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	604b      	str	r3, [r1, #4]
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	58000400 	.word	0x58000400

08002ecc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	609a      	str	r2, [r3, #8]
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
 8002efa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	431a      	orrs	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	609a      	str	r2, [r3, #8]
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b087      	sub	sp, #28
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
 8002f40:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	3360      	adds	r3, #96	; 0x60
 8002f46:	461a      	mov	r2, r3
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	430b      	orrs	r3, r1
 8002f62:	431a      	orrs	r2, r3
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002f68:	bf00      	nop
 8002f6a:	371c      	adds	r7, #28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	f003 031f 	and.w	r3, r3, #31
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	fa01 f303 	lsl.w	r3, r1, r3
 8002f94:	431a      	orrs	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	611a      	str	r2, [r3, #16]
}
 8002f9a:	bf00      	nop
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b087      	sub	sp, #28
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	60f8      	str	r0, [r7, #12]
 8002fae:	60b9      	str	r1, [r7, #8]
 8002fb0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	3360      	adds	r3, #96	; 0x60
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	601a      	str	r2, [r3, #0]
  }
}
 8002fd0:	bf00      	nop
 8002fd2:	371c      	adds	r7, #28
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e000      	b.n	8002ff6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003002:	b480      	push	{r7}
 8003004:	b087      	sub	sp, #28
 8003006:	af00      	add	r7, sp, #0
 8003008:	60f8      	str	r0, [r7, #12]
 800300a:	60b9      	str	r1, [r7, #8]
 800300c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	3330      	adds	r3, #48	; 0x30
 8003012:	461a      	mov	r2, r3
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	0a1b      	lsrs	r3, r3, #8
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	f003 030c 	and.w	r3, r3, #12
 800301e:	4413      	add	r3, r2
 8003020:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	f003 031f 	and.w	r3, r3, #31
 800302c:	211f      	movs	r1, #31
 800302e:	fa01 f303 	lsl.w	r3, r1, r3
 8003032:	43db      	mvns	r3, r3
 8003034:	401a      	ands	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	0e9b      	lsrs	r3, r3, #26
 800303a:	f003 011f 	and.w	r1, r3, #31
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	f003 031f 	and.w	r3, r3, #31
 8003044:	fa01 f303 	lsl.w	r3, r1, r3
 8003048:	431a      	orrs	r2, r3
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800304e:	bf00      	nop
 8003050:	371c      	adds	r7, #28
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003066:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003080:	b480      	push	{r7}
 8003082:	b087      	sub	sp, #28
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	3314      	adds	r3, #20
 8003090:	461a      	mov	r2, r3
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	0e5b      	lsrs	r3, r3, #25
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	4413      	add	r3, r2
 800309e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	0d1b      	lsrs	r3, r3, #20
 80030a8:	f003 031f 	and.w	r3, r3, #31
 80030ac:	2107      	movs	r1, #7
 80030ae:	fa01 f303 	lsl.w	r3, r1, r3
 80030b2:	43db      	mvns	r3, r3
 80030b4:	401a      	ands	r2, r3
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	0d1b      	lsrs	r3, r3, #20
 80030ba:	f003 031f 	and.w	r3, r3, #31
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	fa01 f303 	lsl.w	r3, r1, r3
 80030c4:	431a      	orrs	r2, r3
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80030ca:	bf00      	nop
 80030cc:	371c      	adds	r7, #28
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
	...

080030d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030f0:	43db      	mvns	r3, r3
 80030f2:	401a      	ands	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f003 0318 	and.w	r3, r3, #24
 80030fa:	4908      	ldr	r1, [pc, #32]	; (800311c <LL_ADC_SetChannelSingleDiff+0x44>)
 80030fc:	40d9      	lsrs	r1, r3
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	400b      	ands	r3, r1
 8003102:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003106:	431a      	orrs	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800310e:	bf00      	nop
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	000fffff 	.word	0x000fffff

08003120 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 031f 	and.w	r3, r3, #31
}
 8003130:	4618      	mov	r0, r3
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 800314c:	4618      	mov	r0, r3
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	4b04      	ldr	r3, [pc, #16]	; (8003178 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003166:	4013      	ands	r3, r2
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6093      	str	r3, [r2, #8]
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	5fffffc0 	.word	0x5fffffc0

0800317c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800318c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003190:	d101      	bne.n	8003196 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003192:	2301      	movs	r3, #1
 8003194:	e000      	b.n	8003198 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <LL_ADC_EnableInternalRegulator+0x24>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	6fffffc0 	.word	0x6fffffc0

080031cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031e0:	d101      	bne.n	80031e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80031e2:	2301      	movs	r3, #1
 80031e4:	e000      	b.n	80031e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	4b05      	ldr	r3, [pc, #20]	; (8003218 <LL_ADC_Enable+0x24>)
 8003202:	4013      	ands	r3, r2
 8003204:	f043 0201 	orr.w	r2, r3, #1
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	7fffffc0 	.word	0x7fffffc0

0800321c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	4b05      	ldr	r3, [pc, #20]	; (8003240 <LL_ADC_Disable+0x24>)
 800322a:	4013      	ands	r3, r2
 800322c:	f043 0202 	orr.w	r2, r3, #2
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	7fffffc0 	.word	0x7fffffc0

08003244 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b01      	cmp	r3, #1
 8003256:	d101      	bne.n	800325c <LL_ADC_IsEnabled+0x18>
 8003258:	2301      	movs	r3, #1
 800325a:	e000      	b.n	800325e <LL_ADC_IsEnabled+0x1a>
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b02      	cmp	r3, #2
 800327c:	d101      	bne.n	8003282 <LL_ADC_IsDisableOngoing+0x18>
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <LL_ADC_IsDisableOngoing+0x1a>
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	4b05      	ldr	r3, [pc, #20]	; (80032b4 <LL_ADC_REG_StartConversion+0x24>)
 800329e:	4013      	ands	r3, r2
 80032a0:	f043 0204 	orr.w	r2, r3, #4
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	7fffffc0 	.word	0x7fffffc0

080032b8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d101      	bne.n	80032d0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80032cc:	2301      	movs	r3, #1
 80032ce:	e000      	b.n	80032d2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d101      	bne.n	80032f6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80032f2:	2301      	movs	r3, #1
 80032f4:	e000      	b.n	80032f8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003304:	b590      	push	{r4, r7, lr}
 8003306:	b089      	sub	sp, #36	; 0x24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800330c:	2300      	movs	r3, #0
 800330e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003310:	2300      	movs	r3, #0
 8003312:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e18f      	b.n	800363e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003328:	2b00      	cmp	r3, #0
 800332a:	d109      	bne.n	8003340 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7fe fff5 	bl	800231c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff ff19 	bl	800317c <LL_ADC_IsDeepPowerDownEnabled>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d004      	beq.n	800335a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff feff 	bl	8003158 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f7ff ff34 	bl	80031cc <LL_ADC_IsInternalRegulatorEnabled>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d114      	bne.n	8003394 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff ff18 	bl	80031a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003374:	4b87      	ldr	r3, [pc, #540]	; (8003594 <HAL_ADC_Init+0x290>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	099b      	lsrs	r3, r3, #6
 800337a:	4a87      	ldr	r2, [pc, #540]	; (8003598 <HAL_ADC_Init+0x294>)
 800337c:	fba2 2303 	umull	r2, r3, r2, r3
 8003380:	099b      	lsrs	r3, r3, #6
 8003382:	3301      	adds	r3, #1
 8003384:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003386:	e002      	b.n	800338e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	3b01      	subs	r3, #1
 800338c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1f9      	bne.n	8003388 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff ff17 	bl	80031cc <LL_ADC_IsInternalRegulatorEnabled>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10d      	bne.n	80033c0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a8:	f043 0210 	orr.w	r2, r3, #16
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b4:	f043 0201 	orr.w	r2, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff ff77 	bl	80032b8 <LL_ADC_REG_IsConversionOngoing>
 80033ca:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d0:	f003 0310 	and.w	r3, r3, #16
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f040 8129 	bne.w	800362c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f040 8125 	bne.w	800362c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80033ea:	f043 0202 	orr.w	r2, r3, #2
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff ff24 	bl	8003244 <LL_ADC_IsEnabled>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d136      	bne.n	8003470 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a65      	ldr	r2, [pc, #404]	; (800359c <HAL_ADC_Init+0x298>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d004      	beq.n	8003416 <HAL_ADC_Init+0x112>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a63      	ldr	r2, [pc, #396]	; (80035a0 <HAL_ADC_Init+0x29c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d10e      	bne.n	8003434 <HAL_ADC_Init+0x130>
 8003416:	4861      	ldr	r0, [pc, #388]	; (800359c <HAL_ADC_Init+0x298>)
 8003418:	f7ff ff14 	bl	8003244 <LL_ADC_IsEnabled>
 800341c:	4604      	mov	r4, r0
 800341e:	4860      	ldr	r0, [pc, #384]	; (80035a0 <HAL_ADC_Init+0x29c>)
 8003420:	f7ff ff10 	bl	8003244 <LL_ADC_IsEnabled>
 8003424:	4603      	mov	r3, r0
 8003426:	4323      	orrs	r3, r4
 8003428:	2b00      	cmp	r3, #0
 800342a:	bf0c      	ite	eq
 800342c:	2301      	moveq	r3, #1
 800342e:	2300      	movne	r3, #0
 8003430:	b2db      	uxtb	r3, r3
 8003432:	e008      	b.n	8003446 <HAL_ADC_Init+0x142>
 8003434:	485b      	ldr	r0, [pc, #364]	; (80035a4 <HAL_ADC_Init+0x2a0>)
 8003436:	f7ff ff05 	bl	8003244 <LL_ADC_IsEnabled>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	bf0c      	ite	eq
 8003440:	2301      	moveq	r3, #1
 8003442:	2300      	movne	r3, #0
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d012      	beq.n	8003470 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a53      	ldr	r2, [pc, #332]	; (800359c <HAL_ADC_Init+0x298>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d004      	beq.n	800345e <HAL_ADC_Init+0x15a>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a51      	ldr	r2, [pc, #324]	; (80035a0 <HAL_ADC_Init+0x29c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d101      	bne.n	8003462 <HAL_ADC_Init+0x15e>
 800345e:	4a52      	ldr	r2, [pc, #328]	; (80035a8 <HAL_ADC_Init+0x2a4>)
 8003460:	e000      	b.n	8003464 <HAL_ADC_Init+0x160>
 8003462:	4a52      	ldr	r2, [pc, #328]	; (80035ac <HAL_ADC_Init+0x2a8>)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	4619      	mov	r1, r3
 800346a:	4610      	mov	r0, r2
 800346c:	f7ff fd2e 	bl	8002ecc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003470:	f7ff fcf6 	bl	8002e60 <HAL_GetREVID>
 8003474:	4603      	mov	r3, r0
 8003476:	f241 0203 	movw	r2, #4099	; 0x1003
 800347a:	4293      	cmp	r3, r2
 800347c:	d914      	bls.n	80034a8 <HAL_ADC_Init+0x1a4>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	2b10      	cmp	r3, #16
 8003484:	d110      	bne.n	80034a8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	7d5b      	ldrb	r3, [r3, #21]
 800348a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003490:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003496:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	7f1b      	ldrb	r3, [r3, #28]
 800349c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800349e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80034a0:	f043 030c 	orr.w	r3, r3, #12
 80034a4:	61bb      	str	r3, [r7, #24]
 80034a6:	e00d      	b.n	80034c4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	7d5b      	ldrb	r3, [r3, #21]
 80034ac:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80034b2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80034b8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	7f1b      	ldrb	r3, [r3, #28]
 80034be:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80034c0:	4313      	orrs	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	7f1b      	ldrb	r3, [r3, #28]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d106      	bne.n	80034da <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	3b01      	subs	r3, #1
 80034d2:	045b      	lsls	r3, r3, #17
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d009      	beq.n	80034f6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ee:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	4b2c      	ldr	r3, [pc, #176]	; (80035b0 <HAL_ADC_Init+0x2ac>)
 80034fe:	4013      	ands	r3, r2
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	6812      	ldr	r2, [r2, #0]
 8003504:	69b9      	ldr	r1, [r7, #24]
 8003506:	430b      	orrs	r3, r1
 8003508:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f7ff fed2 	bl	80032b8 <LL_ADC_REG_IsConversionOngoing>
 8003514:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f7ff fedf 	bl	80032de <LL_ADC_INJ_IsConversionOngoing>
 8003520:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d15f      	bne.n	80035e8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d15c      	bne.n	80035e8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	7d1b      	ldrb	r3, [r3, #20]
 8003532:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003538:	4313      	orrs	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68da      	ldr	r2, [r3, #12]
 8003542:	4b1c      	ldr	r3, [pc, #112]	; (80035b4 <HAL_ADC_Init+0x2b0>)
 8003544:	4013      	ands	r3, r2
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6812      	ldr	r2, [r2, #0]
 800354a:	69b9      	ldr	r1, [r7, #24]
 800354c:	430b      	orrs	r3, r1
 800354e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003556:	2b01      	cmp	r3, #1
 8003558:	d130      	bne.n	80035bc <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	691a      	ldr	r2, [r3, #16]
 8003566:	4b14      	ldr	r3, [pc, #80]	; (80035b8 <HAL_ADC_Init+0x2b4>)
 8003568:	4013      	ands	r3, r2
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800356e:	3a01      	subs	r2, #1
 8003570:	0411      	lsls	r1, r2, #16
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003576:	4311      	orrs	r1, r2
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800357c:	4311      	orrs	r1, r2
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003582:	430a      	orrs	r2, r1
 8003584:	431a      	orrs	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0201 	orr.w	r2, r2, #1
 800358e:	611a      	str	r2, [r3, #16]
 8003590:	e01c      	b.n	80035cc <HAL_ADC_Init+0x2c8>
 8003592:	bf00      	nop
 8003594:	20000018 	.word	0x20000018
 8003598:	053e2d63 	.word	0x053e2d63
 800359c:	40022000 	.word	0x40022000
 80035a0:	40022100 	.word	0x40022100
 80035a4:	58026000 	.word	0x58026000
 80035a8:	40022300 	.word	0x40022300
 80035ac:	58026300 	.word	0x58026300
 80035b0:	fff0c003 	.word	0xfff0c003
 80035b4:	ffffbffc 	.word	0xffffbffc
 80035b8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	691a      	ldr	r2, [r3, #16]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0201 	bic.w	r2, r2, #1
 80035ca:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f001 f806 	bl	80045f4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d10c      	bne.n	800360a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f6:	f023 010f 	bic.w	r1, r3, #15
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	1e5a      	subs	r2, r3, #1
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	631a      	str	r2, [r3, #48]	; 0x30
 8003608:	e007      	b.n	800361a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 020f 	bic.w	r2, r2, #15
 8003618:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361e:	f023 0303 	bic.w	r3, r3, #3
 8003622:	f043 0201 	orr.w	r2, r3, #1
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	655a      	str	r2, [r3, #84]	; 0x54
 800362a:	e007      	b.n	800363c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003630:	f043 0210 	orr.w	r2, r3, #16
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800363c:	7ffb      	ldrb	r3, [r7, #31]
}
 800363e:	4618      	mov	r0, r3
 8003640:	3724      	adds	r7, #36	; 0x24
 8003642:	46bd      	mov	sp, r7
 8003644:	bd90      	pop	{r4, r7, pc}
 8003646:	bf00      	nop

08003648 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a90      	ldr	r2, [pc, #576]	; (8003898 <HAL_ADC_Start_IT+0x250>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d004      	beq.n	8003664 <HAL_ADC_Start_IT+0x1c>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a8f      	ldr	r2, [pc, #572]	; (800389c <HAL_ADC_Start_IT+0x254>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d101      	bne.n	8003668 <HAL_ADC_Start_IT+0x20>
 8003664:	4b8e      	ldr	r3, [pc, #568]	; (80038a0 <HAL_ADC_Start_IT+0x258>)
 8003666:	e000      	b.n	800366a <HAL_ADC_Start_IT+0x22>
 8003668:	4b8e      	ldr	r3, [pc, #568]	; (80038a4 <HAL_ADC_Start_IT+0x25c>)
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff fd58 	bl	8003120 <LL_ADC_GetMultimode>
 8003670:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff fe1e 	bl	80032b8 <LL_ADC_REG_IsConversionOngoing>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	f040 8119 	bne.w	80038b6 <HAL_ADC_Start_IT+0x26e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800368a:	2b01      	cmp	r3, #1
 800368c:	d101      	bne.n	8003692 <HAL_ADC_Start_IT+0x4a>
 800368e:	2302      	movs	r3, #2
 8003690:	e116      	b.n	80038c0 <HAL_ADC_Start_IT+0x278>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 fec0 	bl	8004420 <ADC_Enable>
 80036a0:	4603      	mov	r3, r0
 80036a2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80036a4:	7dfb      	ldrb	r3, [r7, #23]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f040 8100 	bne.w	80038ac <HAL_ADC_Start_IT+0x264>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036b0:	4b7d      	ldr	r3, [pc, #500]	; (80038a8 <HAL_ADC_Start_IT+0x260>)
 80036b2:	4013      	ands	r3, r2
 80036b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a76      	ldr	r2, [pc, #472]	; (800389c <HAL_ADC_Start_IT+0x254>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d002      	beq.n	80036cc <HAL_ADC_Start_IT+0x84>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	e000      	b.n	80036ce <HAL_ADC_Start_IT+0x86>
 80036cc:	4b72      	ldr	r3, [pc, #456]	; (8003898 <HAL_ADC_Start_IT+0x250>)
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6812      	ldr	r2, [r2, #0]
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d002      	beq.n	80036dc <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d105      	bne.n	80036e8 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d006      	beq.n	8003702 <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f8:	f023 0206 	bic.w	r2, r3, #6
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	659a      	str	r2, [r3, #88]	; 0x58
 8003700:	e002      	b.n	8003708 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	221c      	movs	r2, #28
 800370e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 021c 	bic.w	r2, r2, #28
 8003726:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	2b08      	cmp	r3, #8
 800372e:	d108      	bne.n	8003742 <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0208 	orr.w	r2, r2, #8
 800373e:	605a      	str	r2, [r3, #4]
          break;
 8003740:	e008      	b.n	8003754 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f042 0204 	orr.w	r2, r2, #4
 8003750:	605a      	str	r2, [r3, #4]
          break;
 8003752:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003758:	2b00      	cmp	r3, #0
 800375a:	d107      	bne.n	800376c <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0210 	orr.w	r2, r2, #16
 800376a:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a4a      	ldr	r2, [pc, #296]	; (800389c <HAL_ADC_Start_IT+0x254>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d002      	beq.n	800377c <HAL_ADC_Start_IT+0x134>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	e000      	b.n	800377e <HAL_ADC_Start_IT+0x136>
 800377c:	4b46      	ldr	r3, [pc, #280]	; (8003898 <HAL_ADC_Start_IT+0x250>)
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	6812      	ldr	r2, [r2, #0]
 8003782:	4293      	cmp	r3, r2
 8003784:	d008      	beq.n	8003798 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d005      	beq.n	8003798 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	2b05      	cmp	r3, #5
 8003790:	d002      	beq.n	8003798 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	2b09      	cmp	r3, #9
 8003796:	d13b      	bne.n	8003810 <HAL_ADC_Start_IT+0x1c8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d02d      	beq.n	8003802 <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80037ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	2b08      	cmp	r3, #8
 80037bc:	d110      	bne.n	80037e0 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0220 	bic.w	r2, r2, #32
 80037cc:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037dc:	605a      	str	r2, [r3, #4]
              break;
 80037de:	e011      	b.n	8003804 <HAL_ADC_Start_IT+0x1bc>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037ee:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0220 	orr.w	r2, r2, #32
 80037fe:	605a      	str	r2, [r3, #4]
              break;
 8003800:	e000      	b.n	8003804 <HAL_ADC_Start_IT+0x1bc>
          }
        }
 8003802:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff fd41 	bl	8003290 <LL_ADC_REG_StartConversion>
 800380e:	e056      	b.n	80038be <HAL_ADC_Start_IT+0x276>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003814:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a1e      	ldr	r2, [pc, #120]	; (800389c <HAL_ADC_Start_IT+0x254>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d002      	beq.n	800382c <HAL_ADC_Start_IT+0x1e4>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	e000      	b.n	800382e <HAL_ADC_Start_IT+0x1e6>
 800382c:	4b1a      	ldr	r3, [pc, #104]	; (8003898 <HAL_ADC_Start_IT+0x250>)
 800382e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d03f      	beq.n	80038bc <HAL_ADC_Start_IT+0x274>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003840:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003844:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	2b08      	cmp	r3, #8
 8003852:	d110      	bne.n	8003876 <HAL_ADC_Start_IT+0x22e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 0220 	bic.w	r2, r2, #32
 8003862:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003872:	605a      	str	r2, [r3, #4]
              break;
 8003874:	e023      	b.n	80038be <HAL_ADC_Start_IT+0x276>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003884:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f042 0220 	orr.w	r2, r2, #32
 8003894:	605a      	str	r2, [r3, #4]
              break;
 8003896:	e012      	b.n	80038be <HAL_ADC_Start_IT+0x276>
 8003898:	40022000 	.word	0x40022000
 800389c:	40022100 	.word	0x40022100
 80038a0:	40022300 	.word	0x40022300
 80038a4:	58026300 	.word	0x58026300
 80038a8:	fffff0fe 	.word	0xfffff0fe
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80038b4:	e003      	b.n	80038be <HAL_ADC_Start_IT+0x276>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80038b6:	2302      	movs	r3, #2
 80038b8:	75fb      	strb	r3, [r7, #23]
 80038ba:	e000      	b.n	80038be <HAL_ADC_Start_IT+0x276>
        }
 80038bc:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 80038be:	7dfb      	ldrb	r3, [r7, #23]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
	...

080038e4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b08a      	sub	sp, #40	; 0x28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80038ec:	2300      	movs	r3, #0
 80038ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a87      	ldr	r2, [pc, #540]	; (8003b24 <HAL_ADC_IRQHandler+0x240>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d004      	beq.n	8003914 <HAL_ADC_IRQHandler+0x30>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a86      	ldr	r2, [pc, #536]	; (8003b28 <HAL_ADC_IRQHandler+0x244>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d101      	bne.n	8003918 <HAL_ADC_IRQHandler+0x34>
 8003914:	4b85      	ldr	r3, [pc, #532]	; (8003b2c <HAL_ADC_IRQHandler+0x248>)
 8003916:	e000      	b.n	800391a <HAL_ADC_IRQHandler+0x36>
 8003918:	4b85      	ldr	r3, [pc, #532]	; (8003b30 <HAL_ADC_IRQHandler+0x24c>)
 800391a:	4618      	mov	r0, r3
 800391c:	f7ff fc00 	bl	8003120 <LL_ADC_GetMultimode>
 8003920:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d017      	beq.n	800395c <HAL_ADC_IRQHandler+0x78>
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d012      	beq.n	800395c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393a:	f003 0310 	and.w	r3, r3, #16
 800393e:	2b00      	cmp	r3, #0
 8003940:	d105      	bne.n	800394e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003946:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f001 f81a 	bl	8004988 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2202      	movs	r2, #2
 800395a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f003 0304 	and.w	r3, r3, #4
 8003962:	2b00      	cmp	r3, #0
 8003964:	d004      	beq.n	8003970 <HAL_ADC_IRQHandler+0x8c>
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10a      	bne.n	8003986 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 8083 	beq.w	8003a82 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b00      	cmp	r3, #0
 8003984:	d07d      	beq.n	8003a82 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398a:	f003 0310 	and.w	r3, r3, #16
 800398e:	2b00      	cmp	r3, #0
 8003990:	d105      	bne.n	800399e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003996:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7ff fb1a 	bl	8002fdc <LL_ADC_REG_IsTriggerSourceSWStart>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d062      	beq.n	8003a74 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a5d      	ldr	r2, [pc, #372]	; (8003b28 <HAL_ADC_IRQHandler+0x244>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d002      	beq.n	80039be <HAL_ADC_IRQHandler+0xda>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	e000      	b.n	80039c0 <HAL_ADC_IRQHandler+0xdc>
 80039be:	4b59      	ldr	r3, [pc, #356]	; (8003b24 <HAL_ADC_IRQHandler+0x240>)
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6812      	ldr	r2, [r2, #0]
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d008      	beq.n	80039da <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d005      	beq.n	80039da <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	2b05      	cmp	r3, #5
 80039d2:	d002      	beq.n	80039da <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	2b09      	cmp	r3, #9
 80039d8:	d104      	bne.n	80039e4 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	623b      	str	r3, [r7, #32]
 80039e2:	e00c      	b.n	80039fe <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a4f      	ldr	r2, [pc, #316]	; (8003b28 <HAL_ADC_IRQHandler+0x244>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d002      	beq.n	80039f4 <HAL_ADC_IRQHandler+0x110>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	e000      	b.n	80039f6 <HAL_ADC_IRQHandler+0x112>
 80039f4:	4b4b      	ldr	r3, [pc, #300]	; (8003b24 <HAL_ADC_IRQHandler+0x240>)
 80039f6:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d135      	bne.n	8003a74 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b08      	cmp	r3, #8
 8003a14:	d12e      	bne.n	8003a74 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7ff fc4c 	bl	80032b8 <LL_ADC_REG_IsConversionOngoing>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d11a      	bne.n	8003a5c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 020c 	bic.w	r2, r2, #12
 8003a34:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d112      	bne.n	8003a74 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a52:	f043 0201 	orr.w	r2, r3, #1
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	655a      	str	r2, [r3, #84]	; 0x54
 8003a5a:	e00b      	b.n	8003a74 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a60:	f043 0210 	orr.w	r2, r3, #16
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6c:	f043 0201 	orr.w	r2, r3, #1
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7fe fbe5 	bl	8002244 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	220c      	movs	r2, #12
 8003a80:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	f003 0320 	and.w	r3, r3, #32
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d004      	beq.n	8003a96 <HAL_ADC_IRQHandler+0x1b2>
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	f003 0320 	and.w	r3, r3, #32
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10b      	bne.n	8003aae <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 80a0 	beq.w	8003be2 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 809a 	beq.w	8003be2 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab2:	f003 0310 	and.w	r3, r3, #16
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d105      	bne.n	8003ac6 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003abe:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7ff fac5 	bl	800305a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003ad0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7ff fa80 	bl	8002fdc <LL_ADC_REG_IsTriggerSourceSWStart>
 8003adc:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a11      	ldr	r2, [pc, #68]	; (8003b28 <HAL_ADC_IRQHandler+0x244>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d002      	beq.n	8003aee <HAL_ADC_IRQHandler+0x20a>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	e000      	b.n	8003af0 <HAL_ADC_IRQHandler+0x20c>
 8003aee:	4b0d      	ldr	r3, [pc, #52]	; (8003b24 <HAL_ADC_IRQHandler+0x240>)
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6812      	ldr	r2, [r2, #0]
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d008      	beq.n	8003b0a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d005      	beq.n	8003b0a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	2b06      	cmp	r3, #6
 8003b02:	d002      	beq.n	8003b0a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	2b07      	cmp	r3, #7
 8003b08:	d104      	bne.n	8003b14 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	623b      	str	r3, [r7, #32]
 8003b12:	e014      	b.n	8003b3e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a03      	ldr	r2, [pc, #12]	; (8003b28 <HAL_ADC_IRQHandler+0x244>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00a      	beq.n	8003b34 <HAL_ADC_IRQHandler+0x250>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	e008      	b.n	8003b36 <HAL_ADC_IRQHandler+0x252>
 8003b24:	40022000 	.word	0x40022000
 8003b28:	40022100 	.word	0x40022100
 8003b2c:	40022300 	.word	0x40022300
 8003b30:	58026300 	.word	0x58026300
 8003b34:	4b84      	ldr	r3, [pc, #528]	; (8003d48 <HAL_ADC_IRQHandler+0x464>)
 8003b36:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d047      	beq.n	8003bd4 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d007      	beq.n	8003b5e <HAL_ADC_IRQHandler+0x27a>
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d03f      	beq.n	8003bd4 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d13a      	bne.n	8003bd4 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b68:	2b40      	cmp	r3, #64	; 0x40
 8003b6a:	d133      	bne.n	8003bd4 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d12e      	bne.n	8003bd4 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff fbaf 	bl	80032de <LL_ADC_INJ_IsConversionOngoing>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d11a      	bne.n	8003bbc <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b94:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d112      	bne.n	8003bd4 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb2:	f043 0201 	orr.w	r2, r3, #1
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	655a      	str	r2, [r3, #84]	; 0x54
 8003bba:	e00b      	b.n	8003bd4 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc0:	f043 0210 	orr.w	r2, r3, #16
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bcc:	f043 0201 	orr.w	r2, r3, #1
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 feaf 	bl	8004938 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2260      	movs	r2, #96	; 0x60
 8003be0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d011      	beq.n	8003c10 <HAL_ADC_IRQHandler+0x32c>
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00c      	beq.n	8003c10 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f8a8 	bl	8003d58 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2280      	movs	r2, #128	; 0x80
 8003c0e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d012      	beq.n	8003c40 <HAL_ADC_IRQHandler+0x35c>
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00d      	beq.n	8003c40 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c28:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 fe95 	bl	8004960 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c3e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d012      	beq.n	8003c70 <HAL_ADC_IRQHandler+0x38c>
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00d      	beq.n	8003c70 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c58:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 fe87 	bl	8004974 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c6e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	f003 0310 	and.w	r3, r3, #16
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d043      	beq.n	8003d02 <HAL_ADC_IRQHandler+0x41e>
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	f003 0310 	and.w	r3, r3, #16
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d03e      	beq.n	8003d02 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d102      	bne.n	8003c92 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c90:	e021      	b.n	8003cd6 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d015      	beq.n	8003cc4 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a2a      	ldr	r2, [pc, #168]	; (8003d48 <HAL_ADC_IRQHandler+0x464>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d004      	beq.n	8003cac <HAL_ADC_IRQHandler+0x3c8>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a29      	ldr	r2, [pc, #164]	; (8003d4c <HAL_ADC_IRQHandler+0x468>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d101      	bne.n	8003cb0 <HAL_ADC_IRQHandler+0x3cc>
 8003cac:	4b28      	ldr	r3, [pc, #160]	; (8003d50 <HAL_ADC_IRQHandler+0x46c>)
 8003cae:	e000      	b.n	8003cb2 <HAL_ADC_IRQHandler+0x3ce>
 8003cb0:	4b28      	ldr	r3, [pc, #160]	; (8003d54 <HAL_ADC_IRQHandler+0x470>)
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7ff fa42 	bl	800313c <LL_ADC_GetMultiDMATransfer>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00b      	beq.n	8003cd6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc2:	e008      	b.n	8003cd6 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d10e      	bne.n	8003cfa <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cec:	f043 0202 	orr.w	r2, r3, #2
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 f839 	bl	8003d6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2210      	movs	r2, #16
 8003d00:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d018      	beq.n	8003d3e <HAL_ADC_IRQHandler+0x45a>
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d013      	beq.n	8003d3e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d26:	f043 0208 	orr.w	r2, r3, #8
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d36:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 fe07 	bl	800494c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003d3e:	bf00      	nop
 8003d40:	3728      	adds	r7, #40	; 0x28
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	40022000 	.word	0x40022000
 8003d4c:	40022100 	.word	0x40022100
 8003d50:	40022300 	.word	0x40022300
 8003d54:	58026300 	.word	0x58026300

08003d58 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003d80:	b590      	push	{r4, r7, lr}
 8003d82:	b0a1      	sub	sp, #132	; 0x84
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003d90:	2300      	movs	r3, #0
 8003d92:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	4a9d      	ldr	r2, [pc, #628]	; (8004010 <HAL_ADC_ConfigChannel+0x290>)
 8003d9a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d101      	bne.n	8003daa <HAL_ADC_ConfigChannel+0x2a>
 8003da6:	2302      	movs	r3, #2
 8003da8:	e321      	b.n	80043ee <HAL_ADC_ConfigChannel+0x66e>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff fa7e 	bl	80032b8 <LL_ADC_REG_IsConversionOngoing>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f040 8306 	bne.w	80043d0 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d108      	bne.n	8003de2 <HAL_ADC_ConfigChannel+0x62>
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	0e9b      	lsrs	r3, r3, #26
 8003dd6:	f003 031f 	and.w	r3, r3, #31
 8003dda:	2201      	movs	r2, #1
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	e016      	b.n	8003e10 <HAL_ADC_ConfigChannel+0x90>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dea:	fa93 f3a3 	rbit	r3, r3
 8003dee:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003df0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003df2:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003df4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003dfa:	2320      	movs	r3, #32
 8003dfc:	e003      	b.n	8003e06 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003dfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e00:	fab3 f383 	clz	r3, r3
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	f003 031f 	and.w	r3, r3, #31
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6812      	ldr	r2, [r2, #0]
 8003e14:	69d1      	ldr	r1, [r2, #28]
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	6812      	ldr	r2, [r2, #0]
 8003e1a:	430b      	orrs	r3, r1
 8003e1c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6818      	ldr	r0, [r3, #0]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	6859      	ldr	r1, [r3, #4]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	f7ff f8e9 	bl	8003002 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff fa3f 	bl	80032b8 <LL_ADC_REG_IsConversionOngoing>
 8003e3a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7ff fa4c 	bl	80032de <LL_ADC_INJ_IsConversionOngoing>
 8003e46:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f040 80b3 	bne.w	8003fb6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f040 80af 	bne.w	8003fb6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6818      	ldr	r0, [r3, #0]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	6819      	ldr	r1, [r3, #0]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	461a      	mov	r2, r3
 8003e66:	f7ff f90b 	bl	8003080 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003e6a:	4b6a      	ldr	r3, [pc, #424]	; (8004014 <HAL_ADC_ConfigChannel+0x294>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003e72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e76:	d10b      	bne.n	8003e90 <HAL_ADC_ConfigChannel+0x110>
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	695a      	ldr	r2, [r3, #20]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	089b      	lsrs	r3, r3, #2
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8e:	e01d      	b.n	8003ecc <HAL_ADC_ConfigChannel+0x14c>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f003 0310 	and.w	r3, r3, #16
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10b      	bne.n	8003eb6 <HAL_ADC_ConfigChannel+0x136>
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	695a      	ldr	r2, [r3, #20]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	089b      	lsrs	r3, r3, #2
 8003eaa:	f003 0307 	and.w	r3, r3, #7
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb4:	e00a      	b.n	8003ecc <HAL_ADC_ConfigChannel+0x14c>
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	695a      	ldr	r2, [r3, #20]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	089b      	lsrs	r3, r3, #2
 8003ec2:	f003 0304 	and.w	r3, r3, #4
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ecc:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	d027      	beq.n	8003f26 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6818      	ldr	r0, [r3, #0]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	6919      	ldr	r1, [r3, #16]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ee4:	f7ff f826 	bl	8002f34 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6818      	ldr	r0, [r3, #0]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	6919      	ldr	r1, [r3, #16]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	7e5b      	ldrb	r3, [r3, #25]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d102      	bne.n	8003efe <HAL_ADC_ConfigChannel+0x17e>
 8003ef8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003efc:	e000      	b.n	8003f00 <HAL_ADC_ConfigChannel+0x180>
 8003efe:	2300      	movs	r3, #0
 8003f00:	461a      	mov	r2, r3
 8003f02:	f7ff f850 	bl	8002fa6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6818      	ldr	r0, [r3, #0]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	6919      	ldr	r1, [r3, #16]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	7e1b      	ldrb	r3, [r3, #24]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d102      	bne.n	8003f1c <HAL_ADC_ConfigChannel+0x19c>
 8003f16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f1a:	e000      	b.n	8003f1e <HAL_ADC_ConfigChannel+0x19e>
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	461a      	mov	r2, r3
 8003f20:	f7ff f828 	bl	8002f74 <LL_ADC_SetDataRightShift>
 8003f24:	e047      	b.n	8003fb6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	069b      	lsls	r3, r3, #26
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d107      	bne.n	8003f4a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f48:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	069b      	lsls	r3, r3, #26
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d107      	bne.n	8003f6e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f6c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	069b      	lsls	r3, r3, #26
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d107      	bne.n	8003f92 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f90:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	069b      	lsls	r3, r3, #26
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d107      	bne.n	8003fb6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003fb4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7ff f942 	bl	8003244 <LL_ADC_IsEnabled>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f040 820d 	bne.w	80043e2 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6818      	ldr	r0, [r3, #0]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	6819      	ldr	r1, [r3, #0]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	f7ff f87f 	bl	80030d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	4a0c      	ldr	r2, [pc, #48]	; (8004010 <HAL_ADC_ConfigChannel+0x290>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	f040 8133 	bne.w	800424c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d110      	bne.n	8004018 <HAL_ADC_ConfigChannel+0x298>
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	0e9b      	lsrs	r3, r3, #26
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	f003 031f 	and.w	r3, r3, #31
 8004002:	2b09      	cmp	r3, #9
 8004004:	bf94      	ite	ls
 8004006:	2301      	movls	r3, #1
 8004008:	2300      	movhi	r3, #0
 800400a:	b2db      	uxtb	r3, r3
 800400c:	e01e      	b.n	800404c <HAL_ADC_ConfigChannel+0x2cc>
 800400e:	bf00      	nop
 8004010:	47ff0000 	.word	0x47ff0000
 8004014:	5c001000 	.word	0x5c001000
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004020:	fa93 f3a3 	rbit	r3, r3
 8004024:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004026:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004028:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800402a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8004030:	2320      	movs	r3, #32
 8004032:	e003      	b.n	800403c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8004034:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004036:	fab3 f383 	clz	r3, r3
 800403a:	b2db      	uxtb	r3, r3
 800403c:	3301      	adds	r3, #1
 800403e:	f003 031f 	and.w	r3, r3, #31
 8004042:	2b09      	cmp	r3, #9
 8004044:	bf94      	ite	ls
 8004046:	2301      	movls	r3, #1
 8004048:	2300      	movhi	r3, #0
 800404a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800404c:	2b00      	cmp	r3, #0
 800404e:	d079      	beq.n	8004144 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004058:	2b00      	cmp	r3, #0
 800405a:	d107      	bne.n	800406c <HAL_ADC_ConfigChannel+0x2ec>
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	0e9b      	lsrs	r3, r3, #26
 8004062:	3301      	adds	r3, #1
 8004064:	069b      	lsls	r3, r3, #26
 8004066:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800406a:	e015      	b.n	8004098 <HAL_ADC_ConfigChannel+0x318>
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004074:	fa93 f3a3 	rbit	r3, r3
 8004078:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800407a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800407c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800407e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8004084:	2320      	movs	r3, #32
 8004086:	e003      	b.n	8004090 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800408a:	fab3 f383 	clz	r3, r3
 800408e:	b2db      	uxtb	r3, r3
 8004090:	3301      	adds	r3, #1
 8004092:	069b      	lsls	r3, r3, #26
 8004094:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d109      	bne.n	80040b8 <HAL_ADC_ConfigChannel+0x338>
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	0e9b      	lsrs	r3, r3, #26
 80040aa:	3301      	adds	r3, #1
 80040ac:	f003 031f 	and.w	r3, r3, #31
 80040b0:	2101      	movs	r1, #1
 80040b2:	fa01 f303 	lsl.w	r3, r1, r3
 80040b6:	e017      	b.n	80040e8 <HAL_ADC_ConfigChannel+0x368>
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040c0:	fa93 f3a3 	rbit	r3, r3
 80040c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80040c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040c8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80040ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80040d0:	2320      	movs	r3, #32
 80040d2:	e003      	b.n	80040dc <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80040d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040d6:	fab3 f383 	clz	r3, r3
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	3301      	adds	r3, #1
 80040de:	f003 031f 	and.w	r3, r3, #31
 80040e2:	2101      	movs	r1, #1
 80040e4:	fa01 f303 	lsl.w	r3, r1, r3
 80040e8:	ea42 0103 	orr.w	r1, r2, r3
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10a      	bne.n	800410e <HAL_ADC_ConfigChannel+0x38e>
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	0e9b      	lsrs	r3, r3, #26
 80040fe:	3301      	adds	r3, #1
 8004100:	f003 021f 	and.w	r2, r3, #31
 8004104:	4613      	mov	r3, r2
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	4413      	add	r3, r2
 800410a:	051b      	lsls	r3, r3, #20
 800410c:	e018      	b.n	8004140 <HAL_ADC_ConfigChannel+0x3c0>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004116:	fa93 f3a3 	rbit	r3, r3
 800411a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800411c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8004126:	2320      	movs	r3, #32
 8004128:	e003      	b.n	8004132 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800412a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800412c:	fab3 f383 	clz	r3, r3
 8004130:	b2db      	uxtb	r3, r3
 8004132:	3301      	adds	r3, #1
 8004134:	f003 021f 	and.w	r2, r3, #31
 8004138:	4613      	mov	r3, r2
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	4413      	add	r3, r2
 800413e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004140:	430b      	orrs	r3, r1
 8004142:	e07e      	b.n	8004242 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800414c:	2b00      	cmp	r3, #0
 800414e:	d107      	bne.n	8004160 <HAL_ADC_ConfigChannel+0x3e0>
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	0e9b      	lsrs	r3, r3, #26
 8004156:	3301      	adds	r3, #1
 8004158:	069b      	lsls	r3, r3, #26
 800415a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800415e:	e015      	b.n	800418c <HAL_ADC_ConfigChannel+0x40c>
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004168:	fa93 f3a3 	rbit	r3, r3
 800416c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004178:	2320      	movs	r3, #32
 800417a:	e003      	b.n	8004184 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800417c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417e:	fab3 f383 	clz	r3, r3
 8004182:	b2db      	uxtb	r3, r3
 8004184:	3301      	adds	r3, #1
 8004186:	069b      	lsls	r3, r3, #26
 8004188:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004194:	2b00      	cmp	r3, #0
 8004196:	d109      	bne.n	80041ac <HAL_ADC_ConfigChannel+0x42c>
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	0e9b      	lsrs	r3, r3, #26
 800419e:	3301      	adds	r3, #1
 80041a0:	f003 031f 	and.w	r3, r3, #31
 80041a4:	2101      	movs	r1, #1
 80041a6:	fa01 f303 	lsl.w	r3, r1, r3
 80041aa:	e017      	b.n	80041dc <HAL_ADC_ConfigChannel+0x45c>
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	fa93 f3a3 	rbit	r3, r3
 80041b8:	61bb      	str	r3, [r7, #24]
  return result;
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80041be:	6a3b      	ldr	r3, [r7, #32]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80041c4:	2320      	movs	r3, #32
 80041c6:	e003      	b.n	80041d0 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80041c8:	6a3b      	ldr	r3, [r7, #32]
 80041ca:	fab3 f383 	clz	r3, r3
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	3301      	adds	r3, #1
 80041d2:	f003 031f 	and.w	r3, r3, #31
 80041d6:	2101      	movs	r1, #1
 80041d8:	fa01 f303 	lsl.w	r3, r1, r3
 80041dc:	ea42 0103 	orr.w	r1, r2, r3
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10d      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x488>
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	0e9b      	lsrs	r3, r3, #26
 80041f2:	3301      	adds	r3, #1
 80041f4:	f003 021f 	and.w	r2, r3, #31
 80041f8:	4613      	mov	r3, r2
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	4413      	add	r3, r2
 80041fe:	3b1e      	subs	r3, #30
 8004200:	051b      	lsls	r3, r3, #20
 8004202:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004206:	e01b      	b.n	8004240 <HAL_ADC_ConfigChannel+0x4c0>
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	fa93 f3a3 	rbit	r3, r3
 8004214:	60fb      	str	r3, [r7, #12]
  return result;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8004220:	2320      	movs	r3, #32
 8004222:	e003      	b.n	800422c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	fab3 f383 	clz	r3, r3
 800422a:	b2db      	uxtb	r3, r3
 800422c:	3301      	adds	r3, #1
 800422e:	f003 021f 	and.w	r2, r3, #31
 8004232:	4613      	mov	r3, r2
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	4413      	add	r3, r2
 8004238:	3b1e      	subs	r3, #30
 800423a:	051b      	lsls	r3, r3, #20
 800423c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004240:	430b      	orrs	r3, r1
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	6892      	ldr	r2, [r2, #8]
 8004246:	4619      	mov	r1, r3
 8004248:	f7fe ff1a 	bl	8003080 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	f280 80c6 	bge.w	80043e2 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a67      	ldr	r2, [pc, #412]	; (80043f8 <HAL_ADC_ConfigChannel+0x678>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d004      	beq.n	800426a <HAL_ADC_ConfigChannel+0x4ea>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a65      	ldr	r2, [pc, #404]	; (80043fc <HAL_ADC_ConfigChannel+0x67c>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d101      	bne.n	800426e <HAL_ADC_ConfigChannel+0x4ee>
 800426a:	4b65      	ldr	r3, [pc, #404]	; (8004400 <HAL_ADC_ConfigChannel+0x680>)
 800426c:	e000      	b.n	8004270 <HAL_ADC_ConfigChannel+0x4f0>
 800426e:	4b65      	ldr	r3, [pc, #404]	; (8004404 <HAL_ADC_ConfigChannel+0x684>)
 8004270:	4618      	mov	r0, r3
 8004272:	f7fe fe51 	bl	8002f18 <LL_ADC_GetCommonPathInternalCh>
 8004276:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a5e      	ldr	r2, [pc, #376]	; (80043f8 <HAL_ADC_ConfigChannel+0x678>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d004      	beq.n	800428c <HAL_ADC_ConfigChannel+0x50c>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a5d      	ldr	r2, [pc, #372]	; (80043fc <HAL_ADC_ConfigChannel+0x67c>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d10e      	bne.n	80042aa <HAL_ADC_ConfigChannel+0x52a>
 800428c:	485a      	ldr	r0, [pc, #360]	; (80043f8 <HAL_ADC_ConfigChannel+0x678>)
 800428e:	f7fe ffd9 	bl	8003244 <LL_ADC_IsEnabled>
 8004292:	4604      	mov	r4, r0
 8004294:	4859      	ldr	r0, [pc, #356]	; (80043fc <HAL_ADC_ConfigChannel+0x67c>)
 8004296:	f7fe ffd5 	bl	8003244 <LL_ADC_IsEnabled>
 800429a:	4603      	mov	r3, r0
 800429c:	4323      	orrs	r3, r4
 800429e:	2b00      	cmp	r3, #0
 80042a0:	bf0c      	ite	eq
 80042a2:	2301      	moveq	r3, #1
 80042a4:	2300      	movne	r3, #0
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	e008      	b.n	80042bc <HAL_ADC_ConfigChannel+0x53c>
 80042aa:	4857      	ldr	r0, [pc, #348]	; (8004408 <HAL_ADC_ConfigChannel+0x688>)
 80042ac:	f7fe ffca 	bl	8003244 <LL_ADC_IsEnabled>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	bf0c      	ite	eq
 80042b6:	2301      	moveq	r3, #1
 80042b8:	2300      	movne	r3, #0
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d07d      	beq.n	80043bc <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a51      	ldr	r2, [pc, #324]	; (800440c <HAL_ADC_ConfigChannel+0x68c>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d130      	bne.n	800432c <HAL_ADC_ConfigChannel+0x5ac>
 80042ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d12b      	bne.n	800432c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a4b      	ldr	r2, [pc, #300]	; (8004408 <HAL_ADC_ConfigChannel+0x688>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	f040 8081 	bne.w	80043e2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a44      	ldr	r2, [pc, #272]	; (80043f8 <HAL_ADC_ConfigChannel+0x678>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d004      	beq.n	80042f4 <HAL_ADC_ConfigChannel+0x574>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a43      	ldr	r2, [pc, #268]	; (80043fc <HAL_ADC_ConfigChannel+0x67c>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d101      	bne.n	80042f8 <HAL_ADC_ConfigChannel+0x578>
 80042f4:	4a42      	ldr	r2, [pc, #264]	; (8004400 <HAL_ADC_ConfigChannel+0x680>)
 80042f6:	e000      	b.n	80042fa <HAL_ADC_ConfigChannel+0x57a>
 80042f8:	4a42      	ldr	r2, [pc, #264]	; (8004404 <HAL_ADC_ConfigChannel+0x684>)
 80042fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004300:	4619      	mov	r1, r3
 8004302:	4610      	mov	r0, r2
 8004304:	f7fe fdf5 	bl	8002ef2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004308:	4b41      	ldr	r3, [pc, #260]	; (8004410 <HAL_ADC_ConfigChannel+0x690>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	099b      	lsrs	r3, r3, #6
 800430e:	4a41      	ldr	r2, [pc, #260]	; (8004414 <HAL_ADC_ConfigChannel+0x694>)
 8004310:	fba2 2303 	umull	r2, r3, r2, r3
 8004314:	099b      	lsrs	r3, r3, #6
 8004316:	3301      	adds	r3, #1
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800431c:	e002      	b.n	8004324 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	3b01      	subs	r3, #1
 8004322:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1f9      	bne.n	800431e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800432a:	e05a      	b.n	80043e2 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a39      	ldr	r2, [pc, #228]	; (8004418 <HAL_ADC_ConfigChannel+0x698>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d11e      	bne.n	8004374 <HAL_ADC_ConfigChannel+0x5f4>
 8004336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004338:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d119      	bne.n	8004374 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a30      	ldr	r2, [pc, #192]	; (8004408 <HAL_ADC_ConfigChannel+0x688>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d14b      	bne.n	80043e2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a2a      	ldr	r2, [pc, #168]	; (80043f8 <HAL_ADC_ConfigChannel+0x678>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d004      	beq.n	800435e <HAL_ADC_ConfigChannel+0x5de>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a28      	ldr	r2, [pc, #160]	; (80043fc <HAL_ADC_ConfigChannel+0x67c>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d101      	bne.n	8004362 <HAL_ADC_ConfigChannel+0x5e2>
 800435e:	4a28      	ldr	r2, [pc, #160]	; (8004400 <HAL_ADC_ConfigChannel+0x680>)
 8004360:	e000      	b.n	8004364 <HAL_ADC_ConfigChannel+0x5e4>
 8004362:	4a28      	ldr	r2, [pc, #160]	; (8004404 <HAL_ADC_ConfigChannel+0x684>)
 8004364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004366:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800436a:	4619      	mov	r1, r3
 800436c:	4610      	mov	r0, r2
 800436e:	f7fe fdc0 	bl	8002ef2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004372:	e036      	b.n	80043e2 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a28      	ldr	r2, [pc, #160]	; (800441c <HAL_ADC_ConfigChannel+0x69c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d131      	bne.n	80043e2 <HAL_ADC_ConfigChannel+0x662>
 800437e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004380:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d12c      	bne.n	80043e2 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a1e      	ldr	r2, [pc, #120]	; (8004408 <HAL_ADC_ConfigChannel+0x688>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d127      	bne.n	80043e2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a18      	ldr	r2, [pc, #96]	; (80043f8 <HAL_ADC_ConfigChannel+0x678>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d004      	beq.n	80043a6 <HAL_ADC_ConfigChannel+0x626>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a16      	ldr	r2, [pc, #88]	; (80043fc <HAL_ADC_ConfigChannel+0x67c>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d101      	bne.n	80043aa <HAL_ADC_ConfigChannel+0x62a>
 80043a6:	4a16      	ldr	r2, [pc, #88]	; (8004400 <HAL_ADC_ConfigChannel+0x680>)
 80043a8:	e000      	b.n	80043ac <HAL_ADC_ConfigChannel+0x62c>
 80043aa:	4a16      	ldr	r2, [pc, #88]	; (8004404 <HAL_ADC_ConfigChannel+0x684>)
 80043ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043b2:	4619      	mov	r1, r3
 80043b4:	4610      	mov	r0, r2
 80043b6:	f7fe fd9c 	bl	8002ef2 <LL_ADC_SetCommonPathInternalCh>
 80043ba:	e012      	b.n	80043e2 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c0:	f043 0220 	orr.w	r2, r3, #32
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80043ce:	e008      	b.n	80043e2 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d4:	f043 0220 	orr.w	r2, r3, #32
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80043ea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3784      	adds	r7, #132	; 0x84
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd90      	pop	{r4, r7, pc}
 80043f6:	bf00      	nop
 80043f8:	40022000 	.word	0x40022000
 80043fc:	40022100 	.word	0x40022100
 8004400:	40022300 	.word	0x40022300
 8004404:	58026300 	.word	0x58026300
 8004408:	58026000 	.word	0x58026000
 800440c:	cb840000 	.word	0xcb840000
 8004410:	20000018 	.word	0x20000018
 8004414:	053e2d63 	.word	0x053e2d63
 8004418:	c7520000 	.word	0xc7520000
 800441c:	cfb80000 	.word	0xcfb80000

08004420 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4618      	mov	r0, r3
 800442e:	f7fe ff09 	bl	8003244 <LL_ADC_IsEnabled>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d16e      	bne.n	8004516 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689a      	ldr	r2, [r3, #8]
 800443e:	4b38      	ldr	r3, [pc, #224]	; (8004520 <ADC_Enable+0x100>)
 8004440:	4013      	ands	r3, r2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00d      	beq.n	8004462 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444a:	f043 0210 	orr.w	r2, r3, #16
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004456:	f043 0201 	orr.w	r2, r3, #1
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e05a      	b.n	8004518 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4618      	mov	r0, r3
 8004468:	f7fe fec4 	bl	80031f4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800446c:	f7fe fcc8 	bl	8002e00 <HAL_GetTick>
 8004470:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a2b      	ldr	r2, [pc, #172]	; (8004524 <ADC_Enable+0x104>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d004      	beq.n	8004486 <ADC_Enable+0x66>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a29      	ldr	r2, [pc, #164]	; (8004528 <ADC_Enable+0x108>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d101      	bne.n	800448a <ADC_Enable+0x6a>
 8004486:	4b29      	ldr	r3, [pc, #164]	; (800452c <ADC_Enable+0x10c>)
 8004488:	e000      	b.n	800448c <ADC_Enable+0x6c>
 800448a:	4b29      	ldr	r3, [pc, #164]	; (8004530 <ADC_Enable+0x110>)
 800448c:	4618      	mov	r0, r3
 800448e:	f7fe fe47 	bl	8003120 <LL_ADC_GetMultimode>
 8004492:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a23      	ldr	r2, [pc, #140]	; (8004528 <ADC_Enable+0x108>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d002      	beq.n	80044a4 <ADC_Enable+0x84>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	e000      	b.n	80044a6 <ADC_Enable+0x86>
 80044a4:	4b1f      	ldr	r3, [pc, #124]	; (8004524 <ADC_Enable+0x104>)
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6812      	ldr	r2, [r2, #0]
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d02c      	beq.n	8004508 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d130      	bne.n	8004516 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044b4:	e028      	b.n	8004508 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fe fec2 	bl	8003244 <LL_ADC_IsEnabled>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d104      	bne.n	80044d0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fe fe92 	bl	80031f4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80044d0:	f7fe fc96 	bl	8002e00 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d914      	bls.n	8004508 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d00d      	beq.n	8004508 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f0:	f043 0210 	orr.w	r2, r3, #16
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fc:	f043 0201 	orr.w	r2, r3, #1
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e007      	b.n	8004518 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b01      	cmp	r3, #1
 8004514:	d1cf      	bne.n	80044b6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	8000003f 	.word	0x8000003f
 8004524:	40022000 	.word	0x40022000
 8004528:	40022100 	.word	0x40022100
 800452c:	40022300 	.word	0x40022300
 8004530:	58026300 	.word	0x58026300

08004534 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4618      	mov	r0, r3
 8004542:	f7fe fe92 	bl	800326a <LL_ADC_IsDisableOngoing>
 8004546:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4618      	mov	r0, r3
 800454e:	f7fe fe79 	bl	8003244 <LL_ADC_IsEnabled>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d047      	beq.n	80045e8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d144      	bne.n	80045e8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f003 030d 	and.w	r3, r3, #13
 8004568:	2b01      	cmp	r3, #1
 800456a:	d10c      	bne.n	8004586 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4618      	mov	r0, r3
 8004572:	f7fe fe53 	bl	800321c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2203      	movs	r2, #3
 800457c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800457e:	f7fe fc3f 	bl	8002e00 <HAL_GetTick>
 8004582:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004584:	e029      	b.n	80045da <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458a:	f043 0210 	orr.w	r2, r3, #16
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004596:	f043 0201 	orr.w	r2, r3, #1
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e023      	b.n	80045ea <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80045a2:	f7fe fc2d 	bl	8002e00 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d914      	bls.n	80045da <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00d      	beq.n	80045da <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c2:	f043 0210 	orr.w	r2, r3, #16
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ce:	f043 0201 	orr.w	r2, r3, #1
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e007      	b.n	80045ea <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1dc      	bne.n	80045a2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
	...

080045f4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a7a      	ldr	r2, [pc, #488]	; (80047ec <ADC_ConfigureBoostMode+0x1f8>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d004      	beq.n	8004610 <ADC_ConfigureBoostMode+0x1c>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a79      	ldr	r2, [pc, #484]	; (80047f0 <ADC_ConfigureBoostMode+0x1fc>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d109      	bne.n	8004624 <ADC_ConfigureBoostMode+0x30>
 8004610:	4b78      	ldr	r3, [pc, #480]	; (80047f4 <ADC_ConfigureBoostMode+0x200>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004618:	2b00      	cmp	r3, #0
 800461a:	bf14      	ite	ne
 800461c:	2301      	movne	r3, #1
 800461e:	2300      	moveq	r3, #0
 8004620:	b2db      	uxtb	r3, r3
 8004622:	e008      	b.n	8004636 <ADC_ConfigureBoostMode+0x42>
 8004624:	4b74      	ldr	r3, [pc, #464]	; (80047f8 <ADC_ConfigureBoostMode+0x204>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800462c:	2b00      	cmp	r3, #0
 800462e:	bf14      	ite	ne
 8004630:	2301      	movne	r3, #1
 8004632:	2300      	moveq	r3, #0
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d01c      	beq.n	8004674 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800463a:	f004 fadd 	bl	8008bf8 <HAL_RCC_GetHCLKFreq>
 800463e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004648:	d010      	beq.n	800466c <ADC_ConfigureBoostMode+0x78>
 800464a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800464e:	d873      	bhi.n	8004738 <ADC_ConfigureBoostMode+0x144>
 8004650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004654:	d002      	beq.n	800465c <ADC_ConfigureBoostMode+0x68>
 8004656:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800465a:	d16d      	bne.n	8004738 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	0c1b      	lsrs	r3, r3, #16
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	fbb2 f3f3 	udiv	r3, r2, r3
 8004668:	60fb      	str	r3, [r7, #12]
        break;
 800466a:	e068      	b.n	800473e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	089b      	lsrs	r3, r3, #2
 8004670:	60fb      	str	r3, [r7, #12]
        break;
 8004672:	e064      	b.n	800473e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004674:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004678:	f04f 0100 	mov.w	r1, #0
 800467c:	f005 fd3e 	bl	800a0fc <HAL_RCCEx_GetPeriphCLKFreq>
 8004680:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800468a:	d051      	beq.n	8004730 <ADC_ConfigureBoostMode+0x13c>
 800468c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004690:	d854      	bhi.n	800473c <ADC_ConfigureBoostMode+0x148>
 8004692:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004696:	d047      	beq.n	8004728 <ADC_ConfigureBoostMode+0x134>
 8004698:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800469c:	d84e      	bhi.n	800473c <ADC_ConfigureBoostMode+0x148>
 800469e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80046a2:	d03d      	beq.n	8004720 <ADC_ConfigureBoostMode+0x12c>
 80046a4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80046a8:	d848      	bhi.n	800473c <ADC_ConfigureBoostMode+0x148>
 80046aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046ae:	d033      	beq.n	8004718 <ADC_ConfigureBoostMode+0x124>
 80046b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046b4:	d842      	bhi.n	800473c <ADC_ConfigureBoostMode+0x148>
 80046b6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80046ba:	d029      	beq.n	8004710 <ADC_ConfigureBoostMode+0x11c>
 80046bc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80046c0:	d83c      	bhi.n	800473c <ADC_ConfigureBoostMode+0x148>
 80046c2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80046c6:	d01a      	beq.n	80046fe <ADC_ConfigureBoostMode+0x10a>
 80046c8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80046cc:	d836      	bhi.n	800473c <ADC_ConfigureBoostMode+0x148>
 80046ce:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80046d2:	d014      	beq.n	80046fe <ADC_ConfigureBoostMode+0x10a>
 80046d4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80046d8:	d830      	bhi.n	800473c <ADC_ConfigureBoostMode+0x148>
 80046da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046de:	d00e      	beq.n	80046fe <ADC_ConfigureBoostMode+0x10a>
 80046e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046e4:	d82a      	bhi.n	800473c <ADC_ConfigureBoostMode+0x148>
 80046e6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80046ea:	d008      	beq.n	80046fe <ADC_ConfigureBoostMode+0x10a>
 80046ec:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80046f0:	d824      	bhi.n	800473c <ADC_ConfigureBoostMode+0x148>
 80046f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046f6:	d002      	beq.n	80046fe <ADC_ConfigureBoostMode+0x10a>
 80046f8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80046fc:	d11e      	bne.n	800473c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	0c9b      	lsrs	r3, r3, #18
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	fbb2 f3f3 	udiv	r3, r2, r3
 800470c:	60fb      	str	r3, [r7, #12]
        break;
 800470e:	e016      	b.n	800473e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	091b      	lsrs	r3, r3, #4
 8004714:	60fb      	str	r3, [r7, #12]
        break;
 8004716:	e012      	b.n	800473e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	095b      	lsrs	r3, r3, #5
 800471c:	60fb      	str	r3, [r7, #12]
        break;
 800471e:	e00e      	b.n	800473e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	099b      	lsrs	r3, r3, #6
 8004724:	60fb      	str	r3, [r7, #12]
        break;
 8004726:	e00a      	b.n	800473e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	09db      	lsrs	r3, r3, #7
 800472c:	60fb      	str	r3, [r7, #12]
        break;
 800472e:	e006      	b.n	800473e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	0a1b      	lsrs	r3, r3, #8
 8004734:	60fb      	str	r3, [r7, #12]
        break;
 8004736:	e002      	b.n	800473e <ADC_ConfigureBoostMode+0x14a>
        break;
 8004738:	bf00      	nop
 800473a:	e000      	b.n	800473e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800473c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800473e:	f7fe fb8f 	bl	8002e60 <HAL_GetREVID>
 8004742:	4603      	mov	r3, r0
 8004744:	f241 0203 	movw	r2, #4099	; 0x1003
 8004748:	4293      	cmp	r3, r2
 800474a:	d815      	bhi.n	8004778 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4a2b      	ldr	r2, [pc, #172]	; (80047fc <ADC_ConfigureBoostMode+0x208>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d908      	bls.n	8004766 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004762:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004764:	e03e      	b.n	80047e4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004774:	609a      	str	r2, [r3, #8]
}
 8004776:	e035      	b.n	80047e4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	085b      	lsrs	r3, r3, #1
 800477c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	4a1f      	ldr	r2, [pc, #124]	; (8004800 <ADC_ConfigureBoostMode+0x20c>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d808      	bhi.n	8004798 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004794:	609a      	str	r2, [r3, #8]
}
 8004796:	e025      	b.n	80047e4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4a1a      	ldr	r2, [pc, #104]	; (8004804 <ADC_ConfigureBoostMode+0x210>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d80a      	bhi.n	80047b6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047b2:	609a      	str	r2, [r3, #8]
}
 80047b4:	e016      	b.n	80047e4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	4a13      	ldr	r2, [pc, #76]	; (8004808 <ADC_ConfigureBoostMode+0x214>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d80a      	bhi.n	80047d4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047d0:	609a      	str	r2, [r3, #8]
}
 80047d2:	e007      	b.n	80047e4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689a      	ldr	r2, [r3, #8]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80047e2:	609a      	str	r2, [r3, #8]
}
 80047e4:	bf00      	nop
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	40022000 	.word	0x40022000
 80047f0:	40022100 	.word	0x40022100
 80047f4:	40022300 	.word	0x40022300
 80047f8:	58026300 	.word	0x58026300
 80047fc:	01312d00 	.word	0x01312d00
 8004800:	005f5e10 	.word	0x005f5e10
 8004804:	00bebc20 	.word	0x00bebc20
 8004808:	017d7840 	.word	0x017d7840

0800480c <LL_ADC_StartCalibration>:
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	689a      	ldr	r2, [r3, #8]
 800481c:	4b09      	ldr	r3, [pc, #36]	; (8004844 <LL_ADC_StartCalibration+0x38>)
 800481e:	4013      	ands	r3, r2
 8004820:	68ba      	ldr	r2, [r7, #8]
 8004822:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800482c:	430a      	orrs	r2, r1
 800482e:	4313      	orrs	r3, r2
 8004830:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	609a      	str	r2, [r3, #8]
}
 8004838:	bf00      	nop
 800483a:	3714      	adds	r7, #20
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	3ffeffc0 	.word	0x3ffeffc0

08004848 <LL_ADC_IsCalibrationOnGoing>:
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004858:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800485c:	d101      	bne.n	8004862 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800485e:	2301      	movs	r3, #1
 8004860:	e000      	b.n	8004864 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800487c:	2300      	movs	r3, #0
 800487e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004886:	2b01      	cmp	r3, #1
 8004888:	d101      	bne.n	800488e <HAL_ADCEx_Calibration_Start+0x1e>
 800488a:	2302      	movs	r3, #2
 800488c:	e04c      	b.n	8004928 <HAL_ADCEx_Calibration_Start+0xb8>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f7ff fe4c 	bl	8004534 <ADC_Disable>
 800489c:	4603      	mov	r3, r0
 800489e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80048a0:	7dfb      	ldrb	r3, [r7, #23]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d135      	bne.n	8004912 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048aa:	4b21      	ldr	r3, [pc, #132]	; (8004930 <HAL_ADCEx_Calibration_Start+0xc0>)
 80048ac:	4013      	ands	r3, r2
 80048ae:	f043 0202 	orr.w	r2, r3, #2
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	68b9      	ldr	r1, [r7, #8]
 80048be:	4618      	mov	r0, r3
 80048c0:	f7ff ffa4 	bl	800480c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80048c4:	e014      	b.n	80048f0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	3301      	adds	r3, #1
 80048ca:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	4a19      	ldr	r2, [pc, #100]	; (8004934 <HAL_ADCEx_Calibration_Start+0xc4>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d30d      	bcc.n	80048f0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d8:	f023 0312 	bic.w	r3, r3, #18
 80048dc:	f043 0210 	orr.w	r2, r3, #16
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e01b      	b.n	8004928 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7ff ffa7 	bl	8004848 <LL_ADC_IsCalibrationOnGoing>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1e2      	bne.n	80048c6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004904:	f023 0303 	bic.w	r3, r3, #3
 8004908:	f043 0201 	orr.w	r2, r3, #1
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	655a      	str	r2, [r3, #84]	; 0x54
 8004910:	e005      	b.n	800491e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004916:	f043 0210 	orr.w	r2, r3, #16
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004926:	7dfb      	ldrb	r3, [r7, #23]
}
 8004928:	4618      	mov	r0, r3
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	ffffeefd 	.word	0xffffeefd
 8004934:	25c3f800 	.word	0x25c3f800

08004938 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <__NVIC_SetPriorityGrouping>:
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049ac:	4b0b      	ldr	r3, [pc, #44]	; (80049dc <__NVIC_SetPriorityGrouping+0x40>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049b8:	4013      	ands	r3, r2
 80049ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80049c4:	4b06      	ldr	r3, [pc, #24]	; (80049e0 <__NVIC_SetPriorityGrouping+0x44>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049ca:	4a04      	ldr	r2, [pc, #16]	; (80049dc <__NVIC_SetPriorityGrouping+0x40>)
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	60d3      	str	r3, [r2, #12]
}
 80049d0:	bf00      	nop
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr
 80049dc:	e000ed00 	.word	0xe000ed00
 80049e0:	05fa0000 	.word	0x05fa0000

080049e4 <__NVIC_GetPriorityGrouping>:
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049e8:	4b04      	ldr	r3, [pc, #16]	; (80049fc <__NVIC_GetPriorityGrouping+0x18>)
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	0a1b      	lsrs	r3, r3, #8
 80049ee:	f003 0307 	and.w	r3, r3, #7
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr
 80049fc:	e000ed00 	.word	0xe000ed00

08004a00 <__NVIC_EnableIRQ>:
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	4603      	mov	r3, r0
 8004a08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	db0b      	blt.n	8004a2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a12:	88fb      	ldrh	r3, [r7, #6]
 8004a14:	f003 021f 	and.w	r2, r3, #31
 8004a18:	4907      	ldr	r1, [pc, #28]	; (8004a38 <__NVIC_EnableIRQ+0x38>)
 8004a1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a1e:	095b      	lsrs	r3, r3, #5
 8004a20:	2001      	movs	r0, #1
 8004a22:	fa00 f202 	lsl.w	r2, r0, r2
 8004a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004a2a:	bf00      	nop
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	e000e100 	.word	0xe000e100

08004a3c <__NVIC_SetPriority>:
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	4603      	mov	r3, r0
 8004a44:	6039      	str	r1, [r7, #0]
 8004a46:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	db0a      	blt.n	8004a66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	b2da      	uxtb	r2, r3
 8004a54:	490c      	ldr	r1, [pc, #48]	; (8004a88 <__NVIC_SetPriority+0x4c>)
 8004a56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a5a:	0112      	lsls	r2, r2, #4
 8004a5c:	b2d2      	uxtb	r2, r2
 8004a5e:	440b      	add	r3, r1
 8004a60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004a64:	e00a      	b.n	8004a7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	4908      	ldr	r1, [pc, #32]	; (8004a8c <__NVIC_SetPriority+0x50>)
 8004a6c:	88fb      	ldrh	r3, [r7, #6]
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	3b04      	subs	r3, #4
 8004a74:	0112      	lsls	r2, r2, #4
 8004a76:	b2d2      	uxtb	r2, r2
 8004a78:	440b      	add	r3, r1
 8004a7a:	761a      	strb	r2, [r3, #24]
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr
 8004a88:	e000e100 	.word	0xe000e100
 8004a8c:	e000ed00 	.word	0xe000ed00

08004a90 <NVIC_EncodePriority>:
{
 8004a90:	b480      	push	{r7}
 8004a92:	b089      	sub	sp, #36	; 0x24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f003 0307 	and.w	r3, r3, #7
 8004aa2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	f1c3 0307 	rsb	r3, r3, #7
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	bf28      	it	cs
 8004aae:	2304      	movcs	r3, #4
 8004ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	3304      	adds	r3, #4
 8004ab6:	2b06      	cmp	r3, #6
 8004ab8:	d902      	bls.n	8004ac0 <NVIC_EncodePriority+0x30>
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	3b03      	subs	r3, #3
 8004abe:	e000      	b.n	8004ac2 <NVIC_EncodePriority+0x32>
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ace:	43da      	mvns	r2, r3
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	401a      	ands	r2, r3
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae2:	43d9      	mvns	r1, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ae8:	4313      	orrs	r3, r2
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3724      	adds	r7, #36	; 0x24
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
	...

08004af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3b01      	subs	r3, #1
 8004b04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b08:	d301      	bcc.n	8004b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e00f      	b.n	8004b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b0e:	4a0a      	ldr	r2, [pc, #40]	; (8004b38 <SysTick_Config+0x40>)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3b01      	subs	r3, #1
 8004b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b16:	210f      	movs	r1, #15
 8004b18:	f04f 30ff 	mov.w	r0, #4294967295
 8004b1c:	f7ff ff8e 	bl	8004a3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b20:	4b05      	ldr	r3, [pc, #20]	; (8004b38 <SysTick_Config+0x40>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b26:	4b04      	ldr	r3, [pc, #16]	; (8004b38 <SysTick_Config+0x40>)
 8004b28:	2207      	movs	r2, #7
 8004b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3708      	adds	r7, #8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	e000e010 	.word	0xe000e010

08004b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f7ff ff29 	bl	800499c <__NVIC_SetPriorityGrouping>
}
 8004b4a:	bf00      	nop
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b086      	sub	sp, #24
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	4603      	mov	r3, r0
 8004b5a:	60b9      	str	r1, [r7, #8]
 8004b5c:	607a      	str	r2, [r7, #4]
 8004b5e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b60:	f7ff ff40 	bl	80049e4 <__NVIC_GetPriorityGrouping>
 8004b64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	68b9      	ldr	r1, [r7, #8]
 8004b6a:	6978      	ldr	r0, [r7, #20]
 8004b6c:	f7ff ff90 	bl	8004a90 <NVIC_EncodePriority>
 8004b70:	4602      	mov	r2, r0
 8004b72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b76:	4611      	mov	r1, r2
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7ff ff5f 	bl	8004a3c <__NVIC_SetPriority>
}
 8004b7e:	bf00      	nop
 8004b80:	3718      	adds	r7, #24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b082      	sub	sp, #8
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7ff ff33 	bl	8004a00 <__NVIC_EnableIRQ>
}
 8004b9a:	bf00      	nop
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b082      	sub	sp, #8
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f7ff ffa4 	bl	8004af8 <SysTick_Config>
 8004bb0:	4603      	mov	r3, r0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3708      	adds	r7, #8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b082      	sub	sp, #8
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d101      	bne.n	8004bcc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e014      	b.n	8004bf6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	791b      	ldrb	r3, [r3, #4]
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d105      	bne.n	8004be2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f7fd fc05 	bl	80023ec <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2202      	movs	r2, #2
 8004be6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b083      	sub	sp, #12
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
 8004c06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	795b      	ldrb	r3, [r3, #5]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d101      	bne.n	8004c14 <HAL_DAC_Start+0x16>
 8004c10:	2302      	movs	r3, #2
 8004c12:	e040      	b.n	8004c96 <HAL_DAC_Start+0x98>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2202      	movs	r2, #2
 8004c1e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6819      	ldr	r1, [r3, #0]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	f003 0310 	and.w	r3, r3, #16
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	409a      	lsls	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	430a      	orrs	r2, r1
 8004c36:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10f      	bne.n	8004c5e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d11d      	bne.n	8004c88 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f042 0201 	orr.w	r2, r2, #1
 8004c5a:	605a      	str	r2, [r3, #4]
 8004c5c:	e014      	b.n	8004c88 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	f003 0310 	and.w	r3, r3, #16
 8004c6e:	2102      	movs	r1, #2
 8004c70:	fa01 f303 	lsl.w	r3, r1, r3
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d107      	bne.n	8004c88 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f042 0202 	orr.w	r2, r2, #2
 8004c86:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b087      	sub	sp, #28
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	60f8      	str	r0, [r7, #12]
 8004caa:	60b9      	str	r1, [r7, #8]
 8004cac:	607a      	str	r2, [r7, #4]
 8004cae:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d105      	bne.n	8004ccc <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	3308      	adds	r3, #8
 8004cc8:	617b      	str	r3, [r7, #20]
 8004cca:	e004      	b.n	8004cd6 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004ccc:	697a      	ldr	r2, [r7, #20]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	3314      	adds	r3, #20
 8004cd4:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	461a      	mov	r2, r3
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	371c      	adds	r7, #28
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b088      	sub	sp, #32
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	795b      	ldrb	r3, [r3, #5]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d101      	bne.n	8004d04 <HAL_DAC_ConfigChannel+0x18>
 8004d00:	2302      	movs	r3, #2
 8004d02:	e12a      	b.n	8004f5a <HAL_DAC_ConfigChannel+0x26e>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2201      	movs	r2, #1
 8004d08:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2202      	movs	r2, #2
 8004d0e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2b04      	cmp	r3, #4
 8004d16:	f040 8081 	bne.w	8004e1c <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004d1a:	f7fe f871 	bl	8002e00 <HAL_GetTick>
 8004d1e:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d140      	bne.n	8004da8 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004d26:	e018      	b.n	8004d5a <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004d28:	f7fe f86a 	bl	8002e00 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d911      	bls.n	8004d5a <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d3c:	4b89      	ldr	r3, [pc, #548]	; (8004f64 <HAL_DAC_ConfigChannel+0x278>)
 8004d3e:	4013      	ands	r3, r2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00a      	beq.n	8004d5a <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	f043 0208 	orr.w	r2, r3, #8
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2203      	movs	r2, #3
 8004d54:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e0ff      	b.n	8004f5a <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d60:	4b80      	ldr	r3, [pc, #512]	; (8004f64 <HAL_DAC_ConfigChannel+0x278>)
 8004d62:	4013      	ands	r3, r2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1df      	bne.n	8004d28 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8004d68:	2001      	movs	r0, #1
 8004d6a:	f7fe f855 	bl	8002e18 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	6992      	ldr	r2, [r2, #24]
 8004d76:	641a      	str	r2, [r3, #64]	; 0x40
 8004d78:	e023      	b.n	8004dc2 <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004d7a:	f7fe f841 	bl	8002e00 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d90f      	bls.n	8004da8 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	da0a      	bge.n	8004da8 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	f043 0208 	orr.w	r2, r3, #8
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2203      	movs	r2, #3
 8004da2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e0d8      	b.n	8004f5a <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	dbe3      	blt.n	8004d7a <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 8004db2:	2001      	movs	r0, #1
 8004db4:	f7fe f830 	bl	8002e18 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	6992      	ldr	r2, [r2, #24]
 8004dc0:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f003 0310 	and.w	r3, r3, #16
 8004dce:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd6:	43db      	mvns	r3, r3
 8004dd8:	ea02 0103 	and.w	r1, r2, r3
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	69da      	ldr	r2, [r3, #28]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f003 0310 	and.w	r3, r3, #16
 8004de6:	409a      	lsls	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	430a      	orrs	r2, r1
 8004dee:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f003 0310 	and.w	r3, r3, #16
 8004dfc:	21ff      	movs	r1, #255	; 0xff
 8004dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8004e02:	43db      	mvns	r3, r3
 8004e04:	ea02 0103 	and.w	r1, r2, r3
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	6a1a      	ldr	r2, [r3, #32]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f003 0310 	and.w	r3, r3, #16
 8004e12:	409a      	lsls	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d11d      	bne.n	8004e60 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2a:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f003 0310 	and.w	r3, r3, #16
 8004e32:	221f      	movs	r2, #31
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	43db      	mvns	r3, r3
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f003 0310 	and.w	r3, r3, #16
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e66:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f003 0310 	and.w	r3, r3, #16
 8004e6e:	2207      	movs	r2, #7
 8004e70:	fa02 f303 	lsl.w	r3, r2, r3
 8004e74:	43db      	mvns	r3, r3
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	4013      	ands	r3, r2
 8004e7a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d102      	bne.n	8004e8a <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8004e84:	2300      	movs	r3, #0
 8004e86:	61fb      	str	r3, [r7, #28]
 8004e88:	e00f      	b.n	8004eaa <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d102      	bne.n	8004e98 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004e92:	2301      	movs	r3, #1
 8004e94:	61fb      	str	r3, [r7, #28]
 8004e96:	e008      	b.n	8004eaa <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d102      	bne.n	8004ea6 <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	61fb      	str	r3, [r7, #28]
 8004ea4:	e001      	b.n	8004eaa <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	69fa      	ldr	r2, [r7, #28]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f003 0310 	and.w	r3, r3, #16
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6819      	ldr	r1, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f003 0310 	and.w	r3, r3, #16
 8004ee0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee8:	43da      	mvns	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	400a      	ands	r2, r1
 8004ef0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f003 0310 	and.w	r3, r3, #16
 8004f00:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004f04:	fa02 f303 	lsl.w	r3, r2, r3
 8004f08:	43db      	mvns	r3, r3
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f003 0310 	and.w	r3, r3, #16
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6819      	ldr	r1, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f003 0310 	and.w	r3, r3, #16
 8004f3c:	22c0      	movs	r2, #192	; 0xc0
 8004f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f42:	43da      	mvns	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	400a      	ands	r2, r1
 8004f4a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3720      	adds	r7, #32
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	20008000 	.word	0x20008000

08004f68 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e0cf      	b.n	800511a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d106      	bne.n	8004f92 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2223      	movs	r2, #35	; 0x23
 8004f88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f7fd fa73 	bl	8002478 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f92:	4b64      	ldr	r3, [pc, #400]	; (8005124 <HAL_ETH_Init+0x1bc>)
 8004f94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f98:	4a62      	ldr	r2, [pc, #392]	; (8005124 <HAL_ETH_Init+0x1bc>)
 8004f9a:	f043 0302 	orr.w	r3, r3, #2
 8004f9e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004fa2:	4b60      	ldr	r3, [pc, #384]	; (8005124 <HAL_ETH_Init+0x1bc>)
 8004fa4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	60bb      	str	r3, [r7, #8]
 8004fae:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	7a1b      	ldrb	r3, [r3, #8]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d103      	bne.n	8004fc0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004fb8:	2000      	movs	r0, #0
 8004fba:	f7fd ff5d 	bl	8002e78 <HAL_SYSCFG_ETHInterfaceSelect>
 8004fbe:	e003      	b.n	8004fc8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004fc0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004fc4:	f7fd ff58 	bl	8002e78 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004fc8:	4b57      	ldr	r3, [pc, #348]	; (8005128 <HAL_ETH_Init+0x1c0>)
 8004fca:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	6812      	ldr	r2, [r2, #0]
 8004fda:	f043 0301 	orr.w	r3, r3, #1
 8004fde:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004fe2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fe4:	f7fd ff0c 	bl	8002e00 <HAL_GetTick>
 8004fe8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004fea:	e011      	b.n	8005010 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004fec:	f7fd ff08 	bl	8002e00 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004ffa:	d909      	bls.n	8005010 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2204      	movs	r2, #4
 8005000:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	22e0      	movs	r2, #224	; 0xe0
 8005008:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e084      	b.n	800511a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1e4      	bne.n	8004fec <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 f886 	bl	8005134 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005028:	f003 fde6 	bl	8008bf8 <HAL_RCC_GetHCLKFreq>
 800502c:	4603      	mov	r3, r0
 800502e:	4a3f      	ldr	r2, [pc, #252]	; (800512c <HAL_ETH_Init+0x1c4>)
 8005030:	fba2 2303 	umull	r2, r3, r2, r3
 8005034:	0c9a      	lsrs	r2, r3, #18
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	3a01      	subs	r2, #1
 800503c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 fa71 	bl	8005528 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800504e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005052:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	6812      	ldr	r2, [r2, #0]
 800505a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800505e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005062:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	f003 0303 	and.w	r3, r3, #3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d009      	beq.n	8005086 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	22e0      	movs	r2, #224	; 0xe0
 800507e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e049      	b.n	800511a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800508e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005092:	4b27      	ldr	r3, [pc, #156]	; (8005130 <HAL_ETH_Init+0x1c8>)
 8005094:	4013      	ands	r3, r2
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	6952      	ldr	r2, [r2, #20]
 800509a:	0051      	lsls	r1, r2, #1
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	6812      	ldr	r2, [r2, #0]
 80050a0:	430b      	orrs	r3, r1
 80050a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80050a6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 fad9 	bl	8005662 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 fb1f 	bl	80056f4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	3305      	adds	r3, #5
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	021a      	lsls	r2, r3, #8
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	3304      	adds	r3, #4
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	4619      	mov	r1, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	3303      	adds	r3, #3
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	061a      	lsls	r2, r3, #24
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	3302      	adds	r3, #2
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	041b      	lsls	r3, r3, #16
 80050e8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	3301      	adds	r3, #1
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80050f4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005102:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005104:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2210      	movs	r2, #16
 8005114:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	58024400 	.word	0x58024400
 8005128:	58000400 	.word	0x58000400
 800512c:	431bde83 	.word	0x431bde83
 8005130:	ffff8001 	.word	0xffff8001

08005134 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005144:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800514c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800514e:	f003 fd53 	bl	8008bf8 <HAL_RCC_GetHCLKFreq>
 8005152:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	4a1e      	ldr	r2, [pc, #120]	; (80051d0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d908      	bls.n	800516e <HAL_ETH_SetMDIOClockRange+0x3a>
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	4a1d      	ldr	r2, [pc, #116]	; (80051d4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d804      	bhi.n	800516e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	e027      	b.n	80051be <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	4a18      	ldr	r2, [pc, #96]	; (80051d4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d908      	bls.n	8005188 <HAL_ETH_SetMDIOClockRange+0x54>
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	4a17      	ldr	r2, [pc, #92]	; (80051d8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d204      	bcs.n	8005188 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005184:	60fb      	str	r3, [r7, #12]
 8005186:	e01a      	b.n	80051be <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	4a13      	ldr	r2, [pc, #76]	; (80051d8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d303      	bcc.n	8005198 <HAL_ETH_SetMDIOClockRange+0x64>
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	4a12      	ldr	r2, [pc, #72]	; (80051dc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d911      	bls.n	80051bc <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	4a10      	ldr	r2, [pc, #64]	; (80051dc <HAL_ETH_SetMDIOClockRange+0xa8>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d908      	bls.n	80051b2 <HAL_ETH_SetMDIOClockRange+0x7e>
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	4a0f      	ldr	r2, [pc, #60]	; (80051e0 <HAL_ETH_SetMDIOClockRange+0xac>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d804      	bhi.n	80051b2 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ae:	60fb      	str	r3, [r7, #12]
 80051b0:	e005      	b.n	80051be <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051b8:	60fb      	str	r3, [r7, #12]
 80051ba:	e000      	b.n	80051be <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80051bc:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80051c8:	bf00      	nop
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	01312cff 	.word	0x01312cff
 80051d4:	02160ebf 	.word	0x02160ebf
 80051d8:	03938700 	.word	0x03938700
 80051dc:	05f5e0ff 	.word	0x05f5e0ff
 80051e0:	08f0d17f 	.word	0x08f0d17f

080051e4 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80051f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	791b      	ldrb	r3, [r3, #4]
 80051fc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80051fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	7b1b      	ldrb	r3, [r3, #12]
 8005204:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005206:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	7b5b      	ldrb	r3, [r3, #13]
 800520c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800520e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	7b9b      	ldrb	r3, [r3, #14]
 8005214:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005216:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	7bdb      	ldrb	r3, [r3, #15]
 800521c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800521e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005220:	683a      	ldr	r2, [r7, #0]
 8005222:	7c12      	ldrb	r2, [r2, #16]
 8005224:	2a00      	cmp	r2, #0
 8005226:	d102      	bne.n	800522e <ETH_SetMACConfig+0x4a>
 8005228:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800522c:	e000      	b.n	8005230 <ETH_SetMACConfig+0x4c>
 800522e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005230:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	7c52      	ldrb	r2, [r2, #17]
 8005236:	2a00      	cmp	r2, #0
 8005238:	d102      	bne.n	8005240 <ETH_SetMACConfig+0x5c>
 800523a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800523e:	e000      	b.n	8005242 <ETH_SetMACConfig+0x5e>
 8005240:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005242:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	7c9b      	ldrb	r3, [r3, #18]
 8005248:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800524a:	431a      	orrs	r2, r3
               macconf->Speed |
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8005250:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8005256:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	7f1b      	ldrb	r3, [r3, #28]
 800525c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800525e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	7f5b      	ldrb	r3, [r3, #29]
 8005264:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005266:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005268:	683a      	ldr	r2, [r7, #0]
 800526a:	7f92      	ldrb	r2, [r2, #30]
 800526c:	2a00      	cmp	r2, #0
 800526e:	d102      	bne.n	8005276 <ETH_SetMACConfig+0x92>
 8005270:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005274:	e000      	b.n	8005278 <ETH_SetMACConfig+0x94>
 8005276:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005278:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	7fdb      	ldrb	r3, [r3, #31]
 800527e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005280:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005288:	2a00      	cmp	r2, #0
 800528a:	d102      	bne.n	8005292 <ETH_SetMACConfig+0xae>
 800528c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005290:	e000      	b.n	8005294 <ETH_SetMACConfig+0xb0>
 8005292:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005294:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800529a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052a2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80052a4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80052aa:	4313      	orrs	r3, r2
 80052ac:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	4b56      	ldr	r3, [pc, #344]	; (8005410 <ETH_SetMACConfig+0x22c>)
 80052b6:	4013      	ands	r3, r2
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	6812      	ldr	r2, [r2, #0]
 80052bc:	68f9      	ldr	r1, [r7, #12]
 80052be:	430b      	orrs	r3, r1
 80052c0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80052ce:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80052d0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80052d8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80052da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80052e2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80052e4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80052ec:	2a00      	cmp	r2, #0
 80052ee:	d102      	bne.n	80052f6 <ETH_SetMACConfig+0x112>
 80052f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80052f4:	e000      	b.n	80052f8 <ETH_SetMACConfig+0x114>
 80052f6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80052f8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80052fe:	4313      	orrs	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	4b42      	ldr	r3, [pc, #264]	; (8005414 <ETH_SetMACConfig+0x230>)
 800530a:	4013      	ands	r3, r2
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	6812      	ldr	r2, [r2, #0]
 8005310:	68f9      	ldr	r1, [r7, #12]
 8005312:	430b      	orrs	r3, r1
 8005314:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800531c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005322:	4313      	orrs	r3, r2
 8005324:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68da      	ldr	r2, [r3, #12]
 800532c:	4b3a      	ldr	r3, [pc, #232]	; (8005418 <ETH_SetMACConfig+0x234>)
 800532e:	4013      	ands	r3, r2
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	6812      	ldr	r2, [r2, #0]
 8005334:	68f9      	ldr	r1, [r7, #12]
 8005336:	430b      	orrs	r3, r1
 8005338:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005340:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005346:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8005348:	683a      	ldr	r2, [r7, #0]
 800534a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800534e:	2a00      	cmp	r2, #0
 8005350:	d101      	bne.n	8005356 <ETH_SetMACConfig+0x172>
 8005352:	2280      	movs	r2, #128	; 0x80
 8005354:	e000      	b.n	8005358 <ETH_SetMACConfig+0x174>
 8005356:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005358:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800535e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005360:	4313      	orrs	r3, r2
 8005362:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800536a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800536e:	4013      	ands	r3, r2
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	6812      	ldr	r2, [r2, #0]
 8005374:	68f9      	ldr	r1, [r7, #12]
 8005376:	430b      	orrs	r3, r1
 8005378:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005380:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005388:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800538a:	4313      	orrs	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005396:	f023 0103 	bic.w	r1, r3, #3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	430a      	orrs	r2, r1
 80053a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80053ae:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80053c4:	683a      	ldr	r2, [r7, #0]
 80053c6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80053ca:	2a00      	cmp	r2, #0
 80053cc:	d101      	bne.n	80053d2 <ETH_SetMACConfig+0x1ee>
 80053ce:	2240      	movs	r2, #64	; 0x40
 80053d0:	e000      	b.n	80053d4 <ETH_SetMACConfig+0x1f0>
 80053d2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80053d4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80053dc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80053de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80053e6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80053e8:	4313      	orrs	r3, r2
 80053ea:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80053f4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	430a      	orrs	r2, r1
 8005400:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8005404:	bf00      	nop
 8005406:	3714      	adds	r7, #20
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	00048083 	.word	0x00048083
 8005414:	c0f88000 	.word	0xc0f88000
 8005418:	fffffef0 	.word	0xfffffef0

0800541c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	4b38      	ldr	r3, [pc, #224]	; (8005514 <ETH_SetDMAConfig+0xf8>)
 8005432:	4013      	ands	r3, r2
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	6811      	ldr	r1, [r2, #0]
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	6812      	ldr	r2, [r2, #0]
 800543c:	430b      	orrs	r3, r1
 800543e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005442:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	791b      	ldrb	r3, [r3, #4]
 8005448:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800544e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	7b1b      	ldrb	r3, [r3, #12]
 8005454:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005456:	4313      	orrs	r3, r2
 8005458:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	4b2c      	ldr	r3, [pc, #176]	; (8005518 <ETH_SetDMAConfig+0xfc>)
 8005466:	4013      	ands	r3, r2
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	6812      	ldr	r2, [r2, #0]
 800546c:	68f9      	ldr	r1, [r7, #12]
 800546e:	430b      	orrs	r3, r1
 8005470:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005474:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	7b5b      	ldrb	r3, [r3, #13]
 800547a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005480:	4313      	orrs	r3, r2
 8005482:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800548c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8005490:	4b22      	ldr	r3, [pc, #136]	; (800551c <ETH_SetDMAConfig+0x100>)
 8005492:	4013      	ands	r3, r2
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	6812      	ldr	r2, [r2, #0]
 8005498:	68f9      	ldr	r1, [r7, #12]
 800549a:	430b      	orrs	r3, r1
 800549c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80054a0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	7d1b      	ldrb	r3, [r3, #20]
 80054ac:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80054ae:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	7f5b      	ldrb	r3, [r3, #29]
 80054b4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054c2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80054c6:	4b16      	ldr	r3, [pc, #88]	; (8005520 <ETH_SetDMAConfig+0x104>)
 80054c8:	4013      	ands	r3, r2
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	6812      	ldr	r2, [r2, #0]
 80054ce:	68f9      	ldr	r1, [r7, #12]
 80054d0:	430b      	orrs	r3, r1
 80054d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80054d6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	7f1b      	ldrb	r3, [r3, #28]
 80054de:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80054e4:	4313      	orrs	r3, r2
 80054e6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054f0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80054f4:	4b0b      	ldr	r3, [pc, #44]	; (8005524 <ETH_SetDMAConfig+0x108>)
 80054f6:	4013      	ands	r3, r2
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	6812      	ldr	r2, [r2, #0]
 80054fc:	68f9      	ldr	r1, [r7, #12]
 80054fe:	430b      	orrs	r3, r1
 8005500:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005504:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8005508:	bf00      	nop
 800550a:	3714      	adds	r7, #20
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr
 8005514:	ffff87fd 	.word	0xffff87fd
 8005518:	ffff2ffe 	.word	0xffff2ffe
 800551c:	fffec000 	.word	0xfffec000
 8005520:	ffc0efef 	.word	0xffc0efef
 8005524:	7fc0ffff 	.word	0x7fc0ffff

08005528 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b0a4      	sub	sp, #144	; 0x90
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005530:	2301      	movs	r3, #1
 8005532:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005536:	2300      	movs	r3, #0
 8005538:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800553a:	2300      	movs	r3, #0
 800553c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005540:	2300      	movs	r3, #0
 8005542:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005546:	2301      	movs	r3, #1
 8005548:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800554c:	2301      	movs	r3, #1
 800554e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005552:	2301      	movs	r3, #1
 8005554:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005558:	2300      	movs	r3, #0
 800555a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800555e:	2301      	movs	r3, #1
 8005560:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005564:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005568:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800556a:	2300      	movs	r3, #0
 800556c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005570:	2300      	movs	r3, #0
 8005572:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005574:	2300      	movs	r3, #0
 8005576:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800557a:	2300      	movs	r3, #0
 800557c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005580:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005584:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005586:	2300      	movs	r3, #0
 8005588:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800558c:	2300      	movs	r3, #0
 800558e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005590:	2301      	movs	r3, #1
 8005592:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005596:	2300      	movs	r3, #0
 8005598:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800559c:	2300      	movs	r3, #0
 800559e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80055a2:	2300      	movs	r3, #0
 80055a4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80055a6:	2300      	movs	r3, #0
 80055a8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80055aa:	2300      	movs	r3, #0
 80055ac:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80055ae:	2300      	movs	r3, #0
 80055b0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80055b4:	2300      	movs	r3, #0
 80055b6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80055ba:	2301      	movs	r3, #1
 80055bc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80055c0:	2320      	movs	r3, #32
 80055c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80055c6:	2301      	movs	r3, #1
 80055c8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80055cc:	2300      	movs	r3, #0
 80055ce:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80055d2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80055d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80055d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80055dc:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80055de:	2300      	movs	r3, #0
 80055e0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80055e4:	2302      	movs	r3, #2
 80055e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80055ea:	2300      	movs	r3, #0
 80055ec:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80055f0:	2300      	movs	r3, #0
 80055f2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80055f6:	2300      	movs	r3, #0
 80055f8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80055fc:	2301      	movs	r3, #1
 80055fe:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005602:	2300      	movs	r3, #0
 8005604:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005606:	2301      	movs	r3, #1
 8005608:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800560c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005610:	4619      	mov	r1, r3
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7ff fde6 	bl	80051e4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005618:	2301      	movs	r3, #1
 800561a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800561c:	2301      	movs	r3, #1
 800561e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005620:	2300      	movs	r3, #0
 8005622:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005624:	2300      	movs	r3, #0
 8005626:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800562a:	2300      	movs	r3, #0
 800562c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800562e:	2300      	movs	r3, #0
 8005630:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005632:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005636:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005638:	2300      	movs	r3, #0
 800563a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800563c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005640:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005642:	2300      	movs	r3, #0
 8005644:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005648:	f44f 7306 	mov.w	r3, #536	; 0x218
 800564c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800564e:	f107 0308 	add.w	r3, r7, #8
 8005652:	4619      	mov	r1, r3
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f7ff fee1 	bl	800541c <ETH_SetDMAConfig>
}
 800565a:	bf00      	nop
 800565c:	3790      	adds	r7, #144	; 0x90
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005662:	b480      	push	{r7}
 8005664:	b085      	sub	sp, #20
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800566a:	2300      	movs	r3, #0
 800566c:	60fb      	str	r3, [r7, #12]
 800566e:	e01d      	b.n	80056ac <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	68d9      	ldr	r1, [r3, #12]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	4613      	mov	r3, r2
 8005678:	005b      	lsls	r3, r3, #1
 800567a:	4413      	add	r3, r2
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	440b      	add	r3, r1
 8005680:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	2200      	movs	r2, #0
 8005686:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	2200      	movs	r2, #0
 800568c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	2200      	movs	r2, #0
 8005692:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	2200      	movs	r2, #0
 8005698:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800569a:	68b9      	ldr	r1, [r7, #8]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	3206      	adds	r2, #6
 80056a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	3301      	adds	r3, #1
 80056aa:	60fb      	str	r3, [r7, #12]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2b03      	cmp	r3, #3
 80056b0:	d9de      	bls.n	8005670 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056c0:	461a      	mov	r2, r3
 80056c2:	2303      	movs	r3, #3
 80056c4:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68da      	ldr	r2, [r3, #12]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056d4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	68da      	ldr	r2, [r3, #12]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056e4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80056e8:	bf00      	nop
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80056fc:	2300      	movs	r3, #0
 80056fe:	60fb      	str	r3, [r7, #12]
 8005700:	e023      	b.n	800574a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6919      	ldr	r1, [r3, #16]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	4613      	mov	r3, r2
 800570a:	005b      	lsls	r3, r3, #1
 800570c:	4413      	add	r3, r2
 800570e:	00db      	lsls	r3, r3, #3
 8005710:	440b      	add	r3, r1
 8005712:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	2200      	movs	r2, #0
 8005718:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	2200      	movs	r2, #0
 800571e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2200      	movs	r2, #0
 8005724:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	2200      	movs	r2, #0
 800572a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	2200      	movs	r2, #0
 8005730:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	2200      	movs	r2, #0
 8005736:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005738:	68b9      	ldr	r1, [r7, #8]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	3212      	adds	r2, #18
 8005740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	3301      	adds	r3, #1
 8005748:	60fb      	str	r3, [r7, #12]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2b03      	cmp	r3, #3
 800574e:	d9d8      	bls.n	8005702 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005776:	461a      	mov	r2, r3
 8005778:	2303      	movs	r3, #3
 800577a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	691a      	ldr	r2, [r3, #16]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800578a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800579e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80057a2:	bf00      	nop
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
	...

080057b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b089      	sub	sp, #36	; 0x24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80057ba:	2300      	movs	r3, #0
 80057bc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80057be:	4b89      	ldr	r3, [pc, #548]	; (80059e4 <HAL_GPIO_Init+0x234>)
 80057c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80057c2:	e194      	b.n	8005aee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	2101      	movs	r1, #1
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	fa01 f303 	lsl.w	r3, r1, r3
 80057d0:	4013      	ands	r3, r2
 80057d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f000 8186 	beq.w	8005ae8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f003 0303 	and.w	r3, r3, #3
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d005      	beq.n	80057f4 <HAL_GPIO_Init+0x44>
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f003 0303 	and.w	r3, r3, #3
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d130      	bne.n	8005856 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	005b      	lsls	r3, r3, #1
 80057fe:	2203      	movs	r2, #3
 8005800:	fa02 f303 	lsl.w	r3, r2, r3
 8005804:	43db      	mvns	r3, r3
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	4013      	ands	r3, r2
 800580a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	005b      	lsls	r3, r3, #1
 8005814:	fa02 f303 	lsl.w	r3, r2, r3
 8005818:	69ba      	ldr	r2, [r7, #24]
 800581a:	4313      	orrs	r3, r2
 800581c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800582a:	2201      	movs	r2, #1
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	fa02 f303 	lsl.w	r3, r2, r3
 8005832:	43db      	mvns	r3, r3
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	4013      	ands	r3, r2
 8005838:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	091b      	lsrs	r3, r3, #4
 8005840:	f003 0201 	and.w	r2, r3, #1
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	fa02 f303 	lsl.w	r3, r2, r3
 800584a:	69ba      	ldr	r2, [r7, #24]
 800584c:	4313      	orrs	r3, r2
 800584e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f003 0303 	and.w	r3, r3, #3
 800585e:	2b03      	cmp	r3, #3
 8005860:	d017      	beq.n	8005892 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	005b      	lsls	r3, r3, #1
 800586c:	2203      	movs	r2, #3
 800586e:	fa02 f303 	lsl.w	r3, r2, r3
 8005872:	43db      	mvns	r3, r3
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	4013      	ands	r3, r2
 8005878:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	689a      	ldr	r2, [r3, #8]
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	005b      	lsls	r3, r3, #1
 8005882:	fa02 f303 	lsl.w	r3, r2, r3
 8005886:	69ba      	ldr	r2, [r7, #24]
 8005888:	4313      	orrs	r3, r2
 800588a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	69ba      	ldr	r2, [r7, #24]
 8005890:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f003 0303 	and.w	r3, r3, #3
 800589a:	2b02      	cmp	r3, #2
 800589c:	d123      	bne.n	80058e6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	08da      	lsrs	r2, r3, #3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	3208      	adds	r2, #8
 80058a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	f003 0307 	and.w	r3, r3, #7
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	220f      	movs	r2, #15
 80058b6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ba:	43db      	mvns	r3, r3
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	4013      	ands	r3, r2
 80058c0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	691a      	ldr	r2, [r3, #16]
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	f003 0307 	and.w	r3, r3, #7
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	fa02 f303 	lsl.w	r3, r2, r3
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	08da      	lsrs	r2, r3, #3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	3208      	adds	r2, #8
 80058e0:	69b9      	ldr	r1, [r7, #24]
 80058e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	005b      	lsls	r3, r3, #1
 80058f0:	2203      	movs	r2, #3
 80058f2:	fa02 f303 	lsl.w	r3, r2, r3
 80058f6:	43db      	mvns	r3, r3
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	4013      	ands	r3, r2
 80058fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f003 0203 	and.w	r2, r3, #3
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	005b      	lsls	r3, r3, #1
 800590a:	fa02 f303 	lsl.w	r3, r2, r3
 800590e:	69ba      	ldr	r2, [r7, #24]
 8005910:	4313      	orrs	r3, r2
 8005912:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	69ba      	ldr	r2, [r7, #24]
 8005918:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005922:	2b00      	cmp	r3, #0
 8005924:	f000 80e0 	beq.w	8005ae8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005928:	4b2f      	ldr	r3, [pc, #188]	; (80059e8 <HAL_GPIO_Init+0x238>)
 800592a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800592e:	4a2e      	ldr	r2, [pc, #184]	; (80059e8 <HAL_GPIO_Init+0x238>)
 8005930:	f043 0302 	orr.w	r3, r3, #2
 8005934:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005938:	4b2b      	ldr	r3, [pc, #172]	; (80059e8 <HAL_GPIO_Init+0x238>)
 800593a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	60fb      	str	r3, [r7, #12]
 8005944:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005946:	4a29      	ldr	r2, [pc, #164]	; (80059ec <HAL_GPIO_Init+0x23c>)
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	089b      	lsrs	r3, r3, #2
 800594c:	3302      	adds	r3, #2
 800594e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005952:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	f003 0303 	and.w	r3, r3, #3
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	220f      	movs	r2, #15
 800595e:	fa02 f303 	lsl.w	r3, r2, r3
 8005962:	43db      	mvns	r3, r3
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	4013      	ands	r3, r2
 8005968:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a20      	ldr	r2, [pc, #128]	; (80059f0 <HAL_GPIO_Init+0x240>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d052      	beq.n	8005a18 <HAL_GPIO_Init+0x268>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a1f      	ldr	r2, [pc, #124]	; (80059f4 <HAL_GPIO_Init+0x244>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d031      	beq.n	80059de <HAL_GPIO_Init+0x22e>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a1e      	ldr	r2, [pc, #120]	; (80059f8 <HAL_GPIO_Init+0x248>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d02b      	beq.n	80059da <HAL_GPIO_Init+0x22a>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a1d      	ldr	r2, [pc, #116]	; (80059fc <HAL_GPIO_Init+0x24c>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d025      	beq.n	80059d6 <HAL_GPIO_Init+0x226>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a1c      	ldr	r2, [pc, #112]	; (8005a00 <HAL_GPIO_Init+0x250>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d01f      	beq.n	80059d2 <HAL_GPIO_Init+0x222>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a1b      	ldr	r2, [pc, #108]	; (8005a04 <HAL_GPIO_Init+0x254>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d019      	beq.n	80059ce <HAL_GPIO_Init+0x21e>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a1a      	ldr	r2, [pc, #104]	; (8005a08 <HAL_GPIO_Init+0x258>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d013      	beq.n	80059ca <HAL_GPIO_Init+0x21a>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a19      	ldr	r2, [pc, #100]	; (8005a0c <HAL_GPIO_Init+0x25c>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d00d      	beq.n	80059c6 <HAL_GPIO_Init+0x216>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a18      	ldr	r2, [pc, #96]	; (8005a10 <HAL_GPIO_Init+0x260>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d007      	beq.n	80059c2 <HAL_GPIO_Init+0x212>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a17      	ldr	r2, [pc, #92]	; (8005a14 <HAL_GPIO_Init+0x264>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d101      	bne.n	80059be <HAL_GPIO_Init+0x20e>
 80059ba:	2309      	movs	r3, #9
 80059bc:	e02d      	b.n	8005a1a <HAL_GPIO_Init+0x26a>
 80059be:	230a      	movs	r3, #10
 80059c0:	e02b      	b.n	8005a1a <HAL_GPIO_Init+0x26a>
 80059c2:	2308      	movs	r3, #8
 80059c4:	e029      	b.n	8005a1a <HAL_GPIO_Init+0x26a>
 80059c6:	2307      	movs	r3, #7
 80059c8:	e027      	b.n	8005a1a <HAL_GPIO_Init+0x26a>
 80059ca:	2306      	movs	r3, #6
 80059cc:	e025      	b.n	8005a1a <HAL_GPIO_Init+0x26a>
 80059ce:	2305      	movs	r3, #5
 80059d0:	e023      	b.n	8005a1a <HAL_GPIO_Init+0x26a>
 80059d2:	2304      	movs	r3, #4
 80059d4:	e021      	b.n	8005a1a <HAL_GPIO_Init+0x26a>
 80059d6:	2303      	movs	r3, #3
 80059d8:	e01f      	b.n	8005a1a <HAL_GPIO_Init+0x26a>
 80059da:	2302      	movs	r3, #2
 80059dc:	e01d      	b.n	8005a1a <HAL_GPIO_Init+0x26a>
 80059de:	2301      	movs	r3, #1
 80059e0:	e01b      	b.n	8005a1a <HAL_GPIO_Init+0x26a>
 80059e2:	bf00      	nop
 80059e4:	58000080 	.word	0x58000080
 80059e8:	58024400 	.word	0x58024400
 80059ec:	58000400 	.word	0x58000400
 80059f0:	58020000 	.word	0x58020000
 80059f4:	58020400 	.word	0x58020400
 80059f8:	58020800 	.word	0x58020800
 80059fc:	58020c00 	.word	0x58020c00
 8005a00:	58021000 	.word	0x58021000
 8005a04:	58021400 	.word	0x58021400
 8005a08:	58021800 	.word	0x58021800
 8005a0c:	58021c00 	.word	0x58021c00
 8005a10:	58022000 	.word	0x58022000
 8005a14:	58022400 	.word	0x58022400
 8005a18:	2300      	movs	r3, #0
 8005a1a:	69fa      	ldr	r2, [r7, #28]
 8005a1c:	f002 0203 	and.w	r2, r2, #3
 8005a20:	0092      	lsls	r2, r2, #2
 8005a22:	4093      	lsls	r3, r2
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a2a:	4938      	ldr	r1, [pc, #224]	; (8005b0c <HAL_GPIO_Init+0x35c>)
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	089b      	lsrs	r3, r3, #2
 8005a30:	3302      	adds	r3, #2
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	43db      	mvns	r3, r3
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	4013      	ands	r3, r2
 8005a48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005a56:	69ba      	ldr	r2, [r7, #24]
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005a5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	43db      	mvns	r3, r3
 8005a72:	69ba      	ldr	r2, [r7, #24]
 8005a74:	4013      	ands	r3, r2
 8005a76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d003      	beq.n	8005a8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005a84:	69ba      	ldr	r2, [r7, #24]
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005a8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	43db      	mvns	r3, r3
 8005a9e:	69ba      	ldr	r2, [r7, #24]
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d003      	beq.n	8005ab8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005ab0:	69ba      	ldr	r2, [r7, #24]
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	69ba      	ldr	r2, [r7, #24]
 8005abc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	43db      	mvns	r3, r3
 8005ac8:	69ba      	ldr	r2, [r7, #24]
 8005aca:	4013      	ands	r3, r2
 8005acc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005ada:	69ba      	ldr	r2, [r7, #24]
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	3301      	adds	r3, #1
 8005aec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	fa22 f303 	lsr.w	r3, r2, r3
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f47f ae63 	bne.w	80057c4 <HAL_GPIO_Init+0x14>
  }
}
 8005afe:	bf00      	nop
 8005b00:	bf00      	nop
 8005b02:	3724      	adds	r7, #36	; 0x24
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	58000400 	.word	0x58000400

08005b10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	460b      	mov	r3, r1
 8005b1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	691a      	ldr	r2, [r3, #16]
 8005b20:	887b      	ldrh	r3, [r7, #2]
 8005b22:	4013      	ands	r3, r2
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d002      	beq.n	8005b2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	73fb      	strb	r3, [r7, #15]
 8005b2c:	e001      	b.n	8005b32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	460b      	mov	r3, r1
 8005b4a:	807b      	strh	r3, [r7, #2]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b50:	787b      	ldrb	r3, [r7, #1]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b56:	887a      	ldrh	r2, [r7, #2]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005b5c:	e003      	b.n	8005b66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005b5e:	887b      	ldrh	r3, [r7, #2]
 8005b60:	041a      	lsls	r2, r3, #16
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	619a      	str	r2, [r3, #24]
}
 8005b66:	bf00      	nop
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b085      	sub	sp, #20
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005b84:	887a      	ldrh	r2, [r7, #2]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	4013      	ands	r3, r2
 8005b8a:	041a      	lsls	r2, r3, #16
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	43d9      	mvns	r1, r3
 8005b90:	887b      	ldrh	r3, [r7, #2]
 8005b92:	400b      	ands	r3, r1
 8005b94:	431a      	orrs	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	619a      	str	r2, [r3, #24]
}
 8005b9a:	bf00      	nop
 8005b9c:	3714      	adds	r7, #20
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr

08005ba6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b082      	sub	sp, #8
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	4603      	mov	r3, r0
 8005bae:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bb4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005bb8:	88fb      	ldrh	r3, [r7, #6]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d008      	beq.n	8005bd2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005bc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bc4:	88fb      	ldrh	r3, [r7, #6]
 8005bc6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005bca:	88fb      	ldrh	r3, [r7, #6]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f000 f804 	bl	8005bda <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005bd2:	bf00      	nop
 8005bd4:	3708      	adds	r7, #8
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b083      	sub	sp, #12
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	4603      	mov	r3, r0
 8005be2:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d101      	bne.n	8005c02 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e0bd      	b.n	8005d7e <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2202      	movs	r2, #2
 8005c06:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d031      	beq.n	8005caa <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a4f      	ldr	r2, [pc, #316]	; (8005d88 <HAL_HRTIM_Init+0x198>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d10e      	bne.n	8005c6e <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8005c50:	4b4e      	ldr	r3, [pc, #312]	; (8005d8c <HAL_HRTIM_Init+0x19c>)
 8005c52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c56:	4a4d      	ldr	r2, [pc, #308]	; (8005d8c <HAL_HRTIM_Init+0x19c>)
 8005c58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c5c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005c60:	4b4a      	ldr	r3, [pc, #296]	; (8005d8c <HAL_HRTIM_Init+0x19c>)
 8005c62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c6a:	60fb      	str	r3, [r7, #12]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005c7c:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005c92:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7fc fcb2 	bl	8002614 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d012      	beq.n	8005ce2 <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cca:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	75fb      	strb	r3, [r7, #23]
 8005cf6:	e03e      	b.n	8005d76 <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8005cf8:	7dfa      	ldrb	r2, [r7, #23]
 8005cfa:	6879      	ldr	r1, [r7, #4]
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	00db      	lsls	r3, r3, #3
 8005d00:	1a9b      	subs	r3, r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	440b      	add	r3, r1
 8005d06:	3318      	adds	r3, #24
 8005d08:	2200      	movs	r2, #0
 8005d0a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8005d0c:	7dfa      	ldrb	r2, [r7, #23]
 8005d0e:	6879      	ldr	r1, [r7, #4]
 8005d10:	4613      	mov	r3, r2
 8005d12:	00db      	lsls	r3, r3, #3
 8005d14:	1a9b      	subs	r3, r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	440b      	add	r3, r1
 8005d1a:	331c      	adds	r3, #28
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8005d20:	7dfa      	ldrb	r2, [r7, #23]
 8005d22:	6879      	ldr	r1, [r7, #4]
 8005d24:	4613      	mov	r3, r2
 8005d26:	00db      	lsls	r3, r3, #3
 8005d28:	1a9b      	subs	r3, r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	440b      	add	r3, r1
 8005d2e:	3320      	adds	r3, #32
 8005d30:	2200      	movs	r2, #0
 8005d32:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8005d34:	7dfa      	ldrb	r2, [r7, #23]
 8005d36:	6879      	ldr	r1, [r7, #4]
 8005d38:	4613      	mov	r3, r2
 8005d3a:	00db      	lsls	r3, r3, #3
 8005d3c:	1a9b      	subs	r3, r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	440b      	add	r3, r1
 8005d42:	3324      	adds	r3, #36	; 0x24
 8005d44:	2200      	movs	r2, #0
 8005d46:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8005d48:	7dfa      	ldrb	r2, [r7, #23]
 8005d4a:	6879      	ldr	r1, [r7, #4]
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	00db      	lsls	r3, r3, #3
 8005d50:	1a9b      	subs	r3, r3, r2
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	440b      	add	r3, r1
 8005d56:	3328      	adds	r3, #40	; 0x28
 8005d58:	2200      	movs	r2, #0
 8005d5a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8005d5c:	7dfa      	ldrb	r2, [r7, #23]
 8005d5e:	6879      	ldr	r1, [r7, #4]
 8005d60:	4613      	mov	r3, r2
 8005d62:	00db      	lsls	r3, r3, #3
 8005d64:	1a9b      	subs	r3, r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	440b      	add	r3, r1
 8005d6a:	3330      	adds	r3, #48	; 0x30
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8005d70:	7dfb      	ldrb	r3, [r7, #23]
 8005d72:	3301      	adds	r3, #1
 8005d74:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8005d76:	7dfb      	ldrb	r3, [r7, #23]
 8005d78:	2b05      	cmp	r3, #5
 8005d7a:	d9bd      	bls.n	8005cf8 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3718      	adds	r7, #24
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	40017400 	.word	0x40017400
 8005d8c:	58024400 	.word	0x58024400

08005d90 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d101      	bne.n	8005dac <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8005da8:	2302      	movs	r3, #2
 8005daa:	e015      	b.n	8005dd8 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2202      	movs	r2, #2
 8005db0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	2b05      	cmp	r3, #5
 8005db8:	d104      	bne.n	8005dc4 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8005dba:	6879      	ldr	r1, [r7, #4]
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f000 fd43 	bl	8006848 <HRTIM_MasterBase_Config>
 8005dc2:	e004      	b.n	8005dce <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	68b9      	ldr	r1, [r7, #8]
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f000 fd6c 	bl	80068a6 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3710      	adds	r7, #16
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d101      	bne.n	8005dfc <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8005df8:	2302      	movs	r3, #2
 8005dfa:	e05f      	b.n	8005ebc <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d101      	bne.n	8005e0a <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8005e06:	2302      	movs	r3, #2
 8005e08:	e058      	b.n	8005ebc <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2202      	movs	r2, #2
 8005e16:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	2b05      	cmp	r3, #5
 8005e1e:	d104      	bne.n	8005e2a <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8005e20:	6879      	ldr	r1, [r7, #4]
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f000 fd7f 	bl	8006926 <HRTIM_MasterWaveform_Config>
 8005e28:	e004      	b.n	8005e34 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	68b9      	ldr	r1, [r7, #8]
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f000 fde0 	bl	80069f4 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6819      	ldr	r1, [r3, #0]
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	00db      	lsls	r3, r3, #3
 8005e40:	1a9b      	subs	r3, r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4403      	add	r3, r0
 8005e46:	3320      	adds	r3, #32
 8005e48:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6859      	ldr	r1, [r3, #4]
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	4613      	mov	r3, r2
 8005e54:	00db      	lsls	r3, r3, #3
 8005e56:	1a9b      	subs	r3, r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4403      	add	r3, r0
 8005e5c:	3324      	adds	r3, #36	; 0x24
 8005e5e:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6899      	ldr	r1, [r3, #8]
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	4613      	mov	r3, r2
 8005e6a:	00db      	lsls	r3, r3, #3
 8005e6c:	1a9b      	subs	r3, r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4403      	add	r3, r0
 8005e72:	3328      	adds	r3, #40	; 0x28
 8005e74:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68d9      	ldr	r1, [r3, #12]
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	4613      	mov	r3, r2
 8005e80:	00db      	lsls	r3, r3, #3
 8005e82:	1a9b      	subs	r3, r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4403      	add	r3, r0
 8005e88:	332c      	adds	r3, #44	; 0x2c
 8005e8a:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6919      	ldr	r1, [r3, #16]
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	4613      	mov	r3, r2
 8005e96:	00db      	lsls	r3, r3, #3
 8005e98:	1a9b      	subs	r3, r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4403      	add	r3, r0
 8005e9e:	3330      	adds	r3, #48	; 0x30
 8005ea0:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8005ea2:	68b9      	ldr	r1, [r7, #8]
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f000 ffe3 	bl	8006e70 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3710      	adds	r7, #16
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
 8005ed0:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d101      	bne.n	8005ee2 <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 8005ede:	2302      	movs	r3, #2
 8005ee0:	e157      	b.n	8006192 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d101      	bne.n	8005ef0 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8005eec:	2302      	movs	r3, #2
 8005eee:	e150      	b.n	8006192 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2202      	movs	r2, #2
 8005efc:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	2b05      	cmp	r3, #5
 8005f04:	d140      	bne.n	8005f88 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	2b07      	cmp	r3, #7
 8005f0c:	d82a      	bhi.n	8005f64 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8005f0e:	a201      	add	r2, pc, #4	; (adr r2, 8005f14 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8005f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f14:	08005f35 	.word	0x08005f35
 8005f18:	08005f41 	.word	0x08005f41
 8005f1c:	08005f65 	.word	0x08005f65
 8005f20:	08005f4d 	.word	0x08005f4d
 8005f24:	08005f65 	.word	0x08005f65
 8005f28:	08005f65 	.word	0x08005f65
 8005f2c:	08005f65 	.word	0x08005f65
 8005f30:	08005f59 	.word	0x08005f59
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	683a      	ldr	r2, [r7, #0]
 8005f3a:	6812      	ldr	r2, [r2, #0]
 8005f3c:	61da      	str	r2, [r3, #28]
        break;
 8005f3e:	e01a      	b.n	8005f76 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	683a      	ldr	r2, [r7, #0]
 8005f46:	6812      	ldr	r2, [r2, #0]
 8005f48:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 8005f4a:	e014      	b.n	8005f76 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	683a      	ldr	r2, [r7, #0]
 8005f52:	6812      	ldr	r2, [r2, #0]
 8005f54:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8005f56:	e00e      	b.n	8005f76 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	683a      	ldr	r2, [r7, #0]
 8005f5e:	6812      	ldr	r2, [r2, #0]
 8005f60:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8005f62:	e008      	b.n	8005f76 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2207      	movs	r2, #7
 8005f68:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 8005f74:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b07      	cmp	r3, #7
 8005f80:	f040 80fe 	bne.w	8006180 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e104      	b.n	8006192 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	2b07      	cmp	r3, #7
 8005f8e:	f200 80e3 	bhi.w	8006158 <HAL_HRTIM_WaveformCompareConfig+0x294>
 8005f92:	a201      	add	r2, pc, #4	; (adr r2, 8005f98 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8005f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f98:	08005fb9 	.word	0x08005fb9
 8005f9c:	08005fcd 	.word	0x08005fcd
 8005fa0:	08006159 	.word	0x08006159
 8005fa4:	08006089 	.word	0x08006089
 8005fa8:	08006159 	.word	0x08006159
 8005fac:	08006159 	.word	0x08006159
 8005fb0:	08006159 	.word	0x08006159
 8005fb4:	0800609d 	.word	0x0800609d
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6819      	ldr	r1, [r3, #0]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	01db      	lsls	r3, r3, #7
 8005fc4:	440b      	add	r3, r1
 8005fc6:	339c      	adds	r3, #156	; 0x9c
 8005fc8:	601a      	str	r2, [r3, #0]
        break;
 8005fca:	e0d1      	b.n	8006170 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6819      	ldr	r1, [r3, #0]
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	01db      	lsls	r3, r3, #7
 8005fd8:	440b      	add	r3, r1
 8005fda:	33a4      	adds	r3, #164	; 0xa4
 8005fdc:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d03f      	beq.n	8006066 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	3301      	adds	r3, #1
 8005fee:	01db      	lsls	r3, r3, #7
 8005ff0:	4413      	add	r3, r2
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	6811      	ldr	r1, [r2, #0]
 8005ff8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	3301      	adds	r3, #1
 8006000:	01db      	lsls	r3, r3, #7
 8006002:	440b      	add	r3, r1
 8006004:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	3301      	adds	r3, #1
 800600e:	01db      	lsls	r3, r3, #7
 8006010:	4413      	add	r3, r2
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	68f9      	ldr	r1, [r7, #12]
 800601a:	6809      	ldr	r1, [r1, #0]
 800601c:	431a      	orrs	r2, r3
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	3301      	adds	r3, #1
 8006022:	01db      	lsls	r3, r3, #7
 8006024:	440b      	add	r3, r1
 8006026:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006030:	d109      	bne.n	8006046 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6819      	ldr	r1, [r3, #0]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	689a      	ldr	r2, [r3, #8]
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	01db      	lsls	r3, r3, #7
 800603e:	440b      	add	r3, r1
 8006040:	339c      	adds	r3, #156	; 0x9c
 8006042:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8006044:	e091      	b.n	800616a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800604e:	f040 808c 	bne.w	800616a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6819      	ldr	r1, [r3, #0]
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	689a      	ldr	r2, [r3, #8]
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	01db      	lsls	r3, r3, #7
 800605e:	440b      	add	r3, r1
 8006060:	33a8      	adds	r3, #168	; 0xa8
 8006062:	601a      	str	r2, [r3, #0]
         break;
 8006064:	e081      	b.n	800616a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	3301      	adds	r3, #1
 800606e:	01db      	lsls	r3, r3, #7
 8006070:	4413      	add	r3, r2
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	6811      	ldr	r1, [r2, #0]
 8006078:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	3301      	adds	r3, #1
 8006080:	01db      	lsls	r3, r3, #7
 8006082:	440b      	add	r3, r1
 8006084:	601a      	str	r2, [r3, #0]
         break;
 8006086:	e070      	b.n	800616a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6819      	ldr	r1, [r3, #0]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	01db      	lsls	r3, r3, #7
 8006094:	440b      	add	r3, r1
 8006096:	33a8      	adds	r3, #168	; 0xa8
 8006098:	601a      	str	r2, [r3, #0]
        break;
 800609a:	e069      	b.n	8006170 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6819      	ldr	r1, [r3, #0]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	01db      	lsls	r3, r3, #7
 80060a8:	440b      	add	r3, r1
 80060aa:	33ac      	adds	r3, #172	; 0xac
 80060ac:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d03f      	beq.n	8006136 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	3301      	adds	r3, #1
 80060be:	01db      	lsls	r3, r3, #7
 80060c0:	4413      	add	r3, r2
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	6811      	ldr	r1, [r2, #0]
 80060c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	3301      	adds	r3, #1
 80060d0:	01db      	lsls	r3, r3, #7
 80060d2:	440b      	add	r3, r1
 80060d4:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	3301      	adds	r3, #1
 80060de:	01db      	lsls	r3, r3, #7
 80060e0:	4413      	add	r3, r2
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	68f9      	ldr	r1, [r7, #12]
 80060ec:	6809      	ldr	r1, [r1, #0]
 80060ee:	431a      	orrs	r2, r3
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	3301      	adds	r3, #1
 80060f4:	01db      	lsls	r3, r3, #7
 80060f6:	440b      	add	r3, r1
 80060f8:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006102:	d109      	bne.n	8006118 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6819      	ldr	r1, [r3, #0]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	689a      	ldr	r2, [r3, #8]
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	01db      	lsls	r3, r3, #7
 8006110:	440b      	add	r3, r1
 8006112:	339c      	adds	r3, #156	; 0x9c
 8006114:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 8006116:	e02a      	b.n	800616e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006120:	d125      	bne.n	800616e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6819      	ldr	r1, [r3, #0]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	689a      	ldr	r2, [r3, #8]
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	01db      	lsls	r3, r3, #7
 800612e:	440b      	add	r3, r1
 8006130:	33a8      	adds	r3, #168	; 0xa8
 8006132:	601a      	str	r2, [r3, #0]
         break;
 8006134:	e01b      	b.n	800616e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	3301      	adds	r3, #1
 800613e:	01db      	lsls	r3, r3, #7
 8006140:	4413      	add	r3, r2
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	6811      	ldr	r1, [r2, #0]
 8006148:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	3301      	adds	r3, #1
 8006150:	01db      	lsls	r3, r3, #7
 8006152:	440b      	add	r3, r1
 8006154:	601a      	str	r2, [r3, #0]
         break;
 8006156:	e00a      	b.n	800616e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2207      	movs	r2, #7
 800615c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 8006168:	e002      	b.n	8006170 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 800616a:	bf00      	nop
 800616c:	e000      	b.n	8006170 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 800616e:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8006176:	b2db      	uxtb	r3, r3
 8006178:	2b07      	cmp	r3, #7
 800617a:	d101      	bne.n	8006180 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e008      	b.n	8006192 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3714      	adds	r7, #20
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop

080061a0 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
 80061ac:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d101      	bne.n	80061be <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 80061ba:	2302      	movs	r3, #2
 80061bc:	e01d      	b.n	80061fa <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d101      	bne.n	80061cc <HAL_HRTIM_WaveformOutputConfig+0x2c>
 80061c8:	2302      	movs	r3, #2
 80061ca:	e016      	b.n	80061fa <HAL_HRTIM_WaveformOutputConfig+0x5a>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2202      	movs	r2, #2
 80061d8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	68b9      	ldr	r1, [r7, #8]
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f000 fd46 	bl	8006c74 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
	...

08006204 <HAL_HRTIM_WaveformSetOutputLevel>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformSetOutputLevel(HRTIM_HandleTypeDef * hhrtim,
                                                   uint32_t TimerIdx,
                                                   uint32_t Output,
                                                   uint32_t OutputLevel)
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
 8006210:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMER_OUTPUT(TimerIdx, Output));
  assert_param(IS_HRTIM_OUTPUTLEVEL(OutputLevel));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8006218:	b2db      	uxtb	r3, r3
 800621a:	2b02      	cmp	r3, #2
 800621c:	d101      	bne.n	8006222 <HAL_HRTIM_WaveformSetOutputLevel+0x1e>
  {
     return HAL_BUSY;
 800621e:	2302      	movs	r3, #2
 8006220:	e0df      	b.n	80063e2 <HAL_HRTIM_WaveformSetOutputLevel+0x1de>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8006228:	2b01      	cmp	r3, #1
 800622a:	d101      	bne.n	8006230 <HAL_HRTIM_WaveformSetOutputLevel+0x2c>
 800622c:	2302      	movs	r3, #2
 800622e:	e0d8      	b.n	80063e2 <HAL_HRTIM_WaveformSetOutputLevel+0x1de>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2202      	movs	r2, #2
 800623c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Force timer output level */
  switch (Output)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006246:	f000 808d 	beq.w	8006364 <HAL_HRTIM_WaveformSetOutputLevel+0x160>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006250:	f200 80ad 	bhi.w	80063ae <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800625a:	d05e      	beq.n	800631a <HAL_HRTIM_WaveformSetOutputLevel+0x116>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006262:	f200 80a4 	bhi.w	80063ae <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2b80      	cmp	r3, #128	; 0x80
 800626a:	d07b      	beq.n	8006364 <HAL_HRTIM_WaveformSetOutputLevel+0x160>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2b80      	cmp	r3, #128	; 0x80
 8006270:	f200 809d 	bhi.w	80063ae <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b20      	cmp	r3, #32
 8006278:	d84c      	bhi.n	8006314 <HAL_HRTIM_WaveformSetOutputLevel+0x110>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 8096 	beq.w	80063ae <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	3b01      	subs	r3, #1
 8006286:	2b1f      	cmp	r3, #31
 8006288:	f200 8091 	bhi.w	80063ae <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 800628c:	a201      	add	r2, pc, #4	; (adr r2, 8006294 <HAL_HRTIM_WaveformSetOutputLevel+0x90>)
 800628e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006292:	bf00      	nop
 8006294:	0800631b 	.word	0x0800631b
 8006298:	08006365 	.word	0x08006365
 800629c:	080063af 	.word	0x080063af
 80062a0:	0800631b 	.word	0x0800631b
 80062a4:	080063af 	.word	0x080063af
 80062a8:	080063af 	.word	0x080063af
 80062ac:	080063af 	.word	0x080063af
 80062b0:	08006365 	.word	0x08006365
 80062b4:	080063af 	.word	0x080063af
 80062b8:	080063af 	.word	0x080063af
 80062bc:	080063af 	.word	0x080063af
 80062c0:	080063af 	.word	0x080063af
 80062c4:	080063af 	.word	0x080063af
 80062c8:	080063af 	.word	0x080063af
 80062cc:	080063af 	.word	0x080063af
 80062d0:	0800631b 	.word	0x0800631b
 80062d4:	080063af 	.word	0x080063af
 80062d8:	080063af 	.word	0x080063af
 80062dc:	080063af 	.word	0x080063af
 80062e0:	080063af 	.word	0x080063af
 80062e4:	080063af 	.word	0x080063af
 80062e8:	080063af 	.word	0x080063af
 80062ec:	080063af 	.word	0x080063af
 80062f0:	080063af 	.word	0x080063af
 80062f4:	080063af 	.word	0x080063af
 80062f8:	080063af 	.word	0x080063af
 80062fc:	080063af 	.word	0x080063af
 8006300:	080063af 	.word	0x080063af
 8006304:	080063af 	.word	0x080063af
 8006308:	080063af 	.word	0x080063af
 800630c:	080063af 	.word	0x080063af
 8006310:	08006365 	.word	0x08006365
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b40      	cmp	r3, #64	; 0x40
 8006318:	d149      	bne.n	80063ae <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
  case HRTIM_OUTPUT_TB1:
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      if (OutputLevel == HRTIM_OUTPUTLEVEL_ACTIVE)
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d110      	bne.n	8006342 <HAL_HRTIM_WaveformSetOutputLevel+0x13e>
      {
        /* Force output to its active state */
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R,HRTIM_SET1R_SST);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	01db      	lsls	r3, r3, #7
 8006328:	4413      	add	r3, r2
 800632a:	33bc      	adds	r3, #188	; 0xbc
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	6811      	ldr	r1, [r2, #0]
 8006332:	f043 0201 	orr.w	r2, r3, #1
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	01db      	lsls	r3, r3, #7
 800633a:	440b      	add	r3, r1
 800633c:	33bc      	adds	r3, #188	; 0xbc
 800633e:	601a      	str	r2, [r3, #0]
      else
      {
        /* Force output to its inactive state */
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R, HRTIM_RST1R_SRT);
      }
      break;
 8006340:	e03e      	b.n	80063c0 <HAL_HRTIM_WaveformSetOutputLevel+0x1bc>
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R, HRTIM_RST1R_SRT);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	01db      	lsls	r3, r3, #7
 800634a:	4413      	add	r3, r2
 800634c:	33c0      	adds	r3, #192	; 0xc0
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	6811      	ldr	r1, [r2, #0]
 8006354:	f043 0201 	orr.w	r2, r3, #1
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	01db      	lsls	r3, r3, #7
 800635c:	440b      	add	r3, r1
 800635e:	33c0      	adds	r3, #192	; 0xc0
 8006360:	601a      	str	r2, [r3, #0]
      break;
 8006362:	e02d      	b.n	80063c0 <HAL_HRTIM_WaveformSetOutputLevel+0x1bc>
  case HRTIM_OUTPUT_TB2:
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      if (OutputLevel == HRTIM_OUTPUTLEVEL_ACTIVE)
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d110      	bne.n	800638c <HAL_HRTIM_WaveformSetOutputLevel+0x188>
      {
        /* Force output to its active state */
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R, HRTIM_SET2R_SST);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	01db      	lsls	r3, r3, #7
 8006372:	4413      	add	r3, r2
 8006374:	33c4      	adds	r3, #196	; 0xc4
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	6811      	ldr	r1, [r2, #0]
 800637c:	f043 0201 	orr.w	r2, r3, #1
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	01db      	lsls	r3, r3, #7
 8006384:	440b      	add	r3, r1
 8006386:	33c4      	adds	r3, #196	; 0xc4
 8006388:	601a      	str	r2, [r3, #0]
      else
      {
        /* Force output to its inactive state */
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R, HRTIM_RST2R_SRT);
      }
      break;
 800638a:	e019      	b.n	80063c0 <HAL_HRTIM_WaveformSetOutputLevel+0x1bc>
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R, HRTIM_RST2R_SRT);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	01db      	lsls	r3, r3, #7
 8006394:	4413      	add	r3, r2
 8006396:	33c8      	adds	r3, #200	; 0xc8
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	6811      	ldr	r1, [r2, #0]
 800639e:	f043 0201 	orr.w	r2, r3, #1
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	01db      	lsls	r3, r3, #7
 80063a6:	440b      	add	r3, r1
 80063a8:	33c8      	adds	r3, #200	; 0xc8
 80063aa:	601a      	str	r2, [r3, #0]
      break;
 80063ac:	e008      	b.n	80063c0 <HAL_HRTIM_WaveformSetOutputLevel+0x1bc>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2207      	movs	r2, #7
 80063b2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 80063be:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	2b07      	cmp	r3, #7
 80063ca:	d101      	bne.n	80063d0 <HAL_HRTIM_WaveformSetOutputLevel+0x1cc>
  {
     return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e008      	b.n	80063e2 <HAL_HRTIM_WaveformSetOutputLevel+0x1de>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3714      	adds	r7, #20
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop

080063f0 <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8006400:	2b01      	cmp	r3, #1
 8006402:	d101      	bne.n	8006408 <HAL_HRTIM_WaveformOutputStart+0x18>
 8006404:	2302      	movs	r3, #2
 8006406:	e01a      	b.n	800643e <HAL_HRTIM_WaveformOutputStart+0x4e>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2202      	movs	r2, #2
 8006414:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	683a      	ldr	r2, [r7, #0]
 8006426:	430a      	orrs	r2, r1
 8006428:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr

0800644a <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 800644a:	b480      	push	{r7}
 800644c:	b083      	sub	sp, #12
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800645a:	2b01      	cmp	r3, #1
 800645c:	d101      	bne.n	8006462 <HAL_HRTIM_WaveformOutputStop+0x18>
 800645e:	2302      	movs	r3, #2
 8006460:	e01a      	b.n	8006498 <HAL_HRTIM_WaveformOutputStop+0x4e>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2202      	movs	r2, #2
 800646e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f8d3 1398 	ldr.w	r1, [r3, #920]	; 0x398
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	430a      	orrs	r2, r1
 8006482:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <HAL_HRTIM_WaveformCountStart_IT>:
  *       function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart_IT(HRTIM_HandleTypeDef * hhrtim,
                                                    uint32_t Timers)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d101      	bne.n	80064bc <HAL_HRTIM_WaveformCountStart_IT+0x18>
 80064b8:	2302      	movs	r3, #2
 80064ba:	e05b      	b.n	8006574 <HAL_HRTIM_WaveformCountStart_IT+0xd0>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2202      	movs	r2, #2
 80064c8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable HRTIM interrupts (if required) */
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	430a      	orrs	r2, r1
 80064de:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Enable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d009      	beq.n	8006500 <HAL_HRTIM_WaveformCountStart_IT+0x5c>
  {
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim,
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68d9      	ldr	r1, [r3, #12]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	430a      	orrs	r2, r1
 80064fe:	60da      	str	r2, [r3, #12]
                                 hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
  }

  /* Enable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8006500:	2300      	movs	r3, #0
 8006502:	73fb      	strb	r3, [r7, #15]
 8006504:	e022      	b.n	800654c <HAL_HRTIM_WaveformCountStart_IT+0xa8>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 8006506:	7bfb      	ldrb	r3, [r7, #15]
 8006508:	4a1d      	ldr	r2, [pc, #116]	; (8006580 <HAL_HRTIM_WaveformCountStart_IT+0xdc>)
 800650a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	4013      	ands	r3, r2
 8006512:	2b00      	cmp	r3, #0
 8006514:	d017      	beq.n	8006546 <HAL_HRTIM_WaveformCountStart_IT+0xa2>
    {
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	7bfb      	ldrb	r3, [r7, #15]
 800651c:	01db      	lsls	r3, r3, #7
 800651e:	4413      	add	r3, r2
 8006520:	338c      	adds	r3, #140	; 0x8c
 8006522:	6818      	ldr	r0, [r3, #0]
 8006524:	7bfa      	ldrb	r2, [r7, #15]
 8006526:	6879      	ldr	r1, [r7, #4]
 8006528:	4613      	mov	r3, r2
 800652a:	00db      	lsls	r3, r3, #3
 800652c:	1a9b      	subs	r3, r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	440b      	add	r3, r1
 8006532:	3320      	adds	r3, #32
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6819      	ldr	r1, [r3, #0]
 800653a:	7bfb      	ldrb	r3, [r7, #15]
 800653c:	4302      	orrs	r2, r0
 800653e:	01db      	lsls	r3, r3, #7
 8006540:	440b      	add	r3, r1
 8006542:	338c      	adds	r3, #140	; 0x8c
 8006544:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8006546:	7bfb      	ldrb	r3, [r7, #15]
 8006548:	3301      	adds	r3, #1
 800654a:	73fb      	strb	r3, [r7, #15]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800654c:	7bfb      	ldrb	r3, [r7, #15]
 800654e:	2b04      	cmp	r3, #4
 8006550:	d9d9      	bls.n	8006506 <HAL_HRTIM_WaveformCountStart_IT+0x62>
                                  hhrtim->TimerParam[timer_idx].InterruptRequests);
    }
  }

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	6819      	ldr	r1, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	683a      	ldr	r2, [r7, #0]
 800655e:	430a      	orrs	r2, r1
 8006560:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;}
 8006572:	2300      	movs	r3, #0
 8006574:	4618      	mov	r0, r3
 8006576:	3714      	adds	r7, #20
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr
 8006580:	20000028 	.word	0x20000028

08006584 <HAL_HRTIM_WaveformCountStop_IT>:
  * @note The counter of a timer is stopped only if all timer outputs are disabled
  * @note All enabled timer related interrupts are disabled.
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStop_IT(HRTIM_HandleTypeDef * hhrtim,
                                                   uint32_t Timers)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  /* ++ WA */
  __IO uint32_t delai = (uint32_t)(0x17FU);
 800658e:	f240 137f 	movw	r3, #383	; 0x17f
 8006592:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800659a:	2b01      	cmp	r3, #1
 800659c:	d101      	bne.n	80065a2 <HAL_HRTIM_WaveformCountStop_IT+0x1e>
 800659e:	2302      	movs	r3, #2
 80065a0:	e065      	b.n	800666e <HAL_HRTIM_WaveformCountStop_IT+0xea>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2201      	movs	r2, #1
 80065a6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2202      	movs	r2, #2
 80065ae:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Disable HRTIM interrupts (if required) */
  __HAL_HRTIM_DISABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	43da      	mvns	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	400a      	ands	r2, r1
 80065c6:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Disable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00a      	beq.n	80065ea <HAL_HRTIM_WaveformCountStop_IT+0x66>
  {
    /* Interrupts enable flag must be cleared one by one */
    __HAL_HRTIM_MASTER_DISABLE_IT(hhrtim, hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68d9      	ldr	r1, [r3, #12]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80065e0:	43da      	mvns	r2, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	400a      	ands	r2, r1
 80065e8:	60da      	str	r2, [r3, #12]
  }

  /* Disable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80065ea:	2300      	movs	r3, #0
 80065ec:	73fb      	strb	r3, [r7, #15]
 80065ee:	e023      	b.n	8006638 <HAL_HRTIM_WaveformCountStop_IT+0xb4>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 80065f0:	7bfb      	ldrb	r3, [r7, #15]
 80065f2:	4a22      	ldr	r2, [pc, #136]	; (800667c <HAL_HRTIM_WaveformCountStop_IT+0xf8>)
 80065f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	4013      	ands	r3, r2
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d018      	beq.n	8006632 <HAL_HRTIM_WaveformCountStop_IT+0xae>
    {
      __HAL_HRTIM_TIMER_DISABLE_IT(hhrtim, timer_idx, hhrtim->TimerParam[timer_idx].InterruptRequests);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	7bfb      	ldrb	r3, [r7, #15]
 8006606:	01db      	lsls	r3, r3, #7
 8006608:	4413      	add	r3, r2
 800660a:	338c      	adds	r3, #140	; 0x8c
 800660c:	6818      	ldr	r0, [r3, #0]
 800660e:	7bfa      	ldrb	r2, [r7, #15]
 8006610:	6879      	ldr	r1, [r7, #4]
 8006612:	4613      	mov	r3, r2
 8006614:	00db      	lsls	r3, r3, #3
 8006616:	1a9b      	subs	r3, r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	440b      	add	r3, r1
 800661c:	3320      	adds	r3, #32
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	43da      	mvns	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6819      	ldr	r1, [r3, #0]
 8006626:	7bfb      	ldrb	r3, [r7, #15]
 8006628:	4002      	ands	r2, r0
 800662a:	01db      	lsls	r3, r3, #7
 800662c:	440b      	add	r3, r1
 800662e:	338c      	adds	r3, #140	; 0x8c
 8006630:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8006632:	7bfb      	ldrb	r3, [r7, #15]
 8006634:	3301      	adds	r3, #1
 8006636:	73fb      	strb	r3, [r7, #15]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8006638:	7bfb      	ldrb	r3, [r7, #15]
 800663a:	2b04      	cmp	r3, #4
 800663c:	d9d8      	bls.n	80065f0 <HAL_HRTIM_WaveformCountStop_IT+0x6c>
    }
  }

  /* ++ WA */
  do { delai--; } while (delai != 0U);
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	3b01      	subs	r3, #1
 8006642:	60bb      	str	r3, [r7, #8]
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1f9      	bne.n	800663e <HAL_HRTIM_WaveformCountStop_IT+0xba>
  /* -- WA */

  /* Disable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR &= ~(Timers);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	6819      	ldr	r1, [r3, #0]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	43da      	mvns	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	400a      	ands	r2, r1
 800665a:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	20000028 	.word	0x20000028

08006680 <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	2bff      	cmp	r3, #255	; 0xff
 800668e:	d103      	bne.n	8006698 <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 fc4f 	bl	8006f34 <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 8006696:	e00a      	b.n	80066ae <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	2b05      	cmp	r3, #5
 800669c:	d103      	bne.n	80066a6 <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 fcc6 	bl	8007030 <HRTIM_Master_ISR>
}
 80066a4:	e003      	b.n	80066ae <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 80066a6:	6839      	ldr	r1, [r7, #0]
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 fd6b 	bl	8007184 <HRTIM_Timer_ISR>
}
 80066ae:	bf00      	nop
 80066b0:	3708      	adds	r7, #8
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80066b6:	b480      	push	{r7}
 80066b8:	b083      	sub	sp, #12
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 80066be:	bf00      	nop
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr

080066ca <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b083      	sub	sp, #12
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 80066d2:	bf00      	nop
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80066de:	b480      	push	{r7}
 80066e0:	b083      	sub	sp, #12
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 80066e6:	bf00      	nop
 80066e8:	370c      	adds	r7, #12
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr

080066f2 <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b083      	sub	sp, #12
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 80066fa:	bf00      	nop
 80066fc:	370c      	adds	r7, #12
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8006706:	b480      	push	{r7}
 8006708:	b083      	sub	sp, #12
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 800670e:	bf00      	nop
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 800671a:	b480      	push	{r7}
 800671c:	b083      	sub	sp, #12
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 8006722:	bf00      	nop
 8006724:	370c      	adds	r7, #12
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 800672e:	b480      	push	{r7}
 8006730:	b083      	sub	sp, #12
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 8006736:	bf00      	nop
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8006742:	b480      	push	{r7}
 8006744:	b083      	sub	sp, #12
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 800674a:	bf00      	nop
 800674c:	370c      	adds	r7, #12
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr

08006756 <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8006756:	b480      	push	{r7}
 8006758:	b083      	sub	sp, #12
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
 800675e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 8006760:	bf00      	nop
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 8006776:	bf00      	nop
 8006778:	370c      	adds	r7, #12
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr

08006782 <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8006782:	b480      	push	{r7}
 8006784:	b083      	sub	sp, #12
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
 800678a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 80067a2:	bf00      	nop
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80067ae:	b480      	push	{r7}
 80067b0:	b083      	sub	sp, #12
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
 80067b6:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 80067b8:	bf00      	nop
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 80067ce:	bf00      	nop
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr

080067da <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80067da:	b480      	push	{r7}
 80067dc:	b083      	sub	sp, #12
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
 80067e2:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 80067fa:	bf00      	nop
 80067fc:	370c      	adds	r7, #12
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8006806:	b480      	push	{r7}
 8006808:	b083      	sub	sp, #12
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 8006826:	bf00      	nop
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr

08006832 <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8006832:	b480      	push	{r7}
 8006834:	b083      	sub	sp, #12
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
 800683a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f023 0307 	bic.w	r3, r3, #7
 8006860:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	4313      	orrs	r3, r2
 800686a:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f023 0318 	bic.w	r3, r3, #24
 8006872:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	4313      	orrs	r3, r2
 800687c:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	683a      	ldr	r2, [r7, #0]
 800688c:	6812      	ldr	r2, [r2, #0]
 800688e:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	683a      	ldr	r2, [r7, #0]
 8006896:	6852      	ldr	r2, [r2, #4]
 8006898:	619a      	str	r2, [r3, #24]
}
 800689a:	bf00      	nop
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr

080068a6 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b087      	sub	sp, #28
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	60f8      	str	r0, [r7, #12]
 80068ae:	60b9      	str	r1, [r7, #8]
 80068b0:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	3301      	adds	r3, #1
 80068ba:	01db      	lsls	r3, r3, #7
 80068bc:	4413      	add	r3, r2
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	f023 0307 	bic.w	r3, r3, #7
 80068c8:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	f023 0318 	bic.w	r3, r3, #24
 80068da:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	3301      	adds	r3, #1
 80068ee:	01db      	lsls	r3, r3, #7
 80068f0:	4413      	add	r3, r2
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6819      	ldr	r1, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	01db      	lsls	r3, r3, #7
 8006902:	440b      	add	r3, r1
 8006904:	3394      	adds	r3, #148	; 0x94
 8006906:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6819      	ldr	r1, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	01db      	lsls	r3, r3, #7
 8006914:	440b      	add	r3, r1
 8006916:	3398      	adds	r3, #152	; 0x98
 8006918:	601a      	str	r2, [r3, #0]
}
 800691a:	bf00      	nop
 800691c:	371c      	adds	r7, #28
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr

08006926 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8006926:	b480      	push	{r7}
 8006928:	b085      	sub	sp, #20
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
 800692e:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8006940:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f023 0320 	bic.w	r3, r3, #32
 8006948:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	695b      	ldr	r3, [r3, #20]
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	4313      	orrs	r3, r2
 8006952:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800695a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	4313      	orrs	r3, r2
 8006964:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800696c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	69db      	ldr	r3, [r3, #28]
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	4313      	orrs	r3, r2
 8006976:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800697e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	6a1b      	ldr	r3, [r3, #32]
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	4313      	orrs	r3, r2
 8006988:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8006990:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	4313      	orrs	r3, r2
 800699a:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80069a2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80069b6:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	4313      	orrs	r3, r2
 80069c0:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069c8:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68ba      	ldr	r2, [r7, #8]
 80069e2:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 80069e6:	bf00      	nop
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
	...

080069f4 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b08b      	sub	sp, #44	; 0x2c
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	3301      	adds	r3, #1
 8006a08:	01db      	lsls	r3, r3, #7
 8006a0a:	4413      	add	r3, r2
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	6811      	ldr	r1, [r2, #0]
 8006a12:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	01db      	lsls	r3, r3, #7
 8006a1c:	440b      	add	r3, r1
 8006a1e:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	3301      	adds	r3, #1
 8006a28:	01db      	lsls	r3, r3, #7
 8006a2a:	4413      	add	r3, r2
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	01db      	lsls	r3, r3, #7
 8006a38:	4413      	add	r3, r2
 8006a3a:	33e8      	adds	r3, #232	; 0xe8
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	01db      	lsls	r3, r3, #7
 8006a48:	4413      	add	r3, r2
 8006a4a:	33e4      	adds	r3, #228	; 0xe4
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8006a58:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5c:	f023 0320 	bic.w	r3, r3, #32
 8006a60:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a72:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a84:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	69db      	ldr	r3, [r3, #28]
 8006a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8006a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a92:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006a96:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a1b      	ldr	r3, [r3, #32]
 8006a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8006aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa4:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8006aa8:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006aba:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006acc:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ad6:	d103      	bne.n	8006ae0 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8006ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ade:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ae6:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aee:	4313      	orrs	r3, r2
 8006af0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8006af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006af8:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b00:	4313      	orrs	r3, r2
 8006b02:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8006b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b06:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8006b0a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b12:	4313      	orrs	r3, r2
 8006b14:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	f023 031f 	bic.w	r3, r3, #31
 8006b1c:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b22:	f003 031f 	and.w	r3, r3, #31
 8006b26:	69ba      	ldr	r2, [r7, #24]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b32:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b38:	69ba      	ldr	r2, [r7, #24]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d108      	bne.n	8006b58 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b4c:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b52:	6a3a      	ldr	r2, [r7, #32]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b5c:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8006b60:	d004      	beq.n	8006b6c <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b66:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8006b6a:	d103      	bne.n	8006b74 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b70:	2b40      	cmp	r3, #64	; 0x40
 8006b72:	d108      	bne.n	8006b86 <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8006b74:	6a3b      	ldr	r3, [r7, #32]
 8006b76:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8006b7a:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b80:	6a3a      	ldr	r2, [r7, #32]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b8a:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	2b04      	cmp	r3, #4
 8006b90:	d843      	bhi.n	8006c1a <HRTIM_TimingUnitWaveform_Config+0x226>
 8006b92:	a201      	add	r2, pc, #4	; (adr r2, 8006b98 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8006b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b98:	08006bad 	.word	0x08006bad
 8006b9c:	08006bc3 	.word	0x08006bc3
 8006ba0:	08006bd9 	.word	0x08006bd9
 8006ba4:	08006bef 	.word	0x08006bef
 8006ba8:	08006c05 	.word	0x08006c05
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006bb2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb8:	005b      	lsls	r3, r3, #1
 8006bba:	69fa      	ldr	r2, [r7, #28]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	61fb      	str	r3, [r7, #28]
      break;
 8006bc0:	e02c      	b.n	8006c1c <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bc8:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	69fa      	ldr	r2, [r7, #28]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	61fb      	str	r3, [r7, #28]
      break;
 8006bd6:	e021      	b.n	8006c1c <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006bde:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be4:	00db      	lsls	r3, r3, #3
 8006be6:	69fa      	ldr	r2, [r7, #28]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	61fb      	str	r3, [r7, #28]
      break;
 8006bec:	e016      	b.n	8006c1c <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006bf4:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bfa:	011b      	lsls	r3, r3, #4
 8006bfc:	69fa      	ldr	r2, [r7, #28]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	61fb      	str	r3, [r7, #28]
      break;
 8006c02:	e00b      	b.n	8006c1c <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c0a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c10:	015b      	lsls	r3, r3, #5
 8006c12:	69fa      	ldr	r2, [r7, #28]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	61fb      	str	r3, [r7, #28]
      break;
 8006c18:	e000      	b.n	8006c1c <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8006c1a:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	3301      	adds	r3, #1
 8006c24:	01db      	lsls	r3, r3, #7
 8006c26:	4413      	add	r3, r2
 8006c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c2a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	01db      	lsls	r3, r3, #7
 8006c34:	4413      	add	r3, r2
 8006c36:	33e8      	adds	r3, #232	; 0xe8
 8006c38:	69ba      	ldr	r2, [r7, #24]
 8006c3a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	01db      	lsls	r3, r3, #7
 8006c44:	4413      	add	r3, r2
 8006c46:	33e4      	adds	r3, #228	; 0xe4
 8006c48:	6a3a      	ldr	r2, [r7, #32]
 8006c4a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	01db      	lsls	r3, r3, #7
 8006c54:	4413      	add	r3, r2
 8006c56:	33d4      	adds	r3, #212	; 0xd4
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	69fa      	ldr	r2, [r7, #28]
 8006c62:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8006c66:	bf00      	nop
 8006c68:	372c      	adds	r7, #44	; 0x2c
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop

08006c74 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b089      	sub	sp, #36	; 0x24
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
 8006c80:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8006c82:	2300      	movs	r3, #0
 8006c84:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	01db      	lsls	r3, r3, #7
 8006c8e:	4413      	add	r3, r2
 8006c90:	33e4      	adds	r3, #228	; 0xe4
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	01db      	lsls	r3, r3, #7
 8006c9e:	4413      	add	r3, r2
 8006ca0:	33b8      	adds	r3, #184	; 0xb8
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	617b      	str	r3, [r7, #20]

  switch (Output)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cac:	d076      	beq.n	8006d9c <HRTIM_OutputConfig+0x128>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cb4:	f200 8087 	bhi.w	8006dc6 <HRTIM_OutputConfig+0x152>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cbe:	d05a      	beq.n	8006d76 <HRTIM_OutputConfig+0x102>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cc6:	d87e      	bhi.n	8006dc6 <HRTIM_OutputConfig+0x152>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b80      	cmp	r3, #128	; 0x80
 8006ccc:	d066      	beq.n	8006d9c <HRTIM_OutputConfig+0x128>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2b80      	cmp	r3, #128	; 0x80
 8006cd2:	d878      	bhi.n	8006dc6 <HRTIM_OutputConfig+0x152>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b20      	cmp	r3, #32
 8006cd8:	d84a      	bhi.n	8006d70 <HRTIM_OutputConfig+0xfc>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d072      	beq.n	8006dc6 <HRTIM_OutputConfig+0x152>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	2b1f      	cmp	r3, #31
 8006ce6:	d86e      	bhi.n	8006dc6 <HRTIM_OutputConfig+0x152>
 8006ce8:	a201      	add	r2, pc, #4	; (adr r2, 8006cf0 <HRTIM_OutputConfig+0x7c>)
 8006cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cee:	bf00      	nop
 8006cf0:	08006d77 	.word	0x08006d77
 8006cf4:	08006d9d 	.word	0x08006d9d
 8006cf8:	08006dc7 	.word	0x08006dc7
 8006cfc:	08006d77 	.word	0x08006d77
 8006d00:	08006dc7 	.word	0x08006dc7
 8006d04:	08006dc7 	.word	0x08006dc7
 8006d08:	08006dc7 	.word	0x08006dc7
 8006d0c:	08006d9d 	.word	0x08006d9d
 8006d10:	08006dc7 	.word	0x08006dc7
 8006d14:	08006dc7 	.word	0x08006dc7
 8006d18:	08006dc7 	.word	0x08006dc7
 8006d1c:	08006dc7 	.word	0x08006dc7
 8006d20:	08006dc7 	.word	0x08006dc7
 8006d24:	08006dc7 	.word	0x08006dc7
 8006d28:	08006dc7 	.word	0x08006dc7
 8006d2c:	08006d77 	.word	0x08006d77
 8006d30:	08006dc7 	.word	0x08006dc7
 8006d34:	08006dc7 	.word	0x08006dc7
 8006d38:	08006dc7 	.word	0x08006dc7
 8006d3c:	08006dc7 	.word	0x08006dc7
 8006d40:	08006dc7 	.word	0x08006dc7
 8006d44:	08006dc7 	.word	0x08006dc7
 8006d48:	08006dc7 	.word	0x08006dc7
 8006d4c:	08006dc7 	.word	0x08006dc7
 8006d50:	08006dc7 	.word	0x08006dc7
 8006d54:	08006dc7 	.word	0x08006dc7
 8006d58:	08006dc7 	.word	0x08006dc7
 8006d5c:	08006dc7 	.word	0x08006dc7
 8006d60:	08006dc7 	.word	0x08006dc7
 8006d64:	08006dc7 	.word	0x08006dc7
 8006d68:	08006dc7 	.word	0x08006dc7
 8006d6c:	08006d9d 	.word	0x08006d9d
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b40      	cmp	r3, #64	; 0x40
 8006d74:	d127      	bne.n	8006dc6 <HRTIM_OutputConfig+0x152>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6819      	ldr	r1, [r3, #0]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	01db      	lsls	r3, r3, #7
 8006d82:	440b      	add	r3, r1
 8006d84:	33bc      	adds	r3, #188	; 0xbc
 8006d86:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6819      	ldr	r1, [r3, #0]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	689a      	ldr	r2, [r3, #8]
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	01db      	lsls	r3, r3, #7
 8006d94:	440b      	add	r3, r1
 8006d96:	33c0      	adds	r3, #192	; 0xc0
 8006d98:	601a      	str	r2, [r3, #0]
      break;
 8006d9a:	e015      	b.n	8006dc8 <HRTIM_OutputConfig+0x154>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6819      	ldr	r1, [r3, #0]
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	685a      	ldr	r2, [r3, #4]
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	01db      	lsls	r3, r3, #7
 8006da8:	440b      	add	r3, r1
 8006daa:	33c4      	adds	r3, #196	; 0xc4
 8006dac:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6819      	ldr	r1, [r3, #0]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	689a      	ldr	r2, [r3, #8]
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	01db      	lsls	r3, r3, #7
 8006dba:	440b      	add	r3, r1
 8006dbc:	33c8      	adds	r3, #200	; 0xc8
 8006dbe:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8006dc0:	2310      	movs	r3, #16
 8006dc2:	61bb      	str	r3, [r7, #24]
      break;
 8006dc4:	e000      	b.n	8006dc8 <HRTIM_OutputConfig+0x154>
    }

  default:
    break;
 8006dc6:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8006dc8:	22fe      	movs	r2, #254	; 0xfe
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8006dd0:	43db      	mvns	r3, r3
 8006dd2:	69fa      	ldr	r2, [r7, #28]
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	fa02 f303 	lsl.w	r3, r2, r3
 8006de2:	69fa      	ldr	r2, [r7, #28]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	68da      	ldr	r2, [r3, #12]
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	fa02 f303 	lsl.w	r3, r2, r3
 8006df2:	69fa      	ldr	r2, [r7, #28]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	691a      	ldr	r2, [r3, #16]
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8006e02:	69fa      	ldr	r2, [r7, #28]
 8006e04:	4313      	orrs	r3, r2
 8006e06:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	695a      	ldr	r2, [r3, #20]
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e12:	69fa      	ldr	r2, [r7, #28]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	699a      	ldr	r2, [r3, #24]
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e22:	69fa      	ldr	r2, [r7, #28]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	2b08      	cmp	r3, #8
 8006e2e:	d111      	bne.n	8006e54 <HRTIM_OutputConfig+0x1e0>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10c      	bne.n	8006e54 <HRTIM_OutputConfig+0x1e0>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d107      	bne.n	8006e54 <HRTIM_OutputConfig+0x1e0>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	69da      	ldr	r2, [r3, #28]
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4e:	69fa      	ldr	r2, [r7, #28]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	01db      	lsls	r3, r3, #7
 8006e5c:	4413      	add	r3, r2
 8006e5e:	33e4      	adds	r3, #228	; 0xe4
 8006e60:	69fa      	ldr	r2, [r7, #28]
 8006e62:	601a      	str	r2, [r3, #0]
}
 8006e64:	bf00      	nop
 8006e66:	3724      	adds	r7, #36	; 0x24
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	2b05      	cmp	r3, #5
 8006e7e:	d851      	bhi.n	8006f24 <HRTIM_ForceRegistersUpdate+0xb4>
 8006e80:	a201      	add	r2, pc, #4	; (adr r2, 8006e88 <HRTIM_ForceRegistersUpdate+0x18>)
 8006e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e86:	bf00      	nop
 8006e88:	08006eb7 	.word	0x08006eb7
 8006e8c:	08006ecd 	.word	0x08006ecd
 8006e90:	08006ee3 	.word	0x08006ee3
 8006e94:	08006ef9 	.word	0x08006ef9
 8006e98:	08006f0f 	.word	0x08006f0f
 8006e9c:	08006ea1 	.word	0x08006ea1
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f042 0201 	orr.w	r2, r2, #1
 8006eb0:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006eb4:	e037      	b.n	8006f26 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f042 0202 	orr.w	r2, r2, #2
 8006ec6:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006eca:	e02c      	b.n	8006f26 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f042 0204 	orr.w	r2, r2, #4
 8006edc:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006ee0:	e021      	b.n	8006f26 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f042 0208 	orr.w	r2, r2, #8
 8006ef2:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006ef6:	e016      	b.n	8006f26 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f042 0210 	orr.w	r2, r2, #16
 8006f08:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006f0c:	e00b      	b.n	8006f26 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f042 0220 	orr.w	r2, r2, #32
 8006f1e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006f22:	e000      	b.n	8006f26 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8006f24:	bf00      	nop
  }
}
 8006f26:	bf00      	nop
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop

08006f34 <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8006f44:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8006f4e:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d00c      	beq.n	8006f74 <HRTIM_HRTIM_ISR+0x40>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	f003 0301 	and.w	r3, r3, #1
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d007      	beq.n	8006f74 <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f7ff fba1 	bl	80066b6 <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f003 0302 	and.w	r3, r3, #2
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00c      	beq.n	8006f98 <HRTIM_HRTIM_ISR+0x64>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	f003 0302 	and.w	r3, r3, #2
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d007      	beq.n	8006f98 <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2202      	movs	r2, #2
 8006f8e:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f7ff fb99 	bl	80066ca <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f003 0304 	and.w	r3, r3, #4
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00c      	beq.n	8006fbc <HRTIM_HRTIM_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	f003 0304 	and.w	r3, r3, #4
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d007      	beq.n	8006fbc <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2204      	movs	r2, #4
 8006fb2:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f7ff fb91 	bl	80066de <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f003 0308 	and.w	r3, r3, #8
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00c      	beq.n	8006fe0 <HRTIM_HRTIM_ISR+0xac>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	f003 0308 	and.w	r3, r3, #8
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d007      	beq.n	8006fe0 <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2208      	movs	r2, #8
 8006fd6:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f7ff fb89 	bl	80066f2 <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f003 0310 	and.w	r3, r3, #16
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00c      	beq.n	8007004 <HRTIM_HRTIM_ISR+0xd0>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	f003 0310 	and.w	r3, r3, #16
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d007      	beq.n	8007004 <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2210      	movs	r2, #16
 8006ffa:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7ff fb81 	bl	8006706 <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f003 0320 	and.w	r3, r3, #32
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00c      	beq.n	8007028 <HRTIM_HRTIM_ISR+0xf4>
  {
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	f003 0320 	and.w	r3, r3, #32
 8007014:	2b00      	cmp	r3, #0
 8007016:	d007      	beq.n	8007028 <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2220      	movs	r2, #32
 800701e:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f7ff fb79 	bl	800671a <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8007028:	bf00      	nop
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b086      	sub	sp, #24
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8007040:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800704a:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	60bb      	str	r3, [r7, #8]

  /* Burst mode period event */
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00d      	beq.n	8007082 <HRTIM_Master_ISR+0x52>
  {
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800706c:	2b00      	cmp	r3, #0
 800706e:	d008      	beq.n	8007082 <HRTIM_Master_ISR+0x52>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007078:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f7ff fb56 	bl	800672e <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f003 0301 	and.w	r3, r3, #1
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00c      	beq.n	80070a6 <HRTIM_Master_ISR+0x76>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	2b00      	cmp	r3, #0
 8007094:	d007      	beq.n	80070a6 <HRTIM_Master_ISR+0x76>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2201      	movs	r2, #1
 800709c:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800709e:	2105      	movs	r1, #5
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f7ff fb63 	bl	800676c <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f003 0302 	and.w	r3, r3, #2
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00c      	beq.n	80070ca <HRTIM_Master_ISR+0x9a>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	f003 0302 	and.w	r3, r3, #2
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d007      	beq.n	80070ca <HRTIM_Master_ISR+0x9a>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2202      	movs	r2, #2
 80070c0:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80070c2:	2105      	movs	r1, #5
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f7fa f8bd 	bl	8001244 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f003 0304 	and.w	r3, r3, #4
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00c      	beq.n	80070ee <HRTIM_Master_ISR+0xbe>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	f003 0304 	and.w	r3, r3, #4
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d007      	beq.n	80070ee <HRTIM_Master_ISR+0xbe>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2204      	movs	r2, #4
 80070e4:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80070e6:	2105      	movs	r1, #5
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f7fa f8d7 	bl	800129c <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f003 0308 	and.w	r3, r3, #8
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00c      	beq.n	8007112 <HRTIM_Master_ISR+0xe2>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	f003 0308 	and.w	r3, r3, #8
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d007      	beq.n	8007112 <HRTIM_Master_ISR+0xe2>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2208      	movs	r2, #8
 8007108:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800710a:	2105      	movs	r1, #5
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f7ff fb38 	bl	8006782 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f003 0310 	and.w	r3, r3, #16
 8007118:	2b00      	cmp	r3, #0
 800711a:	d00c      	beq.n	8007136 <HRTIM_Master_ISR+0x106>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	f003 0310 	and.w	r3, r3, #16
 8007122:	2b00      	cmp	r3, #0
 8007124:	d007      	beq.n	8007136 <HRTIM_Master_ISR+0x106>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2210      	movs	r2, #16
 800712c:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800712e:	2105      	movs	r1, #5
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f7fa f93f 	bl	80013b4 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f003 0320 	and.w	r3, r3, #32
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00b      	beq.n	8007158 <HRTIM_Master_ISR+0x128>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	f003 0320 	and.w	r3, r3, #32
 8007146:	2b00      	cmp	r3, #0
 8007148:	d006      	beq.n	8007158 <HRTIM_Master_ISR+0x128>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2220      	movs	r2, #32
 8007150:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7ff faf5 	bl	8006742 <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00c      	beq.n	800717c <HRTIM_Master_ISR+0x14c>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007168:	2b00      	cmp	r3, #0
 800716a:	d007      	beq.n	800717c <HRTIM_Master_ISR+0x14c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2240      	movs	r2, #64	; 0x40
 8007172:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8007174:	2105      	movs	r1, #5
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f7ff faed 	bl	8006756 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 800717c:	bf00      	nop
 800717e:	3718      	adds	r7, #24
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	3301      	adds	r3, #1
 8007196:	01db      	lsls	r3, r3, #7
 8007198:	4413      	add	r3, r2
 800719a:	3304      	adds	r3, #4
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	01db      	lsls	r3, r3, #7
 80071a8:	4413      	add	r3, r2
 80071aa:	338c      	adds	r3, #140	; 0x8c
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f003 0301 	and.w	r3, r3, #1
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d010      	beq.n	80071dc <HRTIM_Timer_ISR+0x58>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	f003 0301 	and.w	r3, r3, #1
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00b      	beq.n	80071dc <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	01db      	lsls	r3, r3, #7
 80071cc:	4413      	add	r3, r2
 80071ce:	3388      	adds	r3, #136	; 0x88
 80071d0:	2201      	movs	r2, #1
 80071d2:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 80071d4:	6839      	ldr	r1, [r7, #0]
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f7ff fac8 	bl	800676c <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f003 0302 	and.w	r3, r3, #2
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d010      	beq.n	8007208 <HRTIM_Timer_ISR+0x84>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	f003 0302 	and.w	r3, r3, #2
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00b      	beq.n	8007208 <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	01db      	lsls	r3, r3, #7
 80071f8:	4413      	add	r3, r2
 80071fa:	3388      	adds	r3, #136	; 0x88
 80071fc:	2202      	movs	r2, #2
 80071fe:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 8007200:	6839      	ldr	r1, [r7, #0]
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f7fa f81e 	bl	8001244 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f003 0304 	and.w	r3, r3, #4
 800720e:	2b00      	cmp	r3, #0
 8007210:	d010      	beq.n	8007234 <HRTIM_Timer_ISR+0xb0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	f003 0304 	and.w	r3, r3, #4
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00b      	beq.n	8007234 <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	01db      	lsls	r3, r3, #7
 8007224:	4413      	add	r3, r2
 8007226:	3388      	adds	r3, #136	; 0x88
 8007228:	2204      	movs	r2, #4
 800722a:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 800722c:	6839      	ldr	r1, [r7, #0]
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f7fa f834 	bl	800129c <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f003 0308 	and.w	r3, r3, #8
 800723a:	2b00      	cmp	r3, #0
 800723c:	d010      	beq.n	8007260 <HRTIM_Timer_ISR+0xdc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	f003 0308 	and.w	r3, r3, #8
 8007244:	2b00      	cmp	r3, #0
 8007246:	d00b      	beq.n	8007260 <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	01db      	lsls	r3, r3, #7
 8007250:	4413      	add	r3, r2
 8007252:	3388      	adds	r3, #136	; 0x88
 8007254:	2208      	movs	r2, #8
 8007256:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 8007258:	6839      	ldr	r1, [r7, #0]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f7ff fa91 	bl	8006782 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f003 0310 	and.w	r3, r3, #16
 8007266:	2b00      	cmp	r3, #0
 8007268:	d010      	beq.n	800728c <HRTIM_Timer_ISR+0x108>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	f003 0310 	and.w	r3, r3, #16
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00b      	beq.n	800728c <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	01db      	lsls	r3, r3, #7
 800727c:	4413      	add	r3, r2
 800727e:	3388      	adds	r3, #136	; 0x88
 8007280:	2210      	movs	r2, #16
 8007282:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 8007284:	6839      	ldr	r1, [r7, #0]
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f7fa f894 	bl	80013b4 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007292:	2b00      	cmp	r3, #0
 8007294:	d010      	beq.n	80072b8 <HRTIM_Timer_ISR+0x134>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800729c:	2b00      	cmp	r3, #0
 800729e:	d00b      	beq.n	80072b8 <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	01db      	lsls	r3, r3, #7
 80072a8:	4413      	add	r3, r2
 80072aa:	3388      	adds	r3, #136	; 0x88
 80072ac:	2240      	movs	r2, #64	; 0x40
 80072ae:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 80072b0:	6839      	ldr	r1, [r7, #0]
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f7ff fa4f 	bl	8006756 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d010      	beq.n	80072e4 <HRTIM_Timer_ISR+0x160>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00b      	beq.n	80072e4 <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	01db      	lsls	r3, r3, #7
 80072d4:	4413      	add	r3, r2
 80072d6:	3388      	adds	r3, #136	; 0x88
 80072d8:	2280      	movs	r2, #128	; 0x80
 80072da:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 80072dc:	6839      	ldr	r1, [r7, #0]
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f7ff fa5a 	bl	8006798 <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d011      	beq.n	8007312 <HRTIM_Timer_ISR+0x18e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00c      	beq.n	8007312 <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	01db      	lsls	r3, r3, #7
 8007300:	4413      	add	r3, r2
 8007302:	3388      	adds	r3, #136	; 0x88
 8007304:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007308:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 800730a:	6839      	ldr	r1, [r7, #0]
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f7ff fa4e 	bl	80067ae <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007318:	2b00      	cmp	r3, #0
 800731a:	d011      	beq.n	8007340 <HRTIM_Timer_ISR+0x1bc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007322:	2b00      	cmp	r3, #0
 8007324:	d00c      	beq.n	8007340 <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	01db      	lsls	r3, r3, #7
 800732e:	4413      	add	r3, r2
 8007330:	3388      	adds	r3, #136	; 0x88
 8007332:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007336:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 8007338:	6839      	ldr	r1, [r7, #0]
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f7ff fa58 	bl	80067f0 <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007346:	2b00      	cmp	r3, #0
 8007348:	d011      	beq.n	800736e <HRTIM_Timer_ISR+0x1ea>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007350:	2b00      	cmp	r3, #0
 8007352:	d00c      	beq.n	800736e <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	01db      	lsls	r3, r3, #7
 800735c:	4413      	add	r3, r2
 800735e:	3388      	adds	r3, #136	; 0x88
 8007360:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007364:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 8007366:	6839      	ldr	r1, [r7, #0]
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f7ff fa4c 	bl	8006806 <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007374:	2b00      	cmp	r3, #0
 8007376:	d011      	beq.n	800739c <HRTIM_Timer_ISR+0x218>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00c      	beq.n	800739c <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	01db      	lsls	r3, r3, #7
 800738a:	4413      	add	r3, r2
 800738c:	3388      	adds	r3, #136	; 0x88
 800738e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007392:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 8007394:	6839      	ldr	r1, [r7, #0]
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f7ff fa40 	bl	800681c <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d011      	beq.n	80073ca <HRTIM_Timer_ISR+0x246>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00c      	beq.n	80073ca <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	01db      	lsls	r3, r3, #7
 80073b8:	4413      	add	r3, r2
 80073ba:	3388      	adds	r3, #136	; 0x88
 80073bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80073c0:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 80073c2:	6839      	ldr	r1, [r7, #0]
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f7ff fa34 	bl	8006832 <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d011      	beq.n	80073f8 <HRTIM_Timer_ISR+0x274>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00c      	beq.n	80073f8 <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	01db      	lsls	r3, r3, #7
 80073e6:	4413      	add	r3, r2
 80073e8:	3388      	adds	r3, #136	; 0x88
 80073ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80073ee:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 80073f0:	6839      	ldr	r1, [r7, #0]
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f7ff f9f1 	bl	80067da <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d011      	beq.n	8007426 <HRTIM_Timer_ISR+0x2a2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007408:	2b00      	cmp	r3, #0
 800740a:	d00c      	beq.n	8007426 <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	01db      	lsls	r3, r3, #7
 8007414:	4413      	add	r3, r2
 8007416:	3388      	adds	r3, #136	; 0x88
 8007418:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800741c:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 800741e:	6839      	ldr	r1, [r7, #0]
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f7ff f9cf 	bl	80067c4 <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8007426:	bf00      	nop
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
	...

08007430 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d101      	bne.n	8007442 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	e097      	b.n	8007572 <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b00      	cmp	r3, #0
 8007452:	d106      	bne.n	8007462 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f7fb f97f 	bl	8002760 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2202      	movs	r2, #2
 8007466:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68db      	ldr	r3, [r3, #12]
 8007470:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	2b01      	cmp	r3, #1
 8007478:	d004      	beq.n	8007484 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007482:	d103      	bne.n	800748c <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f023 031e 	bic.w	r3, r3, #30
 800748a:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	695b      	ldr	r3, [r3, #20]
 8007490:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007494:	4293      	cmp	r3, r2
 8007496:	d003      	beq.n	80074a0 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	4b38      	ldr	r3, [pc, #224]	; (800757c <HAL_LPTIM_Init+0x14c>)
 800749c:	4013      	ands	r3, r2
 800749e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	4b37      	ldr	r3, [pc, #220]	; (8007580 <HAL_LPTIM_Init+0x150>)
 80074a4:	4013      	ands	r3, r2
 80074a6:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80074b0:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80074b6:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80074bc:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80074c2:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d107      	bne.n	80074e2 <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80074da:	4313      	orrs	r3, r2
 80074dc:	68fa      	ldr	r2, [r7, #12]
 80074de:	4313      	orrs	r3, r2
 80074e0:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d004      	beq.n	80074f4 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80074f2:	d107      	bne.n	8007504 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80074fc:	4313      	orrs	r3, r2
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	4313      	orrs	r3, r2
 8007502:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	695b      	ldr	r3, [r3, #20]
 8007508:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800750c:	4293      	cmp	r3, r2
 800750e:	d00a      	beq.n	8007526 <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007518:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800751e:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	4313      	orrs	r3, r2
 8007524:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a14      	ldr	r2, [pc, #80]	; (8007584 <HAL_LPTIM_Init+0x154>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d004      	beq.n	8007542 <HAL_LPTIM_Init+0x112>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a12      	ldr	r2, [pc, #72]	; (8007588 <HAL_LPTIM_Init+0x158>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d108      	bne.n	8007554 <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	430a      	orrs	r2, r1
 8007550:	625a      	str	r2, [r3, #36]	; 0x24
 8007552:	e009      	b.n	8007568 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a0c      	ldr	r2, [pc, #48]	; (800758c <HAL_LPTIM_Init+0x15c>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d104      	bne.n	8007568 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007566:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	ffff1f3f 	.word	0xffff1f3f
 8007580:	ff19f1fe 	.word	0xff19f1fe
 8007584:	40002400 	.word	0x40002400
 8007588:	58002400 	.word	0x58002400
 800758c:	58002800 	.word	0x58002800

08007590 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2202      	movs	r2, #2
 800759e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d00c      	beq.n	80075c4 <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80075b2:	d107      	bne.n	80075c4 <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68da      	ldr	r2, [r3, #12]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 80075c2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	691a      	ldr	r2, [r3, #16]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f042 0201 	orr.w	r2, r2, #1
 80075d2:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2210      	movs	r2, #16
 80075da:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	683a      	ldr	r2, [r7, #0]
 80075e2:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80075e4:	2110      	movs	r1, #16
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 f91e 	bl	8007828 <LPTIM_WaitForFlag>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b03      	cmp	r3, #3
 80075f0:	d101      	bne.n	80075f6 <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 80075f2:	2303      	movs	r3, #3
 80075f4:	e02f      	b.n	8007656 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 f946 	bl	8007888 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 f905 	bl	800780c <HAL_LPTIM_GetState>
 8007602:	4603      	mov	r3, r0
 8007604:	2b03      	cmp	r3, #3
 8007606:	d101      	bne.n	800760c <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 8007608:	2303      	movs	r3, #3
 800760a:	e024      	b.n	8007656 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	689a      	ldr	r2, [r3, #8]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f042 0210 	orr.w	r2, r2, #16
 800761a:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	689a      	ldr	r2, [r3, #8]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f042 0202 	orr.w	r2, r2, #2
 800762a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	691a      	ldr	r2, [r3, #16]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f042 0201 	orr.w	r2, r2, #1
 800763a:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	691a      	ldr	r2, [r3, #16]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f042 0204 	orr.w	r2, r2, #4
 800764a:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3708      	adds	r7, #8
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b082      	sub	sp, #8
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 0301 	and.w	r3, r3, #1
 8007670:	2b01      	cmp	r3, #1
 8007672:	d10d      	bne.n	8007690 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	f003 0301 	and.w	r3, r3, #1
 800767e:	2b01      	cmp	r3, #1
 8007680:	d106      	bne.n	8007690 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2201      	movs	r2, #1
 8007688:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 f882 	bl	8007794 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 0302 	and.w	r3, r3, #2
 800769a:	2b02      	cmp	r3, #2
 800769c:	d10d      	bne.n	80076ba <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	f003 0302 	and.w	r3, r3, #2
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	d106      	bne.n	80076ba <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2202      	movs	r2, #2
 80076b2:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f7f9 fdb7 	bl	8001228 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0304 	and.w	r3, r3, #4
 80076c4:	2b04      	cmp	r3, #4
 80076c6:	d10d      	bne.n	80076e4 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f003 0304 	and.w	r3, r3, #4
 80076d2:	2b04      	cmp	r3, #4
 80076d4:	d106      	bne.n	80076e4 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2204      	movs	r2, #4
 80076dc:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f862 	bl	80077a8 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 0308 	and.w	r3, r3, #8
 80076ee:	2b08      	cmp	r3, #8
 80076f0:	d10d      	bne.n	800770e <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	f003 0308 	and.w	r3, r3, #8
 80076fc:	2b08      	cmp	r3, #8
 80076fe:	d106      	bne.n	800770e <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2208      	movs	r2, #8
 8007706:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 f857 	bl	80077bc <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 0310 	and.w	r3, r3, #16
 8007718:	2b10      	cmp	r3, #16
 800771a:	d10d      	bne.n	8007738 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	f003 0310 	and.w	r3, r3, #16
 8007726:	2b10      	cmp	r3, #16
 8007728:	d106      	bne.n	8007738 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2210      	movs	r2, #16
 8007730:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 f84c 	bl	80077d0 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 0320 	and.w	r3, r3, #32
 8007742:	2b20      	cmp	r3, #32
 8007744:	d10d      	bne.n	8007762 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	f003 0320 	and.w	r3, r3, #32
 8007750:	2b20      	cmp	r3, #32
 8007752:	d106      	bne.n	8007762 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2220      	movs	r2, #32
 800775a:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 f841 	bl	80077e4 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800776c:	2b40      	cmp	r3, #64	; 0x40
 800776e:	d10d      	bne.n	800778c <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800777a:	2b40      	cmp	r3, #64	; 0x40
 800777c:	d106      	bne.n	800778c <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2240      	movs	r2, #64	; 0x40
 8007784:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 f836 	bl	80077f8 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 800778c:	bf00      	nop
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 80077d8:	bf00      	nop
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 80077ec:	bf00      	nop
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8007800:	bf00      	nop
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800781a:	b2db      	uxtb	r3, r3
}
 800781c:	4618      	mov	r0, r3
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8007828:	b480      	push	{r7}
 800782a:	b085      	sub	sp, #20
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8007832:	2300      	movs	r3, #0
 8007834:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8007836:	4b12      	ldr	r3, [pc, #72]	; (8007880 <LPTIM_WaitForFlag+0x58>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a12      	ldr	r2, [pc, #72]	; (8007884 <LPTIM_WaitForFlag+0x5c>)
 800783c:	fba2 2303 	umull	r2, r3, r2, r3
 8007840:	0b9b      	lsrs	r3, r3, #14
 8007842:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007846:	fb02 f303 	mul.w	r3, r2, r3
 800784a:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	3b01      	subs	r3, #1
 8007850:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d101      	bne.n	800785c <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8007858:	2303      	movs	r3, #3
 800785a:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	4013      	ands	r3, r2
 8007866:	683a      	ldr	r2, [r7, #0]
 8007868:	429a      	cmp	r2, r3
 800786a:	d002      	beq.n	8007872 <LPTIM_WaitForFlag+0x4a>
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1ec      	bne.n	800784c <LPTIM_WaitForFlag+0x24>

  return result;
 8007872:	7bfb      	ldrb	r3, [r7, #15]
}
 8007874:	4618      	mov	r0, r3
 8007876:	3714      	adds	r7, #20
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr
 8007880:	20000018 	.word	0x20000018
 8007884:	d1b71759 	.word	0xd1b71759

08007888 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b08c      	sub	sp, #48	; 0x30
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8007890:	2300      	movs	r3, #0
 8007892:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007894:	f3ef 8310 	mrs	r3, PRIMASK
 8007898:	60fb      	str	r3, [r7, #12]
  return(result);
 800789a:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800789c:	62bb      	str	r3, [r7, #40]	; 0x28
 800789e:	2301      	movs	r3, #1
 80078a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	f383 8810 	msr	PRIMASK, r3
}
 80078a8:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a81      	ldr	r2, [pc, #516]	; (8007ab4 <LPTIM_Disable+0x22c>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d02d      	beq.n	8007910 <LPTIM_Disable+0x88>
 80078b4:	4a7f      	ldr	r2, [pc, #508]	; (8007ab4 <LPTIM_Disable+0x22c>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d830      	bhi.n	800791c <LPTIM_Disable+0x94>
 80078ba:	4a7f      	ldr	r2, [pc, #508]	; (8007ab8 <LPTIM_Disable+0x230>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d021      	beq.n	8007904 <LPTIM_Disable+0x7c>
 80078c0:	4a7d      	ldr	r2, [pc, #500]	; (8007ab8 <LPTIM_Disable+0x230>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d82a      	bhi.n	800791c <LPTIM_Disable+0x94>
 80078c6:	4a7d      	ldr	r2, [pc, #500]	; (8007abc <LPTIM_Disable+0x234>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d015      	beq.n	80078f8 <LPTIM_Disable+0x70>
 80078cc:	4a7b      	ldr	r2, [pc, #492]	; (8007abc <LPTIM_Disable+0x234>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d824      	bhi.n	800791c <LPTIM_Disable+0x94>
 80078d2:	4a7b      	ldr	r2, [pc, #492]	; (8007ac0 <LPTIM_Disable+0x238>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d003      	beq.n	80078e0 <LPTIM_Disable+0x58>
 80078d8:	4a7a      	ldr	r2, [pc, #488]	; (8007ac4 <LPTIM_Disable+0x23c>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d006      	beq.n	80078ec <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 80078de:	e01d      	b.n	800791c <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 80078e0:	4b79      	ldr	r3, [pc, #484]	; (8007ac8 <LPTIM_Disable+0x240>)
 80078e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078e4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80078e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80078ea:	e018      	b.n	800791e <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 80078ec:	4b76      	ldr	r3, [pc, #472]	; (8007ac8 <LPTIM_Disable+0x240>)
 80078ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078f0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80078f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80078f6:	e012      	b.n	800791e <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 80078f8:	4b73      	ldr	r3, [pc, #460]	; (8007ac8 <LPTIM_Disable+0x240>)
 80078fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078fc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007900:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8007902:	e00c      	b.n	800791e <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 8007904:	4b70      	ldr	r3, [pc, #448]	; (8007ac8 <LPTIM_Disable+0x240>)
 8007906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007908:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800790c:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800790e:	e006      	b.n	800791e <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 8007910:	4b6d      	ldr	r3, [pc, #436]	; (8007ac8 <LPTIM_Disable+0x240>)
 8007912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007914:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007918:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800791a:	e000      	b.n	800791e <LPTIM_Disable+0x96>
      break;
 800791c:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	695b      	ldr	r3, [r3, #20]
 8007934:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	699b      	ldr	r3, [r3, #24]
 800793c:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007944:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a5a      	ldr	r2, [pc, #360]	; (8007ab4 <LPTIM_Disable+0x22c>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d059      	beq.n	8007a04 <LPTIM_Disable+0x17c>
 8007950:	4a58      	ldr	r2, [pc, #352]	; (8007ab4 <LPTIM_Disable+0x22c>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d867      	bhi.n	8007a26 <LPTIM_Disable+0x19e>
 8007956:	4a58      	ldr	r2, [pc, #352]	; (8007ab8 <LPTIM_Disable+0x230>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d042      	beq.n	80079e2 <LPTIM_Disable+0x15a>
 800795c:	4a56      	ldr	r2, [pc, #344]	; (8007ab8 <LPTIM_Disable+0x230>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d861      	bhi.n	8007a26 <LPTIM_Disable+0x19e>
 8007962:	4a56      	ldr	r2, [pc, #344]	; (8007abc <LPTIM_Disable+0x234>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d02b      	beq.n	80079c0 <LPTIM_Disable+0x138>
 8007968:	4a54      	ldr	r2, [pc, #336]	; (8007abc <LPTIM_Disable+0x234>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d85b      	bhi.n	8007a26 <LPTIM_Disable+0x19e>
 800796e:	4a54      	ldr	r2, [pc, #336]	; (8007ac0 <LPTIM_Disable+0x238>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d003      	beq.n	800797c <LPTIM_Disable+0xf4>
 8007974:	4a53      	ldr	r2, [pc, #332]	; (8007ac4 <LPTIM_Disable+0x23c>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d011      	beq.n	800799e <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 800797a:	e054      	b.n	8007a26 <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 800797c:	4b52      	ldr	r3, [pc, #328]	; (8007ac8 <LPTIM_Disable+0x240>)
 800797e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007982:	4a51      	ldr	r2, [pc, #324]	; (8007ac8 <LPTIM_Disable+0x240>)
 8007984:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 800798c:	4b4e      	ldr	r3, [pc, #312]	; (8007ac8 <LPTIM_Disable+0x240>)
 800798e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007992:	4a4d      	ldr	r2, [pc, #308]	; (8007ac8 <LPTIM_Disable+0x240>)
 8007994:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007998:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      break;
 800799c:	e044      	b.n	8007a28 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 800799e:	4b4a      	ldr	r3, [pc, #296]	; (8007ac8 <LPTIM_Disable+0x240>)
 80079a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079a4:	4a48      	ldr	r2, [pc, #288]	; (8007ac8 <LPTIM_Disable+0x240>)
 80079a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80079aa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 80079ae:	4b46      	ldr	r3, [pc, #280]	; (8007ac8 <LPTIM_Disable+0x240>)
 80079b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079b4:	4a44      	ldr	r2, [pc, #272]	; (8007ac8 <LPTIM_Disable+0x240>)
 80079b6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079ba:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 80079be:	e033      	b.n	8007a28 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 80079c0:	4b41      	ldr	r3, [pc, #260]	; (8007ac8 <LPTIM_Disable+0x240>)
 80079c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079c6:	4a40      	ldr	r2, [pc, #256]	; (8007ac8 <LPTIM_Disable+0x240>)
 80079c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80079cc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 80079d0:	4b3d      	ldr	r3, [pc, #244]	; (8007ac8 <LPTIM_Disable+0x240>)
 80079d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079d6:	4a3c      	ldr	r2, [pc, #240]	; (8007ac8 <LPTIM_Disable+0x240>)
 80079d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079dc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 80079e0:	e022      	b.n	8007a28 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 80079e2:	4b39      	ldr	r3, [pc, #228]	; (8007ac8 <LPTIM_Disable+0x240>)
 80079e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079e8:	4a37      	ldr	r2, [pc, #220]	; (8007ac8 <LPTIM_Disable+0x240>)
 80079ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80079ee:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 80079f2:	4b35      	ldr	r3, [pc, #212]	; (8007ac8 <LPTIM_Disable+0x240>)
 80079f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079f8:	4a33      	ldr	r2, [pc, #204]	; (8007ac8 <LPTIM_Disable+0x240>)
 80079fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079fe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8007a02:	e011      	b.n	8007a28 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 8007a04:	4b30      	ldr	r3, [pc, #192]	; (8007ac8 <LPTIM_Disable+0x240>)
 8007a06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a0a:	4a2f      	ldr	r2, [pc, #188]	; (8007ac8 <LPTIM_Disable+0x240>)
 8007a0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007a10:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 8007a14:	4b2c      	ldr	r3, [pc, #176]	; (8007ac8 <LPTIM_Disable+0x240>)
 8007a16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a1a:	4a2b      	ldr	r2, [pc, #172]	; (8007ac8 <LPTIM_Disable+0x240>)
 8007a1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a20:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8007a24:	e000      	b.n	8007a28 <LPTIM_Disable+0x1a0>
      break;
 8007a26:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d103      	bne.n	8007a36 <LPTIM_Disable+0x1ae>
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	f000 80d0 	beq.w	8007bd6 <LPTIM_Disable+0x34e>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a1e      	ldr	r2, [pc, #120]	; (8007ab4 <LPTIM_Disable+0x22c>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d031      	beq.n	8007aa4 <LPTIM_Disable+0x21c>
 8007a40:	4a1c      	ldr	r2, [pc, #112]	; (8007ab4 <LPTIM_Disable+0x22c>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d842      	bhi.n	8007acc <LPTIM_Disable+0x244>
 8007a46:	4a1c      	ldr	r2, [pc, #112]	; (8007ab8 <LPTIM_Disable+0x230>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d024      	beq.n	8007a96 <LPTIM_Disable+0x20e>
 8007a4c:	4a1a      	ldr	r2, [pc, #104]	; (8007ab8 <LPTIM_Disable+0x230>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d83c      	bhi.n	8007acc <LPTIM_Disable+0x244>
 8007a52:	4a1a      	ldr	r2, [pc, #104]	; (8007abc <LPTIM_Disable+0x234>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d017      	beq.n	8007a88 <LPTIM_Disable+0x200>
 8007a58:	4a18      	ldr	r2, [pc, #96]	; (8007abc <LPTIM_Disable+0x234>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d836      	bhi.n	8007acc <LPTIM_Disable+0x244>
 8007a5e:	4a18      	ldr	r2, [pc, #96]	; (8007ac0 <LPTIM_Disable+0x238>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d003      	beq.n	8007a6c <LPTIM_Disable+0x1e4>
 8007a64:	4a17      	ldr	r2, [pc, #92]	; (8007ac4 <LPTIM_Disable+0x23c>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d007      	beq.n	8007a7a <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8007a6a:	e02f      	b.n	8007acc <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 8007a6c:	4b16      	ldr	r3, [pc, #88]	; (8007ac8 <LPTIM_Disable+0x240>)
 8007a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a70:	4a15      	ldr	r2, [pc, #84]	; (8007ac8 <LPTIM_Disable+0x240>)
 8007a72:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8007a76:	6553      	str	r3, [r2, #84]	; 0x54
        break;
 8007a78:	e029      	b.n	8007ace <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 8007a7a:	4b13      	ldr	r3, [pc, #76]	; (8007ac8 <LPTIM_Disable+0x240>)
 8007a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a7e:	4a12      	ldr	r2, [pc, #72]	; (8007ac8 <LPTIM_Disable+0x240>)
 8007a80:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8007a84:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8007a86:	e022      	b.n	8007ace <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 8007a88:	4b0f      	ldr	r3, [pc, #60]	; (8007ac8 <LPTIM_Disable+0x240>)
 8007a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a8c:	4a0e      	ldr	r2, [pc, #56]	; (8007ac8 <LPTIM_Disable+0x240>)
 8007a8e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007a92:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8007a94:	e01b      	b.n	8007ace <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 8007a96:	4b0c      	ldr	r3, [pc, #48]	; (8007ac8 <LPTIM_Disable+0x240>)
 8007a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a9a:	4a0b      	ldr	r2, [pc, #44]	; (8007ac8 <LPTIM_Disable+0x240>)
 8007a9c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007aa0:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8007aa2:	e014      	b.n	8007ace <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 8007aa4:	4b08      	ldr	r3, [pc, #32]	; (8007ac8 <LPTIM_Disable+0x240>)
 8007aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aa8:	4a07      	ldr	r2, [pc, #28]	; (8007ac8 <LPTIM_Disable+0x240>)
 8007aaa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007aae:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8007ab0:	e00d      	b.n	8007ace <LPTIM_Disable+0x246>
 8007ab2:	bf00      	nop
 8007ab4:	58003000 	.word	0x58003000
 8007ab8:	58002c00 	.word	0x58002c00
 8007abc:	58002800 	.word	0x58002800
 8007ac0:	40002400 	.word	0x40002400
 8007ac4:	58002400 	.word	0x58002400
 8007ac8:	58024400 	.word	0x58024400
        break;
 8007acc:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d01a      	beq.n	8007b0a <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	691a      	ldr	r2, [r3, #16]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f042 0201 	orr.w	r2, r2, #1
 8007ae2:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	69fa      	ldr	r2, [r7, #28]
 8007aea:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8007aec:	2108      	movs	r1, #8
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f7ff fe9a 	bl	8007828 <LPTIM_WaitForFlag>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b03      	cmp	r3, #3
 8007af8:	d103      	bne.n	8007b02 <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2203      	movs	r2, #3
 8007afe:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2208      	movs	r2, #8
 8007b08:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d01a      	beq.n	8007b46 <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	691a      	ldr	r2, [r3, #16]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f042 0201 	orr.w	r2, r2, #1
 8007b1e:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	69ba      	ldr	r2, [r7, #24]
 8007b26:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8007b28:	2110      	movs	r1, #16
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f7ff fe7c 	bl	8007828 <LPTIM_WaitForFlag>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b03      	cmp	r3, #3
 8007b34:	d103      	bne.n	8007b3e <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2203      	movs	r2, #3
 8007b3a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2210      	movs	r2, #16
 8007b44:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a33      	ldr	r2, [pc, #204]	; (8007c18 <LPTIM_Disable+0x390>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d039      	beq.n	8007bc4 <LPTIM_Disable+0x33c>
 8007b50:	4a31      	ldr	r2, [pc, #196]	; (8007c18 <LPTIM_Disable+0x390>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d841      	bhi.n	8007bda <LPTIM_Disable+0x352>
 8007b56:	4a31      	ldr	r2, [pc, #196]	; (8007c1c <LPTIM_Disable+0x394>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d02a      	beq.n	8007bb2 <LPTIM_Disable+0x32a>
 8007b5c:	4a2f      	ldr	r2, [pc, #188]	; (8007c1c <LPTIM_Disable+0x394>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d83b      	bhi.n	8007bda <LPTIM_Disable+0x352>
 8007b62:	4a2f      	ldr	r2, [pc, #188]	; (8007c20 <LPTIM_Disable+0x398>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d01b      	beq.n	8007ba0 <LPTIM_Disable+0x318>
 8007b68:	4a2d      	ldr	r2, [pc, #180]	; (8007c20 <LPTIM_Disable+0x398>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d835      	bhi.n	8007bda <LPTIM_Disable+0x352>
 8007b6e:	4a2d      	ldr	r2, [pc, #180]	; (8007c24 <LPTIM_Disable+0x39c>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d003      	beq.n	8007b7c <LPTIM_Disable+0x2f4>
 8007b74:	4a2c      	ldr	r2, [pc, #176]	; (8007c28 <LPTIM_Disable+0x3a0>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d009      	beq.n	8007b8e <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8007b7a:	e02e      	b.n	8007bda <LPTIM_Disable+0x352>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8007b7c:	4b2b      	ldr	r3, [pc, #172]	; (8007c2c <LPTIM_Disable+0x3a4>)
 8007b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b80:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007b84:	4929      	ldr	r1, [pc, #164]	; (8007c2c <LPTIM_Disable+0x3a4>)
 8007b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	654b      	str	r3, [r1, #84]	; 0x54
        break;
 8007b8c:	e026      	b.n	8007bdc <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8007b8e:	4b27      	ldr	r3, [pc, #156]	; (8007c2c <LPTIM_Disable+0x3a4>)
 8007b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b92:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007b96:	4925      	ldr	r1, [pc, #148]	; (8007c2c <LPTIM_Disable+0x3a4>)
 8007b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8007b9e:	e01d      	b.n	8007bdc <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8007ba0:	4b22      	ldr	r3, [pc, #136]	; (8007c2c <LPTIM_Disable+0x3a4>)
 8007ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ba4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007ba8:	4920      	ldr	r1, [pc, #128]	; (8007c2c <LPTIM_Disable+0x3a4>)
 8007baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bac:	4313      	orrs	r3, r2
 8007bae:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8007bb0:	e014      	b.n	8007bdc <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 8007bb2:	4b1e      	ldr	r3, [pc, #120]	; (8007c2c <LPTIM_Disable+0x3a4>)
 8007bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007bba:	491c      	ldr	r1, [pc, #112]	; (8007c2c <LPTIM_Disable+0x3a4>)
 8007bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8007bc2:	e00b      	b.n	8007bdc <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 8007bc4:	4b19      	ldr	r3, [pc, #100]	; (8007c2c <LPTIM_Disable+0x3a4>)
 8007bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bc8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007bcc:	4917      	ldr	r1, [pc, #92]	; (8007c2c <LPTIM_Disable+0x3a4>)
 8007bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8007bd4:	e002      	b.n	8007bdc <LPTIM_Disable+0x354>
    }
  }
 8007bd6:	bf00      	nop
 8007bd8:	e000      	b.n	8007bdc <LPTIM_Disable+0x354>
        break;
 8007bda:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	691a      	ldr	r2, [r3, #16]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f022 0201 	bic.w	r2, r2, #1
 8007bea:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bf2:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6a3a      	ldr	r2, [r7, #32]
 8007bfa:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	697a      	ldr	r2, [r7, #20]
 8007c02:	625a      	str	r2, [r3, #36]	; 0x24
 8007c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c06:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	f383 8810 	msr	PRIMASK, r3
}
 8007c0e:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8007c10:	bf00      	nop
 8007c12:	3730      	adds	r7, #48	; 0x30
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	58003000 	.word	0x58003000
 8007c1c:	58002c00 	.word	0x58002c00
 8007c20:	58002800 	.word	0x58002800
 8007c24:	40002400 	.word	0x40002400
 8007c28:	58002400 	.word	0x58002400
 8007c2c:	58024400 	.word	0x58024400

08007c30 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8007c30:	b480      	push	{r7}
 8007c32:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8007c34:	4b05      	ldr	r3, [pc, #20]	; (8007c4c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a04      	ldr	r2, [pc, #16]	; (8007c4c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c3e:	6013      	str	r3, [r2, #0]
}
 8007c40:	bf00      	nop
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	58024800 	.word	0x58024800

08007c50 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007c58:	4b19      	ldr	r3, [pc, #100]	; (8007cc0 <HAL_PWREx_ConfigSupply+0x70>)
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	f003 0304 	and.w	r3, r3, #4
 8007c60:	2b04      	cmp	r3, #4
 8007c62:	d00a      	beq.n	8007c7a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007c64:	4b16      	ldr	r3, [pc, #88]	; (8007cc0 <HAL_PWREx_ConfigSupply+0x70>)
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	f003 0307 	and.w	r3, r3, #7
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d001      	beq.n	8007c76 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	e01f      	b.n	8007cb6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007c76:	2300      	movs	r3, #0
 8007c78:	e01d      	b.n	8007cb6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007c7a:	4b11      	ldr	r3, [pc, #68]	; (8007cc0 <HAL_PWREx_ConfigSupply+0x70>)
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	f023 0207 	bic.w	r2, r3, #7
 8007c82:	490f      	ldr	r1, [pc, #60]	; (8007cc0 <HAL_PWREx_ConfigSupply+0x70>)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007c8a:	f7fb f8b9 	bl	8002e00 <HAL_GetTick>
 8007c8e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007c90:	e009      	b.n	8007ca6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007c92:	f7fb f8b5 	bl	8002e00 <HAL_GetTick>
 8007c96:	4602      	mov	r2, r0
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	1ad3      	subs	r3, r2, r3
 8007c9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ca0:	d901      	bls.n	8007ca6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e007      	b.n	8007cb6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007ca6:	4b06      	ldr	r3, [pc, #24]	; (8007cc0 <HAL_PWREx_ConfigSupply+0x70>)
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cb2:	d1ee      	bne.n	8007c92 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3710      	adds	r7, #16
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	58024800 	.word	0x58024800

08007cc4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b08c      	sub	sp, #48	; 0x30
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d102      	bne.n	8007cd8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	f000 bc48 	b.w	8008568 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 0301 	and.w	r3, r3, #1
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f000 8088 	beq.w	8007df6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ce6:	4b99      	ldr	r3, [pc, #612]	; (8007f4c <HAL_RCC_OscConfig+0x288>)
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007cee:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007cf0:	4b96      	ldr	r3, [pc, #600]	; (8007f4c <HAL_RCC_OscConfig+0x288>)
 8007cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf8:	2b10      	cmp	r3, #16
 8007cfa:	d007      	beq.n	8007d0c <HAL_RCC_OscConfig+0x48>
 8007cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfe:	2b18      	cmp	r3, #24
 8007d00:	d111      	bne.n	8007d26 <HAL_RCC_OscConfig+0x62>
 8007d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d04:	f003 0303 	and.w	r3, r3, #3
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d10c      	bne.n	8007d26 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d0c:	4b8f      	ldr	r3, [pc, #572]	; (8007f4c <HAL_RCC_OscConfig+0x288>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d06d      	beq.n	8007df4 <HAL_RCC_OscConfig+0x130>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d169      	bne.n	8007df4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	f000 bc21 	b.w	8008568 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d2e:	d106      	bne.n	8007d3e <HAL_RCC_OscConfig+0x7a>
 8007d30:	4b86      	ldr	r3, [pc, #536]	; (8007f4c <HAL_RCC_OscConfig+0x288>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a85      	ldr	r2, [pc, #532]	; (8007f4c <HAL_RCC_OscConfig+0x288>)
 8007d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d3a:	6013      	str	r3, [r2, #0]
 8007d3c:	e02e      	b.n	8007d9c <HAL_RCC_OscConfig+0xd8>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d10c      	bne.n	8007d60 <HAL_RCC_OscConfig+0x9c>
 8007d46:	4b81      	ldr	r3, [pc, #516]	; (8007f4c <HAL_RCC_OscConfig+0x288>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a80      	ldr	r2, [pc, #512]	; (8007f4c <HAL_RCC_OscConfig+0x288>)
 8007d4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d50:	6013      	str	r3, [r2, #0]
 8007d52:	4b7e      	ldr	r3, [pc, #504]	; (8007f4c <HAL_RCC_OscConfig+0x288>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a7d      	ldr	r2, [pc, #500]	; (8007f4c <HAL_RCC_OscConfig+0x288>)
 8007d58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d5c:	6013      	str	r3, [r2, #0]
 8007d5e:	e01d      	b.n	8007d9c <HAL_RCC_OscConfig+0xd8>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d68:	d10c      	bne.n	8007d84 <HAL_RCC_OscConfig+0xc0>
 8007d6a:	4b78      	ldr	r3, [pc, #480]	; (8007f4c <HAL_RCC_OscConfig+0x288>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a77      	ldr	r2, [pc, #476]	; (8007f4c <HAL_RCC_OscConfig+0x288>)
 8007d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d74:	6013      	str	r3, [r2, #0]
 8007d76:	4b75      	ldr	r3, [pc, #468]	; (8007f4c <HAL_RCC_OscConfig+0x288>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a74      	ldr	r2, [pc, #464]	; (8007f4c <HAL_RCC_OscConfig+0x288>)
 8007d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d80:	6013      	str	r3, [r2, #0]
 8007d82:	e00b      	b.n	8007d9c <HAL_RCC_OscConfig+0xd8>
 8007d84:	4b71      	ldr	r3, [pc, #452]	; (8007f4c <HAL_RCC_OscConfig+0x288>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a70      	ldr	r2, [pc, #448]	; (8007f4c <HAL_RCC_OscConfig+0x288>)
 8007d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d8e:	6013      	str	r3, [r2, #0]
 8007d90:	4b6e      	ldr	r3, [pc, #440]	; (8007f4c <HAL_RCC_OscConfig+0x288>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a6d      	ldr	r2, [pc, #436]	; (8007f4c <HAL_RCC_OscConfig+0x288>)
 8007d96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d013      	beq.n	8007dcc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007da4:	f7fb f82c 	bl	8002e00 <HAL_GetTick>
 8007da8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007daa:	e008      	b.n	8007dbe <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007dac:	f7fb f828 	bl	8002e00 <HAL_GetTick>
 8007db0:	4602      	mov	r2, r0
 8007db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db4:	1ad3      	subs	r3, r2, r3
 8007db6:	2b64      	cmp	r3, #100	; 0x64
 8007db8:	d901      	bls.n	8007dbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	e3d4      	b.n	8008568 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007dbe:	4b63      	ldr	r3, [pc, #396]	; (8007f4c <HAL_RCC_OscConfig+0x288>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d0f0      	beq.n	8007dac <HAL_RCC_OscConfig+0xe8>
 8007dca:	e014      	b.n	8007df6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dcc:	f7fb f818 	bl	8002e00 <HAL_GetTick>
 8007dd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007dd2:	e008      	b.n	8007de6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007dd4:	f7fb f814 	bl	8002e00 <HAL_GetTick>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	2b64      	cmp	r3, #100	; 0x64
 8007de0:	d901      	bls.n	8007de6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007de2:	2303      	movs	r3, #3
 8007de4:	e3c0      	b.n	8008568 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007de6:	4b59      	ldr	r3, [pc, #356]	; (8007f4c <HAL_RCC_OscConfig+0x288>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d1f0      	bne.n	8007dd4 <HAL_RCC_OscConfig+0x110>
 8007df2:	e000      	b.n	8007df6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 0302 	and.w	r3, r3, #2
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	f000 80ca 	beq.w	8007f98 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e04:	4b51      	ldr	r3, [pc, #324]	; (8007f4c <HAL_RCC_OscConfig+0x288>)
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e0c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007e0e:	4b4f      	ldr	r3, [pc, #316]	; (8007f4c <HAL_RCC_OscConfig+0x288>)
 8007e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e12:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007e14:	6a3b      	ldr	r3, [r7, #32]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d007      	beq.n	8007e2a <HAL_RCC_OscConfig+0x166>
 8007e1a:	6a3b      	ldr	r3, [r7, #32]
 8007e1c:	2b18      	cmp	r3, #24
 8007e1e:	d156      	bne.n	8007ece <HAL_RCC_OscConfig+0x20a>
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	f003 0303 	and.w	r3, r3, #3
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d151      	bne.n	8007ece <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e2a:	4b48      	ldr	r3, [pc, #288]	; (8007f4c <HAL_RCC_OscConfig+0x288>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f003 0304 	and.w	r3, r3, #4
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d005      	beq.n	8007e42 <HAL_RCC_OscConfig+0x17e>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d101      	bne.n	8007e42 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e392      	b.n	8008568 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007e42:	4b42      	ldr	r3, [pc, #264]	; (8007f4c <HAL_RCC_OscConfig+0x288>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f023 0219 	bic.w	r2, r3, #25
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	493f      	ldr	r1, [pc, #252]	; (8007f4c <HAL_RCC_OscConfig+0x288>)
 8007e50:	4313      	orrs	r3, r2
 8007e52:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e54:	f7fa ffd4 	bl	8002e00 <HAL_GetTick>
 8007e58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e5a:	e008      	b.n	8007e6e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e5c:	f7fa ffd0 	bl	8002e00 <HAL_GetTick>
 8007e60:	4602      	mov	r2, r0
 8007e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	2b02      	cmp	r3, #2
 8007e68:	d901      	bls.n	8007e6e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	e37c      	b.n	8008568 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e6e:	4b37      	ldr	r3, [pc, #220]	; (8007f4c <HAL_RCC_OscConfig+0x288>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 0304 	and.w	r3, r3, #4
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d0f0      	beq.n	8007e5c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e7a:	f7fa fff1 	bl	8002e60 <HAL_GetREVID>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	f241 0203 	movw	r2, #4099	; 0x1003
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d817      	bhi.n	8007eb8 <HAL_RCC_OscConfig+0x1f4>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	691b      	ldr	r3, [r3, #16]
 8007e8c:	2b40      	cmp	r3, #64	; 0x40
 8007e8e:	d108      	bne.n	8007ea2 <HAL_RCC_OscConfig+0x1de>
 8007e90:	4b2e      	ldr	r3, [pc, #184]	; (8007f4c <HAL_RCC_OscConfig+0x288>)
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007e98:	4a2c      	ldr	r2, [pc, #176]	; (8007f4c <HAL_RCC_OscConfig+0x288>)
 8007e9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e9e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ea0:	e07a      	b.n	8007f98 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ea2:	4b2a      	ldr	r3, [pc, #168]	; (8007f4c <HAL_RCC_OscConfig+0x288>)
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	031b      	lsls	r3, r3, #12
 8007eb0:	4926      	ldr	r1, [pc, #152]	; (8007f4c <HAL_RCC_OscConfig+0x288>)
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007eb6:	e06f      	b.n	8007f98 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007eb8:	4b24      	ldr	r3, [pc, #144]	; (8007f4c <HAL_RCC_OscConfig+0x288>)
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	061b      	lsls	r3, r3, #24
 8007ec6:	4921      	ldr	r1, [pc, #132]	; (8007f4c <HAL_RCC_OscConfig+0x288>)
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ecc:	e064      	b.n	8007f98 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d047      	beq.n	8007f66 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007ed6:	4b1d      	ldr	r3, [pc, #116]	; (8007f4c <HAL_RCC_OscConfig+0x288>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f023 0219 	bic.w	r2, r3, #25
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	491a      	ldr	r1, [pc, #104]	; (8007f4c <HAL_RCC_OscConfig+0x288>)
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ee8:	f7fa ff8a 	bl	8002e00 <HAL_GetTick>
 8007eec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007eee:	e008      	b.n	8007f02 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ef0:	f7fa ff86 	bl	8002e00 <HAL_GetTick>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef8:	1ad3      	subs	r3, r2, r3
 8007efa:	2b02      	cmp	r3, #2
 8007efc:	d901      	bls.n	8007f02 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007efe:	2303      	movs	r3, #3
 8007f00:	e332      	b.n	8008568 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f02:	4b12      	ldr	r3, [pc, #72]	; (8007f4c <HAL_RCC_OscConfig+0x288>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f003 0304 	and.w	r3, r3, #4
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d0f0      	beq.n	8007ef0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f0e:	f7fa ffa7 	bl	8002e60 <HAL_GetREVID>
 8007f12:	4603      	mov	r3, r0
 8007f14:	f241 0203 	movw	r2, #4099	; 0x1003
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d819      	bhi.n	8007f50 <HAL_RCC_OscConfig+0x28c>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	691b      	ldr	r3, [r3, #16]
 8007f20:	2b40      	cmp	r3, #64	; 0x40
 8007f22:	d108      	bne.n	8007f36 <HAL_RCC_OscConfig+0x272>
 8007f24:	4b09      	ldr	r3, [pc, #36]	; (8007f4c <HAL_RCC_OscConfig+0x288>)
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007f2c:	4a07      	ldr	r2, [pc, #28]	; (8007f4c <HAL_RCC_OscConfig+0x288>)
 8007f2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f32:	6053      	str	r3, [r2, #4]
 8007f34:	e030      	b.n	8007f98 <HAL_RCC_OscConfig+0x2d4>
 8007f36:	4b05      	ldr	r3, [pc, #20]	; (8007f4c <HAL_RCC_OscConfig+0x288>)
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	691b      	ldr	r3, [r3, #16]
 8007f42:	031b      	lsls	r3, r3, #12
 8007f44:	4901      	ldr	r1, [pc, #4]	; (8007f4c <HAL_RCC_OscConfig+0x288>)
 8007f46:	4313      	orrs	r3, r2
 8007f48:	604b      	str	r3, [r1, #4]
 8007f4a:	e025      	b.n	8007f98 <HAL_RCC_OscConfig+0x2d4>
 8007f4c:	58024400 	.word	0x58024400
 8007f50:	4b9a      	ldr	r3, [pc, #616]	; (80081bc <HAL_RCC_OscConfig+0x4f8>)
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	061b      	lsls	r3, r3, #24
 8007f5e:	4997      	ldr	r1, [pc, #604]	; (80081bc <HAL_RCC_OscConfig+0x4f8>)
 8007f60:	4313      	orrs	r3, r2
 8007f62:	604b      	str	r3, [r1, #4]
 8007f64:	e018      	b.n	8007f98 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f66:	4b95      	ldr	r3, [pc, #596]	; (80081bc <HAL_RCC_OscConfig+0x4f8>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a94      	ldr	r2, [pc, #592]	; (80081bc <HAL_RCC_OscConfig+0x4f8>)
 8007f6c:	f023 0301 	bic.w	r3, r3, #1
 8007f70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f72:	f7fa ff45 	bl	8002e00 <HAL_GetTick>
 8007f76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007f78:	e008      	b.n	8007f8c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f7a:	f7fa ff41 	bl	8002e00 <HAL_GetTick>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f82:	1ad3      	subs	r3, r2, r3
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d901      	bls.n	8007f8c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007f88:	2303      	movs	r3, #3
 8007f8a:	e2ed      	b.n	8008568 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007f8c:	4b8b      	ldr	r3, [pc, #556]	; (80081bc <HAL_RCC_OscConfig+0x4f8>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f003 0304 	and.w	r3, r3, #4
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d1f0      	bne.n	8007f7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 0310 	and.w	r3, r3, #16
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	f000 80a9 	beq.w	80080f8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007fa6:	4b85      	ldr	r3, [pc, #532]	; (80081bc <HAL_RCC_OscConfig+0x4f8>)
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007fae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007fb0:	4b82      	ldr	r3, [pc, #520]	; (80081bc <HAL_RCC_OscConfig+0x4f8>)
 8007fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	2b08      	cmp	r3, #8
 8007fba:	d007      	beq.n	8007fcc <HAL_RCC_OscConfig+0x308>
 8007fbc:	69bb      	ldr	r3, [r7, #24]
 8007fbe:	2b18      	cmp	r3, #24
 8007fc0:	d13a      	bne.n	8008038 <HAL_RCC_OscConfig+0x374>
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	f003 0303 	and.w	r3, r3, #3
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d135      	bne.n	8008038 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007fcc:	4b7b      	ldr	r3, [pc, #492]	; (80081bc <HAL_RCC_OscConfig+0x4f8>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d005      	beq.n	8007fe4 <HAL_RCC_OscConfig+0x320>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	69db      	ldr	r3, [r3, #28]
 8007fdc:	2b80      	cmp	r3, #128	; 0x80
 8007fde:	d001      	beq.n	8007fe4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e2c1      	b.n	8008568 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007fe4:	f7fa ff3c 	bl	8002e60 <HAL_GetREVID>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	f241 0203 	movw	r2, #4099	; 0x1003
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d817      	bhi.n	8008022 <HAL_RCC_OscConfig+0x35e>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a1b      	ldr	r3, [r3, #32]
 8007ff6:	2b20      	cmp	r3, #32
 8007ff8:	d108      	bne.n	800800c <HAL_RCC_OscConfig+0x348>
 8007ffa:	4b70      	ldr	r3, [pc, #448]	; (80081bc <HAL_RCC_OscConfig+0x4f8>)
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008002:	4a6e      	ldr	r2, [pc, #440]	; (80081bc <HAL_RCC_OscConfig+0x4f8>)
 8008004:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008008:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800800a:	e075      	b.n	80080f8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800800c:	4b6b      	ldr	r3, [pc, #428]	; (80081bc <HAL_RCC_OscConfig+0x4f8>)
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6a1b      	ldr	r3, [r3, #32]
 8008018:	069b      	lsls	r3, r3, #26
 800801a:	4968      	ldr	r1, [pc, #416]	; (80081bc <HAL_RCC_OscConfig+0x4f8>)
 800801c:	4313      	orrs	r3, r2
 800801e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008020:	e06a      	b.n	80080f8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008022:	4b66      	ldr	r3, [pc, #408]	; (80081bc <HAL_RCC_OscConfig+0x4f8>)
 8008024:	68db      	ldr	r3, [r3, #12]
 8008026:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a1b      	ldr	r3, [r3, #32]
 800802e:	061b      	lsls	r3, r3, #24
 8008030:	4962      	ldr	r1, [pc, #392]	; (80081bc <HAL_RCC_OscConfig+0x4f8>)
 8008032:	4313      	orrs	r3, r2
 8008034:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008036:	e05f      	b.n	80080f8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	69db      	ldr	r3, [r3, #28]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d042      	beq.n	80080c6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008040:	4b5e      	ldr	r3, [pc, #376]	; (80081bc <HAL_RCC_OscConfig+0x4f8>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a5d      	ldr	r2, [pc, #372]	; (80081bc <HAL_RCC_OscConfig+0x4f8>)
 8008046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800804a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800804c:	f7fa fed8 	bl	8002e00 <HAL_GetTick>
 8008050:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008052:	e008      	b.n	8008066 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008054:	f7fa fed4 	bl	8002e00 <HAL_GetTick>
 8008058:	4602      	mov	r2, r0
 800805a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805c:	1ad3      	subs	r3, r2, r3
 800805e:	2b02      	cmp	r3, #2
 8008060:	d901      	bls.n	8008066 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008062:	2303      	movs	r3, #3
 8008064:	e280      	b.n	8008568 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008066:	4b55      	ldr	r3, [pc, #340]	; (80081bc <HAL_RCC_OscConfig+0x4f8>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800806e:	2b00      	cmp	r3, #0
 8008070:	d0f0      	beq.n	8008054 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008072:	f7fa fef5 	bl	8002e60 <HAL_GetREVID>
 8008076:	4603      	mov	r3, r0
 8008078:	f241 0203 	movw	r2, #4099	; 0x1003
 800807c:	4293      	cmp	r3, r2
 800807e:	d817      	bhi.n	80080b0 <HAL_RCC_OscConfig+0x3ec>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6a1b      	ldr	r3, [r3, #32]
 8008084:	2b20      	cmp	r3, #32
 8008086:	d108      	bne.n	800809a <HAL_RCC_OscConfig+0x3d6>
 8008088:	4b4c      	ldr	r3, [pc, #304]	; (80081bc <HAL_RCC_OscConfig+0x4f8>)
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008090:	4a4a      	ldr	r2, [pc, #296]	; (80081bc <HAL_RCC_OscConfig+0x4f8>)
 8008092:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008096:	6053      	str	r3, [r2, #4]
 8008098:	e02e      	b.n	80080f8 <HAL_RCC_OscConfig+0x434>
 800809a:	4b48      	ldr	r3, [pc, #288]	; (80081bc <HAL_RCC_OscConfig+0x4f8>)
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a1b      	ldr	r3, [r3, #32]
 80080a6:	069b      	lsls	r3, r3, #26
 80080a8:	4944      	ldr	r1, [pc, #272]	; (80081bc <HAL_RCC_OscConfig+0x4f8>)
 80080aa:	4313      	orrs	r3, r2
 80080ac:	604b      	str	r3, [r1, #4]
 80080ae:	e023      	b.n	80080f8 <HAL_RCC_OscConfig+0x434>
 80080b0:	4b42      	ldr	r3, [pc, #264]	; (80081bc <HAL_RCC_OscConfig+0x4f8>)
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6a1b      	ldr	r3, [r3, #32]
 80080bc:	061b      	lsls	r3, r3, #24
 80080be:	493f      	ldr	r1, [pc, #252]	; (80081bc <HAL_RCC_OscConfig+0x4f8>)
 80080c0:	4313      	orrs	r3, r2
 80080c2:	60cb      	str	r3, [r1, #12]
 80080c4:	e018      	b.n	80080f8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80080c6:	4b3d      	ldr	r3, [pc, #244]	; (80081bc <HAL_RCC_OscConfig+0x4f8>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a3c      	ldr	r2, [pc, #240]	; (80081bc <HAL_RCC_OscConfig+0x4f8>)
 80080cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080d2:	f7fa fe95 	bl	8002e00 <HAL_GetTick>
 80080d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80080d8:	e008      	b.n	80080ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80080da:	f7fa fe91 	bl	8002e00 <HAL_GetTick>
 80080de:	4602      	mov	r2, r0
 80080e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e2:	1ad3      	subs	r3, r2, r3
 80080e4:	2b02      	cmp	r3, #2
 80080e6:	d901      	bls.n	80080ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80080e8:	2303      	movs	r3, #3
 80080ea:	e23d      	b.n	8008568 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80080ec:	4b33      	ldr	r3, [pc, #204]	; (80081bc <HAL_RCC_OscConfig+0x4f8>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d1f0      	bne.n	80080da <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f003 0308 	and.w	r3, r3, #8
 8008100:	2b00      	cmp	r3, #0
 8008102:	d036      	beq.n	8008172 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	695b      	ldr	r3, [r3, #20]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d019      	beq.n	8008140 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800810c:	4b2b      	ldr	r3, [pc, #172]	; (80081bc <HAL_RCC_OscConfig+0x4f8>)
 800810e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008110:	4a2a      	ldr	r2, [pc, #168]	; (80081bc <HAL_RCC_OscConfig+0x4f8>)
 8008112:	f043 0301 	orr.w	r3, r3, #1
 8008116:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008118:	f7fa fe72 	bl	8002e00 <HAL_GetTick>
 800811c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800811e:	e008      	b.n	8008132 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008120:	f7fa fe6e 	bl	8002e00 <HAL_GetTick>
 8008124:	4602      	mov	r2, r0
 8008126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008128:	1ad3      	subs	r3, r2, r3
 800812a:	2b02      	cmp	r3, #2
 800812c:	d901      	bls.n	8008132 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800812e:	2303      	movs	r3, #3
 8008130:	e21a      	b.n	8008568 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008132:	4b22      	ldr	r3, [pc, #136]	; (80081bc <HAL_RCC_OscConfig+0x4f8>)
 8008134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008136:	f003 0302 	and.w	r3, r3, #2
 800813a:	2b00      	cmp	r3, #0
 800813c:	d0f0      	beq.n	8008120 <HAL_RCC_OscConfig+0x45c>
 800813e:	e018      	b.n	8008172 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008140:	4b1e      	ldr	r3, [pc, #120]	; (80081bc <HAL_RCC_OscConfig+0x4f8>)
 8008142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008144:	4a1d      	ldr	r2, [pc, #116]	; (80081bc <HAL_RCC_OscConfig+0x4f8>)
 8008146:	f023 0301 	bic.w	r3, r3, #1
 800814a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800814c:	f7fa fe58 	bl	8002e00 <HAL_GetTick>
 8008150:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008152:	e008      	b.n	8008166 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008154:	f7fa fe54 	bl	8002e00 <HAL_GetTick>
 8008158:	4602      	mov	r2, r0
 800815a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815c:	1ad3      	subs	r3, r2, r3
 800815e:	2b02      	cmp	r3, #2
 8008160:	d901      	bls.n	8008166 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008162:	2303      	movs	r3, #3
 8008164:	e200      	b.n	8008568 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008166:	4b15      	ldr	r3, [pc, #84]	; (80081bc <HAL_RCC_OscConfig+0x4f8>)
 8008168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800816a:	f003 0302 	and.w	r3, r3, #2
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1f0      	bne.n	8008154 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f003 0320 	and.w	r3, r3, #32
 800817a:	2b00      	cmp	r3, #0
 800817c:	d039      	beq.n	80081f2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	699b      	ldr	r3, [r3, #24]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d01c      	beq.n	80081c0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008186:	4b0d      	ldr	r3, [pc, #52]	; (80081bc <HAL_RCC_OscConfig+0x4f8>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a0c      	ldr	r2, [pc, #48]	; (80081bc <HAL_RCC_OscConfig+0x4f8>)
 800818c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008190:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008192:	f7fa fe35 	bl	8002e00 <HAL_GetTick>
 8008196:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008198:	e008      	b.n	80081ac <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800819a:	f7fa fe31 	bl	8002e00 <HAL_GetTick>
 800819e:	4602      	mov	r2, r0
 80081a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a2:	1ad3      	subs	r3, r2, r3
 80081a4:	2b02      	cmp	r3, #2
 80081a6:	d901      	bls.n	80081ac <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80081a8:	2303      	movs	r3, #3
 80081aa:	e1dd      	b.n	8008568 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80081ac:	4b03      	ldr	r3, [pc, #12]	; (80081bc <HAL_RCC_OscConfig+0x4f8>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d0f0      	beq.n	800819a <HAL_RCC_OscConfig+0x4d6>
 80081b8:	e01b      	b.n	80081f2 <HAL_RCC_OscConfig+0x52e>
 80081ba:	bf00      	nop
 80081bc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80081c0:	4b9b      	ldr	r3, [pc, #620]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a9a      	ldr	r2, [pc, #616]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 80081c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081ca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80081cc:	f7fa fe18 	bl	8002e00 <HAL_GetTick>
 80081d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80081d2:	e008      	b.n	80081e6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80081d4:	f7fa fe14 	bl	8002e00 <HAL_GetTick>
 80081d8:	4602      	mov	r2, r0
 80081da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081dc:	1ad3      	subs	r3, r2, r3
 80081de:	2b02      	cmp	r3, #2
 80081e0:	d901      	bls.n	80081e6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80081e2:	2303      	movs	r3, #3
 80081e4:	e1c0      	b.n	8008568 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80081e6:	4b92      	ldr	r3, [pc, #584]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d1f0      	bne.n	80081d4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f003 0304 	and.w	r3, r3, #4
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f000 8081 	beq.w	8008302 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008200:	4b8c      	ldr	r3, [pc, #560]	; (8008434 <HAL_RCC_OscConfig+0x770>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a8b      	ldr	r2, [pc, #556]	; (8008434 <HAL_RCC_OscConfig+0x770>)
 8008206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800820a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800820c:	f7fa fdf8 	bl	8002e00 <HAL_GetTick>
 8008210:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008212:	e008      	b.n	8008226 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008214:	f7fa fdf4 	bl	8002e00 <HAL_GetTick>
 8008218:	4602      	mov	r2, r0
 800821a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821c:	1ad3      	subs	r3, r2, r3
 800821e:	2b64      	cmp	r3, #100	; 0x64
 8008220:	d901      	bls.n	8008226 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008222:	2303      	movs	r3, #3
 8008224:	e1a0      	b.n	8008568 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008226:	4b83      	ldr	r3, [pc, #524]	; (8008434 <HAL_RCC_OscConfig+0x770>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800822e:	2b00      	cmp	r3, #0
 8008230:	d0f0      	beq.n	8008214 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	2b01      	cmp	r3, #1
 8008238:	d106      	bne.n	8008248 <HAL_RCC_OscConfig+0x584>
 800823a:	4b7d      	ldr	r3, [pc, #500]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 800823c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800823e:	4a7c      	ldr	r2, [pc, #496]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 8008240:	f043 0301 	orr.w	r3, r3, #1
 8008244:	6713      	str	r3, [r2, #112]	; 0x70
 8008246:	e02d      	b.n	80082a4 <HAL_RCC_OscConfig+0x5e0>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d10c      	bne.n	800826a <HAL_RCC_OscConfig+0x5a6>
 8008250:	4b77      	ldr	r3, [pc, #476]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 8008252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008254:	4a76      	ldr	r2, [pc, #472]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 8008256:	f023 0301 	bic.w	r3, r3, #1
 800825a:	6713      	str	r3, [r2, #112]	; 0x70
 800825c:	4b74      	ldr	r3, [pc, #464]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 800825e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008260:	4a73      	ldr	r2, [pc, #460]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 8008262:	f023 0304 	bic.w	r3, r3, #4
 8008266:	6713      	str	r3, [r2, #112]	; 0x70
 8008268:	e01c      	b.n	80082a4 <HAL_RCC_OscConfig+0x5e0>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	2b05      	cmp	r3, #5
 8008270:	d10c      	bne.n	800828c <HAL_RCC_OscConfig+0x5c8>
 8008272:	4b6f      	ldr	r3, [pc, #444]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 8008274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008276:	4a6e      	ldr	r2, [pc, #440]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 8008278:	f043 0304 	orr.w	r3, r3, #4
 800827c:	6713      	str	r3, [r2, #112]	; 0x70
 800827e:	4b6c      	ldr	r3, [pc, #432]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 8008280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008282:	4a6b      	ldr	r2, [pc, #428]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 8008284:	f043 0301 	orr.w	r3, r3, #1
 8008288:	6713      	str	r3, [r2, #112]	; 0x70
 800828a:	e00b      	b.n	80082a4 <HAL_RCC_OscConfig+0x5e0>
 800828c:	4b68      	ldr	r3, [pc, #416]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 800828e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008290:	4a67      	ldr	r2, [pc, #412]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 8008292:	f023 0301 	bic.w	r3, r3, #1
 8008296:	6713      	str	r3, [r2, #112]	; 0x70
 8008298:	4b65      	ldr	r3, [pc, #404]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 800829a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800829c:	4a64      	ldr	r2, [pc, #400]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 800829e:	f023 0304 	bic.w	r3, r3, #4
 80082a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d015      	beq.n	80082d8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082ac:	f7fa fda8 	bl	8002e00 <HAL_GetTick>
 80082b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082b2:	e00a      	b.n	80082ca <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082b4:	f7fa fda4 	bl	8002e00 <HAL_GetTick>
 80082b8:	4602      	mov	r2, r0
 80082ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	f241 3288 	movw	r2, #5000	; 0x1388
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d901      	bls.n	80082ca <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80082c6:	2303      	movs	r3, #3
 80082c8:	e14e      	b.n	8008568 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082ca:	4b59      	ldr	r3, [pc, #356]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 80082cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ce:	f003 0302 	and.w	r3, r3, #2
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d0ee      	beq.n	80082b4 <HAL_RCC_OscConfig+0x5f0>
 80082d6:	e014      	b.n	8008302 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082d8:	f7fa fd92 	bl	8002e00 <HAL_GetTick>
 80082dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80082de:	e00a      	b.n	80082f6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082e0:	f7fa fd8e 	bl	8002e00 <HAL_GetTick>
 80082e4:	4602      	mov	r2, r0
 80082e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e8:	1ad3      	subs	r3, r2, r3
 80082ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d901      	bls.n	80082f6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80082f2:	2303      	movs	r3, #3
 80082f4:	e138      	b.n	8008568 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80082f6:	4b4e      	ldr	r3, [pc, #312]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 80082f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082fa:	f003 0302 	and.w	r3, r3, #2
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d1ee      	bne.n	80082e0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008306:	2b00      	cmp	r3, #0
 8008308:	f000 812d 	beq.w	8008566 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800830c:	4b48      	ldr	r3, [pc, #288]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 800830e:	691b      	ldr	r3, [r3, #16]
 8008310:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008314:	2b18      	cmp	r3, #24
 8008316:	f000 80bd 	beq.w	8008494 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831e:	2b02      	cmp	r3, #2
 8008320:	f040 809e 	bne.w	8008460 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008324:	4b42      	ldr	r3, [pc, #264]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a41      	ldr	r2, [pc, #260]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 800832a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800832e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008330:	f7fa fd66 	bl	8002e00 <HAL_GetTick>
 8008334:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008336:	e008      	b.n	800834a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008338:	f7fa fd62 	bl	8002e00 <HAL_GetTick>
 800833c:	4602      	mov	r2, r0
 800833e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008340:	1ad3      	subs	r3, r2, r3
 8008342:	2b02      	cmp	r3, #2
 8008344:	d901      	bls.n	800834a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008346:	2303      	movs	r3, #3
 8008348:	e10e      	b.n	8008568 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800834a:	4b39      	ldr	r3, [pc, #228]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1f0      	bne.n	8008338 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008356:	4b36      	ldr	r3, [pc, #216]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 8008358:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800835a:	4b37      	ldr	r3, [pc, #220]	; (8008438 <HAL_RCC_OscConfig+0x774>)
 800835c:	4013      	ands	r3, r2
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008366:	0112      	lsls	r2, r2, #4
 8008368:	430a      	orrs	r2, r1
 800836a:	4931      	ldr	r1, [pc, #196]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 800836c:	4313      	orrs	r3, r2
 800836e:	628b      	str	r3, [r1, #40]	; 0x28
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008374:	3b01      	subs	r3, #1
 8008376:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800837e:	3b01      	subs	r3, #1
 8008380:	025b      	lsls	r3, r3, #9
 8008382:	b29b      	uxth	r3, r3
 8008384:	431a      	orrs	r2, r3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800838a:	3b01      	subs	r3, #1
 800838c:	041b      	lsls	r3, r3, #16
 800838e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008392:	431a      	orrs	r2, r3
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008398:	3b01      	subs	r3, #1
 800839a:	061b      	lsls	r3, r3, #24
 800839c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80083a0:	4923      	ldr	r1, [pc, #140]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 80083a2:	4313      	orrs	r3, r2
 80083a4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80083a6:	4b22      	ldr	r3, [pc, #136]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 80083a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083aa:	4a21      	ldr	r2, [pc, #132]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 80083ac:	f023 0301 	bic.w	r3, r3, #1
 80083b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80083b2:	4b1f      	ldr	r3, [pc, #124]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 80083b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083b6:	4b21      	ldr	r3, [pc, #132]	; (800843c <HAL_RCC_OscConfig+0x778>)
 80083b8:	4013      	ands	r3, r2
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80083be:	00d2      	lsls	r2, r2, #3
 80083c0:	491b      	ldr	r1, [pc, #108]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 80083c2:	4313      	orrs	r3, r2
 80083c4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80083c6:	4b1a      	ldr	r3, [pc, #104]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 80083c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ca:	f023 020c 	bic.w	r2, r3, #12
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d2:	4917      	ldr	r1, [pc, #92]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 80083d4:	4313      	orrs	r3, r2
 80083d6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80083d8:	4b15      	ldr	r3, [pc, #84]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 80083da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083dc:	f023 0202 	bic.w	r2, r3, #2
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083e4:	4912      	ldr	r1, [pc, #72]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 80083e6:	4313      	orrs	r3, r2
 80083e8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80083ea:	4b11      	ldr	r3, [pc, #68]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 80083ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ee:	4a10      	ldr	r2, [pc, #64]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 80083f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083f6:	4b0e      	ldr	r3, [pc, #56]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 80083f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fa:	4a0d      	ldr	r2, [pc, #52]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 80083fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008400:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008402:	4b0b      	ldr	r3, [pc, #44]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 8008404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008406:	4a0a      	ldr	r2, [pc, #40]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 8008408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800840c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800840e:	4b08      	ldr	r3, [pc, #32]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 8008410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008412:	4a07      	ldr	r2, [pc, #28]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 8008414:	f043 0301 	orr.w	r3, r3, #1
 8008418:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800841a:	4b05      	ldr	r3, [pc, #20]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a04      	ldr	r2, [pc, #16]	; (8008430 <HAL_RCC_OscConfig+0x76c>)
 8008420:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008424:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008426:	f7fa fceb 	bl	8002e00 <HAL_GetTick>
 800842a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800842c:	e011      	b.n	8008452 <HAL_RCC_OscConfig+0x78e>
 800842e:	bf00      	nop
 8008430:	58024400 	.word	0x58024400
 8008434:	58024800 	.word	0x58024800
 8008438:	fffffc0c 	.word	0xfffffc0c
 800843c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008440:	f7fa fcde 	bl	8002e00 <HAL_GetTick>
 8008444:	4602      	mov	r2, r0
 8008446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008448:	1ad3      	subs	r3, r2, r3
 800844a:	2b02      	cmp	r3, #2
 800844c:	d901      	bls.n	8008452 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800844e:	2303      	movs	r3, #3
 8008450:	e08a      	b.n	8008568 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008452:	4b47      	ldr	r3, [pc, #284]	; (8008570 <HAL_RCC_OscConfig+0x8ac>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800845a:	2b00      	cmp	r3, #0
 800845c:	d0f0      	beq.n	8008440 <HAL_RCC_OscConfig+0x77c>
 800845e:	e082      	b.n	8008566 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008460:	4b43      	ldr	r3, [pc, #268]	; (8008570 <HAL_RCC_OscConfig+0x8ac>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a42      	ldr	r2, [pc, #264]	; (8008570 <HAL_RCC_OscConfig+0x8ac>)
 8008466:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800846a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800846c:	f7fa fcc8 	bl	8002e00 <HAL_GetTick>
 8008470:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008472:	e008      	b.n	8008486 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008474:	f7fa fcc4 	bl	8002e00 <HAL_GetTick>
 8008478:	4602      	mov	r2, r0
 800847a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847c:	1ad3      	subs	r3, r2, r3
 800847e:	2b02      	cmp	r3, #2
 8008480:	d901      	bls.n	8008486 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008482:	2303      	movs	r3, #3
 8008484:	e070      	b.n	8008568 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008486:	4b3a      	ldr	r3, [pc, #232]	; (8008570 <HAL_RCC_OscConfig+0x8ac>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800848e:	2b00      	cmp	r3, #0
 8008490:	d1f0      	bne.n	8008474 <HAL_RCC_OscConfig+0x7b0>
 8008492:	e068      	b.n	8008566 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008494:	4b36      	ldr	r3, [pc, #216]	; (8008570 <HAL_RCC_OscConfig+0x8ac>)
 8008496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008498:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800849a:	4b35      	ldr	r3, [pc, #212]	; (8008570 <HAL_RCC_OscConfig+0x8ac>)
 800849c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800849e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d031      	beq.n	800850c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	f003 0203 	and.w	r2, r3, #3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d12a      	bne.n	800850c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	091b      	lsrs	r3, r3, #4
 80084ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d122      	bne.n	800850c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d11a      	bne.n	800850c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	0a5b      	lsrs	r3, r3, #9
 80084da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084e2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d111      	bne.n	800850c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	0c1b      	lsrs	r3, r3, #16
 80084ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d108      	bne.n	800850c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	0e1b      	lsrs	r3, r3, #24
 80084fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008506:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008508:	429a      	cmp	r2, r3
 800850a:	d001      	beq.n	8008510 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	e02b      	b.n	8008568 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008510:	4b17      	ldr	r3, [pc, #92]	; (8008570 <HAL_RCC_OscConfig+0x8ac>)
 8008512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008514:	08db      	lsrs	r3, r3, #3
 8008516:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800851a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008520:	693a      	ldr	r2, [r7, #16]
 8008522:	429a      	cmp	r2, r3
 8008524:	d01f      	beq.n	8008566 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008526:	4b12      	ldr	r3, [pc, #72]	; (8008570 <HAL_RCC_OscConfig+0x8ac>)
 8008528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852a:	4a11      	ldr	r2, [pc, #68]	; (8008570 <HAL_RCC_OscConfig+0x8ac>)
 800852c:	f023 0301 	bic.w	r3, r3, #1
 8008530:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008532:	f7fa fc65 	bl	8002e00 <HAL_GetTick>
 8008536:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008538:	bf00      	nop
 800853a:	f7fa fc61 	bl	8002e00 <HAL_GetTick>
 800853e:	4602      	mov	r2, r0
 8008540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008542:	4293      	cmp	r3, r2
 8008544:	d0f9      	beq.n	800853a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008546:	4b0a      	ldr	r3, [pc, #40]	; (8008570 <HAL_RCC_OscConfig+0x8ac>)
 8008548:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800854a:	4b0a      	ldr	r3, [pc, #40]	; (8008574 <HAL_RCC_OscConfig+0x8b0>)
 800854c:	4013      	ands	r3, r2
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008552:	00d2      	lsls	r2, r2, #3
 8008554:	4906      	ldr	r1, [pc, #24]	; (8008570 <HAL_RCC_OscConfig+0x8ac>)
 8008556:	4313      	orrs	r3, r2
 8008558:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800855a:	4b05      	ldr	r3, [pc, #20]	; (8008570 <HAL_RCC_OscConfig+0x8ac>)
 800855c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855e:	4a04      	ldr	r2, [pc, #16]	; (8008570 <HAL_RCC_OscConfig+0x8ac>)
 8008560:	f043 0301 	orr.w	r3, r3, #1
 8008564:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008566:	2300      	movs	r3, #0
}
 8008568:	4618      	mov	r0, r3
 800856a:	3730      	adds	r7, #48	; 0x30
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}
 8008570:	58024400 	.word	0x58024400
 8008574:	ffff0007 	.word	0xffff0007

08008578 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b086      	sub	sp, #24
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d101      	bne.n	800858c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	e19c      	b.n	80088c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800858c:	4b8a      	ldr	r3, [pc, #552]	; (80087b8 <HAL_RCC_ClockConfig+0x240>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f003 030f 	and.w	r3, r3, #15
 8008594:	683a      	ldr	r2, [r7, #0]
 8008596:	429a      	cmp	r2, r3
 8008598:	d910      	bls.n	80085bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800859a:	4b87      	ldr	r3, [pc, #540]	; (80087b8 <HAL_RCC_ClockConfig+0x240>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f023 020f 	bic.w	r2, r3, #15
 80085a2:	4985      	ldr	r1, [pc, #532]	; (80087b8 <HAL_RCC_ClockConfig+0x240>)
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	4313      	orrs	r3, r2
 80085a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80085aa:	4b83      	ldr	r3, [pc, #524]	; (80087b8 <HAL_RCC_ClockConfig+0x240>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f003 030f 	and.w	r3, r3, #15
 80085b2:	683a      	ldr	r2, [r7, #0]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d001      	beq.n	80085bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	e184      	b.n	80088c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f003 0304 	and.w	r3, r3, #4
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d010      	beq.n	80085ea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	691a      	ldr	r2, [r3, #16]
 80085cc:	4b7b      	ldr	r3, [pc, #492]	; (80087bc <HAL_RCC_ClockConfig+0x244>)
 80085ce:	699b      	ldr	r3, [r3, #24]
 80085d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d908      	bls.n	80085ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80085d8:	4b78      	ldr	r3, [pc, #480]	; (80087bc <HAL_RCC_ClockConfig+0x244>)
 80085da:	699b      	ldr	r3, [r3, #24]
 80085dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	691b      	ldr	r3, [r3, #16]
 80085e4:	4975      	ldr	r1, [pc, #468]	; (80087bc <HAL_RCC_ClockConfig+0x244>)
 80085e6:	4313      	orrs	r3, r2
 80085e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f003 0308 	and.w	r3, r3, #8
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d010      	beq.n	8008618 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	695a      	ldr	r2, [r3, #20]
 80085fa:	4b70      	ldr	r3, [pc, #448]	; (80087bc <HAL_RCC_ClockConfig+0x244>)
 80085fc:	69db      	ldr	r3, [r3, #28]
 80085fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008602:	429a      	cmp	r2, r3
 8008604:	d908      	bls.n	8008618 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008606:	4b6d      	ldr	r3, [pc, #436]	; (80087bc <HAL_RCC_ClockConfig+0x244>)
 8008608:	69db      	ldr	r3, [r3, #28]
 800860a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	695b      	ldr	r3, [r3, #20]
 8008612:	496a      	ldr	r1, [pc, #424]	; (80087bc <HAL_RCC_ClockConfig+0x244>)
 8008614:	4313      	orrs	r3, r2
 8008616:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f003 0310 	and.w	r3, r3, #16
 8008620:	2b00      	cmp	r3, #0
 8008622:	d010      	beq.n	8008646 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	699a      	ldr	r2, [r3, #24]
 8008628:	4b64      	ldr	r3, [pc, #400]	; (80087bc <HAL_RCC_ClockConfig+0x244>)
 800862a:	69db      	ldr	r3, [r3, #28]
 800862c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008630:	429a      	cmp	r2, r3
 8008632:	d908      	bls.n	8008646 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008634:	4b61      	ldr	r3, [pc, #388]	; (80087bc <HAL_RCC_ClockConfig+0x244>)
 8008636:	69db      	ldr	r3, [r3, #28]
 8008638:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	699b      	ldr	r3, [r3, #24]
 8008640:	495e      	ldr	r1, [pc, #376]	; (80087bc <HAL_RCC_ClockConfig+0x244>)
 8008642:	4313      	orrs	r3, r2
 8008644:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f003 0320 	and.w	r3, r3, #32
 800864e:	2b00      	cmp	r3, #0
 8008650:	d010      	beq.n	8008674 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	69da      	ldr	r2, [r3, #28]
 8008656:	4b59      	ldr	r3, [pc, #356]	; (80087bc <HAL_RCC_ClockConfig+0x244>)
 8008658:	6a1b      	ldr	r3, [r3, #32]
 800865a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800865e:	429a      	cmp	r2, r3
 8008660:	d908      	bls.n	8008674 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008662:	4b56      	ldr	r3, [pc, #344]	; (80087bc <HAL_RCC_ClockConfig+0x244>)
 8008664:	6a1b      	ldr	r3, [r3, #32]
 8008666:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	69db      	ldr	r3, [r3, #28]
 800866e:	4953      	ldr	r1, [pc, #332]	; (80087bc <HAL_RCC_ClockConfig+0x244>)
 8008670:	4313      	orrs	r3, r2
 8008672:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f003 0302 	and.w	r3, r3, #2
 800867c:	2b00      	cmp	r3, #0
 800867e:	d010      	beq.n	80086a2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	68da      	ldr	r2, [r3, #12]
 8008684:	4b4d      	ldr	r3, [pc, #308]	; (80087bc <HAL_RCC_ClockConfig+0x244>)
 8008686:	699b      	ldr	r3, [r3, #24]
 8008688:	f003 030f 	and.w	r3, r3, #15
 800868c:	429a      	cmp	r2, r3
 800868e:	d908      	bls.n	80086a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008690:	4b4a      	ldr	r3, [pc, #296]	; (80087bc <HAL_RCC_ClockConfig+0x244>)
 8008692:	699b      	ldr	r3, [r3, #24]
 8008694:	f023 020f 	bic.w	r2, r3, #15
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	4947      	ldr	r1, [pc, #284]	; (80087bc <HAL_RCC_ClockConfig+0x244>)
 800869e:	4313      	orrs	r3, r2
 80086a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f003 0301 	and.w	r3, r3, #1
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d055      	beq.n	800875a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80086ae:	4b43      	ldr	r3, [pc, #268]	; (80087bc <HAL_RCC_ClockConfig+0x244>)
 80086b0:	699b      	ldr	r3, [r3, #24]
 80086b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	4940      	ldr	r1, [pc, #256]	; (80087bc <HAL_RCC_ClockConfig+0x244>)
 80086bc:	4313      	orrs	r3, r2
 80086be:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	2b02      	cmp	r3, #2
 80086c6:	d107      	bne.n	80086d8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80086c8:	4b3c      	ldr	r3, [pc, #240]	; (80087bc <HAL_RCC_ClockConfig+0x244>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d121      	bne.n	8008718 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	e0f6      	b.n	80088c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	2b03      	cmp	r3, #3
 80086de:	d107      	bne.n	80086f0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80086e0:	4b36      	ldr	r3, [pc, #216]	; (80087bc <HAL_RCC_ClockConfig+0x244>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d115      	bne.n	8008718 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	e0ea      	b.n	80088c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d107      	bne.n	8008708 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80086f8:	4b30      	ldr	r3, [pc, #192]	; (80087bc <HAL_RCC_ClockConfig+0x244>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008700:	2b00      	cmp	r3, #0
 8008702:	d109      	bne.n	8008718 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008704:	2301      	movs	r3, #1
 8008706:	e0de      	b.n	80088c6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008708:	4b2c      	ldr	r3, [pc, #176]	; (80087bc <HAL_RCC_ClockConfig+0x244>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f003 0304 	and.w	r3, r3, #4
 8008710:	2b00      	cmp	r3, #0
 8008712:	d101      	bne.n	8008718 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	e0d6      	b.n	80088c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008718:	4b28      	ldr	r3, [pc, #160]	; (80087bc <HAL_RCC_ClockConfig+0x244>)
 800871a:	691b      	ldr	r3, [r3, #16]
 800871c:	f023 0207 	bic.w	r2, r3, #7
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	4925      	ldr	r1, [pc, #148]	; (80087bc <HAL_RCC_ClockConfig+0x244>)
 8008726:	4313      	orrs	r3, r2
 8008728:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800872a:	f7fa fb69 	bl	8002e00 <HAL_GetTick>
 800872e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008730:	e00a      	b.n	8008748 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008732:	f7fa fb65 	bl	8002e00 <HAL_GetTick>
 8008736:	4602      	mov	r2, r0
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	1ad3      	subs	r3, r2, r3
 800873c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008740:	4293      	cmp	r3, r2
 8008742:	d901      	bls.n	8008748 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008744:	2303      	movs	r3, #3
 8008746:	e0be      	b.n	80088c6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008748:	4b1c      	ldr	r3, [pc, #112]	; (80087bc <HAL_RCC_ClockConfig+0x244>)
 800874a:	691b      	ldr	r3, [r3, #16]
 800874c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	00db      	lsls	r3, r3, #3
 8008756:	429a      	cmp	r2, r3
 8008758:	d1eb      	bne.n	8008732 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f003 0302 	and.w	r3, r3, #2
 8008762:	2b00      	cmp	r3, #0
 8008764:	d010      	beq.n	8008788 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	68da      	ldr	r2, [r3, #12]
 800876a:	4b14      	ldr	r3, [pc, #80]	; (80087bc <HAL_RCC_ClockConfig+0x244>)
 800876c:	699b      	ldr	r3, [r3, #24]
 800876e:	f003 030f 	and.w	r3, r3, #15
 8008772:	429a      	cmp	r2, r3
 8008774:	d208      	bcs.n	8008788 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008776:	4b11      	ldr	r3, [pc, #68]	; (80087bc <HAL_RCC_ClockConfig+0x244>)
 8008778:	699b      	ldr	r3, [r3, #24]
 800877a:	f023 020f 	bic.w	r2, r3, #15
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	490e      	ldr	r1, [pc, #56]	; (80087bc <HAL_RCC_ClockConfig+0x244>)
 8008784:	4313      	orrs	r3, r2
 8008786:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008788:	4b0b      	ldr	r3, [pc, #44]	; (80087b8 <HAL_RCC_ClockConfig+0x240>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f003 030f 	and.w	r3, r3, #15
 8008790:	683a      	ldr	r2, [r7, #0]
 8008792:	429a      	cmp	r2, r3
 8008794:	d214      	bcs.n	80087c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008796:	4b08      	ldr	r3, [pc, #32]	; (80087b8 <HAL_RCC_ClockConfig+0x240>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f023 020f 	bic.w	r2, r3, #15
 800879e:	4906      	ldr	r1, [pc, #24]	; (80087b8 <HAL_RCC_ClockConfig+0x240>)
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80087a6:	4b04      	ldr	r3, [pc, #16]	; (80087b8 <HAL_RCC_ClockConfig+0x240>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f003 030f 	and.w	r3, r3, #15
 80087ae:	683a      	ldr	r2, [r7, #0]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d005      	beq.n	80087c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80087b4:	2301      	movs	r3, #1
 80087b6:	e086      	b.n	80088c6 <HAL_RCC_ClockConfig+0x34e>
 80087b8:	52002000 	.word	0x52002000
 80087bc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f003 0304 	and.w	r3, r3, #4
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d010      	beq.n	80087ee <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	691a      	ldr	r2, [r3, #16]
 80087d0:	4b3f      	ldr	r3, [pc, #252]	; (80088d0 <HAL_RCC_ClockConfig+0x358>)
 80087d2:	699b      	ldr	r3, [r3, #24]
 80087d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80087d8:	429a      	cmp	r2, r3
 80087da:	d208      	bcs.n	80087ee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80087dc:	4b3c      	ldr	r3, [pc, #240]	; (80088d0 <HAL_RCC_ClockConfig+0x358>)
 80087de:	699b      	ldr	r3, [r3, #24]
 80087e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	691b      	ldr	r3, [r3, #16]
 80087e8:	4939      	ldr	r1, [pc, #228]	; (80088d0 <HAL_RCC_ClockConfig+0x358>)
 80087ea:	4313      	orrs	r3, r2
 80087ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f003 0308 	and.w	r3, r3, #8
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d010      	beq.n	800881c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	695a      	ldr	r2, [r3, #20]
 80087fe:	4b34      	ldr	r3, [pc, #208]	; (80088d0 <HAL_RCC_ClockConfig+0x358>)
 8008800:	69db      	ldr	r3, [r3, #28]
 8008802:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008806:	429a      	cmp	r2, r3
 8008808:	d208      	bcs.n	800881c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800880a:	4b31      	ldr	r3, [pc, #196]	; (80088d0 <HAL_RCC_ClockConfig+0x358>)
 800880c:	69db      	ldr	r3, [r3, #28]
 800880e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	695b      	ldr	r3, [r3, #20]
 8008816:	492e      	ldr	r1, [pc, #184]	; (80088d0 <HAL_RCC_ClockConfig+0x358>)
 8008818:	4313      	orrs	r3, r2
 800881a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f003 0310 	and.w	r3, r3, #16
 8008824:	2b00      	cmp	r3, #0
 8008826:	d010      	beq.n	800884a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	699a      	ldr	r2, [r3, #24]
 800882c:	4b28      	ldr	r3, [pc, #160]	; (80088d0 <HAL_RCC_ClockConfig+0x358>)
 800882e:	69db      	ldr	r3, [r3, #28]
 8008830:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008834:	429a      	cmp	r2, r3
 8008836:	d208      	bcs.n	800884a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008838:	4b25      	ldr	r3, [pc, #148]	; (80088d0 <HAL_RCC_ClockConfig+0x358>)
 800883a:	69db      	ldr	r3, [r3, #28]
 800883c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	699b      	ldr	r3, [r3, #24]
 8008844:	4922      	ldr	r1, [pc, #136]	; (80088d0 <HAL_RCC_ClockConfig+0x358>)
 8008846:	4313      	orrs	r3, r2
 8008848:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f003 0320 	and.w	r3, r3, #32
 8008852:	2b00      	cmp	r3, #0
 8008854:	d010      	beq.n	8008878 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	69da      	ldr	r2, [r3, #28]
 800885a:	4b1d      	ldr	r3, [pc, #116]	; (80088d0 <HAL_RCC_ClockConfig+0x358>)
 800885c:	6a1b      	ldr	r3, [r3, #32]
 800885e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008862:	429a      	cmp	r2, r3
 8008864:	d208      	bcs.n	8008878 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008866:	4b1a      	ldr	r3, [pc, #104]	; (80088d0 <HAL_RCC_ClockConfig+0x358>)
 8008868:	6a1b      	ldr	r3, [r3, #32]
 800886a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	69db      	ldr	r3, [r3, #28]
 8008872:	4917      	ldr	r1, [pc, #92]	; (80088d0 <HAL_RCC_ClockConfig+0x358>)
 8008874:	4313      	orrs	r3, r2
 8008876:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008878:	f000 f844 	bl	8008904 <HAL_RCC_GetSysClockFreq>
 800887c:	4602      	mov	r2, r0
 800887e:	4b14      	ldr	r3, [pc, #80]	; (80088d0 <HAL_RCC_ClockConfig+0x358>)
 8008880:	699b      	ldr	r3, [r3, #24]
 8008882:	0a1b      	lsrs	r3, r3, #8
 8008884:	f003 030f 	and.w	r3, r3, #15
 8008888:	4912      	ldr	r1, [pc, #72]	; (80088d4 <HAL_RCC_ClockConfig+0x35c>)
 800888a:	5ccb      	ldrb	r3, [r1, r3]
 800888c:	f003 031f 	and.w	r3, r3, #31
 8008890:	fa22 f303 	lsr.w	r3, r2, r3
 8008894:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008896:	4b0e      	ldr	r3, [pc, #56]	; (80088d0 <HAL_RCC_ClockConfig+0x358>)
 8008898:	699b      	ldr	r3, [r3, #24]
 800889a:	f003 030f 	and.w	r3, r3, #15
 800889e:	4a0d      	ldr	r2, [pc, #52]	; (80088d4 <HAL_RCC_ClockConfig+0x35c>)
 80088a0:	5cd3      	ldrb	r3, [r2, r3]
 80088a2:	f003 031f 	and.w	r3, r3, #31
 80088a6:	693a      	ldr	r2, [r7, #16]
 80088a8:	fa22 f303 	lsr.w	r3, r2, r3
 80088ac:	4a0a      	ldr	r2, [pc, #40]	; (80088d8 <HAL_RCC_ClockConfig+0x360>)
 80088ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80088b0:	4a0a      	ldr	r2, [pc, #40]	; (80088dc <HAL_RCC_ClockConfig+0x364>)
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80088b6:	4b0a      	ldr	r3, [pc, #40]	; (80088e0 <HAL_RCC_ClockConfig+0x368>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7fa fa56 	bl	8002d6c <HAL_InitTick>
 80088c0:	4603      	mov	r3, r0
 80088c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80088c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3718      	adds	r7, #24
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	58024400 	.word	0x58024400
 80088d4:	08010054 	.word	0x08010054
 80088d8:	2000001c 	.word	0x2000001c
 80088dc:	20000018 	.word	0x20000018
 80088e0:	20000020 	.word	0x20000020

080088e4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80088e4:	b480      	push	{r7}
 80088e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 80088e8:	4b05      	ldr	r3, [pc, #20]	; (8008900 <HAL_RCC_EnableCSS+0x1c>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a04      	ldr	r2, [pc, #16]	; (8008900 <HAL_RCC_EnableCSS+0x1c>)
 80088ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80088f2:	6013      	str	r3, [r2, #0]
}
 80088f4:	bf00      	nop
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr
 80088fe:	bf00      	nop
 8008900:	58024400 	.word	0x58024400

08008904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008904:	b480      	push	{r7}
 8008906:	b089      	sub	sp, #36	; 0x24
 8008908:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800890a:	4bb3      	ldr	r3, [pc, #716]	; (8008bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008912:	2b18      	cmp	r3, #24
 8008914:	f200 8155 	bhi.w	8008bc2 <HAL_RCC_GetSysClockFreq+0x2be>
 8008918:	a201      	add	r2, pc, #4	; (adr r2, 8008920 <HAL_RCC_GetSysClockFreq+0x1c>)
 800891a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800891e:	bf00      	nop
 8008920:	08008985 	.word	0x08008985
 8008924:	08008bc3 	.word	0x08008bc3
 8008928:	08008bc3 	.word	0x08008bc3
 800892c:	08008bc3 	.word	0x08008bc3
 8008930:	08008bc3 	.word	0x08008bc3
 8008934:	08008bc3 	.word	0x08008bc3
 8008938:	08008bc3 	.word	0x08008bc3
 800893c:	08008bc3 	.word	0x08008bc3
 8008940:	080089ab 	.word	0x080089ab
 8008944:	08008bc3 	.word	0x08008bc3
 8008948:	08008bc3 	.word	0x08008bc3
 800894c:	08008bc3 	.word	0x08008bc3
 8008950:	08008bc3 	.word	0x08008bc3
 8008954:	08008bc3 	.word	0x08008bc3
 8008958:	08008bc3 	.word	0x08008bc3
 800895c:	08008bc3 	.word	0x08008bc3
 8008960:	080089b1 	.word	0x080089b1
 8008964:	08008bc3 	.word	0x08008bc3
 8008968:	08008bc3 	.word	0x08008bc3
 800896c:	08008bc3 	.word	0x08008bc3
 8008970:	08008bc3 	.word	0x08008bc3
 8008974:	08008bc3 	.word	0x08008bc3
 8008978:	08008bc3 	.word	0x08008bc3
 800897c:	08008bc3 	.word	0x08008bc3
 8008980:	080089b7 	.word	0x080089b7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008984:	4b94      	ldr	r3, [pc, #592]	; (8008bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f003 0320 	and.w	r3, r3, #32
 800898c:	2b00      	cmp	r3, #0
 800898e:	d009      	beq.n	80089a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008990:	4b91      	ldr	r3, [pc, #580]	; (8008bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	08db      	lsrs	r3, r3, #3
 8008996:	f003 0303 	and.w	r3, r3, #3
 800899a:	4a90      	ldr	r2, [pc, #576]	; (8008bdc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800899c:	fa22 f303 	lsr.w	r3, r2, r3
 80089a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80089a2:	e111      	b.n	8008bc8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80089a4:	4b8d      	ldr	r3, [pc, #564]	; (8008bdc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80089a6:	61bb      	str	r3, [r7, #24]
      break;
 80089a8:	e10e      	b.n	8008bc8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80089aa:	4b8d      	ldr	r3, [pc, #564]	; (8008be0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80089ac:	61bb      	str	r3, [r7, #24]
      break;
 80089ae:	e10b      	b.n	8008bc8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80089b0:	4b8c      	ldr	r3, [pc, #560]	; (8008be4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80089b2:	61bb      	str	r3, [r7, #24]
      break;
 80089b4:	e108      	b.n	8008bc8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80089b6:	4b88      	ldr	r3, [pc, #544]	; (8008bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ba:	f003 0303 	and.w	r3, r3, #3
 80089be:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80089c0:	4b85      	ldr	r3, [pc, #532]	; (8008bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089c4:	091b      	lsrs	r3, r3, #4
 80089c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089ca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80089cc:	4b82      	ldr	r3, [pc, #520]	; (8008bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d0:	f003 0301 	and.w	r3, r3, #1
 80089d4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80089d6:	4b80      	ldr	r3, [pc, #512]	; (8008bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089da:	08db      	lsrs	r3, r3, #3
 80089dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	fb02 f303 	mul.w	r3, r2, r3
 80089e6:	ee07 3a90 	vmov	s15, r3
 80089ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f000 80e1 	beq.w	8008bbc <HAL_RCC_GetSysClockFreq+0x2b8>
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	2b02      	cmp	r3, #2
 80089fe:	f000 8083 	beq.w	8008b08 <HAL_RCC_GetSysClockFreq+0x204>
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	f200 80a1 	bhi.w	8008b4c <HAL_RCC_GetSysClockFreq+0x248>
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d003      	beq.n	8008a18 <HAL_RCC_GetSysClockFreq+0x114>
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d056      	beq.n	8008ac4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008a16:	e099      	b.n	8008b4c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a18:	4b6f      	ldr	r3, [pc, #444]	; (8008bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f003 0320 	and.w	r3, r3, #32
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d02d      	beq.n	8008a80 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a24:	4b6c      	ldr	r3, [pc, #432]	; (8008bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	08db      	lsrs	r3, r3, #3
 8008a2a:	f003 0303 	and.w	r3, r3, #3
 8008a2e:	4a6b      	ldr	r2, [pc, #428]	; (8008bdc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008a30:	fa22 f303 	lsr.w	r3, r2, r3
 8008a34:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	ee07 3a90 	vmov	s15, r3
 8008a3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	ee07 3a90 	vmov	s15, r3
 8008a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a4e:	4b62      	ldr	r3, [pc, #392]	; (8008bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a56:	ee07 3a90 	vmov	s15, r3
 8008a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a62:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008be8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a7a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008a7e:	e087      	b.n	8008b90 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	ee07 3a90 	vmov	s15, r3
 8008a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a8a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008bec <HAL_RCC_GetSysClockFreq+0x2e8>
 8008a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a92:	4b51      	ldr	r3, [pc, #324]	; (8008bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a9a:	ee07 3a90 	vmov	s15, r3
 8008a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008aa6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008be8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ab2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008abe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008ac2:	e065      	b.n	8008b90 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	ee07 3a90 	vmov	s15, r3
 8008aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ace:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008bf0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ad6:	4b40      	ldr	r3, [pc, #256]	; (8008bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ade:	ee07 3a90 	vmov	s15, r3
 8008ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ae6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008aea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008be8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008af6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b06:	e043      	b.n	8008b90 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	ee07 3a90 	vmov	s15, r3
 8008b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b12:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008bf4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b1a:	4b2f      	ldr	r3, [pc, #188]	; (8008bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b22:	ee07 3a90 	vmov	s15, r3
 8008b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b2e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008be8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b4a:	e021      	b.n	8008b90 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	ee07 3a90 	vmov	s15, r3
 8008b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b56:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008bf0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b5e:	4b1e      	ldr	r3, [pc, #120]	; (8008bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b66:	ee07 3a90 	vmov	s15, r3
 8008b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b72:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008be8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b8e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008b90:	4b11      	ldr	r3, [pc, #68]	; (8008bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b94:	0a5b      	lsrs	r3, r3, #9
 8008b96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	ee07 3a90 	vmov	s15, r3
 8008ba4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008ba8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bb4:	ee17 3a90 	vmov	r3, s15
 8008bb8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008bba:	e005      	b.n	8008bc8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	61bb      	str	r3, [r7, #24]
      break;
 8008bc0:	e002      	b.n	8008bc8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008bc2:	4b07      	ldr	r3, [pc, #28]	; (8008be0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008bc4:	61bb      	str	r3, [r7, #24]
      break;
 8008bc6:	bf00      	nop
  }

  return sysclockfreq;
 8008bc8:	69bb      	ldr	r3, [r7, #24]
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3724      	adds	r7, #36	; 0x24
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr
 8008bd6:	bf00      	nop
 8008bd8:	58024400 	.word	0x58024400
 8008bdc:	03d09000 	.word	0x03d09000
 8008be0:	003d0900 	.word	0x003d0900
 8008be4:	00989680 	.word	0x00989680
 8008be8:	46000000 	.word	0x46000000
 8008bec:	4c742400 	.word	0x4c742400
 8008bf0:	4a742400 	.word	0x4a742400
 8008bf4:	4b189680 	.word	0x4b189680

08008bf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008bfe:	f7ff fe81 	bl	8008904 <HAL_RCC_GetSysClockFreq>
 8008c02:	4602      	mov	r2, r0
 8008c04:	4b10      	ldr	r3, [pc, #64]	; (8008c48 <HAL_RCC_GetHCLKFreq+0x50>)
 8008c06:	699b      	ldr	r3, [r3, #24]
 8008c08:	0a1b      	lsrs	r3, r3, #8
 8008c0a:	f003 030f 	and.w	r3, r3, #15
 8008c0e:	490f      	ldr	r1, [pc, #60]	; (8008c4c <HAL_RCC_GetHCLKFreq+0x54>)
 8008c10:	5ccb      	ldrb	r3, [r1, r3]
 8008c12:	f003 031f 	and.w	r3, r3, #31
 8008c16:	fa22 f303 	lsr.w	r3, r2, r3
 8008c1a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c1c:	4b0a      	ldr	r3, [pc, #40]	; (8008c48 <HAL_RCC_GetHCLKFreq+0x50>)
 8008c1e:	699b      	ldr	r3, [r3, #24]
 8008c20:	f003 030f 	and.w	r3, r3, #15
 8008c24:	4a09      	ldr	r2, [pc, #36]	; (8008c4c <HAL_RCC_GetHCLKFreq+0x54>)
 8008c26:	5cd3      	ldrb	r3, [r2, r3]
 8008c28:	f003 031f 	and.w	r3, r3, #31
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c32:	4a07      	ldr	r2, [pc, #28]	; (8008c50 <HAL_RCC_GetHCLKFreq+0x58>)
 8008c34:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008c36:	4a07      	ldr	r2, [pc, #28]	; (8008c54 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008c3c:	4b04      	ldr	r3, [pc, #16]	; (8008c50 <HAL_RCC_GetHCLKFreq+0x58>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3708      	adds	r7, #8
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	58024400 	.word	0x58024400
 8008c4c:	08010054 	.word	0x08010054
 8008c50:	2000001c 	.word	0x2000001c
 8008c54:	20000018 	.word	0x20000018

08008c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008c5c:	f7ff ffcc 	bl	8008bf8 <HAL_RCC_GetHCLKFreq>
 8008c60:	4602      	mov	r2, r0
 8008c62:	4b06      	ldr	r3, [pc, #24]	; (8008c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c64:	69db      	ldr	r3, [r3, #28]
 8008c66:	091b      	lsrs	r3, r3, #4
 8008c68:	f003 0307 	and.w	r3, r3, #7
 8008c6c:	4904      	ldr	r1, [pc, #16]	; (8008c80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008c6e:	5ccb      	ldrb	r3, [r1, r3]
 8008c70:	f003 031f 	and.w	r3, r3, #31
 8008c74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	58024400 	.word	0x58024400
 8008c80:	08010054 	.word	0x08010054

08008c84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008c88:	f7ff ffb6 	bl	8008bf8 <HAL_RCC_GetHCLKFreq>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	4b06      	ldr	r3, [pc, #24]	; (8008ca8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c90:	69db      	ldr	r3, [r3, #28]
 8008c92:	0a1b      	lsrs	r3, r3, #8
 8008c94:	f003 0307 	and.w	r3, r3, #7
 8008c98:	4904      	ldr	r1, [pc, #16]	; (8008cac <HAL_RCC_GetPCLK2Freq+0x28>)
 8008c9a:	5ccb      	ldrb	r3, [r1, r3]
 8008c9c:	f003 031f 	and.w	r3, r3, #31
 8008ca0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	58024400 	.word	0x58024400
 8008cac:	08010054 	.word	0x08010054

08008cb0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8008cb4:	4b07      	ldr	r3, [pc, #28]	; (8008cd4 <HAL_RCC_NMI_IRQHandler+0x24>)
 8008cb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cc0:	d105      	bne.n	8008cce <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8008cc2:	f000 f809 	bl	8008cd8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8008cc6:	4b03      	ldr	r3, [pc, #12]	; (8008cd4 <HAL_RCC_NMI_IRQHandler+0x24>)
 8008cc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008ccc:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 8008cce:	bf00      	nop
 8008cd0:	bd80      	pop	{r7, pc}
 8008cd2:	bf00      	nop
 8008cd4:	58024400 	.word	0x58024400

08008cd8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8008cdc:	bf00      	nop
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr
	...

08008ce8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008cec:	b0ca      	sub	sp, #296	; 0x128
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d08:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8008d0c:	2500      	movs	r5, #0
 8008d0e:	ea54 0305 	orrs.w	r3, r4, r5
 8008d12:	d049      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d1a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008d1e:	d02f      	beq.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008d20:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008d24:	d828      	bhi.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008d26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d2a:	d01a      	beq.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008d2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d30:	d822      	bhi.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d003      	beq.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008d36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d3a:	d007      	beq.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008d3c:	e01c      	b.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d3e:	4bb8      	ldr	r3, [pc, #736]	; (8009020 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d42:	4ab7      	ldr	r2, [pc, #732]	; (8009020 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d4a:	e01a      	b.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d50:	3308      	adds	r3, #8
 8008d52:	2102      	movs	r1, #2
 8008d54:	4618      	mov	r0, r3
 8008d56:	f002 fbb7 	bl	800b4c8 <RCCEx_PLL2_Config>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d60:	e00f      	b.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d66:	3328      	adds	r3, #40	; 0x28
 8008d68:	2102      	movs	r1, #2
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f002 fc5e 	bl	800b62c <RCCEx_PLL3_Config>
 8008d70:	4603      	mov	r3, r0
 8008d72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d76:	e004      	b.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008d7e:	e000      	b.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008d80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d10a      	bne.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008d8a:	4ba5      	ldr	r3, [pc, #660]	; (8009020 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d8e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d98:	4aa1      	ldr	r2, [pc, #644]	; (8009020 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d9a:	430b      	orrs	r3, r1
 8008d9c:	6513      	str	r3, [r2, #80]	; 0x50
 8008d9e:	e003      	b.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008da0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008da4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8008db4:	f04f 0900 	mov.w	r9, #0
 8008db8:	ea58 0309 	orrs.w	r3, r8, r9
 8008dbc:	d047      	beq.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dc4:	2b04      	cmp	r3, #4
 8008dc6:	d82a      	bhi.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008dc8:	a201      	add	r2, pc, #4	; (adr r2, 8008dd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dce:	bf00      	nop
 8008dd0:	08008de5 	.word	0x08008de5
 8008dd4:	08008df3 	.word	0x08008df3
 8008dd8:	08008e09 	.word	0x08008e09
 8008ddc:	08008e27 	.word	0x08008e27
 8008de0:	08008e27 	.word	0x08008e27
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008de4:	4b8e      	ldr	r3, [pc, #568]	; (8009020 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de8:	4a8d      	ldr	r2, [pc, #564]	; (8009020 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008dea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008df0:	e01a      	b.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008df6:	3308      	adds	r3, #8
 8008df8:	2100      	movs	r1, #0
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f002 fb64 	bl	800b4c8 <RCCEx_PLL2_Config>
 8008e00:	4603      	mov	r3, r0
 8008e02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e06:	e00f      	b.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e0c:	3328      	adds	r3, #40	; 0x28
 8008e0e:	2100      	movs	r1, #0
 8008e10:	4618      	mov	r0, r3
 8008e12:	f002 fc0b 	bl	800b62c <RCCEx_PLL3_Config>
 8008e16:	4603      	mov	r3, r0
 8008e18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e1c:	e004      	b.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008e24:	e000      	b.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008e26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d10a      	bne.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008e30:	4b7b      	ldr	r3, [pc, #492]	; (8009020 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e34:	f023 0107 	bic.w	r1, r3, #7
 8008e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e3e:	4a78      	ldr	r2, [pc, #480]	; (8009020 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e40:	430b      	orrs	r3, r1
 8008e42:	6513      	str	r3, [r2, #80]	; 0x50
 8008e44:	e003      	b.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e56:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8008e5a:	f04f 0b00 	mov.w	fp, #0
 8008e5e:	ea5a 030b 	orrs.w	r3, sl, fp
 8008e62:	d04c      	beq.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e6e:	d030      	beq.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008e70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e74:	d829      	bhi.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008e76:	2bc0      	cmp	r3, #192	; 0xc0
 8008e78:	d02d      	beq.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008e7a:	2bc0      	cmp	r3, #192	; 0xc0
 8008e7c:	d825      	bhi.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008e7e:	2b80      	cmp	r3, #128	; 0x80
 8008e80:	d018      	beq.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008e82:	2b80      	cmp	r3, #128	; 0x80
 8008e84:	d821      	bhi.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d002      	beq.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008e8a:	2b40      	cmp	r3, #64	; 0x40
 8008e8c:	d007      	beq.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008e8e:	e01c      	b.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e90:	4b63      	ldr	r3, [pc, #396]	; (8009020 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e94:	4a62      	ldr	r2, [pc, #392]	; (8009020 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008e9c:	e01c      	b.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ea2:	3308      	adds	r3, #8
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f002 fb0e 	bl	800b4c8 <RCCEx_PLL2_Config>
 8008eac:	4603      	mov	r3, r0
 8008eae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008eb2:	e011      	b.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eb8:	3328      	adds	r3, #40	; 0x28
 8008eba:	2100      	movs	r1, #0
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f002 fbb5 	bl	800b62c <RCCEx_PLL3_Config>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008ec8:	e006      	b.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008ed0:	e002      	b.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008ed2:	bf00      	nop
 8008ed4:	e000      	b.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008ed6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ed8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d10a      	bne.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008ee0:	4b4f      	ldr	r3, [pc, #316]	; (8009020 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ee4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8008ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008eee:	4a4c      	ldr	r2, [pc, #304]	; (8009020 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ef0:	430b      	orrs	r3, r1
 8008ef2:	6513      	str	r3, [r2, #80]	; 0x50
 8008ef4:	e003      	b.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ef6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008efa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f06:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8008f0a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008f0e:	2300      	movs	r3, #0
 8008f10:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008f14:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8008f18:	460b      	mov	r3, r1
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	d053      	beq.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008f26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f2a:	d035      	beq.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008f2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f30:	d82e      	bhi.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008f32:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008f36:	d031      	beq.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008f38:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008f3c:	d828      	bhi.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008f3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f42:	d01a      	beq.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008f44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f48:	d822      	bhi.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d003      	beq.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008f4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f52:	d007      	beq.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008f54:	e01c      	b.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f56:	4b32      	ldr	r3, [pc, #200]	; (8009020 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f5a:	4a31      	ldr	r2, [pc, #196]	; (8009020 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f62:	e01c      	b.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f68:	3308      	adds	r3, #8
 8008f6a:	2100      	movs	r1, #0
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f002 faab 	bl	800b4c8 <RCCEx_PLL2_Config>
 8008f72:	4603      	mov	r3, r0
 8008f74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008f78:	e011      	b.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f7e:	3328      	adds	r3, #40	; 0x28
 8008f80:	2100      	movs	r1, #0
 8008f82:	4618      	mov	r0, r3
 8008f84:	f002 fb52 	bl	800b62c <RCCEx_PLL3_Config>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f8e:	e006      	b.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008f90:	2301      	movs	r3, #1
 8008f92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008f96:	e002      	b.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008f98:	bf00      	nop
 8008f9a:	e000      	b.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008f9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d10b      	bne.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008fa6:	4b1e      	ldr	r3, [pc, #120]	; (8009020 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008faa:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8008fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fb2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008fb6:	4a1a      	ldr	r2, [pc, #104]	; (8009020 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fb8:	430b      	orrs	r3, r1
 8008fba:	6593      	str	r3, [r2, #88]	; 0x58
 8008fbc:	e003      	b.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fc2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fce:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008fd2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008fdc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	d056      	beq.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008fee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ff2:	d038      	beq.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008ff4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ff8:	d831      	bhi.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008ffa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008ffe:	d034      	beq.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009000:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009004:	d82b      	bhi.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009006:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800900a:	d01d      	beq.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800900c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009010:	d825      	bhi.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009012:	2b00      	cmp	r3, #0
 8009014:	d006      	beq.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009016:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800901a:	d00a      	beq.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800901c:	e01f      	b.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800901e:	bf00      	nop
 8009020:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009024:	4ba2      	ldr	r3, [pc, #648]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009028:	4aa1      	ldr	r2, [pc, #644]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800902a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800902e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009030:	e01c      	b.n	800906c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009032:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009036:	3308      	adds	r3, #8
 8009038:	2100      	movs	r1, #0
 800903a:	4618      	mov	r0, r3
 800903c:	f002 fa44 	bl	800b4c8 <RCCEx_PLL2_Config>
 8009040:	4603      	mov	r3, r0
 8009042:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009046:	e011      	b.n	800906c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800904c:	3328      	adds	r3, #40	; 0x28
 800904e:	2100      	movs	r1, #0
 8009050:	4618      	mov	r0, r3
 8009052:	f002 faeb 	bl	800b62c <RCCEx_PLL3_Config>
 8009056:	4603      	mov	r3, r0
 8009058:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800905c:	e006      	b.n	800906c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800905e:	2301      	movs	r3, #1
 8009060:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009064:	e002      	b.n	800906c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009066:	bf00      	nop
 8009068:	e000      	b.n	800906c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800906a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800906c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009070:	2b00      	cmp	r3, #0
 8009072:	d10b      	bne.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009074:	4b8e      	ldr	r3, [pc, #568]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009078:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800907c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009080:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009084:	4a8a      	ldr	r2, [pc, #552]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009086:	430b      	orrs	r3, r1
 8009088:	6593      	str	r3, [r2, #88]	; 0x58
 800908a:	e003      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800908c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009090:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009094:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80090a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80090a4:	2300      	movs	r3, #0
 80090a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80090aa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80090ae:	460b      	mov	r3, r1
 80090b0:	4313      	orrs	r3, r2
 80090b2:	d03a      	beq.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80090b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090ba:	2b30      	cmp	r3, #48	; 0x30
 80090bc:	d01f      	beq.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x416>
 80090be:	2b30      	cmp	r3, #48	; 0x30
 80090c0:	d819      	bhi.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80090c2:	2b20      	cmp	r3, #32
 80090c4:	d00c      	beq.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80090c6:	2b20      	cmp	r3, #32
 80090c8:	d815      	bhi.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d019      	beq.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80090ce:	2b10      	cmp	r3, #16
 80090d0:	d111      	bne.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090d2:	4b77      	ldr	r3, [pc, #476]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80090d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d6:	4a76      	ldr	r2, [pc, #472]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80090d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80090de:	e011      	b.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80090e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090e4:	3308      	adds	r3, #8
 80090e6:	2102      	movs	r1, #2
 80090e8:	4618      	mov	r0, r3
 80090ea:	f002 f9ed 	bl	800b4c8 <RCCEx_PLL2_Config>
 80090ee:	4603      	mov	r3, r0
 80090f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80090f4:	e006      	b.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80090f6:	2301      	movs	r3, #1
 80090f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80090fc:	e002      	b.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80090fe:	bf00      	nop
 8009100:	e000      	b.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009102:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009104:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009108:	2b00      	cmp	r3, #0
 800910a:	d10a      	bne.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800910c:	4b68      	ldr	r3, [pc, #416]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800910e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009110:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009114:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800911a:	4a65      	ldr	r2, [pc, #404]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800911c:	430b      	orrs	r3, r1
 800911e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009120:	e003      	b.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009122:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009126:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800912a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800912e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009132:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009136:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800913a:	2300      	movs	r3, #0
 800913c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009140:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009144:	460b      	mov	r3, r1
 8009146:	4313      	orrs	r3, r2
 8009148:	d051      	beq.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800914a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800914e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009150:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009154:	d035      	beq.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009156:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800915a:	d82e      	bhi.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800915c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009160:	d031      	beq.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009162:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009166:	d828      	bhi.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009168:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800916c:	d01a      	beq.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800916e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009172:	d822      	bhi.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009174:	2b00      	cmp	r3, #0
 8009176:	d003      	beq.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800917c:	d007      	beq.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800917e:	e01c      	b.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009180:	4b4b      	ldr	r3, [pc, #300]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009184:	4a4a      	ldr	r2, [pc, #296]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800918a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800918c:	e01c      	b.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800918e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009192:	3308      	adds	r3, #8
 8009194:	2100      	movs	r1, #0
 8009196:	4618      	mov	r0, r3
 8009198:	f002 f996 	bl	800b4c8 <RCCEx_PLL2_Config>
 800919c:	4603      	mov	r3, r0
 800919e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80091a2:	e011      	b.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80091a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091a8:	3328      	adds	r3, #40	; 0x28
 80091aa:	2100      	movs	r1, #0
 80091ac:	4618      	mov	r0, r3
 80091ae:	f002 fa3d 	bl	800b62c <RCCEx_PLL3_Config>
 80091b2:	4603      	mov	r3, r0
 80091b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80091b8:	e006      	b.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091ba:	2301      	movs	r3, #1
 80091bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80091c0:	e002      	b.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80091c2:	bf00      	nop
 80091c4:	e000      	b.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80091c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d10a      	bne.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80091d0:	4b37      	ldr	r3, [pc, #220]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091d4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80091d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091de:	4a34      	ldr	r2, [pc, #208]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091e0:	430b      	orrs	r3, r1
 80091e2:	6513      	str	r3, [r2, #80]	; 0x50
 80091e4:	e003      	b.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80091ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80091fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80091fe:	2300      	movs	r3, #0
 8009200:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009204:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009208:	460b      	mov	r3, r1
 800920a:	4313      	orrs	r3, r2
 800920c:	d056      	beq.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800920e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009212:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009214:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009218:	d033      	beq.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800921a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800921e:	d82c      	bhi.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009220:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009224:	d02f      	beq.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009226:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800922a:	d826      	bhi.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800922c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009230:	d02b      	beq.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009232:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009236:	d820      	bhi.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009238:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800923c:	d012      	beq.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800923e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009242:	d81a      	bhi.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009244:	2b00      	cmp	r3, #0
 8009246:	d022      	beq.n	800928e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800924c:	d115      	bne.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800924e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009252:	3308      	adds	r3, #8
 8009254:	2101      	movs	r1, #1
 8009256:	4618      	mov	r0, r3
 8009258:	f002 f936 	bl	800b4c8 <RCCEx_PLL2_Config>
 800925c:	4603      	mov	r3, r0
 800925e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009262:	e015      	b.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009264:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009268:	3328      	adds	r3, #40	; 0x28
 800926a:	2101      	movs	r1, #1
 800926c:	4618      	mov	r0, r3
 800926e:	f002 f9dd 	bl	800b62c <RCCEx_PLL3_Config>
 8009272:	4603      	mov	r3, r0
 8009274:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009278:	e00a      	b.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009280:	e006      	b.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009282:	bf00      	nop
 8009284:	e004      	b.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009286:	bf00      	nop
 8009288:	e002      	b.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800928a:	bf00      	nop
 800928c:	e000      	b.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800928e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009290:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009294:	2b00      	cmp	r3, #0
 8009296:	d10d      	bne.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009298:	4b05      	ldr	r3, [pc, #20]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800929a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800929c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80092a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092a6:	4a02      	ldr	r2, [pc, #8]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092a8:	430b      	orrs	r3, r1
 80092aa:	6513      	str	r3, [r2, #80]	; 0x50
 80092ac:	e006      	b.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80092ae:	bf00      	nop
 80092b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80092bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80092c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80092cc:	2300      	movs	r3, #0
 80092ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80092d2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80092d6:	460b      	mov	r3, r1
 80092d8:	4313      	orrs	r3, r2
 80092da:	d055      	beq.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80092dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80092e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092e8:	d033      	beq.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80092ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092ee:	d82c      	bhi.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80092f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092f4:	d02f      	beq.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80092f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092fa:	d826      	bhi.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80092fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009300:	d02b      	beq.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009302:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009306:	d820      	bhi.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009308:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800930c:	d012      	beq.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800930e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009312:	d81a      	bhi.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009314:	2b00      	cmp	r3, #0
 8009316:	d022      	beq.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009318:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800931c:	d115      	bne.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800931e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009322:	3308      	adds	r3, #8
 8009324:	2101      	movs	r1, #1
 8009326:	4618      	mov	r0, r3
 8009328:	f002 f8ce 	bl	800b4c8 <RCCEx_PLL2_Config>
 800932c:	4603      	mov	r3, r0
 800932e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009332:	e015      	b.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009334:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009338:	3328      	adds	r3, #40	; 0x28
 800933a:	2101      	movs	r1, #1
 800933c:	4618      	mov	r0, r3
 800933e:	f002 f975 	bl	800b62c <RCCEx_PLL3_Config>
 8009342:	4603      	mov	r3, r0
 8009344:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009348:	e00a      	b.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800934a:	2301      	movs	r3, #1
 800934c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009350:	e006      	b.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009352:	bf00      	nop
 8009354:	e004      	b.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009356:	bf00      	nop
 8009358:	e002      	b.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800935a:	bf00      	nop
 800935c:	e000      	b.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800935e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009360:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009364:	2b00      	cmp	r3, #0
 8009366:	d10b      	bne.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009368:	4ba3      	ldr	r3, [pc, #652]	; (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800936a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800936c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009374:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009378:	4a9f      	ldr	r2, [pc, #636]	; (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800937a:	430b      	orrs	r3, r1
 800937c:	6593      	str	r3, [r2, #88]	; 0x58
 800937e:	e003      	b.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009380:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009384:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009388:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800938c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009390:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009394:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009398:	2300      	movs	r3, #0
 800939a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800939e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80093a2:	460b      	mov	r3, r1
 80093a4:	4313      	orrs	r3, r2
 80093a6:	d037      	beq.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80093a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093b2:	d00e      	beq.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80093b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093b8:	d816      	bhi.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d018      	beq.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80093be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093c2:	d111      	bne.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093c4:	4b8c      	ldr	r3, [pc, #560]	; (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c8:	4a8b      	ldr	r2, [pc, #556]	; (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80093d0:	e00f      	b.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80093d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093d6:	3308      	adds	r3, #8
 80093d8:	2101      	movs	r1, #1
 80093da:	4618      	mov	r0, r3
 80093dc:	f002 f874 	bl	800b4c8 <RCCEx_PLL2_Config>
 80093e0:	4603      	mov	r3, r0
 80093e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80093e6:	e004      	b.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093e8:	2301      	movs	r3, #1
 80093ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80093ee:	e000      	b.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80093f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d10a      	bne.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80093fa:	4b7f      	ldr	r3, [pc, #508]	; (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093fe:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009408:	4a7b      	ldr	r2, [pc, #492]	; (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800940a:	430b      	orrs	r3, r1
 800940c:	6513      	str	r3, [r2, #80]	; 0x50
 800940e:	e003      	b.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009410:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009414:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009418:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800941c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009420:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009424:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009428:	2300      	movs	r3, #0
 800942a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800942e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009432:	460b      	mov	r3, r1
 8009434:	4313      	orrs	r3, r2
 8009436:	d039      	beq.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009438:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800943c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800943e:	2b03      	cmp	r3, #3
 8009440:	d81c      	bhi.n	800947c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009442:	a201      	add	r2, pc, #4	; (adr r2, 8009448 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009448:	08009485 	.word	0x08009485
 800944c:	08009459 	.word	0x08009459
 8009450:	08009467 	.word	0x08009467
 8009454:	08009485 	.word	0x08009485
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009458:	4b67      	ldr	r3, [pc, #412]	; (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800945a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800945c:	4a66      	ldr	r2, [pc, #408]	; (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800945e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009462:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009464:	e00f      	b.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800946a:	3308      	adds	r3, #8
 800946c:	2102      	movs	r1, #2
 800946e:	4618      	mov	r0, r3
 8009470:	f002 f82a 	bl	800b4c8 <RCCEx_PLL2_Config>
 8009474:	4603      	mov	r3, r0
 8009476:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800947a:	e004      	b.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800947c:	2301      	movs	r3, #1
 800947e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009482:	e000      	b.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009484:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009486:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800948a:	2b00      	cmp	r3, #0
 800948c:	d10a      	bne.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800948e:	4b5a      	ldr	r3, [pc, #360]	; (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009492:	f023 0103 	bic.w	r1, r3, #3
 8009496:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800949a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800949c:	4a56      	ldr	r2, [pc, #344]	; (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800949e:	430b      	orrs	r3, r1
 80094a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80094a2:	e003      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80094ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80094b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80094bc:	2300      	movs	r3, #0
 80094be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80094c2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80094c6:	460b      	mov	r3, r1
 80094c8:	4313      	orrs	r3, r2
 80094ca:	f000 809f 	beq.w	800960c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80094ce:	4b4b      	ldr	r3, [pc, #300]	; (80095fc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a4a      	ldr	r2, [pc, #296]	; (80095fc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80094d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80094da:	f7f9 fc91 	bl	8002e00 <HAL_GetTick>
 80094de:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80094e2:	e00b      	b.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80094e4:	f7f9 fc8c 	bl	8002e00 <HAL_GetTick>
 80094e8:	4602      	mov	r2, r0
 80094ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80094ee:	1ad3      	subs	r3, r2, r3
 80094f0:	2b64      	cmp	r3, #100	; 0x64
 80094f2:	d903      	bls.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80094f4:	2303      	movs	r3, #3
 80094f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80094fa:	e005      	b.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80094fc:	4b3f      	ldr	r3, [pc, #252]	; (80095fc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009504:	2b00      	cmp	r3, #0
 8009506:	d0ed      	beq.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009508:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800950c:	2b00      	cmp	r3, #0
 800950e:	d179      	bne.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009510:	4b39      	ldr	r3, [pc, #228]	; (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009512:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009514:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009518:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800951c:	4053      	eors	r3, r2
 800951e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009522:	2b00      	cmp	r3, #0
 8009524:	d015      	beq.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009526:	4b34      	ldr	r3, [pc, #208]	; (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800952a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800952e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009532:	4b31      	ldr	r3, [pc, #196]	; (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009536:	4a30      	ldr	r2, [pc, #192]	; (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800953c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800953e:	4b2e      	ldr	r3, [pc, #184]	; (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009542:	4a2d      	ldr	r2, [pc, #180]	; (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009548:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800954a:	4a2b      	ldr	r2, [pc, #172]	; (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800954c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009550:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009552:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009556:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800955a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800955e:	d118      	bne.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009560:	f7f9 fc4e 	bl	8002e00 <HAL_GetTick>
 8009564:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009568:	e00d      	b.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800956a:	f7f9 fc49 	bl	8002e00 <HAL_GetTick>
 800956e:	4602      	mov	r2, r0
 8009570:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009574:	1ad2      	subs	r2, r2, r3
 8009576:	f241 3388 	movw	r3, #5000	; 0x1388
 800957a:	429a      	cmp	r2, r3
 800957c:	d903      	bls.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800957e:	2303      	movs	r3, #3
 8009580:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8009584:	e005      	b.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009586:	4b1c      	ldr	r3, [pc, #112]	; (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800958a:	f003 0302 	and.w	r3, r3, #2
 800958e:	2b00      	cmp	r3, #0
 8009590:	d0eb      	beq.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009592:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009596:	2b00      	cmp	r3, #0
 8009598:	d129      	bne.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800959a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800959e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80095a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80095aa:	d10e      	bne.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80095ac:	4b12      	ldr	r3, [pc, #72]	; (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095ae:	691b      	ldr	r3, [r3, #16]
 80095b0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80095b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80095bc:	091a      	lsrs	r2, r3, #4
 80095be:	4b10      	ldr	r3, [pc, #64]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80095c0:	4013      	ands	r3, r2
 80095c2:	4a0d      	ldr	r2, [pc, #52]	; (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095c4:	430b      	orrs	r3, r1
 80095c6:	6113      	str	r3, [r2, #16]
 80095c8:	e005      	b.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80095ca:	4b0b      	ldr	r3, [pc, #44]	; (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095cc:	691b      	ldr	r3, [r3, #16]
 80095ce:	4a0a      	ldr	r2, [pc, #40]	; (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095d0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80095d4:	6113      	str	r3, [r2, #16]
 80095d6:	4b08      	ldr	r3, [pc, #32]	; (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095d8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80095da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80095e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095e6:	4a04      	ldr	r2, [pc, #16]	; (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095e8:	430b      	orrs	r3, r1
 80095ea:	6713      	str	r3, [r2, #112]	; 0x70
 80095ec:	e00e      	b.n	800960c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80095ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80095f6:	e009      	b.n	800960c <HAL_RCCEx_PeriphCLKConfig+0x924>
 80095f8:	58024400 	.word	0x58024400
 80095fc:	58024800 	.word	0x58024800
 8009600:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009604:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009608:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800960c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009614:	f002 0301 	and.w	r3, r2, #1
 8009618:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800961c:	2300      	movs	r3, #0
 800961e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009622:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009626:	460b      	mov	r3, r1
 8009628:	4313      	orrs	r3, r2
 800962a:	f000 8089 	beq.w	8009740 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800962e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009632:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009634:	2b28      	cmp	r3, #40	; 0x28
 8009636:	d86b      	bhi.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009638:	a201      	add	r2, pc, #4	; (adr r2, 8009640 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800963a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800963e:	bf00      	nop
 8009640:	08009719 	.word	0x08009719
 8009644:	08009711 	.word	0x08009711
 8009648:	08009711 	.word	0x08009711
 800964c:	08009711 	.word	0x08009711
 8009650:	08009711 	.word	0x08009711
 8009654:	08009711 	.word	0x08009711
 8009658:	08009711 	.word	0x08009711
 800965c:	08009711 	.word	0x08009711
 8009660:	080096e5 	.word	0x080096e5
 8009664:	08009711 	.word	0x08009711
 8009668:	08009711 	.word	0x08009711
 800966c:	08009711 	.word	0x08009711
 8009670:	08009711 	.word	0x08009711
 8009674:	08009711 	.word	0x08009711
 8009678:	08009711 	.word	0x08009711
 800967c:	08009711 	.word	0x08009711
 8009680:	080096fb 	.word	0x080096fb
 8009684:	08009711 	.word	0x08009711
 8009688:	08009711 	.word	0x08009711
 800968c:	08009711 	.word	0x08009711
 8009690:	08009711 	.word	0x08009711
 8009694:	08009711 	.word	0x08009711
 8009698:	08009711 	.word	0x08009711
 800969c:	08009711 	.word	0x08009711
 80096a0:	08009719 	.word	0x08009719
 80096a4:	08009711 	.word	0x08009711
 80096a8:	08009711 	.word	0x08009711
 80096ac:	08009711 	.word	0x08009711
 80096b0:	08009711 	.word	0x08009711
 80096b4:	08009711 	.word	0x08009711
 80096b8:	08009711 	.word	0x08009711
 80096bc:	08009711 	.word	0x08009711
 80096c0:	08009719 	.word	0x08009719
 80096c4:	08009711 	.word	0x08009711
 80096c8:	08009711 	.word	0x08009711
 80096cc:	08009711 	.word	0x08009711
 80096d0:	08009711 	.word	0x08009711
 80096d4:	08009711 	.word	0x08009711
 80096d8:	08009711 	.word	0x08009711
 80096dc:	08009711 	.word	0x08009711
 80096e0:	08009719 	.word	0x08009719
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80096e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096e8:	3308      	adds	r3, #8
 80096ea:	2101      	movs	r1, #1
 80096ec:	4618      	mov	r0, r3
 80096ee:	f001 feeb 	bl	800b4c8 <RCCEx_PLL2_Config>
 80096f2:	4603      	mov	r3, r0
 80096f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80096f8:	e00f      	b.n	800971a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80096fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096fe:	3328      	adds	r3, #40	; 0x28
 8009700:	2101      	movs	r1, #1
 8009702:	4618      	mov	r0, r3
 8009704:	f001 ff92 	bl	800b62c <RCCEx_PLL3_Config>
 8009708:	4603      	mov	r3, r0
 800970a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800970e:	e004      	b.n	800971a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009710:	2301      	movs	r3, #1
 8009712:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009716:	e000      	b.n	800971a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009718:	bf00      	nop
    }

    if (ret == HAL_OK)
 800971a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800971e:	2b00      	cmp	r3, #0
 8009720:	d10a      	bne.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009722:	4bbf      	ldr	r3, [pc, #764]	; (8009a20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009726:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800972a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800972e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009730:	4abb      	ldr	r2, [pc, #748]	; (8009a20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009732:	430b      	orrs	r3, r1
 8009734:	6553      	str	r3, [r2, #84]	; 0x54
 8009736:	e003      	b.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009738:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800973c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009748:	f002 0302 	and.w	r3, r2, #2
 800974c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009750:	2300      	movs	r3, #0
 8009752:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009756:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800975a:	460b      	mov	r3, r1
 800975c:	4313      	orrs	r3, r2
 800975e:	d041      	beq.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009760:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009764:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009766:	2b05      	cmp	r3, #5
 8009768:	d824      	bhi.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800976a:	a201      	add	r2, pc, #4	; (adr r2, 8009770 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800976c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009770:	080097bd 	.word	0x080097bd
 8009774:	08009789 	.word	0x08009789
 8009778:	0800979f 	.word	0x0800979f
 800977c:	080097bd 	.word	0x080097bd
 8009780:	080097bd 	.word	0x080097bd
 8009784:	080097bd 	.word	0x080097bd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009788:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800978c:	3308      	adds	r3, #8
 800978e:	2101      	movs	r1, #1
 8009790:	4618      	mov	r0, r3
 8009792:	f001 fe99 	bl	800b4c8 <RCCEx_PLL2_Config>
 8009796:	4603      	mov	r3, r0
 8009798:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800979c:	e00f      	b.n	80097be <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800979e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097a2:	3328      	adds	r3, #40	; 0x28
 80097a4:	2101      	movs	r1, #1
 80097a6:	4618      	mov	r0, r3
 80097a8:	f001 ff40 	bl	800b62c <RCCEx_PLL3_Config>
 80097ac:	4603      	mov	r3, r0
 80097ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80097b2:	e004      	b.n	80097be <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097b4:	2301      	movs	r3, #1
 80097b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80097ba:	e000      	b.n	80097be <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80097bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d10a      	bne.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80097c6:	4b96      	ldr	r3, [pc, #600]	; (8009a20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80097c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097ca:	f023 0107 	bic.w	r1, r3, #7
 80097ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097d4:	4a92      	ldr	r2, [pc, #584]	; (8009a20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80097d6:	430b      	orrs	r3, r1
 80097d8:	6553      	str	r3, [r2, #84]	; 0x54
 80097da:	e003      	b.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80097e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ec:	f002 0304 	and.w	r3, r2, #4
 80097f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80097f4:	2300      	movs	r3, #0
 80097f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80097fa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80097fe:	460b      	mov	r3, r1
 8009800:	4313      	orrs	r3, r2
 8009802:	d044      	beq.n	800988e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009804:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009808:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800980c:	2b05      	cmp	r3, #5
 800980e:	d825      	bhi.n	800985c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009810:	a201      	add	r2, pc, #4	; (adr r2, 8009818 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009816:	bf00      	nop
 8009818:	08009865 	.word	0x08009865
 800981c:	08009831 	.word	0x08009831
 8009820:	08009847 	.word	0x08009847
 8009824:	08009865 	.word	0x08009865
 8009828:	08009865 	.word	0x08009865
 800982c:	08009865 	.word	0x08009865
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009834:	3308      	adds	r3, #8
 8009836:	2101      	movs	r1, #1
 8009838:	4618      	mov	r0, r3
 800983a:	f001 fe45 	bl	800b4c8 <RCCEx_PLL2_Config>
 800983e:	4603      	mov	r3, r0
 8009840:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009844:	e00f      	b.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800984a:	3328      	adds	r3, #40	; 0x28
 800984c:	2101      	movs	r1, #1
 800984e:	4618      	mov	r0, r3
 8009850:	f001 feec 	bl	800b62c <RCCEx_PLL3_Config>
 8009854:	4603      	mov	r3, r0
 8009856:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800985a:	e004      	b.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800985c:	2301      	movs	r3, #1
 800985e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009862:	e000      	b.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009864:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009866:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800986a:	2b00      	cmp	r3, #0
 800986c:	d10b      	bne.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800986e:	4b6c      	ldr	r3, [pc, #432]	; (8009a20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009872:	f023 0107 	bic.w	r1, r3, #7
 8009876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800987a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800987e:	4a68      	ldr	r2, [pc, #416]	; (8009a20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009880:	430b      	orrs	r3, r1
 8009882:	6593      	str	r3, [r2, #88]	; 0x58
 8009884:	e003      	b.n	800988e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009886:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800988a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800988e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009896:	f002 0320 	and.w	r3, r2, #32
 800989a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800989e:	2300      	movs	r3, #0
 80098a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80098a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80098a8:	460b      	mov	r3, r1
 80098aa:	4313      	orrs	r3, r2
 80098ac:	d055      	beq.n	800995a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80098ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80098ba:	d033      	beq.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80098bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80098c0:	d82c      	bhi.n	800991c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80098c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098c6:	d02f      	beq.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80098c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098cc:	d826      	bhi.n	800991c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80098ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80098d2:	d02b      	beq.n	800992c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80098d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80098d8:	d820      	bhi.n	800991c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80098da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098de:	d012      	beq.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80098e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098e4:	d81a      	bhi.n	800991c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d022      	beq.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80098ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098ee:	d115      	bne.n	800991c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098f4:	3308      	adds	r3, #8
 80098f6:	2100      	movs	r1, #0
 80098f8:	4618      	mov	r0, r3
 80098fa:	f001 fde5 	bl	800b4c8 <RCCEx_PLL2_Config>
 80098fe:	4603      	mov	r3, r0
 8009900:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009904:	e015      	b.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800990a:	3328      	adds	r3, #40	; 0x28
 800990c:	2102      	movs	r1, #2
 800990e:	4618      	mov	r0, r3
 8009910:	f001 fe8c 	bl	800b62c <RCCEx_PLL3_Config>
 8009914:	4603      	mov	r3, r0
 8009916:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800991a:	e00a      	b.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800991c:	2301      	movs	r3, #1
 800991e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009922:	e006      	b.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009924:	bf00      	nop
 8009926:	e004      	b.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009928:	bf00      	nop
 800992a:	e002      	b.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800992c:	bf00      	nop
 800992e:	e000      	b.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009930:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009932:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009936:	2b00      	cmp	r3, #0
 8009938:	d10b      	bne.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800993a:	4b39      	ldr	r3, [pc, #228]	; (8009a20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800993c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800993e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800994a:	4a35      	ldr	r2, [pc, #212]	; (8009a20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800994c:	430b      	orrs	r3, r1
 800994e:	6553      	str	r3, [r2, #84]	; 0x54
 8009950:	e003      	b.n	800995a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009952:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009956:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800995a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800995e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009962:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8009966:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800996a:	2300      	movs	r3, #0
 800996c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009970:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009974:	460b      	mov	r3, r1
 8009976:	4313      	orrs	r3, r2
 8009978:	d058      	beq.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800997a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800997e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009982:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009986:	d033      	beq.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009988:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800998c:	d82c      	bhi.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800998e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009992:	d02f      	beq.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009998:	d826      	bhi.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800999a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800999e:	d02b      	beq.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80099a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80099a4:	d820      	bhi.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80099a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099aa:	d012      	beq.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80099ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099b0:	d81a      	bhi.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d022      	beq.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80099b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099ba:	d115      	bne.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099c0:	3308      	adds	r3, #8
 80099c2:	2100      	movs	r1, #0
 80099c4:	4618      	mov	r0, r3
 80099c6:	f001 fd7f 	bl	800b4c8 <RCCEx_PLL2_Config>
 80099ca:	4603      	mov	r3, r0
 80099cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80099d0:	e015      	b.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80099d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099d6:	3328      	adds	r3, #40	; 0x28
 80099d8:	2102      	movs	r1, #2
 80099da:	4618      	mov	r0, r3
 80099dc:	f001 fe26 	bl	800b62c <RCCEx_PLL3_Config>
 80099e0:	4603      	mov	r3, r0
 80099e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80099e6:	e00a      	b.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099e8:	2301      	movs	r3, #1
 80099ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80099ee:	e006      	b.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80099f0:	bf00      	nop
 80099f2:	e004      	b.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80099f4:	bf00      	nop
 80099f6:	e002      	b.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80099f8:	bf00      	nop
 80099fa:	e000      	b.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80099fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d10e      	bne.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009a06:	4b06      	ldr	r3, [pc, #24]	; (8009a20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a0a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8009a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009a16:	4a02      	ldr	r2, [pc, #8]	; (8009a20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a18:	430b      	orrs	r3, r1
 8009a1a:	6593      	str	r3, [r2, #88]	; 0x58
 8009a1c:	e006      	b.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009a1e:	bf00      	nop
 8009a20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a34:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8009a38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009a42:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8009a46:	460b      	mov	r3, r1
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	d055      	beq.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009a54:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009a58:	d033      	beq.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009a5a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009a5e:	d82c      	bhi.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a64:	d02f      	beq.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009a66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a6a:	d826      	bhi.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009a6c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009a70:	d02b      	beq.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009a72:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009a76:	d820      	bhi.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009a78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a7c:	d012      	beq.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009a7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a82:	d81a      	bhi.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d022      	beq.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009a88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a8c:	d115      	bne.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a92:	3308      	adds	r3, #8
 8009a94:	2100      	movs	r1, #0
 8009a96:	4618      	mov	r0, r3
 8009a98:	f001 fd16 	bl	800b4c8 <RCCEx_PLL2_Config>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009aa2:	e015      	b.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aa8:	3328      	adds	r3, #40	; 0x28
 8009aaa:	2102      	movs	r1, #2
 8009aac:	4618      	mov	r0, r3
 8009aae:	f001 fdbd 	bl	800b62c <RCCEx_PLL3_Config>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009ab8:	e00a      	b.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009aba:	2301      	movs	r3, #1
 8009abc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009ac0:	e006      	b.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009ac2:	bf00      	nop
 8009ac4:	e004      	b.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009ac6:	bf00      	nop
 8009ac8:	e002      	b.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009aca:	bf00      	nop
 8009acc:	e000      	b.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009ace:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ad0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d10b      	bne.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009ad8:	4ba1      	ldr	r3, [pc, #644]	; (8009d60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009adc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8009ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ae4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009ae8:	4a9d      	ldr	r2, [pc, #628]	; (8009d60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009aea:	430b      	orrs	r3, r1
 8009aec:	6593      	str	r3, [r2, #88]	; 0x58
 8009aee:	e003      	b.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009af0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009af4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b00:	f002 0308 	and.w	r3, r2, #8
 8009b04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009b08:	2300      	movs	r3, #0
 8009b0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009b0e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8009b12:	460b      	mov	r3, r1
 8009b14:	4313      	orrs	r3, r2
 8009b16:	d01e      	beq.n	8009b56 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b24:	d10c      	bne.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b2a:	3328      	adds	r3, #40	; 0x28
 8009b2c:	2102      	movs	r1, #2
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f001 fd7c 	bl	800b62c <RCCEx_PLL3_Config>
 8009b34:	4603      	mov	r3, r0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d002      	beq.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009b40:	4b87      	ldr	r3, [pc, #540]	; (8009d60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b44:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b50:	4a83      	ldr	r2, [pc, #524]	; (8009d60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b52:	430b      	orrs	r3, r1
 8009b54:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5e:	f002 0310 	and.w	r3, r2, #16
 8009b62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009b66:	2300      	movs	r3, #0
 8009b68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009b6c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009b70:	460b      	mov	r3, r1
 8009b72:	4313      	orrs	r3, r2
 8009b74:	d01e      	beq.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b82:	d10c      	bne.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b88:	3328      	adds	r3, #40	; 0x28
 8009b8a:	2102      	movs	r1, #2
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f001 fd4d 	bl	800b62c <RCCEx_PLL3_Config>
 8009b92:	4603      	mov	r3, r0
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d002      	beq.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009b9e:	4b70      	ldr	r3, [pc, #448]	; (8009d60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ba2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009baa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009bae:	4a6c      	ldr	r2, [pc, #432]	; (8009d60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009bb0:	430b      	orrs	r3, r1
 8009bb2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bbc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8009bc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009bca:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009bce:	460b      	mov	r3, r1
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	d03e      	beq.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bd8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009bdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009be0:	d022      	beq.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009be2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009be6:	d81b      	bhi.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d003      	beq.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bf0:	d00b      	beq.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009bf2:	e015      	b.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bf8:	3308      	adds	r3, #8
 8009bfa:	2100      	movs	r1, #0
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f001 fc63 	bl	800b4c8 <RCCEx_PLL2_Config>
 8009c02:	4603      	mov	r3, r0
 8009c04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009c08:	e00f      	b.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c0e:	3328      	adds	r3, #40	; 0x28
 8009c10:	2102      	movs	r1, #2
 8009c12:	4618      	mov	r0, r3
 8009c14:	f001 fd0a 	bl	800b62c <RCCEx_PLL3_Config>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009c1e:	e004      	b.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c20:	2301      	movs	r3, #1
 8009c22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009c26:	e000      	b.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009c28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d10b      	bne.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009c32:	4b4b      	ldr	r3, [pc, #300]	; (8009d60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c36:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009c42:	4a47      	ldr	r2, [pc, #284]	; (8009d60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c44:	430b      	orrs	r3, r1
 8009c46:	6593      	str	r3, [r2, #88]	; 0x58
 8009c48:	e003      	b.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009c5e:	67bb      	str	r3, [r7, #120]	; 0x78
 8009c60:	2300      	movs	r3, #0
 8009c62:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009c64:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8009c68:	460b      	mov	r3, r1
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	d03b      	beq.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c76:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009c7a:	d01f      	beq.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009c7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009c80:	d818      	bhi.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009c82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c86:	d003      	beq.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009c88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c8c:	d007      	beq.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009c8e:	e011      	b.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c90:	4b33      	ldr	r3, [pc, #204]	; (8009d60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c94:	4a32      	ldr	r2, [pc, #200]	; (8009d60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009c9c:	e00f      	b.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ca2:	3328      	adds	r3, #40	; 0x28
 8009ca4:	2101      	movs	r1, #1
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f001 fcc0 	bl	800b62c <RCCEx_PLL3_Config>
 8009cac:	4603      	mov	r3, r0
 8009cae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009cb2:	e004      	b.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009cba:	e000      	b.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009cbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d10b      	bne.n	8009cde <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009cc6:	4b26      	ldr	r3, [pc, #152]	; (8009d60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cca:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cd6:	4a22      	ldr	r2, [pc, #136]	; (8009d60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009cd8:	430b      	orrs	r3, r1
 8009cda:	6553      	str	r3, [r2, #84]	; 0x54
 8009cdc:	e003      	b.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ce2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cee:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009cf2:	673b      	str	r3, [r7, #112]	; 0x70
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	677b      	str	r3, [r7, #116]	; 0x74
 8009cf8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	d034      	beq.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d003      	beq.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d10:	d007      	beq.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009d12:	e011      	b.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d14:	4b12      	ldr	r3, [pc, #72]	; (8009d60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d18:	4a11      	ldr	r2, [pc, #68]	; (8009d60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009d20:	e00e      	b.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d26:	3308      	adds	r3, #8
 8009d28:	2102      	movs	r1, #2
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f001 fbcc 	bl	800b4c8 <RCCEx_PLL2_Config>
 8009d30:	4603      	mov	r3, r0
 8009d32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009d36:	e003      	b.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d10d      	bne.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009d48:	4b05      	ldr	r3, [pc, #20]	; (8009d60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d56:	4a02      	ldr	r2, [pc, #8]	; (8009d60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d58:	430b      	orrs	r3, r1
 8009d5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009d5c:	e006      	b.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009d5e:	bf00      	nop
 8009d60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d68:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d74:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8009d78:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009d7e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009d82:	460b      	mov	r3, r1
 8009d84:	4313      	orrs	r3, r2
 8009d86:	d00c      	beq.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d8c:	3328      	adds	r3, #40	; 0x28
 8009d8e:	2102      	movs	r1, #2
 8009d90:	4618      	mov	r0, r3
 8009d92:	f001 fc4b 	bl	800b62c <RCCEx_PLL3_Config>
 8009d96:	4603      	mov	r3, r0
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d002      	beq.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009daa:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009dae:	663b      	str	r3, [r7, #96]	; 0x60
 8009db0:	2300      	movs	r3, #0
 8009db2:	667b      	str	r3, [r7, #100]	; 0x64
 8009db4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009db8:	460b      	mov	r3, r1
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	d038      	beq.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009dc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009dca:	d018      	beq.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009dcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009dd0:	d811      	bhi.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009dd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009dd6:	d014      	beq.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ddc:	d80b      	bhi.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d011      	beq.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009de6:	d106      	bne.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009de8:	4bc3      	ldr	r3, [pc, #780]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dec:	4ac2      	ldr	r2, [pc, #776]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009dee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009df2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009df4:	e008      	b.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009df6:	2301      	movs	r3, #1
 8009df8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009dfc:	e004      	b.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009dfe:	bf00      	nop
 8009e00:	e002      	b.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009e02:	bf00      	nop
 8009e04:	e000      	b.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009e06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d10b      	bne.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009e10:	4bb9      	ldr	r3, [pc, #740]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e14:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e20:	4ab5      	ldr	r2, [pc, #724]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e22:	430b      	orrs	r3, r1
 8009e24:	6553      	str	r3, [r2, #84]	; 0x54
 8009e26:	e003      	b.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e38:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009e3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8009e3e:	2300      	movs	r3, #0
 8009e40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e42:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8009e46:	460b      	mov	r3, r1
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	d009      	beq.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009e4c:	4baa      	ldr	r3, [pc, #680]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e5a:	4aa7      	ldr	r2, [pc, #668]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e5c:	430b      	orrs	r3, r1
 8009e5e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e68:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8009e6c:	653b      	str	r3, [r7, #80]	; 0x50
 8009e6e:	2300      	movs	r3, #0
 8009e70:	657b      	str	r3, [r7, #84]	; 0x54
 8009e72:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8009e76:	460b      	mov	r3, r1
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	d00a      	beq.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009e7c:	4b9e      	ldr	r3, [pc, #632]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e7e:	691b      	ldr	r3, [r3, #16]
 8009e80:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8009e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e88:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009e8c:	4a9a      	ldr	r2, [pc, #616]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e8e:	430b      	orrs	r3, r1
 8009e90:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009e9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ea4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	d009      	beq.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009eae:	4b92      	ldr	r3, [pc, #584]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eb2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8009eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ebc:	4a8e      	ldr	r2, [pc, #568]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ebe:	430b      	orrs	r3, r1
 8009ec0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eca:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8009ece:	643b      	str	r3, [r7, #64]	; 0x40
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	647b      	str	r3, [r7, #68]	; 0x44
 8009ed4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009ed8:	460b      	mov	r3, r1
 8009eda:	4313      	orrs	r3, r2
 8009edc:	d00e      	beq.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009ede:	4b86      	ldr	r3, [pc, #536]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ee0:	691b      	ldr	r3, [r3, #16]
 8009ee2:	4a85      	ldr	r2, [pc, #532]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ee4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009ee8:	6113      	str	r3, [r2, #16]
 8009eea:	4b83      	ldr	r3, [pc, #524]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009eec:	6919      	ldr	r1, [r3, #16]
 8009eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ef2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8009ef6:	4a80      	ldr	r2, [pc, #512]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ef8:	430b      	orrs	r3, r1
 8009efa:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f04:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009f08:	63bb      	str	r3, [r7, #56]	; 0x38
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f0e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009f12:	460b      	mov	r3, r1
 8009f14:	4313      	orrs	r3, r2
 8009f16:	d009      	beq.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009f18:	4b77      	ldr	r3, [pc, #476]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f1c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f26:	4a74      	ldr	r2, [pc, #464]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f28:	430b      	orrs	r3, r1
 8009f2a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f34:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8009f38:	633b      	str	r3, [r7, #48]	; 0x30
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	637b      	str	r3, [r7, #52]	; 0x34
 8009f3e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009f42:	460b      	mov	r3, r1
 8009f44:	4313      	orrs	r3, r2
 8009f46:	d00a      	beq.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009f48:	4b6b      	ldr	r3, [pc, #428]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f4c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8009f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f58:	4a67      	ldr	r2, [pc, #412]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f5a:	430b      	orrs	r3, r1
 8009f5c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f66:	2100      	movs	r1, #0
 8009f68:	62b9      	str	r1, [r7, #40]	; 0x28
 8009f6a:	f003 0301 	and.w	r3, r3, #1
 8009f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f70:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009f74:	460b      	mov	r3, r1
 8009f76:	4313      	orrs	r3, r2
 8009f78:	d011      	beq.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f7e:	3308      	adds	r3, #8
 8009f80:	2100      	movs	r1, #0
 8009f82:	4618      	mov	r0, r3
 8009f84:	f001 faa0 	bl	800b4c8 <RCCEx_PLL2_Config>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009f8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d003      	beq.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa6:	2100      	movs	r1, #0
 8009fa8:	6239      	str	r1, [r7, #32]
 8009faa:	f003 0302 	and.w	r3, r3, #2
 8009fae:	627b      	str	r3, [r7, #36]	; 0x24
 8009fb0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	d011      	beq.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fbe:	3308      	adds	r3, #8
 8009fc0:	2101      	movs	r1, #1
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f001 fa80 	bl	800b4c8 <RCCEx_PLL2_Config>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009fce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d003      	beq.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe6:	2100      	movs	r1, #0
 8009fe8:	61b9      	str	r1, [r7, #24]
 8009fea:	f003 0304 	and.w	r3, r3, #4
 8009fee:	61fb      	str	r3, [r7, #28]
 8009ff0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009ff4:	460b      	mov	r3, r1
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	d011      	beq.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ffe:	3308      	adds	r3, #8
 800a000:	2102      	movs	r1, #2
 800a002:	4618      	mov	r0, r3
 800a004:	f001 fa60 	bl	800b4c8 <RCCEx_PLL2_Config>
 800a008:	4603      	mov	r3, r0
 800a00a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a00e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a012:	2b00      	cmp	r3, #0
 800a014:	d003      	beq.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a016:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a01a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a01e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a026:	2100      	movs	r1, #0
 800a028:	6139      	str	r1, [r7, #16]
 800a02a:	f003 0308 	and.w	r3, r3, #8
 800a02e:	617b      	str	r3, [r7, #20]
 800a030:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a034:	460b      	mov	r3, r1
 800a036:	4313      	orrs	r3, r2
 800a038:	d011      	beq.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a03a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a03e:	3328      	adds	r3, #40	; 0x28
 800a040:	2100      	movs	r1, #0
 800a042:	4618      	mov	r0, r3
 800a044:	f001 faf2 	bl	800b62c <RCCEx_PLL3_Config>
 800a048:	4603      	mov	r3, r0
 800a04a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800a04e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a052:	2b00      	cmp	r3, #0
 800a054:	d003      	beq.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a056:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a05a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a05e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a066:	2100      	movs	r1, #0
 800a068:	60b9      	str	r1, [r7, #8]
 800a06a:	f003 0310 	and.w	r3, r3, #16
 800a06e:	60fb      	str	r3, [r7, #12]
 800a070:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a074:	460b      	mov	r3, r1
 800a076:	4313      	orrs	r3, r2
 800a078:	d011      	beq.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a07a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a07e:	3328      	adds	r3, #40	; 0x28
 800a080:	2101      	movs	r1, #1
 800a082:	4618      	mov	r0, r3
 800a084:	f001 fad2 	bl	800b62c <RCCEx_PLL3_Config>
 800a088:	4603      	mov	r3, r0
 800a08a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a08e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a092:	2b00      	cmp	r3, #0
 800a094:	d003      	beq.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a096:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a09a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a09e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a6:	2100      	movs	r1, #0
 800a0a8:	6039      	str	r1, [r7, #0]
 800a0aa:	f003 0320 	and.w	r3, r3, #32
 800a0ae:	607b      	str	r3, [r7, #4]
 800a0b0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a0b4:	460b      	mov	r3, r1
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	d011      	beq.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a0ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0be:	3328      	adds	r3, #40	; 0x28
 800a0c0:	2102      	movs	r1, #2
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f001 fab2 	bl	800b62c <RCCEx_PLL3_Config>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a0ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d003      	beq.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800a0de:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d101      	bne.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	e000      	b.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a0ea:	2301      	movs	r3, #1
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a0f8:	58024400 	.word	0x58024400

0800a0fc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b090      	sub	sp, #64	; 0x40
 800a100:	af00      	add	r7, sp, #0
 800a102:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a106:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a10a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800a10e:	430b      	orrs	r3, r1
 800a110:	f040 8094 	bne.w	800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a114:	4b9e      	ldr	r3, [pc, #632]	; (800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a118:	f003 0307 	and.w	r3, r3, #7
 800a11c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a120:	2b04      	cmp	r3, #4
 800a122:	f200 8087 	bhi.w	800a234 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a126:	a201      	add	r2, pc, #4	; (adr r2, 800a12c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a12c:	0800a141 	.word	0x0800a141
 800a130:	0800a169 	.word	0x0800a169
 800a134:	0800a191 	.word	0x0800a191
 800a138:	0800a22d 	.word	0x0800a22d
 800a13c:	0800a1b9 	.word	0x0800a1b9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a140:	4b93      	ldr	r3, [pc, #588]	; (800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a148:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a14c:	d108      	bne.n	800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a14e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a152:	4618      	mov	r0, r3
 800a154:	f001 f810 	bl	800b178 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a15c:	f000 bd45 	b.w	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a160:	2300      	movs	r3, #0
 800a162:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a164:	f000 bd41 	b.w	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a168:	4b89      	ldr	r3, [pc, #548]	; (800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a170:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a174:	d108      	bne.n	800a188 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a176:	f107 0318 	add.w	r3, r7, #24
 800a17a:	4618      	mov	r0, r3
 800a17c:	f000 fd54 	bl	800ac28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a180:	69bb      	ldr	r3, [r7, #24]
 800a182:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a184:	f000 bd31 	b.w	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a188:	2300      	movs	r3, #0
 800a18a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a18c:	f000 bd2d 	b.w	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a190:	4b7f      	ldr	r3, [pc, #508]	; (800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a198:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a19c:	d108      	bne.n	800a1b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a19e:	f107 030c 	add.w	r3, r7, #12
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f000 fe94 	bl	800aed0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1ac:	f000 bd1d 	b.w	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1b4:	f000 bd19 	b.w	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a1b8:	4b75      	ldr	r3, [pc, #468]	; (800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a1ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a1c0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a1c2:	4b73      	ldr	r3, [pc, #460]	; (800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f003 0304 	and.w	r3, r3, #4
 800a1ca:	2b04      	cmp	r3, #4
 800a1cc:	d10c      	bne.n	800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a1ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d109      	bne.n	800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a1d4:	4b6e      	ldr	r3, [pc, #440]	; (800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	08db      	lsrs	r3, r3, #3
 800a1da:	f003 0303 	and.w	r3, r3, #3
 800a1de:	4a6d      	ldr	r2, [pc, #436]	; (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a1e0:	fa22 f303 	lsr.w	r3, r2, r3
 800a1e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1e6:	e01f      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a1e8:	4b69      	ldr	r3, [pc, #420]	; (800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1f4:	d106      	bne.n	800a204 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a1f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a1fc:	d102      	bne.n	800a204 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a1fe:	4b66      	ldr	r3, [pc, #408]	; (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a200:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a202:	e011      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a204:	4b62      	ldr	r3, [pc, #392]	; (800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a20c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a210:	d106      	bne.n	800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a214:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a218:	d102      	bne.n	800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a21a:	4b60      	ldr	r3, [pc, #384]	; (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a21c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a21e:	e003      	b.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a220:	2300      	movs	r3, #0
 800a222:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a224:	f000 bce1 	b.w	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a228:	f000 bcdf 	b.w	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a22c:	4b5c      	ldr	r3, [pc, #368]	; (800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a22e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a230:	f000 bcdb 	b.w	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a234:	2300      	movs	r3, #0
 800a236:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a238:	f000 bcd7 	b.w	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a23c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a240:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800a244:	430b      	orrs	r3, r1
 800a246:	f040 80ad 	bne.w	800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a24a:	4b51      	ldr	r3, [pc, #324]	; (800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a24c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a24e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a252:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a25a:	d056      	beq.n	800a30a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a25e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a262:	f200 8090 	bhi.w	800a386 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a268:	2bc0      	cmp	r3, #192	; 0xc0
 800a26a:	f000 8088 	beq.w	800a37e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a270:	2bc0      	cmp	r3, #192	; 0xc0
 800a272:	f200 8088 	bhi.w	800a386 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a278:	2b80      	cmp	r3, #128	; 0x80
 800a27a:	d032      	beq.n	800a2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a27e:	2b80      	cmp	r3, #128	; 0x80
 800a280:	f200 8081 	bhi.w	800a386 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a286:	2b00      	cmp	r3, #0
 800a288:	d003      	beq.n	800a292 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a28c:	2b40      	cmp	r3, #64	; 0x40
 800a28e:	d014      	beq.n	800a2ba <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a290:	e079      	b.n	800a386 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a292:	4b3f      	ldr	r3, [pc, #252]	; (800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a29a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a29e:	d108      	bne.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a2a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f000 ff67 	bl	800b178 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2ae:	f000 bc9c 	b.w	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2b6:	f000 bc98 	b.w	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a2ba:	4b35      	ldr	r3, [pc, #212]	; (800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a2c6:	d108      	bne.n	800a2da <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2c8:	f107 0318 	add.w	r3, r7, #24
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f000 fcab 	bl	800ac28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a2d2:	69bb      	ldr	r3, [r7, #24]
 800a2d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2d6:	f000 bc88 	b.w	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2de:	f000 bc84 	b.w	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a2e2:	4b2b      	ldr	r3, [pc, #172]	; (800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a2ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2ee:	d108      	bne.n	800a302 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2f0:	f107 030c 	add.w	r3, r7, #12
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f000 fdeb 	bl	800aed0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2fe:	f000 bc74 	b.w	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a302:	2300      	movs	r3, #0
 800a304:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a306:	f000 bc70 	b.w	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a30a:	4b21      	ldr	r3, [pc, #132]	; (800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a30c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a30e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a312:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a314:	4b1e      	ldr	r3, [pc, #120]	; (800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f003 0304 	and.w	r3, r3, #4
 800a31c:	2b04      	cmp	r3, #4
 800a31e:	d10c      	bne.n	800a33a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a322:	2b00      	cmp	r3, #0
 800a324:	d109      	bne.n	800a33a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a326:	4b1a      	ldr	r3, [pc, #104]	; (800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	08db      	lsrs	r3, r3, #3
 800a32c:	f003 0303 	and.w	r3, r3, #3
 800a330:	4a18      	ldr	r2, [pc, #96]	; (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a332:	fa22 f303 	lsr.w	r3, r2, r3
 800a336:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a338:	e01f      	b.n	800a37a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a33a:	4b15      	ldr	r3, [pc, #84]	; (800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a346:	d106      	bne.n	800a356 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a34a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a34e:	d102      	bne.n	800a356 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a350:	4b11      	ldr	r3, [pc, #68]	; (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a352:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a354:	e011      	b.n	800a37a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a356:	4b0e      	ldr	r3, [pc, #56]	; (800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a35e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a362:	d106      	bne.n	800a372 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a366:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a36a:	d102      	bne.n	800a372 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a36c:	4b0b      	ldr	r3, [pc, #44]	; (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a36e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a370:	e003      	b.n	800a37a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a372:	2300      	movs	r3, #0
 800a374:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a376:	f000 bc38 	b.w	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a37a:	f000 bc36 	b.w	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a37e:	4b08      	ldr	r3, [pc, #32]	; (800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a380:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a382:	f000 bc32 	b.w	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a386:	2300      	movs	r3, #0
 800a388:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a38a:	f000 bc2e 	b.w	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a38e:	bf00      	nop
 800a390:	58024400 	.word	0x58024400
 800a394:	03d09000 	.word	0x03d09000
 800a398:	003d0900 	.word	0x003d0900
 800a39c:	00989680 	.word	0x00989680
 800a3a0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a3a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3a8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800a3ac:	430b      	orrs	r3, r1
 800a3ae:	f040 809c 	bne.w	800a4ea <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a3b2:	4b9e      	ldr	r3, [pc, #632]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3b6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a3ba:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a3c2:	d054      	beq.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a3ca:	f200 808b 	bhi.w	800a4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a3d4:	f000 8083 	beq.w	800a4de <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3da:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a3de:	f200 8081 	bhi.w	800a4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a3e8:	d02f      	beq.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a3f0:	d878      	bhi.n	800a4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d004      	beq.n	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a3fe:	d012      	beq.n	800a426 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a400:	e070      	b.n	800a4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a402:	4b8a      	ldr	r3, [pc, #552]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a40a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a40e:	d107      	bne.n	800a420 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a414:	4618      	mov	r0, r3
 800a416:	f000 feaf 	bl	800b178 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a41e:	e3e4      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a420:	2300      	movs	r3, #0
 800a422:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a424:	e3e1      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a426:	4b81      	ldr	r3, [pc, #516]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a42e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a432:	d107      	bne.n	800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a434:	f107 0318 	add.w	r3, r7, #24
 800a438:	4618      	mov	r0, r3
 800a43a:	f000 fbf5 	bl	800ac28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a43e:	69bb      	ldr	r3, [r7, #24]
 800a440:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a442:	e3d2      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a444:	2300      	movs	r3, #0
 800a446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a448:	e3cf      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a44a:	4b78      	ldr	r3, [pc, #480]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a452:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a456:	d107      	bne.n	800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a458:	f107 030c 	add.w	r3, r7, #12
 800a45c:	4618      	mov	r0, r3
 800a45e:	f000 fd37 	bl	800aed0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a466:	e3c0      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a468:	2300      	movs	r3, #0
 800a46a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a46c:	e3bd      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a46e:	4b6f      	ldr	r3, [pc, #444]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a472:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a476:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a478:	4b6c      	ldr	r3, [pc, #432]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f003 0304 	and.w	r3, r3, #4
 800a480:	2b04      	cmp	r3, #4
 800a482:	d10c      	bne.n	800a49e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a486:	2b00      	cmp	r3, #0
 800a488:	d109      	bne.n	800a49e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a48a:	4b68      	ldr	r3, [pc, #416]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	08db      	lsrs	r3, r3, #3
 800a490:	f003 0303 	and.w	r3, r3, #3
 800a494:	4a66      	ldr	r2, [pc, #408]	; (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a496:	fa22 f303 	lsr.w	r3, r2, r3
 800a49a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a49c:	e01e      	b.n	800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a49e:	4b63      	ldr	r3, [pc, #396]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4aa:	d106      	bne.n	800a4ba <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a4ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a4b2:	d102      	bne.n	800a4ba <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a4b4:	4b5f      	ldr	r3, [pc, #380]	; (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a4b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4b8:	e010      	b.n	800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a4ba:	4b5c      	ldr	r3, [pc, #368]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a4c6:	d106      	bne.n	800a4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a4c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4ce:	d102      	bne.n	800a4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a4d0:	4b59      	ldr	r3, [pc, #356]	; (800a638 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a4d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4d4:	e002      	b.n	800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a4da:	e386      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a4dc:	e385      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a4de:	4b57      	ldr	r3, [pc, #348]	; (800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a4e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4e2:	e382      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4e8:	e37f      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a4ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4ee:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800a4f2:	430b      	orrs	r3, r1
 800a4f4:	f040 80a7 	bne.w	800a646 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a4f8:	4b4c      	ldr	r3, [pc, #304]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a4fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4fc:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a500:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a504:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a508:	d055      	beq.n	800a5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a50c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a510:	f200 8096 	bhi.w	800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a516:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a51a:	f000 8084 	beq.w	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a520:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a524:	f200 808c 	bhi.w	800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a52a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a52e:	d030      	beq.n	800a592 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a532:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a536:	f200 8083 	bhi.w	800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d004      	beq.n	800a54a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a542:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a546:	d012      	beq.n	800a56e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a548:	e07a      	b.n	800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a54a:	4b38      	ldr	r3, [pc, #224]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a552:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a556:	d107      	bne.n	800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a55c:	4618      	mov	r0, r3
 800a55e:	f000 fe0b 	bl	800b178 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a564:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a566:	e340      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a568:	2300      	movs	r3, #0
 800a56a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a56c:	e33d      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a56e:	4b2f      	ldr	r3, [pc, #188]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a576:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a57a:	d107      	bne.n	800a58c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a57c:	f107 0318 	add.w	r3, r7, #24
 800a580:	4618      	mov	r0, r3
 800a582:	f000 fb51 	bl	800ac28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a586:	69bb      	ldr	r3, [r7, #24]
 800a588:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a58a:	e32e      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a58c:	2300      	movs	r3, #0
 800a58e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a590:	e32b      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a592:	4b26      	ldr	r3, [pc, #152]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a59a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a59e:	d107      	bne.n	800a5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5a0:	f107 030c 	add.w	r3, r7, #12
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f000 fc93 	bl	800aed0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5ae:	e31c      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5b4:	e319      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a5b6:	4b1d      	ldr	r3, [pc, #116]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a5be:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a5c0:	4b1a      	ldr	r3, [pc, #104]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f003 0304 	and.w	r3, r3, #4
 800a5c8:	2b04      	cmp	r3, #4
 800a5ca:	d10c      	bne.n	800a5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a5cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d109      	bne.n	800a5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5d2:	4b16      	ldr	r3, [pc, #88]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	08db      	lsrs	r3, r3, #3
 800a5d8:	f003 0303 	and.w	r3, r3, #3
 800a5dc:	4a14      	ldr	r2, [pc, #80]	; (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a5de:	fa22 f303 	lsr.w	r3, r2, r3
 800a5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5e4:	e01e      	b.n	800a624 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a5e6:	4b11      	ldr	r3, [pc, #68]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5f2:	d106      	bne.n	800a602 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a5f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a5fa:	d102      	bne.n	800a602 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a5fc:	4b0d      	ldr	r3, [pc, #52]	; (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a600:	e010      	b.n	800a624 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a602:	4b0a      	ldr	r3, [pc, #40]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a60a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a60e:	d106      	bne.n	800a61e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a612:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a616:	d102      	bne.n	800a61e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a618:	4b07      	ldr	r3, [pc, #28]	; (800a638 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a61a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a61c:	e002      	b.n	800a624 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a61e:	2300      	movs	r3, #0
 800a620:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a622:	e2e2      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a624:	e2e1      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a626:	4b05      	ldr	r3, [pc, #20]	; (800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a628:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a62a:	e2de      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a62c:	58024400 	.word	0x58024400
 800a630:	03d09000 	.word	0x03d09000
 800a634:	003d0900 	.word	0x003d0900
 800a638:	00989680 	.word	0x00989680
 800a63c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a640:	2300      	movs	r3, #0
 800a642:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a644:	e2d1      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a646:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a64a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800a64e:	430b      	orrs	r3, r1
 800a650:	f040 809c 	bne.w	800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a654:	4b93      	ldr	r3, [pc, #588]	; (800a8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a658:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a65c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a660:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a664:	d054      	beq.n	800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a668:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a66c:	f200 808b 	bhi.w	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a672:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a676:	f000 8083 	beq.w	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a67c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a680:	f200 8081 	bhi.w	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a68a:	d02f      	beq.n	800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a68e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a692:	d878      	bhi.n	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a696:	2b00      	cmp	r3, #0
 800a698:	d004      	beq.n	800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a69c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6a0:	d012      	beq.n	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a6a2:	e070      	b.n	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a6a4:	4b7f      	ldr	r3, [pc, #508]	; (800a8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a6b0:	d107      	bne.n	800a6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f000 fd5e 	bl	800b178 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6c0:	e293      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6c6:	e290      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6c8:	4b76      	ldr	r3, [pc, #472]	; (800a8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6d4:	d107      	bne.n	800a6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6d6:	f107 0318 	add.w	r3, r7, #24
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f000 faa4 	bl	800ac28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a6e0:	69bb      	ldr	r3, [r7, #24]
 800a6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6e4:	e281      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6ea:	e27e      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a6ec:	4b6d      	ldr	r3, [pc, #436]	; (800a8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a6f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6f8:	d107      	bne.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6fa:	f107 030c 	add.w	r3, r7, #12
 800a6fe:	4618      	mov	r0, r3
 800a700:	f000 fbe6 	bl	800aed0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a708:	e26f      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a70a:	2300      	movs	r3, #0
 800a70c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a70e:	e26c      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a710:	4b64      	ldr	r3, [pc, #400]	; (800a8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a714:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a718:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a71a:	4b62      	ldr	r3, [pc, #392]	; (800a8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f003 0304 	and.w	r3, r3, #4
 800a722:	2b04      	cmp	r3, #4
 800a724:	d10c      	bne.n	800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d109      	bne.n	800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a72c:	4b5d      	ldr	r3, [pc, #372]	; (800a8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	08db      	lsrs	r3, r3, #3
 800a732:	f003 0303 	and.w	r3, r3, #3
 800a736:	4a5c      	ldr	r2, [pc, #368]	; (800a8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a738:	fa22 f303 	lsr.w	r3, r2, r3
 800a73c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a73e:	e01e      	b.n	800a77e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a740:	4b58      	ldr	r3, [pc, #352]	; (800a8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a74c:	d106      	bne.n	800a75c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a74e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a750:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a754:	d102      	bne.n	800a75c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a756:	4b55      	ldr	r3, [pc, #340]	; (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a758:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a75a:	e010      	b.n	800a77e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a75c:	4b51      	ldr	r3, [pc, #324]	; (800a8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a764:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a768:	d106      	bne.n	800a778 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a76a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a76c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a770:	d102      	bne.n	800a778 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a772:	4b4f      	ldr	r3, [pc, #316]	; (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a774:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a776:	e002      	b.n	800a77e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a778:	2300      	movs	r3, #0
 800a77a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a77c:	e235      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a77e:	e234      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a780:	4b4c      	ldr	r3, [pc, #304]	; (800a8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a782:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a784:	e231      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a786:	2300      	movs	r3, #0
 800a788:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a78a:	e22e      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a78c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a790:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800a794:	430b      	orrs	r3, r1
 800a796:	f040 808f 	bne.w	800a8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a79a:	4b42      	ldr	r3, [pc, #264]	; (800a8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a79c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a79e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800a7a2:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800a7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a7aa:	d06b      	beq.n	800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a7b2:	d874      	bhi.n	800a89e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a7ba:	d056      	beq.n	800a86a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a7c2:	d86c      	bhi.n	800a89e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a7ca:	d03b      	beq.n	800a844 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a7d2:	d864      	bhi.n	800a89e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7da:	d021      	beq.n	800a820 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7e2:	d85c      	bhi.n	800a89e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d004      	beq.n	800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7f0:	d004      	beq.n	800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a7f2:	e054      	b.n	800a89e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a7f4:	f7fe fa30 	bl	8008c58 <HAL_RCC_GetPCLK1Freq>
 800a7f8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a7fa:	e1f6      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7fc:	4b29      	ldr	r3, [pc, #164]	; (800a8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a804:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a808:	d107      	bne.n	800a81a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a80a:	f107 0318 	add.w	r3, r7, #24
 800a80e:	4618      	mov	r0, r3
 800a810:	f000 fa0a 	bl	800ac28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a814:	69fb      	ldr	r3, [r7, #28]
 800a816:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a818:	e1e7      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a81a:	2300      	movs	r3, #0
 800a81c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a81e:	e1e4      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a820:	4b20      	ldr	r3, [pc, #128]	; (800a8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a828:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a82c:	d107      	bne.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a82e:	f107 030c 	add.w	r3, r7, #12
 800a832:	4618      	mov	r0, r3
 800a834:	f000 fb4c 	bl	800aed0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a83c:	e1d5      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a83e:	2300      	movs	r3, #0
 800a840:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a842:	e1d2      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a844:	4b17      	ldr	r3, [pc, #92]	; (800a8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f003 0304 	and.w	r3, r3, #4
 800a84c:	2b04      	cmp	r3, #4
 800a84e:	d109      	bne.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a850:	4b14      	ldr	r3, [pc, #80]	; (800a8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	08db      	lsrs	r3, r3, #3
 800a856:	f003 0303 	and.w	r3, r3, #3
 800a85a:	4a13      	ldr	r2, [pc, #76]	; (800a8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a85c:	fa22 f303 	lsr.w	r3, r2, r3
 800a860:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a862:	e1c2      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a864:	2300      	movs	r3, #0
 800a866:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a868:	e1bf      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a86a:	4b0e      	ldr	r3, [pc, #56]	; (800a8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a876:	d102      	bne.n	800a87e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a878:	4b0c      	ldr	r3, [pc, #48]	; (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a87a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a87c:	e1b5      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a87e:	2300      	movs	r3, #0
 800a880:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a882:	e1b2      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a884:	4b07      	ldr	r3, [pc, #28]	; (800a8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a88c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a890:	d102      	bne.n	800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a892:	4b07      	ldr	r3, [pc, #28]	; (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a894:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a896:	e1a8      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a898:	2300      	movs	r3, #0
 800a89a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a89c:	e1a5      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8a2:	e1a2      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a8a4:	58024400 	.word	0x58024400
 800a8a8:	03d09000 	.word	0x03d09000
 800a8ac:	003d0900 	.word	0x003d0900
 800a8b0:	00989680 	.word	0x00989680
 800a8b4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a8b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8bc:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800a8c0:	430b      	orrs	r3, r1
 800a8c2:	d173      	bne.n	800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a8c4:	4b9c      	ldr	r3, [pc, #624]	; (800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a8cc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8d4:	d02f      	beq.n	800a936 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8dc:	d863      	bhi.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a8de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d004      	beq.n	800a8ee <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8ea:	d012      	beq.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a8ec:	e05b      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8ee:	4b92      	ldr	r3, [pc, #584]	; (800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a8f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a8fa:	d107      	bne.n	800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8fc:	f107 0318 	add.w	r3, r7, #24
 800a900:	4618      	mov	r0, r3
 800a902:	f000 f991 	bl	800ac28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a906:	69bb      	ldr	r3, [r7, #24]
 800a908:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a90a:	e16e      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a90c:	2300      	movs	r3, #0
 800a90e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a910:	e16b      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a912:	4b89      	ldr	r3, [pc, #548]	; (800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a91a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a91e:	d107      	bne.n	800a930 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a920:	f107 030c 	add.w	r3, r7, #12
 800a924:	4618      	mov	r0, r3
 800a926:	f000 fad3 	bl	800aed0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a92e:	e15c      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a930:	2300      	movs	r3, #0
 800a932:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a934:	e159      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a936:	4b80      	ldr	r3, [pc, #512]	; (800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a93a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a93e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a940:	4b7d      	ldr	r3, [pc, #500]	; (800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f003 0304 	and.w	r3, r3, #4
 800a948:	2b04      	cmp	r3, #4
 800a94a:	d10c      	bne.n	800a966 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a94c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d109      	bne.n	800a966 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a952:	4b79      	ldr	r3, [pc, #484]	; (800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	08db      	lsrs	r3, r3, #3
 800a958:	f003 0303 	and.w	r3, r3, #3
 800a95c:	4a77      	ldr	r2, [pc, #476]	; (800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a95e:	fa22 f303 	lsr.w	r3, r2, r3
 800a962:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a964:	e01e      	b.n	800a9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a966:	4b74      	ldr	r3, [pc, #464]	; (800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a96e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a972:	d106      	bne.n	800a982 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a976:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a97a:	d102      	bne.n	800a982 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a97c:	4b70      	ldr	r3, [pc, #448]	; (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a97e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a980:	e010      	b.n	800a9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a982:	4b6d      	ldr	r3, [pc, #436]	; (800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a98a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a98e:	d106      	bne.n	800a99e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a992:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a996:	d102      	bne.n	800a99e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a998:	4b6a      	ldr	r3, [pc, #424]	; (800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a99a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a99c:	e002      	b.n	800a9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a9a2:	e122      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a9a4:	e121      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9aa:	e11e      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a9ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9b0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800a9b4:	430b      	orrs	r3, r1
 800a9b6:	d133      	bne.n	800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a9b8:	4b5f      	ldr	r3, [pc, #380]	; (800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a9ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9c0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d004      	beq.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9ce:	d012      	beq.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a9d0:	e023      	b.n	800aa1a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a9d2:	4b59      	ldr	r3, [pc, #356]	; (800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9de:	d107      	bne.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a9e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f000 fbc7 	bl	800b178 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9ee:	e0fc      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9f4:	e0f9      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9f6:	4b50      	ldr	r3, [pc, #320]	; (800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa02:	d107      	bne.n	800aa14 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa04:	f107 0318 	add.w	r3, r7, #24
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f000 f90d 	bl	800ac28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800aa0e:	6a3b      	ldr	r3, [r7, #32]
 800aa10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa12:	e0ea      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa14:	2300      	movs	r3, #0
 800aa16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa18:	e0e7      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa1e:	e0e4      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800aa20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa24:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800aa28:	430b      	orrs	r3, r1
 800aa2a:	f040 808d 	bne.w	800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800aa2e:	4b42      	ldr	r3, [pc, #264]	; (800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa32:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800aa36:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800aa38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa3e:	d06b      	beq.n	800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800aa40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa46:	d874      	bhi.n	800ab32 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800aa48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa4e:	d056      	beq.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800aa50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa56:	d86c      	bhi.n	800ab32 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800aa58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aa5e:	d03b      	beq.n	800aad8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800aa60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aa66:	d864      	bhi.n	800ab32 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800aa68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa6e:	d021      	beq.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800aa70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa76:	d85c      	bhi.n	800ab32 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800aa78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d004      	beq.n	800aa88 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800aa7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa84:	d004      	beq.n	800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800aa86:	e054      	b.n	800ab32 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800aa88:	f000 f8b8 	bl	800abfc <HAL_RCCEx_GetD3PCLK1Freq>
 800aa8c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aa8e:	e0ac      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa90:	4b29      	ldr	r3, [pc, #164]	; (800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa9c:	d107      	bne.n	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa9e:	f107 0318 	add.w	r3, r7, #24
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f000 f8c0 	bl	800ac28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aaa8:	69fb      	ldr	r3, [r7, #28]
 800aaaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aaac:	e09d      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aaae:	2300      	movs	r3, #0
 800aab0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aab2:	e09a      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aab4:	4b20      	ldr	r3, [pc, #128]	; (800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aabc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aac0:	d107      	bne.n	800aad2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aac2:	f107 030c 	add.w	r3, r7, #12
 800aac6:	4618      	mov	r0, r3
 800aac8:	f000 fa02 	bl	800aed0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aad0:	e08b      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aad2:	2300      	movs	r3, #0
 800aad4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aad6:	e088      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aad8:	4b17      	ldr	r3, [pc, #92]	; (800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f003 0304 	and.w	r3, r3, #4
 800aae0:	2b04      	cmp	r3, #4
 800aae2:	d109      	bne.n	800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aae4:	4b14      	ldr	r3, [pc, #80]	; (800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	08db      	lsrs	r3, r3, #3
 800aaea:	f003 0303 	and.w	r3, r3, #3
 800aaee:	4a13      	ldr	r2, [pc, #76]	; (800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800aaf0:	fa22 f303 	lsr.w	r3, r2, r3
 800aaf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aaf6:	e078      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aafc:	e075      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800aafe:	4b0e      	ldr	r3, [pc, #56]	; (800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab0a:	d102      	bne.n	800ab12 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800ab0c:	4b0c      	ldr	r3, [pc, #48]	; (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ab0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab10:	e06b      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab12:	2300      	movs	r3, #0
 800ab14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab16:	e068      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ab18:	4b07      	ldr	r3, [pc, #28]	; (800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab24:	d102      	bne.n	800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800ab26:	4b07      	ldr	r3, [pc, #28]	; (800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ab28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab2a:	e05e      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab30:	e05b      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ab32:	2300      	movs	r3, #0
 800ab34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab36:	e058      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ab38:	58024400 	.word	0x58024400
 800ab3c:	03d09000 	.word	0x03d09000
 800ab40:	003d0900 	.word	0x003d0900
 800ab44:	00989680 	.word	0x00989680
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ab48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab4c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800ab50:	430b      	orrs	r3, r1
 800ab52:	d148      	bne.n	800abe6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ab54:	4b27      	ldr	r3, [pc, #156]	; (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ab56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ab5c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ab5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab64:	d02a      	beq.n	800abbc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800ab66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab6c:	d838      	bhi.n	800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800ab6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d004      	beq.n	800ab7e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ab74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab7a:	d00d      	beq.n	800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800ab7c:	e030      	b.n	800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ab7e:	4b1d      	ldr	r3, [pc, #116]	; (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab8a:	d102      	bne.n	800ab92 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800ab8c:	4b1a      	ldr	r3, [pc, #104]	; (800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ab8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab90:	e02b      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab92:	2300      	movs	r3, #0
 800ab94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab96:	e028      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab98:	4b16      	ldr	r3, [pc, #88]	; (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aba0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aba4:	d107      	bne.n	800abb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800abaa:	4618      	mov	r0, r3
 800abac:	f000 fae4 	bl	800b178 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800abb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abb4:	e019      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abb6:	2300      	movs	r3, #0
 800abb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abba:	e016      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800abbc:	4b0d      	ldr	r3, [pc, #52]	; (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800abc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800abc8:	d107      	bne.n	800abda <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abca:	f107 0318 	add.w	r3, r7, #24
 800abce:	4618      	mov	r0, r3
 800abd0:	f000 f82a 	bl	800ac28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800abd4:	69fb      	ldr	r3, [r7, #28]
 800abd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abd8:	e007      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abda:	2300      	movs	r3, #0
 800abdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abde:	e004      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800abe0:	2300      	movs	r3, #0
 800abe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abe4:	e001      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800abe6:	2300      	movs	r3, #0
 800abe8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800abea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800abec:	4618      	mov	r0, r3
 800abee:	3740      	adds	r7, #64	; 0x40
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}
 800abf4:	58024400 	.word	0x58024400
 800abf8:	00989680 	.word	0x00989680

0800abfc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ac00:	f7fd fffa 	bl	8008bf8 <HAL_RCC_GetHCLKFreq>
 800ac04:	4602      	mov	r2, r0
 800ac06:	4b06      	ldr	r3, [pc, #24]	; (800ac20 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ac08:	6a1b      	ldr	r3, [r3, #32]
 800ac0a:	091b      	lsrs	r3, r3, #4
 800ac0c:	f003 0307 	and.w	r3, r3, #7
 800ac10:	4904      	ldr	r1, [pc, #16]	; (800ac24 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ac12:	5ccb      	ldrb	r3, [r1, r3]
 800ac14:	f003 031f 	and.w	r3, r3, #31
 800ac18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	bd80      	pop	{r7, pc}
 800ac20:	58024400 	.word	0x58024400
 800ac24:	08010054 	.word	0x08010054

0800ac28 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b089      	sub	sp, #36	; 0x24
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac30:	4ba1      	ldr	r3, [pc, #644]	; (800aeb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac34:	f003 0303 	and.w	r3, r3, #3
 800ac38:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ac3a:	4b9f      	ldr	r3, [pc, #636]	; (800aeb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac3e:	0b1b      	lsrs	r3, r3, #12
 800ac40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac44:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ac46:	4b9c      	ldr	r3, [pc, #624]	; (800aeb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac4a:	091b      	lsrs	r3, r3, #4
 800ac4c:	f003 0301 	and.w	r3, r3, #1
 800ac50:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ac52:	4b99      	ldr	r3, [pc, #612]	; (800aeb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac56:	08db      	lsrs	r3, r3, #3
 800ac58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac5c:	693a      	ldr	r2, [r7, #16]
 800ac5e:	fb02 f303 	mul.w	r3, r2, r3
 800ac62:	ee07 3a90 	vmov	s15, r3
 800ac66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	f000 8111 	beq.w	800ae98 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ac76:	69bb      	ldr	r3, [r7, #24]
 800ac78:	2b02      	cmp	r3, #2
 800ac7a:	f000 8083 	beq.w	800ad84 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ac7e:	69bb      	ldr	r3, [r7, #24]
 800ac80:	2b02      	cmp	r3, #2
 800ac82:	f200 80a1 	bhi.w	800adc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ac86:	69bb      	ldr	r3, [r7, #24]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d003      	beq.n	800ac94 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ac8c:	69bb      	ldr	r3, [r7, #24]
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	d056      	beq.n	800ad40 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ac92:	e099      	b.n	800adc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac94:	4b88      	ldr	r3, [pc, #544]	; (800aeb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f003 0320 	and.w	r3, r3, #32
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d02d      	beq.n	800acfc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aca0:	4b85      	ldr	r3, [pc, #532]	; (800aeb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	08db      	lsrs	r3, r3, #3
 800aca6:	f003 0303 	and.w	r3, r3, #3
 800acaa:	4a84      	ldr	r2, [pc, #528]	; (800aebc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800acac:	fa22 f303 	lsr.w	r3, r2, r3
 800acb0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	ee07 3a90 	vmov	s15, r3
 800acb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	ee07 3a90 	vmov	s15, r3
 800acc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acca:	4b7b      	ldr	r3, [pc, #492]	; (800aeb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800accc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acd2:	ee07 3a90 	vmov	s15, r3
 800acd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acda:	ed97 6a03 	vldr	s12, [r7, #12]
 800acde:	eddf 5a78 	vldr	s11, [pc, #480]	; 800aec0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ace2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ace6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acf6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800acfa:	e087      	b.n	800ae0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	ee07 3a90 	vmov	s15, r3
 800ad02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad06:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800aec4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ad0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad0e:	4b6a      	ldr	r3, [pc, #424]	; (800aeb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad16:	ee07 3a90 	vmov	s15, r3
 800ad1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad22:	eddf 5a67 	vldr	s11, [pc, #412]	; 800aec0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad3e:	e065      	b.n	800ae0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	ee07 3a90 	vmov	s15, r3
 800ad46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad4a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800aec8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ad4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad52:	4b59      	ldr	r3, [pc, #356]	; (800aeb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad5a:	ee07 3a90 	vmov	s15, r3
 800ad5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad62:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad66:	eddf 5a56 	vldr	s11, [pc, #344]	; 800aec0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad82:	e043      	b.n	800ae0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	ee07 3a90 	vmov	s15, r3
 800ad8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad8e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800aecc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ad92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad96:	4b48      	ldr	r3, [pc, #288]	; (800aeb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad9e:	ee07 3a90 	vmov	s15, r3
 800ada2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ada6:	ed97 6a03 	vldr	s12, [r7, #12]
 800adaa:	eddf 5a45 	vldr	s11, [pc, #276]	; 800aec0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800adae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adc6:	e021      	b.n	800ae0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	ee07 3a90 	vmov	s15, r3
 800adce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800add2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800aec8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800add6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adda:	4b37      	ldr	r3, [pc, #220]	; (800aeb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800addc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ade2:	ee07 3a90 	vmov	s15, r3
 800ade6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adea:	ed97 6a03 	vldr	s12, [r7, #12]
 800adee:	eddf 5a34 	vldr	s11, [pc, #208]	; 800aec0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800adf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae0a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ae0c:	4b2a      	ldr	r3, [pc, #168]	; (800aeb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae10:	0a5b      	lsrs	r3, r3, #9
 800ae12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae16:	ee07 3a90 	vmov	s15, r3
 800ae1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae22:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae26:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae32:	ee17 2a90 	vmov	r2, s15
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ae3a:	4b1f      	ldr	r3, [pc, #124]	; (800aeb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae3e:	0c1b      	lsrs	r3, r3, #16
 800ae40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae44:	ee07 3a90 	vmov	s15, r3
 800ae48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae50:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae54:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae60:	ee17 2a90 	vmov	r2, s15
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ae68:	4b13      	ldr	r3, [pc, #76]	; (800aeb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae6c:	0e1b      	lsrs	r3, r3, #24
 800ae6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae72:	ee07 3a90 	vmov	s15, r3
 800ae76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae82:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae8e:	ee17 2a90 	vmov	r2, s15
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ae96:	e008      	b.n	800aeaa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2200      	movs	r2, #0
 800aea2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2200      	movs	r2, #0
 800aea8:	609a      	str	r2, [r3, #8]
}
 800aeaa:	bf00      	nop
 800aeac:	3724      	adds	r7, #36	; 0x24
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb4:	4770      	bx	lr
 800aeb6:	bf00      	nop
 800aeb8:	58024400 	.word	0x58024400
 800aebc:	03d09000 	.word	0x03d09000
 800aec0:	46000000 	.word	0x46000000
 800aec4:	4c742400 	.word	0x4c742400
 800aec8:	4a742400 	.word	0x4a742400
 800aecc:	4b189680 	.word	0x4b189680

0800aed0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b089      	sub	sp, #36	; 0x24
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aed8:	4ba1      	ldr	r3, [pc, #644]	; (800b160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aeda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aedc:	f003 0303 	and.w	r3, r3, #3
 800aee0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800aee2:	4b9f      	ldr	r3, [pc, #636]	; (800b160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aee6:	0d1b      	lsrs	r3, r3, #20
 800aee8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aeec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800aeee:	4b9c      	ldr	r3, [pc, #624]	; (800b160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aef2:	0a1b      	lsrs	r3, r3, #8
 800aef4:	f003 0301 	and.w	r3, r3, #1
 800aef8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800aefa:	4b99      	ldr	r3, [pc, #612]	; (800b160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aefc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aefe:	08db      	lsrs	r3, r3, #3
 800af00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af04:	693a      	ldr	r2, [r7, #16]
 800af06:	fb02 f303 	mul.w	r3, r2, r3
 800af0a:	ee07 3a90 	vmov	s15, r3
 800af0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	f000 8111 	beq.w	800b140 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800af1e:	69bb      	ldr	r3, [r7, #24]
 800af20:	2b02      	cmp	r3, #2
 800af22:	f000 8083 	beq.w	800b02c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800af26:	69bb      	ldr	r3, [r7, #24]
 800af28:	2b02      	cmp	r3, #2
 800af2a:	f200 80a1 	bhi.w	800b070 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800af2e:	69bb      	ldr	r3, [r7, #24]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d003      	beq.n	800af3c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800af34:	69bb      	ldr	r3, [r7, #24]
 800af36:	2b01      	cmp	r3, #1
 800af38:	d056      	beq.n	800afe8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800af3a:	e099      	b.n	800b070 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af3c:	4b88      	ldr	r3, [pc, #544]	; (800b160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f003 0320 	and.w	r3, r3, #32
 800af44:	2b00      	cmp	r3, #0
 800af46:	d02d      	beq.n	800afa4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af48:	4b85      	ldr	r3, [pc, #532]	; (800b160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	08db      	lsrs	r3, r3, #3
 800af4e:	f003 0303 	and.w	r3, r3, #3
 800af52:	4a84      	ldr	r2, [pc, #528]	; (800b164 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800af54:	fa22 f303 	lsr.w	r3, r2, r3
 800af58:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	ee07 3a90 	vmov	s15, r3
 800af60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	ee07 3a90 	vmov	s15, r3
 800af6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af72:	4b7b      	ldr	r3, [pc, #492]	; (800b160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af7a:	ee07 3a90 	vmov	s15, r3
 800af7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af82:	ed97 6a03 	vldr	s12, [r7, #12]
 800af86:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b168 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af9e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800afa2:	e087      	b.n	800b0b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	ee07 3a90 	vmov	s15, r3
 800afaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b16c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800afb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afb6:	4b6a      	ldr	r3, [pc, #424]	; (800b160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afbe:	ee07 3a90 	vmov	s15, r3
 800afc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afc6:	ed97 6a03 	vldr	s12, [r7, #12]
 800afca:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b168 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800afce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afe2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afe6:	e065      	b.n	800b0b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	ee07 3a90 	vmov	s15, r3
 800afee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aff2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b170 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800affa:	4b59      	ldr	r3, [pc, #356]	; (800b160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800affc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800affe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b002:	ee07 3a90 	vmov	s15, r3
 800b006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b00a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b00e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b168 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b01a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b01e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b022:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b026:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b02a:	e043      	b.n	800b0b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	ee07 3a90 	vmov	s15, r3
 800b032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b036:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b174 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b03a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b03e:	4b48      	ldr	r3, [pc, #288]	; (800b160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b046:	ee07 3a90 	vmov	s15, r3
 800b04a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b04e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b052:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b168 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b05a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b05e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b06a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b06e:	e021      	b.n	800b0b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	ee07 3a90 	vmov	s15, r3
 800b076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b07a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b170 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b07e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b082:	4b37      	ldr	r3, [pc, #220]	; (800b160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b08a:	ee07 3a90 	vmov	s15, r3
 800b08e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b092:	ed97 6a03 	vldr	s12, [r7, #12]
 800b096:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b168 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b09a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b09e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b0b4:	4b2a      	ldr	r3, [pc, #168]	; (800b160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0b8:	0a5b      	lsrs	r3, r3, #9
 800b0ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0be:	ee07 3a90 	vmov	s15, r3
 800b0c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b0ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0da:	ee17 2a90 	vmov	r2, s15
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b0e2:	4b1f      	ldr	r3, [pc, #124]	; (800b160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0e6:	0c1b      	lsrs	r3, r3, #16
 800b0e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0ec:	ee07 3a90 	vmov	s15, r3
 800b0f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b0f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0fc:	edd7 6a07 	vldr	s13, [r7, #28]
 800b100:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b104:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b108:	ee17 2a90 	vmov	r2, s15
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b110:	4b13      	ldr	r3, [pc, #76]	; (800b160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b114:	0e1b      	lsrs	r3, r3, #24
 800b116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b11a:	ee07 3a90 	vmov	s15, r3
 800b11e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b122:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b126:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b12a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b12e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b136:	ee17 2a90 	vmov	r2, s15
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b13e:	e008      	b.n	800b152 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2200      	movs	r2, #0
 800b14a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2200      	movs	r2, #0
 800b150:	609a      	str	r2, [r3, #8]
}
 800b152:	bf00      	nop
 800b154:	3724      	adds	r7, #36	; 0x24
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr
 800b15e:	bf00      	nop
 800b160:	58024400 	.word	0x58024400
 800b164:	03d09000 	.word	0x03d09000
 800b168:	46000000 	.word	0x46000000
 800b16c:	4c742400 	.word	0x4c742400
 800b170:	4a742400 	.word	0x4a742400
 800b174:	4b189680 	.word	0x4b189680

0800b178 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b178:	b480      	push	{r7}
 800b17a:	b089      	sub	sp, #36	; 0x24
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b180:	4ba0      	ldr	r3, [pc, #640]	; (800b404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b184:	f003 0303 	and.w	r3, r3, #3
 800b188:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b18a:	4b9e      	ldr	r3, [pc, #632]	; (800b404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b18c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b18e:	091b      	lsrs	r3, r3, #4
 800b190:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b194:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b196:	4b9b      	ldr	r3, [pc, #620]	; (800b404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b19a:	f003 0301 	and.w	r3, r3, #1
 800b19e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b1a0:	4b98      	ldr	r3, [pc, #608]	; (800b404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1a4:	08db      	lsrs	r3, r3, #3
 800b1a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b1aa:	693a      	ldr	r2, [r7, #16]
 800b1ac:	fb02 f303 	mul.w	r3, r2, r3
 800b1b0:	ee07 3a90 	vmov	s15, r3
 800b1b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1b8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b1bc:	697b      	ldr	r3, [r7, #20]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	f000 8111 	beq.w	800b3e6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b1c4:	69bb      	ldr	r3, [r7, #24]
 800b1c6:	2b02      	cmp	r3, #2
 800b1c8:	f000 8083 	beq.w	800b2d2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b1cc:	69bb      	ldr	r3, [r7, #24]
 800b1ce:	2b02      	cmp	r3, #2
 800b1d0:	f200 80a1 	bhi.w	800b316 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b1d4:	69bb      	ldr	r3, [r7, #24]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d003      	beq.n	800b1e2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b1da:	69bb      	ldr	r3, [r7, #24]
 800b1dc:	2b01      	cmp	r3, #1
 800b1de:	d056      	beq.n	800b28e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b1e0:	e099      	b.n	800b316 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b1e2:	4b88      	ldr	r3, [pc, #544]	; (800b404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f003 0320 	and.w	r3, r3, #32
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d02d      	beq.n	800b24a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b1ee:	4b85      	ldr	r3, [pc, #532]	; (800b404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	08db      	lsrs	r3, r3, #3
 800b1f4:	f003 0303 	and.w	r3, r3, #3
 800b1f8:	4a83      	ldr	r2, [pc, #524]	; (800b408 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b1fa:	fa22 f303 	lsr.w	r3, r2, r3
 800b1fe:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	ee07 3a90 	vmov	s15, r3
 800b206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	ee07 3a90 	vmov	s15, r3
 800b210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b214:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b218:	4b7a      	ldr	r3, [pc, #488]	; (800b404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b21a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b21c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b220:	ee07 3a90 	vmov	s15, r3
 800b224:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b228:	ed97 6a03 	vldr	s12, [r7, #12]
 800b22c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b40c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b230:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b234:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b238:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b23c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b240:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b244:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b248:	e087      	b.n	800b35a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	ee07 3a90 	vmov	s15, r3
 800b250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b254:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b410 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b258:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b25c:	4b69      	ldr	r3, [pc, #420]	; (800b404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b25e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b264:	ee07 3a90 	vmov	s15, r3
 800b268:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b26c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b270:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b40c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b274:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b278:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b27c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b280:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b284:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b288:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b28c:	e065      	b.n	800b35a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	ee07 3a90 	vmov	s15, r3
 800b294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b298:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b414 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b29c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2a0:	4b58      	ldr	r3, [pc, #352]	; (800b404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2a8:	ee07 3a90 	vmov	s15, r3
 800b2ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2b0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2b4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b40c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b2b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2d0:	e043      	b.n	800b35a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	ee07 3a90 	vmov	s15, r3
 800b2d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2dc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b418 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b2e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2e4:	4b47      	ldr	r3, [pc, #284]	; (800b404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2ec:	ee07 3a90 	vmov	s15, r3
 800b2f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2f4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2f8:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b40c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b2fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b300:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b304:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b308:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b30c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b310:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b314:	e021      	b.n	800b35a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	ee07 3a90 	vmov	s15, r3
 800b31c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b320:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b410 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b324:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b328:	4b36      	ldr	r3, [pc, #216]	; (800b404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b32a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b32c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b330:	ee07 3a90 	vmov	s15, r3
 800b334:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b338:	ed97 6a03 	vldr	s12, [r7, #12]
 800b33c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b40c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b340:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b344:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b348:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b34c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b350:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b354:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b358:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b35a:	4b2a      	ldr	r3, [pc, #168]	; (800b404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b35c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b35e:	0a5b      	lsrs	r3, r3, #9
 800b360:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b364:	ee07 3a90 	vmov	s15, r3
 800b368:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b36c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b370:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b374:	edd7 6a07 	vldr	s13, [r7, #28]
 800b378:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b37c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b380:	ee17 2a90 	vmov	r2, s15
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b388:	4b1e      	ldr	r3, [pc, #120]	; (800b404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b38a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b38c:	0c1b      	lsrs	r3, r3, #16
 800b38e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b392:	ee07 3a90 	vmov	s15, r3
 800b396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b39a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b39e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3a2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3ae:	ee17 2a90 	vmov	r2, s15
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b3b6:	4b13      	ldr	r3, [pc, #76]	; (800b404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3ba:	0e1b      	lsrs	r3, r3, #24
 800b3bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3c0:	ee07 3a90 	vmov	s15, r3
 800b3c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3d0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3dc:	ee17 2a90 	vmov	r2, s15
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b3e4:	e008      	b.n	800b3f8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	609a      	str	r2, [r3, #8]
}
 800b3f8:	bf00      	nop
 800b3fa:	3724      	adds	r7, #36	; 0x24
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr
 800b404:	58024400 	.word	0x58024400
 800b408:	03d09000 	.word	0x03d09000
 800b40c:	46000000 	.word	0x46000000
 800b410:	4c742400 	.word	0x4c742400
 800b414:	4a742400 	.word	0x4a742400
 800b418:	4b189680 	.word	0x4b189680

0800b41c <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b084      	sub	sp, #16
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800b424:	4b26      	ldr	r3, [pc, #152]	; (800b4c0 <HAL_RCCEx_CRSConfig+0xa4>)
 800b426:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b42a:	4a25      	ldr	r2, [pc, #148]	; (800b4c0 <HAL_RCCEx_CRSConfig+0xa4>)
 800b42c:	f043 0302 	orr.w	r3, r3, #2
 800b430:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 800b434:	4b22      	ldr	r3, [pc, #136]	; (800b4c0 <HAL_RCCEx_CRSConfig+0xa4>)
 800b436:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b43a:	4a21      	ldr	r2, [pc, #132]	; (800b4c0 <HAL_RCCEx_CRSConfig+0xa4>)
 800b43c:	f023 0302 	bic.w	r3, r3, #2
 800b440:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 800b444:	f7f7 fd0c 	bl	8002e60 <HAL_GetREVID>
 800b448:	4603      	mov	r3, r0
 800b44a:	f241 0203 	movw	r2, #4099	; 0x1003
 800b44e:	4293      	cmp	r3, r2
 800b450:	d80b      	bhi.n	800b46a <HAL_RCCEx_CRSConfig+0x4e>
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b45a:	d106      	bne.n	800b46a <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681a      	ldr	r2, [r3, #0]
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	689b      	ldr	r3, [r3, #8]
 800b464:	4313      	orrs	r3, r2
 800b466:	60fb      	str	r3, [r7, #12]
 800b468:	e008      	b.n	800b47c <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681a      	ldr	r2, [r3, #0]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	685b      	ldr	r3, [r3, #4]
 800b472:	431a      	orrs	r2, r3
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	689b      	ldr	r3, [r3, #8]
 800b478:	4313      	orrs	r3, r2
 800b47a:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	68db      	ldr	r3, [r3, #12]
 800b480:	68fa      	ldr	r2, [r7, #12]
 800b482:	4313      	orrs	r3, r2
 800b484:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	691b      	ldr	r3, [r3, #16]
 800b48a:	041b      	lsls	r3, r3, #16
 800b48c:	68fa      	ldr	r2, [r7, #12]
 800b48e:	4313      	orrs	r3, r2
 800b490:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800b492:	4a0c      	ldr	r2, [pc, #48]	; (800b4c4 <HAL_RCCEx_CRSConfig+0xa8>)
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800b498:	4b0a      	ldr	r3, [pc, #40]	; (800b4c4 <HAL_RCCEx_CRSConfig+0xa8>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	695b      	ldr	r3, [r3, #20]
 800b4a4:	021b      	lsls	r3, r3, #8
 800b4a6:	4907      	ldr	r1, [pc, #28]	; (800b4c4 <HAL_RCCEx_CRSConfig+0xa8>)
 800b4a8:	4313      	orrs	r3, r2
 800b4aa:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800b4ac:	4b05      	ldr	r3, [pc, #20]	; (800b4c4 <HAL_RCCEx_CRSConfig+0xa8>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4a04      	ldr	r2, [pc, #16]	; (800b4c4 <HAL_RCCEx_CRSConfig+0xa8>)
 800b4b2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800b4b6:	6013      	str	r3, [r2, #0]
}
 800b4b8:	bf00      	nop
 800b4ba:	3710      	adds	r7, #16
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}
 800b4c0:	58024400 	.word	0x58024400
 800b4c4:	40008400 	.word	0x40008400

0800b4c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b084      	sub	sp, #16
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b4d6:	4b53      	ldr	r3, [pc, #332]	; (800b624 <RCCEx_PLL2_Config+0x15c>)
 800b4d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4da:	f003 0303 	and.w	r3, r3, #3
 800b4de:	2b03      	cmp	r3, #3
 800b4e0:	d101      	bne.n	800b4e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	e099      	b.n	800b61a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b4e6:	4b4f      	ldr	r3, [pc, #316]	; (800b624 <RCCEx_PLL2_Config+0x15c>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4a4e      	ldr	r2, [pc, #312]	; (800b624 <RCCEx_PLL2_Config+0x15c>)
 800b4ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b4f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4f2:	f7f7 fc85 	bl	8002e00 <HAL_GetTick>
 800b4f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b4f8:	e008      	b.n	800b50c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b4fa:	f7f7 fc81 	bl	8002e00 <HAL_GetTick>
 800b4fe:	4602      	mov	r2, r0
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	1ad3      	subs	r3, r2, r3
 800b504:	2b02      	cmp	r3, #2
 800b506:	d901      	bls.n	800b50c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b508:	2303      	movs	r3, #3
 800b50a:	e086      	b.n	800b61a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b50c:	4b45      	ldr	r3, [pc, #276]	; (800b624 <RCCEx_PLL2_Config+0x15c>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b514:	2b00      	cmp	r3, #0
 800b516:	d1f0      	bne.n	800b4fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b518:	4b42      	ldr	r3, [pc, #264]	; (800b624 <RCCEx_PLL2_Config+0x15c>)
 800b51a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b51c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	031b      	lsls	r3, r3, #12
 800b526:	493f      	ldr	r1, [pc, #252]	; (800b624 <RCCEx_PLL2_Config+0x15c>)
 800b528:	4313      	orrs	r3, r2
 800b52a:	628b      	str	r3, [r1, #40]	; 0x28
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	3b01      	subs	r3, #1
 800b532:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	689b      	ldr	r3, [r3, #8]
 800b53a:	3b01      	subs	r3, #1
 800b53c:	025b      	lsls	r3, r3, #9
 800b53e:	b29b      	uxth	r3, r3
 800b540:	431a      	orrs	r2, r3
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	68db      	ldr	r3, [r3, #12]
 800b546:	3b01      	subs	r3, #1
 800b548:	041b      	lsls	r3, r3, #16
 800b54a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b54e:	431a      	orrs	r2, r3
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	691b      	ldr	r3, [r3, #16]
 800b554:	3b01      	subs	r3, #1
 800b556:	061b      	lsls	r3, r3, #24
 800b558:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b55c:	4931      	ldr	r1, [pc, #196]	; (800b624 <RCCEx_PLL2_Config+0x15c>)
 800b55e:	4313      	orrs	r3, r2
 800b560:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b562:	4b30      	ldr	r3, [pc, #192]	; (800b624 <RCCEx_PLL2_Config+0x15c>)
 800b564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b566:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	695b      	ldr	r3, [r3, #20]
 800b56e:	492d      	ldr	r1, [pc, #180]	; (800b624 <RCCEx_PLL2_Config+0x15c>)
 800b570:	4313      	orrs	r3, r2
 800b572:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b574:	4b2b      	ldr	r3, [pc, #172]	; (800b624 <RCCEx_PLL2_Config+0x15c>)
 800b576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b578:	f023 0220 	bic.w	r2, r3, #32
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	699b      	ldr	r3, [r3, #24]
 800b580:	4928      	ldr	r1, [pc, #160]	; (800b624 <RCCEx_PLL2_Config+0x15c>)
 800b582:	4313      	orrs	r3, r2
 800b584:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b586:	4b27      	ldr	r3, [pc, #156]	; (800b624 <RCCEx_PLL2_Config+0x15c>)
 800b588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b58a:	4a26      	ldr	r2, [pc, #152]	; (800b624 <RCCEx_PLL2_Config+0x15c>)
 800b58c:	f023 0310 	bic.w	r3, r3, #16
 800b590:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b592:	4b24      	ldr	r3, [pc, #144]	; (800b624 <RCCEx_PLL2_Config+0x15c>)
 800b594:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b596:	4b24      	ldr	r3, [pc, #144]	; (800b628 <RCCEx_PLL2_Config+0x160>)
 800b598:	4013      	ands	r3, r2
 800b59a:	687a      	ldr	r2, [r7, #4]
 800b59c:	69d2      	ldr	r2, [r2, #28]
 800b59e:	00d2      	lsls	r2, r2, #3
 800b5a0:	4920      	ldr	r1, [pc, #128]	; (800b624 <RCCEx_PLL2_Config+0x15c>)
 800b5a2:	4313      	orrs	r3, r2
 800b5a4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b5a6:	4b1f      	ldr	r3, [pc, #124]	; (800b624 <RCCEx_PLL2_Config+0x15c>)
 800b5a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5aa:	4a1e      	ldr	r2, [pc, #120]	; (800b624 <RCCEx_PLL2_Config+0x15c>)
 800b5ac:	f043 0310 	orr.w	r3, r3, #16
 800b5b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d106      	bne.n	800b5c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b5b8:	4b1a      	ldr	r3, [pc, #104]	; (800b624 <RCCEx_PLL2_Config+0x15c>)
 800b5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5bc:	4a19      	ldr	r2, [pc, #100]	; (800b624 <RCCEx_PLL2_Config+0x15c>)
 800b5be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b5c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b5c4:	e00f      	b.n	800b5e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	d106      	bne.n	800b5da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b5cc:	4b15      	ldr	r3, [pc, #84]	; (800b624 <RCCEx_PLL2_Config+0x15c>)
 800b5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5d0:	4a14      	ldr	r2, [pc, #80]	; (800b624 <RCCEx_PLL2_Config+0x15c>)
 800b5d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b5d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b5d8:	e005      	b.n	800b5e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b5da:	4b12      	ldr	r3, [pc, #72]	; (800b624 <RCCEx_PLL2_Config+0x15c>)
 800b5dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5de:	4a11      	ldr	r2, [pc, #68]	; (800b624 <RCCEx_PLL2_Config+0x15c>)
 800b5e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b5e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b5e6:	4b0f      	ldr	r3, [pc, #60]	; (800b624 <RCCEx_PLL2_Config+0x15c>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	4a0e      	ldr	r2, [pc, #56]	; (800b624 <RCCEx_PLL2_Config+0x15c>)
 800b5ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b5f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b5f2:	f7f7 fc05 	bl	8002e00 <HAL_GetTick>
 800b5f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b5f8:	e008      	b.n	800b60c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b5fa:	f7f7 fc01 	bl	8002e00 <HAL_GetTick>
 800b5fe:	4602      	mov	r2, r0
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	1ad3      	subs	r3, r2, r3
 800b604:	2b02      	cmp	r3, #2
 800b606:	d901      	bls.n	800b60c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b608:	2303      	movs	r3, #3
 800b60a:	e006      	b.n	800b61a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b60c:	4b05      	ldr	r3, [pc, #20]	; (800b624 <RCCEx_PLL2_Config+0x15c>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b614:	2b00      	cmp	r3, #0
 800b616:	d0f0      	beq.n	800b5fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b618:	7bfb      	ldrb	r3, [r7, #15]
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3710      	adds	r7, #16
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}
 800b622:	bf00      	nop
 800b624:	58024400 	.word	0x58024400
 800b628:	ffff0007 	.word	0xffff0007

0800b62c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b084      	sub	sp, #16
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b636:	2300      	movs	r3, #0
 800b638:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b63a:	4b53      	ldr	r3, [pc, #332]	; (800b788 <RCCEx_PLL3_Config+0x15c>)
 800b63c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b63e:	f003 0303 	and.w	r3, r3, #3
 800b642:	2b03      	cmp	r3, #3
 800b644:	d101      	bne.n	800b64a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b646:	2301      	movs	r3, #1
 800b648:	e099      	b.n	800b77e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b64a:	4b4f      	ldr	r3, [pc, #316]	; (800b788 <RCCEx_PLL3_Config+0x15c>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	4a4e      	ldr	r2, [pc, #312]	; (800b788 <RCCEx_PLL3_Config+0x15c>)
 800b650:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b654:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b656:	f7f7 fbd3 	bl	8002e00 <HAL_GetTick>
 800b65a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b65c:	e008      	b.n	800b670 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b65e:	f7f7 fbcf 	bl	8002e00 <HAL_GetTick>
 800b662:	4602      	mov	r2, r0
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	1ad3      	subs	r3, r2, r3
 800b668:	2b02      	cmp	r3, #2
 800b66a:	d901      	bls.n	800b670 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b66c:	2303      	movs	r3, #3
 800b66e:	e086      	b.n	800b77e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b670:	4b45      	ldr	r3, [pc, #276]	; (800b788 <RCCEx_PLL3_Config+0x15c>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d1f0      	bne.n	800b65e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b67c:	4b42      	ldr	r3, [pc, #264]	; (800b788 <RCCEx_PLL3_Config+0x15c>)
 800b67e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b680:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	051b      	lsls	r3, r3, #20
 800b68a:	493f      	ldr	r1, [pc, #252]	; (800b788 <RCCEx_PLL3_Config+0x15c>)
 800b68c:	4313      	orrs	r3, r2
 800b68e:	628b      	str	r3, [r1, #40]	; 0x28
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	3b01      	subs	r3, #1
 800b696:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	689b      	ldr	r3, [r3, #8]
 800b69e:	3b01      	subs	r3, #1
 800b6a0:	025b      	lsls	r3, r3, #9
 800b6a2:	b29b      	uxth	r3, r3
 800b6a4:	431a      	orrs	r2, r3
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	68db      	ldr	r3, [r3, #12]
 800b6aa:	3b01      	subs	r3, #1
 800b6ac:	041b      	lsls	r3, r3, #16
 800b6ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b6b2:	431a      	orrs	r2, r3
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	691b      	ldr	r3, [r3, #16]
 800b6b8:	3b01      	subs	r3, #1
 800b6ba:	061b      	lsls	r3, r3, #24
 800b6bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b6c0:	4931      	ldr	r1, [pc, #196]	; (800b788 <RCCEx_PLL3_Config+0x15c>)
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b6c6:	4b30      	ldr	r3, [pc, #192]	; (800b788 <RCCEx_PLL3_Config+0x15c>)
 800b6c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	695b      	ldr	r3, [r3, #20]
 800b6d2:	492d      	ldr	r1, [pc, #180]	; (800b788 <RCCEx_PLL3_Config+0x15c>)
 800b6d4:	4313      	orrs	r3, r2
 800b6d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b6d8:	4b2b      	ldr	r3, [pc, #172]	; (800b788 <RCCEx_PLL3_Config+0x15c>)
 800b6da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6dc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	699b      	ldr	r3, [r3, #24]
 800b6e4:	4928      	ldr	r1, [pc, #160]	; (800b788 <RCCEx_PLL3_Config+0x15c>)
 800b6e6:	4313      	orrs	r3, r2
 800b6e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b6ea:	4b27      	ldr	r3, [pc, #156]	; (800b788 <RCCEx_PLL3_Config+0x15c>)
 800b6ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6ee:	4a26      	ldr	r2, [pc, #152]	; (800b788 <RCCEx_PLL3_Config+0x15c>)
 800b6f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b6f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b6f6:	4b24      	ldr	r3, [pc, #144]	; (800b788 <RCCEx_PLL3_Config+0x15c>)
 800b6f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b6fa:	4b24      	ldr	r3, [pc, #144]	; (800b78c <RCCEx_PLL3_Config+0x160>)
 800b6fc:	4013      	ands	r3, r2
 800b6fe:	687a      	ldr	r2, [r7, #4]
 800b700:	69d2      	ldr	r2, [r2, #28]
 800b702:	00d2      	lsls	r2, r2, #3
 800b704:	4920      	ldr	r1, [pc, #128]	; (800b788 <RCCEx_PLL3_Config+0x15c>)
 800b706:	4313      	orrs	r3, r2
 800b708:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b70a:	4b1f      	ldr	r3, [pc, #124]	; (800b788 <RCCEx_PLL3_Config+0x15c>)
 800b70c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b70e:	4a1e      	ldr	r2, [pc, #120]	; (800b788 <RCCEx_PLL3_Config+0x15c>)
 800b710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b714:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d106      	bne.n	800b72a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b71c:	4b1a      	ldr	r3, [pc, #104]	; (800b788 <RCCEx_PLL3_Config+0x15c>)
 800b71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b720:	4a19      	ldr	r2, [pc, #100]	; (800b788 <RCCEx_PLL3_Config+0x15c>)
 800b722:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b726:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b728:	e00f      	b.n	800b74a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	2b01      	cmp	r3, #1
 800b72e:	d106      	bne.n	800b73e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b730:	4b15      	ldr	r3, [pc, #84]	; (800b788 <RCCEx_PLL3_Config+0x15c>)
 800b732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b734:	4a14      	ldr	r2, [pc, #80]	; (800b788 <RCCEx_PLL3_Config+0x15c>)
 800b736:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b73a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b73c:	e005      	b.n	800b74a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b73e:	4b12      	ldr	r3, [pc, #72]	; (800b788 <RCCEx_PLL3_Config+0x15c>)
 800b740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b742:	4a11      	ldr	r2, [pc, #68]	; (800b788 <RCCEx_PLL3_Config+0x15c>)
 800b744:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b748:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b74a:	4b0f      	ldr	r3, [pc, #60]	; (800b788 <RCCEx_PLL3_Config+0x15c>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	4a0e      	ldr	r2, [pc, #56]	; (800b788 <RCCEx_PLL3_Config+0x15c>)
 800b750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b754:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b756:	f7f7 fb53 	bl	8002e00 <HAL_GetTick>
 800b75a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b75c:	e008      	b.n	800b770 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b75e:	f7f7 fb4f 	bl	8002e00 <HAL_GetTick>
 800b762:	4602      	mov	r2, r0
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	1ad3      	subs	r3, r2, r3
 800b768:	2b02      	cmp	r3, #2
 800b76a:	d901      	bls.n	800b770 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b76c:	2303      	movs	r3, #3
 800b76e:	e006      	b.n	800b77e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b770:	4b05      	ldr	r3, [pc, #20]	; (800b788 <RCCEx_PLL3_Config+0x15c>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d0f0      	beq.n	800b75e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b77c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b77e:	4618      	mov	r0, r3
 800b780:	3710      	adds	r7, #16
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}
 800b786:	bf00      	nop
 800b788:	58024400 	.word	0x58024400
 800b78c:	ffff0007 	.word	0xffff0007

0800b790 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b082      	sub	sp, #8
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d101      	bne.n	800b7a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b79e:	2301      	movs	r3, #1
 800b7a0:	e049      	b.n	800b836 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7a8:	b2db      	uxtb	r3, r3
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d106      	bne.n	800b7bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f7f7 f816 	bl	80027e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2202      	movs	r2, #2
 800b7c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681a      	ldr	r2, [r3, #0]
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	3304      	adds	r3, #4
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	4610      	mov	r0, r2
 800b7d0:	f000 f92e 	bl	800ba30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2201      	movs	r2, #1
 800b7e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2201      	movs	r2, #1
 800b7f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2201      	movs	r2, #1
 800b800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2201      	movs	r2, #1
 800b808:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2201      	movs	r2, #1
 800b810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2201      	movs	r2, #1
 800b818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2201      	movs	r2, #1
 800b820:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2201      	movs	r2, #1
 800b828:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2201      	movs	r2, #1
 800b830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b834:	2300      	movs	r3, #0
}
 800b836:	4618      	mov	r0, r3
 800b838:	3708      	adds	r7, #8
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
	...

0800b840 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b084      	sub	sp, #16
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b84a:	2300      	movs	r3, #0
 800b84c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b854:	2b01      	cmp	r3, #1
 800b856:	d101      	bne.n	800b85c <HAL_TIM_ConfigClockSource+0x1c>
 800b858:	2302      	movs	r3, #2
 800b85a:	e0dc      	b.n	800ba16 <HAL_TIM_ConfigClockSource+0x1d6>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2201      	movs	r2, #1
 800b860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2202      	movs	r2, #2
 800b868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	689b      	ldr	r3, [r3, #8]
 800b872:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b874:	68ba      	ldr	r2, [r7, #8]
 800b876:	4b6a      	ldr	r3, [pc, #424]	; (800ba20 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b878:	4013      	ands	r3, r2
 800b87a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b882:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	68ba      	ldr	r2, [r7, #8]
 800b88a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4a64      	ldr	r2, [pc, #400]	; (800ba24 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b892:	4293      	cmp	r3, r2
 800b894:	f000 80a9 	beq.w	800b9ea <HAL_TIM_ConfigClockSource+0x1aa>
 800b898:	4a62      	ldr	r2, [pc, #392]	; (800ba24 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	f200 80ae 	bhi.w	800b9fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b8a0:	4a61      	ldr	r2, [pc, #388]	; (800ba28 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	f000 80a1 	beq.w	800b9ea <HAL_TIM_ConfigClockSource+0x1aa>
 800b8a8:	4a5f      	ldr	r2, [pc, #380]	; (800ba28 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	f200 80a6 	bhi.w	800b9fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b8b0:	4a5e      	ldr	r2, [pc, #376]	; (800ba2c <HAL_TIM_ConfigClockSource+0x1ec>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	f000 8099 	beq.w	800b9ea <HAL_TIM_ConfigClockSource+0x1aa>
 800b8b8:	4a5c      	ldr	r2, [pc, #368]	; (800ba2c <HAL_TIM_ConfigClockSource+0x1ec>)
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	f200 809e 	bhi.w	800b9fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b8c0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b8c4:	f000 8091 	beq.w	800b9ea <HAL_TIM_ConfigClockSource+0x1aa>
 800b8c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b8cc:	f200 8096 	bhi.w	800b9fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b8d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b8d4:	f000 8089 	beq.w	800b9ea <HAL_TIM_ConfigClockSource+0x1aa>
 800b8d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b8dc:	f200 808e 	bhi.w	800b9fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b8e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b8e4:	d03e      	beq.n	800b964 <HAL_TIM_ConfigClockSource+0x124>
 800b8e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b8ea:	f200 8087 	bhi.w	800b9fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b8ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8f2:	f000 8086 	beq.w	800ba02 <HAL_TIM_ConfigClockSource+0x1c2>
 800b8f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8fa:	d87f      	bhi.n	800b9fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b8fc:	2b70      	cmp	r3, #112	; 0x70
 800b8fe:	d01a      	beq.n	800b936 <HAL_TIM_ConfigClockSource+0xf6>
 800b900:	2b70      	cmp	r3, #112	; 0x70
 800b902:	d87b      	bhi.n	800b9fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b904:	2b60      	cmp	r3, #96	; 0x60
 800b906:	d050      	beq.n	800b9aa <HAL_TIM_ConfigClockSource+0x16a>
 800b908:	2b60      	cmp	r3, #96	; 0x60
 800b90a:	d877      	bhi.n	800b9fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b90c:	2b50      	cmp	r3, #80	; 0x50
 800b90e:	d03c      	beq.n	800b98a <HAL_TIM_ConfigClockSource+0x14a>
 800b910:	2b50      	cmp	r3, #80	; 0x50
 800b912:	d873      	bhi.n	800b9fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b914:	2b40      	cmp	r3, #64	; 0x40
 800b916:	d058      	beq.n	800b9ca <HAL_TIM_ConfigClockSource+0x18a>
 800b918:	2b40      	cmp	r3, #64	; 0x40
 800b91a:	d86f      	bhi.n	800b9fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b91c:	2b30      	cmp	r3, #48	; 0x30
 800b91e:	d064      	beq.n	800b9ea <HAL_TIM_ConfigClockSource+0x1aa>
 800b920:	2b30      	cmp	r3, #48	; 0x30
 800b922:	d86b      	bhi.n	800b9fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b924:	2b20      	cmp	r3, #32
 800b926:	d060      	beq.n	800b9ea <HAL_TIM_ConfigClockSource+0x1aa>
 800b928:	2b20      	cmp	r3, #32
 800b92a:	d867      	bhi.n	800b9fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d05c      	beq.n	800b9ea <HAL_TIM_ConfigClockSource+0x1aa>
 800b930:	2b10      	cmp	r3, #16
 800b932:	d05a      	beq.n	800b9ea <HAL_TIM_ConfigClockSource+0x1aa>
 800b934:	e062      	b.n	800b9fc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6818      	ldr	r0, [r3, #0]
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	6899      	ldr	r1, [r3, #8]
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	685a      	ldr	r2, [r3, #4]
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	68db      	ldr	r3, [r3, #12]
 800b946:	f000 f98b 	bl	800bc60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	689b      	ldr	r3, [r3, #8]
 800b950:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b958:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	68ba      	ldr	r2, [r7, #8]
 800b960:	609a      	str	r2, [r3, #8]
      break;
 800b962:	e04f      	b.n	800ba04 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6818      	ldr	r0, [r3, #0]
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	6899      	ldr	r1, [r3, #8]
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	685a      	ldr	r2, [r3, #4]
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	68db      	ldr	r3, [r3, #12]
 800b974:	f000 f974 	bl	800bc60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	689a      	ldr	r2, [r3, #8]
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b986:	609a      	str	r2, [r3, #8]
      break;
 800b988:	e03c      	b.n	800ba04 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6818      	ldr	r0, [r3, #0]
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	6859      	ldr	r1, [r3, #4]
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	68db      	ldr	r3, [r3, #12]
 800b996:	461a      	mov	r2, r3
 800b998:	f000 f8e4 	bl	800bb64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	2150      	movs	r1, #80	; 0x50
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f000 f93e 	bl	800bc24 <TIM_ITRx_SetConfig>
      break;
 800b9a8:	e02c      	b.n	800ba04 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6818      	ldr	r0, [r3, #0]
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	6859      	ldr	r1, [r3, #4]
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	68db      	ldr	r3, [r3, #12]
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	f000 f903 	bl	800bbc2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	2160      	movs	r1, #96	; 0x60
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f000 f92e 	bl	800bc24 <TIM_ITRx_SetConfig>
      break;
 800b9c8:	e01c      	b.n	800ba04 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6818      	ldr	r0, [r3, #0]
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	6859      	ldr	r1, [r3, #4]
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	68db      	ldr	r3, [r3, #12]
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	f000 f8c4 	bl	800bb64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	2140      	movs	r1, #64	; 0x40
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f000 f91e 	bl	800bc24 <TIM_ITRx_SetConfig>
      break;
 800b9e8:	e00c      	b.n	800ba04 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681a      	ldr	r2, [r3, #0]
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	4619      	mov	r1, r3
 800b9f4:	4610      	mov	r0, r2
 800b9f6:	f000 f915 	bl	800bc24 <TIM_ITRx_SetConfig>
      break;
 800b9fa:	e003      	b.n	800ba04 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	73fb      	strb	r3, [r7, #15]
      break;
 800ba00:	e000      	b.n	800ba04 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ba02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2201      	movs	r2, #1
 800ba08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ba14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3710      	adds	r7, #16
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
 800ba1e:	bf00      	nop
 800ba20:	ffceff88 	.word	0xffceff88
 800ba24:	00100040 	.word	0x00100040
 800ba28:	00100030 	.word	0x00100030
 800ba2c:	00100020 	.word	0x00100020

0800ba30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b085      	sub	sp, #20
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
 800ba38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	4a40      	ldr	r2, [pc, #256]	; (800bb44 <TIM_Base_SetConfig+0x114>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d013      	beq.n	800ba70 <TIM_Base_SetConfig+0x40>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba4e:	d00f      	beq.n	800ba70 <TIM_Base_SetConfig+0x40>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	4a3d      	ldr	r2, [pc, #244]	; (800bb48 <TIM_Base_SetConfig+0x118>)
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d00b      	beq.n	800ba70 <TIM_Base_SetConfig+0x40>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	4a3c      	ldr	r2, [pc, #240]	; (800bb4c <TIM_Base_SetConfig+0x11c>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d007      	beq.n	800ba70 <TIM_Base_SetConfig+0x40>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	4a3b      	ldr	r2, [pc, #236]	; (800bb50 <TIM_Base_SetConfig+0x120>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d003      	beq.n	800ba70 <TIM_Base_SetConfig+0x40>
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	4a3a      	ldr	r2, [pc, #232]	; (800bb54 <TIM_Base_SetConfig+0x124>)
 800ba6c:	4293      	cmp	r3, r2
 800ba6e:	d108      	bne.n	800ba82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	685b      	ldr	r3, [r3, #4]
 800ba7c:	68fa      	ldr	r2, [r7, #12]
 800ba7e:	4313      	orrs	r3, r2
 800ba80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	4a2f      	ldr	r2, [pc, #188]	; (800bb44 <TIM_Base_SetConfig+0x114>)
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d01f      	beq.n	800baca <TIM_Base_SetConfig+0x9a>
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba90:	d01b      	beq.n	800baca <TIM_Base_SetConfig+0x9a>
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	4a2c      	ldr	r2, [pc, #176]	; (800bb48 <TIM_Base_SetConfig+0x118>)
 800ba96:	4293      	cmp	r3, r2
 800ba98:	d017      	beq.n	800baca <TIM_Base_SetConfig+0x9a>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	4a2b      	ldr	r2, [pc, #172]	; (800bb4c <TIM_Base_SetConfig+0x11c>)
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d013      	beq.n	800baca <TIM_Base_SetConfig+0x9a>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	4a2a      	ldr	r2, [pc, #168]	; (800bb50 <TIM_Base_SetConfig+0x120>)
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d00f      	beq.n	800baca <TIM_Base_SetConfig+0x9a>
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	4a29      	ldr	r2, [pc, #164]	; (800bb54 <TIM_Base_SetConfig+0x124>)
 800baae:	4293      	cmp	r3, r2
 800bab0:	d00b      	beq.n	800baca <TIM_Base_SetConfig+0x9a>
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	4a28      	ldr	r2, [pc, #160]	; (800bb58 <TIM_Base_SetConfig+0x128>)
 800bab6:	4293      	cmp	r3, r2
 800bab8:	d007      	beq.n	800baca <TIM_Base_SetConfig+0x9a>
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	4a27      	ldr	r2, [pc, #156]	; (800bb5c <TIM_Base_SetConfig+0x12c>)
 800babe:	4293      	cmp	r3, r2
 800bac0:	d003      	beq.n	800baca <TIM_Base_SetConfig+0x9a>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	4a26      	ldr	r2, [pc, #152]	; (800bb60 <TIM_Base_SetConfig+0x130>)
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d108      	bne.n	800badc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bad0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	68db      	ldr	r3, [r3, #12]
 800bad6:	68fa      	ldr	r2, [r7, #12]
 800bad8:	4313      	orrs	r3, r2
 800bada:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	695b      	ldr	r3, [r3, #20]
 800bae6:	4313      	orrs	r3, r2
 800bae8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	68fa      	ldr	r2, [r7, #12]
 800baee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	689a      	ldr	r2, [r3, #8]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	681a      	ldr	r2, [r3, #0]
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	4a10      	ldr	r2, [pc, #64]	; (800bb44 <TIM_Base_SetConfig+0x114>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d00f      	beq.n	800bb28 <TIM_Base_SetConfig+0xf8>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	4a12      	ldr	r2, [pc, #72]	; (800bb54 <TIM_Base_SetConfig+0x124>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d00b      	beq.n	800bb28 <TIM_Base_SetConfig+0xf8>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	4a11      	ldr	r2, [pc, #68]	; (800bb58 <TIM_Base_SetConfig+0x128>)
 800bb14:	4293      	cmp	r3, r2
 800bb16:	d007      	beq.n	800bb28 <TIM_Base_SetConfig+0xf8>
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	4a10      	ldr	r2, [pc, #64]	; (800bb5c <TIM_Base_SetConfig+0x12c>)
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d003      	beq.n	800bb28 <TIM_Base_SetConfig+0xf8>
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	4a0f      	ldr	r2, [pc, #60]	; (800bb60 <TIM_Base_SetConfig+0x130>)
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d103      	bne.n	800bb30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	691a      	ldr	r2, [r3, #16]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2201      	movs	r2, #1
 800bb34:	615a      	str	r2, [r3, #20]
}
 800bb36:	bf00      	nop
 800bb38:	3714      	adds	r7, #20
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr
 800bb42:	bf00      	nop
 800bb44:	40010000 	.word	0x40010000
 800bb48:	40000400 	.word	0x40000400
 800bb4c:	40000800 	.word	0x40000800
 800bb50:	40000c00 	.word	0x40000c00
 800bb54:	40010400 	.word	0x40010400
 800bb58:	40014000 	.word	0x40014000
 800bb5c:	40014400 	.word	0x40014400
 800bb60:	40014800 	.word	0x40014800

0800bb64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b087      	sub	sp, #28
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	60f8      	str	r0, [r7, #12]
 800bb6c:	60b9      	str	r1, [r7, #8]
 800bb6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	6a1b      	ldr	r3, [r3, #32]
 800bb74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	6a1b      	ldr	r3, [r3, #32]
 800bb7a:	f023 0201 	bic.w	r2, r3, #1
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	699b      	ldr	r3, [r3, #24]
 800bb86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bb8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	011b      	lsls	r3, r3, #4
 800bb94:	693a      	ldr	r2, [r7, #16]
 800bb96:	4313      	orrs	r3, r2
 800bb98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	f023 030a 	bic.w	r3, r3, #10
 800bba0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bba2:	697a      	ldr	r2, [r7, #20]
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	4313      	orrs	r3, r2
 800bba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	693a      	ldr	r2, [r7, #16]
 800bbae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	697a      	ldr	r2, [r7, #20]
 800bbb4:	621a      	str	r2, [r3, #32]
}
 800bbb6:	bf00      	nop
 800bbb8:	371c      	adds	r7, #28
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc0:	4770      	bx	lr

0800bbc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bbc2:	b480      	push	{r7}
 800bbc4:	b087      	sub	sp, #28
 800bbc6:	af00      	add	r7, sp, #0
 800bbc8:	60f8      	str	r0, [r7, #12]
 800bbca:	60b9      	str	r1, [r7, #8]
 800bbcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	6a1b      	ldr	r3, [r3, #32]
 800bbd2:	f023 0210 	bic.w	r2, r3, #16
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	699b      	ldr	r3, [r3, #24]
 800bbde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	6a1b      	ldr	r3, [r3, #32]
 800bbe4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bbec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	031b      	lsls	r3, r3, #12
 800bbf2:	697a      	ldr	r2, [r7, #20]
 800bbf4:	4313      	orrs	r3, r2
 800bbf6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bbfe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	011b      	lsls	r3, r3, #4
 800bc04:	693a      	ldr	r2, [r7, #16]
 800bc06:	4313      	orrs	r3, r2
 800bc08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	697a      	ldr	r2, [r7, #20]
 800bc0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	693a      	ldr	r2, [r7, #16]
 800bc14:	621a      	str	r2, [r3, #32]
}
 800bc16:	bf00      	nop
 800bc18:	371c      	adds	r7, #28
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr
	...

0800bc24 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bc24:	b480      	push	{r7}
 800bc26:	b085      	sub	sp, #20
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	689b      	ldr	r3, [r3, #8]
 800bc32:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bc34:	68fa      	ldr	r2, [r7, #12]
 800bc36:	4b09      	ldr	r3, [pc, #36]	; (800bc5c <TIM_ITRx_SetConfig+0x38>)
 800bc38:	4013      	ands	r3, r2
 800bc3a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bc3c:	683a      	ldr	r2, [r7, #0]
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	4313      	orrs	r3, r2
 800bc42:	f043 0307 	orr.w	r3, r3, #7
 800bc46:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	68fa      	ldr	r2, [r7, #12]
 800bc4c:	609a      	str	r2, [r3, #8]
}
 800bc4e:	bf00      	nop
 800bc50:	3714      	adds	r7, #20
 800bc52:	46bd      	mov	sp, r7
 800bc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc58:	4770      	bx	lr
 800bc5a:	bf00      	nop
 800bc5c:	ffcfff8f 	.word	0xffcfff8f

0800bc60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b087      	sub	sp, #28
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	60f8      	str	r0, [r7, #12]
 800bc68:	60b9      	str	r1, [r7, #8]
 800bc6a:	607a      	str	r2, [r7, #4]
 800bc6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	689b      	ldr	r3, [r3, #8]
 800bc72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bc7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	021a      	lsls	r2, r3, #8
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	431a      	orrs	r2, r3
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	4313      	orrs	r3, r2
 800bc88:	697a      	ldr	r2, [r7, #20]
 800bc8a:	4313      	orrs	r3, r2
 800bc8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	697a      	ldr	r2, [r7, #20]
 800bc92:	609a      	str	r2, [r3, #8]
}
 800bc94:	bf00      	nop
 800bc96:	371c      	adds	r7, #28
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr

0800bca0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b085      	sub	sp, #20
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bcb0:	2b01      	cmp	r3, #1
 800bcb2:	d101      	bne.n	800bcb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bcb4:	2302      	movs	r3, #2
 800bcb6:	e06d      	b.n	800bd94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2201      	movs	r2, #1
 800bcbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2202      	movs	r2, #2
 800bcc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	685b      	ldr	r3, [r3, #4]
 800bcce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	689b      	ldr	r3, [r3, #8]
 800bcd6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	4a30      	ldr	r2, [pc, #192]	; (800bda0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	d004      	beq.n	800bcec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	4a2f      	ldr	r2, [pc, #188]	; (800bda4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bce8:	4293      	cmp	r3, r2
 800bcea:	d108      	bne.n	800bcfe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bcf2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	685b      	ldr	r3, [r3, #4]
 800bcf8:	68fa      	ldr	r2, [r7, #12]
 800bcfa:	4313      	orrs	r3, r2
 800bcfc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	68fa      	ldr	r2, [r7, #12]
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	68fa      	ldr	r2, [r7, #12]
 800bd16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	4a20      	ldr	r2, [pc, #128]	; (800bda0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d022      	beq.n	800bd68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd2a:	d01d      	beq.n	800bd68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	4a1d      	ldr	r2, [pc, #116]	; (800bda8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bd32:	4293      	cmp	r3, r2
 800bd34:	d018      	beq.n	800bd68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	4a1c      	ldr	r2, [pc, #112]	; (800bdac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bd3c:	4293      	cmp	r3, r2
 800bd3e:	d013      	beq.n	800bd68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	4a1a      	ldr	r2, [pc, #104]	; (800bdb0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bd46:	4293      	cmp	r3, r2
 800bd48:	d00e      	beq.n	800bd68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	4a15      	ldr	r2, [pc, #84]	; (800bda4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bd50:	4293      	cmp	r3, r2
 800bd52:	d009      	beq.n	800bd68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	4a16      	ldr	r2, [pc, #88]	; (800bdb4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d004      	beq.n	800bd68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	4a15      	ldr	r2, [pc, #84]	; (800bdb8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d10c      	bne.n	800bd82 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	689b      	ldr	r3, [r3, #8]
 800bd74:	68ba      	ldr	r2, [r7, #8]
 800bd76:	4313      	orrs	r3, r2
 800bd78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	68ba      	ldr	r2, [r7, #8]
 800bd80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2201      	movs	r2, #1
 800bd86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bd92:	2300      	movs	r3, #0
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	3714      	adds	r7, #20
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr
 800bda0:	40010000 	.word	0x40010000
 800bda4:	40010400 	.word	0x40010400
 800bda8:	40000400 	.word	0x40000400
 800bdac:	40000800 	.word	0x40000800
 800bdb0:	40000c00 	.word	0x40000c00
 800bdb4:	40001800 	.word	0x40001800
 800bdb8:	40014000 	.word	0x40014000

0800bdbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b082      	sub	sp, #8
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d101      	bne.n	800bdce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bdca:	2301      	movs	r3, #1
 800bdcc:	e042      	b.n	800be54 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d106      	bne.n	800bde6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2200      	movs	r2, #0
 800bddc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f7f6 fd3b 	bl	800285c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2224      	movs	r2, #36	; 0x24
 800bdea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	681a      	ldr	r2, [r3, #0]
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f022 0201 	bic.w	r2, r2, #1
 800bdfc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f000 f8ba 	bl	800bf78 <UART_SetConfig>
 800be04:	4603      	mov	r3, r0
 800be06:	2b01      	cmp	r3, #1
 800be08:	d101      	bne.n	800be0e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800be0a:	2301      	movs	r3, #1
 800be0c:	e022      	b.n	800be54 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be12:	2b00      	cmp	r3, #0
 800be14:	d002      	beq.n	800be1c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f000 fe16 	bl	800ca48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	685a      	ldr	r2, [r3, #4]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800be2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	689a      	ldr	r2, [r3, #8]
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800be3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	681a      	ldr	r2, [r3, #0]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f042 0201 	orr.w	r2, r2, #1
 800be4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f000 fe9d 	bl	800cb8c <UART_CheckIdleState>
 800be52:	4603      	mov	r3, r0
}
 800be54:	4618      	mov	r0, r3
 800be56:	3708      	adds	r7, #8
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}

0800be5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b08a      	sub	sp, #40	; 0x28
 800be60:	af02      	add	r7, sp, #8
 800be62:	60f8      	str	r0, [r7, #12]
 800be64:	60b9      	str	r1, [r7, #8]
 800be66:	603b      	str	r3, [r7, #0]
 800be68:	4613      	mov	r3, r2
 800be6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be72:	2b20      	cmp	r3, #32
 800be74:	d17b      	bne.n	800bf6e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d002      	beq.n	800be82 <HAL_UART_Transmit+0x26>
 800be7c:	88fb      	ldrh	r3, [r7, #6]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d101      	bne.n	800be86 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800be82:	2301      	movs	r3, #1
 800be84:	e074      	b.n	800bf70 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	2200      	movs	r2, #0
 800be8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	2221      	movs	r2, #33	; 0x21
 800be92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800be96:	f7f6 ffb3 	bl	8002e00 <HAL_GetTick>
 800be9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	88fa      	ldrh	r2, [r7, #6]
 800bea0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	88fa      	ldrh	r2, [r7, #6]
 800bea8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	689b      	ldr	r3, [r3, #8]
 800beb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800beb4:	d108      	bne.n	800bec8 <HAL_UART_Transmit+0x6c>
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	691b      	ldr	r3, [r3, #16]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d104      	bne.n	800bec8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800bebe:	2300      	movs	r3, #0
 800bec0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	61bb      	str	r3, [r7, #24]
 800bec6:	e003      	b.n	800bed0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800becc:	2300      	movs	r3, #0
 800bece:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bed0:	e030      	b.n	800bf34 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	9300      	str	r3, [sp, #0]
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	2200      	movs	r2, #0
 800beda:	2180      	movs	r1, #128	; 0x80
 800bedc:	68f8      	ldr	r0, [r7, #12]
 800bede:	f000 feff 	bl	800cce0 <UART_WaitOnFlagUntilTimeout>
 800bee2:	4603      	mov	r3, r0
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d005      	beq.n	800bef4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	2220      	movs	r2, #32
 800beec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800bef0:	2303      	movs	r3, #3
 800bef2:	e03d      	b.n	800bf70 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800bef4:	69fb      	ldr	r3, [r7, #28]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d10b      	bne.n	800bf12 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800befa:	69bb      	ldr	r3, [r7, #24]
 800befc:	881b      	ldrh	r3, [r3, #0]
 800befe:	461a      	mov	r2, r3
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bf08:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bf0a:	69bb      	ldr	r3, [r7, #24]
 800bf0c:	3302      	adds	r3, #2
 800bf0e:	61bb      	str	r3, [r7, #24]
 800bf10:	e007      	b.n	800bf22 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bf12:	69fb      	ldr	r3, [r7, #28]
 800bf14:	781a      	ldrb	r2, [r3, #0]
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bf1c:	69fb      	ldr	r3, [r7, #28]
 800bf1e:	3301      	adds	r3, #1
 800bf20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bf28:	b29b      	uxth	r3, r3
 800bf2a:	3b01      	subs	r3, #1
 800bf2c:	b29a      	uxth	r2, r3
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bf3a:	b29b      	uxth	r3, r3
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d1c8      	bne.n	800bed2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	9300      	str	r3, [sp, #0]
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	2200      	movs	r2, #0
 800bf48:	2140      	movs	r1, #64	; 0x40
 800bf4a:	68f8      	ldr	r0, [r7, #12]
 800bf4c:	f000 fec8 	bl	800cce0 <UART_WaitOnFlagUntilTimeout>
 800bf50:	4603      	mov	r3, r0
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d005      	beq.n	800bf62 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	2220      	movs	r2, #32
 800bf5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800bf5e:	2303      	movs	r3, #3
 800bf60:	e006      	b.n	800bf70 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	2220      	movs	r2, #32
 800bf66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	e000      	b.n	800bf70 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800bf6e:	2302      	movs	r3, #2
  }
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	3720      	adds	r7, #32
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}

0800bf78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bf78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bf7c:	b092      	sub	sp, #72	; 0x48
 800bf7e:	af00      	add	r7, sp, #0
 800bf80:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bf82:	2300      	movs	r3, #0
 800bf84:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bf88:	697b      	ldr	r3, [r7, #20]
 800bf8a:	689a      	ldr	r2, [r3, #8]
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	691b      	ldr	r3, [r3, #16]
 800bf90:	431a      	orrs	r2, r3
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	695b      	ldr	r3, [r3, #20]
 800bf96:	431a      	orrs	r2, r3
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	69db      	ldr	r3, [r3, #28]
 800bf9c:	4313      	orrs	r3, r2
 800bf9e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	681a      	ldr	r2, [r3, #0]
 800bfa6:	4bbe      	ldr	r3, [pc, #760]	; (800c2a0 <UART_SetConfig+0x328>)
 800bfa8:	4013      	ands	r3, r2
 800bfaa:	697a      	ldr	r2, [r7, #20]
 800bfac:	6812      	ldr	r2, [r2, #0]
 800bfae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bfb0:	430b      	orrs	r3, r1
 800bfb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bfb4:	697b      	ldr	r3, [r7, #20]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	685b      	ldr	r3, [r3, #4]
 800bfba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bfbe:	697b      	ldr	r3, [r7, #20]
 800bfc0:	68da      	ldr	r2, [r3, #12]
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	430a      	orrs	r2, r1
 800bfc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	699b      	ldr	r3, [r3, #24]
 800bfce:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	4ab3      	ldr	r2, [pc, #716]	; (800c2a4 <UART_SetConfig+0x32c>)
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	d004      	beq.n	800bfe4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	6a1b      	ldr	r3, [r3, #32]
 800bfde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bfe0:	4313      	orrs	r3, r2
 800bfe2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bfe4:	697b      	ldr	r3, [r7, #20]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	689a      	ldr	r2, [r3, #8]
 800bfea:	4baf      	ldr	r3, [pc, #700]	; (800c2a8 <UART_SetConfig+0x330>)
 800bfec:	4013      	ands	r3, r2
 800bfee:	697a      	ldr	r2, [r7, #20]
 800bff0:	6812      	ldr	r2, [r2, #0]
 800bff2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bff4:	430b      	orrs	r3, r1
 800bff6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bffe:	f023 010f 	bic.w	r1, r3, #15
 800c002:	697b      	ldr	r3, [r7, #20]
 800c004:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c006:	697b      	ldr	r3, [r7, #20]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	430a      	orrs	r2, r1
 800c00c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	4aa6      	ldr	r2, [pc, #664]	; (800c2ac <UART_SetConfig+0x334>)
 800c014:	4293      	cmp	r3, r2
 800c016:	d177      	bne.n	800c108 <UART_SetConfig+0x190>
 800c018:	4ba5      	ldr	r3, [pc, #660]	; (800c2b0 <UART_SetConfig+0x338>)
 800c01a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c01c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c020:	2b28      	cmp	r3, #40	; 0x28
 800c022:	d86d      	bhi.n	800c100 <UART_SetConfig+0x188>
 800c024:	a201      	add	r2, pc, #4	; (adr r2, 800c02c <UART_SetConfig+0xb4>)
 800c026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c02a:	bf00      	nop
 800c02c:	0800c0d1 	.word	0x0800c0d1
 800c030:	0800c101 	.word	0x0800c101
 800c034:	0800c101 	.word	0x0800c101
 800c038:	0800c101 	.word	0x0800c101
 800c03c:	0800c101 	.word	0x0800c101
 800c040:	0800c101 	.word	0x0800c101
 800c044:	0800c101 	.word	0x0800c101
 800c048:	0800c101 	.word	0x0800c101
 800c04c:	0800c0d9 	.word	0x0800c0d9
 800c050:	0800c101 	.word	0x0800c101
 800c054:	0800c101 	.word	0x0800c101
 800c058:	0800c101 	.word	0x0800c101
 800c05c:	0800c101 	.word	0x0800c101
 800c060:	0800c101 	.word	0x0800c101
 800c064:	0800c101 	.word	0x0800c101
 800c068:	0800c101 	.word	0x0800c101
 800c06c:	0800c0e1 	.word	0x0800c0e1
 800c070:	0800c101 	.word	0x0800c101
 800c074:	0800c101 	.word	0x0800c101
 800c078:	0800c101 	.word	0x0800c101
 800c07c:	0800c101 	.word	0x0800c101
 800c080:	0800c101 	.word	0x0800c101
 800c084:	0800c101 	.word	0x0800c101
 800c088:	0800c101 	.word	0x0800c101
 800c08c:	0800c0e9 	.word	0x0800c0e9
 800c090:	0800c101 	.word	0x0800c101
 800c094:	0800c101 	.word	0x0800c101
 800c098:	0800c101 	.word	0x0800c101
 800c09c:	0800c101 	.word	0x0800c101
 800c0a0:	0800c101 	.word	0x0800c101
 800c0a4:	0800c101 	.word	0x0800c101
 800c0a8:	0800c101 	.word	0x0800c101
 800c0ac:	0800c0f1 	.word	0x0800c0f1
 800c0b0:	0800c101 	.word	0x0800c101
 800c0b4:	0800c101 	.word	0x0800c101
 800c0b8:	0800c101 	.word	0x0800c101
 800c0bc:	0800c101 	.word	0x0800c101
 800c0c0:	0800c101 	.word	0x0800c101
 800c0c4:	0800c101 	.word	0x0800c101
 800c0c8:	0800c101 	.word	0x0800c101
 800c0cc:	0800c0f9 	.word	0x0800c0f9
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0d6:	e222      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c0d8:	2304      	movs	r3, #4
 800c0da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0de:	e21e      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c0e0:	2308      	movs	r3, #8
 800c0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0e6:	e21a      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c0e8:	2310      	movs	r3, #16
 800c0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0ee:	e216      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c0f0:	2320      	movs	r3, #32
 800c0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0f6:	e212      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c0f8:	2340      	movs	r3, #64	; 0x40
 800c0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0fe:	e20e      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c100:	2380      	movs	r3, #128	; 0x80
 800c102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c106:	e20a      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c108:	697b      	ldr	r3, [r7, #20]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a69      	ldr	r2, [pc, #420]	; (800c2b4 <UART_SetConfig+0x33c>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d130      	bne.n	800c174 <UART_SetConfig+0x1fc>
 800c112:	4b67      	ldr	r3, [pc, #412]	; (800c2b0 <UART_SetConfig+0x338>)
 800c114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c116:	f003 0307 	and.w	r3, r3, #7
 800c11a:	2b05      	cmp	r3, #5
 800c11c:	d826      	bhi.n	800c16c <UART_SetConfig+0x1f4>
 800c11e:	a201      	add	r2, pc, #4	; (adr r2, 800c124 <UART_SetConfig+0x1ac>)
 800c120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c124:	0800c13d 	.word	0x0800c13d
 800c128:	0800c145 	.word	0x0800c145
 800c12c:	0800c14d 	.word	0x0800c14d
 800c130:	0800c155 	.word	0x0800c155
 800c134:	0800c15d 	.word	0x0800c15d
 800c138:	0800c165 	.word	0x0800c165
 800c13c:	2300      	movs	r3, #0
 800c13e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c142:	e1ec      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c144:	2304      	movs	r3, #4
 800c146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c14a:	e1e8      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c14c:	2308      	movs	r3, #8
 800c14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c152:	e1e4      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c154:	2310      	movs	r3, #16
 800c156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c15a:	e1e0      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c15c:	2320      	movs	r3, #32
 800c15e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c162:	e1dc      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c164:	2340      	movs	r3, #64	; 0x40
 800c166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c16a:	e1d8      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c16c:	2380      	movs	r3, #128	; 0x80
 800c16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c172:	e1d4      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	4a4f      	ldr	r2, [pc, #316]	; (800c2b8 <UART_SetConfig+0x340>)
 800c17a:	4293      	cmp	r3, r2
 800c17c:	d130      	bne.n	800c1e0 <UART_SetConfig+0x268>
 800c17e:	4b4c      	ldr	r3, [pc, #304]	; (800c2b0 <UART_SetConfig+0x338>)
 800c180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c182:	f003 0307 	and.w	r3, r3, #7
 800c186:	2b05      	cmp	r3, #5
 800c188:	d826      	bhi.n	800c1d8 <UART_SetConfig+0x260>
 800c18a:	a201      	add	r2, pc, #4	; (adr r2, 800c190 <UART_SetConfig+0x218>)
 800c18c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c190:	0800c1a9 	.word	0x0800c1a9
 800c194:	0800c1b1 	.word	0x0800c1b1
 800c198:	0800c1b9 	.word	0x0800c1b9
 800c19c:	0800c1c1 	.word	0x0800c1c1
 800c1a0:	0800c1c9 	.word	0x0800c1c9
 800c1a4:	0800c1d1 	.word	0x0800c1d1
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1ae:	e1b6      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c1b0:	2304      	movs	r3, #4
 800c1b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1b6:	e1b2      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c1b8:	2308      	movs	r3, #8
 800c1ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1be:	e1ae      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c1c0:	2310      	movs	r3, #16
 800c1c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1c6:	e1aa      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c1c8:	2320      	movs	r3, #32
 800c1ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1ce:	e1a6      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c1d0:	2340      	movs	r3, #64	; 0x40
 800c1d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1d6:	e1a2      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c1d8:	2380      	movs	r3, #128	; 0x80
 800c1da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1de:	e19e      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	4a35      	ldr	r2, [pc, #212]	; (800c2bc <UART_SetConfig+0x344>)
 800c1e6:	4293      	cmp	r3, r2
 800c1e8:	d130      	bne.n	800c24c <UART_SetConfig+0x2d4>
 800c1ea:	4b31      	ldr	r3, [pc, #196]	; (800c2b0 <UART_SetConfig+0x338>)
 800c1ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1ee:	f003 0307 	and.w	r3, r3, #7
 800c1f2:	2b05      	cmp	r3, #5
 800c1f4:	d826      	bhi.n	800c244 <UART_SetConfig+0x2cc>
 800c1f6:	a201      	add	r2, pc, #4	; (adr r2, 800c1fc <UART_SetConfig+0x284>)
 800c1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1fc:	0800c215 	.word	0x0800c215
 800c200:	0800c21d 	.word	0x0800c21d
 800c204:	0800c225 	.word	0x0800c225
 800c208:	0800c22d 	.word	0x0800c22d
 800c20c:	0800c235 	.word	0x0800c235
 800c210:	0800c23d 	.word	0x0800c23d
 800c214:	2300      	movs	r3, #0
 800c216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c21a:	e180      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c21c:	2304      	movs	r3, #4
 800c21e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c222:	e17c      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c224:	2308      	movs	r3, #8
 800c226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c22a:	e178      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c22c:	2310      	movs	r3, #16
 800c22e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c232:	e174      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c234:	2320      	movs	r3, #32
 800c236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c23a:	e170      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c23c:	2340      	movs	r3, #64	; 0x40
 800c23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c242:	e16c      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c244:	2380      	movs	r3, #128	; 0x80
 800c246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c24a:	e168      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4a1b      	ldr	r2, [pc, #108]	; (800c2c0 <UART_SetConfig+0x348>)
 800c252:	4293      	cmp	r3, r2
 800c254:	d142      	bne.n	800c2dc <UART_SetConfig+0x364>
 800c256:	4b16      	ldr	r3, [pc, #88]	; (800c2b0 <UART_SetConfig+0x338>)
 800c258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c25a:	f003 0307 	and.w	r3, r3, #7
 800c25e:	2b05      	cmp	r3, #5
 800c260:	d838      	bhi.n	800c2d4 <UART_SetConfig+0x35c>
 800c262:	a201      	add	r2, pc, #4	; (adr r2, 800c268 <UART_SetConfig+0x2f0>)
 800c264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c268:	0800c281 	.word	0x0800c281
 800c26c:	0800c289 	.word	0x0800c289
 800c270:	0800c291 	.word	0x0800c291
 800c274:	0800c299 	.word	0x0800c299
 800c278:	0800c2c5 	.word	0x0800c2c5
 800c27c:	0800c2cd 	.word	0x0800c2cd
 800c280:	2300      	movs	r3, #0
 800c282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c286:	e14a      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c288:	2304      	movs	r3, #4
 800c28a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c28e:	e146      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c290:	2308      	movs	r3, #8
 800c292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c296:	e142      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c298:	2310      	movs	r3, #16
 800c29a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c29e:	e13e      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c2a0:	cfff69f3 	.word	0xcfff69f3
 800c2a4:	58000c00 	.word	0x58000c00
 800c2a8:	11fff4ff 	.word	0x11fff4ff
 800c2ac:	40011000 	.word	0x40011000
 800c2b0:	58024400 	.word	0x58024400
 800c2b4:	40004400 	.word	0x40004400
 800c2b8:	40004800 	.word	0x40004800
 800c2bc:	40004c00 	.word	0x40004c00
 800c2c0:	40005000 	.word	0x40005000
 800c2c4:	2320      	movs	r3, #32
 800c2c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ca:	e128      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c2cc:	2340      	movs	r3, #64	; 0x40
 800c2ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2d2:	e124      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c2d4:	2380      	movs	r3, #128	; 0x80
 800c2d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2da:	e120      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4acb      	ldr	r2, [pc, #812]	; (800c610 <UART_SetConfig+0x698>)
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d176      	bne.n	800c3d4 <UART_SetConfig+0x45c>
 800c2e6:	4bcb      	ldr	r3, [pc, #812]	; (800c614 <UART_SetConfig+0x69c>)
 800c2e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c2ee:	2b28      	cmp	r3, #40	; 0x28
 800c2f0:	d86c      	bhi.n	800c3cc <UART_SetConfig+0x454>
 800c2f2:	a201      	add	r2, pc, #4	; (adr r2, 800c2f8 <UART_SetConfig+0x380>)
 800c2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2f8:	0800c39d 	.word	0x0800c39d
 800c2fc:	0800c3cd 	.word	0x0800c3cd
 800c300:	0800c3cd 	.word	0x0800c3cd
 800c304:	0800c3cd 	.word	0x0800c3cd
 800c308:	0800c3cd 	.word	0x0800c3cd
 800c30c:	0800c3cd 	.word	0x0800c3cd
 800c310:	0800c3cd 	.word	0x0800c3cd
 800c314:	0800c3cd 	.word	0x0800c3cd
 800c318:	0800c3a5 	.word	0x0800c3a5
 800c31c:	0800c3cd 	.word	0x0800c3cd
 800c320:	0800c3cd 	.word	0x0800c3cd
 800c324:	0800c3cd 	.word	0x0800c3cd
 800c328:	0800c3cd 	.word	0x0800c3cd
 800c32c:	0800c3cd 	.word	0x0800c3cd
 800c330:	0800c3cd 	.word	0x0800c3cd
 800c334:	0800c3cd 	.word	0x0800c3cd
 800c338:	0800c3ad 	.word	0x0800c3ad
 800c33c:	0800c3cd 	.word	0x0800c3cd
 800c340:	0800c3cd 	.word	0x0800c3cd
 800c344:	0800c3cd 	.word	0x0800c3cd
 800c348:	0800c3cd 	.word	0x0800c3cd
 800c34c:	0800c3cd 	.word	0x0800c3cd
 800c350:	0800c3cd 	.word	0x0800c3cd
 800c354:	0800c3cd 	.word	0x0800c3cd
 800c358:	0800c3b5 	.word	0x0800c3b5
 800c35c:	0800c3cd 	.word	0x0800c3cd
 800c360:	0800c3cd 	.word	0x0800c3cd
 800c364:	0800c3cd 	.word	0x0800c3cd
 800c368:	0800c3cd 	.word	0x0800c3cd
 800c36c:	0800c3cd 	.word	0x0800c3cd
 800c370:	0800c3cd 	.word	0x0800c3cd
 800c374:	0800c3cd 	.word	0x0800c3cd
 800c378:	0800c3bd 	.word	0x0800c3bd
 800c37c:	0800c3cd 	.word	0x0800c3cd
 800c380:	0800c3cd 	.word	0x0800c3cd
 800c384:	0800c3cd 	.word	0x0800c3cd
 800c388:	0800c3cd 	.word	0x0800c3cd
 800c38c:	0800c3cd 	.word	0x0800c3cd
 800c390:	0800c3cd 	.word	0x0800c3cd
 800c394:	0800c3cd 	.word	0x0800c3cd
 800c398:	0800c3c5 	.word	0x0800c3c5
 800c39c:	2301      	movs	r3, #1
 800c39e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3a2:	e0bc      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c3a4:	2304      	movs	r3, #4
 800c3a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3aa:	e0b8      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c3ac:	2308      	movs	r3, #8
 800c3ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3b2:	e0b4      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c3b4:	2310      	movs	r3, #16
 800c3b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3ba:	e0b0      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c3bc:	2320      	movs	r3, #32
 800c3be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3c2:	e0ac      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c3c4:	2340      	movs	r3, #64	; 0x40
 800c3c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3ca:	e0a8      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c3cc:	2380      	movs	r3, #128	; 0x80
 800c3ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3d2:	e0a4      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	4a8f      	ldr	r2, [pc, #572]	; (800c618 <UART_SetConfig+0x6a0>)
 800c3da:	4293      	cmp	r3, r2
 800c3dc:	d130      	bne.n	800c440 <UART_SetConfig+0x4c8>
 800c3de:	4b8d      	ldr	r3, [pc, #564]	; (800c614 <UART_SetConfig+0x69c>)
 800c3e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3e2:	f003 0307 	and.w	r3, r3, #7
 800c3e6:	2b05      	cmp	r3, #5
 800c3e8:	d826      	bhi.n	800c438 <UART_SetConfig+0x4c0>
 800c3ea:	a201      	add	r2, pc, #4	; (adr r2, 800c3f0 <UART_SetConfig+0x478>)
 800c3ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3f0:	0800c409 	.word	0x0800c409
 800c3f4:	0800c411 	.word	0x0800c411
 800c3f8:	0800c419 	.word	0x0800c419
 800c3fc:	0800c421 	.word	0x0800c421
 800c400:	0800c429 	.word	0x0800c429
 800c404:	0800c431 	.word	0x0800c431
 800c408:	2300      	movs	r3, #0
 800c40a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c40e:	e086      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c410:	2304      	movs	r3, #4
 800c412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c416:	e082      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c418:	2308      	movs	r3, #8
 800c41a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c41e:	e07e      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c420:	2310      	movs	r3, #16
 800c422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c426:	e07a      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c428:	2320      	movs	r3, #32
 800c42a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c42e:	e076      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c430:	2340      	movs	r3, #64	; 0x40
 800c432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c436:	e072      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c438:	2380      	movs	r3, #128	; 0x80
 800c43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c43e:	e06e      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	4a75      	ldr	r2, [pc, #468]	; (800c61c <UART_SetConfig+0x6a4>)
 800c446:	4293      	cmp	r3, r2
 800c448:	d130      	bne.n	800c4ac <UART_SetConfig+0x534>
 800c44a:	4b72      	ldr	r3, [pc, #456]	; (800c614 <UART_SetConfig+0x69c>)
 800c44c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c44e:	f003 0307 	and.w	r3, r3, #7
 800c452:	2b05      	cmp	r3, #5
 800c454:	d826      	bhi.n	800c4a4 <UART_SetConfig+0x52c>
 800c456:	a201      	add	r2, pc, #4	; (adr r2, 800c45c <UART_SetConfig+0x4e4>)
 800c458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c45c:	0800c475 	.word	0x0800c475
 800c460:	0800c47d 	.word	0x0800c47d
 800c464:	0800c485 	.word	0x0800c485
 800c468:	0800c48d 	.word	0x0800c48d
 800c46c:	0800c495 	.word	0x0800c495
 800c470:	0800c49d 	.word	0x0800c49d
 800c474:	2300      	movs	r3, #0
 800c476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c47a:	e050      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c47c:	2304      	movs	r3, #4
 800c47e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c482:	e04c      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c484:	2308      	movs	r3, #8
 800c486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c48a:	e048      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c48c:	2310      	movs	r3, #16
 800c48e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c492:	e044      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c494:	2320      	movs	r3, #32
 800c496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c49a:	e040      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c49c:	2340      	movs	r3, #64	; 0x40
 800c49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4a2:	e03c      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c4a4:	2380      	movs	r3, #128	; 0x80
 800c4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4aa:	e038      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	4a5b      	ldr	r2, [pc, #364]	; (800c620 <UART_SetConfig+0x6a8>)
 800c4b2:	4293      	cmp	r3, r2
 800c4b4:	d130      	bne.n	800c518 <UART_SetConfig+0x5a0>
 800c4b6:	4b57      	ldr	r3, [pc, #348]	; (800c614 <UART_SetConfig+0x69c>)
 800c4b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4ba:	f003 0307 	and.w	r3, r3, #7
 800c4be:	2b05      	cmp	r3, #5
 800c4c0:	d826      	bhi.n	800c510 <UART_SetConfig+0x598>
 800c4c2:	a201      	add	r2, pc, #4	; (adr r2, 800c4c8 <UART_SetConfig+0x550>)
 800c4c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4c8:	0800c4e1 	.word	0x0800c4e1
 800c4cc:	0800c4e9 	.word	0x0800c4e9
 800c4d0:	0800c4f1 	.word	0x0800c4f1
 800c4d4:	0800c4f9 	.word	0x0800c4f9
 800c4d8:	0800c501 	.word	0x0800c501
 800c4dc:	0800c509 	.word	0x0800c509
 800c4e0:	2302      	movs	r3, #2
 800c4e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4e6:	e01a      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c4e8:	2304      	movs	r3, #4
 800c4ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ee:	e016      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c4f0:	2308      	movs	r3, #8
 800c4f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4f6:	e012      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c4f8:	2310      	movs	r3, #16
 800c4fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4fe:	e00e      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c500:	2320      	movs	r3, #32
 800c502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c506:	e00a      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c508:	2340      	movs	r3, #64	; 0x40
 800c50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c50e:	e006      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c510:	2380      	movs	r3, #128	; 0x80
 800c512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c516:	e002      	b.n	800c51e <UART_SetConfig+0x5a6>
 800c518:	2380      	movs	r3, #128	; 0x80
 800c51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	4a3f      	ldr	r2, [pc, #252]	; (800c620 <UART_SetConfig+0x6a8>)
 800c524:	4293      	cmp	r3, r2
 800c526:	f040 80f8 	bne.w	800c71a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c52a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c52e:	2b20      	cmp	r3, #32
 800c530:	dc46      	bgt.n	800c5c0 <UART_SetConfig+0x648>
 800c532:	2b02      	cmp	r3, #2
 800c534:	f2c0 8082 	blt.w	800c63c <UART_SetConfig+0x6c4>
 800c538:	3b02      	subs	r3, #2
 800c53a:	2b1e      	cmp	r3, #30
 800c53c:	d87e      	bhi.n	800c63c <UART_SetConfig+0x6c4>
 800c53e:	a201      	add	r2, pc, #4	; (adr r2, 800c544 <UART_SetConfig+0x5cc>)
 800c540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c544:	0800c5c7 	.word	0x0800c5c7
 800c548:	0800c63d 	.word	0x0800c63d
 800c54c:	0800c5cf 	.word	0x0800c5cf
 800c550:	0800c63d 	.word	0x0800c63d
 800c554:	0800c63d 	.word	0x0800c63d
 800c558:	0800c63d 	.word	0x0800c63d
 800c55c:	0800c5df 	.word	0x0800c5df
 800c560:	0800c63d 	.word	0x0800c63d
 800c564:	0800c63d 	.word	0x0800c63d
 800c568:	0800c63d 	.word	0x0800c63d
 800c56c:	0800c63d 	.word	0x0800c63d
 800c570:	0800c63d 	.word	0x0800c63d
 800c574:	0800c63d 	.word	0x0800c63d
 800c578:	0800c63d 	.word	0x0800c63d
 800c57c:	0800c5ef 	.word	0x0800c5ef
 800c580:	0800c63d 	.word	0x0800c63d
 800c584:	0800c63d 	.word	0x0800c63d
 800c588:	0800c63d 	.word	0x0800c63d
 800c58c:	0800c63d 	.word	0x0800c63d
 800c590:	0800c63d 	.word	0x0800c63d
 800c594:	0800c63d 	.word	0x0800c63d
 800c598:	0800c63d 	.word	0x0800c63d
 800c59c:	0800c63d 	.word	0x0800c63d
 800c5a0:	0800c63d 	.word	0x0800c63d
 800c5a4:	0800c63d 	.word	0x0800c63d
 800c5a8:	0800c63d 	.word	0x0800c63d
 800c5ac:	0800c63d 	.word	0x0800c63d
 800c5b0:	0800c63d 	.word	0x0800c63d
 800c5b4:	0800c63d 	.word	0x0800c63d
 800c5b8:	0800c63d 	.word	0x0800c63d
 800c5bc:	0800c62f 	.word	0x0800c62f
 800c5c0:	2b40      	cmp	r3, #64	; 0x40
 800c5c2:	d037      	beq.n	800c634 <UART_SetConfig+0x6bc>
 800c5c4:	e03a      	b.n	800c63c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c5c6:	f7fe fb19 	bl	800abfc <HAL_RCCEx_GetD3PCLK1Freq>
 800c5ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c5cc:	e03c      	b.n	800c648 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f7fe fb28 	bl	800ac28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5dc:	e034      	b.n	800c648 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5de:	f107 0318 	add.w	r3, r7, #24
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7fe fc74 	bl	800aed0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c5e8:	69fb      	ldr	r3, [r7, #28]
 800c5ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5ec:	e02c      	b.n	800c648 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c5ee:	4b09      	ldr	r3, [pc, #36]	; (800c614 <UART_SetConfig+0x69c>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f003 0320 	and.w	r3, r3, #32
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d016      	beq.n	800c628 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c5fa:	4b06      	ldr	r3, [pc, #24]	; (800c614 <UART_SetConfig+0x69c>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	08db      	lsrs	r3, r3, #3
 800c600:	f003 0303 	and.w	r3, r3, #3
 800c604:	4a07      	ldr	r2, [pc, #28]	; (800c624 <UART_SetConfig+0x6ac>)
 800c606:	fa22 f303 	lsr.w	r3, r2, r3
 800c60a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c60c:	e01c      	b.n	800c648 <UART_SetConfig+0x6d0>
 800c60e:	bf00      	nop
 800c610:	40011400 	.word	0x40011400
 800c614:	58024400 	.word	0x58024400
 800c618:	40007800 	.word	0x40007800
 800c61c:	40007c00 	.word	0x40007c00
 800c620:	58000c00 	.word	0x58000c00
 800c624:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c628:	4b9d      	ldr	r3, [pc, #628]	; (800c8a0 <UART_SetConfig+0x928>)
 800c62a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c62c:	e00c      	b.n	800c648 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c62e:	4b9d      	ldr	r3, [pc, #628]	; (800c8a4 <UART_SetConfig+0x92c>)
 800c630:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c632:	e009      	b.n	800c648 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c634:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c638:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c63a:	e005      	b.n	800c648 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c63c:	2300      	movs	r3, #0
 800c63e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c640:	2301      	movs	r3, #1
 800c642:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c646:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	f000 81de 	beq.w	800ca0c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c650:	697b      	ldr	r3, [r7, #20]
 800c652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c654:	4a94      	ldr	r2, [pc, #592]	; (800c8a8 <UART_SetConfig+0x930>)
 800c656:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c65a:	461a      	mov	r2, r3
 800c65c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c65e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c662:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c664:	697b      	ldr	r3, [r7, #20]
 800c666:	685a      	ldr	r2, [r3, #4]
 800c668:	4613      	mov	r3, r2
 800c66a:	005b      	lsls	r3, r3, #1
 800c66c:	4413      	add	r3, r2
 800c66e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c670:	429a      	cmp	r2, r3
 800c672:	d305      	bcc.n	800c680 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	685b      	ldr	r3, [r3, #4]
 800c678:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c67a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d903      	bls.n	800c688 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c680:	2301      	movs	r3, #1
 800c682:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c686:	e1c1      	b.n	800ca0c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c68a:	2200      	movs	r2, #0
 800c68c:	60bb      	str	r3, [r7, #8]
 800c68e:	60fa      	str	r2, [r7, #12]
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c694:	4a84      	ldr	r2, [pc, #528]	; (800c8a8 <UART_SetConfig+0x930>)
 800c696:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c69a:	b29b      	uxth	r3, r3
 800c69c:	2200      	movs	r2, #0
 800c69e:	603b      	str	r3, [r7, #0]
 800c6a0:	607a      	str	r2, [r7, #4]
 800c6a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c6aa:	f7f4 fc29 	bl	8000f00 <__aeabi_uldivmod>
 800c6ae:	4602      	mov	r2, r0
 800c6b0:	460b      	mov	r3, r1
 800c6b2:	4610      	mov	r0, r2
 800c6b4:	4619      	mov	r1, r3
 800c6b6:	f04f 0200 	mov.w	r2, #0
 800c6ba:	f04f 0300 	mov.w	r3, #0
 800c6be:	020b      	lsls	r3, r1, #8
 800c6c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c6c4:	0202      	lsls	r2, r0, #8
 800c6c6:	6979      	ldr	r1, [r7, #20]
 800c6c8:	6849      	ldr	r1, [r1, #4]
 800c6ca:	0849      	lsrs	r1, r1, #1
 800c6cc:	2000      	movs	r0, #0
 800c6ce:	460c      	mov	r4, r1
 800c6d0:	4605      	mov	r5, r0
 800c6d2:	eb12 0804 	adds.w	r8, r2, r4
 800c6d6:	eb43 0905 	adc.w	r9, r3, r5
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	685b      	ldr	r3, [r3, #4]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	469a      	mov	sl, r3
 800c6e2:	4693      	mov	fp, r2
 800c6e4:	4652      	mov	r2, sl
 800c6e6:	465b      	mov	r3, fp
 800c6e8:	4640      	mov	r0, r8
 800c6ea:	4649      	mov	r1, r9
 800c6ec:	f7f4 fc08 	bl	8000f00 <__aeabi_uldivmod>
 800c6f0:	4602      	mov	r2, r0
 800c6f2:	460b      	mov	r3, r1
 800c6f4:	4613      	mov	r3, r2
 800c6f6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c6fe:	d308      	bcc.n	800c712 <UART_SetConfig+0x79a>
 800c700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c702:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c706:	d204      	bcs.n	800c712 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c70e:	60da      	str	r2, [r3, #12]
 800c710:	e17c      	b.n	800ca0c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c712:	2301      	movs	r3, #1
 800c714:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c718:	e178      	b.n	800ca0c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	69db      	ldr	r3, [r3, #28]
 800c71e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c722:	f040 80c5 	bne.w	800c8b0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c726:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c72a:	2b20      	cmp	r3, #32
 800c72c:	dc48      	bgt.n	800c7c0 <UART_SetConfig+0x848>
 800c72e:	2b00      	cmp	r3, #0
 800c730:	db7b      	blt.n	800c82a <UART_SetConfig+0x8b2>
 800c732:	2b20      	cmp	r3, #32
 800c734:	d879      	bhi.n	800c82a <UART_SetConfig+0x8b2>
 800c736:	a201      	add	r2, pc, #4	; (adr r2, 800c73c <UART_SetConfig+0x7c4>)
 800c738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c73c:	0800c7c7 	.word	0x0800c7c7
 800c740:	0800c7cf 	.word	0x0800c7cf
 800c744:	0800c82b 	.word	0x0800c82b
 800c748:	0800c82b 	.word	0x0800c82b
 800c74c:	0800c7d7 	.word	0x0800c7d7
 800c750:	0800c82b 	.word	0x0800c82b
 800c754:	0800c82b 	.word	0x0800c82b
 800c758:	0800c82b 	.word	0x0800c82b
 800c75c:	0800c7e7 	.word	0x0800c7e7
 800c760:	0800c82b 	.word	0x0800c82b
 800c764:	0800c82b 	.word	0x0800c82b
 800c768:	0800c82b 	.word	0x0800c82b
 800c76c:	0800c82b 	.word	0x0800c82b
 800c770:	0800c82b 	.word	0x0800c82b
 800c774:	0800c82b 	.word	0x0800c82b
 800c778:	0800c82b 	.word	0x0800c82b
 800c77c:	0800c7f7 	.word	0x0800c7f7
 800c780:	0800c82b 	.word	0x0800c82b
 800c784:	0800c82b 	.word	0x0800c82b
 800c788:	0800c82b 	.word	0x0800c82b
 800c78c:	0800c82b 	.word	0x0800c82b
 800c790:	0800c82b 	.word	0x0800c82b
 800c794:	0800c82b 	.word	0x0800c82b
 800c798:	0800c82b 	.word	0x0800c82b
 800c79c:	0800c82b 	.word	0x0800c82b
 800c7a0:	0800c82b 	.word	0x0800c82b
 800c7a4:	0800c82b 	.word	0x0800c82b
 800c7a8:	0800c82b 	.word	0x0800c82b
 800c7ac:	0800c82b 	.word	0x0800c82b
 800c7b0:	0800c82b 	.word	0x0800c82b
 800c7b4:	0800c82b 	.word	0x0800c82b
 800c7b8:	0800c82b 	.word	0x0800c82b
 800c7bc:	0800c81d 	.word	0x0800c81d
 800c7c0:	2b40      	cmp	r3, #64	; 0x40
 800c7c2:	d02e      	beq.n	800c822 <UART_SetConfig+0x8aa>
 800c7c4:	e031      	b.n	800c82a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c7c6:	f7fc fa47 	bl	8008c58 <HAL_RCC_GetPCLK1Freq>
 800c7ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c7cc:	e033      	b.n	800c836 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c7ce:	f7fc fa59 	bl	8008c84 <HAL_RCC_GetPCLK2Freq>
 800c7d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c7d4:	e02f      	b.n	800c836 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f7fe fa24 	bl	800ac28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7e4:	e027      	b.n	800c836 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c7e6:	f107 0318 	add.w	r3, r7, #24
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f7fe fb70 	bl	800aed0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c7f0:	69fb      	ldr	r3, [r7, #28]
 800c7f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7f4:	e01f      	b.n	800c836 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c7f6:	4b2d      	ldr	r3, [pc, #180]	; (800c8ac <UART_SetConfig+0x934>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	f003 0320 	and.w	r3, r3, #32
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d009      	beq.n	800c816 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c802:	4b2a      	ldr	r3, [pc, #168]	; (800c8ac <UART_SetConfig+0x934>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	08db      	lsrs	r3, r3, #3
 800c808:	f003 0303 	and.w	r3, r3, #3
 800c80c:	4a24      	ldr	r2, [pc, #144]	; (800c8a0 <UART_SetConfig+0x928>)
 800c80e:	fa22 f303 	lsr.w	r3, r2, r3
 800c812:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c814:	e00f      	b.n	800c836 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c816:	4b22      	ldr	r3, [pc, #136]	; (800c8a0 <UART_SetConfig+0x928>)
 800c818:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c81a:	e00c      	b.n	800c836 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c81c:	4b21      	ldr	r3, [pc, #132]	; (800c8a4 <UART_SetConfig+0x92c>)
 800c81e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c820:	e009      	b.n	800c836 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c826:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c828:	e005      	b.n	800c836 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c82a:	2300      	movs	r3, #0
 800c82c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c82e:	2301      	movs	r3, #1
 800c830:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c834:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c838:	2b00      	cmp	r3, #0
 800c83a:	f000 80e7 	beq.w	800ca0c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c842:	4a19      	ldr	r2, [pc, #100]	; (800c8a8 <UART_SetConfig+0x930>)
 800c844:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c848:	461a      	mov	r2, r3
 800c84a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c84c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c850:	005a      	lsls	r2, r3, #1
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	685b      	ldr	r3, [r3, #4]
 800c856:	085b      	lsrs	r3, r3, #1
 800c858:	441a      	add	r2, r3
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	685b      	ldr	r3, [r3, #4]
 800c85e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c862:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c866:	2b0f      	cmp	r3, #15
 800c868:	d916      	bls.n	800c898 <UART_SetConfig+0x920>
 800c86a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c86c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c870:	d212      	bcs.n	800c898 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c874:	b29b      	uxth	r3, r3
 800c876:	f023 030f 	bic.w	r3, r3, #15
 800c87a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c87e:	085b      	lsrs	r3, r3, #1
 800c880:	b29b      	uxth	r3, r3
 800c882:	f003 0307 	and.w	r3, r3, #7
 800c886:	b29a      	uxth	r2, r3
 800c888:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c88a:	4313      	orrs	r3, r2
 800c88c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c894:	60da      	str	r2, [r3, #12]
 800c896:	e0b9      	b.n	800ca0c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c898:	2301      	movs	r3, #1
 800c89a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c89e:	e0b5      	b.n	800ca0c <UART_SetConfig+0xa94>
 800c8a0:	03d09000 	.word	0x03d09000
 800c8a4:	003d0900 	.word	0x003d0900
 800c8a8:	08010064 	.word	0x08010064
 800c8ac:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c8b0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c8b4:	2b20      	cmp	r3, #32
 800c8b6:	dc49      	bgt.n	800c94c <UART_SetConfig+0x9d4>
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	db7c      	blt.n	800c9b6 <UART_SetConfig+0xa3e>
 800c8bc:	2b20      	cmp	r3, #32
 800c8be:	d87a      	bhi.n	800c9b6 <UART_SetConfig+0xa3e>
 800c8c0:	a201      	add	r2, pc, #4	; (adr r2, 800c8c8 <UART_SetConfig+0x950>)
 800c8c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8c6:	bf00      	nop
 800c8c8:	0800c953 	.word	0x0800c953
 800c8cc:	0800c95b 	.word	0x0800c95b
 800c8d0:	0800c9b7 	.word	0x0800c9b7
 800c8d4:	0800c9b7 	.word	0x0800c9b7
 800c8d8:	0800c963 	.word	0x0800c963
 800c8dc:	0800c9b7 	.word	0x0800c9b7
 800c8e0:	0800c9b7 	.word	0x0800c9b7
 800c8e4:	0800c9b7 	.word	0x0800c9b7
 800c8e8:	0800c973 	.word	0x0800c973
 800c8ec:	0800c9b7 	.word	0x0800c9b7
 800c8f0:	0800c9b7 	.word	0x0800c9b7
 800c8f4:	0800c9b7 	.word	0x0800c9b7
 800c8f8:	0800c9b7 	.word	0x0800c9b7
 800c8fc:	0800c9b7 	.word	0x0800c9b7
 800c900:	0800c9b7 	.word	0x0800c9b7
 800c904:	0800c9b7 	.word	0x0800c9b7
 800c908:	0800c983 	.word	0x0800c983
 800c90c:	0800c9b7 	.word	0x0800c9b7
 800c910:	0800c9b7 	.word	0x0800c9b7
 800c914:	0800c9b7 	.word	0x0800c9b7
 800c918:	0800c9b7 	.word	0x0800c9b7
 800c91c:	0800c9b7 	.word	0x0800c9b7
 800c920:	0800c9b7 	.word	0x0800c9b7
 800c924:	0800c9b7 	.word	0x0800c9b7
 800c928:	0800c9b7 	.word	0x0800c9b7
 800c92c:	0800c9b7 	.word	0x0800c9b7
 800c930:	0800c9b7 	.word	0x0800c9b7
 800c934:	0800c9b7 	.word	0x0800c9b7
 800c938:	0800c9b7 	.word	0x0800c9b7
 800c93c:	0800c9b7 	.word	0x0800c9b7
 800c940:	0800c9b7 	.word	0x0800c9b7
 800c944:	0800c9b7 	.word	0x0800c9b7
 800c948:	0800c9a9 	.word	0x0800c9a9
 800c94c:	2b40      	cmp	r3, #64	; 0x40
 800c94e:	d02e      	beq.n	800c9ae <UART_SetConfig+0xa36>
 800c950:	e031      	b.n	800c9b6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c952:	f7fc f981 	bl	8008c58 <HAL_RCC_GetPCLK1Freq>
 800c956:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c958:	e033      	b.n	800c9c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c95a:	f7fc f993 	bl	8008c84 <HAL_RCC_GetPCLK2Freq>
 800c95e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c960:	e02f      	b.n	800c9c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c966:	4618      	mov	r0, r3
 800c968:	f7fe f95e 	bl	800ac28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c96e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c970:	e027      	b.n	800c9c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c972:	f107 0318 	add.w	r3, r7, #24
 800c976:	4618      	mov	r0, r3
 800c978:	f7fe faaa 	bl	800aed0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c97c:	69fb      	ldr	r3, [r7, #28]
 800c97e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c980:	e01f      	b.n	800c9c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c982:	4b2d      	ldr	r3, [pc, #180]	; (800ca38 <UART_SetConfig+0xac0>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	f003 0320 	and.w	r3, r3, #32
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d009      	beq.n	800c9a2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c98e:	4b2a      	ldr	r3, [pc, #168]	; (800ca38 <UART_SetConfig+0xac0>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	08db      	lsrs	r3, r3, #3
 800c994:	f003 0303 	and.w	r3, r3, #3
 800c998:	4a28      	ldr	r2, [pc, #160]	; (800ca3c <UART_SetConfig+0xac4>)
 800c99a:	fa22 f303 	lsr.w	r3, r2, r3
 800c99e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c9a0:	e00f      	b.n	800c9c2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c9a2:	4b26      	ldr	r3, [pc, #152]	; (800ca3c <UART_SetConfig+0xac4>)
 800c9a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9a6:	e00c      	b.n	800c9c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c9a8:	4b25      	ldr	r3, [pc, #148]	; (800ca40 <UART_SetConfig+0xac8>)
 800c9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9ac:	e009      	b.n	800c9c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c9ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c9b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9b4:	e005      	b.n	800c9c2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c9c0:	bf00      	nop
    }

    if (pclk != 0U)
 800c9c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d021      	beq.n	800ca0c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c9c8:	697b      	ldr	r3, [r7, #20]
 800c9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9cc:	4a1d      	ldr	r2, [pc, #116]	; (800ca44 <UART_SetConfig+0xacc>)
 800c9ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9d2:	461a      	mov	r2, r3
 800c9d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9d6:	fbb3 f2f2 	udiv	r2, r3, r2
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	685b      	ldr	r3, [r3, #4]
 800c9de:	085b      	lsrs	r3, r3, #1
 800c9e0:	441a      	add	r2, r3
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	685b      	ldr	r3, [r3, #4]
 800c9e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9ea:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ee:	2b0f      	cmp	r3, #15
 800c9f0:	d909      	bls.n	800ca06 <UART_SetConfig+0xa8e>
 800c9f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9f8:	d205      	bcs.n	800ca06 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9fc:	b29a      	uxth	r2, r3
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	60da      	str	r2, [r3, #12]
 800ca04:	e002      	b.n	800ca0c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ca06:	2301      	movs	r3, #1
 800ca08:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	2201      	movs	r2, #1
 800ca10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ca14:	697b      	ldr	r3, [r7, #20]
 800ca16:	2201      	movs	r2, #1
 800ca18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ca1c:	697b      	ldr	r3, [r7, #20]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	2200      	movs	r2, #0
 800ca26:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ca28:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3748      	adds	r7, #72	; 0x48
 800ca30:	46bd      	mov	sp, r7
 800ca32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ca36:	bf00      	nop
 800ca38:	58024400 	.word	0x58024400
 800ca3c:	03d09000 	.word	0x03d09000
 800ca40:	003d0900 	.word	0x003d0900
 800ca44:	08010064 	.word	0x08010064

0800ca48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ca48:	b480      	push	{r7}
 800ca4a:	b083      	sub	sp, #12
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca54:	f003 0301 	and.w	r3, r3, #1
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d00a      	beq.n	800ca72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	685b      	ldr	r3, [r3, #4]
 800ca62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	430a      	orrs	r2, r1
 800ca70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca76:	f003 0302 	and.w	r3, r3, #2
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d00a      	beq.n	800ca94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	685b      	ldr	r3, [r3, #4]
 800ca84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	430a      	orrs	r2, r1
 800ca92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca98:	f003 0304 	and.w	r3, r3, #4
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d00a      	beq.n	800cab6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	685b      	ldr	r3, [r3, #4]
 800caa6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	430a      	orrs	r2, r1
 800cab4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caba:	f003 0308 	and.w	r3, r3, #8
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d00a      	beq.n	800cad8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	685b      	ldr	r3, [r3, #4]
 800cac8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	430a      	orrs	r2, r1
 800cad6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cadc:	f003 0310 	and.w	r3, r3, #16
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d00a      	beq.n	800cafa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	689b      	ldr	r3, [r3, #8]
 800caea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	430a      	orrs	r2, r1
 800caf8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cafe:	f003 0320 	and.w	r3, r3, #32
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d00a      	beq.n	800cb1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	689b      	ldr	r3, [r3, #8]
 800cb0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	430a      	orrs	r2, r1
 800cb1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d01a      	beq.n	800cb5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	685b      	ldr	r3, [r3, #4]
 800cb2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	430a      	orrs	r2, r1
 800cb3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cb46:	d10a      	bne.n	800cb5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	685b      	ldr	r3, [r3, #4]
 800cb4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	430a      	orrs	r2, r1
 800cb5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d00a      	beq.n	800cb80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	430a      	orrs	r2, r1
 800cb7e:	605a      	str	r2, [r3, #4]
  }
}
 800cb80:	bf00      	nop
 800cb82:	370c      	adds	r7, #12
 800cb84:	46bd      	mov	sp, r7
 800cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8a:	4770      	bx	lr

0800cb8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b098      	sub	sp, #96	; 0x60
 800cb90:	af02      	add	r7, sp, #8
 800cb92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2200      	movs	r2, #0
 800cb98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cb9c:	f7f6 f930 	bl	8002e00 <HAL_GetTick>
 800cba0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f003 0308 	and.w	r3, r3, #8
 800cbac:	2b08      	cmp	r3, #8
 800cbae:	d12f      	bne.n	800cc10 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cbb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cbb4:	9300      	str	r3, [sp, #0]
 800cbb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbb8:	2200      	movs	r2, #0
 800cbba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f000 f88e 	bl	800cce0 <UART_WaitOnFlagUntilTimeout>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d022      	beq.n	800cc10 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd2:	e853 3f00 	ldrex	r3, [r3]
 800cbd6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cbd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cbde:	653b      	str	r3, [r7, #80]	; 0x50
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	461a      	mov	r2, r3
 800cbe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbe8:	647b      	str	r3, [r7, #68]	; 0x44
 800cbea:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cbee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cbf0:	e841 2300 	strex	r3, r2, [r1]
 800cbf4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cbf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d1e6      	bne.n	800cbca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2220      	movs	r2, #32
 800cc00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2200      	movs	r2, #0
 800cc08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cc0c:	2303      	movs	r3, #3
 800cc0e:	e063      	b.n	800ccd8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f003 0304 	and.w	r3, r3, #4
 800cc1a:	2b04      	cmp	r3, #4
 800cc1c:	d149      	bne.n	800ccb2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cc1e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cc22:	9300      	str	r3, [sp, #0]
 800cc24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc26:	2200      	movs	r2, #0
 800cc28:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f000 f857 	bl	800cce0 <UART_WaitOnFlagUntilTimeout>
 800cc32:	4603      	mov	r3, r0
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d03c      	beq.n	800ccb2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc40:	e853 3f00 	ldrex	r3, [r3]
 800cc44:	623b      	str	r3, [r7, #32]
   return(result);
 800cc46:	6a3b      	ldr	r3, [r7, #32]
 800cc48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cc4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	461a      	mov	r2, r3
 800cc54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc56:	633b      	str	r3, [r7, #48]	; 0x30
 800cc58:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cc5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc5e:	e841 2300 	strex	r3, r2, [r1]
 800cc62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cc64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d1e6      	bne.n	800cc38 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	3308      	adds	r3, #8
 800cc70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	e853 3f00 	ldrex	r3, [r3]
 800cc78:	60fb      	str	r3, [r7, #12]
   return(result);
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	f023 0301 	bic.w	r3, r3, #1
 800cc80:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	3308      	adds	r3, #8
 800cc88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc8a:	61fa      	str	r2, [r7, #28]
 800cc8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc8e:	69b9      	ldr	r1, [r7, #24]
 800cc90:	69fa      	ldr	r2, [r7, #28]
 800cc92:	e841 2300 	strex	r3, r2, [r1]
 800cc96:	617b      	str	r3, [r7, #20]
   return(result);
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d1e5      	bne.n	800cc6a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	2220      	movs	r2, #32
 800cca2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	2200      	movs	r2, #0
 800ccaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ccae:	2303      	movs	r3, #3
 800ccb0:	e012      	b.n	800ccd8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2220      	movs	r2, #32
 800ccb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2220      	movs	r2, #32
 800ccbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2200      	movs	r2, #0
 800cccc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ccd6:	2300      	movs	r3, #0
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3758      	adds	r7, #88	; 0x58
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}

0800cce0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b084      	sub	sp, #16
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	60f8      	str	r0, [r7, #12]
 800cce8:	60b9      	str	r1, [r7, #8]
 800ccea:	603b      	str	r3, [r7, #0]
 800ccec:	4613      	mov	r3, r2
 800ccee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ccf0:	e049      	b.n	800cd86 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ccf2:	69bb      	ldr	r3, [r7, #24]
 800ccf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccf8:	d045      	beq.n	800cd86 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ccfa:	f7f6 f881 	bl	8002e00 <HAL_GetTick>
 800ccfe:	4602      	mov	r2, r0
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	1ad3      	subs	r3, r2, r3
 800cd04:	69ba      	ldr	r2, [r7, #24]
 800cd06:	429a      	cmp	r2, r3
 800cd08:	d302      	bcc.n	800cd10 <UART_WaitOnFlagUntilTimeout+0x30>
 800cd0a:	69bb      	ldr	r3, [r7, #24]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d101      	bne.n	800cd14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cd10:	2303      	movs	r3, #3
 800cd12:	e048      	b.n	800cda6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	f003 0304 	and.w	r3, r3, #4
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d031      	beq.n	800cd86 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	69db      	ldr	r3, [r3, #28]
 800cd28:	f003 0308 	and.w	r3, r3, #8
 800cd2c:	2b08      	cmp	r3, #8
 800cd2e:	d110      	bne.n	800cd52 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	2208      	movs	r2, #8
 800cd36:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800cd38:	68f8      	ldr	r0, [r7, #12]
 800cd3a:	f000 f839 	bl	800cdb0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	2208      	movs	r2, #8
 800cd42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	2200      	movs	r2, #0
 800cd4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800cd4e:	2301      	movs	r3, #1
 800cd50:	e029      	b.n	800cda6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	69db      	ldr	r3, [r3, #28]
 800cd58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cd5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cd60:	d111      	bne.n	800cd86 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cd6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cd6c:	68f8      	ldr	r0, [r7, #12]
 800cd6e:	f000 f81f 	bl	800cdb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	2220      	movs	r2, #32
 800cd76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800cd82:	2303      	movs	r3, #3
 800cd84:	e00f      	b.n	800cda6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	69da      	ldr	r2, [r3, #28]
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	4013      	ands	r3, r2
 800cd90:	68ba      	ldr	r2, [r7, #8]
 800cd92:	429a      	cmp	r2, r3
 800cd94:	bf0c      	ite	eq
 800cd96:	2301      	moveq	r3, #1
 800cd98:	2300      	movne	r3, #0
 800cd9a:	b2db      	uxtb	r3, r3
 800cd9c:	461a      	mov	r2, r3
 800cd9e:	79fb      	ldrb	r3, [r7, #7]
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d0a6      	beq.n	800ccf2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cda4:	2300      	movs	r3, #0
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3710      	adds	r7, #16
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}
	...

0800cdb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cdb0:	b480      	push	{r7}
 800cdb2:	b095      	sub	sp, #84	; 0x54
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdc0:	e853 3f00 	ldrex	r3, [r3]
 800cdc4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cdc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cdcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	461a      	mov	r2, r3
 800cdd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdd6:	643b      	str	r3, [r7, #64]	; 0x40
 800cdd8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdda:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cddc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cdde:	e841 2300 	strex	r3, r2, [r1]
 800cde2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d1e6      	bne.n	800cdb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	3308      	adds	r3, #8
 800cdf0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdf2:	6a3b      	ldr	r3, [r7, #32]
 800cdf4:	e853 3f00 	ldrex	r3, [r3]
 800cdf8:	61fb      	str	r3, [r7, #28]
   return(result);
 800cdfa:	69fa      	ldr	r2, [r7, #28]
 800cdfc:	4b1e      	ldr	r3, [pc, #120]	; (800ce78 <UART_EndRxTransfer+0xc8>)
 800cdfe:	4013      	ands	r3, r2
 800ce00:	64bb      	str	r3, [r7, #72]	; 0x48
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	3308      	adds	r3, #8
 800ce08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ce0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ce0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ce10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce12:	e841 2300 	strex	r3, r2, [r1]
 800ce16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ce18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d1e5      	bne.n	800cdea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce22:	2b01      	cmp	r3, #1
 800ce24:	d118      	bne.n	800ce58 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	e853 3f00 	ldrex	r3, [r3]
 800ce32:	60bb      	str	r3, [r7, #8]
   return(result);
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	f023 0310 	bic.w	r3, r3, #16
 800ce3a:	647b      	str	r3, [r7, #68]	; 0x44
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	461a      	mov	r2, r3
 800ce42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce44:	61bb      	str	r3, [r7, #24]
 800ce46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce48:	6979      	ldr	r1, [r7, #20]
 800ce4a:	69ba      	ldr	r2, [r7, #24]
 800ce4c:	e841 2300 	strex	r3, r2, [r1]
 800ce50:	613b      	str	r3, [r7, #16]
   return(result);
 800ce52:	693b      	ldr	r3, [r7, #16]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d1e6      	bne.n	800ce26 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2220      	movs	r2, #32
 800ce5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2200      	movs	r2, #0
 800ce64:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2200      	movs	r2, #0
 800ce6a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ce6c:	bf00      	nop
 800ce6e:	3754      	adds	r7, #84	; 0x54
 800ce70:	46bd      	mov	sp, r7
 800ce72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce76:	4770      	bx	lr
 800ce78:	effffffe 	.word	0xeffffffe

0800ce7c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b085      	sub	sp, #20
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ce8a:	2b01      	cmp	r3, #1
 800ce8c:	d101      	bne.n	800ce92 <HAL_UARTEx_DisableFifoMode+0x16>
 800ce8e:	2302      	movs	r3, #2
 800ce90:	e027      	b.n	800cee2 <HAL_UARTEx_DisableFifoMode+0x66>
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2201      	movs	r2, #1
 800ce96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2224      	movs	r2, #36	; 0x24
 800ce9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	681a      	ldr	r2, [r3, #0]
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	f022 0201 	bic.w	r2, r2, #1
 800ceb8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cec0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	2200      	movs	r2, #0
 800cec6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	68fa      	ldr	r2, [r7, #12]
 800cece:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2220      	movs	r2, #32
 800ced4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2200      	movs	r2, #0
 800cedc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cee0:	2300      	movs	r3, #0
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3714      	adds	r7, #20
 800cee6:	46bd      	mov	sp, r7
 800cee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceec:	4770      	bx	lr

0800ceee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ceee:	b580      	push	{r7, lr}
 800cef0:	b084      	sub	sp, #16
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]
 800cef6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cefe:	2b01      	cmp	r3, #1
 800cf00:	d101      	bne.n	800cf06 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cf02:	2302      	movs	r3, #2
 800cf04:	e02d      	b.n	800cf62 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2201      	movs	r2, #1
 800cf0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2224      	movs	r2, #36	; 0x24
 800cf12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	681a      	ldr	r2, [r3, #0]
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f022 0201 	bic.w	r2, r2, #1
 800cf2c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	689b      	ldr	r3, [r3, #8]
 800cf34:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	683a      	ldr	r2, [r7, #0]
 800cf3e:	430a      	orrs	r2, r1
 800cf40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f000 f850 	bl	800cfe8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	68fa      	ldr	r2, [r7, #12]
 800cf4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2220      	movs	r2, #32
 800cf54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cf60:	2300      	movs	r3, #0
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	3710      	adds	r7, #16
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}

0800cf6a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cf6a:	b580      	push	{r7, lr}
 800cf6c:	b084      	sub	sp, #16
 800cf6e:	af00      	add	r7, sp, #0
 800cf70:	6078      	str	r0, [r7, #4]
 800cf72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cf7a:	2b01      	cmp	r3, #1
 800cf7c:	d101      	bne.n	800cf82 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cf7e:	2302      	movs	r3, #2
 800cf80:	e02d      	b.n	800cfde <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2201      	movs	r2, #1
 800cf86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2224      	movs	r2, #36	; 0x24
 800cf8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	681a      	ldr	r2, [r3, #0]
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	f022 0201 	bic.w	r2, r2, #1
 800cfa8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	689b      	ldr	r3, [r3, #8]
 800cfb0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	683a      	ldr	r2, [r7, #0]
 800cfba:	430a      	orrs	r2, r1
 800cfbc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f000 f812 	bl	800cfe8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	68fa      	ldr	r2, [r7, #12]
 800cfca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2220      	movs	r2, #32
 800cfd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cfdc:	2300      	movs	r3, #0
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3710      	adds	r7, #16
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
	...

0800cfe8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cfe8:	b480      	push	{r7}
 800cfea:	b085      	sub	sp, #20
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d108      	bne.n	800d00a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2201      	movs	r2, #1
 800cffc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2201      	movs	r2, #1
 800d004:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d008:	e031      	b.n	800d06e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d00a:	2310      	movs	r3, #16
 800d00c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d00e:	2310      	movs	r3, #16
 800d010:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	689b      	ldr	r3, [r3, #8]
 800d018:	0e5b      	lsrs	r3, r3, #25
 800d01a:	b2db      	uxtb	r3, r3
 800d01c:	f003 0307 	and.w	r3, r3, #7
 800d020:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	689b      	ldr	r3, [r3, #8]
 800d028:	0f5b      	lsrs	r3, r3, #29
 800d02a:	b2db      	uxtb	r3, r3
 800d02c:	f003 0307 	and.w	r3, r3, #7
 800d030:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d032:	7bbb      	ldrb	r3, [r7, #14]
 800d034:	7b3a      	ldrb	r2, [r7, #12]
 800d036:	4911      	ldr	r1, [pc, #68]	; (800d07c <UARTEx_SetNbDataToProcess+0x94>)
 800d038:	5c8a      	ldrb	r2, [r1, r2]
 800d03a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d03e:	7b3a      	ldrb	r2, [r7, #12]
 800d040:	490f      	ldr	r1, [pc, #60]	; (800d080 <UARTEx_SetNbDataToProcess+0x98>)
 800d042:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d044:	fb93 f3f2 	sdiv	r3, r3, r2
 800d048:	b29a      	uxth	r2, r3
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d050:	7bfb      	ldrb	r3, [r7, #15]
 800d052:	7b7a      	ldrb	r2, [r7, #13]
 800d054:	4909      	ldr	r1, [pc, #36]	; (800d07c <UARTEx_SetNbDataToProcess+0x94>)
 800d056:	5c8a      	ldrb	r2, [r1, r2]
 800d058:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d05c:	7b7a      	ldrb	r2, [r7, #13]
 800d05e:	4908      	ldr	r1, [pc, #32]	; (800d080 <UARTEx_SetNbDataToProcess+0x98>)
 800d060:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d062:	fb93 f3f2 	sdiv	r3, r3, r2
 800d066:	b29a      	uxth	r2, r3
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d06e:	bf00      	nop
 800d070:	3714      	adds	r7, #20
 800d072:	46bd      	mov	sp, r7
 800d074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d078:	4770      	bx	lr
 800d07a:	bf00      	nop
 800d07c:	0801007c 	.word	0x0801007c
 800d080:	08010084 	.word	0x08010084

0800d084 <__errno>:
 800d084:	4b01      	ldr	r3, [pc, #4]	; (800d08c <__errno+0x8>)
 800d086:	6818      	ldr	r0, [r3, #0]
 800d088:	4770      	bx	lr
 800d08a:	bf00      	nop
 800d08c:	20000040 	.word	0x20000040

0800d090 <__libc_init_array>:
 800d090:	b570      	push	{r4, r5, r6, lr}
 800d092:	4d0d      	ldr	r5, [pc, #52]	; (800d0c8 <__libc_init_array+0x38>)
 800d094:	4c0d      	ldr	r4, [pc, #52]	; (800d0cc <__libc_init_array+0x3c>)
 800d096:	1b64      	subs	r4, r4, r5
 800d098:	10a4      	asrs	r4, r4, #2
 800d09a:	2600      	movs	r6, #0
 800d09c:	42a6      	cmp	r6, r4
 800d09e:	d109      	bne.n	800d0b4 <__libc_init_array+0x24>
 800d0a0:	4d0b      	ldr	r5, [pc, #44]	; (800d0d0 <__libc_init_array+0x40>)
 800d0a2:	4c0c      	ldr	r4, [pc, #48]	; (800d0d4 <__libc_init_array+0x44>)
 800d0a4:	f002 fd1c 	bl	800fae0 <_init>
 800d0a8:	1b64      	subs	r4, r4, r5
 800d0aa:	10a4      	asrs	r4, r4, #2
 800d0ac:	2600      	movs	r6, #0
 800d0ae:	42a6      	cmp	r6, r4
 800d0b0:	d105      	bne.n	800d0be <__libc_init_array+0x2e>
 800d0b2:	bd70      	pop	{r4, r5, r6, pc}
 800d0b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0b8:	4798      	blx	r3
 800d0ba:	3601      	adds	r6, #1
 800d0bc:	e7ee      	b.n	800d09c <__libc_init_array+0xc>
 800d0be:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0c2:	4798      	blx	r3
 800d0c4:	3601      	adds	r6, #1
 800d0c6:	e7f2      	b.n	800d0ae <__libc_init_array+0x1e>
 800d0c8:	0801046c 	.word	0x0801046c
 800d0cc:	0801046c 	.word	0x0801046c
 800d0d0:	0801046c 	.word	0x0801046c
 800d0d4:	08010470 	.word	0x08010470

0800d0d8 <memcpy>:
 800d0d8:	440a      	add	r2, r1
 800d0da:	4291      	cmp	r1, r2
 800d0dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800d0e0:	d100      	bne.n	800d0e4 <memcpy+0xc>
 800d0e2:	4770      	bx	lr
 800d0e4:	b510      	push	{r4, lr}
 800d0e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d0ee:	4291      	cmp	r1, r2
 800d0f0:	d1f9      	bne.n	800d0e6 <memcpy+0xe>
 800d0f2:	bd10      	pop	{r4, pc}

0800d0f4 <memset>:
 800d0f4:	4402      	add	r2, r0
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	4293      	cmp	r3, r2
 800d0fa:	d100      	bne.n	800d0fe <memset+0xa>
 800d0fc:	4770      	bx	lr
 800d0fe:	f803 1b01 	strb.w	r1, [r3], #1
 800d102:	e7f9      	b.n	800d0f8 <memset+0x4>

0800d104 <__cvt>:
 800d104:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d106:	ed2d 8b02 	vpush	{d8}
 800d10a:	eeb0 8b40 	vmov.f64	d8, d0
 800d10e:	b085      	sub	sp, #20
 800d110:	4617      	mov	r7, r2
 800d112:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d114:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d116:	ee18 2a90 	vmov	r2, s17
 800d11a:	f025 0520 	bic.w	r5, r5, #32
 800d11e:	2a00      	cmp	r2, #0
 800d120:	bfb6      	itet	lt
 800d122:	222d      	movlt	r2, #45	; 0x2d
 800d124:	2200      	movge	r2, #0
 800d126:	eeb1 8b40 	vneglt.f64	d8, d0
 800d12a:	2d46      	cmp	r5, #70	; 0x46
 800d12c:	460c      	mov	r4, r1
 800d12e:	701a      	strb	r2, [r3, #0]
 800d130:	d004      	beq.n	800d13c <__cvt+0x38>
 800d132:	2d45      	cmp	r5, #69	; 0x45
 800d134:	d100      	bne.n	800d138 <__cvt+0x34>
 800d136:	3401      	adds	r4, #1
 800d138:	2102      	movs	r1, #2
 800d13a:	e000      	b.n	800d13e <__cvt+0x3a>
 800d13c:	2103      	movs	r1, #3
 800d13e:	ab03      	add	r3, sp, #12
 800d140:	9301      	str	r3, [sp, #4]
 800d142:	ab02      	add	r3, sp, #8
 800d144:	9300      	str	r3, [sp, #0]
 800d146:	4622      	mov	r2, r4
 800d148:	4633      	mov	r3, r6
 800d14a:	eeb0 0b48 	vmov.f64	d0, d8
 800d14e:	f000 fdf7 	bl	800dd40 <_dtoa_r>
 800d152:	2d47      	cmp	r5, #71	; 0x47
 800d154:	d101      	bne.n	800d15a <__cvt+0x56>
 800d156:	07fb      	lsls	r3, r7, #31
 800d158:	d51a      	bpl.n	800d190 <__cvt+0x8c>
 800d15a:	2d46      	cmp	r5, #70	; 0x46
 800d15c:	eb00 0204 	add.w	r2, r0, r4
 800d160:	d10c      	bne.n	800d17c <__cvt+0x78>
 800d162:	7803      	ldrb	r3, [r0, #0]
 800d164:	2b30      	cmp	r3, #48	; 0x30
 800d166:	d107      	bne.n	800d178 <__cvt+0x74>
 800d168:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d16c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d170:	bf1c      	itt	ne
 800d172:	f1c4 0401 	rsbne	r4, r4, #1
 800d176:	6034      	strne	r4, [r6, #0]
 800d178:	6833      	ldr	r3, [r6, #0]
 800d17a:	441a      	add	r2, r3
 800d17c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d184:	bf08      	it	eq
 800d186:	9203      	streq	r2, [sp, #12]
 800d188:	2130      	movs	r1, #48	; 0x30
 800d18a:	9b03      	ldr	r3, [sp, #12]
 800d18c:	4293      	cmp	r3, r2
 800d18e:	d307      	bcc.n	800d1a0 <__cvt+0x9c>
 800d190:	9b03      	ldr	r3, [sp, #12]
 800d192:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d194:	1a1b      	subs	r3, r3, r0
 800d196:	6013      	str	r3, [r2, #0]
 800d198:	b005      	add	sp, #20
 800d19a:	ecbd 8b02 	vpop	{d8}
 800d19e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1a0:	1c5c      	adds	r4, r3, #1
 800d1a2:	9403      	str	r4, [sp, #12]
 800d1a4:	7019      	strb	r1, [r3, #0]
 800d1a6:	e7f0      	b.n	800d18a <__cvt+0x86>

0800d1a8 <__exponent>:
 800d1a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	2900      	cmp	r1, #0
 800d1ae:	bfb8      	it	lt
 800d1b0:	4249      	neglt	r1, r1
 800d1b2:	f803 2b02 	strb.w	r2, [r3], #2
 800d1b6:	bfb4      	ite	lt
 800d1b8:	222d      	movlt	r2, #45	; 0x2d
 800d1ba:	222b      	movge	r2, #43	; 0x2b
 800d1bc:	2909      	cmp	r1, #9
 800d1be:	7042      	strb	r2, [r0, #1]
 800d1c0:	dd2a      	ble.n	800d218 <__exponent+0x70>
 800d1c2:	f10d 0407 	add.w	r4, sp, #7
 800d1c6:	46a4      	mov	ip, r4
 800d1c8:	270a      	movs	r7, #10
 800d1ca:	46a6      	mov	lr, r4
 800d1cc:	460a      	mov	r2, r1
 800d1ce:	fb91 f6f7 	sdiv	r6, r1, r7
 800d1d2:	fb07 1516 	mls	r5, r7, r6, r1
 800d1d6:	3530      	adds	r5, #48	; 0x30
 800d1d8:	2a63      	cmp	r2, #99	; 0x63
 800d1da:	f104 34ff 	add.w	r4, r4, #4294967295
 800d1de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d1e2:	4631      	mov	r1, r6
 800d1e4:	dcf1      	bgt.n	800d1ca <__exponent+0x22>
 800d1e6:	3130      	adds	r1, #48	; 0x30
 800d1e8:	f1ae 0502 	sub.w	r5, lr, #2
 800d1ec:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d1f0:	1c44      	adds	r4, r0, #1
 800d1f2:	4629      	mov	r1, r5
 800d1f4:	4561      	cmp	r1, ip
 800d1f6:	d30a      	bcc.n	800d20e <__exponent+0x66>
 800d1f8:	f10d 0209 	add.w	r2, sp, #9
 800d1fc:	eba2 020e 	sub.w	r2, r2, lr
 800d200:	4565      	cmp	r5, ip
 800d202:	bf88      	it	hi
 800d204:	2200      	movhi	r2, #0
 800d206:	4413      	add	r3, r2
 800d208:	1a18      	subs	r0, r3, r0
 800d20a:	b003      	add	sp, #12
 800d20c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d20e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d212:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d216:	e7ed      	b.n	800d1f4 <__exponent+0x4c>
 800d218:	2330      	movs	r3, #48	; 0x30
 800d21a:	3130      	adds	r1, #48	; 0x30
 800d21c:	7083      	strb	r3, [r0, #2]
 800d21e:	70c1      	strb	r1, [r0, #3]
 800d220:	1d03      	adds	r3, r0, #4
 800d222:	e7f1      	b.n	800d208 <__exponent+0x60>
 800d224:	0000      	movs	r0, r0
	...

0800d228 <_printf_float>:
 800d228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d22c:	b08b      	sub	sp, #44	; 0x2c
 800d22e:	460c      	mov	r4, r1
 800d230:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800d234:	4616      	mov	r6, r2
 800d236:	461f      	mov	r7, r3
 800d238:	4605      	mov	r5, r0
 800d23a:	f001 fca7 	bl	800eb8c <_localeconv_r>
 800d23e:	f8d0 b000 	ldr.w	fp, [r0]
 800d242:	4658      	mov	r0, fp
 800d244:	f7f3 fe04 	bl	8000e50 <strlen>
 800d248:	2300      	movs	r3, #0
 800d24a:	9308      	str	r3, [sp, #32]
 800d24c:	f8d8 3000 	ldr.w	r3, [r8]
 800d250:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d254:	6822      	ldr	r2, [r4, #0]
 800d256:	3307      	adds	r3, #7
 800d258:	f023 0307 	bic.w	r3, r3, #7
 800d25c:	f103 0108 	add.w	r1, r3, #8
 800d260:	f8c8 1000 	str.w	r1, [r8]
 800d264:	4682      	mov	sl, r0
 800d266:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d26a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800d26e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800d4d0 <_printf_float+0x2a8>
 800d272:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800d276:	eeb0 6bc0 	vabs.f64	d6, d0
 800d27a:	eeb4 6b47 	vcmp.f64	d6, d7
 800d27e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d282:	dd24      	ble.n	800d2ce <_printf_float+0xa6>
 800d284:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d28c:	d502      	bpl.n	800d294 <_printf_float+0x6c>
 800d28e:	232d      	movs	r3, #45	; 0x2d
 800d290:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d294:	4b90      	ldr	r3, [pc, #576]	; (800d4d8 <_printf_float+0x2b0>)
 800d296:	4891      	ldr	r0, [pc, #580]	; (800d4dc <_printf_float+0x2b4>)
 800d298:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d29c:	bf94      	ite	ls
 800d29e:	4698      	movls	r8, r3
 800d2a0:	4680      	movhi	r8, r0
 800d2a2:	2303      	movs	r3, #3
 800d2a4:	6123      	str	r3, [r4, #16]
 800d2a6:	f022 0204 	bic.w	r2, r2, #4
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	6022      	str	r2, [r4, #0]
 800d2ae:	9304      	str	r3, [sp, #16]
 800d2b0:	9700      	str	r7, [sp, #0]
 800d2b2:	4633      	mov	r3, r6
 800d2b4:	aa09      	add	r2, sp, #36	; 0x24
 800d2b6:	4621      	mov	r1, r4
 800d2b8:	4628      	mov	r0, r5
 800d2ba:	f000 f9d3 	bl	800d664 <_printf_common>
 800d2be:	3001      	adds	r0, #1
 800d2c0:	f040 808a 	bne.w	800d3d8 <_printf_float+0x1b0>
 800d2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d2c8:	b00b      	add	sp, #44	; 0x2c
 800d2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2ce:	eeb4 0b40 	vcmp.f64	d0, d0
 800d2d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2d6:	d709      	bvc.n	800d2ec <_printf_float+0xc4>
 800d2d8:	ee10 3a90 	vmov	r3, s1
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	bfbc      	itt	lt
 800d2e0:	232d      	movlt	r3, #45	; 0x2d
 800d2e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d2e6:	487e      	ldr	r0, [pc, #504]	; (800d4e0 <_printf_float+0x2b8>)
 800d2e8:	4b7e      	ldr	r3, [pc, #504]	; (800d4e4 <_printf_float+0x2bc>)
 800d2ea:	e7d5      	b.n	800d298 <_printf_float+0x70>
 800d2ec:	6863      	ldr	r3, [r4, #4]
 800d2ee:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800d2f2:	9104      	str	r1, [sp, #16]
 800d2f4:	1c59      	adds	r1, r3, #1
 800d2f6:	d13c      	bne.n	800d372 <_printf_float+0x14a>
 800d2f8:	2306      	movs	r3, #6
 800d2fa:	6063      	str	r3, [r4, #4]
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	9303      	str	r3, [sp, #12]
 800d300:	ab08      	add	r3, sp, #32
 800d302:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800d306:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d30a:	ab07      	add	r3, sp, #28
 800d30c:	6861      	ldr	r1, [r4, #4]
 800d30e:	9300      	str	r3, [sp, #0]
 800d310:	6022      	str	r2, [r4, #0]
 800d312:	f10d 031b 	add.w	r3, sp, #27
 800d316:	4628      	mov	r0, r5
 800d318:	f7ff fef4 	bl	800d104 <__cvt>
 800d31c:	9b04      	ldr	r3, [sp, #16]
 800d31e:	9907      	ldr	r1, [sp, #28]
 800d320:	2b47      	cmp	r3, #71	; 0x47
 800d322:	4680      	mov	r8, r0
 800d324:	d108      	bne.n	800d338 <_printf_float+0x110>
 800d326:	1cc8      	adds	r0, r1, #3
 800d328:	db02      	blt.n	800d330 <_printf_float+0x108>
 800d32a:	6863      	ldr	r3, [r4, #4]
 800d32c:	4299      	cmp	r1, r3
 800d32e:	dd41      	ble.n	800d3b4 <_printf_float+0x18c>
 800d330:	f1a9 0902 	sub.w	r9, r9, #2
 800d334:	fa5f f989 	uxtb.w	r9, r9
 800d338:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d33c:	d820      	bhi.n	800d380 <_printf_float+0x158>
 800d33e:	3901      	subs	r1, #1
 800d340:	464a      	mov	r2, r9
 800d342:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d346:	9107      	str	r1, [sp, #28]
 800d348:	f7ff ff2e 	bl	800d1a8 <__exponent>
 800d34c:	9a08      	ldr	r2, [sp, #32]
 800d34e:	9004      	str	r0, [sp, #16]
 800d350:	1813      	adds	r3, r2, r0
 800d352:	2a01      	cmp	r2, #1
 800d354:	6123      	str	r3, [r4, #16]
 800d356:	dc02      	bgt.n	800d35e <_printf_float+0x136>
 800d358:	6822      	ldr	r2, [r4, #0]
 800d35a:	07d2      	lsls	r2, r2, #31
 800d35c:	d501      	bpl.n	800d362 <_printf_float+0x13a>
 800d35e:	3301      	adds	r3, #1
 800d360:	6123      	str	r3, [r4, #16]
 800d362:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d0a2      	beq.n	800d2b0 <_printf_float+0x88>
 800d36a:	232d      	movs	r3, #45	; 0x2d
 800d36c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d370:	e79e      	b.n	800d2b0 <_printf_float+0x88>
 800d372:	9904      	ldr	r1, [sp, #16]
 800d374:	2947      	cmp	r1, #71	; 0x47
 800d376:	d1c1      	bne.n	800d2fc <_printf_float+0xd4>
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d1bf      	bne.n	800d2fc <_printf_float+0xd4>
 800d37c:	2301      	movs	r3, #1
 800d37e:	e7bc      	b.n	800d2fa <_printf_float+0xd2>
 800d380:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800d384:	d118      	bne.n	800d3b8 <_printf_float+0x190>
 800d386:	2900      	cmp	r1, #0
 800d388:	6863      	ldr	r3, [r4, #4]
 800d38a:	dd0b      	ble.n	800d3a4 <_printf_float+0x17c>
 800d38c:	6121      	str	r1, [r4, #16]
 800d38e:	b913      	cbnz	r3, 800d396 <_printf_float+0x16e>
 800d390:	6822      	ldr	r2, [r4, #0]
 800d392:	07d0      	lsls	r0, r2, #31
 800d394:	d502      	bpl.n	800d39c <_printf_float+0x174>
 800d396:	3301      	adds	r3, #1
 800d398:	440b      	add	r3, r1
 800d39a:	6123      	str	r3, [r4, #16]
 800d39c:	2300      	movs	r3, #0
 800d39e:	65a1      	str	r1, [r4, #88]	; 0x58
 800d3a0:	9304      	str	r3, [sp, #16]
 800d3a2:	e7de      	b.n	800d362 <_printf_float+0x13a>
 800d3a4:	b913      	cbnz	r3, 800d3ac <_printf_float+0x184>
 800d3a6:	6822      	ldr	r2, [r4, #0]
 800d3a8:	07d2      	lsls	r2, r2, #31
 800d3aa:	d501      	bpl.n	800d3b0 <_printf_float+0x188>
 800d3ac:	3302      	adds	r3, #2
 800d3ae:	e7f4      	b.n	800d39a <_printf_float+0x172>
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	e7f2      	b.n	800d39a <_printf_float+0x172>
 800d3b4:	f04f 0967 	mov.w	r9, #103	; 0x67
 800d3b8:	9b08      	ldr	r3, [sp, #32]
 800d3ba:	4299      	cmp	r1, r3
 800d3bc:	db05      	blt.n	800d3ca <_printf_float+0x1a2>
 800d3be:	6823      	ldr	r3, [r4, #0]
 800d3c0:	6121      	str	r1, [r4, #16]
 800d3c2:	07d8      	lsls	r0, r3, #31
 800d3c4:	d5ea      	bpl.n	800d39c <_printf_float+0x174>
 800d3c6:	1c4b      	adds	r3, r1, #1
 800d3c8:	e7e7      	b.n	800d39a <_printf_float+0x172>
 800d3ca:	2900      	cmp	r1, #0
 800d3cc:	bfd4      	ite	le
 800d3ce:	f1c1 0202 	rsble	r2, r1, #2
 800d3d2:	2201      	movgt	r2, #1
 800d3d4:	4413      	add	r3, r2
 800d3d6:	e7e0      	b.n	800d39a <_printf_float+0x172>
 800d3d8:	6823      	ldr	r3, [r4, #0]
 800d3da:	055a      	lsls	r2, r3, #21
 800d3dc:	d407      	bmi.n	800d3ee <_printf_float+0x1c6>
 800d3de:	6923      	ldr	r3, [r4, #16]
 800d3e0:	4642      	mov	r2, r8
 800d3e2:	4631      	mov	r1, r6
 800d3e4:	4628      	mov	r0, r5
 800d3e6:	47b8      	blx	r7
 800d3e8:	3001      	adds	r0, #1
 800d3ea:	d12a      	bne.n	800d442 <_printf_float+0x21a>
 800d3ec:	e76a      	b.n	800d2c4 <_printf_float+0x9c>
 800d3ee:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d3f2:	f240 80e2 	bls.w	800d5ba <_printf_float+0x392>
 800d3f6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d3fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d3fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d402:	d133      	bne.n	800d46c <_printf_float+0x244>
 800d404:	4a38      	ldr	r2, [pc, #224]	; (800d4e8 <_printf_float+0x2c0>)
 800d406:	2301      	movs	r3, #1
 800d408:	4631      	mov	r1, r6
 800d40a:	4628      	mov	r0, r5
 800d40c:	47b8      	blx	r7
 800d40e:	3001      	adds	r0, #1
 800d410:	f43f af58 	beq.w	800d2c4 <_printf_float+0x9c>
 800d414:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d418:	429a      	cmp	r2, r3
 800d41a:	db02      	blt.n	800d422 <_printf_float+0x1fa>
 800d41c:	6823      	ldr	r3, [r4, #0]
 800d41e:	07d8      	lsls	r0, r3, #31
 800d420:	d50f      	bpl.n	800d442 <_printf_float+0x21a>
 800d422:	4653      	mov	r3, sl
 800d424:	465a      	mov	r2, fp
 800d426:	4631      	mov	r1, r6
 800d428:	4628      	mov	r0, r5
 800d42a:	47b8      	blx	r7
 800d42c:	3001      	adds	r0, #1
 800d42e:	f43f af49 	beq.w	800d2c4 <_printf_float+0x9c>
 800d432:	f04f 0800 	mov.w	r8, #0
 800d436:	f104 091a 	add.w	r9, r4, #26
 800d43a:	9b08      	ldr	r3, [sp, #32]
 800d43c:	3b01      	subs	r3, #1
 800d43e:	4543      	cmp	r3, r8
 800d440:	dc09      	bgt.n	800d456 <_printf_float+0x22e>
 800d442:	6823      	ldr	r3, [r4, #0]
 800d444:	079b      	lsls	r3, r3, #30
 800d446:	f100 8108 	bmi.w	800d65a <_printf_float+0x432>
 800d44a:	68e0      	ldr	r0, [r4, #12]
 800d44c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d44e:	4298      	cmp	r0, r3
 800d450:	bfb8      	it	lt
 800d452:	4618      	movlt	r0, r3
 800d454:	e738      	b.n	800d2c8 <_printf_float+0xa0>
 800d456:	2301      	movs	r3, #1
 800d458:	464a      	mov	r2, r9
 800d45a:	4631      	mov	r1, r6
 800d45c:	4628      	mov	r0, r5
 800d45e:	47b8      	blx	r7
 800d460:	3001      	adds	r0, #1
 800d462:	f43f af2f 	beq.w	800d2c4 <_printf_float+0x9c>
 800d466:	f108 0801 	add.w	r8, r8, #1
 800d46a:	e7e6      	b.n	800d43a <_printf_float+0x212>
 800d46c:	9b07      	ldr	r3, [sp, #28]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	dc3c      	bgt.n	800d4ec <_printf_float+0x2c4>
 800d472:	4a1d      	ldr	r2, [pc, #116]	; (800d4e8 <_printf_float+0x2c0>)
 800d474:	2301      	movs	r3, #1
 800d476:	4631      	mov	r1, r6
 800d478:	4628      	mov	r0, r5
 800d47a:	47b8      	blx	r7
 800d47c:	3001      	adds	r0, #1
 800d47e:	f43f af21 	beq.w	800d2c4 <_printf_float+0x9c>
 800d482:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d486:	4313      	orrs	r3, r2
 800d488:	d102      	bne.n	800d490 <_printf_float+0x268>
 800d48a:	6823      	ldr	r3, [r4, #0]
 800d48c:	07d9      	lsls	r1, r3, #31
 800d48e:	d5d8      	bpl.n	800d442 <_printf_float+0x21a>
 800d490:	4653      	mov	r3, sl
 800d492:	465a      	mov	r2, fp
 800d494:	4631      	mov	r1, r6
 800d496:	4628      	mov	r0, r5
 800d498:	47b8      	blx	r7
 800d49a:	3001      	adds	r0, #1
 800d49c:	f43f af12 	beq.w	800d2c4 <_printf_float+0x9c>
 800d4a0:	f04f 0900 	mov.w	r9, #0
 800d4a4:	f104 0a1a 	add.w	sl, r4, #26
 800d4a8:	9b07      	ldr	r3, [sp, #28]
 800d4aa:	425b      	negs	r3, r3
 800d4ac:	454b      	cmp	r3, r9
 800d4ae:	dc01      	bgt.n	800d4b4 <_printf_float+0x28c>
 800d4b0:	9b08      	ldr	r3, [sp, #32]
 800d4b2:	e795      	b.n	800d3e0 <_printf_float+0x1b8>
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	4652      	mov	r2, sl
 800d4b8:	4631      	mov	r1, r6
 800d4ba:	4628      	mov	r0, r5
 800d4bc:	47b8      	blx	r7
 800d4be:	3001      	adds	r0, #1
 800d4c0:	f43f af00 	beq.w	800d2c4 <_printf_float+0x9c>
 800d4c4:	f109 0901 	add.w	r9, r9, #1
 800d4c8:	e7ee      	b.n	800d4a8 <_printf_float+0x280>
 800d4ca:	bf00      	nop
 800d4cc:	f3af 8000 	nop.w
 800d4d0:	ffffffff 	.word	0xffffffff
 800d4d4:	7fefffff 	.word	0x7fefffff
 800d4d8:	08010090 	.word	0x08010090
 800d4dc:	08010094 	.word	0x08010094
 800d4e0:	0801009c 	.word	0x0801009c
 800d4e4:	08010098 	.word	0x08010098
 800d4e8:	080100a0 	.word	0x080100a0
 800d4ec:	9a08      	ldr	r2, [sp, #32]
 800d4ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	bfa8      	it	ge
 800d4f4:	461a      	movge	r2, r3
 800d4f6:	2a00      	cmp	r2, #0
 800d4f8:	4691      	mov	r9, r2
 800d4fa:	dc38      	bgt.n	800d56e <_printf_float+0x346>
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	9305      	str	r3, [sp, #20]
 800d500:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d504:	f104 021a 	add.w	r2, r4, #26
 800d508:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d50a:	9905      	ldr	r1, [sp, #20]
 800d50c:	9304      	str	r3, [sp, #16]
 800d50e:	eba3 0309 	sub.w	r3, r3, r9
 800d512:	428b      	cmp	r3, r1
 800d514:	dc33      	bgt.n	800d57e <_printf_float+0x356>
 800d516:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d51a:	429a      	cmp	r2, r3
 800d51c:	db3c      	blt.n	800d598 <_printf_float+0x370>
 800d51e:	6823      	ldr	r3, [r4, #0]
 800d520:	07da      	lsls	r2, r3, #31
 800d522:	d439      	bmi.n	800d598 <_printf_float+0x370>
 800d524:	9b08      	ldr	r3, [sp, #32]
 800d526:	9a04      	ldr	r2, [sp, #16]
 800d528:	9907      	ldr	r1, [sp, #28]
 800d52a:	1a9a      	subs	r2, r3, r2
 800d52c:	eba3 0901 	sub.w	r9, r3, r1
 800d530:	4591      	cmp	r9, r2
 800d532:	bfa8      	it	ge
 800d534:	4691      	movge	r9, r2
 800d536:	f1b9 0f00 	cmp.w	r9, #0
 800d53a:	dc35      	bgt.n	800d5a8 <_printf_float+0x380>
 800d53c:	f04f 0800 	mov.w	r8, #0
 800d540:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d544:	f104 0a1a 	add.w	sl, r4, #26
 800d548:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d54c:	1a9b      	subs	r3, r3, r2
 800d54e:	eba3 0309 	sub.w	r3, r3, r9
 800d552:	4543      	cmp	r3, r8
 800d554:	f77f af75 	ble.w	800d442 <_printf_float+0x21a>
 800d558:	2301      	movs	r3, #1
 800d55a:	4652      	mov	r2, sl
 800d55c:	4631      	mov	r1, r6
 800d55e:	4628      	mov	r0, r5
 800d560:	47b8      	blx	r7
 800d562:	3001      	adds	r0, #1
 800d564:	f43f aeae 	beq.w	800d2c4 <_printf_float+0x9c>
 800d568:	f108 0801 	add.w	r8, r8, #1
 800d56c:	e7ec      	b.n	800d548 <_printf_float+0x320>
 800d56e:	4613      	mov	r3, r2
 800d570:	4631      	mov	r1, r6
 800d572:	4642      	mov	r2, r8
 800d574:	4628      	mov	r0, r5
 800d576:	47b8      	blx	r7
 800d578:	3001      	adds	r0, #1
 800d57a:	d1bf      	bne.n	800d4fc <_printf_float+0x2d4>
 800d57c:	e6a2      	b.n	800d2c4 <_printf_float+0x9c>
 800d57e:	2301      	movs	r3, #1
 800d580:	4631      	mov	r1, r6
 800d582:	4628      	mov	r0, r5
 800d584:	9204      	str	r2, [sp, #16]
 800d586:	47b8      	blx	r7
 800d588:	3001      	adds	r0, #1
 800d58a:	f43f ae9b 	beq.w	800d2c4 <_printf_float+0x9c>
 800d58e:	9b05      	ldr	r3, [sp, #20]
 800d590:	9a04      	ldr	r2, [sp, #16]
 800d592:	3301      	adds	r3, #1
 800d594:	9305      	str	r3, [sp, #20]
 800d596:	e7b7      	b.n	800d508 <_printf_float+0x2e0>
 800d598:	4653      	mov	r3, sl
 800d59a:	465a      	mov	r2, fp
 800d59c:	4631      	mov	r1, r6
 800d59e:	4628      	mov	r0, r5
 800d5a0:	47b8      	blx	r7
 800d5a2:	3001      	adds	r0, #1
 800d5a4:	d1be      	bne.n	800d524 <_printf_float+0x2fc>
 800d5a6:	e68d      	b.n	800d2c4 <_printf_float+0x9c>
 800d5a8:	9a04      	ldr	r2, [sp, #16]
 800d5aa:	464b      	mov	r3, r9
 800d5ac:	4442      	add	r2, r8
 800d5ae:	4631      	mov	r1, r6
 800d5b0:	4628      	mov	r0, r5
 800d5b2:	47b8      	blx	r7
 800d5b4:	3001      	adds	r0, #1
 800d5b6:	d1c1      	bne.n	800d53c <_printf_float+0x314>
 800d5b8:	e684      	b.n	800d2c4 <_printf_float+0x9c>
 800d5ba:	9a08      	ldr	r2, [sp, #32]
 800d5bc:	2a01      	cmp	r2, #1
 800d5be:	dc01      	bgt.n	800d5c4 <_printf_float+0x39c>
 800d5c0:	07db      	lsls	r3, r3, #31
 800d5c2:	d537      	bpl.n	800d634 <_printf_float+0x40c>
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	4642      	mov	r2, r8
 800d5c8:	4631      	mov	r1, r6
 800d5ca:	4628      	mov	r0, r5
 800d5cc:	47b8      	blx	r7
 800d5ce:	3001      	adds	r0, #1
 800d5d0:	f43f ae78 	beq.w	800d2c4 <_printf_float+0x9c>
 800d5d4:	4653      	mov	r3, sl
 800d5d6:	465a      	mov	r2, fp
 800d5d8:	4631      	mov	r1, r6
 800d5da:	4628      	mov	r0, r5
 800d5dc:	47b8      	blx	r7
 800d5de:	3001      	adds	r0, #1
 800d5e0:	f43f ae70 	beq.w	800d2c4 <_printf_float+0x9c>
 800d5e4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d5e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d5ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5f0:	d01b      	beq.n	800d62a <_printf_float+0x402>
 800d5f2:	9b08      	ldr	r3, [sp, #32]
 800d5f4:	f108 0201 	add.w	r2, r8, #1
 800d5f8:	3b01      	subs	r3, #1
 800d5fa:	4631      	mov	r1, r6
 800d5fc:	4628      	mov	r0, r5
 800d5fe:	47b8      	blx	r7
 800d600:	3001      	adds	r0, #1
 800d602:	d10e      	bne.n	800d622 <_printf_float+0x3fa>
 800d604:	e65e      	b.n	800d2c4 <_printf_float+0x9c>
 800d606:	2301      	movs	r3, #1
 800d608:	464a      	mov	r2, r9
 800d60a:	4631      	mov	r1, r6
 800d60c:	4628      	mov	r0, r5
 800d60e:	47b8      	blx	r7
 800d610:	3001      	adds	r0, #1
 800d612:	f43f ae57 	beq.w	800d2c4 <_printf_float+0x9c>
 800d616:	f108 0801 	add.w	r8, r8, #1
 800d61a:	9b08      	ldr	r3, [sp, #32]
 800d61c:	3b01      	subs	r3, #1
 800d61e:	4543      	cmp	r3, r8
 800d620:	dcf1      	bgt.n	800d606 <_printf_float+0x3de>
 800d622:	9b04      	ldr	r3, [sp, #16]
 800d624:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d628:	e6db      	b.n	800d3e2 <_printf_float+0x1ba>
 800d62a:	f04f 0800 	mov.w	r8, #0
 800d62e:	f104 091a 	add.w	r9, r4, #26
 800d632:	e7f2      	b.n	800d61a <_printf_float+0x3f2>
 800d634:	2301      	movs	r3, #1
 800d636:	4642      	mov	r2, r8
 800d638:	e7df      	b.n	800d5fa <_printf_float+0x3d2>
 800d63a:	2301      	movs	r3, #1
 800d63c:	464a      	mov	r2, r9
 800d63e:	4631      	mov	r1, r6
 800d640:	4628      	mov	r0, r5
 800d642:	47b8      	blx	r7
 800d644:	3001      	adds	r0, #1
 800d646:	f43f ae3d 	beq.w	800d2c4 <_printf_float+0x9c>
 800d64a:	f108 0801 	add.w	r8, r8, #1
 800d64e:	68e3      	ldr	r3, [r4, #12]
 800d650:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d652:	1a5b      	subs	r3, r3, r1
 800d654:	4543      	cmp	r3, r8
 800d656:	dcf0      	bgt.n	800d63a <_printf_float+0x412>
 800d658:	e6f7      	b.n	800d44a <_printf_float+0x222>
 800d65a:	f04f 0800 	mov.w	r8, #0
 800d65e:	f104 0919 	add.w	r9, r4, #25
 800d662:	e7f4      	b.n	800d64e <_printf_float+0x426>

0800d664 <_printf_common>:
 800d664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d668:	4616      	mov	r6, r2
 800d66a:	4699      	mov	r9, r3
 800d66c:	688a      	ldr	r2, [r1, #8]
 800d66e:	690b      	ldr	r3, [r1, #16]
 800d670:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d674:	4293      	cmp	r3, r2
 800d676:	bfb8      	it	lt
 800d678:	4613      	movlt	r3, r2
 800d67a:	6033      	str	r3, [r6, #0]
 800d67c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d680:	4607      	mov	r7, r0
 800d682:	460c      	mov	r4, r1
 800d684:	b10a      	cbz	r2, 800d68a <_printf_common+0x26>
 800d686:	3301      	adds	r3, #1
 800d688:	6033      	str	r3, [r6, #0]
 800d68a:	6823      	ldr	r3, [r4, #0]
 800d68c:	0699      	lsls	r1, r3, #26
 800d68e:	bf42      	ittt	mi
 800d690:	6833      	ldrmi	r3, [r6, #0]
 800d692:	3302      	addmi	r3, #2
 800d694:	6033      	strmi	r3, [r6, #0]
 800d696:	6825      	ldr	r5, [r4, #0]
 800d698:	f015 0506 	ands.w	r5, r5, #6
 800d69c:	d106      	bne.n	800d6ac <_printf_common+0x48>
 800d69e:	f104 0a19 	add.w	sl, r4, #25
 800d6a2:	68e3      	ldr	r3, [r4, #12]
 800d6a4:	6832      	ldr	r2, [r6, #0]
 800d6a6:	1a9b      	subs	r3, r3, r2
 800d6a8:	42ab      	cmp	r3, r5
 800d6aa:	dc26      	bgt.n	800d6fa <_printf_common+0x96>
 800d6ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d6b0:	1e13      	subs	r3, r2, #0
 800d6b2:	6822      	ldr	r2, [r4, #0]
 800d6b4:	bf18      	it	ne
 800d6b6:	2301      	movne	r3, #1
 800d6b8:	0692      	lsls	r2, r2, #26
 800d6ba:	d42b      	bmi.n	800d714 <_printf_common+0xb0>
 800d6bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d6c0:	4649      	mov	r1, r9
 800d6c2:	4638      	mov	r0, r7
 800d6c4:	47c0      	blx	r8
 800d6c6:	3001      	adds	r0, #1
 800d6c8:	d01e      	beq.n	800d708 <_printf_common+0xa4>
 800d6ca:	6823      	ldr	r3, [r4, #0]
 800d6cc:	68e5      	ldr	r5, [r4, #12]
 800d6ce:	6832      	ldr	r2, [r6, #0]
 800d6d0:	f003 0306 	and.w	r3, r3, #6
 800d6d4:	2b04      	cmp	r3, #4
 800d6d6:	bf08      	it	eq
 800d6d8:	1aad      	subeq	r5, r5, r2
 800d6da:	68a3      	ldr	r3, [r4, #8]
 800d6dc:	6922      	ldr	r2, [r4, #16]
 800d6de:	bf0c      	ite	eq
 800d6e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d6e4:	2500      	movne	r5, #0
 800d6e6:	4293      	cmp	r3, r2
 800d6e8:	bfc4      	itt	gt
 800d6ea:	1a9b      	subgt	r3, r3, r2
 800d6ec:	18ed      	addgt	r5, r5, r3
 800d6ee:	2600      	movs	r6, #0
 800d6f0:	341a      	adds	r4, #26
 800d6f2:	42b5      	cmp	r5, r6
 800d6f4:	d11a      	bne.n	800d72c <_printf_common+0xc8>
 800d6f6:	2000      	movs	r0, #0
 800d6f8:	e008      	b.n	800d70c <_printf_common+0xa8>
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	4652      	mov	r2, sl
 800d6fe:	4649      	mov	r1, r9
 800d700:	4638      	mov	r0, r7
 800d702:	47c0      	blx	r8
 800d704:	3001      	adds	r0, #1
 800d706:	d103      	bne.n	800d710 <_printf_common+0xac>
 800d708:	f04f 30ff 	mov.w	r0, #4294967295
 800d70c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d710:	3501      	adds	r5, #1
 800d712:	e7c6      	b.n	800d6a2 <_printf_common+0x3e>
 800d714:	18e1      	adds	r1, r4, r3
 800d716:	1c5a      	adds	r2, r3, #1
 800d718:	2030      	movs	r0, #48	; 0x30
 800d71a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d71e:	4422      	add	r2, r4
 800d720:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d724:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d728:	3302      	adds	r3, #2
 800d72a:	e7c7      	b.n	800d6bc <_printf_common+0x58>
 800d72c:	2301      	movs	r3, #1
 800d72e:	4622      	mov	r2, r4
 800d730:	4649      	mov	r1, r9
 800d732:	4638      	mov	r0, r7
 800d734:	47c0      	blx	r8
 800d736:	3001      	adds	r0, #1
 800d738:	d0e6      	beq.n	800d708 <_printf_common+0xa4>
 800d73a:	3601      	adds	r6, #1
 800d73c:	e7d9      	b.n	800d6f2 <_printf_common+0x8e>
	...

0800d740 <_printf_i>:
 800d740:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d744:	7e0f      	ldrb	r7, [r1, #24]
 800d746:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d748:	2f78      	cmp	r7, #120	; 0x78
 800d74a:	4691      	mov	r9, r2
 800d74c:	4680      	mov	r8, r0
 800d74e:	460c      	mov	r4, r1
 800d750:	469a      	mov	sl, r3
 800d752:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d756:	d807      	bhi.n	800d768 <_printf_i+0x28>
 800d758:	2f62      	cmp	r7, #98	; 0x62
 800d75a:	d80a      	bhi.n	800d772 <_printf_i+0x32>
 800d75c:	2f00      	cmp	r7, #0
 800d75e:	f000 80d8 	beq.w	800d912 <_printf_i+0x1d2>
 800d762:	2f58      	cmp	r7, #88	; 0x58
 800d764:	f000 80a3 	beq.w	800d8ae <_printf_i+0x16e>
 800d768:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d76c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d770:	e03a      	b.n	800d7e8 <_printf_i+0xa8>
 800d772:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d776:	2b15      	cmp	r3, #21
 800d778:	d8f6      	bhi.n	800d768 <_printf_i+0x28>
 800d77a:	a101      	add	r1, pc, #4	; (adr r1, 800d780 <_printf_i+0x40>)
 800d77c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d780:	0800d7d9 	.word	0x0800d7d9
 800d784:	0800d7ed 	.word	0x0800d7ed
 800d788:	0800d769 	.word	0x0800d769
 800d78c:	0800d769 	.word	0x0800d769
 800d790:	0800d769 	.word	0x0800d769
 800d794:	0800d769 	.word	0x0800d769
 800d798:	0800d7ed 	.word	0x0800d7ed
 800d79c:	0800d769 	.word	0x0800d769
 800d7a0:	0800d769 	.word	0x0800d769
 800d7a4:	0800d769 	.word	0x0800d769
 800d7a8:	0800d769 	.word	0x0800d769
 800d7ac:	0800d8f9 	.word	0x0800d8f9
 800d7b0:	0800d81d 	.word	0x0800d81d
 800d7b4:	0800d8db 	.word	0x0800d8db
 800d7b8:	0800d769 	.word	0x0800d769
 800d7bc:	0800d769 	.word	0x0800d769
 800d7c0:	0800d91b 	.word	0x0800d91b
 800d7c4:	0800d769 	.word	0x0800d769
 800d7c8:	0800d81d 	.word	0x0800d81d
 800d7cc:	0800d769 	.word	0x0800d769
 800d7d0:	0800d769 	.word	0x0800d769
 800d7d4:	0800d8e3 	.word	0x0800d8e3
 800d7d8:	682b      	ldr	r3, [r5, #0]
 800d7da:	1d1a      	adds	r2, r3, #4
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	602a      	str	r2, [r5, #0]
 800d7e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d7e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d7e8:	2301      	movs	r3, #1
 800d7ea:	e0a3      	b.n	800d934 <_printf_i+0x1f4>
 800d7ec:	6820      	ldr	r0, [r4, #0]
 800d7ee:	6829      	ldr	r1, [r5, #0]
 800d7f0:	0606      	lsls	r6, r0, #24
 800d7f2:	f101 0304 	add.w	r3, r1, #4
 800d7f6:	d50a      	bpl.n	800d80e <_printf_i+0xce>
 800d7f8:	680e      	ldr	r6, [r1, #0]
 800d7fa:	602b      	str	r3, [r5, #0]
 800d7fc:	2e00      	cmp	r6, #0
 800d7fe:	da03      	bge.n	800d808 <_printf_i+0xc8>
 800d800:	232d      	movs	r3, #45	; 0x2d
 800d802:	4276      	negs	r6, r6
 800d804:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d808:	485e      	ldr	r0, [pc, #376]	; (800d984 <_printf_i+0x244>)
 800d80a:	230a      	movs	r3, #10
 800d80c:	e019      	b.n	800d842 <_printf_i+0x102>
 800d80e:	680e      	ldr	r6, [r1, #0]
 800d810:	602b      	str	r3, [r5, #0]
 800d812:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d816:	bf18      	it	ne
 800d818:	b236      	sxthne	r6, r6
 800d81a:	e7ef      	b.n	800d7fc <_printf_i+0xbc>
 800d81c:	682b      	ldr	r3, [r5, #0]
 800d81e:	6820      	ldr	r0, [r4, #0]
 800d820:	1d19      	adds	r1, r3, #4
 800d822:	6029      	str	r1, [r5, #0]
 800d824:	0601      	lsls	r1, r0, #24
 800d826:	d501      	bpl.n	800d82c <_printf_i+0xec>
 800d828:	681e      	ldr	r6, [r3, #0]
 800d82a:	e002      	b.n	800d832 <_printf_i+0xf2>
 800d82c:	0646      	lsls	r6, r0, #25
 800d82e:	d5fb      	bpl.n	800d828 <_printf_i+0xe8>
 800d830:	881e      	ldrh	r6, [r3, #0]
 800d832:	4854      	ldr	r0, [pc, #336]	; (800d984 <_printf_i+0x244>)
 800d834:	2f6f      	cmp	r7, #111	; 0x6f
 800d836:	bf0c      	ite	eq
 800d838:	2308      	moveq	r3, #8
 800d83a:	230a      	movne	r3, #10
 800d83c:	2100      	movs	r1, #0
 800d83e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d842:	6865      	ldr	r5, [r4, #4]
 800d844:	60a5      	str	r5, [r4, #8]
 800d846:	2d00      	cmp	r5, #0
 800d848:	bfa2      	ittt	ge
 800d84a:	6821      	ldrge	r1, [r4, #0]
 800d84c:	f021 0104 	bicge.w	r1, r1, #4
 800d850:	6021      	strge	r1, [r4, #0]
 800d852:	b90e      	cbnz	r6, 800d858 <_printf_i+0x118>
 800d854:	2d00      	cmp	r5, #0
 800d856:	d04d      	beq.n	800d8f4 <_printf_i+0x1b4>
 800d858:	4615      	mov	r5, r2
 800d85a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d85e:	fb03 6711 	mls	r7, r3, r1, r6
 800d862:	5dc7      	ldrb	r7, [r0, r7]
 800d864:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d868:	4637      	mov	r7, r6
 800d86a:	42bb      	cmp	r3, r7
 800d86c:	460e      	mov	r6, r1
 800d86e:	d9f4      	bls.n	800d85a <_printf_i+0x11a>
 800d870:	2b08      	cmp	r3, #8
 800d872:	d10b      	bne.n	800d88c <_printf_i+0x14c>
 800d874:	6823      	ldr	r3, [r4, #0]
 800d876:	07de      	lsls	r6, r3, #31
 800d878:	d508      	bpl.n	800d88c <_printf_i+0x14c>
 800d87a:	6923      	ldr	r3, [r4, #16]
 800d87c:	6861      	ldr	r1, [r4, #4]
 800d87e:	4299      	cmp	r1, r3
 800d880:	bfde      	ittt	le
 800d882:	2330      	movle	r3, #48	; 0x30
 800d884:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d888:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d88c:	1b52      	subs	r2, r2, r5
 800d88e:	6122      	str	r2, [r4, #16]
 800d890:	f8cd a000 	str.w	sl, [sp]
 800d894:	464b      	mov	r3, r9
 800d896:	aa03      	add	r2, sp, #12
 800d898:	4621      	mov	r1, r4
 800d89a:	4640      	mov	r0, r8
 800d89c:	f7ff fee2 	bl	800d664 <_printf_common>
 800d8a0:	3001      	adds	r0, #1
 800d8a2:	d14c      	bne.n	800d93e <_printf_i+0x1fe>
 800d8a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d8a8:	b004      	add	sp, #16
 800d8aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8ae:	4835      	ldr	r0, [pc, #212]	; (800d984 <_printf_i+0x244>)
 800d8b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d8b4:	6829      	ldr	r1, [r5, #0]
 800d8b6:	6823      	ldr	r3, [r4, #0]
 800d8b8:	f851 6b04 	ldr.w	r6, [r1], #4
 800d8bc:	6029      	str	r1, [r5, #0]
 800d8be:	061d      	lsls	r5, r3, #24
 800d8c0:	d514      	bpl.n	800d8ec <_printf_i+0x1ac>
 800d8c2:	07df      	lsls	r7, r3, #31
 800d8c4:	bf44      	itt	mi
 800d8c6:	f043 0320 	orrmi.w	r3, r3, #32
 800d8ca:	6023      	strmi	r3, [r4, #0]
 800d8cc:	b91e      	cbnz	r6, 800d8d6 <_printf_i+0x196>
 800d8ce:	6823      	ldr	r3, [r4, #0]
 800d8d0:	f023 0320 	bic.w	r3, r3, #32
 800d8d4:	6023      	str	r3, [r4, #0]
 800d8d6:	2310      	movs	r3, #16
 800d8d8:	e7b0      	b.n	800d83c <_printf_i+0xfc>
 800d8da:	6823      	ldr	r3, [r4, #0]
 800d8dc:	f043 0320 	orr.w	r3, r3, #32
 800d8e0:	6023      	str	r3, [r4, #0]
 800d8e2:	2378      	movs	r3, #120	; 0x78
 800d8e4:	4828      	ldr	r0, [pc, #160]	; (800d988 <_printf_i+0x248>)
 800d8e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d8ea:	e7e3      	b.n	800d8b4 <_printf_i+0x174>
 800d8ec:	0659      	lsls	r1, r3, #25
 800d8ee:	bf48      	it	mi
 800d8f0:	b2b6      	uxthmi	r6, r6
 800d8f2:	e7e6      	b.n	800d8c2 <_printf_i+0x182>
 800d8f4:	4615      	mov	r5, r2
 800d8f6:	e7bb      	b.n	800d870 <_printf_i+0x130>
 800d8f8:	682b      	ldr	r3, [r5, #0]
 800d8fa:	6826      	ldr	r6, [r4, #0]
 800d8fc:	6961      	ldr	r1, [r4, #20]
 800d8fe:	1d18      	adds	r0, r3, #4
 800d900:	6028      	str	r0, [r5, #0]
 800d902:	0635      	lsls	r5, r6, #24
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	d501      	bpl.n	800d90c <_printf_i+0x1cc>
 800d908:	6019      	str	r1, [r3, #0]
 800d90a:	e002      	b.n	800d912 <_printf_i+0x1d2>
 800d90c:	0670      	lsls	r0, r6, #25
 800d90e:	d5fb      	bpl.n	800d908 <_printf_i+0x1c8>
 800d910:	8019      	strh	r1, [r3, #0]
 800d912:	2300      	movs	r3, #0
 800d914:	6123      	str	r3, [r4, #16]
 800d916:	4615      	mov	r5, r2
 800d918:	e7ba      	b.n	800d890 <_printf_i+0x150>
 800d91a:	682b      	ldr	r3, [r5, #0]
 800d91c:	1d1a      	adds	r2, r3, #4
 800d91e:	602a      	str	r2, [r5, #0]
 800d920:	681d      	ldr	r5, [r3, #0]
 800d922:	6862      	ldr	r2, [r4, #4]
 800d924:	2100      	movs	r1, #0
 800d926:	4628      	mov	r0, r5
 800d928:	f7f3 fa9a 	bl	8000e60 <memchr>
 800d92c:	b108      	cbz	r0, 800d932 <_printf_i+0x1f2>
 800d92e:	1b40      	subs	r0, r0, r5
 800d930:	6060      	str	r0, [r4, #4]
 800d932:	6863      	ldr	r3, [r4, #4]
 800d934:	6123      	str	r3, [r4, #16]
 800d936:	2300      	movs	r3, #0
 800d938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d93c:	e7a8      	b.n	800d890 <_printf_i+0x150>
 800d93e:	6923      	ldr	r3, [r4, #16]
 800d940:	462a      	mov	r2, r5
 800d942:	4649      	mov	r1, r9
 800d944:	4640      	mov	r0, r8
 800d946:	47d0      	blx	sl
 800d948:	3001      	adds	r0, #1
 800d94a:	d0ab      	beq.n	800d8a4 <_printf_i+0x164>
 800d94c:	6823      	ldr	r3, [r4, #0]
 800d94e:	079b      	lsls	r3, r3, #30
 800d950:	d413      	bmi.n	800d97a <_printf_i+0x23a>
 800d952:	68e0      	ldr	r0, [r4, #12]
 800d954:	9b03      	ldr	r3, [sp, #12]
 800d956:	4298      	cmp	r0, r3
 800d958:	bfb8      	it	lt
 800d95a:	4618      	movlt	r0, r3
 800d95c:	e7a4      	b.n	800d8a8 <_printf_i+0x168>
 800d95e:	2301      	movs	r3, #1
 800d960:	4632      	mov	r2, r6
 800d962:	4649      	mov	r1, r9
 800d964:	4640      	mov	r0, r8
 800d966:	47d0      	blx	sl
 800d968:	3001      	adds	r0, #1
 800d96a:	d09b      	beq.n	800d8a4 <_printf_i+0x164>
 800d96c:	3501      	adds	r5, #1
 800d96e:	68e3      	ldr	r3, [r4, #12]
 800d970:	9903      	ldr	r1, [sp, #12]
 800d972:	1a5b      	subs	r3, r3, r1
 800d974:	42ab      	cmp	r3, r5
 800d976:	dcf2      	bgt.n	800d95e <_printf_i+0x21e>
 800d978:	e7eb      	b.n	800d952 <_printf_i+0x212>
 800d97a:	2500      	movs	r5, #0
 800d97c:	f104 0619 	add.w	r6, r4, #25
 800d980:	e7f5      	b.n	800d96e <_printf_i+0x22e>
 800d982:	bf00      	nop
 800d984:	080100a2 	.word	0x080100a2
 800d988:	080100b3 	.word	0x080100b3

0800d98c <iprintf>:
 800d98c:	b40f      	push	{r0, r1, r2, r3}
 800d98e:	4b0a      	ldr	r3, [pc, #40]	; (800d9b8 <iprintf+0x2c>)
 800d990:	b513      	push	{r0, r1, r4, lr}
 800d992:	681c      	ldr	r4, [r3, #0]
 800d994:	b124      	cbz	r4, 800d9a0 <iprintf+0x14>
 800d996:	69a3      	ldr	r3, [r4, #24]
 800d998:	b913      	cbnz	r3, 800d9a0 <iprintf+0x14>
 800d99a:	4620      	mov	r0, r4
 800d99c:	f001 f858 	bl	800ea50 <__sinit>
 800d9a0:	ab05      	add	r3, sp, #20
 800d9a2:	9a04      	ldr	r2, [sp, #16]
 800d9a4:	68a1      	ldr	r1, [r4, #8]
 800d9a6:	9301      	str	r3, [sp, #4]
 800d9a8:	4620      	mov	r0, r4
 800d9aa:	f001 fe07 	bl	800f5bc <_vfiprintf_r>
 800d9ae:	b002      	add	sp, #8
 800d9b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9b4:	b004      	add	sp, #16
 800d9b6:	4770      	bx	lr
 800d9b8:	20000040 	.word	0x20000040

0800d9bc <_puts_r>:
 800d9bc:	b570      	push	{r4, r5, r6, lr}
 800d9be:	460e      	mov	r6, r1
 800d9c0:	4605      	mov	r5, r0
 800d9c2:	b118      	cbz	r0, 800d9cc <_puts_r+0x10>
 800d9c4:	6983      	ldr	r3, [r0, #24]
 800d9c6:	b90b      	cbnz	r3, 800d9cc <_puts_r+0x10>
 800d9c8:	f001 f842 	bl	800ea50 <__sinit>
 800d9cc:	69ab      	ldr	r3, [r5, #24]
 800d9ce:	68ac      	ldr	r4, [r5, #8]
 800d9d0:	b913      	cbnz	r3, 800d9d8 <_puts_r+0x1c>
 800d9d2:	4628      	mov	r0, r5
 800d9d4:	f001 f83c 	bl	800ea50 <__sinit>
 800d9d8:	4b2c      	ldr	r3, [pc, #176]	; (800da8c <_puts_r+0xd0>)
 800d9da:	429c      	cmp	r4, r3
 800d9dc:	d120      	bne.n	800da20 <_puts_r+0x64>
 800d9de:	686c      	ldr	r4, [r5, #4]
 800d9e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d9e2:	07db      	lsls	r3, r3, #31
 800d9e4:	d405      	bmi.n	800d9f2 <_puts_r+0x36>
 800d9e6:	89a3      	ldrh	r3, [r4, #12]
 800d9e8:	0598      	lsls	r0, r3, #22
 800d9ea:	d402      	bmi.n	800d9f2 <_puts_r+0x36>
 800d9ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d9ee:	f001 f8d2 	bl	800eb96 <__retarget_lock_acquire_recursive>
 800d9f2:	89a3      	ldrh	r3, [r4, #12]
 800d9f4:	0719      	lsls	r1, r3, #28
 800d9f6:	d51d      	bpl.n	800da34 <_puts_r+0x78>
 800d9f8:	6923      	ldr	r3, [r4, #16]
 800d9fa:	b1db      	cbz	r3, 800da34 <_puts_r+0x78>
 800d9fc:	3e01      	subs	r6, #1
 800d9fe:	68a3      	ldr	r3, [r4, #8]
 800da00:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800da04:	3b01      	subs	r3, #1
 800da06:	60a3      	str	r3, [r4, #8]
 800da08:	bb39      	cbnz	r1, 800da5a <_puts_r+0x9e>
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	da38      	bge.n	800da80 <_puts_r+0xc4>
 800da0e:	4622      	mov	r2, r4
 800da10:	210a      	movs	r1, #10
 800da12:	4628      	mov	r0, r5
 800da14:	f000 f848 	bl	800daa8 <__swbuf_r>
 800da18:	3001      	adds	r0, #1
 800da1a:	d011      	beq.n	800da40 <_puts_r+0x84>
 800da1c:	250a      	movs	r5, #10
 800da1e:	e011      	b.n	800da44 <_puts_r+0x88>
 800da20:	4b1b      	ldr	r3, [pc, #108]	; (800da90 <_puts_r+0xd4>)
 800da22:	429c      	cmp	r4, r3
 800da24:	d101      	bne.n	800da2a <_puts_r+0x6e>
 800da26:	68ac      	ldr	r4, [r5, #8]
 800da28:	e7da      	b.n	800d9e0 <_puts_r+0x24>
 800da2a:	4b1a      	ldr	r3, [pc, #104]	; (800da94 <_puts_r+0xd8>)
 800da2c:	429c      	cmp	r4, r3
 800da2e:	bf08      	it	eq
 800da30:	68ec      	ldreq	r4, [r5, #12]
 800da32:	e7d5      	b.n	800d9e0 <_puts_r+0x24>
 800da34:	4621      	mov	r1, r4
 800da36:	4628      	mov	r0, r5
 800da38:	f000 f888 	bl	800db4c <__swsetup_r>
 800da3c:	2800      	cmp	r0, #0
 800da3e:	d0dd      	beq.n	800d9fc <_puts_r+0x40>
 800da40:	f04f 35ff 	mov.w	r5, #4294967295
 800da44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da46:	07da      	lsls	r2, r3, #31
 800da48:	d405      	bmi.n	800da56 <_puts_r+0x9a>
 800da4a:	89a3      	ldrh	r3, [r4, #12]
 800da4c:	059b      	lsls	r3, r3, #22
 800da4e:	d402      	bmi.n	800da56 <_puts_r+0x9a>
 800da50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da52:	f001 f8a1 	bl	800eb98 <__retarget_lock_release_recursive>
 800da56:	4628      	mov	r0, r5
 800da58:	bd70      	pop	{r4, r5, r6, pc}
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	da04      	bge.n	800da68 <_puts_r+0xac>
 800da5e:	69a2      	ldr	r2, [r4, #24]
 800da60:	429a      	cmp	r2, r3
 800da62:	dc06      	bgt.n	800da72 <_puts_r+0xb6>
 800da64:	290a      	cmp	r1, #10
 800da66:	d004      	beq.n	800da72 <_puts_r+0xb6>
 800da68:	6823      	ldr	r3, [r4, #0]
 800da6a:	1c5a      	adds	r2, r3, #1
 800da6c:	6022      	str	r2, [r4, #0]
 800da6e:	7019      	strb	r1, [r3, #0]
 800da70:	e7c5      	b.n	800d9fe <_puts_r+0x42>
 800da72:	4622      	mov	r2, r4
 800da74:	4628      	mov	r0, r5
 800da76:	f000 f817 	bl	800daa8 <__swbuf_r>
 800da7a:	3001      	adds	r0, #1
 800da7c:	d1bf      	bne.n	800d9fe <_puts_r+0x42>
 800da7e:	e7df      	b.n	800da40 <_puts_r+0x84>
 800da80:	6823      	ldr	r3, [r4, #0]
 800da82:	250a      	movs	r5, #10
 800da84:	1c5a      	adds	r2, r3, #1
 800da86:	6022      	str	r2, [r4, #0]
 800da88:	701d      	strb	r5, [r3, #0]
 800da8a:	e7db      	b.n	800da44 <_puts_r+0x88>
 800da8c:	08010174 	.word	0x08010174
 800da90:	08010194 	.word	0x08010194
 800da94:	08010154 	.word	0x08010154

0800da98 <puts>:
 800da98:	4b02      	ldr	r3, [pc, #8]	; (800daa4 <puts+0xc>)
 800da9a:	4601      	mov	r1, r0
 800da9c:	6818      	ldr	r0, [r3, #0]
 800da9e:	f7ff bf8d 	b.w	800d9bc <_puts_r>
 800daa2:	bf00      	nop
 800daa4:	20000040 	.word	0x20000040

0800daa8 <__swbuf_r>:
 800daa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daaa:	460e      	mov	r6, r1
 800daac:	4614      	mov	r4, r2
 800daae:	4605      	mov	r5, r0
 800dab0:	b118      	cbz	r0, 800daba <__swbuf_r+0x12>
 800dab2:	6983      	ldr	r3, [r0, #24]
 800dab4:	b90b      	cbnz	r3, 800daba <__swbuf_r+0x12>
 800dab6:	f000 ffcb 	bl	800ea50 <__sinit>
 800daba:	4b21      	ldr	r3, [pc, #132]	; (800db40 <__swbuf_r+0x98>)
 800dabc:	429c      	cmp	r4, r3
 800dabe:	d12b      	bne.n	800db18 <__swbuf_r+0x70>
 800dac0:	686c      	ldr	r4, [r5, #4]
 800dac2:	69a3      	ldr	r3, [r4, #24]
 800dac4:	60a3      	str	r3, [r4, #8]
 800dac6:	89a3      	ldrh	r3, [r4, #12]
 800dac8:	071a      	lsls	r2, r3, #28
 800daca:	d52f      	bpl.n	800db2c <__swbuf_r+0x84>
 800dacc:	6923      	ldr	r3, [r4, #16]
 800dace:	b36b      	cbz	r3, 800db2c <__swbuf_r+0x84>
 800dad0:	6923      	ldr	r3, [r4, #16]
 800dad2:	6820      	ldr	r0, [r4, #0]
 800dad4:	1ac0      	subs	r0, r0, r3
 800dad6:	6963      	ldr	r3, [r4, #20]
 800dad8:	b2f6      	uxtb	r6, r6
 800dada:	4283      	cmp	r3, r0
 800dadc:	4637      	mov	r7, r6
 800dade:	dc04      	bgt.n	800daea <__swbuf_r+0x42>
 800dae0:	4621      	mov	r1, r4
 800dae2:	4628      	mov	r0, r5
 800dae4:	f000 ff20 	bl	800e928 <_fflush_r>
 800dae8:	bb30      	cbnz	r0, 800db38 <__swbuf_r+0x90>
 800daea:	68a3      	ldr	r3, [r4, #8]
 800daec:	3b01      	subs	r3, #1
 800daee:	60a3      	str	r3, [r4, #8]
 800daf0:	6823      	ldr	r3, [r4, #0]
 800daf2:	1c5a      	adds	r2, r3, #1
 800daf4:	6022      	str	r2, [r4, #0]
 800daf6:	701e      	strb	r6, [r3, #0]
 800daf8:	6963      	ldr	r3, [r4, #20]
 800dafa:	3001      	adds	r0, #1
 800dafc:	4283      	cmp	r3, r0
 800dafe:	d004      	beq.n	800db0a <__swbuf_r+0x62>
 800db00:	89a3      	ldrh	r3, [r4, #12]
 800db02:	07db      	lsls	r3, r3, #31
 800db04:	d506      	bpl.n	800db14 <__swbuf_r+0x6c>
 800db06:	2e0a      	cmp	r6, #10
 800db08:	d104      	bne.n	800db14 <__swbuf_r+0x6c>
 800db0a:	4621      	mov	r1, r4
 800db0c:	4628      	mov	r0, r5
 800db0e:	f000 ff0b 	bl	800e928 <_fflush_r>
 800db12:	b988      	cbnz	r0, 800db38 <__swbuf_r+0x90>
 800db14:	4638      	mov	r0, r7
 800db16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db18:	4b0a      	ldr	r3, [pc, #40]	; (800db44 <__swbuf_r+0x9c>)
 800db1a:	429c      	cmp	r4, r3
 800db1c:	d101      	bne.n	800db22 <__swbuf_r+0x7a>
 800db1e:	68ac      	ldr	r4, [r5, #8]
 800db20:	e7cf      	b.n	800dac2 <__swbuf_r+0x1a>
 800db22:	4b09      	ldr	r3, [pc, #36]	; (800db48 <__swbuf_r+0xa0>)
 800db24:	429c      	cmp	r4, r3
 800db26:	bf08      	it	eq
 800db28:	68ec      	ldreq	r4, [r5, #12]
 800db2a:	e7ca      	b.n	800dac2 <__swbuf_r+0x1a>
 800db2c:	4621      	mov	r1, r4
 800db2e:	4628      	mov	r0, r5
 800db30:	f000 f80c 	bl	800db4c <__swsetup_r>
 800db34:	2800      	cmp	r0, #0
 800db36:	d0cb      	beq.n	800dad0 <__swbuf_r+0x28>
 800db38:	f04f 37ff 	mov.w	r7, #4294967295
 800db3c:	e7ea      	b.n	800db14 <__swbuf_r+0x6c>
 800db3e:	bf00      	nop
 800db40:	08010174 	.word	0x08010174
 800db44:	08010194 	.word	0x08010194
 800db48:	08010154 	.word	0x08010154

0800db4c <__swsetup_r>:
 800db4c:	4b32      	ldr	r3, [pc, #200]	; (800dc18 <__swsetup_r+0xcc>)
 800db4e:	b570      	push	{r4, r5, r6, lr}
 800db50:	681d      	ldr	r5, [r3, #0]
 800db52:	4606      	mov	r6, r0
 800db54:	460c      	mov	r4, r1
 800db56:	b125      	cbz	r5, 800db62 <__swsetup_r+0x16>
 800db58:	69ab      	ldr	r3, [r5, #24]
 800db5a:	b913      	cbnz	r3, 800db62 <__swsetup_r+0x16>
 800db5c:	4628      	mov	r0, r5
 800db5e:	f000 ff77 	bl	800ea50 <__sinit>
 800db62:	4b2e      	ldr	r3, [pc, #184]	; (800dc1c <__swsetup_r+0xd0>)
 800db64:	429c      	cmp	r4, r3
 800db66:	d10f      	bne.n	800db88 <__swsetup_r+0x3c>
 800db68:	686c      	ldr	r4, [r5, #4]
 800db6a:	89a3      	ldrh	r3, [r4, #12]
 800db6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db70:	0719      	lsls	r1, r3, #28
 800db72:	d42c      	bmi.n	800dbce <__swsetup_r+0x82>
 800db74:	06dd      	lsls	r5, r3, #27
 800db76:	d411      	bmi.n	800db9c <__swsetup_r+0x50>
 800db78:	2309      	movs	r3, #9
 800db7a:	6033      	str	r3, [r6, #0]
 800db7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800db80:	81a3      	strh	r3, [r4, #12]
 800db82:	f04f 30ff 	mov.w	r0, #4294967295
 800db86:	e03e      	b.n	800dc06 <__swsetup_r+0xba>
 800db88:	4b25      	ldr	r3, [pc, #148]	; (800dc20 <__swsetup_r+0xd4>)
 800db8a:	429c      	cmp	r4, r3
 800db8c:	d101      	bne.n	800db92 <__swsetup_r+0x46>
 800db8e:	68ac      	ldr	r4, [r5, #8]
 800db90:	e7eb      	b.n	800db6a <__swsetup_r+0x1e>
 800db92:	4b24      	ldr	r3, [pc, #144]	; (800dc24 <__swsetup_r+0xd8>)
 800db94:	429c      	cmp	r4, r3
 800db96:	bf08      	it	eq
 800db98:	68ec      	ldreq	r4, [r5, #12]
 800db9a:	e7e6      	b.n	800db6a <__swsetup_r+0x1e>
 800db9c:	0758      	lsls	r0, r3, #29
 800db9e:	d512      	bpl.n	800dbc6 <__swsetup_r+0x7a>
 800dba0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dba2:	b141      	cbz	r1, 800dbb6 <__swsetup_r+0x6a>
 800dba4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dba8:	4299      	cmp	r1, r3
 800dbaa:	d002      	beq.n	800dbb2 <__swsetup_r+0x66>
 800dbac:	4630      	mov	r0, r6
 800dbae:	f001 fbfb 	bl	800f3a8 <_free_r>
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	6363      	str	r3, [r4, #52]	; 0x34
 800dbb6:	89a3      	ldrh	r3, [r4, #12]
 800dbb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dbbc:	81a3      	strh	r3, [r4, #12]
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	6063      	str	r3, [r4, #4]
 800dbc2:	6923      	ldr	r3, [r4, #16]
 800dbc4:	6023      	str	r3, [r4, #0]
 800dbc6:	89a3      	ldrh	r3, [r4, #12]
 800dbc8:	f043 0308 	orr.w	r3, r3, #8
 800dbcc:	81a3      	strh	r3, [r4, #12]
 800dbce:	6923      	ldr	r3, [r4, #16]
 800dbd0:	b94b      	cbnz	r3, 800dbe6 <__swsetup_r+0x9a>
 800dbd2:	89a3      	ldrh	r3, [r4, #12]
 800dbd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dbd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dbdc:	d003      	beq.n	800dbe6 <__swsetup_r+0x9a>
 800dbde:	4621      	mov	r1, r4
 800dbe0:	4630      	mov	r0, r6
 800dbe2:	f000 ffff 	bl	800ebe4 <__smakebuf_r>
 800dbe6:	89a0      	ldrh	r0, [r4, #12]
 800dbe8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dbec:	f010 0301 	ands.w	r3, r0, #1
 800dbf0:	d00a      	beq.n	800dc08 <__swsetup_r+0xbc>
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	60a3      	str	r3, [r4, #8]
 800dbf6:	6963      	ldr	r3, [r4, #20]
 800dbf8:	425b      	negs	r3, r3
 800dbfa:	61a3      	str	r3, [r4, #24]
 800dbfc:	6923      	ldr	r3, [r4, #16]
 800dbfe:	b943      	cbnz	r3, 800dc12 <__swsetup_r+0xc6>
 800dc00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dc04:	d1ba      	bne.n	800db7c <__swsetup_r+0x30>
 800dc06:	bd70      	pop	{r4, r5, r6, pc}
 800dc08:	0781      	lsls	r1, r0, #30
 800dc0a:	bf58      	it	pl
 800dc0c:	6963      	ldrpl	r3, [r4, #20]
 800dc0e:	60a3      	str	r3, [r4, #8]
 800dc10:	e7f4      	b.n	800dbfc <__swsetup_r+0xb0>
 800dc12:	2000      	movs	r0, #0
 800dc14:	e7f7      	b.n	800dc06 <__swsetup_r+0xba>
 800dc16:	bf00      	nop
 800dc18:	20000040 	.word	0x20000040
 800dc1c:	08010174 	.word	0x08010174
 800dc20:	08010194 	.word	0x08010194
 800dc24:	08010154 	.word	0x08010154

0800dc28 <quorem>:
 800dc28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc2c:	6903      	ldr	r3, [r0, #16]
 800dc2e:	690c      	ldr	r4, [r1, #16]
 800dc30:	42a3      	cmp	r3, r4
 800dc32:	4607      	mov	r7, r0
 800dc34:	f2c0 8081 	blt.w	800dd3a <quorem+0x112>
 800dc38:	3c01      	subs	r4, #1
 800dc3a:	f101 0814 	add.w	r8, r1, #20
 800dc3e:	f100 0514 	add.w	r5, r0, #20
 800dc42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dc46:	9301      	str	r3, [sp, #4]
 800dc48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dc4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dc50:	3301      	adds	r3, #1
 800dc52:	429a      	cmp	r2, r3
 800dc54:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800dc58:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dc5c:	fbb2 f6f3 	udiv	r6, r2, r3
 800dc60:	d331      	bcc.n	800dcc6 <quorem+0x9e>
 800dc62:	f04f 0e00 	mov.w	lr, #0
 800dc66:	4640      	mov	r0, r8
 800dc68:	46ac      	mov	ip, r5
 800dc6a:	46f2      	mov	sl, lr
 800dc6c:	f850 2b04 	ldr.w	r2, [r0], #4
 800dc70:	b293      	uxth	r3, r2
 800dc72:	fb06 e303 	mla	r3, r6, r3, lr
 800dc76:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800dc7a:	b29b      	uxth	r3, r3
 800dc7c:	ebaa 0303 	sub.w	r3, sl, r3
 800dc80:	f8dc a000 	ldr.w	sl, [ip]
 800dc84:	0c12      	lsrs	r2, r2, #16
 800dc86:	fa13 f38a 	uxtah	r3, r3, sl
 800dc8a:	fb06 e202 	mla	r2, r6, r2, lr
 800dc8e:	9300      	str	r3, [sp, #0]
 800dc90:	9b00      	ldr	r3, [sp, #0]
 800dc92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dc96:	b292      	uxth	r2, r2
 800dc98:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800dc9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dca0:	f8bd 3000 	ldrh.w	r3, [sp]
 800dca4:	4581      	cmp	r9, r0
 800dca6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dcaa:	f84c 3b04 	str.w	r3, [ip], #4
 800dcae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800dcb2:	d2db      	bcs.n	800dc6c <quorem+0x44>
 800dcb4:	f855 300b 	ldr.w	r3, [r5, fp]
 800dcb8:	b92b      	cbnz	r3, 800dcc6 <quorem+0x9e>
 800dcba:	9b01      	ldr	r3, [sp, #4]
 800dcbc:	3b04      	subs	r3, #4
 800dcbe:	429d      	cmp	r5, r3
 800dcc0:	461a      	mov	r2, r3
 800dcc2:	d32e      	bcc.n	800dd22 <quorem+0xfa>
 800dcc4:	613c      	str	r4, [r7, #16]
 800dcc6:	4638      	mov	r0, r7
 800dcc8:	f001 fa56 	bl	800f178 <__mcmp>
 800dccc:	2800      	cmp	r0, #0
 800dcce:	db24      	blt.n	800dd1a <quorem+0xf2>
 800dcd0:	3601      	adds	r6, #1
 800dcd2:	4628      	mov	r0, r5
 800dcd4:	f04f 0c00 	mov.w	ip, #0
 800dcd8:	f858 2b04 	ldr.w	r2, [r8], #4
 800dcdc:	f8d0 e000 	ldr.w	lr, [r0]
 800dce0:	b293      	uxth	r3, r2
 800dce2:	ebac 0303 	sub.w	r3, ip, r3
 800dce6:	0c12      	lsrs	r2, r2, #16
 800dce8:	fa13 f38e 	uxtah	r3, r3, lr
 800dcec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800dcf0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dcf4:	b29b      	uxth	r3, r3
 800dcf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dcfa:	45c1      	cmp	r9, r8
 800dcfc:	f840 3b04 	str.w	r3, [r0], #4
 800dd00:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dd04:	d2e8      	bcs.n	800dcd8 <quorem+0xb0>
 800dd06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dd0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dd0e:	b922      	cbnz	r2, 800dd1a <quorem+0xf2>
 800dd10:	3b04      	subs	r3, #4
 800dd12:	429d      	cmp	r5, r3
 800dd14:	461a      	mov	r2, r3
 800dd16:	d30a      	bcc.n	800dd2e <quorem+0x106>
 800dd18:	613c      	str	r4, [r7, #16]
 800dd1a:	4630      	mov	r0, r6
 800dd1c:	b003      	add	sp, #12
 800dd1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd22:	6812      	ldr	r2, [r2, #0]
 800dd24:	3b04      	subs	r3, #4
 800dd26:	2a00      	cmp	r2, #0
 800dd28:	d1cc      	bne.n	800dcc4 <quorem+0x9c>
 800dd2a:	3c01      	subs	r4, #1
 800dd2c:	e7c7      	b.n	800dcbe <quorem+0x96>
 800dd2e:	6812      	ldr	r2, [r2, #0]
 800dd30:	3b04      	subs	r3, #4
 800dd32:	2a00      	cmp	r2, #0
 800dd34:	d1f0      	bne.n	800dd18 <quorem+0xf0>
 800dd36:	3c01      	subs	r4, #1
 800dd38:	e7eb      	b.n	800dd12 <quorem+0xea>
 800dd3a:	2000      	movs	r0, #0
 800dd3c:	e7ee      	b.n	800dd1c <quorem+0xf4>
	...

0800dd40 <_dtoa_r>:
 800dd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd44:	ed2d 8b02 	vpush	{d8}
 800dd48:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dd4a:	b091      	sub	sp, #68	; 0x44
 800dd4c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dd50:	ec59 8b10 	vmov	r8, r9, d0
 800dd54:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800dd56:	9106      	str	r1, [sp, #24]
 800dd58:	4606      	mov	r6, r0
 800dd5a:	9208      	str	r2, [sp, #32]
 800dd5c:	930c      	str	r3, [sp, #48]	; 0x30
 800dd5e:	b975      	cbnz	r5, 800dd7e <_dtoa_r+0x3e>
 800dd60:	2010      	movs	r0, #16
 800dd62:	f000 ff7f 	bl	800ec64 <malloc>
 800dd66:	4602      	mov	r2, r0
 800dd68:	6270      	str	r0, [r6, #36]	; 0x24
 800dd6a:	b920      	cbnz	r0, 800dd76 <_dtoa_r+0x36>
 800dd6c:	4baa      	ldr	r3, [pc, #680]	; (800e018 <_dtoa_r+0x2d8>)
 800dd6e:	21ea      	movs	r1, #234	; 0xea
 800dd70:	48aa      	ldr	r0, [pc, #680]	; (800e01c <_dtoa_r+0x2dc>)
 800dd72:	f001 fdb9 	bl	800f8e8 <__assert_func>
 800dd76:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dd7a:	6005      	str	r5, [r0, #0]
 800dd7c:	60c5      	str	r5, [r0, #12]
 800dd7e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800dd80:	6819      	ldr	r1, [r3, #0]
 800dd82:	b151      	cbz	r1, 800dd9a <_dtoa_r+0x5a>
 800dd84:	685a      	ldr	r2, [r3, #4]
 800dd86:	604a      	str	r2, [r1, #4]
 800dd88:	2301      	movs	r3, #1
 800dd8a:	4093      	lsls	r3, r2
 800dd8c:	608b      	str	r3, [r1, #8]
 800dd8e:	4630      	mov	r0, r6
 800dd90:	f000 ffb0 	bl	800ecf4 <_Bfree>
 800dd94:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800dd96:	2200      	movs	r2, #0
 800dd98:	601a      	str	r2, [r3, #0]
 800dd9a:	f1b9 0300 	subs.w	r3, r9, #0
 800dd9e:	bfbb      	ittet	lt
 800dda0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800dda4:	9303      	strlt	r3, [sp, #12]
 800dda6:	2300      	movge	r3, #0
 800dda8:	2201      	movlt	r2, #1
 800ddaa:	bfac      	ite	ge
 800ddac:	6023      	strge	r3, [r4, #0]
 800ddae:	6022      	strlt	r2, [r4, #0]
 800ddb0:	4b9b      	ldr	r3, [pc, #620]	; (800e020 <_dtoa_r+0x2e0>)
 800ddb2:	9c03      	ldr	r4, [sp, #12]
 800ddb4:	43a3      	bics	r3, r4
 800ddb6:	d11c      	bne.n	800ddf2 <_dtoa_r+0xb2>
 800ddb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ddba:	f242 730f 	movw	r3, #9999	; 0x270f
 800ddbe:	6013      	str	r3, [r2, #0]
 800ddc0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800ddc4:	ea53 0308 	orrs.w	r3, r3, r8
 800ddc8:	f000 84fd 	beq.w	800e7c6 <_dtoa_r+0xa86>
 800ddcc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ddce:	b963      	cbnz	r3, 800ddea <_dtoa_r+0xaa>
 800ddd0:	4b94      	ldr	r3, [pc, #592]	; (800e024 <_dtoa_r+0x2e4>)
 800ddd2:	e01f      	b.n	800de14 <_dtoa_r+0xd4>
 800ddd4:	4b94      	ldr	r3, [pc, #592]	; (800e028 <_dtoa_r+0x2e8>)
 800ddd6:	9301      	str	r3, [sp, #4]
 800ddd8:	3308      	adds	r3, #8
 800ddda:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800dddc:	6013      	str	r3, [r2, #0]
 800ddde:	9801      	ldr	r0, [sp, #4]
 800dde0:	b011      	add	sp, #68	; 0x44
 800dde2:	ecbd 8b02 	vpop	{d8}
 800dde6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddea:	4b8e      	ldr	r3, [pc, #568]	; (800e024 <_dtoa_r+0x2e4>)
 800ddec:	9301      	str	r3, [sp, #4]
 800ddee:	3303      	adds	r3, #3
 800ddf0:	e7f3      	b.n	800ddda <_dtoa_r+0x9a>
 800ddf2:	ed9d 8b02 	vldr	d8, [sp, #8]
 800ddf6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ddfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddfe:	d10b      	bne.n	800de18 <_dtoa_r+0xd8>
 800de00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800de02:	2301      	movs	r3, #1
 800de04:	6013      	str	r3, [r2, #0]
 800de06:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800de08:	2b00      	cmp	r3, #0
 800de0a:	f000 84d9 	beq.w	800e7c0 <_dtoa_r+0xa80>
 800de0e:	4887      	ldr	r0, [pc, #540]	; (800e02c <_dtoa_r+0x2ec>)
 800de10:	6018      	str	r0, [r3, #0]
 800de12:	1e43      	subs	r3, r0, #1
 800de14:	9301      	str	r3, [sp, #4]
 800de16:	e7e2      	b.n	800ddde <_dtoa_r+0x9e>
 800de18:	a90f      	add	r1, sp, #60	; 0x3c
 800de1a:	aa0e      	add	r2, sp, #56	; 0x38
 800de1c:	4630      	mov	r0, r6
 800de1e:	eeb0 0b48 	vmov.f64	d0, d8
 800de22:	f001 fa4f 	bl	800f2c4 <__d2b>
 800de26:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800de2a:	4605      	mov	r5, r0
 800de2c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800de2e:	2900      	cmp	r1, #0
 800de30:	d046      	beq.n	800dec0 <_dtoa_r+0x180>
 800de32:	ee18 4a90 	vmov	r4, s17
 800de36:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800de3a:	ec53 2b18 	vmov	r2, r3, d8
 800de3e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800de42:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800de46:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800de4a:	2400      	movs	r4, #0
 800de4c:	ec43 2b16 	vmov	d6, r2, r3
 800de50:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800de54:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800e000 <_dtoa_r+0x2c0>
 800de58:	ee36 7b47 	vsub.f64	d7, d6, d7
 800de5c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800e008 <_dtoa_r+0x2c8>
 800de60:	eea7 6b05 	vfma.f64	d6, d7, d5
 800de64:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800e010 <_dtoa_r+0x2d0>
 800de68:	ee07 1a90 	vmov	s15, r1
 800de6c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800de70:	eeb0 7b46 	vmov.f64	d7, d6
 800de74:	eea4 7b05 	vfma.f64	d7, d4, d5
 800de78:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800de7c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800de80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de84:	ee16 ba90 	vmov	fp, s13
 800de88:	940a      	str	r4, [sp, #40]	; 0x28
 800de8a:	d508      	bpl.n	800de9e <_dtoa_r+0x15e>
 800de8c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800de90:	eeb4 6b47 	vcmp.f64	d6, d7
 800de94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de98:	bf18      	it	ne
 800de9a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800de9e:	f1bb 0f16 	cmp.w	fp, #22
 800dea2:	d82f      	bhi.n	800df04 <_dtoa_r+0x1c4>
 800dea4:	4b62      	ldr	r3, [pc, #392]	; (800e030 <_dtoa_r+0x2f0>)
 800dea6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800deaa:	ed93 7b00 	vldr	d7, [r3]
 800deae:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800deb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deb6:	d501      	bpl.n	800debc <_dtoa_r+0x17c>
 800deb8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800debc:	2300      	movs	r3, #0
 800debe:	e022      	b.n	800df06 <_dtoa_r+0x1c6>
 800dec0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800dec2:	4401      	add	r1, r0
 800dec4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800dec8:	2b20      	cmp	r3, #32
 800deca:	bfc1      	itttt	gt
 800decc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ded0:	fa04 f303 	lslgt.w	r3, r4, r3
 800ded4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800ded8:	fa28 f804 	lsrgt.w	r8, r8, r4
 800dedc:	bfd6      	itet	le
 800dede:	f1c3 0320 	rsble	r3, r3, #32
 800dee2:	ea43 0808 	orrgt.w	r8, r3, r8
 800dee6:	fa08 f803 	lslle.w	r8, r8, r3
 800deea:	ee07 8a90 	vmov	s15, r8
 800deee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800def2:	3901      	subs	r1, #1
 800def4:	ee17 4a90 	vmov	r4, s15
 800def8:	ec53 2b17 	vmov	r2, r3, d7
 800defc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800df00:	2401      	movs	r4, #1
 800df02:	e7a3      	b.n	800de4c <_dtoa_r+0x10c>
 800df04:	2301      	movs	r3, #1
 800df06:	930b      	str	r3, [sp, #44]	; 0x2c
 800df08:	1a43      	subs	r3, r0, r1
 800df0a:	1e5a      	subs	r2, r3, #1
 800df0c:	bf45      	ittet	mi
 800df0e:	f1c3 0301 	rsbmi	r3, r3, #1
 800df12:	9304      	strmi	r3, [sp, #16]
 800df14:	2300      	movpl	r3, #0
 800df16:	2300      	movmi	r3, #0
 800df18:	9205      	str	r2, [sp, #20]
 800df1a:	bf54      	ite	pl
 800df1c:	9304      	strpl	r3, [sp, #16]
 800df1e:	9305      	strmi	r3, [sp, #20]
 800df20:	f1bb 0f00 	cmp.w	fp, #0
 800df24:	db18      	blt.n	800df58 <_dtoa_r+0x218>
 800df26:	9b05      	ldr	r3, [sp, #20]
 800df28:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800df2c:	445b      	add	r3, fp
 800df2e:	9305      	str	r3, [sp, #20]
 800df30:	2300      	movs	r3, #0
 800df32:	9a06      	ldr	r2, [sp, #24]
 800df34:	2a09      	cmp	r2, #9
 800df36:	d849      	bhi.n	800dfcc <_dtoa_r+0x28c>
 800df38:	2a05      	cmp	r2, #5
 800df3a:	bfc4      	itt	gt
 800df3c:	3a04      	subgt	r2, #4
 800df3e:	9206      	strgt	r2, [sp, #24]
 800df40:	9a06      	ldr	r2, [sp, #24]
 800df42:	f1a2 0202 	sub.w	r2, r2, #2
 800df46:	bfcc      	ite	gt
 800df48:	2400      	movgt	r4, #0
 800df4a:	2401      	movle	r4, #1
 800df4c:	2a03      	cmp	r2, #3
 800df4e:	d848      	bhi.n	800dfe2 <_dtoa_r+0x2a2>
 800df50:	e8df f002 	tbb	[pc, r2]
 800df54:	3a2c2e0b 	.word	0x3a2c2e0b
 800df58:	9b04      	ldr	r3, [sp, #16]
 800df5a:	2200      	movs	r2, #0
 800df5c:	eba3 030b 	sub.w	r3, r3, fp
 800df60:	9304      	str	r3, [sp, #16]
 800df62:	9209      	str	r2, [sp, #36]	; 0x24
 800df64:	f1cb 0300 	rsb	r3, fp, #0
 800df68:	e7e3      	b.n	800df32 <_dtoa_r+0x1f2>
 800df6a:	2200      	movs	r2, #0
 800df6c:	9207      	str	r2, [sp, #28]
 800df6e:	9a08      	ldr	r2, [sp, #32]
 800df70:	2a00      	cmp	r2, #0
 800df72:	dc39      	bgt.n	800dfe8 <_dtoa_r+0x2a8>
 800df74:	f04f 0a01 	mov.w	sl, #1
 800df78:	46d1      	mov	r9, sl
 800df7a:	4652      	mov	r2, sl
 800df7c:	f8cd a020 	str.w	sl, [sp, #32]
 800df80:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800df82:	2100      	movs	r1, #0
 800df84:	6079      	str	r1, [r7, #4]
 800df86:	2004      	movs	r0, #4
 800df88:	f100 0c14 	add.w	ip, r0, #20
 800df8c:	4594      	cmp	ip, r2
 800df8e:	6879      	ldr	r1, [r7, #4]
 800df90:	d92f      	bls.n	800dff2 <_dtoa_r+0x2b2>
 800df92:	4630      	mov	r0, r6
 800df94:	930d      	str	r3, [sp, #52]	; 0x34
 800df96:	f000 fe6d 	bl	800ec74 <_Balloc>
 800df9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800df9c:	9001      	str	r0, [sp, #4]
 800df9e:	4602      	mov	r2, r0
 800dfa0:	2800      	cmp	r0, #0
 800dfa2:	d149      	bne.n	800e038 <_dtoa_r+0x2f8>
 800dfa4:	4b23      	ldr	r3, [pc, #140]	; (800e034 <_dtoa_r+0x2f4>)
 800dfa6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800dfaa:	e6e1      	b.n	800dd70 <_dtoa_r+0x30>
 800dfac:	2201      	movs	r2, #1
 800dfae:	e7dd      	b.n	800df6c <_dtoa_r+0x22c>
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	9207      	str	r2, [sp, #28]
 800dfb4:	9a08      	ldr	r2, [sp, #32]
 800dfb6:	eb0b 0a02 	add.w	sl, fp, r2
 800dfba:	f10a 0901 	add.w	r9, sl, #1
 800dfbe:	464a      	mov	r2, r9
 800dfc0:	2a01      	cmp	r2, #1
 800dfc2:	bfb8      	it	lt
 800dfc4:	2201      	movlt	r2, #1
 800dfc6:	e7db      	b.n	800df80 <_dtoa_r+0x240>
 800dfc8:	2201      	movs	r2, #1
 800dfca:	e7f2      	b.n	800dfb2 <_dtoa_r+0x272>
 800dfcc:	2401      	movs	r4, #1
 800dfce:	2200      	movs	r2, #0
 800dfd0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800dfd4:	f04f 3aff 	mov.w	sl, #4294967295
 800dfd8:	2100      	movs	r1, #0
 800dfda:	46d1      	mov	r9, sl
 800dfdc:	2212      	movs	r2, #18
 800dfde:	9108      	str	r1, [sp, #32]
 800dfe0:	e7ce      	b.n	800df80 <_dtoa_r+0x240>
 800dfe2:	2201      	movs	r2, #1
 800dfe4:	9207      	str	r2, [sp, #28]
 800dfe6:	e7f5      	b.n	800dfd4 <_dtoa_r+0x294>
 800dfe8:	f8dd a020 	ldr.w	sl, [sp, #32]
 800dfec:	46d1      	mov	r9, sl
 800dfee:	4652      	mov	r2, sl
 800dff0:	e7c6      	b.n	800df80 <_dtoa_r+0x240>
 800dff2:	3101      	adds	r1, #1
 800dff4:	6079      	str	r1, [r7, #4]
 800dff6:	0040      	lsls	r0, r0, #1
 800dff8:	e7c6      	b.n	800df88 <_dtoa_r+0x248>
 800dffa:	bf00      	nop
 800dffc:	f3af 8000 	nop.w
 800e000:	636f4361 	.word	0x636f4361
 800e004:	3fd287a7 	.word	0x3fd287a7
 800e008:	8b60c8b3 	.word	0x8b60c8b3
 800e00c:	3fc68a28 	.word	0x3fc68a28
 800e010:	509f79fb 	.word	0x509f79fb
 800e014:	3fd34413 	.word	0x3fd34413
 800e018:	080100d1 	.word	0x080100d1
 800e01c:	080100e8 	.word	0x080100e8
 800e020:	7ff00000 	.word	0x7ff00000
 800e024:	080100cd 	.word	0x080100cd
 800e028:	080100c4 	.word	0x080100c4
 800e02c:	080100a1 	.word	0x080100a1
 800e030:	08010238 	.word	0x08010238
 800e034:	08010143 	.word	0x08010143
 800e038:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800e03a:	9901      	ldr	r1, [sp, #4]
 800e03c:	6011      	str	r1, [r2, #0]
 800e03e:	f1b9 0f0e 	cmp.w	r9, #14
 800e042:	d86c      	bhi.n	800e11e <_dtoa_r+0x3de>
 800e044:	2c00      	cmp	r4, #0
 800e046:	d06a      	beq.n	800e11e <_dtoa_r+0x3de>
 800e048:	f1bb 0f00 	cmp.w	fp, #0
 800e04c:	f340 80a0 	ble.w	800e190 <_dtoa_r+0x450>
 800e050:	49c1      	ldr	r1, [pc, #772]	; (800e358 <_dtoa_r+0x618>)
 800e052:	f00b 020f 	and.w	r2, fp, #15
 800e056:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800e05a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e05e:	ed92 7b00 	vldr	d7, [r2]
 800e062:	ea4f 112b 	mov.w	r1, fp, asr #4
 800e066:	f000 8087 	beq.w	800e178 <_dtoa_r+0x438>
 800e06a:	4abc      	ldr	r2, [pc, #752]	; (800e35c <_dtoa_r+0x61c>)
 800e06c:	ed92 6b08 	vldr	d6, [r2, #32]
 800e070:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800e074:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e078:	f001 010f 	and.w	r1, r1, #15
 800e07c:	2203      	movs	r2, #3
 800e07e:	48b7      	ldr	r0, [pc, #732]	; (800e35c <_dtoa_r+0x61c>)
 800e080:	2900      	cmp	r1, #0
 800e082:	d17b      	bne.n	800e17c <_dtoa_r+0x43c>
 800e084:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e088:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e08c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e090:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e092:	2900      	cmp	r1, #0
 800e094:	f000 80a2 	beq.w	800e1dc <_dtoa_r+0x49c>
 800e098:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e09c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e0a0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e0a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0a8:	f140 8098 	bpl.w	800e1dc <_dtoa_r+0x49c>
 800e0ac:	f1b9 0f00 	cmp.w	r9, #0
 800e0b0:	f000 8094 	beq.w	800e1dc <_dtoa_r+0x49c>
 800e0b4:	f1ba 0f00 	cmp.w	sl, #0
 800e0b8:	dd2f      	ble.n	800e11a <_dtoa_r+0x3da>
 800e0ba:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800e0be:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e0c2:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e0c6:	f10b 37ff 	add.w	r7, fp, #4294967295
 800e0ca:	3201      	adds	r2, #1
 800e0cc:	4650      	mov	r0, sl
 800e0ce:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e0d2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800e0d6:	ee07 2a90 	vmov	s15, r2
 800e0da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e0de:	eea7 5b06 	vfma.f64	d5, d7, d6
 800e0e2:	ee15 4a90 	vmov	r4, s11
 800e0e6:	ec52 1b15 	vmov	r1, r2, d5
 800e0ea:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800e0ee:	2800      	cmp	r0, #0
 800e0f0:	d177      	bne.n	800e1e2 <_dtoa_r+0x4a2>
 800e0f2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e0f6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e0fa:	ec42 1b17 	vmov	d7, r1, r2
 800e0fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e106:	f300 8263 	bgt.w	800e5d0 <_dtoa_r+0x890>
 800e10a:	eeb1 7b47 	vneg.f64	d7, d7
 800e10e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e116:	f100 8258 	bmi.w	800e5ca <_dtoa_r+0x88a>
 800e11a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e11e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e120:	2a00      	cmp	r2, #0
 800e122:	f2c0 811d 	blt.w	800e360 <_dtoa_r+0x620>
 800e126:	f1bb 0f0e 	cmp.w	fp, #14
 800e12a:	f300 8119 	bgt.w	800e360 <_dtoa_r+0x620>
 800e12e:	4b8a      	ldr	r3, [pc, #552]	; (800e358 <_dtoa_r+0x618>)
 800e130:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e134:	ed93 6b00 	vldr	d6, [r3]
 800e138:	9b08      	ldr	r3, [sp, #32]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	f280 80b7 	bge.w	800e2ae <_dtoa_r+0x56e>
 800e140:	f1b9 0f00 	cmp.w	r9, #0
 800e144:	f300 80b3 	bgt.w	800e2ae <_dtoa_r+0x56e>
 800e148:	f040 823f 	bne.w	800e5ca <_dtoa_r+0x88a>
 800e14c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e150:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e154:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e158:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e15c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e160:	464c      	mov	r4, r9
 800e162:	464f      	mov	r7, r9
 800e164:	f280 8215 	bge.w	800e592 <_dtoa_r+0x852>
 800e168:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e16c:	2331      	movs	r3, #49	; 0x31
 800e16e:	f808 3b01 	strb.w	r3, [r8], #1
 800e172:	f10b 0b01 	add.w	fp, fp, #1
 800e176:	e211      	b.n	800e59c <_dtoa_r+0x85c>
 800e178:	2202      	movs	r2, #2
 800e17a:	e780      	b.n	800e07e <_dtoa_r+0x33e>
 800e17c:	07cc      	lsls	r4, r1, #31
 800e17e:	d504      	bpl.n	800e18a <_dtoa_r+0x44a>
 800e180:	ed90 6b00 	vldr	d6, [r0]
 800e184:	3201      	adds	r2, #1
 800e186:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e18a:	1049      	asrs	r1, r1, #1
 800e18c:	3008      	adds	r0, #8
 800e18e:	e777      	b.n	800e080 <_dtoa_r+0x340>
 800e190:	d022      	beq.n	800e1d8 <_dtoa_r+0x498>
 800e192:	f1cb 0100 	rsb	r1, fp, #0
 800e196:	4a70      	ldr	r2, [pc, #448]	; (800e358 <_dtoa_r+0x618>)
 800e198:	f001 000f 	and.w	r0, r1, #15
 800e19c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800e1a0:	ed92 7b00 	vldr	d7, [r2]
 800e1a4:	ee28 7b07 	vmul.f64	d7, d8, d7
 800e1a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e1ac:	486b      	ldr	r0, [pc, #428]	; (800e35c <_dtoa_r+0x61c>)
 800e1ae:	1109      	asrs	r1, r1, #4
 800e1b0:	2400      	movs	r4, #0
 800e1b2:	2202      	movs	r2, #2
 800e1b4:	b929      	cbnz	r1, 800e1c2 <_dtoa_r+0x482>
 800e1b6:	2c00      	cmp	r4, #0
 800e1b8:	f43f af6a 	beq.w	800e090 <_dtoa_r+0x350>
 800e1bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e1c0:	e766      	b.n	800e090 <_dtoa_r+0x350>
 800e1c2:	07cf      	lsls	r7, r1, #31
 800e1c4:	d505      	bpl.n	800e1d2 <_dtoa_r+0x492>
 800e1c6:	ed90 6b00 	vldr	d6, [r0]
 800e1ca:	3201      	adds	r2, #1
 800e1cc:	2401      	movs	r4, #1
 800e1ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e1d2:	1049      	asrs	r1, r1, #1
 800e1d4:	3008      	adds	r0, #8
 800e1d6:	e7ed      	b.n	800e1b4 <_dtoa_r+0x474>
 800e1d8:	2202      	movs	r2, #2
 800e1da:	e759      	b.n	800e090 <_dtoa_r+0x350>
 800e1dc:	465f      	mov	r7, fp
 800e1de:	4648      	mov	r0, r9
 800e1e0:	e775      	b.n	800e0ce <_dtoa_r+0x38e>
 800e1e2:	ec42 1b17 	vmov	d7, r1, r2
 800e1e6:	4a5c      	ldr	r2, [pc, #368]	; (800e358 <_dtoa_r+0x618>)
 800e1e8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800e1ec:	ed12 4b02 	vldr	d4, [r2, #-8]
 800e1f0:	9a01      	ldr	r2, [sp, #4]
 800e1f2:	1814      	adds	r4, r2, r0
 800e1f4:	9a07      	ldr	r2, [sp, #28]
 800e1f6:	b352      	cbz	r2, 800e24e <_dtoa_r+0x50e>
 800e1f8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800e1fc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800e200:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e204:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800e208:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e20c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e210:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e214:	ee14 2a90 	vmov	r2, s9
 800e218:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e21c:	3230      	adds	r2, #48	; 0x30
 800e21e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e222:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e22a:	f808 2b01 	strb.w	r2, [r8], #1
 800e22e:	d439      	bmi.n	800e2a4 <_dtoa_r+0x564>
 800e230:	ee32 5b46 	vsub.f64	d5, d2, d6
 800e234:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800e238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e23c:	d472      	bmi.n	800e324 <_dtoa_r+0x5e4>
 800e23e:	45a0      	cmp	r8, r4
 800e240:	f43f af6b 	beq.w	800e11a <_dtoa_r+0x3da>
 800e244:	ee27 7b03 	vmul.f64	d7, d7, d3
 800e248:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e24c:	e7e0      	b.n	800e210 <_dtoa_r+0x4d0>
 800e24e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e252:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e256:	4621      	mov	r1, r4
 800e258:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e25c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e260:	ee14 2a90 	vmov	r2, s9
 800e264:	3230      	adds	r2, #48	; 0x30
 800e266:	f808 2b01 	strb.w	r2, [r8], #1
 800e26a:	45a0      	cmp	r8, r4
 800e26c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e270:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e274:	d118      	bne.n	800e2a8 <_dtoa_r+0x568>
 800e276:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e27a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800e27e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800e282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e286:	dc4d      	bgt.n	800e324 <_dtoa_r+0x5e4>
 800e288:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e28c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e294:	f57f af41 	bpl.w	800e11a <_dtoa_r+0x3da>
 800e298:	4688      	mov	r8, r1
 800e29a:	3901      	subs	r1, #1
 800e29c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800e2a0:	2b30      	cmp	r3, #48	; 0x30
 800e2a2:	d0f9      	beq.n	800e298 <_dtoa_r+0x558>
 800e2a4:	46bb      	mov	fp, r7
 800e2a6:	e02a      	b.n	800e2fe <_dtoa_r+0x5be>
 800e2a8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e2ac:	e7d6      	b.n	800e25c <_dtoa_r+0x51c>
 800e2ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e2b2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800e2b6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e2ba:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800e2be:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800e2c2:	ee15 3a10 	vmov	r3, s10
 800e2c6:	3330      	adds	r3, #48	; 0x30
 800e2c8:	f808 3b01 	strb.w	r3, [r8], #1
 800e2cc:	9b01      	ldr	r3, [sp, #4]
 800e2ce:	eba8 0303 	sub.w	r3, r8, r3
 800e2d2:	4599      	cmp	r9, r3
 800e2d4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800e2d8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800e2dc:	d133      	bne.n	800e346 <_dtoa_r+0x606>
 800e2de:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e2e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e2e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2ea:	dc1a      	bgt.n	800e322 <_dtoa_r+0x5e2>
 800e2ec:	eeb4 7b46 	vcmp.f64	d7, d6
 800e2f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2f4:	d103      	bne.n	800e2fe <_dtoa_r+0x5be>
 800e2f6:	ee15 3a10 	vmov	r3, s10
 800e2fa:	07d9      	lsls	r1, r3, #31
 800e2fc:	d411      	bmi.n	800e322 <_dtoa_r+0x5e2>
 800e2fe:	4629      	mov	r1, r5
 800e300:	4630      	mov	r0, r6
 800e302:	f000 fcf7 	bl	800ecf4 <_Bfree>
 800e306:	2300      	movs	r3, #0
 800e308:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e30a:	f888 3000 	strb.w	r3, [r8]
 800e30e:	f10b 0301 	add.w	r3, fp, #1
 800e312:	6013      	str	r3, [r2, #0]
 800e314:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e316:	2b00      	cmp	r3, #0
 800e318:	f43f ad61 	beq.w	800ddde <_dtoa_r+0x9e>
 800e31c:	f8c3 8000 	str.w	r8, [r3]
 800e320:	e55d      	b.n	800ddde <_dtoa_r+0x9e>
 800e322:	465f      	mov	r7, fp
 800e324:	4643      	mov	r3, r8
 800e326:	4698      	mov	r8, r3
 800e328:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e32c:	2a39      	cmp	r2, #57	; 0x39
 800e32e:	d106      	bne.n	800e33e <_dtoa_r+0x5fe>
 800e330:	9a01      	ldr	r2, [sp, #4]
 800e332:	429a      	cmp	r2, r3
 800e334:	d1f7      	bne.n	800e326 <_dtoa_r+0x5e6>
 800e336:	9901      	ldr	r1, [sp, #4]
 800e338:	2230      	movs	r2, #48	; 0x30
 800e33a:	3701      	adds	r7, #1
 800e33c:	700a      	strb	r2, [r1, #0]
 800e33e:	781a      	ldrb	r2, [r3, #0]
 800e340:	3201      	adds	r2, #1
 800e342:	701a      	strb	r2, [r3, #0]
 800e344:	e7ae      	b.n	800e2a4 <_dtoa_r+0x564>
 800e346:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e34a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e34e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e352:	d1b2      	bne.n	800e2ba <_dtoa_r+0x57a>
 800e354:	e7d3      	b.n	800e2fe <_dtoa_r+0x5be>
 800e356:	bf00      	nop
 800e358:	08010238 	.word	0x08010238
 800e35c:	08010210 	.word	0x08010210
 800e360:	9907      	ldr	r1, [sp, #28]
 800e362:	2900      	cmp	r1, #0
 800e364:	f000 80d0 	beq.w	800e508 <_dtoa_r+0x7c8>
 800e368:	9906      	ldr	r1, [sp, #24]
 800e36a:	2901      	cmp	r1, #1
 800e36c:	f300 80b4 	bgt.w	800e4d8 <_dtoa_r+0x798>
 800e370:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e372:	2900      	cmp	r1, #0
 800e374:	f000 80ac 	beq.w	800e4d0 <_dtoa_r+0x790>
 800e378:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e37c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800e380:	461c      	mov	r4, r3
 800e382:	930a      	str	r3, [sp, #40]	; 0x28
 800e384:	9b04      	ldr	r3, [sp, #16]
 800e386:	4413      	add	r3, r2
 800e388:	9304      	str	r3, [sp, #16]
 800e38a:	9b05      	ldr	r3, [sp, #20]
 800e38c:	2101      	movs	r1, #1
 800e38e:	4413      	add	r3, r2
 800e390:	4630      	mov	r0, r6
 800e392:	9305      	str	r3, [sp, #20]
 800e394:	f000 fd66 	bl	800ee64 <__i2b>
 800e398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e39a:	4607      	mov	r7, r0
 800e39c:	f1b8 0f00 	cmp.w	r8, #0
 800e3a0:	dd0d      	ble.n	800e3be <_dtoa_r+0x67e>
 800e3a2:	9a05      	ldr	r2, [sp, #20]
 800e3a4:	2a00      	cmp	r2, #0
 800e3a6:	dd0a      	ble.n	800e3be <_dtoa_r+0x67e>
 800e3a8:	4542      	cmp	r2, r8
 800e3aa:	9904      	ldr	r1, [sp, #16]
 800e3ac:	bfa8      	it	ge
 800e3ae:	4642      	movge	r2, r8
 800e3b0:	1a89      	subs	r1, r1, r2
 800e3b2:	9104      	str	r1, [sp, #16]
 800e3b4:	9905      	ldr	r1, [sp, #20]
 800e3b6:	eba8 0802 	sub.w	r8, r8, r2
 800e3ba:	1a8a      	subs	r2, r1, r2
 800e3bc:	9205      	str	r2, [sp, #20]
 800e3be:	b303      	cbz	r3, 800e402 <_dtoa_r+0x6c2>
 800e3c0:	9a07      	ldr	r2, [sp, #28]
 800e3c2:	2a00      	cmp	r2, #0
 800e3c4:	f000 80a5 	beq.w	800e512 <_dtoa_r+0x7d2>
 800e3c8:	2c00      	cmp	r4, #0
 800e3ca:	dd13      	ble.n	800e3f4 <_dtoa_r+0x6b4>
 800e3cc:	4639      	mov	r1, r7
 800e3ce:	4622      	mov	r2, r4
 800e3d0:	4630      	mov	r0, r6
 800e3d2:	930d      	str	r3, [sp, #52]	; 0x34
 800e3d4:	f000 fe06 	bl	800efe4 <__pow5mult>
 800e3d8:	462a      	mov	r2, r5
 800e3da:	4601      	mov	r1, r0
 800e3dc:	4607      	mov	r7, r0
 800e3de:	4630      	mov	r0, r6
 800e3e0:	f000 fd56 	bl	800ee90 <__multiply>
 800e3e4:	4629      	mov	r1, r5
 800e3e6:	900a      	str	r0, [sp, #40]	; 0x28
 800e3e8:	4630      	mov	r0, r6
 800e3ea:	f000 fc83 	bl	800ecf4 <_Bfree>
 800e3ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e3f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e3f2:	4615      	mov	r5, r2
 800e3f4:	1b1a      	subs	r2, r3, r4
 800e3f6:	d004      	beq.n	800e402 <_dtoa_r+0x6c2>
 800e3f8:	4629      	mov	r1, r5
 800e3fa:	4630      	mov	r0, r6
 800e3fc:	f000 fdf2 	bl	800efe4 <__pow5mult>
 800e400:	4605      	mov	r5, r0
 800e402:	2101      	movs	r1, #1
 800e404:	4630      	mov	r0, r6
 800e406:	f000 fd2d 	bl	800ee64 <__i2b>
 800e40a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	4604      	mov	r4, r0
 800e410:	f340 8081 	ble.w	800e516 <_dtoa_r+0x7d6>
 800e414:	461a      	mov	r2, r3
 800e416:	4601      	mov	r1, r0
 800e418:	4630      	mov	r0, r6
 800e41a:	f000 fde3 	bl	800efe4 <__pow5mult>
 800e41e:	9b06      	ldr	r3, [sp, #24]
 800e420:	2b01      	cmp	r3, #1
 800e422:	4604      	mov	r4, r0
 800e424:	dd7a      	ble.n	800e51c <_dtoa_r+0x7dc>
 800e426:	2300      	movs	r3, #0
 800e428:	930a      	str	r3, [sp, #40]	; 0x28
 800e42a:	6922      	ldr	r2, [r4, #16]
 800e42c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e430:	6910      	ldr	r0, [r2, #16]
 800e432:	f000 fcc7 	bl	800edc4 <__hi0bits>
 800e436:	f1c0 0020 	rsb	r0, r0, #32
 800e43a:	9b05      	ldr	r3, [sp, #20]
 800e43c:	4418      	add	r0, r3
 800e43e:	f010 001f 	ands.w	r0, r0, #31
 800e442:	f000 808c 	beq.w	800e55e <_dtoa_r+0x81e>
 800e446:	f1c0 0220 	rsb	r2, r0, #32
 800e44a:	2a04      	cmp	r2, #4
 800e44c:	f340 8085 	ble.w	800e55a <_dtoa_r+0x81a>
 800e450:	f1c0 001c 	rsb	r0, r0, #28
 800e454:	9b04      	ldr	r3, [sp, #16]
 800e456:	4403      	add	r3, r0
 800e458:	9304      	str	r3, [sp, #16]
 800e45a:	9b05      	ldr	r3, [sp, #20]
 800e45c:	4403      	add	r3, r0
 800e45e:	4480      	add	r8, r0
 800e460:	9305      	str	r3, [sp, #20]
 800e462:	9b04      	ldr	r3, [sp, #16]
 800e464:	2b00      	cmp	r3, #0
 800e466:	dd05      	ble.n	800e474 <_dtoa_r+0x734>
 800e468:	4629      	mov	r1, r5
 800e46a:	461a      	mov	r2, r3
 800e46c:	4630      	mov	r0, r6
 800e46e:	f000 fe13 	bl	800f098 <__lshift>
 800e472:	4605      	mov	r5, r0
 800e474:	9b05      	ldr	r3, [sp, #20]
 800e476:	2b00      	cmp	r3, #0
 800e478:	dd05      	ble.n	800e486 <_dtoa_r+0x746>
 800e47a:	4621      	mov	r1, r4
 800e47c:	461a      	mov	r2, r3
 800e47e:	4630      	mov	r0, r6
 800e480:	f000 fe0a 	bl	800f098 <__lshift>
 800e484:	4604      	mov	r4, r0
 800e486:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d06a      	beq.n	800e562 <_dtoa_r+0x822>
 800e48c:	4621      	mov	r1, r4
 800e48e:	4628      	mov	r0, r5
 800e490:	f000 fe72 	bl	800f178 <__mcmp>
 800e494:	2800      	cmp	r0, #0
 800e496:	da64      	bge.n	800e562 <_dtoa_r+0x822>
 800e498:	2300      	movs	r3, #0
 800e49a:	4629      	mov	r1, r5
 800e49c:	220a      	movs	r2, #10
 800e49e:	4630      	mov	r0, r6
 800e4a0:	f000 fc4a 	bl	800ed38 <__multadd>
 800e4a4:	9b07      	ldr	r3, [sp, #28]
 800e4a6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e4aa:	4605      	mov	r5, r0
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	f000 8191 	beq.w	800e7d4 <_dtoa_r+0xa94>
 800e4b2:	4639      	mov	r1, r7
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	220a      	movs	r2, #10
 800e4b8:	4630      	mov	r0, r6
 800e4ba:	f000 fc3d 	bl	800ed38 <__multadd>
 800e4be:	f1ba 0f00 	cmp.w	sl, #0
 800e4c2:	4607      	mov	r7, r0
 800e4c4:	f300 808d 	bgt.w	800e5e2 <_dtoa_r+0x8a2>
 800e4c8:	9b06      	ldr	r3, [sp, #24]
 800e4ca:	2b02      	cmp	r3, #2
 800e4cc:	dc50      	bgt.n	800e570 <_dtoa_r+0x830>
 800e4ce:	e088      	b.n	800e5e2 <_dtoa_r+0x8a2>
 800e4d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e4d2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e4d6:	e751      	b.n	800e37c <_dtoa_r+0x63c>
 800e4d8:	f109 34ff 	add.w	r4, r9, #4294967295
 800e4dc:	42a3      	cmp	r3, r4
 800e4de:	bfbf      	itttt	lt
 800e4e0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800e4e2:	1ae3      	sublt	r3, r4, r3
 800e4e4:	18d2      	addlt	r2, r2, r3
 800e4e6:	9209      	strlt	r2, [sp, #36]	; 0x24
 800e4e8:	bfb6      	itet	lt
 800e4ea:	4623      	movlt	r3, r4
 800e4ec:	1b1c      	subge	r4, r3, r4
 800e4ee:	2400      	movlt	r4, #0
 800e4f0:	f1b9 0f00 	cmp.w	r9, #0
 800e4f4:	bfb5      	itete	lt
 800e4f6:	9a04      	ldrlt	r2, [sp, #16]
 800e4f8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800e4fc:	eba2 0809 	sublt.w	r8, r2, r9
 800e500:	464a      	movge	r2, r9
 800e502:	bfb8      	it	lt
 800e504:	2200      	movlt	r2, #0
 800e506:	e73c      	b.n	800e382 <_dtoa_r+0x642>
 800e508:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800e50c:	9f07      	ldr	r7, [sp, #28]
 800e50e:	461c      	mov	r4, r3
 800e510:	e744      	b.n	800e39c <_dtoa_r+0x65c>
 800e512:	461a      	mov	r2, r3
 800e514:	e770      	b.n	800e3f8 <_dtoa_r+0x6b8>
 800e516:	9b06      	ldr	r3, [sp, #24]
 800e518:	2b01      	cmp	r3, #1
 800e51a:	dc18      	bgt.n	800e54e <_dtoa_r+0x80e>
 800e51c:	9b02      	ldr	r3, [sp, #8]
 800e51e:	b9b3      	cbnz	r3, 800e54e <_dtoa_r+0x80e>
 800e520:	9b03      	ldr	r3, [sp, #12]
 800e522:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800e526:	b9a2      	cbnz	r2, 800e552 <_dtoa_r+0x812>
 800e528:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800e52c:	0d12      	lsrs	r2, r2, #20
 800e52e:	0512      	lsls	r2, r2, #20
 800e530:	b18a      	cbz	r2, 800e556 <_dtoa_r+0x816>
 800e532:	9b04      	ldr	r3, [sp, #16]
 800e534:	3301      	adds	r3, #1
 800e536:	9304      	str	r3, [sp, #16]
 800e538:	9b05      	ldr	r3, [sp, #20]
 800e53a:	3301      	adds	r3, #1
 800e53c:	9305      	str	r3, [sp, #20]
 800e53e:	2301      	movs	r3, #1
 800e540:	930a      	str	r3, [sp, #40]	; 0x28
 800e542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e544:	2b00      	cmp	r3, #0
 800e546:	f47f af70 	bne.w	800e42a <_dtoa_r+0x6ea>
 800e54a:	2001      	movs	r0, #1
 800e54c:	e775      	b.n	800e43a <_dtoa_r+0x6fa>
 800e54e:	2300      	movs	r3, #0
 800e550:	e7f6      	b.n	800e540 <_dtoa_r+0x800>
 800e552:	9b02      	ldr	r3, [sp, #8]
 800e554:	e7f4      	b.n	800e540 <_dtoa_r+0x800>
 800e556:	920a      	str	r2, [sp, #40]	; 0x28
 800e558:	e7f3      	b.n	800e542 <_dtoa_r+0x802>
 800e55a:	d082      	beq.n	800e462 <_dtoa_r+0x722>
 800e55c:	4610      	mov	r0, r2
 800e55e:	301c      	adds	r0, #28
 800e560:	e778      	b.n	800e454 <_dtoa_r+0x714>
 800e562:	f1b9 0f00 	cmp.w	r9, #0
 800e566:	dc37      	bgt.n	800e5d8 <_dtoa_r+0x898>
 800e568:	9b06      	ldr	r3, [sp, #24]
 800e56a:	2b02      	cmp	r3, #2
 800e56c:	dd34      	ble.n	800e5d8 <_dtoa_r+0x898>
 800e56e:	46ca      	mov	sl, r9
 800e570:	f1ba 0f00 	cmp.w	sl, #0
 800e574:	d10d      	bne.n	800e592 <_dtoa_r+0x852>
 800e576:	4621      	mov	r1, r4
 800e578:	4653      	mov	r3, sl
 800e57a:	2205      	movs	r2, #5
 800e57c:	4630      	mov	r0, r6
 800e57e:	f000 fbdb 	bl	800ed38 <__multadd>
 800e582:	4601      	mov	r1, r0
 800e584:	4604      	mov	r4, r0
 800e586:	4628      	mov	r0, r5
 800e588:	f000 fdf6 	bl	800f178 <__mcmp>
 800e58c:	2800      	cmp	r0, #0
 800e58e:	f73f adeb 	bgt.w	800e168 <_dtoa_r+0x428>
 800e592:	9b08      	ldr	r3, [sp, #32]
 800e594:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e598:	ea6f 0b03 	mvn.w	fp, r3
 800e59c:	f04f 0900 	mov.w	r9, #0
 800e5a0:	4621      	mov	r1, r4
 800e5a2:	4630      	mov	r0, r6
 800e5a4:	f000 fba6 	bl	800ecf4 <_Bfree>
 800e5a8:	2f00      	cmp	r7, #0
 800e5aa:	f43f aea8 	beq.w	800e2fe <_dtoa_r+0x5be>
 800e5ae:	f1b9 0f00 	cmp.w	r9, #0
 800e5b2:	d005      	beq.n	800e5c0 <_dtoa_r+0x880>
 800e5b4:	45b9      	cmp	r9, r7
 800e5b6:	d003      	beq.n	800e5c0 <_dtoa_r+0x880>
 800e5b8:	4649      	mov	r1, r9
 800e5ba:	4630      	mov	r0, r6
 800e5bc:	f000 fb9a 	bl	800ecf4 <_Bfree>
 800e5c0:	4639      	mov	r1, r7
 800e5c2:	4630      	mov	r0, r6
 800e5c4:	f000 fb96 	bl	800ecf4 <_Bfree>
 800e5c8:	e699      	b.n	800e2fe <_dtoa_r+0x5be>
 800e5ca:	2400      	movs	r4, #0
 800e5cc:	4627      	mov	r7, r4
 800e5ce:	e7e0      	b.n	800e592 <_dtoa_r+0x852>
 800e5d0:	46bb      	mov	fp, r7
 800e5d2:	4604      	mov	r4, r0
 800e5d4:	4607      	mov	r7, r0
 800e5d6:	e5c7      	b.n	800e168 <_dtoa_r+0x428>
 800e5d8:	9b07      	ldr	r3, [sp, #28]
 800e5da:	46ca      	mov	sl, r9
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	f000 8100 	beq.w	800e7e2 <_dtoa_r+0xaa2>
 800e5e2:	f1b8 0f00 	cmp.w	r8, #0
 800e5e6:	dd05      	ble.n	800e5f4 <_dtoa_r+0x8b4>
 800e5e8:	4639      	mov	r1, r7
 800e5ea:	4642      	mov	r2, r8
 800e5ec:	4630      	mov	r0, r6
 800e5ee:	f000 fd53 	bl	800f098 <__lshift>
 800e5f2:	4607      	mov	r7, r0
 800e5f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d05d      	beq.n	800e6b6 <_dtoa_r+0x976>
 800e5fa:	6879      	ldr	r1, [r7, #4]
 800e5fc:	4630      	mov	r0, r6
 800e5fe:	f000 fb39 	bl	800ec74 <_Balloc>
 800e602:	4680      	mov	r8, r0
 800e604:	b928      	cbnz	r0, 800e612 <_dtoa_r+0x8d2>
 800e606:	4b82      	ldr	r3, [pc, #520]	; (800e810 <_dtoa_r+0xad0>)
 800e608:	4602      	mov	r2, r0
 800e60a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e60e:	f7ff bbaf 	b.w	800dd70 <_dtoa_r+0x30>
 800e612:	693a      	ldr	r2, [r7, #16]
 800e614:	3202      	adds	r2, #2
 800e616:	0092      	lsls	r2, r2, #2
 800e618:	f107 010c 	add.w	r1, r7, #12
 800e61c:	300c      	adds	r0, #12
 800e61e:	f7fe fd5b 	bl	800d0d8 <memcpy>
 800e622:	2201      	movs	r2, #1
 800e624:	4641      	mov	r1, r8
 800e626:	4630      	mov	r0, r6
 800e628:	f000 fd36 	bl	800f098 <__lshift>
 800e62c:	9b01      	ldr	r3, [sp, #4]
 800e62e:	3301      	adds	r3, #1
 800e630:	9304      	str	r3, [sp, #16]
 800e632:	9b01      	ldr	r3, [sp, #4]
 800e634:	4453      	add	r3, sl
 800e636:	9308      	str	r3, [sp, #32]
 800e638:	9b02      	ldr	r3, [sp, #8]
 800e63a:	f003 0301 	and.w	r3, r3, #1
 800e63e:	46b9      	mov	r9, r7
 800e640:	9307      	str	r3, [sp, #28]
 800e642:	4607      	mov	r7, r0
 800e644:	9b04      	ldr	r3, [sp, #16]
 800e646:	4621      	mov	r1, r4
 800e648:	3b01      	subs	r3, #1
 800e64a:	4628      	mov	r0, r5
 800e64c:	9302      	str	r3, [sp, #8]
 800e64e:	f7ff faeb 	bl	800dc28 <quorem>
 800e652:	4603      	mov	r3, r0
 800e654:	3330      	adds	r3, #48	; 0x30
 800e656:	9005      	str	r0, [sp, #20]
 800e658:	4649      	mov	r1, r9
 800e65a:	4628      	mov	r0, r5
 800e65c:	9309      	str	r3, [sp, #36]	; 0x24
 800e65e:	f000 fd8b 	bl	800f178 <__mcmp>
 800e662:	463a      	mov	r2, r7
 800e664:	4682      	mov	sl, r0
 800e666:	4621      	mov	r1, r4
 800e668:	4630      	mov	r0, r6
 800e66a:	f000 fda1 	bl	800f1b0 <__mdiff>
 800e66e:	68c2      	ldr	r2, [r0, #12]
 800e670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e672:	4680      	mov	r8, r0
 800e674:	bb0a      	cbnz	r2, 800e6ba <_dtoa_r+0x97a>
 800e676:	4601      	mov	r1, r0
 800e678:	4628      	mov	r0, r5
 800e67a:	f000 fd7d 	bl	800f178 <__mcmp>
 800e67e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e680:	4602      	mov	r2, r0
 800e682:	4641      	mov	r1, r8
 800e684:	4630      	mov	r0, r6
 800e686:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800e68a:	f000 fb33 	bl	800ecf4 <_Bfree>
 800e68e:	9b06      	ldr	r3, [sp, #24]
 800e690:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e692:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800e696:	ea43 0102 	orr.w	r1, r3, r2
 800e69a:	9b07      	ldr	r3, [sp, #28]
 800e69c:	430b      	orrs	r3, r1
 800e69e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6a0:	d10d      	bne.n	800e6be <_dtoa_r+0x97e>
 800e6a2:	2b39      	cmp	r3, #57	; 0x39
 800e6a4:	d029      	beq.n	800e6fa <_dtoa_r+0x9ba>
 800e6a6:	f1ba 0f00 	cmp.w	sl, #0
 800e6aa:	dd01      	ble.n	800e6b0 <_dtoa_r+0x970>
 800e6ac:	9b05      	ldr	r3, [sp, #20]
 800e6ae:	3331      	adds	r3, #49	; 0x31
 800e6b0:	9a02      	ldr	r2, [sp, #8]
 800e6b2:	7013      	strb	r3, [r2, #0]
 800e6b4:	e774      	b.n	800e5a0 <_dtoa_r+0x860>
 800e6b6:	4638      	mov	r0, r7
 800e6b8:	e7b8      	b.n	800e62c <_dtoa_r+0x8ec>
 800e6ba:	2201      	movs	r2, #1
 800e6bc:	e7e1      	b.n	800e682 <_dtoa_r+0x942>
 800e6be:	f1ba 0f00 	cmp.w	sl, #0
 800e6c2:	db06      	blt.n	800e6d2 <_dtoa_r+0x992>
 800e6c4:	9906      	ldr	r1, [sp, #24]
 800e6c6:	ea41 0a0a 	orr.w	sl, r1, sl
 800e6ca:	9907      	ldr	r1, [sp, #28]
 800e6cc:	ea5a 0101 	orrs.w	r1, sl, r1
 800e6d0:	d120      	bne.n	800e714 <_dtoa_r+0x9d4>
 800e6d2:	2a00      	cmp	r2, #0
 800e6d4:	ddec      	ble.n	800e6b0 <_dtoa_r+0x970>
 800e6d6:	4629      	mov	r1, r5
 800e6d8:	2201      	movs	r2, #1
 800e6da:	4630      	mov	r0, r6
 800e6dc:	9304      	str	r3, [sp, #16]
 800e6de:	f000 fcdb 	bl	800f098 <__lshift>
 800e6e2:	4621      	mov	r1, r4
 800e6e4:	4605      	mov	r5, r0
 800e6e6:	f000 fd47 	bl	800f178 <__mcmp>
 800e6ea:	2800      	cmp	r0, #0
 800e6ec:	9b04      	ldr	r3, [sp, #16]
 800e6ee:	dc02      	bgt.n	800e6f6 <_dtoa_r+0x9b6>
 800e6f0:	d1de      	bne.n	800e6b0 <_dtoa_r+0x970>
 800e6f2:	07da      	lsls	r2, r3, #31
 800e6f4:	d5dc      	bpl.n	800e6b0 <_dtoa_r+0x970>
 800e6f6:	2b39      	cmp	r3, #57	; 0x39
 800e6f8:	d1d8      	bne.n	800e6ac <_dtoa_r+0x96c>
 800e6fa:	9a02      	ldr	r2, [sp, #8]
 800e6fc:	2339      	movs	r3, #57	; 0x39
 800e6fe:	7013      	strb	r3, [r2, #0]
 800e700:	4643      	mov	r3, r8
 800e702:	4698      	mov	r8, r3
 800e704:	3b01      	subs	r3, #1
 800e706:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800e70a:	2a39      	cmp	r2, #57	; 0x39
 800e70c:	d051      	beq.n	800e7b2 <_dtoa_r+0xa72>
 800e70e:	3201      	adds	r2, #1
 800e710:	701a      	strb	r2, [r3, #0]
 800e712:	e745      	b.n	800e5a0 <_dtoa_r+0x860>
 800e714:	2a00      	cmp	r2, #0
 800e716:	dd03      	ble.n	800e720 <_dtoa_r+0x9e0>
 800e718:	2b39      	cmp	r3, #57	; 0x39
 800e71a:	d0ee      	beq.n	800e6fa <_dtoa_r+0x9ba>
 800e71c:	3301      	adds	r3, #1
 800e71e:	e7c7      	b.n	800e6b0 <_dtoa_r+0x970>
 800e720:	9a04      	ldr	r2, [sp, #16]
 800e722:	9908      	ldr	r1, [sp, #32]
 800e724:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e728:	428a      	cmp	r2, r1
 800e72a:	d02b      	beq.n	800e784 <_dtoa_r+0xa44>
 800e72c:	4629      	mov	r1, r5
 800e72e:	2300      	movs	r3, #0
 800e730:	220a      	movs	r2, #10
 800e732:	4630      	mov	r0, r6
 800e734:	f000 fb00 	bl	800ed38 <__multadd>
 800e738:	45b9      	cmp	r9, r7
 800e73a:	4605      	mov	r5, r0
 800e73c:	f04f 0300 	mov.w	r3, #0
 800e740:	f04f 020a 	mov.w	r2, #10
 800e744:	4649      	mov	r1, r9
 800e746:	4630      	mov	r0, r6
 800e748:	d107      	bne.n	800e75a <_dtoa_r+0xa1a>
 800e74a:	f000 faf5 	bl	800ed38 <__multadd>
 800e74e:	4681      	mov	r9, r0
 800e750:	4607      	mov	r7, r0
 800e752:	9b04      	ldr	r3, [sp, #16]
 800e754:	3301      	adds	r3, #1
 800e756:	9304      	str	r3, [sp, #16]
 800e758:	e774      	b.n	800e644 <_dtoa_r+0x904>
 800e75a:	f000 faed 	bl	800ed38 <__multadd>
 800e75e:	4639      	mov	r1, r7
 800e760:	4681      	mov	r9, r0
 800e762:	2300      	movs	r3, #0
 800e764:	220a      	movs	r2, #10
 800e766:	4630      	mov	r0, r6
 800e768:	f000 fae6 	bl	800ed38 <__multadd>
 800e76c:	4607      	mov	r7, r0
 800e76e:	e7f0      	b.n	800e752 <_dtoa_r+0xa12>
 800e770:	f1ba 0f00 	cmp.w	sl, #0
 800e774:	9a01      	ldr	r2, [sp, #4]
 800e776:	bfcc      	ite	gt
 800e778:	46d0      	movgt	r8, sl
 800e77a:	f04f 0801 	movle.w	r8, #1
 800e77e:	4490      	add	r8, r2
 800e780:	f04f 0900 	mov.w	r9, #0
 800e784:	4629      	mov	r1, r5
 800e786:	2201      	movs	r2, #1
 800e788:	4630      	mov	r0, r6
 800e78a:	9302      	str	r3, [sp, #8]
 800e78c:	f000 fc84 	bl	800f098 <__lshift>
 800e790:	4621      	mov	r1, r4
 800e792:	4605      	mov	r5, r0
 800e794:	f000 fcf0 	bl	800f178 <__mcmp>
 800e798:	2800      	cmp	r0, #0
 800e79a:	dcb1      	bgt.n	800e700 <_dtoa_r+0x9c0>
 800e79c:	d102      	bne.n	800e7a4 <_dtoa_r+0xa64>
 800e79e:	9b02      	ldr	r3, [sp, #8]
 800e7a0:	07db      	lsls	r3, r3, #31
 800e7a2:	d4ad      	bmi.n	800e700 <_dtoa_r+0x9c0>
 800e7a4:	4643      	mov	r3, r8
 800e7a6:	4698      	mov	r8, r3
 800e7a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e7ac:	2a30      	cmp	r2, #48	; 0x30
 800e7ae:	d0fa      	beq.n	800e7a6 <_dtoa_r+0xa66>
 800e7b0:	e6f6      	b.n	800e5a0 <_dtoa_r+0x860>
 800e7b2:	9a01      	ldr	r2, [sp, #4]
 800e7b4:	429a      	cmp	r2, r3
 800e7b6:	d1a4      	bne.n	800e702 <_dtoa_r+0x9c2>
 800e7b8:	f10b 0b01 	add.w	fp, fp, #1
 800e7bc:	2331      	movs	r3, #49	; 0x31
 800e7be:	e778      	b.n	800e6b2 <_dtoa_r+0x972>
 800e7c0:	4b14      	ldr	r3, [pc, #80]	; (800e814 <_dtoa_r+0xad4>)
 800e7c2:	f7ff bb27 	b.w	800de14 <_dtoa_r+0xd4>
 800e7c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	f47f ab03 	bne.w	800ddd4 <_dtoa_r+0x94>
 800e7ce:	4b12      	ldr	r3, [pc, #72]	; (800e818 <_dtoa_r+0xad8>)
 800e7d0:	f7ff bb20 	b.w	800de14 <_dtoa_r+0xd4>
 800e7d4:	f1ba 0f00 	cmp.w	sl, #0
 800e7d8:	dc03      	bgt.n	800e7e2 <_dtoa_r+0xaa2>
 800e7da:	9b06      	ldr	r3, [sp, #24]
 800e7dc:	2b02      	cmp	r3, #2
 800e7de:	f73f aec7 	bgt.w	800e570 <_dtoa_r+0x830>
 800e7e2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e7e6:	4621      	mov	r1, r4
 800e7e8:	4628      	mov	r0, r5
 800e7ea:	f7ff fa1d 	bl	800dc28 <quorem>
 800e7ee:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e7f2:	f808 3b01 	strb.w	r3, [r8], #1
 800e7f6:	9a01      	ldr	r2, [sp, #4]
 800e7f8:	eba8 0202 	sub.w	r2, r8, r2
 800e7fc:	4592      	cmp	sl, r2
 800e7fe:	ddb7      	ble.n	800e770 <_dtoa_r+0xa30>
 800e800:	4629      	mov	r1, r5
 800e802:	2300      	movs	r3, #0
 800e804:	220a      	movs	r2, #10
 800e806:	4630      	mov	r0, r6
 800e808:	f000 fa96 	bl	800ed38 <__multadd>
 800e80c:	4605      	mov	r5, r0
 800e80e:	e7ea      	b.n	800e7e6 <_dtoa_r+0xaa6>
 800e810:	08010143 	.word	0x08010143
 800e814:	080100a0 	.word	0x080100a0
 800e818:	080100c4 	.word	0x080100c4

0800e81c <__sflush_r>:
 800e81c:	898a      	ldrh	r2, [r1, #12]
 800e81e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e822:	4605      	mov	r5, r0
 800e824:	0710      	lsls	r0, r2, #28
 800e826:	460c      	mov	r4, r1
 800e828:	d458      	bmi.n	800e8dc <__sflush_r+0xc0>
 800e82a:	684b      	ldr	r3, [r1, #4]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	dc05      	bgt.n	800e83c <__sflush_r+0x20>
 800e830:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e832:	2b00      	cmp	r3, #0
 800e834:	dc02      	bgt.n	800e83c <__sflush_r+0x20>
 800e836:	2000      	movs	r0, #0
 800e838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e83c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e83e:	2e00      	cmp	r6, #0
 800e840:	d0f9      	beq.n	800e836 <__sflush_r+0x1a>
 800e842:	2300      	movs	r3, #0
 800e844:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e848:	682f      	ldr	r7, [r5, #0]
 800e84a:	602b      	str	r3, [r5, #0]
 800e84c:	d032      	beq.n	800e8b4 <__sflush_r+0x98>
 800e84e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e850:	89a3      	ldrh	r3, [r4, #12]
 800e852:	075a      	lsls	r2, r3, #29
 800e854:	d505      	bpl.n	800e862 <__sflush_r+0x46>
 800e856:	6863      	ldr	r3, [r4, #4]
 800e858:	1ac0      	subs	r0, r0, r3
 800e85a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e85c:	b10b      	cbz	r3, 800e862 <__sflush_r+0x46>
 800e85e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e860:	1ac0      	subs	r0, r0, r3
 800e862:	2300      	movs	r3, #0
 800e864:	4602      	mov	r2, r0
 800e866:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e868:	6a21      	ldr	r1, [r4, #32]
 800e86a:	4628      	mov	r0, r5
 800e86c:	47b0      	blx	r6
 800e86e:	1c43      	adds	r3, r0, #1
 800e870:	89a3      	ldrh	r3, [r4, #12]
 800e872:	d106      	bne.n	800e882 <__sflush_r+0x66>
 800e874:	6829      	ldr	r1, [r5, #0]
 800e876:	291d      	cmp	r1, #29
 800e878:	d82c      	bhi.n	800e8d4 <__sflush_r+0xb8>
 800e87a:	4a2a      	ldr	r2, [pc, #168]	; (800e924 <__sflush_r+0x108>)
 800e87c:	40ca      	lsrs	r2, r1
 800e87e:	07d6      	lsls	r6, r2, #31
 800e880:	d528      	bpl.n	800e8d4 <__sflush_r+0xb8>
 800e882:	2200      	movs	r2, #0
 800e884:	6062      	str	r2, [r4, #4]
 800e886:	04d9      	lsls	r1, r3, #19
 800e888:	6922      	ldr	r2, [r4, #16]
 800e88a:	6022      	str	r2, [r4, #0]
 800e88c:	d504      	bpl.n	800e898 <__sflush_r+0x7c>
 800e88e:	1c42      	adds	r2, r0, #1
 800e890:	d101      	bne.n	800e896 <__sflush_r+0x7a>
 800e892:	682b      	ldr	r3, [r5, #0]
 800e894:	b903      	cbnz	r3, 800e898 <__sflush_r+0x7c>
 800e896:	6560      	str	r0, [r4, #84]	; 0x54
 800e898:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e89a:	602f      	str	r7, [r5, #0]
 800e89c:	2900      	cmp	r1, #0
 800e89e:	d0ca      	beq.n	800e836 <__sflush_r+0x1a>
 800e8a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e8a4:	4299      	cmp	r1, r3
 800e8a6:	d002      	beq.n	800e8ae <__sflush_r+0x92>
 800e8a8:	4628      	mov	r0, r5
 800e8aa:	f000 fd7d 	bl	800f3a8 <_free_r>
 800e8ae:	2000      	movs	r0, #0
 800e8b0:	6360      	str	r0, [r4, #52]	; 0x34
 800e8b2:	e7c1      	b.n	800e838 <__sflush_r+0x1c>
 800e8b4:	6a21      	ldr	r1, [r4, #32]
 800e8b6:	2301      	movs	r3, #1
 800e8b8:	4628      	mov	r0, r5
 800e8ba:	47b0      	blx	r6
 800e8bc:	1c41      	adds	r1, r0, #1
 800e8be:	d1c7      	bne.n	800e850 <__sflush_r+0x34>
 800e8c0:	682b      	ldr	r3, [r5, #0]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d0c4      	beq.n	800e850 <__sflush_r+0x34>
 800e8c6:	2b1d      	cmp	r3, #29
 800e8c8:	d001      	beq.n	800e8ce <__sflush_r+0xb2>
 800e8ca:	2b16      	cmp	r3, #22
 800e8cc:	d101      	bne.n	800e8d2 <__sflush_r+0xb6>
 800e8ce:	602f      	str	r7, [r5, #0]
 800e8d0:	e7b1      	b.n	800e836 <__sflush_r+0x1a>
 800e8d2:	89a3      	ldrh	r3, [r4, #12]
 800e8d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8d8:	81a3      	strh	r3, [r4, #12]
 800e8da:	e7ad      	b.n	800e838 <__sflush_r+0x1c>
 800e8dc:	690f      	ldr	r7, [r1, #16]
 800e8de:	2f00      	cmp	r7, #0
 800e8e0:	d0a9      	beq.n	800e836 <__sflush_r+0x1a>
 800e8e2:	0793      	lsls	r3, r2, #30
 800e8e4:	680e      	ldr	r6, [r1, #0]
 800e8e6:	bf08      	it	eq
 800e8e8:	694b      	ldreq	r3, [r1, #20]
 800e8ea:	600f      	str	r7, [r1, #0]
 800e8ec:	bf18      	it	ne
 800e8ee:	2300      	movne	r3, #0
 800e8f0:	eba6 0807 	sub.w	r8, r6, r7
 800e8f4:	608b      	str	r3, [r1, #8]
 800e8f6:	f1b8 0f00 	cmp.w	r8, #0
 800e8fa:	dd9c      	ble.n	800e836 <__sflush_r+0x1a>
 800e8fc:	6a21      	ldr	r1, [r4, #32]
 800e8fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e900:	4643      	mov	r3, r8
 800e902:	463a      	mov	r2, r7
 800e904:	4628      	mov	r0, r5
 800e906:	47b0      	blx	r6
 800e908:	2800      	cmp	r0, #0
 800e90a:	dc06      	bgt.n	800e91a <__sflush_r+0xfe>
 800e90c:	89a3      	ldrh	r3, [r4, #12]
 800e90e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e912:	81a3      	strh	r3, [r4, #12]
 800e914:	f04f 30ff 	mov.w	r0, #4294967295
 800e918:	e78e      	b.n	800e838 <__sflush_r+0x1c>
 800e91a:	4407      	add	r7, r0
 800e91c:	eba8 0800 	sub.w	r8, r8, r0
 800e920:	e7e9      	b.n	800e8f6 <__sflush_r+0xda>
 800e922:	bf00      	nop
 800e924:	20400001 	.word	0x20400001

0800e928 <_fflush_r>:
 800e928:	b538      	push	{r3, r4, r5, lr}
 800e92a:	690b      	ldr	r3, [r1, #16]
 800e92c:	4605      	mov	r5, r0
 800e92e:	460c      	mov	r4, r1
 800e930:	b913      	cbnz	r3, 800e938 <_fflush_r+0x10>
 800e932:	2500      	movs	r5, #0
 800e934:	4628      	mov	r0, r5
 800e936:	bd38      	pop	{r3, r4, r5, pc}
 800e938:	b118      	cbz	r0, 800e942 <_fflush_r+0x1a>
 800e93a:	6983      	ldr	r3, [r0, #24]
 800e93c:	b90b      	cbnz	r3, 800e942 <_fflush_r+0x1a>
 800e93e:	f000 f887 	bl	800ea50 <__sinit>
 800e942:	4b14      	ldr	r3, [pc, #80]	; (800e994 <_fflush_r+0x6c>)
 800e944:	429c      	cmp	r4, r3
 800e946:	d11b      	bne.n	800e980 <_fflush_r+0x58>
 800e948:	686c      	ldr	r4, [r5, #4]
 800e94a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d0ef      	beq.n	800e932 <_fflush_r+0xa>
 800e952:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e954:	07d0      	lsls	r0, r2, #31
 800e956:	d404      	bmi.n	800e962 <_fflush_r+0x3a>
 800e958:	0599      	lsls	r1, r3, #22
 800e95a:	d402      	bmi.n	800e962 <_fflush_r+0x3a>
 800e95c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e95e:	f000 f91a 	bl	800eb96 <__retarget_lock_acquire_recursive>
 800e962:	4628      	mov	r0, r5
 800e964:	4621      	mov	r1, r4
 800e966:	f7ff ff59 	bl	800e81c <__sflush_r>
 800e96a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e96c:	07da      	lsls	r2, r3, #31
 800e96e:	4605      	mov	r5, r0
 800e970:	d4e0      	bmi.n	800e934 <_fflush_r+0xc>
 800e972:	89a3      	ldrh	r3, [r4, #12]
 800e974:	059b      	lsls	r3, r3, #22
 800e976:	d4dd      	bmi.n	800e934 <_fflush_r+0xc>
 800e978:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e97a:	f000 f90d 	bl	800eb98 <__retarget_lock_release_recursive>
 800e97e:	e7d9      	b.n	800e934 <_fflush_r+0xc>
 800e980:	4b05      	ldr	r3, [pc, #20]	; (800e998 <_fflush_r+0x70>)
 800e982:	429c      	cmp	r4, r3
 800e984:	d101      	bne.n	800e98a <_fflush_r+0x62>
 800e986:	68ac      	ldr	r4, [r5, #8]
 800e988:	e7df      	b.n	800e94a <_fflush_r+0x22>
 800e98a:	4b04      	ldr	r3, [pc, #16]	; (800e99c <_fflush_r+0x74>)
 800e98c:	429c      	cmp	r4, r3
 800e98e:	bf08      	it	eq
 800e990:	68ec      	ldreq	r4, [r5, #12]
 800e992:	e7da      	b.n	800e94a <_fflush_r+0x22>
 800e994:	08010174 	.word	0x08010174
 800e998:	08010194 	.word	0x08010194
 800e99c:	08010154 	.word	0x08010154

0800e9a0 <std>:
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	b510      	push	{r4, lr}
 800e9a4:	4604      	mov	r4, r0
 800e9a6:	e9c0 3300 	strd	r3, r3, [r0]
 800e9aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e9ae:	6083      	str	r3, [r0, #8]
 800e9b0:	8181      	strh	r1, [r0, #12]
 800e9b2:	6643      	str	r3, [r0, #100]	; 0x64
 800e9b4:	81c2      	strh	r2, [r0, #14]
 800e9b6:	6183      	str	r3, [r0, #24]
 800e9b8:	4619      	mov	r1, r3
 800e9ba:	2208      	movs	r2, #8
 800e9bc:	305c      	adds	r0, #92	; 0x5c
 800e9be:	f7fe fb99 	bl	800d0f4 <memset>
 800e9c2:	4b05      	ldr	r3, [pc, #20]	; (800e9d8 <std+0x38>)
 800e9c4:	6263      	str	r3, [r4, #36]	; 0x24
 800e9c6:	4b05      	ldr	r3, [pc, #20]	; (800e9dc <std+0x3c>)
 800e9c8:	62a3      	str	r3, [r4, #40]	; 0x28
 800e9ca:	4b05      	ldr	r3, [pc, #20]	; (800e9e0 <std+0x40>)
 800e9cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e9ce:	4b05      	ldr	r3, [pc, #20]	; (800e9e4 <std+0x44>)
 800e9d0:	6224      	str	r4, [r4, #32]
 800e9d2:	6323      	str	r3, [r4, #48]	; 0x30
 800e9d4:	bd10      	pop	{r4, pc}
 800e9d6:	bf00      	nop
 800e9d8:	0800f83d 	.word	0x0800f83d
 800e9dc:	0800f85f 	.word	0x0800f85f
 800e9e0:	0800f897 	.word	0x0800f897
 800e9e4:	0800f8bb 	.word	0x0800f8bb

0800e9e8 <_cleanup_r>:
 800e9e8:	4901      	ldr	r1, [pc, #4]	; (800e9f0 <_cleanup_r+0x8>)
 800e9ea:	f000 b8af 	b.w	800eb4c <_fwalk_reent>
 800e9ee:	bf00      	nop
 800e9f0:	0800e929 	.word	0x0800e929

0800e9f4 <__sfmoreglue>:
 800e9f4:	b570      	push	{r4, r5, r6, lr}
 800e9f6:	2268      	movs	r2, #104	; 0x68
 800e9f8:	1e4d      	subs	r5, r1, #1
 800e9fa:	4355      	muls	r5, r2
 800e9fc:	460e      	mov	r6, r1
 800e9fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ea02:	f000 fd3d 	bl	800f480 <_malloc_r>
 800ea06:	4604      	mov	r4, r0
 800ea08:	b140      	cbz	r0, 800ea1c <__sfmoreglue+0x28>
 800ea0a:	2100      	movs	r1, #0
 800ea0c:	e9c0 1600 	strd	r1, r6, [r0]
 800ea10:	300c      	adds	r0, #12
 800ea12:	60a0      	str	r0, [r4, #8]
 800ea14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ea18:	f7fe fb6c 	bl	800d0f4 <memset>
 800ea1c:	4620      	mov	r0, r4
 800ea1e:	bd70      	pop	{r4, r5, r6, pc}

0800ea20 <__sfp_lock_acquire>:
 800ea20:	4801      	ldr	r0, [pc, #4]	; (800ea28 <__sfp_lock_acquire+0x8>)
 800ea22:	f000 b8b8 	b.w	800eb96 <__retarget_lock_acquire_recursive>
 800ea26:	bf00      	nop
 800ea28:	200006b5 	.word	0x200006b5

0800ea2c <__sfp_lock_release>:
 800ea2c:	4801      	ldr	r0, [pc, #4]	; (800ea34 <__sfp_lock_release+0x8>)
 800ea2e:	f000 b8b3 	b.w	800eb98 <__retarget_lock_release_recursive>
 800ea32:	bf00      	nop
 800ea34:	200006b5 	.word	0x200006b5

0800ea38 <__sinit_lock_acquire>:
 800ea38:	4801      	ldr	r0, [pc, #4]	; (800ea40 <__sinit_lock_acquire+0x8>)
 800ea3a:	f000 b8ac 	b.w	800eb96 <__retarget_lock_acquire_recursive>
 800ea3e:	bf00      	nop
 800ea40:	200006b6 	.word	0x200006b6

0800ea44 <__sinit_lock_release>:
 800ea44:	4801      	ldr	r0, [pc, #4]	; (800ea4c <__sinit_lock_release+0x8>)
 800ea46:	f000 b8a7 	b.w	800eb98 <__retarget_lock_release_recursive>
 800ea4a:	bf00      	nop
 800ea4c:	200006b6 	.word	0x200006b6

0800ea50 <__sinit>:
 800ea50:	b510      	push	{r4, lr}
 800ea52:	4604      	mov	r4, r0
 800ea54:	f7ff fff0 	bl	800ea38 <__sinit_lock_acquire>
 800ea58:	69a3      	ldr	r3, [r4, #24]
 800ea5a:	b11b      	cbz	r3, 800ea64 <__sinit+0x14>
 800ea5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea60:	f7ff bff0 	b.w	800ea44 <__sinit_lock_release>
 800ea64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ea68:	6523      	str	r3, [r4, #80]	; 0x50
 800ea6a:	4b13      	ldr	r3, [pc, #76]	; (800eab8 <__sinit+0x68>)
 800ea6c:	4a13      	ldr	r2, [pc, #76]	; (800eabc <__sinit+0x6c>)
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	62a2      	str	r2, [r4, #40]	; 0x28
 800ea72:	42a3      	cmp	r3, r4
 800ea74:	bf04      	itt	eq
 800ea76:	2301      	moveq	r3, #1
 800ea78:	61a3      	streq	r3, [r4, #24]
 800ea7a:	4620      	mov	r0, r4
 800ea7c:	f000 f820 	bl	800eac0 <__sfp>
 800ea80:	6060      	str	r0, [r4, #4]
 800ea82:	4620      	mov	r0, r4
 800ea84:	f000 f81c 	bl	800eac0 <__sfp>
 800ea88:	60a0      	str	r0, [r4, #8]
 800ea8a:	4620      	mov	r0, r4
 800ea8c:	f000 f818 	bl	800eac0 <__sfp>
 800ea90:	2200      	movs	r2, #0
 800ea92:	60e0      	str	r0, [r4, #12]
 800ea94:	2104      	movs	r1, #4
 800ea96:	6860      	ldr	r0, [r4, #4]
 800ea98:	f7ff ff82 	bl	800e9a0 <std>
 800ea9c:	68a0      	ldr	r0, [r4, #8]
 800ea9e:	2201      	movs	r2, #1
 800eaa0:	2109      	movs	r1, #9
 800eaa2:	f7ff ff7d 	bl	800e9a0 <std>
 800eaa6:	68e0      	ldr	r0, [r4, #12]
 800eaa8:	2202      	movs	r2, #2
 800eaaa:	2112      	movs	r1, #18
 800eaac:	f7ff ff78 	bl	800e9a0 <std>
 800eab0:	2301      	movs	r3, #1
 800eab2:	61a3      	str	r3, [r4, #24]
 800eab4:	e7d2      	b.n	800ea5c <__sinit+0xc>
 800eab6:	bf00      	nop
 800eab8:	0801008c 	.word	0x0801008c
 800eabc:	0800e9e9 	.word	0x0800e9e9

0800eac0 <__sfp>:
 800eac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eac2:	4607      	mov	r7, r0
 800eac4:	f7ff ffac 	bl	800ea20 <__sfp_lock_acquire>
 800eac8:	4b1e      	ldr	r3, [pc, #120]	; (800eb44 <__sfp+0x84>)
 800eaca:	681e      	ldr	r6, [r3, #0]
 800eacc:	69b3      	ldr	r3, [r6, #24]
 800eace:	b913      	cbnz	r3, 800ead6 <__sfp+0x16>
 800ead0:	4630      	mov	r0, r6
 800ead2:	f7ff ffbd 	bl	800ea50 <__sinit>
 800ead6:	3648      	adds	r6, #72	; 0x48
 800ead8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800eadc:	3b01      	subs	r3, #1
 800eade:	d503      	bpl.n	800eae8 <__sfp+0x28>
 800eae0:	6833      	ldr	r3, [r6, #0]
 800eae2:	b30b      	cbz	r3, 800eb28 <__sfp+0x68>
 800eae4:	6836      	ldr	r6, [r6, #0]
 800eae6:	e7f7      	b.n	800ead8 <__sfp+0x18>
 800eae8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800eaec:	b9d5      	cbnz	r5, 800eb24 <__sfp+0x64>
 800eaee:	4b16      	ldr	r3, [pc, #88]	; (800eb48 <__sfp+0x88>)
 800eaf0:	60e3      	str	r3, [r4, #12]
 800eaf2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800eaf6:	6665      	str	r5, [r4, #100]	; 0x64
 800eaf8:	f000 f84c 	bl	800eb94 <__retarget_lock_init_recursive>
 800eafc:	f7ff ff96 	bl	800ea2c <__sfp_lock_release>
 800eb00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800eb04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800eb08:	6025      	str	r5, [r4, #0]
 800eb0a:	61a5      	str	r5, [r4, #24]
 800eb0c:	2208      	movs	r2, #8
 800eb0e:	4629      	mov	r1, r5
 800eb10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800eb14:	f7fe faee 	bl	800d0f4 <memset>
 800eb18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800eb1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800eb20:	4620      	mov	r0, r4
 800eb22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb24:	3468      	adds	r4, #104	; 0x68
 800eb26:	e7d9      	b.n	800eadc <__sfp+0x1c>
 800eb28:	2104      	movs	r1, #4
 800eb2a:	4638      	mov	r0, r7
 800eb2c:	f7ff ff62 	bl	800e9f4 <__sfmoreglue>
 800eb30:	4604      	mov	r4, r0
 800eb32:	6030      	str	r0, [r6, #0]
 800eb34:	2800      	cmp	r0, #0
 800eb36:	d1d5      	bne.n	800eae4 <__sfp+0x24>
 800eb38:	f7ff ff78 	bl	800ea2c <__sfp_lock_release>
 800eb3c:	230c      	movs	r3, #12
 800eb3e:	603b      	str	r3, [r7, #0]
 800eb40:	e7ee      	b.n	800eb20 <__sfp+0x60>
 800eb42:	bf00      	nop
 800eb44:	0801008c 	.word	0x0801008c
 800eb48:	ffff0001 	.word	0xffff0001

0800eb4c <_fwalk_reent>:
 800eb4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb50:	4606      	mov	r6, r0
 800eb52:	4688      	mov	r8, r1
 800eb54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800eb58:	2700      	movs	r7, #0
 800eb5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eb5e:	f1b9 0901 	subs.w	r9, r9, #1
 800eb62:	d505      	bpl.n	800eb70 <_fwalk_reent+0x24>
 800eb64:	6824      	ldr	r4, [r4, #0]
 800eb66:	2c00      	cmp	r4, #0
 800eb68:	d1f7      	bne.n	800eb5a <_fwalk_reent+0xe>
 800eb6a:	4638      	mov	r0, r7
 800eb6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb70:	89ab      	ldrh	r3, [r5, #12]
 800eb72:	2b01      	cmp	r3, #1
 800eb74:	d907      	bls.n	800eb86 <_fwalk_reent+0x3a>
 800eb76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eb7a:	3301      	adds	r3, #1
 800eb7c:	d003      	beq.n	800eb86 <_fwalk_reent+0x3a>
 800eb7e:	4629      	mov	r1, r5
 800eb80:	4630      	mov	r0, r6
 800eb82:	47c0      	blx	r8
 800eb84:	4307      	orrs	r7, r0
 800eb86:	3568      	adds	r5, #104	; 0x68
 800eb88:	e7e9      	b.n	800eb5e <_fwalk_reent+0x12>
	...

0800eb8c <_localeconv_r>:
 800eb8c:	4800      	ldr	r0, [pc, #0]	; (800eb90 <_localeconv_r+0x4>)
 800eb8e:	4770      	bx	lr
 800eb90:	20000194 	.word	0x20000194

0800eb94 <__retarget_lock_init_recursive>:
 800eb94:	4770      	bx	lr

0800eb96 <__retarget_lock_acquire_recursive>:
 800eb96:	4770      	bx	lr

0800eb98 <__retarget_lock_release_recursive>:
 800eb98:	4770      	bx	lr

0800eb9a <__swhatbuf_r>:
 800eb9a:	b570      	push	{r4, r5, r6, lr}
 800eb9c:	460e      	mov	r6, r1
 800eb9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eba2:	2900      	cmp	r1, #0
 800eba4:	b096      	sub	sp, #88	; 0x58
 800eba6:	4614      	mov	r4, r2
 800eba8:	461d      	mov	r5, r3
 800ebaa:	da08      	bge.n	800ebbe <__swhatbuf_r+0x24>
 800ebac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	602a      	str	r2, [r5, #0]
 800ebb4:	061a      	lsls	r2, r3, #24
 800ebb6:	d410      	bmi.n	800ebda <__swhatbuf_r+0x40>
 800ebb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ebbc:	e00e      	b.n	800ebdc <__swhatbuf_r+0x42>
 800ebbe:	466a      	mov	r2, sp
 800ebc0:	f000 fed2 	bl	800f968 <_fstat_r>
 800ebc4:	2800      	cmp	r0, #0
 800ebc6:	dbf1      	blt.n	800ebac <__swhatbuf_r+0x12>
 800ebc8:	9a01      	ldr	r2, [sp, #4]
 800ebca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ebce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ebd2:	425a      	negs	r2, r3
 800ebd4:	415a      	adcs	r2, r3
 800ebd6:	602a      	str	r2, [r5, #0]
 800ebd8:	e7ee      	b.n	800ebb8 <__swhatbuf_r+0x1e>
 800ebda:	2340      	movs	r3, #64	; 0x40
 800ebdc:	2000      	movs	r0, #0
 800ebde:	6023      	str	r3, [r4, #0]
 800ebe0:	b016      	add	sp, #88	; 0x58
 800ebe2:	bd70      	pop	{r4, r5, r6, pc}

0800ebe4 <__smakebuf_r>:
 800ebe4:	898b      	ldrh	r3, [r1, #12]
 800ebe6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ebe8:	079d      	lsls	r5, r3, #30
 800ebea:	4606      	mov	r6, r0
 800ebec:	460c      	mov	r4, r1
 800ebee:	d507      	bpl.n	800ec00 <__smakebuf_r+0x1c>
 800ebf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ebf4:	6023      	str	r3, [r4, #0]
 800ebf6:	6123      	str	r3, [r4, #16]
 800ebf8:	2301      	movs	r3, #1
 800ebfa:	6163      	str	r3, [r4, #20]
 800ebfc:	b002      	add	sp, #8
 800ebfe:	bd70      	pop	{r4, r5, r6, pc}
 800ec00:	ab01      	add	r3, sp, #4
 800ec02:	466a      	mov	r2, sp
 800ec04:	f7ff ffc9 	bl	800eb9a <__swhatbuf_r>
 800ec08:	9900      	ldr	r1, [sp, #0]
 800ec0a:	4605      	mov	r5, r0
 800ec0c:	4630      	mov	r0, r6
 800ec0e:	f000 fc37 	bl	800f480 <_malloc_r>
 800ec12:	b948      	cbnz	r0, 800ec28 <__smakebuf_r+0x44>
 800ec14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec18:	059a      	lsls	r2, r3, #22
 800ec1a:	d4ef      	bmi.n	800ebfc <__smakebuf_r+0x18>
 800ec1c:	f023 0303 	bic.w	r3, r3, #3
 800ec20:	f043 0302 	orr.w	r3, r3, #2
 800ec24:	81a3      	strh	r3, [r4, #12]
 800ec26:	e7e3      	b.n	800ebf0 <__smakebuf_r+0xc>
 800ec28:	4b0d      	ldr	r3, [pc, #52]	; (800ec60 <__smakebuf_r+0x7c>)
 800ec2a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ec2c:	89a3      	ldrh	r3, [r4, #12]
 800ec2e:	6020      	str	r0, [r4, #0]
 800ec30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec34:	81a3      	strh	r3, [r4, #12]
 800ec36:	9b00      	ldr	r3, [sp, #0]
 800ec38:	6163      	str	r3, [r4, #20]
 800ec3a:	9b01      	ldr	r3, [sp, #4]
 800ec3c:	6120      	str	r0, [r4, #16]
 800ec3e:	b15b      	cbz	r3, 800ec58 <__smakebuf_r+0x74>
 800ec40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec44:	4630      	mov	r0, r6
 800ec46:	f000 fea1 	bl	800f98c <_isatty_r>
 800ec4a:	b128      	cbz	r0, 800ec58 <__smakebuf_r+0x74>
 800ec4c:	89a3      	ldrh	r3, [r4, #12]
 800ec4e:	f023 0303 	bic.w	r3, r3, #3
 800ec52:	f043 0301 	orr.w	r3, r3, #1
 800ec56:	81a3      	strh	r3, [r4, #12]
 800ec58:	89a0      	ldrh	r0, [r4, #12]
 800ec5a:	4305      	orrs	r5, r0
 800ec5c:	81a5      	strh	r5, [r4, #12]
 800ec5e:	e7cd      	b.n	800ebfc <__smakebuf_r+0x18>
 800ec60:	0800e9e9 	.word	0x0800e9e9

0800ec64 <malloc>:
 800ec64:	4b02      	ldr	r3, [pc, #8]	; (800ec70 <malloc+0xc>)
 800ec66:	4601      	mov	r1, r0
 800ec68:	6818      	ldr	r0, [r3, #0]
 800ec6a:	f000 bc09 	b.w	800f480 <_malloc_r>
 800ec6e:	bf00      	nop
 800ec70:	20000040 	.word	0x20000040

0800ec74 <_Balloc>:
 800ec74:	b570      	push	{r4, r5, r6, lr}
 800ec76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ec78:	4604      	mov	r4, r0
 800ec7a:	460d      	mov	r5, r1
 800ec7c:	b976      	cbnz	r6, 800ec9c <_Balloc+0x28>
 800ec7e:	2010      	movs	r0, #16
 800ec80:	f7ff fff0 	bl	800ec64 <malloc>
 800ec84:	4602      	mov	r2, r0
 800ec86:	6260      	str	r0, [r4, #36]	; 0x24
 800ec88:	b920      	cbnz	r0, 800ec94 <_Balloc+0x20>
 800ec8a:	4b18      	ldr	r3, [pc, #96]	; (800ecec <_Balloc+0x78>)
 800ec8c:	4818      	ldr	r0, [pc, #96]	; (800ecf0 <_Balloc+0x7c>)
 800ec8e:	2166      	movs	r1, #102	; 0x66
 800ec90:	f000 fe2a 	bl	800f8e8 <__assert_func>
 800ec94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ec98:	6006      	str	r6, [r0, #0]
 800ec9a:	60c6      	str	r6, [r0, #12]
 800ec9c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ec9e:	68f3      	ldr	r3, [r6, #12]
 800eca0:	b183      	cbz	r3, 800ecc4 <_Balloc+0x50>
 800eca2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eca4:	68db      	ldr	r3, [r3, #12]
 800eca6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ecaa:	b9b8      	cbnz	r0, 800ecdc <_Balloc+0x68>
 800ecac:	2101      	movs	r1, #1
 800ecae:	fa01 f605 	lsl.w	r6, r1, r5
 800ecb2:	1d72      	adds	r2, r6, #5
 800ecb4:	0092      	lsls	r2, r2, #2
 800ecb6:	4620      	mov	r0, r4
 800ecb8:	f000 fb60 	bl	800f37c <_calloc_r>
 800ecbc:	b160      	cbz	r0, 800ecd8 <_Balloc+0x64>
 800ecbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ecc2:	e00e      	b.n	800ece2 <_Balloc+0x6e>
 800ecc4:	2221      	movs	r2, #33	; 0x21
 800ecc6:	2104      	movs	r1, #4
 800ecc8:	4620      	mov	r0, r4
 800ecca:	f000 fb57 	bl	800f37c <_calloc_r>
 800ecce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ecd0:	60f0      	str	r0, [r6, #12]
 800ecd2:	68db      	ldr	r3, [r3, #12]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d1e4      	bne.n	800eca2 <_Balloc+0x2e>
 800ecd8:	2000      	movs	r0, #0
 800ecda:	bd70      	pop	{r4, r5, r6, pc}
 800ecdc:	6802      	ldr	r2, [r0, #0]
 800ecde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ece2:	2300      	movs	r3, #0
 800ece4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ece8:	e7f7      	b.n	800ecda <_Balloc+0x66>
 800ecea:	bf00      	nop
 800ecec:	080100d1 	.word	0x080100d1
 800ecf0:	080101b4 	.word	0x080101b4

0800ecf4 <_Bfree>:
 800ecf4:	b570      	push	{r4, r5, r6, lr}
 800ecf6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ecf8:	4605      	mov	r5, r0
 800ecfa:	460c      	mov	r4, r1
 800ecfc:	b976      	cbnz	r6, 800ed1c <_Bfree+0x28>
 800ecfe:	2010      	movs	r0, #16
 800ed00:	f7ff ffb0 	bl	800ec64 <malloc>
 800ed04:	4602      	mov	r2, r0
 800ed06:	6268      	str	r0, [r5, #36]	; 0x24
 800ed08:	b920      	cbnz	r0, 800ed14 <_Bfree+0x20>
 800ed0a:	4b09      	ldr	r3, [pc, #36]	; (800ed30 <_Bfree+0x3c>)
 800ed0c:	4809      	ldr	r0, [pc, #36]	; (800ed34 <_Bfree+0x40>)
 800ed0e:	218a      	movs	r1, #138	; 0x8a
 800ed10:	f000 fdea 	bl	800f8e8 <__assert_func>
 800ed14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ed18:	6006      	str	r6, [r0, #0]
 800ed1a:	60c6      	str	r6, [r0, #12]
 800ed1c:	b13c      	cbz	r4, 800ed2e <_Bfree+0x3a>
 800ed1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ed20:	6862      	ldr	r2, [r4, #4]
 800ed22:	68db      	ldr	r3, [r3, #12]
 800ed24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ed28:	6021      	str	r1, [r4, #0]
 800ed2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ed2e:	bd70      	pop	{r4, r5, r6, pc}
 800ed30:	080100d1 	.word	0x080100d1
 800ed34:	080101b4 	.word	0x080101b4

0800ed38 <__multadd>:
 800ed38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed3c:	690d      	ldr	r5, [r1, #16]
 800ed3e:	4607      	mov	r7, r0
 800ed40:	460c      	mov	r4, r1
 800ed42:	461e      	mov	r6, r3
 800ed44:	f101 0c14 	add.w	ip, r1, #20
 800ed48:	2000      	movs	r0, #0
 800ed4a:	f8dc 3000 	ldr.w	r3, [ip]
 800ed4e:	b299      	uxth	r1, r3
 800ed50:	fb02 6101 	mla	r1, r2, r1, r6
 800ed54:	0c1e      	lsrs	r6, r3, #16
 800ed56:	0c0b      	lsrs	r3, r1, #16
 800ed58:	fb02 3306 	mla	r3, r2, r6, r3
 800ed5c:	b289      	uxth	r1, r1
 800ed5e:	3001      	adds	r0, #1
 800ed60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ed64:	4285      	cmp	r5, r0
 800ed66:	f84c 1b04 	str.w	r1, [ip], #4
 800ed6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ed6e:	dcec      	bgt.n	800ed4a <__multadd+0x12>
 800ed70:	b30e      	cbz	r6, 800edb6 <__multadd+0x7e>
 800ed72:	68a3      	ldr	r3, [r4, #8]
 800ed74:	42ab      	cmp	r3, r5
 800ed76:	dc19      	bgt.n	800edac <__multadd+0x74>
 800ed78:	6861      	ldr	r1, [r4, #4]
 800ed7a:	4638      	mov	r0, r7
 800ed7c:	3101      	adds	r1, #1
 800ed7e:	f7ff ff79 	bl	800ec74 <_Balloc>
 800ed82:	4680      	mov	r8, r0
 800ed84:	b928      	cbnz	r0, 800ed92 <__multadd+0x5a>
 800ed86:	4602      	mov	r2, r0
 800ed88:	4b0c      	ldr	r3, [pc, #48]	; (800edbc <__multadd+0x84>)
 800ed8a:	480d      	ldr	r0, [pc, #52]	; (800edc0 <__multadd+0x88>)
 800ed8c:	21b5      	movs	r1, #181	; 0xb5
 800ed8e:	f000 fdab 	bl	800f8e8 <__assert_func>
 800ed92:	6922      	ldr	r2, [r4, #16]
 800ed94:	3202      	adds	r2, #2
 800ed96:	f104 010c 	add.w	r1, r4, #12
 800ed9a:	0092      	lsls	r2, r2, #2
 800ed9c:	300c      	adds	r0, #12
 800ed9e:	f7fe f99b 	bl	800d0d8 <memcpy>
 800eda2:	4621      	mov	r1, r4
 800eda4:	4638      	mov	r0, r7
 800eda6:	f7ff ffa5 	bl	800ecf4 <_Bfree>
 800edaa:	4644      	mov	r4, r8
 800edac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800edb0:	3501      	adds	r5, #1
 800edb2:	615e      	str	r6, [r3, #20]
 800edb4:	6125      	str	r5, [r4, #16]
 800edb6:	4620      	mov	r0, r4
 800edb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edbc:	08010143 	.word	0x08010143
 800edc0:	080101b4 	.word	0x080101b4

0800edc4 <__hi0bits>:
 800edc4:	0c03      	lsrs	r3, r0, #16
 800edc6:	041b      	lsls	r3, r3, #16
 800edc8:	b9d3      	cbnz	r3, 800ee00 <__hi0bits+0x3c>
 800edca:	0400      	lsls	r0, r0, #16
 800edcc:	2310      	movs	r3, #16
 800edce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800edd2:	bf04      	itt	eq
 800edd4:	0200      	lsleq	r0, r0, #8
 800edd6:	3308      	addeq	r3, #8
 800edd8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800eddc:	bf04      	itt	eq
 800edde:	0100      	lsleq	r0, r0, #4
 800ede0:	3304      	addeq	r3, #4
 800ede2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ede6:	bf04      	itt	eq
 800ede8:	0080      	lsleq	r0, r0, #2
 800edea:	3302      	addeq	r3, #2
 800edec:	2800      	cmp	r0, #0
 800edee:	db05      	blt.n	800edfc <__hi0bits+0x38>
 800edf0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800edf4:	f103 0301 	add.w	r3, r3, #1
 800edf8:	bf08      	it	eq
 800edfa:	2320      	moveq	r3, #32
 800edfc:	4618      	mov	r0, r3
 800edfe:	4770      	bx	lr
 800ee00:	2300      	movs	r3, #0
 800ee02:	e7e4      	b.n	800edce <__hi0bits+0xa>

0800ee04 <__lo0bits>:
 800ee04:	6803      	ldr	r3, [r0, #0]
 800ee06:	f013 0207 	ands.w	r2, r3, #7
 800ee0a:	4601      	mov	r1, r0
 800ee0c:	d00b      	beq.n	800ee26 <__lo0bits+0x22>
 800ee0e:	07da      	lsls	r2, r3, #31
 800ee10:	d423      	bmi.n	800ee5a <__lo0bits+0x56>
 800ee12:	0798      	lsls	r0, r3, #30
 800ee14:	bf49      	itett	mi
 800ee16:	085b      	lsrmi	r3, r3, #1
 800ee18:	089b      	lsrpl	r3, r3, #2
 800ee1a:	2001      	movmi	r0, #1
 800ee1c:	600b      	strmi	r3, [r1, #0]
 800ee1e:	bf5c      	itt	pl
 800ee20:	600b      	strpl	r3, [r1, #0]
 800ee22:	2002      	movpl	r0, #2
 800ee24:	4770      	bx	lr
 800ee26:	b298      	uxth	r0, r3
 800ee28:	b9a8      	cbnz	r0, 800ee56 <__lo0bits+0x52>
 800ee2a:	0c1b      	lsrs	r3, r3, #16
 800ee2c:	2010      	movs	r0, #16
 800ee2e:	b2da      	uxtb	r2, r3
 800ee30:	b90a      	cbnz	r2, 800ee36 <__lo0bits+0x32>
 800ee32:	3008      	adds	r0, #8
 800ee34:	0a1b      	lsrs	r3, r3, #8
 800ee36:	071a      	lsls	r2, r3, #28
 800ee38:	bf04      	itt	eq
 800ee3a:	091b      	lsreq	r3, r3, #4
 800ee3c:	3004      	addeq	r0, #4
 800ee3e:	079a      	lsls	r2, r3, #30
 800ee40:	bf04      	itt	eq
 800ee42:	089b      	lsreq	r3, r3, #2
 800ee44:	3002      	addeq	r0, #2
 800ee46:	07da      	lsls	r2, r3, #31
 800ee48:	d403      	bmi.n	800ee52 <__lo0bits+0x4e>
 800ee4a:	085b      	lsrs	r3, r3, #1
 800ee4c:	f100 0001 	add.w	r0, r0, #1
 800ee50:	d005      	beq.n	800ee5e <__lo0bits+0x5a>
 800ee52:	600b      	str	r3, [r1, #0]
 800ee54:	4770      	bx	lr
 800ee56:	4610      	mov	r0, r2
 800ee58:	e7e9      	b.n	800ee2e <__lo0bits+0x2a>
 800ee5a:	2000      	movs	r0, #0
 800ee5c:	4770      	bx	lr
 800ee5e:	2020      	movs	r0, #32
 800ee60:	4770      	bx	lr
	...

0800ee64 <__i2b>:
 800ee64:	b510      	push	{r4, lr}
 800ee66:	460c      	mov	r4, r1
 800ee68:	2101      	movs	r1, #1
 800ee6a:	f7ff ff03 	bl	800ec74 <_Balloc>
 800ee6e:	4602      	mov	r2, r0
 800ee70:	b928      	cbnz	r0, 800ee7e <__i2b+0x1a>
 800ee72:	4b05      	ldr	r3, [pc, #20]	; (800ee88 <__i2b+0x24>)
 800ee74:	4805      	ldr	r0, [pc, #20]	; (800ee8c <__i2b+0x28>)
 800ee76:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ee7a:	f000 fd35 	bl	800f8e8 <__assert_func>
 800ee7e:	2301      	movs	r3, #1
 800ee80:	6144      	str	r4, [r0, #20]
 800ee82:	6103      	str	r3, [r0, #16]
 800ee84:	bd10      	pop	{r4, pc}
 800ee86:	bf00      	nop
 800ee88:	08010143 	.word	0x08010143
 800ee8c:	080101b4 	.word	0x080101b4

0800ee90 <__multiply>:
 800ee90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee94:	4691      	mov	r9, r2
 800ee96:	690a      	ldr	r2, [r1, #16]
 800ee98:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ee9c:	429a      	cmp	r2, r3
 800ee9e:	bfb8      	it	lt
 800eea0:	460b      	movlt	r3, r1
 800eea2:	460c      	mov	r4, r1
 800eea4:	bfbc      	itt	lt
 800eea6:	464c      	movlt	r4, r9
 800eea8:	4699      	movlt	r9, r3
 800eeaa:	6927      	ldr	r7, [r4, #16]
 800eeac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800eeb0:	68a3      	ldr	r3, [r4, #8]
 800eeb2:	6861      	ldr	r1, [r4, #4]
 800eeb4:	eb07 060a 	add.w	r6, r7, sl
 800eeb8:	42b3      	cmp	r3, r6
 800eeba:	b085      	sub	sp, #20
 800eebc:	bfb8      	it	lt
 800eebe:	3101      	addlt	r1, #1
 800eec0:	f7ff fed8 	bl	800ec74 <_Balloc>
 800eec4:	b930      	cbnz	r0, 800eed4 <__multiply+0x44>
 800eec6:	4602      	mov	r2, r0
 800eec8:	4b44      	ldr	r3, [pc, #272]	; (800efdc <__multiply+0x14c>)
 800eeca:	4845      	ldr	r0, [pc, #276]	; (800efe0 <__multiply+0x150>)
 800eecc:	f240 115d 	movw	r1, #349	; 0x15d
 800eed0:	f000 fd0a 	bl	800f8e8 <__assert_func>
 800eed4:	f100 0514 	add.w	r5, r0, #20
 800eed8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800eedc:	462b      	mov	r3, r5
 800eede:	2200      	movs	r2, #0
 800eee0:	4543      	cmp	r3, r8
 800eee2:	d321      	bcc.n	800ef28 <__multiply+0x98>
 800eee4:	f104 0314 	add.w	r3, r4, #20
 800eee8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800eeec:	f109 0314 	add.w	r3, r9, #20
 800eef0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800eef4:	9202      	str	r2, [sp, #8]
 800eef6:	1b3a      	subs	r2, r7, r4
 800eef8:	3a15      	subs	r2, #21
 800eefa:	f022 0203 	bic.w	r2, r2, #3
 800eefe:	3204      	adds	r2, #4
 800ef00:	f104 0115 	add.w	r1, r4, #21
 800ef04:	428f      	cmp	r7, r1
 800ef06:	bf38      	it	cc
 800ef08:	2204      	movcc	r2, #4
 800ef0a:	9201      	str	r2, [sp, #4]
 800ef0c:	9a02      	ldr	r2, [sp, #8]
 800ef0e:	9303      	str	r3, [sp, #12]
 800ef10:	429a      	cmp	r2, r3
 800ef12:	d80c      	bhi.n	800ef2e <__multiply+0x9e>
 800ef14:	2e00      	cmp	r6, #0
 800ef16:	dd03      	ble.n	800ef20 <__multiply+0x90>
 800ef18:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d05a      	beq.n	800efd6 <__multiply+0x146>
 800ef20:	6106      	str	r6, [r0, #16]
 800ef22:	b005      	add	sp, #20
 800ef24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef28:	f843 2b04 	str.w	r2, [r3], #4
 800ef2c:	e7d8      	b.n	800eee0 <__multiply+0x50>
 800ef2e:	f8b3 a000 	ldrh.w	sl, [r3]
 800ef32:	f1ba 0f00 	cmp.w	sl, #0
 800ef36:	d024      	beq.n	800ef82 <__multiply+0xf2>
 800ef38:	f104 0e14 	add.w	lr, r4, #20
 800ef3c:	46a9      	mov	r9, r5
 800ef3e:	f04f 0c00 	mov.w	ip, #0
 800ef42:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ef46:	f8d9 1000 	ldr.w	r1, [r9]
 800ef4a:	fa1f fb82 	uxth.w	fp, r2
 800ef4e:	b289      	uxth	r1, r1
 800ef50:	fb0a 110b 	mla	r1, sl, fp, r1
 800ef54:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ef58:	f8d9 2000 	ldr.w	r2, [r9]
 800ef5c:	4461      	add	r1, ip
 800ef5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ef62:	fb0a c20b 	mla	r2, sl, fp, ip
 800ef66:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ef6a:	b289      	uxth	r1, r1
 800ef6c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ef70:	4577      	cmp	r7, lr
 800ef72:	f849 1b04 	str.w	r1, [r9], #4
 800ef76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ef7a:	d8e2      	bhi.n	800ef42 <__multiply+0xb2>
 800ef7c:	9a01      	ldr	r2, [sp, #4]
 800ef7e:	f845 c002 	str.w	ip, [r5, r2]
 800ef82:	9a03      	ldr	r2, [sp, #12]
 800ef84:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ef88:	3304      	adds	r3, #4
 800ef8a:	f1b9 0f00 	cmp.w	r9, #0
 800ef8e:	d020      	beq.n	800efd2 <__multiply+0x142>
 800ef90:	6829      	ldr	r1, [r5, #0]
 800ef92:	f104 0c14 	add.w	ip, r4, #20
 800ef96:	46ae      	mov	lr, r5
 800ef98:	f04f 0a00 	mov.w	sl, #0
 800ef9c:	f8bc b000 	ldrh.w	fp, [ip]
 800efa0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800efa4:	fb09 220b 	mla	r2, r9, fp, r2
 800efa8:	4492      	add	sl, r2
 800efaa:	b289      	uxth	r1, r1
 800efac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800efb0:	f84e 1b04 	str.w	r1, [lr], #4
 800efb4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800efb8:	f8be 1000 	ldrh.w	r1, [lr]
 800efbc:	0c12      	lsrs	r2, r2, #16
 800efbe:	fb09 1102 	mla	r1, r9, r2, r1
 800efc2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800efc6:	4567      	cmp	r7, ip
 800efc8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800efcc:	d8e6      	bhi.n	800ef9c <__multiply+0x10c>
 800efce:	9a01      	ldr	r2, [sp, #4]
 800efd0:	50a9      	str	r1, [r5, r2]
 800efd2:	3504      	adds	r5, #4
 800efd4:	e79a      	b.n	800ef0c <__multiply+0x7c>
 800efd6:	3e01      	subs	r6, #1
 800efd8:	e79c      	b.n	800ef14 <__multiply+0x84>
 800efda:	bf00      	nop
 800efdc:	08010143 	.word	0x08010143
 800efe0:	080101b4 	.word	0x080101b4

0800efe4 <__pow5mult>:
 800efe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efe8:	4615      	mov	r5, r2
 800efea:	f012 0203 	ands.w	r2, r2, #3
 800efee:	4606      	mov	r6, r0
 800eff0:	460f      	mov	r7, r1
 800eff2:	d007      	beq.n	800f004 <__pow5mult+0x20>
 800eff4:	4c25      	ldr	r4, [pc, #148]	; (800f08c <__pow5mult+0xa8>)
 800eff6:	3a01      	subs	r2, #1
 800eff8:	2300      	movs	r3, #0
 800effa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800effe:	f7ff fe9b 	bl	800ed38 <__multadd>
 800f002:	4607      	mov	r7, r0
 800f004:	10ad      	asrs	r5, r5, #2
 800f006:	d03d      	beq.n	800f084 <__pow5mult+0xa0>
 800f008:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f00a:	b97c      	cbnz	r4, 800f02c <__pow5mult+0x48>
 800f00c:	2010      	movs	r0, #16
 800f00e:	f7ff fe29 	bl	800ec64 <malloc>
 800f012:	4602      	mov	r2, r0
 800f014:	6270      	str	r0, [r6, #36]	; 0x24
 800f016:	b928      	cbnz	r0, 800f024 <__pow5mult+0x40>
 800f018:	4b1d      	ldr	r3, [pc, #116]	; (800f090 <__pow5mult+0xac>)
 800f01a:	481e      	ldr	r0, [pc, #120]	; (800f094 <__pow5mult+0xb0>)
 800f01c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f020:	f000 fc62 	bl	800f8e8 <__assert_func>
 800f024:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f028:	6004      	str	r4, [r0, #0]
 800f02a:	60c4      	str	r4, [r0, #12]
 800f02c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f030:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f034:	b94c      	cbnz	r4, 800f04a <__pow5mult+0x66>
 800f036:	f240 2171 	movw	r1, #625	; 0x271
 800f03a:	4630      	mov	r0, r6
 800f03c:	f7ff ff12 	bl	800ee64 <__i2b>
 800f040:	2300      	movs	r3, #0
 800f042:	f8c8 0008 	str.w	r0, [r8, #8]
 800f046:	4604      	mov	r4, r0
 800f048:	6003      	str	r3, [r0, #0]
 800f04a:	f04f 0900 	mov.w	r9, #0
 800f04e:	07eb      	lsls	r3, r5, #31
 800f050:	d50a      	bpl.n	800f068 <__pow5mult+0x84>
 800f052:	4639      	mov	r1, r7
 800f054:	4622      	mov	r2, r4
 800f056:	4630      	mov	r0, r6
 800f058:	f7ff ff1a 	bl	800ee90 <__multiply>
 800f05c:	4639      	mov	r1, r7
 800f05e:	4680      	mov	r8, r0
 800f060:	4630      	mov	r0, r6
 800f062:	f7ff fe47 	bl	800ecf4 <_Bfree>
 800f066:	4647      	mov	r7, r8
 800f068:	106d      	asrs	r5, r5, #1
 800f06a:	d00b      	beq.n	800f084 <__pow5mult+0xa0>
 800f06c:	6820      	ldr	r0, [r4, #0]
 800f06e:	b938      	cbnz	r0, 800f080 <__pow5mult+0x9c>
 800f070:	4622      	mov	r2, r4
 800f072:	4621      	mov	r1, r4
 800f074:	4630      	mov	r0, r6
 800f076:	f7ff ff0b 	bl	800ee90 <__multiply>
 800f07a:	6020      	str	r0, [r4, #0]
 800f07c:	f8c0 9000 	str.w	r9, [r0]
 800f080:	4604      	mov	r4, r0
 800f082:	e7e4      	b.n	800f04e <__pow5mult+0x6a>
 800f084:	4638      	mov	r0, r7
 800f086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f08a:	bf00      	nop
 800f08c:	08010300 	.word	0x08010300
 800f090:	080100d1 	.word	0x080100d1
 800f094:	080101b4 	.word	0x080101b4

0800f098 <__lshift>:
 800f098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f09c:	460c      	mov	r4, r1
 800f09e:	6849      	ldr	r1, [r1, #4]
 800f0a0:	6923      	ldr	r3, [r4, #16]
 800f0a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f0a6:	68a3      	ldr	r3, [r4, #8]
 800f0a8:	4607      	mov	r7, r0
 800f0aa:	4691      	mov	r9, r2
 800f0ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f0b0:	f108 0601 	add.w	r6, r8, #1
 800f0b4:	42b3      	cmp	r3, r6
 800f0b6:	db0b      	blt.n	800f0d0 <__lshift+0x38>
 800f0b8:	4638      	mov	r0, r7
 800f0ba:	f7ff fddb 	bl	800ec74 <_Balloc>
 800f0be:	4605      	mov	r5, r0
 800f0c0:	b948      	cbnz	r0, 800f0d6 <__lshift+0x3e>
 800f0c2:	4602      	mov	r2, r0
 800f0c4:	4b2a      	ldr	r3, [pc, #168]	; (800f170 <__lshift+0xd8>)
 800f0c6:	482b      	ldr	r0, [pc, #172]	; (800f174 <__lshift+0xdc>)
 800f0c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f0cc:	f000 fc0c 	bl	800f8e8 <__assert_func>
 800f0d0:	3101      	adds	r1, #1
 800f0d2:	005b      	lsls	r3, r3, #1
 800f0d4:	e7ee      	b.n	800f0b4 <__lshift+0x1c>
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	f100 0114 	add.w	r1, r0, #20
 800f0dc:	f100 0210 	add.w	r2, r0, #16
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	4553      	cmp	r3, sl
 800f0e4:	db37      	blt.n	800f156 <__lshift+0xbe>
 800f0e6:	6920      	ldr	r0, [r4, #16]
 800f0e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f0ec:	f104 0314 	add.w	r3, r4, #20
 800f0f0:	f019 091f 	ands.w	r9, r9, #31
 800f0f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f0f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f0fc:	d02f      	beq.n	800f15e <__lshift+0xc6>
 800f0fe:	f1c9 0e20 	rsb	lr, r9, #32
 800f102:	468a      	mov	sl, r1
 800f104:	f04f 0c00 	mov.w	ip, #0
 800f108:	681a      	ldr	r2, [r3, #0]
 800f10a:	fa02 f209 	lsl.w	r2, r2, r9
 800f10e:	ea42 020c 	orr.w	r2, r2, ip
 800f112:	f84a 2b04 	str.w	r2, [sl], #4
 800f116:	f853 2b04 	ldr.w	r2, [r3], #4
 800f11a:	4298      	cmp	r0, r3
 800f11c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f120:	d8f2      	bhi.n	800f108 <__lshift+0x70>
 800f122:	1b03      	subs	r3, r0, r4
 800f124:	3b15      	subs	r3, #21
 800f126:	f023 0303 	bic.w	r3, r3, #3
 800f12a:	3304      	adds	r3, #4
 800f12c:	f104 0215 	add.w	r2, r4, #21
 800f130:	4290      	cmp	r0, r2
 800f132:	bf38      	it	cc
 800f134:	2304      	movcc	r3, #4
 800f136:	f841 c003 	str.w	ip, [r1, r3]
 800f13a:	f1bc 0f00 	cmp.w	ip, #0
 800f13e:	d001      	beq.n	800f144 <__lshift+0xac>
 800f140:	f108 0602 	add.w	r6, r8, #2
 800f144:	3e01      	subs	r6, #1
 800f146:	4638      	mov	r0, r7
 800f148:	612e      	str	r6, [r5, #16]
 800f14a:	4621      	mov	r1, r4
 800f14c:	f7ff fdd2 	bl	800ecf4 <_Bfree>
 800f150:	4628      	mov	r0, r5
 800f152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f156:	f842 0f04 	str.w	r0, [r2, #4]!
 800f15a:	3301      	adds	r3, #1
 800f15c:	e7c1      	b.n	800f0e2 <__lshift+0x4a>
 800f15e:	3904      	subs	r1, #4
 800f160:	f853 2b04 	ldr.w	r2, [r3], #4
 800f164:	f841 2f04 	str.w	r2, [r1, #4]!
 800f168:	4298      	cmp	r0, r3
 800f16a:	d8f9      	bhi.n	800f160 <__lshift+0xc8>
 800f16c:	e7ea      	b.n	800f144 <__lshift+0xac>
 800f16e:	bf00      	nop
 800f170:	08010143 	.word	0x08010143
 800f174:	080101b4 	.word	0x080101b4

0800f178 <__mcmp>:
 800f178:	b530      	push	{r4, r5, lr}
 800f17a:	6902      	ldr	r2, [r0, #16]
 800f17c:	690c      	ldr	r4, [r1, #16]
 800f17e:	1b12      	subs	r2, r2, r4
 800f180:	d10e      	bne.n	800f1a0 <__mcmp+0x28>
 800f182:	f100 0314 	add.w	r3, r0, #20
 800f186:	3114      	adds	r1, #20
 800f188:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f18c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f190:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f194:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f198:	42a5      	cmp	r5, r4
 800f19a:	d003      	beq.n	800f1a4 <__mcmp+0x2c>
 800f19c:	d305      	bcc.n	800f1aa <__mcmp+0x32>
 800f19e:	2201      	movs	r2, #1
 800f1a0:	4610      	mov	r0, r2
 800f1a2:	bd30      	pop	{r4, r5, pc}
 800f1a4:	4283      	cmp	r3, r0
 800f1a6:	d3f3      	bcc.n	800f190 <__mcmp+0x18>
 800f1a8:	e7fa      	b.n	800f1a0 <__mcmp+0x28>
 800f1aa:	f04f 32ff 	mov.w	r2, #4294967295
 800f1ae:	e7f7      	b.n	800f1a0 <__mcmp+0x28>

0800f1b0 <__mdiff>:
 800f1b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1b4:	460c      	mov	r4, r1
 800f1b6:	4606      	mov	r6, r0
 800f1b8:	4611      	mov	r1, r2
 800f1ba:	4620      	mov	r0, r4
 800f1bc:	4690      	mov	r8, r2
 800f1be:	f7ff ffdb 	bl	800f178 <__mcmp>
 800f1c2:	1e05      	subs	r5, r0, #0
 800f1c4:	d110      	bne.n	800f1e8 <__mdiff+0x38>
 800f1c6:	4629      	mov	r1, r5
 800f1c8:	4630      	mov	r0, r6
 800f1ca:	f7ff fd53 	bl	800ec74 <_Balloc>
 800f1ce:	b930      	cbnz	r0, 800f1de <__mdiff+0x2e>
 800f1d0:	4b3a      	ldr	r3, [pc, #232]	; (800f2bc <__mdiff+0x10c>)
 800f1d2:	4602      	mov	r2, r0
 800f1d4:	f240 2132 	movw	r1, #562	; 0x232
 800f1d8:	4839      	ldr	r0, [pc, #228]	; (800f2c0 <__mdiff+0x110>)
 800f1da:	f000 fb85 	bl	800f8e8 <__assert_func>
 800f1de:	2301      	movs	r3, #1
 800f1e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f1e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1e8:	bfa4      	itt	ge
 800f1ea:	4643      	movge	r3, r8
 800f1ec:	46a0      	movge	r8, r4
 800f1ee:	4630      	mov	r0, r6
 800f1f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f1f4:	bfa6      	itte	ge
 800f1f6:	461c      	movge	r4, r3
 800f1f8:	2500      	movge	r5, #0
 800f1fa:	2501      	movlt	r5, #1
 800f1fc:	f7ff fd3a 	bl	800ec74 <_Balloc>
 800f200:	b920      	cbnz	r0, 800f20c <__mdiff+0x5c>
 800f202:	4b2e      	ldr	r3, [pc, #184]	; (800f2bc <__mdiff+0x10c>)
 800f204:	4602      	mov	r2, r0
 800f206:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f20a:	e7e5      	b.n	800f1d8 <__mdiff+0x28>
 800f20c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f210:	6926      	ldr	r6, [r4, #16]
 800f212:	60c5      	str	r5, [r0, #12]
 800f214:	f104 0914 	add.w	r9, r4, #20
 800f218:	f108 0514 	add.w	r5, r8, #20
 800f21c:	f100 0e14 	add.w	lr, r0, #20
 800f220:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f224:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f228:	f108 0210 	add.w	r2, r8, #16
 800f22c:	46f2      	mov	sl, lr
 800f22e:	2100      	movs	r1, #0
 800f230:	f859 3b04 	ldr.w	r3, [r9], #4
 800f234:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f238:	fa1f f883 	uxth.w	r8, r3
 800f23c:	fa11 f18b 	uxtah	r1, r1, fp
 800f240:	0c1b      	lsrs	r3, r3, #16
 800f242:	eba1 0808 	sub.w	r8, r1, r8
 800f246:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f24a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f24e:	fa1f f888 	uxth.w	r8, r8
 800f252:	1419      	asrs	r1, r3, #16
 800f254:	454e      	cmp	r6, r9
 800f256:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f25a:	f84a 3b04 	str.w	r3, [sl], #4
 800f25e:	d8e7      	bhi.n	800f230 <__mdiff+0x80>
 800f260:	1b33      	subs	r3, r6, r4
 800f262:	3b15      	subs	r3, #21
 800f264:	f023 0303 	bic.w	r3, r3, #3
 800f268:	3304      	adds	r3, #4
 800f26a:	3415      	adds	r4, #21
 800f26c:	42a6      	cmp	r6, r4
 800f26e:	bf38      	it	cc
 800f270:	2304      	movcc	r3, #4
 800f272:	441d      	add	r5, r3
 800f274:	4473      	add	r3, lr
 800f276:	469e      	mov	lr, r3
 800f278:	462e      	mov	r6, r5
 800f27a:	4566      	cmp	r6, ip
 800f27c:	d30e      	bcc.n	800f29c <__mdiff+0xec>
 800f27e:	f10c 0203 	add.w	r2, ip, #3
 800f282:	1b52      	subs	r2, r2, r5
 800f284:	f022 0203 	bic.w	r2, r2, #3
 800f288:	3d03      	subs	r5, #3
 800f28a:	45ac      	cmp	ip, r5
 800f28c:	bf38      	it	cc
 800f28e:	2200      	movcc	r2, #0
 800f290:	441a      	add	r2, r3
 800f292:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f296:	b17b      	cbz	r3, 800f2b8 <__mdiff+0x108>
 800f298:	6107      	str	r7, [r0, #16]
 800f29a:	e7a3      	b.n	800f1e4 <__mdiff+0x34>
 800f29c:	f856 8b04 	ldr.w	r8, [r6], #4
 800f2a0:	fa11 f288 	uxtah	r2, r1, r8
 800f2a4:	1414      	asrs	r4, r2, #16
 800f2a6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f2aa:	b292      	uxth	r2, r2
 800f2ac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f2b0:	f84e 2b04 	str.w	r2, [lr], #4
 800f2b4:	1421      	asrs	r1, r4, #16
 800f2b6:	e7e0      	b.n	800f27a <__mdiff+0xca>
 800f2b8:	3f01      	subs	r7, #1
 800f2ba:	e7ea      	b.n	800f292 <__mdiff+0xe2>
 800f2bc:	08010143 	.word	0x08010143
 800f2c0:	080101b4 	.word	0x080101b4

0800f2c4 <__d2b>:
 800f2c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f2c8:	4689      	mov	r9, r1
 800f2ca:	2101      	movs	r1, #1
 800f2cc:	ec57 6b10 	vmov	r6, r7, d0
 800f2d0:	4690      	mov	r8, r2
 800f2d2:	f7ff fccf 	bl	800ec74 <_Balloc>
 800f2d6:	4604      	mov	r4, r0
 800f2d8:	b930      	cbnz	r0, 800f2e8 <__d2b+0x24>
 800f2da:	4602      	mov	r2, r0
 800f2dc:	4b25      	ldr	r3, [pc, #148]	; (800f374 <__d2b+0xb0>)
 800f2de:	4826      	ldr	r0, [pc, #152]	; (800f378 <__d2b+0xb4>)
 800f2e0:	f240 310a 	movw	r1, #778	; 0x30a
 800f2e4:	f000 fb00 	bl	800f8e8 <__assert_func>
 800f2e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f2ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f2f0:	bb35      	cbnz	r5, 800f340 <__d2b+0x7c>
 800f2f2:	2e00      	cmp	r6, #0
 800f2f4:	9301      	str	r3, [sp, #4]
 800f2f6:	d028      	beq.n	800f34a <__d2b+0x86>
 800f2f8:	4668      	mov	r0, sp
 800f2fa:	9600      	str	r6, [sp, #0]
 800f2fc:	f7ff fd82 	bl	800ee04 <__lo0bits>
 800f300:	9900      	ldr	r1, [sp, #0]
 800f302:	b300      	cbz	r0, 800f346 <__d2b+0x82>
 800f304:	9a01      	ldr	r2, [sp, #4]
 800f306:	f1c0 0320 	rsb	r3, r0, #32
 800f30a:	fa02 f303 	lsl.w	r3, r2, r3
 800f30e:	430b      	orrs	r3, r1
 800f310:	40c2      	lsrs	r2, r0
 800f312:	6163      	str	r3, [r4, #20]
 800f314:	9201      	str	r2, [sp, #4]
 800f316:	9b01      	ldr	r3, [sp, #4]
 800f318:	61a3      	str	r3, [r4, #24]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	bf14      	ite	ne
 800f31e:	2202      	movne	r2, #2
 800f320:	2201      	moveq	r2, #1
 800f322:	6122      	str	r2, [r4, #16]
 800f324:	b1d5      	cbz	r5, 800f35c <__d2b+0x98>
 800f326:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f32a:	4405      	add	r5, r0
 800f32c:	f8c9 5000 	str.w	r5, [r9]
 800f330:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f334:	f8c8 0000 	str.w	r0, [r8]
 800f338:	4620      	mov	r0, r4
 800f33a:	b003      	add	sp, #12
 800f33c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f340:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f344:	e7d5      	b.n	800f2f2 <__d2b+0x2e>
 800f346:	6161      	str	r1, [r4, #20]
 800f348:	e7e5      	b.n	800f316 <__d2b+0x52>
 800f34a:	a801      	add	r0, sp, #4
 800f34c:	f7ff fd5a 	bl	800ee04 <__lo0bits>
 800f350:	9b01      	ldr	r3, [sp, #4]
 800f352:	6163      	str	r3, [r4, #20]
 800f354:	2201      	movs	r2, #1
 800f356:	6122      	str	r2, [r4, #16]
 800f358:	3020      	adds	r0, #32
 800f35a:	e7e3      	b.n	800f324 <__d2b+0x60>
 800f35c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f360:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f364:	f8c9 0000 	str.w	r0, [r9]
 800f368:	6918      	ldr	r0, [r3, #16]
 800f36a:	f7ff fd2b 	bl	800edc4 <__hi0bits>
 800f36e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f372:	e7df      	b.n	800f334 <__d2b+0x70>
 800f374:	08010143 	.word	0x08010143
 800f378:	080101b4 	.word	0x080101b4

0800f37c <_calloc_r>:
 800f37c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f37e:	fba1 2402 	umull	r2, r4, r1, r2
 800f382:	b94c      	cbnz	r4, 800f398 <_calloc_r+0x1c>
 800f384:	4611      	mov	r1, r2
 800f386:	9201      	str	r2, [sp, #4]
 800f388:	f000 f87a 	bl	800f480 <_malloc_r>
 800f38c:	9a01      	ldr	r2, [sp, #4]
 800f38e:	4605      	mov	r5, r0
 800f390:	b930      	cbnz	r0, 800f3a0 <_calloc_r+0x24>
 800f392:	4628      	mov	r0, r5
 800f394:	b003      	add	sp, #12
 800f396:	bd30      	pop	{r4, r5, pc}
 800f398:	220c      	movs	r2, #12
 800f39a:	6002      	str	r2, [r0, #0]
 800f39c:	2500      	movs	r5, #0
 800f39e:	e7f8      	b.n	800f392 <_calloc_r+0x16>
 800f3a0:	4621      	mov	r1, r4
 800f3a2:	f7fd fea7 	bl	800d0f4 <memset>
 800f3a6:	e7f4      	b.n	800f392 <_calloc_r+0x16>

0800f3a8 <_free_r>:
 800f3a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f3aa:	2900      	cmp	r1, #0
 800f3ac:	d044      	beq.n	800f438 <_free_r+0x90>
 800f3ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3b2:	9001      	str	r0, [sp, #4]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	f1a1 0404 	sub.w	r4, r1, #4
 800f3ba:	bfb8      	it	lt
 800f3bc:	18e4      	addlt	r4, r4, r3
 800f3be:	f000 fb19 	bl	800f9f4 <__malloc_lock>
 800f3c2:	4a1e      	ldr	r2, [pc, #120]	; (800f43c <_free_r+0x94>)
 800f3c4:	9801      	ldr	r0, [sp, #4]
 800f3c6:	6813      	ldr	r3, [r2, #0]
 800f3c8:	b933      	cbnz	r3, 800f3d8 <_free_r+0x30>
 800f3ca:	6063      	str	r3, [r4, #4]
 800f3cc:	6014      	str	r4, [r2, #0]
 800f3ce:	b003      	add	sp, #12
 800f3d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f3d4:	f000 bb14 	b.w	800fa00 <__malloc_unlock>
 800f3d8:	42a3      	cmp	r3, r4
 800f3da:	d908      	bls.n	800f3ee <_free_r+0x46>
 800f3dc:	6825      	ldr	r5, [r4, #0]
 800f3de:	1961      	adds	r1, r4, r5
 800f3e0:	428b      	cmp	r3, r1
 800f3e2:	bf01      	itttt	eq
 800f3e4:	6819      	ldreq	r1, [r3, #0]
 800f3e6:	685b      	ldreq	r3, [r3, #4]
 800f3e8:	1949      	addeq	r1, r1, r5
 800f3ea:	6021      	streq	r1, [r4, #0]
 800f3ec:	e7ed      	b.n	800f3ca <_free_r+0x22>
 800f3ee:	461a      	mov	r2, r3
 800f3f0:	685b      	ldr	r3, [r3, #4]
 800f3f2:	b10b      	cbz	r3, 800f3f8 <_free_r+0x50>
 800f3f4:	42a3      	cmp	r3, r4
 800f3f6:	d9fa      	bls.n	800f3ee <_free_r+0x46>
 800f3f8:	6811      	ldr	r1, [r2, #0]
 800f3fa:	1855      	adds	r5, r2, r1
 800f3fc:	42a5      	cmp	r5, r4
 800f3fe:	d10b      	bne.n	800f418 <_free_r+0x70>
 800f400:	6824      	ldr	r4, [r4, #0]
 800f402:	4421      	add	r1, r4
 800f404:	1854      	adds	r4, r2, r1
 800f406:	42a3      	cmp	r3, r4
 800f408:	6011      	str	r1, [r2, #0]
 800f40a:	d1e0      	bne.n	800f3ce <_free_r+0x26>
 800f40c:	681c      	ldr	r4, [r3, #0]
 800f40e:	685b      	ldr	r3, [r3, #4]
 800f410:	6053      	str	r3, [r2, #4]
 800f412:	4421      	add	r1, r4
 800f414:	6011      	str	r1, [r2, #0]
 800f416:	e7da      	b.n	800f3ce <_free_r+0x26>
 800f418:	d902      	bls.n	800f420 <_free_r+0x78>
 800f41a:	230c      	movs	r3, #12
 800f41c:	6003      	str	r3, [r0, #0]
 800f41e:	e7d6      	b.n	800f3ce <_free_r+0x26>
 800f420:	6825      	ldr	r5, [r4, #0]
 800f422:	1961      	adds	r1, r4, r5
 800f424:	428b      	cmp	r3, r1
 800f426:	bf04      	itt	eq
 800f428:	6819      	ldreq	r1, [r3, #0]
 800f42a:	685b      	ldreq	r3, [r3, #4]
 800f42c:	6063      	str	r3, [r4, #4]
 800f42e:	bf04      	itt	eq
 800f430:	1949      	addeq	r1, r1, r5
 800f432:	6021      	streq	r1, [r4, #0]
 800f434:	6054      	str	r4, [r2, #4]
 800f436:	e7ca      	b.n	800f3ce <_free_r+0x26>
 800f438:	b003      	add	sp, #12
 800f43a:	bd30      	pop	{r4, r5, pc}
 800f43c:	200006b8 	.word	0x200006b8

0800f440 <sbrk_aligned>:
 800f440:	b570      	push	{r4, r5, r6, lr}
 800f442:	4e0e      	ldr	r6, [pc, #56]	; (800f47c <sbrk_aligned+0x3c>)
 800f444:	460c      	mov	r4, r1
 800f446:	6831      	ldr	r1, [r6, #0]
 800f448:	4605      	mov	r5, r0
 800f44a:	b911      	cbnz	r1, 800f452 <sbrk_aligned+0x12>
 800f44c:	f000 f9e6 	bl	800f81c <_sbrk_r>
 800f450:	6030      	str	r0, [r6, #0]
 800f452:	4621      	mov	r1, r4
 800f454:	4628      	mov	r0, r5
 800f456:	f000 f9e1 	bl	800f81c <_sbrk_r>
 800f45a:	1c43      	adds	r3, r0, #1
 800f45c:	d00a      	beq.n	800f474 <sbrk_aligned+0x34>
 800f45e:	1cc4      	adds	r4, r0, #3
 800f460:	f024 0403 	bic.w	r4, r4, #3
 800f464:	42a0      	cmp	r0, r4
 800f466:	d007      	beq.n	800f478 <sbrk_aligned+0x38>
 800f468:	1a21      	subs	r1, r4, r0
 800f46a:	4628      	mov	r0, r5
 800f46c:	f000 f9d6 	bl	800f81c <_sbrk_r>
 800f470:	3001      	adds	r0, #1
 800f472:	d101      	bne.n	800f478 <sbrk_aligned+0x38>
 800f474:	f04f 34ff 	mov.w	r4, #4294967295
 800f478:	4620      	mov	r0, r4
 800f47a:	bd70      	pop	{r4, r5, r6, pc}
 800f47c:	200006bc 	.word	0x200006bc

0800f480 <_malloc_r>:
 800f480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f484:	1ccd      	adds	r5, r1, #3
 800f486:	f025 0503 	bic.w	r5, r5, #3
 800f48a:	3508      	adds	r5, #8
 800f48c:	2d0c      	cmp	r5, #12
 800f48e:	bf38      	it	cc
 800f490:	250c      	movcc	r5, #12
 800f492:	2d00      	cmp	r5, #0
 800f494:	4607      	mov	r7, r0
 800f496:	db01      	blt.n	800f49c <_malloc_r+0x1c>
 800f498:	42a9      	cmp	r1, r5
 800f49a:	d905      	bls.n	800f4a8 <_malloc_r+0x28>
 800f49c:	230c      	movs	r3, #12
 800f49e:	603b      	str	r3, [r7, #0]
 800f4a0:	2600      	movs	r6, #0
 800f4a2:	4630      	mov	r0, r6
 800f4a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4a8:	4e2e      	ldr	r6, [pc, #184]	; (800f564 <_malloc_r+0xe4>)
 800f4aa:	f000 faa3 	bl	800f9f4 <__malloc_lock>
 800f4ae:	6833      	ldr	r3, [r6, #0]
 800f4b0:	461c      	mov	r4, r3
 800f4b2:	bb34      	cbnz	r4, 800f502 <_malloc_r+0x82>
 800f4b4:	4629      	mov	r1, r5
 800f4b6:	4638      	mov	r0, r7
 800f4b8:	f7ff ffc2 	bl	800f440 <sbrk_aligned>
 800f4bc:	1c43      	adds	r3, r0, #1
 800f4be:	4604      	mov	r4, r0
 800f4c0:	d14d      	bne.n	800f55e <_malloc_r+0xde>
 800f4c2:	6834      	ldr	r4, [r6, #0]
 800f4c4:	4626      	mov	r6, r4
 800f4c6:	2e00      	cmp	r6, #0
 800f4c8:	d140      	bne.n	800f54c <_malloc_r+0xcc>
 800f4ca:	6823      	ldr	r3, [r4, #0]
 800f4cc:	4631      	mov	r1, r6
 800f4ce:	4638      	mov	r0, r7
 800f4d0:	eb04 0803 	add.w	r8, r4, r3
 800f4d4:	f000 f9a2 	bl	800f81c <_sbrk_r>
 800f4d8:	4580      	cmp	r8, r0
 800f4da:	d13a      	bne.n	800f552 <_malloc_r+0xd2>
 800f4dc:	6821      	ldr	r1, [r4, #0]
 800f4de:	3503      	adds	r5, #3
 800f4e0:	1a6d      	subs	r5, r5, r1
 800f4e2:	f025 0503 	bic.w	r5, r5, #3
 800f4e6:	3508      	adds	r5, #8
 800f4e8:	2d0c      	cmp	r5, #12
 800f4ea:	bf38      	it	cc
 800f4ec:	250c      	movcc	r5, #12
 800f4ee:	4629      	mov	r1, r5
 800f4f0:	4638      	mov	r0, r7
 800f4f2:	f7ff ffa5 	bl	800f440 <sbrk_aligned>
 800f4f6:	3001      	adds	r0, #1
 800f4f8:	d02b      	beq.n	800f552 <_malloc_r+0xd2>
 800f4fa:	6823      	ldr	r3, [r4, #0]
 800f4fc:	442b      	add	r3, r5
 800f4fe:	6023      	str	r3, [r4, #0]
 800f500:	e00e      	b.n	800f520 <_malloc_r+0xa0>
 800f502:	6822      	ldr	r2, [r4, #0]
 800f504:	1b52      	subs	r2, r2, r5
 800f506:	d41e      	bmi.n	800f546 <_malloc_r+0xc6>
 800f508:	2a0b      	cmp	r2, #11
 800f50a:	d916      	bls.n	800f53a <_malloc_r+0xba>
 800f50c:	1961      	adds	r1, r4, r5
 800f50e:	42a3      	cmp	r3, r4
 800f510:	6025      	str	r5, [r4, #0]
 800f512:	bf18      	it	ne
 800f514:	6059      	strne	r1, [r3, #4]
 800f516:	6863      	ldr	r3, [r4, #4]
 800f518:	bf08      	it	eq
 800f51a:	6031      	streq	r1, [r6, #0]
 800f51c:	5162      	str	r2, [r4, r5]
 800f51e:	604b      	str	r3, [r1, #4]
 800f520:	4638      	mov	r0, r7
 800f522:	f104 060b 	add.w	r6, r4, #11
 800f526:	f000 fa6b 	bl	800fa00 <__malloc_unlock>
 800f52a:	f026 0607 	bic.w	r6, r6, #7
 800f52e:	1d23      	adds	r3, r4, #4
 800f530:	1af2      	subs	r2, r6, r3
 800f532:	d0b6      	beq.n	800f4a2 <_malloc_r+0x22>
 800f534:	1b9b      	subs	r3, r3, r6
 800f536:	50a3      	str	r3, [r4, r2]
 800f538:	e7b3      	b.n	800f4a2 <_malloc_r+0x22>
 800f53a:	6862      	ldr	r2, [r4, #4]
 800f53c:	42a3      	cmp	r3, r4
 800f53e:	bf0c      	ite	eq
 800f540:	6032      	streq	r2, [r6, #0]
 800f542:	605a      	strne	r2, [r3, #4]
 800f544:	e7ec      	b.n	800f520 <_malloc_r+0xa0>
 800f546:	4623      	mov	r3, r4
 800f548:	6864      	ldr	r4, [r4, #4]
 800f54a:	e7b2      	b.n	800f4b2 <_malloc_r+0x32>
 800f54c:	4634      	mov	r4, r6
 800f54e:	6876      	ldr	r6, [r6, #4]
 800f550:	e7b9      	b.n	800f4c6 <_malloc_r+0x46>
 800f552:	230c      	movs	r3, #12
 800f554:	603b      	str	r3, [r7, #0]
 800f556:	4638      	mov	r0, r7
 800f558:	f000 fa52 	bl	800fa00 <__malloc_unlock>
 800f55c:	e7a1      	b.n	800f4a2 <_malloc_r+0x22>
 800f55e:	6025      	str	r5, [r4, #0]
 800f560:	e7de      	b.n	800f520 <_malloc_r+0xa0>
 800f562:	bf00      	nop
 800f564:	200006b8 	.word	0x200006b8

0800f568 <__sfputc_r>:
 800f568:	6893      	ldr	r3, [r2, #8]
 800f56a:	3b01      	subs	r3, #1
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	b410      	push	{r4}
 800f570:	6093      	str	r3, [r2, #8]
 800f572:	da08      	bge.n	800f586 <__sfputc_r+0x1e>
 800f574:	6994      	ldr	r4, [r2, #24]
 800f576:	42a3      	cmp	r3, r4
 800f578:	db01      	blt.n	800f57e <__sfputc_r+0x16>
 800f57a:	290a      	cmp	r1, #10
 800f57c:	d103      	bne.n	800f586 <__sfputc_r+0x1e>
 800f57e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f582:	f7fe ba91 	b.w	800daa8 <__swbuf_r>
 800f586:	6813      	ldr	r3, [r2, #0]
 800f588:	1c58      	adds	r0, r3, #1
 800f58a:	6010      	str	r0, [r2, #0]
 800f58c:	7019      	strb	r1, [r3, #0]
 800f58e:	4608      	mov	r0, r1
 800f590:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f594:	4770      	bx	lr

0800f596 <__sfputs_r>:
 800f596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f598:	4606      	mov	r6, r0
 800f59a:	460f      	mov	r7, r1
 800f59c:	4614      	mov	r4, r2
 800f59e:	18d5      	adds	r5, r2, r3
 800f5a0:	42ac      	cmp	r4, r5
 800f5a2:	d101      	bne.n	800f5a8 <__sfputs_r+0x12>
 800f5a4:	2000      	movs	r0, #0
 800f5a6:	e007      	b.n	800f5b8 <__sfputs_r+0x22>
 800f5a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5ac:	463a      	mov	r2, r7
 800f5ae:	4630      	mov	r0, r6
 800f5b0:	f7ff ffda 	bl	800f568 <__sfputc_r>
 800f5b4:	1c43      	adds	r3, r0, #1
 800f5b6:	d1f3      	bne.n	800f5a0 <__sfputs_r+0xa>
 800f5b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f5bc <_vfiprintf_r>:
 800f5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5c0:	460d      	mov	r5, r1
 800f5c2:	b09d      	sub	sp, #116	; 0x74
 800f5c4:	4614      	mov	r4, r2
 800f5c6:	4698      	mov	r8, r3
 800f5c8:	4606      	mov	r6, r0
 800f5ca:	b118      	cbz	r0, 800f5d4 <_vfiprintf_r+0x18>
 800f5cc:	6983      	ldr	r3, [r0, #24]
 800f5ce:	b90b      	cbnz	r3, 800f5d4 <_vfiprintf_r+0x18>
 800f5d0:	f7ff fa3e 	bl	800ea50 <__sinit>
 800f5d4:	4b89      	ldr	r3, [pc, #548]	; (800f7fc <_vfiprintf_r+0x240>)
 800f5d6:	429d      	cmp	r5, r3
 800f5d8:	d11b      	bne.n	800f612 <_vfiprintf_r+0x56>
 800f5da:	6875      	ldr	r5, [r6, #4]
 800f5dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f5de:	07d9      	lsls	r1, r3, #31
 800f5e0:	d405      	bmi.n	800f5ee <_vfiprintf_r+0x32>
 800f5e2:	89ab      	ldrh	r3, [r5, #12]
 800f5e4:	059a      	lsls	r2, r3, #22
 800f5e6:	d402      	bmi.n	800f5ee <_vfiprintf_r+0x32>
 800f5e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f5ea:	f7ff fad4 	bl	800eb96 <__retarget_lock_acquire_recursive>
 800f5ee:	89ab      	ldrh	r3, [r5, #12]
 800f5f0:	071b      	lsls	r3, r3, #28
 800f5f2:	d501      	bpl.n	800f5f8 <_vfiprintf_r+0x3c>
 800f5f4:	692b      	ldr	r3, [r5, #16]
 800f5f6:	b9eb      	cbnz	r3, 800f634 <_vfiprintf_r+0x78>
 800f5f8:	4629      	mov	r1, r5
 800f5fa:	4630      	mov	r0, r6
 800f5fc:	f7fe faa6 	bl	800db4c <__swsetup_r>
 800f600:	b1c0      	cbz	r0, 800f634 <_vfiprintf_r+0x78>
 800f602:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f604:	07dc      	lsls	r4, r3, #31
 800f606:	d50e      	bpl.n	800f626 <_vfiprintf_r+0x6a>
 800f608:	f04f 30ff 	mov.w	r0, #4294967295
 800f60c:	b01d      	add	sp, #116	; 0x74
 800f60e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f612:	4b7b      	ldr	r3, [pc, #492]	; (800f800 <_vfiprintf_r+0x244>)
 800f614:	429d      	cmp	r5, r3
 800f616:	d101      	bne.n	800f61c <_vfiprintf_r+0x60>
 800f618:	68b5      	ldr	r5, [r6, #8]
 800f61a:	e7df      	b.n	800f5dc <_vfiprintf_r+0x20>
 800f61c:	4b79      	ldr	r3, [pc, #484]	; (800f804 <_vfiprintf_r+0x248>)
 800f61e:	429d      	cmp	r5, r3
 800f620:	bf08      	it	eq
 800f622:	68f5      	ldreq	r5, [r6, #12]
 800f624:	e7da      	b.n	800f5dc <_vfiprintf_r+0x20>
 800f626:	89ab      	ldrh	r3, [r5, #12]
 800f628:	0598      	lsls	r0, r3, #22
 800f62a:	d4ed      	bmi.n	800f608 <_vfiprintf_r+0x4c>
 800f62c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f62e:	f7ff fab3 	bl	800eb98 <__retarget_lock_release_recursive>
 800f632:	e7e9      	b.n	800f608 <_vfiprintf_r+0x4c>
 800f634:	2300      	movs	r3, #0
 800f636:	9309      	str	r3, [sp, #36]	; 0x24
 800f638:	2320      	movs	r3, #32
 800f63a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f63e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f642:	2330      	movs	r3, #48	; 0x30
 800f644:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f808 <_vfiprintf_r+0x24c>
 800f648:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f64c:	f04f 0901 	mov.w	r9, #1
 800f650:	4623      	mov	r3, r4
 800f652:	469a      	mov	sl, r3
 800f654:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f658:	b10a      	cbz	r2, 800f65e <_vfiprintf_r+0xa2>
 800f65a:	2a25      	cmp	r2, #37	; 0x25
 800f65c:	d1f9      	bne.n	800f652 <_vfiprintf_r+0x96>
 800f65e:	ebba 0b04 	subs.w	fp, sl, r4
 800f662:	d00b      	beq.n	800f67c <_vfiprintf_r+0xc0>
 800f664:	465b      	mov	r3, fp
 800f666:	4622      	mov	r2, r4
 800f668:	4629      	mov	r1, r5
 800f66a:	4630      	mov	r0, r6
 800f66c:	f7ff ff93 	bl	800f596 <__sfputs_r>
 800f670:	3001      	adds	r0, #1
 800f672:	f000 80aa 	beq.w	800f7ca <_vfiprintf_r+0x20e>
 800f676:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f678:	445a      	add	r2, fp
 800f67a:	9209      	str	r2, [sp, #36]	; 0x24
 800f67c:	f89a 3000 	ldrb.w	r3, [sl]
 800f680:	2b00      	cmp	r3, #0
 800f682:	f000 80a2 	beq.w	800f7ca <_vfiprintf_r+0x20e>
 800f686:	2300      	movs	r3, #0
 800f688:	f04f 32ff 	mov.w	r2, #4294967295
 800f68c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f690:	f10a 0a01 	add.w	sl, sl, #1
 800f694:	9304      	str	r3, [sp, #16]
 800f696:	9307      	str	r3, [sp, #28]
 800f698:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f69c:	931a      	str	r3, [sp, #104]	; 0x68
 800f69e:	4654      	mov	r4, sl
 800f6a0:	2205      	movs	r2, #5
 800f6a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6a6:	4858      	ldr	r0, [pc, #352]	; (800f808 <_vfiprintf_r+0x24c>)
 800f6a8:	f7f1 fbda 	bl	8000e60 <memchr>
 800f6ac:	9a04      	ldr	r2, [sp, #16]
 800f6ae:	b9d8      	cbnz	r0, 800f6e8 <_vfiprintf_r+0x12c>
 800f6b0:	06d1      	lsls	r1, r2, #27
 800f6b2:	bf44      	itt	mi
 800f6b4:	2320      	movmi	r3, #32
 800f6b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f6ba:	0713      	lsls	r3, r2, #28
 800f6bc:	bf44      	itt	mi
 800f6be:	232b      	movmi	r3, #43	; 0x2b
 800f6c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f6c4:	f89a 3000 	ldrb.w	r3, [sl]
 800f6c8:	2b2a      	cmp	r3, #42	; 0x2a
 800f6ca:	d015      	beq.n	800f6f8 <_vfiprintf_r+0x13c>
 800f6cc:	9a07      	ldr	r2, [sp, #28]
 800f6ce:	4654      	mov	r4, sl
 800f6d0:	2000      	movs	r0, #0
 800f6d2:	f04f 0c0a 	mov.w	ip, #10
 800f6d6:	4621      	mov	r1, r4
 800f6d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f6dc:	3b30      	subs	r3, #48	; 0x30
 800f6de:	2b09      	cmp	r3, #9
 800f6e0:	d94e      	bls.n	800f780 <_vfiprintf_r+0x1c4>
 800f6e2:	b1b0      	cbz	r0, 800f712 <_vfiprintf_r+0x156>
 800f6e4:	9207      	str	r2, [sp, #28]
 800f6e6:	e014      	b.n	800f712 <_vfiprintf_r+0x156>
 800f6e8:	eba0 0308 	sub.w	r3, r0, r8
 800f6ec:	fa09 f303 	lsl.w	r3, r9, r3
 800f6f0:	4313      	orrs	r3, r2
 800f6f2:	9304      	str	r3, [sp, #16]
 800f6f4:	46a2      	mov	sl, r4
 800f6f6:	e7d2      	b.n	800f69e <_vfiprintf_r+0xe2>
 800f6f8:	9b03      	ldr	r3, [sp, #12]
 800f6fa:	1d19      	adds	r1, r3, #4
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	9103      	str	r1, [sp, #12]
 800f700:	2b00      	cmp	r3, #0
 800f702:	bfbb      	ittet	lt
 800f704:	425b      	neglt	r3, r3
 800f706:	f042 0202 	orrlt.w	r2, r2, #2
 800f70a:	9307      	strge	r3, [sp, #28]
 800f70c:	9307      	strlt	r3, [sp, #28]
 800f70e:	bfb8      	it	lt
 800f710:	9204      	strlt	r2, [sp, #16]
 800f712:	7823      	ldrb	r3, [r4, #0]
 800f714:	2b2e      	cmp	r3, #46	; 0x2e
 800f716:	d10c      	bne.n	800f732 <_vfiprintf_r+0x176>
 800f718:	7863      	ldrb	r3, [r4, #1]
 800f71a:	2b2a      	cmp	r3, #42	; 0x2a
 800f71c:	d135      	bne.n	800f78a <_vfiprintf_r+0x1ce>
 800f71e:	9b03      	ldr	r3, [sp, #12]
 800f720:	1d1a      	adds	r2, r3, #4
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	9203      	str	r2, [sp, #12]
 800f726:	2b00      	cmp	r3, #0
 800f728:	bfb8      	it	lt
 800f72a:	f04f 33ff 	movlt.w	r3, #4294967295
 800f72e:	3402      	adds	r4, #2
 800f730:	9305      	str	r3, [sp, #20]
 800f732:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f818 <_vfiprintf_r+0x25c>
 800f736:	7821      	ldrb	r1, [r4, #0]
 800f738:	2203      	movs	r2, #3
 800f73a:	4650      	mov	r0, sl
 800f73c:	f7f1 fb90 	bl	8000e60 <memchr>
 800f740:	b140      	cbz	r0, 800f754 <_vfiprintf_r+0x198>
 800f742:	2340      	movs	r3, #64	; 0x40
 800f744:	eba0 000a 	sub.w	r0, r0, sl
 800f748:	fa03 f000 	lsl.w	r0, r3, r0
 800f74c:	9b04      	ldr	r3, [sp, #16]
 800f74e:	4303      	orrs	r3, r0
 800f750:	3401      	adds	r4, #1
 800f752:	9304      	str	r3, [sp, #16]
 800f754:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f758:	482c      	ldr	r0, [pc, #176]	; (800f80c <_vfiprintf_r+0x250>)
 800f75a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f75e:	2206      	movs	r2, #6
 800f760:	f7f1 fb7e 	bl	8000e60 <memchr>
 800f764:	2800      	cmp	r0, #0
 800f766:	d03f      	beq.n	800f7e8 <_vfiprintf_r+0x22c>
 800f768:	4b29      	ldr	r3, [pc, #164]	; (800f810 <_vfiprintf_r+0x254>)
 800f76a:	bb1b      	cbnz	r3, 800f7b4 <_vfiprintf_r+0x1f8>
 800f76c:	9b03      	ldr	r3, [sp, #12]
 800f76e:	3307      	adds	r3, #7
 800f770:	f023 0307 	bic.w	r3, r3, #7
 800f774:	3308      	adds	r3, #8
 800f776:	9303      	str	r3, [sp, #12]
 800f778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f77a:	443b      	add	r3, r7
 800f77c:	9309      	str	r3, [sp, #36]	; 0x24
 800f77e:	e767      	b.n	800f650 <_vfiprintf_r+0x94>
 800f780:	fb0c 3202 	mla	r2, ip, r2, r3
 800f784:	460c      	mov	r4, r1
 800f786:	2001      	movs	r0, #1
 800f788:	e7a5      	b.n	800f6d6 <_vfiprintf_r+0x11a>
 800f78a:	2300      	movs	r3, #0
 800f78c:	3401      	adds	r4, #1
 800f78e:	9305      	str	r3, [sp, #20]
 800f790:	4619      	mov	r1, r3
 800f792:	f04f 0c0a 	mov.w	ip, #10
 800f796:	4620      	mov	r0, r4
 800f798:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f79c:	3a30      	subs	r2, #48	; 0x30
 800f79e:	2a09      	cmp	r2, #9
 800f7a0:	d903      	bls.n	800f7aa <_vfiprintf_r+0x1ee>
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d0c5      	beq.n	800f732 <_vfiprintf_r+0x176>
 800f7a6:	9105      	str	r1, [sp, #20]
 800f7a8:	e7c3      	b.n	800f732 <_vfiprintf_r+0x176>
 800f7aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800f7ae:	4604      	mov	r4, r0
 800f7b0:	2301      	movs	r3, #1
 800f7b2:	e7f0      	b.n	800f796 <_vfiprintf_r+0x1da>
 800f7b4:	ab03      	add	r3, sp, #12
 800f7b6:	9300      	str	r3, [sp, #0]
 800f7b8:	462a      	mov	r2, r5
 800f7ba:	4b16      	ldr	r3, [pc, #88]	; (800f814 <_vfiprintf_r+0x258>)
 800f7bc:	a904      	add	r1, sp, #16
 800f7be:	4630      	mov	r0, r6
 800f7c0:	f7fd fd32 	bl	800d228 <_printf_float>
 800f7c4:	4607      	mov	r7, r0
 800f7c6:	1c78      	adds	r0, r7, #1
 800f7c8:	d1d6      	bne.n	800f778 <_vfiprintf_r+0x1bc>
 800f7ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f7cc:	07d9      	lsls	r1, r3, #31
 800f7ce:	d405      	bmi.n	800f7dc <_vfiprintf_r+0x220>
 800f7d0:	89ab      	ldrh	r3, [r5, #12]
 800f7d2:	059a      	lsls	r2, r3, #22
 800f7d4:	d402      	bmi.n	800f7dc <_vfiprintf_r+0x220>
 800f7d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f7d8:	f7ff f9de 	bl	800eb98 <__retarget_lock_release_recursive>
 800f7dc:	89ab      	ldrh	r3, [r5, #12]
 800f7de:	065b      	lsls	r3, r3, #25
 800f7e0:	f53f af12 	bmi.w	800f608 <_vfiprintf_r+0x4c>
 800f7e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f7e6:	e711      	b.n	800f60c <_vfiprintf_r+0x50>
 800f7e8:	ab03      	add	r3, sp, #12
 800f7ea:	9300      	str	r3, [sp, #0]
 800f7ec:	462a      	mov	r2, r5
 800f7ee:	4b09      	ldr	r3, [pc, #36]	; (800f814 <_vfiprintf_r+0x258>)
 800f7f0:	a904      	add	r1, sp, #16
 800f7f2:	4630      	mov	r0, r6
 800f7f4:	f7fd ffa4 	bl	800d740 <_printf_i>
 800f7f8:	e7e4      	b.n	800f7c4 <_vfiprintf_r+0x208>
 800f7fa:	bf00      	nop
 800f7fc:	08010174 	.word	0x08010174
 800f800:	08010194 	.word	0x08010194
 800f804:	08010154 	.word	0x08010154
 800f808:	0801030c 	.word	0x0801030c
 800f80c:	08010316 	.word	0x08010316
 800f810:	0800d229 	.word	0x0800d229
 800f814:	0800f597 	.word	0x0800f597
 800f818:	08010312 	.word	0x08010312

0800f81c <_sbrk_r>:
 800f81c:	b538      	push	{r3, r4, r5, lr}
 800f81e:	4d06      	ldr	r5, [pc, #24]	; (800f838 <_sbrk_r+0x1c>)
 800f820:	2300      	movs	r3, #0
 800f822:	4604      	mov	r4, r0
 800f824:	4608      	mov	r0, r1
 800f826:	602b      	str	r3, [r5, #0]
 800f828:	f7f3 f97c 	bl	8002b24 <_sbrk>
 800f82c:	1c43      	adds	r3, r0, #1
 800f82e:	d102      	bne.n	800f836 <_sbrk_r+0x1a>
 800f830:	682b      	ldr	r3, [r5, #0]
 800f832:	b103      	cbz	r3, 800f836 <_sbrk_r+0x1a>
 800f834:	6023      	str	r3, [r4, #0]
 800f836:	bd38      	pop	{r3, r4, r5, pc}
 800f838:	200006c0 	.word	0x200006c0

0800f83c <__sread>:
 800f83c:	b510      	push	{r4, lr}
 800f83e:	460c      	mov	r4, r1
 800f840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f844:	f000 f8e2 	bl	800fa0c <_read_r>
 800f848:	2800      	cmp	r0, #0
 800f84a:	bfab      	itete	ge
 800f84c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f84e:	89a3      	ldrhlt	r3, [r4, #12]
 800f850:	181b      	addge	r3, r3, r0
 800f852:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f856:	bfac      	ite	ge
 800f858:	6563      	strge	r3, [r4, #84]	; 0x54
 800f85a:	81a3      	strhlt	r3, [r4, #12]
 800f85c:	bd10      	pop	{r4, pc}

0800f85e <__swrite>:
 800f85e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f862:	461f      	mov	r7, r3
 800f864:	898b      	ldrh	r3, [r1, #12]
 800f866:	05db      	lsls	r3, r3, #23
 800f868:	4605      	mov	r5, r0
 800f86a:	460c      	mov	r4, r1
 800f86c:	4616      	mov	r6, r2
 800f86e:	d505      	bpl.n	800f87c <__swrite+0x1e>
 800f870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f874:	2302      	movs	r3, #2
 800f876:	2200      	movs	r2, #0
 800f878:	f000 f898 	bl	800f9ac <_lseek_r>
 800f87c:	89a3      	ldrh	r3, [r4, #12]
 800f87e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f882:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f886:	81a3      	strh	r3, [r4, #12]
 800f888:	4632      	mov	r2, r6
 800f88a:	463b      	mov	r3, r7
 800f88c:	4628      	mov	r0, r5
 800f88e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f892:	f000 b817 	b.w	800f8c4 <_write_r>

0800f896 <__sseek>:
 800f896:	b510      	push	{r4, lr}
 800f898:	460c      	mov	r4, r1
 800f89a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f89e:	f000 f885 	bl	800f9ac <_lseek_r>
 800f8a2:	1c43      	adds	r3, r0, #1
 800f8a4:	89a3      	ldrh	r3, [r4, #12]
 800f8a6:	bf15      	itete	ne
 800f8a8:	6560      	strne	r0, [r4, #84]	; 0x54
 800f8aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f8ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f8b2:	81a3      	strheq	r3, [r4, #12]
 800f8b4:	bf18      	it	ne
 800f8b6:	81a3      	strhne	r3, [r4, #12]
 800f8b8:	bd10      	pop	{r4, pc}

0800f8ba <__sclose>:
 800f8ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8be:	f000 b831 	b.w	800f924 <_close_r>
	...

0800f8c4 <_write_r>:
 800f8c4:	b538      	push	{r3, r4, r5, lr}
 800f8c6:	4d07      	ldr	r5, [pc, #28]	; (800f8e4 <_write_r+0x20>)
 800f8c8:	4604      	mov	r4, r0
 800f8ca:	4608      	mov	r0, r1
 800f8cc:	4611      	mov	r1, r2
 800f8ce:	2200      	movs	r2, #0
 800f8d0:	602a      	str	r2, [r5, #0]
 800f8d2:	461a      	mov	r2, r3
 800f8d4:	f7f3 f8d5 	bl	8002a82 <_write>
 800f8d8:	1c43      	adds	r3, r0, #1
 800f8da:	d102      	bne.n	800f8e2 <_write_r+0x1e>
 800f8dc:	682b      	ldr	r3, [r5, #0]
 800f8de:	b103      	cbz	r3, 800f8e2 <_write_r+0x1e>
 800f8e0:	6023      	str	r3, [r4, #0]
 800f8e2:	bd38      	pop	{r3, r4, r5, pc}
 800f8e4:	200006c0 	.word	0x200006c0

0800f8e8 <__assert_func>:
 800f8e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f8ea:	4614      	mov	r4, r2
 800f8ec:	461a      	mov	r2, r3
 800f8ee:	4b09      	ldr	r3, [pc, #36]	; (800f914 <__assert_func+0x2c>)
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	4605      	mov	r5, r0
 800f8f4:	68d8      	ldr	r0, [r3, #12]
 800f8f6:	b14c      	cbz	r4, 800f90c <__assert_func+0x24>
 800f8f8:	4b07      	ldr	r3, [pc, #28]	; (800f918 <__assert_func+0x30>)
 800f8fa:	9100      	str	r1, [sp, #0]
 800f8fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f900:	4906      	ldr	r1, [pc, #24]	; (800f91c <__assert_func+0x34>)
 800f902:	462b      	mov	r3, r5
 800f904:	f000 f81e 	bl	800f944 <fiprintf>
 800f908:	f000 f89f 	bl	800fa4a <abort>
 800f90c:	4b04      	ldr	r3, [pc, #16]	; (800f920 <__assert_func+0x38>)
 800f90e:	461c      	mov	r4, r3
 800f910:	e7f3      	b.n	800f8fa <__assert_func+0x12>
 800f912:	bf00      	nop
 800f914:	20000040 	.word	0x20000040
 800f918:	0801031d 	.word	0x0801031d
 800f91c:	0801032a 	.word	0x0801032a
 800f920:	08010358 	.word	0x08010358

0800f924 <_close_r>:
 800f924:	b538      	push	{r3, r4, r5, lr}
 800f926:	4d06      	ldr	r5, [pc, #24]	; (800f940 <_close_r+0x1c>)
 800f928:	2300      	movs	r3, #0
 800f92a:	4604      	mov	r4, r0
 800f92c:	4608      	mov	r0, r1
 800f92e:	602b      	str	r3, [r5, #0]
 800f930:	f7f3 f8c3 	bl	8002aba <_close>
 800f934:	1c43      	adds	r3, r0, #1
 800f936:	d102      	bne.n	800f93e <_close_r+0x1a>
 800f938:	682b      	ldr	r3, [r5, #0]
 800f93a:	b103      	cbz	r3, 800f93e <_close_r+0x1a>
 800f93c:	6023      	str	r3, [r4, #0]
 800f93e:	bd38      	pop	{r3, r4, r5, pc}
 800f940:	200006c0 	.word	0x200006c0

0800f944 <fiprintf>:
 800f944:	b40e      	push	{r1, r2, r3}
 800f946:	b503      	push	{r0, r1, lr}
 800f948:	4601      	mov	r1, r0
 800f94a:	ab03      	add	r3, sp, #12
 800f94c:	4805      	ldr	r0, [pc, #20]	; (800f964 <fiprintf+0x20>)
 800f94e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f952:	6800      	ldr	r0, [r0, #0]
 800f954:	9301      	str	r3, [sp, #4]
 800f956:	f7ff fe31 	bl	800f5bc <_vfiprintf_r>
 800f95a:	b002      	add	sp, #8
 800f95c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f960:	b003      	add	sp, #12
 800f962:	4770      	bx	lr
 800f964:	20000040 	.word	0x20000040

0800f968 <_fstat_r>:
 800f968:	b538      	push	{r3, r4, r5, lr}
 800f96a:	4d07      	ldr	r5, [pc, #28]	; (800f988 <_fstat_r+0x20>)
 800f96c:	2300      	movs	r3, #0
 800f96e:	4604      	mov	r4, r0
 800f970:	4608      	mov	r0, r1
 800f972:	4611      	mov	r1, r2
 800f974:	602b      	str	r3, [r5, #0]
 800f976:	f7f3 f8ac 	bl	8002ad2 <_fstat>
 800f97a:	1c43      	adds	r3, r0, #1
 800f97c:	d102      	bne.n	800f984 <_fstat_r+0x1c>
 800f97e:	682b      	ldr	r3, [r5, #0]
 800f980:	b103      	cbz	r3, 800f984 <_fstat_r+0x1c>
 800f982:	6023      	str	r3, [r4, #0]
 800f984:	bd38      	pop	{r3, r4, r5, pc}
 800f986:	bf00      	nop
 800f988:	200006c0 	.word	0x200006c0

0800f98c <_isatty_r>:
 800f98c:	b538      	push	{r3, r4, r5, lr}
 800f98e:	4d06      	ldr	r5, [pc, #24]	; (800f9a8 <_isatty_r+0x1c>)
 800f990:	2300      	movs	r3, #0
 800f992:	4604      	mov	r4, r0
 800f994:	4608      	mov	r0, r1
 800f996:	602b      	str	r3, [r5, #0]
 800f998:	f7f3 f8ab 	bl	8002af2 <_isatty>
 800f99c:	1c43      	adds	r3, r0, #1
 800f99e:	d102      	bne.n	800f9a6 <_isatty_r+0x1a>
 800f9a0:	682b      	ldr	r3, [r5, #0]
 800f9a2:	b103      	cbz	r3, 800f9a6 <_isatty_r+0x1a>
 800f9a4:	6023      	str	r3, [r4, #0]
 800f9a6:	bd38      	pop	{r3, r4, r5, pc}
 800f9a8:	200006c0 	.word	0x200006c0

0800f9ac <_lseek_r>:
 800f9ac:	b538      	push	{r3, r4, r5, lr}
 800f9ae:	4d07      	ldr	r5, [pc, #28]	; (800f9cc <_lseek_r+0x20>)
 800f9b0:	4604      	mov	r4, r0
 800f9b2:	4608      	mov	r0, r1
 800f9b4:	4611      	mov	r1, r2
 800f9b6:	2200      	movs	r2, #0
 800f9b8:	602a      	str	r2, [r5, #0]
 800f9ba:	461a      	mov	r2, r3
 800f9bc:	f7f3 f8a4 	bl	8002b08 <_lseek>
 800f9c0:	1c43      	adds	r3, r0, #1
 800f9c2:	d102      	bne.n	800f9ca <_lseek_r+0x1e>
 800f9c4:	682b      	ldr	r3, [r5, #0]
 800f9c6:	b103      	cbz	r3, 800f9ca <_lseek_r+0x1e>
 800f9c8:	6023      	str	r3, [r4, #0]
 800f9ca:	bd38      	pop	{r3, r4, r5, pc}
 800f9cc:	200006c0 	.word	0x200006c0

0800f9d0 <__ascii_mbtowc>:
 800f9d0:	b082      	sub	sp, #8
 800f9d2:	b901      	cbnz	r1, 800f9d6 <__ascii_mbtowc+0x6>
 800f9d4:	a901      	add	r1, sp, #4
 800f9d6:	b142      	cbz	r2, 800f9ea <__ascii_mbtowc+0x1a>
 800f9d8:	b14b      	cbz	r3, 800f9ee <__ascii_mbtowc+0x1e>
 800f9da:	7813      	ldrb	r3, [r2, #0]
 800f9dc:	600b      	str	r3, [r1, #0]
 800f9de:	7812      	ldrb	r2, [r2, #0]
 800f9e0:	1e10      	subs	r0, r2, #0
 800f9e2:	bf18      	it	ne
 800f9e4:	2001      	movne	r0, #1
 800f9e6:	b002      	add	sp, #8
 800f9e8:	4770      	bx	lr
 800f9ea:	4610      	mov	r0, r2
 800f9ec:	e7fb      	b.n	800f9e6 <__ascii_mbtowc+0x16>
 800f9ee:	f06f 0001 	mvn.w	r0, #1
 800f9f2:	e7f8      	b.n	800f9e6 <__ascii_mbtowc+0x16>

0800f9f4 <__malloc_lock>:
 800f9f4:	4801      	ldr	r0, [pc, #4]	; (800f9fc <__malloc_lock+0x8>)
 800f9f6:	f7ff b8ce 	b.w	800eb96 <__retarget_lock_acquire_recursive>
 800f9fa:	bf00      	nop
 800f9fc:	200006b4 	.word	0x200006b4

0800fa00 <__malloc_unlock>:
 800fa00:	4801      	ldr	r0, [pc, #4]	; (800fa08 <__malloc_unlock+0x8>)
 800fa02:	f7ff b8c9 	b.w	800eb98 <__retarget_lock_release_recursive>
 800fa06:	bf00      	nop
 800fa08:	200006b4 	.word	0x200006b4

0800fa0c <_read_r>:
 800fa0c:	b538      	push	{r3, r4, r5, lr}
 800fa0e:	4d07      	ldr	r5, [pc, #28]	; (800fa2c <_read_r+0x20>)
 800fa10:	4604      	mov	r4, r0
 800fa12:	4608      	mov	r0, r1
 800fa14:	4611      	mov	r1, r2
 800fa16:	2200      	movs	r2, #0
 800fa18:	602a      	str	r2, [r5, #0]
 800fa1a:	461a      	mov	r2, r3
 800fa1c:	f7f3 f814 	bl	8002a48 <_read>
 800fa20:	1c43      	adds	r3, r0, #1
 800fa22:	d102      	bne.n	800fa2a <_read_r+0x1e>
 800fa24:	682b      	ldr	r3, [r5, #0]
 800fa26:	b103      	cbz	r3, 800fa2a <_read_r+0x1e>
 800fa28:	6023      	str	r3, [r4, #0]
 800fa2a:	bd38      	pop	{r3, r4, r5, pc}
 800fa2c:	200006c0 	.word	0x200006c0

0800fa30 <__ascii_wctomb>:
 800fa30:	b149      	cbz	r1, 800fa46 <__ascii_wctomb+0x16>
 800fa32:	2aff      	cmp	r2, #255	; 0xff
 800fa34:	bf85      	ittet	hi
 800fa36:	238a      	movhi	r3, #138	; 0x8a
 800fa38:	6003      	strhi	r3, [r0, #0]
 800fa3a:	700a      	strbls	r2, [r1, #0]
 800fa3c:	f04f 30ff 	movhi.w	r0, #4294967295
 800fa40:	bf98      	it	ls
 800fa42:	2001      	movls	r0, #1
 800fa44:	4770      	bx	lr
 800fa46:	4608      	mov	r0, r1
 800fa48:	4770      	bx	lr

0800fa4a <abort>:
 800fa4a:	b508      	push	{r3, lr}
 800fa4c:	2006      	movs	r0, #6
 800fa4e:	f000 f82b 	bl	800faa8 <raise>
 800fa52:	2001      	movs	r0, #1
 800fa54:	f7f2 ffee 	bl	8002a34 <_exit>

0800fa58 <_raise_r>:
 800fa58:	291f      	cmp	r1, #31
 800fa5a:	b538      	push	{r3, r4, r5, lr}
 800fa5c:	4604      	mov	r4, r0
 800fa5e:	460d      	mov	r5, r1
 800fa60:	d904      	bls.n	800fa6c <_raise_r+0x14>
 800fa62:	2316      	movs	r3, #22
 800fa64:	6003      	str	r3, [r0, #0]
 800fa66:	f04f 30ff 	mov.w	r0, #4294967295
 800fa6a:	bd38      	pop	{r3, r4, r5, pc}
 800fa6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fa6e:	b112      	cbz	r2, 800fa76 <_raise_r+0x1e>
 800fa70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fa74:	b94b      	cbnz	r3, 800fa8a <_raise_r+0x32>
 800fa76:	4620      	mov	r0, r4
 800fa78:	f000 f830 	bl	800fadc <_getpid_r>
 800fa7c:	462a      	mov	r2, r5
 800fa7e:	4601      	mov	r1, r0
 800fa80:	4620      	mov	r0, r4
 800fa82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa86:	f000 b817 	b.w	800fab8 <_kill_r>
 800fa8a:	2b01      	cmp	r3, #1
 800fa8c:	d00a      	beq.n	800faa4 <_raise_r+0x4c>
 800fa8e:	1c59      	adds	r1, r3, #1
 800fa90:	d103      	bne.n	800fa9a <_raise_r+0x42>
 800fa92:	2316      	movs	r3, #22
 800fa94:	6003      	str	r3, [r0, #0]
 800fa96:	2001      	movs	r0, #1
 800fa98:	e7e7      	b.n	800fa6a <_raise_r+0x12>
 800fa9a:	2400      	movs	r4, #0
 800fa9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800faa0:	4628      	mov	r0, r5
 800faa2:	4798      	blx	r3
 800faa4:	2000      	movs	r0, #0
 800faa6:	e7e0      	b.n	800fa6a <_raise_r+0x12>

0800faa8 <raise>:
 800faa8:	4b02      	ldr	r3, [pc, #8]	; (800fab4 <raise+0xc>)
 800faaa:	4601      	mov	r1, r0
 800faac:	6818      	ldr	r0, [r3, #0]
 800faae:	f7ff bfd3 	b.w	800fa58 <_raise_r>
 800fab2:	bf00      	nop
 800fab4:	20000040 	.word	0x20000040

0800fab8 <_kill_r>:
 800fab8:	b538      	push	{r3, r4, r5, lr}
 800faba:	4d07      	ldr	r5, [pc, #28]	; (800fad8 <_kill_r+0x20>)
 800fabc:	2300      	movs	r3, #0
 800fabe:	4604      	mov	r4, r0
 800fac0:	4608      	mov	r0, r1
 800fac2:	4611      	mov	r1, r2
 800fac4:	602b      	str	r3, [r5, #0]
 800fac6:	f7f2 ffa5 	bl	8002a14 <_kill>
 800faca:	1c43      	adds	r3, r0, #1
 800facc:	d102      	bne.n	800fad4 <_kill_r+0x1c>
 800face:	682b      	ldr	r3, [r5, #0]
 800fad0:	b103      	cbz	r3, 800fad4 <_kill_r+0x1c>
 800fad2:	6023      	str	r3, [r4, #0]
 800fad4:	bd38      	pop	{r3, r4, r5, pc}
 800fad6:	bf00      	nop
 800fad8:	200006c0 	.word	0x200006c0

0800fadc <_getpid_r>:
 800fadc:	f7f2 bf92 	b.w	8002a04 <_getpid>

0800fae0 <_init>:
 800fae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fae2:	bf00      	nop
 800fae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fae6:	bc08      	pop	{r3}
 800fae8:	469e      	mov	lr, r3
 800faea:	4770      	bx	lr

0800faec <_fini>:
 800faec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faee:	bf00      	nop
 800faf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800faf2:	bc08      	pop	{r3}
 800faf4:	469e      	mov	lr, r3
 800faf6:	4770      	bx	lr

0800faf8 <__stop_pop_veneer>:
 800faf8:	f85f f000 	ldr.w	pc, [pc]	; 800fafc <__stop_pop_veneer+0x4>
 800fafc:	0000016d 	.word	0x0000016d

0800fb00 <__set_frequency_hz_veneer>:
 800fb00:	f85f f000 	ldr.w	pc, [pc]	; 800fb04 <__set_frequency_hz_veneer+0x4>
 800fb04:	00000705 	.word	0x00000705

0800fb08 <__set_MW_power_veneer>:
 800fb08:	f85f f000 	ldr.w	pc, [pc]	; 800fb0c <__set_MW_power_veneer+0x4>
 800fb0c:	000003a3 	.word	0x000003a3

0800fb10 <__start_pop_veneer>:
 800fb10:	f85f f000 	ldr.w	pc, [pc]	; 800fb14 <__start_pop_veneer+0x4>
 800fb14:	000000bd 	.word	0x000000bd

0800fb18 <__timer_delay_veneer>:
 800fb18:	f85f f000 	ldr.w	pc, [pc]	; 800fb1c <__timer_delay_veneer+0x4>
 800fb1c:	00000061 	.word	0x00000061

0800fb20 <__init_synthesiser_veneer>:
 800fb20:	f85f f000 	ldr.w	pc, [pc]	; 800fb24 <__init_synthesiser_veneer+0x4>
 800fb24:	00000401 	.word	0x00000401

0800fb28 <__run_sweep_veneer>:
 800fb28:	f85f f000 	ldr.w	pc, [pc]	; 800fb2c <__run_sweep_veneer+0x4>
 800fb2c:	00000829 	.word	0x00000829

0800fb30 <__MW_frequency_toggle_veneer>:
 800fb30:	f85f f000 	ldr.w	pc, [pc]	; 800fb34 <__MW_frequency_toggle_veneer+0x4>
 800fb34:	00000915 	.word	0x00000915

0800fb38 <__set_aom_atten_veneer>:
 800fb38:	f85f f000 	ldr.w	pc, [pc]	; 800fb3c <__set_aom_atten_veneer+0x4>
 800fb3c:	000001e1 	.word	0x000001e1
