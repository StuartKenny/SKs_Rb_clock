
atomic_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .itcm         00001d38  00000000  08000298  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001b5a0  08001fd0  08001fd0  00021fd0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .user_flash   00000000  08100000  08100000  00050228  2**0
                  CONTENTS
  4 .rodata       00003c50  0801d570  0801d570  0003d570  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  080211c0  080211c0  000411c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  080211c8  080211c8  000411c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080211cc  080211cc  000411cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  080211d0  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000070dc  20000228  080213f8  00050228  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20007304  080213f8  00057304  2**0
                  ALLOC
 11 .lwip_sec     00044b83  30000000  30000000  00060000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00050228  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00050256  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003ac6e  00000000  00000000  00050299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007804  00000000  00000000  0008af07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002a28  00000000  00000000  00092710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000219f  00000000  00000000  00095138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00012508  00000000  00000000  000972d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004187c  00000000  00000000  000a97df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001a9834  00000000  00000000  000eb05b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000c35c  00000000  00000000  00294890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  002a0bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .itcm:

00000000 <is_telnet_initialised>:
	#endif
}

/** Returns 1 if the telnet link has been initialised and has not been subsequently closed.
  */
bool is_telnet_initialised(void) {
       0:	b480      	push	{r7}
       2:	af00      	add	r7, sp, #0
	return telnet_initialised;
       4:	4b03      	ldr	r3, [pc, #12]	; (14 <is_telnet_initialised+0x14>)
       6:	781b      	ldrb	r3, [r3, #0]
}
       8:	4618      	mov	r0, r3
       a:	46bd      	mov	sp, r7
       c:	f85d 7b04 	ldr.w	r7, [sp], #4
      10:	4770      	bx	lr
      12:	bf00      	nop
      14:	20000244 	.word	0x20000244

00000018 <init_ldc_comms>:
  return ret_err;
}

/* Initialise Ethernet comms with LDC501 */
void init_ldc_comms(void)
{
      18:	b580      	push	{r7, lr}
      1a:	af00      	add	r7, sp, #0
	ldc_tx("\r\n"); //return character
      1c:	480c      	ldr	r0, [pc, #48]	; (50 <init_ldc_comms+0x38>)
      1e:	f000 f827 	bl	70 <ldc_tx>
	ldc_tx("uloc1\r\n"); //unlock comms
      22:	480c      	ldr	r0, [pc, #48]	; (54 <init_ldc_comms+0x3c>)
      24:	f000 f824 	bl	70 <ldc_tx>
	ldc_tx("*idn?\r\n"); //request ID
      28:	480b      	ldr	r0, [pc, #44]	; (58 <init_ldc_comms+0x40>)
      2a:	f000 f821 	bl	70 <ldc_tx>
	//will then receive message: 220 Welcome DBG server!
	ldc_tx("TMOD1\r\n"); //Constant temperature mode
      2e:	480b      	ldr	r0, [pc, #44]	; (5c <init_ldc_comms+0x44>)
      30:	f000 f81e 	bl	70 <ldc_tx>
	ldc_tx("TEMP21.15\r\n"); //Set operating point of 21.15C
      34:	480a      	ldr	r0, [pc, #40]	; (60 <init_ldc_comms+0x48>)
      36:	f000 f81b 	bl	70 <ldc_tx>
	ldc_tx("TEON1\r\n"); //Turn TEC on
      3a:	480a      	ldr	r0, [pc, #40]	; (64 <init_ldc_comms+0x4c>)
      3c:	f000 f818 	bl	70 <ldc_tx>
	ldc_tx("SMOD0\r\n"); //LD constant current mode
      40:	4809      	ldr	r0, [pc, #36]	; (68 <init_ldc_comms+0x50>)
      42:	f000 f815 	bl	70 <ldc_tx>
	ldc_tx("SILD159.90\r\n"); //Set laser current to 159.9mA
      46:	4809      	ldr	r0, [pc, #36]	; (6c <init_ldc_comms+0x54>)
      48:	f000 f812 	bl	70 <ldc_tx>
}
      4c:	bf00      	nop
      4e:	bd80      	pop	{r7, pc}
      50:	0801d570 	.word	0x0801d570
      54:	0801d574 	.word	0x0801d574
      58:	0801d57c 	.word	0x0801d57c
      5c:	0801d584 	.word	0x0801d584
      60:	0801d58c 	.word	0x0801d58c
      64:	0801d598 	.word	0x0801d598
      68:	0801d5a0 	.word	0x0801d5a0
      6c:	0801d5a8 	.word	0x0801d5a8

00000070 <ldc_tx>:

/* Send a string to the LDC501 over telnet */
void ldc_tx(const char str[])
{
      70:	b590      	push	{r4, r7, lr}
      72:	b085      	sub	sp, #20
      74:	af00      	add	r7, sp, #0
      76:	6078      	str	r0, [r7, #4]
//	len = sprintf (buf, "SILD%.2f\n", laservalue);
	uint16_t len = strlen(str);
      78:	6878      	ldr	r0, [r7, #4]
      7a:	f001 fe45 	bl	1d08 <__strlen_veneer>
      7e:	4603      	mov	r3, r0
      80:	81fb      	strh	r3, [r7, #14]
	tcTx->p = pbuf_alloc(PBUF_TRANSPORT, len , PBUF_POOL); //allocate pbuf
      82:	4b12      	ldr	r3, [pc, #72]	; (cc <ldc_tx+0x5c>)
      84:	681c      	ldr	r4, [r3, #0]
      86:	89fb      	ldrh	r3, [r7, #14]
      88:	f44f 72c1 	mov.w	r2, #386	; 0x182
      8c:	4619      	mov	r1, r3
      8e:	2036      	movs	r0, #54	; 0x36
      90:	f001 fe2e 	bl	1cf0 <__pbuf_alloc_veneer>
      94:	4603      	mov	r3, r0
      96:	60a3      	str	r3, [r4, #8]
	pbuf_take(tcTx->p, (char*)str, len); // copy data to pbuf
      98:	4b0c      	ldr	r3, [pc, #48]	; (cc <ldc_tx+0x5c>)
      9a:	681b      	ldr	r3, [r3, #0]
      9c:	689b      	ldr	r3, [r3, #8]
      9e:	89fa      	ldrh	r2, [r7, #14]
      a0:	6879      	ldr	r1, [r7, #4]
      a2:	4618      	mov	r0, r3
      a4:	f001 fdec 	bl	1c80 <__pbuf_take_veneer>
	telnet_client_send(pcbTx, tcTx); //send it
      a8:	4b09      	ldr	r3, [pc, #36]	; (d0 <ldc_tx+0x60>)
      aa:	681b      	ldr	r3, [r3, #0]
      ac:	4a07      	ldr	r2, [pc, #28]	; (cc <ldc_tx+0x5c>)
      ae:	6812      	ldr	r2, [r2, #0]
      b0:	4611      	mov	r1, r2
      b2:	4618      	mov	r0, r3
      b4:	f000 f9dc 	bl	470 <telnet_client_send>
	pbuf_free(tcTx->p); //free up the pbuf
      b8:	4b04      	ldr	r3, [pc, #16]	; (cc <ldc_tx+0x5c>)
      ba:	681b      	ldr	r3, [r3, #0]
      bc:	689b      	ldr	r3, [r3, #8]
      be:	4618      	mov	r0, r3
      c0:	f001 fe26 	bl	1d10 <__pbuf_free_veneer>
}
      c4:	bf00      	nop
      c6:	3714      	adds	r7, #20
      c8:	46bd      	mov	sp, r7
      ca:	bd90      	pop	{r4, r7, pc}
      cc:	20000250 	.word	0x20000250
      d0:	20000254 	.word	0x20000254

000000d4 <one_off>:
//	if (check_timer(MW_TIMER) < 1000000) return(false); //Still waiting
//	stop_timer(MW_TIMER);
//
//}

void one_off (void) {
      d4:	b590      	push	{r4, r7, lr}
      d6:	b0a1      	sub	sp, #132	; 0x84
      d8:	af00      	add	r7, sp, #0
	char buf[100];
	uint8_t counter = 0;
      da:	2300      	movs	r3, #0
      dc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	/* Prepare the first message to send to the server */
	int len = sprintf (buf, "Sending telnet_client Message %d\n\0", counter);
      e0:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
      e4:	f107 0310 	add.w	r3, r7, #16
      e8:	494a      	ldr	r1, [pc, #296]	; (214 <_Min_Heap_Size+0x14>)
      ea:	4618      	mov	r0, r3
      ec:	f001 fde0 	bl	1cb0 <__sprintf_veneer>
      f0:	67b8      	str	r0, [r7, #120]	; 0x78

	/* allocate pbuf */
	tcTx->p = pbuf_alloc(PBUF_TRANSPORT, len , PBUF_POOL);
      f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
      f4:	b29b      	uxth	r3, r3
      f6:	4a48      	ldr	r2, [pc, #288]	; (218 <_Min_Heap_Size+0x18>)
      f8:	6814      	ldr	r4, [r2, #0]
      fa:	f44f 72c1 	mov.w	r2, #386	; 0x182
      fe:	4619      	mov	r1, r3
     100:	2036      	movs	r0, #54	; 0x36
     102:	f001 fdf5 	bl	1cf0 <__pbuf_alloc_veneer>
     106:	4603      	mov	r3, r0
     108:	60a3      	str	r3, [r4, #8]
	/* copy data to pbuf */
	pbuf_take(tcTx->p, (char*)buf, len);
     10a:	4b43      	ldr	r3, [pc, #268]	; (218 <_Min_Heap_Size+0x18>)
     10c:	681b      	ldr	r3, [r3, #0]
     10e:	689b      	ldr	r3, [r3, #8]
     110:	6fba      	ldr	r2, [r7, #120]	; 0x78
     112:	b292      	uxth	r2, r2
     114:	f107 0110 	add.w	r1, r7, #16
     118:	4618      	mov	r0, r3
     11a:	f001 fdb1 	bl	1c80 <__pbuf_take_veneer>
	telnet_client_send(pcbTx, tcTx);
     11e:	4b3f      	ldr	r3, [pc, #252]	; (21c <_Min_Heap_Size+0x1c>)
     120:	681b      	ldr	r3, [r3, #0]
     122:	4a3d      	ldr	r2, [pc, #244]	; (218 <_Min_Heap_Size+0x18>)
     124:	6812      	ldr	r2, [r2, #0]
     126:	4611      	mov	r1, r2
     128:	4618      	mov	r0, r3
     12a:	f000 f9a1 	bl	470 <telnet_client_send>
	pbuf_free(tcTx->p);
     12e:	4b3a      	ldr	r3, [pc, #232]	; (218 <_Min_Heap_Size+0x18>)
     130:	681b      	ldr	r3, [r3, #0]
     132:	689b      	ldr	r3, [r3, #8]
     134:	4618      	mov	r0, r3
     136:	f001 fdeb 	bl	1d10 <__pbuf_free_veneer>

	unsigned char tmp1[10] = {83, 116, 117, 97, 114, 116, 10}; //Stuart NEWLINE
     13a:	4a39      	ldr	r2, [pc, #228]	; (220 <_Min_Heap_Size+0x20>)
     13c:	1d3b      	adds	r3, r7, #4
     13e:	e892 0003 	ldmia.w	r2, {r0, r1}
     142:	e883 0003 	stmia.w	r3, {r0, r1}
     146:	2300      	movs	r3, #0
     148:	81bb      	strh	r3, [r7, #12]
	len = sprintf (buf, "%s", tmp1);
     14a:	1d3a      	adds	r2, r7, #4
     14c:	f107 0310 	add.w	r3, r7, #16
     150:	4934      	ldr	r1, [pc, #208]	; (224 <_Min_Heap_Size+0x24>)
     152:	4618      	mov	r0, r3
     154:	f001 fdac 	bl	1cb0 <__sprintf_veneer>
     158:	67b8      	str	r0, [r7, #120]	; 0x78
	tcTx->p = pbuf_alloc(PBUF_TRANSPORT, len , PBUF_POOL); //allocate pbuf
     15a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
     15c:	b29b      	uxth	r3, r3
     15e:	4a2e      	ldr	r2, [pc, #184]	; (218 <_Min_Heap_Size+0x18>)
     160:	6814      	ldr	r4, [r2, #0]
     162:	f44f 72c1 	mov.w	r2, #386	; 0x182
     166:	4619      	mov	r1, r3
     168:	2036      	movs	r0, #54	; 0x36
     16a:	f001 fdc1 	bl	1cf0 <__pbuf_alloc_veneer>
     16e:	4603      	mov	r3, r0
     170:	60a3      	str	r3, [r4, #8]
	pbuf_take(tcTx->p, (char*)buf, len); // copy data to pbuf
     172:	4b29      	ldr	r3, [pc, #164]	; (218 <_Min_Heap_Size+0x18>)
     174:	681b      	ldr	r3, [r3, #0]
     176:	689b      	ldr	r3, [r3, #8]
     178:	6fba      	ldr	r2, [r7, #120]	; 0x78
     17a:	b292      	uxth	r2, r2
     17c:	f107 0110 	add.w	r1, r7, #16
     180:	4618      	mov	r0, r3
     182:	f001 fd7d 	bl	1c80 <__pbuf_take_veneer>
	telnet_client_send(pcbTx, tcTx); //send it
     186:	4b25      	ldr	r3, [pc, #148]	; (21c <_Min_Heap_Size+0x1c>)
     188:	681b      	ldr	r3, [r3, #0]
     18a:	4a23      	ldr	r2, [pc, #140]	; (218 <_Min_Heap_Size+0x18>)
     18c:	6812      	ldr	r2, [r2, #0]
     18e:	4611      	mov	r1, r2
     190:	4618      	mov	r0, r3
     192:	f000 f96d 	bl	470 <telnet_client_send>
	pbuf_free(tcTx->p); //free up the pbuf
     196:	4b20      	ldr	r3, [pc, #128]	; (218 <_Min_Heap_Size+0x18>)
     198:	681b      	ldr	r3, [r3, #0]
     19a:	689b      	ldr	r3, [r3, #8]
     19c:	4618      	mov	r0, r3
     19e:	f001 fdb7 	bl	1d10 <__pbuf_free_veneer>

	float laservalue = 160.56789;
     1a2:	4b21      	ldr	r3, [pc, #132]	; (228 <_Min_Heap_Size+0x28>)
     1a4:	677b      	str	r3, [r7, #116]	; 0x74
	len = sprintf (buf, "SILD%.2f\n", laservalue);
     1a6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
     1aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
     1ae:	f107 0010 	add.w	r0, r7, #16
     1b2:	ec53 2b17 	vmov	r2, r3, d7
     1b6:	491d      	ldr	r1, [pc, #116]	; (22c <_Min_Heap_Size+0x2c>)
     1b8:	f001 fd7a 	bl	1cb0 <__sprintf_veneer>
     1bc:	67b8      	str	r0, [r7, #120]	; 0x78
	tcTx->p = pbuf_alloc(PBUF_TRANSPORT, len , PBUF_POOL); //allocate pbuf
     1be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
     1c0:	b29b      	uxth	r3, r3
     1c2:	4a15      	ldr	r2, [pc, #84]	; (218 <_Min_Heap_Size+0x18>)
     1c4:	6814      	ldr	r4, [r2, #0]
     1c6:	f44f 72c1 	mov.w	r2, #386	; 0x182
     1ca:	4619      	mov	r1, r3
     1cc:	2036      	movs	r0, #54	; 0x36
     1ce:	f001 fd8f 	bl	1cf0 <__pbuf_alloc_veneer>
     1d2:	4603      	mov	r3, r0
     1d4:	60a3      	str	r3, [r4, #8]
	pbuf_take(tcTx->p, (char*)buf, len); // copy data to pbuf
     1d6:	4b10      	ldr	r3, [pc, #64]	; (218 <_Min_Heap_Size+0x18>)
     1d8:	681b      	ldr	r3, [r3, #0]
     1da:	689b      	ldr	r3, [r3, #8]
     1dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
     1de:	b292      	uxth	r2, r2
     1e0:	f107 0110 	add.w	r1, r7, #16
     1e4:	4618      	mov	r0, r3
     1e6:	f001 fd4b 	bl	1c80 <__pbuf_take_veneer>
	telnet_client_send(pcbTx, tcTx); //send it
     1ea:	4b0c      	ldr	r3, [pc, #48]	; (21c <_Min_Heap_Size+0x1c>)
     1ec:	681b      	ldr	r3, [r3, #0]
     1ee:	4a0a      	ldr	r2, [pc, #40]	; (218 <_Min_Heap_Size+0x18>)
     1f0:	6812      	ldr	r2, [r2, #0]
     1f2:	4611      	mov	r1, r2
     1f4:	4618      	mov	r0, r3
     1f6:	f000 f93b 	bl	470 <telnet_client_send>
	pbuf_free(tcTx->p); //free up the pbuf
     1fa:	4b07      	ldr	r3, [pc, #28]	; (218 <_Min_Heap_Size+0x18>)
     1fc:	681b      	ldr	r3, [r3, #0]
     1fe:	689b      	ldr	r3, [r3, #8]
     200:	4618      	mov	r0, r3
     202:	f001 fd85 	bl	1d10 <__pbuf_free_veneer>

//	const char string = "Happy Wednesday";
//	ldc_tx(&string, sizeof(string));

	ldc_tx("Happy Wednesday\r\n"); //works and is processed as newline
     206:	480a      	ldr	r0, [pc, #40]	; (230 <_Min_Heap_Size+0x30>)
     208:	f7ff ff32 	bl	70 <ldc_tx>
}
     20c:	bf00      	nop
     20e:	3784      	adds	r7, #132	; 0x84
     210:	46bd      	mov	sp, r7
     212:	bd90      	pop	{r4, r7, pc}
     214:	0801d5b8 	.word	0x0801d5b8
     218:	20000250 	.word	0x20000250
     21c:	20000254 	.word	0x20000254
     220:	0801d600 	.word	0x0801d600
     224:	0801d5dc 	.word	0x0801d5dc
     228:	43209161 	.word	0x43209161
     22c:	0801d5e0 	.word	0x0801d5e0
     230:	0801d5ec 	.word	0x0801d5ec

00000234 <telnet_client_connected>:
{
     234:	b580      	push	{r7, lr}
     236:	b086      	sub	sp, #24
     238:	af00      	add	r7, sp, #0
     23a:	60f8      	str	r0, [r7, #12]
     23c:	60b9      	str	r1, [r7, #8]
     23e:	4613      	mov	r3, r2
     240:	71fb      	strb	r3, [r7, #7]
	printf("[Telnet Client] telnet_client_connected function called.\n\r");
     242:	481f      	ldr	r0, [pc, #124]	; (2c0 <telnet_client_connected+0x8c>)
     244:	f001 fd5c 	bl	1d00 <__printf_veneer>
  tc = (struct telnet_client_struct *)mem_malloc(sizeof(struct telnet_client_struct));
     248:	200c      	movs	r0, #12
     24a:	f001 fd21 	bl	1c90 <__mem_malloc_veneer>
     24e:	6138      	str	r0, [r7, #16]
  if (tc != NULL)
     250:	693b      	ldr	r3, [r7, #16]
     252:	2b00      	cmp	r3, #0
     254:	d025      	beq.n	2a2 <telnet_client_connected+0x6e>
    tc->state = TC_CONNECTED;
     256:	693b      	ldr	r3, [r7, #16]
     258:	2201      	movs	r2, #1
     25a:	701a      	strb	r2, [r3, #0]
    tc->pcb = newpcb;
     25c:	693b      	ldr	r3, [r7, #16]
     25e:	68ba      	ldr	r2, [r7, #8]
     260:	605a      	str	r2, [r3, #4]
    tc->retries = 0;
     262:	693b      	ldr	r3, [r7, #16]
     264:	2200      	movs	r2, #0
     266:	705a      	strb	r2, [r3, #1]
    tc->p = NULL;
     268:	693b      	ldr	r3, [r7, #16]
     26a:	2200      	movs	r2, #0
     26c:	609a      	str	r2, [r3, #8]
    tcp_arg(newpcb, tc);
     26e:	6939      	ldr	r1, [r7, #16]
     270:	68b8      	ldr	r0, [r7, #8]
     272:	f001 fd35 	bl	1ce0 <__tcp_arg_veneer>
    tcp_recv(newpcb, telnet_client_recv);
     276:	4913      	ldr	r1, [pc, #76]	; (2c4 <telnet_client_connected+0x90>)
     278:	68b8      	ldr	r0, [r7, #8]
     27a:	f001 fcf1 	bl	1c60 <__tcp_recv_veneer>
    tcp_poll(newpcb, telnet_client_poll, 0);
     27e:	2200      	movs	r2, #0
     280:	4911      	ldr	r1, [pc, #68]	; (2c8 <telnet_client_connected+0x94>)
     282:	68b8      	ldr	r0, [r7, #8]
     284:	f001 fce8 	bl	1c58 <__tcp_poll_veneer>
    tcp_sent(newpcb, telnet_client_sent);
     288:	4910      	ldr	r1, [pc, #64]	; (2cc <telnet_client_connected+0x98>)
     28a:	68b8      	ldr	r0, [r7, #8]
     28c:	f001 fd04 	bl	1c98 <__tcp_sent_veneer>
		printf("[Telnet Client] Successful connection.\n\r");
     290:	480f      	ldr	r0, [pc, #60]	; (2d0 <telnet_client_connected+0x9c>)
     292:	f001 fd35 	bl	1d00 <__printf_veneer>
	telnet_initialised = 1;
     296:	4b0f      	ldr	r3, [pc, #60]	; (2d4 <telnet_client_connected+0xa0>)
     298:	2201      	movs	r2, #1
     29a:	701a      	strb	r2, [r3, #0]
    ret_err = ERR_OK;
     29c:	2300      	movs	r3, #0
     29e:	75fb      	strb	r3, [r7, #23]
     2a0:	e008      	b.n	2b4 <telnet_client_connected+0x80>
    telnet_client_connection_close(newpcb, tc);
     2a2:	6939      	ldr	r1, [r7, #16]
     2a4:	68b8      	ldr	r0, [r7, #8]
     2a6:	f000 f937 	bl	518 <telnet_client_connection_close>
		printf("[Telnet Client] Connection closed due to memory error.\n\r");
     2aa:	480b      	ldr	r0, [pc, #44]	; (2d8 <telnet_client_connected+0xa4>)
     2ac:	f001 fd28 	bl	1d00 <__printf_veneer>
    ret_err = ERR_MEM;
     2b0:	23ff      	movs	r3, #255	; 0xff
     2b2:	75fb      	strb	r3, [r7, #23]
  return ret_err;
     2b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
     2b8:	4618      	mov	r0, r3
     2ba:	3718      	adds	r7, #24
     2bc:	46bd      	mov	sp, r7
     2be:	bd80      	pop	{r7, pc}
     2c0:	0801d60c 	.word	0x0801d60c
     2c4:	000002dd 	.word	0x000002dd
     2c8:	000003e5 	.word	0x000003e5
     2cc:	0000042d 	.word	0x0000042d
     2d0:	0801d648 	.word	0x0801d648
     2d4:	20000244 	.word	0x20000244
     2d8:	0801d674 	.word	0x0801d674

000002dc <telnet_client_recv>:

/** This callback is called, when the client receives some data from the server
 * if the data received is valid, we will handle the data in the client handle function
  */
static err_t telnet_client_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
     2dc:	b580      	push	{r7, lr}
     2de:	b086      	sub	sp, #24
     2e0:	af00      	add	r7, sp, #0
     2e2:	60f8      	str	r0, [r7, #12]
     2e4:	60b9      	str	r1, [r7, #8]
     2e6:	607a      	str	r2, [r7, #4]
     2e8:	70fb      	strb	r3, [r7, #3]
  #ifdef TELNET_DEBUG
    printf("[Telnet Client] Received data from server.\n\r");
     2ea:	4839      	ldr	r0, [pc, #228]	; (3d0 <telnet_client_recv+0xf4>)
     2ec:	f001 fd08 	bl	1d00 <__printf_veneer>
  #endif
  struct telnet_client_struct *tc;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
     2f0:	68fb      	ldr	r3, [r7, #12]
     2f2:	2b00      	cmp	r3, #0
     2f4:	d106      	bne.n	304 <telnet_client_recv+0x28>
     2f6:	4b37      	ldr	r3, [pc, #220]	; (3d4 <telnet_client_recv+0xf8>)
     2f8:	f44f 72c0 	mov.w	r2, #384	; 0x180
     2fc:	4936      	ldr	r1, [pc, #216]	; (3d8 <telnet_client_recv+0xfc>)
     2fe:	4837      	ldr	r0, [pc, #220]	; (3dc <telnet_client_recv+0x100>)
     300:	f001 fcfe 	bl	1d00 <__printf_veneer>

  tc = (struct telnet_client_struct *)arg;
     304:	68fb      	ldr	r3, [r7, #12]
     306:	613b      	str	r3, [r7, #16]

  /* if we receive an empty tcp frame from server => close connection */
  if (p == NULL)
     308:	687b      	ldr	r3, [r7, #4]
     30a:	2b00      	cmp	r3, #0
     30c:	d10d      	bne.n	32a <telnet_client_recv+0x4e>
  {
    /* remote host closed connection */
    tc->state = TC_CLOSING;
     30e:	693b      	ldr	r3, [r7, #16]
     310:	2203      	movs	r2, #3
     312:	701a      	strb	r2, [r3, #0]
    if(tc->p == NULL)
     314:	693b      	ldr	r3, [r7, #16]
     316:	689b      	ldr	r3, [r3, #8]
     318:	2b00      	cmp	r3, #0
     31a:	d103      	bne.n	324 <telnet_client_recv+0x48>
    {
       /* we're done sending, close connection */
       telnet_client_connection_close(tpcb, tc);
     31c:	6939      	ldr	r1, [r7, #16]
     31e:	68b8      	ldr	r0, [r7, #8]
     320:	f000 f8fa 	bl	518 <telnet_client_connection_close>
//      tcp_sent(tpcb, telnet_client_sent);

      /* send remaining data*/
//      telnet_client_send(tpcb, tc);
    }
    ret_err = ERR_OK;
     324:	2300      	movs	r3, #0
     326:	75fb      	strb	r3, [r7, #23]
     328:	e04b      	b.n	3c2 <telnet_client_recv+0xe6>
  }
  /* else : a non empty frame was received from server but for some reason err != ERR_OK */
  else if(err != ERR_OK)
     32a:	f997 3003 	ldrsb.w	r3, [r7, #3]
     32e:	2b00      	cmp	r3, #0
     330:	d00b      	beq.n	34a <telnet_client_recv+0x6e>
  {
    /* free received pbuf*/
    if (p != NULL)
     332:	687b      	ldr	r3, [r7, #4]
     334:	2b00      	cmp	r3, #0
     336:	d005      	beq.n	344 <telnet_client_recv+0x68>
    {
      tc->p = NULL;
     338:	693b      	ldr	r3, [r7, #16]
     33a:	2200      	movs	r2, #0
     33c:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
     33e:	6878      	ldr	r0, [r7, #4]
     340:	f001 fce6 	bl	1d10 <__pbuf_free_veneer>
    }
    ret_err = err;
     344:	78fb      	ldrb	r3, [r7, #3]
     346:	75fb      	strb	r3, [r7, #23]
     348:	e03b      	b.n	3c2 <telnet_client_recv+0xe6>
  }
  else if(tc->state == TC_CONNECTED)
     34a:	693b      	ldr	r3, [r7, #16]
     34c:	781b      	ldrb	r3, [r3, #0]
     34e:	2b01      	cmp	r3, #1
     350:	d116      	bne.n	380 <telnet_client_recv+0xa4>
  {
   /* store reference to incoming pbuf (chain) */
    tc->p = p;
     352:	693b      	ldr	r3, [r7, #16]
     354:	687a      	ldr	r2, [r7, #4]
     356:	609a      	str	r2, [r3, #8]
    // tcp_sent has already been initialized in the beginning.
//    /* initialize LwIP tcp_sent callback function */
//    tcp_sent(tpcb, telnet_client_sent);

    /* Acknowledge the received data */
    tcp_recved(tpcb, p->tot_len);
     358:	687b      	ldr	r3, [r7, #4]
     35a:	891b      	ldrh	r3, [r3, #8]
     35c:	4619      	mov	r1, r3
     35e:	68b8      	ldr	r0, [r7, #8]
     360:	f001 fc6e 	bl	1c40 <__tcp_recved_veneer>
    #ifdef TELNET_DEBUG
      printf("[Telnet Client] Acknowledging received data.\n\r");
     364:	481e      	ldr	r0, [pc, #120]	; (3e0 <telnet_client_recv+0x104>)
     366:	f001 fccb 	bl	1d00 <__printf_veneer>
    #endif

    /* handle the received data */
//    example_client_handle(tpcb, tc);
    telnet_client_handle(tpcb, tc, p);
     36a:	687a      	ldr	r2, [r7, #4]
     36c:	6939      	ldr	r1, [r7, #16]
     36e:	68b8      	ldr	r0, [r7, #8]
     370:	f000 f93e 	bl	5f0 <telnet_client_handle>

    pbuf_free(p);
     374:	6878      	ldr	r0, [r7, #4]
     376:	f001 fccb 	bl	1d10 <__pbuf_free_veneer>

    ret_err = ERR_OK;
     37a:	2300      	movs	r3, #0
     37c:	75fb      	strb	r3, [r7, #23]
     37e:	e020      	b.n	3c2 <telnet_client_recv+0xe6>
  }
  else if(tc->state == TC_CLOSING)
     380:	693b      	ldr	r3, [r7, #16]
     382:	781b      	ldrb	r3, [r3, #0]
     384:	2b03      	cmp	r3, #3
     386:	d10e      	bne.n	3a6 <telnet_client_recv+0xca>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
     388:	687b      	ldr	r3, [r7, #4]
     38a:	891b      	ldrh	r3, [r3, #8]
     38c:	4619      	mov	r1, r3
     38e:	68b8      	ldr	r0, [r7, #8]
     390:	f001 fc56 	bl	1c40 <__tcp_recved_veneer>
    tc->p = NULL;
     394:	693b      	ldr	r3, [r7, #16]
     396:	2200      	movs	r2, #0
     398:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
     39a:	6878      	ldr	r0, [r7, #4]
     39c:	f001 fcb8 	bl	1d10 <__pbuf_free_veneer>
    ret_err = ERR_OK;
     3a0:	2300      	movs	r3, #0
     3a2:	75fb      	strb	r3, [r7, #23]
     3a4:	e00d      	b.n	3c2 <telnet_client_recv+0xe6>
  }
  else
  {
    /* unknown tc->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
     3a6:	687b      	ldr	r3, [r7, #4]
     3a8:	891b      	ldrh	r3, [r3, #8]
     3aa:	4619      	mov	r1, r3
     3ac:	68b8      	ldr	r0, [r7, #8]
     3ae:	f001 fc47 	bl	1c40 <__tcp_recved_veneer>
    tc->p = NULL;
     3b2:	693b      	ldr	r3, [r7, #16]
     3b4:	2200      	movs	r2, #0
     3b6:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
     3b8:	6878      	ldr	r0, [r7, #4]
     3ba:	f001 fca9 	bl	1d10 <__pbuf_free_veneer>
    ret_err = ERR_OK;
     3be:	2300      	movs	r3, #0
     3c0:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
     3c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
     3c6:	4618      	mov	r0, r3
     3c8:	3718      	adds	r7, #24
     3ca:	46bd      	mov	sp, r7
     3cc:	bd80      	pop	{r7, pc}
     3ce:	bf00      	nop
     3d0:	0801d6b0 	.word	0x0801d6b0
     3d4:	0801d6e0 	.word	0x0801d6e0
     3d8:	0801d6f8 	.word	0x0801d6f8
     3dc:	0801d704 	.word	0x0801d704
     3e0:	0801d72c 	.word	0x0801d72c

000003e4 <telnet_client_poll>:


static err_t telnet_client_poll(void *arg, struct tcp_pcb *tpcb)
{
     3e4:	b580      	push	{r7, lr}
     3e6:	b084      	sub	sp, #16
     3e8:	af00      	add	r7, sp, #0
     3ea:	6078      	str	r0, [r7, #4]
     3ec:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct telnet_client_struct *tc;

  tc = (struct telnet_client_struct *)arg;
     3ee:	687b      	ldr	r3, [r7, #4]
     3f0:	60bb      	str	r3, [r7, #8]
  if (tc != NULL)
     3f2:	68bb      	ldr	r3, [r7, #8]
     3f4:	2b00      	cmp	r3, #0
     3f6:	d00e      	beq.n	416 <_Min_Stack_Size+0x16>
  {
    if (tc->p != NULL)
     3f8:	68bb      	ldr	r3, [r7, #8]
     3fa:	689b      	ldr	r3, [r3, #8]
     3fc:	2b00      	cmp	r3, #0
     3fe:	d107      	bne.n	410 <_Min_Stack_Size+0x10>
//      telnet_client_send(tpcb, tc);
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(tc->state == TC_CLOSING)
     400:	68bb      	ldr	r3, [r7, #8]
     402:	781b      	ldrb	r3, [r3, #0]
     404:	2b03      	cmp	r3, #3
     406:	d103      	bne.n	410 <_Min_Stack_Size+0x10>
      {
        /*  close tcp connection */
        telnet_client_connection_close(tpcb, tc);
     408:	68b9      	ldr	r1, [r7, #8]
     40a:	6838      	ldr	r0, [r7, #0]
     40c:	f000 f884 	bl	518 <telnet_client_connection_close>
      }
    }
    ret_err = ERR_OK;
     410:	2300      	movs	r3, #0
     412:	73fb      	strb	r3, [r7, #15]
     414:	e004      	b.n	420 <_Min_Stack_Size+0x20>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
     416:	6838      	ldr	r0, [r7, #0]
     418:	f001 fc2e 	bl	1c78 <__tcp_abort_veneer>
    ret_err = ERR_ABRT;
     41c:	23f3      	movs	r3, #243	; 0xf3
     41e:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
     420:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
     424:	4618      	mov	r0, r3
     426:	3710      	adds	r7, #16
     428:	46bd      	mov	sp, r7
     42a:	bd80      	pop	{r7, pc}

0000042c <telnet_client_sent>:

/** This callback is called, when the server acknowledges the data sent by the client
 * If there is no more data left to sent, we will simply close the connection
  */
static err_t telnet_client_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
     42c:	b580      	push	{r7, lr}
     42e:	b086      	sub	sp, #24
     430:	af00      	add	r7, sp, #0
     432:	60f8      	str	r0, [r7, #12]
     434:	60b9      	str	r1, [r7, #8]
     436:	4613      	mov	r3, r2
     438:	80fb      	strh	r3, [r7, #6]
#ifdef TELNET_DEBUG
  printf("[Telnet Client] Server has acknowledged data sent by client.\n\r");
     43a:	480c      	ldr	r0, [pc, #48]	; (46c <telnet_client_sent+0x40>)
     43c:	f001 fc60 	bl	1d00 <__printf_veneer>
#endif
  struct telnet_client_struct *tc;

  LWIP_UNUSED_ARG(len);

  tc = (struct telnet_client_struct *)arg;
     440:	68fb      	ldr	r3, [r7, #12]
     442:	617b      	str	r3, [r7, #20]
  tc->retries = 0;
     444:	697b      	ldr	r3, [r7, #20]
     446:	2200      	movs	r2, #0
     448:	705a      	strb	r2, [r3, #1]

  if(tc->p != NULL)
     44a:	697b      	ldr	r3, [r7, #20]
     44c:	689b      	ldr	r3, [r3, #8]
     44e:	2b00      	cmp	r3, #0
     450:	d107      	bne.n	462 <telnet_client_sent+0x36>
//    telnet_client_send(tpcb, tc);
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(tc->state == TC_CLOSING)
     452:	697b      	ldr	r3, [r7, #20]
     454:	781b      	ldrb	r3, [r3, #0]
     456:	2b03      	cmp	r3, #3
     458:	d103      	bne.n	462 <telnet_client_sent+0x36>
      telnet_client_connection_close(tpcb, tc);
     45a:	6979      	ldr	r1, [r7, #20]
     45c:	68b8      	ldr	r0, [r7, #8]
     45e:	f000 f85b 	bl	518 <telnet_client_connection_close>
  }
  return ERR_OK;
     462:	2300      	movs	r3, #0
}
     464:	4618      	mov	r0, r3
     466:	3718      	adds	r7, #24
     468:	46bd      	mov	sp, r7
     46a:	bd80      	pop	{r7, pc}
     46c:	0801d75c 	.word	0x0801d75c

00000470 <telnet_client_send>:


/** A function to send the data to the server
  */
static void telnet_client_send(struct tcp_pcb *tpcb, struct telnet_client_struct *tc)
{
     470:	b580      	push	{r7, lr}
     472:	b086      	sub	sp, #24
     474:	af00      	add	r7, sp, #0
     476:	6078      	str	r0, [r7, #4]
     478:	6039      	str	r1, [r7, #0]
  #ifdef TELNET_DEBUG
    printf("[Telnet Client] Sending data to server.\n\r");
     47a:	4826      	ldr	r0, [pc, #152]	; (514 <telnet_client_send+0xa4>)
     47c:	f001 fc40 	bl	1d00 <__printf_veneer>
  #endif
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
     480:	2300      	movs	r3, #0
     482:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
     484:	e031      	b.n	4ea <telnet_client_send+0x7a>
         (tc->p != NULL) &&
         (tc->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from tc structure */
    ptr = tc->p;
     486:	683b      	ldr	r3, [r7, #0]
     488:	689b      	ldr	r3, [r3, #8]
     48a:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
     48c:	693b      	ldr	r3, [r7, #16]
     48e:	6859      	ldr	r1, [r3, #4]
     490:	693b      	ldr	r3, [r7, #16]
     492:	895a      	ldrh	r2, [r3, #10]
     494:	2301      	movs	r3, #1
     496:	6878      	ldr	r0, [r7, #4]
     498:	f001 fbea 	bl	1c70 <__tcp_write_veneer>
     49c:	4603      	mov	r3, r0
     49e:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
     4a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
     4a4:	2b00      	cmp	r3, #0
     4a6:	d118      	bne.n	4da <telnet_client_send+0x6a>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
     4a8:	693b      	ldr	r3, [r7, #16]
     4aa:	895b      	ldrh	r3, [r3, #10]
     4ac:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      tc->p = ptr->next;
     4ae:	693b      	ldr	r3, [r7, #16]
     4b0:	681a      	ldr	r2, [r3, #0]
     4b2:	683b      	ldr	r3, [r7, #0]
     4b4:	609a      	str	r2, [r3, #8]

      if(tc->p != NULL)
     4b6:	683b      	ldr	r3, [r7, #0]
     4b8:	689b      	ldr	r3, [r3, #8]
     4ba:	2b00      	cmp	r3, #0
     4bc:	d004      	beq.n	4c8 <telnet_client_send+0x58>
      {
        /* increment reference count for tc->p */
        pbuf_ref(tc->p);
     4be:	683b      	ldr	r3, [r7, #0]
     4c0:	689b      	ldr	r3, [r3, #8]
     4c2:	4618      	mov	r0, r3
     4c4:	f001 fbc4 	bl	1c50 <__pbuf_ref_veneer>

     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
     4c8:	6938      	ldr	r0, [r7, #16]
     4ca:	f001 fc21 	bl	1d10 <__pbuf_free_veneer>
     4ce:	4603      	mov	r3, r0
     4d0:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
     4d2:	7b7b      	ldrb	r3, [r7, #13]
     4d4:	2b00      	cmp	r3, #0
     4d6:	d0f7      	beq.n	4c8 <telnet_client_send+0x58>
     4d8:	e007      	b.n	4ea <telnet_client_send+0x7a>
     /* we can read more data now */
//     tcp_recved(tpcb, plen);
   }
   else if(wr_err == ERR_MEM)
     4da:	f997 3017 	ldrsb.w	r3, [r7, #23]
     4de:	f1b3 3fff 	cmp.w	r3, #4294967295
     4e2:	d102      	bne.n	4ea <telnet_client_send+0x7a>
   {
      /* we are low on memory, try later / harder, defer to poll */
     tc->p = ptr;
     4e4:	683b      	ldr	r3, [r7, #0]
     4e6:	693a      	ldr	r2, [r7, #16]
     4e8:	609a      	str	r2, [r3, #8]
         (tc->p != NULL) &&
     4ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
     4ee:	2b00      	cmp	r3, #0
     4f0:	d10b      	bne.n	50a <telnet_client_send+0x9a>
     4f2:	683b      	ldr	r3, [r7, #0]
     4f4:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
     4f6:	2b00      	cmp	r3, #0
     4f8:	d007      	beq.n	50a <telnet_client_send+0x9a>
         (tc->p->len <= tcp_sndbuf(tpcb)))
     4fa:	683b      	ldr	r3, [r7, #0]
     4fc:	689b      	ldr	r3, [r3, #8]
     4fe:	895a      	ldrh	r2, [r3, #10]
     500:	687b      	ldr	r3, [r7, #4]
     502:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (tc->p != NULL) &&
     506:	429a      	cmp	r2, r3
     508:	d9bd      	bls.n	486 <telnet_client_send+0x16>
   else
   {
     /* other problem ?? */
   }
  }
}
     50a:	bf00      	nop
     50c:	3718      	adds	r7, #24
     50e:	46bd      	mov	sp, r7
     510:	bd80      	pop	{r7, pc}
     512:	bf00      	nop
     514:	0801d79c 	.word	0x0801d79c

00000518 <telnet_client_connection_close>:


static void telnet_client_connection_close(struct tcp_pcb *tpcb, struct telnet_client_struct *tc)
{
     518:	b580      	push	{r7, lr}
     51a:	b082      	sub	sp, #8
     51c:	af00      	add	r7, sp, #0
     51e:	6078      	str	r0, [r7, #4]
     520:	6039      	str	r1, [r7, #0]
  #ifdef TELNET_DEBUG
    printf("[Telnet Client] Closing connection.\n\r");
     522:	4814      	ldr	r0, [pc, #80]	; (574 <telnet_client_connection_close+0x5c>)
     524:	f001 fbec 	bl	1d00 <__printf_veneer>
  #endif
  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
     528:	2100      	movs	r1, #0
     52a:	6878      	ldr	r0, [r7, #4]
     52c:	f001 fbd8 	bl	1ce0 <__tcp_arg_veneer>
  tcp_sent(tpcb, NULL);
     530:	2100      	movs	r1, #0
     532:	6878      	ldr	r0, [r7, #4]
     534:	f001 fbb0 	bl	1c98 <__tcp_sent_veneer>
  tcp_recv(tpcb, NULL);
     538:	2100      	movs	r1, #0
     53a:	6878      	ldr	r0, [r7, #4]
     53c:	f001 fb90 	bl	1c60 <__tcp_recv_veneer>
  tcp_err(tpcb, NULL);
     540:	2100      	movs	r1, #0
     542:	6878      	ldr	r0, [r7, #4]
     544:	f001 fbc8 	bl	1cd8 <__tcp_err_veneer>
  tcp_poll(tpcb, NULL, 0);
     548:	2200      	movs	r2, #0
     54a:	2100      	movs	r1, #0
     54c:	6878      	ldr	r0, [r7, #4]
     54e:	f001 fb83 	bl	1c58 <__tcp_poll_veneer>

  /* delete tc structure */
  if (tc != NULL)
     552:	683b      	ldr	r3, [r7, #0]
     554:	2b00      	cmp	r3, #0
     556:	d002      	beq.n	55e <telnet_client_connection_close+0x46>
  {
    mem_free(tc);
     558:	6838      	ldr	r0, [r7, #0]
     55a:	f001 fba1 	bl	1ca0 <__mem_free_veneer>
  }

  /* close tcp connection */
  tcp_close(tpcb);
     55e:	6878      	ldr	r0, [r7, #4]
     560:	f001 fba2 	bl	1ca8 <__tcp_close_veneer>

  telnet_initialised = 0;
     564:	4b04      	ldr	r3, [pc, #16]	; (578 <telnet_client_connection_close+0x60>)
     566:	2200      	movs	r2, #0
     568:	701a      	strb	r2, [r3, #0]
}
     56a:	bf00      	nop
     56c:	3708      	adds	r7, #8
     56e:	46bd      	mov	sp, r7
     570:	bd80      	pop	{r7, pc}
     572:	bf00      	nop
     574:	0801d7c8 	.word	0x0801d7c8
     578:	20000244 	.word	0x20000244

0000057c <example_client_handle>:

/* Handle the incoming TCP Data */

static void example_client_handle (struct tcp_pcb *tpcb, struct telnet_client_struct *tc)
{
     57c:	b580      	push	{r7, lr}
     57e:	b086      	sub	sp, #24
     580:	af00      	add	r7, sp, #0
     582:	6078      	str	r0, [r7, #4]
     584:	6039      	str	r1, [r7, #0]
	//function has been called as telnet_client_handle(tpcb, tc);
  #ifdef TELNET_DEBUG
    printf("[Telnet Client] Handling incoming data.\n\r");
     586:	4816      	ldr	r0, [pc, #88]	; (5e0 <example_client_handle+0x64>)
     588:	f001 fbba 	bl	1d00 <__printf_veneer>
  #endif
    /* get the Remote IP */
	ip4_addr_t inIP = tpcb->remote_ip;
     58c:	687b      	ldr	r3, [r7, #4]
     58e:	685b      	ldr	r3, [r3, #4]
     590:	60fb      	str	r3, [r7, #12]
	uint16_t inPort = tpcb->remote_port;
     592:	687b      	ldr	r3, [r7, #4]
     594:	8b1b      	ldrh	r3, [r3, #24]
     596:	82fb      	strh	r3, [r7, #22]

	/* Extract the IP */
	char *remIP = ipaddr_ntoa(&inIP);
     598:	f107 030c 	add.w	r3, r7, #12
     59c:	4618      	mov	r0, r3
     59e:	f001 fb53 	bl	1c48 <__ip4addr_ntoa_veneer>
     5a2:	6138      	str	r0, [r7, #16]

	tcTx->state = tc->state;
     5a4:	4b0f      	ldr	r3, [pc, #60]	; (5e4 <example_client_handle+0x68>)
     5a6:	681b      	ldr	r3, [r3, #0]
     5a8:	683a      	ldr	r2, [r7, #0]
     5aa:	7812      	ldrb	r2, [r2, #0]
     5ac:	701a      	strb	r2, [r3, #0]
	tcTx->pcb = tc->pcb;
     5ae:	4b0d      	ldr	r3, [pc, #52]	; (5e4 <example_client_handle+0x68>)
     5b0:	681b      	ldr	r3, [r3, #0]
     5b2:	683a      	ldr	r2, [r7, #0]
     5b4:	6852      	ldr	r2, [r2, #4]
     5b6:	605a      	str	r2, [r3, #4]
	tcTx->p = tc->p;
     5b8:	4b0a      	ldr	r3, [pc, #40]	; (5e4 <example_client_handle+0x68>)
     5ba:	681b      	ldr	r3, [r3, #0]
     5bc:	683a      	ldr	r2, [r7, #0]
     5be:	6892      	ldr	r2, [r2, #8]
     5c0:	609a      	str	r2, [r3, #8]

	tcTx = tc;
     5c2:	4a08      	ldr	r2, [pc, #32]	; (5e4 <example_client_handle+0x68>)
     5c4:	683b      	ldr	r3, [r7, #0]
     5c6:	6013      	str	r3, [r2, #0]
	pcbTx = tpcb;
     5c8:	4a07      	ldr	r2, [pc, #28]	; (5e8 <example_client_handle+0x6c>)
     5ca:	687b      	ldr	r3, [r7, #4]
     5cc:	6013      	str	r3, [r2, #0]

	counter++;
     5ce:	4b07      	ldr	r3, [pc, #28]	; (5ec <example_client_handle+0x70>)
     5d0:	681b      	ldr	r3, [r3, #0]
     5d2:	3301      	adds	r3, #1
     5d4:	4a05      	ldr	r2, [pc, #20]	; (5ec <example_client_handle+0x70>)
     5d6:	6013      	str	r3, [r2, #0]

}
     5d8:	bf00      	nop
     5da:	3718      	adds	r7, #24
     5dc:	46bd      	mov	sp, r7
     5de:	bd80      	pop	{r7, pc}
     5e0:	0801d7f0 	.word	0x0801d7f0
     5e4:	20000250 	.word	0x20000250
     5e8:	20000254 	.word	0x20000254
     5ec:	20000248 	.word	0x20000248

000005f0 <telnet_client_handle>:

/* Stuart's function to handle the incoming TCP Data */

static void telnet_client_handle (struct tcp_pcb *tpcb, struct telnet_client_struct *tc, struct pbuf *p)
{
     5f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5f4:	b08a      	sub	sp, #40	; 0x28
     5f6:	af00      	add	r7, sp, #0
     5f8:	60f8      	str	r0, [r7, #12]
     5fa:	60b9      	str	r1, [r7, #8]
     5fc:	607a      	str	r2, [r7, #4]
     5fe:	466b      	mov	r3, sp
     600:	469a      	mov	sl, r3
	//function has been called as telnet_client_handle(tpcb, tc, p);
  #ifdef TELNET_DEBUG
    printf("[Telnet Client] Handling incoming data.\n\r");
     602:	4843      	ldr	r0, [pc, #268]	; (710 <telnet_client_handle+0x120>)
     604:	f001 fb7c 	bl	1d00 <__printf_veneer>
  #endif

    /* Could make this more versatile by testing the IP before assuming it's from the LDC */
	ldc_response_received = true;
     608:	4b42      	ldr	r3, [pc, #264]	; (714 <telnet_client_handle+0x124>)
     60a:	2201      	movs	r2, #1
     60c:	701a      	strb	r2, [r3, #0]

    /* get the Remote IP */
	ip4_addr_t inIP = tpcb->remote_ip;
     60e:	68fb      	ldr	r3, [r7, #12]
     610:	685b      	ldr	r3, [r3, #4]
     612:	613b      	str	r3, [r7, #16]
	uint16_t inPort = tpcb->remote_port;
     614:	68fb      	ldr	r3, [r7, #12]
     616:	8b1b      	ldrh	r3, [r3, #24]
     618:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* Extract the IP */
	char *remIP = ipaddr_ntoa(&inIP);
     61a:	f107 0310 	add.w	r3, r7, #16
     61e:	4618      	mov	r0, r3
     620:	f001 fb12 	bl	1c48 <__ip4addr_ntoa_veneer>
     624:	6238      	str	r0, [r7, #32]

	tcTx->state = tc->state;
     626:	4b3c      	ldr	r3, [pc, #240]	; (718 <telnet_client_handle+0x128>)
     628:	681b      	ldr	r3, [r3, #0]
     62a:	68ba      	ldr	r2, [r7, #8]
     62c:	7812      	ldrb	r2, [r2, #0]
     62e:	701a      	strb	r2, [r3, #0]
	tcTx->pcb = tc->pcb;
     630:	4b39      	ldr	r3, [pc, #228]	; (718 <telnet_client_handle+0x128>)
     632:	681b      	ldr	r3, [r3, #0]
     634:	68ba      	ldr	r2, [r7, #8]
     636:	6852      	ldr	r2, [r2, #4]
     638:	605a      	str	r2, [r3, #4]
	tcTx->p = tc->p;
     63a:	4b37      	ldr	r3, [pc, #220]	; (718 <telnet_client_handle+0x128>)
     63c:	681b      	ldr	r3, [r3, #0]
     63e:	68ba      	ldr	r2, [r7, #8]
     640:	6892      	ldr	r2, [r2, #8]
     642:	609a      	str	r2, [r3, #8]

	tcTx = tc;
     644:	4a34      	ldr	r2, [pc, #208]	; (718 <telnet_client_handle+0x128>)
     646:	68bb      	ldr	r3, [r7, #8]
     648:	6013      	str	r3, [r2, #0]
	pcbTx = tpcb;
     64a:	4a34      	ldr	r2, [pc, #208]	; (71c <telnet_client_handle+0x12c>)
     64c:	68fb      	ldr	r3, [r7, #12]
     64e:	6013      	str	r3, [r2, #0]

	if (p -> len != p -> tot_len) {//spans more that one buffer and I haven't allowed for this yet
     650:	687b      	ldr	r3, [r7, #4]
     652:	895a      	ldrh	r2, [r3, #10]
     654:	687b      	ldr	r3, [r7, #4]
     656:	891b      	ldrh	r3, [r3, #8]
     658:	429a      	cmp	r2, r3
     65a:	d002      	beq.n	662 <telnet_client_handle+0x72>
#ifdef TELNET_DEBUG
  printf("[Telnet Client] ERROR - Received data spans more than one pbuf.\n\r");
     65c:	4830      	ldr	r0, [pc, #192]	; (720 <telnet_client_handle+0x130>)
     65e:	f001 fb4f 	bl	1d00 <__printf_veneer>
#endif
	}

	/* Copy payload into a string */
	uint16_t len = p -> len; //length of the payload
     662:	687b      	ldr	r3, [r7, #4]
     664:	895b      	ldrh	r3, [r3, #10]
     666:	83fb      	strh	r3, [r7, #30]
	char str[len+1]; //holds the payload, with capacity for terminating character
     668:	8bfb      	ldrh	r3, [r7, #30]
     66a:	1c5e      	adds	r6, r3, #1
     66c:	1e73      	subs	r3, r6, #1
     66e:	61bb      	str	r3, [r7, #24]
     670:	4632      	mov	r2, r6
     672:	2300      	movs	r3, #0
     674:	4690      	mov	r8, r2
     676:	4699      	mov	r9, r3
     678:	f04f 0200 	mov.w	r2, #0
     67c:	f04f 0300 	mov.w	r3, #0
     680:	ea4f 03c9 	mov.w	r3, r9, lsl #3
     684:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
     688:	ea4f 02c8 	mov.w	r2, r8, lsl #3
     68c:	4632      	mov	r2, r6
     68e:	2300      	movs	r3, #0
     690:	4614      	mov	r4, r2
     692:	461d      	mov	r5, r3
     694:	f04f 0200 	mov.w	r2, #0
     698:	f04f 0300 	mov.w	r3, #0
     69c:	00eb      	lsls	r3, r5, #3
     69e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
     6a2:	00e2      	lsls	r2, r4, #3
     6a4:	4633      	mov	r3, r6
     6a6:	3307      	adds	r3, #7
     6a8:	08db      	lsrs	r3, r3, #3
     6aa:	00db      	lsls	r3, r3, #3
     6ac:	ebad 0d03 	sub.w	sp, sp, r3
     6b0:	466b      	mov	r3, sp
     6b2:	3300      	adds	r3, #0
     6b4:	617b      	str	r3, [r7, #20]
	memcpy(str, p -> payload, p -> len); //copy the payload across
     6b6:	687b      	ldr	r3, [r7, #4]
     6b8:	6859      	ldr	r1, [r3, #4]
     6ba:	687b      	ldr	r3, [r7, #4]
     6bc:	895b      	ldrh	r3, [r3, #10]
     6be:	461a      	mov	r2, r3
     6c0:	6978      	ldr	r0, [r7, #20]
     6c2:	f001 faf9 	bl	1cb8 <__memcpy_veneer>
	str[len] = '\0'; //assigns null character to terminate string
     6c6:	8bfb      	ldrh	r3, [r7, #30]
     6c8:	697a      	ldr	r2, [r7, #20]
     6ca:	2100      	movs	r1, #0
     6cc:	54d1      	strb	r1, [r2, r3]

    printf("[Telnet Client] Message: %s\n\r",str);
     6ce:	6979      	ldr	r1, [r7, #20]
     6d0:	4814      	ldr	r0, [pc, #80]	; (724 <telnet_client_handle+0x134>)
     6d2:	f001 fb15 	bl	1d00 <__printf_veneer>
    printf("String length: %u\n\r",sizeof(str));
     6d6:	4633      	mov	r3, r6
     6d8:	4619      	mov	r1, r3
     6da:	4813      	ldr	r0, [pc, #76]	; (728 <telnet_client_handle+0x138>)
     6dc:	f001 fb10 	bl	1d00 <__printf_veneer>
    printf("p -> len: %u\n\r",p -> len);
     6e0:	687b      	ldr	r3, [r7, #4]
     6e2:	895b      	ldrh	r3, [r3, #10]
     6e4:	4619      	mov	r1, r3
     6e6:	4811      	ldr	r0, [pc, #68]	; (72c <telnet_client_handle+0x13c>)
     6e8:	f001 fb0a 	bl	1d00 <__printf_veneer>
    printf("p -> tot_len: %u\n\r",p -> tot_len);
     6ec:	687b      	ldr	r3, [r7, #4]
     6ee:	891b      	ldrh	r3, [r3, #8]
     6f0:	4619      	mov	r1, r3
     6f2:	480f      	ldr	r0, [pc, #60]	; (730 <telnet_client_handle+0x140>)
     6f4:	f001 fb04 	bl	1d00 <__printf_veneer>
//    strcpy(last_LDC_message, str);

	counter++;
     6f8:	4b0e      	ldr	r3, [pc, #56]	; (734 <telnet_client_handle+0x144>)
     6fa:	681b      	ldr	r3, [r3, #0]
     6fc:	3301      	adds	r3, #1
     6fe:	4a0d      	ldr	r2, [pc, #52]	; (734 <telnet_client_handle+0x144>)
     700:	6013      	str	r3, [r2, #0]
     702:	46d5      	mov	sp, sl

}
     704:	bf00      	nop
     706:	3728      	adds	r7, #40	; 0x28
     708:	46bd      	mov	sp, r7
     70a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     70e:	bf00      	nop
     710:	0801d7f0 	.word	0x0801d7f0
     714:	2000024c 	.word	0x2000024c
     718:	20000250 	.word	0x20000250
     71c:	20000254 	.word	0x20000254
     720:	0801d81c 	.word	0x0801d81c
     724:	0801d860 	.word	0x0801d860
     728:	0801d880 	.word	0x0801d880
     72c:	0801d894 	.word	0x0801d894
     730:	0801d8a4 	.word	0x0801d8a4
     734:	20000248 	.word	0x20000248

00000738 <synth_writereg>:
  * @param  Address
  * @param  Chip address
  * @param  Verify
  * @retval Contents read back from register
  */
static uint32_t synth_writereg(const uint32_t data, const uint32_t reg_address, const uint32_t chip_address, const bool verify) {
     738:	b580      	push	{r7, lr}
     73a:	b08a      	sub	sp, #40	; 0x28
     73c:	af00      	add	r7, sp, #0
     73e:	60f8      	str	r0, [r7, #12]
     740:	60b9      	str	r1, [r7, #8]
     742:	607a      	str	r2, [r7, #4]
     744:	70fb      	strb	r3, [r7, #3]

	uint32_t read_data = 0;
     746:	2300      	movs	r3, #0
     748:	627b      	str	r3, [r7, #36]	; 0x24
	const uint32_t write_data = (data << 8) | (reg_address << 3) | chip_address; // This is what we will write, 32 bits in total.
     74a:	68fb      	ldr	r3, [r7, #12]
     74c:	021a      	lsls	r2, r3, #8
     74e:	68bb      	ldr	r3, [r7, #8]
     750:	00db      	lsls	r3, r3, #3
     752:	4313      	orrs	r3, r2
     754:	687a      	ldr	r2, [r7, #4]
     756:	4313      	orrs	r3, r2
     758:	61fb      	str	r3, [r7, #28]
	#ifdef SPI_DEBUG
		printf("SPI BYTES WRITTEN: 0x%X \r\n", write_data);
	#endif //SPI_DEBUG
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
     75a:	2200      	movs	r2, #0
     75c:	f44f 7180 	mov.w	r1, #256	; 0x100
     760:	4830      	ldr	r0, [pc, #192]	; (824 <synth_writereg+0xec>)
     762:	f001 fab5 	bl	1cd0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 0); // Take SEN low to indicate we are sending data
     766:	2200      	movs	r2, #0
     768:	f44f 6100 	mov.w	r1, #2048	; 0x800
     76c:	482d      	ldr	r0, [pc, #180]	; (824 <synth_writereg+0xec>)
     76e:	f001 faaf 	bl	1cd0 <__HAL_GPIO_WritePin_veneer>

	/* Clock in the data */
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
     772:	2300      	movs	r3, #0
     774:	623b      	str	r3, [r7, #32]
     776:	e036      	b.n	7e6 <synth_writereg+0xae>

		/* Data written on the rising edge */
		uint32_t bit = (SYNTH_SPI_BITS - 1 - i);
     778:	2220      	movs	r2, #32
     77a:	6a3b      	ldr	r3, [r7, #32]
     77c:	1ad3      	subs	r3, r2, r3
     77e:	3b01      	subs	r3, #1
     780:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(MOSI_GPIO_Port, MOSI_Pin, !!(write_data & (1 << bit)));
     782:	2201      	movs	r2, #1
     784:	697b      	ldr	r3, [r7, #20]
     786:	fa02 f303 	lsl.w	r3, r2, r3
     78a:	461a      	mov	r2, r3
     78c:	69fb      	ldr	r3, [r7, #28]
     78e:	4013      	ands	r3, r2
     790:	2b00      	cmp	r3, #0
     792:	bf14      	ite	ne
     794:	2301      	movne	r3, #1
     796:	2300      	moveq	r3, #0
     798:	b2db      	uxtb	r3, r3
     79a:	461a      	mov	r2, r3
     79c:	f44f 7100 	mov.w	r1, #512	; 0x200
     7a0:	4820      	ldr	r0, [pc, #128]	; (824 <synth_writereg+0xec>)
     7a2:	f001 fa95 	bl	1cd0 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 1);
     7a6:	2201      	movs	r2, #1
     7a8:	f44f 7180 	mov.w	r1, #256	; 0x100
     7ac:	481d      	ldr	r0, [pc, #116]	; (824 <synth_writereg+0xec>)
     7ae:	f001 fa8f 	bl	1cd0 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
     7b2:	2200      	movs	r2, #0
     7b4:	f44f 7180 	mov.w	r1, #256	; 0x100
     7b8:	481a      	ldr	r0, [pc, #104]	; (824 <synth_writereg+0xec>)
     7ba:	f001 fa89 	bl	1cd0 <__HAL_GPIO_WritePin_veneer>

		/* Data read on the falling edge */
		read_data = read_data
				| (HAL_GPIO_ReadPin(MISO_GPIO_Port, MISO_Pin)
     7be:	f44f 6180 	mov.w	r1, #1024	; 0x400
     7c2:	4818      	ldr	r0, [pc, #96]	; (824 <synth_writereg+0xec>)
     7c4:	f001 fab0 	bl	1d28 <__HAL_GPIO_ReadPin_veneer>
     7c8:	4603      	mov	r3, r0
     7ca:	4619      	mov	r1, r3
						<< (SYNTH_SPI_BITS - 1 - i));
     7cc:	2220      	movs	r2, #32
     7ce:	6a3b      	ldr	r3, [r7, #32]
     7d0:	1ad3      	subs	r3, r2, r3
     7d2:	3b01      	subs	r3, #1
     7d4:	fa01 f303 	lsl.w	r3, r1, r3
     7d8:	461a      	mov	r2, r3
		read_data = read_data
     7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     7dc:	4313      	orrs	r3, r2
     7de:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
     7e0:	6a3b      	ldr	r3, [r7, #32]
     7e2:	3301      	adds	r3, #1
     7e4:	623b      	str	r3, [r7, #32]
     7e6:	2220      	movs	r2, #32
     7e8:	6a3b      	ldr	r3, [r7, #32]
     7ea:	4293      	cmp	r3, r2
     7ec:	d3c4      	bcc.n	778 <synth_writereg+0x40>
	}

	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1); // Assert the SEN line to register the transmitted data
     7ee:	2201      	movs	r2, #1
     7f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
     7f4:	480b      	ldr	r0, [pc, #44]	; (824 <synth_writereg+0xec>)
     7f6:	f001 fa6b 	bl	1cd0 <__HAL_GPIO_WritePin_veneer>

	if (verify) {
     7fa:	78fb      	ldrb	r3, [r7, #3]
     7fc:	2b00      	cmp	r3, #0
     7fe:	d00c      	beq.n	81a <synth_writereg+0xe2>
		const uint32_t verify_data = synth_readreg(reg_address); // Data returned on the second cycle
     800:	68b8      	ldr	r0, [r7, #8]
     802:	f000 f813 	bl	82c <synth_readreg>
     806:	61b8      	str	r0, [r7, #24]
		if (verify_data != data) {
     808:	69ba      	ldr	r2, [r7, #24]
     80a:	68fb      	ldr	r3, [r7, #12]
     80c:	429a      	cmp	r2, r3
     80e:	d004      	beq.n	81a <synth_writereg+0xe2>
			printf("SPI transmission error!\n");
     810:	4805      	ldr	r0, [pc, #20]	; (828 <synth_writereg+0xf0>)
     812:	f001 fa85 	bl	1d20 <__puts_veneer>
			Error_Handler(); // We enter an infinite loop here
     816:	f001 fa53 	bl	1cc0 <__Error_Handler_veneer>
		}
	}

	return read_data;
     81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     81c:	4618      	mov	r0, r3
     81e:	3728      	adds	r7, #40	; 0x28
     820:	46bd      	mov	sp, r7
     822:	bd80      	pop	{r7, pc}
     824:	58020800 	.word	0x58020800
     828:	0801dbd8 	.word	0x0801dbd8

0000082c <synth_readreg>:
/**
  * @brief  Reads a register.
  * @param  Address
  * @retval Register contents
  */
static uint32_t synth_readreg(const uint32_t reg_address){
     82c:	b580      	push	{r7, lr}
     82e:	b084      	sub	sp, #16
     830:	af00      	add	r7, sp, #0
     832:	6078      	str	r0, [r7, #4]

    synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY); // First cycle to send the read address
     834:	2300      	movs	r3, #0
     836:	2200      	movs	r2, #0
     838:	2100      	movs	r1, #0
     83a:	6878      	ldr	r0, [r7, #4]
     83c:	f7ff ff7c 	bl	738 <synth_writereg>
    const uint32_t read_data = synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY);  // Data returned on the second cycle
     840:	2300      	movs	r3, #0
     842:	2200      	movs	r2, #0
     844:	2100      	movs	r1, #0
     846:	6878      	ldr	r0, [r7, #4]
     848:	f7ff ff76 	bl	738 <synth_writereg>
     84c:	60f8      	str	r0, [r7, #12]

    return (read_data >> 8); // We only care about the first 24 bits returned.
     84e:	68fb      	ldr	r3, [r7, #12]
     850:	0a1b      	lsrs	r3, r3, #8

}
     852:	4618      	mov	r0, r3
     854:	3710      	adds	r7, #16
     856:	46bd      	mov	sp, r7
     858:	bd80      	pop	{r7, pc}

0000085a <set_MW_power>:
/**
  * @brief  Program LO2 output gain.
  * @param  MW power setting
  * @retval Success/fail
  */
uint32_t set_MW_power (const uint8_t mw_power) {
     85a:	b580      	push	{r7, lr}
     85c:	b084      	sub	sp, #16
     85e:	af00      	add	r7, sp, #0
     860:	4603      	mov	r3, r0
     862:	71fb      	strb	r3, [r7, #7]
	if (mw_power > 3) {//check that LO2GAIN is an integer from 0 to 3 inclusive
     864:	79fb      	ldrb	r3, [r7, #7]
     866:	2b03      	cmp	r3, #3
     868:	d904      	bls.n	874 <set_MW_power+0x1a>
		printf("illegal mw_power - must be an integer from 0 to 3!\n");
     86a:	4811      	ldr	r0, [pc, #68]	; (8b0 <set_MW_power+0x56>)
     86c:	f001 fa58 	bl	1d20 <__puts_veneer>
		Error_Handler(); // We enter an infinite loop here
     870:	f001 fa26 	bl	1cc0 <__Error_Handler_veneer>
	}
	uint32_t read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     874:	2016      	movs	r0, #22
     876:	f7ff ffd9 	bl	82c <synth_readreg>
     87a:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
     87c:	68fb      	ldr	r3, [r7, #12]
     87e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
     882:	60fb      	str	r3, [r7, #12]
	read_data |= (mw_power << 8);	// Set LO2GAIN value.
     884:	79fb      	ldrb	r3, [r7, #7]
     886:	021b      	lsls	r3, r3, #8
     888:	461a      	mov	r2, r3
     88a:	68fb      	ldr	r3, [r7, #12]
     88c:	4313      	orrs	r3, r2
     88e:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     890:	2301      	movs	r3, #1
     892:	2200      	movs	r2, #0
     894:	2116      	movs	r1, #22
     896:	68f8      	ldr	r0, [r7, #12]
     898:	f7ff ff4e 	bl	738 <synth_writereg>
	#ifdef MW_VERBOSE
		printf("PROGRAMMED GAIN DIVIDER REGISTER: 0x%lX \r\n", read_data);
	#endif
	printf("LO2 gain setting: %u \r\n", mw_power);
     89c:	79fb      	ldrb	r3, [r7, #7]
     89e:	4619      	mov	r1, r3
     8a0:	4804      	ldr	r0, [pc, #16]	; (8b4 <set_MW_power+0x5a>)
     8a2:	f001 fa2d 	bl	1d00 <__printf_veneer>
	return SUCCESS;
     8a6:	2300      	movs	r3, #0
}
     8a8:	4618      	mov	r0, r3
     8aa:	3710      	adds	r7, #16
     8ac:	46bd      	mov	sp, r7
     8ae:	bd80      	pop	{r7, pc}
     8b0:	0801dbf0 	.word	0x0801dbf0
     8b4:	0801dc24 	.word	0x0801dc24

000008b8 <init_synthesiser>:
/**
  * @brief  Initialises HMC835 synthesiser.
  * @param  MW power setting
  * @retval Success/fail
  */
uint32_t init_synthesiser(const uint8_t mw_power) {
     8b8:	b580      	push	{r7, lr}
     8ba:	b084      	sub	sp, #16
     8bc:	af00      	add	r7, sp, #0
     8be:	4603      	mov	r3, r0
     8c0:	71fb      	strb	r3, [r7, #7]

	//Set pins to required initial conditions
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // Turn off the amber lock LED
     8c2:	2200      	movs	r2, #0
     8c4:	2102      	movs	r1, #2
     8c6:	4856      	ldr	r0, [pc, #344]	; (a20 <init_synthesiser+0x168>)
     8c8:	f001 fa02 	bl	1cd0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
     8cc:	2201      	movs	r2, #1
     8ce:	2101      	movs	r1, #1
     8d0:	4854      	ldr	r0, [pc, #336]	; (a24 <init_synthesiser+0x16c>)
     8d2:	f001 f9fd 	bl	1cd0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
     8d6:	2200      	movs	r2, #0
     8d8:	f44f 7180 	mov.w	r1, #256	; 0x100
     8dc:	4852      	ldr	r0, [pc, #328]	; (a28 <init_synthesiser+0x170>)
     8de:	f001 f9f7 	bl	1cd0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1);
     8e2:	2201      	movs	r2, #1
     8e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
     8e8:	484f      	ldr	r0, [pc, #316]	; (a28 <init_synthesiser+0x170>)
     8ea:	f001 f9f1 	bl	1cd0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 1); // Enable the main regulator.
     8ee:	2201      	movs	r2, #1
     8f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     8f4:	484c      	ldr	r0, [pc, #304]	; (a28 <init_synthesiser+0x170>)
     8f6:	f001 f9eb 	bl	1cd0 <__HAL_GPIO_WritePin_veneer>

	HAL_Delay(100); // Wait 100 ms for the supply to stabilise.
     8fa:	2064      	movs	r0, #100	; 0x64
     8fc:	f001 fa18 	bl	1d30 <__HAL_Delay_veneer>

	synth_writereg(0x1UL << 5, OPEN_MODE_READ_ADDRESS, 0x0, DONT_VERIFY); // Soft reset.
     900:	2300      	movs	r3, #0
     902:	2200      	movs	r2, #0
     904:	2100      	movs	r1, #0
     906:	2020      	movs	r0, #32
     908:	f7ff ff16 	bl	738 <synth_writereg>
	synth_writereg(0x41BFFF, ANALOG_EN_REGISTER, 0x0, VERIFY); // Set the SDO output level to 3.3 Volts
     90c:	2301      	movs	r3, #1
     90e:	2200      	movs	r2, #0
     910:	2108      	movs	r1, #8
     912:	4846      	ldr	r0, [pc, #280]	; (a2c <init_synthesiser+0x174>)
     914:	f7ff ff10 	bl	738 <synth_writereg>

	uint32_t read_data = synth_readreg(ID_REGISTER); // Read the ID register to check the chip is communicating
     918:	2000      	movs	r0, #0
     91a:	f7ff ff87 	bl	82c <synth_readreg>
     91e:	60f8      	str	r0, [r7, #12]
	/* Check we have the correct ID */
	if (read_data != SYNTH_ID) {
     920:	4a43      	ldr	r2, [pc, #268]	; (a30 <init_synthesiser+0x178>)
     922:	68fb      	ldr	r3, [r7, #12]
     924:	4293      	cmp	r3, r2
     926:	d00a      	beq.n	93e <init_synthesiser+0x86>
		HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0); // Disable the main regulator.
     928:	2200      	movs	r2, #0
     92a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     92e:	483e      	ldr	r0, [pc, #248]	; (a28 <init_synthesiser+0x170>)
     930:	f001 f9ce 	bl	1cd0 <__HAL_GPIO_WritePin_veneer>
		printf("Incorrect synthesiser ID!\r\n");
     934:	483f      	ldr	r0, [pc, #252]	; (a34 <init_synthesiser+0x17c>)
     936:	f001 f9f3 	bl	1d20 <__puts_veneer>
		return ERROR;
     93a:	2301      	movs	r3, #1
     93c:	e06b      	b.n	a16 <init_synthesiser+0x15e>
	}

	/* Everything looks good, we can communicate with the chip :-) */
	printf("HMC835 Detected.\r\n");
     93e:	483e      	ldr	r0, [pc, #248]	; (a38 <init_synthesiser+0x180>)
     940:	f001 f9ee 	bl	1d20 <__puts_veneer>

	/* Enables Single-Ended output mode for LO2 output */
	read_data = synth_readreg(MODES_REGISTER); // Get the current value of the modes register
     944:	2017      	movs	r0, #23
     946:	f7ff ff71 	bl	82c <synth_readreg>
     94a:	60f8      	str	r0, [r7, #12]
#ifdef MW_VERBOSE
	printf("READ MODES REGISTER: 0x%lX \r\n", read_data);
#endif
	read_data |= (0x1UL << 9);     // Enable single ended output for LO2 (LO2_P)
     94c:	68fb      	ldr	r3, [r7, #12]
     94e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     952:	60fb      	str	r3, [r7, #12]
	read_data  &= ~(!AUTO_MUTE << 7); //can disable auto_mute - see variable declarations
     954:	2301      	movs	r3, #1
     956:	f083 0301 	eor.w	r3, r3, #1
     95a:	b2db      	uxtb	r3, r3
     95c:	01db      	lsls	r3, r3, #7
     95e:	43db      	mvns	r3, r3
     960:	461a      	mov	r2, r3
     962:	68fb      	ldr	r3, [r7, #12]
     964:	4013      	ands	r3, r2
     966:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, MODES_REGISTER, 0x0, VERIFY); // Send
     968:	2301      	movs	r3, #1
     96a:	2200      	movs	r2, #0
     96c:	2117      	movs	r1, #23
     96e:	68f8      	ldr	r0, [r7, #12]
     970:	f7ff fee2 	bl	738 <synth_writereg>
	//read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get the current value.
	//read_data &= 0xFFFFFFF8; // Zero the first 3 LSBs.
	//read_data |= 0x07;
	//synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Update the VCO divide register.

	synth_writereg(1, REFDIV_REGISTER, 0x0, VERIFY); // Reference divider setting.
     974:	2301      	movs	r3, #1
     976:	2200      	movs	r2, #0
     978:	2102      	movs	r1, #2
     97a:	2001      	movs	r0, #1
     97c:	f7ff fedc 	bl	738 <synth_writereg>
	printf("PROGRAMMED DIVIDER REGISTER: 0x01 \r\n");
#endif

	/* Lock detect training: This must be done after any change to the PD
	 * reference frequency or after power cycle. */
	read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get contents of lock detect register
     980:	2007      	movs	r0, #7
     982:	f7ff ff53 	bl	82c <synth_readreg>
     986:	60f8      	str	r0, [r7, #12]
#ifdef MW_VERBOSE
	printf("READ LOCK_DETECT_REGISTER: 0x%lX \r\n", read_data);
#endif
	read_data |= (0x1UL << 11);      // Enable lock-detect counters.
     988:	68fb      	ldr	r3, [r7, #12]
     98a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     98e:	60fb      	str	r3, [r7, #12]
	read_data |= (0x1UL << 14);      // Enable the lock-detect timer.
     990:	68fb      	ldr	r3, [r7, #12]
     992:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     996:	60fb      	str	r3, [r7, #12]
	read_data |= (0x1UL << 20);      // Train the lock-detect timer.
     998:	68fb      	ldr	r3, [r7, #12]
     99a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     99e:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Send
     9a0:	2301      	movs	r3, #1
     9a2:	2200      	movs	r2, #0
     9a4:	2107      	movs	r1, #7
     9a6:	68f8      	ldr	r0, [r7, #12]
     9a8:	f7ff fec6 	bl	738 <synth_writereg>
#ifdef MW_VERBOSE
	printf("PROGRAMMED LOCK DETECT REGISTER: 0x%lX \r\n", read_data);
#endif
	HAL_Delay(10); // Wait 10 ms for training to complete, not sure if we really need to do this.
     9ac:	200a      	movs	r0, #10
     9ae:	f001 f9bf 	bl	1d30 <__HAL_Delay_veneer>

	/* Program LO2 output gain */
	if (mw_power > 3) {//check that LO2GAIN is an integer from 0 to 3 inclusive
     9b2:	79fb      	ldrb	r3, [r7, #7]
     9b4:	2b03      	cmp	r3, #3
     9b6:	d904      	bls.n	9c2 <init_synthesiser+0x10a>
		printf("illegal mw_power - must be an integer from 0 to 3!\n");
     9b8:	4820      	ldr	r0, [pc, #128]	; (a3c <init_synthesiser+0x184>)
     9ba:	f001 f9b1 	bl	1d20 <__puts_veneer>
		Error_Handler();
     9be:	f001 f97f 	bl	1cc0 <__Error_Handler_veneer>
	}
	read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     9c2:	2016      	movs	r0, #22
     9c4:	f7ff ff32 	bl	82c <synth_readreg>
     9c8:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
     9ca:	68fb      	ldr	r3, [r7, #12]
     9cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
     9d0:	60fb      	str	r3, [r7, #12]
	read_data |= (mw_power << 8);	// Set LO2GAIN value.
     9d2:	79fb      	ldrb	r3, [r7, #7]
     9d4:	021b      	lsls	r3, r3, #8
     9d6:	461a      	mov	r2, r3
     9d8:	68fb      	ldr	r3, [r7, #12]
     9da:	4313      	orrs	r3, r2
     9dc:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     9de:	2301      	movs	r3, #1
     9e0:	2200      	movs	r2, #0
     9e2:	2116      	movs	r1, #22
     9e4:	68f8      	ldr	r0, [r7, #12]
     9e6:	f7ff fea7 	bl	738 <synth_writereg>
	printf("PROGRAMMED GAIN DIVIDER REGISTER: 0x%lX \r\n", read_data);
	printf("LO2 gain setting: %u \r\n", mw_power);
#endif

	/* Sets output frequency to the hyperfine value */
	set_frequency_hz(HYPERFINE);
     9ea:	4b15      	ldr	r3, [pc, #84]	; (a40 <init_synthesiser+0x188>)
     9ec:	ed93 7b00 	vldr	d7, [r3]
     9f0:	eeb0 0b47 	vmov.f64	d0, d7
     9f4:	f000 f83f 	bl	a76 <set_frequency_hz>
	//printf("Single frequency output: %f Hz \r\n", HYPERFINE);
	printf("Single frequency output: %.10g Hz \r\n", HYPERFINE);
     9f8:	4b11      	ldr	r3, [pc, #68]	; (a40 <init_synthesiser+0x188>)
     9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
     9fe:	4811      	ldr	r0, [pc, #68]	; (a44 <init_synthesiser+0x18c>)
     a00:	f001 f97e 	bl	1d00 <__printf_veneer>
//	struct MW_struct *mw_sweep_settings = 0;  //create a structure to store the sweep settings
	mw_sweep_settings.state = MW_FIXED_FREQ;
     a04:	4b10      	ldr	r3, [pc, #64]	; (a48 <init_synthesiser+0x190>)
     a06:	2201      	movs	r2, #1
     a08:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); // MW_invalid output low
     a0a:	2200      	movs	r2, #0
     a0c:	2102      	movs	r1, #2
     a0e:	480f      	ldr	r0, [pc, #60]	; (a4c <init_synthesiser+0x194>)
     a10:	f001 f95e 	bl	1cd0 <__HAL_GPIO_WritePin_veneer>
	return SUCCESS;
     a14:	2300      	movs	r3, #0
}
     a16:	4618      	mov	r0, r3
     a18:	3710      	adds	r7, #16
     a1a:	46bd      	mov	sp, r7
     a1c:	bd80      	pop	{r7, pc}
     a1e:	bf00      	nop
     a20:	58021000 	.word	0x58021000
     a24:	58021800 	.word	0x58021800
     a28:	58020800 	.word	0x58020800
     a2c:	0041bfff 	.word	0x0041bfff
     a30:	00c7701a 	.word	0x00c7701a
     a34:	0801dc3c 	.word	0x0801dc3c
     a38:	0801dc58 	.word	0x0801dc58
     a3c:	0801dbf0 	.word	0x0801dbf0
     a40:	08020cb0 	.word	0x08020cb0
     a44:	0801dc6c 	.word	0x0801dc6c
     a48:	200005b8 	.word	0x200005b8
     a4c:	58020400 	.word	0x58020400

00000a50 <lock_status>:
/**
  * @brief  Checks for MW frequency lock
  * @param  None
  * @retval Lock status
  */
static const bool lock_status(void) {
     a50:	b580      	push	{r7, lr}
     a52:	b082      	sub	sp, #8
     a54:	af00      	add	r7, sp, #0

	bool locked = synth_readreg(GPOLD_REGISTER) & (1UL << 1);
     a56:	2012      	movs	r0, #18
     a58:	f7ff fee8 	bl	82c <synth_readreg>
     a5c:	4603      	mov	r3, r0
     a5e:	f003 0302 	and.w	r3, r3, #2
     a62:	2b00      	cmp	r3, #0
     a64:	bf14      	ite	ne
     a66:	2301      	movne	r3, #1
     a68:	2300      	moveq	r3, #0
     a6a:	71fb      	strb	r3, [r7, #7]
	return locked;
     a6c:	79fb      	ldrb	r3, [r7, #7]

}
     a6e:	4618      	mov	r0, r3
     a70:	3708      	adds	r7, #8
     a72:	46bd      	mov	sp, r7
     a74:	bd80      	pop	{r7, pc}

00000a76 <set_frequency_hz>:
/**
  * @brief  Translate a frequency into register values for programming to HMC835
  * @param  Frequency
  * @retval None
  */
void set_frequency_hz(const double fo) {
     a76:	b580      	push	{r7, lr}
     a78:	b088      	sub	sp, #32
     a7a:	af00      	add	r7, sp, #0
     a7c:	ed87 0b00 	vstr	d0, [r7]

#ifdef OPTIMISED_FOR_3_035GHZ_GENERATION
	/* Code optimisation for Generation of frequencies close to 3.035GHz
	 * k always equals 1
	 */
	uint32_t k = 1;
     a80:	2301      	movs	r3, #1
     a82:	61fb      	str	r3, [r7, #28]
		}
	}
#endif //OPTIMISED_FOR_3_035GHZ_GENERATION

	/* Calculate the N division ratio */
	const double N = ((fo * k) / REF_FREQ);
     a84:	69fb      	ldr	r3, [r7, #28]
     a86:	ee07 3a90 	vmov	s15, r3
     a8a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     a8e:	ed97 7b00 	vldr	d7, [r7]
     a92:	ee26 6b07 	vmul.f64	d6, d6, d7
     a96:	ed9f 5b2a 	vldr	d5, [pc, #168]	; b40 <set_frequency_hz+0xca>
     a9a:	ee86 7b05 	vdiv.f64	d7, d6, d5
     a9e:	ed87 7b04 	vstr	d7, [r7, #16]

	/* Extract the fractional and integer parts */
	const uint32_t NINT = N;
     aa2:	ed97 7b04 	vldr	d7, [r7, #16]
     aa6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     aaa:	ee17 3a90 	vmov	r3, s15
     aae:	60fb      	str	r3, [r7, #12]
	const uint32_t NFRAC = ((N - NINT) * (1 << 24)) + 0.5;
     ab0:	68fb      	ldr	r3, [r7, #12]
     ab2:	ee07 3a90 	vmov	s15, r3
     ab6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     aba:	ed97 6b04 	vldr	d6, [r7, #16]
     abe:	ee36 7b47 	vsub.f64	d7, d6, d7
     ac2:	ed9f 6b21 	vldr	d6, [pc, #132]	; b48 <set_frequency_hz+0xd2>
     ac6:	ee27 7b06 	vmul.f64	d7, d7, d6
     aca:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     ace:	ee37 7b06 	vadd.f64	d7, d7, d6
     ad2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     ad6:	ee17 3a90 	vmov	r3, s15
     ada:	60bb      	str	r3, [r7, #8]
		printf("Failed to establish synthesiser frequency accurately\r\n");
		Error_Handler();
	}
#endif

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
     adc:	2201      	movs	r2, #1
     ade:	2102      	movs	r1, #2
     ae0:	481b      	ldr	r0, [pc, #108]	; (b50 <set_frequency_hz+0xda>)
     ae2:	f001 f8f5 	bl	1cd0 <__HAL_GPIO_WritePin_veneer>
	//set_frequency(NINT, NFRAC, k, MANUAL_MUTE); //Sets only the necessary Hittite registers
	set_freq_regs(NINT, NFRAC, k); //Sets only the necessary Hittite registers
     ae6:	69fa      	ldr	r2, [r7, #28]
     ae8:	68b9      	ldr	r1, [r7, #8]
     aea:	68f8      	ldr	r0, [r7, #12]
     aec:	f000 f838 	bl	b60 <set_freq_regs>

	//MW stabilisation delay and check for lock
	timer_delay(MW_TIMER, MW_STABILISE_TIME_US);
     af0:	4b18      	ldr	r3, [pc, #96]	; (b54 <set_frequency_hz+0xde>)
     af2:	681b      	ldr	r3, [r3, #0]
     af4:	f241 3288 	movw	r2, #5000	; 0x1388
     af8:	4611      	mov	r1, r2
     afa:	4618      	mov	r0, r3
     afc:	f000 ffbe 	bl	1a7c <timer_delay>
	//if (!poll_until_locked(LOCK_WAIT_US)) {
	if (!lock_status()) {
     b00:	f7ff ffa6 	bl	a50 <lock_status>
     b04:	4603      	mov	r3, r0
     b06:	f083 0301 	eor.w	r3, r3, #1
     b0a:	b2db      	uxtb	r3, r3
     b0c:	2b00      	cmp	r3, #0
     b0e:	d011      	beq.n	b34 <set_frequency_hz+0xbe>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); //turn off amber LED
     b10:	2200      	movs	r2, #0
     b12:	2102      	movs	r1, #2
     b14:	4810      	ldr	r0, [pc, #64]	; (b58 <set_frequency_hz+0xe2>)
     b16:	f001 f8db 	bl	1cd0 <__HAL_GPIO_WritePin_veneer>
		printf("Failed to establish MW Lock within %ld us of setting frequency!\r\n", MW_STABILISE_TIME_US);
     b1a:	f241 3388 	movw	r3, #5000	; 0x1388
     b1e:	4619      	mov	r1, r3
     b20:	480e      	ldr	r0, [pc, #56]	; (b5c <set_frequency_hz+0xe6>)
     b22:	f001 f8ed 	bl	1d00 <__printf_veneer>
#ifdef HALT_ON_LOSS_OF_LOCK
		Error_Handler();
     b26:	f001 f8cb 	bl	1cc0 <__Error_Handler_veneer>
#endif //HALT_ON_LOSS_OF_LOCK
		HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Sets MW_invalid pin low
     b2a:	2200      	movs	r2, #0
     b2c:	2102      	movs	r1, #2
     b2e:	4808      	ldr	r0, [pc, #32]	; (b50 <set_frequency_hz+0xda>)
     b30:	f001 f8ce 	bl	1cd0 <__HAL_GPIO_WritePin_veneer>
	}

}
     b34:	bf00      	nop
     b36:	3720      	adds	r7, #32
     b38:	46bd      	mov	sp, r7
     b3a:	bd80      	pop	{r7, pc}
     b3c:	f3af 8000 	nop.w
     b40:	00000000 	.word	0x00000000
     b44:	4187d784 	.word	0x4187d784
     b48:	00000000 	.word	0x00000000
     b4c:	41700000 	.word	0x41700000
     b50:	58020400 	.word	0x58020400
     b54:	20000018 	.word	0x20000018
     b58:	58021000 	.word	0x58021000
     b5c:	0801dc94 	.word	0x0801dc94

00000b60 <set_freq_regs>:
static void set_freq_regs(const uint32_t integer, const uint32_t fraction, const uint32_t vco_divider) {
     b60:	b580      	push	{r7, lr}
     b62:	b086      	sub	sp, #24
     b64:	af00      	add	r7, sp, #0
     b66:	60f8      	str	r0, [r7, #12]
     b68:	60b9      	str	r1, [r7, #8]
     b6a:	607a      	str	r2, [r7, #4]
	uint32_t read_data = 0x0;
     b6c:	2300      	movs	r3, #0
     b6e:	617b      	str	r3, [r7, #20]
	if (last_vcodiv == -1 || (last_vcodiv != vco_divider)) {
     b70:	4b24      	ldr	r3, [pc, #144]	; (c04 <set_freq_regs+0xa4>)
     b72:	681b      	ldr	r3, [r3, #0]
     b74:	f1b3 3fff 	cmp.w	r3, #4294967295
     b78:	d004      	beq.n	b84 <set_freq_regs+0x24>
     b7a:	4b22      	ldr	r3, [pc, #136]	; (c04 <set_freq_regs+0xa4>)
     b7c:	681b      	ldr	r3, [r3, #0]
     b7e:	687a      	ldr	r2, [r7, #4]
     b80:	429a      	cmp	r2, r3
     b82:	d014      	beq.n	bae <set_freq_regs+0x4e>
		read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     b84:	2016      	movs	r0, #22
     b86:	f7ff fe51 	bl	82c <synth_readreg>
     b8a:	6178      	str	r0, [r7, #20]
		read_data &= 0xFFFFFFC0; // Zero the first 6 LSBs (VCO division value - mute).
     b8c:	697b      	ldr	r3, [r7, #20]
     b8e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
     b92:	617b      	str	r3, [r7, #20]
		read_data |= vco_divider; // This will set k which will un-mute the outputs */
     b94:	697a      	ldr	r2, [r7, #20]
     b96:	687b      	ldr	r3, [r7, #4]
     b98:	4313      	orrs	r3, r2
     b9a:	617b      	str	r3, [r7, #20]
		synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     b9c:	2301      	movs	r3, #1
     b9e:	2200      	movs	r2, #0
     ba0:	2116      	movs	r1, #22
     ba2:	6978      	ldr	r0, [r7, #20]
     ba4:	f7ff fdc8 	bl	738 <synth_writereg>
		last_vcodiv = vco_divider;
     ba8:	4a16      	ldr	r2, [pc, #88]	; (c04 <set_freq_regs+0xa4>)
     baa:	687b      	ldr	r3, [r7, #4]
     bac:	6013      	str	r3, [r2, #0]
	if (last_integer == -1 || (last_integer != integer)) {
     bae:	4b16      	ldr	r3, [pc, #88]	; (c08 <set_freq_regs+0xa8>)
     bb0:	681b      	ldr	r3, [r3, #0]
     bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
     bb6:	d004      	beq.n	bc2 <set_freq_regs+0x62>
     bb8:	4b13      	ldr	r3, [pc, #76]	; (c08 <set_freq_regs+0xa8>)
     bba:	681b      	ldr	r3, [r3, #0]
     bbc:	68fa      	ldr	r2, [r7, #12]
     bbe:	429a      	cmp	r2, r3
     bc0:	d008      	beq.n	bd4 <set_freq_regs+0x74>
		synth_writereg(integer, INTEGER_FREQUENCY_REGISTER, 0x0, VERIFY);   // Integer register.
     bc2:	2301      	movs	r3, #1
     bc4:	2200      	movs	r2, #0
     bc6:	2103      	movs	r1, #3
     bc8:	68f8      	ldr	r0, [r7, #12]
     bca:	f7ff fdb5 	bl	738 <synth_writereg>
		last_integer = integer;
     bce:	4a0e      	ldr	r2, [pc, #56]	; (c08 <set_freq_regs+0xa8>)
     bd0:	68fb      	ldr	r3, [r7, #12]
     bd2:	6013      	str	r3, [r2, #0]
	if (last_fraction == -1 || (last_fraction != fraction)) {
     bd4:	4b0d      	ldr	r3, [pc, #52]	; (c0c <set_freq_regs+0xac>)
     bd6:	681b      	ldr	r3, [r3, #0]
     bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
     bdc:	d004      	beq.n	be8 <set_freq_regs+0x88>
     bde:	4b0b      	ldr	r3, [pc, #44]	; (c0c <set_freq_regs+0xac>)
     be0:	681b      	ldr	r3, [r3, #0]
     be2:	68ba      	ldr	r2, [r7, #8]
     be4:	429a      	cmp	r2, r3
     be6:	d008      	beq.n	bfa <set_freq_regs+0x9a>
		synth_writereg(fraction, FRACTIONAL_FREQUENCY_REGISTER, 0x0, VERIFY);  // Fractional register.
     be8:	2301      	movs	r3, #1
     bea:	2200      	movs	r2, #0
     bec:	2104      	movs	r1, #4
     bee:	68b8      	ldr	r0, [r7, #8]
     bf0:	f7ff fda2 	bl	738 <synth_writereg>
		last_fraction = fraction;
     bf4:	4a05      	ldr	r2, [pc, #20]	; (c0c <set_freq_regs+0xac>)
     bf6:	68bb      	ldr	r3, [r7, #8]
     bf8:	6013      	str	r3, [r2, #0]
}
     bfa:	bf00      	nop
     bfc:	3718      	adds	r7, #24
     bfe:	46bd      	mov	sp, r7
     c00:	bd80      	pop	{r7, pc}
     c02:	bf00      	nop
     c04:	20000000 	.word	0x20000000
     c08:	20000004 	.word	0x20000004
     c0c:	20000008 	.word	0x20000008

00000c10 <print_mw_sweep_settings>:
/**
  * @brief  Print out the contents of the mw_sweep_settings structure
  * @param  None
  * @retval None
  */
  static void print_mw_sweep_settings (void) {
     c10:	b580      	push	{r7, lr}
     c12:	af00      	add	r7, sp, #0
  	// Check that I've populated everything
    printf("state: %u \r\n", mw_sweep_settings.state);
     c14:	4b34      	ldr	r3, [pc, #208]	; (ce8 <print_mw_sweep_settings+0xd8>)
     c16:	781b      	ldrb	r3, [r3, #0]
     c18:	4619      	mov	r1, r3
     c1a:	4834      	ldr	r0, [pc, #208]	; (cec <print_mw_sweep_settings+0xdc>)
     c1c:	f001 f870 	bl	1d00 <__printf_veneer>
  	printf("k: %u \r\n", mw_sweep_settings.k);
     c20:	4b31      	ldr	r3, [pc, #196]	; (ce8 <print_mw_sweep_settings+0xd8>)
     c22:	785b      	ldrb	r3, [r3, #1]
     c24:	4619      	mov	r1, r3
     c26:	4832      	ldr	r0, [pc, #200]	; (cf0 <print_mw_sweep_settings+0xe0>)
     c28:	f001 f86a 	bl	1d00 <__printf_veneer>
  	printf("NINT: %lu \r\n", mw_sweep_settings.NINT);
     c2c:	4b2e      	ldr	r3, [pc, #184]	; (ce8 <print_mw_sweep_settings+0xd8>)
     c2e:	685b      	ldr	r3, [r3, #4]
     c30:	4619      	mov	r1, r3
     c32:	4830      	ldr	r0, [pc, #192]	; (cf4 <print_mw_sweep_settings+0xe4>)
     c34:	f001 f864 	bl	1d00 <__printf_veneer>
  	printf("NFRAC_start: %lu \r\n", mw_sweep_settings.NFRAC_start);
     c38:	4b2b      	ldr	r3, [pc, #172]	; (ce8 <print_mw_sweep_settings+0xd8>)
     c3a:	689b      	ldr	r3, [r3, #8]
     c3c:	4619      	mov	r1, r3
     c3e:	482e      	ldr	r0, [pc, #184]	; (cf8 <print_mw_sweep_settings+0xe8>)
     c40:	f001 f85e 	bl	1d00 <__printf_veneer>
  	printf("num_steps: %lu \r\n", mw_sweep_settings.num_steps);
     c44:	4b28      	ldr	r3, [pc, #160]	; (ce8 <print_mw_sweep_settings+0xd8>)
     c46:	68db      	ldr	r3, [r3, #12]
     c48:	4619      	mov	r1, r3
     c4a:	482c      	ldr	r0, [pc, #176]	; (cfc <print_mw_sweep_settings+0xec>)
     c4c:	f001 f858 	bl	1d00 <__printf_veneer>
  	printf("step_size: %lu \r\n", mw_sweep_settings.step_size);
     c50:	4b25      	ldr	r3, [pc, #148]	; (ce8 <print_mw_sweep_settings+0xd8>)
     c52:	691b      	ldr	r3, [r3, #16]
     c54:	4619      	mov	r1, r3
     c56:	482a      	ldr	r0, [pc, #168]	; (d00 <print_mw_sweep_settings+0xf0>)
     c58:	f001 f852 	bl	1d00 <__printf_veneer>
  	printf("pop_cycles_per_point: %lu \r\n", mw_sweep_settings.pop_cycles_per_point);
     c5c:	4b22      	ldr	r3, [pc, #136]	; (ce8 <print_mw_sweep_settings+0xd8>)
     c5e:	695b      	ldr	r3, [r3, #20]
     c60:	4619      	mov	r1, r3
     c62:	4828      	ldr	r0, [pc, #160]	; (d04 <print_mw_sweep_settings+0xf4>)
     c64:	f001 f84c 	bl	1d00 <__printf_veneer>
  	printf("stabilise_time: %lu us\r\n", mw_sweep_settings.stabilise_time);
     c68:	4b1f      	ldr	r3, [pc, #124]	; (ce8 <print_mw_sweep_settings+0xd8>)
     c6a:	699b      	ldr	r3, [r3, #24]
     c6c:	4619      	mov	r1, r3
     c6e:	4826      	ldr	r0, [pc, #152]	; (d08 <print_mw_sweep_settings+0xf8>)
     c70:	f001 f846 	bl	1d00 <__printf_veneer>
  	printf("dwell_time: %lu us\r\n", mw_sweep_settings.dwell_time);
     c74:	4b1c      	ldr	r3, [pc, #112]	; (ce8 <print_mw_sweep_settings+0xd8>)
     c76:	69db      	ldr	r3, [r3, #28]
     c78:	4619      	mov	r1, r3
     c7a:	4824      	ldr	r0, [pc, #144]	; (d0c <print_mw_sweep_settings+0xfc>)
     c7c:	f001 f840 	bl	1d00 <__printf_veneer>
  	printf("MW_processing_time: %lu us\r\n", mw_sweep_settings.MW_processing_time);
     c80:	4b19      	ldr	r3, [pc, #100]	; (ce8 <print_mw_sweep_settings+0xd8>)
     c82:	6a1b      	ldr	r3, [r3, #32]
     c84:	4619      	mov	r1, r3
     c86:	4822      	ldr	r0, [pc, #136]	; (d10 <print_mw_sweep_settings+0x100>)
     c88:	f001 f83a 	bl	1d00 <__printf_veneer>
  	printf("current_point: %lu\r\n", mw_sweep_settings.current_point);
     c8c:	4b16      	ldr	r3, [pc, #88]	; (ce8 <print_mw_sweep_settings+0xd8>)
     c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     c90:	4619      	mov	r1, r3
     c92:	4820      	ldr	r0, [pc, #128]	; (d14 <print_mw_sweep_settings+0x104>)
     c94:	f001 f834 	bl	1d00 <__printf_veneer>
  	printf("centre_freq: %f Hz\r\n", mw_sweep_settings.centre_freq);
     c98:	4b13      	ldr	r3, [pc, #76]	; (ce8 <print_mw_sweep_settings+0xd8>)
     c9a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
     c9e:	481e      	ldr	r0, [pc, #120]	; (d18 <print_mw_sweep_settings+0x108>)
     ca0:	f001 f82e 	bl	1d00 <__printf_veneer>
  	printf("span: %f Hz\r\n", mw_sweep_settings.span);
     ca4:	4b10      	ldr	r3, [pc, #64]	; (ce8 <print_mw_sweep_settings+0xd8>)
     ca6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
     caa:	481c      	ldr	r0, [pc, #112]	; (d1c <print_mw_sweep_settings+0x10c>)
     cac:	f001 f828 	bl	1d00 <__printf_veneer>
  	printf("sweep_period: %f s\r\n", mw_sweep_settings.sweep_period);
     cb0:	4b0d      	ldr	r3, [pc, #52]	; (ce8 <print_mw_sweep_settings+0xd8>)
     cb2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
     cb6:	481a      	ldr	r0, [pc, #104]	; (d20 <print_mw_sweep_settings+0x110>)
     cb8:	f001 f822 	bl	1d00 <__printf_veneer>
    printf("sweep_type: %s \r\n", mw_sweep_settings.sweep_type ? "FIXED_TIME" : "FIXED_STEPS");
     cbc:	4b0a      	ldr	r3, [pc, #40]	; (ce8 <print_mw_sweep_settings+0xd8>)
     cbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
     cc2:	2b00      	cmp	r3, #0
     cc4:	d001      	beq.n	cca <print_mw_sweep_settings+0xba>
     cc6:	4b17      	ldr	r3, [pc, #92]	; (d24 <print_mw_sweep_settings+0x114>)
     cc8:	e000      	b.n	ccc <print_mw_sweep_settings+0xbc>
     cca:	4b17      	ldr	r3, [pc, #92]	; (d28 <print_mw_sweep_settings+0x118>)
     ccc:	4619      	mov	r1, r3
     cce:	4817      	ldr	r0, [pc, #92]	; (d2c <print_mw_sweep_settings+0x11c>)
     cd0:	f001 f816 	bl	1d00 <__printf_veneer>
    printf("sweep_mode: %d\r\n", mw_sweep_settings.sweep_mode);
     cd4:	4b04      	ldr	r3, [pc, #16]	; (ce8 <print_mw_sweep_settings+0xd8>)
     cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
     cda:	4619      	mov	r1, r3
     cdc:	4814      	ldr	r0, [pc, #80]	; (d30 <print_mw_sweep_settings+0x120>)
     cde:	f001 f80f 	bl	1d00 <__printf_veneer>
}
     ce2:	bf00      	nop
     ce4:	bd80      	pop	{r7, pc}
     ce6:	bf00      	nop
     ce8:	200005b8 	.word	0x200005b8
     cec:	0801dcd8 	.word	0x0801dcd8
     cf0:	0801dce8 	.word	0x0801dce8
     cf4:	0801dcf4 	.word	0x0801dcf4
     cf8:	0801dd04 	.word	0x0801dd04
     cfc:	0801dd18 	.word	0x0801dd18
     d00:	0801dd2c 	.word	0x0801dd2c
     d04:	0801dd40 	.word	0x0801dd40
     d08:	0801dd60 	.word	0x0801dd60
     d0c:	0801dd7c 	.word	0x0801dd7c
     d10:	0801dd94 	.word	0x0801dd94
     d14:	0801ddb4 	.word	0x0801ddb4
     d18:	0801ddcc 	.word	0x0801ddcc
     d1c:	0801dde4 	.word	0x0801dde4
     d20:	0801ddf4 	.word	0x0801ddf4
     d24:	0801de0c 	.word	0x0801de0c
     d28:	0801de18 	.word	0x0801de18
     d2c:	0801de24 	.word	0x0801de24
     d30:	0801de38 	.word	0x0801de38

00000d34 <calc_defined_step_MW_sweep>:
  * @param  POP cycles per point
  * @param  Number of points
  * @param	POP_period in us
  * @retval Success/failure or early termination
  */
bool calc_defined_step_MW_sweep(const double centre_freq, const double span, const uint32_t pop_cycles_per_point, const uint32_t num_points_req) {
     d34:	b580      	push	{r7, lr}
     d36:	b094      	sub	sp, #80	; 0x50
     d38:	af02      	add	r7, sp, #8
     d3a:	ed87 0b04 	vstr	d0, [r7, #16]
     d3e:	ed87 1b02 	vstr	d1, [r7, #8]
     d42:	6078      	str	r0, [r7, #4]
     d44:	6039      	str	r1, [r7, #0]
	printf("MW sweep will have %.10g GHz centre frequency with %.5g Hz span\r\n", centre_freq/1000000000, span);
     d46:	ed97 7b04 	vldr	d7, [r7, #16]
     d4a:	ed9f 6b8d 	vldr	d6, [pc, #564]	; f80 <calc_defined_step_MW_sweep+0x24c>
     d4e:	ee87 5b06 	vdiv.f64	d5, d7, d6
     d52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     d56:	e9cd 2300 	strd	r2, r3, [sp]
     d5a:	ec53 2b15 	vmov	r2, r3, d5
     d5e:	4892      	ldr	r0, [pc, #584]	; (fa8 <calc_defined_step_MW_sweep+0x274>)
     d60:	f000 ffce 	bl	1d00 <__printf_veneer>
	printf("and %ld POP cycles per point\r\n", pop_cycles_per_point);
     d64:	6879      	ldr	r1, [r7, #4]
     d66:	4891      	ldr	r0, [pc, #580]	; (fac <calc_defined_step_MW_sweep+0x278>)
     d68:	f000 ffca 	bl	1d00 <__printf_veneer>
	mw_sweep_settings.sweep_type = FIXED_STEPS;
     d6c:	4b90      	ldr	r3, [pc, #576]	; (fb0 <calc_defined_step_MW_sweep+0x27c>)
     d6e:	2200      	movs	r2, #0
     d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	mw_sweep_settings.pop_cycles_per_point = pop_cycles_per_point;
     d74:	4a8e      	ldr	r2, [pc, #568]	; (fb0 <calc_defined_step_MW_sweep+0x27c>)
     d76:	687b      	ldr	r3, [r7, #4]
     d78:	6153      	str	r3, [r2, #20]
	mw_sweep_settings.centre_freq = centre_freq;
     d7a:	498d      	ldr	r1, [pc, #564]	; (fb0 <calc_defined_step_MW_sweep+0x27c>)
     d7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     d80:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	mw_sweep_settings.span = span;
     d84:	498a      	ldr	r1, [pc, #552]	; (fb0 <calc_defined_step_MW_sweep+0x27c>)
     d86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     d8a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	/* Calculate start frequency */
	double start_freq = centre_freq - 0.5* span;
     d8e:	ed97 7b02 	vldr	d7, [r7, #8]
     d92:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     d96:	ee27 7b06 	vmul.f64	d7, d7, d6
     d9a:	ed97 6b04 	vldr	d6, [r7, #16]
     d9e:	ee36 7b47 	vsub.f64	d7, d6, d7
     da2:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	mw_sweep_settings.k = calculate_k(start_freq);
     da6:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
     daa:	f000 fb1f 	bl	13ec <calculate_k>
     dae:	4603      	mov	r3, r0
     db0:	b2da      	uxtb	r2, r3
     db2:	4b7f      	ldr	r3, [pc, #508]	; (fb0 <calc_defined_step_MW_sweep+0x27c>)
     db4:	705a      	strb	r2, [r3, #1]

	/* Extrapolate step size requested versus achievable  */
	const double step_size_Hz = span / (num_points_req - 1);
     db6:	683b      	ldr	r3, [r7, #0]
     db8:	3b01      	subs	r3, #1
     dba:	ee07 3a90 	vmov	s15, r3
     dbe:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     dc2:	ed97 5b02 	vldr	d5, [r7, #8]
     dc6:	ee85 7b06 	vdiv.f64	d7, d5, d6
     dca:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	printf("Requested %ld steps, therefore step size of %.3g Hz\r\n", num_points_req, step_size_Hz);
     dce:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
     dd2:	6839      	ldr	r1, [r7, #0]
     dd4:	4877      	ldr	r0, [pc, #476]	; (fb4 <calc_defined_step_MW_sweep+0x280>)
     dd6:	f000 ff93 	bl	1d00 <__printf_veneer>
	const double unit_step_size_Hz = REF_FREQ / (double) (mw_sweep_settings.k * (1 << 24)); //minimum step size possible
     dda:	ed9f 5b6b 	vldr	d5, [pc, #428]	; f88 <calc_defined_step_MW_sweep+0x254>
     dde:	4b74      	ldr	r3, [pc, #464]	; (fb0 <calc_defined_step_MW_sweep+0x27c>)
     de0:	785b      	ldrb	r3, [r3, #1]
     de2:	061b      	lsls	r3, r3, #24
     de4:	ee07 3a90 	vmov	s15, r3
     de8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     dec:	ee85 7b06 	vdiv.f64	d7, d5, d6
     df0:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	//printf("Unit step size: %.3g Hz\r\n", unit_step_size_Hz);
	mw_sweep_settings.step_size = (step_size_Hz / unit_step_size_Hz + 0.5);
     df4:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
     df8:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     dfc:	ee85 7b06 	vdiv.f64	d7, d5, d6
     e00:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     e04:	ee37 7b06 	vadd.f64	d7, d7, d6
     e08:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     e0c:	ee17 2a90 	vmov	r2, s15
     e10:	4b67      	ldr	r3, [pc, #412]	; (fb0 <calc_defined_step_MW_sweep+0x27c>)
     e12:	611a      	str	r2, [r3, #16]
	if (!mw_sweep_settings.step_size) { //step_size must be a positive non-zero integer
     e14:	4b66      	ldr	r3, [pc, #408]	; (fb0 <calc_defined_step_MW_sweep+0x27c>)
     e16:	691b      	ldr	r3, [r3, #16]
     e18:	2b00      	cmp	r3, #0
     e1a:	d104      	bne.n	e26 <calc_defined_step_MW_sweep+0xf2>
		mw_sweep_settings.step_size++;
     e1c:	4b64      	ldr	r3, [pc, #400]	; (fb0 <calc_defined_step_MW_sweep+0x27c>)
     e1e:	691b      	ldr	r3, [r3, #16]
     e20:	3301      	adds	r3, #1
     e22:	4a63      	ldr	r2, [pc, #396]	; (fb0 <calc_defined_step_MW_sweep+0x27c>)
     e24:	6113      	str	r3, [r2, #16]
	}
	const double achieved_step_size = (double) (mw_sweep_settings.step_size * unit_step_size_Hz);
     e26:	4b62      	ldr	r3, [pc, #392]	; (fb0 <calc_defined_step_MW_sweep+0x27c>)
     e28:	691b      	ldr	r3, [r3, #16]
     e2a:	ee07 3a90 	vmov	s15, r3
     e2e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     e32:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     e36:	ee26 7b07 	vmul.f64	d7, d6, d7
     e3a:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	printf("Step size achieved: %.3g Hz\r\n", achieved_step_size);
     e3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
     e42:	485d      	ldr	r0, [pc, #372]	; (fb8 <calc_defined_step_MW_sweep+0x284>)
     e44:	f000 ff5c 	bl	1d00 <__printf_veneer>
	mw_sweep_settings.num_steps = span / achieved_step_size;
     e48:	ed97 5b02 	vldr	d5, [r7, #8]
     e4c:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
     e50:	ee85 7b06 	vdiv.f64	d7, d5, d6
     e54:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     e58:	ee17 2a90 	vmov	r2, s15
     e5c:	4b54      	ldr	r3, [pc, #336]	; (fb0 <calc_defined_step_MW_sweep+0x27c>)
     e5e:	60da      	str	r2, [r3, #12]

	/* Can avoid spurs if frequency requested can be encoded exactly  */
	start_freq = ((long)(start_freq/unit_step_size_Hz)) * unit_step_size_Hz;
     e60:	ed97 5b10 	vldr	d5, [r7, #64]	; 0x40
     e64:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     e68:	ee85 7b06 	vdiv.f64	d7, d5, d6
     e6c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     e70:	eeb8 7be7 	vcvt.f64.s32	d7, s15
     e74:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     e78:	ee26 7b07 	vmul.f64	d7, d6, d7
     e7c:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

	/* Calculate the N division ratio, extracting the fractional and integer parts */
	const double N = ((start_freq * mw_sweep_settings.k) / REF_FREQ);
     e80:	4b4b      	ldr	r3, [pc, #300]	; (fb0 <calc_defined_step_MW_sweep+0x27c>)
     e82:	785b      	ldrb	r3, [r3, #1]
     e84:	ee07 3a90 	vmov	s15, r3
     e88:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     e8c:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
     e90:	ee26 6b07 	vmul.f64	d6, d6, d7
     e94:	ed9f 5b3c 	vldr	d5, [pc, #240]	; f88 <calc_defined_step_MW_sweep+0x254>
     e98:	ee86 7b05 	vdiv.f64	d7, d6, d5
     e9c:	ed87 7b08 	vstr	d7, [r7, #32]
	mw_sweep_settings.NINT = N;
     ea0:	ed97 7b08 	vldr	d7, [r7, #32]
     ea4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     ea8:	ee17 2a90 	vmov	r2, s15
     eac:	4b40      	ldr	r3, [pc, #256]	; (fb0 <calc_defined_step_MW_sweep+0x27c>)
     eae:	605a      	str	r2, [r3, #4]
	mw_sweep_settings.NFRAC_start = ((N - mw_sweep_settings.NINT) * (1 << 24)) + 0.5;
     eb0:	4b3f      	ldr	r3, [pc, #252]	; (fb0 <calc_defined_step_MW_sweep+0x27c>)
     eb2:	685b      	ldr	r3, [r3, #4]
     eb4:	ee07 3a90 	vmov	s15, r3
     eb8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     ebc:	ed97 6b08 	vldr	d6, [r7, #32]
     ec0:	ee36 7b47 	vsub.f64	d7, d6, d7
     ec4:	ed9f 6b32 	vldr	d6, [pc, #200]	; f90 <calc_defined_step_MW_sweep+0x25c>
     ec8:	ee27 7b06 	vmul.f64	d7, d7, d6
     ecc:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     ed0:	ee37 7b06 	vadd.f64	d7, d7, d6
     ed4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     ed8:	ee17 2a90 	vmov	r2, s15
     edc:	4b34      	ldr	r3, [pc, #208]	; (fb0 <calc_defined_step_MW_sweep+0x27c>)
     ede:	609a      	str	r2, [r3, #8]

	/* Calculate dwell time at each MW frequency */
	mw_sweep_settings.stabilise_time = MW_STABILISE_TIME_US; //Global MW stabilisation time
     ee0:	f241 3288 	movw	r2, #5000	; 0x1388
     ee4:	4b32      	ldr	r3, [pc, #200]	; (fb0 <calc_defined_step_MW_sweep+0x27c>)
     ee6:	619a      	str	r2, [r3, #24]
	mw_sweep_settings.dwell_time = pop_cycles_per_point * POP_period_us + TIMING_MARGIN_US;
     ee8:	4b34      	ldr	r3, [pc, #208]	; (fbc <calc_defined_step_MW_sweep+0x288>)
     eea:	681b      	ldr	r3, [r3, #0]
     eec:	687a      	ldr	r2, [r7, #4]
     eee:	fb02 f303 	mul.w	r3, r2, r3
     ef2:	2264      	movs	r2, #100	; 0x64
     ef4:	4413      	add	r3, r2
     ef6:	4a2e      	ldr	r2, [pc, #184]	; (fb0 <calc_defined_step_MW_sweep+0x27c>)
     ef8:	61d3      	str	r3, [r2, #28]

	/* Calculate the period of a sweep */
	const double calc_sweep_time = (double)(MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time) * (double)(mw_sweep_settings.num_steps+1)/1000000;
     efa:	f241 3288 	movw	r2, #5000	; 0x1388
     efe:	2301      	movs	r3, #1
     f00:	441a      	add	r2, r3
     f02:	4b2b      	ldr	r3, [pc, #172]	; (fb0 <calc_defined_step_MW_sweep+0x27c>)
     f04:	69db      	ldr	r3, [r3, #28]
     f06:	4413      	add	r3, r2
     f08:	ee07 3a90 	vmov	s15, r3
     f0c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     f10:	4b27      	ldr	r3, [pc, #156]	; (fb0 <calc_defined_step_MW_sweep+0x27c>)
     f12:	68db      	ldr	r3, [r3, #12]
     f14:	3301      	adds	r3, #1
     f16:	ee07 3a90 	vmov	s15, r3
     f1a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     f1e:	ee26 6b07 	vmul.f64	d6, d6, d7
     f22:	ed9f 5b1d 	vldr	d5, [pc, #116]	; f98 <calc_defined_step_MW_sweep+0x264>
     f26:	ee86 7b05 	vdiv.f64	d7, d6, d5
     f2a:	ed87 7b06 	vstr	d7, [r7, #24]
	printf("Sweep period: %.3g s\r\n", calc_sweep_time);
     f2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     f32:	4823      	ldr	r0, [pc, #140]	; (fc0 <calc_defined_step_MW_sweep+0x28c>)
     f34:	f000 fee4 	bl	1d00 <__printf_veneer>
	printf("%ld points, %.3g ms each\r\n", mw_sweep_settings.num_steps, 1000 * calc_sweep_time / (mw_sweep_settings.num_steps + 1));
     f38:	4b1d      	ldr	r3, [pc, #116]	; (fb0 <calc_defined_step_MW_sweep+0x27c>)
     f3a:	68d9      	ldr	r1, [r3, #12]
     f3c:	ed97 7b06 	vldr	d7, [r7, #24]
     f40:	ed9f 6b17 	vldr	d6, [pc, #92]	; fa0 <calc_defined_step_MW_sweep+0x26c>
     f44:	ee27 6b06 	vmul.f64	d6, d7, d6
     f48:	4b19      	ldr	r3, [pc, #100]	; (fb0 <calc_defined_step_MW_sweep+0x27c>)
     f4a:	68db      	ldr	r3, [r3, #12]
     f4c:	3301      	adds	r3, #1
     f4e:	ee07 3a90 	vmov	s15, r3
     f52:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     f56:	ee86 5b07 	vdiv.f64	d5, d6, d7
     f5a:	ec53 2b15 	vmov	r2, r3, d5
     f5e:	4819      	ldr	r0, [pc, #100]	; (fc4 <calc_defined_step_MW_sweep+0x290>)
     f60:	f000 fece 	bl	1d00 <__printf_veneer>

	mw_sweep_settings.current_point = 0;
     f64:	4b12      	ldr	r3, [pc, #72]	; (fb0 <calc_defined_step_MW_sweep+0x27c>)
     f66:	2200      	movs	r2, #0
     f68:	625a      	str	r2, [r3, #36]	; 0x24
	mw_sweep_settings.sweep_period = calc_sweep_time;
     f6a:	4911      	ldr	r1, [pc, #68]	; (fb0 <calc_defined_step_MW_sweep+0x27c>)
     f6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     f70:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	//print_mw_sweep_settings();
	return(true);
     f74:	2301      	movs	r3, #1
}
     f76:	4618      	mov	r0, r3
     f78:	3748      	adds	r7, #72	; 0x48
     f7a:	46bd      	mov	sp, r7
     f7c:	bd80      	pop	{r7, pc}
     f7e:	bf00      	nop
     f80:	00000000 	.word	0x00000000
     f84:	41cdcd65 	.word	0x41cdcd65
     f88:	00000000 	.word	0x00000000
     f8c:	4187d784 	.word	0x4187d784
     f90:	00000000 	.word	0x00000000
     f94:	41700000 	.word	0x41700000
     f98:	00000000 	.word	0x00000000
     f9c:	412e8480 	.word	0x412e8480
     fa0:	00000000 	.word	0x00000000
     fa4:	408f4000 	.word	0x408f4000
     fa8:	0801de4c 	.word	0x0801de4c
     fac:	0801de90 	.word	0x0801de90
     fb0:	200005b8 	.word	0x200005b8
     fb4:	0801deb0 	.word	0x0801deb0
     fb8:	0801dee8 	.word	0x0801dee8
     fbc:	200005ac 	.word	0x200005ac
     fc0:	0801df08 	.word	0x0801df08
     fc4:	0801df20 	.word	0x0801df20

00000fc8 <calc_fixed_time_MW_sweep>:
  * @param  Span in Hz
  * @param  Sweep period in s
  * @param  Additional time for scope sync
  * @retval Success/failure or early termination
  */
bool calc_fixed_time_MW_sweep(const double centre_freq, const double span, const double requested_sweep_period, const bool scope_sync_time) {
     fc8:	b580      	push	{r7, lr}
     fca:	b09e      	sub	sp, #120	; 0x78
     fcc:	af04      	add	r7, sp, #16
     fce:	ed87 0b06 	vstr	d0, [r7, #24]
     fd2:	ed87 1b04 	vstr	d1, [r7, #16]
     fd6:	ed87 2b02 	vstr	d2, [r7, #8]
     fda:	4603      	mov	r3, r0
     fdc:	71fb      	strb	r3, [r7, #7]
	//Dwell time must be a minimum of one POP cycle
	//Overall dwell time should be at least 50% of sweep time
	//Number of points shall be maximised within the available time

	printf("MW sweep will have %.10g GHz centre frequency with %.5g Hz span, over %.3g s\r\n", centre_freq/1000000000, span, requested_sweep_period);
     fde:	ed97 7b06 	vldr	d7, [r7, #24]
     fe2:	ed9f 6b97 	vldr	d6, [pc, #604]	; 1240 <calc_fixed_time_MW_sweep+0x278>
     fe6:	ee87 5b06 	vdiv.f64	d5, d7, d6
     fea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     fee:	e9cd 2302 	strd	r2, r3, [sp, #8]
     ff2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     ff6:	e9cd 2300 	strd	r2, r3, [sp]
     ffa:	ec53 2b15 	vmov	r2, r3, d5
     ffe:	4898      	ldr	r0, [pc, #608]	; (1260 <calc_fixed_time_MW_sweep+0x298>)
    1000:	f000 fe7e 	bl	1d00 <__printf_veneer>
	mw_sweep_settings.sweep_type = FIXED_TIME;
    1004:	4b97      	ldr	r3, [pc, #604]	; (1264 <calc_fixed_time_MW_sweep+0x29c>)
    1006:	2201      	movs	r2, #1
    1008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	mw_sweep_settings.centre_freq = centre_freq;
    100c:	4995      	ldr	r1, [pc, #596]	; (1264 <calc_fixed_time_MW_sweep+0x29c>)
    100e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
    1012:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	mw_sweep_settings.span = span;
    1016:	4993      	ldr	r1, [pc, #588]	; (1264 <calc_fixed_time_MW_sweep+0x29c>)
    1018:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    101c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	mw_sweep_settings.dwell_time = POP_period_us + TIMING_MARGIN_US; //minimum possible value of dwell_time in us
    1020:	4b91      	ldr	r3, [pc, #580]	; (1268 <calc_fixed_time_MW_sweep+0x2a0>)
    1022:	681b      	ldr	r3, [r3, #0]
    1024:	2264      	movs	r2, #100	; 0x64
    1026:	4413      	add	r3, r2
    1028:	4a8e      	ldr	r2, [pc, #568]	; (1264 <calc_fixed_time_MW_sweep+0x29c>)
    102a:	61d3      	str	r3, [r2, #28]
	uint32_t point_time = MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time; //minimum possible value in us
    102c:	f241 3288 	movw	r2, #5000	; 0x1388
    1030:	2301      	movs	r3, #1
    1032:	441a      	add	r2, r3
    1034:	4b8b      	ldr	r3, [pc, #556]	; (1264 <calc_fixed_time_MW_sweep+0x29c>)
    1036:	69db      	ldr	r3, [r3, #28]
    1038:	4413      	add	r3, r2
    103a:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint32_t points_in_sweep = requested_sweep_period * (double)(1000000 / point_time); //maximum possible number of steps in sweep, rounded down to an integer
    103c:	4a8b      	ldr	r2, [pc, #556]	; (126c <calc_fixed_time_MW_sweep+0x2a4>)
    103e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    1040:	fbb2 f3f3 	udiv	r3, r2, r3
    1044:	ee07 3a90 	vmov	s15, r3
    1048:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    104c:	ed97 7b02 	vldr	d7, [r7, #8]
    1050:	ee26 7b07 	vmul.f64	d7, d6, d7
    1054:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1058:	ee17 3a90 	vmov	r3, s15
    105c:	65bb      	str	r3, [r7, #88]	; 0x58
	//printf("%lu points in sweep, maximum\r\n", points_in_sweep);

	/* now figure out the unit_step_size and how many steps will be taken in the span */

	/* Calculate start frequency */
	double start_freq = centre_freq - 0.5* span;
    105e:	ed97 7b04 	vldr	d7, [r7, #16]
    1062:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    1066:	ee27 7b06 	vmul.f64	d7, d7, d6
    106a:	ed97 6b06 	vldr	d6, [r7, #24]
    106e:	ee36 7b47 	vsub.f64	d7, d6, d7
    1072:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	mw_sweep_settings.k = calculate_k(start_freq);
    1076:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
    107a:	f000 f9b7 	bl	13ec <calculate_k>
    107e:	4603      	mov	r3, r0
    1080:	b2da      	uxtb	r2, r3
    1082:	4b78      	ldr	r3, [pc, #480]	; (1264 <calc_fixed_time_MW_sweep+0x29c>)
    1084:	705a      	strb	r2, [r3, #1]

	//steps should be evenly sized
	//selected step size should be an integer multiple of the unit step size
	//increase the step_size value until the sweep fits into the available period
	const double unit_step_size_Hz = REF_FREQ / (double) (mw_sweep_settings.k * (1 << 24)); //minimum step size possible
    1086:	ed9f 5b70 	vldr	d5, [pc, #448]	; 1248 <calc_fixed_time_MW_sweep+0x280>
    108a:	4b76      	ldr	r3, [pc, #472]	; (1264 <calc_fixed_time_MW_sweep+0x29c>)
    108c:	785b      	ldrb	r3, [r3, #1]
    108e:	061b      	lsls	r3, r3, #24
    1090:	ee07 3a90 	vmov	s15, r3
    1094:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    1098:	ee85 7b06 	vdiv.f64	d7, d5, d6
    109c:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	//printf("Unit step size: %.3g Hz\r\n", unit_step_size_Hz);
	mw_sweep_settings.step_size = 1;
    10a0:	4b70      	ldr	r3, [pc, #448]	; (1264 <calc_fixed_time_MW_sweep+0x29c>)
    10a2:	2201      	movs	r2, #1
    10a4:	611a      	str	r2, [r3, #16]
	while ((mw_sweep_settings.step_size * points_in_sweep) < (span / unit_step_size_Hz)) {
    10a6:	e004      	b.n	10b2 <calc_fixed_time_MW_sweep+0xea>
		mw_sweep_settings.step_size++;
    10a8:	4b6e      	ldr	r3, [pc, #440]	; (1264 <calc_fixed_time_MW_sweep+0x29c>)
    10aa:	691b      	ldr	r3, [r3, #16]
    10ac:	3301      	adds	r3, #1
    10ae:	4a6d      	ldr	r2, [pc, #436]	; (1264 <calc_fixed_time_MW_sweep+0x29c>)
    10b0:	6113      	str	r3, [r2, #16]
	while ((mw_sweep_settings.step_size * points_in_sweep) < (span / unit_step_size_Hz)) {
    10b2:	4b6c      	ldr	r3, [pc, #432]	; (1264 <calc_fixed_time_MW_sweep+0x29c>)
    10b4:	691b      	ldr	r3, [r3, #16]
    10b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
    10b8:	fb02 f303 	mul.w	r3, r2, r3
    10bc:	ee07 3a90 	vmov	s15, r3
    10c0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    10c4:	ed97 4b04 	vldr	d4, [r7, #16]
    10c8:	ed97 5b12 	vldr	d5, [r7, #72]	; 0x48
    10cc:	ee84 7b05 	vdiv.f64	d7, d4, d5
    10d0:	eeb4 6bc7 	vcmpe.f64	d6, d7
    10d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    10d8:	d4e6      	bmi.n	10a8 <calc_fixed_time_MW_sweep+0xe0>
	}
	const double achieved_step_size = (double) (mw_sweep_settings.step_size * unit_step_size_Hz);
    10da:	4b62      	ldr	r3, [pc, #392]	; (1264 <calc_fixed_time_MW_sweep+0x29c>)
    10dc:	691b      	ldr	r3, [r3, #16]
    10de:	ee07 3a90 	vmov	s15, r3
    10e2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    10e6:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
    10ea:	ee26 7b07 	vmul.f64	d7, d6, d7
    10ee:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	printf("Step size: %lu x unit step i.e. %.3g Hz\r\n", mw_sweep_settings.step_size, achieved_step_size);
    10f2:	4b5c      	ldr	r3, [pc, #368]	; (1264 <calc_fixed_time_MW_sweep+0x29c>)
    10f4:	6919      	ldr	r1, [r3, #16]
    10f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
    10fa:	485d      	ldr	r0, [pc, #372]	; (1270 <calc_fixed_time_MW_sweep+0x2a8>)
    10fc:	f000 fe00 	bl	1d00 <__printf_veneer>

	//calculate number of steps in sweep and round down to an integer (must fit in time available)
	mw_sweep_settings.num_steps = (span / achieved_step_size);
    1100:	ed97 5b04 	vldr	d5, [r7, #16]
    1104:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
    1108:	ee85 7b06 	vdiv.f64	d7, d5, d6
    110c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1110:	ee17 2a90 	vmov	r2, s15
    1114:	4b53      	ldr	r3, [pc, #332]	; (1264 <calc_fixed_time_MW_sweep+0x29c>)
    1116:	60da      	str	r2, [r3, #12]

	const uint32_t point_time_us = 1000000 * requested_sweep_period / (mw_sweep_settings.num_steps + 1); //period of each point in us
    1118:	ed97 7b02 	vldr	d7, [r7, #8]
    111c:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 1250 <calc_fixed_time_MW_sweep+0x288>
    1120:	ee27 5b06 	vmul.f64	d5, d7, d6
    1124:	4b4f      	ldr	r3, [pc, #316]	; (1264 <calc_fixed_time_MW_sweep+0x29c>)
    1126:	68db      	ldr	r3, [r3, #12]
    1128:	3301      	adds	r3, #1
    112a:	ee07 3a90 	vmov	s15, r3
    112e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    1132:	ee85 7b06 	vdiv.f64	d7, d5, d6
    1136:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    113a:	ee17 3a90 	vmov	r3, s15
    113e:	63fb      	str	r3, [r7, #60]	; 0x3c
//	printf("DEBUG point_time_us: %lu \r\n", point_time_us);
//	printf("DEBUG sweep time in us: %lu \r\n", point_time_us * (mw_sweep_settings.num_steps + 1));
	mw_sweep_settings.pop_cycles_per_point = (point_time_us - MW_STABILISE_TIME_US - TIMING_MARGIN_US - MW_PROCESSING_TIME_US)/POP_period_us;
    1140:	f241 3288 	movw	r2, #5000	; 0x1388
    1144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1146:	1a9b      	subs	r3, r3, r2
    1148:	2264      	movs	r2, #100	; 0x64
    114a:	1a9b      	subs	r3, r3, r2
    114c:	2201      	movs	r2, #1
    114e:	1a9a      	subs	r2, r3, r2
    1150:	4b45      	ldr	r3, [pc, #276]	; (1268 <calc_fixed_time_MW_sweep+0x2a0>)
    1152:	681b      	ldr	r3, [r3, #0]
    1154:	fbb2 f3f3 	udiv	r3, r2, r3
    1158:	4a42      	ldr	r2, [pc, #264]	; (1264 <calc_fixed_time_MW_sweep+0x29c>)
    115a:	6153      	str	r3, [r2, #20]
	printf("%lu points in sweep, %lu ms and %lu POP cycles each\r\n", mw_sweep_settings.num_steps + 1, point_time_us / 1000, mw_sweep_settings.pop_cycles_per_point);
    115c:	4b41      	ldr	r3, [pc, #260]	; (1264 <calc_fixed_time_MW_sweep+0x29c>)
    115e:	68db      	ldr	r3, [r3, #12]
    1160:	1c59      	adds	r1, r3, #1
    1162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1164:	4a43      	ldr	r2, [pc, #268]	; (1274 <calc_fixed_time_MW_sweep+0x2ac>)
    1166:	fba2 2303 	umull	r2, r3, r2, r3
    116a:	099a      	lsrs	r2, r3, #6
    116c:	4b3d      	ldr	r3, [pc, #244]	; (1264 <calc_fixed_time_MW_sweep+0x29c>)
    116e:	695b      	ldr	r3, [r3, #20]
    1170:	4841      	ldr	r0, [pc, #260]	; (1278 <calc_fixed_time_MW_sweep+0x2b0>)
    1172:	f000 fdc5 	bl	1d00 <__printf_veneer>
	uint32_t min_dwell_required_us = mw_sweep_settings.pop_cycles_per_point * POP_period_us + TIMING_MARGIN_US; //minimum dwell_time to achieve above
    1176:	4b3b      	ldr	r3, [pc, #236]	; (1264 <calc_fixed_time_MW_sweep+0x29c>)
    1178:	695b      	ldr	r3, [r3, #20]
    117a:	4a3b      	ldr	r2, [pc, #236]	; (1268 <calc_fixed_time_MW_sweep+0x2a0>)
    117c:	6812      	ldr	r2, [r2, #0]
    117e:	fb02 f303 	mul.w	r3, r2, r3
    1182:	2264      	movs	r2, #100	; 0x64
    1184:	4413      	add	r3, r2
    1186:	63bb      	str	r3, [r7, #56]	; 0x38
	mw_sweep_settings.dwell_time = point_time_us - MW_STABILISE_TIME_US - MW_PROCESSING_TIME_US; //actual programmed dwell time
    1188:	f241 3288 	movw	r2, #5000	; 0x1388
    118c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    118e:	1a9b      	subs	r3, r3, r2
    1190:	2201      	movs	r2, #1
    1192:	1a9b      	subs	r3, r3, r2
    1194:	4a33      	ldr	r2, [pc, #204]	; (1264 <calc_fixed_time_MW_sweep+0x29c>)
    1196:	61d3      	str	r3, [r2, #28]
	if (mw_sweep_settings.dwell_time < min_dwell_required_us) {
    1198:	4b32      	ldr	r3, [pc, #200]	; (1264 <calc_fixed_time_MW_sweep+0x29c>)
    119a:	69db      	ldr	r3, [r3, #28]
    119c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    119e:	429a      	cmp	r2, r3
    11a0:	d902      	bls.n	11a8 <calc_fixed_time_MW_sweep+0x1e0>
		mw_sweep_settings.dwell_time = min_dwell_required_us;
    11a2:	4a30      	ldr	r2, [pc, #192]	; (1264 <calc_fixed_time_MW_sweep+0x29c>)
    11a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11a6:	61d3      	str	r3, [r2, #28]
	}
//	printf("DEBUG dwell_time: %lu \r\n", mw_sweep_settings.dwell_time);
//	printf("DEBUG sweep time in us: %lu \r\n", (mw_sweep_settings.dwell_time + MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US) * (mw_sweep_settings.num_steps + 1));

	/* Double check - calculate the period of a sweep */
	double point_period = (double)(MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time)/1000000;
    11a8:	f241 3288 	movw	r2, #5000	; 0x1388
    11ac:	2301      	movs	r3, #1
    11ae:	441a      	add	r2, r3
    11b0:	4b2c      	ldr	r3, [pc, #176]	; (1264 <calc_fixed_time_MW_sweep+0x29c>)
    11b2:	69db      	ldr	r3, [r3, #28]
    11b4:	4413      	add	r3, r2
    11b6:	ee07 3a90 	vmov	s15, r3
    11ba:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    11be:	ed9f 5b24 	vldr	d5, [pc, #144]	; 1250 <calc_fixed_time_MW_sweep+0x288>
    11c2:	ee86 7b05 	vdiv.f64	d7, d6, d5
    11c6:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
//	printf("Point period %f\r\n", point_period);
	double calc_sweep_time = point_period * (mw_sweep_settings.num_steps + 1);
    11ca:	4b26      	ldr	r3, [pc, #152]	; (1264 <calc_fixed_time_MW_sweep+0x29c>)
    11cc:	68db      	ldr	r3, [r3, #12]
    11ce:	3301      	adds	r3, #1
    11d0:	ee07 3a90 	vmov	s15, r3
    11d4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    11d8:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
    11dc:	ee26 7b07 	vmul.f64	d7, d6, d7
    11e0:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
//	printf("calc_sweep_time %f\r\n", calc_sweep_time);
	double min_sweep_time = (double)((min_dwell_required_us + MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US) * (mw_sweep_settings.num_steps + 1)) / 1000000;
    11e4:	f241 3288 	movw	r2, #5000	; 0x1388
    11e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11ea:	4413      	add	r3, r2
    11ec:	2201      	movs	r2, #1
    11ee:	4413      	add	r3, r2
    11f0:	4a1c      	ldr	r2, [pc, #112]	; (1264 <calc_fixed_time_MW_sweep+0x29c>)
    11f2:	68d2      	ldr	r2, [r2, #12]
    11f4:	3201      	adds	r2, #1
    11f6:	fb02 f303 	mul.w	r3, r2, r3
    11fa:	ee07 3a90 	vmov	s15, r3
    11fe:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    1202:	ed9f 5b13 	vldr	d5, [pc, #76]	; 1250 <calc_fixed_time_MW_sweep+0x288>
    1206:	ee86 7b05 	vdiv.f64	d7, d6, d5
    120a:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	if (calc_sweep_time/min_sweep_time > 1.02) {
    120e:	ed97 5b18 	vldr	d5, [r7, #96]	; 0x60
    1212:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
    1216:	ee85 7b06 	vdiv.f64	d7, d5, d6
    121a:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 1258 <calc_fixed_time_MW_sweep+0x290>
    121e:	eeb4 7bc6 	vcmpe.f64	d7, d6
    1222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1226:	dd2b      	ble.n	1280 <calc_fixed_time_MW_sweep+0x2b8>
		printf("Sweep period %.4g s but could be reduced to %.4g s\r\n", calc_sweep_time, min_sweep_time);
    1228:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
    122c:	e9cd 2300 	strd	r2, r3, [sp]
    1230:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    1234:	4811      	ldr	r0, [pc, #68]	; (127c <calc_fixed_time_MW_sweep+0x2b4>)
    1236:	f000 fd63 	bl	1d00 <__printf_veneer>
    123a:	e029      	b.n	1290 <calc_fixed_time_MW_sweep+0x2c8>
    123c:	f3af 8000 	nop.w
    1240:	00000000 	.word	0x00000000
    1244:	41cdcd65 	.word	0x41cdcd65
    1248:	00000000 	.word	0x00000000
    124c:	4187d784 	.word	0x4187d784
    1250:	00000000 	.word	0x00000000
    1254:	412e8480 	.word	0x412e8480
    1258:	851eb852 	.word	0x851eb852
    125c:	3ff051eb 	.word	0x3ff051eb
    1260:	0801df3c 	.word	0x0801df3c
    1264:	200005b8 	.word	0x200005b8
    1268:	200005ac 	.word	0x200005ac
    126c:	000f4240 	.word	0x000f4240
    1270:	0801df8c 	.word	0x0801df8c
    1274:	10624dd3 	.word	0x10624dd3
    1278:	0801dfb8 	.word	0x0801dfb8
    127c:	0801dff0 	.word	0x0801dff0
	} else {
		printf("Sweep period %.4g s is pretty much optimal for %lu POP samples per point\r\n", calc_sweep_time, mw_sweep_settings.pop_cycles_per_point);
    1280:	4b57      	ldr	r3, [pc, #348]	; (13e0 <calc_fixed_time_MW_sweep+0x418>)
    1282:	695b      	ldr	r3, [r3, #20]
    1284:	9300      	str	r3, [sp, #0]
    1286:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    128a:	4856      	ldr	r0, [pc, #344]	; (13e4 <calc_fixed_time_MW_sweep+0x41c>)
    128c:	f000 fd38 	bl	1d00 <__printf_veneer>

	//Period of MW sweep isn't precise as it's based on measured average processing time
	//Steps are increased by up to 10% to increase the sweep period to guarantee horizontal scope sync
	//These are added to the end of the sweep so that the centre frequency is still central
	//Sweep period will be increased by a maximum of 1s
	if (scope_sync_time) {
    1290:	79fb      	ldrb	r3, [r7, #7]
    1292:	2b00      	cmp	r3, #0
    1294:	d044      	beq.n	1320 <calc_fixed_time_MW_sweep+0x358>

		mw_sweep_settings.num_steps = mw_sweep_settings.num_steps * 1.1 + 0.5;
    1296:	4b52      	ldr	r3, [pc, #328]	; (13e0 <calc_fixed_time_MW_sweep+0x418>)
    1298:	68db      	ldr	r3, [r3, #12]
    129a:	ee07 3a90 	vmov	s15, r3
    129e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    12a2:	ed9f 6b49 	vldr	d6, [pc, #292]	; 13c8 <calc_fixed_time_MW_sweep+0x400>
    12a6:	ee27 7b06 	vmul.f64	d7, d7, d6
    12aa:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    12ae:	ee37 7b06 	vadd.f64	d7, d7, d6
    12b2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    12b6:	ee17 2a90 	vmov	r2, s15
    12ba:	4b49      	ldr	r3, [pc, #292]	; (13e0 <calc_fixed_time_MW_sweep+0x418>)
    12bc:	60da      	str	r2, [r3, #12]
//		printf("DEBUG #steps: %lu \r\n", mw_sweep_settings.num_steps);
		calc_sweep_time = point_period * (mw_sweep_settings.num_steps + 1);
    12be:	4b48      	ldr	r3, [pc, #288]	; (13e0 <calc_fixed_time_MW_sweep+0x418>)
    12c0:	68db      	ldr	r3, [r3, #12]
    12c2:	3301      	adds	r3, #1
    12c4:	ee07 3a90 	vmov	s15, r3
    12c8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    12cc:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
    12d0:	ee26 7b07 	vmul.f64	d7, d6, d7
    12d4:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60

		/* Decrease number of steps if additional 10% is >1s */
//		printf("DEBUG calc_sweep_time - requested_sweep_period: %f \r\n", calc_sweep_time - requested_sweep_period);
		if ((calc_sweep_time - requested_sweep_period) > 1){
    12d8:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
    12dc:	ed97 7b02 	vldr	d7, [r7, #8]
    12e0:	ee36 7b47 	vsub.f64	d7, d6, d7
    12e4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    12e8:	eeb4 7bc6 	vcmpe.f64	d7, d6
    12ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    12f0:	dd11      	ble.n	1316 <calc_fixed_time_MW_sweep+0x34e>
			mw_sweep_settings.num_steps--;
    12f2:	4b3b      	ldr	r3, [pc, #236]	; (13e0 <calc_fixed_time_MW_sweep+0x418>)
    12f4:	68db      	ldr	r3, [r3, #12]
    12f6:	3b01      	subs	r3, #1
    12f8:	4a39      	ldr	r2, [pc, #228]	; (13e0 <calc_fixed_time_MW_sweep+0x418>)
    12fa:	60d3      	str	r3, [r2, #12]
			calc_sweep_time = point_period * (mw_sweep_settings.num_steps + 1);
    12fc:	4b38      	ldr	r3, [pc, #224]	; (13e0 <calc_fixed_time_MW_sweep+0x418>)
    12fe:	68db      	ldr	r3, [r3, #12]
    1300:	3301      	adds	r3, #1
    1302:	ee07 3a90 	vmov	s15, r3
    1306:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    130a:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
    130e:	ee26 7b07 	vmul.f64	d7, d6, d7
    1312:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
		}
//		printf("DEBUG #steps: %lu \r\n", mw_sweep_settings.num_steps);

		//Double check of the sweep period selected
		printf("Final calculated sweep period, including scope sync: %.3g s\r\n", calc_sweep_time);
    1316:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    131a:	4833      	ldr	r0, [pc, #204]	; (13e8 <calc_fixed_time_MW_sweep+0x420>)
    131c:	f000 fcf0 	bl	1d00 <__printf_veneer>
	}

	/* Can avoid spurs if frequency requested can be encoded exactly  */
	start_freq = ((long)(start_freq/unit_step_size_Hz)) * unit_step_size_Hz;
    1320:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
    1324:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
    1328:	ee85 7b06 	vdiv.f64	d7, d5, d6
    132c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    1330:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    1334:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
    1338:	ee26 7b07 	vmul.f64	d7, d6, d7
    133c:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50

	/* Calculate the N division ratio, extracting the fractional and integer parts */
	const double N = ((start_freq * mw_sweep_settings.k) / REF_FREQ);
    1340:	4b27      	ldr	r3, [pc, #156]	; (13e0 <calc_fixed_time_MW_sweep+0x418>)
    1342:	785b      	ldrb	r3, [r3, #1]
    1344:	ee07 3a90 	vmov	s15, r3
    1348:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    134c:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
    1350:	ee26 6b07 	vmul.f64	d6, d6, d7
    1354:	ed9f 5b1e 	vldr	d5, [pc, #120]	; 13d0 <calc_fixed_time_MW_sweep+0x408>
    1358:	ee86 7b05 	vdiv.f64	d7, d6, d5
    135c:	ed87 7b08 	vstr	d7, [r7, #32]
	mw_sweep_settings.NINT = N;
    1360:	ed97 7b08 	vldr	d7, [r7, #32]
    1364:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1368:	ee17 2a90 	vmov	r2, s15
    136c:	4b1c      	ldr	r3, [pc, #112]	; (13e0 <calc_fixed_time_MW_sweep+0x418>)
    136e:	605a      	str	r2, [r3, #4]
	mw_sweep_settings.NFRAC_start = ((N - mw_sweep_settings.NINT) * (1 << 24)) + 0.5;
    1370:	4b1b      	ldr	r3, [pc, #108]	; (13e0 <calc_fixed_time_MW_sweep+0x418>)
    1372:	685b      	ldr	r3, [r3, #4]
    1374:	ee07 3a90 	vmov	s15, r3
    1378:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    137c:	ed97 6b08 	vldr	d6, [r7, #32]
    1380:	ee36 7b47 	vsub.f64	d7, d6, d7
    1384:	ed9f 6b14 	vldr	d6, [pc, #80]	; 13d8 <calc_fixed_time_MW_sweep+0x410>
    1388:	ee27 7b06 	vmul.f64	d7, d7, d6
    138c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    1390:	ee37 7b06 	vadd.f64	d7, d7, d6
    1394:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1398:	ee17 2a90 	vmov	r2, s15
    139c:	4b10      	ldr	r3, [pc, #64]	; (13e0 <calc_fixed_time_MW_sweep+0x418>)
    139e:	609a      	str	r2, [r3, #8]
	mw_sweep_settings.current_point = 0;
    13a0:	4b0f      	ldr	r3, [pc, #60]	; (13e0 <calc_fixed_time_MW_sweep+0x418>)
    13a2:	2200      	movs	r2, #0
    13a4:	625a      	str	r2, [r3, #36]	; 0x24
	mw_sweep_settings.sweep_period = calc_sweep_time;
    13a6:	490e      	ldr	r1, [pc, #56]	; (13e0 <calc_fixed_time_MW_sweep+0x418>)
    13a8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    13ac:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	mw_sweep_settings.stabilise_time = MW_STABILISE_TIME_US; //Global MW stabilisation time
    13b0:	f241 3288 	movw	r2, #5000	; 0x1388
    13b4:	4b0a      	ldr	r3, [pc, #40]	; (13e0 <calc_fixed_time_MW_sweep+0x418>)
    13b6:	619a      	str	r2, [r3, #24]
//	print_mw_sweep_settings();
	return(true);
    13b8:	2301      	movs	r3, #1
}
    13ba:	4618      	mov	r0, r3
    13bc:	3768      	adds	r7, #104	; 0x68
    13be:	46bd      	mov	sp, r7
    13c0:	bd80      	pop	{r7, pc}
    13c2:	bf00      	nop
    13c4:	f3af 8000 	nop.w
    13c8:	9999999a 	.word	0x9999999a
    13cc:	3ff19999 	.word	0x3ff19999
    13d0:	00000000 	.word	0x00000000
    13d4:	4187d784 	.word	0x4187d784
    13d8:	00000000 	.word	0x00000000
    13dc:	41700000 	.word	0x41700000
    13e0:	200005b8 	.word	0x200005b8
    13e4:	0801e028 	.word	0x0801e028
    13e8:	0801e074 	.word	0x0801e074

000013ec <calculate_k>:

/**
  * @brief  Calculates k value
  * @retval k
  */
static const uint32_t calculate_k(const double frequency) {
    13ec:	b480      	push	{r7}
    13ee:	b085      	sub	sp, #20
    13f0:	af00      	add	r7, sp, #0
    13f2:	ed87 0b00 	vstr	d0, [r7]
	uint32_t k = VCO_MAX_FREQ / frequency;
    13f6:	ed9f 5b10 	vldr	d5, [pc, #64]	; 1438 <calculate_k+0x4c>
    13fa:	ed97 6b00 	vldr	d6, [r7]
    13fe:	ee85 7b06 	vdiv.f64	d7, d5, d6
    1402:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1406:	ee17 3a90 	vmov	r3, s15
    140a:	60fb      	str	r3, [r7, #12]

	if (k != 1) {
    140c:	68fb      	ldr	r3, [r7, #12]
    140e:	2b01      	cmp	r3, #1
    1410:	d00b      	beq.n	142a <calculate_k+0x3e>
		while (k > 62 || k % 2) {
    1412:	e002      	b.n	141a <calculate_k+0x2e>
			k --;
    1414:	68fb      	ldr	r3, [r7, #12]
    1416:	3b01      	subs	r3, #1
    1418:	60fb      	str	r3, [r7, #12]
		while (k > 62 || k % 2) {
    141a:	68fb      	ldr	r3, [r7, #12]
    141c:	2b3e      	cmp	r3, #62	; 0x3e
    141e:	d8f9      	bhi.n	1414 <calculate_k+0x28>
    1420:	68fb      	ldr	r3, [r7, #12]
    1422:	f003 0301 	and.w	r3, r3, #1
    1426:	2b00      	cmp	r3, #0
    1428:	d1f4      	bne.n	1414 <calculate_k+0x28>
		}
	}
	return (k);
    142a:	68fb      	ldr	r3, [r7, #12]
}
    142c:	4618      	mov	r0, r3
    142e:	3714      	adds	r7, #20
    1430:	46bd      	mov	sp, r7
    1432:	f85d 7b04 	ldr.w	r7, [sp], #4
    1436:	4770      	bx	lr
    1438:	20000000 	.word	0x20000000
    143c:	41ee8c21 	.word	0x41ee8c21

00001440 <start_POP_calibration>:

/**
  * @brief  Starts the process of measuring the POP period
  * @retval None
  */
void start_POP_calibration(const bool cal_only) {
    1440:	b580      	push	{r7, lr}
    1442:	b082      	sub	sp, #8
    1444:	af00      	add	r7, sp, #0
    1446:	4603      	mov	r3, r0
    1448:	71fb      	strb	r3, [r7, #7]
	/* Requires ADC to be initialised and for HAL_ADC_ConvCpltCallback to be active */
	if (cal_only == true) {
    144a:	79fb      	ldrb	r3, [r7, #7]
    144c:	2b00      	cmp	r3, #0
    144e:	d003      	beq.n	1458 <start_POP_calibration+0x18>
		mw_sweep_settings.sweep_mode = POP_CAL_ONLY;
    1450:	4b0f      	ldr	r3, [pc, #60]	; (1490 <start_POP_calibration+0x50>)
    1452:	2201      	movs	r2, #1
    1454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); 	//Sets MW_invalid pin high to reset POP cycle
    1458:	2201      	movs	r2, #1
    145a:	2102      	movs	r1, #2
    145c:	480d      	ldr	r0, [pc, #52]	; (1494 <start_POP_calibration+0x54>)
    145e:	f000 fc37 	bl	1cd0 <__HAL_GPIO_WritePin_veneer>
	HAL_Delay(10); // 10ms in case ADC was part-way through a conversion
    1462:	200a      	movs	r0, #10
    1464:	f000 fc64 	bl	1d30 <__HAL_Delay_veneer>
	sample_count = 0; //reset sample count
    1468:	4b0b      	ldr	r3, [pc, #44]	; (1498 <start_POP_calibration+0x58>)
    146a:	2200      	movs	r2, #0
    146c:	801a      	strh	r2, [r3, #0]
	mw_sweep_settings.state = MW_CALIBRATE;
    146e:	4b08      	ldr	r3, [pc, #32]	; (1490 <start_POP_calibration+0x50>)
    1470:	2204      	movs	r2, #4
    1472:	701a      	strb	r2, [r3, #0]
	start_timer(MW_TIMER); //reset MW_timer and start counting
    1474:	4b09      	ldr	r3, [pc, #36]	; (149c <start_POP_calibration+0x5c>)
    1476:	681b      	ldr	r3, [r3, #0]
    1478:	4618      	mov	r0, r3
    147a:	f000 fac3 	bl	1a04 <start_timer>
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Restart POP cycle
    147e:	2200      	movs	r2, #0
    1480:	2102      	movs	r1, #2
    1482:	4804      	ldr	r0, [pc, #16]	; (1494 <start_POP_calibration+0x54>)
    1484:	f000 fc24 	bl	1cd0 <__HAL_GPIO_WritePin_veneer>
	#ifdef MW_VERBOSE
		printf("POP calibration started\r\n");
	#endif //MW_VERBOSE
}
    1488:	bf00      	nop
    148a:	3708      	adds	r7, #8
    148c:	46bd      	mov	sp, r7
    148e:	bd80      	pop	{r7, pc}
    1490:	200005b8 	.word	0x200005b8
    1494:	58020400 	.word	0x58020400
    1498:	200005aa 	.word	0x200005aa
    149c:	20000018 	.word	0x20000018

000014a0 <start_MW_sweep>:

/**
  * @brief  Starts a MW sweep
  * @retval Success/failure
  */
static const bool start_MW_sweep(const bool single_sweep) {
    14a0:	b580      	push	{r7, lr}
    14a2:	b082      	sub	sp, #8
    14a4:	af00      	add	r7, sp, #0
    14a6:	4603      	mov	r3, r0
    14a8:	71fb      	strb	r3, [r7, #7]
	//uses settings from the mw_sweep_settings structure
	if (single_sweep == true) {
    14aa:	79fb      	ldrb	r3, [r7, #7]
    14ac:	2b00      	cmp	r3, #0
    14ae:	d003      	beq.n	14b8 <start_MW_sweep+0x18>
		mw_sweep_settings.sweep_mode = SWEEP_ONCE;
    14b0:	4b1c      	ldr	r3, [pc, #112]	; (1524 <start_MW_sweep+0x84>)
    14b2:	2202      	movs	r2, #2
    14b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // Assume MW lock, the LED will be disabled if lock fails.
    14b8:	2201      	movs	r2, #1
    14ba:	2102      	movs	r1, #2
    14bc:	481a      	ldr	r0, [pc, #104]	; (1528 <start_MW_sweep+0x88>)
    14be:	f000 fc07 	bl	1cd0 <__HAL_GPIO_WritePin_veneer>

	#ifdef MW_VERBOSE
		printf("Setting trigger output low \r\n");
	#endif //MW_VERBOSE

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
    14c2:	2201      	movs	r2, #1
    14c4:	2102      	movs	r1, #2
    14c6:	4819      	ldr	r0, [pc, #100]	; (152c <start_MW_sweep+0x8c>)
    14c8:	f000 fc02 	bl	1cd0 <__HAL_GPIO_WritePin_veneer>
//	set_frequency(mw_sweep_settings.NINT, mw_sweep_settings.NFRAC_start, mw_sweep_settings.k, MANUAL_MUTE); //program initial MW frequency
	set_freq_regs(mw_sweep_settings.NINT, mw_sweep_settings.NFRAC_start, mw_sweep_settings.k); //program initial MW frequency
    14cc:	4b15      	ldr	r3, [pc, #84]	; (1524 <start_MW_sweep+0x84>)
    14ce:	685b      	ldr	r3, [r3, #4]
    14d0:	4a14      	ldr	r2, [pc, #80]	; (1524 <start_MW_sweep+0x84>)
    14d2:	6891      	ldr	r1, [r2, #8]
    14d4:	4a13      	ldr	r2, [pc, #76]	; (1524 <start_MW_sweep+0x84>)
    14d6:	7852      	ldrb	r2, [r2, #1]
    14d8:	4618      	mov	r0, r3
    14da:	f7ff fb41 	bl	b60 <set_freq_regs>
	mw_sweep_settings.state = MW_STABILISING; //waiting for MW output to stabilise
    14de:	4b11      	ldr	r3, [pc, #68]	; (1524 <start_MW_sweep+0x84>)
    14e0:	2202      	movs	r2, #2
    14e2:	701a      	strb	r2, [r3, #0]
	mw_sweep_settings.current_point = 0; //currently on at start of ramp i.e. point 0
    14e4:	4b0f      	ldr	r3, [pc, #60]	; (1524 <start_MW_sweep+0x84>)
    14e6:	2200      	movs	r2, #0
    14e8:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_Delay(10); // 10ms in case ADC was part-way through a conversion
    14ea:	200a      	movs	r0, #10
    14ec:	f000 fc20 	bl	1d30 <__HAL_Delay_veneer>
	sample_count = 0; //reset sample count
    14f0:	4b0f      	ldr	r3, [pc, #60]	; (1530 <start_MW_sweep+0x90>)
    14f2:	2200      	movs	r2, #0
    14f4:	801a      	strh	r2, [r3, #0]
	/* Output used for triggering external scope */
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
    14f6:	2200      	movs	r2, #0
    14f8:	2101      	movs	r1, #1
    14fa:	480e      	ldr	r0, [pc, #56]	; (1534 <start_MW_sweep+0x94>)
    14fc:	f000 fbe8 	bl	1cd0 <__HAL_GPIO_WritePin_veneer>
	start_timer(MW_TIMER); //reset MW_timer (MW step timer) and start counting
    1500:	4b0d      	ldr	r3, [pc, #52]	; (1538 <start_MW_sweep+0x98>)
    1502:	681b      	ldr	r3, [r3, #0]
    1504:	4618      	mov	r0, r3
    1506:	f000 fa7d 	bl	1a04 <start_timer>
	start_timer(SWEEP_TIMER); //reset general (sweep) timer and start counting
    150a:	4b0c      	ldr	r3, [pc, #48]	; (153c <start_MW_sweep+0x9c>)
    150c:	681b      	ldr	r3, [r3, #0]
    150e:	4618      	mov	r0, r3
    1510:	f000 fa78 	bl	1a04 <start_timer>
	sample_count = 0; //reset sample count
    1514:	4b06      	ldr	r3, [pc, #24]	; (1530 <start_MW_sweep+0x90>)
    1516:	2200      	movs	r2, #0
    1518:	801a      	strh	r2, [r3, #0]
	//known limitation - if the ADC has been recently triggered and HAL_ADC_ConvCpltCallback will increment sample_count by 1
	return(true);
    151a:	2301      	movs	r3, #1
}
    151c:	4618      	mov	r0, r3
    151e:	3708      	adds	r7, #8
    1520:	46bd      	mov	sp, r7
    1522:	bd80      	pop	{r7, pc}
    1524:	200005b8 	.word	0x200005b8
    1528:	58021000 	.word	0x58021000
    152c:	58020400 	.word	0x58020400
    1530:	200005aa 	.word	0x200005aa
    1534:	58021800 	.word	0x58021800
    1538:	20000018 	.word	0x20000018
    153c:	2000001c 	.word	0x2000001c

00001540 <start_continuous_MW_sweep>:

/**
  * @brief  Starts a continuous MW calibrate/sweep cycle
  * @retval Success/failure
  */
void start_continuous_MW_sweep(void) {
    1540:	b580      	push	{r7, lr}
    1542:	af00      	add	r7, sp, #0
	mw_sweep_settings.sweep_mode = CONTINUOUS_SWEEP;
    1544:	4b04      	ldr	r3, [pc, #16]	; (1558 <start_continuous_MW_sweep+0x18>)
    1546:	2200      	movs	r2, #0
    1548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	start_POP_calibration(false);
    154c:	2000      	movs	r0, #0
    154e:	f7ff ff77 	bl	1440 <start_POP_calibration>
}
    1552:	bf00      	nop
    1554:	bd80      	pop	{r7, pc}
    1556:	bf00      	nop
    1558:	200005b8 	.word	0x200005b8

0000155c <MW_update>:

/**
  * @brief  Checks MW status to see if a timer has elapsed and if frequency needs changing.
  * @retval True if an action was taken
  */
const bool MW_update(void) {
    155c:	b580      	push	{r7, lr}
    155e:	b08a      	sub	sp, #40	; 0x28
    1560:	af04      	add	r7, sp, #16
	uint8_t local_copy_of_MW_state = mw_sweep_settings.state; //hack to make switch statement behave
    1562:	4b95      	ldr	r3, [pc, #596]	; (17b8 <MW_update+0x25c>)
    1564:	781b      	ldrb	r3, [r3, #0]
    1566:	75bb      	strb	r3, [r7, #22]
	//switch (mw_sweep_settings.state)
	bool action_taken = false;
    1568:	2300      	movs	r3, #0
    156a:	75fb      	strb	r3, [r7, #23]
	uint32_t sweep_period_us;
	switch (local_copy_of_MW_state)
    156c:	7dbb      	ldrb	r3, [r7, #22]
    156e:	2b04      	cmp	r3, #4
    1570:	f200 8109 	bhi.w	1786 <MW_update+0x22a>
    1574:	a201      	add	r2, pc, #4	; (adr r2, 157c <MW_update+0x20>)
    1576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    157a:	bf00      	nop
    157c:	0000179f 	.word	0x0000179f
    1580:	0000179f 	.word	0x0000179f
    1584:	00001591 	.word	0x00001591
    1588:	000015d3 	.word	0x000015d3
    158c:	00001713 	.word	0x00001713
		case MW_STOPPED:
		case MW_FIXED_FREQ:
			break; //no action to take

		case MW_STABILISING: //waiting for MW output to stabilise
			if (check_timer(MW_TIMER) < MW_STABILISE_TIME_US) return(false); //Still waiting, no action taken
    1590:	4b8a      	ldr	r3, [pc, #552]	; (17bc <MW_update+0x260>)
    1592:	681b      	ldr	r3, [r3, #0]
    1594:	4618      	mov	r0, r3
    1596:	f000 fa65 	bl	1a64 <check_timer>
    159a:	4603      	mov	r3, r0
    159c:	f241 3288 	movw	r2, #5000	; 0x1388
    15a0:	4293      	cmp	r3, r2
    15a2:	d201      	bcs.n	15a8 <MW_update+0x4c>
    15a4:	2300      	movs	r3, #0
    15a6:	e0fe      	b.n	17a6 <MW_update+0x24a>
			//Otherwise MW stabilisation timer has elapsed
			stop_timer(MW_TIMER);
    15a8:	4b84      	ldr	r3, [pc, #528]	; (17bc <MW_update+0x260>)
    15aa:	681b      	ldr	r3, [r3, #0]
    15ac:	4618      	mov	r0, r3
    15ae:	f000 fa47 	bl	1a40 <stop_timer>
			HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Sets MW_invalid pin low as MW now stable
    15b2:	2200      	movs	r2, #0
    15b4:	2102      	movs	r1, #2
    15b6:	4882      	ldr	r0, [pc, #520]	; (17c0 <MW_update+0x264>)
    15b8:	f000 fb8a 	bl	1cd0 <__HAL_GPIO_WritePin_veneer>
			mw_sweep_settings.state = MW_DWELL;
    15bc:	4b7e      	ldr	r3, [pc, #504]	; (17b8 <MW_update+0x25c>)
    15be:	2203      	movs	r2, #3
    15c0:	701a      	strb	r2, [r3, #0]
			start_timer(MW_TIMER); //Restart timer for DWELL time
    15c2:	4b7e      	ldr	r3, [pc, #504]	; (17bc <MW_update+0x260>)
    15c4:	681b      	ldr	r3, [r3, #0]
    15c6:	4618      	mov	r0, r3
    15c8:	f000 fa1c 	bl	1a04 <start_timer>
			action_taken = true;
    15cc:	2301      	movs	r3, #1
    15ce:	75fb      	strb	r3, [r7, #23]
			break;
    15d0:	e0e8      	b.n	17a4 <MW_update+0x248>

		case MW_DWELL: //valid MW output waiting for end of dwell time
			if (check_timer(MW_TIMER) < mw_sweep_settings.dwell_time) return(false); //Still waiting
    15d2:	4b7a      	ldr	r3, [pc, #488]	; (17bc <MW_update+0x260>)
    15d4:	681b      	ldr	r3, [r3, #0]
    15d6:	4618      	mov	r0, r3
    15d8:	f000 fa44 	bl	1a64 <check_timer>
    15dc:	4602      	mov	r2, r0
    15de:	4b76      	ldr	r3, [pc, #472]	; (17b8 <MW_update+0x25c>)
    15e0:	69db      	ldr	r3, [r3, #28]
    15e2:	429a      	cmp	r2, r3
    15e4:	d201      	bcs.n	15ea <MW_update+0x8e>
    15e6:	2300      	movs	r3, #0
    15e8:	e0dd      	b.n	17a6 <MW_update+0x24a>
			//Otherwise dwell timer has elapsed
			action_taken = true;
    15ea:	2301      	movs	r3, #1
    15ec:	75fb      	strb	r3, [r7, #23]
			stop_timer(MW_TIMER);
    15ee:	4b73      	ldr	r3, [pc, #460]	; (17bc <MW_update+0x260>)
    15f0:	681b      	ldr	r3, [r3, #0]
    15f2:	4618      	mov	r0, r3
    15f4:	f000 fa24 	bl	1a40 <stop_timer>
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggles red LED
    15f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    15fc:	4870      	ldr	r0, [pc, #448]	; (17c0 <MW_update+0x264>)
    15fe:	f000 fb33 	bl	1c68 <__HAL_GPIO_TogglePin_veneer>
			HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high as about to change frequency
    1602:	2201      	movs	r2, #1
    1604:	2102      	movs	r1, #2
    1606:	486e      	ldr	r0, [pc, #440]	; (17c0 <MW_update+0x264>)
    1608:	f000 fb62 	bl	1cd0 <__HAL_GPIO_WritePin_veneer>
			mw_sweep_settings.state = MW_STABILISING;
    160c:	4b6a      	ldr	r3, [pc, #424]	; (17b8 <MW_update+0x25c>)
    160e:	2202      	movs	r2, #2
    1610:	701a      	strb	r2, [r3, #0]
			if (mw_sweep_settings.current_point == mw_sweep_settings.num_steps) { // All steps completed, tidy up and restart next sweep
    1612:	4b69      	ldr	r3, [pc, #420]	; (17b8 <MW_update+0x25c>)
    1614:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1616:	4b68      	ldr	r3, [pc, #416]	; (17b8 <MW_update+0x25c>)
    1618:	68db      	ldr	r3, [r3, #12]
    161a:	429a      	cmp	r2, r3
    161c:	d15c      	bne.n	16d8 <MW_update+0x17c>
				HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
    161e:	2201      	movs	r2, #1
    1620:	2101      	movs	r1, #1
    1622:	4868      	ldr	r0, [pc, #416]	; (17c4 <MW_update+0x268>)
    1624:	f000 fb54 	bl	1cd0 <__HAL_GPIO_WritePin_veneer>
				sweep_period_us=check_timer(SWEEP_TIMER);
    1628:	4b67      	ldr	r3, [pc, #412]	; (17c8 <MW_update+0x26c>)
    162a:	681b      	ldr	r3, [r3, #0]
    162c:	4618      	mov	r0, r3
    162e:	f000 fa19 	bl	1a64 <check_timer>
    1632:	60b8      	str	r0, [r7, #8]
				stop_timer(SWEEP_TIMER);
    1634:	4b64      	ldr	r3, [pc, #400]	; (17c8 <MW_update+0x26c>)
    1636:	681b      	ldr	r3, [r3, #0]
    1638:	4618      	mov	r0, r3
    163a:	f000 fa01 	bl	1a40 <stop_timer>
				printf("Sweep complete in %.4g s. Expected %.4g s. %u samples\r\n", (double)(sweep_period_us)/1000000, mw_sweep_settings.sweep_period, sample_count);
    163e:	68bb      	ldr	r3, [r7, #8]
    1640:	ee07 3a90 	vmov	s15, r3
    1644:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    1648:	ed9f 6b59 	vldr	d6, [pc, #356]	; 17b0 <MW_update+0x254>
    164c:	ee87 5b06 	vdiv.f64	d5, d7, d6
    1650:	4b59      	ldr	r3, [pc, #356]	; (17b8 <MW_update+0x25c>)
    1652:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
    1656:	495d      	ldr	r1, [pc, #372]	; (17cc <MW_update+0x270>)
    1658:	8809      	ldrh	r1, [r1, #0]
    165a:	b289      	uxth	r1, r1
    165c:	9102      	str	r1, [sp, #8]
    165e:	e9cd 2300 	strd	r2, r3, [sp]
    1662:	ec53 2b15 	vmov	r2, r3, d5
    1666:	485a      	ldr	r0, [pc, #360]	; (17d0 <MW_update+0x274>)
    1668:	f000 fb4a 	bl	1d00 <__printf_veneer>
				/* Check if the ADC registered the correct number of samples */
				uint16_t expected_samples = mw_sweep_settings.pop_cycles_per_point * (mw_sweep_settings.num_steps + 1);
    166c:	4b52      	ldr	r3, [pc, #328]	; (17b8 <MW_update+0x25c>)
    166e:	695b      	ldr	r3, [r3, #20]
    1670:	b29a      	uxth	r2, r3
    1672:	4b51      	ldr	r3, [pc, #324]	; (17b8 <MW_update+0x25c>)
    1674:	68db      	ldr	r3, [r3, #12]
    1676:	3301      	adds	r3, #1
    1678:	b29b      	uxth	r3, r3
    167a:	fb12 f303 	smulbb	r3, r2, r3
    167e:	80fb      	strh	r3, [r7, #6]
				uint16_t possible_samples = expected_samples + mw_sweep_settings.num_steps + 1;
    1680:	4b4d      	ldr	r3, [pc, #308]	; (17b8 <MW_update+0x25c>)
    1682:	68db      	ldr	r3, [r3, #12]
    1684:	b29a      	uxth	r2, r3
    1686:	88fb      	ldrh	r3, [r7, #6]
    1688:	4413      	add	r3, r2
    168a:	b29b      	uxth	r3, r3
    168c:	3301      	adds	r3, #1
    168e:	80bb      	strh	r3, [r7, #4]
//				printf("Sweep generated %u full POP cycles and registered %u samples\r\n", expected_samples, sample_count);
				if ((sample_count == expected_samples) || (sample_count == possible_samples)) {
    1690:	4b4e      	ldr	r3, [pc, #312]	; (17cc <MW_update+0x270>)
    1692:	881b      	ldrh	r3, [r3, #0]
    1694:	b29b      	uxth	r3, r3
    1696:	88fa      	ldrh	r2, [r7, #6]
    1698:	429a      	cmp	r2, r3
    169a:	d010      	beq.n	16be <MW_update+0x162>
    169c:	4b4b      	ldr	r3, [pc, #300]	; (17cc <MW_update+0x270>)
    169e:	881b      	ldrh	r3, [r3, #0]
    16a0:	b29b      	uxth	r3, r3
    16a2:	88ba      	ldrh	r2, [r7, #4]
    16a4:	429a      	cmp	r2, r3
    16a6:	d00a      	beq.n	16be <MW_update+0x162>
					#ifdef MW_VERBOSE
					printf("Sweep generated and successfully registered %u samples\r\n", sample_count);
					#endif //MW_VERBOSE
				} else {
					printf("Warning - sweep generated %u samples but %u registered\r\n", expected_samples, sample_count);
    16a8:	88fb      	ldrh	r3, [r7, #6]
    16aa:	4a48      	ldr	r2, [pc, #288]	; (17cc <MW_update+0x270>)
    16ac:	8812      	ldrh	r2, [r2, #0]
    16ae:	b292      	uxth	r2, r2
    16b0:	4619      	mov	r1, r3
    16b2:	4848      	ldr	r0, [pc, #288]	; (17d4 <MW_update+0x278>)
    16b4:	f000 fb24 	bl	1d00 <__printf_veneer>
					printf("Timing of last sample is marginal\r\n");
    16b8:	4847      	ldr	r0, [pc, #284]	; (17d8 <MW_update+0x27c>)
    16ba:	f000 fb31 	bl	1d20 <__puts_veneer>
//				printf("MW processing time: %lu us\r\n", measured_processing_time_us);
//				if ((double)(measured_processing_time_us)/MW_PROCESSING_TIME_US > 1.1) {
//					printf("Warning - measured MW processing time (%lu us)is larger than the %lu us expected\r\n", measured_processing_time_us, MW_PROCESSING_TIME_US);
//				}
				#endif //MW_VERBOSE
				if (mw_sweep_settings.sweep_mode == SWEEP_ONCE) {//have reached the end of a single sweep and should stop
    16be:	4b3e      	ldr	r3, [pc, #248]	; (17b8 <MW_update+0x25c>)
    16c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    16c4:	2b02      	cmp	r3, #2
    16c6:	d103      	bne.n	16d0 <MW_update+0x174>
					mw_sweep_settings.state = MW_STOPPED;
    16c8:	4b3b      	ldr	r3, [pc, #236]	; (17b8 <MW_update+0x25c>)
    16ca:	2200      	movs	r2, #0
    16cc:	701a      	strb	r2, [r3, #0]
						printf("Failure to program value to DAC \r\n");
						Error_Handler();
					}
				#endif //RAMP_DAC
			}
			break;
    16ce:	e069      	b.n	17a4 <MW_update+0x248>
					start_MW_sweep(false); //restart the next MW sweep without updating mw_sweep_settings.sweep_mode
    16d0:	2000      	movs	r0, #0
    16d2:	f7ff fee5 	bl	14a0 <start_MW_sweep>
			break;
    16d6:	e065      	b.n	17a4 <MW_update+0x248>
				mw_sweep_settings.current_point++; //increment point counter
    16d8:	4b37      	ldr	r3, [pc, #220]	; (17b8 <MW_update+0x25c>)
    16da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    16dc:	3301      	adds	r3, #1
    16de:	4a36      	ldr	r2, [pc, #216]	; (17b8 <MW_update+0x25c>)
    16e0:	6253      	str	r3, [r2, #36]	; 0x24
				uint32_t local_NFRAC = mw_sweep_settings.NFRAC_start + mw_sweep_settings.step_size * mw_sweep_settings.current_point;
    16e2:	4b35      	ldr	r3, [pc, #212]	; (17b8 <MW_update+0x25c>)
    16e4:	689a      	ldr	r2, [r3, #8]
    16e6:	4b34      	ldr	r3, [pc, #208]	; (17b8 <MW_update+0x25c>)
    16e8:	691b      	ldr	r3, [r3, #16]
    16ea:	4933      	ldr	r1, [pc, #204]	; (17b8 <MW_update+0x25c>)
    16ec:	6a49      	ldr	r1, [r1, #36]	; 0x24
    16ee:	fb01 f303 	mul.w	r3, r1, r3
    16f2:	4413      	add	r3, r2
    16f4:	60fb      	str	r3, [r7, #12]
				set_freq_regs(mw_sweep_settings.NINT, local_NFRAC, mw_sweep_settings.k); //program new MW frequency
    16f6:	4b30      	ldr	r3, [pc, #192]	; (17b8 <MW_update+0x25c>)
    16f8:	685b      	ldr	r3, [r3, #4]
    16fa:	4a2f      	ldr	r2, [pc, #188]	; (17b8 <MW_update+0x25c>)
    16fc:	7852      	ldrb	r2, [r2, #1]
    16fe:	68f9      	ldr	r1, [r7, #12]
    1700:	4618      	mov	r0, r3
    1702:	f7ff fa2d 	bl	b60 <set_freq_regs>
				start_timer(MW_TIMER); //Restart timer for MW stabilisation time
    1706:	4b2d      	ldr	r3, [pc, #180]	; (17bc <MW_update+0x260>)
    1708:	681b      	ldr	r3, [r3, #0]
    170a:	4618      	mov	r0, r3
    170c:	f000 f97a 	bl	1a04 <start_timer>
			break;
    1710:	e048      	b.n	17a4 <MW_update+0x248>

		case MW_CALIBRATE: //Measures the elapsed time taken for 101 samples (100 POP cycles)
			if (sample_count >= 100) {//100 or more POP cycles have elapsed
    1712:	4b2e      	ldr	r3, [pc, #184]	; (17cc <MW_update+0x270>)
    1714:	881b      	ldrh	r3, [r3, #0]
    1716:	b29b      	uxth	r3, r3
    1718:	2b63      	cmp	r3, #99	; 0x63
    171a:	d942      	bls.n	17a2 <MW_update+0x246>
				uint32_t total_POP_cal_period = check_timer(MW_TIMER);
    171c:	4b27      	ldr	r3, [pc, #156]	; (17bc <MW_update+0x260>)
    171e:	681b      	ldr	r3, [r3, #0]
    1720:	4618      	mov	r0, r3
    1722:	f000 f99f 	bl	1a64 <check_timer>
    1726:	6138      	str	r0, [r7, #16]
				POP_period_us = (float)(total_POP_cal_period) / 100 + 0.5;
    1728:	693b      	ldr	r3, [r7, #16]
    172a:	ee07 3a90 	vmov	s15, r3
    172e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    1732:	eddf 6a2a 	vldr	s13, [pc, #168]	; 17dc <MW_update+0x280>
    1736:	eec7 7a26 	vdiv.f32	s15, s14, s13
    173a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    173e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    1742:	ee37 7b06 	vadd.f64	d7, d7, d6
    1746:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    174a:	ee17 2a90 	vmov	r2, s15
    174e:	4b24      	ldr	r3, [pc, #144]	; (17e0 <MW_update+0x284>)
    1750:	601a      	str	r2, [r3, #0]
				stop_timer(MW_TIMER);
    1752:	4b1a      	ldr	r3, [pc, #104]	; (17bc <MW_update+0x260>)
    1754:	681b      	ldr	r3, [r3, #0]
    1756:	4618      	mov	r0, r3
    1758:	f000 f972 	bl	1a40 <stop_timer>
				printf("POP period, averaged over 100 cycles: %lu us\r\n", POP_period_us);
    175c:	4b20      	ldr	r3, [pc, #128]	; (17e0 <MW_update+0x284>)
    175e:	681b      	ldr	r3, [r3, #0]
    1760:	4619      	mov	r1, r3
    1762:	4820      	ldr	r0, [pc, #128]	; (17e4 <MW_update+0x288>)
    1764:	f000 facc 	bl	1d00 <__printf_veneer>
				action_taken = true;
    1768:	2301      	movs	r3, #1
    176a:	75fb      	strb	r3, [r7, #23]
				if (mw_sweep_settings.sweep_mode == POP_CAL_ONLY) {//have reached the end of calibration and should stop
    176c:	4b12      	ldr	r3, [pc, #72]	; (17b8 <MW_update+0x25c>)
    176e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    1772:	2b01      	cmp	r3, #1
    1774:	d103      	bne.n	177e <MW_update+0x222>
					mw_sweep_settings.state = MW_STOPPED;
    1776:	4b10      	ldr	r3, [pc, #64]	; (17b8 <MW_update+0x25c>)
    1778:	2200      	movs	r2, #0
    177a:	701a      	strb	r2, [r3, #0]
				} else {
						start_MW_sweep(false); //start MW_sweep without updating mw_sweep_settings.sweep_mode
				}
			}
			break;
    177c:	e011      	b.n	17a2 <MW_update+0x246>
						start_MW_sweep(false); //start MW_sweep without updating mw_sweep_settings.sweep_mode
    177e:	2000      	movs	r0, #0
    1780:	f7ff fe8e 	bl	14a0 <start_MW_sweep>
			break;
    1784:	e00d      	b.n	17a2 <MW_update+0x246>

		default: // Other state
	       printf("MW_update has detected illegal state: %u \r\n", mw_sweep_settings.state);
    1786:	4b0c      	ldr	r3, [pc, #48]	; (17b8 <MW_update+0x25c>)
    1788:	781b      	ldrb	r3, [r3, #0]
    178a:	4619      	mov	r1, r3
    178c:	4816      	ldr	r0, [pc, #88]	; (17e8 <MW_update+0x28c>)
    178e:	f000 fab7 	bl	1d00 <__printf_veneer>
	       printf("local version: %u \r\n", local_copy_of_MW_state);
    1792:	7dbb      	ldrb	r3, [r7, #22]
    1794:	4619      	mov	r1, r3
    1796:	4815      	ldr	r0, [pc, #84]	; (17ec <MW_update+0x290>)
    1798:	f000 fab2 	bl	1d00 <__printf_veneer>
    179c:	e002      	b.n	17a4 <MW_update+0x248>
			break; //no action to take
    179e:	bf00      	nop
    17a0:	e000      	b.n	17a4 <MW_update+0x248>
			break;
    17a2:	bf00      	nop
	}
    return(action_taken);
    17a4:	7dfb      	ldrb	r3, [r7, #23]
}
    17a6:	4618      	mov	r0, r3
    17a8:	3718      	adds	r7, #24
    17aa:	46bd      	mov	sp, r7
    17ac:	bd80      	pop	{r7, pc}
    17ae:	bf00      	nop
    17b0:	00000000 	.word	0x00000000
    17b4:	412e8480 	.word	0x412e8480
    17b8:	200005b8 	.word	0x200005b8
    17bc:	20000018 	.word	0x20000018
    17c0:	58020400 	.word	0x58020400
    17c4:	58021800 	.word	0x58021800
    17c8:	2000001c 	.word	0x2000001c
    17cc:	200005aa 	.word	0x200005aa
    17d0:	0801e0b4 	.word	0x0801e0b4
    17d4:	0801e0ec 	.word	0x0801e0ec
    17d8:	0801e128 	.word	0x0801e128
    17dc:	42c80000 	.word	0x42c80000
    17e0:	200005ac 	.word	0x200005ac
    17e4:	0801e14c 	.word	0x0801e14c
    17e8:	0801e17c 	.word	0x0801e17c
    17ec:	0801e1a8 	.word	0x0801e1a8

000017f0 <MW_frequency_toggle>:
//}

/* Function to check MW settling time
 * Toggles between two MW frequencies
 */
void MW_frequency_toggle (const double f_one, const double f_two) {
    17f0:	b580      	push	{r7, lr}
    17f2:	b090      	sub	sp, #64	; 0x40
    17f4:	af02      	add	r7, sp, #8
    17f6:	ed87 0b02 	vstr	d0, [r7, #8]
    17fa:	ed87 1b00 	vstr	d1, [r7]
	printf("MW frequency toggling experiment\r\n");
    17fe:	486a      	ldr	r0, [pc, #424]	; (19a8 <MW_frequency_toggle+0x1b8>)
    1800:	f000 fa8e 	bl	1d20 <__puts_veneer>
	printf("Toggling between %.10g and %.10g GHz\r\n", f_one/1000000000, f_two/1000000000);
    1804:	ed97 7b02 	vldr	d7, [r7, #8]
    1808:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 1988 <MW_frequency_toggle+0x198>
    180c:	ee87 4b06 	vdiv.f64	d4, d7, d6
    1810:	ed97 6b00 	vldr	d6, [r7]
    1814:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 1988 <MW_frequency_toggle+0x198>
    1818:	ee86 7b05 	vdiv.f64	d7, d6, d5
    181c:	ed8d 7b00 	vstr	d7, [sp]
    1820:	ec53 2b14 	vmov	r2, r3, d4
    1824:	4861      	ldr	r0, [pc, #388]	; (19ac <MW_frequency_toggle+0x1bc>)
    1826:	f000 fa6b 	bl	1d00 <__printf_veneer>

	/* For the k divider we need to find the smallest even integer or use a max of 62*/
	uint32_t k_one = VCO_MAX_FREQ / f_one;
    182a:	ed9f 5b59 	vldr	d5, [pc, #356]	; 1990 <MW_frequency_toggle+0x1a0>
    182e:	ed97 6b02 	vldr	d6, [r7, #8]
    1832:	ee85 7b06 	vdiv.f64	d7, d5, d6
    1836:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    183a:	ee17 3a90 	vmov	r3, s15
    183e:	637b      	str	r3, [r7, #52]	; 0x34
	if (k_one != 1) {
    1840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1842:	2b01      	cmp	r3, #1
    1844:	d00b      	beq.n	185e <MW_frequency_toggle+0x6e>
		while (k_one > 62 || k_one % 2) {
    1846:	e002      	b.n	184e <MW_frequency_toggle+0x5e>
			k_one--;
    1848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    184a:	3b01      	subs	r3, #1
    184c:	637b      	str	r3, [r7, #52]	; 0x34
		while (k_one > 62 || k_one % 2) {
    184e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1850:	2b3e      	cmp	r3, #62	; 0x3e
    1852:	d8f9      	bhi.n	1848 <MW_frequency_toggle+0x58>
    1854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1856:	f003 0301 	and.w	r3, r3, #1
    185a:	2b00      	cmp	r3, #0
    185c:	d1f4      	bne.n	1848 <MW_frequency_toggle+0x58>
		}
	}
	uint32_t k_two = VCO_MAX_FREQ / f_two;
    185e:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 1990 <MW_frequency_toggle+0x1a0>
    1862:	ed97 6b00 	vldr	d6, [r7]
    1866:	ee85 7b06 	vdiv.f64	d7, d5, d6
    186a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    186e:	ee17 3a90 	vmov	r3, s15
    1872:	633b      	str	r3, [r7, #48]	; 0x30
	if (k_two != 1) {
    1874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1876:	2b01      	cmp	r3, #1
    1878:	d00b      	beq.n	1892 <MW_frequency_toggle+0xa2>
		while (k_two > 62 || k_two % 2) {
    187a:	e002      	b.n	1882 <MW_frequency_toggle+0x92>
			k_two--;
    187c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    187e:	3b01      	subs	r3, #1
    1880:	633b      	str	r3, [r7, #48]	; 0x30
		while (k_two > 62 || k_two % 2) {
    1882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1884:	2b3e      	cmp	r3, #62	; 0x3e
    1886:	d8f9      	bhi.n	187c <MW_frequency_toggle+0x8c>
    1888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    188a:	f003 0301 	and.w	r3, r3, #1
    188e:	2b00      	cmp	r3, #0
    1890:	d1f4      	bne.n	187c <MW_frequency_toggle+0x8c>
		}
	}

	const double N_one = ((f_one * k_one) / REF_FREQ);
    1892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1894:	ee07 3a90 	vmov	s15, r3
    1898:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    189c:	ed97 7b02 	vldr	d7, [r7, #8]
    18a0:	ee26 6b07 	vmul.f64	d6, d6, d7
    18a4:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 1998 <MW_frequency_toggle+0x1a8>
    18a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
    18ac:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	const double N_two = ((f_two * k_two) / REF_FREQ);
    18b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    18b2:	ee07 3a90 	vmov	s15, r3
    18b6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    18ba:	ed97 7b00 	vldr	d7, [r7]
    18be:	ee26 6b07 	vmul.f64	d6, d6, d7
    18c2:	ed9f 5b35 	vldr	d5, [pc, #212]	; 1998 <MW_frequency_toggle+0x1a8>
    18c6:	ee86 7b05 	vdiv.f64	d7, d6, d5
    18ca:	ed87 7b08 	vstr	d7, [r7, #32]

	/* Extract the fractional and integer parts */
	const uint32_t N_one_INT = N_one;
    18ce:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
    18d2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    18d6:	ee17 3a90 	vmov	r3, s15
    18da:	61fb      	str	r3, [r7, #28]
	const uint32_t N_one_FRAC = ((N_one - N_one_INT) * (1 << 24)) + 0.5;
    18dc:	69fb      	ldr	r3, [r7, #28]
    18de:	ee07 3a90 	vmov	s15, r3
    18e2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    18e6:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
    18ea:	ee36 7b47 	vsub.f64	d7, d6, d7
    18ee:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 19a0 <MW_frequency_toggle+0x1b0>
    18f2:	ee27 7b06 	vmul.f64	d7, d7, d6
    18f6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    18fa:	ee37 7b06 	vadd.f64	d7, d7, d6
    18fe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1902:	ee17 3a90 	vmov	r3, s15
    1906:	61bb      	str	r3, [r7, #24]
	const uint32_t N_two_INT = N_two;
    1908:	ed97 7b08 	vldr	d7, [r7, #32]
    190c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1910:	ee17 3a90 	vmov	r3, s15
    1914:	617b      	str	r3, [r7, #20]
	const uint32_t N_two_FRAC = ((N_two - N_two_INT) * (1 << 24)) + 0.5;
    1916:	697b      	ldr	r3, [r7, #20]
    1918:	ee07 3a90 	vmov	s15, r3
    191c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    1920:	ed97 6b08 	vldr	d6, [r7, #32]
    1924:	ee36 7b47 	vsub.f64	d7, d6, d7
    1928:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 19a0 <MW_frequency_toggle+0x1b0>
    192c:	ee27 7b06 	vmul.f64	d7, d7, d6
    1930:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    1934:	ee37 7b06 	vadd.f64	d7, d7, d6
    1938:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    193c:	ee17 3a90 	vmov	r3, s15
    1940:	613b      	str	r3, [r7, #16]

	while (1) {
	set_freq_regs(N_one_INT, N_one_FRAC, k_one); //Program necessary values for f_one
    1942:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1944:	69b9      	ldr	r1, [r7, #24]
    1946:	69f8      	ldr	r0, [r7, #28]
    1948:	f7ff f90a 	bl	b60 <set_freq_regs>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
    194c:	2200      	movs	r2, #0
    194e:	2101      	movs	r1, #1
    1950:	4817      	ldr	r0, [pc, #92]	; (19b0 <MW_frequency_toggle+0x1c0>)
    1952:	f000 f9bd 	bl	1cd0 <__HAL_GPIO_WritePin_veneer>
	timer_delay(SLOW_TIMER, 100); //10ms delay
    1956:	4b17      	ldr	r3, [pc, #92]	; (19b4 <MW_frequency_toggle+0x1c4>)
    1958:	681b      	ldr	r3, [r3, #0]
    195a:	2164      	movs	r1, #100	; 0x64
    195c:	4618      	mov	r0, r3
    195e:	f000 f88d 	bl	1a7c <timer_delay>
	set_freq_regs(N_two_INT, N_two_FRAC, k_two); //Program necessary values for f_two
    1962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1964:	6939      	ldr	r1, [r7, #16]
    1966:	6978      	ldr	r0, [r7, #20]
    1968:	f7ff f8fa 	bl	b60 <set_freq_regs>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
    196c:	2201      	movs	r2, #1
    196e:	2101      	movs	r1, #1
    1970:	480f      	ldr	r0, [pc, #60]	; (19b0 <MW_frequency_toggle+0x1c0>)
    1972:	f000 f9ad 	bl	1cd0 <__HAL_GPIO_WritePin_veneer>
	timer_delay(SLOW_TIMER, 100); //10ms delay
    1976:	4b0f      	ldr	r3, [pc, #60]	; (19b4 <MW_frequency_toggle+0x1c4>)
    1978:	681b      	ldr	r3, [r3, #0]
    197a:	2164      	movs	r1, #100	; 0x64
    197c:	4618      	mov	r0, r3
    197e:	f000 f87d 	bl	1a7c <timer_delay>
	set_freq_regs(N_one_INT, N_one_FRAC, k_one); //Program necessary values for f_one
    1982:	e7de      	b.n	1942 <MW_frequency_toggle+0x152>
    1984:	f3af 8000 	nop.w
    1988:	00000000 	.word	0x00000000
    198c:	41cdcd65 	.word	0x41cdcd65
    1990:	20000000 	.word	0x20000000
    1994:	41ee8c21 	.word	0x41ee8c21
    1998:	00000000 	.word	0x00000000
    199c:	4187d784 	.word	0x4187d784
    19a0:	00000000 	.word	0x00000000
    19a4:	41700000 	.word	0x41700000
    19a8:	0801e1c0 	.word	0x0801e1c0
    19ac:	0801e1e4 	.word	0x0801e1e4
    19b0:	58021800 	.word	0x58021800
    19b4:	20000014 	.word	0x20000014

000019b8 <set_SDO_output>:
/* Selects SDO pin connectivity/functionality
 * By default, the SDO pin will output 'Lock detect' but can be connected
 * to other internal signals. See table 2.15 of HMC835 datasheet (v04.1113)
 * for more details all options
 */
 void set_SDO_output(const uint32_t GPO_setting) {
    19b8:	b580      	push	{r7, lr}
    19ba:	b084      	sub	sp, #16
    19bc:	af00      	add	r7, sp, #0
    19be:	6078      	str	r0, [r7, #4]
	//Default output on SDO pin is 'Lock detect output', value 0x01
	//VCO divider is 0x0A
	//See table 2.15 of HMC835 datasheet for more details (v04.1113)
	uint32_t read_data = 0x0;
    19c0:	2300      	movs	r3, #0
    19c2:	60fb      	str	r3, [r7, #12]

	if (GPO_setting > 31) {
    19c4:	687b      	ldr	r3, [r7, #4]
    19c6:	2b1f      	cmp	r3, #31
    19c8:	d904      	bls.n	19d4 <set_SDO_output+0x1c>
		printf("SDO pin value must be less that 32\r\n");
    19ca:	480d      	ldr	r0, [pc, #52]	; (1a00 <set_SDO_output+0x48>)
    19cc:	f000 f9a8 	bl	1d20 <__puts_veneer>
		Error_Handler();
    19d0:	f000 f976 	bl	1cc0 <__Error_Handler_veneer>
	}
	read_data = synth_readreg(GPO_REGISTER); // Get the current value.
    19d4:	200f      	movs	r0, #15
    19d6:	f7fe ff29 	bl	82c <synth_readreg>
    19da:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFFE0; // Zero the first 5 LSBs.
    19dc:	68fb      	ldr	r3, [r7, #12]
    19de:	f023 031f 	bic.w	r3, r3, #31
    19e2:	60fb      	str	r3, [r7, #12]
	//read_data |= 0x0A; //Select VCO divider output
	read_data |= GPO_setting; //Select GPO output dependent on function input value
    19e4:	68fa      	ldr	r2, [r7, #12]
    19e6:	687b      	ldr	r3, [r7, #4]
    19e8:	4313      	orrs	r3, r2
    19ea:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GPO_REGISTER, 0x0, VERIFY); // Update the GPO register.
    19ec:	2301      	movs	r3, #1
    19ee:	2200      	movs	r2, #0
    19f0:	210f      	movs	r1, #15
    19f2:	68f8      	ldr	r0, [r7, #12]
    19f4:	f7fe fea0 	bl	738 <synth_writereg>
}
    19f8:	bf00      	nop
    19fa:	3710      	adds	r7, #16
    19fc:	46bd      	mov	sp, r7
    19fe:	bd80      	pop	{r7, pc}
    1a00:	0801e20c 	.word	0x0801e20c

00001a04 <start_timer>:

/**
  * @brief  Starts a timer.
  * @retval uint32_t
  */
uint32_t start_timer(TIM_TypeDef * timer) {
    1a04:	b480      	push	{r7}
    1a06:	b083      	sub	sp, #12
    1a08:	af00      	add	r7, sp, #0
    1a0a:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
    1a0c:	687b      	ldr	r3, [r7, #4]
    1a0e:	681b      	ldr	r3, [r3, #0]
    1a10:	f023 0201 	bic.w	r2, r3, #1
    1a14:	687b      	ldr	r3, [r7, #4]
    1a16:	601a      	str	r2, [r3, #0]
	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
    1a18:	687b      	ldr	r3, [r7, #4]
    1a1a:	695b      	ldr	r3, [r3, #20]
    1a1c:	f043 0201 	orr.w	r2, r3, #1
    1a20:	687b      	ldr	r3, [r7, #4]
    1a22:	615a      	str	r2, [r3, #20]
	timer->CR1 |= TIM_CR1_CEN;
    1a24:	687b      	ldr	r3, [r7, #4]
    1a26:	681b      	ldr	r3, [r3, #0]
    1a28:	f043 0201 	orr.w	r2, r3, #1
    1a2c:	687b      	ldr	r3, [r7, #4]
    1a2e:	601a      	str	r2, [r3, #0]
	//printf("Started timer with returned CNT value: %ld \r\n", timer->CNT);
	return timer->CNT;
    1a30:	687b      	ldr	r3, [r7, #4]
    1a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    1a34:	4618      	mov	r0, r3
    1a36:	370c      	adds	r7, #12
    1a38:	46bd      	mov	sp, r7
    1a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a3e:	4770      	bx	lr

00001a40 <stop_timer>:

/**
  * @brief  Stops a timer.
  * @retval uint32_t
  */
uint32_t stop_timer(TIM_TypeDef *timer) {
    1a40:	b480      	push	{r7}
    1a42:	b083      	sub	sp, #12
    1a44:	af00      	add	r7, sp, #0
    1a46:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
    1a48:	687b      	ldr	r3, [r7, #4]
    1a4a:	681b      	ldr	r3, [r3, #0]
    1a4c:	f023 0201 	bic.w	r2, r3, #1
    1a50:	687b      	ldr	r3, [r7, #4]
    1a52:	601a      	str	r2, [r3, #0]
	return timer->CNT;
    1a54:	687b      	ldr	r3, [r7, #4]
    1a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    1a58:	4618      	mov	r0, r3
    1a5a:	370c      	adds	r7, #12
    1a5c:	46bd      	mov	sp, r7
    1a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a62:	4770      	bx	lr

00001a64 <check_timer>:
/**
  * @brief  Returns timer counter value
  * @param  Timer
  * @retval Counter value
  */
uint32_t check_timer(TIM_TypeDef *timer) {
    1a64:	b480      	push	{r7}
    1a66:	b083      	sub	sp, #12
    1a68:	af00      	add	r7, sp, #0
    1a6a:	6078      	str	r0, [r7, #4]

	return timer->CNT;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    1a70:	4618      	mov	r0, r3
    1a72:	370c      	adds	r7, #12
    1a74:	46bd      	mov	sp, r7
    1a76:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a7a:	4770      	bx	lr

00001a7c <timer_delay>:

/**
  * @brief  Uses a H/W timer to loop for the cycle count requested.
  */
void timer_delay(TIM_TypeDef *timer, const uint32_t delay_count){
    1a7c:	b580      	push	{r7, lr}
    1a7e:	b084      	sub	sp, #16
    1a80:	af00      	add	r7, sp, #0
    1a82:	6078      	str	r0, [r7, #4]
    1a84:	6039      	str	r1, [r7, #0]
	/* Note that we don't consider overflow.
	 * FAST_TIMER will take approximately 65 ms to overflow.
	 * SLOW_TIMER will take 650ms
	 * MW_TIMER and SWEEP_TIMER will take 71 minutes */

	uint32_t start = start_timer(timer);
    1a86:	6878      	ldr	r0, [r7, #4]
    1a88:	f7ff ffbc 	bl	1a04 <start_timer>
    1a8c:	60f8      	str	r0, [r7, #12]
//	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
//	timer->CR1 |= TIM_CR1_CEN; // Enable the timer
//	uint32_t start = timer->CNT; // Get the start value of the timer

//	while((timer->CNT - start) < delay_count){} // Loop until delay_us has expired
	while(timer->CNT < delay_count){} // Loop until delay_us has expired
    1a8e:	bf00      	nop
    1a90:	687b      	ldr	r3, [r7, #4]
    1a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1a94:	683a      	ldr	r2, [r7, #0]
    1a96:	429a      	cmp	r2, r3
    1a98:	d8fa      	bhi.n	1a90 <timer_delay+0x14>

	stop_timer(timer);
    1a9a:	6878      	ldr	r0, [r7, #4]
    1a9c:	f7ff ffd0 	bl	1a40 <stop_timer>
//	timer->CR1 &= ~(TIM_CR1_CEN); // Disable the timer

}
    1aa0:	bf00      	nop
    1aa2:	3710      	adds	r7, #16
    1aa4:	46bd      	mov	sp, r7
    1aa6:	bd80      	pop	{r7, pc}

00001aa8 <measure_POP_cycle>:
/**
  * @brief  Returns the measured period of a POP cycle as averaged over 20 cycles
  * @param  None
  * @retval Period expressed as an integer number of microseconds
  */
uint32_t measure_POP_cycle(void){
    1aa8:	b580      	push	{r7, lr}
    1aaa:	b086      	sub	sp, #24
    1aac:	af00      	add	r7, sp, #0

	/* Measures the elapsed time taken for 20 POP cycles
	 * Relies on the ADC value changing every time a sample is taken
	 * ADC must be initialised before running
	 */
	uint32_t adc_value = 0;
    1aae:	2300      	movs	r3, #0
    1ab0:	617b      	str	r3, [r7, #20]
	uint32_t last_adc_value = 9999;
    1ab2:	f242 730f 	movw	r3, #9999	; 0x270f
    1ab6:	613b      	str	r3, [r7, #16]
	uint8_t cycle_count = 0;
    1ab8:	2300      	movs	r3, #0
    1aba:	73fb      	strb	r3, [r7, #15]
	uint32_t period;
	const uint8_t iterations = 20;
    1abc:	2314      	movs	r3, #20
    1abe:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); 	//Sets MW_invalid pin high to reset POP cycle
    1ac0:	2201      	movs	r2, #1
    1ac2:	2102      	movs	r1, #2
    1ac4:	4826      	ldr	r0, [pc, #152]	; (1b60 <measure_POP_cycle+0xb8>)
    1ac6:	f000 f903 	bl	1cd0 <__HAL_GPIO_WritePin_veneer>
	start_timer(MW_TIMER); //reset MW_timer and start counting
    1aca:	4b26      	ldr	r3, [pc, #152]	; (1b64 <measure_POP_cycle+0xbc>)
    1acc:	681b      	ldr	r3, [r3, #0]
    1ace:	4618      	mov	r0, r3
    1ad0:	f7ff ff98 	bl	1a04 <start_timer>
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Start POP cycle
    1ad4:	2200      	movs	r2, #0
    1ad6:	2102      	movs	r1, #2
    1ad8:	4821      	ldr	r0, [pc, #132]	; (1b60 <measure_POP_cycle+0xb8>)
    1ada:	f000 f8f9 	bl	1cd0 <__HAL_GPIO_WritePin_veneer>

	// get the ADC conversion value
	adc_value = HAL_ADC_GetValue(&hadc3);
    1ade:	4822      	ldr	r0, [pc, #136]	; (1b68 <measure_POP_cycle+0xc0>)
    1ae0:	f000 f8f2 	bl	1cc8 <__HAL_ADC_GetValue_veneer>
    1ae4:	6178      	str	r0, [r7, #20]
	while (cycle_count < iterations) {
    1ae6:	e00c      	b.n	1b02 <measure_POP_cycle+0x5a>
		while (adc_value == last_adc_value) {
			adc_value = HAL_ADC_GetValue(&hadc3); //keep reading ADC until value changes
    1ae8:	481f      	ldr	r0, [pc, #124]	; (1b68 <measure_POP_cycle+0xc0>)
    1aea:	f000 f8ed 	bl	1cc8 <__HAL_ADC_GetValue_veneer>
    1aee:	6178      	str	r0, [r7, #20]
		while (adc_value == last_adc_value) {
    1af0:	697a      	ldr	r2, [r7, #20]
    1af2:	693b      	ldr	r3, [r7, #16]
    1af4:	429a      	cmp	r2, r3
    1af6:	d0f7      	beq.n	1ae8 <measure_POP_cycle+0x40>
		}
		last_adc_value = adc_value;
    1af8:	697b      	ldr	r3, [r7, #20]
    1afa:	613b      	str	r3, [r7, #16]
		cycle_count++;
    1afc:	7bfb      	ldrb	r3, [r7, #15]
    1afe:	3301      	adds	r3, #1
    1b00:	73fb      	strb	r3, [r7, #15]
	while (cycle_count < iterations) {
    1b02:	7bfa      	ldrb	r2, [r7, #15]
    1b04:	7bbb      	ldrb	r3, [r7, #14]
    1b06:	429a      	cmp	r2, r3
    1b08:	d3f2      	bcc.n	1af0 <measure_POP_cycle+0x48>
	}

	uint32_t total_period = check_timer(MW_TIMER);
    1b0a:	4b16      	ldr	r3, [pc, #88]	; (1b64 <measure_POP_cycle+0xbc>)
    1b0c:	681b      	ldr	r3, [r3, #0]
    1b0e:	4618      	mov	r0, r3
    1b10:	f7ff ffa8 	bl	1a64 <check_timer>
    1b14:	60b8      	str	r0, [r7, #8]
	period = (float)(check_timer(MW_TIMER)) / iterations + 0.5;
    1b16:	4b13      	ldr	r3, [pc, #76]	; (1b64 <measure_POP_cycle+0xbc>)
    1b18:	681b      	ldr	r3, [r3, #0]
    1b1a:	4618      	mov	r0, r3
    1b1c:	f7ff ffa2 	bl	1a64 <check_timer>
    1b20:	ee07 0a90 	vmov	s15, r0
    1b24:	eef8 6a67 	vcvt.f32.u32	s13, s15
    1b28:	7bbb      	ldrb	r3, [r7, #14]
    1b2a:	ee07 3a90 	vmov	s15, r3
    1b2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    1b32:	eec6 7a87 	vdiv.f32	s15, s13, s14
    1b36:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    1b3a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    1b3e:	ee37 7b06 	vadd.f64	d7, d7, d6
    1b42:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1b46:	ee17 3a90 	vmov	r3, s15
    1b4a:	607b      	str	r3, [r7, #4]
	stop_timer(MW_TIMER);
    1b4c:	4b05      	ldr	r3, [pc, #20]	; (1b64 <measure_POP_cycle+0xbc>)
    1b4e:	681b      	ldr	r3, [r3, #0]
    1b50:	4618      	mov	r0, r3
    1b52:	f7ff ff75 	bl	1a40 <stop_timer>
	#ifdef TIMER_VERBOSE
		printf("Time for %u POP cycles: %lu us\r\n", iterations, total_period);
		printf("POP period: %lu us\r\n", period);
	#endif //TIMER_VERBOSE
	return (period);
    1b56:	687b      	ldr	r3, [r7, #4]

}
    1b58:	4618      	mov	r0, r3
    1b5a:	3718      	adds	r7, #24
    1b5c:	46bd      	mov	sp, r7
    1b5e:	bd80      	pop	{r7, pc}
    1b60:	58020400 	.word	0x58020400
    1b64:	20000018 	.word	0x20000018
    1b68:	20000258 	.word	0x20000258

00001b6c <start_pop>:

	printf("POP cycle stopped!\r\n");

}

void start_pop() {
    1b6c:	b580      	push	{r7, lr}
    1b6e:	af00      	add	r7, sp, #0

	/* Timer A is the LASER enable, Timer E is the microwave pulse */
	if (HAL_HRTIM_WaveformOutputStart(&hhrtim,
    1b70:	f240 1103 	movw	r1, #259	; 0x103
    1b74:	480f      	ldr	r0, [pc, #60]	; (1bb4 <start_pop+0x48>)
    1b76:	f000 f8cf 	bl	1d18 <__HAL_HRTIM_WaveformOutputStart_veneer>
    1b7a:	4603      	mov	r3, r0
    1b7c:	2b00      	cmp	r3, #0
    1b7e:	d004      	beq.n	1b8a <start_pop+0x1e>
	HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1) != HAL_OK) {
		printf("Failed to start POP!\r\n");
    1b80:	480d      	ldr	r0, [pc, #52]	; (1bb8 <start_pop+0x4c>)
    1b82:	f000 f8cd 	bl	1d20 <__puts_veneer>
		Error_Handler();
    1b86:	f000 f89b 	bl	1cc0 <__Error_Handler_veneer>
		Error_Handler();
	}

#endif

	if (HAL_HRTIM_WaveformCounterStart_IT(&hhrtim,
    1b8a:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
    1b8e:	4809      	ldr	r0, [pc, #36]	; (1bb4 <start_pop+0x48>)
    1b90:	f000 f87a 	bl	1c88 <__HAL_HRTIM_WaveformCountStart_IT_veneer>
    1b94:	4603      	mov	r3, r0
    1b96:	2b00      	cmp	r3, #0
    1b98:	d004      	beq.n	1ba4 <start_pop+0x38>
	HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E) != HAL_OK) {
		printf("POP failure point E!\r\n");
    1b9a:	4808      	ldr	r0, [pc, #32]	; (1bbc <start_pop+0x50>)
    1b9c:	f000 f8c0 	bl	1d20 <__puts_veneer>
		Error_Handler();
    1ba0:	f000 f88e 	bl	1cc0 <__Error_Handler_veneer>
	}

	pop_running = true;
    1ba4:	4b06      	ldr	r3, [pc, #24]	; (1bc0 <start_pop+0x54>)
    1ba6:	2201      	movs	r2, #1
    1ba8:	701a      	strb	r2, [r3, #0]

	printf("POP cycle running!\r\n");
    1baa:	4806      	ldr	r0, [pc, #24]	; (1bc4 <start_pop+0x58>)
    1bac:	f000 f8b8 	bl	1d20 <__puts_veneer>

}
    1bb0:	bf00      	nop
    1bb2:	bd80      	pop	{r7, pc}
    1bb4:	200002d0 	.word	0x200002d0
    1bb8:	0801e230 	.word	0x0801e230
    1bbc:	0801e248 	.word	0x0801e248
    1bc0:	20000608 	.word	0x20000608
    1bc4:	0801e260 	.word	0x0801e260

00001bc8 <stop_pop>:
void stop_pop() {
    1bc8:	b580      	push	{r7, lr}
    1bca:	af00      	add	r7, sp, #0
	if (HAL_HRTIM_WaveformOutputStop(&hhrtim,
    1bcc:	f240 1103 	movw	r1, #259	; 0x103
    1bd0:	4813      	ldr	r0, [pc, #76]	; (1c20 <stop_pop+0x58>)
    1bd2:	f000 f889 	bl	1ce8 <__HAL_HRTIM_WaveformOutputStop_veneer>
    1bd6:	4603      	mov	r3, r0
    1bd8:	2b00      	cmp	r3, #0
    1bda:	d004      	beq.n	1be6 <stop_pop+0x1e>
		printf("POP failure point A!\r\n");
    1bdc:	4811      	ldr	r0, [pc, #68]	; (1c24 <stop_pop+0x5c>)
    1bde:	f000 f89f 	bl	1d20 <__puts_veneer>
		Error_Handler();
    1be2:	f000 f86d 	bl	1cc0 <__Error_Handler_veneer>
	if (HAL_HRTIM_WaveformCounterStop_IT(&hhrtim,
    1be6:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
    1bea:	480d      	ldr	r0, [pc, #52]	; (1c20 <stop_pop+0x58>)
    1bec:	f000 f884 	bl	1cf8 <__HAL_HRTIM_WaveformCountStop_IT_veneer>
    1bf0:	4603      	mov	r3, r0
    1bf2:	2b00      	cmp	r3, #0
    1bf4:	d004      	beq.n	1c00 <stop_pop+0x38>
		printf("POP failure point B!\r\n");
    1bf6:	480c      	ldr	r0, [pc, #48]	; (1c28 <stop_pop+0x60>)
    1bf8:	f000 f892 	bl	1d20 <__puts_veneer>
		Error_Handler();
    1bfc:	f000 f860 	bl	1cc0 <__Error_Handler_veneer>
	pop_cycle_count = 0;
    1c00:	4b0a      	ldr	r3, [pc, #40]	; (1c2c <stop_pop+0x64>)
    1c02:	2200      	movs	r2, #0
    1c04:	601a      	str	r2, [r3, #0]
	pop_running = false;
    1c06:	4b0a      	ldr	r3, [pc, #40]	; (1c30 <stop_pop+0x68>)
    1c08:	2200      	movs	r2, #0
    1c0a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0); //turn off amber LED
    1c0c:	2200      	movs	r2, #0
    1c0e:	2102      	movs	r1, #2
    1c10:	4808      	ldr	r0, [pc, #32]	; (1c34 <stop_pop+0x6c>)
    1c12:	f000 f85d 	bl	1cd0 <__HAL_GPIO_WritePin_veneer>
	printf("POP cycle stopped!\r\n");
    1c16:	4808      	ldr	r0, [pc, #32]	; (1c38 <stop_pop+0x70>)
    1c18:	f000 f882 	bl	1d20 <__puts_veneer>
}
    1c1c:	bf00      	nop
    1c1e:	bd80      	pop	{r7, pc}
    1c20:	200002d0 	.word	0x200002d0
    1c24:	0801e274 	.word	0x0801e274
    1c28:	0801e28c 	.word	0x0801e28c
    1c2c:	20000604 	.word	0x20000604
    1c30:	20000608 	.word	0x20000608
    1c34:	58021000 	.word	0x58021000
    1c38:	0801e2a4 	.word	0x0801e2a4
    1c3c:	00000000 	.word	0x00000000

00001c40 <__tcp_recved_veneer>:
    1c40:	f85f f000 	ldr.w	pc, [pc]	; 1c44 <__tcp_recved_veneer+0x4>
    1c44:	08012225 	.word	0x08012225

00001c48 <__ip4addr_ntoa_veneer>:
    1c48:	f85f f000 	ldr.w	pc, [pc]	; 1c4c <__ip4addr_ntoa_veneer+0x4>
    1c4c:	080198a9 	.word	0x080198a9

00001c50 <__pbuf_ref_veneer>:
    1c50:	f85f f000 	ldr.w	pc, [pc]	; 1c54 <__pbuf_ref_veneer+0x4>
    1c54:	08011665 	.word	0x08011665

00001c58 <__tcp_poll_veneer>:
    1c58:	f85f f000 	ldr.w	pc, [pc]	; 1c5c <__tcp_poll_veneer+0x4>
    1c5c:	080132cd 	.word	0x080132cd

00001c60 <__tcp_recv_veneer>:
    1c60:	f85f f000 	ldr.w	pc, [pc]	; 1c64 <__tcp_recv_veneer+0x4>
    1c64:	08013201 	.word	0x08013201

00001c68 <__HAL_GPIO_TogglePin_veneer>:
    1c68:	f85f f000 	ldr.w	pc, [pc]	; 1c6c <__HAL_GPIO_TogglePin_veneer+0x4>
    1c6c:	0800800b 	.word	0x0800800b

00001c70 <__tcp_write_veneer>:
    1c70:	f85f f000 	ldr.w	pc, [pc]	; 1c74 <__tcp_write_veneer+0x4>
    1c74:	08016031 	.word	0x08016031

00001c78 <__tcp_abort_veneer>:
    1c78:	f85f f000 	ldr.w	pc, [pc]	; 1c7c <__tcp_abort_veneer+0x4>
    1c7c:	08012159 	.word	0x08012159

00001c80 <__pbuf_take_veneer>:
    1c80:	f85f f000 	ldr.w	pc, [pc]	; 1c84 <__pbuf_take_veneer+0x4>
    1c84:	080119dd 	.word	0x080119dd

00001c88 <__HAL_HRTIM_WaveformCountStart_IT_veneer>:
    1c88:	f85f f000 	ldr.w	pc, [pc]	; 1c8c <__HAL_HRTIM_WaveformCountStart_IT_veneer+0x4>
    1c8c:	08008751 	.word	0x08008751

00001c90 <__mem_malloc_veneer>:
    1c90:	f85f f000 	ldr.w	pc, [pc]	; 1c94 <__mem_malloc_veneer+0x4>
    1c94:	08010449 	.word	0x08010449

00001c98 <__tcp_sent_veneer>:
    1c98:	f85f f000 	ldr.w	pc, [pc]	; 1c9c <__tcp_sent_veneer+0x4>
    1c9c:	08013245 	.word	0x08013245

00001ca0 <__mem_free_veneer>:
    1ca0:	f85f f000 	ldr.w	pc, [pc]	; 1ca4 <__mem_free_veneer+0x4>
    1ca4:	0801018d 	.word	0x0801018d

00001ca8 <__tcp_close_veneer>:
    1ca8:	f85f f000 	ldr.w	pc, [pc]	; 1cac <__tcp_close_veneer+0x4>
    1cac:	08011f85 	.word	0x08011f85

00001cb0 <__sprintf_veneer>:
    1cb0:	f85f f000 	ldr.w	pc, [pc]	; 1cb4 <__sprintf_veneer+0x4>
    1cb4:	0801b345 	.word	0x0801b345

00001cb8 <__memcpy_veneer>:
    1cb8:	f85f f000 	ldr.w	pc, [pc]	; 1cbc <__memcpy_veneer+0x4>
    1cbc:	0801b67b 	.word	0x0801b67b

00001cc0 <__Error_Handler_veneer>:
    1cc0:	f85f f000 	ldr.w	pc, [pc]	; 1cc4 <__Error_Handler_veneer+0x4>
    1cc4:	08003419 	.word	0x08003419

00001cc8 <__HAL_ADC_GetValue_veneer>:
    1cc8:	f85f f000 	ldr.w	pc, [pc]	; 1ccc <__HAL_ADC_GetValue_veneer+0x4>
    1ccc:	08004d2d 	.word	0x08004d2d

00001cd0 <__HAL_GPIO_WritePin_veneer>:
    1cd0:	f85f f000 	ldr.w	pc, [pc]	; 1cd4 <__HAL_GPIO_WritePin_veneer+0x4>
    1cd4:	08007fd9 	.word	0x08007fd9

00001cd8 <__tcp_err_veneer>:
    1cd8:	f85f f000 	ldr.w	pc, [pc]	; 1cdc <__tcp_err_veneer+0x4>
    1cdc:	08013289 	.word	0x08013289

00001ce0 <__tcp_arg_veneer>:
    1ce0:	f85f f000 	ldr.w	pc, [pc]	; 1ce4 <__tcp_arg_veneer+0x4>
    1ce4:	080131dd 	.word	0x080131dd

00001ce8 <__HAL_HRTIM_WaveformOutputStop_veneer>:
    1ce8:	f85f f000 	ldr.w	pc, [pc]	; 1cec <__HAL_HRTIM_WaveformOutputStop_veneer+0x4>
    1cec:	080086f5 	.word	0x080086f5

00001cf0 <__pbuf_alloc_veneer>:
    1cf0:	f85f f000 	ldr.w	pc, [pc]	; 1cf4 <__pbuf_alloc_veneer+0x4>
    1cf4:	08010f5d 	.word	0x08010f5d

00001cf8 <__HAL_HRTIM_WaveformCountStop_IT_veneer>:
    1cf8:	f85f f000 	ldr.w	pc, [pc]	; 1cfc <__HAL_HRTIM_WaveformCountStop_IT_veneer+0x4>
    1cfc:	08008831 	.word	0x08008831

00001d00 <__printf_veneer>:
    1d00:	f85f f000 	ldr.w	pc, [pc]	; 1d04 <__printf_veneer+0x4>
    1d04:	0801b269 	.word	0x0801b269

00001d08 <__strlen_veneer>:
    1d08:	f85f f000 	ldr.w	pc, [pc]	; 1d0c <__strlen_veneer+0x4>
    1d0c:	080020b1 	.word	0x080020b1

00001d10 <__pbuf_free_veneer>:
    1d10:	f85f f000 	ldr.w	pc, [pc]	; 1d14 <__pbuf_free_veneer+0x4>
    1d14:	08011525 	.word	0x08011525

00001d18 <__HAL_HRTIM_WaveformOutputStart_veneer>:
    1d18:	f85f f000 	ldr.w	pc, [pc]	; 1d1c <__HAL_HRTIM_WaveformOutputStart_veneer+0x4>
    1d1c:	0800869b 	.word	0x0800869b

00001d20 <__puts_veneer>:
    1d20:	f85f f000 	ldr.w	pc, [pc]	; 1d24 <__puts_veneer+0x4>
    1d24:	0801b335 	.word	0x0801b335

00001d28 <__HAL_GPIO_ReadPin_veneer>:
    1d28:	f85f f000 	ldr.w	pc, [pc]	; 1d2c <__HAL_GPIO_ReadPin_veneer+0x4>
    1d2c:	08007fa9 	.word	0x08007fa9

00001d30 <__HAL_Delay_veneer>:
    1d30:	f85f f000 	ldr.w	pc, [pc]	; 1d34 <__HAL_Delay_veneer+0x4>
    1d34:	08004281 	.word	0x08004281

Disassembly of section .text:

08001fd0 <__do_global_dtors_aux>:
 8001fd0:	b510      	push	{r4, lr}
 8001fd2:	4c05      	ldr	r4, [pc, #20]	; (8001fe8 <__do_global_dtors_aux+0x18>)
 8001fd4:	7823      	ldrb	r3, [r4, #0]
 8001fd6:	b933      	cbnz	r3, 8001fe6 <__do_global_dtors_aux+0x16>
 8001fd8:	4b04      	ldr	r3, [pc, #16]	; (8001fec <__do_global_dtors_aux+0x1c>)
 8001fda:	b113      	cbz	r3, 8001fe2 <__do_global_dtors_aux+0x12>
 8001fdc:	4804      	ldr	r0, [pc, #16]	; (8001ff0 <__do_global_dtors_aux+0x20>)
 8001fde:	f3af 8000 	nop.w
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	7023      	strb	r3, [r4, #0]
 8001fe6:	bd10      	pop	{r4, pc}
 8001fe8:	20000228 	.word	0x20000228
 8001fec:	00000000 	.word	0x00000000
 8001ff0:	0801d508 	.word	0x0801d508

08001ff4 <frame_dummy>:
 8001ff4:	b508      	push	{r3, lr}
 8001ff6:	4b03      	ldr	r3, [pc, #12]	; (8002004 <frame_dummy+0x10>)
 8001ff8:	b11b      	cbz	r3, 8002002 <frame_dummy+0xe>
 8001ffa:	4903      	ldr	r1, [pc, #12]	; (8002008 <frame_dummy+0x14>)
 8001ffc:	4803      	ldr	r0, [pc, #12]	; (800200c <frame_dummy+0x18>)
 8001ffe:	f3af 8000 	nop.w
 8002002:	bd08      	pop	{r3, pc}
 8002004:	00000000 	.word	0x00000000
 8002008:	2000022c 	.word	0x2000022c
 800200c:	0801d508 	.word	0x0801d508

08002010 <memchr>:
 8002010:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8002014:	2a10      	cmp	r2, #16
 8002016:	db2b      	blt.n	8002070 <memchr+0x60>
 8002018:	f010 0f07 	tst.w	r0, #7
 800201c:	d008      	beq.n	8002030 <memchr+0x20>
 800201e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002022:	3a01      	subs	r2, #1
 8002024:	428b      	cmp	r3, r1
 8002026:	d02d      	beq.n	8002084 <memchr+0x74>
 8002028:	f010 0f07 	tst.w	r0, #7
 800202c:	b342      	cbz	r2, 8002080 <memchr+0x70>
 800202e:	d1f6      	bne.n	800201e <memchr+0xe>
 8002030:	b4f0      	push	{r4, r5, r6, r7}
 8002032:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8002036:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800203a:	f022 0407 	bic.w	r4, r2, #7
 800203e:	f07f 0700 	mvns.w	r7, #0
 8002042:	2300      	movs	r3, #0
 8002044:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8002048:	3c08      	subs	r4, #8
 800204a:	ea85 0501 	eor.w	r5, r5, r1
 800204e:	ea86 0601 	eor.w	r6, r6, r1
 8002052:	fa85 f547 	uadd8	r5, r5, r7
 8002056:	faa3 f587 	sel	r5, r3, r7
 800205a:	fa86 f647 	uadd8	r6, r6, r7
 800205e:	faa5 f687 	sel	r6, r5, r7
 8002062:	b98e      	cbnz	r6, 8002088 <memchr+0x78>
 8002064:	d1ee      	bne.n	8002044 <memchr+0x34>
 8002066:	bcf0      	pop	{r4, r5, r6, r7}
 8002068:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800206c:	f002 0207 	and.w	r2, r2, #7
 8002070:	b132      	cbz	r2, 8002080 <memchr+0x70>
 8002072:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002076:	3a01      	subs	r2, #1
 8002078:	ea83 0301 	eor.w	r3, r3, r1
 800207c:	b113      	cbz	r3, 8002084 <memchr+0x74>
 800207e:	d1f8      	bne.n	8002072 <memchr+0x62>
 8002080:	2000      	movs	r0, #0
 8002082:	4770      	bx	lr
 8002084:	3801      	subs	r0, #1
 8002086:	4770      	bx	lr
 8002088:	2d00      	cmp	r5, #0
 800208a:	bf06      	itte	eq
 800208c:	4635      	moveq	r5, r6
 800208e:	3803      	subeq	r0, #3
 8002090:	3807      	subne	r0, #7
 8002092:	f015 0f01 	tst.w	r5, #1
 8002096:	d107      	bne.n	80020a8 <memchr+0x98>
 8002098:	3001      	adds	r0, #1
 800209a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800209e:	bf02      	ittt	eq
 80020a0:	3001      	addeq	r0, #1
 80020a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80020a6:	3001      	addeq	r0, #1
 80020a8:	bcf0      	pop	{r4, r5, r6, r7}
 80020aa:	3801      	subs	r0, #1
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop

080020b0 <strlen>:
 80020b0:	4603      	mov	r3, r0
 80020b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80020b6:	2a00      	cmp	r2, #0
 80020b8:	d1fb      	bne.n	80020b2 <strlen+0x2>
 80020ba:	1a18      	subs	r0, r3, r0
 80020bc:	3801      	subs	r0, #1
 80020be:	4770      	bx	lr

080020c0 <__aeabi_uldivmod>:
 80020c0:	b953      	cbnz	r3, 80020d8 <__aeabi_uldivmod+0x18>
 80020c2:	b94a      	cbnz	r2, 80020d8 <__aeabi_uldivmod+0x18>
 80020c4:	2900      	cmp	r1, #0
 80020c6:	bf08      	it	eq
 80020c8:	2800      	cmpeq	r0, #0
 80020ca:	bf1c      	itt	ne
 80020cc:	f04f 31ff 	movne.w	r1, #4294967295
 80020d0:	f04f 30ff 	movne.w	r0, #4294967295
 80020d4:	f000 b970 	b.w	80023b8 <__aeabi_idiv0>
 80020d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80020dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80020e0:	f000 f806 	bl	80020f0 <__udivmoddi4>
 80020e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80020e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80020ec:	b004      	add	sp, #16
 80020ee:	4770      	bx	lr

080020f0 <__udivmoddi4>:
 80020f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020f4:	9e08      	ldr	r6, [sp, #32]
 80020f6:	460d      	mov	r5, r1
 80020f8:	4604      	mov	r4, r0
 80020fa:	460f      	mov	r7, r1
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d14a      	bne.n	8002196 <__udivmoddi4+0xa6>
 8002100:	428a      	cmp	r2, r1
 8002102:	4694      	mov	ip, r2
 8002104:	d965      	bls.n	80021d2 <__udivmoddi4+0xe2>
 8002106:	fab2 f382 	clz	r3, r2
 800210a:	b143      	cbz	r3, 800211e <__udivmoddi4+0x2e>
 800210c:	fa02 fc03 	lsl.w	ip, r2, r3
 8002110:	f1c3 0220 	rsb	r2, r3, #32
 8002114:	409f      	lsls	r7, r3
 8002116:	fa20 f202 	lsr.w	r2, r0, r2
 800211a:	4317      	orrs	r7, r2
 800211c:	409c      	lsls	r4, r3
 800211e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8002122:	fa1f f58c 	uxth.w	r5, ip
 8002126:	fbb7 f1fe 	udiv	r1, r7, lr
 800212a:	0c22      	lsrs	r2, r4, #16
 800212c:	fb0e 7711 	mls	r7, lr, r1, r7
 8002130:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8002134:	fb01 f005 	mul.w	r0, r1, r5
 8002138:	4290      	cmp	r0, r2
 800213a:	d90a      	bls.n	8002152 <__udivmoddi4+0x62>
 800213c:	eb1c 0202 	adds.w	r2, ip, r2
 8002140:	f101 37ff 	add.w	r7, r1, #4294967295
 8002144:	f080 811c 	bcs.w	8002380 <__udivmoddi4+0x290>
 8002148:	4290      	cmp	r0, r2
 800214a:	f240 8119 	bls.w	8002380 <__udivmoddi4+0x290>
 800214e:	3902      	subs	r1, #2
 8002150:	4462      	add	r2, ip
 8002152:	1a12      	subs	r2, r2, r0
 8002154:	b2a4      	uxth	r4, r4
 8002156:	fbb2 f0fe 	udiv	r0, r2, lr
 800215a:	fb0e 2210 	mls	r2, lr, r0, r2
 800215e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8002162:	fb00 f505 	mul.w	r5, r0, r5
 8002166:	42a5      	cmp	r5, r4
 8002168:	d90a      	bls.n	8002180 <__udivmoddi4+0x90>
 800216a:	eb1c 0404 	adds.w	r4, ip, r4
 800216e:	f100 32ff 	add.w	r2, r0, #4294967295
 8002172:	f080 8107 	bcs.w	8002384 <__udivmoddi4+0x294>
 8002176:	42a5      	cmp	r5, r4
 8002178:	f240 8104 	bls.w	8002384 <__udivmoddi4+0x294>
 800217c:	4464      	add	r4, ip
 800217e:	3802      	subs	r0, #2
 8002180:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8002184:	1b64      	subs	r4, r4, r5
 8002186:	2100      	movs	r1, #0
 8002188:	b11e      	cbz	r6, 8002192 <__udivmoddi4+0xa2>
 800218a:	40dc      	lsrs	r4, r3
 800218c:	2300      	movs	r3, #0
 800218e:	e9c6 4300 	strd	r4, r3, [r6]
 8002192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002196:	428b      	cmp	r3, r1
 8002198:	d908      	bls.n	80021ac <__udivmoddi4+0xbc>
 800219a:	2e00      	cmp	r6, #0
 800219c:	f000 80ed 	beq.w	800237a <__udivmoddi4+0x28a>
 80021a0:	2100      	movs	r1, #0
 80021a2:	e9c6 0500 	strd	r0, r5, [r6]
 80021a6:	4608      	mov	r0, r1
 80021a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021ac:	fab3 f183 	clz	r1, r3
 80021b0:	2900      	cmp	r1, #0
 80021b2:	d149      	bne.n	8002248 <__udivmoddi4+0x158>
 80021b4:	42ab      	cmp	r3, r5
 80021b6:	d302      	bcc.n	80021be <__udivmoddi4+0xce>
 80021b8:	4282      	cmp	r2, r0
 80021ba:	f200 80f8 	bhi.w	80023ae <__udivmoddi4+0x2be>
 80021be:	1a84      	subs	r4, r0, r2
 80021c0:	eb65 0203 	sbc.w	r2, r5, r3
 80021c4:	2001      	movs	r0, #1
 80021c6:	4617      	mov	r7, r2
 80021c8:	2e00      	cmp	r6, #0
 80021ca:	d0e2      	beq.n	8002192 <__udivmoddi4+0xa2>
 80021cc:	e9c6 4700 	strd	r4, r7, [r6]
 80021d0:	e7df      	b.n	8002192 <__udivmoddi4+0xa2>
 80021d2:	b902      	cbnz	r2, 80021d6 <__udivmoddi4+0xe6>
 80021d4:	deff      	udf	#255	; 0xff
 80021d6:	fab2 f382 	clz	r3, r2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f040 8090 	bne.w	8002300 <__udivmoddi4+0x210>
 80021e0:	1a8a      	subs	r2, r1, r2
 80021e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80021e6:	fa1f fe8c 	uxth.w	lr, ip
 80021ea:	2101      	movs	r1, #1
 80021ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80021f0:	fb07 2015 	mls	r0, r7, r5, r2
 80021f4:	0c22      	lsrs	r2, r4, #16
 80021f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80021fa:	fb0e f005 	mul.w	r0, lr, r5
 80021fe:	4290      	cmp	r0, r2
 8002200:	d908      	bls.n	8002214 <__udivmoddi4+0x124>
 8002202:	eb1c 0202 	adds.w	r2, ip, r2
 8002206:	f105 38ff 	add.w	r8, r5, #4294967295
 800220a:	d202      	bcs.n	8002212 <__udivmoddi4+0x122>
 800220c:	4290      	cmp	r0, r2
 800220e:	f200 80cb 	bhi.w	80023a8 <__udivmoddi4+0x2b8>
 8002212:	4645      	mov	r5, r8
 8002214:	1a12      	subs	r2, r2, r0
 8002216:	b2a4      	uxth	r4, r4
 8002218:	fbb2 f0f7 	udiv	r0, r2, r7
 800221c:	fb07 2210 	mls	r2, r7, r0, r2
 8002220:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8002224:	fb0e fe00 	mul.w	lr, lr, r0
 8002228:	45a6      	cmp	lr, r4
 800222a:	d908      	bls.n	800223e <__udivmoddi4+0x14e>
 800222c:	eb1c 0404 	adds.w	r4, ip, r4
 8002230:	f100 32ff 	add.w	r2, r0, #4294967295
 8002234:	d202      	bcs.n	800223c <__udivmoddi4+0x14c>
 8002236:	45a6      	cmp	lr, r4
 8002238:	f200 80bb 	bhi.w	80023b2 <__udivmoddi4+0x2c2>
 800223c:	4610      	mov	r0, r2
 800223e:	eba4 040e 	sub.w	r4, r4, lr
 8002242:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8002246:	e79f      	b.n	8002188 <__udivmoddi4+0x98>
 8002248:	f1c1 0720 	rsb	r7, r1, #32
 800224c:	408b      	lsls	r3, r1
 800224e:	fa22 fc07 	lsr.w	ip, r2, r7
 8002252:	ea4c 0c03 	orr.w	ip, ip, r3
 8002256:	fa05 f401 	lsl.w	r4, r5, r1
 800225a:	fa20 f307 	lsr.w	r3, r0, r7
 800225e:	40fd      	lsrs	r5, r7
 8002260:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8002264:	4323      	orrs	r3, r4
 8002266:	fbb5 f8f9 	udiv	r8, r5, r9
 800226a:	fa1f fe8c 	uxth.w	lr, ip
 800226e:	fb09 5518 	mls	r5, r9, r8, r5
 8002272:	0c1c      	lsrs	r4, r3, #16
 8002274:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8002278:	fb08 f50e 	mul.w	r5, r8, lr
 800227c:	42a5      	cmp	r5, r4
 800227e:	fa02 f201 	lsl.w	r2, r2, r1
 8002282:	fa00 f001 	lsl.w	r0, r0, r1
 8002286:	d90b      	bls.n	80022a0 <__udivmoddi4+0x1b0>
 8002288:	eb1c 0404 	adds.w	r4, ip, r4
 800228c:	f108 3aff 	add.w	sl, r8, #4294967295
 8002290:	f080 8088 	bcs.w	80023a4 <__udivmoddi4+0x2b4>
 8002294:	42a5      	cmp	r5, r4
 8002296:	f240 8085 	bls.w	80023a4 <__udivmoddi4+0x2b4>
 800229a:	f1a8 0802 	sub.w	r8, r8, #2
 800229e:	4464      	add	r4, ip
 80022a0:	1b64      	subs	r4, r4, r5
 80022a2:	b29d      	uxth	r5, r3
 80022a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80022a8:	fb09 4413 	mls	r4, r9, r3, r4
 80022ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80022b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80022b4:	45a6      	cmp	lr, r4
 80022b6:	d908      	bls.n	80022ca <__udivmoddi4+0x1da>
 80022b8:	eb1c 0404 	adds.w	r4, ip, r4
 80022bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80022c0:	d26c      	bcs.n	800239c <__udivmoddi4+0x2ac>
 80022c2:	45a6      	cmp	lr, r4
 80022c4:	d96a      	bls.n	800239c <__udivmoddi4+0x2ac>
 80022c6:	3b02      	subs	r3, #2
 80022c8:	4464      	add	r4, ip
 80022ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80022ce:	fba3 9502 	umull	r9, r5, r3, r2
 80022d2:	eba4 040e 	sub.w	r4, r4, lr
 80022d6:	42ac      	cmp	r4, r5
 80022d8:	46c8      	mov	r8, r9
 80022da:	46ae      	mov	lr, r5
 80022dc:	d356      	bcc.n	800238c <__udivmoddi4+0x29c>
 80022de:	d053      	beq.n	8002388 <__udivmoddi4+0x298>
 80022e0:	b156      	cbz	r6, 80022f8 <__udivmoddi4+0x208>
 80022e2:	ebb0 0208 	subs.w	r2, r0, r8
 80022e6:	eb64 040e 	sbc.w	r4, r4, lr
 80022ea:	fa04 f707 	lsl.w	r7, r4, r7
 80022ee:	40ca      	lsrs	r2, r1
 80022f0:	40cc      	lsrs	r4, r1
 80022f2:	4317      	orrs	r7, r2
 80022f4:	e9c6 7400 	strd	r7, r4, [r6]
 80022f8:	4618      	mov	r0, r3
 80022fa:	2100      	movs	r1, #0
 80022fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002300:	f1c3 0120 	rsb	r1, r3, #32
 8002304:	fa02 fc03 	lsl.w	ip, r2, r3
 8002308:	fa20 f201 	lsr.w	r2, r0, r1
 800230c:	fa25 f101 	lsr.w	r1, r5, r1
 8002310:	409d      	lsls	r5, r3
 8002312:	432a      	orrs	r2, r5
 8002314:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8002318:	fa1f fe8c 	uxth.w	lr, ip
 800231c:	fbb1 f0f7 	udiv	r0, r1, r7
 8002320:	fb07 1510 	mls	r5, r7, r0, r1
 8002324:	0c11      	lsrs	r1, r2, #16
 8002326:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800232a:	fb00 f50e 	mul.w	r5, r0, lr
 800232e:	428d      	cmp	r5, r1
 8002330:	fa04 f403 	lsl.w	r4, r4, r3
 8002334:	d908      	bls.n	8002348 <__udivmoddi4+0x258>
 8002336:	eb1c 0101 	adds.w	r1, ip, r1
 800233a:	f100 38ff 	add.w	r8, r0, #4294967295
 800233e:	d22f      	bcs.n	80023a0 <__udivmoddi4+0x2b0>
 8002340:	428d      	cmp	r5, r1
 8002342:	d92d      	bls.n	80023a0 <__udivmoddi4+0x2b0>
 8002344:	3802      	subs	r0, #2
 8002346:	4461      	add	r1, ip
 8002348:	1b49      	subs	r1, r1, r5
 800234a:	b292      	uxth	r2, r2
 800234c:	fbb1 f5f7 	udiv	r5, r1, r7
 8002350:	fb07 1115 	mls	r1, r7, r5, r1
 8002354:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002358:	fb05 f10e 	mul.w	r1, r5, lr
 800235c:	4291      	cmp	r1, r2
 800235e:	d908      	bls.n	8002372 <__udivmoddi4+0x282>
 8002360:	eb1c 0202 	adds.w	r2, ip, r2
 8002364:	f105 38ff 	add.w	r8, r5, #4294967295
 8002368:	d216      	bcs.n	8002398 <__udivmoddi4+0x2a8>
 800236a:	4291      	cmp	r1, r2
 800236c:	d914      	bls.n	8002398 <__udivmoddi4+0x2a8>
 800236e:	3d02      	subs	r5, #2
 8002370:	4462      	add	r2, ip
 8002372:	1a52      	subs	r2, r2, r1
 8002374:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8002378:	e738      	b.n	80021ec <__udivmoddi4+0xfc>
 800237a:	4631      	mov	r1, r6
 800237c:	4630      	mov	r0, r6
 800237e:	e708      	b.n	8002192 <__udivmoddi4+0xa2>
 8002380:	4639      	mov	r1, r7
 8002382:	e6e6      	b.n	8002152 <__udivmoddi4+0x62>
 8002384:	4610      	mov	r0, r2
 8002386:	e6fb      	b.n	8002180 <__udivmoddi4+0x90>
 8002388:	4548      	cmp	r0, r9
 800238a:	d2a9      	bcs.n	80022e0 <__udivmoddi4+0x1f0>
 800238c:	ebb9 0802 	subs.w	r8, r9, r2
 8002390:	eb65 0e0c 	sbc.w	lr, r5, ip
 8002394:	3b01      	subs	r3, #1
 8002396:	e7a3      	b.n	80022e0 <__udivmoddi4+0x1f0>
 8002398:	4645      	mov	r5, r8
 800239a:	e7ea      	b.n	8002372 <__udivmoddi4+0x282>
 800239c:	462b      	mov	r3, r5
 800239e:	e794      	b.n	80022ca <__udivmoddi4+0x1da>
 80023a0:	4640      	mov	r0, r8
 80023a2:	e7d1      	b.n	8002348 <__udivmoddi4+0x258>
 80023a4:	46d0      	mov	r8, sl
 80023a6:	e77b      	b.n	80022a0 <__udivmoddi4+0x1b0>
 80023a8:	3d02      	subs	r5, #2
 80023aa:	4462      	add	r2, ip
 80023ac:	e732      	b.n	8002214 <__udivmoddi4+0x124>
 80023ae:	4608      	mov	r0, r1
 80023b0:	e70a      	b.n	80021c8 <__udivmoddi4+0xd8>
 80023b2:	4464      	add	r4, ip
 80023b4:	3802      	subs	r0, #2
 80023b6:	e742      	b.n	800223e <__udivmoddi4+0x14e>

080023b8 <__aeabi_idiv0>:
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop

080023bc <telnet_client_init>:
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
	tpcb = tcp_new();
 80023c2:	f010 ff03 	bl	80131cc <tcp_new>
 80023c6:	6078      	str	r0, [r7, #4]
	IP_ADDR4(&destIPADDR, LDC_ADDR1, LDC_ADDR2, LDC_ADDR3, LDC_ADDR4); //IP address of LDC501
 80023c8:	4b11      	ldr	r3, [pc, #68]	; (8002410 <telnet_client_init+0x54>)
 80023ca:	603b      	str	r3, [r7, #0]
		printf("[Telnet Client] Beginning TCP connection.\n\r");
 80023cc:	4811      	ldr	r0, [pc, #68]	; (8002414 <telnet_client_init+0x58>)
 80023ce:	f018 ff4b 	bl	801b268 <iprintf>
		printf("[Telnet Client] Connecting to 192.168.1.11 on port %d.\n\r", LDC_PORT);
 80023d2:	f242 21b6 	movw	r1, #8886	; 0x22b6
 80023d6:	4810      	ldr	r0, [pc, #64]	; (8002418 <telnet_client_init+0x5c>)
 80023d8:	f018 ff46 	bl	801b268 <iprintf>
		printf("[Telnet Client] Connecting to %s on port %d.\n\r", ipaddr_ntoa(&destIPADDR), LDC_PORT);
 80023dc:	463b      	mov	r3, r7
 80023de:	4618      	mov	r0, r3
 80023e0:	f017 fa62 	bl	80198a8 <ip4addr_ntoa>
 80023e4:	4603      	mov	r3, r0
 80023e6:	f242 22b6 	movw	r2, #8886	; 0x22b6
 80023ea:	4619      	mov	r1, r3
 80023ec:	480b      	ldr	r0, [pc, #44]	; (800241c <telnet_client_init+0x60>)
 80023ee:	f018 ff3b 	bl	801b268 <iprintf>
	tcp_connect(tpcb, &destIPADDR, LDC_PORT, telnet_client_connected);
 80023f2:	4639      	mov	r1, r7
 80023f4:	4b0a      	ldr	r3, [pc, #40]	; (8002420 <telnet_client_init+0x64>)
 80023f6:	f242 22b6 	movw	r2, #8886	; 0x22b6
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f00f ffaa 	bl	8012354 <tcp_connect>
		printf("[Telnet Client] Called tcp_connect, awaiting callback.\n\r");
 8002400:	4808      	ldr	r0, [pc, #32]	; (8002424 <telnet_client_init+0x68>)
 8002402:	f018 ff31 	bl	801b268 <iprintf>
}
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	0e01a8c0 	.word	0x0e01a8c0
 8002414:	0801d8b8 	.word	0x0801d8b8
 8002418:	0801d8e4 	.word	0x0801d8e4
 800241c:	0801d920 	.word	0x0801d920
 8002420:	00000235 	.word	0x00000235
 8002424:	0801d950 	.word	0x0801d950

08002428 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8002430:	1d39      	adds	r1, r7, #4
 8002432:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002436:	2201      	movs	r2, #1
 8002438:	4803      	ldr	r0, [pc, #12]	; (8002448 <__io_putchar+0x20>)
 800243a:	f00b fe3d 	bl	800e0b8 <HAL_UART_Transmit>
	return ch;
 800243e:	687b      	ldr	r3, [r7, #4]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20000514 	.word	0x20000514
 800244c:	00000000 	.word	0x00000000

08002450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* Copy from FLASH to itcm */
  memcpy(&_sitcm, &_siitcm, ((void*) &_eitcm - (void*) &_sitcm));
 8002456:	4ab4      	ldr	r2, [pc, #720]	; (8002728 <main+0x2d8>)
 8002458:	4bb4      	ldr	r3, [pc, #720]	; (800272c <main+0x2dc>)
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	461a      	mov	r2, r3
 800245e:	49b4      	ldr	r1, [pc, #720]	; (8002730 <main+0x2e0>)
 8002460:	48b2      	ldr	r0, [pc, #712]	; (800272c <main+0x2dc>)
 8002462:	f019 f90a 	bl	801b67a <memcpy>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002466:	4bb3      	ldr	r3, [pc, #716]	; (8002734 <main+0x2e4>)
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d11b      	bne.n	80024aa <main+0x5a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002472:	f3bf 8f4f 	dsb	sy
}
 8002476:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002478:	f3bf 8f6f 	isb	sy
}
 800247c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800247e:	4bad      	ldr	r3, [pc, #692]	; (8002734 <main+0x2e4>)
 8002480:	2200      	movs	r2, #0
 8002482:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002486:	f3bf 8f4f 	dsb	sy
}
 800248a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800248c:	f3bf 8f6f 	isb	sy
}
 8002490:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002492:	4ba8      	ldr	r3, [pc, #672]	; (8002734 <main+0x2e4>)
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	4aa7      	ldr	r2, [pc, #668]	; (8002734 <main+0x2e4>)
 8002498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800249c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800249e:	f3bf 8f4f 	dsb	sy
}
 80024a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80024a4:	f3bf 8f6f 	isb	sy
}
 80024a8:	e000      	b.n	80024ac <main+0x5c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80024aa:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80024ac:	4ba1      	ldr	r3, [pc, #644]	; (8002734 <main+0x2e4>)
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d138      	bne.n	800252a <main+0xda>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80024b8:	4b9e      	ldr	r3, [pc, #632]	; (8002734 <main+0x2e4>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80024c0:	f3bf 8f4f 	dsb	sy
}
 80024c4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80024c6:	4b9b      	ldr	r3, [pc, #620]	; (8002734 <main+0x2e4>)
 80024c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024cc:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	0b5b      	lsrs	r3, r3, #13
 80024d2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80024d6:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	08db      	lsrs	r3, r3, #3
 80024dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024e0:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	015a      	lsls	r2, r3, #5
 80024e6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80024ea:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80024f0:	4990      	ldr	r1, [pc, #576]	; (8002734 <main+0x2e4>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	1e5a      	subs	r2, r3, #1
 80024fc:	607a      	str	r2, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1ef      	bne.n	80024e2 <main+0x92>
    } while(sets-- != 0U);
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	1e5a      	subs	r2, r3, #1
 8002506:	60ba      	str	r2, [r7, #8]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1e5      	bne.n	80024d8 <main+0x88>
  __ASM volatile ("dsb 0xF":::"memory");
 800250c:	f3bf 8f4f 	dsb	sy
}
 8002510:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002512:	4b88      	ldr	r3, [pc, #544]	; (8002734 <main+0x2e4>)
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	4a87      	ldr	r2, [pc, #540]	; (8002734 <main+0x2e4>)
 8002518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800251c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800251e:	f3bf 8f4f 	dsb	sy
}
 8002522:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002524:	f3bf 8f6f 	isb	sy
}
 8002528:	e000      	b.n	800252c <main+0xdc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800252a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800252c:	f001 fe16 	bl	800415c <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8002530:	f000 ff20 	bl	8003374 <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002534:	f000 f938 	bl	80027a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002538:	f000 fd94 	bl	8003064 <MX_GPIO_Init>
  MX_LPTIM1_Init();
 800253c:	f000 fbd8 	bl	8002cf0 <MX_LPTIM1_Init>
  MX_DAC1_Init();
 8002540:	f000 fa52 	bl	80029e8 <MX_DAC1_Init>
  MX_USART3_UART_Init();
 8002544:	f000 fd40 	bl	8002fc8 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8002548:	f000 fca2 	bl	8002e90 <MX_TIM3_Init>
  MX_TIM1_Init();
 800254c:	f000 fbfe 	bl	8002d4c <MX_TIM1_Init>
  MX_HRTIM_Init();
 8002550:	f000 fa7c 	bl	8002a4c <MX_HRTIM_Init>
  MX_ADC3_Init();
 8002554:	f000 f9e6 	bl	8002924 <MX_ADC3_Init>
  MX_LWIP_Init();
 8002558:	f00c fec2 	bl	800f2e0 <MX_LWIP_Init>
  MX_TIM2_Init();
 800255c:	f000 fc4a 	bl	8002df4 <MX_TIM2_Init>
  MX_TIM5_Init();
 8002560:	f000 fce4 	bl	8002f2c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  printf("\033c"); //clears screen
 8002564:	4874      	ldr	r0, [pc, #464]	; (8002738 <main+0x2e8>)
 8002566:	f018 fe7f 	bl	801b268 <iprintf>
  printf("Atomic Clock - Source __TIMESTAMP__: %s\r\n", __TIMESTAMP__);
 800256a:	4974      	ldr	r1, [pc, #464]	; (800273c <main+0x2ec>)
 800256c:	4874      	ldr	r0, [pc, #464]	; (8002740 <main+0x2f0>)
 800256e:	f018 fe7b 	bl	801b268 <iprintf>

	#ifndef SYNTH_ENABLE
	printf("WARNING - MW Synthesiser is disabled\r\n");
 8002572:	4874      	ldr	r0, [pc, #464]	; (8002744 <main+0x2f4>)
 8002574:	f018 fede 	bl	801b334 <puts>
			printf("MW power setting (LO2GAIN): 0x%x \r\n", MW_power);
		#endif	//MW_VERBOSE
	#endif //SYNTH_ENABLE

	/* Start a low power timer to flash an LED approximately every second */
	if (HAL_LPTIM_Counter_Start_IT(&hlptim1, 1024) != HAL_OK) {
 8002578:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800257c:	4872      	ldr	r0, [pc, #456]	; (8002748 <main+0x2f8>)
 800257e:	f007 f937 	bl	80097f0 <HAL_LPTIM_Counter_Start_IT>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d004      	beq.n	8002592 <main+0x142>
		printf("Failed to start slow flashing LED!\r\n");
 8002588:	4870      	ldr	r0, [pc, #448]	; (800274c <main+0x2fc>)
 800258a:	f018 fed3 	bl	801b334 <puts>
		Error_Handler();
 800258e:	f000 ff43 	bl	8003418 <Error_Handler>
	}

	/* Start the DAC and zero its output */
	if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK) {
 8002592:	2100      	movs	r1, #0
 8002594:	486e      	ldr	r0, [pc, #440]	; (8002750 <main+0x300>)
 8002596:	f003 fde1 	bl	800615c <HAL_DAC_Start>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d004      	beq.n	80025aa <main+0x15a>
		printf("Failure to initialise DAC \r\n");
 80025a0:	486c      	ldr	r0, [pc, #432]	; (8002754 <main+0x304>)
 80025a2:	f018 fec7 	bl	801b334 <puts>
		Error_Handler();
 80025a6:	f000 ff37 	bl	8003418 <Error_Handler>
	}
	printf("Setting DAC output to 1.00V \r\n");
 80025aa:	486b      	ldr	r0, [pc, #428]	; (8002758 <main+0x308>)
 80025ac:	f018 fec2 	bl	801b334 <puts>
	if(HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1241) != HAL_OK){
 80025b0:	f240 43d9 	movw	r3, #1241	; 0x4d9
 80025b4:	2200      	movs	r2, #0
 80025b6:	2100      	movs	r1, #0
 80025b8:	4865      	ldr	r0, [pc, #404]	; (8002750 <main+0x300>)
 80025ba:	f003 fe21 	bl	8006200 <HAL_DAC_SetValue>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d004      	beq.n	80025ce <main+0x17e>
			printf("DAC setup failed!\r\n");
 80025c4:	4865      	ldr	r0, [pc, #404]	; (800275c <main+0x30c>)
 80025c6:	f018 feb5 	bl	801b334 <puts>
		Error_Handler();
 80025ca:	f000 ff25 	bl	8003418 <Error_Handler>
	}

	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_SET); // Laser_tuning output high
 80025ce:	2201      	movs	r2, #1
 80025d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025d4:	4862      	ldr	r0, [pc, #392]	; (8002760 <main+0x310>)
 80025d6:	f005 fcff 	bl	8007fd8 <HAL_GPIO_WritePin>

	/* Fire up the ADC
	 * external trigger, single conversion selected in ioc file
	 * calibrate ADC for better accuracy and start it w/ interrupt
	 */
	if(HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK){
 80025da:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80025de:	2100      	movs	r1, #0
 80025e0:	4860      	ldr	r0, [pc, #384]	; (8002764 <main+0x314>)
 80025e2:	f003 fb77 	bl	8005cd4 <HAL_ADCEx_Calibration_Start>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d004      	beq.n	80025f6 <main+0x1a6>
		printf("ADC calibration failure \r\n");
 80025ec:	485e      	ldr	r0, [pc, #376]	; (8002768 <main+0x318>)
 80025ee:	f018 fea1 	bl	801b334 <puts>
		Error_Handler();
 80025f2:	f000 ff11 	bl	8003418 <Error_Handler>
	}
	//Start the ADC with interrupts enabled
	if(HAL_ADC_Start_IT(&hadc3) != HAL_OK){
 80025f6:	485b      	ldr	r0, [pc, #364]	; (8002764 <main+0x314>)
 80025f8:	f002 fa5a 	bl	8004ab0 <HAL_ADC_Start_IT>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d004      	beq.n	800260c <main+0x1bc>
		printf("Failed to start ADC with interrupt capability \r\n");
 8002602:	485a      	ldr	r0, [pc, #360]	; (800276c <main+0x31c>)
 8002604:	f018 fe96 	bl	801b334 <puts>
	                Error_Handler();
 8002608:	f000 ff06 	bl	8003418 <Error_Handler>
	}
	printf("ADC calibrated successfully and interrupt callback enabled \r\n");
 800260c:	4858      	ldr	r0, [pc, #352]	; (8002770 <main+0x320>)
 800260e:	f018 fe91 	bl	801b334 <puts>
	/* Calculate the MW sweep settings
	 * Notes:
	 * Measure the period of a POP cycle *AFTER* the ADC has been initialised
	 * Calculate sweep settings after first POP calibration routine
	 */
	start_timer(SWEEP_TIMER); //reset SWEEP_TIMER and start counting
 8002612:	4b58      	ldr	r3, [pc, #352]	; (8002774 <main+0x324>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f01a ff8e 	bl	801d538 <__start_timer_veneer>
	start_POP_calibration(true);
 800261c:	2001      	movs	r0, #1
 800261e:	f01a ffa3 	bl	801d568 <__start_POP_calibration_veneer>
	//loop here until period of POP cycle has been measured or 3s has elapsed
	//When correctly connected, POP cycle measurement should take 1.3s
	while (!POP_period_us && (check_timer(SWEEP_TIMER) < 3000000)) {
 8002622:	e001      	b.n	8002628 <main+0x1d8>
		MW_update();
 8002624:	f01a ff84 	bl	801d530 <__MW_update_veneer>
	while (!POP_period_us && (check_timer(SWEEP_TIMER) < 3000000)) {
 8002628:	4b53      	ldr	r3, [pc, #332]	; (8002778 <main+0x328>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d108      	bne.n	8002642 <main+0x1f2>
 8002630:	4b50      	ldr	r3, [pc, #320]	; (8002774 <main+0x324>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f01a ff87 	bl	801d548 <__check_timer_veneer>
 800263a:	4603      	mov	r3, r0
 800263c:	4a4f      	ldr	r2, [pc, #316]	; (800277c <main+0x32c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d9f0      	bls.n	8002624 <main+0x1d4>
//		printf("POP_period_us %lu, SWEEP_TIMER value %lu \r\n", POP_period_us, check_timer(SWEEP_TIMER));
	}
//	printf("Finished loop - POP_period_us %lu, SWEEP_TIMER value %lu \r\n", POP_period_us, check_timer(SWEEP_TIMER));
	stop_timer(SWEEP_TIMER); //stop SWEEP_TIMER
 8002642:	4b4c      	ldr	r3, [pc, #304]	; (8002774 <main+0x324>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f01a ff6a 	bl	801d520 <__stop_timer_veneer>
	if (!POP_period_us) {//if the calibration loop timed out
 800264c:	4b4a      	ldr	r3, [pc, #296]	; (8002778 <main+0x328>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d102      	bne.n	800265a <main+0x20a>
		printf("WARNING - STM32 is not receiving a periodic sample from the FPGA \r\n");
 8002654:	484a      	ldr	r0, [pc, #296]	; (8002780 <main+0x330>)
 8002656:	f018 fe6d 	bl	801b334 <puts>
	}

//	initiate_MW_calibration_sweep(POP_period);
//	calc_fixed_time_MW_sweep(3035735122, 1000, 20, ADD_SCOPE_SYNC_TIME); //1.5kHz sweep, 20s re-centred
//	calc_fixed_time_MW_sweep(HYPERFINE + MW_DELTA, 10, 3600, ADD_SCOPE_SYNC_TIME); //10Hz sweep, 1hr
	calc_fixed_time_MW_sweep(HYPERFINE + MW_DELTA, 10000, 50, ADD_SCOPE_SYNC_TIME); //10kHz sweep, 50s
 800265a:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8002708 <main+0x2b8>
 800265e:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8002710 <main+0x2c0>
 8002662:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002666:	2000      	movs	r0, #0
 8002668:	ed9f 2b2b 	vldr	d2, [pc, #172]	; 8002718 <main+0x2c8>
 800266c:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 8002720 <main+0x2d0>
 8002670:	eeb0 0b47 	vmov.f64	d0, d7
 8002674:	f01a ff6c 	bl	801d550 <__calc_fixed_time_MW_sweep_veneer>
//	last_pin_status = pin_status;

//	timer_delay(MW_TIMER, 7000);
//	timer_delay(MW_TIMER, 50000);

	telnet_client_init(); //initialise telnet client
 8002678:	f7ff fea0 	bl	80023bc <telnet_client_init>
	printf("Telnet client initialised\r\n");
 800267c:	4841      	ldr	r0, [pc, #260]	; (8002784 <main+0x334>)
 800267e:	f018 fe59 	bl	801b334 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	printf("Entering main while loop\r\n");
 8002682:	4841      	ldr	r0, [pc, #260]	; (8002788 <main+0x338>)
 8002684:	f018 fe56 	bl	801b334 <puts>
//		if (pin_status != last_pin_status) {
//			printf("Blue button status: %u \r\n", pin_status);
//			last_pin_status = pin_status;
//		}

		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 8002688:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800268c:	483f      	ldr	r0, [pc, #252]	; (800278c <main+0x33c>)
 800268e:	f005 fc8b 	bl	8007fa8 <HAL_GPIO_ReadPin>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	bf14      	ite	ne
 8002698:	2301      	movne	r3, #1
 800269a:	2300      	moveq	r3, #0
 800269c:	b2da      	uxtb	r2, r3
 800269e:	4b3c      	ldr	r3, [pc, #240]	; (8002790 <main+0x340>)
 80026a0:	701a      	strb	r2, [r3, #0]
		if (blue_button_status) {// If blue button is pressed
 80026a2:	4b3b      	ldr	r3, [pc, #236]	; (8002790 <main+0x340>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d020      	beq.n	80026ee <main+0x29e>
			printf("Blue button pressed....\r\n");
 80026ac:	4839      	ldr	r0, [pc, #228]	; (8002794 <main+0x344>)
 80026ae:	f018 fe41 	bl	801b334 <puts>
			printf("Initialising comms with LDC501\r\n");
 80026b2:	4839      	ldr	r0, [pc, #228]	; (8002798 <main+0x348>)
 80026b4:	f018 fe3e 	bl	801b334 <puts>
			init_ldc_comms();
 80026b8:	f01a ff36 	bl	801d528 <__init_ldc_comms_veneer>
//			} else {
//				printf("Initiating sweep.\r\n");
//				mw_sweep_started = true;
//				start_continuous_MW_sweep();
//			}
			while(blue_button_status) {//remain here polling button until it is released
 80026bc:	e012      	b.n	80026e4 <main+0x294>
				timer_delay(SLOW_TIMER, 100); //10ms delay
 80026be:	4b37      	ldr	r3, [pc, #220]	; (800279c <main+0x34c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2164      	movs	r1, #100	; 0x64
 80026c4:	4618      	mov	r0, r3
 80026c6:	f01a ff3b 	bl	801d540 <__timer_delay_veneer>
				blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 80026ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026ce:	482f      	ldr	r0, [pc, #188]	; (800278c <main+0x33c>)
 80026d0:	f005 fc6a 	bl	8007fa8 <HAL_GPIO_ReadPin>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	bf14      	ite	ne
 80026da:	2301      	movne	r3, #1
 80026dc:	2300      	moveq	r3, #0
 80026de:	b2da      	uxtb	r2, r3
 80026e0:	4b2b      	ldr	r3, [pc, #172]	; (8002790 <main+0x340>)
 80026e2:	701a      	strb	r2, [r3, #0]
			while(blue_button_status) {//remain here polling button until it is released
 80026e4:	4b2a      	ldr	r3, [pc, #168]	; (8002790 <main+0x340>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1e7      	bne.n	80026be <main+0x26e>
			}
		}

		if (mw_sweep_started) {//won't execute until the first time the blue button is pressed
 80026ee:	4b2c      	ldr	r3, [pc, #176]	; (80027a0 <main+0x350>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
//			run_sweep();
//			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET); //turn off red LED
			//printf("Sweep complete.\r\n");
			//printf("LO2GAIN: 0x%x \r\n", MW_power);
		}
		MW_update();
 80026f2:	f01a ff1d 	bl	801d530 <__MW_update_veneer>

	    /* Ethernet handling */
		ethernetif_input(&gnetif);
 80026f6:	482b      	ldr	r0, [pc, #172]	; (80027a4 <main+0x354>)
 80026f8:	f00d f860 	bl	800f7bc <ethernetif_input>
		sys_check_timeouts();
 80026fc:	f015 fb00 	bl	8017d00 <sys_check_timeouts>
		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 8002700:	e7c2      	b.n	8002688 <main+0x238>
 8002702:	bf00      	nop
 8002704:	f3af 8000 	nop.w
 8002708:	6d600000 	.word	0x6d600000
 800270c:	41e69e35 	.word	0x41e69e35
 8002710:	00000000 	.word	0x00000000
 8002714:	408f4000 	.word	0x408f4000
 8002718:	00000000 	.word	0x00000000
 800271c:	40490000 	.word	0x40490000
 8002720:	00000000 	.word	0x00000000
 8002724:	40c38800 	.word	0x40c38800
 8002728:	00001d38 	.word	0x00001d38
 800272c:	00000000 	.word	0x00000000
 8002730:	08000298 	.word	0x08000298
 8002734:	e000ed00 	.word	0xe000ed00
 8002738:	0801d98c 	.word	0x0801d98c
 800273c:	0801d990 	.word	0x0801d990
 8002740:	0801d9ac 	.word	0x0801d9ac
 8002744:	0801d9d8 	.word	0x0801d9d8
 8002748:	200003ac 	.word	0x200003ac
 800274c:	0801da00 	.word	0x0801da00
 8002750:	200002bc 	.word	0x200002bc
 8002754:	0801da24 	.word	0x0801da24
 8002758:	0801da40 	.word	0x0801da40
 800275c:	0801da60 	.word	0x0801da60
 8002760:	58020400 	.word	0x58020400
 8002764:	20000258 	.word	0x20000258
 8002768:	0801da74 	.word	0x0801da74
 800276c:	0801da90 	.word	0x0801da90
 8002770:	0801dac0 	.word	0x0801dac0
 8002774:	2000001c 	.word	0x2000001c
 8002778:	200005ac 	.word	0x200005ac
 800277c:	002dc6bf 	.word	0x002dc6bf
 8002780:	0801db00 	.word	0x0801db00
 8002784:	0801db44 	.word	0x0801db44
 8002788:	0801db60 	.word	0x0801db60
 800278c:	58020800 	.word	0x58020800
 8002790:	200005a9 	.word	0x200005a9
 8002794:	0801db7c 	.word	0x0801db7c
 8002798:	0801db98 	.word	0x0801db98
 800279c:	20000014 	.word	0x20000014
 80027a0:	200005a8 	.word	0x200005a8
 80027a4:	20000614 	.word	0x20000614

080027a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b0a4      	sub	sp, #144	; 0x90
 80027ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027b2:	224c      	movs	r2, #76	; 0x4c
 80027b4:	2100      	movs	r1, #0
 80027b6:	4618      	mov	r0, r3
 80027b8:	f018 fee6 	bl	801b588 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027c0:	2220      	movs	r2, #32
 80027c2:	2100      	movs	r1, #0
 80027c4:	4618      	mov	r0, r3
 80027c6:	f018 fedf 	bl	801b588 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 80027ca:	f107 030c 	add.w	r3, r7, #12
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	605a      	str	r2, [r3, #4]
 80027d4:	609a      	str	r2, [r3, #8]
 80027d6:	60da      	str	r2, [r3, #12]
 80027d8:	611a      	str	r2, [r3, #16]
 80027da:	615a      	str	r2, [r3, #20]

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80027dc:	2002      	movs	r0, #2
 80027de:	f007 fb65 	bl	8009eac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027e2:	2300      	movs	r3, #0
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	4b4c      	ldr	r3, [pc, #304]	; (8002918 <SystemClock_Config+0x170>)
 80027e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ea:	4a4b      	ldr	r2, [pc, #300]	; (8002918 <SystemClock_Config+0x170>)
 80027ec:	f023 0301 	bic.w	r3, r3, #1
 80027f0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80027f2:	4b49      	ldr	r3, [pc, #292]	; (8002918 <SystemClock_Config+0x170>)
 80027f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	60bb      	str	r3, [r7, #8]
 80027fc:	4b47      	ldr	r3, [pc, #284]	; (800291c <SystemClock_Config+0x174>)
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	4a46      	ldr	r2, [pc, #280]	; (800291c <SystemClock_Config+0x174>)
 8002802:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002806:	6193      	str	r3, [r2, #24]
 8002808:	4b44      	ldr	r3, [pc, #272]	; (800291c <SystemClock_Config+0x174>)
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002814:	bf00      	nop
 8002816:	4b41      	ldr	r3, [pc, #260]	; (800291c <SystemClock_Config+0x174>)
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800281e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002822:	d1f8      	bne.n	8002816 <SystemClock_Config+0x6e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002824:	f007 fb32 	bl	8009e8c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002828:	f001 fd4e 	bl	80042c8 <HAL_GetREVID>
 800282c:	4b3c      	ldr	r3, [pc, #240]	; (8002920 <SystemClock_Config+0x178>)
 800282e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002830:	4a3b      	ldr	r2, [pc, #236]	; (8002920 <SystemClock_Config+0x178>)
 8002832:	f023 0318 	bic.w	r3, r3, #24
 8002836:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8002838:	2325      	movs	r3, #37	; 0x25
 800283a:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800283c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002840:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002842:	2301      	movs	r3, #1
 8002844:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002846:	2301      	movs	r3, #1
 8002848:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800284a:	2302      	movs	r3, #2
 800284c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800284e:	2302      	movs	r3, #2
 8002850:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002852:	2301      	movs	r3, #1
 8002854:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002856:	2360      	movs	r3, #96	; 0x60
 8002858:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 800285a:	2302      	movs	r3, #2
 800285c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800285e:	2304      	movs	r3, #4
 8002860:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002862:	2302      	movs	r3, #2
 8002864:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002868:	230c      	movs	r3, #12
 800286a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800286e:	2300      	movs	r3, #0
 8002870:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800287a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800287e:	4618      	mov	r0, r3
 8002880:	f007 fb4e 	bl	8009f20 <HAL_RCC_OscConfig>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800288a:	f000 fdc5 	bl	8003418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800288e:	233f      	movs	r3, #63	; 0x3f
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002892:	2303      	movs	r3, #3
 8002894:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002896:	2300      	movs	r3, #0
 8002898:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 800289a:	2309      	movs	r3, #9
 800289c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800289e:	2300      	movs	r3, #0
 80028a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80028a2:	2300      	movs	r3, #0
 80028a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV16;
 80028a6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80028aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80028ac:	2300      	movs	r3, #0
 80028ae:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80028b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028b4:	2101      	movs	r1, #1
 80028b6:	4618      	mov	r0, r3
 80028b8:	f007 ff8c 	bl	800a7d4 <HAL_RCC_ClockConfig>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <SystemClock_Config+0x11e>
  {
    Error_Handler();
 80028c2:	f000 fda9 	bl	8003418 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80028c6:	f008 f93b 	bl	800ab40 <HAL_RCC_EnableCSS>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 80028ca:	4b15      	ldr	r3, [pc, #84]	; (8002920 <SystemClock_Config+0x178>)
 80028cc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80028d0:	4a13      	ldr	r2, [pc, #76]	; (8002920 <SystemClock_Config+0x178>)
 80028d2:	f043 0302 	orr.w	r3, r3, #2
 80028d6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80028da:	4b11      	ldr	r3, [pc, #68]	; (8002920 <SystemClock_Config+0x178>)
 80028dc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	607b      	str	r3, [r7, #4]
 80028e6:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 80028e8:	2300      	movs	r3, #0
 80028ea:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 80028ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80028f0:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 80028f6:	f240 53b7 	movw	r3, #1463	; 0x5b7
 80028fa:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 80028fc:	2322      	movs	r3, #34	; 0x22
 80028fe:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8002900:	2320      	movs	r3, #32
 8002902:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8002904:	f107 030c 	add.w	r3, r7, #12
 8002908:	4618      	mov	r0, r3
 800290a:	f00a feb5 	bl	800d678 <HAL_RCCEx_CRSConfig>
}
 800290e:	bf00      	nop
 8002910:	3790      	adds	r7, #144	; 0x90
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	58000400 	.word	0x58000400
 800291c:	58024800 	.word	0x58024800
 8002920:	58024400 	.word	0x58024400

08002924 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b088      	sub	sp, #32
 8002928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800292a:	1d3b      	adds	r3, r7, #4
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	605a      	str	r2, [r3, #4]
 8002932:	609a      	str	r2, [r3, #8]
 8002934:	60da      	str	r2, [r3, #12]
 8002936:	611a      	str	r2, [r3, #16]
 8002938:	615a      	str	r2, [r3, #20]
 800293a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800293c:	4b28      	ldr	r3, [pc, #160]	; (80029e0 <MX_ADC3_Init+0xbc>)
 800293e:	4a29      	ldr	r2, [pc, #164]	; (80029e4 <MX_ADC3_Init+0xc0>)
 8002940:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8002942:	4b27      	ldr	r3, [pc, #156]	; (80029e0 <MX_ADC3_Init+0xbc>)
 8002944:	2200      	movs	r2, #0
 8002946:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002948:	4b25      	ldr	r3, [pc, #148]	; (80029e0 <MX_ADC3_Init+0xbc>)
 800294a:	2200      	movs	r2, #0
 800294c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800294e:	4b24      	ldr	r3, [pc, #144]	; (80029e0 <MX_ADC3_Init+0xbc>)
 8002950:	2204      	movs	r2, #4
 8002952:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8002954:	4b22      	ldr	r3, [pc, #136]	; (80029e0 <MX_ADC3_Init+0xbc>)
 8002956:	2200      	movs	r2, #0
 8002958:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800295a:	4b21      	ldr	r3, [pc, #132]	; (80029e0 <MX_ADC3_Init+0xbc>)
 800295c:	2200      	movs	r2, #0
 800295e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8002960:	4b1f      	ldr	r3, [pc, #124]	; (80029e0 <MX_ADC3_Init+0xbc>)
 8002962:	2201      	movs	r2, #1
 8002964:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002966:	4b1e      	ldr	r3, [pc, #120]	; (80029e0 <MX_ADC3_Init+0xbc>)
 8002968:	2200      	movs	r2, #0
 800296a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 800296c:	4b1c      	ldr	r3, [pc, #112]	; (80029e0 <MX_ADC3_Init+0xbc>)
 800296e:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8002972:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002974:	4b1a      	ldr	r3, [pc, #104]	; (80029e0 <MX_ADC3_Init+0xbc>)
 8002976:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800297a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800297c:	4b18      	ldr	r3, [pc, #96]	; (80029e0 <MX_ADC3_Init+0xbc>)
 800297e:	2200      	movs	r2, #0
 8002980:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002982:	4b17      	ldr	r3, [pc, #92]	; (80029e0 <MX_ADC3_Init+0xbc>)
 8002984:	2200      	movs	r2, #0
 8002986:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002988:	4b15      	ldr	r3, [pc, #84]	; (80029e0 <MX_ADC3_Init+0xbc>)
 800298a:	2200      	movs	r2, #0
 800298c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800298e:	4b14      	ldr	r3, [pc, #80]	; (80029e0 <MX_ADC3_Init+0xbc>)
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002996:	4812      	ldr	r0, [pc, #72]	; (80029e0 <MX_ADC3_Init+0xbc>)
 8002998:	f001 fee8 	bl	800476c <HAL_ADC_Init>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <MX_ADC3_Init+0x82>
  {
    Error_Handler();
 80029a2:	f000 fd39 	bl	8003418 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80029a6:	2301      	movs	r3, #1
 80029a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80029aa:	2306      	movs	r3, #6
 80029ac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80029ae:	2300      	movs	r3, #0
 80029b0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80029b2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80029b6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80029b8:	2304      	movs	r3, #4
 80029ba:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80029bc:	2300      	movs	r3, #0
 80029be:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80029c0:	2300      	movs	r3, #0
 80029c2:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80029c4:	1d3b      	adds	r3, r7, #4
 80029c6:	4619      	mov	r1, r3
 80029c8:	4805      	ldr	r0, [pc, #20]	; (80029e0 <MX_ADC3_Init+0xbc>)
 80029ca:	f002 fc0b 	bl	80051e4 <HAL_ADC_ConfigChannel>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 80029d4:	f000 fd20 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80029d8:	bf00      	nop
 80029da:	3720      	adds	r7, #32
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20000258 	.word	0x20000258
 80029e4:	58026000 	.word	0x58026000

080029e8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08a      	sub	sp, #40	; 0x28
 80029ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80029ee:	1d3b      	adds	r3, r7, #4
 80029f0:	2224      	movs	r2, #36	; 0x24
 80029f2:	2100      	movs	r1, #0
 80029f4:	4618      	mov	r0, r3
 80029f6:	f018 fdc7 	bl	801b588 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80029fa:	4b12      	ldr	r3, [pc, #72]	; (8002a44 <MX_DAC1_Init+0x5c>)
 80029fc:	4a12      	ldr	r2, [pc, #72]	; (8002a48 <MX_DAC1_Init+0x60>)
 80029fe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002a00:	4810      	ldr	r0, [pc, #64]	; (8002a44 <MX_DAC1_Init+0x5c>)
 8002a02:	f003 fb89 	bl	8006118 <HAL_DAC_Init>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8002a0c:	f000 fd04 	bl	8003418 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002a10:	2300      	movs	r3, #0
 8002a12:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002a14:	2300      	movs	r3, #0
 8002a16:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002a24:	1d3b      	adds	r3, r7, #4
 8002a26:	2200      	movs	r2, #0
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4806      	ldr	r0, [pc, #24]	; (8002a44 <MX_DAC1_Init+0x5c>)
 8002a2c:	f003 fc0e 	bl	800624c <HAL_DAC_ConfigChannel>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8002a36:	f000 fcef 	bl	8003418 <Error_Handler>
//    Error_Handler();
//  }

  /* USER CODE END DAC1_Init 2 */

}
 8002a3a:	bf00      	nop
 8002a3c:	3728      	adds	r7, #40	; 0x28
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	200002bc 	.word	0x200002bc
 8002a48:	40007400 	.word	0x40007400

08002a4c <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b0a4      	sub	sp, #144	; 0x90
 8002a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8002a52:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	605a      	str	r2, [r3, #4]
 8002a5c:	609a      	str	r2, [r3, #8]
 8002a5e:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8002a60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a64:	2254      	movs	r2, #84	; 0x54
 8002a66:	2100      	movs	r1, #0
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f018 fd8d 	bl	801b588 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8002a6e:	f107 0320 	add.w	r3, r7, #32
 8002a72:	2200      	movs	r2, #0
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	605a      	str	r2, [r3, #4]
 8002a78:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8002a7a:	463b      	mov	r3, r7
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	2100      	movs	r1, #0
 8002a80:	4618      	mov	r0, r3
 8002a82:	f018 fd81 	bl	801b588 <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */

  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 8002a86:	4b98      	ldr	r3, [pc, #608]	; (8002ce8 <MX_HRTIM_Init+0x29c>)
 8002a88:	4a98      	ldr	r2, [pc, #608]	; (8002cec <MX_HRTIM_Init+0x2a0>)
 8002a8a:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8002a8c:	4b96      	ldr	r3, [pc, #600]	; (8002ce8 <MX_HRTIM_Init+0x29c>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8002a92:	4b95      	ldr	r3, [pc, #596]	; (8002ce8 <MX_HRTIM_Init+0x29c>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8002a98:	4893      	ldr	r0, [pc, #588]	; (8002ce8 <MX_HRTIM_Init+0x29c>)
 8002a9a:	f005 faf5 	bl	8008088 <HAL_HRTIM_Init>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <MX_HRTIM_Init+0x5c>
  {
    Error_Handler();
 8002aa4:	f000 fcb8 	bl	8003418 <Error_Handler>
  }
  pTimeBaseCfg.Period = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH+POP_CYCLE_DELAY;
 8002aa8:	f24c 2318 	movw	r3, #49688	; 0xc218
 8002aac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV4;
 8002ab6:	2307      	movs	r3, #7
 8002ab8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8002abc:	2308      	movs	r3, #8
 8002abe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8002ac2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	2100      	movs	r1, #0
 8002aca:	4887      	ldr	r0, [pc, #540]	; (8002ce8 <MX_HRTIM_Init+0x29c>)
 8002acc:	f005 fbac 	bl	8008228 <HAL_HRTIM_TimeBaseConfig>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <MX_HRTIM_Init+0x8e>
  {
    Error_Handler();
 8002ad6:	f000 fc9f 	bl	8003418 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP3|HRTIM_TIM_IT_REP;
 8002ada:	2314      	movs	r3, #20
 8002adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 8002aea:	2301      	movs	r3, #1
 8002aec:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8002aee:	2300      	movs	r3, #0
 8002af0:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8002af2:	2300      	movs	r3, #0
 8002af4:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8002af6:	2300      	movs	r3, #0
 8002af8:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8002afa:	2300      	movs	r3, #0
 8002afc:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8002afe:	2300      	movs	r3, #0
 8002b00:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8002b02:	2300      	movs	r3, #0
 8002b04:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8002b06:	2300      	movs	r3, #0
 8002b08:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8002b12:	2300      	movs	r3, #0
 8002b14:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8002b16:	2300      	movs	r3, #0
 8002b18:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8002b22:	2300      	movs	r3, #0
 8002b24:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8002b26:	2300      	movs	r3, #0
 8002b28:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8002b2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b32:	461a      	mov	r2, r3
 8002b34:	2100      	movs	r1, #0
 8002b36:	486c      	ldr	r0, [pc, #432]	; (8002ce8 <MX_HRTIM_Init+0x29c>)
 8002b38:	f005 fb9e 	bl	8008278 <HAL_HRTIM_WaveformTimerConfig>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <MX_HRTIM_Init+0xfa>
  {
    Error_Handler();
 8002b42:	f000 fc69 	bl	8003418 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP2|HRTIM_TIM_IT_CMP3;
 8002b46:	2306      	movs	r3, #6
 8002b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 8002b4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b52:	461a      	mov	r2, r3
 8002b54:	2104      	movs	r1, #4
 8002b56:	4864      	ldr	r0, [pc, #400]	; (8002ce8 <MX_HRTIM_Init+0x29c>)
 8002b58:	f005 fb8e 	bl	8008278 <HAL_HRTIM_WaveformTimerConfig>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <MX_HRTIM_Init+0x11a>
  {
    Error_Handler();
 8002b62:	f000 fc59 	bl	8003418 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH;
 8002b66:	f240 631b 	movw	r3, #1563	; 0x61b
 8002b6a:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8002b6c:	f107 0320 	add.w	r3, r7, #32
 8002b70:	2201      	movs	r2, #1
 8002b72:	2100      	movs	r1, #0
 8002b74:	485c      	ldr	r0, [pc, #368]	; (8002ce8 <MX_HRTIM_Init+0x29c>)
 8002b76:	f005 fbf1 	bl	800835c <HAL_HRTIM_WaveformCompareConfig>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <MX_HRTIM_Init+0x138>
  {
    Error_Handler();
 8002b80:	f000 fc4a 	bl	8003418 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME;
 8002b84:	f244 5395 	movw	r3, #17813	; 0x4595
 8002b88:	623b      	str	r3, [r7, #32]
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8002b92:	f107 0320 	add.w	r3, r7, #32
 8002b96:	2202      	movs	r2, #2
 8002b98:	2100      	movs	r1, #0
 8002b9a:	4853      	ldr	r0, [pc, #332]	; (8002ce8 <MX_HRTIM_Init+0x29c>)
 8002b9c:	f005 fbde 	bl	800835c <HAL_HRTIM_WaveformCompareConfig>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <MX_HRTIM_Init+0x15e>
  {
    Error_Handler();
 8002ba6:	f000 fc37 	bl	8003418 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH;
 8002baa:	f640 536e 	movw	r3, #3438	; 0xd6e
 8002bae:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8002bb0:	f107 0320 	add.w	r3, r7, #32
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	2104      	movs	r1, #4
 8002bb8:	484b      	ldr	r0, [pc, #300]	; (8002ce8 <MX_HRTIM_Init+0x29c>)
 8002bba:	f005 fbcf 	bl	800835c <HAL_HRTIM_WaveformCompareConfig>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <MX_HRTIM_Init+0x17c>
  {
    Error_Handler();
 8002bc4:	f000 fc28 	bl	8003418 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH;
 8002bc8:	f644 0306 	movw	r3, #18438	; 0x4806
 8002bcc:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8002bce:	f107 0320 	add.w	r3, r7, #32
 8002bd2:	2204      	movs	r2, #4
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	4844      	ldr	r0, [pc, #272]	; (8002ce8 <MX_HRTIM_Init+0x29c>)
 8002bd8:	f005 fbc0 	bl	800835c <HAL_HRTIM_WaveformCompareConfig>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <MX_HRTIM_Init+0x19a>
  {
    Error_Handler();
 8002be2:	f000 fc19 	bl	8003418 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME+MICROWAVE_WIDTH;
 8002be6:	f244 435d 	movw	r3, #17501	; 0x445d
 8002bea:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_4, &pCompareCfg) != HAL_OK)
 8002bec:	f107 0320 	add.w	r3, r7, #32
 8002bf0:	2208      	movs	r2, #8
 8002bf2:	2104      	movs	r1, #4
 8002bf4:	483c      	ldr	r0, [pc, #240]	; (8002ce8 <MX_HRTIM_Init+0x29c>)
 8002bf6:	f005 fbb1 	bl	800835c <HAL_HRTIM_WaveformCompareConfig>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <MX_HRTIM_Init+0x1b8>
  {
    Error_Handler();
 8002c00:	f000 fc0a 	bl	8003418 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 8002c04:	2302      	movs	r3, #2
 8002c06:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1|HRTIM_OUTPUTSET_TIMCMP3;
 8002c08:	2328      	movs	r3, #40	; 0x28
 8002c0a:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMPER;
 8002c0c:	2314      	movs	r3, #20
 8002c0e:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8002c10:	2300      	movs	r3, #0
 8002c12:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 8002c14:	2308      	movs	r3, #8
 8002c16:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8002c20:	2300      	movs	r3, #0
 8002c22:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8002c24:	463b      	mov	r3, r7
 8002c26:	2201      	movs	r2, #1
 8002c28:	2100      	movs	r1, #0
 8002c2a:	482f      	ldr	r0, [pc, #188]	; (8002ce8 <MX_HRTIM_Init+0x29c>)
 8002c2c:	f005 fd04 	bl	8008638 <HAL_HRTIM_WaveformOutputConfig>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <MX_HRTIM_Init+0x1ee>
  {
    Error_Handler();
 8002c36:	f000 fbef 	bl	8003418 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	603b      	str	r3, [r7, #0]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMCMP4;
 8002c3e:	2350      	movs	r3, #80	; 0x50
 8002c40:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8002c42:	2300      	movs	r3, #0
 8002c44:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 8002c46:	463b      	mov	r3, r7
 8002c48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c4c:	2104      	movs	r1, #4
 8002c4e:	4826      	ldr	r0, [pc, #152]	; (8002ce8 <MX_HRTIM_Init+0x29c>)
 8002c50:	f005 fcf2 	bl	8008638 <HAL_HRTIM_WaveformOutputConfig>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <MX_HRTIM_Init+0x212>
  {
    Error_Handler();
 8002c5a:	f000 fbdd 	bl	8003418 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP3;
 8002c62:	2320      	movs	r3, #32
 8002c64:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 8002c66:	2310      	movs	r3, #16
 8002c68:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 8002c6a:	2308      	movs	r3, #8
 8002c6c:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8002c6e:	463b      	mov	r3, r7
 8002c70:	2202      	movs	r2, #2
 8002c72:	2100      	movs	r1, #0
 8002c74:	481c      	ldr	r0, [pc, #112]	; (8002ce8 <MX_HRTIM_Init+0x29c>)
 8002c76:	f005 fcdf 	bl	8008638 <HAL_HRTIM_WaveformOutputConfig>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <MX_HRTIM_Init+0x238>
  {
    Error_Handler();
 8002c80:	f000 fbca 	bl	8003418 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8002c84:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002c88:	461a      	mov	r2, r3
 8002c8a:	2104      	movs	r1, #4
 8002c8c:	4816      	ldr	r0, [pc, #88]	; (8002ce8 <MX_HRTIM_Init+0x29c>)
 8002c8e:	f005 facb 	bl	8008228 <HAL_HRTIM_TimeBaseConfig>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <MX_HRTIM_Init+0x250>
  {
    Error_Handler();
 8002c98:	f000 fbbe 	bl	8003418 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY;
 8002c9c:	f240 7353 	movw	r3, #1875	; 0x753
 8002ca0:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8002ca2:	f107 0320 	add.w	r3, r7, #32
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	2104      	movs	r1, #4
 8002caa:	480f      	ldr	r0, [pc, #60]	; (8002ce8 <MX_HRTIM_Init+0x29c>)
 8002cac:	f005 fb56 	bl	800835c <HAL_HRTIM_WaveformCompareConfig>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <MX_HRTIM_Init+0x26e>
  {
    Error_Handler();
 8002cb6:	f000 fbaf 	bl	8003418 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME;
 8002cba:	f643 6342 	movw	r3, #15938	; 0x3e42
 8002cbe:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8002cc0:	f107 0320 	add.w	r3, r7, #32
 8002cc4:	2204      	movs	r2, #4
 8002cc6:	2104      	movs	r1, #4
 8002cc8:	4807      	ldr	r0, [pc, #28]	; (8002ce8 <MX_HRTIM_Init+0x29c>)
 8002cca:	f005 fb47 	bl	800835c <HAL_HRTIM_WaveformCompareConfig>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <MX_HRTIM_Init+0x28c>
  {
    Error_Handler();
 8002cd4:	f000 fba0 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 8002cd8:	4803      	ldr	r0, [pc, #12]	; (8002ce8 <MX_HRTIM_Init+0x29c>)
 8002cda:	f000 fcdf 	bl	800369c <HAL_HRTIM_MspPostInit>

}
 8002cde:	bf00      	nop
 8002ce0:	3790      	adds	r7, #144	; 0x90
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	200002d0 	.word	0x200002d0
 8002cec:	40017400 	.word	0x40017400

08002cf0 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8002cf4:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <MX_LPTIM1_Init+0x54>)
 8002cf6:	4a14      	ldr	r2, [pc, #80]	; (8002d48 <MX_LPTIM1_Init+0x58>)
 8002cf8:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8002cfa:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <MX_LPTIM1_Init+0x54>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV32;
 8002d00:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <MX_LPTIM1_Init+0x54>)
 8002d02:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8002d06:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8002d08:	4b0e      	ldr	r3, [pc, #56]	; (8002d44 <MX_LPTIM1_Init+0x54>)
 8002d0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d0e:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8002d10:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <MX_LPTIM1_Init+0x54>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8002d16:	4b0b      	ldr	r3, [pc, #44]	; (8002d44 <MX_LPTIM1_Init+0x54>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8002d1c:	4b09      	ldr	r3, [pc, #36]	; (8002d44 <MX_LPTIM1_Init+0x54>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8002d22:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <MX_LPTIM1_Init+0x54>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8002d28:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <MX_LPTIM1_Init+0x54>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8002d2e:	4805      	ldr	r0, [pc, #20]	; (8002d44 <MX_LPTIM1_Init+0x54>)
 8002d30:	f006 fcae 	bl	8009690 <HAL_LPTIM_Init>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8002d3a:	f000 fb6d 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8002d3e:	bf00      	nop
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	200003ac 	.word	0x200003ac
 8002d48:	40002400 	.word	0x40002400

08002d4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b088      	sub	sp, #32
 8002d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d52:	f107 0310 	add.w	r3, r7, #16
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	605a      	str	r2, [r3, #4]
 8002d5c:	609a      	str	r2, [r3, #8]
 8002d5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d60:	1d3b      	adds	r3, r7, #4
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	605a      	str	r2, [r3, #4]
 8002d68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002d6a:	4b20      	ldr	r3, [pc, #128]	; (8002dec <MX_TIM1_Init+0xa0>)
 8002d6c:	4a20      	ldr	r2, [pc, #128]	; (8002df0 <MX_TIM1_Init+0xa4>)
 8002d6e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1249;
 8002d70:	4b1e      	ldr	r3, [pc, #120]	; (8002dec <MX_TIM1_Init+0xa0>)
 8002d72:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8002d76:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d78:	4b1c      	ldr	r3, [pc, #112]	; (8002dec <MX_TIM1_Init+0xa0>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002d7e:	4b1b      	ldr	r3, [pc, #108]	; (8002dec <MX_TIM1_Init+0xa0>)
 8002d80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d84:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d86:	4b19      	ldr	r3, [pc, #100]	; (8002dec <MX_TIM1_Init+0xa0>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d8c:	4b17      	ldr	r3, [pc, #92]	; (8002dec <MX_TIM1_Init+0xa0>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d92:	4b16      	ldr	r3, [pc, #88]	; (8002dec <MX_TIM1_Init+0xa0>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002d98:	4814      	ldr	r0, [pc, #80]	; (8002dec <MX_TIM1_Init+0xa0>)
 8002d9a:	f00a fe27 	bl	800d9ec <HAL_TIM_Base_Init>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8002da4:	f000 fb38 	bl	8003418 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002da8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002dae:	f107 0310 	add.w	r3, r7, #16
 8002db2:	4619      	mov	r1, r3
 8002db4:	480d      	ldr	r0, [pc, #52]	; (8002dec <MX_TIM1_Init+0xa0>)
 8002db6:	f00a fe71 	bl	800da9c <HAL_TIM_ConfigClockSource>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002dc0:	f000 fb2a 	bl	8003418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002dd0:	1d3b      	adds	r3, r7, #4
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4805      	ldr	r0, [pc, #20]	; (8002dec <MX_TIM1_Init+0xa0>)
 8002dd6:	f00b f891 	bl	800defc <HAL_TIMEx_MasterConfigSynchronization>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002de0:	f000 fb1a 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002de4:	bf00      	nop
 8002de6:	3720      	adds	r7, #32
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	200003e4 	.word	0x200003e4
 8002df0:	40010000 	.word	0x40010000

08002df4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b088      	sub	sp, #32
 8002df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dfa:	f107 0310 	add.w	r3, r7, #16
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	605a      	str	r2, [r3, #4]
 8002e04:	609a      	str	r2, [r3, #8]
 8002e06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e08:	1d3b      	adds	r3, r7, #4
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	605a      	str	r2, [r3, #4]
 8002e10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e12:	4b1e      	ldr	r3, [pc, #120]	; (8002e8c <MX_TIM2_Init+0x98>)
 8002e14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e18:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 124;
 8002e1a:	4b1c      	ldr	r3, [pc, #112]	; (8002e8c <MX_TIM2_Init+0x98>)
 8002e1c:	227c      	movs	r2, #124	; 0x7c
 8002e1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e20:	4b1a      	ldr	r3, [pc, #104]	; (8002e8c <MX_TIM2_Init+0x98>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002e26:	4b19      	ldr	r3, [pc, #100]	; (8002e8c <MX_TIM2_Init+0x98>)
 8002e28:	f04f 32ff 	mov.w	r2, #4294967295
 8002e2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e2e:	4b17      	ldr	r3, [pc, #92]	; (8002e8c <MX_TIM2_Init+0x98>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e34:	4b15      	ldr	r3, [pc, #84]	; (8002e8c <MX_TIM2_Init+0x98>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e3a:	4814      	ldr	r0, [pc, #80]	; (8002e8c <MX_TIM2_Init+0x98>)
 8002e3c:	f00a fdd6 	bl	800d9ec <HAL_TIM_Base_Init>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002e46:	f000 fae7 	bl	8003418 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e50:	f107 0310 	add.w	r3, r7, #16
 8002e54:	4619      	mov	r1, r3
 8002e56:	480d      	ldr	r0, [pc, #52]	; (8002e8c <MX_TIM2_Init+0x98>)
 8002e58:	f00a fe20 	bl	800da9c <HAL_TIM_ConfigClockSource>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002e62:	f000 fad9 	bl	8003418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e66:	2300      	movs	r3, #0
 8002e68:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e6e:	1d3b      	adds	r3, r7, #4
 8002e70:	4619      	mov	r1, r3
 8002e72:	4806      	ldr	r0, [pc, #24]	; (8002e8c <MX_TIM2_Init+0x98>)
 8002e74:	f00b f842 	bl	800defc <HAL_TIMEx_MasterConfigSynchronization>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002e7e:	f000 facb 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e82:	bf00      	nop
 8002e84:	3720      	adds	r7, #32
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	20000430 	.word	0x20000430

08002e90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e96:	f107 0310 	add.w	r3, r7, #16
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	605a      	str	r2, [r3, #4]
 8002ea0:	609a      	str	r2, [r3, #8]
 8002ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ea4:	1d3b      	adds	r3, r7, #4
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	605a      	str	r2, [r3, #4]
 8002eac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002eae:	4b1d      	ldr	r3, [pc, #116]	; (8002f24 <MX_TIM3_Init+0x94>)
 8002eb0:	4a1d      	ldr	r2, [pc, #116]	; (8002f28 <MX_TIM3_Init+0x98>)
 8002eb2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 124;
 8002eb4:	4b1b      	ldr	r3, [pc, #108]	; (8002f24 <MX_TIM3_Init+0x94>)
 8002eb6:	227c      	movs	r2, #124	; 0x7c
 8002eb8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eba:	4b1a      	ldr	r3, [pc, #104]	; (8002f24 <MX_TIM3_Init+0x94>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002ec0:	4b18      	ldr	r3, [pc, #96]	; (8002f24 <MX_TIM3_Init+0x94>)
 8002ec2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ec6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ec8:	4b16      	ldr	r3, [pc, #88]	; (8002f24 <MX_TIM3_Init+0x94>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ece:	4b15      	ldr	r3, [pc, #84]	; (8002f24 <MX_TIM3_Init+0x94>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ed4:	4813      	ldr	r0, [pc, #76]	; (8002f24 <MX_TIM3_Init+0x94>)
 8002ed6:	f00a fd89 	bl	800d9ec <HAL_TIM_Base_Init>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002ee0:	f000 fa9a 	bl	8003418 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ee4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ee8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002eea:	f107 0310 	add.w	r3, r7, #16
 8002eee:	4619      	mov	r1, r3
 8002ef0:	480c      	ldr	r0, [pc, #48]	; (8002f24 <MX_TIM3_Init+0x94>)
 8002ef2:	f00a fdd3 	bl	800da9c <HAL_TIM_ConfigClockSource>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002efc:	f000 fa8c 	bl	8003418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f00:	2300      	movs	r3, #0
 8002f02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f04:	2300      	movs	r3, #0
 8002f06:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f08:	1d3b      	adds	r3, r7, #4
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	4805      	ldr	r0, [pc, #20]	; (8002f24 <MX_TIM3_Init+0x94>)
 8002f0e:	f00a fff5 	bl	800defc <HAL_TIMEx_MasterConfigSynchronization>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002f18:	f000 fa7e 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002f1c:	bf00      	nop
 8002f1e:	3720      	adds	r7, #32
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	2000047c 	.word	0x2000047c
 8002f28:	40000400 	.word	0x40000400

08002f2c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b088      	sub	sp, #32
 8002f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f32:	f107 0310 	add.w	r3, r7, #16
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	605a      	str	r2, [r3, #4]
 8002f3c:	609a      	str	r2, [r3, #8]
 8002f3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f40:	1d3b      	adds	r3, r7, #4
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	605a      	str	r2, [r3, #4]
 8002f48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002f4a:	4b1d      	ldr	r3, [pc, #116]	; (8002fc0 <MX_TIM5_Init+0x94>)
 8002f4c:	4a1d      	ldr	r2, [pc, #116]	; (8002fc4 <MX_TIM5_Init+0x98>)
 8002f4e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 124;
 8002f50:	4b1b      	ldr	r3, [pc, #108]	; (8002fc0 <MX_TIM5_Init+0x94>)
 8002f52:	227c      	movs	r2, #124	; 0x7c
 8002f54:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f56:	4b1a      	ldr	r3, [pc, #104]	; (8002fc0 <MX_TIM5_Init+0x94>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002f5c:	4b18      	ldr	r3, [pc, #96]	; (8002fc0 <MX_TIM5_Init+0x94>)
 8002f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8002f62:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f64:	4b16      	ldr	r3, [pc, #88]	; (8002fc0 <MX_TIM5_Init+0x94>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f6a:	4b15      	ldr	r3, [pc, #84]	; (8002fc0 <MX_TIM5_Init+0x94>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002f70:	4813      	ldr	r0, [pc, #76]	; (8002fc0 <MX_TIM5_Init+0x94>)
 8002f72:	f00a fd3b 	bl	800d9ec <HAL_TIM_Base_Init>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002f7c:	f000 fa4c 	bl	8003418 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002f86:	f107 0310 	add.w	r3, r7, #16
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	480c      	ldr	r0, [pc, #48]	; (8002fc0 <MX_TIM5_Init+0x94>)
 8002f8e:	f00a fd85 	bl	800da9c <HAL_TIM_ConfigClockSource>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002f98:	f000 fa3e 	bl	8003418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002fa4:	1d3b      	adds	r3, r7, #4
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4805      	ldr	r0, [pc, #20]	; (8002fc0 <MX_TIM5_Init+0x94>)
 8002faa:	f00a ffa7 	bl	800defc <HAL_TIMEx_MasterConfigSynchronization>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002fb4:	f000 fa30 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002fb8:	bf00      	nop
 8002fba:	3720      	adds	r7, #32
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	200004c8 	.word	0x200004c8
 8002fc4:	40000c00 	.word	0x40000c00

08002fc8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002fcc:	4b22      	ldr	r3, [pc, #136]	; (8003058 <MX_USART3_UART_Init+0x90>)
 8002fce:	4a23      	ldr	r2, [pc, #140]	; (800305c <MX_USART3_UART_Init+0x94>)
 8002fd0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8002fd2:	4b21      	ldr	r3, [pc, #132]	; (8003058 <MX_USART3_UART_Init+0x90>)
 8002fd4:	4a22      	ldr	r2, [pc, #136]	; (8003060 <MX_USART3_UART_Init+0x98>)
 8002fd6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002fd8:	4b1f      	ldr	r3, [pc, #124]	; (8003058 <MX_USART3_UART_Init+0x90>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002fde:	4b1e      	ldr	r3, [pc, #120]	; (8003058 <MX_USART3_UART_Init+0x90>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002fe4:	4b1c      	ldr	r3, [pc, #112]	; (8003058 <MX_USART3_UART_Init+0x90>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002fea:	4b1b      	ldr	r3, [pc, #108]	; (8003058 <MX_USART3_UART_Init+0x90>)
 8002fec:	220c      	movs	r2, #12
 8002fee:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ff0:	4b19      	ldr	r3, [pc, #100]	; (8003058 <MX_USART3_UART_Init+0x90>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ff6:	4b18      	ldr	r3, [pc, #96]	; (8003058 <MX_USART3_UART_Init+0x90>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ffc:	4b16      	ldr	r3, [pc, #88]	; (8003058 <MX_USART3_UART_Init+0x90>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003002:	4b15      	ldr	r3, [pc, #84]	; (8003058 <MX_USART3_UART_Init+0x90>)
 8003004:	2200      	movs	r2, #0
 8003006:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003008:	4b13      	ldr	r3, [pc, #76]	; (8003058 <MX_USART3_UART_Init+0x90>)
 800300a:	2200      	movs	r2, #0
 800300c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800300e:	4812      	ldr	r0, [pc, #72]	; (8003058 <MX_USART3_UART_Init+0x90>)
 8003010:	f00b f802 	bl	800e018 <HAL_UART_Init>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 800301a:	f000 f9fd 	bl	8003418 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800301e:	2100      	movs	r1, #0
 8003020:	480d      	ldr	r0, [pc, #52]	; (8003058 <MX_USART3_UART_Init+0x90>)
 8003022:	f00c f892 	bl	800f14a <HAL_UARTEx_SetTxFifoThreshold>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 800302c:	f000 f9f4 	bl	8003418 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003030:	2100      	movs	r1, #0
 8003032:	4809      	ldr	r0, [pc, #36]	; (8003058 <MX_USART3_UART_Init+0x90>)
 8003034:	f00c f8c7 	bl	800f1c6 <HAL_UARTEx_SetRxFifoThreshold>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 800303e:	f000 f9eb 	bl	8003418 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003042:	4805      	ldr	r0, [pc, #20]	; (8003058 <MX_USART3_UART_Init+0x90>)
 8003044:	f00c f848 	bl	800f0d8 <HAL_UARTEx_DisableFifoMode>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 800304e:	f000 f9e3 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003052:	bf00      	nop
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	20000514 	.word	0x20000514
 800305c:	40004800 	.word	0x40004800
 8003060:	000f4240 	.word	0x000f4240

08003064 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b08e      	sub	sp, #56	; 0x38
 8003068:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800306a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	605a      	str	r2, [r3, #4]
 8003074:	609a      	str	r2, [r3, #8]
 8003076:	60da      	str	r2, [r3, #12]
 8003078:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800307a:	4ba0      	ldr	r3, [pc, #640]	; (80032fc <MX_GPIO_Init+0x298>)
 800307c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003080:	4a9e      	ldr	r2, [pc, #632]	; (80032fc <MX_GPIO_Init+0x298>)
 8003082:	f043 0310 	orr.w	r3, r3, #16
 8003086:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800308a:	4b9c      	ldr	r3, [pc, #624]	; (80032fc <MX_GPIO_Init+0x298>)
 800308c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003090:	f003 0310 	and.w	r3, r3, #16
 8003094:	623b      	str	r3, [r7, #32]
 8003096:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003098:	4b98      	ldr	r3, [pc, #608]	; (80032fc <MX_GPIO_Init+0x298>)
 800309a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800309e:	4a97      	ldr	r2, [pc, #604]	; (80032fc <MX_GPIO_Init+0x298>)
 80030a0:	f043 0304 	orr.w	r3, r3, #4
 80030a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030a8:	4b94      	ldr	r3, [pc, #592]	; (80032fc <MX_GPIO_Init+0x298>)
 80030aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030ae:	f003 0304 	and.w	r3, r3, #4
 80030b2:	61fb      	str	r3, [r7, #28]
 80030b4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030b6:	4b91      	ldr	r3, [pc, #580]	; (80032fc <MX_GPIO_Init+0x298>)
 80030b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030bc:	4a8f      	ldr	r2, [pc, #572]	; (80032fc <MX_GPIO_Init+0x298>)
 80030be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030c6:	4b8d      	ldr	r3, [pc, #564]	; (80032fc <MX_GPIO_Init+0x298>)
 80030c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d0:	61bb      	str	r3, [r7, #24]
 80030d2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030d4:	4b89      	ldr	r3, [pc, #548]	; (80032fc <MX_GPIO_Init+0x298>)
 80030d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030da:	4a88      	ldr	r2, [pc, #544]	; (80032fc <MX_GPIO_Init+0x298>)
 80030dc:	f043 0301 	orr.w	r3, r3, #1
 80030e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030e4:	4b85      	ldr	r3, [pc, #532]	; (80032fc <MX_GPIO_Init+0x298>)
 80030e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	617b      	str	r3, [r7, #20]
 80030f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030f2:	4b82      	ldr	r3, [pc, #520]	; (80032fc <MX_GPIO_Init+0x298>)
 80030f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030f8:	4a80      	ldr	r2, [pc, #512]	; (80032fc <MX_GPIO_Init+0x298>)
 80030fa:	f043 0302 	orr.w	r3, r3, #2
 80030fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003102:	4b7e      	ldr	r3, [pc, #504]	; (80032fc <MX_GPIO_Init+0x298>)
 8003104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003110:	4b7a      	ldr	r3, [pc, #488]	; (80032fc <MX_GPIO_Init+0x298>)
 8003112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003116:	4a79      	ldr	r2, [pc, #484]	; (80032fc <MX_GPIO_Init+0x298>)
 8003118:	f043 0320 	orr.w	r3, r3, #32
 800311c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003120:	4b76      	ldr	r3, [pc, #472]	; (80032fc <MX_GPIO_Init+0x298>)
 8003122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003126:	f003 0320 	and.w	r3, r3, #32
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800312e:	4b73      	ldr	r3, [pc, #460]	; (80032fc <MX_GPIO_Init+0x298>)
 8003130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003134:	4a71      	ldr	r2, [pc, #452]	; (80032fc <MX_GPIO_Init+0x298>)
 8003136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800313a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800313e:	4b6f      	ldr	r3, [pc, #444]	; (80032fc <MX_GPIO_Init+0x298>)
 8003140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003148:	60bb      	str	r3, [r7, #8]
 800314a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800314c:	4b6b      	ldr	r3, [pc, #428]	; (80032fc <MX_GPIO_Init+0x298>)
 800314e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003152:	4a6a      	ldr	r2, [pc, #424]	; (80032fc <MX_GPIO_Init+0x298>)
 8003154:	f043 0308 	orr.w	r3, r3, #8
 8003158:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800315c:	4b67      	ldr	r3, [pc, #412]	; (80032fc <MX_GPIO_Init+0x298>)
 800315e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003162:	f003 0308 	and.w	r3, r3, #8
 8003166:	607b      	str	r3, [r7, #4]
 8003168:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ATT_4_Pin|ATT_8_Pin|ATT_16_Pin, GPIO_PIN_SET);
 800316a:	2201      	movs	r2, #1
 800316c:	2134      	movs	r1, #52	; 0x34
 800316e:	4864      	ldr	r0, [pc, #400]	; (8003300 <MX_GPIO_Init+0x29c>)
 8003170:	f004 ff32 	bl	8007fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|MW_INVALID_Pin|LASER_TUNING_Pin|LD3_Pin
 8003174:	2200      	movs	r2, #0
 8003176:	f245 1103 	movw	r1, #20739	; 0x5103
 800317a:	4862      	ldr	r0, [pc, #392]	; (8003304 <MX_GPIO_Init+0x2a0>)
 800317c:	f004 ff2c 	bl	8007fd8 <HAL_GPIO_WritePin>
                          |SPARE_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET);
 8003180:	2200      	movs	r2, #0
 8003182:	2101      	movs	r1, #1
 8003184:	4860      	ldr	r0, [pc, #384]	; (8003308 <MX_GPIO_Init+0x2a4>)
 8003186:	f004 ff27 	bl	8007fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800318a:	2200      	movs	r2, #0
 800318c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003190:	485e      	ldr	r0, [pc, #376]	; (800330c <MX_GPIO_Init+0x2a8>)
 8003192:	f004 ff21 	bl	8007fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SCLK_Pin|MOSI_Pin|REG_EN_Pin, GPIO_PIN_RESET);
 8003196:	2200      	movs	r2, #0
 8003198:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 800319c:	485c      	ldr	r0, [pc, #368]	; (8003310 <MX_GPIO_Init+0x2ac>)
 800319e:	f004 ff1b 	bl	8007fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 80031a2:	2201      	movs	r2, #1
 80031a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80031a8:	4859      	ldr	r0, [pc, #356]	; (8003310 <MX_GPIO_Init+0x2ac>)
 80031aa:	f004 ff15 	bl	8007fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ATT_2_Pin|ATT_1_Pin|ATT_05_Pin|ATT_025_Pin
 80031ae:	2201      	movs	r2, #1
 80031b0:	21f8      	movs	r1, #248	; 0xf8
 80031b2:	4856      	ldr	r0, [pc, #344]	; (800330c <MX_GPIO_Init+0x2a8>)
 80031b4:	f004 ff10 	bl	8007fd8 <HAL_GPIO_WritePin>
                          |ATT_LE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80031b8:	2200      	movs	r2, #0
 80031ba:	2102      	movs	r1, #2
 80031bc:	4850      	ldr	r0, [pc, #320]	; (8003300 <MX_GPIO_Init+0x29c>)
 80031be:	f004 ff0b 	bl	8007fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ATT_4_Pin ATT_8_Pin ATT_16_Pin LD2_Pin */
  GPIO_InitStruct.Pin = ATT_4_Pin|ATT_8_Pin|ATT_16_Pin|LD2_Pin;
 80031c2:	2336      	movs	r3, #54	; 0x36
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031c6:	2301      	movs	r3, #1
 80031c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ca:	2300      	movs	r3, #0
 80031cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ce:	2300      	movs	r3, #0
 80031d0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031d6:	4619      	mov	r1, r3
 80031d8:	4849      	ldr	r0, [pc, #292]	; (8003300 <MX_GPIO_Init+0x29c>)
 80031da:	f004 fd35 	bl	8007c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 80031de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031e4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80031e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ea:	2300      	movs	r3, #0
 80031ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80031ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031f2:	4619      	mov	r1, r3
 80031f4:	4846      	ldr	r0, [pc, #280]	; (8003310 <MX_GPIO_Init+0x2ac>)
 80031f6:	f004 fd27 	bl	8007c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin MW_INVALID_Pin LASER_TUNING_Pin LD3_Pin
                           SPARE_OUT_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|MW_INVALID_Pin|LASER_TUNING_Pin|LD3_Pin
 80031fa:	f245 1303 	movw	r3, #20739	; 0x5103
 80031fe:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPARE_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003200:	2301      	movs	r3, #1
 8003202:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003204:	2300      	movs	r3, #0
 8003206:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003208:	2300      	movs	r3, #0
 800320a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800320c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003210:	4619      	mov	r1, r3
 8003212:	483c      	ldr	r0, [pc, #240]	; (8003304 <MX_GPIO_Init+0x2a0>)
 8003214:	f004 fd18 	bl	8007c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003218:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800321c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800321e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003222:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003224:	2300      	movs	r3, #0
 8003226:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800322c:	4619      	mov	r1, r3
 800322e:	4839      	ldr	r0, [pc, #228]	; (8003314 <MX_GPIO_Init+0x2b0>)
 8003230:	f004 fd0a 	bl	8007c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : SCOPE_TRIG_OUT_Pin */
  GPIO_InitStruct.Pin = SCOPE_TRIG_OUT_Pin;
 8003234:	2301      	movs	r3, #1
 8003236:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003238:	2301      	movs	r3, #1
 800323a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323c:	2300      	movs	r3, #0
 800323e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003240:	2300      	movs	r3, #0
 8003242:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SCOPE_TRIG_OUT_GPIO_Port, &GPIO_InitStruct);
 8003244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003248:	4619      	mov	r1, r3
 800324a:	482f      	ldr	r0, [pc, #188]	; (8003308 <MX_GPIO_Init+0x2a4>)
 800324c:	f004 fcfc 	bl	8007c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ATT_2_Pin ATT_1_Pin ATT_05_Pin
                           ATT_025_Pin ATT_LE_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ATT_2_Pin|ATT_1_Pin|ATT_05_Pin
 8003250:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
 8003254:	627b      	str	r3, [r7, #36]	; 0x24
                          |ATT_025_Pin|ATT_LE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003256:	2301      	movs	r3, #1
 8003258:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325a:	2300      	movs	r3, #0
 800325c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800325e:	2300      	movs	r3, #0
 8003260:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003266:	4619      	mov	r1, r3
 8003268:	4828      	ldr	r0, [pc, #160]	; (800330c <MX_GPIO_Init+0x2a8>)
 800326a:	f004 fced 	bl	8007c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800326e:	2380      	movs	r3, #128	; 0x80
 8003270:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003272:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003276:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003278:	2300      	movs	r3, #0
 800327a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800327c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003280:	4619      	mov	r1, r3
 8003282:	4821      	ldr	r0, [pc, #132]	; (8003308 <MX_GPIO_Init+0x2a4>)
 8003284:	f004 fce0 	bl	8007c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCLK_Pin MOSI_Pin SEN_Pin REG_EN_Pin */
  GPIO_InitStruct.Pin = SCLK_Pin|MOSI_Pin|SEN_Pin|REG_EN_Pin;
 8003288:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 800328c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800328e:	2301      	movs	r3, #1
 8003290:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003292:	2302      	movs	r3, #2
 8003294:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003296:	2300      	movs	r3, #0
 8003298:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800329a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800329e:	4619      	mov	r1, r3
 80032a0:	481b      	ldr	r0, [pc, #108]	; (8003310 <MX_GPIO_Init+0x2ac>)
 80032a2:	f004 fcd1 	bl	8007c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80032a6:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80032aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ac:	2302      	movs	r3, #2
 80032ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b0:	2300      	movs	r3, #0
 80032b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b4:	2300      	movs	r3, #0
 80032b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80032b8:	230a      	movs	r3, #10
 80032ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032c0:	4619      	mov	r1, r3
 80032c2:	4815      	ldr	r0, [pc, #84]	; (8003318 <MX_GPIO_Init+0x2b4>)
 80032c4:	f004 fcc0 	bl	8007c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : MISO_Pin */
  GPIO_InitStruct.Pin = MISO_Pin;
 80032c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032ce:	2300      	movs	r3, #0
 80032d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d2:	2300      	movs	r3, #0
 80032d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 80032d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032da:	4619      	mov	r1, r3
 80032dc:	480c      	ldr	r0, [pc, #48]	; (8003310 <MX_GPIO_Init+0x2ac>)
 80032de:	f004 fcb3 	bl	8007c48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80032e2:	2200      	movs	r2, #0
 80032e4:	2100      	movs	r1, #0
 80032e6:	2028      	movs	r0, #40	; 0x28
 80032e8:	f002 fe65 	bl	8005fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80032ec:	2028      	movs	r0, #40	; 0x28
 80032ee:	f002 fe7c 	bl	8005fea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80032f2:	bf00      	nop
 80032f4:	3738      	adds	r7, #56	; 0x38
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	58024400 	.word	0x58024400
 8003300:	58021000 	.word	0x58021000
 8003304:	58020400 	.word	0x58020400
 8003308:	58021800 	.word	0x58021800
 800330c:	58020c00 	.word	0x58020c00
 8003310:	58020800 	.word	0x58020800
 8003314:	58021400 	.word	0x58021400
 8003318:	58020000 	.word	0x58020000

0800331c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  adc_val = HAL_ADC_GetValue(&hadc3);
 8003324:	480e      	ldr	r0, [pc, #56]	; (8003360 <HAL_ADC_ConvCpltCallback+0x44>)
 8003326:	f001 fd01 	bl	8004d2c <HAL_ADC_GetValue>
 800332a:	4603      	mov	r3, r0
 800332c:	4a0d      	ldr	r2, [pc, #52]	; (8003364 <HAL_ADC_ConvCpltCallback+0x48>)
 800332e:	6013      	str	r3, [r2, #0]
  //printf("ADC value: %lu \r\n", adc_val);
  dac_val = adc_val >> 4;
 8003330:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <HAL_ADC_ConvCpltCallback+0x48>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	091b      	lsrs	r3, r3, #4
 8003336:	4a0c      	ldr	r2, [pc, #48]	; (8003368 <HAL_ADC_ConvCpltCallback+0x4c>)
 8003338:	6013      	str	r3, [r2, #0]
  sample_count++;
 800333a:	4b0c      	ldr	r3, [pc, #48]	; (800336c <HAL_ADC_ConvCpltCallback+0x50>)
 800333c:	881b      	ldrh	r3, [r3, #0]
 800333e:	b29b      	uxth	r3, r3
 8003340:	3301      	adds	r3, #1
 8003342:	b29a      	uxth	r2, r3
 8003344:	4b09      	ldr	r3, [pc, #36]	; (800336c <HAL_ADC_ConvCpltCallback+0x50>)
 8003346:	801a      	strh	r2, [r3, #0]
	  printf("ADC reading: %lu, max: %lu, min: %lu \r\n", adc_val, adc_max, adc_min);
  }
  //printf("ADC reading: %lu, max: %lu, min: %lu \r\n", adc_val, adc_max, adc_min);
#endif //QUANTIFY_ADC_NOISE
  //printf("ADC value: %lu, DAC value: %lu \r\n", adc_val, dac_val);
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_val);
 8003348:	4b07      	ldr	r3, [pc, #28]	; (8003368 <HAL_ADC_ConvCpltCallback+0x4c>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2200      	movs	r2, #0
 800334e:	2100      	movs	r1, #0
 8003350:	4807      	ldr	r0, [pc, #28]	; (8003370 <HAL_ADC_ConvCpltCallback+0x54>)
 8003352:	f002 ff55 	bl	8006200 <HAL_DAC_SetValue>
  //HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
}
 8003356:	bf00      	nop
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	20000258 	.word	0x20000258
 8003364:	200005b0 	.word	0x200005b0
 8003368:	200005b4 	.word	0x200005b4
 800336c:	200005aa 	.word	0x200005aa
 8003370:	200002bc 	.word	0x200002bc

08003374 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800337a:	463b      	mov	r3, r7
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	605a      	str	r2, [r3, #4]
 8003382:	609a      	str	r2, [r3, #8]
 8003384:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8003386:	f002 fe4b 	bl	8006020 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800338a:	2301      	movs	r3, #1
 800338c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800338e:	2300      	movs	r3, #0
 8003390:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8003392:	2300      	movs	r3, #0
 8003394:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8003396:	231f      	movs	r3, #31
 8003398:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800339a:	2387      	movs	r3, #135	; 0x87
 800339c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800339e:	2300      	movs	r3, #0
 80033a0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80033a2:	2300      	movs	r3, #0
 80033a4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80033a6:	2301      	movs	r3, #1
 80033a8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80033aa:	2301      	movs	r3, #1
 80033ac:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80033ae:	2300      	movs	r3, #0
 80033b0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80033b2:	2300      	movs	r3, #0
 80033b4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80033b6:	463b      	mov	r3, r7
 80033b8:	4618      	mov	r0, r3
 80033ba:	f002 fe69 	bl	8006090 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80033be:	2301      	movs	r3, #1
 80033c0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 80033c2:	4b13      	ldr	r3, [pc, #76]	; (8003410 <MPU_Config+0x9c>)
 80033c4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 80033c6:	2310      	movs	r3, #16
 80033c8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80033ca:	2300      	movs	r3, #0
 80033cc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80033ce:	2301      	movs	r3, #1
 80033d0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80033d2:	2303      	movs	r3, #3
 80033d4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80033d6:	2300      	movs	r3, #0
 80033d8:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80033da:	463b      	mov	r3, r7
 80033dc:	4618      	mov	r0, r3
 80033de:	f002 fe57 	bl	8006090 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80033e2:	2302      	movs	r3, #2
 80033e4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 80033e6:	4b0b      	ldr	r3, [pc, #44]	; (8003414 <MPU_Config+0xa0>)
 80033e8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 80033ea:	2308      	movs	r3, #8
 80033ec:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80033ee:	2300      	movs	r3, #0
 80033f0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80033f2:	2301      	movs	r3, #1
 80033f4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80033f6:	2301      	movs	r3, #1
 80033f8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80033fa:	463b      	mov	r3, r7
 80033fc:	4618      	mov	r0, r3
 80033fe:	f002 fe47 	bl	8006090 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8003402:	2004      	movs	r0, #4
 8003404:	f002 fe24 	bl	8006050 <HAL_MPU_Enable>

}
 8003408:	bf00      	nop
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	30020000 	.word	0x30020000
 8003414:	30040000 	.word	0x30040000

08003418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800341c:	b672      	cpsid	i
}
 800341e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	__disable_irq();

	printf("Error handler routine called\r\n");
 8003420:	4810      	ldr	r0, [pc, #64]	; (8003464 <Error_Handler+0x4c>)
 8003422:	f017 ff87 	bl	801b334 <puts>

	/* Disable the AOM */
	HAL_HRTIM_WaveformOutputStop(&hhrtim, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1);
 8003426:	f240 1103 	movw	r1, #259	; 0x103
 800342a:	480f      	ldr	r0, [pc, #60]	; (8003468 <Error_Handler+0x50>)
 800342c:	f005 f962 	bl	80086f4 <HAL_HRTIM_WaveformOutputStop>
	HAL_HRTIM_WaveformCounterStop_IT(&hhrtim, HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E);
 8003430:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 8003434:	480c      	ldr	r0, [pc, #48]	; (8003468 <Error_Handler+0x50>)
 8003436:	f005 f9fb 	bl	8008830 <HAL_HRTIM_WaveformCountStop_IT>

	/* Power down the synthesiser */
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0);
 800343a:	2200      	movs	r2, #0
 800343c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003440:	480a      	ldr	r0, [pc, #40]	; (800346c <Error_Handler+0x54>)
 8003442:	f004 fdc9 	bl	8007fd8 <HAL_GPIO_WritePin>

	while (1) {
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 8003446:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800344a:	4809      	ldr	r0, [pc, #36]	; (8003470 <Error_Handler+0x58>)
 800344c:	f004 fddd 	bl	800800a <HAL_GPIO_TogglePin>
		timer_delay(SLOW_TIMER, ERROR_LED_DELAY);
 8003450:	4b08      	ldr	r3, [pc, #32]	; (8003474 <Error_Handler+0x5c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003458:	4611      	mov	r1, r2
 800345a:	4618      	mov	r0, r3
 800345c:	f01a f870 	bl	801d540 <__timer_delay_veneer>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 8003460:	e7f1      	b.n	8003446 <Error_Handler+0x2e>
 8003462:	bf00      	nop
 8003464:	0801dbb8 	.word	0x0801dbb8
 8003468:	200002d0 	.word	0x200002d0
 800346c:	58020800 	.word	0x58020800
 8003470:	58020400 	.word	0x58020400
 8003474:	20000014 	.word	0x20000014

08003478 <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800347e:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <HAL_MspInit+0x30>)
 8003480:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003484:	4a08      	ldr	r2, [pc, #32]	; (80034a8 <HAL_MspInit+0x30>)
 8003486:	f043 0302 	orr.w	r3, r3, #2
 800348a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800348e:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <HAL_MspInit+0x30>)
 8003490:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	607b      	str	r3, [r7, #4]
 800349a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	58024400 	.word	0x58024400

080034ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b0b4      	sub	sp, #208	; 0xd0
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034b4:	f107 0310 	add.w	r3, r7, #16
 80034b8:	22c0      	movs	r2, #192	; 0xc0
 80034ba:	2100      	movs	r1, #0
 80034bc:	4618      	mov	r0, r3
 80034be:	f018 f863 	bl	801b588 <memset>
  if(hadc->Instance==ADC3)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a2b      	ldr	r2, [pc, #172]	; (8003574 <HAL_ADC_MspInit+0xc8>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d14e      	bne.n	800356a <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80034cc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80034d8:	2301      	movs	r3, #1
 80034da:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 80034dc:	2313      	movs	r3, #19
 80034de:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 79;
 80034e0:	234f      	movs	r3, #79	; 0x4f
 80034e2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80034e4:	2302      	movs	r3, #2
 80034e6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80034e8:	2302      	movs	r3, #2
 80034ea:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80034ec:	23c0      	movs	r3, #192	; 0xc0
 80034ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80034f0:	2320      	movs	r3, #32
 80034f2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80034f4:	2300      	movs	r3, #0
 80034f6:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80034f8:	2300      	movs	r3, #0
 80034fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034fe:	f107 0310 	add.w	r3, r7, #16
 8003502:	4618      	mov	r0, r3
 8003504:	f007 fd1e 	bl	800af44 <HAL_RCCEx_PeriphCLKConfig>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 800350e:	f7ff ff83 	bl	8003418 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003512:	4b19      	ldr	r3, [pc, #100]	; (8003578 <HAL_ADC_MspInit+0xcc>)
 8003514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003518:	4a17      	ldr	r2, [pc, #92]	; (8003578 <HAL_ADC_MspInit+0xcc>)
 800351a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800351e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003522:	4b15      	ldr	r3, [pc, #84]	; (8003578 <HAL_ADC_MspInit+0xcc>)
 8003524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003528:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003530:	4b11      	ldr	r3, [pc, #68]	; (8003578 <HAL_ADC_MspInit+0xcc>)
 8003532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003536:	4a10      	ldr	r2, [pc, #64]	; (8003578 <HAL_ADC_MspInit+0xcc>)
 8003538:	f043 0304 	orr.w	r3, r3, #4
 800353c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003540:	4b0d      	ldr	r3, [pc, #52]	; (8003578 <HAL_ADC_MspInit+0xcc>)
 8003542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003546:	f003 0304 	and.w	r3, r3, #4
 800354a:	60bb      	str	r3, [r7, #8]
 800354c:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 800354e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8003552:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003556:	f000 fed7 	bl	8004308 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 800355a:	2200      	movs	r2, #0
 800355c:	2100      	movs	r1, #0
 800355e:	207f      	movs	r0, #127	; 0x7f
 8003560:	f002 fd29 	bl	8005fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8003564:	207f      	movs	r0, #127	; 0x7f
 8003566:	f002 fd40 	bl	8005fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800356a:	bf00      	nop
 800356c:	37d0      	adds	r7, #208	; 0xd0
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	58026000 	.word	0x58026000
 8003578:	58024400 	.word	0x58024400

0800357c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b08a      	sub	sp, #40	; 0x28
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003584:	f107 0314 	add.w	r3, r7, #20
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	605a      	str	r2, [r3, #4]
 800358e:	609a      	str	r2, [r3, #8]
 8003590:	60da      	str	r2, [r3, #12]
 8003592:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a18      	ldr	r2, [pc, #96]	; (80035fc <HAL_DAC_MspInit+0x80>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d129      	bne.n	80035f2 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800359e:	4b18      	ldr	r3, [pc, #96]	; (8003600 <HAL_DAC_MspInit+0x84>)
 80035a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035a4:	4a16      	ldr	r2, [pc, #88]	; (8003600 <HAL_DAC_MspInit+0x84>)
 80035a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80035aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80035ae:	4b14      	ldr	r3, [pc, #80]	; (8003600 <HAL_DAC_MspInit+0x84>)
 80035b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035b8:	613b      	str	r3, [r7, #16]
 80035ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035bc:	4b10      	ldr	r3, [pc, #64]	; (8003600 <HAL_DAC_MspInit+0x84>)
 80035be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035c2:	4a0f      	ldr	r2, [pc, #60]	; (8003600 <HAL_DAC_MspInit+0x84>)
 80035c4:	f043 0301 	orr.w	r3, r3, #1
 80035c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035cc:	4b0c      	ldr	r3, [pc, #48]	; (8003600 <HAL_DAC_MspInit+0x84>)
 80035ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80035da:	2310      	movs	r3, #16
 80035dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035de:	2303      	movs	r3, #3
 80035e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e2:	2300      	movs	r3, #0
 80035e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035e6:	f107 0314 	add.w	r3, r7, #20
 80035ea:	4619      	mov	r1, r3
 80035ec:	4805      	ldr	r0, [pc, #20]	; (8003604 <HAL_DAC_MspInit+0x88>)
 80035ee:	f004 fb2b 	bl	8007c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80035f2:	bf00      	nop
 80035f4:	3728      	adds	r7, #40	; 0x28
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	40007400 	.word	0x40007400
 8003600:	58024400 	.word	0x58024400
 8003604:	58020000 	.word	0x58020000

08003608 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b0b4      	sub	sp, #208	; 0xd0
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003610:	f107 0310 	add.w	r3, r7, #16
 8003614:	22c0      	movs	r2, #192	; 0xc0
 8003616:	2100      	movs	r1, #0
 8003618:	4618      	mov	r0, r3
 800361a:	f017 ffb5 	bl	801b588 <memset>
  if(hhrtim->Instance==HRTIM1)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a1c      	ldr	r2, [pc, #112]	; (8003694 <HAL_HRTIM_MspInit+0x8c>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d131      	bne.n	800368c <HAL_HRTIM_MspInit+0x84>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 8003628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 8003634:	2300      	movs	r3, #0
 8003636:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800363a:	f107 0310 	add.w	r3, r7, #16
 800363e:	4618      	mov	r0, r3
 8003640:	f007 fc80 	bl	800af44 <HAL_RCCEx_PeriphCLKConfig>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 800364a:	f7ff fee5 	bl	8003418 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 800364e:	4b12      	ldr	r3, [pc, #72]	; (8003698 <HAL_HRTIM_MspInit+0x90>)
 8003650:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003654:	4a10      	ldr	r2, [pc, #64]	; (8003698 <HAL_HRTIM_MspInit+0x90>)
 8003656:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800365a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800365e:	4b0e      	ldr	r3, [pc, #56]	; (8003698 <HAL_HRTIM_MspInit+0x90>)
 8003660:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003664:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003668:	60fb      	str	r3, [r7, #12]
 800366a:	68fb      	ldr	r3, [r7, #12]
    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_TIMA_IRQn, 0, 0);
 800366c:	2200      	movs	r2, #0
 800366e:	2100      	movs	r1, #0
 8003670:	2068      	movs	r0, #104	; 0x68
 8003672:	f002 fca0 	bl	8005fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMA_IRQn);
 8003676:	2068      	movs	r0, #104	; 0x68
 8003678:	f002 fcb7 	bl	8005fea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(HRTIM1_TIME_IRQn, 0, 0);
 800367c:	2200      	movs	r2, #0
 800367e:	2100      	movs	r1, #0
 8003680:	206c      	movs	r0, #108	; 0x6c
 8003682:	f002 fc98 	bl	8005fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIME_IRQn);
 8003686:	206c      	movs	r0, #108	; 0x6c
 8003688:	f002 fcaf 	bl	8005fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 800368c:	bf00      	nop
 800368e:	37d0      	adds	r7, #208	; 0xd0
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40017400 	.word	0x40017400
 8003698:	58024400 	.word	0x58024400

0800369c <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b08a      	sub	sp, #40	; 0x28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a4:	f107 0314 	add.w	r3, r7, #20
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	605a      	str	r2, [r3, #4]
 80036ae:	609a      	str	r2, [r3, #8]
 80036b0:	60da      	str	r2, [r3, #12]
 80036b2:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a22      	ldr	r2, [pc, #136]	; (8003744 <HAL_HRTIM_MspPostInit+0xa8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d13d      	bne.n	800373a <HAL_HRTIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80036be:	4b22      	ldr	r3, [pc, #136]	; (8003748 <HAL_HRTIM_MspPostInit+0xac>)
 80036c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036c4:	4a20      	ldr	r2, [pc, #128]	; (8003748 <HAL_HRTIM_MspPostInit+0xac>)
 80036c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036ce:	4b1e      	ldr	r3, [pc, #120]	; (8003748 <HAL_HRTIM_MspPostInit+0xac>)
 80036d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d8:	613b      	str	r3, [r7, #16]
 80036da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036dc:	4b1a      	ldr	r3, [pc, #104]	; (8003748 <HAL_HRTIM_MspPostInit+0xac>)
 80036de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036e2:	4a19      	ldr	r2, [pc, #100]	; (8003748 <HAL_HRTIM_MspPostInit+0xac>)
 80036e4:	f043 0304 	orr.w	r3, r3, #4
 80036e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036ec:	4b16      	ldr	r3, [pc, #88]	; (8003748 <HAL_HRTIM_MspPostInit+0xac>)
 80036ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036f2:	f003 0304 	and.w	r3, r3, #4
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	68fb      	ldr	r3, [r7, #12]
    /**HRTIM GPIO Configuration
    PG6     ------> HRTIM_CHE1
    PC6     ------> HRTIM_CHA1
    PC7     ------> HRTIM_CHA2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80036fa:	2340      	movs	r3, #64	; 0x40
 80036fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036fe:	2302      	movs	r3, #2
 8003700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003702:	2300      	movs	r3, #0
 8003704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003706:	2303      	movs	r3, #3
 8003708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 800370a:	2302      	movs	r3, #2
 800370c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800370e:	f107 0314 	add.w	r3, r7, #20
 8003712:	4619      	mov	r1, r3
 8003714:	480d      	ldr	r0, [pc, #52]	; (800374c <HAL_HRTIM_MspPostInit+0xb0>)
 8003716:	f004 fa97 	bl	8007c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800371a:	23c0      	movs	r3, #192	; 0xc0
 800371c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800371e:	2302      	movs	r3, #2
 8003720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003722:	2300      	movs	r3, #0
 8003724:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003726:	2303      	movs	r3, #3
 8003728:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 800372a:	2301      	movs	r3, #1
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800372e:	f107 0314 	add.w	r3, r7, #20
 8003732:	4619      	mov	r1, r3
 8003734:	4806      	ldr	r0, [pc, #24]	; (8003750 <HAL_HRTIM_MspPostInit+0xb4>)
 8003736:	f004 fa87 	bl	8007c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 800373a:	bf00      	nop
 800373c:	3728      	adds	r7, #40	; 0x28
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40017400 	.word	0x40017400
 8003748:	58024400 	.word	0x58024400
 800374c:	58021800 	.word	0x58021800
 8003750:	58020800 	.word	0x58020800

08003754 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b0b4      	sub	sp, #208	; 0xd0
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800375c:	f107 0310 	add.w	r3, r7, #16
 8003760:	22c0      	movs	r2, #192	; 0xc0
 8003762:	2100      	movs	r1, #0
 8003764:	4618      	mov	r0, r3
 8003766:	f017 ff0f 	bl	801b588 <memset>
  if(hlptim->Instance==LPTIM1)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a19      	ldr	r2, [pc, #100]	; (80037d4 <HAL_LPTIM_MspInit+0x80>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d12a      	bne.n	80037ca <HAL_LPTIM_MspInit+0x76>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8003774:	f04f 0220 	mov.w	r2, #32
 8003778:	f04f 0300 	mov.w	r3, #0
 800377c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8003780:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003784:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003788:	f107 0310 	add.w	r3, r7, #16
 800378c:	4618      	mov	r0, r3
 800378e:	f007 fbd9 	bl	800af44 <HAL_RCCEx_PeriphCLKConfig>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <HAL_LPTIM_MspInit+0x48>
    {
      Error_Handler();
 8003798:	f7ff fe3e 	bl	8003418 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800379c:	4b0e      	ldr	r3, [pc, #56]	; (80037d8 <HAL_LPTIM_MspInit+0x84>)
 800379e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037a2:	4a0d      	ldr	r2, [pc, #52]	; (80037d8 <HAL_LPTIM_MspInit+0x84>)
 80037a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037a8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80037ac:	4b0a      	ldr	r3, [pc, #40]	; (80037d8 <HAL_LPTIM_MspInit+0x84>)
 80037ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 80037ba:	2200      	movs	r2, #0
 80037bc:	2100      	movs	r1, #0
 80037be:	205d      	movs	r0, #93	; 0x5d
 80037c0:	f002 fbf9 	bl	8005fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80037c4:	205d      	movs	r0, #93	; 0x5d
 80037c6:	f002 fc10 	bl	8005fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 80037ca:	bf00      	nop
 80037cc:	37d0      	adds	r7, #208	; 0xd0
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	40002400 	.word	0x40002400
 80037d8:	58024400 	.word	0x58024400

080037dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80037dc:	b480      	push	{r7}
 80037de:	b087      	sub	sp, #28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a2b      	ldr	r2, [pc, #172]	; (8003898 <HAL_TIM_Base_MspInit+0xbc>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d10f      	bne.n	800380e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80037ee:	4b2b      	ldr	r3, [pc, #172]	; (800389c <HAL_TIM_Base_MspInit+0xc0>)
 80037f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037f4:	4a29      	ldr	r2, [pc, #164]	; (800389c <HAL_TIM_Base_MspInit+0xc0>)
 80037f6:	f043 0301 	orr.w	r3, r3, #1
 80037fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80037fe:	4b27      	ldr	r3, [pc, #156]	; (800389c <HAL_TIM_Base_MspInit+0xc0>)
 8003800:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	617b      	str	r3, [r7, #20]
 800380a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800380c:	e03d      	b.n	800388a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM2)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003816:	d10f      	bne.n	8003838 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003818:	4b20      	ldr	r3, [pc, #128]	; (800389c <HAL_TIM_Base_MspInit+0xc0>)
 800381a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800381e:	4a1f      	ldr	r2, [pc, #124]	; (800389c <HAL_TIM_Base_MspInit+0xc0>)
 8003820:	f043 0301 	orr.w	r3, r3, #1
 8003824:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003828:	4b1c      	ldr	r3, [pc, #112]	; (800389c <HAL_TIM_Base_MspInit+0xc0>)
 800382a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	613b      	str	r3, [r7, #16]
 8003834:	693b      	ldr	r3, [r7, #16]
}
 8003836:	e028      	b.n	800388a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a18      	ldr	r2, [pc, #96]	; (80038a0 <HAL_TIM_Base_MspInit+0xc4>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d10f      	bne.n	8003862 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003842:	4b16      	ldr	r3, [pc, #88]	; (800389c <HAL_TIM_Base_MspInit+0xc0>)
 8003844:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003848:	4a14      	ldr	r2, [pc, #80]	; (800389c <HAL_TIM_Base_MspInit+0xc0>)
 800384a:	f043 0302 	orr.w	r3, r3, #2
 800384e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003852:	4b12      	ldr	r3, [pc, #72]	; (800389c <HAL_TIM_Base_MspInit+0xc0>)
 8003854:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	68fb      	ldr	r3, [r7, #12]
}
 8003860:	e013      	b.n	800388a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM5)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a0f      	ldr	r2, [pc, #60]	; (80038a4 <HAL_TIM_Base_MspInit+0xc8>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d10e      	bne.n	800388a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800386c:	4b0b      	ldr	r3, [pc, #44]	; (800389c <HAL_TIM_Base_MspInit+0xc0>)
 800386e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003872:	4a0a      	ldr	r2, [pc, #40]	; (800389c <HAL_TIM_Base_MspInit+0xc0>)
 8003874:	f043 0308 	orr.w	r3, r3, #8
 8003878:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800387c:	4b07      	ldr	r3, [pc, #28]	; (800389c <HAL_TIM_Base_MspInit+0xc0>)
 800387e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	60bb      	str	r3, [r7, #8]
 8003888:	68bb      	ldr	r3, [r7, #8]
}
 800388a:	bf00      	nop
 800388c:	371c      	adds	r7, #28
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	40010000 	.word	0x40010000
 800389c:	58024400 	.word	0x58024400
 80038a0:	40000400 	.word	0x40000400
 80038a4:	40000c00 	.word	0x40000c00

080038a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b0ba      	sub	sp, #232	; 0xe8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	605a      	str	r2, [r3, #4]
 80038ba:	609a      	str	r2, [r3, #8]
 80038bc:	60da      	str	r2, [r3, #12]
 80038be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80038c0:	f107 0310 	add.w	r3, r7, #16
 80038c4:	22c0      	movs	r2, #192	; 0xc0
 80038c6:	2100      	movs	r1, #0
 80038c8:	4618      	mov	r0, r3
 80038ca:	f017 fe5d 	bl	801b588 <memset>
  if(huart->Instance==USART3)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a27      	ldr	r2, [pc, #156]	; (8003970 <HAL_UART_MspInit+0xc8>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d146      	bne.n	8003966 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80038d8:	f04f 0202 	mov.w	r2, #2
 80038dc:	f04f 0300 	mov.w	r3, #0
 80038e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80038e4:	2300      	movs	r3, #0
 80038e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038ea:	f107 0310 	add.w	r3, r7, #16
 80038ee:	4618      	mov	r0, r3
 80038f0:	f007 fb28 	bl	800af44 <HAL_RCCEx_PeriphCLKConfig>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80038fa:	f7ff fd8d 	bl	8003418 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80038fe:	4b1d      	ldr	r3, [pc, #116]	; (8003974 <HAL_UART_MspInit+0xcc>)
 8003900:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003904:	4a1b      	ldr	r2, [pc, #108]	; (8003974 <HAL_UART_MspInit+0xcc>)
 8003906:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800390a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800390e:	4b19      	ldr	r3, [pc, #100]	; (8003974 <HAL_UART_MspInit+0xcc>)
 8003910:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003914:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800391c:	4b15      	ldr	r3, [pc, #84]	; (8003974 <HAL_UART_MspInit+0xcc>)
 800391e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003922:	4a14      	ldr	r2, [pc, #80]	; (8003974 <HAL_UART_MspInit+0xcc>)
 8003924:	f043 0308 	orr.w	r3, r3, #8
 8003928:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800392c:	4b11      	ldr	r3, [pc, #68]	; (8003974 <HAL_UART_MspInit+0xcc>)
 800392e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003932:	f003 0308 	and.w	r3, r3, #8
 8003936:	60bb      	str	r3, [r7, #8]
 8003938:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800393a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800393e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003942:	2302      	movs	r3, #2
 8003944:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003948:	2300      	movs	r3, #0
 800394a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800394e:	2300      	movs	r3, #0
 8003950:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003954:	2307      	movs	r3, #7
 8003956:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800395a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800395e:	4619      	mov	r1, r3
 8003960:	4805      	ldr	r0, [pc, #20]	; (8003978 <HAL_UART_MspInit+0xd0>)
 8003962:	f004 f971 	bl	8007c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003966:	bf00      	nop
 8003968:	37e8      	adds	r7, #232	; 0xe8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	40004800 	.word	0x40004800
 8003974:	58024400 	.word	0x58024400
 8003978:	58020c00 	.word	0x58020c00

0800397c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003980:	f007 fac4 	bl	800af0c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
		Error_Handler();
 8003984:	f7ff fd48 	bl	8003418 <Error_Handler>
 8003988:	e7fc      	b.n	8003984 <NMI_Handler+0x8>

0800398a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Error_Handler();
 800398e:	f7ff fd43 	bl	8003418 <Error_Handler>
 8003992:	e7fc      	b.n	800398e <HardFault_Handler+0x4>

08003994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  Error_Handler();
 8003998:	f7ff fd3e 	bl	8003418 <Error_Handler>
 800399c:	e7fc      	b.n	8003998 <MemManage_Handler+0x4>

0800399e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  Error_Handler();
 80039a2:	f7ff fd39 	bl	8003418 <Error_Handler>
 80039a6:	e7fc      	b.n	80039a2 <BusFault_Handler+0x4>

080039a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  Error_Handler();
 80039ac:	f7ff fd34 	bl	8003418 <Error_Handler>
 80039b0:	e7fc      	b.n	80039ac <UsageFault_Handler+0x4>

080039b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039b2:	b480      	push	{r7}
 80039b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039b6:	bf00      	nop
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039c4:	bf00      	nop
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039ce:	b480      	push	{r7}
 80039d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039d2:	bf00      	nop
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039e0:	f000 fc2e 	bl	8004240 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039e4:	bf00      	nop
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80039ec:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80039f0:	f004 fb25 	bl	800803e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 80039f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80039f8:	f004 fb21 	bl	800803e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80039fc:	bf00      	nop
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */
  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8003a04:	4802      	ldr	r0, [pc, #8]	; (8003a10 <LPTIM1_IRQHandler+0x10>)
 8003a06:	f005 ff5a 	bl	80098be <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */
  /* USER CODE END LPTIM1_IRQn 1 */
}
 8003a0a:	bf00      	nop
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	200003ac 	.word	0x200003ac

08003a14 <HRTIM1_TIMA_IRQHandler>:

/**
  * @brief This function handles HRTIM timer A global interrupt.
  */
void HRTIM1_TIMA_IRQHandler(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 0 */

  /* USER CODE END HRTIM1_TIMA_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_A);
 8003a18:	2100      	movs	r1, #0
 8003a1a:	4802      	ldr	r0, [pc, #8]	; (8003a24 <HRTIM1_TIMA_IRQHandler+0x10>)
 8003a1c:	f004 ff86 	bl	800892c <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 1 */

  /* USER CODE END HRTIM1_TIMA_IRQn 1 */
}
 8003a20:	bf00      	nop
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	200002d0 	.word	0x200002d0

08003a28 <HRTIM1_TIME_IRQHandler>:

/**
  * @brief This function handles HRTIM timer E global interrupt.
  */
void HRTIM1_TIME_IRQHandler(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 0 */

  /* USER CODE END HRTIM1_TIME_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_E);
 8003a2c:	2104      	movs	r1, #4
 8003a2e:	4802      	ldr	r0, [pc, #8]	; (8003a38 <HRTIM1_TIME_IRQHandler+0x10>)
 8003a30:	f004 ff7c 	bl	800892c <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 1 */

  /* USER CODE END HRTIM1_TIME_IRQn 1 */
}
 8003a34:	bf00      	nop
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	200002d0 	.word	0x200002d0

08003a3c <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8003a40:	4802      	ldr	r0, [pc, #8]	; (8003a4c <ADC3_IRQHandler+0x10>)
 8003a42:	f001 f981 	bl	8004d48 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8003a46:	bf00      	nop
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	20000258 	.word	0x20000258

08003a50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
	return 1;
 8003a54:	2301      	movs	r3, #1
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <_kill>:

int _kill(int pid, int sig)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003a6a:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <_kill+0x20>)
 8003a6c:	2216      	movs	r2, #22
 8003a6e:	601a      	str	r2, [r3, #0]
	return -1;
 8003a70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	200072f4 	.word	0x200072f4

08003a84 <_exit>:

void _exit (int status)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7ff ffe5 	bl	8003a60 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003a96:	e7fe      	b.n	8003a96 <_exit+0x12>

08003a98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	e00a      	b.n	8003ac0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003aaa:	f3af 8000 	nop.w
 8003aae:	4601      	mov	r1, r0
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	1c5a      	adds	r2, r3, #1
 8003ab4:	60ba      	str	r2, [r7, #8]
 8003ab6:	b2ca      	uxtb	r2, r1
 8003ab8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	3301      	adds	r3, #1
 8003abe:	617b      	str	r3, [r7, #20]
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	dbf0      	blt.n	8003aaa <_read+0x12>
	}

return len;
 8003ac8:	687b      	ldr	r3, [r7, #4]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3718      	adds	r7, #24
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b086      	sub	sp, #24
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	60f8      	str	r0, [r7, #12]
 8003ada:	60b9      	str	r1, [r7, #8]
 8003adc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ade:	2300      	movs	r3, #0
 8003ae0:	617b      	str	r3, [r7, #20]
 8003ae2:	e009      	b.n	8003af8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	1c5a      	adds	r2, r3, #1
 8003ae8:	60ba      	str	r2, [r7, #8]
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7fe fc9b 	bl	8002428 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	3301      	adds	r3, #1
 8003af6:	617b      	str	r3, [r7, #20]
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	dbf1      	blt.n	8003ae4 <_write+0x12>
	}
	return len;
 8003b00:	687b      	ldr	r3, [r7, #4]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3718      	adds	r7, #24
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <_close>:

int _close(int file)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
	return -1;
 8003b12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b083      	sub	sp, #12
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
 8003b2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b32:	605a      	str	r2, [r3, #4]
	return 0;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <_isatty>:

int _isatty(int file)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
	return 1;
 8003b4a:	2301      	movs	r3, #1
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
	return 0;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
	...

08003b74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b087      	sub	sp, #28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b7c:	4a14      	ldr	r2, [pc, #80]	; (8003bd0 <_sbrk+0x5c>)
 8003b7e:	4b15      	ldr	r3, [pc, #84]	; (8003bd4 <_sbrk+0x60>)
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b88:	4b13      	ldr	r3, [pc, #76]	; (8003bd8 <_sbrk+0x64>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d102      	bne.n	8003b96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b90:	4b11      	ldr	r3, [pc, #68]	; (8003bd8 <_sbrk+0x64>)
 8003b92:	4a12      	ldr	r2, [pc, #72]	; (8003bdc <_sbrk+0x68>)
 8003b94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b96:	4b10      	ldr	r3, [pc, #64]	; (8003bd8 <_sbrk+0x64>)
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d205      	bcs.n	8003bb0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003ba4:	4b0e      	ldr	r3, [pc, #56]	; (8003be0 <_sbrk+0x6c>)
 8003ba6:	220c      	movs	r2, #12
 8003ba8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003baa:	f04f 33ff 	mov.w	r3, #4294967295
 8003bae:	e009      	b.n	8003bc4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bb0:	4b09      	ldr	r3, [pc, #36]	; (8003bd8 <_sbrk+0x64>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bb6:	4b08      	ldr	r3, [pc, #32]	; (8003bd8 <_sbrk+0x64>)
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	4a06      	ldr	r2, [pc, #24]	; (8003bd8 <_sbrk+0x64>)
 8003bc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	371c      	adds	r7, #28
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	20020000 	.word	0x20020000
 8003bd4:	00000400 	.word	0x00000400
 8003bd8:	20000600 	.word	0x20000600
 8003bdc:	20007308 	.word	0x20007308
 8003be0:	200072f4 	.word	0x200072f4

08003be4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003bea:	4b3f      	ldr	r3, [pc, #252]	; (8003ce8 <SystemInit+0x104>)
 8003bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf0:	4a3d      	ldr	r2, [pc, #244]	; (8003ce8 <SystemInit+0x104>)
 8003bf2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bf6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003bfa:	4b3c      	ldr	r3, [pc, #240]	; (8003cec <SystemInit+0x108>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	2b06      	cmp	r3, #6
 8003c04:	d807      	bhi.n	8003c16 <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */

	  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003c06:	4b39      	ldr	r3, [pc, #228]	; (8003cec <SystemInit+0x108>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f023 030f 	bic.w	r3, r3, #15
 8003c0e:	4a37      	ldr	r2, [pc, #220]	; (8003cec <SystemInit+0x108>)
 8003c10:	f043 0307 	orr.w	r3, r3, #7
 8003c14:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003c16:	4b36      	ldr	r3, [pc, #216]	; (8003cf0 <SystemInit+0x10c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a35      	ldr	r2, [pc, #212]	; (8003cf0 <SystemInit+0x10c>)
 8003c1c:	f043 0301 	orr.w	r3, r3, #1
 8003c20:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003c22:	4b33      	ldr	r3, [pc, #204]	; (8003cf0 <SystemInit+0x10c>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003c28:	4b31      	ldr	r3, [pc, #196]	; (8003cf0 <SystemInit+0x10c>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	4930      	ldr	r1, [pc, #192]	; (8003cf0 <SystemInit+0x10c>)
 8003c2e:	4b31      	ldr	r3, [pc, #196]	; (8003cf4 <SystemInit+0x110>)
 8003c30:	4013      	ands	r3, r2
 8003c32:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003c34:	4b2d      	ldr	r3, [pc, #180]	; (8003cec <SystemInit+0x108>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0308 	and.w	r3, r3, #8
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d007      	beq.n	8003c50 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003c40:	4b2a      	ldr	r3, [pc, #168]	; (8003cec <SystemInit+0x108>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f023 030f 	bic.w	r3, r3, #15
 8003c48:	4a28      	ldr	r2, [pc, #160]	; (8003cec <SystemInit+0x108>)
 8003c4a:	f043 0307 	orr.w	r3, r3, #7
 8003c4e:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003c50:	4b27      	ldr	r3, [pc, #156]	; (8003cf0 <SystemInit+0x10c>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003c56:	4b26      	ldr	r3, [pc, #152]	; (8003cf0 <SystemInit+0x10c>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003c5c:	4b24      	ldr	r3, [pc, #144]	; (8003cf0 <SystemInit+0x10c>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003c62:	4b23      	ldr	r3, [pc, #140]	; (8003cf0 <SystemInit+0x10c>)
 8003c64:	4a24      	ldr	r2, [pc, #144]	; (8003cf8 <SystemInit+0x114>)
 8003c66:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003c68:	4b21      	ldr	r3, [pc, #132]	; (8003cf0 <SystemInit+0x10c>)
 8003c6a:	4a24      	ldr	r2, [pc, #144]	; (8003cfc <SystemInit+0x118>)
 8003c6c:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003c6e:	4b20      	ldr	r3, [pc, #128]	; (8003cf0 <SystemInit+0x10c>)
 8003c70:	4a23      	ldr	r2, [pc, #140]	; (8003d00 <SystemInit+0x11c>)
 8003c72:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003c74:	4b1e      	ldr	r3, [pc, #120]	; (8003cf0 <SystemInit+0x10c>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003c7a:	4b1d      	ldr	r3, [pc, #116]	; (8003cf0 <SystemInit+0x10c>)
 8003c7c:	4a20      	ldr	r2, [pc, #128]	; (8003d00 <SystemInit+0x11c>)
 8003c7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003c80:	4b1b      	ldr	r3, [pc, #108]	; (8003cf0 <SystemInit+0x10c>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003c86:	4b1a      	ldr	r3, [pc, #104]	; (8003cf0 <SystemInit+0x10c>)
 8003c88:	4a1d      	ldr	r2, [pc, #116]	; (8003d00 <SystemInit+0x11c>)
 8003c8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003c8c:	4b18      	ldr	r3, [pc, #96]	; (8003cf0 <SystemInit+0x10c>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003c92:	4b17      	ldr	r3, [pc, #92]	; (8003cf0 <SystemInit+0x10c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a16      	ldr	r2, [pc, #88]	; (8003cf0 <SystemInit+0x10c>)
 8003c98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c9c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003c9e:	4b14      	ldr	r3, [pc, #80]	; (8003cf0 <SystemInit+0x10c>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003ca4:	4b17      	ldr	r3, [pc, #92]	; (8003d04 <SystemInit+0x120>)
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	4b17      	ldr	r3, [pc, #92]	; (8003d08 <SystemInit+0x124>)
 8003caa:	4013      	ands	r3, r2
 8003cac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cb0:	d202      	bcs.n	8003cb8 <SystemInit+0xd4>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003cb2:	4b16      	ldr	r3, [pc, #88]	; (8003d0c <SystemInit+0x128>)
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 8003cb8:	4b0d      	ldr	r3, [pc, #52]	; (8003cf0 <SystemInit+0x10c>)
 8003cba:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003cbe:	4a0c      	ldr	r2, [pc, #48]	; (8003cf0 <SystemInit+0x10c>)
 8003cc0:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8003cc4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8003cc8:	4b09      	ldr	r3, [pc, #36]	; (8003cf0 <SystemInit+0x10c>)
 8003cca:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003cce:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8003cd0:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003cd2:	4b0f      	ldr	r3, [pc, #60]	; (8003d10 <SystemInit+0x12c>)
 8003cd4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003cd8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	e000ed00 	.word	0xe000ed00
 8003cec:	52002000 	.word	0x52002000
 8003cf0:	58024400 	.word	0x58024400
 8003cf4:	eaf6ed7f 	.word	0xeaf6ed7f
 8003cf8:	02020200 	.word	0x02020200
 8003cfc:	01ff0000 	.word	0x01ff0000
 8003d00:	01010280 	.word	0x01010280
 8003d04:	5c001000 	.word	0x5c001000
 8003d08:	ffff0000 	.word	0xffff0000
 8003d0c:	51008108 	.word	0x51008108
 8003d10:	52004000 	.word	0x52004000

08003d14 <HAL_LPTIM_AutoReloadMatchCallback>:
//		}
//
//	}
//}

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin); //toggle green LED
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	4803      	ldr	r0, [pc, #12]	; (8003d2c <HAL_LPTIM_AutoReloadMatchCallback+0x18>)
 8003d20:	f004 f973 	bl	800800a <HAL_GPIO_TogglePin>
}
 8003d24:	bf00      	nop
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	58020400 	.word	0x58020400

08003d30 <HAL_HRTIM_Compare2EventCallback>:

void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
		const struct AttenuatorSettings a = {0,0,0,0,0,1,0}; // 8 dB
		set_aom_atten(a);
#endif //ATTENUATOR_CODE
	}

}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
	...

08003d48 <HAL_HRTIM_Compare3EventCallback>:

void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b088      	sub	sp, #32
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]

	/* Called at the end of a POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d15d      	bne.n	8003e14 <HAL_HRTIM_Compare3EventCallback+0xcc>
		/* Reset the attenuator to 0 dB */
		const struct AttenuatorSettings a = { 0, 0, 0, 0, 0, 0, 0 }; // 0 dB
		set_aom_atten(a);
#endif //ATTENUATOR_CODE

		const double start_freq = ((long)(sweep_settings.req_start_freq/sweep_settings.step_size)) * sweep_settings.step_size;
 8003d58:	4b30      	ldr	r3, [pc, #192]	; (8003e1c <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003d5a:	ed93 5b00 	vldr	d5, [r3]
 8003d5e:	4b2f      	ldr	r3, [pc, #188]	; (8003e1c <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003d60:	ed93 6b04 	vldr	d6, [r3, #16]
 8003d64:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003d68:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003d6c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003d70:	4b2a      	ldr	r3, [pc, #168]	; (8003e1c <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003d72:	ed93 7b04 	vldr	d7, [r3, #16]
 8003d76:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003d7a:	ed87 7b06 	vstr	d7, [r7, #24]
		const double stop_freq = ((long)((sweep_settings.req_stop_freq/sweep_settings.step_size) + 0.5)) * sweep_settings.step_size;
 8003d7e:	4b27      	ldr	r3, [pc, #156]	; (8003e1c <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003d80:	ed93 5b02 	vldr	d5, [r3, #8]
 8003d84:	4b25      	ldr	r3, [pc, #148]	; (8003e1c <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003d86:	ed93 6b04 	vldr	d6, [r3, #16]
 8003d8a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003d8e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8003d92:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003d96:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003d9a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003d9e:	4b1f      	ldr	r3, [pc, #124]	; (8003e1c <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003da0:	ed93 7b04 	vldr	d7, [r3, #16]
 8003da4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003da8:	ed87 7b04 	vstr	d7, [r7, #16]
		const uint32_t num_points = ((stop_freq - start_freq)/sweep_settings.step_size) + 1;
 8003dac:	ed97 6b04 	vldr	d6, [r7, #16]
 8003db0:	ed97 7b06 	vldr	d7, [r7, #24]
 8003db4:	ee36 5b47 	vsub.f64	d5, d6, d7
 8003db8:	4b18      	ldr	r3, [pc, #96]	; (8003e1c <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003dba:	ed93 6b04 	vldr	d6, [r3, #16]
 8003dbe:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003dc2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003dc6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003dca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003dce:	ee17 3a90 	vmov	r3, s15
 8003dd2:	60fb      	str	r3, [r7, #12]
		static uint32_t i = 0;

		/* Configure the Microwave frequency */
		if (i == num_points) {
 8003dd4:	4b12      	ldr	r3, [pc, #72]	; (8003e20 <HAL_HRTIM_Compare3EventCallback+0xd8>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d106      	bne.n	8003dec <HAL_HRTIM_Compare3EventCallback+0xa4>
			stop_pop();
 8003dde:	f019 fbbf 	bl	801d560 <__stop_pop_veneer>
			i = 0;
 8003de2:	4b0f      	ldr	r3, [pc, #60]	; (8003e20 <HAL_HRTIM_Compare3EventCallback+0xd8>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]
			start_pop();
 8003de8:	f019 fbb6 	bl	801d558 <__start_pop_veneer>

#ifdef SYNTH_ENABLE
		set_frequency_hz(start_freq + (i * sweep_settings.step_size));
#endif

		i = i + 1;
 8003dec:	4b0c      	ldr	r3, [pc, #48]	; (8003e20 <HAL_HRTIM_Compare3EventCallback+0xd8>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	3301      	adds	r3, #1
 8003df2:	4a0b      	ldr	r2, [pc, #44]	; (8003e20 <HAL_HRTIM_Compare3EventCallback+0xd8>)
 8003df4:	6013      	str	r3, [r2, #0]

		pop_cycle_count = pop_cycle_count + 1;
 8003df6:	4b0b      	ldr	r3, [pc, #44]	; (8003e24 <HAL_HRTIM_Compare3EventCallback+0xdc>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	4a09      	ldr	r2, [pc, #36]	; (8003e24 <HAL_HRTIM_Compare3EventCallback+0xdc>)
 8003dfe:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); //toggle amber LED
 8003e00:	2102      	movs	r1, #2
 8003e02:	4809      	ldr	r0, [pc, #36]	; (8003e28 <HAL_HRTIM_Compare3EventCallback+0xe0>)
 8003e04:	f004 f901 	bl	800800a <HAL_GPIO_TogglePin>
		printf("POP Cycle %lu done.\r\n", pop_cycle_count);
 8003e08:	4b06      	ldr	r3, [pc, #24]	; (8003e24 <HAL_HRTIM_Compare3EventCallback+0xdc>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4807      	ldr	r0, [pc, #28]	; (8003e2c <HAL_HRTIM_Compare3EventCallback+0xe4>)
 8003e10:	f017 fa2a 	bl	801b268 <iprintf>

	/* Called when the second microwave pulse goes high */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_E) {
	}

}
 8003e14:	bf00      	nop
 8003e16:	3720      	adds	r7, #32
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	08020cb8 	.word	0x08020cb8
 8003e20:	2000060c 	.word	0x2000060c
 8003e24:	20000604 	.word	0x20000604
 8003e28:	58021000 	.word	0x58021000
 8003e2c:	0801e2b8 	.word	0x0801e2b8

08003e30 <HAL_HRTIM_RepetitionEventCallback>:

void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef *hhrtim,
		uint32_t TimerIdx) {
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]

	/* Called at the start of the next POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
	}
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
	...

08003e48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003e48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003e4c:	f7ff feca 	bl	8003be4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e50:	480c      	ldr	r0, [pc, #48]	; (8003e84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003e52:	490d      	ldr	r1, [pc, #52]	; (8003e88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003e54:	4a0d      	ldr	r2, [pc, #52]	; (8003e8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e58:	e002      	b.n	8003e60 <LoopCopyDataInit>

08003e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e5e:	3304      	adds	r3, #4

08003e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e64:	d3f9      	bcc.n	8003e5a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e66:	4a0a      	ldr	r2, [pc, #40]	; (8003e90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003e68:	4c0a      	ldr	r4, [pc, #40]	; (8003e94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e6c:	e001      	b.n	8003e72 <LoopFillZerobss>

08003e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e70:	3204      	adds	r2, #4

08003e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e74:	d3fb      	bcc.n	8003e6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e76:	f017 fbd9 	bl	801b62c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e7a:	f7fe fae9 	bl	8002450 <main>
  bx  lr
 8003e7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003e80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e88:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8003e8c:	080211d0 	.word	0x080211d0
  ldr r2, =_sbss
 8003e90:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8003e94:	20007304 	.word	0x20007304

08003e98 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e98:	e7fe      	b.n	8003e98 <ADC_IRQHandler>

08003e9a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
 8003ea2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00b      	beq.n	8003ec2 <LAN8742_RegisterBusIO+0x28>
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d007      	beq.n	8003ec2 <LAN8742_RegisterBusIO+0x28>
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <LAN8742_RegisterBusIO+0x28>
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d102      	bne.n	8003ec8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8003ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec6:	e014      	b.n	8003ef2 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	68da      	ldr	r2, [r3, #12]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	691a      	ldr	r2, [r3, #16]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b086      	sub	sp, #24
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8003f06:	2300      	movs	r3, #0
 8003f08:	60fb      	str	r3, [r7, #12]
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	60bb      	str	r3, [r7, #8]
 8003f0e:	2300      	movs	r3, #0
 8003f10:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8003f12:	2300      	movs	r3, #0
 8003f14:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d17c      	bne.n	8004018 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d002      	beq.n	8003f2c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003f32:	2300      	movs	r3, #0
 8003f34:	617b      	str	r3, [r7, #20]
 8003f36:	e01c      	b.n	8003f72 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	f107 0208 	add.w	r2, r7, #8
 8003f40:	2112      	movs	r1, #18
 8003f42:	6978      	ldr	r0, [r7, #20]
 8003f44:	4798      	blx	r3
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	da03      	bge.n	8003f54 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8003f4c:	f06f 0304 	mvn.w	r3, #4
 8003f50:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8003f52:	e00b      	b.n	8003f6c <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	f003 031f 	and.w	r3, r3, #31
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d105      	bne.n	8003f6c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8003f66:	2300      	movs	r3, #0
 8003f68:	613b      	str	r3, [r7, #16]
         break;
 8003f6a:	e005      	b.n	8003f78 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	617b      	str	r3, [r7, #20]
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	2b1f      	cmp	r3, #31
 8003f76:	d9df      	bls.n	8003f38 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b1f      	cmp	r3, #31
 8003f7e:	d902      	bls.n	8003f86 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8003f80:	f06f 0302 	mvn.w	r3, #2
 8003f84:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d145      	bne.n	8004018 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6810      	ldr	r0, [r2, #0]
 8003f94:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003f98:	2100      	movs	r1, #0
 8003f9a:	4798      	blx	r3
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	db37      	blt.n	8004012 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	6810      	ldr	r0, [r2, #0]
 8003faa:	f107 0208 	add.w	r2, r7, #8
 8003fae:	2100      	movs	r1, #0
 8003fb0:	4798      	blx	r3
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	db28      	blt.n	800400a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	4798      	blx	r3
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003fc2:	e01c      	b.n	8003ffe <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	4798      	blx	r3
 8003fca:	4603      	mov	r3, r0
 8003fcc:	461a      	mov	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003fd6:	d80e      	bhi.n	8003ff6 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	6810      	ldr	r0, [r2, #0]
 8003fe0:	f107 0208 	add.w	r2, r7, #8
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	4798      	blx	r3
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	da07      	bge.n	8003ffe <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8003fee:	f06f 0304 	mvn.w	r3, #4
 8003ff2:	613b      	str	r3, [r7, #16]
                 break;
 8003ff4:	e010      	b.n	8004018 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8003ff6:	f06f 0301 	mvn.w	r3, #1
 8003ffa:	613b      	str	r3, [r7, #16]
               break;
 8003ffc:	e00c      	b.n	8004018 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1dd      	bne.n	8003fc4 <LAN8742_Init+0xc6>
 8004008:	e006      	b.n	8004018 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800400a:	f06f 0304 	mvn.w	r3, #4
 800400e:	613b      	str	r3, [r7, #16]
 8004010:	e002      	b.n	8004018 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8004012:	f06f 0303 	mvn.w	r3, #3
 8004016:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d112      	bne.n	8004044 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	4798      	blx	r3
 8004024:	4603      	mov	r3, r0
 8004026:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8004028:	bf00      	nop
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	4798      	blx	r3
 8004030:	4603      	mov	r3, r0
 8004032:	461a      	mov	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800403c:	d9f5      	bls.n	800402a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8004044:	693b      	ldr	r3, [r7, #16]
 }
 8004046:	4618      	mov	r0, r3
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b084      	sub	sp, #16
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8004056:	2300      	movs	r3, #0
 8004058:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6810      	ldr	r0, [r2, #0]
 8004062:	f107 020c 	add.w	r2, r7, #12
 8004066:	2101      	movs	r1, #1
 8004068:	4798      	blx	r3
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	da02      	bge.n	8004076 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8004070:	f06f 0304 	mvn.w	r3, #4
 8004074:	e06e      	b.n	8004154 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	6810      	ldr	r0, [r2, #0]
 800407e:	f107 020c 	add.w	r2, r7, #12
 8004082:	2101      	movs	r1, #1
 8004084:	4798      	blx	r3
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	da02      	bge.n	8004092 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800408c:	f06f 0304 	mvn.w	r3, #4
 8004090:	e060      	b.n	8004154 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b00      	cmp	r3, #0
 800409a:	d101      	bne.n	80040a0 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 800409c:	2301      	movs	r3, #1
 800409e:	e059      	b.n	8004154 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6810      	ldr	r0, [r2, #0]
 80040a8:	f107 020c 	add.w	r2, r7, #12
 80040ac:	2100      	movs	r1, #0
 80040ae:	4798      	blx	r3
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	da02      	bge.n	80040bc <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80040b6:	f06f 0304 	mvn.w	r3, #4
 80040ba:	e04b      	b.n	8004154 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d11b      	bne.n	80040fe <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d006      	beq.n	80040de <LAN8742_GetLinkState+0x90>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80040da:	2302      	movs	r3, #2
 80040dc:	e03a      	b.n	8004154 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e033      	b.n	8004154 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80040f6:	2304      	movs	r3, #4
 80040f8:	e02c      	b.n	8004154 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80040fa:	2305      	movs	r3, #5
 80040fc:	e02a      	b.n	8004154 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6810      	ldr	r0, [r2, #0]
 8004106:	f107 020c 	add.w	r2, r7, #12
 800410a:	211f      	movs	r1, #31
 800410c:	4798      	blx	r3
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	da02      	bge.n	800411a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8004114:	f06f 0304 	mvn.w	r3, #4
 8004118:	e01c      	b.n	8004154 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8004124:	2306      	movs	r3, #6
 8004126:	e015      	b.n	8004154 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f003 031c 	and.w	r3, r3, #28
 800412e:	2b18      	cmp	r3, #24
 8004130:	d101      	bne.n	8004136 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8004132:	2302      	movs	r3, #2
 8004134:	e00e      	b.n	8004154 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f003 031c 	and.w	r3, r3, #28
 800413c:	2b08      	cmp	r3, #8
 800413e:	d101      	bne.n	8004144 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8004140:	2303      	movs	r3, #3
 8004142:	e007      	b.n	8004154 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f003 031c 	and.w	r3, r3, #28
 800414a:	2b14      	cmp	r3, #20
 800414c:	d101      	bne.n	8004152 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800414e:	2304      	movs	r3, #4
 8004150:	e000      	b.n	8004154 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8004152:	2305      	movs	r3, #5
    }				
  }
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004162:	2003      	movs	r0, #3
 8004164:	f001 ff1c 	bl	8005fa0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004168:	f006 fcfa 	bl	800ab60 <HAL_RCC_GetSysClockFreq>
 800416c:	4602      	mov	r2, r0
 800416e:	4b15      	ldr	r3, [pc, #84]	; (80041c4 <HAL_Init+0x68>)
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	0a1b      	lsrs	r3, r3, #8
 8004174:	f003 030f 	and.w	r3, r3, #15
 8004178:	4913      	ldr	r1, [pc, #76]	; (80041c8 <HAL_Init+0x6c>)
 800417a:	5ccb      	ldrb	r3, [r1, r3]
 800417c:	f003 031f 	and.w	r3, r3, #31
 8004180:	fa22 f303 	lsr.w	r3, r2, r3
 8004184:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004186:	4b0f      	ldr	r3, [pc, #60]	; (80041c4 <HAL_Init+0x68>)
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	f003 030f 	and.w	r3, r3, #15
 800418e:	4a0e      	ldr	r2, [pc, #56]	; (80041c8 <HAL_Init+0x6c>)
 8004190:	5cd3      	ldrb	r3, [r2, r3]
 8004192:	f003 031f 	and.w	r3, r3, #31
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	fa22 f303 	lsr.w	r3, r2, r3
 800419c:	4a0b      	ldr	r2, [pc, #44]	; (80041cc <HAL_Init+0x70>)
 800419e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80041a0:	4a0b      	ldr	r2, [pc, #44]	; (80041d0 <HAL_Init+0x74>)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80041a6:	2000      	movs	r0, #0
 80041a8:	f000 f814 	bl	80041d4 <HAL_InitTick>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e002      	b.n	80041bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80041b6:	f7ff f95f 	bl	8003478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	58024400 	.word	0x58024400
 80041c8:	08020cd0 	.word	0x08020cd0
 80041cc:	20000010 	.word	0x20000010
 80041d0:	2000000c 	.word	0x2000000c

080041d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80041dc:	4b15      	ldr	r3, [pc, #84]	; (8004234 <HAL_InitTick+0x60>)
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e021      	b.n	800422c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80041e8:	4b13      	ldr	r3, [pc, #76]	; (8004238 <HAL_InitTick+0x64>)
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	4b11      	ldr	r3, [pc, #68]	; (8004234 <HAL_InitTick+0x60>)
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	4619      	mov	r1, r3
 80041f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80041fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80041fe:	4618      	mov	r0, r3
 8004200:	f001 ff01 	bl	8006006 <HAL_SYSTICK_Config>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e00e      	b.n	800422c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b0f      	cmp	r3, #15
 8004212:	d80a      	bhi.n	800422a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004214:	2200      	movs	r2, #0
 8004216:	6879      	ldr	r1, [r7, #4]
 8004218:	f04f 30ff 	mov.w	r0, #4294967295
 800421c:	f001 fecb 	bl	8005fb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004220:	4a06      	ldr	r2, [pc, #24]	; (800423c <HAL_InitTick+0x68>)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	e000      	b.n	800422c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
}
 800422c:	4618      	mov	r0, r3
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	20000024 	.word	0x20000024
 8004238:	2000000c 	.word	0x2000000c
 800423c:	20000020 	.word	0x20000020

08004240 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004244:	4b06      	ldr	r3, [pc, #24]	; (8004260 <HAL_IncTick+0x20>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	461a      	mov	r2, r3
 800424a:	4b06      	ldr	r3, [pc, #24]	; (8004264 <HAL_IncTick+0x24>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4413      	add	r3, r2
 8004250:	4a04      	ldr	r2, [pc, #16]	; (8004264 <HAL_IncTick+0x24>)
 8004252:	6013      	str	r3, [r2, #0]
}
 8004254:	bf00      	nop
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	20000024 	.word	0x20000024
 8004264:	20000610 	.word	0x20000610

08004268 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  return uwTick;
 800426c:	4b03      	ldr	r3, [pc, #12]	; (800427c <HAL_GetTick+0x14>)
 800426e:	681b      	ldr	r3, [r3, #0]
}
 8004270:	4618      	mov	r0, r3
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	20000610 	.word	0x20000610

08004280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004288:	f7ff ffee 	bl	8004268 <HAL_GetTick>
 800428c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004298:	d005      	beq.n	80042a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800429a:	4b0a      	ldr	r3, [pc, #40]	; (80042c4 <HAL_Delay+0x44>)
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	461a      	mov	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4413      	add	r3, r2
 80042a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80042a6:	bf00      	nop
 80042a8:	f7ff ffde 	bl	8004268 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d8f7      	bhi.n	80042a8 <HAL_Delay+0x28>
  {
  }
}
 80042b8:	bf00      	nop
 80042ba:	bf00      	nop
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	20000024 	.word	0x20000024

080042c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80042cc:	4b03      	ldr	r3, [pc, #12]	; (80042dc <HAL_GetREVID+0x14>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	0c1b      	lsrs	r3, r3, #16
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	5c001000 	.word	0x5c001000

080042e0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80042e8:	4b06      	ldr	r3, [pc, #24]	; (8004304 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80042f0:	4904      	ldr	r1, [pc, #16]	; (8004304 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	604b      	str	r3, [r1, #4]
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	58000400 	.word	0x58000400

08004308 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8004312:	4b07      	ldr	r3, [pc, #28]	; (8004330 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	43db      	mvns	r3, r3
 800431a:	401a      	ands	r2, r3
 800431c:	4904      	ldr	r1, [pc, #16]	; (8004330 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	4313      	orrs	r3, r2
 8004322:	604b      	str	r3, [r1, #4]
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	58000400 	.word	0x58000400

08004334 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	431a      	orrs	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	609a      	str	r2, [r3, #8]
}
 800434e:	bf00      	nop
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800435a:	b480      	push	{r7}
 800435c:	b083      	sub	sp, #12
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
 8004362:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	609a      	str	r2, [r3, #8]
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004390:	4618      	mov	r0, r3
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
 80043a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	3360      	adds	r3, #96	; 0x60
 80043ae:	461a      	mov	r2, r3
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4413      	add	r3, r2
 80043b6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	430b      	orrs	r3, r1
 80043ca:	431a      	orrs	r2, r3
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80043d0:	bf00      	nop
 80043d2:	371c      	adds	r7, #28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f003 031f 	and.w	r3, r3, #31
 80043f6:	6879      	ldr	r1, [r7, #4]
 80043f8:	fa01 f303 	lsl.w	r3, r1, r3
 80043fc:	431a      	orrs	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	611a      	str	r2, [r3, #16]
}
 8004402:	bf00      	nop
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800440e:	b480      	push	{r7}
 8004410:	b087      	sub	sp, #28
 8004412:	af00      	add	r7, sp, #0
 8004414:	60f8      	str	r0, [r7, #12]
 8004416:	60b9      	str	r1, [r7, #8]
 8004418:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	3360      	adds	r3, #96	; 0x60
 800441e:	461a      	mov	r2, r3
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	431a      	orrs	r2, r3
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	601a      	str	r2, [r3, #0]
  }
}
 8004438:	bf00      	nop
 800443a:	371c      	adds	r7, #28
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004454:	2b00      	cmp	r3, #0
 8004456:	d101      	bne.n	800445c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004458:	2301      	movs	r3, #1
 800445a:	e000      	b.n	800445e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800446a:	b480      	push	{r7}
 800446c:	b087      	sub	sp, #28
 800446e:	af00      	add	r7, sp, #0
 8004470:	60f8      	str	r0, [r7, #12]
 8004472:	60b9      	str	r1, [r7, #8]
 8004474:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	3330      	adds	r3, #48	; 0x30
 800447a:	461a      	mov	r2, r3
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	0a1b      	lsrs	r3, r3, #8
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	f003 030c 	and.w	r3, r3, #12
 8004486:	4413      	add	r3, r2
 8004488:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	f003 031f 	and.w	r3, r3, #31
 8004494:	211f      	movs	r1, #31
 8004496:	fa01 f303 	lsl.w	r3, r1, r3
 800449a:	43db      	mvns	r3, r3
 800449c:	401a      	ands	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	0e9b      	lsrs	r3, r3, #26
 80044a2:	f003 011f 	and.w	r1, r3, #31
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	f003 031f 	and.w	r3, r3, #31
 80044ac:	fa01 f303 	lsl.w	r3, r1, r3
 80044b0:	431a      	orrs	r2, r3
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80044b6:	bf00      	nop
 80044b8:	371c      	adds	r7, #28
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b083      	sub	sp, #12
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ce:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80044d6:	2301      	movs	r3, #1
 80044d8:	e000      	b.n	80044dc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b087      	sub	sp, #28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	3314      	adds	r3, #20
 80044f8:	461a      	mov	r2, r3
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	0e5b      	lsrs	r3, r3, #25
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	f003 0304 	and.w	r3, r3, #4
 8004504:	4413      	add	r3, r2
 8004506:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	0d1b      	lsrs	r3, r3, #20
 8004510:	f003 031f 	and.w	r3, r3, #31
 8004514:	2107      	movs	r1, #7
 8004516:	fa01 f303 	lsl.w	r3, r1, r3
 800451a:	43db      	mvns	r3, r3
 800451c:	401a      	ands	r2, r3
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	0d1b      	lsrs	r3, r3, #20
 8004522:	f003 031f 	and.w	r3, r3, #31
 8004526:	6879      	ldr	r1, [r7, #4]
 8004528:	fa01 f303 	lsl.w	r3, r1, r3
 800452c:	431a      	orrs	r2, r3
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004532:	bf00      	nop
 8004534:	371c      	adds	r7, #28
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
	...

08004540 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004558:	43db      	mvns	r3, r3
 800455a:	401a      	ands	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f003 0318 	and.w	r3, r3, #24
 8004562:	4908      	ldr	r1, [pc, #32]	; (8004584 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004564:	40d9      	lsrs	r1, r3
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	400b      	ands	r3, r1
 800456a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800456e:	431a      	orrs	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8004576:	bf00      	nop
 8004578:	3714      	adds	r7, #20
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	000fffff 	.word	0x000fffff

08004588 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f003 031f 	and.w	r3, r3, #31
}
 8004598:	4618      	mov	r0, r3
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	4b04      	ldr	r3, [pc, #16]	; (80045e0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80045ce:	4013      	ands	r3, r2
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6093      	str	r3, [r2, #8]
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	5fffffc0 	.word	0x5fffffc0

080045e4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045f8:	d101      	bne.n	80045fe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80045fa:	2301      	movs	r3, #1
 80045fc:	e000      	b.n	8004600 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	4b05      	ldr	r3, [pc, #20]	; (8004630 <LL_ADC_EnableInternalRegulator+0x24>)
 800461a:	4013      	ands	r3, r2
 800461c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	6fffffc0 	.word	0x6fffffc0

08004634 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004644:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004648:	d101      	bne.n	800464e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800464a:	2301      	movs	r3, #1
 800464c:	e000      	b.n	8004650 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689a      	ldr	r2, [r3, #8]
 8004668:	4b05      	ldr	r3, [pc, #20]	; (8004680 <LL_ADC_Enable+0x24>)
 800466a:	4013      	ands	r3, r2
 800466c:	f043 0201 	orr.w	r2, r3, #1
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	7fffffc0 	.word	0x7fffffc0

08004684 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <LL_ADC_Disable+0x24>)
 8004692:	4013      	ands	r3, r2
 8004694:	f043 0202 	orr.w	r2, r3, #2
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr
 80046a8:	7fffffc0 	.word	0x7fffffc0

080046ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d101      	bne.n	80046c4 <LL_ADC_IsEnabled+0x18>
 80046c0:	2301      	movs	r3, #1
 80046c2:	e000      	b.n	80046c6 <LL_ADC_IsEnabled+0x1a>
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b083      	sub	sp, #12
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d101      	bne.n	80046ea <LL_ADC_IsDisableOngoing+0x18>
 80046e6:	2301      	movs	r3, #1
 80046e8:	e000      	b.n	80046ec <LL_ADC_IsDisableOngoing+0x1a>
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	4b05      	ldr	r3, [pc, #20]	; (800471c <LL_ADC_REG_StartConversion+0x24>)
 8004706:	4013      	ands	r3, r2
 8004708:	f043 0204 	orr.w	r2, r3, #4
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	7fffffc0 	.word	0x7fffffc0

08004720 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f003 0304 	and.w	r3, r3, #4
 8004730:	2b04      	cmp	r3, #4
 8004732:	d101      	bne.n	8004738 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004734:	2301      	movs	r3, #1
 8004736:	e000      	b.n	800473a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004746:	b480      	push	{r7}
 8004748:	b083      	sub	sp, #12
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f003 0308 	and.w	r3, r3, #8
 8004756:	2b08      	cmp	r3, #8
 8004758:	d101      	bne.n	800475e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800475a:	2301      	movs	r3, #1
 800475c:	e000      	b.n	8004760 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800476c:	b590      	push	{r4, r7, lr}
 800476e:	b089      	sub	sp, #36	; 0x24
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004774:	2300      	movs	r3, #0
 8004776:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004778:	2300      	movs	r3, #0
 800477a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e18f      	b.n	8004aa6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004790:	2b00      	cmp	r3, #0
 8004792:	d109      	bne.n	80047a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7fe fe89 	bl	80034ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7ff ff19 	bl	80045e4 <LL_ADC_IsDeepPowerDownEnabled>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d004      	beq.n	80047c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4618      	mov	r0, r3
 80047be:	f7ff feff 	bl	80045c0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7ff ff34 	bl	8004634 <LL_ADC_IsInternalRegulatorEnabled>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d114      	bne.n	80047fc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7ff ff18 	bl	800460c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80047dc:	4b87      	ldr	r3, [pc, #540]	; (80049fc <HAL_ADC_Init+0x290>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	099b      	lsrs	r3, r3, #6
 80047e2:	4a87      	ldr	r2, [pc, #540]	; (8004a00 <HAL_ADC_Init+0x294>)
 80047e4:	fba2 2303 	umull	r2, r3, r2, r3
 80047e8:	099b      	lsrs	r3, r3, #6
 80047ea:	3301      	adds	r3, #1
 80047ec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80047ee:	e002      	b.n	80047f6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	3b01      	subs	r3, #1
 80047f4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1f9      	bne.n	80047f0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff ff17 	bl	8004634 <LL_ADC_IsInternalRegulatorEnabled>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d10d      	bne.n	8004828 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004810:	f043 0210 	orr.w	r2, r3, #16
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800481c:	f043 0201 	orr.w	r2, r3, #1
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4618      	mov	r0, r3
 800482e:	f7ff ff77 	bl	8004720 <LL_ADC_REG_IsConversionOngoing>
 8004832:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004838:	f003 0310 	and.w	r3, r3, #16
 800483c:	2b00      	cmp	r3, #0
 800483e:	f040 8129 	bne.w	8004a94 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2b00      	cmp	r3, #0
 8004846:	f040 8125 	bne.w	8004a94 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800484e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004852:	f043 0202 	orr.w	r2, r3, #2
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4618      	mov	r0, r3
 8004860:	f7ff ff24 	bl	80046ac <LL_ADC_IsEnabled>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d136      	bne.n	80048d8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a65      	ldr	r2, [pc, #404]	; (8004a04 <HAL_ADC_Init+0x298>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d004      	beq.n	800487e <HAL_ADC_Init+0x112>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a63      	ldr	r2, [pc, #396]	; (8004a08 <HAL_ADC_Init+0x29c>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d10e      	bne.n	800489c <HAL_ADC_Init+0x130>
 800487e:	4861      	ldr	r0, [pc, #388]	; (8004a04 <HAL_ADC_Init+0x298>)
 8004880:	f7ff ff14 	bl	80046ac <LL_ADC_IsEnabled>
 8004884:	4604      	mov	r4, r0
 8004886:	4860      	ldr	r0, [pc, #384]	; (8004a08 <HAL_ADC_Init+0x29c>)
 8004888:	f7ff ff10 	bl	80046ac <LL_ADC_IsEnabled>
 800488c:	4603      	mov	r3, r0
 800488e:	4323      	orrs	r3, r4
 8004890:	2b00      	cmp	r3, #0
 8004892:	bf0c      	ite	eq
 8004894:	2301      	moveq	r3, #1
 8004896:	2300      	movne	r3, #0
 8004898:	b2db      	uxtb	r3, r3
 800489a:	e008      	b.n	80048ae <HAL_ADC_Init+0x142>
 800489c:	485b      	ldr	r0, [pc, #364]	; (8004a0c <HAL_ADC_Init+0x2a0>)
 800489e:	f7ff ff05 	bl	80046ac <LL_ADC_IsEnabled>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	bf0c      	ite	eq
 80048a8:	2301      	moveq	r3, #1
 80048aa:	2300      	movne	r3, #0
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d012      	beq.n	80048d8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a53      	ldr	r2, [pc, #332]	; (8004a04 <HAL_ADC_Init+0x298>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d004      	beq.n	80048c6 <HAL_ADC_Init+0x15a>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a51      	ldr	r2, [pc, #324]	; (8004a08 <HAL_ADC_Init+0x29c>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d101      	bne.n	80048ca <HAL_ADC_Init+0x15e>
 80048c6:	4a52      	ldr	r2, [pc, #328]	; (8004a10 <HAL_ADC_Init+0x2a4>)
 80048c8:	e000      	b.n	80048cc <HAL_ADC_Init+0x160>
 80048ca:	4a52      	ldr	r2, [pc, #328]	; (8004a14 <HAL_ADC_Init+0x2a8>)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	4619      	mov	r1, r3
 80048d2:	4610      	mov	r0, r2
 80048d4:	f7ff fd2e 	bl	8004334 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80048d8:	f7ff fcf6 	bl	80042c8 <HAL_GetREVID>
 80048dc:	4603      	mov	r3, r0
 80048de:	f241 0203 	movw	r2, #4099	; 0x1003
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d914      	bls.n	8004910 <HAL_ADC_Init+0x1a4>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	2b10      	cmp	r3, #16
 80048ec:	d110      	bne.n	8004910 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	7d5b      	ldrb	r3, [r3, #21]
 80048f2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80048f8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80048fe:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	7f1b      	ldrb	r3, [r3, #28]
 8004904:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004906:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004908:	f043 030c 	orr.w	r3, r3, #12
 800490c:	61bb      	str	r3, [r7, #24]
 800490e:	e00d      	b.n	800492c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	7d5b      	ldrb	r3, [r3, #21]
 8004914:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800491a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004920:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	7f1b      	ldrb	r3, [r3, #28]
 8004926:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004928:	4313      	orrs	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	7f1b      	ldrb	r3, [r3, #28]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d106      	bne.n	8004942 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	3b01      	subs	r3, #1
 800493a:	045b      	lsls	r3, r3, #17
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	4313      	orrs	r3, r2
 8004940:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004946:	2b00      	cmp	r3, #0
 8004948:	d009      	beq.n	800495e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004956:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	4313      	orrs	r3, r2
 800495c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68da      	ldr	r2, [r3, #12]
 8004964:	4b2c      	ldr	r3, [pc, #176]	; (8004a18 <HAL_ADC_Init+0x2ac>)
 8004966:	4013      	ands	r3, r2
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	6812      	ldr	r2, [r2, #0]
 800496c:	69b9      	ldr	r1, [r7, #24]
 800496e:	430b      	orrs	r3, r1
 8004970:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4618      	mov	r0, r3
 8004978:	f7ff fed2 	bl	8004720 <LL_ADC_REG_IsConversionOngoing>
 800497c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4618      	mov	r0, r3
 8004984:	f7ff fedf 	bl	8004746 <LL_ADC_INJ_IsConversionOngoing>
 8004988:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d15f      	bne.n	8004a50 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d15c      	bne.n	8004a50 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	7d1b      	ldrb	r3, [r3, #20]
 800499a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80049a0:	4313      	orrs	r3, r2
 80049a2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68da      	ldr	r2, [r3, #12]
 80049aa:	4b1c      	ldr	r3, [pc, #112]	; (8004a1c <HAL_ADC_Init+0x2b0>)
 80049ac:	4013      	ands	r3, r2
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	6812      	ldr	r2, [r2, #0]
 80049b2:	69b9      	ldr	r1, [r7, #24]
 80049b4:	430b      	orrs	r3, r1
 80049b6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d130      	bne.n	8004a24 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	691a      	ldr	r2, [r3, #16]
 80049ce:	4b14      	ldr	r3, [pc, #80]	; (8004a20 <HAL_ADC_Init+0x2b4>)
 80049d0:	4013      	ands	r3, r2
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80049d6:	3a01      	subs	r2, #1
 80049d8:	0411      	lsls	r1, r2, #16
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80049de:	4311      	orrs	r1, r2
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80049e4:	4311      	orrs	r1, r2
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80049ea:	430a      	orrs	r2, r1
 80049ec:	431a      	orrs	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f042 0201 	orr.w	r2, r2, #1
 80049f6:	611a      	str	r2, [r3, #16]
 80049f8:	e01c      	b.n	8004a34 <HAL_ADC_Init+0x2c8>
 80049fa:	bf00      	nop
 80049fc:	2000000c 	.word	0x2000000c
 8004a00:	053e2d63 	.word	0x053e2d63
 8004a04:	40022000 	.word	0x40022000
 8004a08:	40022100 	.word	0x40022100
 8004a0c:	58026000 	.word	0x58026000
 8004a10:	40022300 	.word	0x40022300
 8004a14:	58026300 	.word	0x58026300
 8004a18:	fff0c003 	.word	0xfff0c003
 8004a1c:	ffffbffc 	.word	0xffffbffc
 8004a20:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691a      	ldr	r2, [r3, #16]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 0201 	bic.w	r2, r2, #1
 8004a32:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f001 f804 	bl	8005a58 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d10c      	bne.n	8004a72 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5e:	f023 010f 	bic.w	r1, r3, #15
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	1e5a      	subs	r2, r3, #1
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	631a      	str	r2, [r3, #48]	; 0x30
 8004a70:	e007      	b.n	8004a82 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f022 020f 	bic.w	r2, r2, #15
 8004a80:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a86:	f023 0303 	bic.w	r3, r3, #3
 8004a8a:	f043 0201 	orr.w	r2, r3, #1
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	655a      	str	r2, [r3, #84]	; 0x54
 8004a92:	e007      	b.n	8004aa4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a98:	f043 0210 	orr.w	r2, r3, #16
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004aa4:	7ffb      	ldrb	r3, [r7, #31]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3724      	adds	r7, #36	; 0x24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd90      	pop	{r4, r7, pc}
 8004aae:	bf00      	nop

08004ab0 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a92      	ldr	r2, [pc, #584]	; (8004d08 <HAL_ADC_Start_IT+0x258>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d004      	beq.n	8004acc <HAL_ADC_Start_IT+0x1c>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a91      	ldr	r2, [pc, #580]	; (8004d0c <HAL_ADC_Start_IT+0x25c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d101      	bne.n	8004ad0 <HAL_ADC_Start_IT+0x20>
 8004acc:	4b90      	ldr	r3, [pc, #576]	; (8004d10 <HAL_ADC_Start_IT+0x260>)
 8004ace:	e000      	b.n	8004ad2 <HAL_ADC_Start_IT+0x22>
 8004ad0:	4b90      	ldr	r3, [pc, #576]	; (8004d14 <HAL_ADC_Start_IT+0x264>)
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7ff fd58 	bl	8004588 <LL_ADC_GetMultimode>
 8004ad8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7ff fe1e 	bl	8004720 <LL_ADC_REG_IsConversionOngoing>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f040 8118 	bne.w	8004d1c <HAL_ADC_Start_IT+0x26c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d101      	bne.n	8004afa <HAL_ADC_Start_IT+0x4a>
 8004af6:	2302      	movs	r3, #2
 8004af8:	e113      	b.n	8004d22 <HAL_ADC_Start_IT+0x272>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 febe 	bl	8005884 <ADC_Enable>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004b0c:	7dfb      	ldrb	r3, [r7, #23]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f040 80f5 	bne.w	8004cfe <HAL_ADC_Start_IT+0x24e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b18:	4b7f      	ldr	r3, [pc, #508]	; (8004d18 <HAL_ADC_Start_IT+0x268>)
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a78      	ldr	r2, [pc, #480]	; (8004d0c <HAL_ADC_Start_IT+0x25c>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d002      	beq.n	8004b34 <HAL_ADC_Start_IT+0x84>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	e000      	b.n	8004b36 <HAL_ADC_Start_IT+0x86>
 8004b34:	4b74      	ldr	r3, [pc, #464]	; (8004d08 <HAL_ADC_Start_IT+0x258>)
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	6812      	ldr	r2, [r2, #0]
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d002      	beq.n	8004b44 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d105      	bne.n	8004b50 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b48:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d006      	beq.n	8004b6a <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b60:	f023 0206 	bic.w	r2, r3, #6
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	659a      	str	r2, [r3, #88]	; 0x58
 8004b68:	e002      	b.n	8004b70 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	221c      	movs	r2, #28
 8004b76:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 021c 	bic.w	r2, r2, #28
 8004b8e:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	2b08      	cmp	r3, #8
 8004b96:	d108      	bne.n	8004baa <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f042 0208 	orr.w	r2, r2, #8
 8004ba6:	605a      	str	r2, [r3, #4]
          break;
 8004ba8:	e008      	b.n	8004bbc <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f042 0204 	orr.w	r2, r2, #4
 8004bb8:	605a      	str	r2, [r3, #4]
          break;
 8004bba:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d107      	bne.n	8004bd4 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f042 0210 	orr.w	r2, r2, #16
 8004bd2:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a4c      	ldr	r2, [pc, #304]	; (8004d0c <HAL_ADC_Start_IT+0x25c>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d002      	beq.n	8004be4 <HAL_ADC_Start_IT+0x134>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	e000      	b.n	8004be6 <HAL_ADC_Start_IT+0x136>
 8004be4:	4b48      	ldr	r3, [pc, #288]	; (8004d08 <HAL_ADC_Start_IT+0x258>)
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	6812      	ldr	r2, [r2, #0]
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d008      	beq.n	8004c00 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d005      	beq.n	8004c00 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	2b05      	cmp	r3, #5
 8004bf8:	d002      	beq.n	8004c00 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	2b09      	cmp	r3, #9
 8004bfe:	d13a      	bne.n	8004c76 <HAL_ADC_Start_IT+0x1c6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d02d      	beq.n	8004c6a <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c12:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004c16:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	2b08      	cmp	r3, #8
 8004c24:	d110      	bne.n	8004c48 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 0220 	bic.w	r2, r2, #32
 8004c34:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	685a      	ldr	r2, [r3, #4]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c44:	605a      	str	r2, [r3, #4]
              break;
 8004c46:	e010      	b.n	8004c6a <HAL_ADC_Start_IT+0x1ba>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685a      	ldr	r2, [r3, #4]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c56:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	685a      	ldr	r2, [r3, #4]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f042 0220 	orr.w	r2, r2, #32
 8004c66:	605a      	str	r2, [r3, #4]
              break;
 8004c68:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7ff fd42 	bl	80046f8 <LL_ADC_REG_StartConversion>
 8004c74:	e054      	b.n	8004d20 <HAL_ADC_Start_IT+0x270>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a21      	ldr	r2, [pc, #132]	; (8004d0c <HAL_ADC_Start_IT+0x25c>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d002      	beq.n	8004c92 <HAL_ADC_Start_IT+0x1e2>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	e000      	b.n	8004c94 <HAL_ADC_Start_IT+0x1e4>
 8004c92:	4b1d      	ldr	r3, [pc, #116]	; (8004d08 <HAL_ADC_Start_IT+0x258>)
 8004c94:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d03e      	beq.n	8004d20 <HAL_ADC_Start_IT+0x270>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004caa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	2b08      	cmp	r3, #8
 8004cb8:	d110      	bne.n	8004cdc <HAL_ADC_Start_IT+0x22c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 0220 	bic.w	r2, r2, #32
 8004cc8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cd8:	605a      	str	r2, [r3, #4]
              break;
 8004cda:	e021      	b.n	8004d20 <HAL_ADC_Start_IT+0x270>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685a      	ldr	r2, [r3, #4]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cea:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0220 	orr.w	r2, r2, #32
 8004cfa:	605a      	str	r2, [r3, #4]
              break;
 8004cfc:	e010      	b.n	8004d20 <HAL_ADC_Start_IT+0x270>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004d06:	e00b      	b.n	8004d20 <HAL_ADC_Start_IT+0x270>
 8004d08:	40022000 	.word	0x40022000
 8004d0c:	40022100 	.word	0x40022100
 8004d10:	40022300 	.word	0x40022300
 8004d14:	58026300 	.word	0x58026300
 8004d18:	fffff0fe 	.word	0xfffff0fe
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3718      	adds	r7, #24
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop

08004d2c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	370c      	adds	r7, #12
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
	...

08004d48 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b08a      	sub	sp, #40	; 0x28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004d50:	2300      	movs	r3, #0
 8004d52:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a87      	ldr	r2, [pc, #540]	; (8004f88 <HAL_ADC_IRQHandler+0x240>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d004      	beq.n	8004d78 <HAL_ADC_IRQHandler+0x30>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a86      	ldr	r2, [pc, #536]	; (8004f8c <HAL_ADC_IRQHandler+0x244>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d101      	bne.n	8004d7c <HAL_ADC_IRQHandler+0x34>
 8004d78:	4b85      	ldr	r3, [pc, #532]	; (8004f90 <HAL_ADC_IRQHandler+0x248>)
 8004d7a:	e000      	b.n	8004d7e <HAL_ADC_IRQHandler+0x36>
 8004d7c:	4b85      	ldr	r3, [pc, #532]	; (8004f94 <HAL_ADC_IRQHandler+0x24c>)
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7ff fc02 	bl	8004588 <LL_ADC_GetMultimode>
 8004d84:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	f003 0302 	and.w	r3, r3, #2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d017      	beq.n	8004dc0 <HAL_ADC_IRQHandler+0x78>
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d012      	beq.n	8004dc0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d9e:	f003 0310 	and.w	r3, r3, #16
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d105      	bne.n	8004db2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004daa:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f001 f81a 	bl	8005dec <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2202      	movs	r2, #2
 8004dbe:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	f003 0304 	and.w	r3, r3, #4
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d004      	beq.n	8004dd4 <HAL_ADC_IRQHandler+0x8c>
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	f003 0304 	and.w	r3, r3, #4
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10a      	bne.n	8004dea <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f000 8083 	beq.w	8004ee6 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	f003 0308 	and.w	r3, r3, #8
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d07d      	beq.n	8004ee6 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dee:	f003 0310 	and.w	r3, r3, #16
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d105      	bne.n	8004e02 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7ff fb1c 	bl	8004444 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d062      	beq.n	8004ed8 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a5d      	ldr	r2, [pc, #372]	; (8004f8c <HAL_ADC_IRQHandler+0x244>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d002      	beq.n	8004e22 <HAL_ADC_IRQHandler+0xda>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	e000      	b.n	8004e24 <HAL_ADC_IRQHandler+0xdc>
 8004e22:	4b59      	ldr	r3, [pc, #356]	; (8004f88 <HAL_ADC_IRQHandler+0x240>)
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6812      	ldr	r2, [r2, #0]
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d008      	beq.n	8004e3e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d005      	beq.n	8004e3e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	2b05      	cmp	r3, #5
 8004e36:	d002      	beq.n	8004e3e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	2b09      	cmp	r3, #9
 8004e3c:	d104      	bne.n	8004e48 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	623b      	str	r3, [r7, #32]
 8004e46:	e00c      	b.n	8004e62 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a4f      	ldr	r2, [pc, #316]	; (8004f8c <HAL_ADC_IRQHandler+0x244>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d002      	beq.n	8004e58 <HAL_ADC_IRQHandler+0x110>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	e000      	b.n	8004e5a <HAL_ADC_IRQHandler+0x112>
 8004e58:	4b4b      	ldr	r3, [pc, #300]	; (8004f88 <HAL_ADC_IRQHandler+0x240>)
 8004e5a:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d135      	bne.n	8004ed8 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0308 	and.w	r3, r3, #8
 8004e76:	2b08      	cmp	r3, #8
 8004e78:	d12e      	bne.n	8004ed8 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7ff fc4e 	bl	8004720 <LL_ADC_REG_IsConversionOngoing>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d11a      	bne.n	8004ec0 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f022 020c 	bic.w	r2, r2, #12
 8004e98:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d112      	bne.n	8004ed8 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb6:	f043 0201 	orr.w	r2, r3, #1
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	655a      	str	r2, [r3, #84]	; 0x54
 8004ebe:	e00b      	b.n	8004ed8 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec4:	f043 0210 	orr.w	r2, r3, #16
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed0:	f043 0201 	orr.w	r2, r3, #1
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7fe fa1f 	bl	800331c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	220c      	movs	r2, #12
 8004ee4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	f003 0320 	and.w	r3, r3, #32
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d004      	beq.n	8004efa <HAL_ADC_IRQHandler+0x1b2>
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	f003 0320 	and.w	r3, r3, #32
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10b      	bne.n	8004f12 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 80a0 	beq.w	8005046 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 809a 	beq.w	8005046 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f16:	f003 0310 	and.w	r3, r3, #16
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d105      	bne.n	8004f2a <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f22:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7ff fac7 	bl	80044c2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004f34:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7ff fa82 	bl	8004444 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004f40:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a11      	ldr	r2, [pc, #68]	; (8004f8c <HAL_ADC_IRQHandler+0x244>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d002      	beq.n	8004f52 <HAL_ADC_IRQHandler+0x20a>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	e000      	b.n	8004f54 <HAL_ADC_IRQHandler+0x20c>
 8004f52:	4b0d      	ldr	r3, [pc, #52]	; (8004f88 <HAL_ADC_IRQHandler+0x240>)
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6812      	ldr	r2, [r2, #0]
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d008      	beq.n	8004f6e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d005      	beq.n	8004f6e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	2b06      	cmp	r3, #6
 8004f66:	d002      	beq.n	8004f6e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	2b07      	cmp	r3, #7
 8004f6c:	d104      	bne.n	8004f78 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	623b      	str	r3, [r7, #32]
 8004f76:	e014      	b.n	8004fa2 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a03      	ldr	r2, [pc, #12]	; (8004f8c <HAL_ADC_IRQHandler+0x244>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d00a      	beq.n	8004f98 <HAL_ADC_IRQHandler+0x250>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	e008      	b.n	8004f9a <HAL_ADC_IRQHandler+0x252>
 8004f88:	40022000 	.word	0x40022000
 8004f8c:	40022100 	.word	0x40022100
 8004f90:	40022300 	.word	0x40022300
 8004f94:	58026300 	.word	0x58026300
 8004f98:	4b84      	ldr	r3, [pc, #528]	; (80051ac <HAL_ADC_IRQHandler+0x464>)
 8004f9a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d047      	beq.n	8005038 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d007      	beq.n	8004fc2 <HAL_ADC_IRQHandler+0x27a>
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d03f      	beq.n	8005038 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d13a      	bne.n	8005038 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fcc:	2b40      	cmp	r3, #64	; 0x40
 8004fce:	d133      	bne.n	8005038 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004fd0:	6a3b      	ldr	r3, [r7, #32]
 8004fd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d12e      	bne.n	8005038 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7ff fbb1 	bl	8004746 <LL_ADC_INJ_IsConversionOngoing>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d11a      	bne.n	8005020 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ff8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ffe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800500a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800500e:	2b00      	cmp	r3, #0
 8005010:	d112      	bne.n	8005038 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005016:	f043 0201 	orr.w	r2, r3, #1
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	655a      	str	r2, [r3, #84]	; 0x54
 800501e:	e00b      	b.n	8005038 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005024:	f043 0210 	orr.w	r2, r3, #16
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005030:	f043 0201 	orr.w	r2, r3, #1
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 feaf 	bl	8005d9c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2260      	movs	r2, #96	; 0x60
 8005044:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800504c:	2b00      	cmp	r3, #0
 800504e:	d011      	beq.n	8005074 <HAL_ADC_IRQHandler+0x32c>
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00c      	beq.n	8005074 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800505e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f8a8 	bl	80051bc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2280      	movs	r2, #128	; 0x80
 8005072:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800507a:	2b00      	cmp	r3, #0
 800507c:	d012      	beq.n	80050a4 <HAL_ADC_IRQHandler+0x35c>
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00d      	beq.n	80050a4 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 fe95 	bl	8005dc4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050a2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d012      	beq.n	80050d4 <HAL_ADC_IRQHandler+0x38c>
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00d      	beq.n	80050d4 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050bc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 fe87 	bl	8005dd8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050d2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	f003 0310 	and.w	r3, r3, #16
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d043      	beq.n	8005166 <HAL_ADC_IRQHandler+0x41e>
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	f003 0310 	and.w	r3, r3, #16
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d03e      	beq.n	8005166 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d102      	bne.n	80050f6 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80050f0:	2301      	movs	r3, #1
 80050f2:	627b      	str	r3, [r7, #36]	; 0x24
 80050f4:	e021      	b.n	800513a <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d015      	beq.n	8005128 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a2a      	ldr	r2, [pc, #168]	; (80051ac <HAL_ADC_IRQHandler+0x464>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d004      	beq.n	8005110 <HAL_ADC_IRQHandler+0x3c8>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a29      	ldr	r2, [pc, #164]	; (80051b0 <HAL_ADC_IRQHandler+0x468>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d101      	bne.n	8005114 <HAL_ADC_IRQHandler+0x3cc>
 8005110:	4b28      	ldr	r3, [pc, #160]	; (80051b4 <HAL_ADC_IRQHandler+0x46c>)
 8005112:	e000      	b.n	8005116 <HAL_ADC_IRQHandler+0x3ce>
 8005114:	4b28      	ldr	r3, [pc, #160]	; (80051b8 <HAL_ADC_IRQHandler+0x470>)
 8005116:	4618      	mov	r0, r3
 8005118:	f7ff fa44 	bl	80045a4 <LL_ADC_GetMultiDMATransfer>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00b      	beq.n	800513a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8005122:	2301      	movs	r3, #1
 8005124:	627b      	str	r3, [r7, #36]	; 0x24
 8005126:	e008      	b.n	800513a <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	f003 0303 	and.w	r3, r3, #3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8005136:	2301      	movs	r3, #1
 8005138:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	2b01      	cmp	r3, #1
 800513e:	d10e      	bne.n	800515e <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005144:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005150:	f043 0202 	orr.w	r2, r3, #2
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 f839 	bl	80051d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2210      	movs	r2, #16
 8005164:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800516c:	2b00      	cmp	r3, #0
 800516e:	d018      	beq.n	80051a2 <HAL_ADC_IRQHandler+0x45a>
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005176:	2b00      	cmp	r3, #0
 8005178:	d013      	beq.n	80051a2 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800517e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800518a:	f043 0208 	orr.w	r2, r3, #8
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800519a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 fe07 	bl	8005db0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80051a2:	bf00      	nop
 80051a4:	3728      	adds	r7, #40	; 0x28
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	40022000 	.word	0x40022000
 80051b0:	40022100 	.word	0x40022100
 80051b4:	40022300 	.word	0x40022300
 80051b8:	58026300 	.word	0x58026300

080051bc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80051e4:	b590      	push	{r4, r7, lr}
 80051e6:	b0a1      	sub	sp, #132	; 0x84
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051ee:	2300      	movs	r3, #0
 80051f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80051f4:	2300      	movs	r3, #0
 80051f6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	4a9d      	ldr	r2, [pc, #628]	; (8005474 <HAL_ADC_ConfigChannel+0x290>)
 80051fe:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005206:	2b01      	cmp	r3, #1
 8005208:	d101      	bne.n	800520e <HAL_ADC_ConfigChannel+0x2a>
 800520a:	2302      	movs	r3, #2
 800520c:	e321      	b.n	8005852 <HAL_ADC_ConfigChannel+0x66e>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4618      	mov	r0, r3
 800521c:	f7ff fa80 	bl	8004720 <LL_ADC_REG_IsConversionOngoing>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	f040 8306 	bne.w	8005834 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005230:	2b00      	cmp	r3, #0
 8005232:	d108      	bne.n	8005246 <HAL_ADC_ConfigChannel+0x62>
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	0e9b      	lsrs	r3, r3, #26
 800523a:	f003 031f 	and.w	r3, r3, #31
 800523e:	2201      	movs	r2, #1
 8005240:	fa02 f303 	lsl.w	r3, r2, r3
 8005244:	e016      	b.n	8005274 <HAL_ADC_ConfigChannel+0x90>
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800524c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800524e:	fa93 f3a3 	rbit	r3, r3
 8005252:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005254:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005256:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005258:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800525e:	2320      	movs	r3, #32
 8005260:	e003      	b.n	800526a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8005262:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005264:	fab3 f383 	clz	r3, r3
 8005268:	b2db      	uxtb	r3, r3
 800526a:	f003 031f 	and.w	r3, r3, #31
 800526e:	2201      	movs	r2, #1
 8005270:	fa02 f303 	lsl.w	r3, r2, r3
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	6812      	ldr	r2, [r2, #0]
 8005278:	69d1      	ldr	r1, [r2, #28]
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	6812      	ldr	r2, [r2, #0]
 800527e:	430b      	orrs	r3, r1
 8005280:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6818      	ldr	r0, [r3, #0]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	6859      	ldr	r1, [r3, #4]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	461a      	mov	r2, r3
 8005290:	f7ff f8eb 	bl	800446a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4618      	mov	r0, r3
 800529a:	f7ff fa41 	bl	8004720 <LL_ADC_REG_IsConversionOngoing>
 800529e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7ff fa4e 	bl	8004746 <LL_ADC_INJ_IsConversionOngoing>
 80052aa:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80052ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f040 80b3 	bne.w	800541a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80052b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f040 80af 	bne.w	800541a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6818      	ldr	r0, [r3, #0]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	6819      	ldr	r1, [r3, #0]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	461a      	mov	r2, r3
 80052ca:	f7ff f90d 	bl	80044e8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80052ce:	4b6a      	ldr	r3, [pc, #424]	; (8005478 <HAL_ADC_ConfigChannel+0x294>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80052d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052da:	d10b      	bne.n	80052f4 <HAL_ADC_ConfigChannel+0x110>
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	695a      	ldr	r2, [r3, #20]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	089b      	lsrs	r3, r3, #2
 80052e8:	f003 0307 	and.w	r3, r3, #7
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	fa02 f303 	lsl.w	r3, r2, r3
 80052f2:	e01d      	b.n	8005330 <HAL_ADC_ConfigChannel+0x14c>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f003 0310 	and.w	r3, r3, #16
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10b      	bne.n	800531a <HAL_ADC_ConfigChannel+0x136>
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	695a      	ldr	r2, [r3, #20]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	089b      	lsrs	r3, r3, #2
 800530e:	f003 0307 	and.w	r3, r3, #7
 8005312:	005b      	lsls	r3, r3, #1
 8005314:	fa02 f303 	lsl.w	r3, r2, r3
 8005318:	e00a      	b.n	8005330 <HAL_ADC_ConfigChannel+0x14c>
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	695a      	ldr	r2, [r3, #20]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	089b      	lsrs	r3, r3, #2
 8005326:	f003 0304 	and.w	r3, r3, #4
 800532a:	005b      	lsls	r3, r3, #1
 800532c:	fa02 f303 	lsl.w	r3, r2, r3
 8005330:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	2b04      	cmp	r3, #4
 8005338:	d027      	beq.n	800538a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6818      	ldr	r0, [r3, #0]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	6919      	ldr	r1, [r3, #16]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005348:	f7ff f828 	bl	800439c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6818      	ldr	r0, [r3, #0]
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	6919      	ldr	r1, [r3, #16]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	7e5b      	ldrb	r3, [r3, #25]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d102      	bne.n	8005362 <HAL_ADC_ConfigChannel+0x17e>
 800535c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005360:	e000      	b.n	8005364 <HAL_ADC_ConfigChannel+0x180>
 8005362:	2300      	movs	r3, #0
 8005364:	461a      	mov	r2, r3
 8005366:	f7ff f852 	bl	800440e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6818      	ldr	r0, [r3, #0]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	6919      	ldr	r1, [r3, #16]
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	7e1b      	ldrb	r3, [r3, #24]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d102      	bne.n	8005380 <HAL_ADC_ConfigChannel+0x19c>
 800537a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800537e:	e000      	b.n	8005382 <HAL_ADC_ConfigChannel+0x19e>
 8005380:	2300      	movs	r3, #0
 8005382:	461a      	mov	r2, r3
 8005384:	f7ff f82a 	bl	80043dc <LL_ADC_SetDataRightShift>
 8005388:	e047      	b.n	800541a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005390:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	069b      	lsls	r3, r3, #26
 800539a:	429a      	cmp	r2, r3
 800539c:	d107      	bne.n	80053ae <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80053ac:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	069b      	lsls	r3, r3, #26
 80053be:	429a      	cmp	r2, r3
 80053c0:	d107      	bne.n	80053d2 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80053d0:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	069b      	lsls	r3, r3, #26
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d107      	bne.n	80053f6 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80053f4:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	069b      	lsls	r3, r3, #26
 8005406:	429a      	cmp	r2, r3
 8005408:	d107      	bne.n	800541a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005418:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4618      	mov	r0, r3
 8005420:	f7ff f944 	bl	80046ac <LL_ADC_IsEnabled>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	f040 820d 	bne.w	8005846 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6818      	ldr	r0, [r3, #0]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	6819      	ldr	r1, [r3, #0]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	461a      	mov	r2, r3
 800543a:	f7ff f881 	bl	8004540 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	4a0c      	ldr	r2, [pc, #48]	; (8005474 <HAL_ADC_ConfigChannel+0x290>)
 8005444:	4293      	cmp	r3, r2
 8005446:	f040 8133 	bne.w	80056b0 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005456:	2b00      	cmp	r3, #0
 8005458:	d110      	bne.n	800547c <HAL_ADC_ConfigChannel+0x298>
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	0e9b      	lsrs	r3, r3, #26
 8005460:	3301      	adds	r3, #1
 8005462:	f003 031f 	and.w	r3, r3, #31
 8005466:	2b09      	cmp	r3, #9
 8005468:	bf94      	ite	ls
 800546a:	2301      	movls	r3, #1
 800546c:	2300      	movhi	r3, #0
 800546e:	b2db      	uxtb	r3, r3
 8005470:	e01e      	b.n	80054b0 <HAL_ADC_ConfigChannel+0x2cc>
 8005472:	bf00      	nop
 8005474:	47ff0000 	.word	0x47ff0000
 8005478:	5c001000 	.word	0x5c001000
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005482:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005484:	fa93 f3a3 	rbit	r3, r3
 8005488:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800548a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800548c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800548e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005490:	2b00      	cmp	r3, #0
 8005492:	d101      	bne.n	8005498 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8005494:	2320      	movs	r3, #32
 8005496:	e003      	b.n	80054a0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8005498:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800549a:	fab3 f383 	clz	r3, r3
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	3301      	adds	r3, #1
 80054a2:	f003 031f 	and.w	r3, r3, #31
 80054a6:	2b09      	cmp	r3, #9
 80054a8:	bf94      	ite	ls
 80054aa:	2301      	movls	r3, #1
 80054ac:	2300      	movhi	r3, #0
 80054ae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d079      	beq.n	80055a8 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d107      	bne.n	80054d0 <HAL_ADC_ConfigChannel+0x2ec>
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	0e9b      	lsrs	r3, r3, #26
 80054c6:	3301      	adds	r3, #1
 80054c8:	069b      	lsls	r3, r3, #26
 80054ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80054ce:	e015      	b.n	80054fc <HAL_ADC_ConfigChannel+0x318>
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054d8:	fa93 f3a3 	rbit	r3, r3
 80054dc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80054de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054e0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80054e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80054e8:	2320      	movs	r3, #32
 80054ea:	e003      	b.n	80054f4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80054ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054ee:	fab3 f383 	clz	r3, r3
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	3301      	adds	r3, #1
 80054f6:	069b      	lsls	r3, r3, #26
 80054f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005504:	2b00      	cmp	r3, #0
 8005506:	d109      	bne.n	800551c <HAL_ADC_ConfigChannel+0x338>
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	0e9b      	lsrs	r3, r3, #26
 800550e:	3301      	adds	r3, #1
 8005510:	f003 031f 	and.w	r3, r3, #31
 8005514:	2101      	movs	r1, #1
 8005516:	fa01 f303 	lsl.w	r3, r1, r3
 800551a:	e017      	b.n	800554c <HAL_ADC_ConfigChannel+0x368>
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005524:	fa93 f3a3 	rbit	r3, r3
 8005528:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800552a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800552c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800552e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005530:	2b00      	cmp	r3, #0
 8005532:	d101      	bne.n	8005538 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8005534:	2320      	movs	r3, #32
 8005536:	e003      	b.n	8005540 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8005538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800553a:	fab3 f383 	clz	r3, r3
 800553e:	b2db      	uxtb	r3, r3
 8005540:	3301      	adds	r3, #1
 8005542:	f003 031f 	and.w	r3, r3, #31
 8005546:	2101      	movs	r1, #1
 8005548:	fa01 f303 	lsl.w	r3, r1, r3
 800554c:	ea42 0103 	orr.w	r1, r2, r3
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10a      	bne.n	8005572 <HAL_ADC_ConfigChannel+0x38e>
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	0e9b      	lsrs	r3, r3, #26
 8005562:	3301      	adds	r3, #1
 8005564:	f003 021f 	and.w	r2, r3, #31
 8005568:	4613      	mov	r3, r2
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	4413      	add	r3, r2
 800556e:	051b      	lsls	r3, r3, #20
 8005570:	e018      	b.n	80055a4 <HAL_ADC_ConfigChannel+0x3c0>
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800557a:	fa93 f3a3 	rbit	r3, r3
 800557e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005582:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800558a:	2320      	movs	r3, #32
 800558c:	e003      	b.n	8005596 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800558e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005590:	fab3 f383 	clz	r3, r3
 8005594:	b2db      	uxtb	r3, r3
 8005596:	3301      	adds	r3, #1
 8005598:	f003 021f 	and.w	r2, r3, #31
 800559c:	4613      	mov	r3, r2
 800559e:	005b      	lsls	r3, r3, #1
 80055a0:	4413      	add	r3, r2
 80055a2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80055a4:	430b      	orrs	r3, r1
 80055a6:	e07e      	b.n	80056a6 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d107      	bne.n	80055c4 <HAL_ADC_ConfigChannel+0x3e0>
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	0e9b      	lsrs	r3, r3, #26
 80055ba:	3301      	adds	r3, #1
 80055bc:	069b      	lsls	r3, r3, #26
 80055be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80055c2:	e015      	b.n	80055f0 <HAL_ADC_ConfigChannel+0x40c>
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055cc:	fa93 f3a3 	rbit	r3, r3
 80055d0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80055d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d101      	bne.n	80055e0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80055dc:	2320      	movs	r3, #32
 80055de:	e003      	b.n	80055e8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80055e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e2:	fab3 f383 	clz	r3, r3
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	3301      	adds	r3, #1
 80055ea:	069b      	lsls	r3, r3, #26
 80055ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d109      	bne.n	8005610 <HAL_ADC_ConfigChannel+0x42c>
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	0e9b      	lsrs	r3, r3, #26
 8005602:	3301      	adds	r3, #1
 8005604:	f003 031f 	and.w	r3, r3, #31
 8005608:	2101      	movs	r1, #1
 800560a:	fa01 f303 	lsl.w	r3, r1, r3
 800560e:	e017      	b.n	8005640 <HAL_ADC_ConfigChannel+0x45c>
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	fa93 f3a3 	rbit	r3, r3
 800561c:	61bb      	str	r3, [r7, #24]
  return result;
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8005628:	2320      	movs	r3, #32
 800562a:	e003      	b.n	8005634 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800562c:	6a3b      	ldr	r3, [r7, #32]
 800562e:	fab3 f383 	clz	r3, r3
 8005632:	b2db      	uxtb	r3, r3
 8005634:	3301      	adds	r3, #1
 8005636:	f003 031f 	and.w	r3, r3, #31
 800563a:	2101      	movs	r1, #1
 800563c:	fa01 f303 	lsl.w	r3, r1, r3
 8005640:	ea42 0103 	orr.w	r1, r2, r3
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800564c:	2b00      	cmp	r3, #0
 800564e:	d10d      	bne.n	800566c <HAL_ADC_ConfigChannel+0x488>
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	0e9b      	lsrs	r3, r3, #26
 8005656:	3301      	adds	r3, #1
 8005658:	f003 021f 	and.w	r2, r3, #31
 800565c:	4613      	mov	r3, r2
 800565e:	005b      	lsls	r3, r3, #1
 8005660:	4413      	add	r3, r2
 8005662:	3b1e      	subs	r3, #30
 8005664:	051b      	lsls	r3, r3, #20
 8005666:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800566a:	e01b      	b.n	80056a4 <HAL_ADC_ConfigChannel+0x4c0>
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	fa93 f3a3 	rbit	r3, r3
 8005678:	60fb      	str	r3, [r7, #12]
  return result;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d101      	bne.n	8005688 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8005684:	2320      	movs	r3, #32
 8005686:	e003      	b.n	8005690 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	fab3 f383 	clz	r3, r3
 800568e:	b2db      	uxtb	r3, r3
 8005690:	3301      	adds	r3, #1
 8005692:	f003 021f 	and.w	r2, r3, #31
 8005696:	4613      	mov	r3, r2
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	4413      	add	r3, r2
 800569c:	3b1e      	subs	r3, #30
 800569e:	051b      	lsls	r3, r3, #20
 80056a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80056a4:	430b      	orrs	r3, r1
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	6892      	ldr	r2, [r2, #8]
 80056aa:	4619      	mov	r1, r3
 80056ac:	f7fe ff1c 	bl	80044e8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f280 80c6 	bge.w	8005846 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a67      	ldr	r2, [pc, #412]	; (800585c <HAL_ADC_ConfigChannel+0x678>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d004      	beq.n	80056ce <HAL_ADC_ConfigChannel+0x4ea>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a65      	ldr	r2, [pc, #404]	; (8005860 <HAL_ADC_ConfigChannel+0x67c>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d101      	bne.n	80056d2 <HAL_ADC_ConfigChannel+0x4ee>
 80056ce:	4b65      	ldr	r3, [pc, #404]	; (8005864 <HAL_ADC_ConfigChannel+0x680>)
 80056d0:	e000      	b.n	80056d4 <HAL_ADC_ConfigChannel+0x4f0>
 80056d2:	4b65      	ldr	r3, [pc, #404]	; (8005868 <HAL_ADC_ConfigChannel+0x684>)
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7fe fe53 	bl	8004380 <LL_ADC_GetCommonPathInternalCh>
 80056da:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a5e      	ldr	r2, [pc, #376]	; (800585c <HAL_ADC_ConfigChannel+0x678>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d004      	beq.n	80056f0 <HAL_ADC_ConfigChannel+0x50c>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a5d      	ldr	r2, [pc, #372]	; (8005860 <HAL_ADC_ConfigChannel+0x67c>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d10e      	bne.n	800570e <HAL_ADC_ConfigChannel+0x52a>
 80056f0:	485a      	ldr	r0, [pc, #360]	; (800585c <HAL_ADC_ConfigChannel+0x678>)
 80056f2:	f7fe ffdb 	bl	80046ac <LL_ADC_IsEnabled>
 80056f6:	4604      	mov	r4, r0
 80056f8:	4859      	ldr	r0, [pc, #356]	; (8005860 <HAL_ADC_ConfigChannel+0x67c>)
 80056fa:	f7fe ffd7 	bl	80046ac <LL_ADC_IsEnabled>
 80056fe:	4603      	mov	r3, r0
 8005700:	4323      	orrs	r3, r4
 8005702:	2b00      	cmp	r3, #0
 8005704:	bf0c      	ite	eq
 8005706:	2301      	moveq	r3, #1
 8005708:	2300      	movne	r3, #0
 800570a:	b2db      	uxtb	r3, r3
 800570c:	e008      	b.n	8005720 <HAL_ADC_ConfigChannel+0x53c>
 800570e:	4857      	ldr	r0, [pc, #348]	; (800586c <HAL_ADC_ConfigChannel+0x688>)
 8005710:	f7fe ffcc 	bl	80046ac <LL_ADC_IsEnabled>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	bf0c      	ite	eq
 800571a:	2301      	moveq	r3, #1
 800571c:	2300      	movne	r3, #0
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b00      	cmp	r3, #0
 8005722:	d07d      	beq.n	8005820 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a51      	ldr	r2, [pc, #324]	; (8005870 <HAL_ADC_ConfigChannel+0x68c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d130      	bne.n	8005790 <HAL_ADC_ConfigChannel+0x5ac>
 800572e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005730:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d12b      	bne.n	8005790 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a4b      	ldr	r2, [pc, #300]	; (800586c <HAL_ADC_ConfigChannel+0x688>)
 800573e:	4293      	cmp	r3, r2
 8005740:	f040 8081 	bne.w	8005846 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a44      	ldr	r2, [pc, #272]	; (800585c <HAL_ADC_ConfigChannel+0x678>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d004      	beq.n	8005758 <HAL_ADC_ConfigChannel+0x574>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a43      	ldr	r2, [pc, #268]	; (8005860 <HAL_ADC_ConfigChannel+0x67c>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d101      	bne.n	800575c <HAL_ADC_ConfigChannel+0x578>
 8005758:	4a42      	ldr	r2, [pc, #264]	; (8005864 <HAL_ADC_ConfigChannel+0x680>)
 800575a:	e000      	b.n	800575e <HAL_ADC_ConfigChannel+0x57a>
 800575c:	4a42      	ldr	r2, [pc, #264]	; (8005868 <HAL_ADC_ConfigChannel+0x684>)
 800575e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005760:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005764:	4619      	mov	r1, r3
 8005766:	4610      	mov	r0, r2
 8005768:	f7fe fdf7 	bl	800435a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800576c:	4b41      	ldr	r3, [pc, #260]	; (8005874 <HAL_ADC_ConfigChannel+0x690>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	099b      	lsrs	r3, r3, #6
 8005772:	4a41      	ldr	r2, [pc, #260]	; (8005878 <HAL_ADC_ConfigChannel+0x694>)
 8005774:	fba2 2303 	umull	r2, r3, r2, r3
 8005778:	099b      	lsrs	r3, r3, #6
 800577a:	3301      	adds	r3, #1
 800577c:	005b      	lsls	r3, r3, #1
 800577e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005780:	e002      	b.n	8005788 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	3b01      	subs	r3, #1
 8005786:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1f9      	bne.n	8005782 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800578e:	e05a      	b.n	8005846 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a39      	ldr	r2, [pc, #228]	; (800587c <HAL_ADC_ConfigChannel+0x698>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d11e      	bne.n	80057d8 <HAL_ADC_ConfigChannel+0x5f4>
 800579a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800579c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d119      	bne.n	80057d8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a30      	ldr	r2, [pc, #192]	; (800586c <HAL_ADC_ConfigChannel+0x688>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d14b      	bne.n	8005846 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a2a      	ldr	r2, [pc, #168]	; (800585c <HAL_ADC_ConfigChannel+0x678>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d004      	beq.n	80057c2 <HAL_ADC_ConfigChannel+0x5de>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a28      	ldr	r2, [pc, #160]	; (8005860 <HAL_ADC_ConfigChannel+0x67c>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d101      	bne.n	80057c6 <HAL_ADC_ConfigChannel+0x5e2>
 80057c2:	4a28      	ldr	r2, [pc, #160]	; (8005864 <HAL_ADC_ConfigChannel+0x680>)
 80057c4:	e000      	b.n	80057c8 <HAL_ADC_ConfigChannel+0x5e4>
 80057c6:	4a28      	ldr	r2, [pc, #160]	; (8005868 <HAL_ADC_ConfigChannel+0x684>)
 80057c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057ce:	4619      	mov	r1, r3
 80057d0:	4610      	mov	r0, r2
 80057d2:	f7fe fdc2 	bl	800435a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80057d6:	e036      	b.n	8005846 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a28      	ldr	r2, [pc, #160]	; (8005880 <HAL_ADC_ConfigChannel+0x69c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d131      	bne.n	8005846 <HAL_ADC_ConfigChannel+0x662>
 80057e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d12c      	bne.n	8005846 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a1e      	ldr	r2, [pc, #120]	; (800586c <HAL_ADC_ConfigChannel+0x688>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d127      	bne.n	8005846 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a18      	ldr	r2, [pc, #96]	; (800585c <HAL_ADC_ConfigChannel+0x678>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d004      	beq.n	800580a <HAL_ADC_ConfigChannel+0x626>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a16      	ldr	r2, [pc, #88]	; (8005860 <HAL_ADC_ConfigChannel+0x67c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d101      	bne.n	800580e <HAL_ADC_ConfigChannel+0x62a>
 800580a:	4a16      	ldr	r2, [pc, #88]	; (8005864 <HAL_ADC_ConfigChannel+0x680>)
 800580c:	e000      	b.n	8005810 <HAL_ADC_ConfigChannel+0x62c>
 800580e:	4a16      	ldr	r2, [pc, #88]	; (8005868 <HAL_ADC_ConfigChannel+0x684>)
 8005810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005812:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005816:	4619      	mov	r1, r3
 8005818:	4610      	mov	r0, r2
 800581a:	f7fe fd9e 	bl	800435a <LL_ADC_SetCommonPathInternalCh>
 800581e:	e012      	b.n	8005846 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005824:	f043 0220 	orr.w	r2, r3, #32
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005832:	e008      	b.n	8005846 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005838:	f043 0220 	orr.w	r2, r3, #32
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800584e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005852:	4618      	mov	r0, r3
 8005854:	3784      	adds	r7, #132	; 0x84
 8005856:	46bd      	mov	sp, r7
 8005858:	bd90      	pop	{r4, r7, pc}
 800585a:	bf00      	nop
 800585c:	40022000 	.word	0x40022000
 8005860:	40022100 	.word	0x40022100
 8005864:	40022300 	.word	0x40022300
 8005868:	58026300 	.word	0x58026300
 800586c:	58026000 	.word	0x58026000
 8005870:	cb840000 	.word	0xcb840000
 8005874:	2000000c 	.word	0x2000000c
 8005878:	053e2d63 	.word	0x053e2d63
 800587c:	c7520000 	.word	0xc7520000
 8005880:	cfb80000 	.word	0xcfb80000

08005884 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4618      	mov	r0, r3
 8005892:	f7fe ff0b 	bl	80046ac <LL_ADC_IsEnabled>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d16e      	bne.n	800597a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	689a      	ldr	r2, [r3, #8]
 80058a2:	4b38      	ldr	r3, [pc, #224]	; (8005984 <ADC_Enable+0x100>)
 80058a4:	4013      	ands	r3, r2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00d      	beq.n	80058c6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ae:	f043 0210 	orr.w	r2, r3, #16
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ba:	f043 0201 	orr.w	r2, r3, #1
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e05a      	b.n	800597c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7fe fec6 	bl	800465c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80058d0:	f7fe fcca 	bl	8004268 <HAL_GetTick>
 80058d4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a2b      	ldr	r2, [pc, #172]	; (8005988 <ADC_Enable+0x104>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d004      	beq.n	80058ea <ADC_Enable+0x66>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a29      	ldr	r2, [pc, #164]	; (800598c <ADC_Enable+0x108>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d101      	bne.n	80058ee <ADC_Enable+0x6a>
 80058ea:	4b29      	ldr	r3, [pc, #164]	; (8005990 <ADC_Enable+0x10c>)
 80058ec:	e000      	b.n	80058f0 <ADC_Enable+0x6c>
 80058ee:	4b29      	ldr	r3, [pc, #164]	; (8005994 <ADC_Enable+0x110>)
 80058f0:	4618      	mov	r0, r3
 80058f2:	f7fe fe49 	bl	8004588 <LL_ADC_GetMultimode>
 80058f6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a23      	ldr	r2, [pc, #140]	; (800598c <ADC_Enable+0x108>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d002      	beq.n	8005908 <ADC_Enable+0x84>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	e000      	b.n	800590a <ADC_Enable+0x86>
 8005908:	4b1f      	ldr	r3, [pc, #124]	; (8005988 <ADC_Enable+0x104>)
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	6812      	ldr	r2, [r2, #0]
 800590e:	4293      	cmp	r3, r2
 8005910:	d02c      	beq.n	800596c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d130      	bne.n	800597a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005918:	e028      	b.n	800596c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4618      	mov	r0, r3
 8005920:	f7fe fec4 	bl	80046ac <LL_ADC_IsEnabled>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d104      	bne.n	8005934 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4618      	mov	r0, r3
 8005930:	f7fe fe94 	bl	800465c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005934:	f7fe fc98 	bl	8004268 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	2b02      	cmp	r3, #2
 8005940:	d914      	bls.n	800596c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0301 	and.w	r3, r3, #1
 800594c:	2b01      	cmp	r3, #1
 800594e:	d00d      	beq.n	800596c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005954:	f043 0210 	orr.w	r2, r3, #16
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005960:	f043 0201 	orr.w	r2, r3, #1
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e007      	b.n	800597c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	2b01      	cmp	r3, #1
 8005978:	d1cf      	bne.n	800591a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	8000003f 	.word	0x8000003f
 8005988:	40022000 	.word	0x40022000
 800598c:	40022100 	.word	0x40022100
 8005990:	40022300 	.word	0x40022300
 8005994:	58026300 	.word	0x58026300

08005998 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7fe fe94 	bl	80046d2 <LL_ADC_IsDisableOngoing>
 80059aa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7fe fe7b 	bl	80046ac <LL_ADC_IsEnabled>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d047      	beq.n	8005a4c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d144      	bne.n	8005a4c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f003 030d 	and.w	r3, r3, #13
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d10c      	bne.n	80059ea <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7fe fe55 	bl	8004684 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2203      	movs	r2, #3
 80059e0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80059e2:	f7fe fc41 	bl	8004268 <HAL_GetTick>
 80059e6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80059e8:	e029      	b.n	8005a3e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ee:	f043 0210 	orr.w	r2, r3, #16
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059fa:	f043 0201 	orr.w	r2, r3, #1
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e023      	b.n	8005a4e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005a06:	f7fe fc2f 	bl	8004268 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d914      	bls.n	8005a3e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00d      	beq.n	8005a3e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a26:	f043 0210 	orr.w	r2, r3, #16
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a32:	f043 0201 	orr.w	r2, r3, #1
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e007      	b.n	8005a4e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f003 0301 	and.w	r3, r3, #1
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1dc      	bne.n	8005a06 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
	...

08005a58 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a7a      	ldr	r2, [pc, #488]	; (8005c50 <ADC_ConfigureBoostMode+0x1f8>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d004      	beq.n	8005a74 <ADC_ConfigureBoostMode+0x1c>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a79      	ldr	r2, [pc, #484]	; (8005c54 <ADC_ConfigureBoostMode+0x1fc>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d109      	bne.n	8005a88 <ADC_ConfigureBoostMode+0x30>
 8005a74:	4b78      	ldr	r3, [pc, #480]	; (8005c58 <ADC_ConfigureBoostMode+0x200>)
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	bf14      	ite	ne
 8005a80:	2301      	movne	r3, #1
 8005a82:	2300      	moveq	r3, #0
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	e008      	b.n	8005a9a <ADC_ConfigureBoostMode+0x42>
 8005a88:	4b74      	ldr	r3, [pc, #464]	; (8005c5c <ADC_ConfigureBoostMode+0x204>)
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	bf14      	ite	ne
 8005a94:	2301      	movne	r3, #1
 8005a96:	2300      	moveq	r3, #0
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d01c      	beq.n	8005ad8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005a9e:	f005 f9d9 	bl	800ae54 <HAL_RCC_GetHCLKFreq>
 8005aa2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005aac:	d010      	beq.n	8005ad0 <ADC_ConfigureBoostMode+0x78>
 8005aae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ab2:	d873      	bhi.n	8005b9c <ADC_ConfigureBoostMode+0x144>
 8005ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ab8:	d002      	beq.n	8005ac0 <ADC_ConfigureBoostMode+0x68>
 8005aba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005abe:	d16d      	bne.n	8005b9c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	0c1b      	lsrs	r3, r3, #16
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005acc:	60fb      	str	r3, [r7, #12]
        break;
 8005ace:	e068      	b.n	8005ba2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	089b      	lsrs	r3, r3, #2
 8005ad4:	60fb      	str	r3, [r7, #12]
        break;
 8005ad6:	e064      	b.n	8005ba2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005ad8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005adc:	f04f 0100 	mov.w	r1, #0
 8005ae0:	f006 fc3a 	bl	800c358 <HAL_RCCEx_GetPeriphCLKFreq>
 8005ae4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005aee:	d051      	beq.n	8005b94 <ADC_ConfigureBoostMode+0x13c>
 8005af0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005af4:	d854      	bhi.n	8005ba0 <ADC_ConfigureBoostMode+0x148>
 8005af6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005afa:	d047      	beq.n	8005b8c <ADC_ConfigureBoostMode+0x134>
 8005afc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005b00:	d84e      	bhi.n	8005ba0 <ADC_ConfigureBoostMode+0x148>
 8005b02:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005b06:	d03d      	beq.n	8005b84 <ADC_ConfigureBoostMode+0x12c>
 8005b08:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005b0c:	d848      	bhi.n	8005ba0 <ADC_ConfigureBoostMode+0x148>
 8005b0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b12:	d033      	beq.n	8005b7c <ADC_ConfigureBoostMode+0x124>
 8005b14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b18:	d842      	bhi.n	8005ba0 <ADC_ConfigureBoostMode+0x148>
 8005b1a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005b1e:	d029      	beq.n	8005b74 <ADC_ConfigureBoostMode+0x11c>
 8005b20:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005b24:	d83c      	bhi.n	8005ba0 <ADC_ConfigureBoostMode+0x148>
 8005b26:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005b2a:	d01a      	beq.n	8005b62 <ADC_ConfigureBoostMode+0x10a>
 8005b2c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005b30:	d836      	bhi.n	8005ba0 <ADC_ConfigureBoostMode+0x148>
 8005b32:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005b36:	d014      	beq.n	8005b62 <ADC_ConfigureBoostMode+0x10a>
 8005b38:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005b3c:	d830      	bhi.n	8005ba0 <ADC_ConfigureBoostMode+0x148>
 8005b3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b42:	d00e      	beq.n	8005b62 <ADC_ConfigureBoostMode+0x10a>
 8005b44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b48:	d82a      	bhi.n	8005ba0 <ADC_ConfigureBoostMode+0x148>
 8005b4a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005b4e:	d008      	beq.n	8005b62 <ADC_ConfigureBoostMode+0x10a>
 8005b50:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005b54:	d824      	bhi.n	8005ba0 <ADC_ConfigureBoostMode+0x148>
 8005b56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b5a:	d002      	beq.n	8005b62 <ADC_ConfigureBoostMode+0x10a>
 8005b5c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b60:	d11e      	bne.n	8005ba0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	0c9b      	lsrs	r3, r3, #18
 8005b68:	005b      	lsls	r3, r3, #1
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b70:	60fb      	str	r3, [r7, #12]
        break;
 8005b72:	e016      	b.n	8005ba2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	091b      	lsrs	r3, r3, #4
 8005b78:	60fb      	str	r3, [r7, #12]
        break;
 8005b7a:	e012      	b.n	8005ba2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	095b      	lsrs	r3, r3, #5
 8005b80:	60fb      	str	r3, [r7, #12]
        break;
 8005b82:	e00e      	b.n	8005ba2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	099b      	lsrs	r3, r3, #6
 8005b88:	60fb      	str	r3, [r7, #12]
        break;
 8005b8a:	e00a      	b.n	8005ba2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	09db      	lsrs	r3, r3, #7
 8005b90:	60fb      	str	r3, [r7, #12]
        break;
 8005b92:	e006      	b.n	8005ba2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	0a1b      	lsrs	r3, r3, #8
 8005b98:	60fb      	str	r3, [r7, #12]
        break;
 8005b9a:	e002      	b.n	8005ba2 <ADC_ConfigureBoostMode+0x14a>
        break;
 8005b9c:	bf00      	nop
 8005b9e:	e000      	b.n	8005ba2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005ba0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005ba2:	f7fe fb91 	bl	80042c8 <HAL_GetREVID>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	f241 0203 	movw	r2, #4099	; 0x1003
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d815      	bhi.n	8005bdc <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	4a2b      	ldr	r2, [pc, #172]	; (8005c60 <ADC_ConfigureBoostMode+0x208>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d908      	bls.n	8005bca <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	689a      	ldr	r2, [r3, #8]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bc6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005bc8:	e03e      	b.n	8005c48 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	689a      	ldr	r2, [r3, #8]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bd8:	609a      	str	r2, [r3, #8]
}
 8005bda:	e035      	b.n	8005c48 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	085b      	lsrs	r3, r3, #1
 8005be0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	4a1f      	ldr	r2, [pc, #124]	; (8005c64 <ADC_ConfigureBoostMode+0x20c>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d808      	bhi.n	8005bfc <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	689a      	ldr	r2, [r3, #8]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005bf8:	609a      	str	r2, [r3, #8]
}
 8005bfa:	e025      	b.n	8005c48 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	4a1a      	ldr	r2, [pc, #104]	; (8005c68 <ADC_ConfigureBoostMode+0x210>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d80a      	bhi.n	8005c1a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c16:	609a      	str	r2, [r3, #8]
}
 8005c18:	e016      	b.n	8005c48 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	4a13      	ldr	r2, [pc, #76]	; (8005c6c <ADC_ConfigureBoostMode+0x214>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d80a      	bhi.n	8005c38 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c34:	609a      	str	r2, [r3, #8]
}
 8005c36:	e007      	b.n	8005c48 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	689a      	ldr	r2, [r3, #8]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005c46:	609a      	str	r2, [r3, #8]
}
 8005c48:	bf00      	nop
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	40022000 	.word	0x40022000
 8005c54:	40022100 	.word	0x40022100
 8005c58:	40022300 	.word	0x40022300
 8005c5c:	58026300 	.word	0x58026300
 8005c60:	01312d00 	.word	0x01312d00
 8005c64:	005f5e10 	.word	0x005f5e10
 8005c68:	00bebc20 	.word	0x00bebc20
 8005c6c:	017d7840 	.word	0x017d7840

08005c70 <LL_ADC_StartCalibration>:
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	689a      	ldr	r2, [r3, #8]
 8005c80:	4b09      	ldr	r3, [pc, #36]	; (8005ca8 <LL_ADC_StartCalibration+0x38>)
 8005c82:	4013      	ands	r3, r2
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005c90:	430a      	orrs	r2, r1
 8005c92:	4313      	orrs	r3, r2
 8005c94:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	609a      	str	r2, [r3, #8]
}
 8005c9c:	bf00      	nop
 8005c9e:	3714      	adds	r7, #20
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr
 8005ca8:	3ffeffc0 	.word	0x3ffeffc0

08005cac <LL_ADC_IsCalibrationOnGoing>:
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cc0:	d101      	bne.n	8005cc6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e000      	b.n	8005cc8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b086      	sub	sp, #24
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d101      	bne.n	8005cf2 <HAL_ADCEx_Calibration_Start+0x1e>
 8005cee:	2302      	movs	r3, #2
 8005cf0:	e04c      	b.n	8005d8c <HAL_ADCEx_Calibration_Start+0xb8>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f7ff fe4c 	bl	8005998 <ADC_Disable>
 8005d00:	4603      	mov	r3, r0
 8005d02:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005d04:	7dfb      	ldrb	r3, [r7, #23]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d135      	bne.n	8005d76 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d0e:	4b21      	ldr	r3, [pc, #132]	; (8005d94 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005d10:	4013      	ands	r3, r2
 8005d12:	f043 0202 	orr.w	r2, r3, #2
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	68b9      	ldr	r1, [r7, #8]
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7ff ffa4 	bl	8005c70 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005d28:	e014      	b.n	8005d54 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	4a19      	ldr	r2, [pc, #100]	; (8005d98 <HAL_ADCEx_Calibration_Start+0xc4>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d30d      	bcc.n	8005d54 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d3c:	f023 0312 	bic.w	r3, r3, #18
 8005d40:	f043 0210 	orr.w	r2, r3, #16
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e01b      	b.n	8005d8c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f7ff ffa7 	bl	8005cac <LL_ADC_IsCalibrationOnGoing>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1e2      	bne.n	8005d2a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d68:	f023 0303 	bic.w	r3, r3, #3
 8005d6c:	f043 0201 	orr.w	r2, r3, #1
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	655a      	str	r2, [r3, #84]	; 0x54
 8005d74:	e005      	b.n	8005d82 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d7a:	f043 0210 	orr.w	r2, r3, #16
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3718      	adds	r7, #24
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	ffffeefd 	.word	0xffffeefd
 8005d98:	25c3f800 	.word	0x25c3f800

08005d9c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005de0:	bf00      	nop
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <__NVIC_SetPriorityGrouping>:
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f003 0307 	and.w	r3, r3, #7
 8005e0e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e10:	4b0b      	ldr	r3, [pc, #44]	; (8005e40 <__NVIC_SetPriorityGrouping+0x40>)
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005e28:	4b06      	ldr	r3, [pc, #24]	; (8005e44 <__NVIC_SetPriorityGrouping+0x44>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e2e:	4a04      	ldr	r2, [pc, #16]	; (8005e40 <__NVIC_SetPriorityGrouping+0x40>)
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	60d3      	str	r3, [r2, #12]
}
 8005e34:	bf00      	nop
 8005e36:	3714      	adds	r7, #20
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	e000ed00 	.word	0xe000ed00
 8005e44:	05fa0000 	.word	0x05fa0000

08005e48 <__NVIC_GetPriorityGrouping>:
{
 8005e48:	b480      	push	{r7}
 8005e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e4c:	4b04      	ldr	r3, [pc, #16]	; (8005e60 <__NVIC_GetPriorityGrouping+0x18>)
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	0a1b      	lsrs	r3, r3, #8
 8005e52:	f003 0307 	and.w	r3, r3, #7
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr
 8005e60:	e000ed00 	.word	0xe000ed00

08005e64 <__NVIC_EnableIRQ>:
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005e6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	db0b      	blt.n	8005e8e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e76:	88fb      	ldrh	r3, [r7, #6]
 8005e78:	f003 021f 	and.w	r2, r3, #31
 8005e7c:	4907      	ldr	r1, [pc, #28]	; (8005e9c <__NVIC_EnableIRQ+0x38>)
 8005e7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e82:	095b      	lsrs	r3, r3, #5
 8005e84:	2001      	movs	r0, #1
 8005e86:	fa00 f202 	lsl.w	r2, r0, r2
 8005e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005e8e:	bf00      	nop
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	e000e100 	.word	0xe000e100

08005ea0 <__NVIC_SetPriority>:
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	6039      	str	r1, [r7, #0]
 8005eaa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005eac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	db0a      	blt.n	8005eca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	b2da      	uxtb	r2, r3
 8005eb8:	490c      	ldr	r1, [pc, #48]	; (8005eec <__NVIC_SetPriority+0x4c>)
 8005eba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ebe:	0112      	lsls	r2, r2, #4
 8005ec0:	b2d2      	uxtb	r2, r2
 8005ec2:	440b      	add	r3, r1
 8005ec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005ec8:	e00a      	b.n	8005ee0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	4908      	ldr	r1, [pc, #32]	; (8005ef0 <__NVIC_SetPriority+0x50>)
 8005ed0:	88fb      	ldrh	r3, [r7, #6]
 8005ed2:	f003 030f 	and.w	r3, r3, #15
 8005ed6:	3b04      	subs	r3, #4
 8005ed8:	0112      	lsls	r2, r2, #4
 8005eda:	b2d2      	uxtb	r2, r2
 8005edc:	440b      	add	r3, r1
 8005ede:	761a      	strb	r2, [r3, #24]
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	e000e100 	.word	0xe000e100
 8005ef0:	e000ed00 	.word	0xe000ed00

08005ef4 <NVIC_EncodePriority>:
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b089      	sub	sp, #36	; 0x24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f003 0307 	and.w	r3, r3, #7
 8005f06:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	f1c3 0307 	rsb	r3, r3, #7
 8005f0e:	2b04      	cmp	r3, #4
 8005f10:	bf28      	it	cs
 8005f12:	2304      	movcs	r3, #4
 8005f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	3304      	adds	r3, #4
 8005f1a:	2b06      	cmp	r3, #6
 8005f1c:	d902      	bls.n	8005f24 <NVIC_EncodePriority+0x30>
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	3b03      	subs	r3, #3
 8005f22:	e000      	b.n	8005f26 <NVIC_EncodePriority+0x32>
 8005f24:	2300      	movs	r3, #0
 8005f26:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f28:	f04f 32ff 	mov.w	r2, #4294967295
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f32:	43da      	mvns	r2, r3
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	401a      	ands	r2, r3
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	fa01 f303 	lsl.w	r3, r1, r3
 8005f46:	43d9      	mvns	r1, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f4c:	4313      	orrs	r3, r2
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3724      	adds	r7, #36	; 0x24
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
	...

08005f5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	3b01      	subs	r3, #1
 8005f68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f6c:	d301      	bcc.n	8005f72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e00f      	b.n	8005f92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f72:	4a0a      	ldr	r2, [pc, #40]	; (8005f9c <SysTick_Config+0x40>)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	3b01      	subs	r3, #1
 8005f78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005f7a:	210f      	movs	r1, #15
 8005f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f80:	f7ff ff8e 	bl	8005ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f84:	4b05      	ldr	r3, [pc, #20]	; (8005f9c <SysTick_Config+0x40>)
 8005f86:	2200      	movs	r2, #0
 8005f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f8a:	4b04      	ldr	r3, [pc, #16]	; (8005f9c <SysTick_Config+0x40>)
 8005f8c:	2207      	movs	r2, #7
 8005f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	e000e010 	.word	0xe000e010

08005fa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f7ff ff29 	bl	8005e00 <__NVIC_SetPriorityGrouping>
}
 8005fae:	bf00      	nop
 8005fb0:	3708      	adds	r7, #8
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b086      	sub	sp, #24
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	60b9      	str	r1, [r7, #8]
 8005fc0:	607a      	str	r2, [r7, #4]
 8005fc2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005fc4:	f7ff ff40 	bl	8005e48 <__NVIC_GetPriorityGrouping>
 8005fc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	68b9      	ldr	r1, [r7, #8]
 8005fce:	6978      	ldr	r0, [r7, #20]
 8005fd0:	f7ff ff90 	bl	8005ef4 <NVIC_EncodePriority>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005fda:	4611      	mov	r1, r2
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7ff ff5f 	bl	8005ea0 <__NVIC_SetPriority>
}
 8005fe2:	bf00      	nop
 8005fe4:	3718      	adds	r7, #24
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b082      	sub	sp, #8
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ff4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7ff ff33 	bl	8005e64 <__NVIC_EnableIRQ>
}
 8005ffe:	bf00      	nop
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b082      	sub	sp, #8
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f7ff ffa4 	bl	8005f5c <SysTick_Config>
 8006014:	4603      	mov	r3, r0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3708      	adds	r7, #8
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
	...

08006020 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8006020:	b480      	push	{r7}
 8006022:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8006024:	f3bf 8f5f 	dmb	sy
}
 8006028:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800602a:	4b07      	ldr	r3, [pc, #28]	; (8006048 <HAL_MPU_Disable+0x28>)
 800602c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602e:	4a06      	ldr	r2, [pc, #24]	; (8006048 <HAL_MPU_Disable+0x28>)
 8006030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006034:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006036:	4b05      	ldr	r3, [pc, #20]	; (800604c <HAL_MPU_Disable+0x2c>)
 8006038:	2200      	movs	r2, #0
 800603a:	605a      	str	r2, [r3, #4]
}
 800603c:	bf00      	nop
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	e000ed00 	.word	0xe000ed00
 800604c:	e000ed90 	.word	0xe000ed90

08006050 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006058:	4a0b      	ldr	r2, [pc, #44]	; (8006088 <HAL_MPU_Enable+0x38>)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f043 0301 	orr.w	r3, r3, #1
 8006060:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006062:	4b0a      	ldr	r3, [pc, #40]	; (800608c <HAL_MPU_Enable+0x3c>)
 8006064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006066:	4a09      	ldr	r2, [pc, #36]	; (800608c <HAL_MPU_Enable+0x3c>)
 8006068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800606c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800606e:	f3bf 8f4f 	dsb	sy
}
 8006072:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006074:	f3bf 8f6f 	isb	sy
}
 8006078:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800607a:	bf00      	nop
 800607c:	370c      	adds	r7, #12
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	e000ed90 	.word	0xe000ed90
 800608c:	e000ed00 	.word	0xe000ed00

08006090 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	785a      	ldrb	r2, [r3, #1]
 800609c:	4b1d      	ldr	r3, [pc, #116]	; (8006114 <HAL_MPU_ConfigRegion+0x84>)
 800609e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d029      	beq.n	80060fc <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80060a8:	4a1a      	ldr	r2, [pc, #104]	; (8006114 <HAL_MPU_ConfigRegion+0x84>)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	7b1b      	ldrb	r3, [r3, #12]
 80060b4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	7adb      	ldrb	r3, [r3, #11]
 80060ba:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80060bc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	7a9b      	ldrb	r3, [r3, #10]
 80060c2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80060c4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	7b5b      	ldrb	r3, [r3, #13]
 80060ca:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80060cc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	7b9b      	ldrb	r3, [r3, #14]
 80060d2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80060d4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	7bdb      	ldrb	r3, [r3, #15]
 80060da:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80060dc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	7a5b      	ldrb	r3, [r3, #9]
 80060e2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80060e4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	7a1b      	ldrb	r3, [r3, #8]
 80060ea:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80060ec:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	7812      	ldrb	r2, [r2, #0]
 80060f2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80060f4:	4a07      	ldr	r2, [pc, #28]	; (8006114 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80060f6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80060f8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80060fa:	e005      	b.n	8006108 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80060fc:	4b05      	ldr	r3, [pc, #20]	; (8006114 <HAL_MPU_ConfigRegion+0x84>)
 80060fe:	2200      	movs	r2, #0
 8006100:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8006102:	4b04      	ldr	r3, [pc, #16]	; (8006114 <HAL_MPU_ConfigRegion+0x84>)
 8006104:	2200      	movs	r2, #0
 8006106:	611a      	str	r2, [r3, #16]
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr
 8006114:	e000ed90 	.word	0xe000ed90

08006118 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d101      	bne.n	800612a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e014      	b.n	8006154 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	791b      	ldrb	r3, [r3, #4]
 800612e:	b2db      	uxtb	r3, r3
 8006130:	2b00      	cmp	r3, #0
 8006132:	d105      	bne.n	8006140 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f7fd fa1e 	bl	800357c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2202      	movs	r2, #2
 8006144:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3708      	adds	r7, #8
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	795b      	ldrb	r3, [r3, #5]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d101      	bne.n	8006172 <HAL_DAC_Start+0x16>
 800616e:	2302      	movs	r3, #2
 8006170:	e040      	b.n	80061f4 <HAL_DAC_Start+0x98>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2202      	movs	r2, #2
 800617c:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	6819      	ldr	r1, [r3, #0]
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	f003 0310 	and.w	r3, r3, #16
 800618a:	2201      	movs	r2, #1
 800618c:	409a      	lsls	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	430a      	orrs	r2, r1
 8006194:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10f      	bne.n	80061bc <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d11d      	bne.n	80061e6 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	685a      	ldr	r2, [r3, #4]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f042 0201 	orr.w	r2, r2, #1
 80061b8:	605a      	str	r2, [r3, #4]
 80061ba:	e014      	b.n	80061e6 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	f003 0310 	and.w	r3, r3, #16
 80061cc:	2102      	movs	r1, #2
 80061ce:	fa01 f303 	lsl.w	r3, r1, r3
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d107      	bne.n	80061e6 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	685a      	ldr	r2, [r3, #4]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f042 0202 	orr.w	r2, r2, #2
 80061e4:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8006200:	b480      	push	{r7}
 8006202:	b087      	sub	sp, #28
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	607a      	str	r2, [r7, #4]
 800620c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800620e:	2300      	movs	r3, #0
 8006210:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d105      	bne.n	800622a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4413      	add	r3, r2
 8006224:	3308      	adds	r3, #8
 8006226:	617b      	str	r3, [r7, #20]
 8006228:	e004      	b.n	8006234 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4413      	add	r3, r2
 8006230:	3314      	adds	r3, #20
 8006232:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	461a      	mov	r2, r3
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	371c      	adds	r7, #28
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
	...

0800624c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b088      	sub	sp, #32
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	795b      	ldrb	r3, [r3, #5]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d101      	bne.n	8006264 <HAL_DAC_ConfigChannel+0x18>
 8006260:	2302      	movs	r3, #2
 8006262:	e12a      	b.n	80064ba <HAL_DAC_ConfigChannel+0x26e>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2201      	movs	r2, #1
 8006268:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2202      	movs	r2, #2
 800626e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2b04      	cmp	r3, #4
 8006276:	f040 8081 	bne.w	800637c <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800627a:	f7fd fff5 	bl	8004268 <HAL_GetTick>
 800627e:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d140      	bne.n	8006308 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006286:	e018      	b.n	80062ba <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006288:	f7fd ffee 	bl	8004268 <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	2b01      	cmp	r3, #1
 8006294:	d911      	bls.n	80062ba <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800629c:	4b89      	ldr	r3, [pc, #548]	; (80064c4 <HAL_DAC_ConfigChannel+0x278>)
 800629e:	4013      	ands	r3, r2
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00a      	beq.n	80062ba <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	f043 0208 	orr.w	r2, r3, #8
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2203      	movs	r2, #3
 80062b4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e0ff      	b.n	80064ba <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062c0:	4b80      	ldr	r3, [pc, #512]	; (80064c4 <HAL_DAC_ConfigChannel+0x278>)
 80062c2:	4013      	ands	r3, r2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1df      	bne.n	8006288 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 80062c8:	2001      	movs	r0, #1
 80062ca:	f7fd ffd9 	bl	8004280 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	6992      	ldr	r2, [r2, #24]
 80062d6:	641a      	str	r2, [r3, #64]	; 0x40
 80062d8:	e023      	b.n	8006322 <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80062da:	f7fd ffc5 	bl	8004268 <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d90f      	bls.n	8006308 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	da0a      	bge.n	8006308 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	f043 0208 	orr.w	r2, r3, #8
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2203      	movs	r2, #3
 8006302:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e0d8      	b.n	80064ba <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800630e:	2b00      	cmp	r3, #0
 8006310:	dbe3      	blt.n	80062da <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 8006312:	2001      	movs	r0, #1
 8006314:	f7fd ffb4 	bl	8004280 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	6992      	ldr	r2, [r2, #24]
 8006320:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f003 0310 	and.w	r3, r3, #16
 800632e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006332:	fa01 f303 	lsl.w	r3, r1, r3
 8006336:	43db      	mvns	r3, r3
 8006338:	ea02 0103 	and.w	r1, r2, r3
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	69da      	ldr	r2, [r3, #28]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f003 0310 	and.w	r3, r3, #16
 8006346:	409a      	lsls	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	430a      	orrs	r2, r1
 800634e:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f003 0310 	and.w	r3, r3, #16
 800635c:	21ff      	movs	r1, #255	; 0xff
 800635e:	fa01 f303 	lsl.w	r3, r1, r3
 8006362:	43db      	mvns	r3, r3
 8006364:	ea02 0103 	and.w	r1, r2, r3
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	6a1a      	ldr	r2, [r3, #32]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f003 0310 	and.w	r3, r3, #16
 8006372:	409a      	lsls	r2, r3
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	430a      	orrs	r2, r1
 800637a:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d11d      	bne.n	80063c0 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638a:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f003 0310 	and.w	r3, r3, #16
 8006392:	221f      	movs	r2, #31
 8006394:	fa02 f303 	lsl.w	r3, r2, r3
 8006398:	43db      	mvns	r3, r3
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	4013      	ands	r3, r2
 800639e:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f003 0310 	and.w	r3, r3, #16
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	fa02 f303 	lsl.w	r3, r2, r3
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f003 0310 	and.w	r3, r3, #16
 80063ce:	2207      	movs	r2, #7
 80063d0:	fa02 f303 	lsl.w	r3, r2, r3
 80063d4:	43db      	mvns	r3, r3
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	4013      	ands	r3, r2
 80063da:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d102      	bne.n	80063ea <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 80063e4:	2300      	movs	r3, #0
 80063e6:	61fb      	str	r3, [r7, #28]
 80063e8:	e00f      	b.n	800640a <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d102      	bne.n	80063f8 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80063f2:	2301      	movs	r3, #1
 80063f4:	61fb      	str	r3, [r7, #28]
 80063f6:	e008      	b.n	800640a <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d102      	bne.n	8006406 <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006400:	2301      	movs	r3, #1
 8006402:	61fb      	str	r3, [r7, #28]
 8006404:	e001      	b.n	800640a <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006406:	2300      	movs	r3, #0
 8006408:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	4313      	orrs	r3, r2
 8006414:	69fa      	ldr	r2, [r7, #28]
 8006416:	4313      	orrs	r3, r2
 8006418:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f003 0310 	and.w	r3, r3, #16
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	fa02 f303 	lsl.w	r3, r2, r3
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	4313      	orrs	r3, r2
 800642a:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	697a      	ldr	r2, [r7, #20]
 8006432:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6819      	ldr	r1, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f003 0310 	and.w	r3, r3, #16
 8006440:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006444:	fa02 f303 	lsl.w	r3, r2, r3
 8006448:	43da      	mvns	r2, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	400a      	ands	r2, r1
 8006450:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f003 0310 	and.w	r3, r3, #16
 8006460:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006464:	fa02 f303 	lsl.w	r3, r2, r3
 8006468:	43db      	mvns	r3, r3
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	4013      	ands	r3, r2
 800646e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f003 0310 	and.w	r3, r3, #16
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	fa02 f303 	lsl.w	r3, r2, r3
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	4313      	orrs	r3, r2
 8006486:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	697a      	ldr	r2, [r7, #20]
 800648e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6819      	ldr	r1, [r3, #0]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f003 0310 	and.w	r3, r3, #16
 800649c:	22c0      	movs	r2, #192	; 0xc0
 800649e:	fa02 f303 	lsl.w	r3, r2, r3
 80064a2:	43da      	mvns	r2, r3
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	400a      	ands	r2, r1
 80064aa:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2201      	movs	r2, #1
 80064b0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3720      	adds	r7, #32
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	20008000 	.word	0x20008000

080064c8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e0cf      	b.n	800667a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d106      	bne.n	80064f2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2223      	movs	r2, #35	; 0x23
 80064e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f009 f9d5 	bl	800f89c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064f2:	4b64      	ldr	r3, [pc, #400]	; (8006684 <HAL_ETH_Init+0x1bc>)
 80064f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80064f8:	4a62      	ldr	r2, [pc, #392]	; (8006684 <HAL_ETH_Init+0x1bc>)
 80064fa:	f043 0302 	orr.w	r3, r3, #2
 80064fe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006502:	4b60      	ldr	r3, [pc, #384]	; (8006684 <HAL_ETH_Init+0x1bc>)
 8006504:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006508:	f003 0302 	and.w	r3, r3, #2
 800650c:	60bb      	str	r3, [r7, #8]
 800650e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	7a1b      	ldrb	r3, [r3, #8]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d103      	bne.n	8006520 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8006518:	2000      	movs	r0, #0
 800651a:	f7fd fee1 	bl	80042e0 <HAL_SYSCFG_ETHInterfaceSelect>
 800651e:	e003      	b.n	8006528 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8006520:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006524:	f7fd fedc 	bl	80042e0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8006528:	4b57      	ldr	r3, [pc, #348]	; (8006688 <HAL_ETH_Init+0x1c0>)
 800652a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	6812      	ldr	r2, [r2, #0]
 800653a:	f043 0301 	orr.w	r3, r3, #1
 800653e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006542:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006544:	f7fd fe90 	bl	8004268 <HAL_GetTick>
 8006548:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800654a:	e011      	b.n	8006570 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800654c:	f7fd fe8c 	bl	8004268 <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800655a:	d909      	bls.n	8006570 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2204      	movs	r2, #4
 8006560:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	22e0      	movs	r2, #224	; 0xe0
 8006568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e084      	b.n	800667a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 0301 	and.w	r3, r3, #1
 800657e:	2b00      	cmp	r3, #0
 8006580:	d1e4      	bne.n	800654c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 fd94 	bl	80070b0 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8006588:	f004 fc64 	bl	800ae54 <HAL_RCC_GetHCLKFreq>
 800658c:	4603      	mov	r3, r0
 800658e:	4a3f      	ldr	r2, [pc, #252]	; (800668c <HAL_ETH_Init+0x1c4>)
 8006590:	fba2 2303 	umull	r2, r3, r2, r3
 8006594:	0c9a      	lsrs	r2, r3, #18
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	3a01      	subs	r2, #1
 800659c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 ff7f 	bl	80074a4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065ae:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80065b2:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	6812      	ldr	r2, [r2, #0]
 80065ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80065c2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	f003 0303 	and.w	r3, r3, #3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d009      	beq.n	80065e6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	22e0      	movs	r2, #224	; 0xe0
 80065de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e049      	b.n	800667a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065ee:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80065f2:	4b27      	ldr	r3, [pc, #156]	; (8006690 <HAL_ETH_Init+0x1c8>)
 80065f4:	4013      	ands	r3, r2
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	6952      	ldr	r2, [r2, #20]
 80065fa:	0051      	lsls	r1, r2, #1
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	6812      	ldr	r2, [r2, #0]
 8006600:	430b      	orrs	r3, r1
 8006602:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006606:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 ffe7 	bl	80075de <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f001 f82d 	bl	8007670 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	3305      	adds	r3, #5
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	021a      	lsls	r2, r3, #8
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	3304      	adds	r3, #4
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	4619      	mov	r1, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	430a      	orrs	r2, r1
 8006630:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	3303      	adds	r3, #3
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	061a      	lsls	r2, r3, #24
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	3302      	adds	r3, #2
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	041b      	lsls	r3, r3, #16
 8006648:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	3301      	adds	r3, #1
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006654:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006662:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006664:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2210      	movs	r2, #16
 8006674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3710      	adds	r7, #16
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	58024400 	.word	0x58024400
 8006688:	58000400 	.word	0x58000400
 800668c:	431bde83 	.word	0x431bde83
 8006690:	ffff8001 	.word	0xffff8001

08006694 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066a2:	2b10      	cmp	r3, #16
 80066a4:	d153      	bne.n	800674e <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2223      	movs	r2, #35	; 0x23
 80066aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2204      	movs	r2, #4
 80066b2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 f9f6 	bl	8006aa6 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f042 0202 	orr.w	r2, r2, #2
 80066c8:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f042 0201 	orr.w	r2, r2, #1
 80066d8:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f042 0201 	orr.w	r2, r2, #1
 80066ea:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066f6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	6812      	ldr	r2, [r2, #0]
 80066fe:	f043 0301 	orr.w	r3, r3, #1
 8006702:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006706:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006712:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	6812      	ldr	r2, [r2, #0]
 800671a:	f043 0301 	orr.w	r3, r3, #1
 800671e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006722:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800672e:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	6812      	ldr	r2, [r2, #0]
 8006736:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 800673a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800673e:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2223      	movs	r2, #35	; 0x23
 8006746:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800674a:	2300      	movs	r3, #0
 800674c:	e000      	b.n	8006750 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
  }
}
 8006750:	4618      	mov	r0, r3
 8006752:	3708      	adds	r7, #8
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006766:	2b23      	cmp	r3, #35	; 0x23
 8006768:	d13f      	bne.n	80067ea <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2223      	movs	r2, #35	; 0x23
 800676e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800677a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	6812      	ldr	r2, [r2, #0]
 8006782:	f023 0301 	bic.w	r3, r3, #1
 8006786:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800678a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006796:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	6812      	ldr	r2, [r2, #0]
 800679e:	f023 0301 	bic.w	r3, r3, #1
 80067a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80067a6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f022 0201 	bic.w	r2, r2, #1
 80067b8:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f042 0201 	orr.w	r2, r2, #1
 80067ca:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f022 0202 	bic.w	r2, r2, #2
 80067dc:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2210      	movs	r2, #16
 80067e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80067e6:	2300      	movs	r3, #0
 80067e8:	e000      	b.n	80067ec <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
  }
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b086      	sub	sp, #24
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d109      	bne.n	800681e <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006810:	f043 0201 	orr.w	r2, r3, #1
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e07f      	b.n	800691e <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006824:	2b23      	cmp	r3, #35	; 0x23
 8006826:	d179      	bne.n	800691c <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8006828:	2200      	movs	r2, #0
 800682a:	68b9      	ldr	r1, [r7, #8]
 800682c:	68f8      	ldr	r0, [r7, #12]
 800682e:	f000 ff7d 	bl	800772c <ETH_Prepare_Tx_Descriptors>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d009      	beq.n	800684c <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800683e:	f043 0202 	orr.w	r2, r3, #2
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e068      	b.n	800691e <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 800684c:	f3bf 8f4f 	dsb	sy
}
 8006850:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	3206      	adds	r2, #6
 800685a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800685e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006864:	1c5a      	adds	r2, r3, #1
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	629a      	str	r2, [r3, #40]	; 0x28
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686e:	2b03      	cmp	r3, #3
 8006870:	d904      	bls.n	800687c <HAL_ETH_Transmit+0x84>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006876:	1f1a      	subs	r2, r3, #4
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	3106      	adds	r1, #6
 8006888:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800688c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006890:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    tickstart = HAL_GetTick();
 8006894:	f7fd fce8 	bl	8004268 <HAL_GetTick>
 8006898:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 800689a:	e039      	b.n	8006910 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068a4:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80068a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d012      	beq.n	80068d6 <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068b6:	f043 0208 	orr.w	r2, r3, #8
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068c8:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e023      	b.n	800691e <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068dc:	d018      	beq.n	8006910 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80068de:	f7fd fcc3 	bl	8004268 <HAL_GetTick>
 80068e2:	4602      	mov	r2, r0
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d302      	bcc.n	80068f4 <HAL_ETH_Transmit+0xfc>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10d      	bne.n	8006910 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068fa:	f043 0204 	orr.w	r2, r3, #4
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800690a:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	e006      	b.n	800691e <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	2b00      	cmp	r3, #0
 8006916:	dbc1      	blt.n	800689c <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8006918:	2300      	movs	r3, #0
 800691a:	e000      	b.n	800691e <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
  }
}
 800691e:	4618      	mov	r0, r3
 8006920:	3718      	adds	r7, #24
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}

08006926 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8006926:	b580      	push	{r7, lr}
 8006928:	b088      	sub	sp, #32
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
 800692e:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8006930:	2300      	movs	r3, #0
 8006932:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8006934:	2300      	movs	r3, #0
 8006936:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d109      	bne.n	8006952 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006944:	f043 0201 	orr.w	r2, r3, #1
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e0a5      	b.n	8006a9e <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006958:	2b23      	cmp	r3, #35	; 0x23
 800695a:	d001      	beq.n	8006960 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e09e      	b.n	8006a9e <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006964:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	69fa      	ldr	r2, [r7, #28]
 800696a:	3212      	adds	r2, #18
 800696c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006970:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006976:	f1c3 0304 	rsb	r3, r3, #4
 800697a:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800697c:	e067      	b.n	8006a4e <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d007      	beq.n	800699a <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	685a      	ldr	r2, [r3, #4]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d103      	bne.n	80069ae <HAL_ETH_ReadData+0x88>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d03d      	beq.n	8006a2a <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d005      	beq.n	80069c6 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	695b      	ldr	r3, [r3, #20]
 80069ca:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00d      	beq.n	80069f4 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	68da      	ldr	r2, [r3, #12]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80069f0:	2301      	movs	r3, #1
 80069f2:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8006a04:	461a      	mov	r2, r3
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	f009 f91f 	bl	800fc4c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a12:	1c5a      	adds	r2, r3, #1
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	441a      	add	r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	2200      	movs	r2, #0
 8006a28:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	61fb      	str	r3, [r7, #28]
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	2b03      	cmp	r3, #3
 8006a34:	d902      	bls.n	8006a3c <HAL_ETH_ReadData+0x116>
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	3b04      	subs	r3, #4
 8006a3a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	69fa      	ldr	r2, [r7, #28]
 8006a40:	3212      	adds	r2, #18
 8006a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a46:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	db06      	blt.n	8006a64 <HAL_ETH_ReadData+0x13e>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8006a56:	697a      	ldr	r2, [r7, #20]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d202      	bcs.n	8006a64 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 8006a5e:	7bfb      	ldrb	r3, [r7, #15]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d08c      	beq.n	800697e <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	441a      	add	r2, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d002      	beq.n	8006a7e <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 f814 	bl	8006aa6 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	69fa      	ldr	r2, [r7, #28]
 8006a82:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8006a84:	7bfb      	ldrb	r3, [r7, #15]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d108      	bne.n	8006a9c <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	e000      	b.n	8006a9e <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3720      	adds	r7, #32
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b088      	sub	sp, #32
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006aba:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	69fa      	ldr	r2, [r7, #28]
 8006ac0:	3212      	adds	r2, #18
 8006ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ac6:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006acc:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8006ace:	e03b      	b.n	8006b48 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d112      	bne.n	8006afe <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8006ad8:	f107 030c 	add.w	r3, r7, #12
 8006adc:	4618      	mov	r0, r3
 8006ade:	f009 f885 	bl	800fbec <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d102      	bne.n	8006aee <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	74fb      	strb	r3, [r7, #19]
 8006aec:	e007      	b.n	8006afe <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	461a      	mov	r2, r3
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	461a      	mov	r2, r3
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8006afe:	7cfb      	ldrb	r3, [r7, #19]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d021      	beq.n	8006b48 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8006b04:	f3bf 8f5f 	dmb	sy
}
 8006b08:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d004      	beq.n	8006b1c <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8006b18:	60da      	str	r2, [r3, #12]
 8006b1a:	e003      	b.n	8006b24 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8006b22:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	3301      	adds	r3, #1
 8006b28:	61fb      	str	r3, [r7, #28]
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	2b03      	cmp	r3, #3
 8006b2e:	d902      	bls.n	8006b36 <ETH_UpdateDescriptor+0x90>
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	3b04      	subs	r3, #4
 8006b34:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	69fa      	ldr	r2, [r7, #28]
 8006b3a:	3212      	adds	r2, #18
 8006b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b40:	617b      	str	r3, [r7, #20]
      desccount--;
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	3b01      	subs	r3, #1
 8006b46:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d002      	beq.n	8006b54 <ETH_UpdateDescriptor+0xae>
 8006b4e:	7cfb      	ldrb	r3, [r7, #19]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d1bd      	bne.n	8006ad0 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b58:	69ba      	ldr	r2, [r7, #24]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d00d      	beq.n	8006b7a <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b66:	461a      	mov	r2, r3
 8006b68:	2300      	movs	r3, #0
 8006b6a:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	69fa      	ldr	r2, [r7, #28]
 8006b72:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	69ba      	ldr	r2, [r7, #24]
 8006b78:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8006b7a:	bf00      	nop
 8006b7c:	3720      	adds	r7, #32
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b086      	sub	sp, #24
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	60f8      	str	r0, [r7, #12]
 8006b8a:	60b9      	str	r1, [r7, #8]
 8006b8c:	607a      	str	r2, [r7, #4]
 8006b8e:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006b98:	f003 0301 	and.w	r3, r3, #1
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d001      	beq.n	8006ba4 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e03e      	b.n	8006c22 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006bac:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	055b      	lsls	r3, r3, #21
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	041b      	lsls	r3, r3, #16
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	f043 030c 	orr.w	r3, r3, #12
 8006bd0:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	f043 0301 	orr.w	r3, r3, #1
 8006bd8:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8006be4:	f7fd fb40 	bl	8004268 <HAL_GetTick>
 8006be8:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006bea:	e009      	b.n	8006c00 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8006bec:	f7fd fb3c 	bl	8004268 <HAL_GetTick>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bfa:	d901      	bls.n	8006c00 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e010      	b.n	8006c22 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006c08:	f003 0301 	and.w	r3, r3, #1
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1ed      	bne.n	8006bec <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3718      	adds	r7, #24
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
	...

08006c2c <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b086      	sub	sp, #24
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
 8006c38:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006c42:	f003 0301 	and.w	r3, r3, #1
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d001      	beq.n	8006c4e <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e03c      	b.n	8006cc8 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006c56:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	055b      	lsls	r3, r3, #21
 8006c62:	4313      	orrs	r3, r2
 8006c64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	041b      	lsls	r3, r3, #16
 8006c70:	4313      	orrs	r3, r2
 8006c72:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	f023 030c 	bic.w	r3, r3, #12
 8006c7a:	f043 0304 	orr.w	r3, r3, #4
 8006c7e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	f043 0301 	orr.w	r3, r3, #1
 8006c86:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	4b10      	ldr	r3, [pc, #64]	; (8006cd0 <HAL_ETH_WritePHYRegister+0xa4>)
 8006c8e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8006c92:	4a0f      	ldr	r2, [pc, #60]	; (8006cd0 <HAL_ETH_WritePHYRegister+0xa4>)
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8006c9a:	f7fd fae5 	bl	8004268 <HAL_GetTick>
 8006c9e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006ca0:	e009      	b.n	8006cb6 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8006ca2:	f7fd fae1 	bl	8004268 <HAL_GetTick>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cb0:	d901      	bls.n	8006cb6 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e008      	b.n	8006cc8 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1ed      	bne.n	8006ca2 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3718      	adds	r7, #24
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	40028000 	.word	0x40028000

08006cd4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d101      	bne.n	8006ce8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e1c3      	b.n	8007070 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 020c 	and.w	r2, r3, #12
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0310 	and.w	r3, r3, #16
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	bf14      	ite	ne
 8006d04:	2301      	movne	r3, #1
 8006d06:	2300      	moveq	r3, #0
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	bf0c      	ite	eq
 8006d2e:	2301      	moveq	r3, #1
 8006d30:	2300      	movne	r3, #0
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	461a      	mov	r2, r3
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	bf14      	ite	ne
 8006d4a:	2301      	movne	r3, #1
 8006d4c:	2300      	moveq	r3, #0
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	bf0c      	ite	eq
 8006d64:	2301      	moveq	r3, #1
 8006d66:	2300      	movne	r3, #0
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8006d76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	bf14      	ite	ne
 8006d7e:	2301      	movne	r3, #1
 8006d80:	2300      	moveq	r3, #0
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	bf14      	ite	ne
 8006d98:	2301      	movne	r3, #1
 8006d9a:	2300      	moveq	r3, #0
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	461a      	mov	r2, r3
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	bf14      	ite	ne
 8006dce:	2301      	movne	r3, #1
 8006dd0:	2300      	moveq	r3, #0
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	bf0c      	ite	eq
 8006de8:	2301      	moveq	r3, #1
 8006dea:	2300      	movne	r3, #0
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	461a      	mov	r2, r3
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	bf0c      	ite	eq
 8006e02:	2301      	moveq	r3, #1
 8006e04:	2300      	movne	r3, #0
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	461a      	mov	r2, r3
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	bf14      	ite	ne
 8006e1c:	2301      	movne	r3, #1
 8006e1e:	2300      	moveq	r3, #0
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	461a      	mov	r2, r3
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	bf14      	ite	ne
 8006e36:	2301      	movne	r3, #1
 8006e38:	2300      	moveq	r3, #0
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	bf14      	ite	ne
 8006e50:	2301      	movne	r3, #1
 8006e52:	2300      	moveq	r3, #0
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	461a      	mov	r2, r3
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8006e62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	bf14      	ite	ne
 8006e6a:	2301      	movne	r3, #1
 8006e6c:	2300      	moveq	r3, #0
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	bf14      	ite	ne
 8006e92:	2301      	movne	r3, #1
 8006e94:	2300      	moveq	r3, #0
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	461a      	mov	r2, r3
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	bf0c      	ite	eq
 8006ec8:	2301      	moveq	r3, #1
 8006eca:	2300      	movne	r3, #0
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	461a      	mov	r2, r3
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	bf14      	ite	ne
 8006ee4:	2301      	movne	r3, #1
 8006ee6:	2300      	moveq	r3, #0
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	461a      	mov	r2, r3
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8006ef8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	bf14      	ite	ne
 8006f00:	2301      	movne	r3, #1
 8006f02:	2300      	moveq	r3, #0
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	bf14      	ite	ne
 8006f1c:	2301      	movne	r3, #1
 8006f1e:	2300      	moveq	r3, #0
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	0e5b      	lsrs	r3, r3, #25
 8006f32:	f003 021f 	and.w	r2, r3, #31
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	bf14      	ite	ne
 8006f48:	2301      	movne	r3, #1
 8006f4a:	2300      	moveq	r3, #0
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	461a      	mov	r2, r3
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	f003 020f 	and.w	r2, r3, #15
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f6a:	f003 0302 	and.w	r3, r3, #2
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	bf14      	ite	ne
 8006f72:	2301      	movne	r3, #1
 8006f74:	2300      	moveq	r3, #0
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	461a      	mov	r2, r3
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	bf0c      	ite	eq
 8006f8e:	2301      	moveq	r3, #1
 8006f90:	2300      	movne	r3, #0
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	461a      	mov	r2, r3
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fa2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fb0:	0c1b      	lsrs	r3, r3, #16
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fc0:	f003 0301 	and.w	r3, r3, #1
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	bf14      	ite	ne
 8006fc8:	2301      	movne	r3, #1
 8006fca:	2300      	moveq	r3, #0
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	461a      	mov	r2, r3
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fde:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	bf14      	ite	ne
 8006fe6:	2301      	movne	r3, #1
 8006fe8:	2300      	moveq	r3, #0
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8006ffc:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800700c:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 800701c:	f003 0308 	and.w	r3, r3, #8
 8007020:	2b00      	cmp	r3, #0
 8007022:	bf14      	ite	ne
 8007024:	2301      	movne	r3, #1
 8007026:	2300      	moveq	r3, #0
 8007028:	b2db      	uxtb	r3, r3
 800702a:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800703a:	f003 0310 	and.w	r3, r3, #16
 800703e:	2b00      	cmp	r3, #0
 8007040:	bf14      	ite	ne
 8007042:	2301      	movne	r3, #1
 8007044:	2300      	moveq	r3, #0
 8007046:	b2db      	uxtb	r3, r3
 8007048:	461a      	mov	r2, r3
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8007058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800705c:	2b00      	cmp	r3, #0
 800705e:	bf0c      	ite	eq
 8007060:	2301      	moveq	r3, #1
 8007062:	2300      	movne	r3, #0
 8007064:	b2db      	uxtb	r3, r3
 8007066:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d101      	bne.n	8007090 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	e00b      	b.n	80070a8 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007096:	2b10      	cmp	r3, #16
 8007098:	d105      	bne.n	80070a6 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800709a:	6839      	ldr	r1, [r7, #0]
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 f85f 	bl	8007160 <ETH_SetMACConfig>

    return HAL_OK;
 80070a2:	2300      	movs	r3, #0
 80070a4:	e000      	b.n	80070a8 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
  }
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3708      	adds	r7, #8
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80070c0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80070c8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80070ca:	f003 fec3 	bl	800ae54 <HAL_RCC_GetHCLKFreq>
 80070ce:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	4a1e      	ldr	r2, [pc, #120]	; (800714c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d908      	bls.n	80070ea <HAL_ETH_SetMDIOClockRange+0x3a>
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	4a1d      	ldr	r2, [pc, #116]	; (8007150 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d804      	bhi.n	80070ea <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80070e6:	60fb      	str	r3, [r7, #12]
 80070e8:	e027      	b.n	800713a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	4a18      	ldr	r2, [pc, #96]	; (8007150 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d908      	bls.n	8007104 <HAL_ETH_SetMDIOClockRange+0x54>
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	4a17      	ldr	r2, [pc, #92]	; (8007154 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d204      	bcs.n	8007104 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007100:	60fb      	str	r3, [r7, #12]
 8007102:	e01a      	b.n	800713a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	4a13      	ldr	r2, [pc, #76]	; (8007154 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d303      	bcc.n	8007114 <HAL_ETH_SetMDIOClockRange+0x64>
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	4a12      	ldr	r2, [pc, #72]	; (8007158 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d911      	bls.n	8007138 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	4a10      	ldr	r2, [pc, #64]	; (8007158 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d908      	bls.n	800712e <HAL_ETH_SetMDIOClockRange+0x7e>
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	4a0f      	ldr	r2, [pc, #60]	; (800715c <HAL_ETH_SetMDIOClockRange+0xac>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d804      	bhi.n	800712e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800712a:	60fb      	str	r3, [r7, #12]
 800712c:	e005      	b.n	800713a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007134:	60fb      	str	r3, [r7, #12]
 8007136:	e000      	b.n	800713a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8007138:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8007144:	bf00      	nop
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	01312cff 	.word	0x01312cff
 8007150:	02160ebf 	.word	0x02160ebf
 8007154:	03938700 	.word	0x03938700
 8007158:	05f5e0ff 	.word	0x05f5e0ff
 800715c:	08f0d17f 	.word	0x08f0d17f

08007160 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8007172:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	791b      	ldrb	r3, [r3, #4]
 8007178:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800717a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	7b1b      	ldrb	r3, [r3, #12]
 8007180:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8007182:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	7b5b      	ldrb	r3, [r3, #13]
 8007188:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800718a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	7b9b      	ldrb	r3, [r3, #14]
 8007190:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8007192:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	7bdb      	ldrb	r3, [r3, #15]
 8007198:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800719a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800719c:	683a      	ldr	r2, [r7, #0]
 800719e:	7c12      	ldrb	r2, [r2, #16]
 80071a0:	2a00      	cmp	r2, #0
 80071a2:	d102      	bne.n	80071aa <ETH_SetMACConfig+0x4a>
 80071a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80071a8:	e000      	b.n	80071ac <ETH_SetMACConfig+0x4c>
 80071aa:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80071ac:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80071ae:	683a      	ldr	r2, [r7, #0]
 80071b0:	7c52      	ldrb	r2, [r2, #17]
 80071b2:	2a00      	cmp	r2, #0
 80071b4:	d102      	bne.n	80071bc <ETH_SetMACConfig+0x5c>
 80071b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80071ba:	e000      	b.n	80071be <ETH_SetMACConfig+0x5e>
 80071bc:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80071be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	7c9b      	ldrb	r3, [r3, #18]
 80071c4:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80071c6:	431a      	orrs	r2, r3
               macconf->Speed |
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80071cc:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80071d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	7f1b      	ldrb	r3, [r3, #28]
 80071d8:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80071da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	7f5b      	ldrb	r3, [r3, #29]
 80071e0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80071e2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80071e4:	683a      	ldr	r2, [r7, #0]
 80071e6:	7f92      	ldrb	r2, [r2, #30]
 80071e8:	2a00      	cmp	r2, #0
 80071ea:	d102      	bne.n	80071f2 <ETH_SetMACConfig+0x92>
 80071ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80071f0:	e000      	b.n	80071f4 <ETH_SetMACConfig+0x94>
 80071f2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80071f4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	7fdb      	ldrb	r3, [r3, #31]
 80071fa:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80071fc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80071fe:	683a      	ldr	r2, [r7, #0]
 8007200:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007204:	2a00      	cmp	r2, #0
 8007206:	d102      	bne.n	800720e <ETH_SetMACConfig+0xae>
 8007208:	f44f 7280 	mov.w	r2, #256	; 0x100
 800720c:	e000      	b.n	8007210 <ETH_SetMACConfig+0xb0>
 800720e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8007210:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8007216:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800721e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8007220:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8007226:	4313      	orrs	r3, r2
 8007228:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	4b56      	ldr	r3, [pc, #344]	; (800738c <ETH_SetMACConfig+0x22c>)
 8007232:	4013      	ands	r3, r2
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	6812      	ldr	r2, [r2, #0]
 8007238:	68f9      	ldr	r1, [r7, #12]
 800723a:	430b      	orrs	r3, r1
 800723c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007242:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800724a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800724c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007254:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8007256:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800725e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8007260:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8007262:	683a      	ldr	r2, [r7, #0]
 8007264:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8007268:	2a00      	cmp	r2, #0
 800726a:	d102      	bne.n	8007272 <ETH_SetMACConfig+0x112>
 800726c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007270:	e000      	b.n	8007274 <ETH_SetMACConfig+0x114>
 8007272:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8007274:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800727a:	4313      	orrs	r3, r2
 800727c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	685a      	ldr	r2, [r3, #4]
 8007284:	4b42      	ldr	r3, [pc, #264]	; (8007390 <ETH_SetMACConfig+0x230>)
 8007286:	4013      	ands	r3, r2
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	6812      	ldr	r2, [r2, #0]
 800728c:	68f9      	ldr	r1, [r7, #12]
 800728e:	430b      	orrs	r3, r1
 8007290:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007298:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800729e:	4313      	orrs	r3, r2
 80072a0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68da      	ldr	r2, [r3, #12]
 80072a8:	4b3a      	ldr	r3, [pc, #232]	; (8007394 <ETH_SetMACConfig+0x234>)
 80072aa:	4013      	ands	r3, r2
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	6812      	ldr	r2, [r2, #0]
 80072b0:	68f9      	ldr	r1, [r7, #12]
 80072b2:	430b      	orrs	r3, r1
 80072b4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80072bc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80072c2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80072c4:	683a      	ldr	r2, [r7, #0]
 80072c6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80072ca:	2a00      	cmp	r2, #0
 80072cc:	d101      	bne.n	80072d2 <ETH_SetMACConfig+0x172>
 80072ce:	2280      	movs	r2, #128	; 0x80
 80072d0:	e000      	b.n	80072d4 <ETH_SetMACConfig+0x174>
 80072d2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80072d4:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072da:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80072dc:	4313      	orrs	r3, r2
 80072de:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80072e6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80072ea:	4013      	ands	r3, r2
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	6812      	ldr	r2, [r2, #0]
 80072f0:	68f9      	ldr	r1, [r7, #12]
 80072f2:	430b      	orrs	r3, r1
 80072f4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80072fc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8007304:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8007306:	4313      	orrs	r3, r2
 8007308:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007312:	f023 0103 	bic.w	r1, r3, #3
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	68fa      	ldr	r2, [r7, #12]
 800731c:	430a      	orrs	r2, r1
 800731e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800732a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	430a      	orrs	r2, r1
 8007338:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8007340:	683a      	ldr	r2, [r7, #0]
 8007342:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8007346:	2a00      	cmp	r2, #0
 8007348:	d101      	bne.n	800734e <ETH_SetMACConfig+0x1ee>
 800734a:	2240      	movs	r2, #64	; 0x40
 800734c:	e000      	b.n	8007350 <ETH_SetMACConfig+0x1f0>
 800734e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8007350:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007358:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800735a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8007362:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8007364:	4313      	orrs	r3, r2
 8007366:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8007370:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	430a      	orrs	r2, r1
 800737c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8007380:	bf00      	nop
 8007382:	3714      	adds	r7, #20
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr
 800738c:	00048083 	.word	0x00048083
 8007390:	c0f88000 	.word	0xc0f88000
 8007394:	fffffef0 	.word	0xfffffef0

08007398 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	4b38      	ldr	r3, [pc, #224]	; (8007490 <ETH_SetDMAConfig+0xf8>)
 80073ae:	4013      	ands	r3, r2
 80073b0:	683a      	ldr	r2, [r7, #0]
 80073b2:	6811      	ldr	r1, [r2, #0]
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	6812      	ldr	r2, [r2, #0]
 80073b8:	430b      	orrs	r3, r1
 80073ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80073be:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	791b      	ldrb	r3, [r3, #4]
 80073c4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80073ca:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	7b1b      	ldrb	r3, [r3, #12]
 80073d0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80073d2:	4313      	orrs	r3, r2
 80073d4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073de:	685a      	ldr	r2, [r3, #4]
 80073e0:	4b2c      	ldr	r3, [pc, #176]	; (8007494 <ETH_SetDMAConfig+0xfc>)
 80073e2:	4013      	ands	r3, r2
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	6812      	ldr	r2, [r2, #0]
 80073e8:	68f9      	ldr	r1, [r7, #12]
 80073ea:	430b      	orrs	r3, r1
 80073ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80073f0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	7b5b      	ldrb	r3, [r3, #13]
 80073f6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80073fc:	4313      	orrs	r3, r2
 80073fe:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007408:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800740c:	4b22      	ldr	r3, [pc, #136]	; (8007498 <ETH_SetDMAConfig+0x100>)
 800740e:	4013      	ands	r3, r2
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	6812      	ldr	r2, [r2, #0]
 8007414:	68f9      	ldr	r1, [r7, #12]
 8007416:	430b      	orrs	r3, r1
 8007418:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800741c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	7d1b      	ldrb	r3, [r3, #20]
 8007428:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800742a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	7f5b      	ldrb	r3, [r3, #29]
 8007430:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8007432:	4313      	orrs	r3, r2
 8007434:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800743e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8007442:	4b16      	ldr	r3, [pc, #88]	; (800749c <ETH_SetDMAConfig+0x104>)
 8007444:	4013      	ands	r3, r2
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	6812      	ldr	r2, [r2, #0]
 800744a:	68f9      	ldr	r1, [r7, #12]
 800744c:	430b      	orrs	r3, r1
 800744e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007452:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	7f1b      	ldrb	r3, [r3, #28]
 800745a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8007460:	4313      	orrs	r3, r2
 8007462:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800746c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8007470:	4b0b      	ldr	r3, [pc, #44]	; (80074a0 <ETH_SetDMAConfig+0x108>)
 8007472:	4013      	ands	r3, r2
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	6812      	ldr	r2, [r2, #0]
 8007478:	68f9      	ldr	r1, [r7, #12]
 800747a:	430b      	orrs	r3, r1
 800747c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007480:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8007484:	bf00      	nop
 8007486:	3714      	adds	r7, #20
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr
 8007490:	ffff87fd 	.word	0xffff87fd
 8007494:	ffff2ffe 	.word	0xffff2ffe
 8007498:	fffec000 	.word	0xfffec000
 800749c:	ffc0efef 	.word	0xffc0efef
 80074a0:	7fc0ffff 	.word	0x7fc0ffff

080074a4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b0a4      	sub	sp, #144	; 0x90
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80074ac:	2301      	movs	r3, #1
 80074ae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80074b2:	2300      	movs	r3, #0
 80074b4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80074b6:	2300      	movs	r3, #0
 80074b8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80074bc:	2300      	movs	r3, #0
 80074be:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80074c2:	2301      	movs	r3, #1
 80074c4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80074c8:	2301      	movs	r3, #1
 80074ca:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80074ce:	2301      	movs	r3, #1
 80074d0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80074d4:	2300      	movs	r3, #0
 80074d6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80074da:	2301      	movs	r3, #1
 80074dc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80074e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80074e4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80074e6:	2300      	movs	r3, #0
 80074e8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80074ec:	2300      	movs	r3, #0
 80074ee:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80074f0:	2300      	movs	r3, #0
 80074f2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80074f6:	2300      	movs	r3, #0
 80074f8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80074fc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8007500:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8007502:	2300      	movs	r3, #0
 8007504:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8007508:	2300      	movs	r3, #0
 800750a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800750c:	2301      	movs	r3, #1
 800750e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8007512:	2300      	movs	r3, #0
 8007514:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8007518:	2300      	movs	r3, #0
 800751a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800751e:	2300      	movs	r3, #0
 8007520:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8007522:	2300      	movs	r3, #0
 8007524:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8007526:	2300      	movs	r3, #0
 8007528:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800752a:	2300      	movs	r3, #0
 800752c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8007530:	2300      	movs	r3, #0
 8007532:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8007536:	2301      	movs	r3, #1
 8007538:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800753c:	2320      	movs	r3, #32
 800753e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8007542:	2301      	movs	r3, #1
 8007544:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8007548:	2300      	movs	r3, #0
 800754a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800754e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8007552:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8007554:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007558:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800755a:	2300      	movs	r3, #0
 800755c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8007560:	2302      	movs	r3, #2
 8007562:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8007566:	2300      	movs	r3, #0
 8007568:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800756c:	2300      	movs	r3, #0
 800756e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8007572:	2300      	movs	r3, #0
 8007574:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8007578:	2301      	movs	r3, #1
 800757a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800757e:	2300      	movs	r3, #0
 8007580:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8007582:	2301      	movs	r3, #1
 8007584:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8007588:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800758c:	4619      	mov	r1, r3
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f7ff fde6 	bl	8007160 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8007594:	2301      	movs	r3, #1
 8007596:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8007598:	2301      	movs	r3, #1
 800759a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800759c:	2300      	movs	r3, #0
 800759e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80075a0:	2300      	movs	r3, #0
 80075a2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80075a6:	2300      	movs	r3, #0
 80075a8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80075aa:	2300      	movs	r3, #0
 80075ac:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80075ae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80075b2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80075b4:	2300      	movs	r3, #0
 80075b6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80075b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80075bc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80075be:	2300      	movs	r3, #0
 80075c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80075c4:	f44f 7306 	mov.w	r3, #536	; 0x218
 80075c8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80075ca:	f107 0308 	add.w	r3, r7, #8
 80075ce:	4619      	mov	r1, r3
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f7ff fee1 	bl	8007398 <ETH_SetDMAConfig>
}
 80075d6:	bf00      	nop
 80075d8:	3790      	adds	r7, #144	; 0x90
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80075de:	b480      	push	{r7}
 80075e0:	b085      	sub	sp, #20
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80075e6:	2300      	movs	r3, #0
 80075e8:	60fb      	str	r3, [r7, #12]
 80075ea:	e01d      	b.n	8007628 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	68d9      	ldr	r1, [r3, #12]
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	4613      	mov	r3, r2
 80075f4:	005b      	lsls	r3, r3, #1
 80075f6:	4413      	add	r3, r2
 80075f8:	00db      	lsls	r3, r3, #3
 80075fa:	440b      	add	r3, r1
 80075fc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	2200      	movs	r2, #0
 8007602:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	2200      	movs	r2, #0
 8007608:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	2200      	movs	r2, #0
 800760e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	2200      	movs	r2, #0
 8007614:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8007616:	68b9      	ldr	r1, [r7, #8]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	3206      	adds	r2, #6
 800761e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	3301      	adds	r3, #1
 8007626:	60fb      	str	r3, [r7, #12]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2b03      	cmp	r3, #3
 800762c:	d9de      	bls.n	80075ec <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800763c:	461a      	mov	r2, r3
 800763e:	2303      	movs	r3, #3
 8007640:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	68da      	ldr	r2, [r3, #12]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007650:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	68da      	ldr	r2, [r3, #12]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007660:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8007664:	bf00      	nop
 8007666:	3714      	adds	r7, #20
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8007670:	b480      	push	{r7}
 8007672:	b085      	sub	sp, #20
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007678:	2300      	movs	r3, #0
 800767a:	60fb      	str	r3, [r7, #12]
 800767c:	e023      	b.n	80076c6 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6919      	ldr	r1, [r3, #16]
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	4613      	mov	r3, r2
 8007686:	005b      	lsls	r3, r3, #1
 8007688:	4413      	add	r3, r2
 800768a:	00db      	lsls	r3, r3, #3
 800768c:	440b      	add	r3, r1
 800768e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	2200      	movs	r2, #0
 8007694:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	2200      	movs	r2, #0
 800769a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	2200      	movs	r2, #0
 80076a0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	2200      	movs	r2, #0
 80076a6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	2200      	movs	r2, #0
 80076ac:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	2200      	movs	r2, #0
 80076b2:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80076b4:	68b9      	ldr	r1, [r7, #8]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	3212      	adds	r2, #18
 80076bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	3301      	adds	r3, #1
 80076c4:	60fb      	str	r3, [r7, #12]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2b03      	cmp	r3, #3
 80076ca:	d9d8      	bls.n	800767e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076f2:	461a      	mov	r2, r3
 80076f4:	2303      	movs	r3, #3
 80076f6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	691a      	ldr	r2, [r3, #16]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007706:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800771a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800771e:	bf00      	nop
 8007720:	3714      	adds	r7, #20
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
	...

0800772c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800772c:	b480      	push	{r7}
 800772e:	b08d      	sub	sp, #52	; 0x34
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	3318      	adds	r3, #24
 800773c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800774a:	2300      	movs	r3, #0
 800774c:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007756:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800775e:	2300      	movs	r3, #0
 8007760:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8007762:	6a3b      	ldr	r3, [r7, #32]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800776a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800776e:	d007      	beq.n	8007780 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8007770:	697a      	ldr	r2, [r7, #20]
 8007772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007774:	3304      	adds	r3, #4
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	4413      	add	r3, r2
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d001      	beq.n	8007784 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8007780:	2302      	movs	r3, #2
 8007782:	e259      	b.n	8007c38 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 0304 	and.w	r3, r3, #4
 800778c:	2b00      	cmp	r3, #0
 800778e:	d044      	beq.n	800781a <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8007790:	6a3b      	ldr	r3, [r7, #32]
 8007792:	68da      	ldr	r2, [r3, #12]
 8007794:	4b75      	ldr	r3, [pc, #468]	; (800796c <ETH_Prepare_Tx_Descriptors+0x240>)
 8007796:	4013      	ands	r3, r2
 8007798:	68ba      	ldr	r2, [r7, #8]
 800779a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800779c:	431a      	orrs	r2, r3
 800779e:	6a3b      	ldr	r3, [r7, #32]
 80077a0:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80077a2:	6a3b      	ldr	r3, [r7, #32]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80077aa:	6a3b      	ldr	r3, [r7, #32]
 80077ac:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80077bc:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f003 0308 	and.w	r3, r3, #8
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d027      	beq.n	800781a <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80077ca:	6a3b      	ldr	r3, [r7, #32]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	b29a      	uxth	r2, r3
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d4:	041b      	lsls	r3, r3, #16
 80077d6:	431a      	orrs	r2, r3
 80077d8:	6a3b      	ldr	r3, [r7, #32]
 80077da:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80077dc:	6a3b      	ldr	r3, [r7, #32]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80077e4:	6a3b      	ldr	r3, [r7, #32]
 80077e6:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80077e8:	6a3b      	ldr	r3, [r7, #32]
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f4:	431a      	orrs	r2, r3
 80077f6:	6a3b      	ldr	r3, [r7, #32]
 80077f8:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007808:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007818:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 0310 	and.w	r3, r3, #16
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00e      	beq.n	8007844 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8007826:	6a3b      	ldr	r3, [r7, #32]
 8007828:	689a      	ldr	r2, [r3, #8]
 800782a:	4b51      	ldr	r3, [pc, #324]	; (8007970 <ETH_Prepare_Tx_Descriptors+0x244>)
 800782c:	4013      	ands	r3, r2
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	6992      	ldr	r2, [r2, #24]
 8007832:	431a      	orrs	r2, r3
 8007834:	6a3b      	ldr	r3, [r7, #32]
 8007836:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8007838:	6a3b      	ldr	r3, [r7, #32]
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007840:	6a3b      	ldr	r3, [r7, #32]
 8007842:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 0304 	and.w	r3, r3, #4
 800784c:	2b00      	cmp	r3, #0
 800784e:	d105      	bne.n	800785c <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f003 0310 	and.w	r3, r3, #16
 8007858:	2b00      	cmp	r3, #0
 800785a:	d036      	beq.n	80078ca <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 800785c:	6a3b      	ldr	r3, [r7, #32]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007864:	6a3b      	ldr	r3, [r7, #32]
 8007866:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8007868:	f3bf 8f5f 	dmb	sy
}
 800786c:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800786e:	6a3b      	ldr	r3, [r7, #32]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007876:	6a3b      	ldr	r3, [r7, #32]
 8007878:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800787a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787c:	3301      	adds	r3, #1
 800787e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007882:	2b03      	cmp	r3, #3
 8007884:	d902      	bls.n	800788c <ETH_Prepare_Tx_Descriptors+0x160>
 8007886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007888:	3b04      	subs	r3, #4
 800788a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007894:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8007896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007898:	3301      	adds	r3, #1
 800789a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800789c:	6a3b      	ldr	r3, [r7, #32]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078a8:	d10f      	bne.n	80078ca <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	693a      	ldr	r2, [r7, #16]
 80078ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078b2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 80078b4:	f3bf 8f5f 	dmb	sy
}
 80078b8:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80078ba:	6a3b      	ldr	r3, [r7, #32]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80078c2:	6a3b      	ldr	r3, [r7, #32]
 80078c4:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80078c6:	2302      	movs	r3, #2
 80078c8:	e1b6      	b.n	8007c38 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80078ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078cc:	3301      	adds	r3, #1
 80078ce:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	461a      	mov	r2, r3
 80078d6:	6a3b      	ldr	r3, [r7, #32]
 80078d8:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80078da:	6a3b      	ldr	r3, [r7, #32]
 80078dc:	689a      	ldr	r2, [r3, #8]
 80078de:	4b24      	ldr	r3, [pc, #144]	; (8007970 <ETH_Prepare_Tx_Descriptors+0x244>)
 80078e0:	4013      	ands	r3, r2
 80078e2:	69fa      	ldr	r2, [r7, #28]
 80078e4:	6852      	ldr	r2, [r2, #4]
 80078e6:	431a      	orrs	r2, r3
 80078e8:	6a3b      	ldr	r3, [r7, #32]
 80078ea:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d012      	beq.n	800791a <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	461a      	mov	r2, r3
 8007900:	6a3b      	ldr	r3, [r7, #32]
 8007902:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8007904:	6a3b      	ldr	r3, [r7, #32]
 8007906:	689a      	ldr	r2, [r3, #8]
 8007908:	4b1a      	ldr	r3, [pc, #104]	; (8007974 <ETH_Prepare_Tx_Descriptors+0x248>)
 800790a:	4013      	ands	r3, r2
 800790c:	69fa      	ldr	r2, [r7, #28]
 800790e:	6852      	ldr	r2, [r2, #4]
 8007910:	0412      	lsls	r2, r2, #16
 8007912:	431a      	orrs	r2, r3
 8007914:	6a3b      	ldr	r3, [r7, #32]
 8007916:	609a      	str	r2, [r3, #8]
 8007918:	e008      	b.n	800792c <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800791a:	6a3b      	ldr	r3, [r7, #32]
 800791c:	2200      	movs	r2, #0
 800791e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8007920:	6a3b      	ldr	r3, [r7, #32]
 8007922:	689a      	ldr	r2, [r3, #8]
 8007924:	4b13      	ldr	r3, [pc, #76]	; (8007974 <ETH_Prepare_Tx_Descriptors+0x248>)
 8007926:	4013      	ands	r3, r2
 8007928:	6a3a      	ldr	r2, [r7, #32]
 800792a:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f003 0310 	and.w	r3, r3, #16
 8007934:	2b00      	cmp	r3, #0
 8007936:	d021      	beq.n	800797c <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8007938:	6a3b      	ldr	r3, [r7, #32]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	6a1b      	ldr	r3, [r3, #32]
 8007944:	04db      	lsls	r3, r3, #19
 8007946:	431a      	orrs	r2, r3
 8007948:	6a3b      	ldr	r3, [r7, #32]
 800794a:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800794c:	6a3b      	ldr	r3, [r7, #32]
 800794e:	68da      	ldr	r2, [r3, #12]
 8007950:	4b09      	ldr	r3, [pc, #36]	; (8007978 <ETH_Prepare_Tx_Descriptors+0x24c>)
 8007952:	4013      	ands	r3, r2
 8007954:	68ba      	ldr	r2, [r7, #8]
 8007956:	69d2      	ldr	r2, [r2, #28]
 8007958:	431a      	orrs	r2, r3
 800795a:	6a3b      	ldr	r3, [r7, #32]
 800795c:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800795e:	6a3b      	ldr	r3, [r7, #32]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007966:	6a3b      	ldr	r3, [r7, #32]
 8007968:	60da      	str	r2, [r3, #12]
 800796a:	e02e      	b.n	80079ca <ETH_Prepare_Tx_Descriptors+0x29e>
 800796c:	ffff0000 	.word	0xffff0000
 8007970:	ffffc000 	.word	0xffffc000
 8007974:	c000ffff 	.word	0xc000ffff
 8007978:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800797c:	6a3b      	ldr	r3, [r7, #32]
 800797e:	68da      	ldr	r2, [r3, #12]
 8007980:	4b7b      	ldr	r3, [pc, #492]	; (8007b70 <ETH_Prepare_Tx_Descriptors+0x444>)
 8007982:	4013      	ands	r3, r2
 8007984:	68ba      	ldr	r2, [r7, #8]
 8007986:	6852      	ldr	r2, [r2, #4]
 8007988:	431a      	orrs	r2, r3
 800798a:	6a3b      	ldr	r3, [r7, #32]
 800798c:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f003 0301 	and.w	r3, r3, #1
 8007996:	2b00      	cmp	r3, #0
 8007998:	d008      	beq.n	80079ac <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800799a:	6a3b      	ldr	r3, [r7, #32]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	695b      	ldr	r3, [r3, #20]
 80079a6:	431a      	orrs	r2, r3
 80079a8:	6a3b      	ldr	r3, [r7, #32]
 80079aa:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 0320 	and.w	r3, r3, #32
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d008      	beq.n	80079ca <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80079b8:	6a3b      	ldr	r3, [r7, #32]
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	691b      	ldr	r3, [r3, #16]
 80079c4:	431a      	orrs	r2, r3
 80079c6:	6a3b      	ldr	r3, [r7, #32]
 80079c8:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f003 0304 	and.w	r3, r3, #4
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d008      	beq.n	80079e8 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80079d6:	6a3b      	ldr	r3, [r7, #32]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e2:	431a      	orrs	r2, r3
 80079e4:	6a3b      	ldr	r3, [r7, #32]
 80079e6:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80079e8:	6a3b      	ldr	r3, [r7, #32]
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80079f0:	6a3b      	ldr	r3, [r7, #32]
 80079f2:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80079f4:	6a3b      	ldr	r3, [r7, #32]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80079fc:	6a3b      	ldr	r3, [r7, #32]
 80079fe:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8007a00:	f3bf 8f5f 	dmb	sy
}
 8007a04:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8007a06:	6a3b      	ldr	r3, [r7, #32]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007a0e:	6a3b      	ldr	r3, [r7, #32]
 8007a10:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f003 0302 	and.w	r3, r3, #2
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	f000 80da 	beq.w	8007bd4 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8007a20:	6a3b      	ldr	r3, [r7, #32]
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	431a      	orrs	r2, r3
 8007a2e:	6a3b      	ldr	r3, [r7, #32]
 8007a30:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8007a32:	e0cf      	b.n	8007bd4 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8007a34:	6a3b      	ldr	r3, [r7, #32]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007a3c:	6a3b      	ldr	r3, [r7, #32]
 8007a3e:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8007a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a42:	3301      	adds	r3, #1
 8007a44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a48:	2b03      	cmp	r3, #3
 8007a4a:	d902      	bls.n	8007a52 <ETH_Prepare_Tx_Descriptors+0x326>
 8007a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4e:	3b04      	subs	r3, #4
 8007a50:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a5a:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8007a5c:	6a3b      	ldr	r3, [r7, #32]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007a64:	6a3b      	ldr	r3, [r7, #32]
 8007a66:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8007a68:	6a3b      	ldr	r3, [r7, #32]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a74:	d007      	beq.n	8007a86 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a7a:	3304      	adds	r3, #4
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	4413      	add	r3, r2
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d029      	beq.n	8007ada <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a92:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8007a94:	2300      	movs	r3, #0
 8007a96:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a98:	e019      	b.n	8007ace <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8007a9a:	f3bf 8f5f 	dmb	sy
}
 8007a9e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8007aa0:	6a3b      	ldr	r3, [r7, #32]
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007aa8:	6a3b      	ldr	r3, [r7, #32]
 8007aaa:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8007aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aae:	3301      	adds	r3, #1
 8007ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab4:	2b03      	cmp	r3, #3
 8007ab6:	d902      	bls.n	8007abe <ETH_Prepare_Tx_Descriptors+0x392>
 8007ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aba:	3b04      	subs	r3, #4
 8007abc:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac6:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8007ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aca:	3301      	adds	r3, #1
 8007acc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ace:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d3e1      	bcc.n	8007a9a <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8007ad6:	2302      	movs	r3, #2
 8007ad8:	e0ae      	b.n	8007c38 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 8007ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007adc:	3301      	adds	r3, #1
 8007ade:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	461a      	mov	r2, r3
 8007aec:	6a3b      	ldr	r3, [r7, #32]
 8007aee:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8007af0:	6a3b      	ldr	r3, [r7, #32]
 8007af2:	689a      	ldr	r2, [r3, #8]
 8007af4:	4b1f      	ldr	r3, [pc, #124]	; (8007b74 <ETH_Prepare_Tx_Descriptors+0x448>)
 8007af6:	4013      	ands	r3, r2
 8007af8:	69fa      	ldr	r2, [r7, #28]
 8007afa:	6852      	ldr	r2, [r2, #4]
 8007afc:	431a      	orrs	r2, r3
 8007afe:	6a3b      	ldr	r3, [r7, #32]
 8007b00:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d012      	beq.n	8007b30 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	461a      	mov	r2, r3
 8007b16:	6a3b      	ldr	r3, [r7, #32]
 8007b18:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8007b1a:	6a3b      	ldr	r3, [r7, #32]
 8007b1c:	689a      	ldr	r2, [r3, #8]
 8007b1e:	4b16      	ldr	r3, [pc, #88]	; (8007b78 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8007b20:	4013      	ands	r3, r2
 8007b22:	69fa      	ldr	r2, [r7, #28]
 8007b24:	6852      	ldr	r2, [r2, #4]
 8007b26:	0412      	lsls	r2, r2, #16
 8007b28:	431a      	orrs	r2, r3
 8007b2a:	6a3b      	ldr	r3, [r7, #32]
 8007b2c:	609a      	str	r2, [r3, #8]
 8007b2e:	e008      	b.n	8007b42 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8007b30:	6a3b      	ldr	r3, [r7, #32]
 8007b32:	2200      	movs	r2, #0
 8007b34:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8007b36:	6a3b      	ldr	r3, [r7, #32]
 8007b38:	689a      	ldr	r2, [r3, #8]
 8007b3a:	4b0f      	ldr	r3, [pc, #60]	; (8007b78 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8007b3c:	4013      	ands	r3, r2
 8007b3e:	6a3a      	ldr	r2, [r7, #32]
 8007b40:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 0310 	and.w	r3, r3, #16
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d018      	beq.n	8007b80 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8007b4e:	6a3b      	ldr	r3, [r7, #32]
 8007b50:	68da      	ldr	r2, [r3, #12]
 8007b52:	4b0a      	ldr	r3, [pc, #40]	; (8007b7c <ETH_Prepare_Tx_Descriptors+0x450>)
 8007b54:	4013      	ands	r3, r2
 8007b56:	68ba      	ldr	r2, [r7, #8]
 8007b58:	69d2      	ldr	r2, [r2, #28]
 8007b5a:	431a      	orrs	r2, r3
 8007b5c:	6a3b      	ldr	r3, [r7, #32]
 8007b5e:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8007b60:	6a3b      	ldr	r3, [r7, #32]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007b68:	6a3b      	ldr	r3, [r7, #32]
 8007b6a:	60da      	str	r2, [r3, #12]
 8007b6c:	e020      	b.n	8007bb0 <ETH_Prepare_Tx_Descriptors+0x484>
 8007b6e:	bf00      	nop
 8007b70:	ffff8000 	.word	0xffff8000
 8007b74:	ffffc000 	.word	0xffffc000
 8007b78:	c000ffff 	.word	0xc000ffff
 8007b7c:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8007b80:	6a3b      	ldr	r3, [r7, #32]
 8007b82:	68da      	ldr	r2, [r3, #12]
 8007b84:	4b2f      	ldr	r3, [pc, #188]	; (8007c44 <ETH_Prepare_Tx_Descriptors+0x518>)
 8007b86:	4013      	ands	r3, r2
 8007b88:	68ba      	ldr	r2, [r7, #8]
 8007b8a:	6852      	ldr	r2, [r2, #4]
 8007b8c:	431a      	orrs	r2, r3
 8007b8e:	6a3b      	ldr	r3, [r7, #32]
 8007b90:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 0301 	and.w	r3, r3, #1
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d008      	beq.n	8007bb0 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8007b9e:	6a3b      	ldr	r3, [r7, #32]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	695b      	ldr	r3, [r3, #20]
 8007baa:	431a      	orrs	r2, r3
 8007bac:	6a3b      	ldr	r3, [r7, #32]
 8007bae:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8007bb6:	f3bf 8f5f 	dmb	sy
}
 8007bba:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8007bbc:	6a3b      	ldr	r3, [r7, #32]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007bc4:	6a3b      	ldr	r3, [r7, #32]
 8007bc6:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8007bc8:	6a3b      	ldr	r3, [r7, #32]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007bd0:	6a3b      	ldr	r3, [r7, #32]
 8007bd2:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f47f af2b 	bne.w	8007a34 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d006      	beq.n	8007bf2 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8007be4:	6a3b      	ldr	r3, [r7, #32]
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007bec:	6a3b      	ldr	r3, [r7, #32]
 8007bee:	609a      	str	r2, [r3, #8]
 8007bf0:	e005      	b.n	8007bfe <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8007bf2:	6a3b      	ldr	r3, [r7, #32]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007bfa:	6a3b      	ldr	r3, [r7, #32]
 8007bfc:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8007bfe:	6a3b      	ldr	r3, [r7, #32]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007c06:	6a3b      	ldr	r3, [r7, #32]
 8007c08:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c0e:	6979      	ldr	r1, [r7, #20]
 8007c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c12:	3304      	adds	r3, #4
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	440b      	add	r3, r1
 8007c18:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c1e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007c20:	b672      	cpsid	i
}
 8007c22:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	1c5a      	adds	r2, r3, #1
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8007c32:	b662      	cpsie	i
}
 8007c34:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8007c36:	2300      	movs	r3, #0
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3734      	adds	r7, #52	; 0x34
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr
 8007c44:	ffff8000 	.word	0xffff8000

08007c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b089      	sub	sp, #36	; 0x24
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007c52:	2300      	movs	r3, #0
 8007c54:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007c56:	4b89      	ldr	r3, [pc, #548]	; (8007e7c <HAL_GPIO_Init+0x234>)
 8007c58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007c5a:	e194      	b.n	8007f86 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	2101      	movs	r1, #1
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	fa01 f303 	lsl.w	r3, r1, r3
 8007c68:	4013      	ands	r3, r2
 8007c6a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	f000 8186 	beq.w	8007f80 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	f003 0303 	and.w	r3, r3, #3
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d005      	beq.n	8007c8c <HAL_GPIO_Init+0x44>
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	f003 0303 	and.w	r3, r3, #3
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	d130      	bne.n	8007cee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	005b      	lsls	r3, r3, #1
 8007c96:	2203      	movs	r2, #3
 8007c98:	fa02 f303 	lsl.w	r3, r2, r3
 8007c9c:	43db      	mvns	r3, r3
 8007c9e:	69ba      	ldr	r2, [r7, #24]
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	68da      	ldr	r2, [r3, #12]
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	005b      	lsls	r3, r3, #1
 8007cac:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb0:	69ba      	ldr	r2, [r7, #24]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	69ba      	ldr	r2, [r7, #24]
 8007cba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cca:	43db      	mvns	r3, r3
 8007ccc:	69ba      	ldr	r2, [r7, #24]
 8007cce:	4013      	ands	r3, r2
 8007cd0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	091b      	lsrs	r3, r3, #4
 8007cd8:	f003 0201 	and.w	r2, r3, #1
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce2:	69ba      	ldr	r2, [r7, #24]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	69ba      	ldr	r2, [r7, #24]
 8007cec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	f003 0303 	and.w	r3, r3, #3
 8007cf6:	2b03      	cmp	r3, #3
 8007cf8:	d017      	beq.n	8007d2a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	005b      	lsls	r3, r3, #1
 8007d04:	2203      	movs	r2, #3
 8007d06:	fa02 f303 	lsl.w	r3, r2, r3
 8007d0a:	43db      	mvns	r3, r3
 8007d0c:	69ba      	ldr	r2, [r7, #24]
 8007d0e:	4013      	ands	r3, r2
 8007d10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	689a      	ldr	r2, [r3, #8]
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	005b      	lsls	r3, r3, #1
 8007d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d1e:	69ba      	ldr	r2, [r7, #24]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	69ba      	ldr	r2, [r7, #24]
 8007d28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	f003 0303 	and.w	r3, r3, #3
 8007d32:	2b02      	cmp	r3, #2
 8007d34:	d123      	bne.n	8007d7e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	08da      	lsrs	r2, r3, #3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	3208      	adds	r2, #8
 8007d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	f003 0307 	and.w	r3, r3, #7
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	220f      	movs	r2, #15
 8007d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d52:	43db      	mvns	r3, r3
 8007d54:	69ba      	ldr	r2, [r7, #24]
 8007d56:	4013      	ands	r3, r2
 8007d58:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	691a      	ldr	r2, [r3, #16]
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	f003 0307 	and.w	r3, r3, #7
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	fa02 f303 	lsl.w	r3, r2, r3
 8007d6a:	69ba      	ldr	r2, [r7, #24]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	08da      	lsrs	r2, r3, #3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	3208      	adds	r2, #8
 8007d78:	69b9      	ldr	r1, [r7, #24]
 8007d7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	005b      	lsls	r3, r3, #1
 8007d88:	2203      	movs	r2, #3
 8007d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d8e:	43db      	mvns	r3, r3
 8007d90:	69ba      	ldr	r2, [r7, #24]
 8007d92:	4013      	ands	r3, r2
 8007d94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	f003 0203 	and.w	r2, r3, #3
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	005b      	lsls	r3, r3, #1
 8007da2:	fa02 f303 	lsl.w	r3, r2, r3
 8007da6:	69ba      	ldr	r2, [r7, #24]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	69ba      	ldr	r2, [r7, #24]
 8007db0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	f000 80e0 	beq.w	8007f80 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007dc0:	4b2f      	ldr	r3, [pc, #188]	; (8007e80 <HAL_GPIO_Init+0x238>)
 8007dc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007dc6:	4a2e      	ldr	r2, [pc, #184]	; (8007e80 <HAL_GPIO_Init+0x238>)
 8007dc8:	f043 0302 	orr.w	r3, r3, #2
 8007dcc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007dd0:	4b2b      	ldr	r3, [pc, #172]	; (8007e80 <HAL_GPIO_Init+0x238>)
 8007dd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007dd6:	f003 0302 	and.w	r3, r3, #2
 8007dda:	60fb      	str	r3, [r7, #12]
 8007ddc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007dde:	4a29      	ldr	r2, [pc, #164]	; (8007e84 <HAL_GPIO_Init+0x23c>)
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	089b      	lsrs	r3, r3, #2
 8007de4:	3302      	adds	r3, #2
 8007de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	f003 0303 	and.w	r3, r3, #3
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	220f      	movs	r2, #15
 8007df6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dfa:	43db      	mvns	r3, r3
 8007dfc:	69ba      	ldr	r2, [r7, #24]
 8007dfe:	4013      	ands	r3, r2
 8007e00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a20      	ldr	r2, [pc, #128]	; (8007e88 <HAL_GPIO_Init+0x240>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d052      	beq.n	8007eb0 <HAL_GPIO_Init+0x268>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a1f      	ldr	r2, [pc, #124]	; (8007e8c <HAL_GPIO_Init+0x244>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d031      	beq.n	8007e76 <HAL_GPIO_Init+0x22e>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a1e      	ldr	r2, [pc, #120]	; (8007e90 <HAL_GPIO_Init+0x248>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d02b      	beq.n	8007e72 <HAL_GPIO_Init+0x22a>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a1d      	ldr	r2, [pc, #116]	; (8007e94 <HAL_GPIO_Init+0x24c>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d025      	beq.n	8007e6e <HAL_GPIO_Init+0x226>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4a1c      	ldr	r2, [pc, #112]	; (8007e98 <HAL_GPIO_Init+0x250>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d01f      	beq.n	8007e6a <HAL_GPIO_Init+0x222>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4a1b      	ldr	r2, [pc, #108]	; (8007e9c <HAL_GPIO_Init+0x254>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d019      	beq.n	8007e66 <HAL_GPIO_Init+0x21e>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4a1a      	ldr	r2, [pc, #104]	; (8007ea0 <HAL_GPIO_Init+0x258>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d013      	beq.n	8007e62 <HAL_GPIO_Init+0x21a>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4a19      	ldr	r2, [pc, #100]	; (8007ea4 <HAL_GPIO_Init+0x25c>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d00d      	beq.n	8007e5e <HAL_GPIO_Init+0x216>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a18      	ldr	r2, [pc, #96]	; (8007ea8 <HAL_GPIO_Init+0x260>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d007      	beq.n	8007e5a <HAL_GPIO_Init+0x212>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a17      	ldr	r2, [pc, #92]	; (8007eac <HAL_GPIO_Init+0x264>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d101      	bne.n	8007e56 <HAL_GPIO_Init+0x20e>
 8007e52:	2309      	movs	r3, #9
 8007e54:	e02d      	b.n	8007eb2 <HAL_GPIO_Init+0x26a>
 8007e56:	230a      	movs	r3, #10
 8007e58:	e02b      	b.n	8007eb2 <HAL_GPIO_Init+0x26a>
 8007e5a:	2308      	movs	r3, #8
 8007e5c:	e029      	b.n	8007eb2 <HAL_GPIO_Init+0x26a>
 8007e5e:	2307      	movs	r3, #7
 8007e60:	e027      	b.n	8007eb2 <HAL_GPIO_Init+0x26a>
 8007e62:	2306      	movs	r3, #6
 8007e64:	e025      	b.n	8007eb2 <HAL_GPIO_Init+0x26a>
 8007e66:	2305      	movs	r3, #5
 8007e68:	e023      	b.n	8007eb2 <HAL_GPIO_Init+0x26a>
 8007e6a:	2304      	movs	r3, #4
 8007e6c:	e021      	b.n	8007eb2 <HAL_GPIO_Init+0x26a>
 8007e6e:	2303      	movs	r3, #3
 8007e70:	e01f      	b.n	8007eb2 <HAL_GPIO_Init+0x26a>
 8007e72:	2302      	movs	r3, #2
 8007e74:	e01d      	b.n	8007eb2 <HAL_GPIO_Init+0x26a>
 8007e76:	2301      	movs	r3, #1
 8007e78:	e01b      	b.n	8007eb2 <HAL_GPIO_Init+0x26a>
 8007e7a:	bf00      	nop
 8007e7c:	58000080 	.word	0x58000080
 8007e80:	58024400 	.word	0x58024400
 8007e84:	58000400 	.word	0x58000400
 8007e88:	58020000 	.word	0x58020000
 8007e8c:	58020400 	.word	0x58020400
 8007e90:	58020800 	.word	0x58020800
 8007e94:	58020c00 	.word	0x58020c00
 8007e98:	58021000 	.word	0x58021000
 8007e9c:	58021400 	.word	0x58021400
 8007ea0:	58021800 	.word	0x58021800
 8007ea4:	58021c00 	.word	0x58021c00
 8007ea8:	58022000 	.word	0x58022000
 8007eac:	58022400 	.word	0x58022400
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	69fa      	ldr	r2, [r7, #28]
 8007eb4:	f002 0203 	and.w	r2, r2, #3
 8007eb8:	0092      	lsls	r2, r2, #2
 8007eba:	4093      	lsls	r3, r2
 8007ebc:	69ba      	ldr	r2, [r7, #24]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007ec2:	4938      	ldr	r1, [pc, #224]	; (8007fa4 <HAL_GPIO_Init+0x35c>)
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	089b      	lsrs	r3, r3, #2
 8007ec8:	3302      	adds	r3, #2
 8007eca:	69ba      	ldr	r2, [r7, #24]
 8007ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	43db      	mvns	r3, r3
 8007edc:	69ba      	ldr	r2, [r7, #24]
 8007ede:	4013      	ands	r3, r2
 8007ee0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d003      	beq.n	8007ef6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007eee:	69ba      	ldr	r2, [r7, #24]
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007ef6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	43db      	mvns	r3, r3
 8007f0a:	69ba      	ldr	r2, [r7, #24]
 8007f0c:	4013      	ands	r3, r2
 8007f0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d003      	beq.n	8007f24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007f1c:	69ba      	ldr	r2, [r7, #24]
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	4313      	orrs	r3, r2
 8007f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007f24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f28:	69bb      	ldr	r3, [r7, #24]
 8007f2a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	43db      	mvns	r3, r3
 8007f36:	69ba      	ldr	r2, [r7, #24]
 8007f38:	4013      	ands	r3, r2
 8007f3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d003      	beq.n	8007f50 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007f48:	69ba      	ldr	r2, [r7, #24]
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	69ba      	ldr	r2, [r7, #24]
 8007f54:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	43db      	mvns	r3, r3
 8007f60:	69ba      	ldr	r2, [r7, #24]
 8007f62:	4013      	ands	r3, r2
 8007f64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d003      	beq.n	8007f7a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007f72:	69ba      	ldr	r2, [r7, #24]
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	69ba      	ldr	r2, [r7, #24]
 8007f7e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	3301      	adds	r3, #1
 8007f84:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f47f ae63 	bne.w	8007c5c <HAL_GPIO_Init+0x14>
  }
}
 8007f96:	bf00      	nop
 8007f98:	bf00      	nop
 8007f9a:	3724      	adds	r7, #36	; 0x24
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr
 8007fa4:	58000400 	.word	0x58000400

08007fa8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b085      	sub	sp, #20
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	691a      	ldr	r2, [r3, #16]
 8007fb8:	887b      	ldrh	r3, [r7, #2]
 8007fba:	4013      	ands	r3, r2
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d002      	beq.n	8007fc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	73fb      	strb	r3, [r7, #15]
 8007fc4:	e001      	b.n	8007fca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3714      	adds	r7, #20
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	807b      	strh	r3, [r7, #2]
 8007fe4:	4613      	mov	r3, r2
 8007fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007fe8:	787b      	ldrb	r3, [r7, #1]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d003      	beq.n	8007ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007fee:	887a      	ldrh	r2, [r7, #2]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007ff4:	e003      	b.n	8007ffe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007ff6:	887b      	ldrh	r3, [r7, #2]
 8007ff8:	041a      	lsls	r2, r3, #16
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	619a      	str	r2, [r3, #24]
}
 8007ffe:	bf00      	nop
 8008000:	370c      	adds	r7, #12
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr

0800800a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800800a:	b480      	push	{r7}
 800800c:	b085      	sub	sp, #20
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
 8008012:	460b      	mov	r3, r1
 8008014:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	695b      	ldr	r3, [r3, #20]
 800801a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800801c:	887a      	ldrh	r2, [r7, #2]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	4013      	ands	r3, r2
 8008022:	041a      	lsls	r2, r3, #16
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	43d9      	mvns	r1, r3
 8008028:	887b      	ldrh	r3, [r7, #2]
 800802a:	400b      	ands	r3, r1
 800802c:	431a      	orrs	r2, r3
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	619a      	str	r2, [r3, #24]
}
 8008032:	bf00      	nop
 8008034:	3714      	adds	r7, #20
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800803e:	b580      	push	{r7, lr}
 8008040:	b082      	sub	sp, #8
 8008042:	af00      	add	r7, sp, #0
 8008044:	4603      	mov	r3, r0
 8008046:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8008048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800804c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008050:	88fb      	ldrh	r3, [r7, #6]
 8008052:	4013      	ands	r3, r2
 8008054:	2b00      	cmp	r3, #0
 8008056:	d008      	beq.n	800806a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008058:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800805c:	88fb      	ldrh	r3, [r7, #6]
 800805e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008062:	88fb      	ldrh	r3, [r7, #6]
 8008064:	4618      	mov	r0, r3
 8008066:	f000 f804 	bl	8008072 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800806a:	bf00      	nop
 800806c:	3708      	adds	r7, #8
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008072:	b480      	push	{r7}
 8008074:	b083      	sub	sp, #12
 8008076:	af00      	add	r7, sp, #0
 8008078:	4603      	mov	r3, r0
 800807a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800807c:	bf00      	nop
 800807e:	370c      	adds	r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b086      	sub	sp, #24
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d101      	bne.n	800809a <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	e0bd      	b.n	8008216 <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2202      	movs	r2, #2
 800809e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	f003 0301 	and.w	r3, r3, #1
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d031      	beq.n	8008142 <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a4f      	ldr	r2, [pc, #316]	; (8008220 <HAL_HRTIM_Init+0x198>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d10e      	bne.n	8008106 <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 80080e8:	4b4e      	ldr	r3, [pc, #312]	; (8008224 <HAL_HRTIM_Init+0x19c>)
 80080ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80080ee:	4a4d      	ldr	r2, [pc, #308]	; (8008224 <HAL_HRTIM_Init+0x19c>)
 80080f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80080f4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80080f8:	4b4a      	ldr	r3, [pc, #296]	; (8008224 <HAL_HRTIM_Init+0x19c>)
 80080fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80080fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008102:	60fb      	str	r3, [r7, #12]
 8008104:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008114:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	691b      	ldr	r3, [r3, #16]
 800811a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800811e:	693a      	ldr	r2, [r7, #16]
 8008120:	4313      	orrs	r3, r2
 8008122:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800812a:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	695b      	ldr	r3, [r3, #20]
 8008130:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008134:	693a      	ldr	r2, [r7, #16]
 8008136:	4313      	orrs	r3, r2
 8008138:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	693a      	ldr	r2, [r7, #16]
 8008140:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f7fb fa60 	bl	8003608 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	f003 0302 	and.w	r3, r3, #2
 8008150:	2b00      	cmp	r3, #0
 8008152:	d012      	beq.n	800817a <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008162:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800816c:	693a      	ldr	r2, [r7, #16]
 800816e:	4313      	orrs	r3, r2
 8008170:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	693a      	ldr	r2, [r7, #16]
 8008178:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2201      	movs	r2, #1
 800817e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800818a:	2300      	movs	r3, #0
 800818c:	75fb      	strb	r3, [r7, #23]
 800818e:	e03e      	b.n	800820e <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8008190:	7dfa      	ldrb	r2, [r7, #23]
 8008192:	6879      	ldr	r1, [r7, #4]
 8008194:	4613      	mov	r3, r2
 8008196:	00db      	lsls	r3, r3, #3
 8008198:	1a9b      	subs	r3, r3, r2
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	440b      	add	r3, r1
 800819e:	3318      	adds	r3, #24
 80081a0:	2200      	movs	r2, #0
 80081a2:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 80081a4:	7dfa      	ldrb	r2, [r7, #23]
 80081a6:	6879      	ldr	r1, [r7, #4]
 80081a8:	4613      	mov	r3, r2
 80081aa:	00db      	lsls	r3, r3, #3
 80081ac:	1a9b      	subs	r3, r3, r2
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	440b      	add	r3, r1
 80081b2:	331c      	adds	r3, #28
 80081b4:	2200      	movs	r2, #0
 80081b6:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 80081b8:	7dfa      	ldrb	r2, [r7, #23]
 80081ba:	6879      	ldr	r1, [r7, #4]
 80081bc:	4613      	mov	r3, r2
 80081be:	00db      	lsls	r3, r3, #3
 80081c0:	1a9b      	subs	r3, r3, r2
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	440b      	add	r3, r1
 80081c6:	3320      	adds	r3, #32
 80081c8:	2200      	movs	r2, #0
 80081ca:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 80081cc:	7dfa      	ldrb	r2, [r7, #23]
 80081ce:	6879      	ldr	r1, [r7, #4]
 80081d0:	4613      	mov	r3, r2
 80081d2:	00db      	lsls	r3, r3, #3
 80081d4:	1a9b      	subs	r3, r3, r2
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	440b      	add	r3, r1
 80081da:	3324      	adds	r3, #36	; 0x24
 80081dc:	2200      	movs	r2, #0
 80081de:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80081e0:	7dfa      	ldrb	r2, [r7, #23]
 80081e2:	6879      	ldr	r1, [r7, #4]
 80081e4:	4613      	mov	r3, r2
 80081e6:	00db      	lsls	r3, r3, #3
 80081e8:	1a9b      	subs	r3, r3, r2
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	440b      	add	r3, r1
 80081ee:	3328      	adds	r3, #40	; 0x28
 80081f0:	2200      	movs	r2, #0
 80081f2:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 80081f4:	7dfa      	ldrb	r2, [r7, #23]
 80081f6:	6879      	ldr	r1, [r7, #4]
 80081f8:	4613      	mov	r3, r2
 80081fa:	00db      	lsls	r3, r3, #3
 80081fc:	1a9b      	subs	r3, r3, r2
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	440b      	add	r3, r1
 8008202:	3330      	adds	r3, #48	; 0x30
 8008204:	2200      	movs	r2, #0
 8008206:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8008208:	7dfb      	ldrb	r3, [r7, #23]
 800820a:	3301      	adds	r3, #1
 800820c:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 800820e:	7dfb      	ldrb	r3, [r7, #23]
 8008210:	2b05      	cmp	r3, #5
 8008212:	d9bd      	bls.n	8008190 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 8008214:	2300      	movs	r3, #0
}
 8008216:	4618      	mov	r0, r3
 8008218:	3718      	adds	r7, #24
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	40017400 	.word	0x40017400
 8008224:	58024400 	.word	0x58024400

08008228 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800823a:	b2db      	uxtb	r3, r3
 800823c:	2b02      	cmp	r3, #2
 800823e:	d101      	bne.n	8008244 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8008240:	2302      	movs	r3, #2
 8008242:	e015      	b.n	8008270 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2202      	movs	r2, #2
 8008248:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	2b05      	cmp	r3, #5
 8008250:	d104      	bne.n	800825c <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8008252:	6879      	ldr	r1, [r7, #4]
 8008254:	68f8      	ldr	r0, [r7, #12]
 8008256:	f000 fc4d 	bl	8008af4 <HRTIM_MasterBase_Config>
 800825a:	e004      	b.n	8008266 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	68b9      	ldr	r1, [r7, #8]
 8008260:	68f8      	ldr	r0, [r7, #12]
 8008262:	f000 fc76 	bl	8008b52 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2201      	movs	r2, #1
 800826a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800828a:	b2db      	uxtb	r3, r3
 800828c:	2b02      	cmp	r3, #2
 800828e:	d101      	bne.n	8008294 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8008290:	2302      	movs	r3, #2
 8008292:	e05f      	b.n	8008354 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800829a:	2b01      	cmp	r3, #1
 800829c:	d101      	bne.n	80082a2 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 800829e:	2302      	movs	r3, #2
 80082a0:	e058      	b.n	8008354 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2201      	movs	r2, #1
 80082a6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2202      	movs	r2, #2
 80082ae:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	2b05      	cmp	r3, #5
 80082b6:	d104      	bne.n	80082c2 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 80082b8:	6879      	ldr	r1, [r7, #4]
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	f000 fc89 	bl	8008bd2 <HRTIM_MasterWaveform_Config>
 80082c0:	e004      	b.n	80082cc <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	68b9      	ldr	r1, [r7, #8]
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	f000 fcea 	bl	8008ca0 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6819      	ldr	r1, [r3, #0]
 80082d0:	68f8      	ldr	r0, [r7, #12]
 80082d2:	68ba      	ldr	r2, [r7, #8]
 80082d4:	4613      	mov	r3, r2
 80082d6:	00db      	lsls	r3, r3, #3
 80082d8:	1a9b      	subs	r3, r3, r2
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	4403      	add	r3, r0
 80082de:	3320      	adds	r3, #32
 80082e0:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6859      	ldr	r1, [r3, #4]
 80082e6:	68f8      	ldr	r0, [r7, #12]
 80082e8:	68ba      	ldr	r2, [r7, #8]
 80082ea:	4613      	mov	r3, r2
 80082ec:	00db      	lsls	r3, r3, #3
 80082ee:	1a9b      	subs	r3, r3, r2
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	4403      	add	r3, r0
 80082f4:	3324      	adds	r3, #36	; 0x24
 80082f6:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6899      	ldr	r1, [r3, #8]
 80082fc:	68f8      	ldr	r0, [r7, #12]
 80082fe:	68ba      	ldr	r2, [r7, #8]
 8008300:	4613      	mov	r3, r2
 8008302:	00db      	lsls	r3, r3, #3
 8008304:	1a9b      	subs	r3, r3, r2
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	4403      	add	r3, r0
 800830a:	3328      	adds	r3, #40	; 0x28
 800830c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	68d9      	ldr	r1, [r3, #12]
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	68ba      	ldr	r2, [r7, #8]
 8008316:	4613      	mov	r3, r2
 8008318:	00db      	lsls	r3, r3, #3
 800831a:	1a9b      	subs	r3, r3, r2
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	4403      	add	r3, r0
 8008320:	332c      	adds	r3, #44	; 0x2c
 8008322:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6919      	ldr	r1, [r3, #16]
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	68ba      	ldr	r2, [r7, #8]
 800832c:	4613      	mov	r3, r2
 800832e:	00db      	lsls	r3, r3, #3
 8008330:	1a9b      	subs	r3, r3, r2
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	4403      	add	r3, r0
 8008336:	3330      	adds	r3, #48	; 0x30
 8008338:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800833a:	68b9      	ldr	r1, [r7, #8]
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	f000 fec7 	bl	80090d0 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2201      	movs	r2, #1
 8008346:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2200      	movs	r2, #0
 800834e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8008352:	2300      	movs	r3, #0
}
 8008354:	4618      	mov	r0, r3
 8008356:	3710      	adds	r7, #16
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 800835c:	b480      	push	{r7}
 800835e:	b085      	sub	sp, #20
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	607a      	str	r2, [r7, #4]
 8008368:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8008370:	b2db      	uxtb	r3, r3
 8008372:	2b02      	cmp	r3, #2
 8008374:	d101      	bne.n	800837a <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 8008376:	2302      	movs	r3, #2
 8008378:	e157      	b.n	800862a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8008380:	2b01      	cmp	r3, #1
 8008382:	d101      	bne.n	8008388 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8008384:	2302      	movs	r3, #2
 8008386:	e150      	b.n	800862a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2202      	movs	r2, #2
 8008394:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	2b05      	cmp	r3, #5
 800839c:	d140      	bne.n	8008420 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	3b01      	subs	r3, #1
 80083a2:	2b07      	cmp	r3, #7
 80083a4:	d82a      	bhi.n	80083fc <HAL_HRTIM_WaveformCompareConfig+0xa0>
 80083a6:	a201      	add	r2, pc, #4	; (adr r2, 80083ac <HAL_HRTIM_WaveformCompareConfig+0x50>)
 80083a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ac:	080083cd 	.word	0x080083cd
 80083b0:	080083d9 	.word	0x080083d9
 80083b4:	080083fd 	.word	0x080083fd
 80083b8:	080083e5 	.word	0x080083e5
 80083bc:	080083fd 	.word	0x080083fd
 80083c0:	080083fd 	.word	0x080083fd
 80083c4:	080083fd 	.word	0x080083fd
 80083c8:	080083f1 	.word	0x080083f1
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	683a      	ldr	r2, [r7, #0]
 80083d2:	6812      	ldr	r2, [r2, #0]
 80083d4:	61da      	str	r2, [r3, #28]
        break;
 80083d6:	e01a      	b.n	800840e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	683a      	ldr	r2, [r7, #0]
 80083de:	6812      	ldr	r2, [r2, #0]
 80083e0:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 80083e2:	e014      	b.n	800840e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	683a      	ldr	r2, [r7, #0]
 80083ea:	6812      	ldr	r2, [r2, #0]
 80083ec:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 80083ee:	e00e      	b.n	800840e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	683a      	ldr	r2, [r7, #0]
 80083f6:	6812      	ldr	r2, [r2, #0]
 80083f8:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 80083fa:	e008      	b.n	800840e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2207      	movs	r2, #7
 8008400:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2200      	movs	r2, #0
 8008408:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 800840c:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8008414:	b2db      	uxtb	r3, r3
 8008416:	2b07      	cmp	r3, #7
 8008418:	f040 80fe 	bne.w	8008618 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	e104      	b.n	800862a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	3b01      	subs	r3, #1
 8008424:	2b07      	cmp	r3, #7
 8008426:	f200 80e3 	bhi.w	80085f0 <HAL_HRTIM_WaveformCompareConfig+0x294>
 800842a:	a201      	add	r2, pc, #4	; (adr r2, 8008430 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 800842c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008430:	08008451 	.word	0x08008451
 8008434:	08008465 	.word	0x08008465
 8008438:	080085f1 	.word	0x080085f1
 800843c:	08008521 	.word	0x08008521
 8008440:	080085f1 	.word	0x080085f1
 8008444:	080085f1 	.word	0x080085f1
 8008448:	080085f1 	.word	0x080085f1
 800844c:	08008535 	.word	0x08008535
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6819      	ldr	r1, [r3, #0]
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	01db      	lsls	r3, r3, #7
 800845c:	440b      	add	r3, r1
 800845e:	339c      	adds	r3, #156	; 0x9c
 8008460:	601a      	str	r2, [r3, #0]
        break;
 8008462:	e0d1      	b.n	8008608 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6819      	ldr	r1, [r3, #0]
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	01db      	lsls	r3, r3, #7
 8008470:	440b      	add	r3, r1
 8008472:	33a4      	adds	r3, #164	; 0xa4
 8008474:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d03f      	beq.n	80084fe <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	3301      	adds	r3, #1
 8008486:	01db      	lsls	r3, r3, #7
 8008488:	4413      	add	r3, r2
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	6811      	ldr	r1, [r2, #0]
 8008490:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	3301      	adds	r3, #1
 8008498:	01db      	lsls	r3, r3, #7
 800849a:	440b      	add	r3, r1
 800849c:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	3301      	adds	r3, #1
 80084a6:	01db      	lsls	r3, r3, #7
 80084a8:	4413      	add	r3, r2
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	68f9      	ldr	r1, [r7, #12]
 80084b2:	6809      	ldr	r1, [r1, #0]
 80084b4:	431a      	orrs	r2, r3
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	3301      	adds	r3, #1
 80084ba:	01db      	lsls	r3, r3, #7
 80084bc:	440b      	add	r3, r1
 80084be:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084c8:	d109      	bne.n	80084de <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6819      	ldr	r1, [r3, #0]
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	689a      	ldr	r2, [r3, #8]
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	01db      	lsls	r3, r3, #7
 80084d6:	440b      	add	r3, r1
 80084d8:	339c      	adds	r3, #156	; 0x9c
 80084da:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 80084dc:	e091      	b.n	8008602 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80084e6:	f040 808c 	bne.w	8008602 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6819      	ldr	r1, [r3, #0]
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	689a      	ldr	r2, [r3, #8]
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	01db      	lsls	r3, r3, #7
 80084f6:	440b      	add	r3, r1
 80084f8:	33a8      	adds	r3, #168	; 0xa8
 80084fa:	601a      	str	r2, [r3, #0]
         break;
 80084fc:	e081      	b.n	8008602 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	3301      	adds	r3, #1
 8008506:	01db      	lsls	r3, r3, #7
 8008508:	4413      	add	r3, r2
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	6811      	ldr	r1, [r2, #0]
 8008510:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	3301      	adds	r3, #1
 8008518:	01db      	lsls	r3, r3, #7
 800851a:	440b      	add	r3, r1
 800851c:	601a      	str	r2, [r3, #0]
         break;
 800851e:	e070      	b.n	8008602 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6819      	ldr	r1, [r3, #0]
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	01db      	lsls	r3, r3, #7
 800852c:	440b      	add	r3, r1
 800852e:	33a8      	adds	r3, #168	; 0xa8
 8008530:	601a      	str	r2, [r3, #0]
        break;
 8008532:	e069      	b.n	8008608 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	6819      	ldr	r1, [r3, #0]
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	01db      	lsls	r3, r3, #7
 8008540:	440b      	add	r3, r1
 8008542:	33ac      	adds	r3, #172	; 0xac
 8008544:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d03f      	beq.n	80085ce <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	3301      	adds	r3, #1
 8008556:	01db      	lsls	r3, r3, #7
 8008558:	4413      	add	r3, r2
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	6811      	ldr	r1, [r2, #0]
 8008560:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	3301      	adds	r3, #1
 8008568:	01db      	lsls	r3, r3, #7
 800856a:	440b      	add	r3, r1
 800856c:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	3301      	adds	r3, #1
 8008576:	01db      	lsls	r3, r3, #7
 8008578:	4413      	add	r3, r2
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	68f9      	ldr	r1, [r7, #12]
 8008584:	6809      	ldr	r1, [r1, #0]
 8008586:	431a      	orrs	r2, r3
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	3301      	adds	r3, #1
 800858c:	01db      	lsls	r3, r3, #7
 800858e:	440b      	add	r3, r1
 8008590:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800859a:	d109      	bne.n	80085b0 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6819      	ldr	r1, [r3, #0]
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	689a      	ldr	r2, [r3, #8]
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	01db      	lsls	r3, r3, #7
 80085a8:	440b      	add	r3, r1
 80085aa:	339c      	adds	r3, #156	; 0x9c
 80085ac:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 80085ae:	e02a      	b.n	8008606 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80085b8:	d125      	bne.n	8008606 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	6819      	ldr	r1, [r3, #0]
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	689a      	ldr	r2, [r3, #8]
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	01db      	lsls	r3, r3, #7
 80085c6:	440b      	add	r3, r1
 80085c8:	33a8      	adds	r3, #168	; 0xa8
 80085ca:	601a      	str	r2, [r3, #0]
         break;
 80085cc:	e01b      	b.n	8008606 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	3301      	adds	r3, #1
 80085d6:	01db      	lsls	r3, r3, #7
 80085d8:	4413      	add	r3, r2
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	6811      	ldr	r1, [r2, #0]
 80085e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	3301      	adds	r3, #1
 80085e8:	01db      	lsls	r3, r3, #7
 80085ea:	440b      	add	r3, r1
 80085ec:	601a      	str	r2, [r3, #0]
         break;
 80085ee:	e00a      	b.n	8008606 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2207      	movs	r2, #7
 80085f4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2200      	movs	r2, #0
 80085fc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 8008600:	e002      	b.n	8008608 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8008602:	bf00      	nop
 8008604:	e000      	b.n	8008608 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8008606:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800860e:	b2db      	uxtb	r3, r3
 8008610:	2b07      	cmp	r3, #7
 8008612:	d101      	bne.n	8008618 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	e008      	b.n	800862a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2200      	movs	r2, #0
 8008624:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3714      	adds	r7, #20
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop

08008638 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	607a      	str	r2, [r7, #4]
 8008644:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800864c:	b2db      	uxtb	r3, r3
 800864e:	2b02      	cmp	r3, #2
 8008650:	d101      	bne.n	8008656 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8008652:	2302      	movs	r3, #2
 8008654:	e01d      	b.n	8008692 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800865c:	2b01      	cmp	r3, #1
 800865e:	d101      	bne.n	8008664 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8008660:	2302      	movs	r3, #2
 8008662:	e016      	b.n	8008692 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2202      	movs	r2, #2
 8008670:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	68b9      	ldr	r1, [r7, #8]
 800867a:	68f8      	ldr	r0, [r7, #12]
 800867c:	f000 fc50 	bl	8008f20 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2200      	movs	r2, #0
 800868c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	3710      	adds	r7, #16
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 800869a:	b480      	push	{r7}
 800869c:	b083      	sub	sp, #12
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
 80086a2:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d101      	bne.n	80086b2 <HAL_HRTIM_WaveformOutputStart+0x18>
 80086ae:	2302      	movs	r3, #2
 80086b0:	e01a      	b.n	80086e8 <HAL_HRTIM_WaveformOutputStart+0x4e>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2201      	movs	r2, #1
 80086b6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2202      	movs	r2, #2
 80086be:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	683a      	ldr	r2, [r7, #0]
 80086d0:	430a      	orrs	r2, r1
 80086d2:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2201      	movs	r2, #1
 80086da:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2200      	movs	r2, #0
 80086e2:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8008704:	2b01      	cmp	r3, #1
 8008706:	d101      	bne.n	800870c <HAL_HRTIM_WaveformOutputStop+0x18>
 8008708:	2302      	movs	r3, #2
 800870a:	e01a      	b.n	8008742 <HAL_HRTIM_WaveformOutputStop+0x4e>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2202      	movs	r2, #2
 8008718:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f8d3 1398 	ldr.w	r1, [r3, #920]	; 0x398
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	683a      	ldr	r2, [r7, #0]
 800872a:	430a      	orrs	r2, r1
 800872c:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2201      	movs	r2, #1
 8008734:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2200      	movs	r2, #0
 800873c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	370c      	adds	r7, #12
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr
	...

08008750 <HAL_HRTIM_WaveformCountStart_IT>:
  *       function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart_IT(HRTIM_HandleTypeDef * hhrtim,
                                                    uint32_t Timers)
{
 8008750:	b480      	push	{r7}
 8008752:	b085      	sub	sp, #20
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8008760:	2b01      	cmp	r3, #1
 8008762:	d101      	bne.n	8008768 <HAL_HRTIM_WaveformCountStart_IT+0x18>
 8008764:	2302      	movs	r3, #2
 8008766:	e05b      	b.n	8008820 <HAL_HRTIM_WaveformCountStart_IT+0xd0>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2202      	movs	r2, #2
 8008774:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable HRTIM interrupts (if required) */
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	685a      	ldr	r2, [r3, #4]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	430a      	orrs	r2, r1
 800878a:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Enable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008794:	2b00      	cmp	r3, #0
 8008796:	d009      	beq.n	80087ac <HAL_HRTIM_WaveformCountStart_IT+0x5c>
  {
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim,
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	68d9      	ldr	r1, [r3, #12]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	430a      	orrs	r2, r1
 80087aa:	60da      	str	r2, [r3, #12]
                                 hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
  }

  /* Enable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80087ac:	2300      	movs	r3, #0
 80087ae:	73fb      	strb	r3, [r7, #15]
 80087b0:	e022      	b.n	80087f8 <HAL_HRTIM_WaveformCountStart_IT+0xa8>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 80087b2:	7bfb      	ldrb	r3, [r7, #15]
 80087b4:	4a1d      	ldr	r2, [pc, #116]	; (800882c <HAL_HRTIM_WaveformCountStart_IT+0xdc>)
 80087b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	4013      	ands	r3, r2
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d017      	beq.n	80087f2 <HAL_HRTIM_WaveformCountStart_IT+0xa2>
    {
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	7bfb      	ldrb	r3, [r7, #15]
 80087c8:	01db      	lsls	r3, r3, #7
 80087ca:	4413      	add	r3, r2
 80087cc:	338c      	adds	r3, #140	; 0x8c
 80087ce:	6818      	ldr	r0, [r3, #0]
 80087d0:	7bfa      	ldrb	r2, [r7, #15]
 80087d2:	6879      	ldr	r1, [r7, #4]
 80087d4:	4613      	mov	r3, r2
 80087d6:	00db      	lsls	r3, r3, #3
 80087d8:	1a9b      	subs	r3, r3, r2
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	440b      	add	r3, r1
 80087de:	3320      	adds	r3, #32
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6819      	ldr	r1, [r3, #0]
 80087e6:	7bfb      	ldrb	r3, [r7, #15]
 80087e8:	4302      	orrs	r2, r0
 80087ea:	01db      	lsls	r3, r3, #7
 80087ec:	440b      	add	r3, r1
 80087ee:	338c      	adds	r3, #140	; 0x8c
 80087f0:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80087f2:	7bfb      	ldrb	r3, [r7, #15]
 80087f4:	3301      	adds	r3, #1
 80087f6:	73fb      	strb	r3, [r7, #15]
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
 80087f8:	7bfb      	ldrb	r3, [r7, #15]
 80087fa:	2b04      	cmp	r3, #4
 80087fc:	d9d9      	bls.n	80087b2 <HAL_HRTIM_WaveformCountStart_IT+0x62>
                                  hhrtim->TimerParam[timer_idx].InterruptRequests);
    }
  }

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	6819      	ldr	r1, [r3, #0]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	683a      	ldr	r2, [r7, #0]
 800880a:	430a      	orrs	r2, r1
 800880c:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2201      	movs	r2, #1
 8008812:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;}
 800881e:	2300      	movs	r3, #0
 8008820:	4618      	mov	r0, r3
 8008822:	3714      	adds	r7, #20
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr
 800882c:	20000028 	.word	0x20000028

08008830 <HAL_HRTIM_WaveformCountStop_IT>:
  * @note The counter of a timer is stopped only if all timer outputs are disabled
  * @note All enabled timer related interrupts are disabled.
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStop_IT(HRTIM_HandleTypeDef * hhrtim,
                                                   uint32_t Timers)
{
 8008830:	b480      	push	{r7}
 8008832:	b085      	sub	sp, #20
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  /* ++ WA */
  __IO uint32_t delai = (uint32_t)(0x17FU);
 800883a:	f240 137f 	movw	r3, #383	; 0x17f
 800883e:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8008846:	2b01      	cmp	r3, #1
 8008848:	d101      	bne.n	800884e <HAL_HRTIM_WaveformCountStop_IT+0x1e>
 800884a:	2302      	movs	r3, #2
 800884c:	e065      	b.n	800891a <HAL_HRTIM_WaveformCountStop_IT+0xea>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2201      	movs	r2, #1
 8008852:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2202      	movs	r2, #2
 800885a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Disable HRTIM interrupts (if required) */
  __HAL_HRTIM_DISABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	43da      	mvns	r2, r3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	400a      	ands	r2, r1
 8008872:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Disable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800887c:	2b00      	cmp	r3, #0
 800887e:	d00a      	beq.n	8008896 <HAL_HRTIM_WaveformCountStop_IT+0x66>
  {
    /* Interrupts enable flag must be cleared one by one */
    __HAL_HRTIM_MASTER_DISABLE_IT(hhrtim, hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	68d9      	ldr	r1, [r3, #12]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800888c:	43da      	mvns	r2, r3
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	400a      	ands	r2, r1
 8008894:	60da      	str	r2, [r3, #12]
  }

  /* Disable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8008896:	2300      	movs	r3, #0
 8008898:	73fb      	strb	r3, [r7, #15]
 800889a:	e023      	b.n	80088e4 <HAL_HRTIM_WaveformCountStop_IT+0xb4>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 800889c:	7bfb      	ldrb	r3, [r7, #15]
 800889e:	4a22      	ldr	r2, [pc, #136]	; (8008928 <HAL_HRTIM_WaveformCountStop_IT+0xf8>)
 80088a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	4013      	ands	r3, r2
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d018      	beq.n	80088de <HAL_HRTIM_WaveformCountStop_IT+0xae>
    {
      __HAL_HRTIM_TIMER_DISABLE_IT(hhrtim, timer_idx, hhrtim->TimerParam[timer_idx].InterruptRequests);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	7bfb      	ldrb	r3, [r7, #15]
 80088b2:	01db      	lsls	r3, r3, #7
 80088b4:	4413      	add	r3, r2
 80088b6:	338c      	adds	r3, #140	; 0x8c
 80088b8:	6818      	ldr	r0, [r3, #0]
 80088ba:	7bfa      	ldrb	r2, [r7, #15]
 80088bc:	6879      	ldr	r1, [r7, #4]
 80088be:	4613      	mov	r3, r2
 80088c0:	00db      	lsls	r3, r3, #3
 80088c2:	1a9b      	subs	r3, r3, r2
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	440b      	add	r3, r1
 80088c8:	3320      	adds	r3, #32
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	43da      	mvns	r2, r3
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6819      	ldr	r1, [r3, #0]
 80088d2:	7bfb      	ldrb	r3, [r7, #15]
 80088d4:	4002      	ands	r2, r0
 80088d6:	01db      	lsls	r3, r3, #7
 80088d8:	440b      	add	r3, r1
 80088da:	338c      	adds	r3, #140	; 0x8c
 80088dc:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80088de:	7bfb      	ldrb	r3, [r7, #15]
 80088e0:	3301      	adds	r3, #1
 80088e2:	73fb      	strb	r3, [r7, #15]
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
 80088e4:	7bfb      	ldrb	r3, [r7, #15]
 80088e6:	2b04      	cmp	r3, #4
 80088e8:	d9d8      	bls.n	800889c <HAL_HRTIM_WaveformCountStop_IT+0x6c>
    }
  }

  /* ++ WA */
  do { delai--; } while (delai != 0U);
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	3b01      	subs	r3, #1
 80088ee:	60bb      	str	r3, [r7, #8]
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1f9      	bne.n	80088ea <HAL_HRTIM_WaveformCountStop_IT+0xba>
  /* -- WA */

  /* Disable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR &= ~(Timers);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	6819      	ldr	r1, [r3, #0]
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	43da      	mvns	r2, r3
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	400a      	ands	r2, r1
 8008906:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8008918:	2300      	movs	r3, #0
}
 800891a:	4618      	mov	r0, r3
 800891c:	3714      	adds	r7, #20
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr
 8008926:	bf00      	nop
 8008928:	20000028 	.word	0x20000028

0800892c <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b082      	sub	sp, #8
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	2bff      	cmp	r3, #255	; 0xff
 800893a:	d103      	bne.n	8008944 <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 fc29 	bl	8009194 <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 8008942:	e00a      	b.n	800895a <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	2b05      	cmp	r3, #5
 8008948:	d103      	bne.n	8008952 <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 fca0 	bl	8009290 <HRTIM_Master_ISR>
}
 8008950:	e003      	b.n	800895a <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 8008952:	6839      	ldr	r1, [r7, #0]
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 fd45 	bl	80093e4 <HRTIM_Timer_ISR>
}
 800895a:	bf00      	nop
 800895c:	3708      	adds	r7, #8
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8008962:	b480      	push	{r7}
 8008964:	b083      	sub	sp, #12
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 800896a:	bf00      	nop
 800896c:	370c      	adds	r7, #12
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr

08008976 <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8008976:	b480      	push	{r7}
 8008978:	b083      	sub	sp, #12
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 800897e:	bf00      	nop
 8008980:	370c      	adds	r7, #12
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr

0800898a <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800898a:	b480      	push	{r7}
 800898c:	b083      	sub	sp, #12
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 8008992:	bf00      	nop
 8008994:	370c      	adds	r7, #12
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr

0800899e <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800899e:	b480      	push	{r7}
 80089a0:	b083      	sub	sp, #12
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 80089a6:	bf00      	nop
 80089a8:	370c      	adds	r7, #12
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr

080089b2 <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80089b2:	b480      	push	{r7}
 80089b4:	b083      	sub	sp, #12
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 80089ba:	bf00      	nop
 80089bc:	370c      	adds	r7, #12
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr

080089c6 <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80089c6:	b480      	push	{r7}
 80089c8:	b083      	sub	sp, #12
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 80089ce:	bf00      	nop
 80089d0:	370c      	adds	r7, #12
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr

080089da <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80089da:	b480      	push	{r7}
 80089dc:	b083      	sub	sp, #12
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 80089e2:	bf00      	nop
 80089e4:	370c      	adds	r7, #12
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr

080089ee <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80089ee:	b480      	push	{r7}
 80089f0:	b083      	sub	sp, #12
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 80089f6:	bf00      	nop
 80089f8:	370c      	adds	r7, #12
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr

08008a02 <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008a02:	b480      	push	{r7}
 8008a04:	b083      	sub	sp, #12
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
 8008a0a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 8008a0c:	bf00      	nop
 8008a0e:	370c      	adds	r7, #12
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr

08008a18 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 8008a22:	bf00      	nop
 8008a24:	370c      	adds	r7, #12
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr

08008a2e <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008a2e:	b480      	push	{r7}
 8008a30:	b083      	sub	sp, #12
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
 8008a36:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 8008a38:	bf00      	nop
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 8008a4e:	bf00      	nop
 8008a50:	370c      	adds	r7, #12
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr

08008a5a <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008a5a:	b480      	push	{r7}
 8008a5c:	b083      	sub	sp, #12
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
 8008a62:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 8008a64:	bf00      	nop
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 8008a7a:	bf00      	nop
 8008a7c:	370c      	adds	r7, #12
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr

08008a86 <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008a86:	b480      	push	{r7}
 8008a88:	b083      	sub	sp, #12
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
 8008a8e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 8008a90:	bf00      	nop
 8008a92:	370c      	adds	r7, #12
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 8008aa6:	bf00      	nop
 8008aa8:	370c      	adds	r7, #12
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr

08008ab2 <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008ab2:	b480      	push	{r7}
 8008ab4:	b083      	sub	sp, #12
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
 8008aba:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 8008abc:	bf00      	nop
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr

08008ac8 <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 8008ad2:	bf00      	nop
 8008ad4:	370c      	adds	r7, #12
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr

08008ade <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008ade:	b480      	push	{r7}
 8008ae0:	b083      	sub	sp, #12
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	6078      	str	r0, [r7, #4]
 8008ae6:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 8008ae8:	bf00      	nop
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b085      	sub	sp, #20
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f023 0307 	bic.w	r3, r3, #7
 8008b0c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	68fa      	ldr	r2, [r7, #12]
 8008b14:	4313      	orrs	r3, r2
 8008b16:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f023 0318 	bic.w	r3, r3, #24
 8008b1e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	68fa      	ldr	r2, [r7, #12]
 8008b26:	4313      	orrs	r3, r2
 8008b28:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	68fa      	ldr	r2, [r7, #12]
 8008b30:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	683a      	ldr	r2, [r7, #0]
 8008b38:	6812      	ldr	r2, [r2, #0]
 8008b3a:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	683a      	ldr	r2, [r7, #0]
 8008b42:	6852      	ldr	r2, [r2, #4]
 8008b44:	619a      	str	r2, [r3, #24]
}
 8008b46:	bf00      	nop
 8008b48:	3714      	adds	r7, #20
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr

08008b52 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8008b52:	b480      	push	{r7}
 8008b54:	b087      	sub	sp, #28
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	60f8      	str	r0, [r7, #12]
 8008b5a:	60b9      	str	r1, [r7, #8]
 8008b5c:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	3301      	adds	r3, #1
 8008b66:	01db      	lsls	r3, r3, #7
 8008b68:	4413      	add	r3, r2
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	f023 0307 	bic.w	r3, r3, #7
 8008b74:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	697a      	ldr	r2, [r7, #20]
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	f023 0318 	bic.w	r3, r3, #24
 8008b86:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	697a      	ldr	r2, [r7, #20]
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	01db      	lsls	r3, r3, #7
 8008b9c:	4413      	add	r3, r2
 8008b9e:	697a      	ldr	r2, [r7, #20]
 8008ba0:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	6819      	ldr	r1, [r3, #0]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	01db      	lsls	r3, r3, #7
 8008bae:	440b      	add	r3, r1
 8008bb0:	3394      	adds	r3, #148	; 0x94
 8008bb2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6819      	ldr	r1, [r3, #0]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	685a      	ldr	r2, [r3, #4]
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	01db      	lsls	r3, r3, #7
 8008bc0:	440b      	add	r3, r1
 8008bc2:	3398      	adds	r3, #152	; 0x98
 8008bc4:	601a      	str	r2, [r3, #0]
}
 8008bc6:	bf00      	nop
 8008bc8:	371c      	adds	r7, #28
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr

08008bd2 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8008bd2:	b480      	push	{r7}
 8008bd4:	b085      	sub	sp, #20
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
 8008bda:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8008bec:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f023 0320 	bic.w	r3, r3, #32
 8008bf4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	695b      	ldr	r3, [r3, #20]
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c06:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	699b      	ldr	r3, [r3, #24]
 8008c0c:	68fa      	ldr	r2, [r7, #12]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c18:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	69db      	ldr	r3, [r3, #28]
 8008c1e:	68fa      	ldr	r2, [r7, #12]
 8008c20:	4313      	orrs	r3, r2
 8008c22:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008c2a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	6a1b      	ldr	r3, [r3, #32]
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	4313      	orrs	r3, r2
 8008c34:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8008c3c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c42:	68fa      	ldr	r2, [r7, #12]
 8008c44:	4313      	orrs	r3, r2
 8008c46:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008c4e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	68fa      	ldr	r2, [r7, #12]
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008c62:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c74:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c7a:	68ba      	ldr	r2, [r7, #8]
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	68fa      	ldr	r2, [r7, #12]
 8008c86:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	68ba      	ldr	r2, [r7, #8]
 8008c8e:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8008c92:	bf00      	nop
 8008c94:	3714      	adds	r7, #20
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr
	...

08008ca0 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b08b      	sub	sp, #44	; 0x2c
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	60b9      	str	r1, [r7, #8]
 8008caa:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	01db      	lsls	r3, r3, #7
 8008cb6:	4413      	add	r3, r2
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	68fa      	ldr	r2, [r7, #12]
 8008cbc:	6811      	ldr	r1, [r2, #0]
 8008cbe:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	01db      	lsls	r3, r3, #7
 8008cc8:	440b      	add	r3, r1
 8008cca:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	01db      	lsls	r3, r3, #7
 8008cd6:	4413      	add	r3, r2
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	01db      	lsls	r3, r3, #7
 8008ce4:	4413      	add	r3, r2
 8008ce6:	33e8      	adds	r3, #232	; 0xe8
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	01db      	lsls	r3, r3, #7
 8008cf4:	4413      	add	r3, r2
 8008cf6:	33e4      	adds	r3, #228	; 0xe4
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8008d04:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8008d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d08:	f023 0320 	bic.w	r3, r3, #32
 8008d0c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	695b      	ldr	r3, [r3, #20]
 8008d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d14:	4313      	orrs	r3, r2
 8008d16:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8008d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d1e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	699b      	ldr	r3, [r3, #24]
 8008d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d26:	4313      	orrs	r3, r2
 8008d28:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8008d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d30:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	69db      	ldr	r3, [r3, #28]
 8008d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8008d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008d42:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6a1b      	ldr	r3, [r3, #32]
 8008d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8008d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d50:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8008d54:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8008d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d62:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008d66:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8008d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d74:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008d78:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d82:	d103      	bne.n	8008d8c <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8008d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d8a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8008d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d92:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008da4:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dac:	4313      	orrs	r3, r2
 8008dae:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8008db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db2:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8008db6:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	f023 031f 	bic.w	r3, r3, #31
 8008dc8:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dce:	f003 031f 	and.w	r3, r3, #31
 8008dd2:	69ba      	ldr	r2, [r7, #24]
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008dde:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008de4:	69ba      	ldr	r2, [r7, #24]
 8008de6:	4313      	orrs	r3, r2
 8008de8:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d108      	bne.n	8008e04 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8008df2:	6a3b      	ldr	r3, [r7, #32]
 8008df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008df8:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dfe:	6a3a      	ldr	r2, [r7, #32]
 8008e00:	4313      	orrs	r3, r2
 8008e02:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e08:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8008e0c:	d004      	beq.n	8008e18 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e12:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8008e16:	d103      	bne.n	8008e20 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e1c:	2b40      	cmp	r3, #64	; 0x40
 8008e1e:	d108      	bne.n	8008e32 <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8008e20:	6a3b      	ldr	r3, [r7, #32]
 8008e22:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8008e26:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e2c:	6a3a      	ldr	r2, [r7, #32]
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e36:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	2b04      	cmp	r3, #4
 8008e3c:	d843      	bhi.n	8008ec6 <HRTIM_TimingUnitWaveform_Config+0x226>
 8008e3e:	a201      	add	r2, pc, #4	; (adr r2, 8008e44 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8008e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e44:	08008e59 	.word	0x08008e59
 8008e48:	08008e6f 	.word	0x08008e6f
 8008e4c:	08008e85 	.word	0x08008e85
 8008e50:	08008e9b 	.word	0x08008e9b
 8008e54:	08008eb1 	.word	0x08008eb1
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8008e58:	69fb      	ldr	r3, [r7, #28]
 8008e5a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008e5e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e64:	005b      	lsls	r3, r3, #1
 8008e66:	69fa      	ldr	r2, [r7, #28]
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	61fb      	str	r3, [r7, #28]
      break;
 8008e6c:	e02c      	b.n	8008ec8 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e74:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	69fa      	ldr	r2, [r7, #28]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	61fb      	str	r3, [r7, #28]
      break;
 8008e82:	e021      	b.n	8008ec8 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8008e84:	69fb      	ldr	r3, [r7, #28]
 8008e86:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008e8a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e90:	00db      	lsls	r3, r3, #3
 8008e92:	69fa      	ldr	r2, [r7, #28]
 8008e94:	4313      	orrs	r3, r2
 8008e96:	61fb      	str	r3, [r7, #28]
      break;
 8008e98:	e016      	b.n	8008ec8 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008ea0:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea6:	011b      	lsls	r3, r3, #4
 8008ea8:	69fa      	ldr	r2, [r7, #28]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	61fb      	str	r3, [r7, #28]
      break;
 8008eae:	e00b      	b.n	8008ec8 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008eb6:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ebc:	015b      	lsls	r3, r3, #5
 8008ebe:	69fa      	ldr	r2, [r7, #28]
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	61fb      	str	r3, [r7, #28]
      break;
 8008ec4:	e000      	b.n	8008ec8 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8008ec6:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	3301      	adds	r3, #1
 8008ed0:	01db      	lsls	r3, r3, #7
 8008ed2:	4413      	add	r3, r2
 8008ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ed6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	01db      	lsls	r3, r3, #7
 8008ee0:	4413      	add	r3, r2
 8008ee2:	33e8      	adds	r3, #232	; 0xe8
 8008ee4:	69ba      	ldr	r2, [r7, #24]
 8008ee6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681a      	ldr	r2, [r3, #0]
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	01db      	lsls	r3, r3, #7
 8008ef0:	4413      	add	r3, r2
 8008ef2:	33e4      	adds	r3, #228	; 0xe4
 8008ef4:	6a3a      	ldr	r2, [r7, #32]
 8008ef6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	01db      	lsls	r3, r3, #7
 8008f00:	4413      	add	r3, r2
 8008f02:	33d4      	adds	r3, #212	; 0xd4
 8008f04:	697a      	ldr	r2, [r7, #20]
 8008f06:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	69fa      	ldr	r2, [r7, #28]
 8008f0e:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8008f12:	bf00      	nop
 8008f14:	372c      	adds	r7, #44	; 0x2c
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr
 8008f1e:	bf00      	nop

08008f20 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b089      	sub	sp, #36	; 0x24
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	607a      	str	r2, [r7, #4]
 8008f2c:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	01db      	lsls	r3, r3, #7
 8008f3a:	4413      	add	r3, r2
 8008f3c:	33e4      	adds	r3, #228	; 0xe4
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	01db      	lsls	r3, r3, #7
 8008f4a:	4413      	add	r3, r2
 8008f4c:	33b8      	adds	r3, #184	; 0xb8
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	617b      	str	r3, [r7, #20]

  switch (Output)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f58:	d04d      	beq.n	8008ff6 <HRTIM_OutputConfig+0xd6>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f60:	d85e      	bhi.n	8009020 <HRTIM_OutputConfig+0x100>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f68:	d032      	beq.n	8008fd0 <HRTIM_OutputConfig+0xb0>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f70:	d856      	bhi.n	8009020 <HRTIM_OutputConfig+0x100>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2b80      	cmp	r3, #128	; 0x80
 8008f76:	d03e      	beq.n	8008ff6 <HRTIM_OutputConfig+0xd6>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2b80      	cmp	r3, #128	; 0x80
 8008f7c:	d850      	bhi.n	8009020 <HRTIM_OutputConfig+0x100>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2b40      	cmp	r3, #64	; 0x40
 8008f82:	d025      	beq.n	8008fd0 <HRTIM_OutputConfig+0xb0>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2b40      	cmp	r3, #64	; 0x40
 8008f88:	d84a      	bhi.n	8009020 <HRTIM_OutputConfig+0x100>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d01f      	beq.n	8008fd0 <HRTIM_OutputConfig+0xb0>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d044      	beq.n	8009020 <HRTIM_OutputConfig+0x100>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2b20      	cmp	r3, #32
 8008f9a:	d841      	bhi.n	8009020 <HRTIM_OutputConfig+0x100>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2b02      	cmp	r3, #2
 8008fa0:	d33e      	bcc.n	8009020 <HRTIM_OutputConfig+0x100>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	3b02      	subs	r3, #2
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	409a      	lsls	r2, r3
 8008faa:	4b48      	ldr	r3, [pc, #288]	; (80090cc <HRTIM_OutputConfig+0x1ac>)
 8008fac:	4013      	ands	r3, r2
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	bf14      	ite	ne
 8008fb2:	2301      	movne	r3, #1
 8008fb4:	2300      	moveq	r3, #0
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d11c      	bne.n	8008ff6 <HRTIM_OutputConfig+0xd6>
 8008fbc:	f244 0304 	movw	r3, #16388	; 0x4004
 8008fc0:	4013      	ands	r3, r2
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	bf14      	ite	ne
 8008fc6:	2301      	movne	r3, #1
 8008fc8:	2300      	moveq	r3, #0
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d027      	beq.n	8009020 <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6819      	ldr	r1, [r3, #0]
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	685a      	ldr	r2, [r3, #4]
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	01db      	lsls	r3, r3, #7
 8008fdc:	440b      	add	r3, r1
 8008fde:	33bc      	adds	r3, #188	; 0xbc
 8008fe0:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	6819      	ldr	r1, [r3, #0]
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	689a      	ldr	r2, [r3, #8]
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	01db      	lsls	r3, r3, #7
 8008fee:	440b      	add	r3, r1
 8008ff0:	33c0      	adds	r3, #192	; 0xc0
 8008ff2:	601a      	str	r2, [r3, #0]
      break;
 8008ff4:	e015      	b.n	8009022 <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	6819      	ldr	r1, [r3, #0]
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	685a      	ldr	r2, [r3, #4]
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	01db      	lsls	r3, r3, #7
 8009002:	440b      	add	r3, r1
 8009004:	33c4      	adds	r3, #196	; 0xc4
 8009006:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	6819      	ldr	r1, [r3, #0]
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	689a      	ldr	r2, [r3, #8]
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	01db      	lsls	r3, r3, #7
 8009014:	440b      	add	r3, r1
 8009016:	33c8      	adds	r3, #200	; 0xc8
 8009018:	601a      	str	r2, [r3, #0]
      shift = 16U;
 800901a:	2310      	movs	r3, #16
 800901c:	61bb      	str	r3, [r7, #24]
      break;
 800901e:	e000      	b.n	8009022 <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 8009020:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8009022:	22fe      	movs	r2, #254	; 0xfe
 8009024:	69bb      	ldr	r3, [r7, #24]
 8009026:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 800902a:	43db      	mvns	r3, r3
 800902c:	69fa      	ldr	r2, [r7, #28]
 800902e:	4013      	ands	r3, r2
 8009030:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	69bb      	ldr	r3, [r7, #24]
 8009038:	fa02 f303 	lsl.w	r3, r2, r3
 800903c:	69fa      	ldr	r2, [r7, #28]
 800903e:	4313      	orrs	r3, r2
 8009040:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	68da      	ldr	r2, [r3, #12]
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	fa02 f303 	lsl.w	r3, r2, r3
 800904c:	69fa      	ldr	r2, [r7, #28]
 800904e:	4313      	orrs	r3, r2
 8009050:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	691a      	ldr	r2, [r3, #16]
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	fa02 f303 	lsl.w	r3, r2, r3
 800905c:	69fa      	ldr	r2, [r7, #28]
 800905e:	4313      	orrs	r3, r2
 8009060:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	695a      	ldr	r2, [r3, #20]
 8009066:	69bb      	ldr	r3, [r7, #24]
 8009068:	fa02 f303 	lsl.w	r3, r2, r3
 800906c:	69fa      	ldr	r2, [r7, #28]
 800906e:	4313      	orrs	r3, r2
 8009070:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	699a      	ldr	r2, [r3, #24]
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	fa02 f303 	lsl.w	r3, r2, r3
 800907c:	69fa      	ldr	r2, [r7, #28]
 800907e:	4313      	orrs	r3, r2
 8009080:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	691b      	ldr	r3, [r3, #16]
 8009086:	2b08      	cmp	r3, #8
 8009088:	d111      	bne.n	80090ae <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8009090:	2b00      	cmp	r3, #0
 8009092:	d10c      	bne.n	80090ae <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800909a:	2b00      	cmp	r3, #0
 800909c:	d107      	bne.n	80090ae <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	69da      	ldr	r2, [r3, #28]
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	fa02 f303 	lsl.w	r3, r2, r3
 80090a8:	69fa      	ldr	r2, [r7, #28]
 80090aa:	4313      	orrs	r3, r2
 80090ac:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	01db      	lsls	r3, r3, #7
 80090b6:	4413      	add	r3, r2
 80090b8:	33e4      	adds	r3, #228	; 0xe4
 80090ba:	69fa      	ldr	r2, [r7, #28]
 80090bc:	601a      	str	r2, [r3, #0]
}
 80090be:	bf00      	nop
 80090c0:	3724      	adds	r7, #36	; 0x24
 80090c2:	46bd      	mov	sp, r7
 80090c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c8:	4770      	bx	lr
 80090ca:	bf00      	nop
 80090cc:	40000041 	.word	0x40000041

080090d0 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	2b05      	cmp	r3, #5
 80090de:	d851      	bhi.n	8009184 <HRTIM_ForceRegistersUpdate+0xb4>
 80090e0:	a201      	add	r2, pc, #4	; (adr r2, 80090e8 <HRTIM_ForceRegistersUpdate+0x18>)
 80090e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e6:	bf00      	nop
 80090e8:	08009117 	.word	0x08009117
 80090ec:	0800912d 	.word	0x0800912d
 80090f0:	08009143 	.word	0x08009143
 80090f4:	08009159 	.word	0x08009159
 80090f8:	0800916f 	.word	0x0800916f
 80090fc:	08009101 	.word	0x08009101
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f042 0201 	orr.w	r2, r2, #1
 8009110:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8009114:	e037      	b.n	8009186 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f042 0202 	orr.w	r2, r2, #2
 8009126:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800912a:	e02c      	b.n	8009186 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f042 0204 	orr.w	r2, r2, #4
 800913c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8009140:	e021      	b.n	8009186 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f042 0208 	orr.w	r2, r2, #8
 8009152:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8009156:	e016      	b.n	8009186 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f042 0210 	orr.w	r2, r2, #16
 8009168:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800916c:	e00b      	b.n	8009186 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f042 0220 	orr.w	r2, r2, #32
 800917e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8009182:	e000      	b.n	8009186 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8009184:	bf00      	nop
  }
}
 8009186:	bf00      	nop
 8009188:	370c      	adds	r7, #12
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop

08009194 <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 80091a4:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 80091ae:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f003 0301 	and.w	r3, r3, #1
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d00c      	beq.n	80091d4 <HRTIM_HRTIM_ISR+0x40>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	f003 0301 	and.w	r3, r3, #1
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d007      	beq.n	80091d4 <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2201      	movs	r2, #1
 80091ca:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f7ff fbc7 	bl	8008962 <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f003 0302 	and.w	r3, r3, #2
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d00c      	beq.n	80091f8 <HRTIM_HRTIM_ISR+0x64>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	f003 0302 	and.w	r3, r3, #2
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d007      	beq.n	80091f8 <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2202      	movs	r2, #2
 80091ee:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f7ff fbbf 	bl	8008976 <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f003 0304 	and.w	r3, r3, #4
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d00c      	beq.n	800921c <HRTIM_HRTIM_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	f003 0304 	and.w	r3, r3, #4
 8009208:	2b00      	cmp	r3, #0
 800920a:	d007      	beq.n	800921c <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2204      	movs	r2, #4
 8009212:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f7ff fbb7 	bl	800898a <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f003 0308 	and.w	r3, r3, #8
 8009222:	2b00      	cmp	r3, #0
 8009224:	d00c      	beq.n	8009240 <HRTIM_HRTIM_ISR+0xac>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	f003 0308 	and.w	r3, r3, #8
 800922c:	2b00      	cmp	r3, #0
 800922e:	d007      	beq.n	8009240 <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	2208      	movs	r2, #8
 8009236:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f7ff fbaf 	bl	800899e <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f003 0310 	and.w	r3, r3, #16
 8009246:	2b00      	cmp	r3, #0
 8009248:	d00c      	beq.n	8009264 <HRTIM_HRTIM_ISR+0xd0>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	f003 0310 	and.w	r3, r3, #16
 8009250:	2b00      	cmp	r3, #0
 8009252:	d007      	beq.n	8009264 <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	2210      	movs	r2, #16
 800925a:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f7ff fba7 	bl	80089b2 <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f003 0320 	and.w	r3, r3, #32
 800926a:	2b00      	cmp	r3, #0
 800926c:	d00c      	beq.n	8009288 <HRTIM_HRTIM_ISR+0xf4>
  {
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	f003 0320 	and.w	r3, r3, #32
 8009274:	2b00      	cmp	r3, #0
 8009276:	d007      	beq.n	8009288 <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	2220      	movs	r2, #32
 800927e:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f7ff fb9f 	bl	80089c6 <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8009288:	bf00      	nop
 800928a:	3710      	adds	r7, #16
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b086      	sub	sp, #24
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 80092a0:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 80092aa:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	68db      	ldr	r3, [r3, #12]
 80092ba:	60bb      	str	r3, [r7, #8]

  /* Burst mode period event */
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00d      	beq.n	80092e2 <HRTIM_Master_ISR+0x52>
  {
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d008      	beq.n	80092e2 <HRTIM_Master_ISR+0x52>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80092d8:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f7ff fb7c 	bl	80089da <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f003 0301 	and.w	r3, r3, #1
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d00c      	beq.n	8009306 <HRTIM_Master_ISR+0x76>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	f003 0301 	and.w	r3, r3, #1
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d007      	beq.n	8009306 <HRTIM_Master_ISR+0x76>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2201      	movs	r2, #1
 80092fc:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80092fe:	2105      	movs	r1, #5
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f7ff fb89 	bl	8008a18 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f003 0302 	and.w	r3, r3, #2
 800930c:	2b00      	cmp	r3, #0
 800930e:	d00c      	beq.n	800932a <HRTIM_Master_ISR+0x9a>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	f003 0302 	and.w	r3, r3, #2
 8009316:	2b00      	cmp	r3, #0
 8009318:	d007      	beq.n	800932a <HRTIM_Master_ISR+0x9a>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	2202      	movs	r2, #2
 8009320:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8009322:	2105      	movs	r1, #5
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f7fa fd03 	bl	8003d30 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f003 0304 	and.w	r3, r3, #4
 8009330:	2b00      	cmp	r3, #0
 8009332:	d00c      	beq.n	800934e <HRTIM_Master_ISR+0xbe>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	f003 0304 	and.w	r3, r3, #4
 800933a:	2b00      	cmp	r3, #0
 800933c:	d007      	beq.n	800934e <HRTIM_Master_ISR+0xbe>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	2204      	movs	r2, #4
 8009344:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8009346:	2105      	movs	r1, #5
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f7fa fcfd 	bl	8003d48 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f003 0308 	and.w	r3, r3, #8
 8009354:	2b00      	cmp	r3, #0
 8009356:	d00c      	beq.n	8009372 <HRTIM_Master_ISR+0xe2>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	f003 0308 	and.w	r3, r3, #8
 800935e:	2b00      	cmp	r3, #0
 8009360:	d007      	beq.n	8009372 <HRTIM_Master_ISR+0xe2>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	2208      	movs	r2, #8
 8009368:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800936a:	2105      	movs	r1, #5
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f7ff fb5e 	bl	8008a2e <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f003 0310 	and.w	r3, r3, #16
 8009378:	2b00      	cmp	r3, #0
 800937a:	d00c      	beq.n	8009396 <HRTIM_Master_ISR+0x106>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	f003 0310 	and.w	r3, r3, #16
 8009382:	2b00      	cmp	r3, #0
 8009384:	d007      	beq.n	8009396 <HRTIM_Master_ISR+0x106>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2210      	movs	r2, #16
 800938c:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800938e:	2105      	movs	r1, #5
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f7fa fd4d 	bl	8003e30 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f003 0320 	and.w	r3, r3, #32
 800939c:	2b00      	cmp	r3, #0
 800939e:	d00b      	beq.n	80093b8 <HRTIM_Master_ISR+0x128>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	f003 0320 	and.w	r3, r3, #32
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d006      	beq.n	80093b8 <HRTIM_Master_ISR+0x128>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	2220      	movs	r2, #32
 80093b0:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f7ff fb1b 	bl	80089ee <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00c      	beq.n	80093dc <HRTIM_Master_ISR+0x14c>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d007      	beq.n	80093dc <HRTIM_Master_ISR+0x14c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2240      	movs	r2, #64	; 0x40
 80093d2:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80093d4:	2105      	movs	r1, #5
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f7ff fb13 	bl	8008a02 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80093dc:	bf00      	nop
 80093de:	3718      	adds	r7, #24
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b084      	sub	sp, #16
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	3301      	adds	r3, #1
 80093f6:	01db      	lsls	r3, r3, #7
 80093f8:	4413      	add	r3, r2
 80093fa:	3304      	adds	r3, #4
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	01db      	lsls	r3, r3, #7
 8009408:	4413      	add	r3, r2
 800940a:	338c      	adds	r3, #140	; 0x8c
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f003 0301 	and.w	r3, r3, #1
 8009416:	2b00      	cmp	r3, #0
 8009418:	d010      	beq.n	800943c <HRTIM_Timer_ISR+0x58>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	f003 0301 	and.w	r3, r3, #1
 8009420:	2b00      	cmp	r3, #0
 8009422:	d00b      	beq.n	800943c <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	01db      	lsls	r3, r3, #7
 800942c:	4413      	add	r3, r2
 800942e:	3388      	adds	r3, #136	; 0x88
 8009430:	2201      	movs	r2, #1
 8009432:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 8009434:	6839      	ldr	r1, [r7, #0]
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f7ff faee 	bl	8008a18 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f003 0302 	and.w	r3, r3, #2
 8009442:	2b00      	cmp	r3, #0
 8009444:	d010      	beq.n	8009468 <HRTIM_Timer_ISR+0x84>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	f003 0302 	and.w	r3, r3, #2
 800944c:	2b00      	cmp	r3, #0
 800944e:	d00b      	beq.n	8009468 <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681a      	ldr	r2, [r3, #0]
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	01db      	lsls	r3, r3, #7
 8009458:	4413      	add	r3, r2
 800945a:	3388      	adds	r3, #136	; 0x88
 800945c:	2202      	movs	r2, #2
 800945e:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 8009460:	6839      	ldr	r1, [r7, #0]
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f7fa fc64 	bl	8003d30 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f003 0304 	and.w	r3, r3, #4
 800946e:	2b00      	cmp	r3, #0
 8009470:	d010      	beq.n	8009494 <HRTIM_Timer_ISR+0xb0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	f003 0304 	and.w	r3, r3, #4
 8009478:	2b00      	cmp	r3, #0
 800947a:	d00b      	beq.n	8009494 <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	01db      	lsls	r3, r3, #7
 8009484:	4413      	add	r3, r2
 8009486:	3388      	adds	r3, #136	; 0x88
 8009488:	2204      	movs	r2, #4
 800948a:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 800948c:	6839      	ldr	r1, [r7, #0]
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f7fa fc5a 	bl	8003d48 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f003 0308 	and.w	r3, r3, #8
 800949a:	2b00      	cmp	r3, #0
 800949c:	d010      	beq.n	80094c0 <HRTIM_Timer_ISR+0xdc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	f003 0308 	and.w	r3, r3, #8
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d00b      	beq.n	80094c0 <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	01db      	lsls	r3, r3, #7
 80094b0:	4413      	add	r3, r2
 80094b2:	3388      	adds	r3, #136	; 0x88
 80094b4:	2208      	movs	r2, #8
 80094b6:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 80094b8:	6839      	ldr	r1, [r7, #0]
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f7ff fab7 	bl	8008a2e <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f003 0310 	and.w	r3, r3, #16
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d010      	beq.n	80094ec <HRTIM_Timer_ISR+0x108>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	f003 0310 	and.w	r3, r3, #16
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d00b      	beq.n	80094ec <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	01db      	lsls	r3, r3, #7
 80094dc:	4413      	add	r3, r2
 80094de:	3388      	adds	r3, #136	; 0x88
 80094e0:	2210      	movs	r2, #16
 80094e2:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 80094e4:	6839      	ldr	r1, [r7, #0]
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f7fa fca2 	bl	8003e30 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d010      	beq.n	8009518 <HRTIM_Timer_ISR+0x134>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d00b      	beq.n	8009518 <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	01db      	lsls	r3, r3, #7
 8009508:	4413      	add	r3, r2
 800950a:	3388      	adds	r3, #136	; 0x88
 800950c:	2240      	movs	r2, #64	; 0x40
 800950e:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 8009510:	6839      	ldr	r1, [r7, #0]
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f7ff fa75 	bl	8008a02 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800951e:	2b00      	cmp	r3, #0
 8009520:	d010      	beq.n	8009544 <HRTIM_Timer_ISR+0x160>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009528:	2b00      	cmp	r3, #0
 800952a:	d00b      	beq.n	8009544 <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	01db      	lsls	r3, r3, #7
 8009534:	4413      	add	r3, r2
 8009536:	3388      	adds	r3, #136	; 0x88
 8009538:	2280      	movs	r2, #128	; 0x80
 800953a:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 800953c:	6839      	ldr	r1, [r7, #0]
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f7ff fa80 	bl	8008a44 <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800954a:	2b00      	cmp	r3, #0
 800954c:	d011      	beq.n	8009572 <HRTIM_Timer_ISR+0x18e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009554:	2b00      	cmp	r3, #0
 8009556:	d00c      	beq.n	8009572 <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	01db      	lsls	r3, r3, #7
 8009560:	4413      	add	r3, r2
 8009562:	3388      	adds	r3, #136	; 0x88
 8009564:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009568:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 800956a:	6839      	ldr	r1, [r7, #0]
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f7ff fa74 	bl	8008a5a <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009578:	2b00      	cmp	r3, #0
 800957a:	d011      	beq.n	80095a0 <HRTIM_Timer_ISR+0x1bc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009582:	2b00      	cmp	r3, #0
 8009584:	d00c      	beq.n	80095a0 <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	01db      	lsls	r3, r3, #7
 800958e:	4413      	add	r3, r2
 8009590:	3388      	adds	r3, #136	; 0x88
 8009592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009596:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 8009598:	6839      	ldr	r1, [r7, #0]
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f7ff fa7e 	bl	8008a9c <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d011      	beq.n	80095ce <HRTIM_Timer_ISR+0x1ea>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d00c      	beq.n	80095ce <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681a      	ldr	r2, [r3, #0]
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	01db      	lsls	r3, r3, #7
 80095bc:	4413      	add	r3, r2
 80095be:	3388      	adds	r3, #136	; 0x88
 80095c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80095c4:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 80095c6:	6839      	ldr	r1, [r7, #0]
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f7ff fa72 	bl	8008ab2 <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d011      	beq.n	80095fc <HRTIM_Timer_ISR+0x218>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d00c      	beq.n	80095fc <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	01db      	lsls	r3, r3, #7
 80095ea:	4413      	add	r3, r2
 80095ec:	3388      	adds	r3, #136	; 0x88
 80095ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80095f2:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 80095f4:	6839      	ldr	r1, [r7, #0]
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f7ff fa66 	bl	8008ac8 <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009602:	2b00      	cmp	r3, #0
 8009604:	d011      	beq.n	800962a <HRTIM_Timer_ISR+0x246>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800960c:	2b00      	cmp	r3, #0
 800960e:	d00c      	beq.n	800962a <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	01db      	lsls	r3, r3, #7
 8009618:	4413      	add	r3, r2
 800961a:	3388      	adds	r3, #136	; 0x88
 800961c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009620:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 8009622:	6839      	ldr	r1, [r7, #0]
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f7ff fa5a 	bl	8008ade <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009630:	2b00      	cmp	r3, #0
 8009632:	d011      	beq.n	8009658 <HRTIM_Timer_ISR+0x274>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800963a:	2b00      	cmp	r3, #0
 800963c:	d00c      	beq.n	8009658 <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681a      	ldr	r2, [r3, #0]
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	01db      	lsls	r3, r3, #7
 8009646:	4413      	add	r3, r2
 8009648:	3388      	adds	r3, #136	; 0x88
 800964a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800964e:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 8009650:	6839      	ldr	r1, [r7, #0]
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f7ff fa17 	bl	8008a86 <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800965e:	2b00      	cmp	r3, #0
 8009660:	d011      	beq.n	8009686 <HRTIM_Timer_ISR+0x2a2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009668:	2b00      	cmp	r3, #0
 800966a:	d00c      	beq.n	8009686 <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	01db      	lsls	r3, r3, #7
 8009674:	4413      	add	r3, r2
 8009676:	3388      	adds	r3, #136	; 0x88
 8009678:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800967c:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 800967e:	6839      	ldr	r1, [r7, #0]
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f7ff f9f5 	bl	8008a70 <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8009686:	bf00      	nop
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
	...

08009690 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d101      	bne.n	80096a2 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800969e:	2301      	movs	r3, #1
 80096a0:	e097      	b.n	80097d2 <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d106      	bne.n	80096c2 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2200      	movs	r2, #0
 80096b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f7fa f849 	bl	8003754 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2202      	movs	r2, #2
 80096c6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d004      	beq.n	80096e4 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80096e2:	d103      	bne.n	80096ec <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f023 031e 	bic.w	r3, r3, #30
 80096ea:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	695b      	ldr	r3, [r3, #20]
 80096f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d003      	beq.n	8009700 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80096f8:	68fa      	ldr	r2, [r7, #12]
 80096fa:	4b38      	ldr	r3, [pc, #224]	; (80097dc <HAL_LPTIM_Init+0x14c>)
 80096fc:	4013      	ands	r3, r2
 80096fe:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8009700:	68fa      	ldr	r2, [r7, #12]
 8009702:	4b37      	ldr	r3, [pc, #220]	; (80097e0 <HAL_LPTIM_Init+0x150>)
 8009704:	4013      	ands	r3, r2
 8009706:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8009710:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8009716:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 800971c:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8009722:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8009724:	68fa      	ldr	r2, [r7, #12]
 8009726:	4313      	orrs	r3, r2
 8009728:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d107      	bne.n	8009742 <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800973a:	4313      	orrs	r3, r2
 800973c:	68fa      	ldr	r2, [r7, #12]
 800973e:	4313      	orrs	r3, r2
 8009740:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	2b01      	cmp	r3, #1
 8009748:	d004      	beq.n	8009754 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800974e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009752:	d107      	bne.n	8009764 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800975c:	4313      	orrs	r3, r2
 800975e:	68fa      	ldr	r2, [r7, #12]
 8009760:	4313      	orrs	r3, r2
 8009762:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	695b      	ldr	r3, [r3, #20]
 8009768:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800976c:	4293      	cmp	r3, r2
 800976e:	d00a      	beq.n	8009786 <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8009778:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800977e:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8009780:	68fa      	ldr	r2, [r7, #12]
 8009782:	4313      	orrs	r3, r2
 8009784:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	68fa      	ldr	r2, [r7, #12]
 800978c:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4a14      	ldr	r2, [pc, #80]	; (80097e4 <HAL_LPTIM_Init+0x154>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d004      	beq.n	80097a2 <HAL_LPTIM_Init+0x112>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4a12      	ldr	r2, [pc, #72]	; (80097e8 <HAL_LPTIM_Init+0x158>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d108      	bne.n	80097b4 <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	430a      	orrs	r2, r1
 80097b0:	625a      	str	r2, [r3, #36]	; 0x24
 80097b2:	e009      	b.n	80097c8 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4a0c      	ldr	r2, [pc, #48]	; (80097ec <HAL_LPTIM_Init+0x15c>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d104      	bne.n	80097c8 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80097c6:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80097d0:	2300      	movs	r3, #0
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3710      	adds	r7, #16
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	ffff1f3f 	.word	0xffff1f3f
 80097e0:	ff19f1fe 	.word	0xff19f1fe
 80097e4:	40002400 	.word	0x40002400
 80097e8:	58002400 	.word	0x58002400
 80097ec:	58002800 	.word	0x58002800

080097f0 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2202      	movs	r2, #2
 80097fe:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	685b      	ldr	r3, [r3, #4]
 8009806:	2b01      	cmp	r3, #1
 8009808:	d00c      	beq.n	8009824 <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800980e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009812:	d107      	bne.n	8009824 <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	68da      	ldr	r2, [r3, #12]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 8009822:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	691a      	ldr	r2, [r3, #16]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f042 0201 	orr.w	r2, r2, #1
 8009832:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	2210      	movs	r2, #16
 800983a:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	683a      	ldr	r2, [r7, #0]
 8009842:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8009844:	2110      	movs	r1, #16
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 f91e 	bl	8009a88 <LPTIM_WaitForFlag>
 800984c:	4603      	mov	r3, r0
 800984e:	2b03      	cmp	r3, #3
 8009850:	d101      	bne.n	8009856 <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 8009852:	2303      	movs	r3, #3
 8009854:	e02f      	b.n	80098b6 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 f946 	bl	8009ae8 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 f905 	bl	8009a6c <HAL_LPTIM_GetState>
 8009862:	4603      	mov	r3, r0
 8009864:	2b03      	cmp	r3, #3
 8009866:	d101      	bne.n	800986c <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 8009868:	2303      	movs	r3, #3
 800986a:	e024      	b.n	80098b6 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	689a      	ldr	r2, [r3, #8]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f042 0210 	orr.w	r2, r2, #16
 800987a:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	689a      	ldr	r2, [r3, #8]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f042 0202 	orr.w	r2, r2, #2
 800988a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	691a      	ldr	r2, [r3, #16]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f042 0201 	orr.w	r2, r2, #1
 800989a:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	691a      	ldr	r2, [r3, #16]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f042 0204 	orr.w	r2, r2, #4
 80098aa:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2201      	movs	r2, #1
 80098b0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80098b4:	2300      	movs	r3, #0
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3708      	adds	r7, #8
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}

080098be <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80098be:	b580      	push	{r7, lr}
 80098c0:	b082      	sub	sp, #8
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f003 0301 	and.w	r3, r3, #1
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d10d      	bne.n	80098f0 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	f003 0301 	and.w	r3, r3, #1
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d106      	bne.n	80098f0 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2201      	movs	r2, #1
 80098e8:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 f882 	bl	80099f4 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f003 0302 	and.w	r3, r3, #2
 80098fa:	2b02      	cmp	r3, #2
 80098fc:	d10d      	bne.n	800991a <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	689b      	ldr	r3, [r3, #8]
 8009904:	f003 0302 	and.w	r3, r3, #2
 8009908:	2b02      	cmp	r3, #2
 800990a:	d106      	bne.n	800991a <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	2202      	movs	r2, #2
 8009912:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f7fa f9fd 	bl	8003d14 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f003 0304 	and.w	r3, r3, #4
 8009924:	2b04      	cmp	r3, #4
 8009926:	d10d      	bne.n	8009944 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	689b      	ldr	r3, [r3, #8]
 800992e:	f003 0304 	and.w	r3, r3, #4
 8009932:	2b04      	cmp	r3, #4
 8009934:	d106      	bne.n	8009944 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	2204      	movs	r2, #4
 800993c:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 f862 	bl	8009a08 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f003 0308 	and.w	r3, r3, #8
 800994e:	2b08      	cmp	r3, #8
 8009950:	d10d      	bne.n	800996e <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	689b      	ldr	r3, [r3, #8]
 8009958:	f003 0308 	and.w	r3, r3, #8
 800995c:	2b08      	cmp	r3, #8
 800995e:	d106      	bne.n	800996e <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2208      	movs	r2, #8
 8009966:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f000 f857 	bl	8009a1c <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f003 0310 	and.w	r3, r3, #16
 8009978:	2b10      	cmp	r3, #16
 800997a:	d10d      	bne.n	8009998 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	689b      	ldr	r3, [r3, #8]
 8009982:	f003 0310 	and.w	r3, r3, #16
 8009986:	2b10      	cmp	r3, #16
 8009988:	d106      	bne.n	8009998 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2210      	movs	r2, #16
 8009990:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 f84c 	bl	8009a30 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f003 0320 	and.w	r3, r3, #32
 80099a2:	2b20      	cmp	r3, #32
 80099a4:	d10d      	bne.n	80099c2 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	f003 0320 	and.w	r3, r3, #32
 80099b0:	2b20      	cmp	r3, #32
 80099b2:	d106      	bne.n	80099c2 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	2220      	movs	r2, #32
 80099ba:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 f841 	bl	8009a44 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099cc:	2b40      	cmp	r3, #64	; 0x40
 80099ce:	d10d      	bne.n	80099ec <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	689b      	ldr	r3, [r3, #8]
 80099d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099da:	2b40      	cmp	r3, #64	; 0x40
 80099dc:	d106      	bne.n	80099ec <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	2240      	movs	r2, #64	; 0x40
 80099e4:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 f836 	bl	8009a58 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80099ec:	bf00      	nop
 80099ee:	3708      	adds	r7, #8
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80099fc:	bf00      	nop
 80099fe:	370c      	adds	r7, #12
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr

08009a08 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8009a10:	bf00      	nop
 8009a12:	370c      	adds	r7, #12
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr

08009a1c <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8009a24:	bf00      	nop
 8009a26:	370c      	adds	r7, #12
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8009a38:	bf00      	nop
 8009a3a:	370c      	adds	r7, #12
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr

08009a44 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b083      	sub	sp, #12
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8009a4c:	bf00      	nop
 8009a4e:	370c      	adds	r7, #12
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr

08009a58 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b083      	sub	sp, #12
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8009a60:	bf00      	nop
 8009a62:	370c      	adds	r7, #12
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr

08009a6c <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009a7a:	b2db      	uxtb	r3, r3
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	370c      	adds	r7, #12
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b085      	sub	sp, #20
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8009a92:	2300      	movs	r3, #0
 8009a94:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8009a96:	4b12      	ldr	r3, [pc, #72]	; (8009ae0 <LPTIM_WaitForFlag+0x58>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a12      	ldr	r2, [pc, #72]	; (8009ae4 <LPTIM_WaitForFlag+0x5c>)
 8009a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8009aa0:	0b9b      	lsrs	r3, r3, #14
 8009aa2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009aa6:	fb02 f303 	mul.w	r3, r2, r3
 8009aaa:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	3b01      	subs	r3, #1
 8009ab0:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d101      	bne.n	8009abc <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8009ab8:	2303      	movs	r3, #3
 8009aba:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	4013      	ands	r3, r2
 8009ac6:	683a      	ldr	r2, [r7, #0]
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d002      	beq.n	8009ad2 <LPTIM_WaitForFlag+0x4a>
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d1ec      	bne.n	8009aac <LPTIM_WaitForFlag+0x24>

  return result;
 8009ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3714      	adds	r7, #20
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr
 8009ae0:	2000000c 	.word	0x2000000c
 8009ae4:	d1b71759 	.word	0xd1b71759

08009ae8 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b08c      	sub	sp, #48	; 0x30
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8009af0:	2300      	movs	r3, #0
 8009af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009af4:	f3ef 8310 	mrs	r3, PRIMASK
 8009af8:	60fb      	str	r3, [r7, #12]
  return(result);
 8009afa:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8009afc:	62bb      	str	r3, [r7, #40]	; 0x28
 8009afe:	2301      	movs	r3, #1
 8009b00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	f383 8810 	msr	PRIMASK, r3
}
 8009b08:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a81      	ldr	r2, [pc, #516]	; (8009d14 <LPTIM_Disable+0x22c>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d02d      	beq.n	8009b70 <LPTIM_Disable+0x88>
 8009b14:	4a7f      	ldr	r2, [pc, #508]	; (8009d14 <LPTIM_Disable+0x22c>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d830      	bhi.n	8009b7c <LPTIM_Disable+0x94>
 8009b1a:	4a7f      	ldr	r2, [pc, #508]	; (8009d18 <LPTIM_Disable+0x230>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d021      	beq.n	8009b64 <LPTIM_Disable+0x7c>
 8009b20:	4a7d      	ldr	r2, [pc, #500]	; (8009d18 <LPTIM_Disable+0x230>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d82a      	bhi.n	8009b7c <LPTIM_Disable+0x94>
 8009b26:	4a7d      	ldr	r2, [pc, #500]	; (8009d1c <LPTIM_Disable+0x234>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d015      	beq.n	8009b58 <LPTIM_Disable+0x70>
 8009b2c:	4a7b      	ldr	r2, [pc, #492]	; (8009d1c <LPTIM_Disable+0x234>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d824      	bhi.n	8009b7c <LPTIM_Disable+0x94>
 8009b32:	4a7b      	ldr	r2, [pc, #492]	; (8009d20 <LPTIM_Disable+0x238>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d003      	beq.n	8009b40 <LPTIM_Disable+0x58>
 8009b38:	4a7a      	ldr	r2, [pc, #488]	; (8009d24 <LPTIM_Disable+0x23c>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d006      	beq.n	8009b4c <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8009b3e:	e01d      	b.n	8009b7c <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009b40:	4b79      	ldr	r3, [pc, #484]	; (8009d28 <LPTIM_Disable+0x240>)
 8009b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b44:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009b48:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8009b4a:	e018      	b.n	8009b7e <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009b4c:	4b76      	ldr	r3, [pc, #472]	; (8009d28 <LPTIM_Disable+0x240>)
 8009b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b50:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8009b54:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8009b56:	e012      	b.n	8009b7e <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8009b58:	4b73      	ldr	r3, [pc, #460]	; (8009d28 <LPTIM_Disable+0x240>)
 8009b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b5c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009b60:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8009b62:	e00c      	b.n	8009b7e <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 8009b64:	4b70      	ldr	r3, [pc, #448]	; (8009d28 <LPTIM_Disable+0x240>)
 8009b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b68:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8009b6e:	e006      	b.n	8009b7e <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 8009b70:	4b6d      	ldr	r3, [pc, #436]	; (8009d28 <LPTIM_Disable+0x240>)
 8009b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b74:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009b78:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8009b7a:	e000      	b.n	8009b7e <LPTIM_Disable+0x96>
      break;
 8009b7c:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	689b      	ldr	r3, [r3, #8]
 8009b84:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	68db      	ldr	r3, [r3, #12]
 8009b8c:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	695b      	ldr	r3, [r3, #20]
 8009b94:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	699b      	ldr	r3, [r3, #24]
 8009b9c:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba4:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a5a      	ldr	r2, [pc, #360]	; (8009d14 <LPTIM_Disable+0x22c>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d059      	beq.n	8009c64 <LPTIM_Disable+0x17c>
 8009bb0:	4a58      	ldr	r2, [pc, #352]	; (8009d14 <LPTIM_Disable+0x22c>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d867      	bhi.n	8009c86 <LPTIM_Disable+0x19e>
 8009bb6:	4a58      	ldr	r2, [pc, #352]	; (8009d18 <LPTIM_Disable+0x230>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d042      	beq.n	8009c42 <LPTIM_Disable+0x15a>
 8009bbc:	4a56      	ldr	r2, [pc, #344]	; (8009d18 <LPTIM_Disable+0x230>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d861      	bhi.n	8009c86 <LPTIM_Disable+0x19e>
 8009bc2:	4a56      	ldr	r2, [pc, #344]	; (8009d1c <LPTIM_Disable+0x234>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d02b      	beq.n	8009c20 <LPTIM_Disable+0x138>
 8009bc8:	4a54      	ldr	r2, [pc, #336]	; (8009d1c <LPTIM_Disable+0x234>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d85b      	bhi.n	8009c86 <LPTIM_Disable+0x19e>
 8009bce:	4a54      	ldr	r2, [pc, #336]	; (8009d20 <LPTIM_Disable+0x238>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d003      	beq.n	8009bdc <LPTIM_Disable+0xf4>
 8009bd4:	4a53      	ldr	r2, [pc, #332]	; (8009d24 <LPTIM_Disable+0x23c>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d011      	beq.n	8009bfe <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8009bda:	e054      	b.n	8009c86 <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8009bdc:	4b52      	ldr	r3, [pc, #328]	; (8009d28 <LPTIM_Disable+0x240>)
 8009bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009be2:	4a51      	ldr	r2, [pc, #324]	; (8009d28 <LPTIM_Disable+0x240>)
 8009be4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009be8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8009bec:	4b4e      	ldr	r3, [pc, #312]	; (8009d28 <LPTIM_Disable+0x240>)
 8009bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bf2:	4a4d      	ldr	r2, [pc, #308]	; (8009d28 <LPTIM_Disable+0x240>)
 8009bf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009bf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      break;
 8009bfc:	e044      	b.n	8009c88 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8009bfe:	4b4a      	ldr	r3, [pc, #296]	; (8009d28 <LPTIM_Disable+0x240>)
 8009c00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c04:	4a48      	ldr	r2, [pc, #288]	; (8009d28 <LPTIM_Disable+0x240>)
 8009c06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009c0a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8009c0e:	4b46      	ldr	r3, [pc, #280]	; (8009d28 <LPTIM_Disable+0x240>)
 8009c10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c14:	4a44      	ldr	r2, [pc, #272]	; (8009d28 <LPTIM_Disable+0x240>)
 8009c16:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c1a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8009c1e:	e033      	b.n	8009c88 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8009c20:	4b41      	ldr	r3, [pc, #260]	; (8009d28 <LPTIM_Disable+0x240>)
 8009c22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c26:	4a40      	ldr	r2, [pc, #256]	; (8009d28 <LPTIM_Disable+0x240>)
 8009c28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009c2c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8009c30:	4b3d      	ldr	r3, [pc, #244]	; (8009d28 <LPTIM_Disable+0x240>)
 8009c32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c36:	4a3c      	ldr	r2, [pc, #240]	; (8009d28 <LPTIM_Disable+0x240>)
 8009c38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c3c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8009c40:	e022      	b.n	8009c88 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 8009c42:	4b39      	ldr	r3, [pc, #228]	; (8009d28 <LPTIM_Disable+0x240>)
 8009c44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c48:	4a37      	ldr	r2, [pc, #220]	; (8009d28 <LPTIM_Disable+0x240>)
 8009c4a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009c4e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 8009c52:	4b35      	ldr	r3, [pc, #212]	; (8009d28 <LPTIM_Disable+0x240>)
 8009c54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c58:	4a33      	ldr	r2, [pc, #204]	; (8009d28 <LPTIM_Disable+0x240>)
 8009c5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c5e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8009c62:	e011      	b.n	8009c88 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 8009c64:	4b30      	ldr	r3, [pc, #192]	; (8009d28 <LPTIM_Disable+0x240>)
 8009c66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c6a:	4a2f      	ldr	r2, [pc, #188]	; (8009d28 <LPTIM_Disable+0x240>)
 8009c6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009c70:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 8009c74:	4b2c      	ldr	r3, [pc, #176]	; (8009d28 <LPTIM_Disable+0x240>)
 8009c76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c7a:	4a2b      	ldr	r2, [pc, #172]	; (8009d28 <LPTIM_Disable+0x240>)
 8009c7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c80:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8009c84:	e000      	b.n	8009c88 <LPTIM_Disable+0x1a0>
      break;
 8009c86:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d103      	bne.n	8009c96 <LPTIM_Disable+0x1ae>
 8009c8e:	69bb      	ldr	r3, [r7, #24]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	f000 80d1 	beq.w	8009e38 <LPTIM_Disable+0x350>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a1e      	ldr	r2, [pc, #120]	; (8009d14 <LPTIM_Disable+0x22c>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d031      	beq.n	8009d04 <LPTIM_Disable+0x21c>
 8009ca0:	4a1c      	ldr	r2, [pc, #112]	; (8009d14 <LPTIM_Disable+0x22c>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d842      	bhi.n	8009d2c <LPTIM_Disable+0x244>
 8009ca6:	4a1c      	ldr	r2, [pc, #112]	; (8009d18 <LPTIM_Disable+0x230>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d024      	beq.n	8009cf6 <LPTIM_Disable+0x20e>
 8009cac:	4a1a      	ldr	r2, [pc, #104]	; (8009d18 <LPTIM_Disable+0x230>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d83c      	bhi.n	8009d2c <LPTIM_Disable+0x244>
 8009cb2:	4a1a      	ldr	r2, [pc, #104]	; (8009d1c <LPTIM_Disable+0x234>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d017      	beq.n	8009ce8 <LPTIM_Disable+0x200>
 8009cb8:	4a18      	ldr	r2, [pc, #96]	; (8009d1c <LPTIM_Disable+0x234>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d836      	bhi.n	8009d2c <LPTIM_Disable+0x244>
 8009cbe:	4a18      	ldr	r2, [pc, #96]	; (8009d20 <LPTIM_Disable+0x238>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d003      	beq.n	8009ccc <LPTIM_Disable+0x1e4>
 8009cc4:	4a17      	ldr	r2, [pc, #92]	; (8009d24 <LPTIM_Disable+0x23c>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d007      	beq.n	8009cda <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8009cca:	e02f      	b.n	8009d2c <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 8009ccc:	4b16      	ldr	r3, [pc, #88]	; (8009d28 <LPTIM_Disable+0x240>)
 8009cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cd0:	4a15      	ldr	r2, [pc, #84]	; (8009d28 <LPTIM_Disable+0x240>)
 8009cd2:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8009cd6:	6553      	str	r3, [r2, #84]	; 0x54
        break;
 8009cd8:	e029      	b.n	8009d2e <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 8009cda:	4b13      	ldr	r3, [pc, #76]	; (8009d28 <LPTIM_Disable+0x240>)
 8009cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cde:	4a12      	ldr	r2, [pc, #72]	; (8009d28 <LPTIM_Disable+0x240>)
 8009ce0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8009ce4:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8009ce6:	e022      	b.n	8009d2e <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 8009ce8:	4b0f      	ldr	r3, [pc, #60]	; (8009d28 <LPTIM_Disable+0x240>)
 8009cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cec:	4a0e      	ldr	r2, [pc, #56]	; (8009d28 <LPTIM_Disable+0x240>)
 8009cee:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009cf2:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8009cf4:	e01b      	b.n	8009d2e <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 8009cf6:	4b0c      	ldr	r3, [pc, #48]	; (8009d28 <LPTIM_Disable+0x240>)
 8009cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cfa:	4a0b      	ldr	r2, [pc, #44]	; (8009d28 <LPTIM_Disable+0x240>)
 8009cfc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009d00:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8009d02:	e014      	b.n	8009d2e <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 8009d04:	4b08      	ldr	r3, [pc, #32]	; (8009d28 <LPTIM_Disable+0x240>)
 8009d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d08:	4a07      	ldr	r2, [pc, #28]	; (8009d28 <LPTIM_Disable+0x240>)
 8009d0a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009d0e:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8009d10:	e00d      	b.n	8009d2e <LPTIM_Disable+0x246>
 8009d12:	bf00      	nop
 8009d14:	58003000 	.word	0x58003000
 8009d18:	58002c00 	.word	0x58002c00
 8009d1c:	58002800 	.word	0x58002800
 8009d20:	40002400 	.word	0x40002400
 8009d24:	58002400 	.word	0x58002400
 8009d28:	58024400 	.word	0x58024400
        break;
 8009d2c:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8009d2e:	69fb      	ldr	r3, [r7, #28]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d01a      	beq.n	8009d6a <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	691a      	ldr	r2, [r3, #16]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f042 0201 	orr.w	r2, r2, #1
 8009d42:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	69fa      	ldr	r2, [r7, #28]
 8009d4a:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8009d4c:	2108      	movs	r1, #8
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f7ff fe9a 	bl	8009a88 <LPTIM_WaitForFlag>
 8009d54:	4603      	mov	r3, r0
 8009d56:	2b03      	cmp	r3, #3
 8009d58:	d103      	bne.n	8009d62 <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2203      	movs	r2, #3
 8009d5e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	2208      	movs	r2, #8
 8009d68:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8009d6a:	69bb      	ldr	r3, [r7, #24]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d01a      	beq.n	8009da6 <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	691a      	ldr	r2, [r3, #16]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f042 0201 	orr.w	r2, r2, #1
 8009d7e:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	69ba      	ldr	r2, [r7, #24]
 8009d86:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8009d88:	2110      	movs	r1, #16
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f7ff fe7c 	bl	8009a88 <LPTIM_WaitForFlag>
 8009d90:	4603      	mov	r3, r0
 8009d92:	2b03      	cmp	r3, #3
 8009d94:	d103      	bne.n	8009d9e <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2203      	movs	r2, #3
 8009d9a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	2210      	movs	r2, #16
 8009da4:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a32      	ldr	r2, [pc, #200]	; (8009e74 <LPTIM_Disable+0x38c>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d039      	beq.n	8009e24 <LPTIM_Disable+0x33c>
 8009db0:	4a30      	ldr	r2, [pc, #192]	; (8009e74 <LPTIM_Disable+0x38c>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d83f      	bhi.n	8009e36 <LPTIM_Disable+0x34e>
 8009db6:	4a30      	ldr	r2, [pc, #192]	; (8009e78 <LPTIM_Disable+0x390>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d02a      	beq.n	8009e12 <LPTIM_Disable+0x32a>
 8009dbc:	4a2e      	ldr	r2, [pc, #184]	; (8009e78 <LPTIM_Disable+0x390>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d839      	bhi.n	8009e36 <LPTIM_Disable+0x34e>
 8009dc2:	4a2e      	ldr	r2, [pc, #184]	; (8009e7c <LPTIM_Disable+0x394>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d01b      	beq.n	8009e00 <LPTIM_Disable+0x318>
 8009dc8:	4a2c      	ldr	r2, [pc, #176]	; (8009e7c <LPTIM_Disable+0x394>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d833      	bhi.n	8009e36 <LPTIM_Disable+0x34e>
 8009dce:	4a2c      	ldr	r2, [pc, #176]	; (8009e80 <LPTIM_Disable+0x398>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d003      	beq.n	8009ddc <LPTIM_Disable+0x2f4>
 8009dd4:	4a2b      	ldr	r2, [pc, #172]	; (8009e84 <LPTIM_Disable+0x39c>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d009      	beq.n	8009dee <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8009dda:	e02c      	b.n	8009e36 <LPTIM_Disable+0x34e>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8009ddc:	4b2a      	ldr	r3, [pc, #168]	; (8009e88 <LPTIM_Disable+0x3a0>)
 8009dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009de0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009de4:	4928      	ldr	r1, [pc, #160]	; (8009e88 <LPTIM_Disable+0x3a0>)
 8009de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009de8:	4313      	orrs	r3, r2
 8009dea:	654b      	str	r3, [r1, #84]	; 0x54
        break;
 8009dec:	e024      	b.n	8009e38 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8009dee:	4b26      	ldr	r3, [pc, #152]	; (8009e88 <LPTIM_Disable+0x3a0>)
 8009df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009df2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009df6:	4924      	ldr	r1, [pc, #144]	; (8009e88 <LPTIM_Disable+0x3a0>)
 8009df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009dfe:	e01b      	b.n	8009e38 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8009e00:	4b21      	ldr	r3, [pc, #132]	; (8009e88 <LPTIM_Disable+0x3a0>)
 8009e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e04:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009e08:	491f      	ldr	r1, [pc, #124]	; (8009e88 <LPTIM_Disable+0x3a0>)
 8009e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009e10:	e012      	b.n	8009e38 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 8009e12:	4b1d      	ldr	r3, [pc, #116]	; (8009e88 <LPTIM_Disable+0x3a0>)
 8009e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009e1a:	491b      	ldr	r1, [pc, #108]	; (8009e88 <LPTIM_Disable+0x3a0>)
 8009e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009e22:	e009      	b.n	8009e38 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 8009e24:	4b18      	ldr	r3, [pc, #96]	; (8009e88 <LPTIM_Disable+0x3a0>)
 8009e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e28:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009e2c:	4916      	ldr	r1, [pc, #88]	; (8009e88 <LPTIM_Disable+0x3a0>)
 8009e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e30:	4313      	orrs	r3, r2
 8009e32:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009e34:	e000      	b.n	8009e38 <LPTIM_Disable+0x350>
        break;
 8009e36:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	691a      	ldr	r2, [r3, #16]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f022 0201 	bic.w	r2, r2, #1
 8009e46:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e4e:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	6a3a      	ldr	r2, [r7, #32]
 8009e56:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	697a      	ldr	r2, [r7, #20]
 8009e5e:	625a      	str	r2, [r3, #36]	; 0x24
 8009e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e62:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	f383 8810 	msr	PRIMASK, r3
}
 8009e6a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8009e6c:	bf00      	nop
 8009e6e:	3730      	adds	r7, #48	; 0x30
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}
 8009e74:	58003000 	.word	0x58003000
 8009e78:	58002c00 	.word	0x58002c00
 8009e7c:	58002800 	.word	0x58002800
 8009e80:	40002400 	.word	0x40002400
 8009e84:	58002400 	.word	0x58002400
 8009e88:	58024400 	.word	0x58024400

08009e8c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8009e90:	4b05      	ldr	r3, [pc, #20]	; (8009ea8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a04      	ldr	r2, [pc, #16]	; (8009ea8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e9a:	6013      	str	r3, [r2, #0]
}
 8009e9c:	bf00      	nop
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr
 8009ea6:	bf00      	nop
 8009ea8:	58024800 	.word	0x58024800

08009eac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009eb4:	4b19      	ldr	r3, [pc, #100]	; (8009f1c <HAL_PWREx_ConfigSupply+0x70>)
 8009eb6:	68db      	ldr	r3, [r3, #12]
 8009eb8:	f003 0304 	and.w	r3, r3, #4
 8009ebc:	2b04      	cmp	r3, #4
 8009ebe:	d00a      	beq.n	8009ed6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009ec0:	4b16      	ldr	r3, [pc, #88]	; (8009f1c <HAL_PWREx_ConfigSupply+0x70>)
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	f003 0307 	and.w	r3, r3, #7
 8009ec8:	687a      	ldr	r2, [r7, #4]
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d001      	beq.n	8009ed2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e01f      	b.n	8009f12 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	e01d      	b.n	8009f12 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009ed6:	4b11      	ldr	r3, [pc, #68]	; (8009f1c <HAL_PWREx_ConfigSupply+0x70>)
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	f023 0207 	bic.w	r2, r3, #7
 8009ede:	490f      	ldr	r1, [pc, #60]	; (8009f1c <HAL_PWREx_ConfigSupply+0x70>)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009ee6:	f7fa f9bf 	bl	8004268 <HAL_GetTick>
 8009eea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009eec:	e009      	b.n	8009f02 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009eee:	f7fa f9bb 	bl	8004268 <HAL_GetTick>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	1ad3      	subs	r3, r2, r3
 8009ef8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009efc:	d901      	bls.n	8009f02 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009efe:	2301      	movs	r3, #1
 8009f00:	e007      	b.n	8009f12 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009f02:	4b06      	ldr	r3, [pc, #24]	; (8009f1c <HAL_PWREx_ConfigSupply+0x70>)
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f0e:	d1ee      	bne.n	8009eee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009f10:	2300      	movs	r3, #0
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3710      	adds	r7, #16
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	58024800 	.word	0x58024800

08009f20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b08c      	sub	sp, #48	; 0x30
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d102      	bne.n	8009f34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	f000 bc48 	b.w	800a7c4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f003 0301 	and.w	r3, r3, #1
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	f000 8088 	beq.w	800a052 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f42:	4b99      	ldr	r3, [pc, #612]	; (800a1a8 <HAL_RCC_OscConfig+0x288>)
 8009f44:	691b      	ldr	r3, [r3, #16]
 8009f46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009f4c:	4b96      	ldr	r3, [pc, #600]	; (800a1a8 <HAL_RCC_OscConfig+0x288>)
 8009f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f50:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f54:	2b10      	cmp	r3, #16
 8009f56:	d007      	beq.n	8009f68 <HAL_RCC_OscConfig+0x48>
 8009f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f5a:	2b18      	cmp	r3, #24
 8009f5c:	d111      	bne.n	8009f82 <HAL_RCC_OscConfig+0x62>
 8009f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f60:	f003 0303 	and.w	r3, r3, #3
 8009f64:	2b02      	cmp	r3, #2
 8009f66:	d10c      	bne.n	8009f82 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f68:	4b8f      	ldr	r3, [pc, #572]	; (800a1a8 <HAL_RCC_OscConfig+0x288>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d06d      	beq.n	800a050 <HAL_RCC_OscConfig+0x130>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d169      	bne.n	800a050 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	f000 bc21 	b.w	800a7c4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f8a:	d106      	bne.n	8009f9a <HAL_RCC_OscConfig+0x7a>
 8009f8c:	4b86      	ldr	r3, [pc, #536]	; (800a1a8 <HAL_RCC_OscConfig+0x288>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4a85      	ldr	r2, [pc, #532]	; (800a1a8 <HAL_RCC_OscConfig+0x288>)
 8009f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f96:	6013      	str	r3, [r2, #0]
 8009f98:	e02e      	b.n	8009ff8 <HAL_RCC_OscConfig+0xd8>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d10c      	bne.n	8009fbc <HAL_RCC_OscConfig+0x9c>
 8009fa2:	4b81      	ldr	r3, [pc, #516]	; (800a1a8 <HAL_RCC_OscConfig+0x288>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	4a80      	ldr	r2, [pc, #512]	; (800a1a8 <HAL_RCC_OscConfig+0x288>)
 8009fa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009fac:	6013      	str	r3, [r2, #0]
 8009fae:	4b7e      	ldr	r3, [pc, #504]	; (800a1a8 <HAL_RCC_OscConfig+0x288>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4a7d      	ldr	r2, [pc, #500]	; (800a1a8 <HAL_RCC_OscConfig+0x288>)
 8009fb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009fb8:	6013      	str	r3, [r2, #0]
 8009fba:	e01d      	b.n	8009ff8 <HAL_RCC_OscConfig+0xd8>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009fc4:	d10c      	bne.n	8009fe0 <HAL_RCC_OscConfig+0xc0>
 8009fc6:	4b78      	ldr	r3, [pc, #480]	; (800a1a8 <HAL_RCC_OscConfig+0x288>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a77      	ldr	r2, [pc, #476]	; (800a1a8 <HAL_RCC_OscConfig+0x288>)
 8009fcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009fd0:	6013      	str	r3, [r2, #0]
 8009fd2:	4b75      	ldr	r3, [pc, #468]	; (800a1a8 <HAL_RCC_OscConfig+0x288>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a74      	ldr	r2, [pc, #464]	; (800a1a8 <HAL_RCC_OscConfig+0x288>)
 8009fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009fdc:	6013      	str	r3, [r2, #0]
 8009fde:	e00b      	b.n	8009ff8 <HAL_RCC_OscConfig+0xd8>
 8009fe0:	4b71      	ldr	r3, [pc, #452]	; (800a1a8 <HAL_RCC_OscConfig+0x288>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4a70      	ldr	r2, [pc, #448]	; (800a1a8 <HAL_RCC_OscConfig+0x288>)
 8009fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009fea:	6013      	str	r3, [r2, #0]
 8009fec:	4b6e      	ldr	r3, [pc, #440]	; (800a1a8 <HAL_RCC_OscConfig+0x288>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4a6d      	ldr	r2, [pc, #436]	; (800a1a8 <HAL_RCC_OscConfig+0x288>)
 8009ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ff6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d013      	beq.n	800a028 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a000:	f7fa f932 	bl	8004268 <HAL_GetTick>
 800a004:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a006:	e008      	b.n	800a01a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a008:	f7fa f92e 	bl	8004268 <HAL_GetTick>
 800a00c:	4602      	mov	r2, r0
 800a00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a010:	1ad3      	subs	r3, r2, r3
 800a012:	2b64      	cmp	r3, #100	; 0x64
 800a014:	d901      	bls.n	800a01a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a016:	2303      	movs	r3, #3
 800a018:	e3d4      	b.n	800a7c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a01a:	4b63      	ldr	r3, [pc, #396]	; (800a1a8 <HAL_RCC_OscConfig+0x288>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a022:	2b00      	cmp	r3, #0
 800a024:	d0f0      	beq.n	800a008 <HAL_RCC_OscConfig+0xe8>
 800a026:	e014      	b.n	800a052 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a028:	f7fa f91e 	bl	8004268 <HAL_GetTick>
 800a02c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a02e:	e008      	b.n	800a042 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a030:	f7fa f91a 	bl	8004268 <HAL_GetTick>
 800a034:	4602      	mov	r2, r0
 800a036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a038:	1ad3      	subs	r3, r2, r3
 800a03a:	2b64      	cmp	r3, #100	; 0x64
 800a03c:	d901      	bls.n	800a042 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a03e:	2303      	movs	r3, #3
 800a040:	e3c0      	b.n	800a7c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a042:	4b59      	ldr	r3, [pc, #356]	; (800a1a8 <HAL_RCC_OscConfig+0x288>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d1f0      	bne.n	800a030 <HAL_RCC_OscConfig+0x110>
 800a04e:	e000      	b.n	800a052 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f003 0302 	and.w	r3, r3, #2
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	f000 80ca 	beq.w	800a1f4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a060:	4b51      	ldr	r3, [pc, #324]	; (800a1a8 <HAL_RCC_OscConfig+0x288>)
 800a062:	691b      	ldr	r3, [r3, #16]
 800a064:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a068:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a06a:	4b4f      	ldr	r3, [pc, #316]	; (800a1a8 <HAL_RCC_OscConfig+0x288>)
 800a06c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a06e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a070:	6a3b      	ldr	r3, [r7, #32]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d007      	beq.n	800a086 <HAL_RCC_OscConfig+0x166>
 800a076:	6a3b      	ldr	r3, [r7, #32]
 800a078:	2b18      	cmp	r3, #24
 800a07a:	d156      	bne.n	800a12a <HAL_RCC_OscConfig+0x20a>
 800a07c:	69fb      	ldr	r3, [r7, #28]
 800a07e:	f003 0303 	and.w	r3, r3, #3
 800a082:	2b00      	cmp	r3, #0
 800a084:	d151      	bne.n	800a12a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a086:	4b48      	ldr	r3, [pc, #288]	; (800a1a8 <HAL_RCC_OscConfig+0x288>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f003 0304 	and.w	r3, r3, #4
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d005      	beq.n	800a09e <HAL_RCC_OscConfig+0x17e>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	68db      	ldr	r3, [r3, #12]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d101      	bne.n	800a09e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800a09a:	2301      	movs	r3, #1
 800a09c:	e392      	b.n	800a7c4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a09e:	4b42      	ldr	r3, [pc, #264]	; (800a1a8 <HAL_RCC_OscConfig+0x288>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f023 0219 	bic.w	r2, r3, #25
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	68db      	ldr	r3, [r3, #12]
 800a0aa:	493f      	ldr	r1, [pc, #252]	; (800a1a8 <HAL_RCC_OscConfig+0x288>)
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0b0:	f7fa f8da 	bl	8004268 <HAL_GetTick>
 800a0b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a0b6:	e008      	b.n	800a0ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a0b8:	f7fa f8d6 	bl	8004268 <HAL_GetTick>
 800a0bc:	4602      	mov	r2, r0
 800a0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c0:	1ad3      	subs	r3, r2, r3
 800a0c2:	2b02      	cmp	r3, #2
 800a0c4:	d901      	bls.n	800a0ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a0c6:	2303      	movs	r3, #3
 800a0c8:	e37c      	b.n	800a7c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a0ca:	4b37      	ldr	r3, [pc, #220]	; (800a1a8 <HAL_RCC_OscConfig+0x288>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f003 0304 	and.w	r3, r3, #4
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d0f0      	beq.n	800a0b8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0d6:	f7fa f8f7 	bl	80042c8 <HAL_GetREVID>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	f241 0203 	movw	r2, #4099	; 0x1003
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d817      	bhi.n	800a114 <HAL_RCC_OscConfig+0x1f4>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	691b      	ldr	r3, [r3, #16]
 800a0e8:	2b40      	cmp	r3, #64	; 0x40
 800a0ea:	d108      	bne.n	800a0fe <HAL_RCC_OscConfig+0x1de>
 800a0ec:	4b2e      	ldr	r3, [pc, #184]	; (800a1a8 <HAL_RCC_OscConfig+0x288>)
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a0f4:	4a2c      	ldr	r2, [pc, #176]	; (800a1a8 <HAL_RCC_OscConfig+0x288>)
 800a0f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0fa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a0fc:	e07a      	b.n	800a1f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0fe:	4b2a      	ldr	r3, [pc, #168]	; (800a1a8 <HAL_RCC_OscConfig+0x288>)
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	691b      	ldr	r3, [r3, #16]
 800a10a:	031b      	lsls	r3, r3, #12
 800a10c:	4926      	ldr	r1, [pc, #152]	; (800a1a8 <HAL_RCC_OscConfig+0x288>)
 800a10e:	4313      	orrs	r3, r2
 800a110:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a112:	e06f      	b.n	800a1f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a114:	4b24      	ldr	r3, [pc, #144]	; (800a1a8 <HAL_RCC_OscConfig+0x288>)
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	691b      	ldr	r3, [r3, #16]
 800a120:	061b      	lsls	r3, r3, #24
 800a122:	4921      	ldr	r1, [pc, #132]	; (800a1a8 <HAL_RCC_OscConfig+0x288>)
 800a124:	4313      	orrs	r3, r2
 800a126:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a128:	e064      	b.n	800a1f4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	68db      	ldr	r3, [r3, #12]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d047      	beq.n	800a1c2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a132:	4b1d      	ldr	r3, [pc, #116]	; (800a1a8 <HAL_RCC_OscConfig+0x288>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f023 0219 	bic.w	r2, r3, #25
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	68db      	ldr	r3, [r3, #12]
 800a13e:	491a      	ldr	r1, [pc, #104]	; (800a1a8 <HAL_RCC_OscConfig+0x288>)
 800a140:	4313      	orrs	r3, r2
 800a142:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a144:	f7fa f890 	bl	8004268 <HAL_GetTick>
 800a148:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a14a:	e008      	b.n	800a15e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a14c:	f7fa f88c 	bl	8004268 <HAL_GetTick>
 800a150:	4602      	mov	r2, r0
 800a152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a154:	1ad3      	subs	r3, r2, r3
 800a156:	2b02      	cmp	r3, #2
 800a158:	d901      	bls.n	800a15e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a15a:	2303      	movs	r3, #3
 800a15c:	e332      	b.n	800a7c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a15e:	4b12      	ldr	r3, [pc, #72]	; (800a1a8 <HAL_RCC_OscConfig+0x288>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f003 0304 	and.w	r3, r3, #4
 800a166:	2b00      	cmp	r3, #0
 800a168:	d0f0      	beq.n	800a14c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a16a:	f7fa f8ad 	bl	80042c8 <HAL_GetREVID>
 800a16e:	4603      	mov	r3, r0
 800a170:	f241 0203 	movw	r2, #4099	; 0x1003
 800a174:	4293      	cmp	r3, r2
 800a176:	d819      	bhi.n	800a1ac <HAL_RCC_OscConfig+0x28c>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	691b      	ldr	r3, [r3, #16]
 800a17c:	2b40      	cmp	r3, #64	; 0x40
 800a17e:	d108      	bne.n	800a192 <HAL_RCC_OscConfig+0x272>
 800a180:	4b09      	ldr	r3, [pc, #36]	; (800a1a8 <HAL_RCC_OscConfig+0x288>)
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a188:	4a07      	ldr	r2, [pc, #28]	; (800a1a8 <HAL_RCC_OscConfig+0x288>)
 800a18a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a18e:	6053      	str	r3, [r2, #4]
 800a190:	e030      	b.n	800a1f4 <HAL_RCC_OscConfig+0x2d4>
 800a192:	4b05      	ldr	r3, [pc, #20]	; (800a1a8 <HAL_RCC_OscConfig+0x288>)
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	691b      	ldr	r3, [r3, #16]
 800a19e:	031b      	lsls	r3, r3, #12
 800a1a0:	4901      	ldr	r1, [pc, #4]	; (800a1a8 <HAL_RCC_OscConfig+0x288>)
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	604b      	str	r3, [r1, #4]
 800a1a6:	e025      	b.n	800a1f4 <HAL_RCC_OscConfig+0x2d4>
 800a1a8:	58024400 	.word	0x58024400
 800a1ac:	4b9a      	ldr	r3, [pc, #616]	; (800a418 <HAL_RCC_OscConfig+0x4f8>)
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	691b      	ldr	r3, [r3, #16]
 800a1b8:	061b      	lsls	r3, r3, #24
 800a1ba:	4997      	ldr	r1, [pc, #604]	; (800a418 <HAL_RCC_OscConfig+0x4f8>)
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	604b      	str	r3, [r1, #4]
 800a1c0:	e018      	b.n	800a1f4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a1c2:	4b95      	ldr	r3, [pc, #596]	; (800a418 <HAL_RCC_OscConfig+0x4f8>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4a94      	ldr	r2, [pc, #592]	; (800a418 <HAL_RCC_OscConfig+0x4f8>)
 800a1c8:	f023 0301 	bic.w	r3, r3, #1
 800a1cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1ce:	f7fa f84b 	bl	8004268 <HAL_GetTick>
 800a1d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a1d4:	e008      	b.n	800a1e8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a1d6:	f7fa f847 	bl	8004268 <HAL_GetTick>
 800a1da:	4602      	mov	r2, r0
 800a1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1de:	1ad3      	subs	r3, r2, r3
 800a1e0:	2b02      	cmp	r3, #2
 800a1e2:	d901      	bls.n	800a1e8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a1e4:	2303      	movs	r3, #3
 800a1e6:	e2ed      	b.n	800a7c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a1e8:	4b8b      	ldr	r3, [pc, #556]	; (800a418 <HAL_RCC_OscConfig+0x4f8>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f003 0304 	and.w	r3, r3, #4
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d1f0      	bne.n	800a1d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f003 0310 	and.w	r3, r3, #16
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	f000 80a9 	beq.w	800a354 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a202:	4b85      	ldr	r3, [pc, #532]	; (800a418 <HAL_RCC_OscConfig+0x4f8>)
 800a204:	691b      	ldr	r3, [r3, #16]
 800a206:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a20a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a20c:	4b82      	ldr	r3, [pc, #520]	; (800a418 <HAL_RCC_OscConfig+0x4f8>)
 800a20e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a210:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a212:	69bb      	ldr	r3, [r7, #24]
 800a214:	2b08      	cmp	r3, #8
 800a216:	d007      	beq.n	800a228 <HAL_RCC_OscConfig+0x308>
 800a218:	69bb      	ldr	r3, [r7, #24]
 800a21a:	2b18      	cmp	r3, #24
 800a21c:	d13a      	bne.n	800a294 <HAL_RCC_OscConfig+0x374>
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	f003 0303 	and.w	r3, r3, #3
 800a224:	2b01      	cmp	r3, #1
 800a226:	d135      	bne.n	800a294 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a228:	4b7b      	ldr	r3, [pc, #492]	; (800a418 <HAL_RCC_OscConfig+0x4f8>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a230:	2b00      	cmp	r3, #0
 800a232:	d005      	beq.n	800a240 <HAL_RCC_OscConfig+0x320>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	69db      	ldr	r3, [r3, #28]
 800a238:	2b80      	cmp	r3, #128	; 0x80
 800a23a:	d001      	beq.n	800a240 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a23c:	2301      	movs	r3, #1
 800a23e:	e2c1      	b.n	800a7c4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a240:	f7fa f842 	bl	80042c8 <HAL_GetREVID>
 800a244:	4603      	mov	r3, r0
 800a246:	f241 0203 	movw	r2, #4099	; 0x1003
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d817      	bhi.n	800a27e <HAL_RCC_OscConfig+0x35e>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6a1b      	ldr	r3, [r3, #32]
 800a252:	2b20      	cmp	r3, #32
 800a254:	d108      	bne.n	800a268 <HAL_RCC_OscConfig+0x348>
 800a256:	4b70      	ldr	r3, [pc, #448]	; (800a418 <HAL_RCC_OscConfig+0x4f8>)
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a25e:	4a6e      	ldr	r2, [pc, #440]	; (800a418 <HAL_RCC_OscConfig+0x4f8>)
 800a260:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a264:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a266:	e075      	b.n	800a354 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a268:	4b6b      	ldr	r3, [pc, #428]	; (800a418 <HAL_RCC_OscConfig+0x4f8>)
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6a1b      	ldr	r3, [r3, #32]
 800a274:	069b      	lsls	r3, r3, #26
 800a276:	4968      	ldr	r1, [pc, #416]	; (800a418 <HAL_RCC_OscConfig+0x4f8>)
 800a278:	4313      	orrs	r3, r2
 800a27a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a27c:	e06a      	b.n	800a354 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a27e:	4b66      	ldr	r3, [pc, #408]	; (800a418 <HAL_RCC_OscConfig+0x4f8>)
 800a280:	68db      	ldr	r3, [r3, #12]
 800a282:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6a1b      	ldr	r3, [r3, #32]
 800a28a:	061b      	lsls	r3, r3, #24
 800a28c:	4962      	ldr	r1, [pc, #392]	; (800a418 <HAL_RCC_OscConfig+0x4f8>)
 800a28e:	4313      	orrs	r3, r2
 800a290:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a292:	e05f      	b.n	800a354 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	69db      	ldr	r3, [r3, #28]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d042      	beq.n	800a322 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a29c:	4b5e      	ldr	r3, [pc, #376]	; (800a418 <HAL_RCC_OscConfig+0x4f8>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4a5d      	ldr	r2, [pc, #372]	; (800a418 <HAL_RCC_OscConfig+0x4f8>)
 800a2a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2a8:	f7f9 ffde 	bl	8004268 <HAL_GetTick>
 800a2ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a2ae:	e008      	b.n	800a2c2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a2b0:	f7f9 ffda 	bl	8004268 <HAL_GetTick>
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b8:	1ad3      	subs	r3, r2, r3
 800a2ba:	2b02      	cmp	r3, #2
 800a2bc:	d901      	bls.n	800a2c2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a2be:	2303      	movs	r3, #3
 800a2c0:	e280      	b.n	800a7c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a2c2:	4b55      	ldr	r3, [pc, #340]	; (800a418 <HAL_RCC_OscConfig+0x4f8>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d0f0      	beq.n	800a2b0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a2ce:	f7f9 fffb 	bl	80042c8 <HAL_GetREVID>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	f241 0203 	movw	r2, #4099	; 0x1003
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d817      	bhi.n	800a30c <HAL_RCC_OscConfig+0x3ec>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6a1b      	ldr	r3, [r3, #32]
 800a2e0:	2b20      	cmp	r3, #32
 800a2e2:	d108      	bne.n	800a2f6 <HAL_RCC_OscConfig+0x3d6>
 800a2e4:	4b4c      	ldr	r3, [pc, #304]	; (800a418 <HAL_RCC_OscConfig+0x4f8>)
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a2ec:	4a4a      	ldr	r2, [pc, #296]	; (800a418 <HAL_RCC_OscConfig+0x4f8>)
 800a2ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a2f2:	6053      	str	r3, [r2, #4]
 800a2f4:	e02e      	b.n	800a354 <HAL_RCC_OscConfig+0x434>
 800a2f6:	4b48      	ldr	r3, [pc, #288]	; (800a418 <HAL_RCC_OscConfig+0x4f8>)
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6a1b      	ldr	r3, [r3, #32]
 800a302:	069b      	lsls	r3, r3, #26
 800a304:	4944      	ldr	r1, [pc, #272]	; (800a418 <HAL_RCC_OscConfig+0x4f8>)
 800a306:	4313      	orrs	r3, r2
 800a308:	604b      	str	r3, [r1, #4]
 800a30a:	e023      	b.n	800a354 <HAL_RCC_OscConfig+0x434>
 800a30c:	4b42      	ldr	r3, [pc, #264]	; (800a418 <HAL_RCC_OscConfig+0x4f8>)
 800a30e:	68db      	ldr	r3, [r3, #12]
 800a310:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6a1b      	ldr	r3, [r3, #32]
 800a318:	061b      	lsls	r3, r3, #24
 800a31a:	493f      	ldr	r1, [pc, #252]	; (800a418 <HAL_RCC_OscConfig+0x4f8>)
 800a31c:	4313      	orrs	r3, r2
 800a31e:	60cb      	str	r3, [r1, #12]
 800a320:	e018      	b.n	800a354 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a322:	4b3d      	ldr	r3, [pc, #244]	; (800a418 <HAL_RCC_OscConfig+0x4f8>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4a3c      	ldr	r2, [pc, #240]	; (800a418 <HAL_RCC_OscConfig+0x4f8>)
 800a328:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a32c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a32e:	f7f9 ff9b 	bl	8004268 <HAL_GetTick>
 800a332:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a334:	e008      	b.n	800a348 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a336:	f7f9 ff97 	bl	8004268 <HAL_GetTick>
 800a33a:	4602      	mov	r2, r0
 800a33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a33e:	1ad3      	subs	r3, r2, r3
 800a340:	2b02      	cmp	r3, #2
 800a342:	d901      	bls.n	800a348 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a344:	2303      	movs	r3, #3
 800a346:	e23d      	b.n	800a7c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a348:	4b33      	ldr	r3, [pc, #204]	; (800a418 <HAL_RCC_OscConfig+0x4f8>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a350:	2b00      	cmp	r3, #0
 800a352:	d1f0      	bne.n	800a336 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f003 0308 	and.w	r3, r3, #8
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d036      	beq.n	800a3ce <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	695b      	ldr	r3, [r3, #20]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d019      	beq.n	800a39c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a368:	4b2b      	ldr	r3, [pc, #172]	; (800a418 <HAL_RCC_OscConfig+0x4f8>)
 800a36a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a36c:	4a2a      	ldr	r2, [pc, #168]	; (800a418 <HAL_RCC_OscConfig+0x4f8>)
 800a36e:	f043 0301 	orr.w	r3, r3, #1
 800a372:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a374:	f7f9 ff78 	bl	8004268 <HAL_GetTick>
 800a378:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a37a:	e008      	b.n	800a38e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a37c:	f7f9 ff74 	bl	8004268 <HAL_GetTick>
 800a380:	4602      	mov	r2, r0
 800a382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a384:	1ad3      	subs	r3, r2, r3
 800a386:	2b02      	cmp	r3, #2
 800a388:	d901      	bls.n	800a38e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a38a:	2303      	movs	r3, #3
 800a38c:	e21a      	b.n	800a7c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a38e:	4b22      	ldr	r3, [pc, #136]	; (800a418 <HAL_RCC_OscConfig+0x4f8>)
 800a390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a392:	f003 0302 	and.w	r3, r3, #2
 800a396:	2b00      	cmp	r3, #0
 800a398:	d0f0      	beq.n	800a37c <HAL_RCC_OscConfig+0x45c>
 800a39a:	e018      	b.n	800a3ce <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a39c:	4b1e      	ldr	r3, [pc, #120]	; (800a418 <HAL_RCC_OscConfig+0x4f8>)
 800a39e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3a0:	4a1d      	ldr	r2, [pc, #116]	; (800a418 <HAL_RCC_OscConfig+0x4f8>)
 800a3a2:	f023 0301 	bic.w	r3, r3, #1
 800a3a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3a8:	f7f9 ff5e 	bl	8004268 <HAL_GetTick>
 800a3ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a3ae:	e008      	b.n	800a3c2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a3b0:	f7f9 ff5a 	bl	8004268 <HAL_GetTick>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b8:	1ad3      	subs	r3, r2, r3
 800a3ba:	2b02      	cmp	r3, #2
 800a3bc:	d901      	bls.n	800a3c2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a3be:	2303      	movs	r3, #3
 800a3c0:	e200      	b.n	800a7c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a3c2:	4b15      	ldr	r3, [pc, #84]	; (800a418 <HAL_RCC_OscConfig+0x4f8>)
 800a3c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3c6:	f003 0302 	and.w	r3, r3, #2
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d1f0      	bne.n	800a3b0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f003 0320 	and.w	r3, r3, #32
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d039      	beq.n	800a44e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	699b      	ldr	r3, [r3, #24]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d01c      	beq.n	800a41c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a3e2:	4b0d      	ldr	r3, [pc, #52]	; (800a418 <HAL_RCC_OscConfig+0x4f8>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4a0c      	ldr	r2, [pc, #48]	; (800a418 <HAL_RCC_OscConfig+0x4f8>)
 800a3e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a3ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a3ee:	f7f9 ff3b 	bl	8004268 <HAL_GetTick>
 800a3f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a3f4:	e008      	b.n	800a408 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a3f6:	f7f9 ff37 	bl	8004268 <HAL_GetTick>
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fe:	1ad3      	subs	r3, r2, r3
 800a400:	2b02      	cmp	r3, #2
 800a402:	d901      	bls.n	800a408 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a404:	2303      	movs	r3, #3
 800a406:	e1dd      	b.n	800a7c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a408:	4b03      	ldr	r3, [pc, #12]	; (800a418 <HAL_RCC_OscConfig+0x4f8>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a410:	2b00      	cmp	r3, #0
 800a412:	d0f0      	beq.n	800a3f6 <HAL_RCC_OscConfig+0x4d6>
 800a414:	e01b      	b.n	800a44e <HAL_RCC_OscConfig+0x52e>
 800a416:	bf00      	nop
 800a418:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a41c:	4b9b      	ldr	r3, [pc, #620]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a9a      	ldr	r2, [pc, #616]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a422:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a426:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a428:	f7f9 ff1e 	bl	8004268 <HAL_GetTick>
 800a42c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a42e:	e008      	b.n	800a442 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a430:	f7f9 ff1a 	bl	8004268 <HAL_GetTick>
 800a434:	4602      	mov	r2, r0
 800a436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a438:	1ad3      	subs	r3, r2, r3
 800a43a:	2b02      	cmp	r3, #2
 800a43c:	d901      	bls.n	800a442 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a43e:	2303      	movs	r3, #3
 800a440:	e1c0      	b.n	800a7c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a442:	4b92      	ldr	r3, [pc, #584]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d1f0      	bne.n	800a430 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f003 0304 	and.w	r3, r3, #4
 800a456:	2b00      	cmp	r3, #0
 800a458:	f000 8081 	beq.w	800a55e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a45c:	4b8c      	ldr	r3, [pc, #560]	; (800a690 <HAL_RCC_OscConfig+0x770>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4a8b      	ldr	r2, [pc, #556]	; (800a690 <HAL_RCC_OscConfig+0x770>)
 800a462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a466:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a468:	f7f9 fefe 	bl	8004268 <HAL_GetTick>
 800a46c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a46e:	e008      	b.n	800a482 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a470:	f7f9 fefa 	bl	8004268 <HAL_GetTick>
 800a474:	4602      	mov	r2, r0
 800a476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a478:	1ad3      	subs	r3, r2, r3
 800a47a:	2b64      	cmp	r3, #100	; 0x64
 800a47c:	d901      	bls.n	800a482 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a47e:	2303      	movs	r3, #3
 800a480:	e1a0      	b.n	800a7c4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a482:	4b83      	ldr	r3, [pc, #524]	; (800a690 <HAL_RCC_OscConfig+0x770>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d0f0      	beq.n	800a470 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	689b      	ldr	r3, [r3, #8]
 800a492:	2b01      	cmp	r3, #1
 800a494:	d106      	bne.n	800a4a4 <HAL_RCC_OscConfig+0x584>
 800a496:	4b7d      	ldr	r3, [pc, #500]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a49a:	4a7c      	ldr	r2, [pc, #496]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a49c:	f043 0301 	orr.w	r3, r3, #1
 800a4a0:	6713      	str	r3, [r2, #112]	; 0x70
 800a4a2:	e02d      	b.n	800a500 <HAL_RCC_OscConfig+0x5e0>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d10c      	bne.n	800a4c6 <HAL_RCC_OscConfig+0x5a6>
 800a4ac:	4b77      	ldr	r3, [pc, #476]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a4ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4b0:	4a76      	ldr	r2, [pc, #472]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a4b2:	f023 0301 	bic.w	r3, r3, #1
 800a4b6:	6713      	str	r3, [r2, #112]	; 0x70
 800a4b8:	4b74      	ldr	r3, [pc, #464]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a4ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4bc:	4a73      	ldr	r2, [pc, #460]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a4be:	f023 0304 	bic.w	r3, r3, #4
 800a4c2:	6713      	str	r3, [r2, #112]	; 0x70
 800a4c4:	e01c      	b.n	800a500 <HAL_RCC_OscConfig+0x5e0>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	689b      	ldr	r3, [r3, #8]
 800a4ca:	2b05      	cmp	r3, #5
 800a4cc:	d10c      	bne.n	800a4e8 <HAL_RCC_OscConfig+0x5c8>
 800a4ce:	4b6f      	ldr	r3, [pc, #444]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a4d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4d2:	4a6e      	ldr	r2, [pc, #440]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a4d4:	f043 0304 	orr.w	r3, r3, #4
 800a4d8:	6713      	str	r3, [r2, #112]	; 0x70
 800a4da:	4b6c      	ldr	r3, [pc, #432]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a4dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4de:	4a6b      	ldr	r2, [pc, #428]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a4e0:	f043 0301 	orr.w	r3, r3, #1
 800a4e4:	6713      	str	r3, [r2, #112]	; 0x70
 800a4e6:	e00b      	b.n	800a500 <HAL_RCC_OscConfig+0x5e0>
 800a4e8:	4b68      	ldr	r3, [pc, #416]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a4ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ec:	4a67      	ldr	r2, [pc, #412]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a4ee:	f023 0301 	bic.w	r3, r3, #1
 800a4f2:	6713      	str	r3, [r2, #112]	; 0x70
 800a4f4:	4b65      	ldr	r3, [pc, #404]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a4f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4f8:	4a64      	ldr	r2, [pc, #400]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a4fa:	f023 0304 	bic.w	r3, r3, #4
 800a4fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	689b      	ldr	r3, [r3, #8]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d015      	beq.n	800a534 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a508:	f7f9 feae 	bl	8004268 <HAL_GetTick>
 800a50c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a50e:	e00a      	b.n	800a526 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a510:	f7f9 feaa 	bl	8004268 <HAL_GetTick>
 800a514:	4602      	mov	r2, r0
 800a516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a518:	1ad3      	subs	r3, r2, r3
 800a51a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a51e:	4293      	cmp	r3, r2
 800a520:	d901      	bls.n	800a526 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a522:	2303      	movs	r3, #3
 800a524:	e14e      	b.n	800a7c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a526:	4b59      	ldr	r3, [pc, #356]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a52a:	f003 0302 	and.w	r3, r3, #2
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d0ee      	beq.n	800a510 <HAL_RCC_OscConfig+0x5f0>
 800a532:	e014      	b.n	800a55e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a534:	f7f9 fe98 	bl	8004268 <HAL_GetTick>
 800a538:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a53a:	e00a      	b.n	800a552 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a53c:	f7f9 fe94 	bl	8004268 <HAL_GetTick>
 800a540:	4602      	mov	r2, r0
 800a542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a544:	1ad3      	subs	r3, r2, r3
 800a546:	f241 3288 	movw	r2, #5000	; 0x1388
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d901      	bls.n	800a552 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a54e:	2303      	movs	r3, #3
 800a550:	e138      	b.n	800a7c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a552:	4b4e      	ldr	r3, [pc, #312]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a556:	f003 0302 	and.w	r3, r3, #2
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d1ee      	bne.n	800a53c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a562:	2b00      	cmp	r3, #0
 800a564:	f000 812d 	beq.w	800a7c2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a568:	4b48      	ldr	r3, [pc, #288]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a56a:	691b      	ldr	r3, [r3, #16]
 800a56c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a570:	2b18      	cmp	r3, #24
 800a572:	f000 80bd 	beq.w	800a6f0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57a:	2b02      	cmp	r3, #2
 800a57c:	f040 809e 	bne.w	800a6bc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a580:	4b42      	ldr	r3, [pc, #264]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4a41      	ldr	r2, [pc, #260]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a586:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a58a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a58c:	f7f9 fe6c 	bl	8004268 <HAL_GetTick>
 800a590:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a592:	e008      	b.n	800a5a6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a594:	f7f9 fe68 	bl	8004268 <HAL_GetTick>
 800a598:	4602      	mov	r2, r0
 800a59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59c:	1ad3      	subs	r3, r2, r3
 800a59e:	2b02      	cmp	r3, #2
 800a5a0:	d901      	bls.n	800a5a6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a5a2:	2303      	movs	r3, #3
 800a5a4:	e10e      	b.n	800a7c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a5a6:	4b39      	ldr	r3, [pc, #228]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d1f0      	bne.n	800a594 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a5b2:	4b36      	ldr	r3, [pc, #216]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a5b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a5b6:	4b37      	ldr	r3, [pc, #220]	; (800a694 <HAL_RCC_OscConfig+0x774>)
 800a5b8:	4013      	ands	r3, r2
 800a5ba:	687a      	ldr	r2, [r7, #4]
 800a5bc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a5be:	687a      	ldr	r2, [r7, #4]
 800a5c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a5c2:	0112      	lsls	r2, r2, #4
 800a5c4:	430a      	orrs	r2, r1
 800a5c6:	4931      	ldr	r1, [pc, #196]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	628b      	str	r3, [r1, #40]	; 0x28
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5d0:	3b01      	subs	r3, #1
 800a5d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	025b      	lsls	r3, r3, #9
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	431a      	orrs	r2, r3
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e6:	3b01      	subs	r3, #1
 800a5e8:	041b      	lsls	r3, r3, #16
 800a5ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a5ee:	431a      	orrs	r2, r3
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5f4:	3b01      	subs	r3, #1
 800a5f6:	061b      	lsls	r3, r3, #24
 800a5f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a5fc:	4923      	ldr	r1, [pc, #140]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a5fe:	4313      	orrs	r3, r2
 800a600:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a602:	4b22      	ldr	r3, [pc, #136]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a606:	4a21      	ldr	r2, [pc, #132]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a608:	f023 0301 	bic.w	r3, r3, #1
 800a60c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a60e:	4b1f      	ldr	r3, [pc, #124]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a610:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a612:	4b21      	ldr	r3, [pc, #132]	; (800a698 <HAL_RCC_OscConfig+0x778>)
 800a614:	4013      	ands	r3, r2
 800a616:	687a      	ldr	r2, [r7, #4]
 800a618:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a61a:	00d2      	lsls	r2, r2, #3
 800a61c:	491b      	ldr	r1, [pc, #108]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a61e:	4313      	orrs	r3, r2
 800a620:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a622:	4b1a      	ldr	r3, [pc, #104]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a626:	f023 020c 	bic.w	r2, r3, #12
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a62e:	4917      	ldr	r1, [pc, #92]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a630:	4313      	orrs	r3, r2
 800a632:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a634:	4b15      	ldr	r3, [pc, #84]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a638:	f023 0202 	bic.w	r2, r3, #2
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a640:	4912      	ldr	r1, [pc, #72]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a642:	4313      	orrs	r3, r2
 800a644:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a646:	4b11      	ldr	r3, [pc, #68]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a64a:	4a10      	ldr	r2, [pc, #64]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a64c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a650:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a652:	4b0e      	ldr	r3, [pc, #56]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a656:	4a0d      	ldr	r2, [pc, #52]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a65c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a65e:	4b0b      	ldr	r3, [pc, #44]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a662:	4a0a      	ldr	r2, [pc, #40]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a668:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a66a:	4b08      	ldr	r3, [pc, #32]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a66c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a66e:	4a07      	ldr	r2, [pc, #28]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a670:	f043 0301 	orr.w	r3, r3, #1
 800a674:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a676:	4b05      	ldr	r3, [pc, #20]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a04      	ldr	r2, [pc, #16]	; (800a68c <HAL_RCC_OscConfig+0x76c>)
 800a67c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a682:	f7f9 fdf1 	bl	8004268 <HAL_GetTick>
 800a686:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a688:	e011      	b.n	800a6ae <HAL_RCC_OscConfig+0x78e>
 800a68a:	bf00      	nop
 800a68c:	58024400 	.word	0x58024400
 800a690:	58024800 	.word	0x58024800
 800a694:	fffffc0c 	.word	0xfffffc0c
 800a698:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a69c:	f7f9 fde4 	bl	8004268 <HAL_GetTick>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a4:	1ad3      	subs	r3, r2, r3
 800a6a6:	2b02      	cmp	r3, #2
 800a6a8:	d901      	bls.n	800a6ae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a6aa:	2303      	movs	r3, #3
 800a6ac:	e08a      	b.n	800a7c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a6ae:	4b47      	ldr	r3, [pc, #284]	; (800a7cc <HAL_RCC_OscConfig+0x8ac>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d0f0      	beq.n	800a69c <HAL_RCC_OscConfig+0x77c>
 800a6ba:	e082      	b.n	800a7c2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a6bc:	4b43      	ldr	r3, [pc, #268]	; (800a7cc <HAL_RCC_OscConfig+0x8ac>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a42      	ldr	r2, [pc, #264]	; (800a7cc <HAL_RCC_OscConfig+0x8ac>)
 800a6c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a6c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6c8:	f7f9 fdce 	bl	8004268 <HAL_GetTick>
 800a6cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a6ce:	e008      	b.n	800a6e2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6d0:	f7f9 fdca 	bl	8004268 <HAL_GetTick>
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d8:	1ad3      	subs	r3, r2, r3
 800a6da:	2b02      	cmp	r3, #2
 800a6dc:	d901      	bls.n	800a6e2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a6de:	2303      	movs	r3, #3
 800a6e0:	e070      	b.n	800a7c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a6e2:	4b3a      	ldr	r3, [pc, #232]	; (800a7cc <HAL_RCC_OscConfig+0x8ac>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d1f0      	bne.n	800a6d0 <HAL_RCC_OscConfig+0x7b0>
 800a6ee:	e068      	b.n	800a7c2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a6f0:	4b36      	ldr	r3, [pc, #216]	; (800a7cc <HAL_RCC_OscConfig+0x8ac>)
 800a6f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a6f6:	4b35      	ldr	r3, [pc, #212]	; (800a7cc <HAL_RCC_OscConfig+0x8ac>)
 800a6f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6fa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a700:	2b01      	cmp	r3, #1
 800a702:	d031      	beq.n	800a768 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	f003 0203 	and.w	r2, r3, #3
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a70e:	429a      	cmp	r2, r3
 800a710:	d12a      	bne.n	800a768 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	091b      	lsrs	r3, r3, #4
 800a716:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a71e:	429a      	cmp	r2, r3
 800a720:	d122      	bne.n	800a768 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a72c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a72e:	429a      	cmp	r2, r3
 800a730:	d11a      	bne.n	800a768 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	0a5b      	lsrs	r3, r3, #9
 800a736:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a73e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a740:	429a      	cmp	r2, r3
 800a742:	d111      	bne.n	800a768 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	0c1b      	lsrs	r3, r3, #16
 800a748:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a750:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a752:	429a      	cmp	r2, r3
 800a754:	d108      	bne.n	800a768 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	0e1b      	lsrs	r3, r3, #24
 800a75a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a762:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a764:	429a      	cmp	r2, r3
 800a766:	d001      	beq.n	800a76c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a768:	2301      	movs	r3, #1
 800a76a:	e02b      	b.n	800a7c4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a76c:	4b17      	ldr	r3, [pc, #92]	; (800a7cc <HAL_RCC_OscConfig+0x8ac>)
 800a76e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a770:	08db      	lsrs	r3, r3, #3
 800a772:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a776:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a77c:	693a      	ldr	r2, [r7, #16]
 800a77e:	429a      	cmp	r2, r3
 800a780:	d01f      	beq.n	800a7c2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a782:	4b12      	ldr	r3, [pc, #72]	; (800a7cc <HAL_RCC_OscConfig+0x8ac>)
 800a784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a786:	4a11      	ldr	r2, [pc, #68]	; (800a7cc <HAL_RCC_OscConfig+0x8ac>)
 800a788:	f023 0301 	bic.w	r3, r3, #1
 800a78c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a78e:	f7f9 fd6b 	bl	8004268 <HAL_GetTick>
 800a792:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a794:	bf00      	nop
 800a796:	f7f9 fd67 	bl	8004268 <HAL_GetTick>
 800a79a:	4602      	mov	r2, r0
 800a79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d0f9      	beq.n	800a796 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a7a2:	4b0a      	ldr	r3, [pc, #40]	; (800a7cc <HAL_RCC_OscConfig+0x8ac>)
 800a7a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a7a6:	4b0a      	ldr	r3, [pc, #40]	; (800a7d0 <HAL_RCC_OscConfig+0x8b0>)
 800a7a8:	4013      	ands	r3, r2
 800a7aa:	687a      	ldr	r2, [r7, #4]
 800a7ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a7ae:	00d2      	lsls	r2, r2, #3
 800a7b0:	4906      	ldr	r1, [pc, #24]	; (800a7cc <HAL_RCC_OscConfig+0x8ac>)
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a7b6:	4b05      	ldr	r3, [pc, #20]	; (800a7cc <HAL_RCC_OscConfig+0x8ac>)
 800a7b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ba:	4a04      	ldr	r2, [pc, #16]	; (800a7cc <HAL_RCC_OscConfig+0x8ac>)
 800a7bc:	f043 0301 	orr.w	r3, r3, #1
 800a7c0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a7c2:	2300      	movs	r3, #0
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3730      	adds	r7, #48	; 0x30
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	58024400 	.word	0x58024400
 800a7d0:	ffff0007 	.word	0xffff0007

0800a7d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b086      	sub	sp, #24
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d101      	bne.n	800a7e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	e19c      	b.n	800ab22 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a7e8:	4b8a      	ldr	r3, [pc, #552]	; (800aa14 <HAL_RCC_ClockConfig+0x240>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f003 030f 	and.w	r3, r3, #15
 800a7f0:	683a      	ldr	r2, [r7, #0]
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d910      	bls.n	800a818 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a7f6:	4b87      	ldr	r3, [pc, #540]	; (800aa14 <HAL_RCC_ClockConfig+0x240>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f023 020f 	bic.w	r2, r3, #15
 800a7fe:	4985      	ldr	r1, [pc, #532]	; (800aa14 <HAL_RCC_ClockConfig+0x240>)
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	4313      	orrs	r3, r2
 800a804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a806:	4b83      	ldr	r3, [pc, #524]	; (800aa14 <HAL_RCC_ClockConfig+0x240>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f003 030f 	and.w	r3, r3, #15
 800a80e:	683a      	ldr	r2, [r7, #0]
 800a810:	429a      	cmp	r2, r3
 800a812:	d001      	beq.n	800a818 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a814:	2301      	movs	r3, #1
 800a816:	e184      	b.n	800ab22 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f003 0304 	and.w	r3, r3, #4
 800a820:	2b00      	cmp	r3, #0
 800a822:	d010      	beq.n	800a846 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	691a      	ldr	r2, [r3, #16]
 800a828:	4b7b      	ldr	r3, [pc, #492]	; (800aa18 <HAL_RCC_ClockConfig+0x244>)
 800a82a:	699b      	ldr	r3, [r3, #24]
 800a82c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a830:	429a      	cmp	r2, r3
 800a832:	d908      	bls.n	800a846 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a834:	4b78      	ldr	r3, [pc, #480]	; (800aa18 <HAL_RCC_ClockConfig+0x244>)
 800a836:	699b      	ldr	r3, [r3, #24]
 800a838:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	691b      	ldr	r3, [r3, #16]
 800a840:	4975      	ldr	r1, [pc, #468]	; (800aa18 <HAL_RCC_ClockConfig+0x244>)
 800a842:	4313      	orrs	r3, r2
 800a844:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f003 0308 	and.w	r3, r3, #8
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d010      	beq.n	800a874 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	695a      	ldr	r2, [r3, #20]
 800a856:	4b70      	ldr	r3, [pc, #448]	; (800aa18 <HAL_RCC_ClockConfig+0x244>)
 800a858:	69db      	ldr	r3, [r3, #28]
 800a85a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a85e:	429a      	cmp	r2, r3
 800a860:	d908      	bls.n	800a874 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a862:	4b6d      	ldr	r3, [pc, #436]	; (800aa18 <HAL_RCC_ClockConfig+0x244>)
 800a864:	69db      	ldr	r3, [r3, #28]
 800a866:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	695b      	ldr	r3, [r3, #20]
 800a86e:	496a      	ldr	r1, [pc, #424]	; (800aa18 <HAL_RCC_ClockConfig+0x244>)
 800a870:	4313      	orrs	r3, r2
 800a872:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f003 0310 	and.w	r3, r3, #16
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d010      	beq.n	800a8a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	699a      	ldr	r2, [r3, #24]
 800a884:	4b64      	ldr	r3, [pc, #400]	; (800aa18 <HAL_RCC_ClockConfig+0x244>)
 800a886:	69db      	ldr	r3, [r3, #28]
 800a888:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d908      	bls.n	800a8a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a890:	4b61      	ldr	r3, [pc, #388]	; (800aa18 <HAL_RCC_ClockConfig+0x244>)
 800a892:	69db      	ldr	r3, [r3, #28]
 800a894:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	699b      	ldr	r3, [r3, #24]
 800a89c:	495e      	ldr	r1, [pc, #376]	; (800aa18 <HAL_RCC_ClockConfig+0x244>)
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f003 0320 	and.w	r3, r3, #32
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d010      	beq.n	800a8d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	69da      	ldr	r2, [r3, #28]
 800a8b2:	4b59      	ldr	r3, [pc, #356]	; (800aa18 <HAL_RCC_ClockConfig+0x244>)
 800a8b4:	6a1b      	ldr	r3, [r3, #32]
 800a8b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d908      	bls.n	800a8d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a8be:	4b56      	ldr	r3, [pc, #344]	; (800aa18 <HAL_RCC_ClockConfig+0x244>)
 800a8c0:	6a1b      	ldr	r3, [r3, #32]
 800a8c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	69db      	ldr	r3, [r3, #28]
 800a8ca:	4953      	ldr	r1, [pc, #332]	; (800aa18 <HAL_RCC_ClockConfig+0x244>)
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f003 0302 	and.w	r3, r3, #2
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d010      	beq.n	800a8fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	68da      	ldr	r2, [r3, #12]
 800a8e0:	4b4d      	ldr	r3, [pc, #308]	; (800aa18 <HAL_RCC_ClockConfig+0x244>)
 800a8e2:	699b      	ldr	r3, [r3, #24]
 800a8e4:	f003 030f 	and.w	r3, r3, #15
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d908      	bls.n	800a8fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a8ec:	4b4a      	ldr	r3, [pc, #296]	; (800aa18 <HAL_RCC_ClockConfig+0x244>)
 800a8ee:	699b      	ldr	r3, [r3, #24]
 800a8f0:	f023 020f 	bic.w	r2, r3, #15
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	68db      	ldr	r3, [r3, #12]
 800a8f8:	4947      	ldr	r1, [pc, #284]	; (800aa18 <HAL_RCC_ClockConfig+0x244>)
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f003 0301 	and.w	r3, r3, #1
 800a906:	2b00      	cmp	r3, #0
 800a908:	d055      	beq.n	800a9b6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a90a:	4b43      	ldr	r3, [pc, #268]	; (800aa18 <HAL_RCC_ClockConfig+0x244>)
 800a90c:	699b      	ldr	r3, [r3, #24]
 800a90e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	689b      	ldr	r3, [r3, #8]
 800a916:	4940      	ldr	r1, [pc, #256]	; (800aa18 <HAL_RCC_ClockConfig+0x244>)
 800a918:	4313      	orrs	r3, r2
 800a91a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	2b02      	cmp	r3, #2
 800a922:	d107      	bne.n	800a934 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a924:	4b3c      	ldr	r3, [pc, #240]	; (800aa18 <HAL_RCC_ClockConfig+0x244>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d121      	bne.n	800a974 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a930:	2301      	movs	r3, #1
 800a932:	e0f6      	b.n	800ab22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	2b03      	cmp	r3, #3
 800a93a:	d107      	bne.n	800a94c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a93c:	4b36      	ldr	r3, [pc, #216]	; (800aa18 <HAL_RCC_ClockConfig+0x244>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a944:	2b00      	cmp	r3, #0
 800a946:	d115      	bne.n	800a974 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a948:	2301      	movs	r3, #1
 800a94a:	e0ea      	b.n	800ab22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	2b01      	cmp	r3, #1
 800a952:	d107      	bne.n	800a964 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a954:	4b30      	ldr	r3, [pc, #192]	; (800aa18 <HAL_RCC_ClockConfig+0x244>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d109      	bne.n	800a974 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a960:	2301      	movs	r3, #1
 800a962:	e0de      	b.n	800ab22 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a964:	4b2c      	ldr	r3, [pc, #176]	; (800aa18 <HAL_RCC_ClockConfig+0x244>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f003 0304 	and.w	r3, r3, #4
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d101      	bne.n	800a974 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a970:	2301      	movs	r3, #1
 800a972:	e0d6      	b.n	800ab22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a974:	4b28      	ldr	r3, [pc, #160]	; (800aa18 <HAL_RCC_ClockConfig+0x244>)
 800a976:	691b      	ldr	r3, [r3, #16]
 800a978:	f023 0207 	bic.w	r2, r3, #7
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	4925      	ldr	r1, [pc, #148]	; (800aa18 <HAL_RCC_ClockConfig+0x244>)
 800a982:	4313      	orrs	r3, r2
 800a984:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a986:	f7f9 fc6f 	bl	8004268 <HAL_GetTick>
 800a98a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a98c:	e00a      	b.n	800a9a4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a98e:	f7f9 fc6b 	bl	8004268 <HAL_GetTick>
 800a992:	4602      	mov	r2, r0
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	1ad3      	subs	r3, r2, r3
 800a998:	f241 3288 	movw	r2, #5000	; 0x1388
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d901      	bls.n	800a9a4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a9a0:	2303      	movs	r3, #3
 800a9a2:	e0be      	b.n	800ab22 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a9a4:	4b1c      	ldr	r3, [pc, #112]	; (800aa18 <HAL_RCC_ClockConfig+0x244>)
 800a9a6:	691b      	ldr	r3, [r3, #16]
 800a9a8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	00db      	lsls	r3, r3, #3
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d1eb      	bne.n	800a98e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f003 0302 	and.w	r3, r3, #2
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d010      	beq.n	800a9e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	68da      	ldr	r2, [r3, #12]
 800a9c6:	4b14      	ldr	r3, [pc, #80]	; (800aa18 <HAL_RCC_ClockConfig+0x244>)
 800a9c8:	699b      	ldr	r3, [r3, #24]
 800a9ca:	f003 030f 	and.w	r3, r3, #15
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d208      	bcs.n	800a9e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a9d2:	4b11      	ldr	r3, [pc, #68]	; (800aa18 <HAL_RCC_ClockConfig+0x244>)
 800a9d4:	699b      	ldr	r3, [r3, #24]
 800a9d6:	f023 020f 	bic.w	r2, r3, #15
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	68db      	ldr	r3, [r3, #12]
 800a9de:	490e      	ldr	r1, [pc, #56]	; (800aa18 <HAL_RCC_ClockConfig+0x244>)
 800a9e0:	4313      	orrs	r3, r2
 800a9e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a9e4:	4b0b      	ldr	r3, [pc, #44]	; (800aa14 <HAL_RCC_ClockConfig+0x240>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f003 030f 	and.w	r3, r3, #15
 800a9ec:	683a      	ldr	r2, [r7, #0]
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d214      	bcs.n	800aa1c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a9f2:	4b08      	ldr	r3, [pc, #32]	; (800aa14 <HAL_RCC_ClockConfig+0x240>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f023 020f 	bic.w	r2, r3, #15
 800a9fa:	4906      	ldr	r1, [pc, #24]	; (800aa14 <HAL_RCC_ClockConfig+0x240>)
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa02:	4b04      	ldr	r3, [pc, #16]	; (800aa14 <HAL_RCC_ClockConfig+0x240>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f003 030f 	and.w	r3, r3, #15
 800aa0a:	683a      	ldr	r2, [r7, #0]
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d005      	beq.n	800aa1c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800aa10:	2301      	movs	r3, #1
 800aa12:	e086      	b.n	800ab22 <HAL_RCC_ClockConfig+0x34e>
 800aa14:	52002000 	.word	0x52002000
 800aa18:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f003 0304 	and.w	r3, r3, #4
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d010      	beq.n	800aa4a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	691a      	ldr	r2, [r3, #16]
 800aa2c:	4b3f      	ldr	r3, [pc, #252]	; (800ab2c <HAL_RCC_ClockConfig+0x358>)
 800aa2e:	699b      	ldr	r3, [r3, #24]
 800aa30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aa34:	429a      	cmp	r2, r3
 800aa36:	d208      	bcs.n	800aa4a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aa38:	4b3c      	ldr	r3, [pc, #240]	; (800ab2c <HAL_RCC_ClockConfig+0x358>)
 800aa3a:	699b      	ldr	r3, [r3, #24]
 800aa3c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	691b      	ldr	r3, [r3, #16]
 800aa44:	4939      	ldr	r1, [pc, #228]	; (800ab2c <HAL_RCC_ClockConfig+0x358>)
 800aa46:	4313      	orrs	r3, r2
 800aa48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f003 0308 	and.w	r3, r3, #8
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d010      	beq.n	800aa78 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	695a      	ldr	r2, [r3, #20]
 800aa5a:	4b34      	ldr	r3, [pc, #208]	; (800ab2c <HAL_RCC_ClockConfig+0x358>)
 800aa5c:	69db      	ldr	r3, [r3, #28]
 800aa5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aa62:	429a      	cmp	r2, r3
 800aa64:	d208      	bcs.n	800aa78 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800aa66:	4b31      	ldr	r3, [pc, #196]	; (800ab2c <HAL_RCC_ClockConfig+0x358>)
 800aa68:	69db      	ldr	r3, [r3, #28]
 800aa6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	695b      	ldr	r3, [r3, #20]
 800aa72:	492e      	ldr	r1, [pc, #184]	; (800ab2c <HAL_RCC_ClockConfig+0x358>)
 800aa74:	4313      	orrs	r3, r2
 800aa76:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f003 0310 	and.w	r3, r3, #16
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d010      	beq.n	800aaa6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	699a      	ldr	r2, [r3, #24]
 800aa88:	4b28      	ldr	r3, [pc, #160]	; (800ab2c <HAL_RCC_ClockConfig+0x358>)
 800aa8a:	69db      	ldr	r3, [r3, #28]
 800aa8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d208      	bcs.n	800aaa6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800aa94:	4b25      	ldr	r3, [pc, #148]	; (800ab2c <HAL_RCC_ClockConfig+0x358>)
 800aa96:	69db      	ldr	r3, [r3, #28]
 800aa98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	699b      	ldr	r3, [r3, #24]
 800aaa0:	4922      	ldr	r1, [pc, #136]	; (800ab2c <HAL_RCC_ClockConfig+0x358>)
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f003 0320 	and.w	r3, r3, #32
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d010      	beq.n	800aad4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	69da      	ldr	r2, [r3, #28]
 800aab6:	4b1d      	ldr	r3, [pc, #116]	; (800ab2c <HAL_RCC_ClockConfig+0x358>)
 800aab8:	6a1b      	ldr	r3, [r3, #32]
 800aaba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d208      	bcs.n	800aad4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800aac2:	4b1a      	ldr	r3, [pc, #104]	; (800ab2c <HAL_RCC_ClockConfig+0x358>)
 800aac4:	6a1b      	ldr	r3, [r3, #32]
 800aac6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	69db      	ldr	r3, [r3, #28]
 800aace:	4917      	ldr	r1, [pc, #92]	; (800ab2c <HAL_RCC_ClockConfig+0x358>)
 800aad0:	4313      	orrs	r3, r2
 800aad2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800aad4:	f000 f844 	bl	800ab60 <HAL_RCC_GetSysClockFreq>
 800aad8:	4602      	mov	r2, r0
 800aada:	4b14      	ldr	r3, [pc, #80]	; (800ab2c <HAL_RCC_ClockConfig+0x358>)
 800aadc:	699b      	ldr	r3, [r3, #24]
 800aade:	0a1b      	lsrs	r3, r3, #8
 800aae0:	f003 030f 	and.w	r3, r3, #15
 800aae4:	4912      	ldr	r1, [pc, #72]	; (800ab30 <HAL_RCC_ClockConfig+0x35c>)
 800aae6:	5ccb      	ldrb	r3, [r1, r3]
 800aae8:	f003 031f 	and.w	r3, r3, #31
 800aaec:	fa22 f303 	lsr.w	r3, r2, r3
 800aaf0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aaf2:	4b0e      	ldr	r3, [pc, #56]	; (800ab2c <HAL_RCC_ClockConfig+0x358>)
 800aaf4:	699b      	ldr	r3, [r3, #24]
 800aaf6:	f003 030f 	and.w	r3, r3, #15
 800aafa:	4a0d      	ldr	r2, [pc, #52]	; (800ab30 <HAL_RCC_ClockConfig+0x35c>)
 800aafc:	5cd3      	ldrb	r3, [r2, r3]
 800aafe:	f003 031f 	and.w	r3, r3, #31
 800ab02:	693a      	ldr	r2, [r7, #16]
 800ab04:	fa22 f303 	lsr.w	r3, r2, r3
 800ab08:	4a0a      	ldr	r2, [pc, #40]	; (800ab34 <HAL_RCC_ClockConfig+0x360>)
 800ab0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ab0c:	4a0a      	ldr	r2, [pc, #40]	; (800ab38 <HAL_RCC_ClockConfig+0x364>)
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800ab12:	4b0a      	ldr	r3, [pc, #40]	; (800ab3c <HAL_RCC_ClockConfig+0x368>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4618      	mov	r0, r3
 800ab18:	f7f9 fb5c 	bl	80041d4 <HAL_InitTick>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ab20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3718      	adds	r7, #24
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}
 800ab2a:	bf00      	nop
 800ab2c:	58024400 	.word	0x58024400
 800ab30:	08020cd0 	.word	0x08020cd0
 800ab34:	20000010 	.word	0x20000010
 800ab38:	2000000c 	.word	0x2000000c
 800ab3c:	20000020 	.word	0x20000020

0800ab40 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800ab40:	b480      	push	{r7}
 800ab42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 800ab44:	4b05      	ldr	r3, [pc, #20]	; (800ab5c <HAL_RCC_EnableCSS+0x1c>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4a04      	ldr	r2, [pc, #16]	; (800ab5c <HAL_RCC_EnableCSS+0x1c>)
 800ab4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ab4e:	6013      	str	r3, [r2, #0]
}
 800ab50:	bf00      	nop
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr
 800ab5a:	bf00      	nop
 800ab5c:	58024400 	.word	0x58024400

0800ab60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b089      	sub	sp, #36	; 0x24
 800ab64:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ab66:	4bb3      	ldr	r3, [pc, #716]	; (800ae34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab68:	691b      	ldr	r3, [r3, #16]
 800ab6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab6e:	2b18      	cmp	r3, #24
 800ab70:	f200 8155 	bhi.w	800ae1e <HAL_RCC_GetSysClockFreq+0x2be>
 800ab74:	a201      	add	r2, pc, #4	; (adr r2, 800ab7c <HAL_RCC_GetSysClockFreq+0x1c>)
 800ab76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab7a:	bf00      	nop
 800ab7c:	0800abe1 	.word	0x0800abe1
 800ab80:	0800ae1f 	.word	0x0800ae1f
 800ab84:	0800ae1f 	.word	0x0800ae1f
 800ab88:	0800ae1f 	.word	0x0800ae1f
 800ab8c:	0800ae1f 	.word	0x0800ae1f
 800ab90:	0800ae1f 	.word	0x0800ae1f
 800ab94:	0800ae1f 	.word	0x0800ae1f
 800ab98:	0800ae1f 	.word	0x0800ae1f
 800ab9c:	0800ac07 	.word	0x0800ac07
 800aba0:	0800ae1f 	.word	0x0800ae1f
 800aba4:	0800ae1f 	.word	0x0800ae1f
 800aba8:	0800ae1f 	.word	0x0800ae1f
 800abac:	0800ae1f 	.word	0x0800ae1f
 800abb0:	0800ae1f 	.word	0x0800ae1f
 800abb4:	0800ae1f 	.word	0x0800ae1f
 800abb8:	0800ae1f 	.word	0x0800ae1f
 800abbc:	0800ac0d 	.word	0x0800ac0d
 800abc0:	0800ae1f 	.word	0x0800ae1f
 800abc4:	0800ae1f 	.word	0x0800ae1f
 800abc8:	0800ae1f 	.word	0x0800ae1f
 800abcc:	0800ae1f 	.word	0x0800ae1f
 800abd0:	0800ae1f 	.word	0x0800ae1f
 800abd4:	0800ae1f 	.word	0x0800ae1f
 800abd8:	0800ae1f 	.word	0x0800ae1f
 800abdc:	0800ac13 	.word	0x0800ac13
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abe0:	4b94      	ldr	r3, [pc, #592]	; (800ae34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f003 0320 	and.w	r3, r3, #32
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d009      	beq.n	800ac00 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abec:	4b91      	ldr	r3, [pc, #580]	; (800ae34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	08db      	lsrs	r3, r3, #3
 800abf2:	f003 0303 	and.w	r3, r3, #3
 800abf6:	4a90      	ldr	r2, [pc, #576]	; (800ae38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800abf8:	fa22 f303 	lsr.w	r3, r2, r3
 800abfc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800abfe:	e111      	b.n	800ae24 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ac00:	4b8d      	ldr	r3, [pc, #564]	; (800ae38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ac02:	61bb      	str	r3, [r7, #24]
      break;
 800ac04:	e10e      	b.n	800ae24 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800ac06:	4b8d      	ldr	r3, [pc, #564]	; (800ae3c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ac08:	61bb      	str	r3, [r7, #24]
      break;
 800ac0a:	e10b      	b.n	800ae24 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800ac0c:	4b8c      	ldr	r3, [pc, #560]	; (800ae40 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ac0e:	61bb      	str	r3, [r7, #24]
      break;
 800ac10:	e108      	b.n	800ae24 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac12:	4b88      	ldr	r3, [pc, #544]	; (800ae34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac16:	f003 0303 	and.w	r3, r3, #3
 800ac1a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ac1c:	4b85      	ldr	r3, [pc, #532]	; (800ae34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac20:	091b      	lsrs	r3, r3, #4
 800ac22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac26:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ac28:	4b82      	ldr	r3, [pc, #520]	; (800ae34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac2c:	f003 0301 	and.w	r3, r3, #1
 800ac30:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ac32:	4b80      	ldr	r3, [pc, #512]	; (800ae34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac36:	08db      	lsrs	r3, r3, #3
 800ac38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac3c:	68fa      	ldr	r2, [r7, #12]
 800ac3e:	fb02 f303 	mul.w	r3, r2, r3
 800ac42:	ee07 3a90 	vmov	s15, r3
 800ac46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac4a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	f000 80e1 	beq.w	800ae18 <HAL_RCC_GetSysClockFreq+0x2b8>
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	2b02      	cmp	r3, #2
 800ac5a:	f000 8083 	beq.w	800ad64 <HAL_RCC_GetSysClockFreq+0x204>
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	2b02      	cmp	r3, #2
 800ac62:	f200 80a1 	bhi.w	800ada8 <HAL_RCC_GetSysClockFreq+0x248>
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d003      	beq.n	800ac74 <HAL_RCC_GetSysClockFreq+0x114>
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	2b01      	cmp	r3, #1
 800ac70:	d056      	beq.n	800ad20 <HAL_RCC_GetSysClockFreq+0x1c0>
 800ac72:	e099      	b.n	800ada8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac74:	4b6f      	ldr	r3, [pc, #444]	; (800ae34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f003 0320 	and.w	r3, r3, #32
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d02d      	beq.n	800acdc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac80:	4b6c      	ldr	r3, [pc, #432]	; (800ae34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	08db      	lsrs	r3, r3, #3
 800ac86:	f003 0303 	and.w	r3, r3, #3
 800ac8a:	4a6b      	ldr	r2, [pc, #428]	; (800ae38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ac8c:	fa22 f303 	lsr.w	r3, r2, r3
 800ac90:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	ee07 3a90 	vmov	s15, r3
 800ac98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	ee07 3a90 	vmov	s15, r3
 800aca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acaa:	4b62      	ldr	r3, [pc, #392]	; (800ae34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acb2:	ee07 3a90 	vmov	s15, r3
 800acb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acba:	ed97 6a02 	vldr	s12, [r7, #8]
 800acbe:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ae44 <HAL_RCC_GetSysClockFreq+0x2e4>
 800acc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acd6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800acda:	e087      	b.n	800adec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	ee07 3a90 	vmov	s15, r3
 800ace2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ace6:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ae48 <HAL_RCC_GetSysClockFreq+0x2e8>
 800acea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acee:	4b51      	ldr	r3, [pc, #324]	; (800ae34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acf6:	ee07 3a90 	vmov	s15, r3
 800acfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acfe:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad02:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ae44 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ad1e:	e065      	b.n	800adec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	ee07 3a90 	vmov	s15, r3
 800ad26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad2a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ae4c <HAL_RCC_GetSysClockFreq+0x2ec>
 800ad2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad32:	4b40      	ldr	r3, [pc, #256]	; (800ae34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad3a:	ee07 3a90 	vmov	s15, r3
 800ad3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad42:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad46:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ae44 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ad62:	e043      	b.n	800adec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	ee07 3a90 	vmov	s15, r3
 800ad6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad6e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800ae50 <HAL_RCC_GetSysClockFreq+0x2f0>
 800ad72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad76:	4b2f      	ldr	r3, [pc, #188]	; (800ae34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad7e:	ee07 3a90 	vmov	s15, r3
 800ad82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad86:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad8a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ae44 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ada2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ada6:	e021      	b.n	800adec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	ee07 3a90 	vmov	s15, r3
 800adae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adb2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ae4c <HAL_RCC_GetSysClockFreq+0x2ec>
 800adb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adba:	4b1e      	ldr	r3, [pc, #120]	; (800ae34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800adbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adc2:	ee07 3a90 	vmov	s15, r3
 800adc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adca:	ed97 6a02 	vldr	s12, [r7, #8]
 800adce:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ae44 <HAL_RCC_GetSysClockFreq+0x2e4>
 800add2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800add6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ade2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ade6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800adea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800adec:	4b11      	ldr	r3, [pc, #68]	; (800ae34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800adee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adf0:	0a5b      	lsrs	r3, r3, #9
 800adf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adf6:	3301      	adds	r3, #1
 800adf8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	ee07 3a90 	vmov	s15, r3
 800ae00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ae04:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae10:	ee17 3a90 	vmov	r3, s15
 800ae14:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800ae16:	e005      	b.n	800ae24 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	61bb      	str	r3, [r7, #24]
      break;
 800ae1c:	e002      	b.n	800ae24 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800ae1e:	4b07      	ldr	r3, [pc, #28]	; (800ae3c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ae20:	61bb      	str	r3, [r7, #24]
      break;
 800ae22:	bf00      	nop
  }

  return sysclockfreq;
 800ae24:	69bb      	ldr	r3, [r7, #24]
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3724      	adds	r7, #36	; 0x24
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr
 800ae32:	bf00      	nop
 800ae34:	58024400 	.word	0x58024400
 800ae38:	03d09000 	.word	0x03d09000
 800ae3c:	003d0900 	.word	0x003d0900
 800ae40:	007f1b10 	.word	0x007f1b10
 800ae44:	46000000 	.word	0x46000000
 800ae48:	4c742400 	.word	0x4c742400
 800ae4c:	4a742400 	.word	0x4a742400
 800ae50:	4afe3620 	.word	0x4afe3620

0800ae54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b082      	sub	sp, #8
 800ae58:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ae5a:	f7ff fe81 	bl	800ab60 <HAL_RCC_GetSysClockFreq>
 800ae5e:	4602      	mov	r2, r0
 800ae60:	4b10      	ldr	r3, [pc, #64]	; (800aea4 <HAL_RCC_GetHCLKFreq+0x50>)
 800ae62:	699b      	ldr	r3, [r3, #24]
 800ae64:	0a1b      	lsrs	r3, r3, #8
 800ae66:	f003 030f 	and.w	r3, r3, #15
 800ae6a:	490f      	ldr	r1, [pc, #60]	; (800aea8 <HAL_RCC_GetHCLKFreq+0x54>)
 800ae6c:	5ccb      	ldrb	r3, [r1, r3]
 800ae6e:	f003 031f 	and.w	r3, r3, #31
 800ae72:	fa22 f303 	lsr.w	r3, r2, r3
 800ae76:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ae78:	4b0a      	ldr	r3, [pc, #40]	; (800aea4 <HAL_RCC_GetHCLKFreq+0x50>)
 800ae7a:	699b      	ldr	r3, [r3, #24]
 800ae7c:	f003 030f 	and.w	r3, r3, #15
 800ae80:	4a09      	ldr	r2, [pc, #36]	; (800aea8 <HAL_RCC_GetHCLKFreq+0x54>)
 800ae82:	5cd3      	ldrb	r3, [r2, r3]
 800ae84:	f003 031f 	and.w	r3, r3, #31
 800ae88:	687a      	ldr	r2, [r7, #4]
 800ae8a:	fa22 f303 	lsr.w	r3, r2, r3
 800ae8e:	4a07      	ldr	r2, [pc, #28]	; (800aeac <HAL_RCC_GetHCLKFreq+0x58>)
 800ae90:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ae92:	4a07      	ldr	r2, [pc, #28]	; (800aeb0 <HAL_RCC_GetHCLKFreq+0x5c>)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ae98:	4b04      	ldr	r3, [pc, #16]	; (800aeac <HAL_RCC_GetHCLKFreq+0x58>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3708      	adds	r7, #8
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}
 800aea4:	58024400 	.word	0x58024400
 800aea8:	08020cd0 	.word	0x08020cd0
 800aeac:	20000010 	.word	0x20000010
 800aeb0:	2000000c 	.word	0x2000000c

0800aeb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800aeb8:	f7ff ffcc 	bl	800ae54 <HAL_RCC_GetHCLKFreq>
 800aebc:	4602      	mov	r2, r0
 800aebe:	4b06      	ldr	r3, [pc, #24]	; (800aed8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aec0:	69db      	ldr	r3, [r3, #28]
 800aec2:	091b      	lsrs	r3, r3, #4
 800aec4:	f003 0307 	and.w	r3, r3, #7
 800aec8:	4904      	ldr	r1, [pc, #16]	; (800aedc <HAL_RCC_GetPCLK1Freq+0x28>)
 800aeca:	5ccb      	ldrb	r3, [r1, r3]
 800aecc:	f003 031f 	and.w	r3, r3, #31
 800aed0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	58024400 	.word	0x58024400
 800aedc:	08020cd0 	.word	0x08020cd0

0800aee0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800aee4:	f7ff ffb6 	bl	800ae54 <HAL_RCC_GetHCLKFreq>
 800aee8:	4602      	mov	r2, r0
 800aeea:	4b06      	ldr	r3, [pc, #24]	; (800af04 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aeec:	69db      	ldr	r3, [r3, #28]
 800aeee:	0a1b      	lsrs	r3, r3, #8
 800aef0:	f003 0307 	and.w	r3, r3, #7
 800aef4:	4904      	ldr	r1, [pc, #16]	; (800af08 <HAL_RCC_GetPCLK2Freq+0x28>)
 800aef6:	5ccb      	ldrb	r3, [r1, r3]
 800aef8:	f003 031f 	and.w	r3, r3, #31
 800aefc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800af00:	4618      	mov	r0, r3
 800af02:	bd80      	pop	{r7, pc}
 800af04:	58024400 	.word	0x58024400
 800af08:	08020cd0 	.word	0x08020cd0

0800af0c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800af10:	4b07      	ldr	r3, [pc, #28]	; (800af30 <HAL_RCC_NMI_IRQHandler+0x24>)
 800af12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af1c:	d105      	bne.n	800af2a <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800af1e:	f000 f809 	bl	800af34 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800af22:	4b03      	ldr	r3, [pc, #12]	; (800af30 <HAL_RCC_NMI_IRQHandler+0x24>)
 800af24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800af28:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800af2a:	bf00      	nop
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	bf00      	nop
 800af30:	58024400 	.word	0x58024400

0800af34 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800af34:	b480      	push	{r7}
 800af36:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800af38:	bf00      	nop
 800af3a:	46bd      	mov	sp, r7
 800af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af40:	4770      	bx	lr
	...

0800af44 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800af44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af48:	b0ca      	sub	sp, #296	; 0x128
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800af50:	2300      	movs	r3, #0
 800af52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800af56:	2300      	movs	r3, #0
 800af58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800af5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af64:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800af68:	2500      	movs	r5, #0
 800af6a:	ea54 0305 	orrs.w	r3, r4, r5
 800af6e:	d049      	beq.n	800b004 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800af70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af76:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800af7a:	d02f      	beq.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800af7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800af80:	d828      	bhi.n	800afd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800af82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af86:	d01a      	beq.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800af88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af8c:	d822      	bhi.n	800afd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d003      	beq.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800af92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af96:	d007      	beq.n	800afa8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800af98:	e01c      	b.n	800afd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af9a:	4bb8      	ldr	r3, [pc, #736]	; (800b27c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af9e:	4ab7      	ldr	r2, [pc, #732]	; (800b27c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800afa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afa4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800afa6:	e01a      	b.n	800afde <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800afa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afac:	3308      	adds	r3, #8
 800afae:	2102      	movs	r1, #2
 800afb0:	4618      	mov	r0, r3
 800afb2:	f002 fbb7 	bl	800d724 <RCCEx_PLL2_Config>
 800afb6:	4603      	mov	r3, r0
 800afb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800afbc:	e00f      	b.n	800afde <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800afbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afc2:	3328      	adds	r3, #40	; 0x28
 800afc4:	2102      	movs	r1, #2
 800afc6:	4618      	mov	r0, r3
 800afc8:	f002 fc5e 	bl	800d888 <RCCEx_PLL3_Config>
 800afcc:	4603      	mov	r3, r0
 800afce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800afd2:	e004      	b.n	800afde <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800afd4:	2301      	movs	r3, #1
 800afd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800afda:	e000      	b.n	800afde <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800afdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800afde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d10a      	bne.n	800affc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800afe6:	4ba5      	ldr	r3, [pc, #660]	; (800b27c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800afe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afea:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800afee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aff2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aff4:	4aa1      	ldr	r2, [pc, #644]	; (800b27c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aff6:	430b      	orrs	r3, r1
 800aff8:	6513      	str	r3, [r2, #80]	; 0x50
 800affa:	e003      	b.n	800b004 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800affc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b000:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b004:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b010:	f04f 0900 	mov.w	r9, #0
 800b014:	ea58 0309 	orrs.w	r3, r8, r9
 800b018:	d047      	beq.n	800b0aa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b01a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b01e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b020:	2b04      	cmp	r3, #4
 800b022:	d82a      	bhi.n	800b07a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b024:	a201      	add	r2, pc, #4	; (adr r2, 800b02c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b02a:	bf00      	nop
 800b02c:	0800b041 	.word	0x0800b041
 800b030:	0800b04f 	.word	0x0800b04f
 800b034:	0800b065 	.word	0x0800b065
 800b038:	0800b083 	.word	0x0800b083
 800b03c:	0800b083 	.word	0x0800b083
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b040:	4b8e      	ldr	r3, [pc, #568]	; (800b27c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b044:	4a8d      	ldr	r2, [pc, #564]	; (800b27c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b046:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b04a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b04c:	e01a      	b.n	800b084 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b04e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b052:	3308      	adds	r3, #8
 800b054:	2100      	movs	r1, #0
 800b056:	4618      	mov	r0, r3
 800b058:	f002 fb64 	bl	800d724 <RCCEx_PLL2_Config>
 800b05c:	4603      	mov	r3, r0
 800b05e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b062:	e00f      	b.n	800b084 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b068:	3328      	adds	r3, #40	; 0x28
 800b06a:	2100      	movs	r1, #0
 800b06c:	4618      	mov	r0, r3
 800b06e:	f002 fc0b 	bl	800d888 <RCCEx_PLL3_Config>
 800b072:	4603      	mov	r3, r0
 800b074:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b078:	e004      	b.n	800b084 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b07a:	2301      	movs	r3, #1
 800b07c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b080:	e000      	b.n	800b084 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b082:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b084:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d10a      	bne.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b08c:	4b7b      	ldr	r3, [pc, #492]	; (800b27c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b08e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b090:	f023 0107 	bic.w	r1, r3, #7
 800b094:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b09a:	4a78      	ldr	r2, [pc, #480]	; (800b27c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b09c:	430b      	orrs	r3, r1
 800b09e:	6513      	str	r3, [r2, #80]	; 0x50
 800b0a0:	e003      	b.n	800b0aa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b0aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b0b6:	f04f 0b00 	mov.w	fp, #0
 800b0ba:	ea5a 030b 	orrs.w	r3, sl, fp
 800b0be:	d04c      	beq.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800b0c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0ca:	d030      	beq.n	800b12e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800b0cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0d0:	d829      	bhi.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b0d2:	2bc0      	cmp	r3, #192	; 0xc0
 800b0d4:	d02d      	beq.n	800b132 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b0d6:	2bc0      	cmp	r3, #192	; 0xc0
 800b0d8:	d825      	bhi.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b0da:	2b80      	cmp	r3, #128	; 0x80
 800b0dc:	d018      	beq.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b0de:	2b80      	cmp	r3, #128	; 0x80
 800b0e0:	d821      	bhi.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d002      	beq.n	800b0ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800b0e6:	2b40      	cmp	r3, #64	; 0x40
 800b0e8:	d007      	beq.n	800b0fa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800b0ea:	e01c      	b.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0ec:	4b63      	ldr	r3, [pc, #396]	; (800b27c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f0:	4a62      	ldr	r2, [pc, #392]	; (800b27c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b0f8:	e01c      	b.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b0fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0fe:	3308      	adds	r3, #8
 800b100:	2100      	movs	r1, #0
 800b102:	4618      	mov	r0, r3
 800b104:	f002 fb0e 	bl	800d724 <RCCEx_PLL2_Config>
 800b108:	4603      	mov	r3, r0
 800b10a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b10e:	e011      	b.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b110:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b114:	3328      	adds	r3, #40	; 0x28
 800b116:	2100      	movs	r1, #0
 800b118:	4618      	mov	r0, r3
 800b11a:	f002 fbb5 	bl	800d888 <RCCEx_PLL3_Config>
 800b11e:	4603      	mov	r3, r0
 800b120:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b124:	e006      	b.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b126:	2301      	movs	r3, #1
 800b128:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b12c:	e002      	b.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b12e:	bf00      	nop
 800b130:	e000      	b.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b132:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b134:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d10a      	bne.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b13c:	4b4f      	ldr	r3, [pc, #316]	; (800b27c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b13e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b140:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b14a:	4a4c      	ldr	r2, [pc, #304]	; (800b27c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b14c:	430b      	orrs	r3, r1
 800b14e:	6513      	str	r3, [r2, #80]	; 0x50
 800b150:	e003      	b.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b152:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b156:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b15a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b162:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b166:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b16a:	2300      	movs	r3, #0
 800b16c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b170:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800b174:	460b      	mov	r3, r1
 800b176:	4313      	orrs	r3, r2
 800b178:	d053      	beq.n	800b222 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b17a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b17e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b182:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b186:	d035      	beq.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b188:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b18c:	d82e      	bhi.n	800b1ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b18e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b192:	d031      	beq.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b194:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b198:	d828      	bhi.n	800b1ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b19a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b19e:	d01a      	beq.n	800b1d6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b1a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b1a4:	d822      	bhi.n	800b1ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d003      	beq.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b1aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b1ae:	d007      	beq.n	800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b1b0:	e01c      	b.n	800b1ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1b2:	4b32      	ldr	r3, [pc, #200]	; (800b27c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1b6:	4a31      	ldr	r2, [pc, #196]	; (800b27c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b1be:	e01c      	b.n	800b1fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b1c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1c4:	3308      	adds	r3, #8
 800b1c6:	2100      	movs	r1, #0
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f002 faab 	bl	800d724 <RCCEx_PLL2_Config>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b1d4:	e011      	b.n	800b1fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b1d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1da:	3328      	adds	r3, #40	; 0x28
 800b1dc:	2100      	movs	r1, #0
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f002 fb52 	bl	800d888 <RCCEx_PLL3_Config>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b1ea:	e006      	b.n	800b1fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b1f2:	e002      	b.n	800b1fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b1f4:	bf00      	nop
 800b1f6:	e000      	b.n	800b1fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b1f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d10b      	bne.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b202:	4b1e      	ldr	r3, [pc, #120]	; (800b27c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b206:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b20a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b20e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b212:	4a1a      	ldr	r2, [pc, #104]	; (800b27c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b214:	430b      	orrs	r3, r1
 800b216:	6593      	str	r3, [r2, #88]	; 0x58
 800b218:	e003      	b.n	800b222 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b21a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b21e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b22a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b22e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b232:	2300      	movs	r3, #0
 800b234:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b238:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b23c:	460b      	mov	r3, r1
 800b23e:	4313      	orrs	r3, r2
 800b240:	d056      	beq.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b246:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b24a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b24e:	d038      	beq.n	800b2c2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b250:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b254:	d831      	bhi.n	800b2ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b256:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b25a:	d034      	beq.n	800b2c6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b25c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b260:	d82b      	bhi.n	800b2ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b262:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b266:	d01d      	beq.n	800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b268:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b26c:	d825      	bhi.n	800b2ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d006      	beq.n	800b280 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b272:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b276:	d00a      	beq.n	800b28e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b278:	e01f      	b.n	800b2ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b27a:	bf00      	nop
 800b27c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b280:	4ba2      	ldr	r3, [pc, #648]	; (800b50c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b284:	4aa1      	ldr	r2, [pc, #644]	; (800b50c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b286:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b28a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b28c:	e01c      	b.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b28e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b292:	3308      	adds	r3, #8
 800b294:	2100      	movs	r1, #0
 800b296:	4618      	mov	r0, r3
 800b298:	f002 fa44 	bl	800d724 <RCCEx_PLL2_Config>
 800b29c:	4603      	mov	r3, r0
 800b29e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b2a2:	e011      	b.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b2a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2a8:	3328      	adds	r3, #40	; 0x28
 800b2aa:	2100      	movs	r1, #0
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f002 faeb 	bl	800d888 <RCCEx_PLL3_Config>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b2b8:	e006      	b.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b2c0:	e002      	b.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b2c2:	bf00      	nop
 800b2c4:	e000      	b.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b2c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d10b      	bne.n	800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b2d0:	4b8e      	ldr	r3, [pc, #568]	; (800b50c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b2d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2d4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b2d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b2e0:	4a8a      	ldr	r2, [pc, #552]	; (800b50c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b2e2:	430b      	orrs	r3, r1
 800b2e4:	6593      	str	r3, [r2, #88]	; 0x58
 800b2e6:	e003      	b.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b2f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b2fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b300:	2300      	movs	r3, #0
 800b302:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b306:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b30a:	460b      	mov	r3, r1
 800b30c:	4313      	orrs	r3, r2
 800b30e:	d03a      	beq.n	800b386 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b310:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b316:	2b30      	cmp	r3, #48	; 0x30
 800b318:	d01f      	beq.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b31a:	2b30      	cmp	r3, #48	; 0x30
 800b31c:	d819      	bhi.n	800b352 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b31e:	2b20      	cmp	r3, #32
 800b320:	d00c      	beq.n	800b33c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b322:	2b20      	cmp	r3, #32
 800b324:	d815      	bhi.n	800b352 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b326:	2b00      	cmp	r3, #0
 800b328:	d019      	beq.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b32a:	2b10      	cmp	r3, #16
 800b32c:	d111      	bne.n	800b352 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b32e:	4b77      	ldr	r3, [pc, #476]	; (800b50c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b332:	4a76      	ldr	r2, [pc, #472]	; (800b50c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b338:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b33a:	e011      	b.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b33c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b340:	3308      	adds	r3, #8
 800b342:	2102      	movs	r1, #2
 800b344:	4618      	mov	r0, r3
 800b346:	f002 f9ed 	bl	800d724 <RCCEx_PLL2_Config>
 800b34a:	4603      	mov	r3, r0
 800b34c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b350:	e006      	b.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b352:	2301      	movs	r3, #1
 800b354:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b358:	e002      	b.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b35a:	bf00      	nop
 800b35c:	e000      	b.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b35e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b360:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b364:	2b00      	cmp	r3, #0
 800b366:	d10a      	bne.n	800b37e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b368:	4b68      	ldr	r3, [pc, #416]	; (800b50c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b36a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b36c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b376:	4a65      	ldr	r2, [pc, #404]	; (800b50c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b378:	430b      	orrs	r3, r1
 800b37a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b37c:	e003      	b.n	800b386 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b37e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b382:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b392:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b396:	2300      	movs	r3, #0
 800b398:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b39c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b3a0:	460b      	mov	r3, r1
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	d051      	beq.n	800b44a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b3a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b3ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b3b0:	d035      	beq.n	800b41e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b3b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b3b6:	d82e      	bhi.n	800b416 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b3b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b3bc:	d031      	beq.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b3be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b3c2:	d828      	bhi.n	800b416 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b3c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3c8:	d01a      	beq.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b3ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3ce:	d822      	bhi.n	800b416 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d003      	beq.n	800b3dc <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b3d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3d8:	d007      	beq.n	800b3ea <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b3da:	e01c      	b.n	800b416 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3dc:	4b4b      	ldr	r3, [pc, #300]	; (800b50c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e0:	4a4a      	ldr	r2, [pc, #296]	; (800b50c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b3e8:	e01c      	b.n	800b424 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b3ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3ee:	3308      	adds	r3, #8
 800b3f0:	2100      	movs	r1, #0
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f002 f996 	bl	800d724 <RCCEx_PLL2_Config>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b3fe:	e011      	b.n	800b424 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b400:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b404:	3328      	adds	r3, #40	; 0x28
 800b406:	2100      	movs	r1, #0
 800b408:	4618      	mov	r0, r3
 800b40a:	f002 fa3d 	bl	800d888 <RCCEx_PLL3_Config>
 800b40e:	4603      	mov	r3, r0
 800b410:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b414:	e006      	b.n	800b424 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b416:	2301      	movs	r3, #1
 800b418:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b41c:	e002      	b.n	800b424 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b41e:	bf00      	nop
 800b420:	e000      	b.n	800b424 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b422:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b424:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d10a      	bne.n	800b442 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b42c:	4b37      	ldr	r3, [pc, #220]	; (800b50c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b42e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b430:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b434:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b43a:	4a34      	ldr	r2, [pc, #208]	; (800b50c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b43c:	430b      	orrs	r3, r1
 800b43e:	6513      	str	r3, [r2, #80]	; 0x50
 800b440:	e003      	b.n	800b44a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b442:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b446:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b44a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b452:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b456:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b45a:	2300      	movs	r3, #0
 800b45c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b460:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b464:	460b      	mov	r3, r1
 800b466:	4313      	orrs	r3, r2
 800b468:	d056      	beq.n	800b518 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b46a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b46e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b470:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b474:	d033      	beq.n	800b4de <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b476:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b47a:	d82c      	bhi.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b47c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b480:	d02f      	beq.n	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b482:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b486:	d826      	bhi.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b488:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b48c:	d02b      	beq.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b48e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b492:	d820      	bhi.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b494:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b498:	d012      	beq.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b49a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b49e:	d81a      	bhi.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d022      	beq.n	800b4ea <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b4a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4a8:	d115      	bne.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b4aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4ae:	3308      	adds	r3, #8
 800b4b0:	2101      	movs	r1, #1
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f002 f936 	bl	800d724 <RCCEx_PLL2_Config>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b4be:	e015      	b.n	800b4ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b4c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4c4:	3328      	adds	r3, #40	; 0x28
 800b4c6:	2101      	movs	r1, #1
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f002 f9dd 	bl	800d888 <RCCEx_PLL3_Config>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b4d4:	e00a      	b.n	800b4ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b4dc:	e006      	b.n	800b4ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b4de:	bf00      	nop
 800b4e0:	e004      	b.n	800b4ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b4e2:	bf00      	nop
 800b4e4:	e002      	b.n	800b4ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b4e6:	bf00      	nop
 800b4e8:	e000      	b.n	800b4ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b4ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d10d      	bne.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b4f4:	4b05      	ldr	r3, [pc, #20]	; (800b50c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4f8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b4fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b500:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b502:	4a02      	ldr	r2, [pc, #8]	; (800b50c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b504:	430b      	orrs	r3, r1
 800b506:	6513      	str	r3, [r2, #80]	; 0x50
 800b508:	e006      	b.n	800b518 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b50a:	bf00      	nop
 800b50c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b510:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b514:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b520:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b524:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b528:	2300      	movs	r3, #0
 800b52a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b52e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b532:	460b      	mov	r3, r1
 800b534:	4313      	orrs	r3, r2
 800b536:	d055      	beq.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b53c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b540:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b544:	d033      	beq.n	800b5ae <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b546:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b54a:	d82c      	bhi.n	800b5a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b54c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b550:	d02f      	beq.n	800b5b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b556:	d826      	bhi.n	800b5a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b558:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b55c:	d02b      	beq.n	800b5b6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b55e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b562:	d820      	bhi.n	800b5a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b564:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b568:	d012      	beq.n	800b590 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b56a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b56e:	d81a      	bhi.n	800b5a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b570:	2b00      	cmp	r3, #0
 800b572:	d022      	beq.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b574:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b578:	d115      	bne.n	800b5a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b57a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b57e:	3308      	adds	r3, #8
 800b580:	2101      	movs	r1, #1
 800b582:	4618      	mov	r0, r3
 800b584:	f002 f8ce 	bl	800d724 <RCCEx_PLL2_Config>
 800b588:	4603      	mov	r3, r0
 800b58a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b58e:	e015      	b.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b594:	3328      	adds	r3, #40	; 0x28
 800b596:	2101      	movs	r1, #1
 800b598:	4618      	mov	r0, r3
 800b59a:	f002 f975 	bl	800d888 <RCCEx_PLL3_Config>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b5a4:	e00a      	b.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b5ac:	e006      	b.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b5ae:	bf00      	nop
 800b5b0:	e004      	b.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b5b2:	bf00      	nop
 800b5b4:	e002      	b.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b5b6:	bf00      	nop
 800b5b8:	e000      	b.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b5ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d10b      	bne.n	800b5dc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b5c4:	4ba3      	ldr	r3, [pc, #652]	; (800b854 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5c8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b5cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b5d4:	4a9f      	ldr	r2, [pc, #636]	; (800b854 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5d6:	430b      	orrs	r3, r1
 800b5d8:	6593      	str	r3, [r2, #88]	; 0x58
 800b5da:	e003      	b.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b5e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ec:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b5f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b5fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b5fe:	460b      	mov	r3, r1
 800b600:	4313      	orrs	r3, r2
 800b602:	d037      	beq.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b60a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b60e:	d00e      	beq.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b610:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b614:	d816      	bhi.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b616:	2b00      	cmp	r3, #0
 800b618:	d018      	beq.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b61a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b61e:	d111      	bne.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b620:	4b8c      	ldr	r3, [pc, #560]	; (800b854 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b624:	4a8b      	ldr	r2, [pc, #556]	; (800b854 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b626:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b62a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b62c:	e00f      	b.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b62e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b632:	3308      	adds	r3, #8
 800b634:	2101      	movs	r1, #1
 800b636:	4618      	mov	r0, r3
 800b638:	f002 f874 	bl	800d724 <RCCEx_PLL2_Config>
 800b63c:	4603      	mov	r3, r0
 800b63e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b642:	e004      	b.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b644:	2301      	movs	r3, #1
 800b646:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b64a:	e000      	b.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b64c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b64e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b652:	2b00      	cmp	r3, #0
 800b654:	d10a      	bne.n	800b66c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b656:	4b7f      	ldr	r3, [pc, #508]	; (800b854 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b65a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b65e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b664:	4a7b      	ldr	r2, [pc, #492]	; (800b854 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b666:	430b      	orrs	r3, r1
 800b668:	6513      	str	r3, [r2, #80]	; 0x50
 800b66a:	e003      	b.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b66c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b670:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b680:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b684:	2300      	movs	r3, #0
 800b686:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b68a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b68e:	460b      	mov	r3, r1
 800b690:	4313      	orrs	r3, r2
 800b692:	d039      	beq.n	800b708 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b694:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b69a:	2b03      	cmp	r3, #3
 800b69c:	d81c      	bhi.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b69e:	a201      	add	r2, pc, #4	; (adr r2, 800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b6a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6a4:	0800b6e1 	.word	0x0800b6e1
 800b6a8:	0800b6b5 	.word	0x0800b6b5
 800b6ac:	0800b6c3 	.word	0x0800b6c3
 800b6b0:	0800b6e1 	.word	0x0800b6e1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6b4:	4b67      	ldr	r3, [pc, #412]	; (800b854 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6b8:	4a66      	ldr	r2, [pc, #408]	; (800b854 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b6c0:	e00f      	b.n	800b6e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b6c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6c6:	3308      	adds	r3, #8
 800b6c8:	2102      	movs	r1, #2
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f002 f82a 	bl	800d724 <RCCEx_PLL2_Config>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b6d6:	e004      	b.n	800b6e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b6d8:	2301      	movs	r3, #1
 800b6da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b6de:	e000      	b.n	800b6e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b6e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d10a      	bne.n	800b700 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b6ea:	4b5a      	ldr	r3, [pc, #360]	; (800b854 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6ee:	f023 0103 	bic.w	r1, r3, #3
 800b6f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6f8:	4a56      	ldr	r2, [pc, #344]	; (800b854 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6fa:	430b      	orrs	r3, r1
 800b6fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b6fe:	e003      	b.n	800b708 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b700:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b704:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b708:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b710:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b714:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b718:	2300      	movs	r3, #0
 800b71a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b71e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b722:	460b      	mov	r3, r1
 800b724:	4313      	orrs	r3, r2
 800b726:	f000 809f 	beq.w	800b868 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b72a:	4b4b      	ldr	r3, [pc, #300]	; (800b858 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	4a4a      	ldr	r2, [pc, #296]	; (800b858 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b734:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b736:	f7f8 fd97 	bl	8004268 <HAL_GetTick>
 800b73a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b73e:	e00b      	b.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b740:	f7f8 fd92 	bl	8004268 <HAL_GetTick>
 800b744:	4602      	mov	r2, r0
 800b746:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b74a:	1ad3      	subs	r3, r2, r3
 800b74c:	2b64      	cmp	r3, #100	; 0x64
 800b74e:	d903      	bls.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b750:	2303      	movs	r3, #3
 800b752:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b756:	e005      	b.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b758:	4b3f      	ldr	r3, [pc, #252]	; (800b858 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b760:	2b00      	cmp	r3, #0
 800b762:	d0ed      	beq.n	800b740 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b764:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d179      	bne.n	800b860 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b76c:	4b39      	ldr	r3, [pc, #228]	; (800b854 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b76e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b770:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b774:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b778:	4053      	eors	r3, r2
 800b77a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d015      	beq.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b782:	4b34      	ldr	r3, [pc, #208]	; (800b854 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b78a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b78e:	4b31      	ldr	r3, [pc, #196]	; (800b854 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b792:	4a30      	ldr	r2, [pc, #192]	; (800b854 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b798:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b79a:	4b2e      	ldr	r3, [pc, #184]	; (800b854 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b79c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b79e:	4a2d      	ldr	r2, [pc, #180]	; (800b854 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b7a4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b7a6:	4a2b      	ldr	r2, [pc, #172]	; (800b854 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b7ac:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b7ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b7b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7ba:	d118      	bne.n	800b7ee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7bc:	f7f8 fd54 	bl	8004268 <HAL_GetTick>
 800b7c0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b7c4:	e00d      	b.n	800b7e2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b7c6:	f7f8 fd4f 	bl	8004268 <HAL_GetTick>
 800b7ca:	4602      	mov	r2, r0
 800b7cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b7d0:	1ad2      	subs	r2, r2, r3
 800b7d2:	f241 3388 	movw	r3, #5000	; 0x1388
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d903      	bls.n	800b7e2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b7da:	2303      	movs	r3, #3
 800b7dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b7e0:	e005      	b.n	800b7ee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b7e2:	4b1c      	ldr	r3, [pc, #112]	; (800b854 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7e6:	f003 0302 	and.w	r3, r3, #2
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d0eb      	beq.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b7ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d129      	bne.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b7f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b7fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b802:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b806:	d10e      	bne.n	800b826 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b808:	4b12      	ldr	r3, [pc, #72]	; (800b854 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b80a:	691b      	ldr	r3, [r3, #16]
 800b80c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b810:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b814:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b818:	091a      	lsrs	r2, r3, #4
 800b81a:	4b10      	ldr	r3, [pc, #64]	; (800b85c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b81c:	4013      	ands	r3, r2
 800b81e:	4a0d      	ldr	r2, [pc, #52]	; (800b854 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b820:	430b      	orrs	r3, r1
 800b822:	6113      	str	r3, [r2, #16]
 800b824:	e005      	b.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b826:	4b0b      	ldr	r3, [pc, #44]	; (800b854 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b828:	691b      	ldr	r3, [r3, #16]
 800b82a:	4a0a      	ldr	r2, [pc, #40]	; (800b854 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b82c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b830:	6113      	str	r3, [r2, #16]
 800b832:	4b08      	ldr	r3, [pc, #32]	; (800b854 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b834:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b83a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b83e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b842:	4a04      	ldr	r2, [pc, #16]	; (800b854 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b844:	430b      	orrs	r3, r1
 800b846:	6713      	str	r3, [r2, #112]	; 0x70
 800b848:	e00e      	b.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b84a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b84e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b852:	e009      	b.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b854:	58024400 	.word	0x58024400
 800b858:	58024800 	.word	0x58024800
 800b85c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b860:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b864:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b868:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b870:	f002 0301 	and.w	r3, r2, #1
 800b874:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b878:	2300      	movs	r3, #0
 800b87a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b87e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b882:	460b      	mov	r3, r1
 800b884:	4313      	orrs	r3, r2
 800b886:	f000 8089 	beq.w	800b99c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b88a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b88e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b890:	2b28      	cmp	r3, #40	; 0x28
 800b892:	d86b      	bhi.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b894:	a201      	add	r2, pc, #4	; (adr r2, 800b89c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b89a:	bf00      	nop
 800b89c:	0800b975 	.word	0x0800b975
 800b8a0:	0800b96d 	.word	0x0800b96d
 800b8a4:	0800b96d 	.word	0x0800b96d
 800b8a8:	0800b96d 	.word	0x0800b96d
 800b8ac:	0800b96d 	.word	0x0800b96d
 800b8b0:	0800b96d 	.word	0x0800b96d
 800b8b4:	0800b96d 	.word	0x0800b96d
 800b8b8:	0800b96d 	.word	0x0800b96d
 800b8bc:	0800b941 	.word	0x0800b941
 800b8c0:	0800b96d 	.word	0x0800b96d
 800b8c4:	0800b96d 	.word	0x0800b96d
 800b8c8:	0800b96d 	.word	0x0800b96d
 800b8cc:	0800b96d 	.word	0x0800b96d
 800b8d0:	0800b96d 	.word	0x0800b96d
 800b8d4:	0800b96d 	.word	0x0800b96d
 800b8d8:	0800b96d 	.word	0x0800b96d
 800b8dc:	0800b957 	.word	0x0800b957
 800b8e0:	0800b96d 	.word	0x0800b96d
 800b8e4:	0800b96d 	.word	0x0800b96d
 800b8e8:	0800b96d 	.word	0x0800b96d
 800b8ec:	0800b96d 	.word	0x0800b96d
 800b8f0:	0800b96d 	.word	0x0800b96d
 800b8f4:	0800b96d 	.word	0x0800b96d
 800b8f8:	0800b96d 	.word	0x0800b96d
 800b8fc:	0800b975 	.word	0x0800b975
 800b900:	0800b96d 	.word	0x0800b96d
 800b904:	0800b96d 	.word	0x0800b96d
 800b908:	0800b96d 	.word	0x0800b96d
 800b90c:	0800b96d 	.word	0x0800b96d
 800b910:	0800b96d 	.word	0x0800b96d
 800b914:	0800b96d 	.word	0x0800b96d
 800b918:	0800b96d 	.word	0x0800b96d
 800b91c:	0800b975 	.word	0x0800b975
 800b920:	0800b96d 	.word	0x0800b96d
 800b924:	0800b96d 	.word	0x0800b96d
 800b928:	0800b96d 	.word	0x0800b96d
 800b92c:	0800b96d 	.word	0x0800b96d
 800b930:	0800b96d 	.word	0x0800b96d
 800b934:	0800b96d 	.word	0x0800b96d
 800b938:	0800b96d 	.word	0x0800b96d
 800b93c:	0800b975 	.word	0x0800b975
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b940:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b944:	3308      	adds	r3, #8
 800b946:	2101      	movs	r1, #1
 800b948:	4618      	mov	r0, r3
 800b94a:	f001 feeb 	bl	800d724 <RCCEx_PLL2_Config>
 800b94e:	4603      	mov	r3, r0
 800b950:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b954:	e00f      	b.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b95a:	3328      	adds	r3, #40	; 0x28
 800b95c:	2101      	movs	r1, #1
 800b95e:	4618      	mov	r0, r3
 800b960:	f001 ff92 	bl	800d888 <RCCEx_PLL3_Config>
 800b964:	4603      	mov	r3, r0
 800b966:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b96a:	e004      	b.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b96c:	2301      	movs	r3, #1
 800b96e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b972:	e000      	b.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b974:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b976:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d10a      	bne.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b97e:	4bbf      	ldr	r3, [pc, #764]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b982:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b98a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b98c:	4abb      	ldr	r2, [pc, #748]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b98e:	430b      	orrs	r3, r1
 800b990:	6553      	str	r3, [r2, #84]	; 0x54
 800b992:	e003      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b994:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b998:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b99c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a4:	f002 0302 	and.w	r3, r2, #2
 800b9a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b9b2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b9b6:	460b      	mov	r3, r1
 800b9b8:	4313      	orrs	r3, r2
 800b9ba:	d041      	beq.n	800ba40 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b9bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9c2:	2b05      	cmp	r3, #5
 800b9c4:	d824      	bhi.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b9c6:	a201      	add	r2, pc, #4	; (adr r2, 800b9cc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b9c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9cc:	0800ba19 	.word	0x0800ba19
 800b9d0:	0800b9e5 	.word	0x0800b9e5
 800b9d4:	0800b9fb 	.word	0x0800b9fb
 800b9d8:	0800ba19 	.word	0x0800ba19
 800b9dc:	0800ba19 	.word	0x0800ba19
 800b9e0:	0800ba19 	.word	0x0800ba19
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b9e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9e8:	3308      	adds	r3, #8
 800b9ea:	2101      	movs	r1, #1
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f001 fe99 	bl	800d724 <RCCEx_PLL2_Config>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b9f8:	e00f      	b.n	800ba1a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b9fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9fe:	3328      	adds	r3, #40	; 0x28
 800ba00:	2101      	movs	r1, #1
 800ba02:	4618      	mov	r0, r3
 800ba04:	f001 ff40 	bl	800d888 <RCCEx_PLL3_Config>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ba0e:	e004      	b.n	800ba1a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba10:	2301      	movs	r3, #1
 800ba12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba16:	e000      	b.n	800ba1a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800ba18:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d10a      	bne.n	800ba38 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ba22:	4b96      	ldr	r3, [pc, #600]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba26:	f023 0107 	bic.w	r1, r3, #7
 800ba2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba30:	4a92      	ldr	r2, [pc, #584]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba32:	430b      	orrs	r3, r1
 800ba34:	6553      	str	r3, [r2, #84]	; 0x54
 800ba36:	e003      	b.n	800ba40 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba3c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ba40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba48:	f002 0304 	and.w	r3, r2, #4
 800ba4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ba50:	2300      	movs	r3, #0
 800ba52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ba56:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	4313      	orrs	r3, r2
 800ba5e:	d044      	beq.n	800baea <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ba60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba68:	2b05      	cmp	r3, #5
 800ba6a:	d825      	bhi.n	800bab8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800ba6c:	a201      	add	r2, pc, #4	; (adr r2, 800ba74 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800ba6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba72:	bf00      	nop
 800ba74:	0800bac1 	.word	0x0800bac1
 800ba78:	0800ba8d 	.word	0x0800ba8d
 800ba7c:	0800baa3 	.word	0x0800baa3
 800ba80:	0800bac1 	.word	0x0800bac1
 800ba84:	0800bac1 	.word	0x0800bac1
 800ba88:	0800bac1 	.word	0x0800bac1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba90:	3308      	adds	r3, #8
 800ba92:	2101      	movs	r1, #1
 800ba94:	4618      	mov	r0, r3
 800ba96:	f001 fe45 	bl	800d724 <RCCEx_PLL2_Config>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800baa0:	e00f      	b.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800baa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baa6:	3328      	adds	r3, #40	; 0x28
 800baa8:	2101      	movs	r1, #1
 800baaa:	4618      	mov	r0, r3
 800baac:	f001 feec 	bl	800d888 <RCCEx_PLL3_Config>
 800bab0:	4603      	mov	r3, r0
 800bab2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bab6:	e004      	b.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bab8:	2301      	movs	r3, #1
 800baba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800babe:	e000      	b.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800bac0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bac2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d10b      	bne.n	800bae2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800baca:	4b6c      	ldr	r3, [pc, #432]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bacc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bace:	f023 0107 	bic.w	r1, r3, #7
 800bad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bada:	4a68      	ldr	r2, [pc, #416]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800badc:	430b      	orrs	r3, r1
 800bade:	6593      	str	r3, [r2, #88]	; 0x58
 800bae0:	e003      	b.n	800baea <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bae2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bae6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800baea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf2:	f002 0320 	and.w	r3, r2, #32
 800baf6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bafa:	2300      	movs	r3, #0
 800bafc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bb00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bb04:	460b      	mov	r3, r1
 800bb06:	4313      	orrs	r3, r2
 800bb08:	d055      	beq.n	800bbb6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bb0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bb16:	d033      	beq.n	800bb80 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800bb18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bb1c:	d82c      	bhi.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bb1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb22:	d02f      	beq.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800bb24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb28:	d826      	bhi.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bb2a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bb2e:	d02b      	beq.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800bb30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bb34:	d820      	bhi.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bb36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb3a:	d012      	beq.n	800bb62 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800bb3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb40:	d81a      	bhi.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d022      	beq.n	800bb8c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800bb46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb4a:	d115      	bne.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb50:	3308      	adds	r3, #8
 800bb52:	2100      	movs	r1, #0
 800bb54:	4618      	mov	r0, r3
 800bb56:	f001 fde5 	bl	800d724 <RCCEx_PLL2_Config>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bb60:	e015      	b.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bb62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb66:	3328      	adds	r3, #40	; 0x28
 800bb68:	2102      	movs	r1, #2
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f001 fe8c 	bl	800d888 <RCCEx_PLL3_Config>
 800bb70:	4603      	mov	r3, r0
 800bb72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bb76:	e00a      	b.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb78:	2301      	movs	r3, #1
 800bb7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bb7e:	e006      	b.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bb80:	bf00      	nop
 800bb82:	e004      	b.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bb84:	bf00      	nop
 800bb86:	e002      	b.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bb88:	bf00      	nop
 800bb8a:	e000      	b.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bb8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d10b      	bne.n	800bbae <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bb96:	4b39      	ldr	r3, [pc, #228]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb9a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bb9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bba6:	4a35      	ldr	r2, [pc, #212]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bba8:	430b      	orrs	r3, r1
 800bbaa:	6553      	str	r3, [r2, #84]	; 0x54
 800bbac:	e003      	b.n	800bbb6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbb2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bbb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbbe:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800bbc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bbcc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800bbd0:	460b      	mov	r3, r1
 800bbd2:	4313      	orrs	r3, r2
 800bbd4:	d058      	beq.n	800bc88 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bbd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bbde:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bbe2:	d033      	beq.n	800bc4c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800bbe4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bbe8:	d82c      	bhi.n	800bc44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bbea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbee:	d02f      	beq.n	800bc50 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800bbf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbf4:	d826      	bhi.n	800bc44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bbf6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bbfa:	d02b      	beq.n	800bc54 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800bbfc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bc00:	d820      	bhi.n	800bc44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bc02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc06:	d012      	beq.n	800bc2e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800bc08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc0c:	d81a      	bhi.n	800bc44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d022      	beq.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800bc12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc16:	d115      	bne.n	800bc44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc1c:	3308      	adds	r3, #8
 800bc1e:	2100      	movs	r1, #0
 800bc20:	4618      	mov	r0, r3
 800bc22:	f001 fd7f 	bl	800d724 <RCCEx_PLL2_Config>
 800bc26:	4603      	mov	r3, r0
 800bc28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bc2c:	e015      	b.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bc2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc32:	3328      	adds	r3, #40	; 0x28
 800bc34:	2102      	movs	r1, #2
 800bc36:	4618      	mov	r0, r3
 800bc38:	f001 fe26 	bl	800d888 <RCCEx_PLL3_Config>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bc42:	e00a      	b.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc44:	2301      	movs	r3, #1
 800bc46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bc4a:	e006      	b.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bc4c:	bf00      	nop
 800bc4e:	e004      	b.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bc50:	bf00      	nop
 800bc52:	e002      	b.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bc54:	bf00      	nop
 800bc56:	e000      	b.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bc58:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d10e      	bne.n	800bc80 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bc62:	4b06      	ldr	r3, [pc, #24]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc66:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800bc6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bc72:	4a02      	ldr	r2, [pc, #8]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc74:	430b      	orrs	r3, r1
 800bc76:	6593      	str	r3, [r2, #88]	; 0x58
 800bc78:	e006      	b.n	800bc88 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800bc7a:	bf00      	nop
 800bc7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bc88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc90:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800bc94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bc98:	2300      	movs	r3, #0
 800bc9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bc9e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800bca2:	460b      	mov	r3, r1
 800bca4:	4313      	orrs	r3, r2
 800bca6:	d055      	beq.n	800bd54 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bcb0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bcb4:	d033      	beq.n	800bd1e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800bcb6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bcba:	d82c      	bhi.n	800bd16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bcbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcc0:	d02f      	beq.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800bcc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcc6:	d826      	bhi.n	800bd16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bcc8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bccc:	d02b      	beq.n	800bd26 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800bcce:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bcd2:	d820      	bhi.n	800bd16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bcd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bcd8:	d012      	beq.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800bcda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bcde:	d81a      	bhi.n	800bd16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d022      	beq.n	800bd2a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800bce4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bce8:	d115      	bne.n	800bd16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bcea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcee:	3308      	adds	r3, #8
 800bcf0:	2100      	movs	r1, #0
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f001 fd16 	bl	800d724 <RCCEx_PLL2_Config>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bcfe:	e015      	b.n	800bd2c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bd00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd04:	3328      	adds	r3, #40	; 0x28
 800bd06:	2102      	movs	r1, #2
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f001 fdbd 	bl	800d888 <RCCEx_PLL3_Config>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bd14:	e00a      	b.n	800bd2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd16:	2301      	movs	r3, #1
 800bd18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bd1c:	e006      	b.n	800bd2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bd1e:	bf00      	nop
 800bd20:	e004      	b.n	800bd2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bd22:	bf00      	nop
 800bd24:	e002      	b.n	800bd2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bd26:	bf00      	nop
 800bd28:	e000      	b.n	800bd2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bd2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d10b      	bne.n	800bd4c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bd34:	4ba1      	ldr	r3, [pc, #644]	; (800bfbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd38:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800bd3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd40:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bd44:	4a9d      	ldr	r2, [pc, #628]	; (800bfbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd46:	430b      	orrs	r3, r1
 800bd48:	6593      	str	r3, [r2, #88]	; 0x58
 800bd4a:	e003      	b.n	800bd54 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bd54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd5c:	f002 0308 	and.w	r3, r2, #8
 800bd60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bd64:	2300      	movs	r3, #0
 800bd66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bd6a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800bd6e:	460b      	mov	r3, r1
 800bd70:	4313      	orrs	r3, r2
 800bd72:	d01e      	beq.n	800bdb2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800bd74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd80:	d10c      	bne.n	800bd9c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bd82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd86:	3328      	adds	r3, #40	; 0x28
 800bd88:	2102      	movs	r1, #2
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f001 fd7c 	bl	800d888 <RCCEx_PLL3_Config>
 800bd90:	4603      	mov	r3, r0
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d002      	beq.n	800bd9c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800bd96:	2301      	movs	r3, #1
 800bd98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bd9c:	4b87      	ldr	r3, [pc, #540]	; (800bfbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bda0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bda4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bda8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdac:	4a83      	ldr	r2, [pc, #524]	; (800bfbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bdae:	430b      	orrs	r3, r1
 800bdb0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bdb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdba:	f002 0310 	and.w	r3, r2, #16
 800bdbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bdc8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800bdcc:	460b      	mov	r3, r1
 800bdce:	4313      	orrs	r3, r2
 800bdd0:	d01e      	beq.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bdd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bdda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdde:	d10c      	bne.n	800bdfa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bde0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bde4:	3328      	adds	r3, #40	; 0x28
 800bde6:	2102      	movs	r1, #2
 800bde8:	4618      	mov	r0, r3
 800bdea:	f001 fd4d 	bl	800d888 <RCCEx_PLL3_Config>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d002      	beq.n	800bdfa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bdfa:	4b70      	ldr	r3, [pc, #448]	; (800bfbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bdfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdfe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800be02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800be0a:	4a6c      	ldr	r2, [pc, #432]	; (800bfbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be0c:	430b      	orrs	r3, r1
 800be0e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800be10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be18:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800be1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800be20:	2300      	movs	r3, #0
 800be22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800be26:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800be2a:	460b      	mov	r3, r1
 800be2c:	4313      	orrs	r3, r2
 800be2e:	d03e      	beq.n	800beae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800be30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800be38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be3c:	d022      	beq.n	800be84 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800be3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be42:	d81b      	bhi.n	800be7c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800be44:	2b00      	cmp	r3, #0
 800be46:	d003      	beq.n	800be50 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800be48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be4c:	d00b      	beq.n	800be66 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800be4e:	e015      	b.n	800be7c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be54:	3308      	adds	r3, #8
 800be56:	2100      	movs	r1, #0
 800be58:	4618      	mov	r0, r3
 800be5a:	f001 fc63 	bl	800d724 <RCCEx_PLL2_Config>
 800be5e:	4603      	mov	r3, r0
 800be60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800be64:	e00f      	b.n	800be86 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800be66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be6a:	3328      	adds	r3, #40	; 0x28
 800be6c:	2102      	movs	r1, #2
 800be6e:	4618      	mov	r0, r3
 800be70:	f001 fd0a 	bl	800d888 <RCCEx_PLL3_Config>
 800be74:	4603      	mov	r3, r0
 800be76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800be7a:	e004      	b.n	800be86 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be7c:	2301      	movs	r3, #1
 800be7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800be82:	e000      	b.n	800be86 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800be84:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d10b      	bne.n	800bea6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800be8e:	4b4b      	ldr	r3, [pc, #300]	; (800bfbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be92:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800be96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800be9e:	4a47      	ldr	r2, [pc, #284]	; (800bfbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bea0:	430b      	orrs	r3, r1
 800bea2:	6593      	str	r3, [r2, #88]	; 0x58
 800bea4:	e003      	b.n	800beae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bea6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800beaa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800beae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800beba:	67bb      	str	r3, [r7, #120]	; 0x78
 800bebc:	2300      	movs	r3, #0
 800bebe:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bec0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800bec4:	460b      	mov	r3, r1
 800bec6:	4313      	orrs	r3, r2
 800bec8:	d03b      	beq.n	800bf42 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800beca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bed2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bed6:	d01f      	beq.n	800bf18 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800bed8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bedc:	d818      	bhi.n	800bf10 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800bede:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bee2:	d003      	beq.n	800beec <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800bee4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bee8:	d007      	beq.n	800befa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800beea:	e011      	b.n	800bf10 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800beec:	4b33      	ldr	r3, [pc, #204]	; (800bfbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800beee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bef0:	4a32      	ldr	r2, [pc, #200]	; (800bfbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bef2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bef6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800bef8:	e00f      	b.n	800bf1a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800befa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800befe:	3328      	adds	r3, #40	; 0x28
 800bf00:	2101      	movs	r1, #1
 800bf02:	4618      	mov	r0, r3
 800bf04:	f001 fcc0 	bl	800d888 <RCCEx_PLL3_Config>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800bf0e:	e004      	b.n	800bf1a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf10:	2301      	movs	r3, #1
 800bf12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bf16:	e000      	b.n	800bf1a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800bf18:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d10b      	bne.n	800bf3a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bf22:	4b26      	ldr	r3, [pc, #152]	; (800bfbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf26:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800bf2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf32:	4a22      	ldr	r2, [pc, #136]	; (800bfbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf34:	430b      	orrs	r3, r1
 800bf36:	6553      	str	r3, [r2, #84]	; 0x54
 800bf38:	e003      	b.n	800bf42 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bf42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf4a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800bf4e:	673b      	str	r3, [r7, #112]	; 0x70
 800bf50:	2300      	movs	r3, #0
 800bf52:	677b      	str	r3, [r7, #116]	; 0x74
 800bf54:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800bf58:	460b      	mov	r3, r1
 800bf5a:	4313      	orrs	r3, r2
 800bf5c:	d034      	beq.n	800bfc8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800bf5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d003      	beq.n	800bf70 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800bf68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf6c:	d007      	beq.n	800bf7e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800bf6e:	e011      	b.n	800bf94 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf70:	4b12      	ldr	r3, [pc, #72]	; (800bfbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf74:	4a11      	ldr	r2, [pc, #68]	; (800bfbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bf7c:	e00e      	b.n	800bf9c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bf7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf82:	3308      	adds	r3, #8
 800bf84:	2102      	movs	r1, #2
 800bf86:	4618      	mov	r0, r3
 800bf88:	f001 fbcc 	bl	800d724 <RCCEx_PLL2_Config>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bf92:	e003      	b.n	800bf9c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800bf94:	2301      	movs	r3, #1
 800bf96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bf9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d10d      	bne.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bfa4:	4b05      	ldr	r3, [pc, #20]	; (800bfbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bfa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfa8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bfac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfb2:	4a02      	ldr	r2, [pc, #8]	; (800bfbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bfb4:	430b      	orrs	r3, r1
 800bfb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bfb8:	e006      	b.n	800bfc8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800bfba:	bf00      	nop
 800bfbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bfc4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bfc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800bfd4:	66bb      	str	r3, [r7, #104]	; 0x68
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bfda:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800bfde:	460b      	mov	r3, r1
 800bfe0:	4313      	orrs	r3, r2
 800bfe2:	d00c      	beq.n	800bffe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bfe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfe8:	3328      	adds	r3, #40	; 0x28
 800bfea:	2102      	movs	r1, #2
 800bfec:	4618      	mov	r0, r3
 800bfee:	f001 fc4b 	bl	800d888 <RCCEx_PLL3_Config>
 800bff2:	4603      	mov	r3, r0
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d002      	beq.n	800bffe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800bff8:	2301      	movs	r3, #1
 800bffa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c006:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c00a:	663b      	str	r3, [r7, #96]	; 0x60
 800c00c:	2300      	movs	r3, #0
 800c00e:	667b      	str	r3, [r7, #100]	; 0x64
 800c010:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c014:	460b      	mov	r3, r1
 800c016:	4313      	orrs	r3, r2
 800c018:	d038      	beq.n	800c08c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c01a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c01e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c022:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c026:	d018      	beq.n	800c05a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800c028:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c02c:	d811      	bhi.n	800c052 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c02e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c032:	d014      	beq.n	800c05e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800c034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c038:	d80b      	bhi.n	800c052 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d011      	beq.n	800c062 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800c03e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c042:	d106      	bne.n	800c052 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c044:	4bc3      	ldr	r3, [pc, #780]	; (800c354 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c048:	4ac2      	ldr	r2, [pc, #776]	; (800c354 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c04a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c04e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c050:	e008      	b.n	800c064 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c052:	2301      	movs	r3, #1
 800c054:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c058:	e004      	b.n	800c064 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c05a:	bf00      	nop
 800c05c:	e002      	b.n	800c064 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c05e:	bf00      	nop
 800c060:	e000      	b.n	800c064 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c062:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c064:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d10b      	bne.n	800c084 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c06c:	4bb9      	ldr	r3, [pc, #740]	; (800c354 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c06e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c070:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c078:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c07c:	4ab5      	ldr	r2, [pc, #724]	; (800c354 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c07e:	430b      	orrs	r3, r1
 800c080:	6553      	str	r3, [r2, #84]	; 0x54
 800c082:	e003      	b.n	800c08c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c084:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c088:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c08c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c094:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c098:	65bb      	str	r3, [r7, #88]	; 0x58
 800c09a:	2300      	movs	r3, #0
 800c09c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c09e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c0a2:	460b      	mov	r3, r1
 800c0a4:	4313      	orrs	r3, r2
 800c0a6:	d009      	beq.n	800c0bc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c0a8:	4baa      	ldr	r3, [pc, #680]	; (800c354 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0ac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c0b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0b6:	4aa7      	ldr	r2, [pc, #668]	; (800c354 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0b8:	430b      	orrs	r3, r1
 800c0ba:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c0bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800c0c8:	653b      	str	r3, [r7, #80]	; 0x50
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	657b      	str	r3, [r7, #84]	; 0x54
 800c0ce:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c0d2:	460b      	mov	r3, r1
 800c0d4:	4313      	orrs	r3, r2
 800c0d6:	d00a      	beq.n	800c0ee <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c0d8:	4b9e      	ldr	r3, [pc, #632]	; (800c354 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0da:	691b      	ldr	r3, [r3, #16]
 800c0dc:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800c0e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c0e8:	4a9a      	ldr	r2, [pc, #616]	; (800c354 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0ea:	430b      	orrs	r3, r1
 800c0ec:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c0ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c0fa:	64bb      	str	r3, [r7, #72]	; 0x48
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c100:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c104:	460b      	mov	r3, r1
 800c106:	4313      	orrs	r3, r2
 800c108:	d009      	beq.n	800c11e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c10a:	4b92      	ldr	r3, [pc, #584]	; (800c354 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c10c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c10e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c112:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c118:	4a8e      	ldr	r2, [pc, #568]	; (800c354 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c11a:	430b      	orrs	r3, r1
 800c11c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c11e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c126:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c12a:	643b      	str	r3, [r7, #64]	; 0x40
 800c12c:	2300      	movs	r3, #0
 800c12e:	647b      	str	r3, [r7, #68]	; 0x44
 800c130:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c134:	460b      	mov	r3, r1
 800c136:	4313      	orrs	r3, r2
 800c138:	d00e      	beq.n	800c158 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c13a:	4b86      	ldr	r3, [pc, #536]	; (800c354 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c13c:	691b      	ldr	r3, [r3, #16]
 800c13e:	4a85      	ldr	r2, [pc, #532]	; (800c354 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c140:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c144:	6113      	str	r3, [r2, #16]
 800c146:	4b83      	ldr	r3, [pc, #524]	; (800c354 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c148:	6919      	ldr	r1, [r3, #16]
 800c14a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c14e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c152:	4a80      	ldr	r2, [pc, #512]	; (800c354 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c154:	430b      	orrs	r3, r1
 800c156:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c158:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c160:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c164:	63bb      	str	r3, [r7, #56]	; 0x38
 800c166:	2300      	movs	r3, #0
 800c168:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c16a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c16e:	460b      	mov	r3, r1
 800c170:	4313      	orrs	r3, r2
 800c172:	d009      	beq.n	800c188 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c174:	4b77      	ldr	r3, [pc, #476]	; (800c354 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c178:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c17c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c182:	4a74      	ldr	r2, [pc, #464]	; (800c354 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c184:	430b      	orrs	r3, r1
 800c186:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c188:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c190:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c194:	633b      	str	r3, [r7, #48]	; 0x30
 800c196:	2300      	movs	r3, #0
 800c198:	637b      	str	r3, [r7, #52]	; 0x34
 800c19a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c19e:	460b      	mov	r3, r1
 800c1a0:	4313      	orrs	r3, r2
 800c1a2:	d00a      	beq.n	800c1ba <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c1a4:	4b6b      	ldr	r3, [pc, #428]	; (800c354 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1a8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c1ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1b4:	4a67      	ldr	r2, [pc, #412]	; (800c354 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1b6:	430b      	orrs	r3, r1
 800c1b8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c1ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c2:	2100      	movs	r1, #0
 800c1c4:	62b9      	str	r1, [r7, #40]	; 0x28
 800c1c6:	f003 0301 	and.w	r3, r3, #1
 800c1ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c1cc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c1d0:	460b      	mov	r3, r1
 800c1d2:	4313      	orrs	r3, r2
 800c1d4:	d011      	beq.n	800c1fa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c1d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1da:	3308      	adds	r3, #8
 800c1dc:	2100      	movs	r1, #0
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f001 faa0 	bl	800d724 <RCCEx_PLL2_Config>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c1ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d003      	beq.n	800c1fa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c1fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c202:	2100      	movs	r1, #0
 800c204:	6239      	str	r1, [r7, #32]
 800c206:	f003 0302 	and.w	r3, r3, #2
 800c20a:	627b      	str	r3, [r7, #36]	; 0x24
 800c20c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c210:	460b      	mov	r3, r1
 800c212:	4313      	orrs	r3, r2
 800c214:	d011      	beq.n	800c23a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c216:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c21a:	3308      	adds	r3, #8
 800c21c:	2101      	movs	r1, #1
 800c21e:	4618      	mov	r0, r3
 800c220:	f001 fa80 	bl	800d724 <RCCEx_PLL2_Config>
 800c224:	4603      	mov	r3, r0
 800c226:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c22a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d003      	beq.n	800c23a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c232:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c236:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c23a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c242:	2100      	movs	r1, #0
 800c244:	61b9      	str	r1, [r7, #24]
 800c246:	f003 0304 	and.w	r3, r3, #4
 800c24a:	61fb      	str	r3, [r7, #28]
 800c24c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c250:	460b      	mov	r3, r1
 800c252:	4313      	orrs	r3, r2
 800c254:	d011      	beq.n	800c27a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c256:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c25a:	3308      	adds	r3, #8
 800c25c:	2102      	movs	r1, #2
 800c25e:	4618      	mov	r0, r3
 800c260:	f001 fa60 	bl	800d724 <RCCEx_PLL2_Config>
 800c264:	4603      	mov	r3, r0
 800c266:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c26a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d003      	beq.n	800c27a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c272:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c276:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c27a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c282:	2100      	movs	r1, #0
 800c284:	6139      	str	r1, [r7, #16]
 800c286:	f003 0308 	and.w	r3, r3, #8
 800c28a:	617b      	str	r3, [r7, #20]
 800c28c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c290:	460b      	mov	r3, r1
 800c292:	4313      	orrs	r3, r2
 800c294:	d011      	beq.n	800c2ba <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c296:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c29a:	3328      	adds	r3, #40	; 0x28
 800c29c:	2100      	movs	r1, #0
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f001 faf2 	bl	800d888 <RCCEx_PLL3_Config>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800c2aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d003      	beq.n	800c2ba <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c2ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c2:	2100      	movs	r1, #0
 800c2c4:	60b9      	str	r1, [r7, #8]
 800c2c6:	f003 0310 	and.w	r3, r3, #16
 800c2ca:	60fb      	str	r3, [r7, #12]
 800c2cc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c2d0:	460b      	mov	r3, r1
 800c2d2:	4313      	orrs	r3, r2
 800c2d4:	d011      	beq.n	800c2fa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c2d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2da:	3328      	adds	r3, #40	; 0x28
 800c2dc:	2101      	movs	r1, #1
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f001 fad2 	bl	800d888 <RCCEx_PLL3_Config>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c2ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d003      	beq.n	800c2fa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c2fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c302:	2100      	movs	r1, #0
 800c304:	6039      	str	r1, [r7, #0]
 800c306:	f003 0320 	and.w	r3, r3, #32
 800c30a:	607b      	str	r3, [r7, #4]
 800c30c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c310:	460b      	mov	r3, r1
 800c312:	4313      	orrs	r3, r2
 800c314:	d011      	beq.n	800c33a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c31a:	3328      	adds	r3, #40	; 0x28
 800c31c:	2102      	movs	r1, #2
 800c31e:	4618      	mov	r0, r3
 800c320:	f001 fab2 	bl	800d888 <RCCEx_PLL3_Config>
 800c324:	4603      	mov	r3, r0
 800c326:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c32a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d003      	beq.n	800c33a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c332:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c336:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c33a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d101      	bne.n	800c346 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c342:	2300      	movs	r3, #0
 800c344:	e000      	b.n	800c348 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c346:	2301      	movs	r3, #1
}
 800c348:	4618      	mov	r0, r3
 800c34a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c34e:	46bd      	mov	sp, r7
 800c350:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c354:	58024400 	.word	0x58024400

0800c358 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b090      	sub	sp, #64	; 0x40
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c362:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c366:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c36a:	430b      	orrs	r3, r1
 800c36c:	f040 8094 	bne.w	800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c370:	4b9e      	ldr	r3, [pc, #632]	; (800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c374:	f003 0307 	and.w	r3, r3, #7
 800c378:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c37c:	2b04      	cmp	r3, #4
 800c37e:	f200 8087 	bhi.w	800c490 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c382:	a201      	add	r2, pc, #4	; (adr r2, 800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c388:	0800c39d 	.word	0x0800c39d
 800c38c:	0800c3c5 	.word	0x0800c3c5
 800c390:	0800c3ed 	.word	0x0800c3ed
 800c394:	0800c489 	.word	0x0800c489
 800c398:	0800c415 	.word	0x0800c415
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c39c:	4b93      	ldr	r3, [pc, #588]	; (800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c3a8:	d108      	bne.n	800c3bc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c3aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f001 f810 	bl	800d3d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3b8:	f000 bd45 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3bc:	2300      	movs	r3, #0
 800c3be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3c0:	f000 bd41 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c3c4:	4b89      	ldr	r3, [pc, #548]	; (800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c3d0:	d108      	bne.n	800c3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3d2:	f107 0318 	add.w	r3, r7, #24
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f000 fd54 	bl	800ce84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c3dc:	69bb      	ldr	r3, [r7, #24]
 800c3de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3e0:	f000 bd31 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3e8:	f000 bd2d 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c3ec:	4b7f      	ldr	r3, [pc, #508]	; (800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c3f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3f8:	d108      	bne.n	800c40c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3fa:	f107 030c 	add.w	r3, r7, #12
 800c3fe:	4618      	mov	r0, r3
 800c400:	f000 fe94 	bl	800d12c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c408:	f000 bd1d 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c40c:	2300      	movs	r3, #0
 800c40e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c410:	f000 bd19 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c414:	4b75      	ldr	r3, [pc, #468]	; (800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c418:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c41c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c41e:	4b73      	ldr	r3, [pc, #460]	; (800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f003 0304 	and.w	r3, r3, #4
 800c426:	2b04      	cmp	r3, #4
 800c428:	d10c      	bne.n	800c444 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c42a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d109      	bne.n	800c444 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c430:	4b6e      	ldr	r3, [pc, #440]	; (800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	08db      	lsrs	r3, r3, #3
 800c436:	f003 0303 	and.w	r3, r3, #3
 800c43a:	4a6d      	ldr	r2, [pc, #436]	; (800c5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c43c:	fa22 f303 	lsr.w	r3, r2, r3
 800c440:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c442:	e01f      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c444:	4b69      	ldr	r3, [pc, #420]	; (800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c44c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c450:	d106      	bne.n	800c460 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c454:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c458:	d102      	bne.n	800c460 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c45a:	4b66      	ldr	r3, [pc, #408]	; (800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c45c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c45e:	e011      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c460:	4b62      	ldr	r3, [pc, #392]	; (800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c468:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c46c:	d106      	bne.n	800c47c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c46e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c474:	d102      	bne.n	800c47c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c476:	4b60      	ldr	r3, [pc, #384]	; (800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c478:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c47a:	e003      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c47c:	2300      	movs	r3, #0
 800c47e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c480:	f000 bce1 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c484:	f000 bcdf 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c488:	4b5c      	ldr	r3, [pc, #368]	; (800c5fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c48a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c48c:	f000 bcdb 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c490:	2300      	movs	r3, #0
 800c492:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c494:	f000 bcd7 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c498:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c49c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c4a0:	430b      	orrs	r3, r1
 800c4a2:	f040 80ad 	bne.w	800c600 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c4a6:	4b51      	ldr	r3, [pc, #324]	; (800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4aa:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c4ae:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4b6:	d056      	beq.n	800c566 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4be:	f200 8090 	bhi.w	800c5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c4:	2bc0      	cmp	r3, #192	; 0xc0
 800c4c6:	f000 8088 	beq.w	800c5da <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4cc:	2bc0      	cmp	r3, #192	; 0xc0
 800c4ce:	f200 8088 	bhi.w	800c5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d4:	2b80      	cmp	r3, #128	; 0x80
 800c4d6:	d032      	beq.n	800c53e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4da:	2b80      	cmp	r3, #128	; 0x80
 800c4dc:	f200 8081 	bhi.w	800c5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d003      	beq.n	800c4ee <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e8:	2b40      	cmp	r3, #64	; 0x40
 800c4ea:	d014      	beq.n	800c516 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c4ec:	e079      	b.n	800c5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c4ee:	4b3f      	ldr	r3, [pc, #252]	; (800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c4fa:	d108      	bne.n	800c50e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c4fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c500:	4618      	mov	r0, r3
 800c502:	f000 ff67 	bl	800d3d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c508:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c50a:	f000 bc9c 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c50e:	2300      	movs	r3, #0
 800c510:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c512:	f000 bc98 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c516:	4b35      	ldr	r3, [pc, #212]	; (800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c51e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c522:	d108      	bne.n	800c536 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c524:	f107 0318 	add.w	r3, r7, #24
 800c528:	4618      	mov	r0, r3
 800c52a:	f000 fcab 	bl	800ce84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c52e:	69bb      	ldr	r3, [r7, #24]
 800c530:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c532:	f000 bc88 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c536:	2300      	movs	r3, #0
 800c538:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c53a:	f000 bc84 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c53e:	4b2b      	ldr	r3, [pc, #172]	; (800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c546:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c54a:	d108      	bne.n	800c55e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c54c:	f107 030c 	add.w	r3, r7, #12
 800c550:	4618      	mov	r0, r3
 800c552:	f000 fdeb 	bl	800d12c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c55a:	f000 bc74 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c55e:	2300      	movs	r3, #0
 800c560:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c562:	f000 bc70 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c566:	4b21      	ldr	r3, [pc, #132]	; (800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c56a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c56e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c570:	4b1e      	ldr	r3, [pc, #120]	; (800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f003 0304 	and.w	r3, r3, #4
 800c578:	2b04      	cmp	r3, #4
 800c57a:	d10c      	bne.n	800c596 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c57c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d109      	bne.n	800c596 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c582:	4b1a      	ldr	r3, [pc, #104]	; (800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	08db      	lsrs	r3, r3, #3
 800c588:	f003 0303 	and.w	r3, r3, #3
 800c58c:	4a18      	ldr	r2, [pc, #96]	; (800c5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c58e:	fa22 f303 	lsr.w	r3, r2, r3
 800c592:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c594:	e01f      	b.n	800c5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c596:	4b15      	ldr	r3, [pc, #84]	; (800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c59e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5a2:	d106      	bne.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c5a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c5aa:	d102      	bne.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c5ac:	4b11      	ldr	r3, [pc, #68]	; (800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c5ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5b0:	e011      	b.n	800c5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c5b2:	4b0e      	ldr	r3, [pc, #56]	; (800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5be:	d106      	bne.n	800c5ce <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c5c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5c6:	d102      	bne.n	800c5ce <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c5c8:	4b0b      	ldr	r3, [pc, #44]	; (800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c5ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5cc:	e003      	b.n	800c5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c5d2:	f000 bc38 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c5d6:	f000 bc36 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c5da:	4b08      	ldr	r3, [pc, #32]	; (800c5fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c5dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5de:	f000 bc32 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5e6:	f000 bc2e 	b.w	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c5ea:	bf00      	nop
 800c5ec:	58024400 	.word	0x58024400
 800c5f0:	03d09000 	.word	0x03d09000
 800c5f4:	003d0900 	.word	0x003d0900
 800c5f8:	007f1b10 	.word	0x007f1b10
 800c5fc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c600:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c604:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c608:	430b      	orrs	r3, r1
 800c60a:	f040 809c 	bne.w	800c746 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c60e:	4b9e      	ldr	r3, [pc, #632]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c612:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c616:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c61a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c61e:	d054      	beq.n	800c6ca <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c622:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c626:	f200 808b 	bhi.w	800c740 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c62c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c630:	f000 8083 	beq.w	800c73a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c636:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c63a:	f200 8081 	bhi.w	800c740 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c640:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c644:	d02f      	beq.n	800c6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c648:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c64c:	d878      	bhi.n	800c740 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c650:	2b00      	cmp	r3, #0
 800c652:	d004      	beq.n	800c65e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c656:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c65a:	d012      	beq.n	800c682 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c65c:	e070      	b.n	800c740 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c65e:	4b8a      	ldr	r3, [pc, #552]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c666:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c66a:	d107      	bne.n	800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c66c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c670:	4618      	mov	r0, r3
 800c672:	f000 feaf 	bl	800d3d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c678:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c67a:	e3e4      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c67c:	2300      	movs	r3, #0
 800c67e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c680:	e3e1      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c682:	4b81      	ldr	r3, [pc, #516]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c68a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c68e:	d107      	bne.n	800c6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c690:	f107 0318 	add.w	r3, r7, #24
 800c694:	4618      	mov	r0, r3
 800c696:	f000 fbf5 	bl	800ce84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c69a:	69bb      	ldr	r3, [r7, #24]
 800c69c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c69e:	e3d2      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6a4:	e3cf      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c6a6:	4b78      	ldr	r3, [pc, #480]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6b2:	d107      	bne.n	800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6b4:	f107 030c 	add.w	r3, r7, #12
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f000 fd37 	bl	800d12c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6c2:	e3c0      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6c8:	e3bd      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c6ca:	4b6f      	ldr	r3, [pc, #444]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c6d2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c6d4:	4b6c      	ldr	r3, [pc, #432]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f003 0304 	and.w	r3, r3, #4
 800c6dc:	2b04      	cmp	r3, #4
 800c6de:	d10c      	bne.n	800c6fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c6e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d109      	bne.n	800c6fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6e6:	4b68      	ldr	r3, [pc, #416]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	08db      	lsrs	r3, r3, #3
 800c6ec:	f003 0303 	and.w	r3, r3, #3
 800c6f0:	4a66      	ldr	r2, [pc, #408]	; (800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c6f2:	fa22 f303 	lsr.w	r3, r2, r3
 800c6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6f8:	e01e      	b.n	800c738 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c6fa:	4b63      	ldr	r3, [pc, #396]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c706:	d106      	bne.n	800c716 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c70a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c70e:	d102      	bne.n	800c716 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c710:	4b5f      	ldr	r3, [pc, #380]	; (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c712:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c714:	e010      	b.n	800c738 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c716:	4b5c      	ldr	r3, [pc, #368]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c71e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c722:	d106      	bne.n	800c732 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c726:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c72a:	d102      	bne.n	800c732 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c72c:	4b59      	ldr	r3, [pc, #356]	; (800c894 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c72e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c730:	e002      	b.n	800c738 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c732:	2300      	movs	r3, #0
 800c734:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c736:	e386      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c738:	e385      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c73a:	4b57      	ldr	r3, [pc, #348]	; (800c898 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c73c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c73e:	e382      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c740:	2300      	movs	r3, #0
 800c742:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c744:	e37f      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c746:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c74a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c74e:	430b      	orrs	r3, r1
 800c750:	f040 80a7 	bne.w	800c8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c754:	4b4c      	ldr	r3, [pc, #304]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c758:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c75c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c760:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c764:	d055      	beq.n	800c812 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c768:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c76c:	f200 8096 	bhi.w	800c89c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c772:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c776:	f000 8084 	beq.w	800c882 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c77c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c780:	f200 808c 	bhi.w	800c89c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c786:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c78a:	d030      	beq.n	800c7ee <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c78e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c792:	f200 8083 	bhi.w	800c89c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d004      	beq.n	800c7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c79e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c7a2:	d012      	beq.n	800c7ca <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c7a4:	e07a      	b.n	800c89c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c7a6:	4b38      	ldr	r3, [pc, #224]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c7b2:	d107      	bne.n	800c7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c7b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f000 fe0b 	bl	800d3d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7c2:	e340      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7c8:	e33d      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c7ca:	4b2f      	ldr	r3, [pc, #188]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c7d6:	d107      	bne.n	800c7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7d8:	f107 0318 	add.w	r3, r7, #24
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f000 fb51 	bl	800ce84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c7e2:	69bb      	ldr	r3, [r7, #24]
 800c7e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7e6:	e32e      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7ec:	e32b      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c7ee:	4b26      	ldr	r3, [pc, #152]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c7f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7fa:	d107      	bne.n	800c80c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c7fc:	f107 030c 	add.w	r3, r7, #12
 800c800:	4618      	mov	r0, r3
 800c802:	f000 fc93 	bl	800d12c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c80a:	e31c      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c80c:	2300      	movs	r3, #0
 800c80e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c810:	e319      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c812:	4b1d      	ldr	r3, [pc, #116]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c816:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c81a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c81c:	4b1a      	ldr	r3, [pc, #104]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f003 0304 	and.w	r3, r3, #4
 800c824:	2b04      	cmp	r3, #4
 800c826:	d10c      	bne.n	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d109      	bne.n	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c82e:	4b16      	ldr	r3, [pc, #88]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	08db      	lsrs	r3, r3, #3
 800c834:	f003 0303 	and.w	r3, r3, #3
 800c838:	4a14      	ldr	r2, [pc, #80]	; (800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c83a:	fa22 f303 	lsr.w	r3, r2, r3
 800c83e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c840:	e01e      	b.n	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c842:	4b11      	ldr	r3, [pc, #68]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c84a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c84e:	d106      	bne.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c852:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c856:	d102      	bne.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c858:	4b0d      	ldr	r3, [pc, #52]	; (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c85a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c85c:	e010      	b.n	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c85e:	4b0a      	ldr	r3, [pc, #40]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c866:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c86a:	d106      	bne.n	800c87a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c86c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c86e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c872:	d102      	bne.n	800c87a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c874:	4b07      	ldr	r3, [pc, #28]	; (800c894 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c876:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c878:	e002      	b.n	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c87a:	2300      	movs	r3, #0
 800c87c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c87e:	e2e2      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c880:	e2e1      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c882:	4b05      	ldr	r3, [pc, #20]	; (800c898 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c884:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c886:	e2de      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c888:	58024400 	.word	0x58024400
 800c88c:	03d09000 	.word	0x03d09000
 800c890:	003d0900 	.word	0x003d0900
 800c894:	007f1b10 	.word	0x007f1b10
 800c898:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c89c:	2300      	movs	r3, #0
 800c89e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8a0:	e2d1      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c8a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8a6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c8aa:	430b      	orrs	r3, r1
 800c8ac:	f040 809c 	bne.w	800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c8b0:	4b93      	ldr	r3, [pc, #588]	; (800cb00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c8b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8b4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c8b8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c8ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c8c0:	d054      	beq.n	800c96c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c8c8:	f200 808b 	bhi.w	800c9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c8d2:	f000 8083 	beq.w	800c9dc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c8dc:	f200 8081 	bhi.w	800c9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c8e6:	d02f      	beq.n	800c948 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c8ee:	d878      	bhi.n	800c9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d004      	beq.n	800c900 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c8f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c8fc:	d012      	beq.n	800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c8fe:	e070      	b.n	800c9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c900:	4b7f      	ldr	r3, [pc, #508]	; (800cb00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c908:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c90c:	d107      	bne.n	800c91e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c90e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c912:	4618      	mov	r0, r3
 800c914:	f000 fd5e 	bl	800d3d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c91a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c91c:	e293      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c91e:	2300      	movs	r3, #0
 800c920:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c922:	e290      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c924:	4b76      	ldr	r3, [pc, #472]	; (800cb00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c92c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c930:	d107      	bne.n	800c942 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c932:	f107 0318 	add.w	r3, r7, #24
 800c936:	4618      	mov	r0, r3
 800c938:	f000 faa4 	bl	800ce84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c93c:	69bb      	ldr	r3, [r7, #24]
 800c93e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c940:	e281      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c942:	2300      	movs	r3, #0
 800c944:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c946:	e27e      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c948:	4b6d      	ldr	r3, [pc, #436]	; (800cb00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c950:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c954:	d107      	bne.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c956:	f107 030c 	add.w	r3, r7, #12
 800c95a:	4618      	mov	r0, r3
 800c95c:	f000 fbe6 	bl	800d12c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c964:	e26f      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c966:	2300      	movs	r3, #0
 800c968:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c96a:	e26c      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c96c:	4b64      	ldr	r3, [pc, #400]	; (800cb00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c96e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c970:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c974:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c976:	4b62      	ldr	r3, [pc, #392]	; (800cb00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	f003 0304 	and.w	r3, r3, #4
 800c97e:	2b04      	cmp	r3, #4
 800c980:	d10c      	bne.n	800c99c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c984:	2b00      	cmp	r3, #0
 800c986:	d109      	bne.n	800c99c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c988:	4b5d      	ldr	r3, [pc, #372]	; (800cb00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	08db      	lsrs	r3, r3, #3
 800c98e:	f003 0303 	and.w	r3, r3, #3
 800c992:	4a5c      	ldr	r2, [pc, #368]	; (800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c994:	fa22 f303 	lsr.w	r3, r2, r3
 800c998:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c99a:	e01e      	b.n	800c9da <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c99c:	4b58      	ldr	r3, [pc, #352]	; (800cb00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9a8:	d106      	bne.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c9aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c9b0:	d102      	bne.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c9b2:	4b55      	ldr	r3, [pc, #340]	; (800cb08 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c9b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9b6:	e010      	b.n	800c9da <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c9b8:	4b51      	ldr	r3, [pc, #324]	; (800cb00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9c4:	d106      	bne.n	800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c9c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9cc:	d102      	bne.n	800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c9ce:	4b4f      	ldr	r3, [pc, #316]	; (800cb0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c9d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9d2:	e002      	b.n	800c9da <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c9d8:	e235      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c9da:	e234      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c9dc:	4b4c      	ldr	r3, [pc, #304]	; (800cb10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c9de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9e0:	e231      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9e6:	e22e      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c9e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9ec:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c9f0:	430b      	orrs	r3, r1
 800c9f2:	f040 808f 	bne.w	800cb14 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c9f6:	4b42      	ldr	r3, [pc, #264]	; (800cb00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9fa:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c9fe:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800ca00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ca06:	d06b      	beq.n	800cae0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800ca08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ca0e:	d874      	bhi.n	800cafa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ca10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ca16:	d056      	beq.n	800cac6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800ca18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ca1e:	d86c      	bhi.n	800cafa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ca20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca22:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ca26:	d03b      	beq.n	800caa0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800ca28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ca2e:	d864      	bhi.n	800cafa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ca30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca36:	d021      	beq.n	800ca7c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800ca38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca3e:	d85c      	bhi.n	800cafa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ca40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d004      	beq.n	800ca50 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800ca46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca4c:	d004      	beq.n	800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800ca4e:	e054      	b.n	800cafa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800ca50:	f7fe fa30 	bl	800aeb4 <HAL_RCC_GetPCLK1Freq>
 800ca54:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ca56:	e1f6      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca58:	4b29      	ldr	r3, [pc, #164]	; (800cb00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca64:	d107      	bne.n	800ca76 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca66:	f107 0318 	add.w	r3, r7, #24
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f000 fa0a 	bl	800ce84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ca70:	69fb      	ldr	r3, [r7, #28]
 800ca72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca74:	e1e7      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca76:	2300      	movs	r3, #0
 800ca78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca7a:	e1e4      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ca7c:	4b20      	ldr	r3, [pc, #128]	; (800cb00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca88:	d107      	bne.n	800ca9a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca8a:	f107 030c 	add.w	r3, r7, #12
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f000 fb4c 	bl	800d12c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ca94:	693b      	ldr	r3, [r7, #16]
 800ca96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca98:	e1d5      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca9e:	e1d2      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800caa0:	4b17      	ldr	r3, [pc, #92]	; (800cb00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	f003 0304 	and.w	r3, r3, #4
 800caa8:	2b04      	cmp	r3, #4
 800caaa:	d109      	bne.n	800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800caac:	4b14      	ldr	r3, [pc, #80]	; (800cb00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	08db      	lsrs	r3, r3, #3
 800cab2:	f003 0303 	and.w	r3, r3, #3
 800cab6:	4a13      	ldr	r2, [pc, #76]	; (800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800cab8:	fa22 f303 	lsr.w	r3, r2, r3
 800cabc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cabe:	e1c2      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cac0:	2300      	movs	r3, #0
 800cac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cac4:	e1bf      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cac6:	4b0e      	ldr	r3, [pc, #56]	; (800cb00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cad2:	d102      	bne.n	800cada <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800cad4:	4b0c      	ldr	r3, [pc, #48]	; (800cb08 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cad6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cad8:	e1b5      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cada:	2300      	movs	r3, #0
 800cadc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cade:	e1b2      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cae0:	4b07      	ldr	r3, [pc, #28]	; (800cb00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cae8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800caec:	d102      	bne.n	800caf4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800caee:	4b07      	ldr	r3, [pc, #28]	; (800cb0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800caf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800caf2:	e1a8      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800caf4:	2300      	movs	r3, #0
 800caf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caf8:	e1a5      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cafa:	2300      	movs	r3, #0
 800cafc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cafe:	e1a2      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cb00:	58024400 	.word	0x58024400
 800cb04:	03d09000 	.word	0x03d09000
 800cb08:	003d0900 	.word	0x003d0900
 800cb0c:	007f1b10 	.word	0x007f1b10
 800cb10:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cb14:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb18:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800cb1c:	430b      	orrs	r3, r1
 800cb1e:	d173      	bne.n	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cb20:	4b9c      	ldr	r3, [pc, #624]	; (800cd94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cb28:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cb2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb30:	d02f      	beq.n	800cb92 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800cb32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb38:	d863      	bhi.n	800cc02 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800cb3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d004      	beq.n	800cb4a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800cb40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb46:	d012      	beq.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800cb48:	e05b      	b.n	800cc02 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cb4a:	4b92      	ldr	r3, [pc, #584]	; (800cd94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb56:	d107      	bne.n	800cb68 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb58:	f107 0318 	add.w	r3, r7, #24
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f000 f991 	bl	800ce84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cb62:	69bb      	ldr	r3, [r7, #24]
 800cb64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb66:	e16e      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb68:	2300      	movs	r3, #0
 800cb6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb6c:	e16b      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cb6e:	4b89      	ldr	r3, [pc, #548]	; (800cd94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb7a:	d107      	bne.n	800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb7c:	f107 030c 	add.w	r3, r7, #12
 800cb80:	4618      	mov	r0, r3
 800cb82:	f000 fad3 	bl	800d12c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800cb86:	697b      	ldr	r3, [r7, #20]
 800cb88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb8a:	e15c      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb90:	e159      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cb92:	4b80      	ldr	r3, [pc, #512]	; (800cd94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cb9a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cb9c:	4b7d      	ldr	r3, [pc, #500]	; (800cd94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	f003 0304 	and.w	r3, r3, #4
 800cba4:	2b04      	cmp	r3, #4
 800cba6:	d10c      	bne.n	800cbc2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800cba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d109      	bne.n	800cbc2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cbae:	4b79      	ldr	r3, [pc, #484]	; (800cd94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	08db      	lsrs	r3, r3, #3
 800cbb4:	f003 0303 	and.w	r3, r3, #3
 800cbb8:	4a77      	ldr	r2, [pc, #476]	; (800cd98 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cbba:	fa22 f303 	lsr.w	r3, r2, r3
 800cbbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbc0:	e01e      	b.n	800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cbc2:	4b74      	ldr	r3, [pc, #464]	; (800cd94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbce:	d106      	bne.n	800cbde <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800cbd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cbd6:	d102      	bne.n	800cbde <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cbd8:	4b70      	ldr	r3, [pc, #448]	; (800cd9c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cbda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbdc:	e010      	b.n	800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cbde:	4b6d      	ldr	r3, [pc, #436]	; (800cd94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbe6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbea:	d106      	bne.n	800cbfa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800cbec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbf2:	d102      	bne.n	800cbfa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cbf4:	4b6a      	ldr	r3, [pc, #424]	; (800cda0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cbf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbf8:	e002      	b.n	800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cbfe:	e122      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cc00:	e121      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cc02:	2300      	movs	r3, #0
 800cc04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc06:	e11e      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cc08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc0c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800cc10:	430b      	orrs	r3, r1
 800cc12:	d133      	bne.n	800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cc14:	4b5f      	ldr	r3, [pc, #380]	; (800cd94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cc1c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cc1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d004      	beq.n	800cc2e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800cc24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc2a:	d012      	beq.n	800cc52 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800cc2c:	e023      	b.n	800cc76 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cc2e:	4b59      	ldr	r3, [pc, #356]	; (800cd94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc3a:	d107      	bne.n	800cc4c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cc3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cc40:	4618      	mov	r0, r3
 800cc42:	f000 fbc7 	bl	800d3d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cc46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc4a:	e0fc      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc50:	e0f9      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cc52:	4b50      	ldr	r3, [pc, #320]	; (800cd94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cc5e:	d107      	bne.n	800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc60:	f107 0318 	add.w	r3, r7, #24
 800cc64:	4618      	mov	r0, r3
 800cc66:	f000 f90d 	bl	800ce84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cc6a:	6a3b      	ldr	r3, [r7, #32]
 800cc6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc6e:	e0ea      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc70:	2300      	movs	r3, #0
 800cc72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc74:	e0e7      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cc76:	2300      	movs	r3, #0
 800cc78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc7a:	e0e4      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cc7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc80:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800cc84:	430b      	orrs	r3, r1
 800cc86:	f040 808d 	bne.w	800cda4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800cc8a:	4b42      	ldr	r3, [pc, #264]	; (800cd94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc8e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800cc92:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cc94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cc9a:	d06b      	beq.n	800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800cc9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cca2:	d874      	bhi.n	800cd8e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ccaa:	d056      	beq.n	800cd5a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800ccac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ccb2:	d86c      	bhi.n	800cd8e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ccb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccb6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ccba:	d03b      	beq.n	800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800ccbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccbe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ccc2:	d864      	bhi.n	800cd8e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ccc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccca:	d021      	beq.n	800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800cccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccd2:	d85c      	bhi.n	800cd8e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ccd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d004      	beq.n	800cce4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800ccda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cce0:	d004      	beq.n	800ccec <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800cce2:	e054      	b.n	800cd8e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800cce4:	f000 f8b8 	bl	800ce58 <HAL_RCCEx_GetD3PCLK1Freq>
 800cce8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ccea:	e0ac      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ccec:	4b29      	ldr	r3, [pc, #164]	; (800cd94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ccf4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ccf8:	d107      	bne.n	800cd0a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ccfa:	f107 0318 	add.w	r3, r7, #24
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f000 f8c0 	bl	800ce84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cd04:	69fb      	ldr	r3, [r7, #28]
 800cd06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd08:	e09d      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd0e:	e09a      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cd10:	4b20      	ldr	r3, [pc, #128]	; (800cd94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd1c:	d107      	bne.n	800cd2e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd1e:	f107 030c 	add.w	r3, r7, #12
 800cd22:	4618      	mov	r0, r3
 800cd24:	f000 fa02 	bl	800d12c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd2c:	e08b      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd32:	e088      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cd34:	4b17      	ldr	r3, [pc, #92]	; (800cd94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	f003 0304 	and.w	r3, r3, #4
 800cd3c:	2b04      	cmp	r3, #4
 800cd3e:	d109      	bne.n	800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd40:	4b14      	ldr	r3, [pc, #80]	; (800cd94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	08db      	lsrs	r3, r3, #3
 800cd46:	f003 0303 	and.w	r3, r3, #3
 800cd4a:	4a13      	ldr	r2, [pc, #76]	; (800cd98 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cd4c:	fa22 f303 	lsr.w	r3, r2, r3
 800cd50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd52:	e078      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd54:	2300      	movs	r3, #0
 800cd56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd58:	e075      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cd5a:	4b0e      	ldr	r3, [pc, #56]	; (800cd94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd66:	d102      	bne.n	800cd6e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800cd68:	4b0c      	ldr	r3, [pc, #48]	; (800cd9c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cd6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd6c:	e06b      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd72:	e068      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cd74:	4b07      	ldr	r3, [pc, #28]	; (800cd94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd80:	d102      	bne.n	800cd88 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800cd82:	4b07      	ldr	r3, [pc, #28]	; (800cda0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cd84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd86:	e05e      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd8c:	e05b      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd92:	e058      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cd94:	58024400 	.word	0x58024400
 800cd98:	03d09000 	.word	0x03d09000
 800cd9c:	003d0900 	.word	0x003d0900
 800cda0:	007f1b10 	.word	0x007f1b10
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800cda4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cda8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800cdac:	430b      	orrs	r3, r1
 800cdae:	d148      	bne.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800cdb0:	4b27      	ldr	r3, [pc, #156]	; (800ce50 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cdb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cdb8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cdba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cdc0:	d02a      	beq.n	800ce18 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800cdc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cdc8:	d838      	bhi.n	800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800cdca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d004      	beq.n	800cdda <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800cdd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cdd6:	d00d      	beq.n	800cdf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800cdd8:	e030      	b.n	800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cdda:	4b1d      	ldr	r3, [pc, #116]	; (800ce50 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cde2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cde6:	d102      	bne.n	800cdee <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800cde8:	4b1a      	ldr	r3, [pc, #104]	; (800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800cdea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdec:	e02b      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdf2:	e028      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cdf4:	4b16      	ldr	r3, [pc, #88]	; (800ce50 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cdfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ce00:	d107      	bne.n	800ce12 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ce02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce06:	4618      	mov	r0, r3
 800ce08:	f000 fae4 	bl	800d3d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ce0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce10:	e019      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce12:	2300      	movs	r3, #0
 800ce14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce16:	e016      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce18:	4b0d      	ldr	r3, [pc, #52]	; (800ce50 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ce24:	d107      	bne.n	800ce36 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce26:	f107 0318 	add.w	r3, r7, #24
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f000 f82a 	bl	800ce84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ce30:	69fb      	ldr	r3, [r7, #28]
 800ce32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce34:	e007      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce36:	2300      	movs	r3, #0
 800ce38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce3a:	e004      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce40:	e001      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800ce42:	2300      	movs	r3, #0
 800ce44:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800ce46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3740      	adds	r7, #64	; 0x40
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}
 800ce50:	58024400 	.word	0x58024400
 800ce54:	007f1b10 	.word	0x007f1b10

0800ce58 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ce5c:	f7fd fffa 	bl	800ae54 <HAL_RCC_GetHCLKFreq>
 800ce60:	4602      	mov	r2, r0
 800ce62:	4b06      	ldr	r3, [pc, #24]	; (800ce7c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ce64:	6a1b      	ldr	r3, [r3, #32]
 800ce66:	091b      	lsrs	r3, r3, #4
 800ce68:	f003 0307 	and.w	r3, r3, #7
 800ce6c:	4904      	ldr	r1, [pc, #16]	; (800ce80 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ce6e:	5ccb      	ldrb	r3, [r1, r3]
 800ce70:	f003 031f 	and.w	r3, r3, #31
 800ce74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	bd80      	pop	{r7, pc}
 800ce7c:	58024400 	.word	0x58024400
 800ce80:	08020cd0 	.word	0x08020cd0

0800ce84 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ce84:	b480      	push	{r7}
 800ce86:	b089      	sub	sp, #36	; 0x24
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ce8c:	4ba1      	ldr	r3, [pc, #644]	; (800d114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce90:	f003 0303 	and.w	r3, r3, #3
 800ce94:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ce96:	4b9f      	ldr	r3, [pc, #636]	; (800d114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce9a:	0b1b      	lsrs	r3, r3, #12
 800ce9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cea0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cea2:	4b9c      	ldr	r3, [pc, #624]	; (800d114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cea6:	091b      	lsrs	r3, r3, #4
 800cea8:	f003 0301 	and.w	r3, r3, #1
 800ceac:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ceae:	4b99      	ldr	r3, [pc, #612]	; (800d114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ceb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceb2:	08db      	lsrs	r3, r3, #3
 800ceb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ceb8:	693a      	ldr	r2, [r7, #16]
 800ceba:	fb02 f303 	mul.w	r3, r2, r3
 800cebe:	ee07 3a90 	vmov	s15, r3
 800cec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cec6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	f000 8111 	beq.w	800d0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ced2:	69bb      	ldr	r3, [r7, #24]
 800ced4:	2b02      	cmp	r3, #2
 800ced6:	f000 8083 	beq.w	800cfe0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ceda:	69bb      	ldr	r3, [r7, #24]
 800cedc:	2b02      	cmp	r3, #2
 800cede:	f200 80a1 	bhi.w	800d024 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cee2:	69bb      	ldr	r3, [r7, #24]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d003      	beq.n	800cef0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cee8:	69bb      	ldr	r3, [r7, #24]
 800ceea:	2b01      	cmp	r3, #1
 800ceec:	d056      	beq.n	800cf9c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ceee:	e099      	b.n	800d024 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cef0:	4b88      	ldr	r3, [pc, #544]	; (800d114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	f003 0320 	and.w	r3, r3, #32
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d02d      	beq.n	800cf58 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cefc:	4b85      	ldr	r3, [pc, #532]	; (800d114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	08db      	lsrs	r3, r3, #3
 800cf02:	f003 0303 	and.w	r3, r3, #3
 800cf06:	4a84      	ldr	r2, [pc, #528]	; (800d118 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cf08:	fa22 f303 	lsr.w	r3, r2, r3
 800cf0c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cf0e:	68bb      	ldr	r3, [r7, #8]
 800cf10:	ee07 3a90 	vmov	s15, r3
 800cf14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	ee07 3a90 	vmov	s15, r3
 800cf1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf26:	4b7b      	ldr	r3, [pc, #492]	; (800d114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf2e:	ee07 3a90 	vmov	s15, r3
 800cf32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf36:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf3a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d11c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cf3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf52:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cf56:	e087      	b.n	800d068 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cf58:	697b      	ldr	r3, [r7, #20]
 800cf5a:	ee07 3a90 	vmov	s15, r3
 800cf5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf62:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d120 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800cf66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf6a:	4b6a      	ldr	r3, [pc, #424]	; (800d114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf72:	ee07 3a90 	vmov	s15, r3
 800cf76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf7e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d11c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cf82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf9a:	e065      	b.n	800d068 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	ee07 3a90 	vmov	s15, r3
 800cfa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfa6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d124 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cfaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfae:	4b59      	ldr	r3, [pc, #356]	; (800d114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cfb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfb6:	ee07 3a90 	vmov	s15, r3
 800cfba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfbe:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfc2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d11c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cfc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cfde:	e043      	b.n	800d068 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cfe0:	697b      	ldr	r3, [r7, #20]
 800cfe2:	ee07 3a90 	vmov	s15, r3
 800cfe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d128 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cfee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cff2:	4b48      	ldr	r3, [pc, #288]	; (800d114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cffa:	ee07 3a90 	vmov	s15, r3
 800cffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d002:	ed97 6a03 	vldr	s12, [r7, #12]
 800d006:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d11c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d00a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d00e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d012:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d01a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d01e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d022:	e021      	b.n	800d068 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d024:	697b      	ldr	r3, [r7, #20]
 800d026:	ee07 3a90 	vmov	s15, r3
 800d02a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d02e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d124 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d036:	4b37      	ldr	r3, [pc, #220]	; (800d114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d03a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d03e:	ee07 3a90 	vmov	s15, r3
 800d042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d046:	ed97 6a03 	vldr	s12, [r7, #12]
 800d04a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d11c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d04e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d056:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d05a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d05e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d062:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d066:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d068:	4b2a      	ldr	r3, [pc, #168]	; (800d114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d06a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d06c:	0a5b      	lsrs	r3, r3, #9
 800d06e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d072:	ee07 3a90 	vmov	s15, r3
 800d076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d07a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d07e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d082:	edd7 6a07 	vldr	s13, [r7, #28]
 800d086:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d08a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d08e:	ee17 2a90 	vmov	r2, s15
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d096:	4b1f      	ldr	r3, [pc, #124]	; (800d114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d09a:	0c1b      	lsrs	r3, r3, #16
 800d09c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0a0:	ee07 3a90 	vmov	s15, r3
 800d0a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0bc:	ee17 2a90 	vmov	r2, s15
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d0c4:	4b13      	ldr	r3, [pc, #76]	; (800d114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0c8:	0e1b      	lsrs	r3, r3, #24
 800d0ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0ce:	ee07 3a90 	vmov	s15, r3
 800d0d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0de:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0ea:	ee17 2a90 	vmov	r2, s15
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d0f2:	e008      	b.n	800d106 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2200      	movs	r2, #0
 800d104:	609a      	str	r2, [r3, #8]
}
 800d106:	bf00      	nop
 800d108:	3724      	adds	r7, #36	; 0x24
 800d10a:	46bd      	mov	sp, r7
 800d10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d110:	4770      	bx	lr
 800d112:	bf00      	nop
 800d114:	58024400 	.word	0x58024400
 800d118:	03d09000 	.word	0x03d09000
 800d11c:	46000000 	.word	0x46000000
 800d120:	4c742400 	.word	0x4c742400
 800d124:	4a742400 	.word	0x4a742400
 800d128:	4afe3620 	.word	0x4afe3620

0800d12c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d12c:	b480      	push	{r7}
 800d12e:	b089      	sub	sp, #36	; 0x24
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d134:	4ba1      	ldr	r3, [pc, #644]	; (800d3bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d138:	f003 0303 	and.w	r3, r3, #3
 800d13c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d13e:	4b9f      	ldr	r3, [pc, #636]	; (800d3bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d142:	0d1b      	lsrs	r3, r3, #20
 800d144:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d148:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d14a:	4b9c      	ldr	r3, [pc, #624]	; (800d3bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d14c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d14e:	0a1b      	lsrs	r3, r3, #8
 800d150:	f003 0301 	and.w	r3, r3, #1
 800d154:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d156:	4b99      	ldr	r3, [pc, #612]	; (800d3bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d15a:	08db      	lsrs	r3, r3, #3
 800d15c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d160:	693a      	ldr	r2, [r7, #16]
 800d162:	fb02 f303 	mul.w	r3, r2, r3
 800d166:	ee07 3a90 	vmov	s15, r3
 800d16a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d16e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	2b00      	cmp	r3, #0
 800d176:	f000 8111 	beq.w	800d39c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d17a:	69bb      	ldr	r3, [r7, #24]
 800d17c:	2b02      	cmp	r3, #2
 800d17e:	f000 8083 	beq.w	800d288 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d182:	69bb      	ldr	r3, [r7, #24]
 800d184:	2b02      	cmp	r3, #2
 800d186:	f200 80a1 	bhi.w	800d2cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d18a:	69bb      	ldr	r3, [r7, #24]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d003      	beq.n	800d198 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d190:	69bb      	ldr	r3, [r7, #24]
 800d192:	2b01      	cmp	r3, #1
 800d194:	d056      	beq.n	800d244 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d196:	e099      	b.n	800d2cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d198:	4b88      	ldr	r3, [pc, #544]	; (800d3bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	f003 0320 	and.w	r3, r3, #32
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d02d      	beq.n	800d200 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d1a4:	4b85      	ldr	r3, [pc, #532]	; (800d3bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	08db      	lsrs	r3, r3, #3
 800d1aa:	f003 0303 	and.w	r3, r3, #3
 800d1ae:	4a84      	ldr	r2, [pc, #528]	; (800d3c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d1b0:	fa22 f303 	lsr.w	r3, r2, r3
 800d1b4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	ee07 3a90 	vmov	s15, r3
 800d1bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1c0:	697b      	ldr	r3, [r7, #20]
 800d1c2:	ee07 3a90 	vmov	s15, r3
 800d1c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1ce:	4b7b      	ldr	r3, [pc, #492]	; (800d3bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1d6:	ee07 3a90 	vmov	s15, r3
 800d1da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1de:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d3c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d1e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d1fe:	e087      	b.n	800d310 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	ee07 3a90 	vmov	s15, r3
 800d206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d20a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d3c8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d20e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d212:	4b6a      	ldr	r3, [pc, #424]	; (800d3bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d21a:	ee07 3a90 	vmov	s15, r3
 800d21e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d222:	ed97 6a03 	vldr	s12, [r7, #12]
 800d226:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d3c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d22a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d22e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d232:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d23a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d23e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d242:	e065      	b.n	800d310 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d244:	697b      	ldr	r3, [r7, #20]
 800d246:	ee07 3a90 	vmov	s15, r3
 800d24a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d24e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d3cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d256:	4b59      	ldr	r3, [pc, #356]	; (800d3bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d25a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d25e:	ee07 3a90 	vmov	s15, r3
 800d262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d266:	ed97 6a03 	vldr	s12, [r7, #12]
 800d26a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d3c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d26e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d276:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d27a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d27e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d282:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d286:	e043      	b.n	800d310 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	ee07 3a90 	vmov	s15, r3
 800d28e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d292:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d3d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d29a:	4b48      	ldr	r3, [pc, #288]	; (800d3bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d29c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d29e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2a2:	ee07 3a90 	vmov	s15, r3
 800d2a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d3c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d2b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2ca:	e021      	b.n	800d310 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d2cc:	697b      	ldr	r3, [r7, #20]
 800d2ce:	ee07 3a90 	vmov	s15, r3
 800d2d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d3cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d2da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2de:	4b37      	ldr	r3, [pc, #220]	; (800d3bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2e6:	ee07 3a90 	vmov	s15, r3
 800d2ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d3c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d2f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d30a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d30e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d310:	4b2a      	ldr	r3, [pc, #168]	; (800d3bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d314:	0a5b      	lsrs	r3, r3, #9
 800d316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d31a:	ee07 3a90 	vmov	s15, r3
 800d31e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d322:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d326:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d32a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d32e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d332:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d336:	ee17 2a90 	vmov	r2, s15
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d33e:	4b1f      	ldr	r3, [pc, #124]	; (800d3bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d342:	0c1b      	lsrs	r3, r3, #16
 800d344:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d348:	ee07 3a90 	vmov	s15, r3
 800d34c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d350:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d354:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d358:	edd7 6a07 	vldr	s13, [r7, #28]
 800d35c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d360:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d364:	ee17 2a90 	vmov	r2, s15
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d36c:	4b13      	ldr	r3, [pc, #76]	; (800d3bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d36e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d370:	0e1b      	lsrs	r3, r3, #24
 800d372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d376:	ee07 3a90 	vmov	s15, r3
 800d37a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d37e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d382:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d386:	edd7 6a07 	vldr	s13, [r7, #28]
 800d38a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d38e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d392:	ee17 2a90 	vmov	r2, s15
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d39a:	e008      	b.n	800d3ae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2200      	movs	r2, #0
 800d3a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	609a      	str	r2, [r3, #8]
}
 800d3ae:	bf00      	nop
 800d3b0:	3724      	adds	r7, #36	; 0x24
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b8:	4770      	bx	lr
 800d3ba:	bf00      	nop
 800d3bc:	58024400 	.word	0x58024400
 800d3c0:	03d09000 	.word	0x03d09000
 800d3c4:	46000000 	.word	0x46000000
 800d3c8:	4c742400 	.word	0x4c742400
 800d3cc:	4a742400 	.word	0x4a742400
 800d3d0:	4afe3620 	.word	0x4afe3620

0800d3d4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b089      	sub	sp, #36	; 0x24
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d3dc:	4ba0      	ldr	r3, [pc, #640]	; (800d660 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d3de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3e0:	f003 0303 	and.w	r3, r3, #3
 800d3e4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d3e6:	4b9e      	ldr	r3, [pc, #632]	; (800d660 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d3e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3ea:	091b      	lsrs	r3, r3, #4
 800d3ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d3f0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d3f2:	4b9b      	ldr	r3, [pc, #620]	; (800d660 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d3f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3f6:	f003 0301 	and.w	r3, r3, #1
 800d3fa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d3fc:	4b98      	ldr	r3, [pc, #608]	; (800d660 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d3fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d400:	08db      	lsrs	r3, r3, #3
 800d402:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d406:	693a      	ldr	r2, [r7, #16]
 800d408:	fb02 f303 	mul.w	r3, r2, r3
 800d40c:	ee07 3a90 	vmov	s15, r3
 800d410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d414:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d418:	697b      	ldr	r3, [r7, #20]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	f000 8111 	beq.w	800d642 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d420:	69bb      	ldr	r3, [r7, #24]
 800d422:	2b02      	cmp	r3, #2
 800d424:	f000 8083 	beq.w	800d52e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d428:	69bb      	ldr	r3, [r7, #24]
 800d42a:	2b02      	cmp	r3, #2
 800d42c:	f200 80a1 	bhi.w	800d572 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d430:	69bb      	ldr	r3, [r7, #24]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d003      	beq.n	800d43e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d436:	69bb      	ldr	r3, [r7, #24]
 800d438:	2b01      	cmp	r3, #1
 800d43a:	d056      	beq.n	800d4ea <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d43c:	e099      	b.n	800d572 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d43e:	4b88      	ldr	r3, [pc, #544]	; (800d660 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	f003 0320 	and.w	r3, r3, #32
 800d446:	2b00      	cmp	r3, #0
 800d448:	d02d      	beq.n	800d4a6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d44a:	4b85      	ldr	r3, [pc, #532]	; (800d660 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	08db      	lsrs	r3, r3, #3
 800d450:	f003 0303 	and.w	r3, r3, #3
 800d454:	4a83      	ldr	r2, [pc, #524]	; (800d664 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d456:	fa22 f303 	lsr.w	r3, r2, r3
 800d45a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	ee07 3a90 	vmov	s15, r3
 800d462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	ee07 3a90 	vmov	s15, r3
 800d46c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d470:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d474:	4b7a      	ldr	r3, [pc, #488]	; (800d660 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d47c:	ee07 3a90 	vmov	s15, r3
 800d480:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d484:	ed97 6a03 	vldr	s12, [r7, #12]
 800d488:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d668 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d48c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d490:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d494:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d498:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d49c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4a0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d4a4:	e087      	b.n	800d5b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d4a6:	697b      	ldr	r3, [r7, #20]
 800d4a8:	ee07 3a90 	vmov	s15, r3
 800d4ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4b0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d66c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d4b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4b8:	4b69      	ldr	r3, [pc, #420]	; (800d660 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4c0:	ee07 3a90 	vmov	s15, r3
 800d4c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4c8:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4cc:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d668 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d4d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d4e8:	e065      	b.n	800d5b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d4ea:	697b      	ldr	r3, [r7, #20]
 800d4ec:	ee07 3a90 	vmov	s15, r3
 800d4f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4f4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d670 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d4f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4fc:	4b58      	ldr	r3, [pc, #352]	; (800d660 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d504:	ee07 3a90 	vmov	s15, r3
 800d508:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d50c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d510:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d668 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d514:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d518:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d51c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d520:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d524:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d528:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d52c:	e043      	b.n	800d5b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	ee07 3a90 	vmov	s15, r3
 800d534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d538:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d674 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d53c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d540:	4b47      	ldr	r3, [pc, #284]	; (800d660 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d548:	ee07 3a90 	vmov	s15, r3
 800d54c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d550:	ed97 6a03 	vldr	s12, [r7, #12]
 800d554:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d668 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d558:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d55c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d560:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d564:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d568:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d56c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d570:	e021      	b.n	800d5b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	ee07 3a90 	vmov	s15, r3
 800d578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d57c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d66c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d580:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d584:	4b36      	ldr	r3, [pc, #216]	; (800d660 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d58c:	ee07 3a90 	vmov	s15, r3
 800d590:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d594:	ed97 6a03 	vldr	s12, [r7, #12]
 800d598:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d668 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d59c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d5a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d5b4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d5b6:	4b2a      	ldr	r3, [pc, #168]	; (800d660 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5ba:	0a5b      	lsrs	r3, r3, #9
 800d5bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5c0:	ee07 3a90 	vmov	s15, r3
 800d5c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d5cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d5d0:	edd7 6a07 	vldr	s13, [r7, #28]
 800d5d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d5d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5dc:	ee17 2a90 	vmov	r2, s15
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d5e4:	4b1e      	ldr	r3, [pc, #120]	; (800d660 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5e8:	0c1b      	lsrs	r3, r3, #16
 800d5ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5ee:	ee07 3a90 	vmov	s15, r3
 800d5f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d5fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d5fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800d602:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d606:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d60a:	ee17 2a90 	vmov	r2, s15
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d612:	4b13      	ldr	r3, [pc, #76]	; (800d660 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d616:	0e1b      	lsrs	r3, r3, #24
 800d618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d61c:	ee07 3a90 	vmov	s15, r3
 800d620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d624:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d628:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d62c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d630:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d634:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d638:	ee17 2a90 	vmov	r2, s15
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d640:	e008      	b.n	800d654 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2200      	movs	r2, #0
 800d646:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2200      	movs	r2, #0
 800d64c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2200      	movs	r2, #0
 800d652:	609a      	str	r2, [r3, #8]
}
 800d654:	bf00      	nop
 800d656:	3724      	adds	r7, #36	; 0x24
 800d658:	46bd      	mov	sp, r7
 800d65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65e:	4770      	bx	lr
 800d660:	58024400 	.word	0x58024400
 800d664:	03d09000 	.word	0x03d09000
 800d668:	46000000 	.word	0x46000000
 800d66c:	4c742400 	.word	0x4c742400
 800d670:	4a742400 	.word	0x4a742400
 800d674:	4afe3620 	.word	0x4afe3620

0800d678 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b084      	sub	sp, #16
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800d680:	4b26      	ldr	r3, [pc, #152]	; (800d71c <HAL_RCCEx_CRSConfig+0xa4>)
 800d682:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d686:	4a25      	ldr	r2, [pc, #148]	; (800d71c <HAL_RCCEx_CRSConfig+0xa4>)
 800d688:	f043 0302 	orr.w	r3, r3, #2
 800d68c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 800d690:	4b22      	ldr	r3, [pc, #136]	; (800d71c <HAL_RCCEx_CRSConfig+0xa4>)
 800d692:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d696:	4a21      	ldr	r2, [pc, #132]	; (800d71c <HAL_RCCEx_CRSConfig+0xa4>)
 800d698:	f023 0302 	bic.w	r3, r3, #2
 800d69c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 800d6a0:	f7f6 fe12 	bl	80042c8 <HAL_GetREVID>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	f241 0203 	movw	r2, #4099	; 0x1003
 800d6aa:	4293      	cmp	r3, r2
 800d6ac:	d80b      	bhi.n	800d6c6 <HAL_RCCEx_CRSConfig+0x4e>
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	685b      	ldr	r3, [r3, #4]
 800d6b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d6b6:	d106      	bne.n	800d6c6 <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681a      	ldr	r2, [r3, #0]
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	689b      	ldr	r3, [r3, #8]
 800d6c0:	4313      	orrs	r3, r2
 800d6c2:	60fb      	str	r3, [r7, #12]
 800d6c4:	e008      	b.n	800d6d8 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681a      	ldr	r2, [r3, #0]
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	685b      	ldr	r3, [r3, #4]
 800d6ce:	431a      	orrs	r2, r3
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	689b      	ldr	r3, [r3, #8]
 800d6d4:	4313      	orrs	r3, r2
 800d6d6:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	68db      	ldr	r3, [r3, #12]
 800d6dc:	68fa      	ldr	r2, [r7, #12]
 800d6de:	4313      	orrs	r3, r2
 800d6e0:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	691b      	ldr	r3, [r3, #16]
 800d6e6:	041b      	lsls	r3, r3, #16
 800d6e8:	68fa      	ldr	r2, [r7, #12]
 800d6ea:	4313      	orrs	r3, r2
 800d6ec:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800d6ee:	4a0c      	ldr	r2, [pc, #48]	; (800d720 <HAL_RCCEx_CRSConfig+0xa8>)
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800d6f4:	4b0a      	ldr	r3, [pc, #40]	; (800d720 <HAL_RCCEx_CRSConfig+0xa8>)
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	695b      	ldr	r3, [r3, #20]
 800d700:	021b      	lsls	r3, r3, #8
 800d702:	4907      	ldr	r1, [pc, #28]	; (800d720 <HAL_RCCEx_CRSConfig+0xa8>)
 800d704:	4313      	orrs	r3, r2
 800d706:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800d708:	4b05      	ldr	r3, [pc, #20]	; (800d720 <HAL_RCCEx_CRSConfig+0xa8>)
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	4a04      	ldr	r2, [pc, #16]	; (800d720 <HAL_RCCEx_CRSConfig+0xa8>)
 800d70e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d712:	6013      	str	r3, [r2, #0]
}
 800d714:	bf00      	nop
 800d716:	3710      	adds	r7, #16
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}
 800d71c:	58024400 	.word	0x58024400
 800d720:	40008400 	.word	0x40008400

0800d724 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b084      	sub	sp, #16
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
 800d72c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d72e:	2300      	movs	r3, #0
 800d730:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d732:	4b53      	ldr	r3, [pc, #332]	; (800d880 <RCCEx_PLL2_Config+0x15c>)
 800d734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d736:	f003 0303 	and.w	r3, r3, #3
 800d73a:	2b03      	cmp	r3, #3
 800d73c:	d101      	bne.n	800d742 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d73e:	2301      	movs	r3, #1
 800d740:	e099      	b.n	800d876 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d742:	4b4f      	ldr	r3, [pc, #316]	; (800d880 <RCCEx_PLL2_Config+0x15c>)
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	4a4e      	ldr	r2, [pc, #312]	; (800d880 <RCCEx_PLL2_Config+0x15c>)
 800d748:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d74c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d74e:	f7f6 fd8b 	bl	8004268 <HAL_GetTick>
 800d752:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d754:	e008      	b.n	800d768 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d756:	f7f6 fd87 	bl	8004268 <HAL_GetTick>
 800d75a:	4602      	mov	r2, r0
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	1ad3      	subs	r3, r2, r3
 800d760:	2b02      	cmp	r3, #2
 800d762:	d901      	bls.n	800d768 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d764:	2303      	movs	r3, #3
 800d766:	e086      	b.n	800d876 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d768:	4b45      	ldr	r3, [pc, #276]	; (800d880 <RCCEx_PLL2_Config+0x15c>)
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d770:	2b00      	cmp	r3, #0
 800d772:	d1f0      	bne.n	800d756 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d774:	4b42      	ldr	r3, [pc, #264]	; (800d880 <RCCEx_PLL2_Config+0x15c>)
 800d776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d778:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	031b      	lsls	r3, r3, #12
 800d782:	493f      	ldr	r1, [pc, #252]	; (800d880 <RCCEx_PLL2_Config+0x15c>)
 800d784:	4313      	orrs	r3, r2
 800d786:	628b      	str	r3, [r1, #40]	; 0x28
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	685b      	ldr	r3, [r3, #4]
 800d78c:	3b01      	subs	r3, #1
 800d78e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	689b      	ldr	r3, [r3, #8]
 800d796:	3b01      	subs	r3, #1
 800d798:	025b      	lsls	r3, r3, #9
 800d79a:	b29b      	uxth	r3, r3
 800d79c:	431a      	orrs	r2, r3
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	68db      	ldr	r3, [r3, #12]
 800d7a2:	3b01      	subs	r3, #1
 800d7a4:	041b      	lsls	r3, r3, #16
 800d7a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d7aa:	431a      	orrs	r2, r3
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	691b      	ldr	r3, [r3, #16]
 800d7b0:	3b01      	subs	r3, #1
 800d7b2:	061b      	lsls	r3, r3, #24
 800d7b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d7b8:	4931      	ldr	r1, [pc, #196]	; (800d880 <RCCEx_PLL2_Config+0x15c>)
 800d7ba:	4313      	orrs	r3, r2
 800d7bc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d7be:	4b30      	ldr	r3, [pc, #192]	; (800d880 <RCCEx_PLL2_Config+0x15c>)
 800d7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	695b      	ldr	r3, [r3, #20]
 800d7ca:	492d      	ldr	r1, [pc, #180]	; (800d880 <RCCEx_PLL2_Config+0x15c>)
 800d7cc:	4313      	orrs	r3, r2
 800d7ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d7d0:	4b2b      	ldr	r3, [pc, #172]	; (800d880 <RCCEx_PLL2_Config+0x15c>)
 800d7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7d4:	f023 0220 	bic.w	r2, r3, #32
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	699b      	ldr	r3, [r3, #24]
 800d7dc:	4928      	ldr	r1, [pc, #160]	; (800d880 <RCCEx_PLL2_Config+0x15c>)
 800d7de:	4313      	orrs	r3, r2
 800d7e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d7e2:	4b27      	ldr	r3, [pc, #156]	; (800d880 <RCCEx_PLL2_Config+0x15c>)
 800d7e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7e6:	4a26      	ldr	r2, [pc, #152]	; (800d880 <RCCEx_PLL2_Config+0x15c>)
 800d7e8:	f023 0310 	bic.w	r3, r3, #16
 800d7ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d7ee:	4b24      	ldr	r3, [pc, #144]	; (800d880 <RCCEx_PLL2_Config+0x15c>)
 800d7f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d7f2:	4b24      	ldr	r3, [pc, #144]	; (800d884 <RCCEx_PLL2_Config+0x160>)
 800d7f4:	4013      	ands	r3, r2
 800d7f6:	687a      	ldr	r2, [r7, #4]
 800d7f8:	69d2      	ldr	r2, [r2, #28]
 800d7fa:	00d2      	lsls	r2, r2, #3
 800d7fc:	4920      	ldr	r1, [pc, #128]	; (800d880 <RCCEx_PLL2_Config+0x15c>)
 800d7fe:	4313      	orrs	r3, r2
 800d800:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d802:	4b1f      	ldr	r3, [pc, #124]	; (800d880 <RCCEx_PLL2_Config+0x15c>)
 800d804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d806:	4a1e      	ldr	r2, [pc, #120]	; (800d880 <RCCEx_PLL2_Config+0x15c>)
 800d808:	f043 0310 	orr.w	r3, r3, #16
 800d80c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d106      	bne.n	800d822 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d814:	4b1a      	ldr	r3, [pc, #104]	; (800d880 <RCCEx_PLL2_Config+0x15c>)
 800d816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d818:	4a19      	ldr	r2, [pc, #100]	; (800d880 <RCCEx_PLL2_Config+0x15c>)
 800d81a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d81e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d820:	e00f      	b.n	800d842 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d822:	683b      	ldr	r3, [r7, #0]
 800d824:	2b01      	cmp	r3, #1
 800d826:	d106      	bne.n	800d836 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d828:	4b15      	ldr	r3, [pc, #84]	; (800d880 <RCCEx_PLL2_Config+0x15c>)
 800d82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d82c:	4a14      	ldr	r2, [pc, #80]	; (800d880 <RCCEx_PLL2_Config+0x15c>)
 800d82e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d832:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d834:	e005      	b.n	800d842 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d836:	4b12      	ldr	r3, [pc, #72]	; (800d880 <RCCEx_PLL2_Config+0x15c>)
 800d838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d83a:	4a11      	ldr	r2, [pc, #68]	; (800d880 <RCCEx_PLL2_Config+0x15c>)
 800d83c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d840:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d842:	4b0f      	ldr	r3, [pc, #60]	; (800d880 <RCCEx_PLL2_Config+0x15c>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	4a0e      	ldr	r2, [pc, #56]	; (800d880 <RCCEx_PLL2_Config+0x15c>)
 800d848:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d84c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d84e:	f7f6 fd0b 	bl	8004268 <HAL_GetTick>
 800d852:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d854:	e008      	b.n	800d868 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d856:	f7f6 fd07 	bl	8004268 <HAL_GetTick>
 800d85a:	4602      	mov	r2, r0
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	1ad3      	subs	r3, r2, r3
 800d860:	2b02      	cmp	r3, #2
 800d862:	d901      	bls.n	800d868 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d864:	2303      	movs	r3, #3
 800d866:	e006      	b.n	800d876 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d868:	4b05      	ldr	r3, [pc, #20]	; (800d880 <RCCEx_PLL2_Config+0x15c>)
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d870:	2b00      	cmp	r3, #0
 800d872:	d0f0      	beq.n	800d856 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d874:	7bfb      	ldrb	r3, [r7, #15]
}
 800d876:	4618      	mov	r0, r3
 800d878:	3710      	adds	r7, #16
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
 800d87e:	bf00      	nop
 800d880:	58024400 	.word	0x58024400
 800d884:	ffff0007 	.word	0xffff0007

0800d888 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b084      	sub	sp, #16
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
 800d890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d892:	2300      	movs	r3, #0
 800d894:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d896:	4b53      	ldr	r3, [pc, #332]	; (800d9e4 <RCCEx_PLL3_Config+0x15c>)
 800d898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d89a:	f003 0303 	and.w	r3, r3, #3
 800d89e:	2b03      	cmp	r3, #3
 800d8a0:	d101      	bne.n	800d8a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	e099      	b.n	800d9da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d8a6:	4b4f      	ldr	r3, [pc, #316]	; (800d9e4 <RCCEx_PLL3_Config+0x15c>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	4a4e      	ldr	r2, [pc, #312]	; (800d9e4 <RCCEx_PLL3_Config+0x15c>)
 800d8ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d8b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d8b2:	f7f6 fcd9 	bl	8004268 <HAL_GetTick>
 800d8b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d8b8:	e008      	b.n	800d8cc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d8ba:	f7f6 fcd5 	bl	8004268 <HAL_GetTick>
 800d8be:	4602      	mov	r2, r0
 800d8c0:	68bb      	ldr	r3, [r7, #8]
 800d8c2:	1ad3      	subs	r3, r2, r3
 800d8c4:	2b02      	cmp	r3, #2
 800d8c6:	d901      	bls.n	800d8cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d8c8:	2303      	movs	r3, #3
 800d8ca:	e086      	b.n	800d9da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d8cc:	4b45      	ldr	r3, [pc, #276]	; (800d9e4 <RCCEx_PLL3_Config+0x15c>)
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d1f0      	bne.n	800d8ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d8d8:	4b42      	ldr	r3, [pc, #264]	; (800d9e4 <RCCEx_PLL3_Config+0x15c>)
 800d8da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8dc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	051b      	lsls	r3, r3, #20
 800d8e6:	493f      	ldr	r1, [pc, #252]	; (800d9e4 <RCCEx_PLL3_Config+0x15c>)
 800d8e8:	4313      	orrs	r3, r2
 800d8ea:	628b      	str	r3, [r1, #40]	; 0x28
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	685b      	ldr	r3, [r3, #4]
 800d8f0:	3b01      	subs	r3, #1
 800d8f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	689b      	ldr	r3, [r3, #8]
 800d8fa:	3b01      	subs	r3, #1
 800d8fc:	025b      	lsls	r3, r3, #9
 800d8fe:	b29b      	uxth	r3, r3
 800d900:	431a      	orrs	r2, r3
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	68db      	ldr	r3, [r3, #12]
 800d906:	3b01      	subs	r3, #1
 800d908:	041b      	lsls	r3, r3, #16
 800d90a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d90e:	431a      	orrs	r2, r3
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	691b      	ldr	r3, [r3, #16]
 800d914:	3b01      	subs	r3, #1
 800d916:	061b      	lsls	r3, r3, #24
 800d918:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d91c:	4931      	ldr	r1, [pc, #196]	; (800d9e4 <RCCEx_PLL3_Config+0x15c>)
 800d91e:	4313      	orrs	r3, r2
 800d920:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d922:	4b30      	ldr	r3, [pc, #192]	; (800d9e4 <RCCEx_PLL3_Config+0x15c>)
 800d924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d926:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	695b      	ldr	r3, [r3, #20]
 800d92e:	492d      	ldr	r1, [pc, #180]	; (800d9e4 <RCCEx_PLL3_Config+0x15c>)
 800d930:	4313      	orrs	r3, r2
 800d932:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d934:	4b2b      	ldr	r3, [pc, #172]	; (800d9e4 <RCCEx_PLL3_Config+0x15c>)
 800d936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d938:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	699b      	ldr	r3, [r3, #24]
 800d940:	4928      	ldr	r1, [pc, #160]	; (800d9e4 <RCCEx_PLL3_Config+0x15c>)
 800d942:	4313      	orrs	r3, r2
 800d944:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d946:	4b27      	ldr	r3, [pc, #156]	; (800d9e4 <RCCEx_PLL3_Config+0x15c>)
 800d948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d94a:	4a26      	ldr	r2, [pc, #152]	; (800d9e4 <RCCEx_PLL3_Config+0x15c>)
 800d94c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d950:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d952:	4b24      	ldr	r3, [pc, #144]	; (800d9e4 <RCCEx_PLL3_Config+0x15c>)
 800d954:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d956:	4b24      	ldr	r3, [pc, #144]	; (800d9e8 <RCCEx_PLL3_Config+0x160>)
 800d958:	4013      	ands	r3, r2
 800d95a:	687a      	ldr	r2, [r7, #4]
 800d95c:	69d2      	ldr	r2, [r2, #28]
 800d95e:	00d2      	lsls	r2, r2, #3
 800d960:	4920      	ldr	r1, [pc, #128]	; (800d9e4 <RCCEx_PLL3_Config+0x15c>)
 800d962:	4313      	orrs	r3, r2
 800d964:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d966:	4b1f      	ldr	r3, [pc, #124]	; (800d9e4 <RCCEx_PLL3_Config+0x15c>)
 800d968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d96a:	4a1e      	ldr	r2, [pc, #120]	; (800d9e4 <RCCEx_PLL3_Config+0x15c>)
 800d96c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d970:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d106      	bne.n	800d986 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d978:	4b1a      	ldr	r3, [pc, #104]	; (800d9e4 <RCCEx_PLL3_Config+0x15c>)
 800d97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d97c:	4a19      	ldr	r2, [pc, #100]	; (800d9e4 <RCCEx_PLL3_Config+0x15c>)
 800d97e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d982:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d984:	e00f      	b.n	800d9a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	2b01      	cmp	r3, #1
 800d98a:	d106      	bne.n	800d99a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d98c:	4b15      	ldr	r3, [pc, #84]	; (800d9e4 <RCCEx_PLL3_Config+0x15c>)
 800d98e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d990:	4a14      	ldr	r2, [pc, #80]	; (800d9e4 <RCCEx_PLL3_Config+0x15c>)
 800d992:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d996:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d998:	e005      	b.n	800d9a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d99a:	4b12      	ldr	r3, [pc, #72]	; (800d9e4 <RCCEx_PLL3_Config+0x15c>)
 800d99c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d99e:	4a11      	ldr	r2, [pc, #68]	; (800d9e4 <RCCEx_PLL3_Config+0x15c>)
 800d9a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d9a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d9a6:	4b0f      	ldr	r3, [pc, #60]	; (800d9e4 <RCCEx_PLL3_Config+0x15c>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	4a0e      	ldr	r2, [pc, #56]	; (800d9e4 <RCCEx_PLL3_Config+0x15c>)
 800d9ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d9b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d9b2:	f7f6 fc59 	bl	8004268 <HAL_GetTick>
 800d9b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d9b8:	e008      	b.n	800d9cc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d9ba:	f7f6 fc55 	bl	8004268 <HAL_GetTick>
 800d9be:	4602      	mov	r2, r0
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	1ad3      	subs	r3, r2, r3
 800d9c4:	2b02      	cmp	r3, #2
 800d9c6:	d901      	bls.n	800d9cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d9c8:	2303      	movs	r3, #3
 800d9ca:	e006      	b.n	800d9da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d9cc:	4b05      	ldr	r3, [pc, #20]	; (800d9e4 <RCCEx_PLL3_Config+0x15c>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d0f0      	beq.n	800d9ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d9d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9da:	4618      	mov	r0, r3
 800d9dc:	3710      	adds	r7, #16
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}
 800d9e2:	bf00      	nop
 800d9e4:	58024400 	.word	0x58024400
 800d9e8:	ffff0007 	.word	0xffff0007

0800d9ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b082      	sub	sp, #8
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d101      	bne.n	800d9fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d9fa:	2301      	movs	r3, #1
 800d9fc:	e049      	b.n	800da92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da04:	b2db      	uxtb	r3, r3
 800da06:	2b00      	cmp	r3, #0
 800da08:	d106      	bne.n	800da18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2200      	movs	r2, #0
 800da0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800da12:	6878      	ldr	r0, [r7, #4]
 800da14:	f7f5 fee2 	bl	80037dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2202      	movs	r2, #2
 800da1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681a      	ldr	r2, [r3, #0]
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	3304      	adds	r3, #4
 800da28:	4619      	mov	r1, r3
 800da2a:	4610      	mov	r0, r2
 800da2c:	f000 f92e 	bl	800dc8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2201      	movs	r2, #1
 800da34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2201      	movs	r2, #1
 800da3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2201      	movs	r2, #1
 800da44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2201      	movs	r2, #1
 800da4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2201      	movs	r2, #1
 800da54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2201      	movs	r2, #1
 800da5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	2201      	movs	r2, #1
 800da64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2201      	movs	r2, #1
 800da6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2201      	movs	r2, #1
 800da74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2201      	movs	r2, #1
 800da7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2201      	movs	r2, #1
 800da84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2201      	movs	r2, #1
 800da8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800da90:	2300      	movs	r3, #0
}
 800da92:	4618      	mov	r0, r3
 800da94:	3708      	adds	r7, #8
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}
	...

0800da9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b084      	sub	sp, #16
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
 800daa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800daa6:	2300      	movs	r3, #0
 800daa8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dab0:	2b01      	cmp	r3, #1
 800dab2:	d101      	bne.n	800dab8 <HAL_TIM_ConfigClockSource+0x1c>
 800dab4:	2302      	movs	r3, #2
 800dab6:	e0dc      	b.n	800dc72 <HAL_TIM_ConfigClockSource+0x1d6>
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2201      	movs	r2, #1
 800dabc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2202      	movs	r2, #2
 800dac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	689b      	ldr	r3, [r3, #8]
 800dace:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800dad0:	68ba      	ldr	r2, [r7, #8]
 800dad2:	4b6a      	ldr	r3, [pc, #424]	; (800dc7c <HAL_TIM_ConfigClockSource+0x1e0>)
 800dad4:	4013      	ands	r3, r2
 800dad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dad8:	68bb      	ldr	r3, [r7, #8]
 800dada:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dade:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	68ba      	ldr	r2, [r7, #8]
 800dae6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	4a64      	ldr	r2, [pc, #400]	; (800dc80 <HAL_TIM_ConfigClockSource+0x1e4>)
 800daee:	4293      	cmp	r3, r2
 800daf0:	f000 80a9 	beq.w	800dc46 <HAL_TIM_ConfigClockSource+0x1aa>
 800daf4:	4a62      	ldr	r2, [pc, #392]	; (800dc80 <HAL_TIM_ConfigClockSource+0x1e4>)
 800daf6:	4293      	cmp	r3, r2
 800daf8:	f200 80ae 	bhi.w	800dc58 <HAL_TIM_ConfigClockSource+0x1bc>
 800dafc:	4a61      	ldr	r2, [pc, #388]	; (800dc84 <HAL_TIM_ConfigClockSource+0x1e8>)
 800dafe:	4293      	cmp	r3, r2
 800db00:	f000 80a1 	beq.w	800dc46 <HAL_TIM_ConfigClockSource+0x1aa>
 800db04:	4a5f      	ldr	r2, [pc, #380]	; (800dc84 <HAL_TIM_ConfigClockSource+0x1e8>)
 800db06:	4293      	cmp	r3, r2
 800db08:	f200 80a6 	bhi.w	800dc58 <HAL_TIM_ConfigClockSource+0x1bc>
 800db0c:	4a5e      	ldr	r2, [pc, #376]	; (800dc88 <HAL_TIM_ConfigClockSource+0x1ec>)
 800db0e:	4293      	cmp	r3, r2
 800db10:	f000 8099 	beq.w	800dc46 <HAL_TIM_ConfigClockSource+0x1aa>
 800db14:	4a5c      	ldr	r2, [pc, #368]	; (800dc88 <HAL_TIM_ConfigClockSource+0x1ec>)
 800db16:	4293      	cmp	r3, r2
 800db18:	f200 809e 	bhi.w	800dc58 <HAL_TIM_ConfigClockSource+0x1bc>
 800db1c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800db20:	f000 8091 	beq.w	800dc46 <HAL_TIM_ConfigClockSource+0x1aa>
 800db24:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800db28:	f200 8096 	bhi.w	800dc58 <HAL_TIM_ConfigClockSource+0x1bc>
 800db2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800db30:	f000 8089 	beq.w	800dc46 <HAL_TIM_ConfigClockSource+0x1aa>
 800db34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800db38:	f200 808e 	bhi.w	800dc58 <HAL_TIM_ConfigClockSource+0x1bc>
 800db3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db40:	d03e      	beq.n	800dbc0 <HAL_TIM_ConfigClockSource+0x124>
 800db42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db46:	f200 8087 	bhi.w	800dc58 <HAL_TIM_ConfigClockSource+0x1bc>
 800db4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db4e:	f000 8086 	beq.w	800dc5e <HAL_TIM_ConfigClockSource+0x1c2>
 800db52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db56:	d87f      	bhi.n	800dc58 <HAL_TIM_ConfigClockSource+0x1bc>
 800db58:	2b70      	cmp	r3, #112	; 0x70
 800db5a:	d01a      	beq.n	800db92 <HAL_TIM_ConfigClockSource+0xf6>
 800db5c:	2b70      	cmp	r3, #112	; 0x70
 800db5e:	d87b      	bhi.n	800dc58 <HAL_TIM_ConfigClockSource+0x1bc>
 800db60:	2b60      	cmp	r3, #96	; 0x60
 800db62:	d050      	beq.n	800dc06 <HAL_TIM_ConfigClockSource+0x16a>
 800db64:	2b60      	cmp	r3, #96	; 0x60
 800db66:	d877      	bhi.n	800dc58 <HAL_TIM_ConfigClockSource+0x1bc>
 800db68:	2b50      	cmp	r3, #80	; 0x50
 800db6a:	d03c      	beq.n	800dbe6 <HAL_TIM_ConfigClockSource+0x14a>
 800db6c:	2b50      	cmp	r3, #80	; 0x50
 800db6e:	d873      	bhi.n	800dc58 <HAL_TIM_ConfigClockSource+0x1bc>
 800db70:	2b40      	cmp	r3, #64	; 0x40
 800db72:	d058      	beq.n	800dc26 <HAL_TIM_ConfigClockSource+0x18a>
 800db74:	2b40      	cmp	r3, #64	; 0x40
 800db76:	d86f      	bhi.n	800dc58 <HAL_TIM_ConfigClockSource+0x1bc>
 800db78:	2b30      	cmp	r3, #48	; 0x30
 800db7a:	d064      	beq.n	800dc46 <HAL_TIM_ConfigClockSource+0x1aa>
 800db7c:	2b30      	cmp	r3, #48	; 0x30
 800db7e:	d86b      	bhi.n	800dc58 <HAL_TIM_ConfigClockSource+0x1bc>
 800db80:	2b20      	cmp	r3, #32
 800db82:	d060      	beq.n	800dc46 <HAL_TIM_ConfigClockSource+0x1aa>
 800db84:	2b20      	cmp	r3, #32
 800db86:	d867      	bhi.n	800dc58 <HAL_TIM_ConfigClockSource+0x1bc>
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d05c      	beq.n	800dc46 <HAL_TIM_ConfigClockSource+0x1aa>
 800db8c:	2b10      	cmp	r3, #16
 800db8e:	d05a      	beq.n	800dc46 <HAL_TIM_ConfigClockSource+0x1aa>
 800db90:	e062      	b.n	800dc58 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800dba2:	f000 f98b 	bl	800debc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	689b      	ldr	r3, [r3, #8]
 800dbac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800dbb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	68ba      	ldr	r2, [r7, #8]
 800dbbc:	609a      	str	r2, [r3, #8]
      break;
 800dbbe:	e04f      	b.n	800dc60 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800dbd0:	f000 f974 	bl	800debc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	689a      	ldr	r2, [r3, #8]
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dbe2:	609a      	str	r2, [r3, #8]
      break;
 800dbe4:	e03c      	b.n	800dc60 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dbf2:	461a      	mov	r2, r3
 800dbf4:	f000 f8e4 	bl	800ddc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	2150      	movs	r1, #80	; 0x50
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f000 f93e 	bl	800de80 <TIM_ITRx_SetConfig>
      break;
 800dc04:	e02c      	b.n	800dc60 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800dc12:	461a      	mov	r2, r3
 800dc14:	f000 f903 	bl	800de1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	2160      	movs	r1, #96	; 0x60
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f000 f92e 	bl	800de80 <TIM_ITRx_SetConfig>
      break;
 800dc24:	e01c      	b.n	800dc60 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dc32:	461a      	mov	r2, r3
 800dc34:	f000 f8c4 	bl	800ddc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	2140      	movs	r1, #64	; 0x40
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f000 f91e 	bl	800de80 <TIM_ITRx_SetConfig>
      break;
 800dc44:	e00c      	b.n	800dc60 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681a      	ldr	r2, [r3, #0]
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	4619      	mov	r1, r3
 800dc50:	4610      	mov	r0, r2
 800dc52:	f000 f915 	bl	800de80 <TIM_ITRx_SetConfig>
      break;
 800dc56:	e003      	b.n	800dc60 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800dc58:	2301      	movs	r3, #1
 800dc5a:	73fb      	strb	r3, [r7, #15]
      break;
 800dc5c:	e000      	b.n	800dc60 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800dc5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2201      	movs	r2, #1
 800dc64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dc70:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc72:	4618      	mov	r0, r3
 800dc74:	3710      	adds	r7, #16
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}
 800dc7a:	bf00      	nop
 800dc7c:	ffceff88 	.word	0xffceff88
 800dc80:	00100040 	.word	0x00100040
 800dc84:	00100030 	.word	0x00100030
 800dc88:	00100020 	.word	0x00100020

0800dc8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dc8c:	b480      	push	{r7}
 800dc8e:	b085      	sub	sp, #20
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
 800dc94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	4a40      	ldr	r2, [pc, #256]	; (800dda0 <TIM_Base_SetConfig+0x114>)
 800dca0:	4293      	cmp	r3, r2
 800dca2:	d013      	beq.n	800dccc <TIM_Base_SetConfig+0x40>
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dcaa:	d00f      	beq.n	800dccc <TIM_Base_SetConfig+0x40>
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	4a3d      	ldr	r2, [pc, #244]	; (800dda4 <TIM_Base_SetConfig+0x118>)
 800dcb0:	4293      	cmp	r3, r2
 800dcb2:	d00b      	beq.n	800dccc <TIM_Base_SetConfig+0x40>
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	4a3c      	ldr	r2, [pc, #240]	; (800dda8 <TIM_Base_SetConfig+0x11c>)
 800dcb8:	4293      	cmp	r3, r2
 800dcba:	d007      	beq.n	800dccc <TIM_Base_SetConfig+0x40>
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	4a3b      	ldr	r2, [pc, #236]	; (800ddac <TIM_Base_SetConfig+0x120>)
 800dcc0:	4293      	cmp	r3, r2
 800dcc2:	d003      	beq.n	800dccc <TIM_Base_SetConfig+0x40>
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	4a3a      	ldr	r2, [pc, #232]	; (800ddb0 <TIM_Base_SetConfig+0x124>)
 800dcc8:	4293      	cmp	r3, r2
 800dcca:	d108      	bne.n	800dcde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dcd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dcd4:	683b      	ldr	r3, [r7, #0]
 800dcd6:	685b      	ldr	r3, [r3, #4]
 800dcd8:	68fa      	ldr	r2, [r7, #12]
 800dcda:	4313      	orrs	r3, r2
 800dcdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	4a2f      	ldr	r2, [pc, #188]	; (800dda0 <TIM_Base_SetConfig+0x114>)
 800dce2:	4293      	cmp	r3, r2
 800dce4:	d01f      	beq.n	800dd26 <TIM_Base_SetConfig+0x9a>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dcec:	d01b      	beq.n	800dd26 <TIM_Base_SetConfig+0x9a>
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	4a2c      	ldr	r2, [pc, #176]	; (800dda4 <TIM_Base_SetConfig+0x118>)
 800dcf2:	4293      	cmp	r3, r2
 800dcf4:	d017      	beq.n	800dd26 <TIM_Base_SetConfig+0x9a>
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	4a2b      	ldr	r2, [pc, #172]	; (800dda8 <TIM_Base_SetConfig+0x11c>)
 800dcfa:	4293      	cmp	r3, r2
 800dcfc:	d013      	beq.n	800dd26 <TIM_Base_SetConfig+0x9a>
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	4a2a      	ldr	r2, [pc, #168]	; (800ddac <TIM_Base_SetConfig+0x120>)
 800dd02:	4293      	cmp	r3, r2
 800dd04:	d00f      	beq.n	800dd26 <TIM_Base_SetConfig+0x9a>
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	4a29      	ldr	r2, [pc, #164]	; (800ddb0 <TIM_Base_SetConfig+0x124>)
 800dd0a:	4293      	cmp	r3, r2
 800dd0c:	d00b      	beq.n	800dd26 <TIM_Base_SetConfig+0x9a>
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	4a28      	ldr	r2, [pc, #160]	; (800ddb4 <TIM_Base_SetConfig+0x128>)
 800dd12:	4293      	cmp	r3, r2
 800dd14:	d007      	beq.n	800dd26 <TIM_Base_SetConfig+0x9a>
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	4a27      	ldr	r2, [pc, #156]	; (800ddb8 <TIM_Base_SetConfig+0x12c>)
 800dd1a:	4293      	cmp	r3, r2
 800dd1c:	d003      	beq.n	800dd26 <TIM_Base_SetConfig+0x9a>
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	4a26      	ldr	r2, [pc, #152]	; (800ddbc <TIM_Base_SetConfig+0x130>)
 800dd22:	4293      	cmp	r3, r2
 800dd24:	d108      	bne.n	800dd38 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dd2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	68db      	ldr	r3, [r3, #12]
 800dd32:	68fa      	ldr	r2, [r7, #12]
 800dd34:	4313      	orrs	r3, r2
 800dd36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	695b      	ldr	r3, [r3, #20]
 800dd42:	4313      	orrs	r3, r2
 800dd44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	68fa      	ldr	r2, [r7, #12]
 800dd4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dd4c:	683b      	ldr	r3, [r7, #0]
 800dd4e:	689a      	ldr	r2, [r3, #8]
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	681a      	ldr	r2, [r3, #0]
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	4a10      	ldr	r2, [pc, #64]	; (800dda0 <TIM_Base_SetConfig+0x114>)
 800dd60:	4293      	cmp	r3, r2
 800dd62:	d00f      	beq.n	800dd84 <TIM_Base_SetConfig+0xf8>
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	4a12      	ldr	r2, [pc, #72]	; (800ddb0 <TIM_Base_SetConfig+0x124>)
 800dd68:	4293      	cmp	r3, r2
 800dd6a:	d00b      	beq.n	800dd84 <TIM_Base_SetConfig+0xf8>
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	4a11      	ldr	r2, [pc, #68]	; (800ddb4 <TIM_Base_SetConfig+0x128>)
 800dd70:	4293      	cmp	r3, r2
 800dd72:	d007      	beq.n	800dd84 <TIM_Base_SetConfig+0xf8>
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	4a10      	ldr	r2, [pc, #64]	; (800ddb8 <TIM_Base_SetConfig+0x12c>)
 800dd78:	4293      	cmp	r3, r2
 800dd7a:	d003      	beq.n	800dd84 <TIM_Base_SetConfig+0xf8>
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	4a0f      	ldr	r2, [pc, #60]	; (800ddbc <TIM_Base_SetConfig+0x130>)
 800dd80:	4293      	cmp	r3, r2
 800dd82:	d103      	bne.n	800dd8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	691a      	ldr	r2, [r3, #16]
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2201      	movs	r2, #1
 800dd90:	615a      	str	r2, [r3, #20]
}
 800dd92:	bf00      	nop
 800dd94:	3714      	adds	r7, #20
 800dd96:	46bd      	mov	sp, r7
 800dd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9c:	4770      	bx	lr
 800dd9e:	bf00      	nop
 800dda0:	40010000 	.word	0x40010000
 800dda4:	40000400 	.word	0x40000400
 800dda8:	40000800 	.word	0x40000800
 800ddac:	40000c00 	.word	0x40000c00
 800ddb0:	40010400 	.word	0x40010400
 800ddb4:	40014000 	.word	0x40014000
 800ddb8:	40014400 	.word	0x40014400
 800ddbc:	40014800 	.word	0x40014800

0800ddc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ddc0:	b480      	push	{r7}
 800ddc2:	b087      	sub	sp, #28
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	60f8      	str	r0, [r7, #12]
 800ddc8:	60b9      	str	r1, [r7, #8]
 800ddca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	6a1b      	ldr	r3, [r3, #32]
 800ddd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	6a1b      	ldr	r3, [r3, #32]
 800ddd6:	f023 0201 	bic.w	r2, r3, #1
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	699b      	ldr	r3, [r3, #24]
 800dde2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dde4:	693b      	ldr	r3, [r7, #16]
 800dde6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ddea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	011b      	lsls	r3, r3, #4
 800ddf0:	693a      	ldr	r2, [r7, #16]
 800ddf2:	4313      	orrs	r3, r2
 800ddf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ddf6:	697b      	ldr	r3, [r7, #20]
 800ddf8:	f023 030a 	bic.w	r3, r3, #10
 800ddfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ddfe:	697a      	ldr	r2, [r7, #20]
 800de00:	68bb      	ldr	r3, [r7, #8]
 800de02:	4313      	orrs	r3, r2
 800de04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	693a      	ldr	r2, [r7, #16]
 800de0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	697a      	ldr	r2, [r7, #20]
 800de10:	621a      	str	r2, [r3, #32]
}
 800de12:	bf00      	nop
 800de14:	371c      	adds	r7, #28
 800de16:	46bd      	mov	sp, r7
 800de18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1c:	4770      	bx	lr

0800de1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800de1e:	b480      	push	{r7}
 800de20:	b087      	sub	sp, #28
 800de22:	af00      	add	r7, sp, #0
 800de24:	60f8      	str	r0, [r7, #12]
 800de26:	60b9      	str	r1, [r7, #8]
 800de28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	6a1b      	ldr	r3, [r3, #32]
 800de2e:	f023 0210 	bic.w	r2, r3, #16
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	699b      	ldr	r3, [r3, #24]
 800de3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	6a1b      	ldr	r3, [r3, #32]
 800de40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800de42:	697b      	ldr	r3, [r7, #20]
 800de44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800de48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	031b      	lsls	r3, r3, #12
 800de4e:	697a      	ldr	r2, [r7, #20]
 800de50:	4313      	orrs	r3, r2
 800de52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800de54:	693b      	ldr	r3, [r7, #16]
 800de56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800de5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800de5c:	68bb      	ldr	r3, [r7, #8]
 800de5e:	011b      	lsls	r3, r3, #4
 800de60:	693a      	ldr	r2, [r7, #16]
 800de62:	4313      	orrs	r3, r2
 800de64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	697a      	ldr	r2, [r7, #20]
 800de6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	693a      	ldr	r2, [r7, #16]
 800de70:	621a      	str	r2, [r3, #32]
}
 800de72:	bf00      	nop
 800de74:	371c      	adds	r7, #28
 800de76:	46bd      	mov	sp, r7
 800de78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7c:	4770      	bx	lr
	...

0800de80 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800de80:	b480      	push	{r7}
 800de82:	b085      	sub	sp, #20
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
 800de88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	689b      	ldr	r3, [r3, #8]
 800de8e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800de90:	68fa      	ldr	r2, [r7, #12]
 800de92:	4b09      	ldr	r3, [pc, #36]	; (800deb8 <TIM_ITRx_SetConfig+0x38>)
 800de94:	4013      	ands	r3, r2
 800de96:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800de98:	683a      	ldr	r2, [r7, #0]
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	4313      	orrs	r3, r2
 800de9e:	f043 0307 	orr.w	r3, r3, #7
 800dea2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	68fa      	ldr	r2, [r7, #12]
 800dea8:	609a      	str	r2, [r3, #8]
}
 800deaa:	bf00      	nop
 800deac:	3714      	adds	r7, #20
 800deae:	46bd      	mov	sp, r7
 800deb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb4:	4770      	bx	lr
 800deb6:	bf00      	nop
 800deb8:	ffcfff8f 	.word	0xffcfff8f

0800debc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800debc:	b480      	push	{r7}
 800debe:	b087      	sub	sp, #28
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	60f8      	str	r0, [r7, #12]
 800dec4:	60b9      	str	r1, [r7, #8]
 800dec6:	607a      	str	r2, [r7, #4]
 800dec8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	689b      	ldr	r3, [r3, #8]
 800dece:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ded0:	697b      	ldr	r3, [r7, #20]
 800ded2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ded6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	021a      	lsls	r2, r3, #8
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	431a      	orrs	r2, r3
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	4313      	orrs	r3, r2
 800dee4:	697a      	ldr	r2, [r7, #20]
 800dee6:	4313      	orrs	r3, r2
 800dee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	697a      	ldr	r2, [r7, #20]
 800deee:	609a      	str	r2, [r3, #8]
}
 800def0:	bf00      	nop
 800def2:	371c      	adds	r7, #28
 800def4:	46bd      	mov	sp, r7
 800def6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defa:	4770      	bx	lr

0800defc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800defc:	b480      	push	{r7}
 800defe:	b085      	sub	sp, #20
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
 800df04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800df0c:	2b01      	cmp	r3, #1
 800df0e:	d101      	bne.n	800df14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800df10:	2302      	movs	r3, #2
 800df12:	e06d      	b.n	800dff0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2201      	movs	r2, #1
 800df18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2202      	movs	r2, #2
 800df20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	685b      	ldr	r3, [r3, #4]
 800df2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	689b      	ldr	r3, [r3, #8]
 800df32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	4a30      	ldr	r2, [pc, #192]	; (800dffc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800df3a:	4293      	cmp	r3, r2
 800df3c:	d004      	beq.n	800df48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	4a2f      	ldr	r2, [pc, #188]	; (800e000 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800df44:	4293      	cmp	r3, r2
 800df46:	d108      	bne.n	800df5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800df4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	685b      	ldr	r3, [r3, #4]
 800df54:	68fa      	ldr	r2, [r7, #12]
 800df56:	4313      	orrs	r3, r2
 800df58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	68fa      	ldr	r2, [r7, #12]
 800df68:	4313      	orrs	r3, r2
 800df6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	68fa      	ldr	r2, [r7, #12]
 800df72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	4a20      	ldr	r2, [pc, #128]	; (800dffc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800df7a:	4293      	cmp	r3, r2
 800df7c:	d022      	beq.n	800dfc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800df86:	d01d      	beq.n	800dfc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	4a1d      	ldr	r2, [pc, #116]	; (800e004 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800df8e:	4293      	cmp	r3, r2
 800df90:	d018      	beq.n	800dfc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	4a1c      	ldr	r2, [pc, #112]	; (800e008 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800df98:	4293      	cmp	r3, r2
 800df9a:	d013      	beq.n	800dfc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	4a1a      	ldr	r2, [pc, #104]	; (800e00c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800dfa2:	4293      	cmp	r3, r2
 800dfa4:	d00e      	beq.n	800dfc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	4a15      	ldr	r2, [pc, #84]	; (800e000 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dfac:	4293      	cmp	r3, r2
 800dfae:	d009      	beq.n	800dfc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	4a16      	ldr	r2, [pc, #88]	; (800e010 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800dfb6:	4293      	cmp	r3, r2
 800dfb8:	d004      	beq.n	800dfc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	4a15      	ldr	r2, [pc, #84]	; (800e014 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dfc0:	4293      	cmp	r3, r2
 800dfc2:	d10c      	bne.n	800dfde <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dfc4:	68bb      	ldr	r3, [r7, #8]
 800dfc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dfca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dfcc:	683b      	ldr	r3, [r7, #0]
 800dfce:	689b      	ldr	r3, [r3, #8]
 800dfd0:	68ba      	ldr	r2, [r7, #8]
 800dfd2:	4313      	orrs	r3, r2
 800dfd4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	68ba      	ldr	r2, [r7, #8]
 800dfdc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	2201      	movs	r2, #1
 800dfe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	2200      	movs	r2, #0
 800dfea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dfee:	2300      	movs	r3, #0
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3714      	adds	r7, #20
 800dff4:	46bd      	mov	sp, r7
 800dff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffa:	4770      	bx	lr
 800dffc:	40010000 	.word	0x40010000
 800e000:	40010400 	.word	0x40010400
 800e004:	40000400 	.word	0x40000400
 800e008:	40000800 	.word	0x40000800
 800e00c:	40000c00 	.word	0x40000c00
 800e010:	40001800 	.word	0x40001800
 800e014:	40014000 	.word	0x40014000

0800e018 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b082      	sub	sp, #8
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d101      	bne.n	800e02a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e026:	2301      	movs	r3, #1
 800e028:	e042      	b.n	800e0b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e030:	2b00      	cmp	r3, #0
 800e032:	d106      	bne.n	800e042 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2200      	movs	r2, #0
 800e038:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e03c:	6878      	ldr	r0, [r7, #4]
 800e03e:	f7f5 fc33 	bl	80038a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	2224      	movs	r2, #36	; 0x24
 800e046:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	681a      	ldr	r2, [r3, #0]
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	f022 0201 	bic.w	r2, r2, #1
 800e058:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	f000 f8ba 	bl	800e1d4 <UART_SetConfig>
 800e060:	4603      	mov	r3, r0
 800e062:	2b01      	cmp	r3, #1
 800e064:	d101      	bne.n	800e06a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e066:	2301      	movs	r3, #1
 800e068:	e022      	b.n	800e0b0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d002      	beq.n	800e078 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e072:	6878      	ldr	r0, [r7, #4]
 800e074:	f000 fe16 	bl	800eca4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	685a      	ldr	r2, [r3, #4]
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e086:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	689a      	ldr	r2, [r3, #8]
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e096:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	681a      	ldr	r2, [r3, #0]
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	f042 0201 	orr.w	r2, r2, #1
 800e0a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f000 fe9d 	bl	800ede8 <UART_CheckIdleState>
 800e0ae:	4603      	mov	r3, r0
}
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	3708      	adds	r7, #8
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	bd80      	pop	{r7, pc}

0800e0b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b08a      	sub	sp, #40	; 0x28
 800e0bc:	af02      	add	r7, sp, #8
 800e0be:	60f8      	str	r0, [r7, #12]
 800e0c0:	60b9      	str	r1, [r7, #8]
 800e0c2:	603b      	str	r3, [r7, #0]
 800e0c4:	4613      	mov	r3, r2
 800e0c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e0ce:	2b20      	cmp	r3, #32
 800e0d0:	d17b      	bne.n	800e1ca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e0d2:	68bb      	ldr	r3, [r7, #8]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d002      	beq.n	800e0de <HAL_UART_Transmit+0x26>
 800e0d8:	88fb      	ldrh	r3, [r7, #6]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d101      	bne.n	800e0e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e0de:	2301      	movs	r3, #1
 800e0e0:	e074      	b.n	800e1cc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	2221      	movs	r2, #33	; 0x21
 800e0ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e0f2:	f7f6 f8b9 	bl	8004268 <HAL_GetTick>
 800e0f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	88fa      	ldrh	r2, [r7, #6]
 800e0fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	88fa      	ldrh	r2, [r7, #6]
 800e104:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	689b      	ldr	r3, [r3, #8]
 800e10c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e110:	d108      	bne.n	800e124 <HAL_UART_Transmit+0x6c>
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	691b      	ldr	r3, [r3, #16]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d104      	bne.n	800e124 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e11a:	2300      	movs	r3, #0
 800e11c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e11e:	68bb      	ldr	r3, [r7, #8]
 800e120:	61bb      	str	r3, [r7, #24]
 800e122:	e003      	b.n	800e12c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e128:	2300      	movs	r3, #0
 800e12a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e12c:	e030      	b.n	800e190 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e12e:	683b      	ldr	r3, [r7, #0]
 800e130:	9300      	str	r3, [sp, #0]
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	2200      	movs	r2, #0
 800e136:	2180      	movs	r1, #128	; 0x80
 800e138:	68f8      	ldr	r0, [r7, #12]
 800e13a:	f000 feff 	bl	800ef3c <UART_WaitOnFlagUntilTimeout>
 800e13e:	4603      	mov	r3, r0
 800e140:	2b00      	cmp	r3, #0
 800e142:	d005      	beq.n	800e150 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	2220      	movs	r2, #32
 800e148:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800e14c:	2303      	movs	r3, #3
 800e14e:	e03d      	b.n	800e1cc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e150:	69fb      	ldr	r3, [r7, #28]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d10b      	bne.n	800e16e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e156:	69bb      	ldr	r3, [r7, #24]
 800e158:	881b      	ldrh	r3, [r3, #0]
 800e15a:	461a      	mov	r2, r3
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e164:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e166:	69bb      	ldr	r3, [r7, #24]
 800e168:	3302      	adds	r3, #2
 800e16a:	61bb      	str	r3, [r7, #24]
 800e16c:	e007      	b.n	800e17e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e16e:	69fb      	ldr	r3, [r7, #28]
 800e170:	781a      	ldrb	r2, [r3, #0]
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e178:	69fb      	ldr	r3, [r7, #28]
 800e17a:	3301      	adds	r3, #1
 800e17c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e184:	b29b      	uxth	r3, r3
 800e186:	3b01      	subs	r3, #1
 800e188:	b29a      	uxth	r2, r3
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e196:	b29b      	uxth	r3, r3
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d1c8      	bne.n	800e12e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	9300      	str	r3, [sp, #0]
 800e1a0:	697b      	ldr	r3, [r7, #20]
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	2140      	movs	r1, #64	; 0x40
 800e1a6:	68f8      	ldr	r0, [r7, #12]
 800e1a8:	f000 fec8 	bl	800ef3c <UART_WaitOnFlagUntilTimeout>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d005      	beq.n	800e1be <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	2220      	movs	r2, #32
 800e1b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800e1ba:	2303      	movs	r3, #3
 800e1bc:	e006      	b.n	800e1cc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	2220      	movs	r2, #32
 800e1c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	e000      	b.n	800e1cc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e1ca:	2302      	movs	r3, #2
  }
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3720      	adds	r7, #32
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}

0800e1d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e1d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e1d8:	b092      	sub	sp, #72	; 0x48
 800e1da:	af00      	add	r7, sp, #0
 800e1dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e1e4:	697b      	ldr	r3, [r7, #20]
 800e1e6:	689a      	ldr	r2, [r3, #8]
 800e1e8:	697b      	ldr	r3, [r7, #20]
 800e1ea:	691b      	ldr	r3, [r3, #16]
 800e1ec:	431a      	orrs	r2, r3
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	695b      	ldr	r3, [r3, #20]
 800e1f2:	431a      	orrs	r2, r3
 800e1f4:	697b      	ldr	r3, [r7, #20]
 800e1f6:	69db      	ldr	r3, [r3, #28]
 800e1f8:	4313      	orrs	r3, r2
 800e1fa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e1fc:	697b      	ldr	r3, [r7, #20]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	681a      	ldr	r2, [r3, #0]
 800e202:	4bbe      	ldr	r3, [pc, #760]	; (800e4fc <UART_SetConfig+0x328>)
 800e204:	4013      	ands	r3, r2
 800e206:	697a      	ldr	r2, [r7, #20]
 800e208:	6812      	ldr	r2, [r2, #0]
 800e20a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e20c:	430b      	orrs	r3, r1
 800e20e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e210:	697b      	ldr	r3, [r7, #20]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	685b      	ldr	r3, [r3, #4]
 800e216:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e21a:	697b      	ldr	r3, [r7, #20]
 800e21c:	68da      	ldr	r2, [r3, #12]
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	430a      	orrs	r2, r1
 800e224:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e226:	697b      	ldr	r3, [r7, #20]
 800e228:	699b      	ldr	r3, [r3, #24]
 800e22a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e22c:	697b      	ldr	r3, [r7, #20]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	4ab3      	ldr	r2, [pc, #716]	; (800e500 <UART_SetConfig+0x32c>)
 800e232:	4293      	cmp	r3, r2
 800e234:	d004      	beq.n	800e240 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e236:	697b      	ldr	r3, [r7, #20]
 800e238:	6a1b      	ldr	r3, [r3, #32]
 800e23a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e23c:	4313      	orrs	r3, r2
 800e23e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e240:	697b      	ldr	r3, [r7, #20]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	689a      	ldr	r2, [r3, #8]
 800e246:	4baf      	ldr	r3, [pc, #700]	; (800e504 <UART_SetConfig+0x330>)
 800e248:	4013      	ands	r3, r2
 800e24a:	697a      	ldr	r2, [r7, #20]
 800e24c:	6812      	ldr	r2, [r2, #0]
 800e24e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e250:	430b      	orrs	r3, r1
 800e252:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e25a:	f023 010f 	bic.w	r1, r3, #15
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	430a      	orrs	r2, r1
 800e268:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	4aa6      	ldr	r2, [pc, #664]	; (800e508 <UART_SetConfig+0x334>)
 800e270:	4293      	cmp	r3, r2
 800e272:	d177      	bne.n	800e364 <UART_SetConfig+0x190>
 800e274:	4ba5      	ldr	r3, [pc, #660]	; (800e50c <UART_SetConfig+0x338>)
 800e276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e278:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e27c:	2b28      	cmp	r3, #40	; 0x28
 800e27e:	d86d      	bhi.n	800e35c <UART_SetConfig+0x188>
 800e280:	a201      	add	r2, pc, #4	; (adr r2, 800e288 <UART_SetConfig+0xb4>)
 800e282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e286:	bf00      	nop
 800e288:	0800e32d 	.word	0x0800e32d
 800e28c:	0800e35d 	.word	0x0800e35d
 800e290:	0800e35d 	.word	0x0800e35d
 800e294:	0800e35d 	.word	0x0800e35d
 800e298:	0800e35d 	.word	0x0800e35d
 800e29c:	0800e35d 	.word	0x0800e35d
 800e2a0:	0800e35d 	.word	0x0800e35d
 800e2a4:	0800e35d 	.word	0x0800e35d
 800e2a8:	0800e335 	.word	0x0800e335
 800e2ac:	0800e35d 	.word	0x0800e35d
 800e2b0:	0800e35d 	.word	0x0800e35d
 800e2b4:	0800e35d 	.word	0x0800e35d
 800e2b8:	0800e35d 	.word	0x0800e35d
 800e2bc:	0800e35d 	.word	0x0800e35d
 800e2c0:	0800e35d 	.word	0x0800e35d
 800e2c4:	0800e35d 	.word	0x0800e35d
 800e2c8:	0800e33d 	.word	0x0800e33d
 800e2cc:	0800e35d 	.word	0x0800e35d
 800e2d0:	0800e35d 	.word	0x0800e35d
 800e2d4:	0800e35d 	.word	0x0800e35d
 800e2d8:	0800e35d 	.word	0x0800e35d
 800e2dc:	0800e35d 	.word	0x0800e35d
 800e2e0:	0800e35d 	.word	0x0800e35d
 800e2e4:	0800e35d 	.word	0x0800e35d
 800e2e8:	0800e345 	.word	0x0800e345
 800e2ec:	0800e35d 	.word	0x0800e35d
 800e2f0:	0800e35d 	.word	0x0800e35d
 800e2f4:	0800e35d 	.word	0x0800e35d
 800e2f8:	0800e35d 	.word	0x0800e35d
 800e2fc:	0800e35d 	.word	0x0800e35d
 800e300:	0800e35d 	.word	0x0800e35d
 800e304:	0800e35d 	.word	0x0800e35d
 800e308:	0800e34d 	.word	0x0800e34d
 800e30c:	0800e35d 	.word	0x0800e35d
 800e310:	0800e35d 	.word	0x0800e35d
 800e314:	0800e35d 	.word	0x0800e35d
 800e318:	0800e35d 	.word	0x0800e35d
 800e31c:	0800e35d 	.word	0x0800e35d
 800e320:	0800e35d 	.word	0x0800e35d
 800e324:	0800e35d 	.word	0x0800e35d
 800e328:	0800e355 	.word	0x0800e355
 800e32c:	2301      	movs	r3, #1
 800e32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e332:	e222      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e334:	2304      	movs	r3, #4
 800e336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e33a:	e21e      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e33c:	2308      	movs	r3, #8
 800e33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e342:	e21a      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e344:	2310      	movs	r3, #16
 800e346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e34a:	e216      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e34c:	2320      	movs	r3, #32
 800e34e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e352:	e212      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e354:	2340      	movs	r3, #64	; 0x40
 800e356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e35a:	e20e      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e35c:	2380      	movs	r3, #128	; 0x80
 800e35e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e362:	e20a      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e364:	697b      	ldr	r3, [r7, #20]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	4a69      	ldr	r2, [pc, #420]	; (800e510 <UART_SetConfig+0x33c>)
 800e36a:	4293      	cmp	r3, r2
 800e36c:	d130      	bne.n	800e3d0 <UART_SetConfig+0x1fc>
 800e36e:	4b67      	ldr	r3, [pc, #412]	; (800e50c <UART_SetConfig+0x338>)
 800e370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e372:	f003 0307 	and.w	r3, r3, #7
 800e376:	2b05      	cmp	r3, #5
 800e378:	d826      	bhi.n	800e3c8 <UART_SetConfig+0x1f4>
 800e37a:	a201      	add	r2, pc, #4	; (adr r2, 800e380 <UART_SetConfig+0x1ac>)
 800e37c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e380:	0800e399 	.word	0x0800e399
 800e384:	0800e3a1 	.word	0x0800e3a1
 800e388:	0800e3a9 	.word	0x0800e3a9
 800e38c:	0800e3b1 	.word	0x0800e3b1
 800e390:	0800e3b9 	.word	0x0800e3b9
 800e394:	0800e3c1 	.word	0x0800e3c1
 800e398:	2300      	movs	r3, #0
 800e39a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e39e:	e1ec      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e3a0:	2304      	movs	r3, #4
 800e3a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3a6:	e1e8      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e3a8:	2308      	movs	r3, #8
 800e3aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ae:	e1e4      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e3b0:	2310      	movs	r3, #16
 800e3b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3b6:	e1e0      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e3b8:	2320      	movs	r3, #32
 800e3ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3be:	e1dc      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e3c0:	2340      	movs	r3, #64	; 0x40
 800e3c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3c6:	e1d8      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e3c8:	2380      	movs	r3, #128	; 0x80
 800e3ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ce:	e1d4      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e3d0:	697b      	ldr	r3, [r7, #20]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	4a4f      	ldr	r2, [pc, #316]	; (800e514 <UART_SetConfig+0x340>)
 800e3d6:	4293      	cmp	r3, r2
 800e3d8:	d130      	bne.n	800e43c <UART_SetConfig+0x268>
 800e3da:	4b4c      	ldr	r3, [pc, #304]	; (800e50c <UART_SetConfig+0x338>)
 800e3dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3de:	f003 0307 	and.w	r3, r3, #7
 800e3e2:	2b05      	cmp	r3, #5
 800e3e4:	d826      	bhi.n	800e434 <UART_SetConfig+0x260>
 800e3e6:	a201      	add	r2, pc, #4	; (adr r2, 800e3ec <UART_SetConfig+0x218>)
 800e3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3ec:	0800e405 	.word	0x0800e405
 800e3f0:	0800e40d 	.word	0x0800e40d
 800e3f4:	0800e415 	.word	0x0800e415
 800e3f8:	0800e41d 	.word	0x0800e41d
 800e3fc:	0800e425 	.word	0x0800e425
 800e400:	0800e42d 	.word	0x0800e42d
 800e404:	2300      	movs	r3, #0
 800e406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e40a:	e1b6      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e40c:	2304      	movs	r3, #4
 800e40e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e412:	e1b2      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e414:	2308      	movs	r3, #8
 800e416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e41a:	e1ae      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e41c:	2310      	movs	r3, #16
 800e41e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e422:	e1aa      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e424:	2320      	movs	r3, #32
 800e426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e42a:	e1a6      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e42c:	2340      	movs	r3, #64	; 0x40
 800e42e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e432:	e1a2      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e434:	2380      	movs	r3, #128	; 0x80
 800e436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e43a:	e19e      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e43c:	697b      	ldr	r3, [r7, #20]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	4a35      	ldr	r2, [pc, #212]	; (800e518 <UART_SetConfig+0x344>)
 800e442:	4293      	cmp	r3, r2
 800e444:	d130      	bne.n	800e4a8 <UART_SetConfig+0x2d4>
 800e446:	4b31      	ldr	r3, [pc, #196]	; (800e50c <UART_SetConfig+0x338>)
 800e448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e44a:	f003 0307 	and.w	r3, r3, #7
 800e44e:	2b05      	cmp	r3, #5
 800e450:	d826      	bhi.n	800e4a0 <UART_SetConfig+0x2cc>
 800e452:	a201      	add	r2, pc, #4	; (adr r2, 800e458 <UART_SetConfig+0x284>)
 800e454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e458:	0800e471 	.word	0x0800e471
 800e45c:	0800e479 	.word	0x0800e479
 800e460:	0800e481 	.word	0x0800e481
 800e464:	0800e489 	.word	0x0800e489
 800e468:	0800e491 	.word	0x0800e491
 800e46c:	0800e499 	.word	0x0800e499
 800e470:	2300      	movs	r3, #0
 800e472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e476:	e180      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e478:	2304      	movs	r3, #4
 800e47a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e47e:	e17c      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e480:	2308      	movs	r3, #8
 800e482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e486:	e178      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e488:	2310      	movs	r3, #16
 800e48a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e48e:	e174      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e490:	2320      	movs	r3, #32
 800e492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e496:	e170      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e498:	2340      	movs	r3, #64	; 0x40
 800e49a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e49e:	e16c      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e4a0:	2380      	movs	r3, #128	; 0x80
 800e4a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4a6:	e168      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e4a8:	697b      	ldr	r3, [r7, #20]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	4a1b      	ldr	r2, [pc, #108]	; (800e51c <UART_SetConfig+0x348>)
 800e4ae:	4293      	cmp	r3, r2
 800e4b0:	d142      	bne.n	800e538 <UART_SetConfig+0x364>
 800e4b2:	4b16      	ldr	r3, [pc, #88]	; (800e50c <UART_SetConfig+0x338>)
 800e4b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4b6:	f003 0307 	and.w	r3, r3, #7
 800e4ba:	2b05      	cmp	r3, #5
 800e4bc:	d838      	bhi.n	800e530 <UART_SetConfig+0x35c>
 800e4be:	a201      	add	r2, pc, #4	; (adr r2, 800e4c4 <UART_SetConfig+0x2f0>)
 800e4c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4c4:	0800e4dd 	.word	0x0800e4dd
 800e4c8:	0800e4e5 	.word	0x0800e4e5
 800e4cc:	0800e4ed 	.word	0x0800e4ed
 800e4d0:	0800e4f5 	.word	0x0800e4f5
 800e4d4:	0800e521 	.word	0x0800e521
 800e4d8:	0800e529 	.word	0x0800e529
 800e4dc:	2300      	movs	r3, #0
 800e4de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4e2:	e14a      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e4e4:	2304      	movs	r3, #4
 800e4e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4ea:	e146      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e4ec:	2308      	movs	r3, #8
 800e4ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4f2:	e142      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e4f4:	2310      	movs	r3, #16
 800e4f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4fa:	e13e      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e4fc:	cfff69f3 	.word	0xcfff69f3
 800e500:	58000c00 	.word	0x58000c00
 800e504:	11fff4ff 	.word	0x11fff4ff
 800e508:	40011000 	.word	0x40011000
 800e50c:	58024400 	.word	0x58024400
 800e510:	40004400 	.word	0x40004400
 800e514:	40004800 	.word	0x40004800
 800e518:	40004c00 	.word	0x40004c00
 800e51c:	40005000 	.word	0x40005000
 800e520:	2320      	movs	r3, #32
 800e522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e526:	e128      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e528:	2340      	movs	r3, #64	; 0x40
 800e52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e52e:	e124      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e530:	2380      	movs	r3, #128	; 0x80
 800e532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e536:	e120      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e538:	697b      	ldr	r3, [r7, #20]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	4acb      	ldr	r2, [pc, #812]	; (800e86c <UART_SetConfig+0x698>)
 800e53e:	4293      	cmp	r3, r2
 800e540:	d176      	bne.n	800e630 <UART_SetConfig+0x45c>
 800e542:	4bcb      	ldr	r3, [pc, #812]	; (800e870 <UART_SetConfig+0x69c>)
 800e544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e546:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e54a:	2b28      	cmp	r3, #40	; 0x28
 800e54c:	d86c      	bhi.n	800e628 <UART_SetConfig+0x454>
 800e54e:	a201      	add	r2, pc, #4	; (adr r2, 800e554 <UART_SetConfig+0x380>)
 800e550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e554:	0800e5f9 	.word	0x0800e5f9
 800e558:	0800e629 	.word	0x0800e629
 800e55c:	0800e629 	.word	0x0800e629
 800e560:	0800e629 	.word	0x0800e629
 800e564:	0800e629 	.word	0x0800e629
 800e568:	0800e629 	.word	0x0800e629
 800e56c:	0800e629 	.word	0x0800e629
 800e570:	0800e629 	.word	0x0800e629
 800e574:	0800e601 	.word	0x0800e601
 800e578:	0800e629 	.word	0x0800e629
 800e57c:	0800e629 	.word	0x0800e629
 800e580:	0800e629 	.word	0x0800e629
 800e584:	0800e629 	.word	0x0800e629
 800e588:	0800e629 	.word	0x0800e629
 800e58c:	0800e629 	.word	0x0800e629
 800e590:	0800e629 	.word	0x0800e629
 800e594:	0800e609 	.word	0x0800e609
 800e598:	0800e629 	.word	0x0800e629
 800e59c:	0800e629 	.word	0x0800e629
 800e5a0:	0800e629 	.word	0x0800e629
 800e5a4:	0800e629 	.word	0x0800e629
 800e5a8:	0800e629 	.word	0x0800e629
 800e5ac:	0800e629 	.word	0x0800e629
 800e5b0:	0800e629 	.word	0x0800e629
 800e5b4:	0800e611 	.word	0x0800e611
 800e5b8:	0800e629 	.word	0x0800e629
 800e5bc:	0800e629 	.word	0x0800e629
 800e5c0:	0800e629 	.word	0x0800e629
 800e5c4:	0800e629 	.word	0x0800e629
 800e5c8:	0800e629 	.word	0x0800e629
 800e5cc:	0800e629 	.word	0x0800e629
 800e5d0:	0800e629 	.word	0x0800e629
 800e5d4:	0800e619 	.word	0x0800e619
 800e5d8:	0800e629 	.word	0x0800e629
 800e5dc:	0800e629 	.word	0x0800e629
 800e5e0:	0800e629 	.word	0x0800e629
 800e5e4:	0800e629 	.word	0x0800e629
 800e5e8:	0800e629 	.word	0x0800e629
 800e5ec:	0800e629 	.word	0x0800e629
 800e5f0:	0800e629 	.word	0x0800e629
 800e5f4:	0800e621 	.word	0x0800e621
 800e5f8:	2301      	movs	r3, #1
 800e5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5fe:	e0bc      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e600:	2304      	movs	r3, #4
 800e602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e606:	e0b8      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e608:	2308      	movs	r3, #8
 800e60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e60e:	e0b4      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e610:	2310      	movs	r3, #16
 800e612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e616:	e0b0      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e618:	2320      	movs	r3, #32
 800e61a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e61e:	e0ac      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e620:	2340      	movs	r3, #64	; 0x40
 800e622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e626:	e0a8      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e628:	2380      	movs	r3, #128	; 0x80
 800e62a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e62e:	e0a4      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e630:	697b      	ldr	r3, [r7, #20]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	4a8f      	ldr	r2, [pc, #572]	; (800e874 <UART_SetConfig+0x6a0>)
 800e636:	4293      	cmp	r3, r2
 800e638:	d130      	bne.n	800e69c <UART_SetConfig+0x4c8>
 800e63a:	4b8d      	ldr	r3, [pc, #564]	; (800e870 <UART_SetConfig+0x69c>)
 800e63c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e63e:	f003 0307 	and.w	r3, r3, #7
 800e642:	2b05      	cmp	r3, #5
 800e644:	d826      	bhi.n	800e694 <UART_SetConfig+0x4c0>
 800e646:	a201      	add	r2, pc, #4	; (adr r2, 800e64c <UART_SetConfig+0x478>)
 800e648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e64c:	0800e665 	.word	0x0800e665
 800e650:	0800e66d 	.word	0x0800e66d
 800e654:	0800e675 	.word	0x0800e675
 800e658:	0800e67d 	.word	0x0800e67d
 800e65c:	0800e685 	.word	0x0800e685
 800e660:	0800e68d 	.word	0x0800e68d
 800e664:	2300      	movs	r3, #0
 800e666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e66a:	e086      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e66c:	2304      	movs	r3, #4
 800e66e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e672:	e082      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e674:	2308      	movs	r3, #8
 800e676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e67a:	e07e      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e67c:	2310      	movs	r3, #16
 800e67e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e682:	e07a      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e684:	2320      	movs	r3, #32
 800e686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e68a:	e076      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e68c:	2340      	movs	r3, #64	; 0x40
 800e68e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e692:	e072      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e694:	2380      	movs	r3, #128	; 0x80
 800e696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e69a:	e06e      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e69c:	697b      	ldr	r3, [r7, #20]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	4a75      	ldr	r2, [pc, #468]	; (800e878 <UART_SetConfig+0x6a4>)
 800e6a2:	4293      	cmp	r3, r2
 800e6a4:	d130      	bne.n	800e708 <UART_SetConfig+0x534>
 800e6a6:	4b72      	ldr	r3, [pc, #456]	; (800e870 <UART_SetConfig+0x69c>)
 800e6a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6aa:	f003 0307 	and.w	r3, r3, #7
 800e6ae:	2b05      	cmp	r3, #5
 800e6b0:	d826      	bhi.n	800e700 <UART_SetConfig+0x52c>
 800e6b2:	a201      	add	r2, pc, #4	; (adr r2, 800e6b8 <UART_SetConfig+0x4e4>)
 800e6b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6b8:	0800e6d1 	.word	0x0800e6d1
 800e6bc:	0800e6d9 	.word	0x0800e6d9
 800e6c0:	0800e6e1 	.word	0x0800e6e1
 800e6c4:	0800e6e9 	.word	0x0800e6e9
 800e6c8:	0800e6f1 	.word	0x0800e6f1
 800e6cc:	0800e6f9 	.word	0x0800e6f9
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6d6:	e050      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e6d8:	2304      	movs	r3, #4
 800e6da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6de:	e04c      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e6e0:	2308      	movs	r3, #8
 800e6e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6e6:	e048      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e6e8:	2310      	movs	r3, #16
 800e6ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6ee:	e044      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e6f0:	2320      	movs	r3, #32
 800e6f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6f6:	e040      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e6f8:	2340      	movs	r3, #64	; 0x40
 800e6fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6fe:	e03c      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e700:	2380      	movs	r3, #128	; 0x80
 800e702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e706:	e038      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e708:	697b      	ldr	r3, [r7, #20]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	4a5b      	ldr	r2, [pc, #364]	; (800e87c <UART_SetConfig+0x6a8>)
 800e70e:	4293      	cmp	r3, r2
 800e710:	d130      	bne.n	800e774 <UART_SetConfig+0x5a0>
 800e712:	4b57      	ldr	r3, [pc, #348]	; (800e870 <UART_SetConfig+0x69c>)
 800e714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e716:	f003 0307 	and.w	r3, r3, #7
 800e71a:	2b05      	cmp	r3, #5
 800e71c:	d826      	bhi.n	800e76c <UART_SetConfig+0x598>
 800e71e:	a201      	add	r2, pc, #4	; (adr r2, 800e724 <UART_SetConfig+0x550>)
 800e720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e724:	0800e73d 	.word	0x0800e73d
 800e728:	0800e745 	.word	0x0800e745
 800e72c:	0800e74d 	.word	0x0800e74d
 800e730:	0800e755 	.word	0x0800e755
 800e734:	0800e75d 	.word	0x0800e75d
 800e738:	0800e765 	.word	0x0800e765
 800e73c:	2302      	movs	r3, #2
 800e73e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e742:	e01a      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e744:	2304      	movs	r3, #4
 800e746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e74a:	e016      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e74c:	2308      	movs	r3, #8
 800e74e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e752:	e012      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e754:	2310      	movs	r3, #16
 800e756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e75a:	e00e      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e75c:	2320      	movs	r3, #32
 800e75e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e762:	e00a      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e764:	2340      	movs	r3, #64	; 0x40
 800e766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e76a:	e006      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e76c:	2380      	movs	r3, #128	; 0x80
 800e76e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e772:	e002      	b.n	800e77a <UART_SetConfig+0x5a6>
 800e774:	2380      	movs	r3, #128	; 0x80
 800e776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e77a:	697b      	ldr	r3, [r7, #20]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	4a3f      	ldr	r2, [pc, #252]	; (800e87c <UART_SetConfig+0x6a8>)
 800e780:	4293      	cmp	r3, r2
 800e782:	f040 80f8 	bne.w	800e976 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e786:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e78a:	2b20      	cmp	r3, #32
 800e78c:	dc46      	bgt.n	800e81c <UART_SetConfig+0x648>
 800e78e:	2b02      	cmp	r3, #2
 800e790:	f2c0 8082 	blt.w	800e898 <UART_SetConfig+0x6c4>
 800e794:	3b02      	subs	r3, #2
 800e796:	2b1e      	cmp	r3, #30
 800e798:	d87e      	bhi.n	800e898 <UART_SetConfig+0x6c4>
 800e79a:	a201      	add	r2, pc, #4	; (adr r2, 800e7a0 <UART_SetConfig+0x5cc>)
 800e79c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7a0:	0800e823 	.word	0x0800e823
 800e7a4:	0800e899 	.word	0x0800e899
 800e7a8:	0800e82b 	.word	0x0800e82b
 800e7ac:	0800e899 	.word	0x0800e899
 800e7b0:	0800e899 	.word	0x0800e899
 800e7b4:	0800e899 	.word	0x0800e899
 800e7b8:	0800e83b 	.word	0x0800e83b
 800e7bc:	0800e899 	.word	0x0800e899
 800e7c0:	0800e899 	.word	0x0800e899
 800e7c4:	0800e899 	.word	0x0800e899
 800e7c8:	0800e899 	.word	0x0800e899
 800e7cc:	0800e899 	.word	0x0800e899
 800e7d0:	0800e899 	.word	0x0800e899
 800e7d4:	0800e899 	.word	0x0800e899
 800e7d8:	0800e84b 	.word	0x0800e84b
 800e7dc:	0800e899 	.word	0x0800e899
 800e7e0:	0800e899 	.word	0x0800e899
 800e7e4:	0800e899 	.word	0x0800e899
 800e7e8:	0800e899 	.word	0x0800e899
 800e7ec:	0800e899 	.word	0x0800e899
 800e7f0:	0800e899 	.word	0x0800e899
 800e7f4:	0800e899 	.word	0x0800e899
 800e7f8:	0800e899 	.word	0x0800e899
 800e7fc:	0800e899 	.word	0x0800e899
 800e800:	0800e899 	.word	0x0800e899
 800e804:	0800e899 	.word	0x0800e899
 800e808:	0800e899 	.word	0x0800e899
 800e80c:	0800e899 	.word	0x0800e899
 800e810:	0800e899 	.word	0x0800e899
 800e814:	0800e899 	.word	0x0800e899
 800e818:	0800e88b 	.word	0x0800e88b
 800e81c:	2b40      	cmp	r3, #64	; 0x40
 800e81e:	d037      	beq.n	800e890 <UART_SetConfig+0x6bc>
 800e820:	e03a      	b.n	800e898 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e822:	f7fe fb19 	bl	800ce58 <HAL_RCCEx_GetD3PCLK1Freq>
 800e826:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e828:	e03c      	b.n	800e8a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e82a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e82e:	4618      	mov	r0, r3
 800e830:	f7fe fb28 	bl	800ce84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e836:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e838:	e034      	b.n	800e8a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e83a:	f107 0318 	add.w	r3, r7, #24
 800e83e:	4618      	mov	r0, r3
 800e840:	f7fe fc74 	bl	800d12c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e844:	69fb      	ldr	r3, [r7, #28]
 800e846:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e848:	e02c      	b.n	800e8a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e84a:	4b09      	ldr	r3, [pc, #36]	; (800e870 <UART_SetConfig+0x69c>)
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	f003 0320 	and.w	r3, r3, #32
 800e852:	2b00      	cmp	r3, #0
 800e854:	d016      	beq.n	800e884 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e856:	4b06      	ldr	r3, [pc, #24]	; (800e870 <UART_SetConfig+0x69c>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	08db      	lsrs	r3, r3, #3
 800e85c:	f003 0303 	and.w	r3, r3, #3
 800e860:	4a07      	ldr	r2, [pc, #28]	; (800e880 <UART_SetConfig+0x6ac>)
 800e862:	fa22 f303 	lsr.w	r3, r2, r3
 800e866:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e868:	e01c      	b.n	800e8a4 <UART_SetConfig+0x6d0>
 800e86a:	bf00      	nop
 800e86c:	40011400 	.word	0x40011400
 800e870:	58024400 	.word	0x58024400
 800e874:	40007800 	.word	0x40007800
 800e878:	40007c00 	.word	0x40007c00
 800e87c:	58000c00 	.word	0x58000c00
 800e880:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e884:	4b9d      	ldr	r3, [pc, #628]	; (800eafc <UART_SetConfig+0x928>)
 800e886:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e888:	e00c      	b.n	800e8a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e88a:	4b9d      	ldr	r3, [pc, #628]	; (800eb00 <UART_SetConfig+0x92c>)
 800e88c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e88e:	e009      	b.n	800e8a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e890:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e894:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e896:	e005      	b.n	800e8a4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e898:	2300      	movs	r3, #0
 800e89a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e89c:	2301      	movs	r3, #1
 800e89e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e8a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e8a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	f000 81de 	beq.w	800ec68 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e8ac:	697b      	ldr	r3, [r7, #20]
 800e8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8b0:	4a94      	ldr	r2, [pc, #592]	; (800eb04 <UART_SetConfig+0x930>)
 800e8b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e8b6:	461a      	mov	r2, r3
 800e8b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800e8be:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e8c0:	697b      	ldr	r3, [r7, #20]
 800e8c2:	685a      	ldr	r2, [r3, #4]
 800e8c4:	4613      	mov	r3, r2
 800e8c6:	005b      	lsls	r3, r3, #1
 800e8c8:	4413      	add	r3, r2
 800e8ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8cc:	429a      	cmp	r2, r3
 800e8ce:	d305      	bcc.n	800e8dc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e8d0:	697b      	ldr	r3, [r7, #20]
 800e8d2:	685b      	ldr	r3, [r3, #4]
 800e8d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e8d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8d8:	429a      	cmp	r2, r3
 800e8da:	d903      	bls.n	800e8e4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e8dc:	2301      	movs	r3, #1
 800e8de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e8e2:	e1c1      	b.n	800ec68 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e8e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	60bb      	str	r3, [r7, #8]
 800e8ea:	60fa      	str	r2, [r7, #12]
 800e8ec:	697b      	ldr	r3, [r7, #20]
 800e8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8f0:	4a84      	ldr	r2, [pc, #528]	; (800eb04 <UART_SetConfig+0x930>)
 800e8f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e8f6:	b29b      	uxth	r3, r3
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	603b      	str	r3, [r7, #0]
 800e8fc:	607a      	str	r2, [r7, #4]
 800e8fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e902:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e906:	f7f3 fbdb 	bl	80020c0 <__aeabi_uldivmod>
 800e90a:	4602      	mov	r2, r0
 800e90c:	460b      	mov	r3, r1
 800e90e:	4610      	mov	r0, r2
 800e910:	4619      	mov	r1, r3
 800e912:	f04f 0200 	mov.w	r2, #0
 800e916:	f04f 0300 	mov.w	r3, #0
 800e91a:	020b      	lsls	r3, r1, #8
 800e91c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e920:	0202      	lsls	r2, r0, #8
 800e922:	6979      	ldr	r1, [r7, #20]
 800e924:	6849      	ldr	r1, [r1, #4]
 800e926:	0849      	lsrs	r1, r1, #1
 800e928:	2000      	movs	r0, #0
 800e92a:	460c      	mov	r4, r1
 800e92c:	4605      	mov	r5, r0
 800e92e:	eb12 0804 	adds.w	r8, r2, r4
 800e932:	eb43 0905 	adc.w	r9, r3, r5
 800e936:	697b      	ldr	r3, [r7, #20]
 800e938:	685b      	ldr	r3, [r3, #4]
 800e93a:	2200      	movs	r2, #0
 800e93c:	469a      	mov	sl, r3
 800e93e:	4693      	mov	fp, r2
 800e940:	4652      	mov	r2, sl
 800e942:	465b      	mov	r3, fp
 800e944:	4640      	mov	r0, r8
 800e946:	4649      	mov	r1, r9
 800e948:	f7f3 fbba 	bl	80020c0 <__aeabi_uldivmod>
 800e94c:	4602      	mov	r2, r0
 800e94e:	460b      	mov	r3, r1
 800e950:	4613      	mov	r3, r2
 800e952:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e956:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e95a:	d308      	bcc.n	800e96e <UART_SetConfig+0x79a>
 800e95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e95e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e962:	d204      	bcs.n	800e96e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e96a:	60da      	str	r2, [r3, #12]
 800e96c:	e17c      	b.n	800ec68 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e96e:	2301      	movs	r3, #1
 800e970:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e974:	e178      	b.n	800ec68 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e976:	697b      	ldr	r3, [r7, #20]
 800e978:	69db      	ldr	r3, [r3, #28]
 800e97a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e97e:	f040 80c5 	bne.w	800eb0c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e982:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e986:	2b20      	cmp	r3, #32
 800e988:	dc48      	bgt.n	800ea1c <UART_SetConfig+0x848>
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	db7b      	blt.n	800ea86 <UART_SetConfig+0x8b2>
 800e98e:	2b20      	cmp	r3, #32
 800e990:	d879      	bhi.n	800ea86 <UART_SetConfig+0x8b2>
 800e992:	a201      	add	r2, pc, #4	; (adr r2, 800e998 <UART_SetConfig+0x7c4>)
 800e994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e998:	0800ea23 	.word	0x0800ea23
 800e99c:	0800ea2b 	.word	0x0800ea2b
 800e9a0:	0800ea87 	.word	0x0800ea87
 800e9a4:	0800ea87 	.word	0x0800ea87
 800e9a8:	0800ea33 	.word	0x0800ea33
 800e9ac:	0800ea87 	.word	0x0800ea87
 800e9b0:	0800ea87 	.word	0x0800ea87
 800e9b4:	0800ea87 	.word	0x0800ea87
 800e9b8:	0800ea43 	.word	0x0800ea43
 800e9bc:	0800ea87 	.word	0x0800ea87
 800e9c0:	0800ea87 	.word	0x0800ea87
 800e9c4:	0800ea87 	.word	0x0800ea87
 800e9c8:	0800ea87 	.word	0x0800ea87
 800e9cc:	0800ea87 	.word	0x0800ea87
 800e9d0:	0800ea87 	.word	0x0800ea87
 800e9d4:	0800ea87 	.word	0x0800ea87
 800e9d8:	0800ea53 	.word	0x0800ea53
 800e9dc:	0800ea87 	.word	0x0800ea87
 800e9e0:	0800ea87 	.word	0x0800ea87
 800e9e4:	0800ea87 	.word	0x0800ea87
 800e9e8:	0800ea87 	.word	0x0800ea87
 800e9ec:	0800ea87 	.word	0x0800ea87
 800e9f0:	0800ea87 	.word	0x0800ea87
 800e9f4:	0800ea87 	.word	0x0800ea87
 800e9f8:	0800ea87 	.word	0x0800ea87
 800e9fc:	0800ea87 	.word	0x0800ea87
 800ea00:	0800ea87 	.word	0x0800ea87
 800ea04:	0800ea87 	.word	0x0800ea87
 800ea08:	0800ea87 	.word	0x0800ea87
 800ea0c:	0800ea87 	.word	0x0800ea87
 800ea10:	0800ea87 	.word	0x0800ea87
 800ea14:	0800ea87 	.word	0x0800ea87
 800ea18:	0800ea79 	.word	0x0800ea79
 800ea1c:	2b40      	cmp	r3, #64	; 0x40
 800ea1e:	d02e      	beq.n	800ea7e <UART_SetConfig+0x8aa>
 800ea20:	e031      	b.n	800ea86 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ea22:	f7fc fa47 	bl	800aeb4 <HAL_RCC_GetPCLK1Freq>
 800ea26:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ea28:	e033      	b.n	800ea92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ea2a:	f7fc fa59 	bl	800aee0 <HAL_RCC_GetPCLK2Freq>
 800ea2e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ea30:	e02f      	b.n	800ea92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ea32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ea36:	4618      	mov	r0, r3
 800ea38:	f7fe fa24 	bl	800ce84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ea3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea40:	e027      	b.n	800ea92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ea42:	f107 0318 	add.w	r3, r7, #24
 800ea46:	4618      	mov	r0, r3
 800ea48:	f7fe fb70 	bl	800d12c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ea4c:	69fb      	ldr	r3, [r7, #28]
 800ea4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea50:	e01f      	b.n	800ea92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ea52:	4b2d      	ldr	r3, [pc, #180]	; (800eb08 <UART_SetConfig+0x934>)
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	f003 0320 	and.w	r3, r3, #32
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d009      	beq.n	800ea72 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ea5e:	4b2a      	ldr	r3, [pc, #168]	; (800eb08 <UART_SetConfig+0x934>)
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	08db      	lsrs	r3, r3, #3
 800ea64:	f003 0303 	and.w	r3, r3, #3
 800ea68:	4a24      	ldr	r2, [pc, #144]	; (800eafc <UART_SetConfig+0x928>)
 800ea6a:	fa22 f303 	lsr.w	r3, r2, r3
 800ea6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ea70:	e00f      	b.n	800ea92 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ea72:	4b22      	ldr	r3, [pc, #136]	; (800eafc <UART_SetConfig+0x928>)
 800ea74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea76:	e00c      	b.n	800ea92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ea78:	4b21      	ldr	r3, [pc, #132]	; (800eb00 <UART_SetConfig+0x92c>)
 800ea7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea7c:	e009      	b.n	800ea92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ea7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ea82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea84:	e005      	b.n	800ea92 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ea86:	2300      	movs	r3, #0
 800ea88:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ea8a:	2301      	movs	r3, #1
 800ea8c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ea90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ea92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	f000 80e7 	beq.w	800ec68 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ea9a:	697b      	ldr	r3, [r7, #20]
 800ea9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea9e:	4a19      	ldr	r2, [pc, #100]	; (800eb04 <UART_SetConfig+0x930>)
 800eaa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eaa4:	461a      	mov	r2, r3
 800eaa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eaa8:	fbb3 f3f2 	udiv	r3, r3, r2
 800eaac:	005a      	lsls	r2, r3, #1
 800eaae:	697b      	ldr	r3, [r7, #20]
 800eab0:	685b      	ldr	r3, [r3, #4]
 800eab2:	085b      	lsrs	r3, r3, #1
 800eab4:	441a      	add	r2, r3
 800eab6:	697b      	ldr	r3, [r7, #20]
 800eab8:	685b      	ldr	r3, [r3, #4]
 800eaba:	fbb2 f3f3 	udiv	r3, r2, r3
 800eabe:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eac2:	2b0f      	cmp	r3, #15
 800eac4:	d916      	bls.n	800eaf4 <UART_SetConfig+0x920>
 800eac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eacc:	d212      	bcs.n	800eaf4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800eace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ead0:	b29b      	uxth	r3, r3
 800ead2:	f023 030f 	bic.w	r3, r3, #15
 800ead6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ead8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eada:	085b      	lsrs	r3, r3, #1
 800eadc:	b29b      	uxth	r3, r3
 800eade:	f003 0307 	and.w	r3, r3, #7
 800eae2:	b29a      	uxth	r2, r3
 800eae4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800eae6:	4313      	orrs	r3, r2
 800eae8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800eaea:	697b      	ldr	r3, [r7, #20]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800eaf0:	60da      	str	r2, [r3, #12]
 800eaf2:	e0b9      	b.n	800ec68 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800eaf4:	2301      	movs	r3, #1
 800eaf6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800eafa:	e0b5      	b.n	800ec68 <UART_SetConfig+0xa94>
 800eafc:	03d09000 	.word	0x03d09000
 800eb00:	003d0900 	.word	0x003d0900
 800eb04:	08020ce0 	.word	0x08020ce0
 800eb08:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800eb0c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800eb10:	2b20      	cmp	r3, #32
 800eb12:	dc49      	bgt.n	800eba8 <UART_SetConfig+0x9d4>
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	db7c      	blt.n	800ec12 <UART_SetConfig+0xa3e>
 800eb18:	2b20      	cmp	r3, #32
 800eb1a:	d87a      	bhi.n	800ec12 <UART_SetConfig+0xa3e>
 800eb1c:	a201      	add	r2, pc, #4	; (adr r2, 800eb24 <UART_SetConfig+0x950>)
 800eb1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb22:	bf00      	nop
 800eb24:	0800ebaf 	.word	0x0800ebaf
 800eb28:	0800ebb7 	.word	0x0800ebb7
 800eb2c:	0800ec13 	.word	0x0800ec13
 800eb30:	0800ec13 	.word	0x0800ec13
 800eb34:	0800ebbf 	.word	0x0800ebbf
 800eb38:	0800ec13 	.word	0x0800ec13
 800eb3c:	0800ec13 	.word	0x0800ec13
 800eb40:	0800ec13 	.word	0x0800ec13
 800eb44:	0800ebcf 	.word	0x0800ebcf
 800eb48:	0800ec13 	.word	0x0800ec13
 800eb4c:	0800ec13 	.word	0x0800ec13
 800eb50:	0800ec13 	.word	0x0800ec13
 800eb54:	0800ec13 	.word	0x0800ec13
 800eb58:	0800ec13 	.word	0x0800ec13
 800eb5c:	0800ec13 	.word	0x0800ec13
 800eb60:	0800ec13 	.word	0x0800ec13
 800eb64:	0800ebdf 	.word	0x0800ebdf
 800eb68:	0800ec13 	.word	0x0800ec13
 800eb6c:	0800ec13 	.word	0x0800ec13
 800eb70:	0800ec13 	.word	0x0800ec13
 800eb74:	0800ec13 	.word	0x0800ec13
 800eb78:	0800ec13 	.word	0x0800ec13
 800eb7c:	0800ec13 	.word	0x0800ec13
 800eb80:	0800ec13 	.word	0x0800ec13
 800eb84:	0800ec13 	.word	0x0800ec13
 800eb88:	0800ec13 	.word	0x0800ec13
 800eb8c:	0800ec13 	.word	0x0800ec13
 800eb90:	0800ec13 	.word	0x0800ec13
 800eb94:	0800ec13 	.word	0x0800ec13
 800eb98:	0800ec13 	.word	0x0800ec13
 800eb9c:	0800ec13 	.word	0x0800ec13
 800eba0:	0800ec13 	.word	0x0800ec13
 800eba4:	0800ec05 	.word	0x0800ec05
 800eba8:	2b40      	cmp	r3, #64	; 0x40
 800ebaa:	d02e      	beq.n	800ec0a <UART_SetConfig+0xa36>
 800ebac:	e031      	b.n	800ec12 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ebae:	f7fc f981 	bl	800aeb4 <HAL_RCC_GetPCLK1Freq>
 800ebb2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ebb4:	e033      	b.n	800ec1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ebb6:	f7fc f993 	bl	800aee0 <HAL_RCC_GetPCLK2Freq>
 800ebba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ebbc:	e02f      	b.n	800ec1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ebbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f7fe f95e 	bl	800ce84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ebc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebcc:	e027      	b.n	800ec1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ebce:	f107 0318 	add.w	r3, r7, #24
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	f7fe faaa 	bl	800d12c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ebd8:	69fb      	ldr	r3, [r7, #28]
 800ebda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebdc:	e01f      	b.n	800ec1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ebde:	4b2d      	ldr	r3, [pc, #180]	; (800ec94 <UART_SetConfig+0xac0>)
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	f003 0320 	and.w	r3, r3, #32
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d009      	beq.n	800ebfe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ebea:	4b2a      	ldr	r3, [pc, #168]	; (800ec94 <UART_SetConfig+0xac0>)
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	08db      	lsrs	r3, r3, #3
 800ebf0:	f003 0303 	and.w	r3, r3, #3
 800ebf4:	4a28      	ldr	r2, [pc, #160]	; (800ec98 <UART_SetConfig+0xac4>)
 800ebf6:	fa22 f303 	lsr.w	r3, r2, r3
 800ebfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ebfc:	e00f      	b.n	800ec1e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ebfe:	4b26      	ldr	r3, [pc, #152]	; (800ec98 <UART_SetConfig+0xac4>)
 800ec00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec02:	e00c      	b.n	800ec1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ec04:	4b25      	ldr	r3, [pc, #148]	; (800ec9c <UART_SetConfig+0xac8>)
 800ec06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec08:	e009      	b.n	800ec1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ec0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ec0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec10:	e005      	b.n	800ec1e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ec12:	2300      	movs	r3, #0
 800ec14:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ec16:	2301      	movs	r3, #1
 800ec18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ec1c:	bf00      	nop
    }

    if (pclk != 0U)
 800ec1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d021      	beq.n	800ec68 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ec24:	697b      	ldr	r3, [r7, #20]
 800ec26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec28:	4a1d      	ldr	r2, [pc, #116]	; (800eca0 <UART_SetConfig+0xacc>)
 800ec2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec2e:	461a      	mov	r2, r3
 800ec30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec32:	fbb3 f2f2 	udiv	r2, r3, r2
 800ec36:	697b      	ldr	r3, [r7, #20]
 800ec38:	685b      	ldr	r3, [r3, #4]
 800ec3a:	085b      	lsrs	r3, r3, #1
 800ec3c:	441a      	add	r2, r3
 800ec3e:	697b      	ldr	r3, [r7, #20]
 800ec40:	685b      	ldr	r3, [r3, #4]
 800ec42:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec46:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ec48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec4a:	2b0f      	cmp	r3, #15
 800ec4c:	d909      	bls.n	800ec62 <UART_SetConfig+0xa8e>
 800ec4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec54:	d205      	bcs.n	800ec62 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ec56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec58:	b29a      	uxth	r2, r3
 800ec5a:	697b      	ldr	r3, [r7, #20]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	60da      	str	r2, [r3, #12]
 800ec60:	e002      	b.n	800ec68 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ec62:	2301      	movs	r3, #1
 800ec64:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ec68:	697b      	ldr	r3, [r7, #20]
 800ec6a:	2201      	movs	r2, #1
 800ec6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	2201      	movs	r2, #1
 800ec74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ec78:	697b      	ldr	r3, [r7, #20]
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ec7e:	697b      	ldr	r3, [r7, #20]
 800ec80:	2200      	movs	r2, #0
 800ec82:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ec84:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ec88:	4618      	mov	r0, r3
 800ec8a:	3748      	adds	r7, #72	; 0x48
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ec92:	bf00      	nop
 800ec94:	58024400 	.word	0x58024400
 800ec98:	03d09000 	.word	0x03d09000
 800ec9c:	003d0900 	.word	0x003d0900
 800eca0:	08020ce0 	.word	0x08020ce0

0800eca4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800eca4:	b480      	push	{r7}
 800eca6:	b083      	sub	sp, #12
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecb0:	f003 0301 	and.w	r3, r3, #1
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d00a      	beq.n	800ecce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	685b      	ldr	r3, [r3, #4]
 800ecbe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	430a      	orrs	r2, r1
 800eccc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecd2:	f003 0302 	and.w	r3, r3, #2
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d00a      	beq.n	800ecf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	685b      	ldr	r3, [r3, #4]
 800ece0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	430a      	orrs	r2, r1
 800ecee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecf4:	f003 0304 	and.w	r3, r3, #4
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d00a      	beq.n	800ed12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	685b      	ldr	r3, [r3, #4]
 800ed02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	430a      	orrs	r2, r1
 800ed10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed16:	f003 0308 	and.w	r3, r3, #8
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d00a      	beq.n	800ed34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	685b      	ldr	r3, [r3, #4]
 800ed24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	430a      	orrs	r2, r1
 800ed32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed38:	f003 0310 	and.w	r3, r3, #16
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d00a      	beq.n	800ed56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	689b      	ldr	r3, [r3, #8]
 800ed46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	430a      	orrs	r2, r1
 800ed54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed5a:	f003 0320 	and.w	r3, r3, #32
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d00a      	beq.n	800ed78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	689b      	ldr	r3, [r3, #8]
 800ed68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	430a      	orrs	r2, r1
 800ed76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d01a      	beq.n	800edba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	685b      	ldr	r3, [r3, #4]
 800ed8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	430a      	orrs	r2, r1
 800ed98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eda2:	d10a      	bne.n	800edba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	685b      	ldr	r3, [r3, #4]
 800edaa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	430a      	orrs	r2, r1
 800edb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d00a      	beq.n	800eddc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	685b      	ldr	r3, [r3, #4]
 800edcc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	430a      	orrs	r2, r1
 800edda:	605a      	str	r2, [r3, #4]
  }
}
 800eddc:	bf00      	nop
 800edde:	370c      	adds	r7, #12
 800ede0:	46bd      	mov	sp, r7
 800ede2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede6:	4770      	bx	lr

0800ede8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b098      	sub	sp, #96	; 0x60
 800edec:	af02      	add	r7, sp, #8
 800edee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	2200      	movs	r2, #0
 800edf4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800edf8:	f7f5 fa36 	bl	8004268 <HAL_GetTick>
 800edfc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	f003 0308 	and.w	r3, r3, #8
 800ee08:	2b08      	cmp	r3, #8
 800ee0a:	d12f      	bne.n	800ee6c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ee0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ee10:	9300      	str	r3, [sp, #0]
 800ee12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee14:	2200      	movs	r2, #0
 800ee16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ee1a:	6878      	ldr	r0, [r7, #4]
 800ee1c:	f000 f88e 	bl	800ef3c <UART_WaitOnFlagUntilTimeout>
 800ee20:	4603      	mov	r3, r0
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d022      	beq.n	800ee6c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee2e:	e853 3f00 	ldrex	r3, [r3]
 800ee32:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ee34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ee3a:	653b      	str	r3, [r7, #80]	; 0x50
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	461a      	mov	r2, r3
 800ee42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee44:	647b      	str	r3, [r7, #68]	; 0x44
 800ee46:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ee4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ee4c:	e841 2300 	strex	r3, r2, [r1]
 800ee50:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ee52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d1e6      	bne.n	800ee26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	2220      	movs	r2, #32
 800ee5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2200      	movs	r2, #0
 800ee64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ee68:	2303      	movs	r3, #3
 800ee6a:	e063      	b.n	800ef34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	f003 0304 	and.w	r3, r3, #4
 800ee76:	2b04      	cmp	r3, #4
 800ee78:	d149      	bne.n	800ef0e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ee7a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ee7e:	9300      	str	r3, [sp, #0]
 800ee80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee82:	2200      	movs	r2, #0
 800ee84:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	f000 f857 	bl	800ef3c <UART_WaitOnFlagUntilTimeout>
 800ee8e:	4603      	mov	r3, r0
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d03c      	beq.n	800ef0e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee9c:	e853 3f00 	ldrex	r3, [r3]
 800eea0:	623b      	str	r3, [r7, #32]
   return(result);
 800eea2:	6a3b      	ldr	r3, [r7, #32]
 800eea4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eea8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	461a      	mov	r2, r3
 800eeb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eeb2:	633b      	str	r3, [r7, #48]	; 0x30
 800eeb4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eeb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eeb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eeba:	e841 2300 	strex	r3, r2, [r1]
 800eebe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800eec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d1e6      	bne.n	800ee94 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	3308      	adds	r3, #8
 800eecc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eece:	693b      	ldr	r3, [r7, #16]
 800eed0:	e853 3f00 	ldrex	r3, [r3]
 800eed4:	60fb      	str	r3, [r7, #12]
   return(result);
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	f023 0301 	bic.w	r3, r3, #1
 800eedc:	64bb      	str	r3, [r7, #72]	; 0x48
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	3308      	adds	r3, #8
 800eee4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eee6:	61fa      	str	r2, [r7, #28]
 800eee8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eeea:	69b9      	ldr	r1, [r7, #24]
 800eeec:	69fa      	ldr	r2, [r7, #28]
 800eeee:	e841 2300 	strex	r3, r2, [r1]
 800eef2:	617b      	str	r3, [r7, #20]
   return(result);
 800eef4:	697b      	ldr	r3, [r7, #20]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d1e5      	bne.n	800eec6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	2220      	movs	r2, #32
 800eefe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	2200      	movs	r2, #0
 800ef06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ef0a:	2303      	movs	r3, #3
 800ef0c:	e012      	b.n	800ef34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	2220      	movs	r2, #32
 800ef12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	2220      	movs	r2, #32
 800ef1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	2200      	movs	r2, #0
 800ef22:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	2200      	movs	r2, #0
 800ef28:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ef32:	2300      	movs	r3, #0
}
 800ef34:	4618      	mov	r0, r3
 800ef36:	3758      	adds	r7, #88	; 0x58
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	bd80      	pop	{r7, pc}

0800ef3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b084      	sub	sp, #16
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	60f8      	str	r0, [r7, #12]
 800ef44:	60b9      	str	r1, [r7, #8]
 800ef46:	603b      	str	r3, [r7, #0]
 800ef48:	4613      	mov	r3, r2
 800ef4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ef4c:	e049      	b.n	800efe2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ef4e:	69bb      	ldr	r3, [r7, #24]
 800ef50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef54:	d045      	beq.n	800efe2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ef56:	f7f5 f987 	bl	8004268 <HAL_GetTick>
 800ef5a:	4602      	mov	r2, r0
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	1ad3      	subs	r3, r2, r3
 800ef60:	69ba      	ldr	r2, [r7, #24]
 800ef62:	429a      	cmp	r2, r3
 800ef64:	d302      	bcc.n	800ef6c <UART_WaitOnFlagUntilTimeout+0x30>
 800ef66:	69bb      	ldr	r3, [r7, #24]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d101      	bne.n	800ef70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ef6c:	2303      	movs	r3, #3
 800ef6e:	e048      	b.n	800f002 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	f003 0304 	and.w	r3, r3, #4
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d031      	beq.n	800efe2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	69db      	ldr	r3, [r3, #28]
 800ef84:	f003 0308 	and.w	r3, r3, #8
 800ef88:	2b08      	cmp	r3, #8
 800ef8a:	d110      	bne.n	800efae <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	2208      	movs	r2, #8
 800ef92:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800ef94:	68f8      	ldr	r0, [r7, #12]
 800ef96:	f000 f839 	bl	800f00c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	2208      	movs	r2, #8
 800ef9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	2200      	movs	r2, #0
 800efa6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800efaa:	2301      	movs	r3, #1
 800efac:	e029      	b.n	800f002 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	69db      	ldr	r3, [r3, #28]
 800efb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800efb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800efbc:	d111      	bne.n	800efe2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800efc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800efc8:	68f8      	ldr	r0, [r7, #12]
 800efca:	f000 f81f 	bl	800f00c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	2220      	movs	r2, #32
 800efd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	2200      	movs	r2, #0
 800efda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800efde:	2303      	movs	r3, #3
 800efe0:	e00f      	b.n	800f002 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	69da      	ldr	r2, [r3, #28]
 800efe8:	68bb      	ldr	r3, [r7, #8]
 800efea:	4013      	ands	r3, r2
 800efec:	68ba      	ldr	r2, [r7, #8]
 800efee:	429a      	cmp	r2, r3
 800eff0:	bf0c      	ite	eq
 800eff2:	2301      	moveq	r3, #1
 800eff4:	2300      	movne	r3, #0
 800eff6:	b2db      	uxtb	r3, r3
 800eff8:	461a      	mov	r2, r3
 800effa:	79fb      	ldrb	r3, [r7, #7]
 800effc:	429a      	cmp	r2, r3
 800effe:	d0a6      	beq.n	800ef4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f000:	2300      	movs	r3, #0
}
 800f002:	4618      	mov	r0, r3
 800f004:	3710      	adds	r7, #16
 800f006:	46bd      	mov	sp, r7
 800f008:	bd80      	pop	{r7, pc}
	...

0800f00c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f00c:	b480      	push	{r7}
 800f00e:	b095      	sub	sp, #84	; 0x54
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f01a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f01c:	e853 3f00 	ldrex	r3, [r3]
 800f020:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f024:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f028:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	461a      	mov	r2, r3
 800f030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f032:	643b      	str	r3, [r7, #64]	; 0x40
 800f034:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f036:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f038:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f03a:	e841 2300 	strex	r3, r2, [r1]
 800f03e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f042:	2b00      	cmp	r3, #0
 800f044:	d1e6      	bne.n	800f014 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	3308      	adds	r3, #8
 800f04c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f04e:	6a3b      	ldr	r3, [r7, #32]
 800f050:	e853 3f00 	ldrex	r3, [r3]
 800f054:	61fb      	str	r3, [r7, #28]
   return(result);
 800f056:	69fa      	ldr	r2, [r7, #28]
 800f058:	4b1e      	ldr	r3, [pc, #120]	; (800f0d4 <UART_EndRxTransfer+0xc8>)
 800f05a:	4013      	ands	r3, r2
 800f05c:	64bb      	str	r3, [r7, #72]	; 0x48
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	3308      	adds	r3, #8
 800f064:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f066:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f068:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f06a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f06c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f06e:	e841 2300 	strex	r3, r2, [r1]
 800f072:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f076:	2b00      	cmp	r3, #0
 800f078:	d1e5      	bne.n	800f046 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f07e:	2b01      	cmp	r3, #1
 800f080:	d118      	bne.n	800f0b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	e853 3f00 	ldrex	r3, [r3]
 800f08e:	60bb      	str	r3, [r7, #8]
   return(result);
 800f090:	68bb      	ldr	r3, [r7, #8]
 800f092:	f023 0310 	bic.w	r3, r3, #16
 800f096:	647b      	str	r3, [r7, #68]	; 0x44
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	461a      	mov	r2, r3
 800f09e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0a0:	61bb      	str	r3, [r7, #24]
 800f0a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0a4:	6979      	ldr	r1, [r7, #20]
 800f0a6:	69ba      	ldr	r2, [r7, #24]
 800f0a8:	e841 2300 	strex	r3, r2, [r1]
 800f0ac:	613b      	str	r3, [r7, #16]
   return(result);
 800f0ae:	693b      	ldr	r3, [r7, #16]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d1e6      	bne.n	800f082 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2220      	movs	r2, #32
 800f0b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2200      	movs	r2, #0
 800f0c0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f0c8:	bf00      	nop
 800f0ca:	3754      	adds	r7, #84	; 0x54
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d2:	4770      	bx	lr
 800f0d4:	effffffe 	.word	0xeffffffe

0800f0d8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f0d8:	b480      	push	{r7}
 800f0da:	b085      	sub	sp, #20
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f0e6:	2b01      	cmp	r3, #1
 800f0e8:	d101      	bne.n	800f0ee <HAL_UARTEx_DisableFifoMode+0x16>
 800f0ea:	2302      	movs	r3, #2
 800f0ec:	e027      	b.n	800f13e <HAL_UARTEx_DisableFifoMode+0x66>
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	2201      	movs	r2, #1
 800f0f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	2224      	movs	r2, #36	; 0x24
 800f0fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	681a      	ldr	r2, [r3, #0]
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	f022 0201 	bic.w	r2, r2, #1
 800f114:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f11c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	2200      	movs	r2, #0
 800f122:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	68fa      	ldr	r2, [r7, #12]
 800f12a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2220      	movs	r2, #32
 800f130:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	2200      	movs	r2, #0
 800f138:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f13c:	2300      	movs	r3, #0
}
 800f13e:	4618      	mov	r0, r3
 800f140:	3714      	adds	r7, #20
 800f142:	46bd      	mov	sp, r7
 800f144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f148:	4770      	bx	lr

0800f14a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f14a:	b580      	push	{r7, lr}
 800f14c:	b084      	sub	sp, #16
 800f14e:	af00      	add	r7, sp, #0
 800f150:	6078      	str	r0, [r7, #4]
 800f152:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f15a:	2b01      	cmp	r3, #1
 800f15c:	d101      	bne.n	800f162 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f15e:	2302      	movs	r3, #2
 800f160:	e02d      	b.n	800f1be <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	2201      	movs	r2, #1
 800f166:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	2224      	movs	r2, #36	; 0x24
 800f16e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	681a      	ldr	r2, [r3, #0]
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	f022 0201 	bic.w	r2, r2, #1
 800f188:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	689b      	ldr	r3, [r3, #8]
 800f190:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	683a      	ldr	r2, [r7, #0]
 800f19a:	430a      	orrs	r2, r1
 800f19c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f19e:	6878      	ldr	r0, [r7, #4]
 800f1a0:	f000 f850 	bl	800f244 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	68fa      	ldr	r2, [r7, #12]
 800f1aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	2220      	movs	r2, #32
 800f1b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f1bc:	2300      	movs	r3, #0
}
 800f1be:	4618      	mov	r0, r3
 800f1c0:	3710      	adds	r7, #16
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	bd80      	pop	{r7, pc}

0800f1c6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f1c6:	b580      	push	{r7, lr}
 800f1c8:	b084      	sub	sp, #16
 800f1ca:	af00      	add	r7, sp, #0
 800f1cc:	6078      	str	r0, [r7, #4]
 800f1ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f1d6:	2b01      	cmp	r3, #1
 800f1d8:	d101      	bne.n	800f1de <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f1da:	2302      	movs	r3, #2
 800f1dc:	e02d      	b.n	800f23a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	2201      	movs	r2, #1
 800f1e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	2224      	movs	r2, #36	; 0x24
 800f1ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	681a      	ldr	r2, [r3, #0]
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	f022 0201 	bic.w	r2, r2, #1
 800f204:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	689b      	ldr	r3, [r3, #8]
 800f20c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	683a      	ldr	r2, [r7, #0]
 800f216:	430a      	orrs	r2, r1
 800f218:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f21a:	6878      	ldr	r0, [r7, #4]
 800f21c:	f000 f812 	bl	800f244 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	68fa      	ldr	r2, [r7, #12]
 800f226:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2220      	movs	r2, #32
 800f22c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2200      	movs	r2, #0
 800f234:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f238:	2300      	movs	r3, #0
}
 800f23a:	4618      	mov	r0, r3
 800f23c:	3710      	adds	r7, #16
 800f23e:	46bd      	mov	sp, r7
 800f240:	bd80      	pop	{r7, pc}
	...

0800f244 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f244:	b480      	push	{r7}
 800f246:	b085      	sub	sp, #20
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f250:	2b00      	cmp	r3, #0
 800f252:	d108      	bne.n	800f266 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	2201      	movs	r2, #1
 800f258:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	2201      	movs	r2, #1
 800f260:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f264:	e031      	b.n	800f2ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f266:	2310      	movs	r3, #16
 800f268:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f26a:	2310      	movs	r3, #16
 800f26c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	689b      	ldr	r3, [r3, #8]
 800f274:	0e5b      	lsrs	r3, r3, #25
 800f276:	b2db      	uxtb	r3, r3
 800f278:	f003 0307 	and.w	r3, r3, #7
 800f27c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	689b      	ldr	r3, [r3, #8]
 800f284:	0f5b      	lsrs	r3, r3, #29
 800f286:	b2db      	uxtb	r3, r3
 800f288:	f003 0307 	and.w	r3, r3, #7
 800f28c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f28e:	7bbb      	ldrb	r3, [r7, #14]
 800f290:	7b3a      	ldrb	r2, [r7, #12]
 800f292:	4911      	ldr	r1, [pc, #68]	; (800f2d8 <UARTEx_SetNbDataToProcess+0x94>)
 800f294:	5c8a      	ldrb	r2, [r1, r2]
 800f296:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f29a:	7b3a      	ldrb	r2, [r7, #12]
 800f29c:	490f      	ldr	r1, [pc, #60]	; (800f2dc <UARTEx_SetNbDataToProcess+0x98>)
 800f29e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f2a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800f2a4:	b29a      	uxth	r2, r3
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f2ac:	7bfb      	ldrb	r3, [r7, #15]
 800f2ae:	7b7a      	ldrb	r2, [r7, #13]
 800f2b0:	4909      	ldr	r1, [pc, #36]	; (800f2d8 <UARTEx_SetNbDataToProcess+0x94>)
 800f2b2:	5c8a      	ldrb	r2, [r1, r2]
 800f2b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f2b8:	7b7a      	ldrb	r2, [r7, #13]
 800f2ba:	4908      	ldr	r1, [pc, #32]	; (800f2dc <UARTEx_SetNbDataToProcess+0x98>)
 800f2bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f2be:	fb93 f3f2 	sdiv	r3, r3, r2
 800f2c2:	b29a      	uxth	r2, r3
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f2ca:	bf00      	nop
 800f2cc:	3714      	adds	r7, #20
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d4:	4770      	bx	lr
 800f2d6:	bf00      	nop
 800f2d8:	08020cf8 	.word	0x08020cf8
 800f2dc:	08020d00 	.word	0x08020d00

0800f2e0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b084      	sub	sp, #16
 800f2e4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800f2e6:	4b8d      	ldr	r3, [pc, #564]	; (800f51c <MX_LWIP_Init+0x23c>)
 800f2e8:	22c0      	movs	r2, #192	; 0xc0
 800f2ea:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800f2ec:	4b8b      	ldr	r3, [pc, #556]	; (800f51c <MX_LWIP_Init+0x23c>)
 800f2ee:	22a8      	movs	r2, #168	; 0xa8
 800f2f0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800f2f2:	4b8a      	ldr	r3, [pc, #552]	; (800f51c <MX_LWIP_Init+0x23c>)
 800f2f4:	2201      	movs	r2, #1
 800f2f6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 800f2f8:	4b88      	ldr	r3, [pc, #544]	; (800f51c <MX_LWIP_Init+0x23c>)
 800f2fa:	220a      	movs	r2, #10
 800f2fc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800f2fe:	4b88      	ldr	r3, [pc, #544]	; (800f520 <MX_LWIP_Init+0x240>)
 800f300:	22ff      	movs	r2, #255	; 0xff
 800f302:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800f304:	4b86      	ldr	r3, [pc, #536]	; (800f520 <MX_LWIP_Init+0x240>)
 800f306:	22ff      	movs	r2, #255	; 0xff
 800f308:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 800f30a:	4b85      	ldr	r3, [pc, #532]	; (800f520 <MX_LWIP_Init+0x240>)
 800f30c:	2200      	movs	r2, #0
 800f30e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800f310:	4b83      	ldr	r3, [pc, #524]	; (800f520 <MX_LWIP_Init+0x240>)
 800f312:	2200      	movs	r2, #0
 800f314:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800f316:	4b83      	ldr	r3, [pc, #524]	; (800f524 <MX_LWIP_Init+0x244>)
 800f318:	22c0      	movs	r2, #192	; 0xc0
 800f31a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800f31c:	4b81      	ldr	r3, [pc, #516]	; (800f524 <MX_LWIP_Init+0x244>)
 800f31e:	22a8      	movs	r2, #168	; 0xa8
 800f320:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800f322:	4b80      	ldr	r3, [pc, #512]	; (800f524 <MX_LWIP_Init+0x244>)
 800f324:	2201      	movs	r2, #1
 800f326:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800f328:	4b7e      	ldr	r3, [pc, #504]	; (800f524 <MX_LWIP_Init+0x244>)
 800f32a:	2201      	movs	r2, #1
 800f32c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800f32e:	f000 fddf 	bl	800fef0 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800f332:	4b7a      	ldr	r3, [pc, #488]	; (800f51c <MX_LWIP_Init+0x23c>)
 800f334:	781b      	ldrb	r3, [r3, #0]
 800f336:	061a      	lsls	r2, r3, #24
 800f338:	4b78      	ldr	r3, [pc, #480]	; (800f51c <MX_LWIP_Init+0x23c>)
 800f33a:	785b      	ldrb	r3, [r3, #1]
 800f33c:	041b      	lsls	r3, r3, #16
 800f33e:	431a      	orrs	r2, r3
 800f340:	4b76      	ldr	r3, [pc, #472]	; (800f51c <MX_LWIP_Init+0x23c>)
 800f342:	789b      	ldrb	r3, [r3, #2]
 800f344:	021b      	lsls	r3, r3, #8
 800f346:	4313      	orrs	r3, r2
 800f348:	4a74      	ldr	r2, [pc, #464]	; (800f51c <MX_LWIP_Init+0x23c>)
 800f34a:	78d2      	ldrb	r2, [r2, #3]
 800f34c:	4313      	orrs	r3, r2
 800f34e:	061a      	lsls	r2, r3, #24
 800f350:	4b72      	ldr	r3, [pc, #456]	; (800f51c <MX_LWIP_Init+0x23c>)
 800f352:	781b      	ldrb	r3, [r3, #0]
 800f354:	0619      	lsls	r1, r3, #24
 800f356:	4b71      	ldr	r3, [pc, #452]	; (800f51c <MX_LWIP_Init+0x23c>)
 800f358:	785b      	ldrb	r3, [r3, #1]
 800f35a:	041b      	lsls	r3, r3, #16
 800f35c:	4319      	orrs	r1, r3
 800f35e:	4b6f      	ldr	r3, [pc, #444]	; (800f51c <MX_LWIP_Init+0x23c>)
 800f360:	789b      	ldrb	r3, [r3, #2]
 800f362:	021b      	lsls	r3, r3, #8
 800f364:	430b      	orrs	r3, r1
 800f366:	496d      	ldr	r1, [pc, #436]	; (800f51c <MX_LWIP_Init+0x23c>)
 800f368:	78c9      	ldrb	r1, [r1, #3]
 800f36a:	430b      	orrs	r3, r1
 800f36c:	021b      	lsls	r3, r3, #8
 800f36e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f372:	431a      	orrs	r2, r3
 800f374:	4b69      	ldr	r3, [pc, #420]	; (800f51c <MX_LWIP_Init+0x23c>)
 800f376:	781b      	ldrb	r3, [r3, #0]
 800f378:	0619      	lsls	r1, r3, #24
 800f37a:	4b68      	ldr	r3, [pc, #416]	; (800f51c <MX_LWIP_Init+0x23c>)
 800f37c:	785b      	ldrb	r3, [r3, #1]
 800f37e:	041b      	lsls	r3, r3, #16
 800f380:	4319      	orrs	r1, r3
 800f382:	4b66      	ldr	r3, [pc, #408]	; (800f51c <MX_LWIP_Init+0x23c>)
 800f384:	789b      	ldrb	r3, [r3, #2]
 800f386:	021b      	lsls	r3, r3, #8
 800f388:	430b      	orrs	r3, r1
 800f38a:	4964      	ldr	r1, [pc, #400]	; (800f51c <MX_LWIP_Init+0x23c>)
 800f38c:	78c9      	ldrb	r1, [r1, #3]
 800f38e:	430b      	orrs	r3, r1
 800f390:	0a1b      	lsrs	r3, r3, #8
 800f392:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f396:	431a      	orrs	r2, r3
 800f398:	4b60      	ldr	r3, [pc, #384]	; (800f51c <MX_LWIP_Init+0x23c>)
 800f39a:	781b      	ldrb	r3, [r3, #0]
 800f39c:	0619      	lsls	r1, r3, #24
 800f39e:	4b5f      	ldr	r3, [pc, #380]	; (800f51c <MX_LWIP_Init+0x23c>)
 800f3a0:	785b      	ldrb	r3, [r3, #1]
 800f3a2:	041b      	lsls	r3, r3, #16
 800f3a4:	4319      	orrs	r1, r3
 800f3a6:	4b5d      	ldr	r3, [pc, #372]	; (800f51c <MX_LWIP_Init+0x23c>)
 800f3a8:	789b      	ldrb	r3, [r3, #2]
 800f3aa:	021b      	lsls	r3, r3, #8
 800f3ac:	430b      	orrs	r3, r1
 800f3ae:	495b      	ldr	r1, [pc, #364]	; (800f51c <MX_LWIP_Init+0x23c>)
 800f3b0:	78c9      	ldrb	r1, [r1, #3]
 800f3b2:	430b      	orrs	r3, r1
 800f3b4:	0e1b      	lsrs	r3, r3, #24
 800f3b6:	4313      	orrs	r3, r2
 800f3b8:	4a5b      	ldr	r2, [pc, #364]	; (800f528 <MX_LWIP_Init+0x248>)
 800f3ba:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800f3bc:	4b58      	ldr	r3, [pc, #352]	; (800f520 <MX_LWIP_Init+0x240>)
 800f3be:	781b      	ldrb	r3, [r3, #0]
 800f3c0:	061a      	lsls	r2, r3, #24
 800f3c2:	4b57      	ldr	r3, [pc, #348]	; (800f520 <MX_LWIP_Init+0x240>)
 800f3c4:	785b      	ldrb	r3, [r3, #1]
 800f3c6:	041b      	lsls	r3, r3, #16
 800f3c8:	431a      	orrs	r2, r3
 800f3ca:	4b55      	ldr	r3, [pc, #340]	; (800f520 <MX_LWIP_Init+0x240>)
 800f3cc:	789b      	ldrb	r3, [r3, #2]
 800f3ce:	021b      	lsls	r3, r3, #8
 800f3d0:	4313      	orrs	r3, r2
 800f3d2:	4a53      	ldr	r2, [pc, #332]	; (800f520 <MX_LWIP_Init+0x240>)
 800f3d4:	78d2      	ldrb	r2, [r2, #3]
 800f3d6:	4313      	orrs	r3, r2
 800f3d8:	061a      	lsls	r2, r3, #24
 800f3da:	4b51      	ldr	r3, [pc, #324]	; (800f520 <MX_LWIP_Init+0x240>)
 800f3dc:	781b      	ldrb	r3, [r3, #0]
 800f3de:	0619      	lsls	r1, r3, #24
 800f3e0:	4b4f      	ldr	r3, [pc, #316]	; (800f520 <MX_LWIP_Init+0x240>)
 800f3e2:	785b      	ldrb	r3, [r3, #1]
 800f3e4:	041b      	lsls	r3, r3, #16
 800f3e6:	4319      	orrs	r1, r3
 800f3e8:	4b4d      	ldr	r3, [pc, #308]	; (800f520 <MX_LWIP_Init+0x240>)
 800f3ea:	789b      	ldrb	r3, [r3, #2]
 800f3ec:	021b      	lsls	r3, r3, #8
 800f3ee:	430b      	orrs	r3, r1
 800f3f0:	494b      	ldr	r1, [pc, #300]	; (800f520 <MX_LWIP_Init+0x240>)
 800f3f2:	78c9      	ldrb	r1, [r1, #3]
 800f3f4:	430b      	orrs	r3, r1
 800f3f6:	021b      	lsls	r3, r3, #8
 800f3f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f3fc:	431a      	orrs	r2, r3
 800f3fe:	4b48      	ldr	r3, [pc, #288]	; (800f520 <MX_LWIP_Init+0x240>)
 800f400:	781b      	ldrb	r3, [r3, #0]
 800f402:	0619      	lsls	r1, r3, #24
 800f404:	4b46      	ldr	r3, [pc, #280]	; (800f520 <MX_LWIP_Init+0x240>)
 800f406:	785b      	ldrb	r3, [r3, #1]
 800f408:	041b      	lsls	r3, r3, #16
 800f40a:	4319      	orrs	r1, r3
 800f40c:	4b44      	ldr	r3, [pc, #272]	; (800f520 <MX_LWIP_Init+0x240>)
 800f40e:	789b      	ldrb	r3, [r3, #2]
 800f410:	021b      	lsls	r3, r3, #8
 800f412:	430b      	orrs	r3, r1
 800f414:	4942      	ldr	r1, [pc, #264]	; (800f520 <MX_LWIP_Init+0x240>)
 800f416:	78c9      	ldrb	r1, [r1, #3]
 800f418:	430b      	orrs	r3, r1
 800f41a:	0a1b      	lsrs	r3, r3, #8
 800f41c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f420:	431a      	orrs	r2, r3
 800f422:	4b3f      	ldr	r3, [pc, #252]	; (800f520 <MX_LWIP_Init+0x240>)
 800f424:	781b      	ldrb	r3, [r3, #0]
 800f426:	0619      	lsls	r1, r3, #24
 800f428:	4b3d      	ldr	r3, [pc, #244]	; (800f520 <MX_LWIP_Init+0x240>)
 800f42a:	785b      	ldrb	r3, [r3, #1]
 800f42c:	041b      	lsls	r3, r3, #16
 800f42e:	4319      	orrs	r1, r3
 800f430:	4b3b      	ldr	r3, [pc, #236]	; (800f520 <MX_LWIP_Init+0x240>)
 800f432:	789b      	ldrb	r3, [r3, #2]
 800f434:	021b      	lsls	r3, r3, #8
 800f436:	430b      	orrs	r3, r1
 800f438:	4939      	ldr	r1, [pc, #228]	; (800f520 <MX_LWIP_Init+0x240>)
 800f43a:	78c9      	ldrb	r1, [r1, #3]
 800f43c:	430b      	orrs	r3, r1
 800f43e:	0e1b      	lsrs	r3, r3, #24
 800f440:	4313      	orrs	r3, r2
 800f442:	4a3a      	ldr	r2, [pc, #232]	; (800f52c <MX_LWIP_Init+0x24c>)
 800f444:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800f446:	4b37      	ldr	r3, [pc, #220]	; (800f524 <MX_LWIP_Init+0x244>)
 800f448:	781b      	ldrb	r3, [r3, #0]
 800f44a:	061a      	lsls	r2, r3, #24
 800f44c:	4b35      	ldr	r3, [pc, #212]	; (800f524 <MX_LWIP_Init+0x244>)
 800f44e:	785b      	ldrb	r3, [r3, #1]
 800f450:	041b      	lsls	r3, r3, #16
 800f452:	431a      	orrs	r2, r3
 800f454:	4b33      	ldr	r3, [pc, #204]	; (800f524 <MX_LWIP_Init+0x244>)
 800f456:	789b      	ldrb	r3, [r3, #2]
 800f458:	021b      	lsls	r3, r3, #8
 800f45a:	4313      	orrs	r3, r2
 800f45c:	4a31      	ldr	r2, [pc, #196]	; (800f524 <MX_LWIP_Init+0x244>)
 800f45e:	78d2      	ldrb	r2, [r2, #3]
 800f460:	4313      	orrs	r3, r2
 800f462:	061a      	lsls	r2, r3, #24
 800f464:	4b2f      	ldr	r3, [pc, #188]	; (800f524 <MX_LWIP_Init+0x244>)
 800f466:	781b      	ldrb	r3, [r3, #0]
 800f468:	0619      	lsls	r1, r3, #24
 800f46a:	4b2e      	ldr	r3, [pc, #184]	; (800f524 <MX_LWIP_Init+0x244>)
 800f46c:	785b      	ldrb	r3, [r3, #1]
 800f46e:	041b      	lsls	r3, r3, #16
 800f470:	4319      	orrs	r1, r3
 800f472:	4b2c      	ldr	r3, [pc, #176]	; (800f524 <MX_LWIP_Init+0x244>)
 800f474:	789b      	ldrb	r3, [r3, #2]
 800f476:	021b      	lsls	r3, r3, #8
 800f478:	430b      	orrs	r3, r1
 800f47a:	492a      	ldr	r1, [pc, #168]	; (800f524 <MX_LWIP_Init+0x244>)
 800f47c:	78c9      	ldrb	r1, [r1, #3]
 800f47e:	430b      	orrs	r3, r1
 800f480:	021b      	lsls	r3, r3, #8
 800f482:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f486:	431a      	orrs	r2, r3
 800f488:	4b26      	ldr	r3, [pc, #152]	; (800f524 <MX_LWIP_Init+0x244>)
 800f48a:	781b      	ldrb	r3, [r3, #0]
 800f48c:	0619      	lsls	r1, r3, #24
 800f48e:	4b25      	ldr	r3, [pc, #148]	; (800f524 <MX_LWIP_Init+0x244>)
 800f490:	785b      	ldrb	r3, [r3, #1]
 800f492:	041b      	lsls	r3, r3, #16
 800f494:	4319      	orrs	r1, r3
 800f496:	4b23      	ldr	r3, [pc, #140]	; (800f524 <MX_LWIP_Init+0x244>)
 800f498:	789b      	ldrb	r3, [r3, #2]
 800f49a:	021b      	lsls	r3, r3, #8
 800f49c:	430b      	orrs	r3, r1
 800f49e:	4921      	ldr	r1, [pc, #132]	; (800f524 <MX_LWIP_Init+0x244>)
 800f4a0:	78c9      	ldrb	r1, [r1, #3]
 800f4a2:	430b      	orrs	r3, r1
 800f4a4:	0a1b      	lsrs	r3, r3, #8
 800f4a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f4aa:	431a      	orrs	r2, r3
 800f4ac:	4b1d      	ldr	r3, [pc, #116]	; (800f524 <MX_LWIP_Init+0x244>)
 800f4ae:	781b      	ldrb	r3, [r3, #0]
 800f4b0:	0619      	lsls	r1, r3, #24
 800f4b2:	4b1c      	ldr	r3, [pc, #112]	; (800f524 <MX_LWIP_Init+0x244>)
 800f4b4:	785b      	ldrb	r3, [r3, #1]
 800f4b6:	041b      	lsls	r3, r3, #16
 800f4b8:	4319      	orrs	r1, r3
 800f4ba:	4b1a      	ldr	r3, [pc, #104]	; (800f524 <MX_LWIP_Init+0x244>)
 800f4bc:	789b      	ldrb	r3, [r3, #2]
 800f4be:	021b      	lsls	r3, r3, #8
 800f4c0:	430b      	orrs	r3, r1
 800f4c2:	4918      	ldr	r1, [pc, #96]	; (800f524 <MX_LWIP_Init+0x244>)
 800f4c4:	78c9      	ldrb	r1, [r1, #3]
 800f4c6:	430b      	orrs	r3, r1
 800f4c8:	0e1b      	lsrs	r3, r3, #24
 800f4ca:	4313      	orrs	r3, r2
 800f4cc:	4a18      	ldr	r2, [pc, #96]	; (800f530 <MX_LWIP_Init+0x250>)
 800f4ce:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800f4d0:	4b18      	ldr	r3, [pc, #96]	; (800f534 <MX_LWIP_Init+0x254>)
 800f4d2:	9302      	str	r3, [sp, #8]
 800f4d4:	4b18      	ldr	r3, [pc, #96]	; (800f538 <MX_LWIP_Init+0x258>)
 800f4d6:	9301      	str	r3, [sp, #4]
 800f4d8:	2300      	movs	r3, #0
 800f4da:	9300      	str	r3, [sp, #0]
 800f4dc:	4b14      	ldr	r3, [pc, #80]	; (800f530 <MX_LWIP_Init+0x250>)
 800f4de:	4a13      	ldr	r2, [pc, #76]	; (800f52c <MX_LWIP_Init+0x24c>)
 800f4e0:	4911      	ldr	r1, [pc, #68]	; (800f528 <MX_LWIP_Init+0x248>)
 800f4e2:	4816      	ldr	r0, [pc, #88]	; (800f53c <MX_LWIP_Init+0x25c>)
 800f4e4:	f001 f9da 	bl	801089c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800f4e8:	4814      	ldr	r0, [pc, #80]	; (800f53c <MX_LWIP_Init+0x25c>)
 800f4ea:	f001 fb89 	bl	8010c00 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800f4ee:	4b13      	ldr	r3, [pc, #76]	; (800f53c <MX_LWIP_Init+0x25c>)
 800f4f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f4f4:	089b      	lsrs	r3, r3, #2
 800f4f6:	f003 0301 	and.w	r3, r3, #1
 800f4fa:	b2db      	uxtb	r3, r3
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d003      	beq.n	800f508 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800f500:	480e      	ldr	r0, [pc, #56]	; (800f53c <MX_LWIP_Init+0x25c>)
 800f502:	f001 fb8d 	bl	8010c20 <netif_set_up>
 800f506:	e002      	b.n	800f50e <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800f508:	480c      	ldr	r0, [pc, #48]	; (800f53c <MX_LWIP_Init+0x25c>)
 800f50a:	f001 fbf5 	bl	8010cf8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800f50e:	490c      	ldr	r1, [pc, #48]	; (800f540 <MX_LWIP_Init+0x260>)
 800f510:	480a      	ldr	r0, [pc, #40]	; (800f53c <MX_LWIP_Init+0x25c>)
 800f512:	f001 fc87 	bl	8010e24 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800f516:	bf00      	nop
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}
 800f51c:	20000654 	.word	0x20000654
 800f520:	20000658 	.word	0x20000658
 800f524:	2000065c 	.word	0x2000065c
 800f528:	20000648 	.word	0x20000648
 800f52c:	2000064c 	.word	0x2000064c
 800f530:	20000650 	.word	0x20000650
 800f534:	0801a645 	.word	0x0801a645
 800f538:	0800f7fd 	.word	0x0800f7fd
 800f53c:	20000614 	.word	0x20000614
 800f540:	0800f545 	.word	0x0800f545

0800f544 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800f544:	b480      	push	{r7}
 800f546:	b083      	sub	sp, #12
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800f54c:	bf00      	nop
 800f54e:	370c      	adds	r7, #12
 800f550:	46bd      	mov	sp, r7
 800f552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f556:	4770      	bx	lr

0800f558 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b084      	sub	sp, #16
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800f560:	2300      	movs	r3, #0
 800f562:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800f564:	4b3f      	ldr	r3, [pc, #252]	; (800f664 <low_level_init+0x10c>)
 800f566:	4a40      	ldr	r2, [pc, #256]	; (800f668 <low_level_init+0x110>)
 800f568:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800f56a:	2300      	movs	r3, #0
 800f56c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800f56e:	2380      	movs	r3, #128	; 0x80
 800f570:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800f572:	23e1      	movs	r3, #225	; 0xe1
 800f574:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800f576:	2300      	movs	r3, #0
 800f578:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800f57a:	2300      	movs	r3, #0
 800f57c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800f57e:	2300      	movs	r3, #0
 800f580:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800f582:	4a38      	ldr	r2, [pc, #224]	; (800f664 <low_level_init+0x10c>)
 800f584:	f107 0308 	add.w	r3, r7, #8
 800f588:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800f58a:	4b36      	ldr	r3, [pc, #216]	; (800f664 <low_level_init+0x10c>)
 800f58c:	2201      	movs	r2, #1
 800f58e:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800f590:	4b34      	ldr	r3, [pc, #208]	; (800f664 <low_level_init+0x10c>)
 800f592:	4a36      	ldr	r2, [pc, #216]	; (800f66c <low_level_init+0x114>)
 800f594:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800f596:	4b33      	ldr	r3, [pc, #204]	; (800f664 <low_level_init+0x10c>)
 800f598:	4a35      	ldr	r2, [pc, #212]	; (800f670 <low_level_init+0x118>)
 800f59a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800f59c:	4b31      	ldr	r3, [pc, #196]	; (800f664 <low_level_init+0x10c>)
 800f59e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800f5a2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800f5a4:	482f      	ldr	r0, [pc, #188]	; (800f664 <low_level_init+0x10c>)
 800f5a6:	f7f6 ff8f 	bl	80064c8 <HAL_ETH_Init>
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800f5ae:	2238      	movs	r2, #56	; 0x38
 800f5b0:	2100      	movs	r1, #0
 800f5b2:	4830      	ldr	r0, [pc, #192]	; (800f674 <low_level_init+0x11c>)
 800f5b4:	f00b ffe8 	bl	801b588 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800f5b8:	4b2e      	ldr	r3, [pc, #184]	; (800f674 <low_level_init+0x11c>)
 800f5ba:	2221      	movs	r2, #33	; 0x21
 800f5bc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800f5be:	4b2d      	ldr	r3, [pc, #180]	; (800f674 <low_level_init+0x11c>)
 800f5c0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800f5c4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800f5c6:	4b2b      	ldr	r3, [pc, #172]	; (800f674 <low_level_init+0x11c>)
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800f5cc:	482a      	ldr	r0, [pc, #168]	; (800f678 <low_level_init+0x120>)
 800f5ce:	f001 f82d 	bl	801062c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	2206      	movs	r2, #6
 800f5d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800f5da:	4b22      	ldr	r3, [pc, #136]	; (800f664 <low_level_init+0x10c>)
 800f5dc:	685b      	ldr	r3, [r3, #4]
 800f5de:	781a      	ldrb	r2, [r3, #0]
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800f5e6:	4b1f      	ldr	r3, [pc, #124]	; (800f664 <low_level_init+0x10c>)
 800f5e8:	685b      	ldr	r3, [r3, #4]
 800f5ea:	785a      	ldrb	r2, [r3, #1]
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800f5f2:	4b1c      	ldr	r3, [pc, #112]	; (800f664 <low_level_init+0x10c>)
 800f5f4:	685b      	ldr	r3, [r3, #4]
 800f5f6:	789a      	ldrb	r2, [r3, #2]
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800f5fe:	4b19      	ldr	r3, [pc, #100]	; (800f664 <low_level_init+0x10c>)
 800f600:	685b      	ldr	r3, [r3, #4]
 800f602:	78da      	ldrb	r2, [r3, #3]
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800f60a:	4b16      	ldr	r3, [pc, #88]	; (800f664 <low_level_init+0x10c>)
 800f60c:	685b      	ldr	r3, [r3, #4]
 800f60e:	791a      	ldrb	r2, [r3, #4]
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800f616:	4b13      	ldr	r3, [pc, #76]	; (800f664 <low_level_init+0x10c>)
 800f618:	685b      	ldr	r3, [r3, #4]
 800f61a:	795a      	ldrb	r2, [r3, #5]
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800f628:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f630:	f043 030a 	orr.w	r3, r3, #10
 800f634:	b2da      	uxtb	r2, r3
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800f63c:	490f      	ldr	r1, [pc, #60]	; (800f67c <low_level_init+0x124>)
 800f63e:	4810      	ldr	r0, [pc, #64]	; (800f680 <low_level_init+0x128>)
 800f640:	f7f4 fc2b 	bl	8003e9a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800f644:	480e      	ldr	r0, [pc, #56]	; (800f680 <low_level_init+0x128>)
 800f646:	f7f4 fc5a 	bl	8003efe <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800f64a:	7bfb      	ldrb	r3, [r7, #15]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d103      	bne.n	800f658 <low_level_init+0x100>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800f650:	6878      	ldr	r0, [r7, #4]
 800f652:	f000 fa3f 	bl	800fad4 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800f656:	e001      	b.n	800f65c <low_level_init+0x104>
    Error_Handler();
 800f658:	f7f3 fede 	bl	8003418 <Error_Handler>
}
 800f65c:	bf00      	nop
 800f65e:	3710      	adds	r7, #16
 800f660:	46bd      	mov	sp, r7
 800f662:	bd80      	pop	{r7, pc}
 800f664:	20000668 	.word	0x20000668
 800f668:	40028000 	.word	0x40028000
 800f66c:	30040060 	.word	0x30040060
 800f670:	30040000 	.word	0x30040000
 800f674:	20000718 	.word	0x20000718
 800f678:	08020d08 	.word	0x08020d08
 800f67c:	20000040 	.word	0x20000040
 800f680:	20000750 	.word	0x20000750

0800f684 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b092      	sub	sp, #72	; 0x48
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
 800f68c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800f68e:	2300      	movs	r3, #0
 800f690:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800f692:	2300      	movs	r3, #0
 800f694:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800f696:	2300      	movs	r3, #0
 800f698:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800f69c:	f107 030c 	add.w	r3, r7, #12
 800f6a0:	2230      	movs	r2, #48	; 0x30
 800f6a2:	2100      	movs	r1, #0
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	f00b ff6f 	bl	801b588 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800f6aa:	f107 030c 	add.w	r3, r7, #12
 800f6ae:	2230      	movs	r2, #48	; 0x30
 800f6b0:	2100      	movs	r1, #0
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	f00b ff68 	bl	801b588 <memset>

  for(q = p; q != NULL; q = q->next)
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	643b      	str	r3, [r7, #64]	; 0x40
 800f6bc:	e045      	b.n	800f74a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800f6be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6c0:	2b03      	cmp	r3, #3
 800f6c2:	d902      	bls.n	800f6ca <low_level_output+0x46>
      return ERR_IF;
 800f6c4:	f06f 030b 	mvn.w	r3, #11
 800f6c8:	e055      	b.n	800f776 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800f6ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6cc:	6859      	ldr	r1, [r3, #4]
 800f6ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f6d0:	4613      	mov	r3, r2
 800f6d2:	005b      	lsls	r3, r3, #1
 800f6d4:	4413      	add	r3, r2
 800f6d6:	009b      	lsls	r3, r3, #2
 800f6d8:	3348      	adds	r3, #72	; 0x48
 800f6da:	443b      	add	r3, r7
 800f6dc:	3b3c      	subs	r3, #60	; 0x3c
 800f6de:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800f6e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6e2:	895b      	ldrh	r3, [r3, #10]
 800f6e4:	4619      	mov	r1, r3
 800f6e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f6e8:	4613      	mov	r3, r2
 800f6ea:	005b      	lsls	r3, r3, #1
 800f6ec:	4413      	add	r3, r2
 800f6ee:	009b      	lsls	r3, r3, #2
 800f6f0:	3348      	adds	r3, #72	; 0x48
 800f6f2:	443b      	add	r3, r7
 800f6f4:	3b38      	subs	r3, #56	; 0x38
 800f6f6:	6019      	str	r1, [r3, #0]

    if(i>0)
 800f6f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d011      	beq.n	800f722 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800f6fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f700:	1e5a      	subs	r2, r3, #1
 800f702:	f107 000c 	add.w	r0, r7, #12
 800f706:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f708:	460b      	mov	r3, r1
 800f70a:	005b      	lsls	r3, r3, #1
 800f70c:	440b      	add	r3, r1
 800f70e:	009b      	lsls	r3, r3, #2
 800f710:	18c1      	adds	r1, r0, r3
 800f712:	4613      	mov	r3, r2
 800f714:	005b      	lsls	r3, r3, #1
 800f716:	4413      	add	r3, r2
 800f718:	009b      	lsls	r3, r3, #2
 800f71a:	3348      	adds	r3, #72	; 0x48
 800f71c:	443b      	add	r3, r7
 800f71e:	3b34      	subs	r3, #52	; 0x34
 800f720:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800f722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d109      	bne.n	800f73e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800f72a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f72c:	4613      	mov	r3, r2
 800f72e:	005b      	lsls	r3, r3, #1
 800f730:	4413      	add	r3, r2
 800f732:	009b      	lsls	r3, r3, #2
 800f734:	3348      	adds	r3, #72	; 0x48
 800f736:	443b      	add	r3, r7
 800f738:	3b34      	subs	r3, #52	; 0x34
 800f73a:	2200      	movs	r2, #0
 800f73c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800f73e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f740:	3301      	adds	r3, #1
 800f742:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800f744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	643b      	str	r3, [r7, #64]	; 0x40
 800f74a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d1b6      	bne.n	800f6be <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800f750:	683b      	ldr	r3, [r7, #0]
 800f752:	891b      	ldrh	r3, [r3, #8]
 800f754:	461a      	mov	r2, r3
 800f756:	4b0a      	ldr	r3, [pc, #40]	; (800f780 <low_level_output+0xfc>)
 800f758:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800f75a:	4a09      	ldr	r2, [pc, #36]	; (800f780 <low_level_output+0xfc>)
 800f75c:	f107 030c 	add.w	r3, r7, #12
 800f760:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800f762:	4a07      	ldr	r2, [pc, #28]	; (800f780 <low_level_output+0xfc>)
 800f764:	683b      	ldr	r3, [r7, #0]
 800f766:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800f768:	2214      	movs	r2, #20
 800f76a:	4905      	ldr	r1, [pc, #20]	; (800f780 <low_level_output+0xfc>)
 800f76c:	4805      	ldr	r0, [pc, #20]	; (800f784 <low_level_output+0x100>)
 800f76e:	f7f7 f843 	bl	80067f8 <HAL_ETH_Transmit>

  return errval;
 800f772:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800f776:	4618      	mov	r0, r3
 800f778:	3748      	adds	r7, #72	; 0x48
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd80      	pop	{r7, pc}
 800f77e:	bf00      	nop
 800f780:	20000718 	.word	0x20000718
 800f784:	20000668 	.word	0x20000668

0800f788 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	b084      	sub	sp, #16
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800f790:	2300      	movs	r3, #0
 800f792:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800f794:	4b07      	ldr	r3, [pc, #28]	; (800f7b4 <low_level_input+0x2c>)
 800f796:	781b      	ldrb	r3, [r3, #0]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d105      	bne.n	800f7a8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800f79c:	f107 030c 	add.w	r3, r7, #12
 800f7a0:	4619      	mov	r1, r3
 800f7a2:	4805      	ldr	r0, [pc, #20]	; (800f7b8 <low_level_input+0x30>)
 800f7a4:	f7f7 f8bf 	bl	8006926 <HAL_ETH_ReadData>
  }

  return p;
 800f7a8:	68fb      	ldr	r3, [r7, #12]
}
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	3710      	adds	r7, #16
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	bd80      	pop	{r7, pc}
 800f7b2:	bf00      	nop
 800f7b4:	20000664 	.word	0x20000664
 800f7b8:	20000668 	.word	0x20000668

0800f7bc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b084      	sub	sp, #16
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800f7c8:	6878      	ldr	r0, [r7, #4]
 800f7ca:	f7ff ffdd 	bl	800f788 <low_level_input>
 800f7ce:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d00a      	beq.n	800f7ec <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	691b      	ldr	r3, [r3, #16]
 800f7da:	6879      	ldr	r1, [r7, #4]
 800f7dc:	68f8      	ldr	r0, [r7, #12]
 800f7de:	4798      	blx	r3
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d002      	beq.n	800f7ec <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800f7e6:	68f8      	ldr	r0, [r7, #12]
 800f7e8:	f001 fe9c 	bl	8011524 <pbuf_free>
      }
    }
  } while(p!=NULL);
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d1ea      	bne.n	800f7c8 <ethernetif_input+0xc>
}
 800f7f2:	bf00      	nop
 800f7f4:	bf00      	nop
 800f7f6:	3710      	adds	r7, #16
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	bd80      	pop	{r7, pc}

0800f7fc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b082      	sub	sp, #8
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d106      	bne.n	800f818 <ethernetif_init+0x1c>
 800f80a:	4b0e      	ldr	r3, [pc, #56]	; (800f844 <ethernetif_init+0x48>)
 800f80c:	f240 1285 	movw	r2, #389	; 0x185
 800f810:	490d      	ldr	r1, [pc, #52]	; (800f848 <ethernetif_init+0x4c>)
 800f812:	480e      	ldr	r0, [pc, #56]	; (800f84c <ethernetif_init+0x50>)
 800f814:	f00b fd28 	bl	801b268 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	2273      	movs	r2, #115	; 0x73
 800f81c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	2274      	movs	r2, #116	; 0x74
 800f824:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	4a09      	ldr	r2, [pc, #36]	; (800f850 <ethernetif_init+0x54>)
 800f82c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	4a08      	ldr	r2, [pc, #32]	; (800f854 <ethernetif_init+0x58>)
 800f832:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800f834:	6878      	ldr	r0, [r7, #4]
 800f836:	f7ff fe8f 	bl	800f558 <low_level_init>

  return ERR_OK;
 800f83a:	2300      	movs	r3, #0
}
 800f83c:	4618      	mov	r0, r3
 800f83e:	3708      	adds	r7, #8
 800f840:	46bd      	mov	sp, r7
 800f842:	bd80      	pop	{r7, pc}
 800f844:	0801e2d0 	.word	0x0801e2d0
 800f848:	0801e2ec 	.word	0x0801e2ec
 800f84c:	0801e2fc 	.word	0x0801e2fc
 800f850:	08018991 	.word	0x08018991
 800f854:	0800f685 	.word	0x0800f685

0800f858 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	b084      	sub	sp, #16
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800f864:	68f9      	ldr	r1, [r7, #12]
 800f866:	4807      	ldr	r0, [pc, #28]	; (800f884 <pbuf_free_custom+0x2c>)
 800f868:	f000 ffc2 	bl	80107f0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800f86c:	4b06      	ldr	r3, [pc, #24]	; (800f888 <pbuf_free_custom+0x30>)
 800f86e:	781b      	ldrb	r3, [r3, #0]
 800f870:	2b01      	cmp	r3, #1
 800f872:	d102      	bne.n	800f87a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800f874:	4b04      	ldr	r3, [pc, #16]	; (800f888 <pbuf_free_custom+0x30>)
 800f876:	2200      	movs	r2, #0
 800f878:	701a      	strb	r2, [r3, #0]
  }
}
 800f87a:	bf00      	nop
 800f87c:	3710      	adds	r7, #16
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}
 800f882:	bf00      	nop
 800f884:	08020d08 	.word	0x08020d08
 800f888:	20000664 	.word	0x20000664

0800f88c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800f890:	f7f4 fcea 	bl	8004268 <HAL_GetTick>
 800f894:	4603      	mov	r3, r0
}
 800f896:	4618      	mov	r0, r3
 800f898:	bd80      	pop	{r7, pc}
	...

0800f89c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b08e      	sub	sp, #56	; 0x38
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f8a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f8a8:	2200      	movs	r2, #0
 800f8aa:	601a      	str	r2, [r3, #0]
 800f8ac:	605a      	str	r2, [r3, #4]
 800f8ae:	609a      	str	r2, [r3, #8]
 800f8b0:	60da      	str	r2, [r3, #12]
 800f8b2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	4a59      	ldr	r2, [pc, #356]	; (800fa20 <HAL_ETH_MspInit+0x184>)
 800f8ba:	4293      	cmp	r3, r2
 800f8bc:	f040 80ab 	bne.w	800fa16 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800f8c0:	4b58      	ldr	r3, [pc, #352]	; (800fa24 <HAL_ETH_MspInit+0x188>)
 800f8c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f8c6:	4a57      	ldr	r2, [pc, #348]	; (800fa24 <HAL_ETH_MspInit+0x188>)
 800f8c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f8cc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f8d0:	4b54      	ldr	r3, [pc, #336]	; (800fa24 <HAL_ETH_MspInit+0x188>)
 800f8d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f8d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f8da:	623b      	str	r3, [r7, #32]
 800f8dc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800f8de:	4b51      	ldr	r3, [pc, #324]	; (800fa24 <HAL_ETH_MspInit+0x188>)
 800f8e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f8e4:	4a4f      	ldr	r2, [pc, #316]	; (800fa24 <HAL_ETH_MspInit+0x188>)
 800f8e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f8ea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f8ee:	4b4d      	ldr	r3, [pc, #308]	; (800fa24 <HAL_ETH_MspInit+0x188>)
 800f8f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f8f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f8f8:	61fb      	str	r3, [r7, #28]
 800f8fa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800f8fc:	4b49      	ldr	r3, [pc, #292]	; (800fa24 <HAL_ETH_MspInit+0x188>)
 800f8fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f902:	4a48      	ldr	r2, [pc, #288]	; (800fa24 <HAL_ETH_MspInit+0x188>)
 800f904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f908:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f90c:	4b45      	ldr	r3, [pc, #276]	; (800fa24 <HAL_ETH_MspInit+0x188>)
 800f90e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f916:	61bb      	str	r3, [r7, #24]
 800f918:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f91a:	4b42      	ldr	r3, [pc, #264]	; (800fa24 <HAL_ETH_MspInit+0x188>)
 800f91c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f920:	4a40      	ldr	r2, [pc, #256]	; (800fa24 <HAL_ETH_MspInit+0x188>)
 800f922:	f043 0304 	orr.w	r3, r3, #4
 800f926:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f92a:	4b3e      	ldr	r3, [pc, #248]	; (800fa24 <HAL_ETH_MspInit+0x188>)
 800f92c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f930:	f003 0304 	and.w	r3, r3, #4
 800f934:	617b      	str	r3, [r7, #20]
 800f936:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f938:	4b3a      	ldr	r3, [pc, #232]	; (800fa24 <HAL_ETH_MspInit+0x188>)
 800f93a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f93e:	4a39      	ldr	r2, [pc, #228]	; (800fa24 <HAL_ETH_MspInit+0x188>)
 800f940:	f043 0301 	orr.w	r3, r3, #1
 800f944:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f948:	4b36      	ldr	r3, [pc, #216]	; (800fa24 <HAL_ETH_MspInit+0x188>)
 800f94a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f94e:	f003 0301 	and.w	r3, r3, #1
 800f952:	613b      	str	r3, [r7, #16]
 800f954:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f956:	4b33      	ldr	r3, [pc, #204]	; (800fa24 <HAL_ETH_MspInit+0x188>)
 800f958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f95c:	4a31      	ldr	r2, [pc, #196]	; (800fa24 <HAL_ETH_MspInit+0x188>)
 800f95e:	f043 0302 	orr.w	r3, r3, #2
 800f962:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f966:	4b2f      	ldr	r3, [pc, #188]	; (800fa24 <HAL_ETH_MspInit+0x188>)
 800f968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f96c:	f003 0302 	and.w	r3, r3, #2
 800f970:	60fb      	str	r3, [r7, #12]
 800f972:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800f974:	4b2b      	ldr	r3, [pc, #172]	; (800fa24 <HAL_ETH_MspInit+0x188>)
 800f976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f97a:	4a2a      	ldr	r2, [pc, #168]	; (800fa24 <HAL_ETH_MspInit+0x188>)
 800f97c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f980:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f984:	4b27      	ldr	r3, [pc, #156]	; (800fa24 <HAL_ETH_MspInit+0x188>)
 800f986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f98a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f98e:	60bb      	str	r3, [r7, #8]
 800f990:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800f992:	2332      	movs	r3, #50	; 0x32
 800f994:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f996:	2302      	movs	r3, #2
 800f998:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f99a:	2300      	movs	r3, #0
 800f99c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f99e:	2300      	movs	r3, #0
 800f9a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f9a2:	230b      	movs	r3, #11
 800f9a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f9a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f9aa:	4619      	mov	r1, r3
 800f9ac:	481e      	ldr	r0, [pc, #120]	; (800fa28 <HAL_ETH_MspInit+0x18c>)
 800f9ae:	f7f8 f94b 	bl	8007c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800f9b2:	2386      	movs	r3, #134	; 0x86
 800f9b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f9b6:	2302      	movs	r3, #2
 800f9b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f9be:	2300      	movs	r3, #0
 800f9c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f9c2:	230b      	movs	r3, #11
 800f9c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f9c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	4817      	ldr	r0, [pc, #92]	; (800fa2c <HAL_ETH_MspInit+0x190>)
 800f9ce:	f7f8 f93b 	bl	8007c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800f9d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f9d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f9d8:	2302      	movs	r3, #2
 800f9da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f9dc:	2300      	movs	r3, #0
 800f9de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f9e4:	230b      	movs	r3, #11
 800f9e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f9e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f9ec:	4619      	mov	r1, r3
 800f9ee:	4810      	ldr	r0, [pc, #64]	; (800fa30 <HAL_ETH_MspInit+0x194>)
 800f9f0:	f7f8 f92a 	bl	8007c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800f9f4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800f9f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f9fa:	2302      	movs	r3, #2
 800f9fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f9fe:	2300      	movs	r3, #0
 800fa00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fa02:	2300      	movs	r3, #0
 800fa04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800fa06:	230b      	movs	r3, #11
 800fa08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800fa0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fa0e:	4619      	mov	r1, r3
 800fa10:	4808      	ldr	r0, [pc, #32]	; (800fa34 <HAL_ETH_MspInit+0x198>)
 800fa12:	f7f8 f919 	bl	8007c48 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800fa16:	bf00      	nop
 800fa18:	3738      	adds	r7, #56	; 0x38
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	bd80      	pop	{r7, pc}
 800fa1e:	bf00      	nop
 800fa20:	40028000 	.word	0x40028000
 800fa24:	58024400 	.word	0x58024400
 800fa28:	58020800 	.word	0x58020800
 800fa2c:	58020000 	.word	0x58020000
 800fa30:	58020400 	.word	0x58020400
 800fa34:	58021800 	.word	0x58021800

0800fa38 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800fa3c:	4802      	ldr	r0, [pc, #8]	; (800fa48 <ETH_PHY_IO_Init+0x10>)
 800fa3e:	f7f7 fb37 	bl	80070b0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800fa42:	2300      	movs	r3, #0
}
 800fa44:	4618      	mov	r0, r3
 800fa46:	bd80      	pop	{r7, pc}
 800fa48:	20000668 	.word	0x20000668

0800fa4c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800fa4c:	b480      	push	{r7}
 800fa4e:	af00      	add	r7, sp, #0
  return 0;
 800fa50:	2300      	movs	r3, #0
}
 800fa52:	4618      	mov	r0, r3
 800fa54:	46bd      	mov	sp, r7
 800fa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5a:	4770      	bx	lr

0800fa5c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	b084      	sub	sp, #16
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	60f8      	str	r0, [r7, #12]
 800fa64:	60b9      	str	r1, [r7, #8]
 800fa66:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	68ba      	ldr	r2, [r7, #8]
 800fa6c:	68f9      	ldr	r1, [r7, #12]
 800fa6e:	4807      	ldr	r0, [pc, #28]	; (800fa8c <ETH_PHY_IO_ReadReg+0x30>)
 800fa70:	f7f7 f887 	bl	8006b82 <HAL_ETH_ReadPHYRegister>
 800fa74:	4603      	mov	r3, r0
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d002      	beq.n	800fa80 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800fa7a:	f04f 33ff 	mov.w	r3, #4294967295
 800fa7e:	e000      	b.n	800fa82 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800fa80:	2300      	movs	r3, #0
}
 800fa82:	4618      	mov	r0, r3
 800fa84:	3710      	adds	r7, #16
 800fa86:	46bd      	mov	sp, r7
 800fa88:	bd80      	pop	{r7, pc}
 800fa8a:	bf00      	nop
 800fa8c:	20000668 	.word	0x20000668

0800fa90 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b084      	sub	sp, #16
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	60f8      	str	r0, [r7, #12]
 800fa98:	60b9      	str	r1, [r7, #8]
 800fa9a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	68ba      	ldr	r2, [r7, #8]
 800faa0:	68f9      	ldr	r1, [r7, #12]
 800faa2:	4807      	ldr	r0, [pc, #28]	; (800fac0 <ETH_PHY_IO_WriteReg+0x30>)
 800faa4:	f7f7 f8c2 	bl	8006c2c <HAL_ETH_WritePHYRegister>
 800faa8:	4603      	mov	r3, r0
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d002      	beq.n	800fab4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800faae:	f04f 33ff 	mov.w	r3, #4294967295
 800fab2:	e000      	b.n	800fab6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800fab4:	2300      	movs	r3, #0
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	3710      	adds	r7, #16
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}
 800fabe:	bf00      	nop
 800fac0:	20000668 	.word	0x20000668

0800fac4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800fac8:	f7f4 fbce 	bl	8004268 <HAL_GetTick>
 800facc:	4603      	mov	r3, r0
}
 800face:	4618      	mov	r0, r3
 800fad0:	bd80      	pop	{r7, pc}
	...

0800fad4 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b0a0      	sub	sp, #128	; 0x80
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800fadc:	f107 030c 	add.w	r3, r7, #12
 800fae0:	2264      	movs	r2, #100	; 0x64
 800fae2:	2100      	movs	r1, #0
 800fae4:	4618      	mov	r0, r3
 800fae6:	f00b fd4f 	bl	801b588 <memset>
  int32_t PHYLinkState = 0;
 800faea:	2300      	movs	r3, #0
 800faec:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800faee:	2300      	movs	r3, #0
 800faf0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800faf2:	2300      	movs	r3, #0
 800faf4:	67bb      	str	r3, [r7, #120]	; 0x78
 800faf6:	2300      	movs	r3, #0
 800faf8:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800fafa:	483a      	ldr	r0, [pc, #232]	; (800fbe4 <ethernet_link_check_state+0x110>)
 800fafc:	f7f4 faa7 	bl	800404e <LAN8742_GetLinkState>
 800fb00:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb08:	089b      	lsrs	r3, r3, #2
 800fb0a:	f003 0301 	and.w	r3, r3, #1
 800fb0e:	b2db      	uxtb	r3, r3
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d00c      	beq.n	800fb2e <ethernet_link_check_state+0x5a>
 800fb14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fb16:	2b01      	cmp	r3, #1
 800fb18:	dc09      	bgt.n	800fb2e <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800fb1a:	4833      	ldr	r0, [pc, #204]	; (800fbe8 <ethernet_link_check_state+0x114>)
 800fb1c:	f7f6 fe1c 	bl	8006758 <HAL_ETH_Stop>
    netif_set_down(netif);
 800fb20:	6878      	ldr	r0, [r7, #4]
 800fb22:	f001 f8e9 	bl	8010cf8 <netif_set_down>
    netif_set_link_down(netif);
 800fb26:	6878      	ldr	r0, [r7, #4]
 800fb28:	f001 f94c 	bl	8010dc4 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800fb2c:	e055      	b.n	800fbda <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb34:	f003 0304 	and.w	r3, r3, #4
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d14e      	bne.n	800fbda <ethernet_link_check_state+0x106>
 800fb3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fb3e:	2b01      	cmp	r3, #1
 800fb40:	dd4b      	ble.n	800fbda <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800fb42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fb44:	3b02      	subs	r3, #2
 800fb46:	2b03      	cmp	r3, #3
 800fb48:	d82a      	bhi.n	800fba0 <ethernet_link_check_state+0xcc>
 800fb4a:	a201      	add	r2, pc, #4	; (adr r2, 800fb50 <ethernet_link_check_state+0x7c>)
 800fb4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb50:	0800fb61 	.word	0x0800fb61
 800fb54:	0800fb73 	.word	0x0800fb73
 800fb58:	0800fb83 	.word	0x0800fb83
 800fb5c:	0800fb93 	.word	0x0800fb93
      duplex = ETH_FULLDUPLEX_MODE;
 800fb60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fb64:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800fb66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fb6a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800fb6c:	2301      	movs	r3, #1
 800fb6e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800fb70:	e017      	b.n	800fba2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800fb72:	2300      	movs	r3, #0
 800fb74:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800fb76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fb7a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800fb7c:	2301      	movs	r3, #1
 800fb7e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800fb80:	e00f      	b.n	800fba2 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800fb82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fb86:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800fb88:	2300      	movs	r3, #0
 800fb8a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800fb8c:	2301      	movs	r3, #1
 800fb8e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800fb90:	e007      	b.n	800fba2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800fb92:	2300      	movs	r3, #0
 800fb94:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800fb96:	2300      	movs	r3, #0
 800fb98:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800fb9a:	2301      	movs	r3, #1
 800fb9c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800fb9e:	e000      	b.n	800fba2 <ethernet_link_check_state+0xce>
      break;
 800fba0:	bf00      	nop
    if(linkchanged)
 800fba2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d018      	beq.n	800fbda <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800fba8:	f107 030c 	add.w	r3, r7, #12
 800fbac:	4619      	mov	r1, r3
 800fbae:	480e      	ldr	r0, [pc, #56]	; (800fbe8 <ethernet_link_check_state+0x114>)
 800fbb0:	f7f7 f890 	bl	8006cd4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800fbb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fbb6:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800fbb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fbba:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800fbbc:	f107 030c 	add.w	r3, r7, #12
 800fbc0:	4619      	mov	r1, r3
 800fbc2:	4809      	ldr	r0, [pc, #36]	; (800fbe8 <ethernet_link_check_state+0x114>)
 800fbc4:	f7f7 fa5a 	bl	800707c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800fbc8:	4807      	ldr	r0, [pc, #28]	; (800fbe8 <ethernet_link_check_state+0x114>)
 800fbca:	f7f6 fd63 	bl	8006694 <HAL_ETH_Start>
      netif_set_up(netif);
 800fbce:	6878      	ldr	r0, [r7, #4]
 800fbd0:	f001 f826 	bl	8010c20 <netif_set_up>
      netif_set_link_up(netif);
 800fbd4:	6878      	ldr	r0, [r7, #4]
 800fbd6:	f001 f8c1 	bl	8010d5c <netif_set_link_up>
}
 800fbda:	bf00      	nop
 800fbdc:	3780      	adds	r7, #128	; 0x80
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bd80      	pop	{r7, pc}
 800fbe2:	bf00      	nop
 800fbe4:	20000750 	.word	0x20000750
 800fbe8:	20000668 	.word	0x20000668

0800fbec <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b086      	sub	sp, #24
 800fbf0:	af02      	add	r7, sp, #8
 800fbf2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800fbf4:	4812      	ldr	r0, [pc, #72]	; (800fc40 <HAL_ETH_RxAllocateCallback+0x54>)
 800fbf6:	f000 fd8d 	bl	8010714 <memp_malloc_pool>
 800fbfa:	60f8      	str	r0, [r7, #12]
  if (p)
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d014      	beq.n	800fc2c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	f103 0220 	add.w	r2, r3, #32
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	4a0d      	ldr	r2, [pc, #52]	; (800fc44 <HAL_ETH_RxAllocateCallback+0x58>)
 800fc10:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800fc1a:	9201      	str	r2, [sp, #4]
 800fc1c:	9300      	str	r3, [sp, #0]
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	2241      	movs	r2, #65	; 0x41
 800fc22:	2100      	movs	r1, #0
 800fc24:	2000      	movs	r0, #0
 800fc26:	f001 fac5 	bl	80111b4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800fc2a:	e005      	b.n	800fc38 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800fc2c:	4b06      	ldr	r3, [pc, #24]	; (800fc48 <HAL_ETH_RxAllocateCallback+0x5c>)
 800fc2e:	2201      	movs	r2, #1
 800fc30:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	2200      	movs	r2, #0
 800fc36:	601a      	str	r2, [r3, #0]
}
 800fc38:	bf00      	nop
 800fc3a:	3710      	adds	r7, #16
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	bd80      	pop	{r7, pc}
 800fc40:	08020d08 	.word	0x08020d08
 800fc44:	0800f859 	.word	0x0800f859
 800fc48:	20000664 	.word	0x20000664

0800fc4c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800fc4c:	b480      	push	{r7}
 800fc4e:	b08d      	sub	sp, #52	; 0x34
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	60f8      	str	r0, [r7, #12]
 800fc54:	60b9      	str	r1, [r7, #8]
 800fc56:	607a      	str	r2, [r7, #4]
 800fc58:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800fc5e:	68bb      	ldr	r3, [r7, #8]
 800fc60:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 800fc62:	2300      	movs	r3, #0
 800fc64:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	3b20      	subs	r3, #32
 800fc6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 800fc6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc6e:	2200      	movs	r2, #0
 800fc70:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800fc72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc74:	2200      	movs	r2, #0
 800fc76:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800fc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc7a:	887a      	ldrh	r2, [r7, #2]
 800fc7c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800fc7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d103      	bne.n	800fc8e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800fc86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc8a:	601a      	str	r2, [r3, #0]
 800fc8c:	e003      	b.n	800fc96 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800fc8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc94:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800fc96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc9a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800fc9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fca2:	e009      	b.n	800fcb8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800fca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fca6:	891a      	ldrh	r2, [r3, #8]
 800fca8:	887b      	ldrh	r3, [r7, #2]
 800fcaa:	4413      	add	r3, r2
 800fcac:	b29a      	uxth	r2, r3
 800fcae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcb0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800fcb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fcb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d1f2      	bne.n	800fca4 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800fcbe:	887b      	ldrh	r3, [r7, #2]
 800fcc0:	687a      	ldr	r2, [r7, #4]
 800fcc2:	623a      	str	r2, [r7, #32]
 800fcc4:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 800fcc6:	69fb      	ldr	r3, [r7, #28]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	dd1d      	ble.n	800fd08 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800fccc:	6a3b      	ldr	r3, [r7, #32]
 800fcce:	f003 021f 	and.w	r2, r3, #31
 800fcd2:	69fb      	ldr	r3, [r7, #28]
 800fcd4:	4413      	add	r3, r2
 800fcd6:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800fcd8:	6a3b      	ldr	r3, [r7, #32]
 800fcda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800fcdc:	f3bf 8f4f 	dsb	sy
}
 800fce0:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800fce2:	4a0d      	ldr	r2, [pc, #52]	; (800fd18 <HAL_ETH_RxLinkCallback+0xcc>)
 800fce4:	697b      	ldr	r3, [r7, #20]
 800fce6:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800fcea:	697b      	ldr	r3, [r7, #20]
 800fcec:	3320      	adds	r3, #32
 800fcee:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800fcf0:	69bb      	ldr	r3, [r7, #24]
 800fcf2:	3b20      	subs	r3, #32
 800fcf4:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800fcf6:	69bb      	ldr	r3, [r7, #24]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	dcf2      	bgt.n	800fce2 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 800fcfc:	f3bf 8f4f 	dsb	sy
}
 800fd00:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800fd02:	f3bf 8f6f 	isb	sy
}
 800fd06:	bf00      	nop
}
 800fd08:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800fd0a:	bf00      	nop
 800fd0c:	3734      	adds	r7, #52	; 0x34
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd14:	4770      	bx	lr
 800fd16:	bf00      	nop
 800fd18:	e000ed00 	.word	0xe000ed00

0800fd1c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800fd1c:	b480      	push	{r7}
 800fd1e:	b083      	sub	sp, #12
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	4603      	mov	r3, r0
 800fd24:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800fd26:	88fb      	ldrh	r3, [r7, #6]
 800fd28:	021b      	lsls	r3, r3, #8
 800fd2a:	b21a      	sxth	r2, r3
 800fd2c:	88fb      	ldrh	r3, [r7, #6]
 800fd2e:	0a1b      	lsrs	r3, r3, #8
 800fd30:	b29b      	uxth	r3, r3
 800fd32:	b21b      	sxth	r3, r3
 800fd34:	4313      	orrs	r3, r2
 800fd36:	b21b      	sxth	r3, r3
 800fd38:	b29b      	uxth	r3, r3
}
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	370c      	adds	r7, #12
 800fd3e:	46bd      	mov	sp, r7
 800fd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd44:	4770      	bx	lr

0800fd46 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800fd46:	b480      	push	{r7}
 800fd48:	b083      	sub	sp, #12
 800fd4a:	af00      	add	r7, sp, #0
 800fd4c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	061a      	lsls	r2, r3, #24
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	021b      	lsls	r3, r3, #8
 800fd56:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fd5a:	431a      	orrs	r2, r3
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	0a1b      	lsrs	r3, r3, #8
 800fd60:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800fd64:	431a      	orrs	r2, r3
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	0e1b      	lsrs	r3, r3, #24
 800fd6a:	4313      	orrs	r3, r2
}
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	370c      	adds	r7, #12
 800fd70:	46bd      	mov	sp, r7
 800fd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd76:	4770      	bx	lr

0800fd78 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800fd78:	b480      	push	{r7}
 800fd7a:	b089      	sub	sp, #36	; 0x24
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
 800fd80:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800fd86:	2300      	movs	r3, #0
 800fd88:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800fd8e:	69fb      	ldr	r3, [r7, #28]
 800fd90:	f003 0301 	and.w	r3, r3, #1
 800fd94:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800fd96:	693b      	ldr	r3, [r7, #16]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d00d      	beq.n	800fdb8 <lwip_standard_chksum+0x40>
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	dd0a      	ble.n	800fdb8 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800fda2:	69fa      	ldr	r2, [r7, #28]
 800fda4:	1c53      	adds	r3, r2, #1
 800fda6:	61fb      	str	r3, [r7, #28]
 800fda8:	f107 030e 	add.w	r3, r7, #14
 800fdac:	3301      	adds	r3, #1
 800fdae:	7812      	ldrb	r2, [r2, #0]
 800fdb0:	701a      	strb	r2, [r3, #0]
    len--;
 800fdb2:	683b      	ldr	r3, [r7, #0]
 800fdb4:	3b01      	subs	r3, #1
 800fdb6:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800fdb8:	69fb      	ldr	r3, [r7, #28]
 800fdba:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800fdbc:	e00a      	b.n	800fdd4 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800fdbe:	69bb      	ldr	r3, [r7, #24]
 800fdc0:	1c9a      	adds	r2, r3, #2
 800fdc2:	61ba      	str	r2, [r7, #24]
 800fdc4:	881b      	ldrh	r3, [r3, #0]
 800fdc6:	461a      	mov	r2, r3
 800fdc8:	697b      	ldr	r3, [r7, #20]
 800fdca:	4413      	add	r3, r2
 800fdcc:	617b      	str	r3, [r7, #20]
    len -= 2;
 800fdce:	683b      	ldr	r3, [r7, #0]
 800fdd0:	3b02      	subs	r3, #2
 800fdd2:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800fdd4:	683b      	ldr	r3, [r7, #0]
 800fdd6:	2b01      	cmp	r3, #1
 800fdd8:	dcf1      	bgt.n	800fdbe <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800fdda:	683b      	ldr	r3, [r7, #0]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	dd04      	ble.n	800fdea <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800fde0:	f107 030e 	add.w	r3, r7, #14
 800fde4:	69ba      	ldr	r2, [r7, #24]
 800fde6:	7812      	ldrb	r2, [r2, #0]
 800fde8:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800fdea:	89fb      	ldrh	r3, [r7, #14]
 800fdec:	461a      	mov	r2, r3
 800fdee:	697b      	ldr	r3, [r7, #20]
 800fdf0:	4413      	add	r3, r2
 800fdf2:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800fdf4:	697b      	ldr	r3, [r7, #20]
 800fdf6:	0c1a      	lsrs	r2, r3, #16
 800fdf8:	697b      	ldr	r3, [r7, #20]
 800fdfa:	b29b      	uxth	r3, r3
 800fdfc:	4413      	add	r3, r2
 800fdfe:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800fe00:	697b      	ldr	r3, [r7, #20]
 800fe02:	0c1a      	lsrs	r2, r3, #16
 800fe04:	697b      	ldr	r3, [r7, #20]
 800fe06:	b29b      	uxth	r3, r3
 800fe08:	4413      	add	r3, r2
 800fe0a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800fe0c:	693b      	ldr	r3, [r7, #16]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d007      	beq.n	800fe22 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800fe12:	697b      	ldr	r3, [r7, #20]
 800fe14:	021b      	lsls	r3, r3, #8
 800fe16:	b29a      	uxth	r2, r3
 800fe18:	697b      	ldr	r3, [r7, #20]
 800fe1a:	0a1b      	lsrs	r3, r3, #8
 800fe1c:	b2db      	uxtb	r3, r3
 800fe1e:	4313      	orrs	r3, r2
 800fe20:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800fe22:	697b      	ldr	r3, [r7, #20]
 800fe24:	b29b      	uxth	r3, r3
}
 800fe26:	4618      	mov	r0, r3
 800fe28:	3724      	adds	r7, #36	; 0x24
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe30:	4770      	bx	lr

0800fe32 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800fe32:	b580      	push	{r7, lr}
 800fe34:	b082      	sub	sp, #8
 800fe36:	af00      	add	r7, sp, #0
 800fe38:	6078      	str	r0, [r7, #4]
 800fe3a:	460b      	mov	r3, r1
 800fe3c:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800fe3e:	887b      	ldrh	r3, [r7, #2]
 800fe40:	4619      	mov	r1, r3
 800fe42:	6878      	ldr	r0, [r7, #4]
 800fe44:	f7ff ff98 	bl	800fd78 <lwip_standard_chksum>
 800fe48:	4603      	mov	r3, r0
 800fe4a:	43db      	mvns	r3, r3
 800fe4c:	b29b      	uxth	r3, r3
}
 800fe4e:	4618      	mov	r0, r3
 800fe50:	3708      	adds	r7, #8
 800fe52:	46bd      	mov	sp, r7
 800fe54:	bd80      	pop	{r7, pc}

0800fe56 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800fe56:	b580      	push	{r7, lr}
 800fe58:	b086      	sub	sp, #24
 800fe5a:	af00      	add	r7, sp, #0
 800fe5c:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800fe5e:	2300      	movs	r3, #0
 800fe60:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800fe62:	2300      	movs	r3, #0
 800fe64:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	613b      	str	r3, [r7, #16]
 800fe6a:	e02b      	b.n	800fec4 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800fe6c:	693b      	ldr	r3, [r7, #16]
 800fe6e:	685a      	ldr	r2, [r3, #4]
 800fe70:	693b      	ldr	r3, [r7, #16]
 800fe72:	895b      	ldrh	r3, [r3, #10]
 800fe74:	4619      	mov	r1, r3
 800fe76:	4610      	mov	r0, r2
 800fe78:	f7ff ff7e 	bl	800fd78 <lwip_standard_chksum>
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	461a      	mov	r2, r3
 800fe80:	697b      	ldr	r3, [r7, #20]
 800fe82:	4413      	add	r3, r2
 800fe84:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800fe86:	697b      	ldr	r3, [r7, #20]
 800fe88:	0c1a      	lsrs	r2, r3, #16
 800fe8a:	697b      	ldr	r3, [r7, #20]
 800fe8c:	b29b      	uxth	r3, r3
 800fe8e:	4413      	add	r3, r2
 800fe90:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800fe92:	693b      	ldr	r3, [r7, #16]
 800fe94:	895b      	ldrh	r3, [r3, #10]
 800fe96:	f003 0301 	and.w	r3, r3, #1
 800fe9a:	b29b      	uxth	r3, r3
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d00e      	beq.n	800febe <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	bf0c      	ite	eq
 800fea6:	2301      	moveq	r3, #1
 800fea8:	2300      	movne	r3, #0
 800feaa:	b2db      	uxtb	r3, r3
 800feac:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800feae:	697b      	ldr	r3, [r7, #20]
 800feb0:	021b      	lsls	r3, r3, #8
 800feb2:	b29a      	uxth	r2, r3
 800feb4:	697b      	ldr	r3, [r7, #20]
 800feb6:	0a1b      	lsrs	r3, r3, #8
 800feb8:	b2db      	uxtb	r3, r3
 800feba:	4313      	orrs	r3, r2
 800febc:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800febe:	693b      	ldr	r3, [r7, #16]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	613b      	str	r3, [r7, #16]
 800fec4:	693b      	ldr	r3, [r7, #16]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d1d0      	bne.n	800fe6c <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d007      	beq.n	800fee0 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800fed0:	697b      	ldr	r3, [r7, #20]
 800fed2:	021b      	lsls	r3, r3, #8
 800fed4:	b29a      	uxth	r2, r3
 800fed6:	697b      	ldr	r3, [r7, #20]
 800fed8:	0a1b      	lsrs	r3, r3, #8
 800feda:	b2db      	uxtb	r3, r3
 800fedc:	4313      	orrs	r3, r2
 800fede:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800fee0:	697b      	ldr	r3, [r7, #20]
 800fee2:	b29b      	uxth	r3, r3
 800fee4:	43db      	mvns	r3, r3
 800fee6:	b29b      	uxth	r3, r3
}
 800fee8:	4618      	mov	r0, r3
 800feea:	3718      	adds	r7, #24
 800feec:	46bd      	mov	sp, r7
 800feee:	bd80      	pop	{r7, pc}

0800fef0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b082      	sub	sp, #8
 800fef4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800fef6:	2300      	movs	r3, #0
 800fef8:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800fefa:	f000 f8d3 	bl	80100a4 <mem_init>
  memp_init();
 800fefe:	f000 fbc5 	bl	801068c <memp_init>
  pbuf_init();
  netif_init();
 800ff02:	f000 fcc3 	bl	801088c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ff06:	f007 ff3d 	bl	8017d84 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ff0a:	f001 fe2b 	bl	8011b64 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ff0e:	f007 feaf 	bl	8017c70 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ff12:	bf00      	nop
 800ff14:	3708      	adds	r7, #8
 800ff16:	46bd      	mov	sp, r7
 800ff18:	bd80      	pop	{r7, pc}
	...

0800ff1c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ff1c:	b480      	push	{r7}
 800ff1e:	b083      	sub	sp, #12
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 800ff24:	4b04      	ldr	r3, [pc, #16]	; (800ff38 <ptr_to_mem+0x1c>)
 800ff26:	681a      	ldr	r2, [r3, #0]
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	4413      	add	r3, r2
}
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	370c      	adds	r7, #12
 800ff30:	46bd      	mov	sp, r7
 800ff32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff36:	4770      	bx	lr
 800ff38:	20000788 	.word	0x20000788

0800ff3c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ff3c:	b480      	push	{r7}
 800ff3e:	b083      	sub	sp, #12
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ff44:	4b04      	ldr	r3, [pc, #16]	; (800ff58 <mem_to_ptr+0x1c>)
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	687a      	ldr	r2, [r7, #4]
 800ff4a:	1ad3      	subs	r3, r2, r3
}
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	370c      	adds	r7, #12
 800ff50:	46bd      	mov	sp, r7
 800ff52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff56:	4770      	bx	lr
 800ff58:	20000788 	.word	0x20000788

0800ff5c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ff5c:	b590      	push	{r4, r7, lr}
 800ff5e:	b085      	sub	sp, #20
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ff64:	4b45      	ldr	r3, [pc, #276]	; (801007c <plug_holes+0x120>)
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	687a      	ldr	r2, [r7, #4]
 800ff6a:	429a      	cmp	r2, r3
 800ff6c:	d206      	bcs.n	800ff7c <plug_holes+0x20>
 800ff6e:	4b44      	ldr	r3, [pc, #272]	; (8010080 <plug_holes+0x124>)
 800ff70:	f240 12df 	movw	r2, #479	; 0x1df
 800ff74:	4943      	ldr	r1, [pc, #268]	; (8010084 <plug_holes+0x128>)
 800ff76:	4844      	ldr	r0, [pc, #272]	; (8010088 <plug_holes+0x12c>)
 800ff78:	f00b f976 	bl	801b268 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ff7c:	4b43      	ldr	r3, [pc, #268]	; (801008c <plug_holes+0x130>)
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	687a      	ldr	r2, [r7, #4]
 800ff82:	429a      	cmp	r2, r3
 800ff84:	d306      	bcc.n	800ff94 <plug_holes+0x38>
 800ff86:	4b3e      	ldr	r3, [pc, #248]	; (8010080 <plug_holes+0x124>)
 800ff88:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ff8c:	4940      	ldr	r1, [pc, #256]	; (8010090 <plug_holes+0x134>)
 800ff8e:	483e      	ldr	r0, [pc, #248]	; (8010088 <plug_holes+0x12c>)
 800ff90:	f00b f96a 	bl	801b268 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	7a1b      	ldrb	r3, [r3, #8]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d006      	beq.n	800ffaa <plug_holes+0x4e>
 800ff9c:	4b38      	ldr	r3, [pc, #224]	; (8010080 <plug_holes+0x124>)
 800ff9e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ffa2:	493c      	ldr	r1, [pc, #240]	; (8010094 <plug_holes+0x138>)
 800ffa4:	4838      	ldr	r0, [pc, #224]	; (8010088 <plug_holes+0x12c>)
 800ffa6:	f00b f95f 	bl	801b268 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	4a3a      	ldr	r2, [pc, #232]	; (8010098 <plug_holes+0x13c>)
 800ffb0:	4293      	cmp	r3, r2
 800ffb2:	d906      	bls.n	800ffc2 <plug_holes+0x66>
 800ffb4:	4b32      	ldr	r3, [pc, #200]	; (8010080 <plug_holes+0x124>)
 800ffb6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800ffba:	4938      	ldr	r1, [pc, #224]	; (801009c <plug_holes+0x140>)
 800ffbc:	4832      	ldr	r0, [pc, #200]	; (8010088 <plug_holes+0x12c>)
 800ffbe:	f00b f953 	bl	801b268 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	f7ff ffa8 	bl	800ff1c <ptr_to_mem>
 800ffcc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ffce:	687a      	ldr	r2, [r7, #4]
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	429a      	cmp	r2, r3
 800ffd4:	d024      	beq.n	8010020 <plug_holes+0xc4>
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	7a1b      	ldrb	r3, [r3, #8]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d120      	bne.n	8010020 <plug_holes+0xc4>
 800ffde:	4b2b      	ldr	r3, [pc, #172]	; (801008c <plug_holes+0x130>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	68fa      	ldr	r2, [r7, #12]
 800ffe4:	429a      	cmp	r2, r3
 800ffe6:	d01b      	beq.n	8010020 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ffe8:	4b2d      	ldr	r3, [pc, #180]	; (80100a0 <plug_holes+0x144>)
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	68fa      	ldr	r2, [r7, #12]
 800ffee:	429a      	cmp	r2, r3
 800fff0:	d102      	bne.n	800fff8 <plug_holes+0x9c>
      lfree = mem;
 800fff2:	4a2b      	ldr	r2, [pc, #172]	; (80100a0 <plug_holes+0x144>)
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	681a      	ldr	r2, [r3, #0]
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	4a24      	ldr	r2, [pc, #144]	; (8010098 <plug_holes+0x13c>)
 8010006:	4293      	cmp	r3, r2
 8010008:	d00a      	beq.n	8010020 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	4618      	mov	r0, r3
 8010010:	f7ff ff84 	bl	800ff1c <ptr_to_mem>
 8010014:	4604      	mov	r4, r0
 8010016:	6878      	ldr	r0, [r7, #4]
 8010018:	f7ff ff90 	bl	800ff3c <mem_to_ptr>
 801001c:	4603      	mov	r3, r0
 801001e:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	685b      	ldr	r3, [r3, #4]
 8010024:	4618      	mov	r0, r3
 8010026:	f7ff ff79 	bl	800ff1c <ptr_to_mem>
 801002a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 801002c:	68ba      	ldr	r2, [r7, #8]
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	429a      	cmp	r2, r3
 8010032:	d01f      	beq.n	8010074 <plug_holes+0x118>
 8010034:	68bb      	ldr	r3, [r7, #8]
 8010036:	7a1b      	ldrb	r3, [r3, #8]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d11b      	bne.n	8010074 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801003c:	4b18      	ldr	r3, [pc, #96]	; (80100a0 <plug_holes+0x144>)
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	687a      	ldr	r2, [r7, #4]
 8010042:	429a      	cmp	r2, r3
 8010044:	d102      	bne.n	801004c <plug_holes+0xf0>
      lfree = pmem;
 8010046:	4a16      	ldr	r2, [pc, #88]	; (80100a0 <plug_holes+0x144>)
 8010048:	68bb      	ldr	r3, [r7, #8]
 801004a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	681a      	ldr	r2, [r3, #0]
 8010050:	68bb      	ldr	r3, [r7, #8]
 8010052:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	4a0f      	ldr	r2, [pc, #60]	; (8010098 <plug_holes+0x13c>)
 801005a:	4293      	cmp	r3, r2
 801005c:	d00a      	beq.n	8010074 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	4618      	mov	r0, r3
 8010064:	f7ff ff5a 	bl	800ff1c <ptr_to_mem>
 8010068:	4604      	mov	r4, r0
 801006a:	68b8      	ldr	r0, [r7, #8]
 801006c:	f7ff ff66 	bl	800ff3c <mem_to_ptr>
 8010070:	4603      	mov	r3, r0
 8010072:	6063      	str	r3, [r4, #4]
    }
  }
}
 8010074:	bf00      	nop
 8010076:	3714      	adds	r7, #20
 8010078:	46bd      	mov	sp, r7
 801007a:	bd90      	pop	{r4, r7, pc}
 801007c:	20000788 	.word	0x20000788
 8010080:	0801e324 	.word	0x0801e324
 8010084:	0801e354 	.word	0x0801e354
 8010088:	0801e36c 	.word	0x0801e36c
 801008c:	2000078c 	.word	0x2000078c
 8010090:	0801e394 	.word	0x0801e394
 8010094:	0801e3b0 	.word	0x0801e3b0
 8010098:	0001ffe8 	.word	0x0001ffe8
 801009c:	0801e3cc 	.word	0x0801e3cc
 80100a0:	20000790 	.word	0x20000790

080100a4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b082      	sub	sp, #8
 80100a8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80100aa:	4b14      	ldr	r3, [pc, #80]	; (80100fc <mem_init+0x58>)
 80100ac:	4a14      	ldr	r2, [pc, #80]	; (8010100 <mem_init+0x5c>)
 80100ae:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80100b0:	4b12      	ldr	r3, [pc, #72]	; (80100fc <mem_init+0x58>)
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	4a12      	ldr	r2, [pc, #72]	; (8010104 <mem_init+0x60>)
 80100ba:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	2200      	movs	r2, #0
 80100c0:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	2200      	movs	r2, #0
 80100c6:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80100c8:	480e      	ldr	r0, [pc, #56]	; (8010104 <mem_init+0x60>)
 80100ca:	f7ff ff27 	bl	800ff1c <ptr_to_mem>
 80100ce:	4603      	mov	r3, r0
 80100d0:	4a0d      	ldr	r2, [pc, #52]	; (8010108 <mem_init+0x64>)
 80100d2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80100d4:	4b0c      	ldr	r3, [pc, #48]	; (8010108 <mem_init+0x64>)
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	2201      	movs	r2, #1
 80100da:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 80100dc:	4b0a      	ldr	r3, [pc, #40]	; (8010108 <mem_init+0x64>)
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	4a08      	ldr	r2, [pc, #32]	; (8010104 <mem_init+0x60>)
 80100e2:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80100e4:	4b08      	ldr	r3, [pc, #32]	; (8010108 <mem_init+0x64>)
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	4a06      	ldr	r2, [pc, #24]	; (8010104 <mem_init+0x60>)
 80100ea:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80100ec:	4b03      	ldr	r3, [pc, #12]	; (80100fc <mem_init+0x58>)
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	4a06      	ldr	r2, [pc, #24]	; (801010c <mem_init+0x68>)
 80100f2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80100f4:	bf00      	nop
 80100f6:	3708      	adds	r7, #8
 80100f8:	46bd      	mov	sp, r7
 80100fa:	bd80      	pop	{r7, pc}
 80100fc:	20000788 	.word	0x20000788
 8010100:	30020000 	.word	0x30020000
 8010104:	0001ffe8 	.word	0x0001ffe8
 8010108:	2000078c 	.word	0x2000078c
 801010c:	20000790 	.word	0x20000790

08010110 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8010110:	b580      	push	{r7, lr}
 8010112:	b086      	sub	sp, #24
 8010114:	af00      	add	r7, sp, #0
 8010116:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8010118:	6878      	ldr	r0, [r7, #4]
 801011a:	f7ff ff0f 	bl	800ff3c <mem_to_ptr>
 801011e:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	4618      	mov	r0, r3
 8010126:	f7ff fef9 	bl	800ff1c <ptr_to_mem>
 801012a:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	685b      	ldr	r3, [r3, #4]
 8010130:	4618      	mov	r0, r3
 8010132:	f7ff fef3 	bl	800ff1c <ptr_to_mem>
 8010136:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	4a11      	ldr	r2, [pc, #68]	; (8010184 <mem_link_valid+0x74>)
 801013e:	4293      	cmp	r3, r2
 8010140:	d818      	bhi.n	8010174 <mem_link_valid+0x64>
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	685b      	ldr	r3, [r3, #4]
 8010146:	4a0f      	ldr	r2, [pc, #60]	; (8010184 <mem_link_valid+0x74>)
 8010148:	4293      	cmp	r3, r2
 801014a:	d813      	bhi.n	8010174 <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010150:	697a      	ldr	r2, [r7, #20]
 8010152:	429a      	cmp	r2, r3
 8010154:	d004      	beq.n	8010160 <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	697a      	ldr	r2, [r7, #20]
 801015c:	429a      	cmp	r2, r3
 801015e:	d109      	bne.n	8010174 <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010160:	4b09      	ldr	r3, [pc, #36]	; (8010188 <mem_link_valid+0x78>)
 8010162:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010164:	693a      	ldr	r2, [r7, #16]
 8010166:	429a      	cmp	r2, r3
 8010168:	d006      	beq.n	8010178 <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801016a:	693b      	ldr	r3, [r7, #16]
 801016c:	685b      	ldr	r3, [r3, #4]
 801016e:	697a      	ldr	r2, [r7, #20]
 8010170:	429a      	cmp	r2, r3
 8010172:	d001      	beq.n	8010178 <mem_link_valid+0x68>
    return 0;
 8010174:	2300      	movs	r3, #0
 8010176:	e000      	b.n	801017a <mem_link_valid+0x6a>
  }
  return 1;
 8010178:	2301      	movs	r3, #1
}
 801017a:	4618      	mov	r0, r3
 801017c:	3718      	adds	r7, #24
 801017e:	46bd      	mov	sp, r7
 8010180:	bd80      	pop	{r7, pc}
 8010182:	bf00      	nop
 8010184:	0001ffe8 	.word	0x0001ffe8
 8010188:	2000078c 	.word	0x2000078c

0801018c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b084      	sub	sp, #16
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d04c      	beq.n	8010234 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	f003 0303 	and.w	r3, r3, #3
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d007      	beq.n	80101b4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80101a4:	4b25      	ldr	r3, [pc, #148]	; (801023c <mem_free+0xb0>)
 80101a6:	f240 2273 	movw	r2, #627	; 0x273
 80101aa:	4925      	ldr	r1, [pc, #148]	; (8010240 <mem_free+0xb4>)
 80101ac:	4825      	ldr	r0, [pc, #148]	; (8010244 <mem_free+0xb8>)
 80101ae:	f00b f85b 	bl	801b268 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80101b2:	e040      	b.n	8010236 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	3b0c      	subs	r3, #12
 80101b8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80101ba:	4b23      	ldr	r3, [pc, #140]	; (8010248 <mem_free+0xbc>)
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	68fa      	ldr	r2, [r7, #12]
 80101c0:	429a      	cmp	r2, r3
 80101c2:	d306      	bcc.n	80101d2 <mem_free+0x46>
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	f103 020c 	add.w	r2, r3, #12
 80101ca:	4b20      	ldr	r3, [pc, #128]	; (801024c <mem_free+0xc0>)
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	429a      	cmp	r2, r3
 80101d0:	d907      	bls.n	80101e2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80101d2:	4b1a      	ldr	r3, [pc, #104]	; (801023c <mem_free+0xb0>)
 80101d4:	f240 227f 	movw	r2, #639	; 0x27f
 80101d8:	491d      	ldr	r1, [pc, #116]	; (8010250 <mem_free+0xc4>)
 80101da:	481a      	ldr	r0, [pc, #104]	; (8010244 <mem_free+0xb8>)
 80101dc:	f00b f844 	bl	801b268 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80101e0:	e029      	b.n	8010236 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	7a1b      	ldrb	r3, [r3, #8]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d107      	bne.n	80101fa <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80101ea:	4b14      	ldr	r3, [pc, #80]	; (801023c <mem_free+0xb0>)
 80101ec:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80101f0:	4918      	ldr	r1, [pc, #96]	; (8010254 <mem_free+0xc8>)
 80101f2:	4814      	ldr	r0, [pc, #80]	; (8010244 <mem_free+0xb8>)
 80101f4:	f00b f838 	bl	801b268 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80101f8:	e01d      	b.n	8010236 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80101fa:	68f8      	ldr	r0, [r7, #12]
 80101fc:	f7ff ff88 	bl	8010110 <mem_link_valid>
 8010200:	4603      	mov	r3, r0
 8010202:	2b00      	cmp	r3, #0
 8010204:	d107      	bne.n	8010216 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8010206:	4b0d      	ldr	r3, [pc, #52]	; (801023c <mem_free+0xb0>)
 8010208:	f240 2295 	movw	r2, #661	; 0x295
 801020c:	4912      	ldr	r1, [pc, #72]	; (8010258 <mem_free+0xcc>)
 801020e:	480d      	ldr	r0, [pc, #52]	; (8010244 <mem_free+0xb8>)
 8010210:	f00b f82a 	bl	801b268 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8010214:	e00f      	b.n	8010236 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	2200      	movs	r2, #0
 801021a:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 801021c:	4b0f      	ldr	r3, [pc, #60]	; (801025c <mem_free+0xd0>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	68fa      	ldr	r2, [r7, #12]
 8010222:	429a      	cmp	r2, r3
 8010224:	d202      	bcs.n	801022c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8010226:	4a0d      	ldr	r2, [pc, #52]	; (801025c <mem_free+0xd0>)
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801022c:	68f8      	ldr	r0, [r7, #12]
 801022e:	f7ff fe95 	bl	800ff5c <plug_holes>
 8010232:	e000      	b.n	8010236 <mem_free+0xaa>
    return;
 8010234:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8010236:	3710      	adds	r7, #16
 8010238:	46bd      	mov	sp, r7
 801023a:	bd80      	pop	{r7, pc}
 801023c:	0801e324 	.word	0x0801e324
 8010240:	0801e3f8 	.word	0x0801e3f8
 8010244:	0801e36c 	.word	0x0801e36c
 8010248:	20000788 	.word	0x20000788
 801024c:	2000078c 	.word	0x2000078c
 8010250:	0801e41c 	.word	0x0801e41c
 8010254:	0801e438 	.word	0x0801e438
 8010258:	0801e460 	.word	0x0801e460
 801025c:	20000790 	.word	0x20000790

08010260 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8010260:	b580      	push	{r7, lr}
 8010262:	b08a      	sub	sp, #40	; 0x28
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
 8010268:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801026a:	683b      	ldr	r3, [r7, #0]
 801026c:	3303      	adds	r3, #3
 801026e:	f023 0303 	bic.w	r3, r3, #3
 8010272:	627b      	str	r3, [r7, #36]	; 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 8010274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010276:	2b0b      	cmp	r3, #11
 8010278:	d801      	bhi.n	801027e <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801027a:	230c      	movs	r3, #12
 801027c:	627b      	str	r3, [r7, #36]	; 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801027e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010280:	4a68      	ldr	r2, [pc, #416]	; (8010424 <mem_trim+0x1c4>)
 8010282:	4293      	cmp	r3, r2
 8010284:	d803      	bhi.n	801028e <mem_trim+0x2e>
 8010286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010288:	683b      	ldr	r3, [r7, #0]
 801028a:	429a      	cmp	r2, r3
 801028c:	d201      	bcs.n	8010292 <mem_trim+0x32>
    return NULL;
 801028e:	2300      	movs	r3, #0
 8010290:	e0c4      	b.n	801041c <mem_trim+0x1bc>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8010292:	4b65      	ldr	r3, [pc, #404]	; (8010428 <mem_trim+0x1c8>)
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	687a      	ldr	r2, [r7, #4]
 8010298:	429a      	cmp	r2, r3
 801029a:	d304      	bcc.n	80102a6 <mem_trim+0x46>
 801029c:	4b63      	ldr	r3, [pc, #396]	; (801042c <mem_trim+0x1cc>)
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	687a      	ldr	r2, [r7, #4]
 80102a2:	429a      	cmp	r2, r3
 80102a4:	d306      	bcc.n	80102b4 <mem_trim+0x54>
 80102a6:	4b62      	ldr	r3, [pc, #392]	; (8010430 <mem_trim+0x1d0>)
 80102a8:	f240 22d1 	movw	r2, #721	; 0x2d1
 80102ac:	4961      	ldr	r1, [pc, #388]	; (8010434 <mem_trim+0x1d4>)
 80102ae:	4862      	ldr	r0, [pc, #392]	; (8010438 <mem_trim+0x1d8>)
 80102b0:	f00a ffda 	bl	801b268 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80102b4:	4b5c      	ldr	r3, [pc, #368]	; (8010428 <mem_trim+0x1c8>)
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	687a      	ldr	r2, [r7, #4]
 80102ba:	429a      	cmp	r2, r3
 80102bc:	d304      	bcc.n	80102c8 <mem_trim+0x68>
 80102be:	4b5b      	ldr	r3, [pc, #364]	; (801042c <mem_trim+0x1cc>)
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	687a      	ldr	r2, [r7, #4]
 80102c4:	429a      	cmp	r2, r3
 80102c6:	d301      	bcc.n	80102cc <mem_trim+0x6c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	e0a7      	b.n	801041c <mem_trim+0x1bc>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	3b0c      	subs	r3, #12
 80102d0:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80102d2:	6a38      	ldr	r0, [r7, #32]
 80102d4:	f7ff fe32 	bl	800ff3c <mem_to_ptr>
 80102d8:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80102da:	6a3b      	ldr	r3, [r7, #32]
 80102dc:	681a      	ldr	r2, [r3, #0]
 80102de:	69fb      	ldr	r3, [r7, #28]
 80102e0:	1ad3      	subs	r3, r2, r3
 80102e2:	3b0c      	subs	r3, #12
 80102e4:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80102e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102e8:	69bb      	ldr	r3, [r7, #24]
 80102ea:	429a      	cmp	r2, r3
 80102ec:	d906      	bls.n	80102fc <mem_trim+0x9c>
 80102ee:	4b50      	ldr	r3, [pc, #320]	; (8010430 <mem_trim+0x1d0>)
 80102f0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80102f4:	4951      	ldr	r1, [pc, #324]	; (801043c <mem_trim+0x1dc>)
 80102f6:	4850      	ldr	r0, [pc, #320]	; (8010438 <mem_trim+0x1d8>)
 80102f8:	f00a ffb6 	bl	801b268 <iprintf>
  if (newsize > size) {
 80102fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102fe:	69bb      	ldr	r3, [r7, #24]
 8010300:	429a      	cmp	r2, r3
 8010302:	d901      	bls.n	8010308 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 8010304:	2300      	movs	r3, #0
 8010306:	e089      	b.n	801041c <mem_trim+0x1bc>
  }
  if (newsize == size) {
 8010308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801030a:	69bb      	ldr	r3, [r7, #24]
 801030c:	429a      	cmp	r2, r3
 801030e:	d101      	bne.n	8010314 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	e083      	b.n	801041c <mem_trim+0x1bc>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8010314:	6a3b      	ldr	r3, [r7, #32]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	4618      	mov	r0, r3
 801031a:	f7ff fdff 	bl	800ff1c <ptr_to_mem>
 801031e:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 8010320:	697b      	ldr	r3, [r7, #20]
 8010322:	7a1b      	ldrb	r3, [r3, #8]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d13c      	bne.n	80103a2 <mem_trim+0x142>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010328:	6a3b      	ldr	r3, [r7, #32]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	4a3d      	ldr	r2, [pc, #244]	; (8010424 <mem_trim+0x1c4>)
 801032e:	4293      	cmp	r3, r2
 8010330:	d106      	bne.n	8010340 <mem_trim+0xe0>
 8010332:	4b3f      	ldr	r3, [pc, #252]	; (8010430 <mem_trim+0x1d0>)
 8010334:	f240 22f5 	movw	r2, #757	; 0x2f5
 8010338:	4941      	ldr	r1, [pc, #260]	; (8010440 <mem_trim+0x1e0>)
 801033a:	483f      	ldr	r0, [pc, #252]	; (8010438 <mem_trim+0x1d8>)
 801033c:	f00a ff94 	bl	801b268 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8010340:	697b      	ldr	r3, [r7, #20]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010346:	69fa      	ldr	r2, [r7, #28]
 8010348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801034a:	4413      	add	r3, r2
 801034c:	330c      	adds	r3, #12
 801034e:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 8010350:	4b3c      	ldr	r3, [pc, #240]	; (8010444 <mem_trim+0x1e4>)
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	697a      	ldr	r2, [r7, #20]
 8010356:	429a      	cmp	r2, r3
 8010358:	d105      	bne.n	8010366 <mem_trim+0x106>
      lfree = ptr_to_mem(ptr2);
 801035a:	6938      	ldr	r0, [r7, #16]
 801035c:	f7ff fdde 	bl	800ff1c <ptr_to_mem>
 8010360:	4603      	mov	r3, r0
 8010362:	4a38      	ldr	r2, [pc, #224]	; (8010444 <mem_trim+0x1e4>)
 8010364:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8010366:	6938      	ldr	r0, [r7, #16]
 8010368:	f7ff fdd8 	bl	800ff1c <ptr_to_mem>
 801036c:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 801036e:	697b      	ldr	r3, [r7, #20]
 8010370:	2200      	movs	r2, #0
 8010372:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 8010374:	697b      	ldr	r3, [r7, #20]
 8010376:	68fa      	ldr	r2, [r7, #12]
 8010378:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801037a:	697b      	ldr	r3, [r7, #20]
 801037c:	69fa      	ldr	r2, [r7, #28]
 801037e:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 8010380:	6a3b      	ldr	r3, [r7, #32]
 8010382:	693a      	ldr	r2, [r7, #16]
 8010384:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010386:	697b      	ldr	r3, [r7, #20]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	4a26      	ldr	r2, [pc, #152]	; (8010424 <mem_trim+0x1c4>)
 801038c:	4293      	cmp	r3, r2
 801038e:	d044      	beq.n	801041a <mem_trim+0x1ba>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010390:	697b      	ldr	r3, [r7, #20]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	4618      	mov	r0, r3
 8010396:	f7ff fdc1 	bl	800ff1c <ptr_to_mem>
 801039a:	4602      	mov	r2, r0
 801039c:	693b      	ldr	r3, [r7, #16]
 801039e:	6053      	str	r3, [r2, #4]
 80103a0:	e03b      	b.n	801041a <mem_trim+0x1ba>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80103a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103a4:	3318      	adds	r3, #24
 80103a6:	69ba      	ldr	r2, [r7, #24]
 80103a8:	429a      	cmp	r2, r3
 80103aa:	d336      	bcc.n	801041a <mem_trim+0x1ba>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80103ac:	69fa      	ldr	r2, [r7, #28]
 80103ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103b0:	4413      	add	r3, r2
 80103b2:	330c      	adds	r3, #12
 80103b4:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80103b6:	6a3b      	ldr	r3, [r7, #32]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	4a1a      	ldr	r2, [pc, #104]	; (8010424 <mem_trim+0x1c4>)
 80103bc:	4293      	cmp	r3, r2
 80103be:	d106      	bne.n	80103ce <mem_trim+0x16e>
 80103c0:	4b1b      	ldr	r3, [pc, #108]	; (8010430 <mem_trim+0x1d0>)
 80103c2:	f240 3216 	movw	r2, #790	; 0x316
 80103c6:	491e      	ldr	r1, [pc, #120]	; (8010440 <mem_trim+0x1e0>)
 80103c8:	481b      	ldr	r0, [pc, #108]	; (8010438 <mem_trim+0x1d8>)
 80103ca:	f00a ff4d 	bl	801b268 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80103ce:	6938      	ldr	r0, [r7, #16]
 80103d0:	f7ff fda4 	bl	800ff1c <ptr_to_mem>
 80103d4:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 80103d6:	4b1b      	ldr	r3, [pc, #108]	; (8010444 <mem_trim+0x1e4>)
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	697a      	ldr	r2, [r7, #20]
 80103dc:	429a      	cmp	r2, r3
 80103de:	d202      	bcs.n	80103e6 <mem_trim+0x186>
      lfree = mem2;
 80103e0:	4a18      	ldr	r2, [pc, #96]	; (8010444 <mem_trim+0x1e4>)
 80103e2:	697b      	ldr	r3, [r7, #20]
 80103e4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80103e6:	697b      	ldr	r3, [r7, #20]
 80103e8:	2200      	movs	r2, #0
 80103ea:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 80103ec:	6a3b      	ldr	r3, [r7, #32]
 80103ee:	681a      	ldr	r2, [r3, #0]
 80103f0:	697b      	ldr	r3, [r7, #20]
 80103f2:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 80103f4:	697b      	ldr	r3, [r7, #20]
 80103f6:	69fa      	ldr	r2, [r7, #28]
 80103f8:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 80103fa:	6a3b      	ldr	r3, [r7, #32]
 80103fc:	693a      	ldr	r2, [r7, #16]
 80103fe:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010400:	697b      	ldr	r3, [r7, #20]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	4a07      	ldr	r2, [pc, #28]	; (8010424 <mem_trim+0x1c4>)
 8010406:	4293      	cmp	r3, r2
 8010408:	d007      	beq.n	801041a <mem_trim+0x1ba>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801040a:	697b      	ldr	r3, [r7, #20]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	4618      	mov	r0, r3
 8010410:	f7ff fd84 	bl	800ff1c <ptr_to_mem>
 8010414:	4602      	mov	r2, r0
 8010416:	693b      	ldr	r3, [r7, #16]
 8010418:	6053      	str	r3, [r2, #4]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 801041a:	687b      	ldr	r3, [r7, #4]
}
 801041c:	4618      	mov	r0, r3
 801041e:	3728      	adds	r7, #40	; 0x28
 8010420:	46bd      	mov	sp, r7
 8010422:	bd80      	pop	{r7, pc}
 8010424:	0001ffe8 	.word	0x0001ffe8
 8010428:	20000788 	.word	0x20000788
 801042c:	2000078c 	.word	0x2000078c
 8010430:	0801e324 	.word	0x0801e324
 8010434:	0801e494 	.word	0x0801e494
 8010438:	0801e36c 	.word	0x0801e36c
 801043c:	0801e4ac 	.word	0x0801e4ac
 8010440:	0801e4cc 	.word	0x0801e4cc
 8010444:	20000790 	.word	0x20000790

08010448 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b088      	sub	sp, #32
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	2b00      	cmp	r3, #0
 8010454:	d101      	bne.n	801045a <mem_malloc+0x12>
    return NULL;
 8010456:	2300      	movs	r3, #0
 8010458:	e0d0      	b.n	80105fc <mem_malloc+0x1b4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	3303      	adds	r3, #3
 801045e:	f023 0303 	bic.w	r3, r3, #3
 8010462:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 8010464:	69bb      	ldr	r3, [r7, #24]
 8010466:	2b0b      	cmp	r3, #11
 8010468:	d801      	bhi.n	801046e <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801046a:	230c      	movs	r3, #12
 801046c:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801046e:	69bb      	ldr	r3, [r7, #24]
 8010470:	4a64      	ldr	r2, [pc, #400]	; (8010604 <mem_malloc+0x1bc>)
 8010472:	4293      	cmp	r3, r2
 8010474:	d803      	bhi.n	801047e <mem_malloc+0x36>
 8010476:	69ba      	ldr	r2, [r7, #24]
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	429a      	cmp	r2, r3
 801047c:	d201      	bcs.n	8010482 <mem_malloc+0x3a>
    return NULL;
 801047e:	2300      	movs	r3, #0
 8010480:	e0bc      	b.n	80105fc <mem_malloc+0x1b4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010482:	4b61      	ldr	r3, [pc, #388]	; (8010608 <mem_malloc+0x1c0>)
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	4618      	mov	r0, r3
 8010488:	f7ff fd58 	bl	800ff3c <mem_to_ptr>
 801048c:	61f8      	str	r0, [r7, #28]
 801048e:	e0ad      	b.n	80105ec <mem_malloc+0x1a4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8010490:	69f8      	ldr	r0, [r7, #28]
 8010492:	f7ff fd43 	bl	800ff1c <ptr_to_mem>
 8010496:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8010498:	693b      	ldr	r3, [r7, #16]
 801049a:	7a1b      	ldrb	r3, [r3, #8]
 801049c:	2b00      	cmp	r3, #0
 801049e:	f040 809f 	bne.w	80105e0 <mem_malloc+0x198>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80104a2:	693b      	ldr	r3, [r7, #16]
 80104a4:	681a      	ldr	r2, [r3, #0]
 80104a6:	69fb      	ldr	r3, [r7, #28]
 80104a8:	1ad3      	subs	r3, r2, r3
 80104aa:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 80104ac:	69ba      	ldr	r2, [r7, #24]
 80104ae:	429a      	cmp	r2, r3
 80104b0:	f200 8096 	bhi.w	80105e0 <mem_malloc+0x198>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80104b4:	693b      	ldr	r3, [r7, #16]
 80104b6:	681a      	ldr	r2, [r3, #0]
 80104b8:	69fb      	ldr	r3, [r7, #28]
 80104ba:	1ad3      	subs	r3, r2, r3
 80104bc:	f1a3 020c 	sub.w	r2, r3, #12
 80104c0:	69bb      	ldr	r3, [r7, #24]
 80104c2:	3318      	adds	r3, #24
 80104c4:	429a      	cmp	r2, r3
 80104c6:	d331      	bcc.n	801052c <mem_malloc+0xe4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80104c8:	69fa      	ldr	r2, [r7, #28]
 80104ca:	69bb      	ldr	r3, [r7, #24]
 80104cc:	4413      	add	r3, r2
 80104ce:	330c      	adds	r3, #12
 80104d0:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	4a4b      	ldr	r2, [pc, #300]	; (8010604 <mem_malloc+0x1bc>)
 80104d6:	4293      	cmp	r3, r2
 80104d8:	d106      	bne.n	80104e8 <mem_malloc+0xa0>
 80104da:	4b4c      	ldr	r3, [pc, #304]	; (801060c <mem_malloc+0x1c4>)
 80104dc:	f240 3287 	movw	r2, #903	; 0x387
 80104e0:	494b      	ldr	r1, [pc, #300]	; (8010610 <mem_malloc+0x1c8>)
 80104e2:	484c      	ldr	r0, [pc, #304]	; (8010614 <mem_malloc+0x1cc>)
 80104e4:	f00a fec0 	bl	801b268 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80104e8:	68f8      	ldr	r0, [r7, #12]
 80104ea:	f7ff fd17 	bl	800ff1c <ptr_to_mem>
 80104ee:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 80104f0:	68bb      	ldr	r3, [r7, #8]
 80104f2:	2200      	movs	r2, #0
 80104f4:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 80104f6:	693b      	ldr	r3, [r7, #16]
 80104f8:	681a      	ldr	r2, [r3, #0]
 80104fa:	68bb      	ldr	r3, [r7, #8]
 80104fc:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 80104fe:	68bb      	ldr	r3, [r7, #8]
 8010500:	69fa      	ldr	r2, [r7, #28]
 8010502:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8010504:	693b      	ldr	r3, [r7, #16]
 8010506:	68fa      	ldr	r2, [r7, #12]
 8010508:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 801050a:	693b      	ldr	r3, [r7, #16]
 801050c:	2201      	movs	r2, #1
 801050e:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8010510:	68bb      	ldr	r3, [r7, #8]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	4a3b      	ldr	r2, [pc, #236]	; (8010604 <mem_malloc+0x1bc>)
 8010516:	4293      	cmp	r3, r2
 8010518:	d00b      	beq.n	8010532 <mem_malloc+0xea>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801051a:	68bb      	ldr	r3, [r7, #8]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	4618      	mov	r0, r3
 8010520:	f7ff fcfc 	bl	800ff1c <ptr_to_mem>
 8010524:	4602      	mov	r2, r0
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	6053      	str	r3, [r2, #4]
 801052a:	e002      	b.n	8010532 <mem_malloc+0xea>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801052c:	693b      	ldr	r3, [r7, #16]
 801052e:	2201      	movs	r2, #1
 8010530:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8010532:	4b35      	ldr	r3, [pc, #212]	; (8010608 <mem_malloc+0x1c0>)
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	693a      	ldr	r2, [r7, #16]
 8010538:	429a      	cmp	r2, r3
 801053a:	d127      	bne.n	801058c <mem_malloc+0x144>
          struct mem *cur = lfree;
 801053c:	4b32      	ldr	r3, [pc, #200]	; (8010608 <mem_malloc+0x1c0>)
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8010542:	e005      	b.n	8010550 <mem_malloc+0x108>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8010544:	697b      	ldr	r3, [r7, #20]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	4618      	mov	r0, r3
 801054a:	f7ff fce7 	bl	800ff1c <ptr_to_mem>
 801054e:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 8010550:	697b      	ldr	r3, [r7, #20]
 8010552:	7a1b      	ldrb	r3, [r3, #8]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d004      	beq.n	8010562 <mem_malloc+0x11a>
 8010558:	4b2f      	ldr	r3, [pc, #188]	; (8010618 <mem_malloc+0x1d0>)
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	697a      	ldr	r2, [r7, #20]
 801055e:	429a      	cmp	r2, r3
 8010560:	d1f0      	bne.n	8010544 <mem_malloc+0xfc>
          }
          lfree = cur;
 8010562:	4a29      	ldr	r2, [pc, #164]	; (8010608 <mem_malloc+0x1c0>)
 8010564:	697b      	ldr	r3, [r7, #20]
 8010566:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8010568:	4b27      	ldr	r3, [pc, #156]	; (8010608 <mem_malloc+0x1c0>)
 801056a:	681a      	ldr	r2, [r3, #0]
 801056c:	4b2a      	ldr	r3, [pc, #168]	; (8010618 <mem_malloc+0x1d0>)
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	429a      	cmp	r2, r3
 8010572:	d00b      	beq.n	801058c <mem_malloc+0x144>
 8010574:	4b24      	ldr	r3, [pc, #144]	; (8010608 <mem_malloc+0x1c0>)
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	7a1b      	ldrb	r3, [r3, #8]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d006      	beq.n	801058c <mem_malloc+0x144>
 801057e:	4b23      	ldr	r3, [pc, #140]	; (801060c <mem_malloc+0x1c4>)
 8010580:	f240 32b5 	movw	r2, #949	; 0x3b5
 8010584:	4925      	ldr	r1, [pc, #148]	; (801061c <mem_malloc+0x1d4>)
 8010586:	4823      	ldr	r0, [pc, #140]	; (8010614 <mem_malloc+0x1cc>)
 8010588:	f00a fe6e 	bl	801b268 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801058c:	693a      	ldr	r2, [r7, #16]
 801058e:	69bb      	ldr	r3, [r7, #24]
 8010590:	4413      	add	r3, r2
 8010592:	330c      	adds	r3, #12
 8010594:	4a20      	ldr	r2, [pc, #128]	; (8010618 <mem_malloc+0x1d0>)
 8010596:	6812      	ldr	r2, [r2, #0]
 8010598:	4293      	cmp	r3, r2
 801059a:	d906      	bls.n	80105aa <mem_malloc+0x162>
 801059c:	4b1b      	ldr	r3, [pc, #108]	; (801060c <mem_malloc+0x1c4>)
 801059e:	f240 32b9 	movw	r2, #953	; 0x3b9
 80105a2:	491f      	ldr	r1, [pc, #124]	; (8010620 <mem_malloc+0x1d8>)
 80105a4:	481b      	ldr	r0, [pc, #108]	; (8010614 <mem_malloc+0x1cc>)
 80105a6:	f00a fe5f 	bl	801b268 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80105aa:	693b      	ldr	r3, [r7, #16]
 80105ac:	f003 0303 	and.w	r3, r3, #3
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d006      	beq.n	80105c2 <mem_malloc+0x17a>
 80105b4:	4b15      	ldr	r3, [pc, #84]	; (801060c <mem_malloc+0x1c4>)
 80105b6:	f240 32bb 	movw	r2, #955	; 0x3bb
 80105ba:	491a      	ldr	r1, [pc, #104]	; (8010624 <mem_malloc+0x1dc>)
 80105bc:	4815      	ldr	r0, [pc, #84]	; (8010614 <mem_malloc+0x1cc>)
 80105be:	f00a fe53 	bl	801b268 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80105c2:	693b      	ldr	r3, [r7, #16]
 80105c4:	f003 0303 	and.w	r3, r3, #3
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d006      	beq.n	80105da <mem_malloc+0x192>
 80105cc:	4b0f      	ldr	r3, [pc, #60]	; (801060c <mem_malloc+0x1c4>)
 80105ce:	f240 32bd 	movw	r2, #957	; 0x3bd
 80105d2:	4915      	ldr	r1, [pc, #84]	; (8010628 <mem_malloc+0x1e0>)
 80105d4:	480f      	ldr	r0, [pc, #60]	; (8010614 <mem_malloc+0x1cc>)
 80105d6:	f00a fe47 	bl	801b268 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80105da:	693b      	ldr	r3, [r7, #16]
 80105dc:	330c      	adds	r3, #12
 80105de:	e00d      	b.n	80105fc <mem_malloc+0x1b4>
         ptr = ptr_to_mem(ptr)->next) {
 80105e0:	69f8      	ldr	r0, [r7, #28]
 80105e2:	f7ff fc9b 	bl	800ff1c <ptr_to_mem>
 80105e6:	4603      	mov	r3, r0
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80105ec:	69ba      	ldr	r2, [r7, #24]
 80105ee:	4b05      	ldr	r3, [pc, #20]	; (8010604 <mem_malloc+0x1bc>)
 80105f0:	1a9b      	subs	r3, r3, r2
 80105f2:	69fa      	ldr	r2, [r7, #28]
 80105f4:	429a      	cmp	r2, r3
 80105f6:	f4ff af4b 	bcc.w	8010490 <mem_malloc+0x48>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80105fa:	2300      	movs	r3, #0
}
 80105fc:	4618      	mov	r0, r3
 80105fe:	3720      	adds	r7, #32
 8010600:	46bd      	mov	sp, r7
 8010602:	bd80      	pop	{r7, pc}
 8010604:	0001ffe8 	.word	0x0001ffe8
 8010608:	20000790 	.word	0x20000790
 801060c:	0801e324 	.word	0x0801e324
 8010610:	0801e4cc 	.word	0x0801e4cc
 8010614:	0801e36c 	.word	0x0801e36c
 8010618:	2000078c 	.word	0x2000078c
 801061c:	0801e4e0 	.word	0x0801e4e0
 8010620:	0801e4fc 	.word	0x0801e4fc
 8010624:	0801e52c 	.word	0x0801e52c
 8010628:	0801e55c 	.word	0x0801e55c

0801062c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 801062c:	b480      	push	{r7}
 801062e:	b085      	sub	sp, #20
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	689b      	ldr	r3, [r3, #8]
 8010638:	2200      	movs	r2, #0
 801063a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	685b      	ldr	r3, [r3, #4]
 8010640:	3303      	adds	r3, #3
 8010642:	f023 0303 	bic.w	r3, r3, #3
 8010646:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8010648:	2300      	movs	r3, #0
 801064a:	60fb      	str	r3, [r7, #12]
 801064c:	e011      	b.n	8010672 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	689b      	ldr	r3, [r3, #8]
 8010652:	681a      	ldr	r2, [r3, #0]
 8010654:	68bb      	ldr	r3, [r7, #8]
 8010656:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	689b      	ldr	r3, [r3, #8]
 801065c:	68ba      	ldr	r2, [r7, #8]
 801065e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	881b      	ldrh	r3, [r3, #0]
 8010664:	461a      	mov	r2, r3
 8010666:	68bb      	ldr	r3, [r7, #8]
 8010668:	4413      	add	r3, r2
 801066a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	3301      	adds	r3, #1
 8010670:	60fb      	str	r3, [r7, #12]
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	885b      	ldrh	r3, [r3, #2]
 8010676:	461a      	mov	r2, r3
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	4293      	cmp	r3, r2
 801067c:	dbe7      	blt.n	801064e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801067e:	bf00      	nop
 8010680:	bf00      	nop
 8010682:	3714      	adds	r7, #20
 8010684:	46bd      	mov	sp, r7
 8010686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068a:	4770      	bx	lr

0801068c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b082      	sub	sp, #8
 8010690:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010692:	2300      	movs	r3, #0
 8010694:	80fb      	strh	r3, [r7, #6]
 8010696:	e009      	b.n	80106ac <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8010698:	88fb      	ldrh	r3, [r7, #6]
 801069a:	4a08      	ldr	r2, [pc, #32]	; (80106bc <memp_init+0x30>)
 801069c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80106a0:	4618      	mov	r0, r3
 80106a2:	f7ff ffc3 	bl	801062c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80106a6:	88fb      	ldrh	r3, [r7, #6]
 80106a8:	3301      	adds	r3, #1
 80106aa:	80fb      	strh	r3, [r7, #6]
 80106ac:	88fb      	ldrh	r3, [r7, #6]
 80106ae:	2b08      	cmp	r3, #8
 80106b0:	d9f2      	bls.n	8010698 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80106b2:	bf00      	nop
 80106b4:	bf00      	nop
 80106b6:	3708      	adds	r7, #8
 80106b8:	46bd      	mov	sp, r7
 80106ba:	bd80      	pop	{r7, pc}
 80106bc:	08020d80 	.word	0x08020d80

080106c0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b084      	sub	sp, #16
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	689b      	ldr	r3, [r3, #8]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d012      	beq.n	80106fc <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	689b      	ldr	r3, [r3, #8]
 80106da:	68fa      	ldr	r2, [r7, #12]
 80106dc:	6812      	ldr	r2, [r2, #0]
 80106de:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	f003 0303 	and.w	r3, r3, #3
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d006      	beq.n	80106f8 <do_memp_malloc_pool+0x38>
 80106ea:	4b07      	ldr	r3, [pc, #28]	; (8010708 <do_memp_malloc_pool+0x48>)
 80106ec:	f44f 728c 	mov.w	r2, #280	; 0x118
 80106f0:	4906      	ldr	r1, [pc, #24]	; (801070c <do_memp_malloc_pool+0x4c>)
 80106f2:	4807      	ldr	r0, [pc, #28]	; (8010710 <do_memp_malloc_pool+0x50>)
 80106f4:	f00a fdb8 	bl	801b268 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	e000      	b.n	80106fe <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80106fc:	2300      	movs	r3, #0
}
 80106fe:	4618      	mov	r0, r3
 8010700:	3710      	adds	r7, #16
 8010702:	46bd      	mov	sp, r7
 8010704:	bd80      	pop	{r7, pc}
 8010706:	bf00      	nop
 8010708:	0801e580 	.word	0x0801e580
 801070c:	0801e5b0 	.word	0x0801e5b0
 8010710:	0801e5d4 	.word	0x0801e5d4

08010714 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b082      	sub	sp, #8
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d106      	bne.n	8010730 <memp_malloc_pool+0x1c>
 8010722:	4b0a      	ldr	r3, [pc, #40]	; (801074c <memp_malloc_pool+0x38>)
 8010724:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8010728:	4909      	ldr	r1, [pc, #36]	; (8010750 <memp_malloc_pool+0x3c>)
 801072a:	480a      	ldr	r0, [pc, #40]	; (8010754 <memp_malloc_pool+0x40>)
 801072c:	f00a fd9c 	bl	801b268 <iprintf>
  if (desc == NULL) {
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d101      	bne.n	801073a <memp_malloc_pool+0x26>
    return NULL;
 8010736:	2300      	movs	r3, #0
 8010738:	e003      	b.n	8010742 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801073a:	6878      	ldr	r0, [r7, #4]
 801073c:	f7ff ffc0 	bl	80106c0 <do_memp_malloc_pool>
 8010740:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8010742:	4618      	mov	r0, r3
 8010744:	3708      	adds	r7, #8
 8010746:	46bd      	mov	sp, r7
 8010748:	bd80      	pop	{r7, pc}
 801074a:	bf00      	nop
 801074c:	0801e580 	.word	0x0801e580
 8010750:	0801e5fc 	.word	0x0801e5fc
 8010754:	0801e5d4 	.word	0x0801e5d4

08010758 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b084      	sub	sp, #16
 801075c:	af00      	add	r7, sp, #0
 801075e:	4603      	mov	r3, r0
 8010760:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8010762:	79fb      	ldrb	r3, [r7, #7]
 8010764:	2b08      	cmp	r3, #8
 8010766:	d908      	bls.n	801077a <memp_malloc+0x22>
 8010768:	4b0a      	ldr	r3, [pc, #40]	; (8010794 <memp_malloc+0x3c>)
 801076a:	f240 1257 	movw	r2, #343	; 0x157
 801076e:	490a      	ldr	r1, [pc, #40]	; (8010798 <memp_malloc+0x40>)
 8010770:	480a      	ldr	r0, [pc, #40]	; (801079c <memp_malloc+0x44>)
 8010772:	f00a fd79 	bl	801b268 <iprintf>
 8010776:	2300      	movs	r3, #0
 8010778:	e008      	b.n	801078c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801077a:	79fb      	ldrb	r3, [r7, #7]
 801077c:	4a08      	ldr	r2, [pc, #32]	; (80107a0 <memp_malloc+0x48>)
 801077e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010782:	4618      	mov	r0, r3
 8010784:	f7ff ff9c 	bl	80106c0 <do_memp_malloc_pool>
 8010788:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801078a:	68fb      	ldr	r3, [r7, #12]
}
 801078c:	4618      	mov	r0, r3
 801078e:	3710      	adds	r7, #16
 8010790:	46bd      	mov	sp, r7
 8010792:	bd80      	pop	{r7, pc}
 8010794:	0801e580 	.word	0x0801e580
 8010798:	0801e610 	.word	0x0801e610
 801079c:	0801e5d4 	.word	0x0801e5d4
 80107a0:	08020d80 	.word	0x08020d80

080107a4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b084      	sub	sp, #16
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
 80107ac:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80107ae:	683b      	ldr	r3, [r7, #0]
 80107b0:	f003 0303 	and.w	r3, r3, #3
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d006      	beq.n	80107c6 <do_memp_free_pool+0x22>
 80107b8:	4b0a      	ldr	r3, [pc, #40]	; (80107e4 <do_memp_free_pool+0x40>)
 80107ba:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80107be:	490a      	ldr	r1, [pc, #40]	; (80107e8 <do_memp_free_pool+0x44>)
 80107c0:	480a      	ldr	r0, [pc, #40]	; (80107ec <do_memp_free_pool+0x48>)
 80107c2:	f00a fd51 	bl	801b268 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80107c6:	683b      	ldr	r3, [r7, #0]
 80107c8:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	689b      	ldr	r3, [r3, #8]
 80107ce:	681a      	ldr	r2, [r3, #0]
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	689b      	ldr	r3, [r3, #8]
 80107d8:	68fa      	ldr	r2, [r7, #12]
 80107da:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80107dc:	bf00      	nop
 80107de:	3710      	adds	r7, #16
 80107e0:	46bd      	mov	sp, r7
 80107e2:	bd80      	pop	{r7, pc}
 80107e4:	0801e580 	.word	0x0801e580
 80107e8:	0801e630 	.word	0x0801e630
 80107ec:	0801e5d4 	.word	0x0801e5d4

080107f0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b082      	sub	sp, #8
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
 80107f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d106      	bne.n	801080e <memp_free_pool+0x1e>
 8010800:	4b0a      	ldr	r3, [pc, #40]	; (801082c <memp_free_pool+0x3c>)
 8010802:	f240 1295 	movw	r2, #405	; 0x195
 8010806:	490a      	ldr	r1, [pc, #40]	; (8010830 <memp_free_pool+0x40>)
 8010808:	480a      	ldr	r0, [pc, #40]	; (8010834 <memp_free_pool+0x44>)
 801080a:	f00a fd2d 	bl	801b268 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d007      	beq.n	8010824 <memp_free_pool+0x34>
 8010814:	683b      	ldr	r3, [r7, #0]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d004      	beq.n	8010824 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 801081a:	6839      	ldr	r1, [r7, #0]
 801081c:	6878      	ldr	r0, [r7, #4]
 801081e:	f7ff ffc1 	bl	80107a4 <do_memp_free_pool>
 8010822:	e000      	b.n	8010826 <memp_free_pool+0x36>
    return;
 8010824:	bf00      	nop
}
 8010826:	3708      	adds	r7, #8
 8010828:	46bd      	mov	sp, r7
 801082a:	bd80      	pop	{r7, pc}
 801082c:	0801e580 	.word	0x0801e580
 8010830:	0801e5fc 	.word	0x0801e5fc
 8010834:	0801e5d4 	.word	0x0801e5d4

08010838 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b082      	sub	sp, #8
 801083c:	af00      	add	r7, sp, #0
 801083e:	4603      	mov	r3, r0
 8010840:	6039      	str	r1, [r7, #0]
 8010842:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8010844:	79fb      	ldrb	r3, [r7, #7]
 8010846:	2b08      	cmp	r3, #8
 8010848:	d907      	bls.n	801085a <memp_free+0x22>
 801084a:	4b0c      	ldr	r3, [pc, #48]	; (801087c <memp_free+0x44>)
 801084c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8010850:	490b      	ldr	r1, [pc, #44]	; (8010880 <memp_free+0x48>)
 8010852:	480c      	ldr	r0, [pc, #48]	; (8010884 <memp_free+0x4c>)
 8010854:	f00a fd08 	bl	801b268 <iprintf>
 8010858:	e00c      	b.n	8010874 <memp_free+0x3c>

  if (mem == NULL) {
 801085a:	683b      	ldr	r3, [r7, #0]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d008      	beq.n	8010872 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8010860:	79fb      	ldrb	r3, [r7, #7]
 8010862:	4a09      	ldr	r2, [pc, #36]	; (8010888 <memp_free+0x50>)
 8010864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010868:	6839      	ldr	r1, [r7, #0]
 801086a:	4618      	mov	r0, r3
 801086c:	f7ff ff9a 	bl	80107a4 <do_memp_free_pool>
 8010870:	e000      	b.n	8010874 <memp_free+0x3c>
    return;
 8010872:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8010874:	3708      	adds	r7, #8
 8010876:	46bd      	mov	sp, r7
 8010878:	bd80      	pop	{r7, pc}
 801087a:	bf00      	nop
 801087c:	0801e580 	.word	0x0801e580
 8010880:	0801e650 	.word	0x0801e650
 8010884:	0801e5d4 	.word	0x0801e5d4
 8010888:	08020d80 	.word	0x08020d80

0801088c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801088c:	b480      	push	{r7}
 801088e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8010890:	bf00      	nop
 8010892:	46bd      	mov	sp, r7
 8010894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010898:	4770      	bx	lr
	...

0801089c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801089c:	b580      	push	{r7, lr}
 801089e:	b086      	sub	sp, #24
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	60f8      	str	r0, [r7, #12]
 80108a4:	60b9      	str	r1, [r7, #8]
 80108a6:	607a      	str	r2, [r7, #4]
 80108a8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d108      	bne.n	80108c2 <netif_add+0x26>
 80108b0:	4b57      	ldr	r3, [pc, #348]	; (8010a10 <netif_add+0x174>)
 80108b2:	f240 1227 	movw	r2, #295	; 0x127
 80108b6:	4957      	ldr	r1, [pc, #348]	; (8010a14 <netif_add+0x178>)
 80108b8:	4857      	ldr	r0, [pc, #348]	; (8010a18 <netif_add+0x17c>)
 80108ba:	f00a fcd5 	bl	801b268 <iprintf>
 80108be:	2300      	movs	r3, #0
 80108c0:	e0a2      	b.n	8010a08 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80108c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d108      	bne.n	80108da <netif_add+0x3e>
 80108c8:	4b51      	ldr	r3, [pc, #324]	; (8010a10 <netif_add+0x174>)
 80108ca:	f44f 7294 	mov.w	r2, #296	; 0x128
 80108ce:	4953      	ldr	r1, [pc, #332]	; (8010a1c <netif_add+0x180>)
 80108d0:	4851      	ldr	r0, [pc, #324]	; (8010a18 <netif_add+0x17c>)
 80108d2:	f00a fcc9 	bl	801b268 <iprintf>
 80108d6:	2300      	movs	r3, #0
 80108d8:	e096      	b.n	8010a08 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80108da:	68bb      	ldr	r3, [r7, #8]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d101      	bne.n	80108e4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80108e0:	4b4f      	ldr	r3, [pc, #316]	; (8010a20 <netif_add+0x184>)
 80108e2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d101      	bne.n	80108ee <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80108ea:	4b4d      	ldr	r3, [pc, #308]	; (8010a20 <netif_add+0x184>)
 80108ec:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80108ee:	683b      	ldr	r3, [r7, #0]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d101      	bne.n	80108f8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80108f4:	4b4a      	ldr	r3, [pc, #296]	; (8010a20 <netif_add+0x184>)
 80108f6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	2200      	movs	r2, #0
 80108fc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	2200      	movs	r2, #0
 8010902:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	2200      	movs	r2, #0
 8010908:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	4a45      	ldr	r2, [pc, #276]	; (8010a24 <netif_add+0x188>)
 801090e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	2200      	movs	r2, #0
 8010914:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	2200      	movs	r2, #0
 801091a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	2200      	movs	r2, #0
 8010922:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	6a3a      	ldr	r2, [r7, #32]
 8010928:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 801092a:	4b3f      	ldr	r3, [pc, #252]	; (8010a28 <netif_add+0x18c>)
 801092c:	781a      	ldrb	r2, [r3, #0]
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010938:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801093a:	683b      	ldr	r3, [r7, #0]
 801093c:	687a      	ldr	r2, [r7, #4]
 801093e:	68b9      	ldr	r1, [r7, #8]
 8010940:	68f8      	ldr	r0, [r7, #12]
 8010942:	f000 f913 	bl	8010b6c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8010946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010948:	68f8      	ldr	r0, [r7, #12]
 801094a:	4798      	blx	r3
 801094c:	4603      	mov	r3, r0
 801094e:	2b00      	cmp	r3, #0
 8010950:	d001      	beq.n	8010956 <netif_add+0xba>
    return NULL;
 8010952:	2300      	movs	r3, #0
 8010954:	e058      	b.n	8010a08 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801095c:	2bff      	cmp	r3, #255	; 0xff
 801095e:	d103      	bne.n	8010968 <netif_add+0xcc>
        netif->num = 0;
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	2200      	movs	r2, #0
 8010964:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8010968:	2300      	movs	r3, #0
 801096a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801096c:	4b2f      	ldr	r3, [pc, #188]	; (8010a2c <netif_add+0x190>)
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	617b      	str	r3, [r7, #20]
 8010972:	e02b      	b.n	80109cc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8010974:	697a      	ldr	r2, [r7, #20]
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	429a      	cmp	r2, r3
 801097a:	d106      	bne.n	801098a <netif_add+0xee>
 801097c:	4b24      	ldr	r3, [pc, #144]	; (8010a10 <netif_add+0x174>)
 801097e:	f240 128b 	movw	r2, #395	; 0x18b
 8010982:	492b      	ldr	r1, [pc, #172]	; (8010a30 <netif_add+0x194>)
 8010984:	4824      	ldr	r0, [pc, #144]	; (8010a18 <netif_add+0x17c>)
 8010986:	f00a fc6f 	bl	801b268 <iprintf>
        num_netifs++;
 801098a:	693b      	ldr	r3, [r7, #16]
 801098c:	3301      	adds	r3, #1
 801098e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8010990:	693b      	ldr	r3, [r7, #16]
 8010992:	2bff      	cmp	r3, #255	; 0xff
 8010994:	dd06      	ble.n	80109a4 <netif_add+0x108>
 8010996:	4b1e      	ldr	r3, [pc, #120]	; (8010a10 <netif_add+0x174>)
 8010998:	f240 128d 	movw	r2, #397	; 0x18d
 801099c:	4925      	ldr	r1, [pc, #148]	; (8010a34 <netif_add+0x198>)
 801099e:	481e      	ldr	r0, [pc, #120]	; (8010a18 <netif_add+0x17c>)
 80109a0:	f00a fc62 	bl	801b268 <iprintf>
        if (netif2->num == netif->num) {
 80109a4:	697b      	ldr	r3, [r7, #20]
 80109a6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80109b0:	429a      	cmp	r2, r3
 80109b2:	d108      	bne.n	80109c6 <netif_add+0x12a>
          netif->num++;
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80109ba:	3301      	adds	r3, #1
 80109bc:	b2da      	uxtb	r2, r3
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80109c4:	e005      	b.n	80109d2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80109c6:	697b      	ldr	r3, [r7, #20]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	617b      	str	r3, [r7, #20]
 80109cc:	697b      	ldr	r3, [r7, #20]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d1d0      	bne.n	8010974 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80109d2:	697b      	ldr	r3, [r7, #20]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d1be      	bne.n	8010956 <netif_add+0xba>
  }
  if (netif->num == 254) {
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80109de:	2bfe      	cmp	r3, #254	; 0xfe
 80109e0:	d103      	bne.n	80109ea <netif_add+0x14e>
    netif_num = 0;
 80109e2:	4b11      	ldr	r3, [pc, #68]	; (8010a28 <netif_add+0x18c>)
 80109e4:	2200      	movs	r2, #0
 80109e6:	701a      	strb	r2, [r3, #0]
 80109e8:	e006      	b.n	80109f8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80109f0:	3301      	adds	r3, #1
 80109f2:	b2da      	uxtb	r2, r3
 80109f4:	4b0c      	ldr	r3, [pc, #48]	; (8010a28 <netif_add+0x18c>)
 80109f6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80109f8:	4b0c      	ldr	r3, [pc, #48]	; (8010a2c <netif_add+0x190>)
 80109fa:	681a      	ldr	r2, [r3, #0]
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8010a00:	4a0a      	ldr	r2, [pc, #40]	; (8010a2c <netif_add+0x190>)
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8010a06:	68fb      	ldr	r3, [r7, #12]
}
 8010a08:	4618      	mov	r0, r3
 8010a0a:	3718      	adds	r7, #24
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	bd80      	pop	{r7, pc}
 8010a10:	0801e66c 	.word	0x0801e66c
 8010a14:	0801e700 	.word	0x0801e700
 8010a18:	0801e6bc 	.word	0x0801e6bc
 8010a1c:	0801e71c 	.word	0x0801e71c
 8010a20:	08020de4 	.word	0x08020de4
 8010a24:	08010e47 	.word	0x08010e47
 8010a28:	20007048 	.word	0x20007048
 8010a2c:	20007040 	.word	0x20007040
 8010a30:	0801e740 	.word	0x0801e740
 8010a34:	0801e754 	.word	0x0801e754

08010a38 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	b082      	sub	sp, #8
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
 8010a40:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8010a42:	6839      	ldr	r1, [r7, #0]
 8010a44:	6878      	ldr	r0, [r7, #4]
 8010a46:	f002 fde7 	bl	8013618 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8010a4a:	6839      	ldr	r1, [r7, #0]
 8010a4c:	6878      	ldr	r0, [r7, #4]
 8010a4e:	f007 fb23 	bl	8018098 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8010a52:	bf00      	nop
 8010a54:	3708      	adds	r7, #8
 8010a56:	46bd      	mov	sp, r7
 8010a58:	bd80      	pop	{r7, pc}
	...

08010a5c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b086      	sub	sp, #24
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	60f8      	str	r0, [r7, #12]
 8010a64:	60b9      	str	r1, [r7, #8]
 8010a66:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8010a68:	68bb      	ldr	r3, [r7, #8]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d106      	bne.n	8010a7c <netif_do_set_ipaddr+0x20>
 8010a6e:	4b1d      	ldr	r3, [pc, #116]	; (8010ae4 <netif_do_set_ipaddr+0x88>)
 8010a70:	f240 12cb 	movw	r2, #459	; 0x1cb
 8010a74:	491c      	ldr	r1, [pc, #112]	; (8010ae8 <netif_do_set_ipaddr+0x8c>)
 8010a76:	481d      	ldr	r0, [pc, #116]	; (8010aec <netif_do_set_ipaddr+0x90>)
 8010a78:	f00a fbf6 	bl	801b268 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d106      	bne.n	8010a90 <netif_do_set_ipaddr+0x34>
 8010a82:	4b18      	ldr	r3, [pc, #96]	; (8010ae4 <netif_do_set_ipaddr+0x88>)
 8010a84:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8010a88:	4917      	ldr	r1, [pc, #92]	; (8010ae8 <netif_do_set_ipaddr+0x8c>)
 8010a8a:	4818      	ldr	r0, [pc, #96]	; (8010aec <netif_do_set_ipaddr+0x90>)
 8010a8c:	f00a fbec 	bl	801b268 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8010a90:	68bb      	ldr	r3, [r7, #8]
 8010a92:	681a      	ldr	r2, [r3, #0]
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	3304      	adds	r3, #4
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	429a      	cmp	r2, r3
 8010a9c:	d01c      	beq.n	8010ad8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8010a9e:	68bb      	ldr	r3, [r7, #8]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	3304      	adds	r3, #4
 8010aa8:	681a      	ldr	r2, [r3, #0]
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8010aae:	f107 0314 	add.w	r3, r7, #20
 8010ab2:	4619      	mov	r1, r3
 8010ab4:	6878      	ldr	r0, [r7, #4]
 8010ab6:	f7ff ffbf 	bl	8010a38 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8010aba:	68bb      	ldr	r3, [r7, #8]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d002      	beq.n	8010ac6 <netif_do_set_ipaddr+0x6a>
 8010ac0:	68bb      	ldr	r3, [r7, #8]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	e000      	b.n	8010ac8 <netif_do_set_ipaddr+0x6c>
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	68fa      	ldr	r2, [r7, #12]
 8010aca:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8010acc:	2101      	movs	r1, #1
 8010ace:	68f8      	ldr	r0, [r7, #12]
 8010ad0:	f000 f8d2 	bl	8010c78 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8010ad4:	2301      	movs	r3, #1
 8010ad6:	e000      	b.n	8010ada <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8010ad8:	2300      	movs	r3, #0
}
 8010ada:	4618      	mov	r0, r3
 8010adc:	3718      	adds	r7, #24
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	bd80      	pop	{r7, pc}
 8010ae2:	bf00      	nop
 8010ae4:	0801e66c 	.word	0x0801e66c
 8010ae8:	0801e784 	.word	0x0801e784
 8010aec:	0801e6bc 	.word	0x0801e6bc

08010af0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8010af0:	b480      	push	{r7}
 8010af2:	b085      	sub	sp, #20
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	60f8      	str	r0, [r7, #12]
 8010af8:	60b9      	str	r1, [r7, #8]
 8010afa:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8010afc:	68bb      	ldr	r3, [r7, #8]
 8010afe:	681a      	ldr	r2, [r3, #0]
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	3308      	adds	r3, #8
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	429a      	cmp	r2, r3
 8010b08:	d00a      	beq.n	8010b20 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8010b0a:	68bb      	ldr	r3, [r7, #8]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d002      	beq.n	8010b16 <netif_do_set_netmask+0x26>
 8010b10:	68bb      	ldr	r3, [r7, #8]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	e000      	b.n	8010b18 <netif_do_set_netmask+0x28>
 8010b16:	2300      	movs	r3, #0
 8010b18:	68fa      	ldr	r2, [r7, #12]
 8010b1a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8010b1c:	2301      	movs	r3, #1
 8010b1e:	e000      	b.n	8010b22 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8010b20:	2300      	movs	r3, #0
}
 8010b22:	4618      	mov	r0, r3
 8010b24:	3714      	adds	r7, #20
 8010b26:	46bd      	mov	sp, r7
 8010b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2c:	4770      	bx	lr

08010b2e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8010b2e:	b480      	push	{r7}
 8010b30:	b085      	sub	sp, #20
 8010b32:	af00      	add	r7, sp, #0
 8010b34:	60f8      	str	r0, [r7, #12]
 8010b36:	60b9      	str	r1, [r7, #8]
 8010b38:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8010b3a:	68bb      	ldr	r3, [r7, #8]
 8010b3c:	681a      	ldr	r2, [r3, #0]
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	330c      	adds	r3, #12
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	429a      	cmp	r2, r3
 8010b46:	d00a      	beq.n	8010b5e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010b48:	68bb      	ldr	r3, [r7, #8]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d002      	beq.n	8010b54 <netif_do_set_gw+0x26>
 8010b4e:	68bb      	ldr	r3, [r7, #8]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	e000      	b.n	8010b56 <netif_do_set_gw+0x28>
 8010b54:	2300      	movs	r3, #0
 8010b56:	68fa      	ldr	r2, [r7, #12]
 8010b58:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8010b5a:	2301      	movs	r3, #1
 8010b5c:	e000      	b.n	8010b60 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8010b5e:	2300      	movs	r3, #0
}
 8010b60:	4618      	mov	r0, r3
 8010b62:	3714      	adds	r7, #20
 8010b64:	46bd      	mov	sp, r7
 8010b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6a:	4770      	bx	lr

08010b6c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	b088      	sub	sp, #32
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	60f8      	str	r0, [r7, #12]
 8010b74:	60b9      	str	r1, [r7, #8]
 8010b76:	607a      	str	r2, [r7, #4]
 8010b78:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8010b7e:	2300      	movs	r3, #0
 8010b80:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010b82:	68bb      	ldr	r3, [r7, #8]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d101      	bne.n	8010b8c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8010b88:	4b1c      	ldr	r3, [pc, #112]	; (8010bfc <netif_set_addr+0x90>)
 8010b8a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d101      	bne.n	8010b96 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8010b92:	4b1a      	ldr	r3, [pc, #104]	; (8010bfc <netif_set_addr+0x90>)
 8010b94:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010b96:	683b      	ldr	r3, [r7, #0]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d101      	bne.n	8010ba0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8010b9c:	4b17      	ldr	r3, [pc, #92]	; (8010bfc <netif_set_addr+0x90>)
 8010b9e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8010ba0:	68bb      	ldr	r3, [r7, #8]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d003      	beq.n	8010bae <netif_set_addr+0x42>
 8010ba6:	68bb      	ldr	r3, [r7, #8]
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d101      	bne.n	8010bb2 <netif_set_addr+0x46>
 8010bae:	2301      	movs	r3, #1
 8010bb0:	e000      	b.n	8010bb4 <netif_set_addr+0x48>
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	617b      	str	r3, [r7, #20]
  if (remove) {
 8010bb6:	697b      	ldr	r3, [r7, #20]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d006      	beq.n	8010bca <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010bbc:	f107 0310 	add.w	r3, r7, #16
 8010bc0:	461a      	mov	r2, r3
 8010bc2:	68b9      	ldr	r1, [r7, #8]
 8010bc4:	68f8      	ldr	r0, [r7, #12]
 8010bc6:	f7ff ff49 	bl	8010a5c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8010bca:	69fa      	ldr	r2, [r7, #28]
 8010bcc:	6879      	ldr	r1, [r7, #4]
 8010bce:	68f8      	ldr	r0, [r7, #12]
 8010bd0:	f7ff ff8e 	bl	8010af0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8010bd4:	69ba      	ldr	r2, [r7, #24]
 8010bd6:	6839      	ldr	r1, [r7, #0]
 8010bd8:	68f8      	ldr	r0, [r7, #12]
 8010bda:	f7ff ffa8 	bl	8010b2e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8010bde:	697b      	ldr	r3, [r7, #20]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d106      	bne.n	8010bf2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010be4:	f107 0310 	add.w	r3, r7, #16
 8010be8:	461a      	mov	r2, r3
 8010bea:	68b9      	ldr	r1, [r7, #8]
 8010bec:	68f8      	ldr	r0, [r7, #12]
 8010bee:	f7ff ff35 	bl	8010a5c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8010bf2:	bf00      	nop
 8010bf4:	3720      	adds	r7, #32
 8010bf6:	46bd      	mov	sp, r7
 8010bf8:	bd80      	pop	{r7, pc}
 8010bfa:	bf00      	nop
 8010bfc:	08020de4 	.word	0x08020de4

08010c00 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8010c00:	b480      	push	{r7}
 8010c02:	b083      	sub	sp, #12
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010c08:	4a04      	ldr	r2, [pc, #16]	; (8010c1c <netif_set_default+0x1c>)
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8010c0e:	bf00      	nop
 8010c10:	370c      	adds	r7, #12
 8010c12:	46bd      	mov	sp, r7
 8010c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c18:	4770      	bx	lr
 8010c1a:	bf00      	nop
 8010c1c:	20007044 	.word	0x20007044

08010c20 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b082      	sub	sp, #8
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d107      	bne.n	8010c3e <netif_set_up+0x1e>
 8010c2e:	4b0f      	ldr	r3, [pc, #60]	; (8010c6c <netif_set_up+0x4c>)
 8010c30:	f44f 7254 	mov.w	r2, #848	; 0x350
 8010c34:	490e      	ldr	r1, [pc, #56]	; (8010c70 <netif_set_up+0x50>)
 8010c36:	480f      	ldr	r0, [pc, #60]	; (8010c74 <netif_set_up+0x54>)
 8010c38:	f00a fb16 	bl	801b268 <iprintf>
 8010c3c:	e013      	b.n	8010c66 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010c44:	f003 0301 	and.w	r3, r3, #1
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d10c      	bne.n	8010c66 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010c52:	f043 0301 	orr.w	r3, r3, #1
 8010c56:	b2da      	uxtb	r2, r3
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010c5e:	2103      	movs	r1, #3
 8010c60:	6878      	ldr	r0, [r7, #4]
 8010c62:	f000 f809 	bl	8010c78 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8010c66:	3708      	adds	r7, #8
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	bd80      	pop	{r7, pc}
 8010c6c:	0801e66c 	.word	0x0801e66c
 8010c70:	0801e7f4 	.word	0x0801e7f4
 8010c74:	0801e6bc 	.word	0x0801e6bc

08010c78 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b082      	sub	sp, #8
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
 8010c80:	460b      	mov	r3, r1
 8010c82:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d106      	bne.n	8010c98 <netif_issue_reports+0x20>
 8010c8a:	4b18      	ldr	r3, [pc, #96]	; (8010cec <netif_issue_reports+0x74>)
 8010c8c:	f240 326d 	movw	r2, #877	; 0x36d
 8010c90:	4917      	ldr	r1, [pc, #92]	; (8010cf0 <netif_issue_reports+0x78>)
 8010c92:	4818      	ldr	r0, [pc, #96]	; (8010cf4 <netif_issue_reports+0x7c>)
 8010c94:	f00a fae8 	bl	801b268 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010c9e:	f003 0304 	and.w	r3, r3, #4
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d01e      	beq.n	8010ce4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010cac:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d017      	beq.n	8010ce4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010cb4:	78fb      	ldrb	r3, [r7, #3]
 8010cb6:	f003 0301 	and.w	r3, r3, #1
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d013      	beq.n	8010ce6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	3304      	adds	r3, #4
 8010cc2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d00e      	beq.n	8010ce6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010cce:	f003 0308 	and.w	r3, r3, #8
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d007      	beq.n	8010ce6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	3304      	adds	r3, #4
 8010cda:	4619      	mov	r1, r3
 8010cdc:	6878      	ldr	r0, [r7, #4]
 8010cde:	f008 f945 	bl	8018f6c <etharp_request>
 8010ce2:	e000      	b.n	8010ce6 <netif_issue_reports+0x6e>
    return;
 8010ce4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8010ce6:	3708      	adds	r7, #8
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	bd80      	pop	{r7, pc}
 8010cec:	0801e66c 	.word	0x0801e66c
 8010cf0:	0801e810 	.word	0x0801e810
 8010cf4:	0801e6bc 	.word	0x0801e6bc

08010cf8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b082      	sub	sp, #8
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d107      	bne.n	8010d16 <netif_set_down+0x1e>
 8010d06:	4b12      	ldr	r3, [pc, #72]	; (8010d50 <netif_set_down+0x58>)
 8010d08:	f240 329b 	movw	r2, #923	; 0x39b
 8010d0c:	4911      	ldr	r1, [pc, #68]	; (8010d54 <netif_set_down+0x5c>)
 8010d0e:	4812      	ldr	r0, [pc, #72]	; (8010d58 <netif_set_down+0x60>)
 8010d10:	f00a faaa 	bl	801b268 <iprintf>
 8010d14:	e019      	b.n	8010d4a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d1c:	f003 0301 	and.w	r3, r3, #1
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d012      	beq.n	8010d4a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d2a:	f023 0301 	bic.w	r3, r3, #1
 8010d2e:	b2da      	uxtb	r2, r3
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d3c:	f003 0308 	and.w	r3, r3, #8
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d002      	beq.n	8010d4a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8010d44:	6878      	ldr	r0, [r7, #4]
 8010d46:	f007 fccf 	bl	80186e8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8010d4a:	3708      	adds	r7, #8
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	bd80      	pop	{r7, pc}
 8010d50:	0801e66c 	.word	0x0801e66c
 8010d54:	0801e834 	.word	0x0801e834
 8010d58:	0801e6bc 	.word	0x0801e6bc

08010d5c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b082      	sub	sp, #8
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d107      	bne.n	8010d7a <netif_set_link_up+0x1e>
 8010d6a:	4b13      	ldr	r3, [pc, #76]	; (8010db8 <netif_set_link_up+0x5c>)
 8010d6c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8010d70:	4912      	ldr	r1, [pc, #72]	; (8010dbc <netif_set_link_up+0x60>)
 8010d72:	4813      	ldr	r0, [pc, #76]	; (8010dc0 <netif_set_link_up+0x64>)
 8010d74:	f00a fa78 	bl	801b268 <iprintf>
 8010d78:	e01b      	b.n	8010db2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d80:	f003 0304 	and.w	r3, r3, #4
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d114      	bne.n	8010db2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d8e:	f043 0304 	orr.w	r3, r3, #4
 8010d92:	b2da      	uxtb	r2, r3
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010d9a:	2103      	movs	r1, #3
 8010d9c:	6878      	ldr	r0, [r7, #4]
 8010d9e:	f7ff ff6b 	bl	8010c78 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	69db      	ldr	r3, [r3, #28]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d003      	beq.n	8010db2 <netif_set_link_up+0x56>
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	69db      	ldr	r3, [r3, #28]
 8010dae:	6878      	ldr	r0, [r7, #4]
 8010db0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010db2:	3708      	adds	r7, #8
 8010db4:	46bd      	mov	sp, r7
 8010db6:	bd80      	pop	{r7, pc}
 8010db8:	0801e66c 	.word	0x0801e66c
 8010dbc:	0801e854 	.word	0x0801e854
 8010dc0:	0801e6bc 	.word	0x0801e6bc

08010dc4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b082      	sub	sp, #8
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d107      	bne.n	8010de2 <netif_set_link_down+0x1e>
 8010dd2:	4b11      	ldr	r3, [pc, #68]	; (8010e18 <netif_set_link_down+0x54>)
 8010dd4:	f240 4206 	movw	r2, #1030	; 0x406
 8010dd8:	4910      	ldr	r1, [pc, #64]	; (8010e1c <netif_set_link_down+0x58>)
 8010dda:	4811      	ldr	r0, [pc, #68]	; (8010e20 <netif_set_link_down+0x5c>)
 8010ddc:	f00a fa44 	bl	801b268 <iprintf>
 8010de0:	e017      	b.n	8010e12 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010de8:	f003 0304 	and.w	r3, r3, #4
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d010      	beq.n	8010e12 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010df6:	f023 0304 	bic.w	r3, r3, #4
 8010dfa:	b2da      	uxtb	r2, r3
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	69db      	ldr	r3, [r3, #28]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d003      	beq.n	8010e12 <netif_set_link_down+0x4e>
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	69db      	ldr	r3, [r3, #28]
 8010e0e:	6878      	ldr	r0, [r7, #4]
 8010e10:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010e12:	3708      	adds	r7, #8
 8010e14:	46bd      	mov	sp, r7
 8010e16:	bd80      	pop	{r7, pc}
 8010e18:	0801e66c 	.word	0x0801e66c
 8010e1c:	0801e878 	.word	0x0801e878
 8010e20:	0801e6bc 	.word	0x0801e6bc

08010e24 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8010e24:	b480      	push	{r7}
 8010e26:	b083      	sub	sp, #12
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	6078      	str	r0, [r7, #4]
 8010e2c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d002      	beq.n	8010e3a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	683a      	ldr	r2, [r7, #0]
 8010e38:	61da      	str	r2, [r3, #28]
  }
}
 8010e3a:	bf00      	nop
 8010e3c:	370c      	adds	r7, #12
 8010e3e:	46bd      	mov	sp, r7
 8010e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e44:	4770      	bx	lr

08010e46 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8010e46:	b480      	push	{r7}
 8010e48:	b085      	sub	sp, #20
 8010e4a:	af00      	add	r7, sp, #0
 8010e4c:	60f8      	str	r0, [r7, #12]
 8010e4e:	60b9      	str	r1, [r7, #8]
 8010e50:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8010e52:	f06f 030b 	mvn.w	r3, #11
}
 8010e56:	4618      	mov	r0, r3
 8010e58:	3714      	adds	r7, #20
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e60:	4770      	bx	lr
	...

08010e64 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8010e64:	b480      	push	{r7}
 8010e66:	b085      	sub	sp, #20
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8010e6e:	79fb      	ldrb	r3, [r7, #7]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d013      	beq.n	8010e9c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8010e74:	4b0d      	ldr	r3, [pc, #52]	; (8010eac <netif_get_by_index+0x48>)
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	60fb      	str	r3, [r7, #12]
 8010e7a:	e00c      	b.n	8010e96 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010e82:	3301      	adds	r3, #1
 8010e84:	b2db      	uxtb	r3, r3
 8010e86:	79fa      	ldrb	r2, [r7, #7]
 8010e88:	429a      	cmp	r2, r3
 8010e8a:	d101      	bne.n	8010e90 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	e006      	b.n	8010e9e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	60fb      	str	r3, [r7, #12]
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d1ef      	bne.n	8010e7c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8010e9c:	2300      	movs	r3, #0
}
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	3714      	adds	r7, #20
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea8:	4770      	bx	lr
 8010eaa:	bf00      	nop
 8010eac:	20007040 	.word	0x20007040

08010eb0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b082      	sub	sp, #8
 8010eb4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8010eb6:	4b0c      	ldr	r3, [pc, #48]	; (8010ee8 <pbuf_free_ooseq+0x38>)
 8010eb8:	2200      	movs	r2, #0
 8010eba:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010ebc:	4b0b      	ldr	r3, [pc, #44]	; (8010eec <pbuf_free_ooseq+0x3c>)
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	607b      	str	r3, [r7, #4]
 8010ec2:	e00a      	b.n	8010eda <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d003      	beq.n	8010ed4 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8010ecc:	6878      	ldr	r0, [r7, #4]
 8010ece:	f002 fbe1 	bl	8013694 <tcp_free_ooseq>
      return;
 8010ed2:	e005      	b.n	8010ee0 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	68db      	ldr	r3, [r3, #12]
 8010ed8:	607b      	str	r3, [r7, #4]
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d1f1      	bne.n	8010ec4 <pbuf_free_ooseq+0x14>
    }
  }
}
 8010ee0:	3708      	adds	r7, #8
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	bd80      	pop	{r7, pc}
 8010ee6:	bf00      	nop
 8010ee8:	20007049 	.word	0x20007049
 8010eec:	20007058 	.word	0x20007058

08010ef0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8010ef0:	b480      	push	{r7}
 8010ef2:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8010ef4:	4b03      	ldr	r3, [pc, #12]	; (8010f04 <pbuf_pool_is_empty+0x14>)
 8010ef6:	2201      	movs	r2, #1
 8010ef8:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8010efa:	bf00      	nop
 8010efc:	46bd      	mov	sp, r7
 8010efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f02:	4770      	bx	lr
 8010f04:	20007049 	.word	0x20007049

08010f08 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8010f08:	b480      	push	{r7}
 8010f0a:	b085      	sub	sp, #20
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	60f8      	str	r0, [r7, #12]
 8010f10:	60b9      	str	r1, [r7, #8]
 8010f12:	4611      	mov	r1, r2
 8010f14:	461a      	mov	r2, r3
 8010f16:	460b      	mov	r3, r1
 8010f18:	80fb      	strh	r3, [r7, #6]
 8010f1a:	4613      	mov	r3, r2
 8010f1c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	2200      	movs	r2, #0
 8010f22:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	68ba      	ldr	r2, [r7, #8]
 8010f28:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	88fa      	ldrh	r2, [r7, #6]
 8010f2e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	88ba      	ldrh	r2, [r7, #4]
 8010f34:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8010f36:	8b3b      	ldrh	r3, [r7, #24]
 8010f38:	b2da      	uxtb	r2, r3
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	7f3a      	ldrb	r2, [r7, #28]
 8010f42:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	2201      	movs	r2, #1
 8010f48:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	73da      	strb	r2, [r3, #15]
}
 8010f50:	bf00      	nop
 8010f52:	3714      	adds	r7, #20
 8010f54:	46bd      	mov	sp, r7
 8010f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5a:	4770      	bx	lr

08010f5c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8010f5c:	b580      	push	{r7, lr}
 8010f5e:	b08c      	sub	sp, #48	; 0x30
 8010f60:	af02      	add	r7, sp, #8
 8010f62:	4603      	mov	r3, r0
 8010f64:	71fb      	strb	r3, [r7, #7]
 8010f66:	460b      	mov	r3, r1
 8010f68:	80bb      	strh	r3, [r7, #4]
 8010f6a:	4613      	mov	r3, r2
 8010f6c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8010f6e:	79fb      	ldrb	r3, [r7, #7]
 8010f70:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8010f72:	887b      	ldrh	r3, [r7, #2]
 8010f74:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010f78:	f000 8082 	beq.w	8011080 <pbuf_alloc+0x124>
 8010f7c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010f80:	f300 80c9 	bgt.w	8011116 <pbuf_alloc+0x1ba>
 8010f84:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010f88:	d010      	beq.n	8010fac <pbuf_alloc+0x50>
 8010f8a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010f8e:	f300 80c2 	bgt.w	8011116 <pbuf_alloc+0x1ba>
 8010f92:	2b01      	cmp	r3, #1
 8010f94:	d002      	beq.n	8010f9c <pbuf_alloc+0x40>
 8010f96:	2b41      	cmp	r3, #65	; 0x41
 8010f98:	f040 80bd 	bne.w	8011116 <pbuf_alloc+0x1ba>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8010f9c:	887a      	ldrh	r2, [r7, #2]
 8010f9e:	88bb      	ldrh	r3, [r7, #4]
 8010fa0:	4619      	mov	r1, r3
 8010fa2:	2000      	movs	r0, #0
 8010fa4:	f000 f8d2 	bl	801114c <pbuf_alloc_reference>
 8010fa8:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8010faa:	e0be      	b.n	801112a <pbuf_alloc+0x1ce>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8010fac:	2300      	movs	r3, #0
 8010fae:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8010fb4:	88bb      	ldrh	r3, [r7, #4]
 8010fb6:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8010fb8:	2008      	movs	r0, #8
 8010fba:	f7ff fbcd 	bl	8010758 <memp_malloc>
 8010fbe:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8010fc0:	693b      	ldr	r3, [r7, #16]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d109      	bne.n	8010fda <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 8010fc6:	f7ff ff93 	bl	8010ef0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8010fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d002      	beq.n	8010fd6 <pbuf_alloc+0x7a>
            pbuf_free(p);
 8010fd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010fd2:	f000 faa7 	bl	8011524 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	e0a8      	b.n	801112c <pbuf_alloc+0x1d0>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8010fda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010fdc:	3303      	adds	r3, #3
 8010fde:	b29b      	uxth	r3, r3
 8010fe0:	f023 0303 	bic.w	r3, r3, #3
 8010fe4:	b29a      	uxth	r2, r3
 8010fe6:	f240 53ec 	movw	r3, #1516	; 0x5ec
 8010fea:	1a9b      	subs	r3, r3, r2
 8010fec:	b29b      	uxth	r3, r3
 8010fee:	8b7a      	ldrh	r2, [r7, #26]
 8010ff0:	4293      	cmp	r3, r2
 8010ff2:	bf28      	it	cs
 8010ff4:	4613      	movcs	r3, r2
 8010ff6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8010ff8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010ffa:	3310      	adds	r3, #16
 8010ffc:	693a      	ldr	r2, [r7, #16]
 8010ffe:	4413      	add	r3, r2
 8011000:	3303      	adds	r3, #3
 8011002:	f023 0303 	bic.w	r3, r3, #3
 8011006:	4618      	mov	r0, r3
 8011008:	89f9      	ldrh	r1, [r7, #14]
 801100a:	8b7a      	ldrh	r2, [r7, #26]
 801100c:	2300      	movs	r3, #0
 801100e:	9301      	str	r3, [sp, #4]
 8011010:	887b      	ldrh	r3, [r7, #2]
 8011012:	9300      	str	r3, [sp, #0]
 8011014:	460b      	mov	r3, r1
 8011016:	4601      	mov	r1, r0
 8011018:	6938      	ldr	r0, [r7, #16]
 801101a:	f7ff ff75 	bl	8010f08 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801101e:	693b      	ldr	r3, [r7, #16]
 8011020:	685b      	ldr	r3, [r3, #4]
 8011022:	f003 0303 	and.w	r3, r3, #3
 8011026:	2b00      	cmp	r3, #0
 8011028:	d006      	beq.n	8011038 <pbuf_alloc+0xdc>
 801102a:	4b42      	ldr	r3, [pc, #264]	; (8011134 <pbuf_alloc+0x1d8>)
 801102c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011030:	4941      	ldr	r1, [pc, #260]	; (8011138 <pbuf_alloc+0x1dc>)
 8011032:	4842      	ldr	r0, [pc, #264]	; (801113c <pbuf_alloc+0x1e0>)
 8011034:	f00a f918 	bl	801b268 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8011038:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801103a:	3303      	adds	r3, #3
 801103c:	f023 0303 	bic.w	r3, r3, #3
 8011040:	f240 52ec 	movw	r2, #1516	; 0x5ec
 8011044:	4293      	cmp	r3, r2
 8011046:	d106      	bne.n	8011056 <pbuf_alloc+0xfa>
 8011048:	4b3a      	ldr	r3, [pc, #232]	; (8011134 <pbuf_alloc+0x1d8>)
 801104a:	f44f 7281 	mov.w	r2, #258	; 0x102
 801104e:	493c      	ldr	r1, [pc, #240]	; (8011140 <pbuf_alloc+0x1e4>)
 8011050:	483a      	ldr	r0, [pc, #232]	; (801113c <pbuf_alloc+0x1e0>)
 8011052:	f00a f909 	bl	801b268 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8011056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011058:	2b00      	cmp	r3, #0
 801105a:	d102      	bne.n	8011062 <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801105c:	693b      	ldr	r3, [r7, #16]
 801105e:	627b      	str	r3, [r7, #36]	; 0x24
 8011060:	e002      	b.n	8011068 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8011062:	69fb      	ldr	r3, [r7, #28]
 8011064:	693a      	ldr	r2, [r7, #16]
 8011066:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8011068:	693b      	ldr	r3, [r7, #16]
 801106a:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801106c:	8b7a      	ldrh	r2, [r7, #26]
 801106e:	89fb      	ldrh	r3, [r7, #14]
 8011070:	1ad3      	subs	r3, r2, r3
 8011072:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8011074:	2300      	movs	r3, #0
 8011076:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8011078:	8b7b      	ldrh	r3, [r7, #26]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d19c      	bne.n	8010fb8 <pbuf_alloc+0x5c>
      break;
 801107e:	e054      	b.n	801112a <pbuf_alloc+0x1ce>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8011080:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011082:	3303      	adds	r3, #3
 8011084:	b29b      	uxth	r3, r3
 8011086:	f023 0303 	bic.w	r3, r3, #3
 801108a:	b29a      	uxth	r2, r3
 801108c:	88bb      	ldrh	r3, [r7, #4]
 801108e:	3303      	adds	r3, #3
 8011090:	b29b      	uxth	r3, r3
 8011092:	f023 0303 	bic.w	r3, r3, #3
 8011096:	b29b      	uxth	r3, r3
 8011098:	4413      	add	r3, r2
 801109a:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801109c:	8b3b      	ldrh	r3, [r7, #24]
 801109e:	3310      	adds	r3, #16
 80110a0:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80110a2:	8b3a      	ldrh	r2, [r7, #24]
 80110a4:	88bb      	ldrh	r3, [r7, #4]
 80110a6:	3303      	adds	r3, #3
 80110a8:	f023 0303 	bic.w	r3, r3, #3
 80110ac:	429a      	cmp	r2, r3
 80110ae:	d306      	bcc.n	80110be <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80110b0:	88bb      	ldrh	r3, [r7, #4]
 80110b2:	3303      	adds	r3, #3
 80110b4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80110b8:	697a      	ldr	r2, [r7, #20]
 80110ba:	429a      	cmp	r2, r3
 80110bc:	d201      	bcs.n	80110c2 <pbuf_alloc+0x166>
        return NULL;
 80110be:	2300      	movs	r3, #0
 80110c0:	e034      	b.n	801112c <pbuf_alloc+0x1d0>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80110c2:	6978      	ldr	r0, [r7, #20]
 80110c4:	f7ff f9c0 	bl	8010448 <mem_malloc>
 80110c8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80110ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d101      	bne.n	80110d4 <pbuf_alloc+0x178>
        return NULL;
 80110d0:	2300      	movs	r3, #0
 80110d2:	e02b      	b.n	801112c <pbuf_alloc+0x1d0>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80110d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80110d6:	3310      	adds	r3, #16
 80110d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110da:	4413      	add	r3, r2
 80110dc:	3303      	adds	r3, #3
 80110de:	f023 0303 	bic.w	r3, r3, #3
 80110e2:	4618      	mov	r0, r3
 80110e4:	88b9      	ldrh	r1, [r7, #4]
 80110e6:	88ba      	ldrh	r2, [r7, #4]
 80110e8:	2300      	movs	r3, #0
 80110ea:	9301      	str	r3, [sp, #4]
 80110ec:	887b      	ldrh	r3, [r7, #2]
 80110ee:	9300      	str	r3, [sp, #0]
 80110f0:	460b      	mov	r3, r1
 80110f2:	4601      	mov	r1, r0
 80110f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80110f6:	f7ff ff07 	bl	8010f08 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80110fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110fc:	685b      	ldr	r3, [r3, #4]
 80110fe:	f003 0303 	and.w	r3, r3, #3
 8011102:	2b00      	cmp	r3, #0
 8011104:	d010      	beq.n	8011128 <pbuf_alloc+0x1cc>
 8011106:	4b0b      	ldr	r3, [pc, #44]	; (8011134 <pbuf_alloc+0x1d8>)
 8011108:	f44f 7291 	mov.w	r2, #290	; 0x122
 801110c:	490d      	ldr	r1, [pc, #52]	; (8011144 <pbuf_alloc+0x1e8>)
 801110e:	480b      	ldr	r0, [pc, #44]	; (801113c <pbuf_alloc+0x1e0>)
 8011110:	f00a f8aa 	bl	801b268 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8011114:	e008      	b.n	8011128 <pbuf_alloc+0x1cc>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8011116:	4b07      	ldr	r3, [pc, #28]	; (8011134 <pbuf_alloc+0x1d8>)
 8011118:	f240 1227 	movw	r2, #295	; 0x127
 801111c:	490a      	ldr	r1, [pc, #40]	; (8011148 <pbuf_alloc+0x1ec>)
 801111e:	4807      	ldr	r0, [pc, #28]	; (801113c <pbuf_alloc+0x1e0>)
 8011120:	f00a f8a2 	bl	801b268 <iprintf>
      return NULL;
 8011124:	2300      	movs	r3, #0
 8011126:	e001      	b.n	801112c <pbuf_alloc+0x1d0>
      break;
 8011128:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801112a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801112c:	4618      	mov	r0, r3
 801112e:	3728      	adds	r7, #40	; 0x28
 8011130:	46bd      	mov	sp, r7
 8011132:	bd80      	pop	{r7, pc}
 8011134:	0801e89c 	.word	0x0801e89c
 8011138:	0801e8cc 	.word	0x0801e8cc
 801113c:	0801e8fc 	.word	0x0801e8fc
 8011140:	0801e924 	.word	0x0801e924
 8011144:	0801e958 	.word	0x0801e958
 8011148:	0801e984 	.word	0x0801e984

0801114c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801114c:	b580      	push	{r7, lr}
 801114e:	b086      	sub	sp, #24
 8011150:	af02      	add	r7, sp, #8
 8011152:	6078      	str	r0, [r7, #4]
 8011154:	460b      	mov	r3, r1
 8011156:	807b      	strh	r3, [r7, #2]
 8011158:	4613      	mov	r3, r2
 801115a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801115c:	883b      	ldrh	r3, [r7, #0]
 801115e:	2b41      	cmp	r3, #65	; 0x41
 8011160:	d009      	beq.n	8011176 <pbuf_alloc_reference+0x2a>
 8011162:	883b      	ldrh	r3, [r7, #0]
 8011164:	2b01      	cmp	r3, #1
 8011166:	d006      	beq.n	8011176 <pbuf_alloc_reference+0x2a>
 8011168:	4b0f      	ldr	r3, [pc, #60]	; (80111a8 <pbuf_alloc_reference+0x5c>)
 801116a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801116e:	490f      	ldr	r1, [pc, #60]	; (80111ac <pbuf_alloc_reference+0x60>)
 8011170:	480f      	ldr	r0, [pc, #60]	; (80111b0 <pbuf_alloc_reference+0x64>)
 8011172:	f00a f879 	bl	801b268 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8011176:	2007      	movs	r0, #7
 8011178:	f7ff faee 	bl	8010758 <memp_malloc>
 801117c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d101      	bne.n	8011188 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8011184:	2300      	movs	r3, #0
 8011186:	e00b      	b.n	80111a0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8011188:	8879      	ldrh	r1, [r7, #2]
 801118a:	887a      	ldrh	r2, [r7, #2]
 801118c:	2300      	movs	r3, #0
 801118e:	9301      	str	r3, [sp, #4]
 8011190:	883b      	ldrh	r3, [r7, #0]
 8011192:	9300      	str	r3, [sp, #0]
 8011194:	460b      	mov	r3, r1
 8011196:	6879      	ldr	r1, [r7, #4]
 8011198:	68f8      	ldr	r0, [r7, #12]
 801119a:	f7ff feb5 	bl	8010f08 <pbuf_init_alloced_pbuf>
  return p;
 801119e:	68fb      	ldr	r3, [r7, #12]
}
 80111a0:	4618      	mov	r0, r3
 80111a2:	3710      	adds	r7, #16
 80111a4:	46bd      	mov	sp, r7
 80111a6:	bd80      	pop	{r7, pc}
 80111a8:	0801e89c 	.word	0x0801e89c
 80111ac:	0801e9a0 	.word	0x0801e9a0
 80111b0:	0801e8fc 	.word	0x0801e8fc

080111b4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b088      	sub	sp, #32
 80111b8:	af02      	add	r7, sp, #8
 80111ba:	607b      	str	r3, [r7, #4]
 80111bc:	4603      	mov	r3, r0
 80111be:	73fb      	strb	r3, [r7, #15]
 80111c0:	460b      	mov	r3, r1
 80111c2:	81bb      	strh	r3, [r7, #12]
 80111c4:	4613      	mov	r3, r2
 80111c6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80111c8:	7bfb      	ldrb	r3, [r7, #15]
 80111ca:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80111cc:	8a7b      	ldrh	r3, [r7, #18]
 80111ce:	3303      	adds	r3, #3
 80111d0:	f023 0203 	bic.w	r2, r3, #3
 80111d4:	89bb      	ldrh	r3, [r7, #12]
 80111d6:	441a      	add	r2, r3
 80111d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80111da:	429a      	cmp	r2, r3
 80111dc:	d901      	bls.n	80111e2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80111de:	2300      	movs	r3, #0
 80111e0:	e018      	b.n	8011214 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80111e2:	6a3b      	ldr	r3, [r7, #32]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d007      	beq.n	80111f8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80111e8:	8a7b      	ldrh	r3, [r7, #18]
 80111ea:	3303      	adds	r3, #3
 80111ec:	f023 0303 	bic.w	r3, r3, #3
 80111f0:	6a3a      	ldr	r2, [r7, #32]
 80111f2:	4413      	add	r3, r2
 80111f4:	617b      	str	r3, [r7, #20]
 80111f6:	e001      	b.n	80111fc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80111f8:	2300      	movs	r3, #0
 80111fa:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80111fc:	6878      	ldr	r0, [r7, #4]
 80111fe:	89b9      	ldrh	r1, [r7, #12]
 8011200:	89ba      	ldrh	r2, [r7, #12]
 8011202:	2302      	movs	r3, #2
 8011204:	9301      	str	r3, [sp, #4]
 8011206:	897b      	ldrh	r3, [r7, #10]
 8011208:	9300      	str	r3, [sp, #0]
 801120a:	460b      	mov	r3, r1
 801120c:	6979      	ldr	r1, [r7, #20]
 801120e:	f7ff fe7b 	bl	8010f08 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8011212:	687b      	ldr	r3, [r7, #4]
}
 8011214:	4618      	mov	r0, r3
 8011216:	3718      	adds	r7, #24
 8011218:	46bd      	mov	sp, r7
 801121a:	bd80      	pop	{r7, pc}

0801121c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801121c:	b580      	push	{r7, lr}
 801121e:	b084      	sub	sp, #16
 8011220:	af00      	add	r7, sp, #0
 8011222:	6078      	str	r0, [r7, #4]
 8011224:	460b      	mov	r3, r1
 8011226:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d106      	bne.n	801123c <pbuf_realloc+0x20>
 801122e:	4b39      	ldr	r3, [pc, #228]	; (8011314 <pbuf_realloc+0xf8>)
 8011230:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8011234:	4938      	ldr	r1, [pc, #224]	; (8011318 <pbuf_realloc+0xfc>)
 8011236:	4839      	ldr	r0, [pc, #228]	; (801131c <pbuf_realloc+0x100>)
 8011238:	f00a f816 	bl	801b268 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	891b      	ldrh	r3, [r3, #8]
 8011240:	887a      	ldrh	r2, [r7, #2]
 8011242:	429a      	cmp	r2, r3
 8011244:	d261      	bcs.n	801130a <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	891a      	ldrh	r2, [r3, #8]
 801124a:	887b      	ldrh	r3, [r7, #2]
 801124c:	1ad3      	subs	r3, r2, r3
 801124e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8011250:	887b      	ldrh	r3, [r7, #2]
 8011252:	817b      	strh	r3, [r7, #10]
  q = p;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8011258:	e018      	b.n	801128c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	895b      	ldrh	r3, [r3, #10]
 801125e:	897a      	ldrh	r2, [r7, #10]
 8011260:	1ad3      	subs	r3, r2, r3
 8011262:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	891a      	ldrh	r2, [r3, #8]
 8011268:	893b      	ldrh	r3, [r7, #8]
 801126a:	1ad3      	subs	r3, r2, r3
 801126c:	b29a      	uxth	r2, r3
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d106      	bne.n	801128c <pbuf_realloc+0x70>
 801127e:	4b25      	ldr	r3, [pc, #148]	; (8011314 <pbuf_realloc+0xf8>)
 8011280:	f240 12af 	movw	r2, #431	; 0x1af
 8011284:	4926      	ldr	r1, [pc, #152]	; (8011320 <pbuf_realloc+0x104>)
 8011286:	4825      	ldr	r0, [pc, #148]	; (801131c <pbuf_realloc+0x100>)
 8011288:	f009 ffee 	bl	801b268 <iprintf>
  while (rem_len > q->len) {
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	895b      	ldrh	r3, [r3, #10]
 8011290:	897a      	ldrh	r2, [r7, #10]
 8011292:	429a      	cmp	r2, r3
 8011294:	d8e1      	bhi.n	801125a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	7b1b      	ldrb	r3, [r3, #12]
 801129a:	f003 030f 	and.w	r3, r3, #15
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d11f      	bne.n	80112e2 <pbuf_realloc+0xc6>
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	895b      	ldrh	r3, [r3, #10]
 80112a6:	897a      	ldrh	r2, [r7, #10]
 80112a8:	429a      	cmp	r2, r3
 80112aa:	d01a      	beq.n	80112e2 <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	7b5b      	ldrb	r3, [r3, #13]
 80112b0:	f003 0302 	and.w	r3, r3, #2
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d114      	bne.n	80112e2 <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	685a      	ldr	r2, [r3, #4]
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	1ad2      	subs	r2, r2, r3
 80112c0:	897b      	ldrh	r3, [r7, #10]
 80112c2:	4413      	add	r3, r2
 80112c4:	4619      	mov	r1, r3
 80112c6:	68f8      	ldr	r0, [r7, #12]
 80112c8:	f7fe ffca 	bl	8010260 <mem_trim>
 80112cc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d106      	bne.n	80112e2 <pbuf_realloc+0xc6>
 80112d4:	4b0f      	ldr	r3, [pc, #60]	; (8011314 <pbuf_realloc+0xf8>)
 80112d6:	f240 12bd 	movw	r2, #445	; 0x1bd
 80112da:	4912      	ldr	r1, [pc, #72]	; (8011324 <pbuf_realloc+0x108>)
 80112dc:	480f      	ldr	r0, [pc, #60]	; (801131c <pbuf_realloc+0x100>)
 80112de:	f009 ffc3 	bl	801b268 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	897a      	ldrh	r2, [r7, #10]
 80112e6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	895a      	ldrh	r2, [r3, #10]
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d004      	beq.n	8011302 <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	4618      	mov	r0, r3
 80112fe:	f000 f911 	bl	8011524 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	2200      	movs	r2, #0
 8011306:	601a      	str	r2, [r3, #0]
 8011308:	e000      	b.n	801130c <pbuf_realloc+0xf0>
    return;
 801130a:	bf00      	nop

}
 801130c:	3710      	adds	r7, #16
 801130e:	46bd      	mov	sp, r7
 8011310:	bd80      	pop	{r7, pc}
 8011312:	bf00      	nop
 8011314:	0801e89c 	.word	0x0801e89c
 8011318:	0801e9b4 	.word	0x0801e9b4
 801131c:	0801e8fc 	.word	0x0801e8fc
 8011320:	0801e9cc 	.word	0x0801e9cc
 8011324:	0801e9e4 	.word	0x0801e9e4

08011328 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8011328:	b580      	push	{r7, lr}
 801132a:	b086      	sub	sp, #24
 801132c:	af00      	add	r7, sp, #0
 801132e:	60f8      	str	r0, [r7, #12]
 8011330:	60b9      	str	r1, [r7, #8]
 8011332:	4613      	mov	r3, r2
 8011334:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d106      	bne.n	801134a <pbuf_add_header_impl+0x22>
 801133c:	4b2b      	ldr	r3, [pc, #172]	; (80113ec <pbuf_add_header_impl+0xc4>)
 801133e:	f240 12df 	movw	r2, #479	; 0x1df
 8011342:	492b      	ldr	r1, [pc, #172]	; (80113f0 <pbuf_add_header_impl+0xc8>)
 8011344:	482b      	ldr	r0, [pc, #172]	; (80113f4 <pbuf_add_header_impl+0xcc>)
 8011346:	f009 ff8f 	bl	801b268 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d003      	beq.n	8011358 <pbuf_add_header_impl+0x30>
 8011350:	68bb      	ldr	r3, [r7, #8]
 8011352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011356:	d301      	bcc.n	801135c <pbuf_add_header_impl+0x34>
    return 1;
 8011358:	2301      	movs	r3, #1
 801135a:	e043      	b.n	80113e4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 801135c:	68bb      	ldr	r3, [r7, #8]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d101      	bne.n	8011366 <pbuf_add_header_impl+0x3e>
    return 0;
 8011362:	2300      	movs	r3, #0
 8011364:	e03e      	b.n	80113e4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8011366:	68bb      	ldr	r3, [r7, #8]
 8011368:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	891a      	ldrh	r2, [r3, #8]
 801136e:	8a7b      	ldrh	r3, [r7, #18]
 8011370:	4413      	add	r3, r2
 8011372:	b29b      	uxth	r3, r3
 8011374:	8a7a      	ldrh	r2, [r7, #18]
 8011376:	429a      	cmp	r2, r3
 8011378:	d901      	bls.n	801137e <pbuf_add_header_impl+0x56>
    return 1;
 801137a:	2301      	movs	r3, #1
 801137c:	e032      	b.n	80113e4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	7b1b      	ldrb	r3, [r3, #12]
 8011382:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8011384:	8a3b      	ldrh	r3, [r7, #16]
 8011386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801138a:	2b00      	cmp	r3, #0
 801138c:	d00c      	beq.n	80113a8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	685a      	ldr	r2, [r3, #4]
 8011392:	68bb      	ldr	r3, [r7, #8]
 8011394:	425b      	negs	r3, r3
 8011396:	4413      	add	r3, r2
 8011398:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	3310      	adds	r3, #16
 801139e:	697a      	ldr	r2, [r7, #20]
 80113a0:	429a      	cmp	r2, r3
 80113a2:	d20d      	bcs.n	80113c0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80113a4:	2301      	movs	r3, #1
 80113a6:	e01d      	b.n	80113e4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80113a8:	79fb      	ldrb	r3, [r7, #7]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d006      	beq.n	80113bc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	685a      	ldr	r2, [r3, #4]
 80113b2:	68bb      	ldr	r3, [r7, #8]
 80113b4:	425b      	negs	r3, r3
 80113b6:	4413      	add	r3, r2
 80113b8:	617b      	str	r3, [r7, #20]
 80113ba:	e001      	b.n	80113c0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80113bc:	2301      	movs	r3, #1
 80113be:	e011      	b.n	80113e4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	697a      	ldr	r2, [r7, #20]
 80113c4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	895a      	ldrh	r2, [r3, #10]
 80113ca:	8a7b      	ldrh	r3, [r7, #18]
 80113cc:	4413      	add	r3, r2
 80113ce:	b29a      	uxth	r2, r3
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	891a      	ldrh	r2, [r3, #8]
 80113d8:	8a7b      	ldrh	r3, [r7, #18]
 80113da:	4413      	add	r3, r2
 80113dc:	b29a      	uxth	r2, r3
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	811a      	strh	r2, [r3, #8]


  return 0;
 80113e2:	2300      	movs	r3, #0
}
 80113e4:	4618      	mov	r0, r3
 80113e6:	3718      	adds	r7, #24
 80113e8:	46bd      	mov	sp, r7
 80113ea:	bd80      	pop	{r7, pc}
 80113ec:	0801e89c 	.word	0x0801e89c
 80113f0:	0801ea00 	.word	0x0801ea00
 80113f4:	0801e8fc 	.word	0x0801e8fc

080113f8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b082      	sub	sp, #8
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
 8011400:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8011402:	2200      	movs	r2, #0
 8011404:	6839      	ldr	r1, [r7, #0]
 8011406:	6878      	ldr	r0, [r7, #4]
 8011408:	f7ff ff8e 	bl	8011328 <pbuf_add_header_impl>
 801140c:	4603      	mov	r3, r0
}
 801140e:	4618      	mov	r0, r3
 8011410:	3708      	adds	r7, #8
 8011412:	46bd      	mov	sp, r7
 8011414:	bd80      	pop	{r7, pc}
	...

08011418 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8011418:	b580      	push	{r7, lr}
 801141a:	b084      	sub	sp, #16
 801141c:	af00      	add	r7, sp, #0
 801141e:	6078      	str	r0, [r7, #4]
 8011420:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d106      	bne.n	8011436 <pbuf_remove_header+0x1e>
 8011428:	4b20      	ldr	r3, [pc, #128]	; (80114ac <pbuf_remove_header+0x94>)
 801142a:	f240 224b 	movw	r2, #587	; 0x24b
 801142e:	4920      	ldr	r1, [pc, #128]	; (80114b0 <pbuf_remove_header+0x98>)
 8011430:	4820      	ldr	r0, [pc, #128]	; (80114b4 <pbuf_remove_header+0x9c>)
 8011432:	f009 ff19 	bl	801b268 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d003      	beq.n	8011444 <pbuf_remove_header+0x2c>
 801143c:	683b      	ldr	r3, [r7, #0]
 801143e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011442:	d301      	bcc.n	8011448 <pbuf_remove_header+0x30>
    return 1;
 8011444:	2301      	movs	r3, #1
 8011446:	e02c      	b.n	80114a2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8011448:	683b      	ldr	r3, [r7, #0]
 801144a:	2b00      	cmp	r3, #0
 801144c:	d101      	bne.n	8011452 <pbuf_remove_header+0x3a>
    return 0;
 801144e:	2300      	movs	r3, #0
 8011450:	e027      	b.n	80114a2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8011452:	683b      	ldr	r3, [r7, #0]
 8011454:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	895b      	ldrh	r3, [r3, #10]
 801145a:	89fa      	ldrh	r2, [r7, #14]
 801145c:	429a      	cmp	r2, r3
 801145e:	d908      	bls.n	8011472 <pbuf_remove_header+0x5a>
 8011460:	4b12      	ldr	r3, [pc, #72]	; (80114ac <pbuf_remove_header+0x94>)
 8011462:	f240 2255 	movw	r2, #597	; 0x255
 8011466:	4914      	ldr	r1, [pc, #80]	; (80114b8 <pbuf_remove_header+0xa0>)
 8011468:	4812      	ldr	r0, [pc, #72]	; (80114b4 <pbuf_remove_header+0x9c>)
 801146a:	f009 fefd 	bl	801b268 <iprintf>
 801146e:	2301      	movs	r3, #1
 8011470:	e017      	b.n	80114a2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	685b      	ldr	r3, [r3, #4]
 8011476:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	685a      	ldr	r2, [r3, #4]
 801147c:	683b      	ldr	r3, [r7, #0]
 801147e:	441a      	add	r2, r3
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	895a      	ldrh	r2, [r3, #10]
 8011488:	89fb      	ldrh	r3, [r7, #14]
 801148a:	1ad3      	subs	r3, r2, r3
 801148c:	b29a      	uxth	r2, r3
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	891a      	ldrh	r2, [r3, #8]
 8011496:	89fb      	ldrh	r3, [r7, #14]
 8011498:	1ad3      	subs	r3, r2, r3
 801149a:	b29a      	uxth	r2, r3
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80114a0:	2300      	movs	r3, #0
}
 80114a2:	4618      	mov	r0, r3
 80114a4:	3710      	adds	r7, #16
 80114a6:	46bd      	mov	sp, r7
 80114a8:	bd80      	pop	{r7, pc}
 80114aa:	bf00      	nop
 80114ac:	0801e89c 	.word	0x0801e89c
 80114b0:	0801ea00 	.word	0x0801ea00
 80114b4:	0801e8fc 	.word	0x0801e8fc
 80114b8:	0801ea0c 	.word	0x0801ea0c

080114bc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80114bc:	b580      	push	{r7, lr}
 80114be:	b082      	sub	sp, #8
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	6078      	str	r0, [r7, #4]
 80114c4:	460b      	mov	r3, r1
 80114c6:	807b      	strh	r3, [r7, #2]
 80114c8:	4613      	mov	r3, r2
 80114ca:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80114cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	da08      	bge.n	80114e6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80114d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80114d8:	425b      	negs	r3, r3
 80114da:	4619      	mov	r1, r3
 80114dc:	6878      	ldr	r0, [r7, #4]
 80114de:	f7ff ff9b 	bl	8011418 <pbuf_remove_header>
 80114e2:	4603      	mov	r3, r0
 80114e4:	e007      	b.n	80114f6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80114e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80114ea:	787a      	ldrb	r2, [r7, #1]
 80114ec:	4619      	mov	r1, r3
 80114ee:	6878      	ldr	r0, [r7, #4]
 80114f0:	f7ff ff1a 	bl	8011328 <pbuf_add_header_impl>
 80114f4:	4603      	mov	r3, r0
  }
}
 80114f6:	4618      	mov	r0, r3
 80114f8:	3708      	adds	r7, #8
 80114fa:	46bd      	mov	sp, r7
 80114fc:	bd80      	pop	{r7, pc}

080114fe <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80114fe:	b580      	push	{r7, lr}
 8011500:	b082      	sub	sp, #8
 8011502:	af00      	add	r7, sp, #0
 8011504:	6078      	str	r0, [r7, #4]
 8011506:	460b      	mov	r3, r1
 8011508:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801150a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801150e:	2201      	movs	r2, #1
 8011510:	4619      	mov	r1, r3
 8011512:	6878      	ldr	r0, [r7, #4]
 8011514:	f7ff ffd2 	bl	80114bc <pbuf_header_impl>
 8011518:	4603      	mov	r3, r0
}
 801151a:	4618      	mov	r0, r3
 801151c:	3708      	adds	r7, #8
 801151e:	46bd      	mov	sp, r7
 8011520:	bd80      	pop	{r7, pc}
	...

08011524 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8011524:	b580      	push	{r7, lr}
 8011526:	b086      	sub	sp, #24
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d10b      	bne.n	801154a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d106      	bne.n	8011546 <pbuf_free+0x22>
 8011538:	4b38      	ldr	r3, [pc, #224]	; (801161c <pbuf_free+0xf8>)
 801153a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801153e:	4938      	ldr	r1, [pc, #224]	; (8011620 <pbuf_free+0xfc>)
 8011540:	4838      	ldr	r0, [pc, #224]	; (8011624 <pbuf_free+0x100>)
 8011542:	f009 fe91 	bl	801b268 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8011546:	2300      	movs	r3, #0
 8011548:	e063      	b.n	8011612 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801154a:	2300      	movs	r3, #0
 801154c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801154e:	e05c      	b.n	801160a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	7b9b      	ldrb	r3, [r3, #14]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d106      	bne.n	8011566 <pbuf_free+0x42>
 8011558:	4b30      	ldr	r3, [pc, #192]	; (801161c <pbuf_free+0xf8>)
 801155a:	f240 22f1 	movw	r2, #753	; 0x2f1
 801155e:	4932      	ldr	r1, [pc, #200]	; (8011628 <pbuf_free+0x104>)
 8011560:	4830      	ldr	r0, [pc, #192]	; (8011624 <pbuf_free+0x100>)
 8011562:	f009 fe81 	bl	801b268 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	7b9b      	ldrb	r3, [r3, #14]
 801156a:	3b01      	subs	r3, #1
 801156c:	b2da      	uxtb	r2, r3
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	739a      	strb	r2, [r3, #14]
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	7b9b      	ldrb	r3, [r3, #14]
 8011576:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8011578:	7dbb      	ldrb	r3, [r7, #22]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d143      	bne.n	8011606 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	7b1b      	ldrb	r3, [r3, #12]
 8011588:	f003 030f 	and.w	r3, r3, #15
 801158c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	7b5b      	ldrb	r3, [r3, #13]
 8011592:	f003 0302 	and.w	r3, r3, #2
 8011596:	2b00      	cmp	r3, #0
 8011598:	d011      	beq.n	80115be <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801159e:	68bb      	ldr	r3, [r7, #8]
 80115a0:	691b      	ldr	r3, [r3, #16]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d106      	bne.n	80115b4 <pbuf_free+0x90>
 80115a6:	4b1d      	ldr	r3, [pc, #116]	; (801161c <pbuf_free+0xf8>)
 80115a8:	f240 22ff 	movw	r2, #767	; 0x2ff
 80115ac:	491f      	ldr	r1, [pc, #124]	; (801162c <pbuf_free+0x108>)
 80115ae:	481d      	ldr	r0, [pc, #116]	; (8011624 <pbuf_free+0x100>)
 80115b0:	f009 fe5a 	bl	801b268 <iprintf>
        pc->custom_free_function(p);
 80115b4:	68bb      	ldr	r3, [r7, #8]
 80115b6:	691b      	ldr	r3, [r3, #16]
 80115b8:	6878      	ldr	r0, [r7, #4]
 80115ba:	4798      	blx	r3
 80115bc:	e01d      	b.n	80115fa <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80115be:	7bfb      	ldrb	r3, [r7, #15]
 80115c0:	2b02      	cmp	r3, #2
 80115c2:	d104      	bne.n	80115ce <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80115c4:	6879      	ldr	r1, [r7, #4]
 80115c6:	2008      	movs	r0, #8
 80115c8:	f7ff f936 	bl	8010838 <memp_free>
 80115cc:	e015      	b.n	80115fa <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80115ce:	7bfb      	ldrb	r3, [r7, #15]
 80115d0:	2b01      	cmp	r3, #1
 80115d2:	d104      	bne.n	80115de <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80115d4:	6879      	ldr	r1, [r7, #4]
 80115d6:	2007      	movs	r0, #7
 80115d8:	f7ff f92e 	bl	8010838 <memp_free>
 80115dc:	e00d      	b.n	80115fa <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80115de:	7bfb      	ldrb	r3, [r7, #15]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d103      	bne.n	80115ec <pbuf_free+0xc8>
          mem_free(p);
 80115e4:	6878      	ldr	r0, [r7, #4]
 80115e6:	f7fe fdd1 	bl	801018c <mem_free>
 80115ea:	e006      	b.n	80115fa <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80115ec:	4b0b      	ldr	r3, [pc, #44]	; (801161c <pbuf_free+0xf8>)
 80115ee:	f240 320f 	movw	r2, #783	; 0x30f
 80115f2:	490f      	ldr	r1, [pc, #60]	; (8011630 <pbuf_free+0x10c>)
 80115f4:	480b      	ldr	r0, [pc, #44]	; (8011624 <pbuf_free+0x100>)
 80115f6:	f009 fe37 	bl	801b268 <iprintf>
        }
      }
      count++;
 80115fa:	7dfb      	ldrb	r3, [r7, #23]
 80115fc:	3301      	adds	r3, #1
 80115fe:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8011600:	693b      	ldr	r3, [r7, #16]
 8011602:	607b      	str	r3, [r7, #4]
 8011604:	e001      	b.n	801160a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8011606:	2300      	movs	r3, #0
 8011608:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d19f      	bne.n	8011550 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8011610:	7dfb      	ldrb	r3, [r7, #23]
}
 8011612:	4618      	mov	r0, r3
 8011614:	3718      	adds	r7, #24
 8011616:	46bd      	mov	sp, r7
 8011618:	bd80      	pop	{r7, pc}
 801161a:	bf00      	nop
 801161c:	0801e89c 	.word	0x0801e89c
 8011620:	0801ea00 	.word	0x0801ea00
 8011624:	0801e8fc 	.word	0x0801e8fc
 8011628:	0801ea2c 	.word	0x0801ea2c
 801162c:	0801ea44 	.word	0x0801ea44
 8011630:	0801ea68 	.word	0x0801ea68

08011634 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8011634:	b480      	push	{r7}
 8011636:	b085      	sub	sp, #20
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801163c:	2300      	movs	r3, #0
 801163e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8011640:	e005      	b.n	801164e <pbuf_clen+0x1a>
    ++len;
 8011642:	89fb      	ldrh	r3, [r7, #14]
 8011644:	3301      	adds	r3, #1
 8011646:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	2b00      	cmp	r3, #0
 8011652:	d1f6      	bne.n	8011642 <pbuf_clen+0xe>
  }
  return len;
 8011654:	89fb      	ldrh	r3, [r7, #14]
}
 8011656:	4618      	mov	r0, r3
 8011658:	3714      	adds	r7, #20
 801165a:	46bd      	mov	sp, r7
 801165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011660:	4770      	bx	lr
	...

08011664 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8011664:	b580      	push	{r7, lr}
 8011666:	b082      	sub	sp, #8
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d010      	beq.n	8011694 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	7b9b      	ldrb	r3, [r3, #14]
 8011676:	3301      	adds	r3, #1
 8011678:	b2da      	uxtb	r2, r3
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	7b9b      	ldrb	r3, [r3, #14]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d106      	bne.n	8011694 <pbuf_ref+0x30>
 8011686:	4b05      	ldr	r3, [pc, #20]	; (801169c <pbuf_ref+0x38>)
 8011688:	f240 3242 	movw	r2, #834	; 0x342
 801168c:	4904      	ldr	r1, [pc, #16]	; (80116a0 <pbuf_ref+0x3c>)
 801168e:	4805      	ldr	r0, [pc, #20]	; (80116a4 <pbuf_ref+0x40>)
 8011690:	f009 fdea 	bl	801b268 <iprintf>
  }
}
 8011694:	bf00      	nop
 8011696:	3708      	adds	r7, #8
 8011698:	46bd      	mov	sp, r7
 801169a:	bd80      	pop	{r7, pc}
 801169c:	0801e89c 	.word	0x0801e89c
 80116a0:	0801ea7c 	.word	0x0801ea7c
 80116a4:	0801e8fc 	.word	0x0801e8fc

080116a8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b084      	sub	sp, #16
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
 80116b0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d002      	beq.n	80116be <pbuf_cat+0x16>
 80116b8:	683b      	ldr	r3, [r7, #0]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d107      	bne.n	80116ce <pbuf_cat+0x26>
 80116be:	4b20      	ldr	r3, [pc, #128]	; (8011740 <pbuf_cat+0x98>)
 80116c0:	f240 3259 	movw	r2, #857	; 0x359
 80116c4:	491f      	ldr	r1, [pc, #124]	; (8011744 <pbuf_cat+0x9c>)
 80116c6:	4820      	ldr	r0, [pc, #128]	; (8011748 <pbuf_cat+0xa0>)
 80116c8:	f009 fdce 	bl	801b268 <iprintf>
 80116cc:	e034      	b.n	8011738 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	60fb      	str	r3, [r7, #12]
 80116d2:	e00a      	b.n	80116ea <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	891a      	ldrh	r2, [r3, #8]
 80116d8:	683b      	ldr	r3, [r7, #0]
 80116da:	891b      	ldrh	r3, [r3, #8]
 80116dc:	4413      	add	r3, r2
 80116de:	b29a      	uxth	r2, r3
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	60fb      	str	r3, [r7, #12]
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d1f0      	bne.n	80116d4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	891a      	ldrh	r2, [r3, #8]
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	895b      	ldrh	r3, [r3, #10]
 80116fa:	429a      	cmp	r2, r3
 80116fc:	d006      	beq.n	801170c <pbuf_cat+0x64>
 80116fe:	4b10      	ldr	r3, [pc, #64]	; (8011740 <pbuf_cat+0x98>)
 8011700:	f240 3262 	movw	r2, #866	; 0x362
 8011704:	4911      	ldr	r1, [pc, #68]	; (801174c <pbuf_cat+0xa4>)
 8011706:	4810      	ldr	r0, [pc, #64]	; (8011748 <pbuf_cat+0xa0>)
 8011708:	f009 fdae 	bl	801b268 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	2b00      	cmp	r3, #0
 8011712:	d006      	beq.n	8011722 <pbuf_cat+0x7a>
 8011714:	4b0a      	ldr	r3, [pc, #40]	; (8011740 <pbuf_cat+0x98>)
 8011716:	f240 3263 	movw	r2, #867	; 0x363
 801171a:	490d      	ldr	r1, [pc, #52]	; (8011750 <pbuf_cat+0xa8>)
 801171c:	480a      	ldr	r0, [pc, #40]	; (8011748 <pbuf_cat+0xa0>)
 801171e:	f009 fda3 	bl	801b268 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	891a      	ldrh	r2, [r3, #8]
 8011726:	683b      	ldr	r3, [r7, #0]
 8011728:	891b      	ldrh	r3, [r3, #8]
 801172a:	4413      	add	r3, r2
 801172c:	b29a      	uxth	r2, r3
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	683a      	ldr	r2, [r7, #0]
 8011736:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8011738:	3710      	adds	r7, #16
 801173a:	46bd      	mov	sp, r7
 801173c:	bd80      	pop	{r7, pc}
 801173e:	bf00      	nop
 8011740:	0801e89c 	.word	0x0801e89c
 8011744:	0801ea90 	.word	0x0801ea90
 8011748:	0801e8fc 	.word	0x0801e8fc
 801174c:	0801eac8 	.word	0x0801eac8
 8011750:	0801eaf8 	.word	0x0801eaf8

08011754 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8011754:	b580      	push	{r7, lr}
 8011756:	b086      	sub	sp, #24
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]
 801175c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801175e:	2300      	movs	r3, #0
 8011760:	617b      	str	r3, [r7, #20]
 8011762:	2300      	movs	r3, #0
 8011764:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d008      	beq.n	801177e <pbuf_copy+0x2a>
 801176c:	683b      	ldr	r3, [r7, #0]
 801176e:	2b00      	cmp	r3, #0
 8011770:	d005      	beq.n	801177e <pbuf_copy+0x2a>
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	891a      	ldrh	r2, [r3, #8]
 8011776:	683b      	ldr	r3, [r7, #0]
 8011778:	891b      	ldrh	r3, [r3, #8]
 801177a:	429a      	cmp	r2, r3
 801177c:	d209      	bcs.n	8011792 <pbuf_copy+0x3e>
 801177e:	4b57      	ldr	r3, [pc, #348]	; (80118dc <pbuf_copy+0x188>)
 8011780:	f240 32c9 	movw	r2, #969	; 0x3c9
 8011784:	4956      	ldr	r1, [pc, #344]	; (80118e0 <pbuf_copy+0x18c>)
 8011786:	4857      	ldr	r0, [pc, #348]	; (80118e4 <pbuf_copy+0x190>)
 8011788:	f009 fd6e 	bl	801b268 <iprintf>
 801178c:	f06f 030f 	mvn.w	r3, #15
 8011790:	e09f      	b.n	80118d2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	895b      	ldrh	r3, [r3, #10]
 8011796:	461a      	mov	r2, r3
 8011798:	697b      	ldr	r3, [r7, #20]
 801179a:	1ad2      	subs	r2, r2, r3
 801179c:	683b      	ldr	r3, [r7, #0]
 801179e:	895b      	ldrh	r3, [r3, #10]
 80117a0:	4619      	mov	r1, r3
 80117a2:	693b      	ldr	r3, [r7, #16]
 80117a4:	1acb      	subs	r3, r1, r3
 80117a6:	429a      	cmp	r2, r3
 80117a8:	d306      	bcc.n	80117b8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80117aa:	683b      	ldr	r3, [r7, #0]
 80117ac:	895b      	ldrh	r3, [r3, #10]
 80117ae:	461a      	mov	r2, r3
 80117b0:	693b      	ldr	r3, [r7, #16]
 80117b2:	1ad3      	subs	r3, r2, r3
 80117b4:	60fb      	str	r3, [r7, #12]
 80117b6:	e005      	b.n	80117c4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	895b      	ldrh	r3, [r3, #10]
 80117bc:	461a      	mov	r2, r3
 80117be:	697b      	ldr	r3, [r7, #20]
 80117c0:	1ad3      	subs	r3, r2, r3
 80117c2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	685a      	ldr	r2, [r3, #4]
 80117c8:	697b      	ldr	r3, [r7, #20]
 80117ca:	18d0      	adds	r0, r2, r3
 80117cc:	683b      	ldr	r3, [r7, #0]
 80117ce:	685a      	ldr	r2, [r3, #4]
 80117d0:	693b      	ldr	r3, [r7, #16]
 80117d2:	4413      	add	r3, r2
 80117d4:	68fa      	ldr	r2, [r7, #12]
 80117d6:	4619      	mov	r1, r3
 80117d8:	f009 ff4f 	bl	801b67a <memcpy>
    offset_to += len;
 80117dc:	697a      	ldr	r2, [r7, #20]
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	4413      	add	r3, r2
 80117e2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80117e4:	693a      	ldr	r2, [r7, #16]
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	4413      	add	r3, r2
 80117ea:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	895b      	ldrh	r3, [r3, #10]
 80117f0:	461a      	mov	r2, r3
 80117f2:	697b      	ldr	r3, [r7, #20]
 80117f4:	4293      	cmp	r3, r2
 80117f6:	d906      	bls.n	8011806 <pbuf_copy+0xb2>
 80117f8:	4b38      	ldr	r3, [pc, #224]	; (80118dc <pbuf_copy+0x188>)
 80117fa:	f240 32d9 	movw	r2, #985	; 0x3d9
 80117fe:	493a      	ldr	r1, [pc, #232]	; (80118e8 <pbuf_copy+0x194>)
 8011800:	4838      	ldr	r0, [pc, #224]	; (80118e4 <pbuf_copy+0x190>)
 8011802:	f009 fd31 	bl	801b268 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8011806:	683b      	ldr	r3, [r7, #0]
 8011808:	895b      	ldrh	r3, [r3, #10]
 801180a:	461a      	mov	r2, r3
 801180c:	693b      	ldr	r3, [r7, #16]
 801180e:	4293      	cmp	r3, r2
 8011810:	d906      	bls.n	8011820 <pbuf_copy+0xcc>
 8011812:	4b32      	ldr	r3, [pc, #200]	; (80118dc <pbuf_copy+0x188>)
 8011814:	f240 32da 	movw	r2, #986	; 0x3da
 8011818:	4934      	ldr	r1, [pc, #208]	; (80118ec <pbuf_copy+0x198>)
 801181a:	4832      	ldr	r0, [pc, #200]	; (80118e4 <pbuf_copy+0x190>)
 801181c:	f009 fd24 	bl	801b268 <iprintf>
    if (offset_from >= p_from->len) {
 8011820:	683b      	ldr	r3, [r7, #0]
 8011822:	895b      	ldrh	r3, [r3, #10]
 8011824:	461a      	mov	r2, r3
 8011826:	693b      	ldr	r3, [r7, #16]
 8011828:	4293      	cmp	r3, r2
 801182a:	d304      	bcc.n	8011836 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801182c:	2300      	movs	r3, #0
 801182e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8011830:	683b      	ldr	r3, [r7, #0]
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	895b      	ldrh	r3, [r3, #10]
 801183a:	461a      	mov	r2, r3
 801183c:	697b      	ldr	r3, [r7, #20]
 801183e:	4293      	cmp	r3, r2
 8011840:	d114      	bne.n	801186c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8011842:	2300      	movs	r3, #0
 8011844:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d10c      	bne.n	801186c <pbuf_copy+0x118>
 8011852:	683b      	ldr	r3, [r7, #0]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d009      	beq.n	801186c <pbuf_copy+0x118>
 8011858:	4b20      	ldr	r3, [pc, #128]	; (80118dc <pbuf_copy+0x188>)
 801185a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801185e:	4924      	ldr	r1, [pc, #144]	; (80118f0 <pbuf_copy+0x19c>)
 8011860:	4820      	ldr	r0, [pc, #128]	; (80118e4 <pbuf_copy+0x190>)
 8011862:	f009 fd01 	bl	801b268 <iprintf>
 8011866:	f06f 030f 	mvn.w	r3, #15
 801186a:	e032      	b.n	80118d2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801186c:	683b      	ldr	r3, [r7, #0]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d013      	beq.n	801189a <pbuf_copy+0x146>
 8011872:	683b      	ldr	r3, [r7, #0]
 8011874:	895a      	ldrh	r2, [r3, #10]
 8011876:	683b      	ldr	r3, [r7, #0]
 8011878:	891b      	ldrh	r3, [r3, #8]
 801187a:	429a      	cmp	r2, r3
 801187c:	d10d      	bne.n	801189a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801187e:	683b      	ldr	r3, [r7, #0]
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	2b00      	cmp	r3, #0
 8011884:	d009      	beq.n	801189a <pbuf_copy+0x146>
 8011886:	4b15      	ldr	r3, [pc, #84]	; (80118dc <pbuf_copy+0x188>)
 8011888:	f240 32e9 	movw	r2, #1001	; 0x3e9
 801188c:	4919      	ldr	r1, [pc, #100]	; (80118f4 <pbuf_copy+0x1a0>)
 801188e:	4815      	ldr	r0, [pc, #84]	; (80118e4 <pbuf_copy+0x190>)
 8011890:	f009 fcea 	bl	801b268 <iprintf>
 8011894:	f06f 0305 	mvn.w	r3, #5
 8011898:	e01b      	b.n	80118d2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d013      	beq.n	80118c8 <pbuf_copy+0x174>
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	895a      	ldrh	r2, [r3, #10]
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	891b      	ldrh	r3, [r3, #8]
 80118a8:	429a      	cmp	r2, r3
 80118aa:	d10d      	bne.n	80118c8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d009      	beq.n	80118c8 <pbuf_copy+0x174>
 80118b4:	4b09      	ldr	r3, [pc, #36]	; (80118dc <pbuf_copy+0x188>)
 80118b6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80118ba:	490e      	ldr	r1, [pc, #56]	; (80118f4 <pbuf_copy+0x1a0>)
 80118bc:	4809      	ldr	r0, [pc, #36]	; (80118e4 <pbuf_copy+0x190>)
 80118be:	f009 fcd3 	bl	801b268 <iprintf>
 80118c2:	f06f 0305 	mvn.w	r3, #5
 80118c6:	e004      	b.n	80118d2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80118c8:	683b      	ldr	r3, [r7, #0]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	f47f af61 	bne.w	8011792 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80118d0:	2300      	movs	r3, #0
}
 80118d2:	4618      	mov	r0, r3
 80118d4:	3718      	adds	r7, #24
 80118d6:	46bd      	mov	sp, r7
 80118d8:	bd80      	pop	{r7, pc}
 80118da:	bf00      	nop
 80118dc:	0801e89c 	.word	0x0801e89c
 80118e0:	0801eb44 	.word	0x0801eb44
 80118e4:	0801e8fc 	.word	0x0801e8fc
 80118e8:	0801eb74 	.word	0x0801eb74
 80118ec:	0801eb8c 	.word	0x0801eb8c
 80118f0:	0801eba8 	.word	0x0801eba8
 80118f4:	0801ebb8 	.word	0x0801ebb8

080118f8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b088      	sub	sp, #32
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	60f8      	str	r0, [r7, #12]
 8011900:	60b9      	str	r1, [r7, #8]
 8011902:	4611      	mov	r1, r2
 8011904:	461a      	mov	r2, r3
 8011906:	460b      	mov	r3, r1
 8011908:	80fb      	strh	r3, [r7, #6]
 801190a:	4613      	mov	r3, r2
 801190c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801190e:	2300      	movs	r3, #0
 8011910:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8011912:	2300      	movs	r3, #0
 8011914:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d108      	bne.n	801192e <pbuf_copy_partial+0x36>
 801191c:	4b2b      	ldr	r3, [pc, #172]	; (80119cc <pbuf_copy_partial+0xd4>)
 801191e:	f240 420a 	movw	r2, #1034	; 0x40a
 8011922:	492b      	ldr	r1, [pc, #172]	; (80119d0 <pbuf_copy_partial+0xd8>)
 8011924:	482b      	ldr	r0, [pc, #172]	; (80119d4 <pbuf_copy_partial+0xdc>)
 8011926:	f009 fc9f 	bl	801b268 <iprintf>
 801192a:	2300      	movs	r3, #0
 801192c:	e04a      	b.n	80119c4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801192e:	68bb      	ldr	r3, [r7, #8]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d108      	bne.n	8011946 <pbuf_copy_partial+0x4e>
 8011934:	4b25      	ldr	r3, [pc, #148]	; (80119cc <pbuf_copy_partial+0xd4>)
 8011936:	f240 420b 	movw	r2, #1035	; 0x40b
 801193a:	4927      	ldr	r1, [pc, #156]	; (80119d8 <pbuf_copy_partial+0xe0>)
 801193c:	4825      	ldr	r0, [pc, #148]	; (80119d4 <pbuf_copy_partial+0xdc>)
 801193e:	f009 fc93 	bl	801b268 <iprintf>
 8011942:	2300      	movs	r3, #0
 8011944:	e03e      	b.n	80119c4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	61fb      	str	r3, [r7, #28]
 801194a:	e034      	b.n	80119b6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801194c:	88bb      	ldrh	r3, [r7, #4]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d00a      	beq.n	8011968 <pbuf_copy_partial+0x70>
 8011952:	69fb      	ldr	r3, [r7, #28]
 8011954:	895b      	ldrh	r3, [r3, #10]
 8011956:	88ba      	ldrh	r2, [r7, #4]
 8011958:	429a      	cmp	r2, r3
 801195a:	d305      	bcc.n	8011968 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801195c:	69fb      	ldr	r3, [r7, #28]
 801195e:	895b      	ldrh	r3, [r3, #10]
 8011960:	88ba      	ldrh	r2, [r7, #4]
 8011962:	1ad3      	subs	r3, r2, r3
 8011964:	80bb      	strh	r3, [r7, #4]
 8011966:	e023      	b.n	80119b0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8011968:	69fb      	ldr	r3, [r7, #28]
 801196a:	895a      	ldrh	r2, [r3, #10]
 801196c:	88bb      	ldrh	r3, [r7, #4]
 801196e:	1ad3      	subs	r3, r2, r3
 8011970:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8011972:	8b3a      	ldrh	r2, [r7, #24]
 8011974:	88fb      	ldrh	r3, [r7, #6]
 8011976:	429a      	cmp	r2, r3
 8011978:	d901      	bls.n	801197e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801197a:	88fb      	ldrh	r3, [r7, #6]
 801197c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801197e:	8b7b      	ldrh	r3, [r7, #26]
 8011980:	68ba      	ldr	r2, [r7, #8]
 8011982:	18d0      	adds	r0, r2, r3
 8011984:	69fb      	ldr	r3, [r7, #28]
 8011986:	685a      	ldr	r2, [r3, #4]
 8011988:	88bb      	ldrh	r3, [r7, #4]
 801198a:	4413      	add	r3, r2
 801198c:	8b3a      	ldrh	r2, [r7, #24]
 801198e:	4619      	mov	r1, r3
 8011990:	f009 fe73 	bl	801b67a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8011994:	8afa      	ldrh	r2, [r7, #22]
 8011996:	8b3b      	ldrh	r3, [r7, #24]
 8011998:	4413      	add	r3, r2
 801199a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801199c:	8b7a      	ldrh	r2, [r7, #26]
 801199e:	8b3b      	ldrh	r3, [r7, #24]
 80119a0:	4413      	add	r3, r2
 80119a2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80119a4:	88fa      	ldrh	r2, [r7, #6]
 80119a6:	8b3b      	ldrh	r3, [r7, #24]
 80119a8:	1ad3      	subs	r3, r2, r3
 80119aa:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80119ac:	2300      	movs	r3, #0
 80119ae:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80119b0:	69fb      	ldr	r3, [r7, #28]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	61fb      	str	r3, [r7, #28]
 80119b6:	88fb      	ldrh	r3, [r7, #6]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d002      	beq.n	80119c2 <pbuf_copy_partial+0xca>
 80119bc:	69fb      	ldr	r3, [r7, #28]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d1c4      	bne.n	801194c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80119c2:	8afb      	ldrh	r3, [r7, #22]
}
 80119c4:	4618      	mov	r0, r3
 80119c6:	3720      	adds	r7, #32
 80119c8:	46bd      	mov	sp, r7
 80119ca:	bd80      	pop	{r7, pc}
 80119cc:	0801e89c 	.word	0x0801e89c
 80119d0:	0801ebe4 	.word	0x0801ebe4
 80119d4:	0801e8fc 	.word	0x0801e8fc
 80119d8:	0801ec04 	.word	0x0801ec04

080119dc <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 80119dc:	b580      	push	{r7, lr}
 80119de:	b088      	sub	sp, #32
 80119e0:	af00      	add	r7, sp, #0
 80119e2:	60f8      	str	r0, [r7, #12]
 80119e4:	60b9      	str	r1, [r7, #8]
 80119e6:	4613      	mov	r3, r2
 80119e8:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 80119ea:	88fb      	ldrh	r3, [r7, #6]
 80119ec:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 80119ee:	2300      	movs	r3, #0
 80119f0:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d109      	bne.n	8011a0c <pbuf_take+0x30>
 80119f8:	4b3a      	ldr	r3, [pc, #232]	; (8011ae4 <pbuf_take+0x108>)
 80119fa:	f240 42b3 	movw	r2, #1203	; 0x4b3
 80119fe:	493a      	ldr	r1, [pc, #232]	; (8011ae8 <pbuf_take+0x10c>)
 8011a00:	483a      	ldr	r0, [pc, #232]	; (8011aec <pbuf_take+0x110>)
 8011a02:	f009 fc31 	bl	801b268 <iprintf>
 8011a06:	f06f 030f 	mvn.w	r3, #15
 8011a0a:	e067      	b.n	8011adc <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8011a0c:	68bb      	ldr	r3, [r7, #8]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d109      	bne.n	8011a26 <pbuf_take+0x4a>
 8011a12:	4b34      	ldr	r3, [pc, #208]	; (8011ae4 <pbuf_take+0x108>)
 8011a14:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8011a18:	4935      	ldr	r1, [pc, #212]	; (8011af0 <pbuf_take+0x114>)
 8011a1a:	4834      	ldr	r0, [pc, #208]	; (8011aec <pbuf_take+0x110>)
 8011a1c:	f009 fc24 	bl	801b268 <iprintf>
 8011a20:	f06f 030f 	mvn.w	r3, #15
 8011a24:	e05a      	b.n	8011adc <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	891b      	ldrh	r3, [r3, #8]
 8011a2a:	88fa      	ldrh	r2, [r7, #6]
 8011a2c:	429a      	cmp	r2, r3
 8011a2e:	d909      	bls.n	8011a44 <pbuf_take+0x68>
 8011a30:	4b2c      	ldr	r3, [pc, #176]	; (8011ae4 <pbuf_take+0x108>)
 8011a32:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8011a36:	492f      	ldr	r1, [pc, #188]	; (8011af4 <pbuf_take+0x118>)
 8011a38:	482c      	ldr	r0, [pc, #176]	; (8011aec <pbuf_take+0x110>)
 8011a3a:	f009 fc15 	bl	801b268 <iprintf>
 8011a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8011a42:	e04b      	b.n	8011adc <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d007      	beq.n	8011a5a <pbuf_take+0x7e>
 8011a4a:	68bb      	ldr	r3, [r7, #8]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d004      	beq.n	8011a5a <pbuf_take+0x7e>
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	891b      	ldrh	r3, [r3, #8]
 8011a54:	88fa      	ldrh	r2, [r7, #6]
 8011a56:	429a      	cmp	r2, r3
 8011a58:	d902      	bls.n	8011a60 <pbuf_take+0x84>
    return ERR_ARG;
 8011a5a:	f06f 030f 	mvn.w	r3, #15
 8011a5e:	e03d      	b.n	8011adc <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	61fb      	str	r3, [r7, #28]
 8011a64:	e028      	b.n	8011ab8 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8011a66:	69fb      	ldr	r3, [r7, #28]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d106      	bne.n	8011a7a <pbuf_take+0x9e>
 8011a6c:	4b1d      	ldr	r3, [pc, #116]	; (8011ae4 <pbuf_take+0x108>)
 8011a6e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8011a72:	4921      	ldr	r1, [pc, #132]	; (8011af8 <pbuf_take+0x11c>)
 8011a74:	481d      	ldr	r0, [pc, #116]	; (8011aec <pbuf_take+0x110>)
 8011a76:	f009 fbf7 	bl	801b268 <iprintf>
    buf_copy_len = total_copy_len;
 8011a7a:	697b      	ldr	r3, [r7, #20]
 8011a7c:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8011a7e:	69fb      	ldr	r3, [r7, #28]
 8011a80:	895b      	ldrh	r3, [r3, #10]
 8011a82:	461a      	mov	r2, r3
 8011a84:	69bb      	ldr	r3, [r7, #24]
 8011a86:	4293      	cmp	r3, r2
 8011a88:	d902      	bls.n	8011a90 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8011a8a:	69fb      	ldr	r3, [r7, #28]
 8011a8c:	895b      	ldrh	r3, [r3, #10]
 8011a8e:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8011a90:	69fb      	ldr	r3, [r7, #28]
 8011a92:	6858      	ldr	r0, [r3, #4]
 8011a94:	68ba      	ldr	r2, [r7, #8]
 8011a96:	693b      	ldr	r3, [r7, #16]
 8011a98:	4413      	add	r3, r2
 8011a9a:	69ba      	ldr	r2, [r7, #24]
 8011a9c:	4619      	mov	r1, r3
 8011a9e:	f009 fdec 	bl	801b67a <memcpy>
    total_copy_len -= buf_copy_len;
 8011aa2:	697a      	ldr	r2, [r7, #20]
 8011aa4:	69bb      	ldr	r3, [r7, #24]
 8011aa6:	1ad3      	subs	r3, r2, r3
 8011aa8:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8011aaa:	693a      	ldr	r2, [r7, #16]
 8011aac:	69bb      	ldr	r3, [r7, #24]
 8011aae:	4413      	add	r3, r2
 8011ab0:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8011ab2:	69fb      	ldr	r3, [r7, #28]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	61fb      	str	r3, [r7, #28]
 8011ab8:	697b      	ldr	r3, [r7, #20]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d1d3      	bne.n	8011a66 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8011abe:	697b      	ldr	r3, [r7, #20]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d103      	bne.n	8011acc <pbuf_take+0xf0>
 8011ac4:	88fb      	ldrh	r3, [r7, #6]
 8011ac6:	693a      	ldr	r2, [r7, #16]
 8011ac8:	429a      	cmp	r2, r3
 8011aca:	d006      	beq.n	8011ada <pbuf_take+0xfe>
 8011acc:	4b05      	ldr	r3, [pc, #20]	; (8011ae4 <pbuf_take+0x108>)
 8011ace:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8011ad2:	490a      	ldr	r1, [pc, #40]	; (8011afc <pbuf_take+0x120>)
 8011ad4:	4805      	ldr	r0, [pc, #20]	; (8011aec <pbuf_take+0x110>)
 8011ad6:	f009 fbc7 	bl	801b268 <iprintf>
  return ERR_OK;
 8011ada:	2300      	movs	r3, #0
}
 8011adc:	4618      	mov	r0, r3
 8011ade:	3720      	adds	r7, #32
 8011ae0:	46bd      	mov	sp, r7
 8011ae2:	bd80      	pop	{r7, pc}
 8011ae4:	0801e89c 	.word	0x0801e89c
 8011ae8:	0801ec74 	.word	0x0801ec74
 8011aec:	0801e8fc 	.word	0x0801e8fc
 8011af0:	0801ec8c 	.word	0x0801ec8c
 8011af4:	0801eca8 	.word	0x0801eca8
 8011af8:	0801ecc8 	.word	0x0801ecc8
 8011afc:	0801ece0 	.word	0x0801ece0

08011b00 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b084      	sub	sp, #16
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	4603      	mov	r3, r0
 8011b08:	603a      	str	r2, [r7, #0]
 8011b0a:	71fb      	strb	r3, [r7, #7]
 8011b0c:	460b      	mov	r3, r1
 8011b0e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8011b10:	683b      	ldr	r3, [r7, #0]
 8011b12:	8919      	ldrh	r1, [r3, #8]
 8011b14:	88ba      	ldrh	r2, [r7, #4]
 8011b16:	79fb      	ldrb	r3, [r7, #7]
 8011b18:	4618      	mov	r0, r3
 8011b1a:	f7ff fa1f 	bl	8010f5c <pbuf_alloc>
 8011b1e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d101      	bne.n	8011b2a <pbuf_clone+0x2a>
    return NULL;
 8011b26:	2300      	movs	r3, #0
 8011b28:	e011      	b.n	8011b4e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8011b2a:	6839      	ldr	r1, [r7, #0]
 8011b2c:	68f8      	ldr	r0, [r7, #12]
 8011b2e:	f7ff fe11 	bl	8011754 <pbuf_copy>
 8011b32:	4603      	mov	r3, r0
 8011b34:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8011b36:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d006      	beq.n	8011b4c <pbuf_clone+0x4c>
 8011b3e:	4b06      	ldr	r3, [pc, #24]	; (8011b58 <pbuf_clone+0x58>)
 8011b40:	f240 5224 	movw	r2, #1316	; 0x524
 8011b44:	4905      	ldr	r1, [pc, #20]	; (8011b5c <pbuf_clone+0x5c>)
 8011b46:	4806      	ldr	r0, [pc, #24]	; (8011b60 <pbuf_clone+0x60>)
 8011b48:	f009 fb8e 	bl	801b268 <iprintf>
  return q;
 8011b4c:	68fb      	ldr	r3, [r7, #12]
}
 8011b4e:	4618      	mov	r0, r3
 8011b50:	3710      	adds	r7, #16
 8011b52:	46bd      	mov	sp, r7
 8011b54:	bd80      	pop	{r7, pc}
 8011b56:	bf00      	nop
 8011b58:	0801e89c 	.word	0x0801e89c
 8011b5c:	0801ed10 	.word	0x0801ed10
 8011b60:	0801e8fc 	.word	0x0801e8fc

08011b64 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8011b64:	b580      	push	{r7, lr}
 8011b66:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011b68:	f008 fe42 	bl	801a7f0 <rand>
 8011b6c:	4603      	mov	r3, r0
 8011b6e:	b29b      	uxth	r3, r3
 8011b70:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011b74:	b29b      	uxth	r3, r3
 8011b76:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011b7a:	b29a      	uxth	r2, r3
 8011b7c:	4b01      	ldr	r3, [pc, #4]	; (8011b84 <tcp_init+0x20>)
 8011b7e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011b80:	bf00      	nop
 8011b82:	bd80      	pop	{r7, pc}
 8011b84:	20000054 	.word	0x20000054

08011b88 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b082      	sub	sp, #8
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	7d1b      	ldrb	r3, [r3, #20]
 8011b94:	2b01      	cmp	r3, #1
 8011b96:	d105      	bne.n	8011ba4 <tcp_free+0x1c>
 8011b98:	4b06      	ldr	r3, [pc, #24]	; (8011bb4 <tcp_free+0x2c>)
 8011b9a:	22d4      	movs	r2, #212	; 0xd4
 8011b9c:	4906      	ldr	r1, [pc, #24]	; (8011bb8 <tcp_free+0x30>)
 8011b9e:	4807      	ldr	r0, [pc, #28]	; (8011bbc <tcp_free+0x34>)
 8011ba0:	f009 fb62 	bl	801b268 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8011ba4:	6879      	ldr	r1, [r7, #4]
 8011ba6:	2001      	movs	r0, #1
 8011ba8:	f7fe fe46 	bl	8010838 <memp_free>
}
 8011bac:	bf00      	nop
 8011bae:	3708      	adds	r7, #8
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	bd80      	pop	{r7, pc}
 8011bb4:	0801ed9c 	.word	0x0801ed9c
 8011bb8:	0801edcc 	.word	0x0801edcc
 8011bbc:	0801ede0 	.word	0x0801ede0

08011bc0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b082      	sub	sp, #8
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	7d1b      	ldrb	r3, [r3, #20]
 8011bcc:	2b01      	cmp	r3, #1
 8011bce:	d105      	bne.n	8011bdc <tcp_free_listen+0x1c>
 8011bd0:	4b06      	ldr	r3, [pc, #24]	; (8011bec <tcp_free_listen+0x2c>)
 8011bd2:	22df      	movs	r2, #223	; 0xdf
 8011bd4:	4906      	ldr	r1, [pc, #24]	; (8011bf0 <tcp_free_listen+0x30>)
 8011bd6:	4807      	ldr	r0, [pc, #28]	; (8011bf4 <tcp_free_listen+0x34>)
 8011bd8:	f009 fb46 	bl	801b268 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8011bdc:	6879      	ldr	r1, [r7, #4]
 8011bde:	2002      	movs	r0, #2
 8011be0:	f7fe fe2a 	bl	8010838 <memp_free>
}
 8011be4:	bf00      	nop
 8011be6:	3708      	adds	r7, #8
 8011be8:	46bd      	mov	sp, r7
 8011bea:	bd80      	pop	{r7, pc}
 8011bec:	0801ed9c 	.word	0x0801ed9c
 8011bf0:	0801ee08 	.word	0x0801ee08
 8011bf4:	0801ede0 	.word	0x0801ede0

08011bf8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8011bfc:	f001 f802 	bl	8012c04 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8011c00:	4b07      	ldr	r3, [pc, #28]	; (8011c20 <tcp_tmr+0x28>)
 8011c02:	781b      	ldrb	r3, [r3, #0]
 8011c04:	3301      	adds	r3, #1
 8011c06:	b2da      	uxtb	r2, r3
 8011c08:	4b05      	ldr	r3, [pc, #20]	; (8011c20 <tcp_tmr+0x28>)
 8011c0a:	701a      	strb	r2, [r3, #0]
 8011c0c:	4b04      	ldr	r3, [pc, #16]	; (8011c20 <tcp_tmr+0x28>)
 8011c0e:	781b      	ldrb	r3, [r3, #0]
 8011c10:	f003 0301 	and.w	r3, r3, #1
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d001      	beq.n	8011c1c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8011c18:	f000 fcb4 	bl	8012584 <tcp_slowtmr>
  }
}
 8011c1c:	bf00      	nop
 8011c1e:	bd80      	pop	{r7, pc}
 8011c20:	20007061 	.word	0x20007061

08011c24 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b084      	sub	sp, #16
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
 8011c2c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8011c2e:	683b      	ldr	r3, [r7, #0]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d105      	bne.n	8011c40 <tcp_remove_listener+0x1c>
 8011c34:	4b0d      	ldr	r3, [pc, #52]	; (8011c6c <tcp_remove_listener+0x48>)
 8011c36:	22ff      	movs	r2, #255	; 0xff
 8011c38:	490d      	ldr	r1, [pc, #52]	; (8011c70 <tcp_remove_listener+0x4c>)
 8011c3a:	480e      	ldr	r0, [pc, #56]	; (8011c74 <tcp_remove_listener+0x50>)
 8011c3c:	f009 fb14 	bl	801b268 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	60fb      	str	r3, [r7, #12]
 8011c44:	e00a      	b.n	8011c5c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c4a:	683a      	ldr	r2, [r7, #0]
 8011c4c:	429a      	cmp	r2, r3
 8011c4e:	d102      	bne.n	8011c56 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	2200      	movs	r2, #0
 8011c54:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	68db      	ldr	r3, [r3, #12]
 8011c5a:	60fb      	str	r3, [r7, #12]
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d1f1      	bne.n	8011c46 <tcp_remove_listener+0x22>
    }
  }
}
 8011c62:	bf00      	nop
 8011c64:	bf00      	nop
 8011c66:	3710      	adds	r7, #16
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	bd80      	pop	{r7, pc}
 8011c6c:	0801ed9c 	.word	0x0801ed9c
 8011c70:	0801ee24 	.word	0x0801ee24
 8011c74:	0801ede0 	.word	0x0801ede0

08011c78 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b084      	sub	sp, #16
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d106      	bne.n	8011c94 <tcp_listen_closed+0x1c>
 8011c86:	4b14      	ldr	r3, [pc, #80]	; (8011cd8 <tcp_listen_closed+0x60>)
 8011c88:	f240 1211 	movw	r2, #273	; 0x111
 8011c8c:	4913      	ldr	r1, [pc, #76]	; (8011cdc <tcp_listen_closed+0x64>)
 8011c8e:	4814      	ldr	r0, [pc, #80]	; (8011ce0 <tcp_listen_closed+0x68>)
 8011c90:	f009 faea 	bl	801b268 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	7d1b      	ldrb	r3, [r3, #20]
 8011c98:	2b01      	cmp	r3, #1
 8011c9a:	d006      	beq.n	8011caa <tcp_listen_closed+0x32>
 8011c9c:	4b0e      	ldr	r3, [pc, #56]	; (8011cd8 <tcp_listen_closed+0x60>)
 8011c9e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8011ca2:	4910      	ldr	r1, [pc, #64]	; (8011ce4 <tcp_listen_closed+0x6c>)
 8011ca4:	480e      	ldr	r0, [pc, #56]	; (8011ce0 <tcp_listen_closed+0x68>)
 8011ca6:	f009 fadf 	bl	801b268 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011caa:	2301      	movs	r3, #1
 8011cac:	60fb      	str	r3, [r7, #12]
 8011cae:	e00b      	b.n	8011cc8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8011cb0:	4a0d      	ldr	r2, [pc, #52]	; (8011ce8 <tcp_listen_closed+0x70>)
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	6879      	ldr	r1, [r7, #4]
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	f7ff ffb1 	bl	8011c24 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	3301      	adds	r3, #1
 8011cc6:	60fb      	str	r3, [r7, #12]
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	2b03      	cmp	r3, #3
 8011ccc:	d9f0      	bls.n	8011cb0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8011cce:	bf00      	nop
 8011cd0:	bf00      	nop
 8011cd2:	3710      	adds	r7, #16
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	bd80      	pop	{r7, pc}
 8011cd8:	0801ed9c 	.word	0x0801ed9c
 8011cdc:	0801ee4c 	.word	0x0801ee4c
 8011ce0:	0801ede0 	.word	0x0801ede0
 8011ce4:	0801ee58 	.word	0x0801ee58
 8011ce8:	08020dbc 	.word	0x08020dbc

08011cec <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8011cec:	b5b0      	push	{r4, r5, r7, lr}
 8011cee:	b088      	sub	sp, #32
 8011cf0:	af04      	add	r7, sp, #16
 8011cf2:	6078      	str	r0, [r7, #4]
 8011cf4:	460b      	mov	r3, r1
 8011cf6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d106      	bne.n	8011d0c <tcp_close_shutdown+0x20>
 8011cfe:	4b63      	ldr	r3, [pc, #396]	; (8011e8c <tcp_close_shutdown+0x1a0>)
 8011d00:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8011d04:	4962      	ldr	r1, [pc, #392]	; (8011e90 <tcp_close_shutdown+0x1a4>)
 8011d06:	4863      	ldr	r0, [pc, #396]	; (8011e94 <tcp_close_shutdown+0x1a8>)
 8011d08:	f009 faae 	bl	801b268 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8011d0c:	78fb      	ldrb	r3, [r7, #3]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d067      	beq.n	8011de2 <tcp_close_shutdown+0xf6>
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	7d1b      	ldrb	r3, [r3, #20]
 8011d16:	2b04      	cmp	r3, #4
 8011d18:	d003      	beq.n	8011d22 <tcp_close_shutdown+0x36>
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	7d1b      	ldrb	r3, [r3, #20]
 8011d1e:	2b07      	cmp	r3, #7
 8011d20:	d15f      	bne.n	8011de2 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d105      	bne.n	8011d36 <tcp_close_shutdown+0x4a>
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011d2e:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8011d32:	4293      	cmp	r3, r2
 8011d34:	d055      	beq.n	8011de2 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	8b5b      	ldrh	r3, [r3, #26]
 8011d3a:	f003 0310 	and.w	r3, r3, #16
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d106      	bne.n	8011d50 <tcp_close_shutdown+0x64>
 8011d42:	4b52      	ldr	r3, [pc, #328]	; (8011e8c <tcp_close_shutdown+0x1a0>)
 8011d44:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8011d48:	4953      	ldr	r1, [pc, #332]	; (8011e98 <tcp_close_shutdown+0x1ac>)
 8011d4a:	4852      	ldr	r0, [pc, #328]	; (8011e94 <tcp_close_shutdown+0x1a8>)
 8011d4c:	f009 fa8c 	bl	801b268 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011d58:	687d      	ldr	r5, [r7, #4]
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	3304      	adds	r3, #4
 8011d5e:	687a      	ldr	r2, [r7, #4]
 8011d60:	8ad2      	ldrh	r2, [r2, #22]
 8011d62:	6879      	ldr	r1, [r7, #4]
 8011d64:	8b09      	ldrh	r1, [r1, #24]
 8011d66:	9102      	str	r1, [sp, #8]
 8011d68:	9201      	str	r2, [sp, #4]
 8011d6a:	9300      	str	r3, [sp, #0]
 8011d6c:	462b      	mov	r3, r5
 8011d6e:	4622      	mov	r2, r4
 8011d70:	4601      	mov	r1, r0
 8011d72:	6878      	ldr	r0, [r7, #4]
 8011d74:	f005 fcfa 	bl	801776c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8011d78:	6878      	ldr	r0, [r7, #4]
 8011d7a:	f001 fad7 	bl	801332c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011d7e:	4b47      	ldr	r3, [pc, #284]	; (8011e9c <tcp_close_shutdown+0x1b0>)
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	687a      	ldr	r2, [r7, #4]
 8011d84:	429a      	cmp	r2, r3
 8011d86:	d105      	bne.n	8011d94 <tcp_close_shutdown+0xa8>
 8011d88:	4b44      	ldr	r3, [pc, #272]	; (8011e9c <tcp_close_shutdown+0x1b0>)
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	68db      	ldr	r3, [r3, #12]
 8011d8e:	4a43      	ldr	r2, [pc, #268]	; (8011e9c <tcp_close_shutdown+0x1b0>)
 8011d90:	6013      	str	r3, [r2, #0]
 8011d92:	e013      	b.n	8011dbc <tcp_close_shutdown+0xd0>
 8011d94:	4b41      	ldr	r3, [pc, #260]	; (8011e9c <tcp_close_shutdown+0x1b0>)
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	60fb      	str	r3, [r7, #12]
 8011d9a:	e00c      	b.n	8011db6 <tcp_close_shutdown+0xca>
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	68db      	ldr	r3, [r3, #12]
 8011da0:	687a      	ldr	r2, [r7, #4]
 8011da2:	429a      	cmp	r2, r3
 8011da4:	d104      	bne.n	8011db0 <tcp_close_shutdown+0xc4>
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	68da      	ldr	r2, [r3, #12]
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	60da      	str	r2, [r3, #12]
 8011dae:	e005      	b.n	8011dbc <tcp_close_shutdown+0xd0>
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	68db      	ldr	r3, [r3, #12]
 8011db4:	60fb      	str	r3, [r7, #12]
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d1ef      	bne.n	8011d9c <tcp_close_shutdown+0xb0>
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	60da      	str	r2, [r3, #12]
 8011dc2:	4b37      	ldr	r3, [pc, #220]	; (8011ea0 <tcp_close_shutdown+0x1b4>)
 8011dc4:	2201      	movs	r2, #1
 8011dc6:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8011dc8:	4b36      	ldr	r3, [pc, #216]	; (8011ea4 <tcp_close_shutdown+0x1b8>)
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	687a      	ldr	r2, [r7, #4]
 8011dce:	429a      	cmp	r2, r3
 8011dd0:	d102      	bne.n	8011dd8 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8011dd2:	f003 ff6f 	bl	8015cb4 <tcp_trigger_input_pcb_close>
 8011dd6:	e002      	b.n	8011dde <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 8011dd8:	6878      	ldr	r0, [r7, #4]
 8011dda:	f7ff fed5 	bl	8011b88 <tcp_free>
      }
      return ERR_OK;
 8011dde:	2300      	movs	r3, #0
 8011de0:	e050      	b.n	8011e84 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	7d1b      	ldrb	r3, [r3, #20]
 8011de6:	2b02      	cmp	r3, #2
 8011de8:	d03b      	beq.n	8011e62 <tcp_close_shutdown+0x176>
 8011dea:	2b02      	cmp	r3, #2
 8011dec:	dc44      	bgt.n	8011e78 <tcp_close_shutdown+0x18c>
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d002      	beq.n	8011df8 <tcp_close_shutdown+0x10c>
 8011df2:	2b01      	cmp	r3, #1
 8011df4:	d02a      	beq.n	8011e4c <tcp_close_shutdown+0x160>
 8011df6:	e03f      	b.n	8011e78 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	8adb      	ldrh	r3, [r3, #22]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d021      	beq.n	8011e44 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011e00:	4b29      	ldr	r3, [pc, #164]	; (8011ea8 <tcp_close_shutdown+0x1bc>)
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	687a      	ldr	r2, [r7, #4]
 8011e06:	429a      	cmp	r2, r3
 8011e08:	d105      	bne.n	8011e16 <tcp_close_shutdown+0x12a>
 8011e0a:	4b27      	ldr	r3, [pc, #156]	; (8011ea8 <tcp_close_shutdown+0x1bc>)
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	68db      	ldr	r3, [r3, #12]
 8011e10:	4a25      	ldr	r2, [pc, #148]	; (8011ea8 <tcp_close_shutdown+0x1bc>)
 8011e12:	6013      	str	r3, [r2, #0]
 8011e14:	e013      	b.n	8011e3e <tcp_close_shutdown+0x152>
 8011e16:	4b24      	ldr	r3, [pc, #144]	; (8011ea8 <tcp_close_shutdown+0x1bc>)
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	60bb      	str	r3, [r7, #8]
 8011e1c:	e00c      	b.n	8011e38 <tcp_close_shutdown+0x14c>
 8011e1e:	68bb      	ldr	r3, [r7, #8]
 8011e20:	68db      	ldr	r3, [r3, #12]
 8011e22:	687a      	ldr	r2, [r7, #4]
 8011e24:	429a      	cmp	r2, r3
 8011e26:	d104      	bne.n	8011e32 <tcp_close_shutdown+0x146>
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	68da      	ldr	r2, [r3, #12]
 8011e2c:	68bb      	ldr	r3, [r7, #8]
 8011e2e:	60da      	str	r2, [r3, #12]
 8011e30:	e005      	b.n	8011e3e <tcp_close_shutdown+0x152>
 8011e32:	68bb      	ldr	r3, [r7, #8]
 8011e34:	68db      	ldr	r3, [r3, #12]
 8011e36:	60bb      	str	r3, [r7, #8]
 8011e38:	68bb      	ldr	r3, [r7, #8]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d1ef      	bne.n	8011e1e <tcp_close_shutdown+0x132>
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	2200      	movs	r2, #0
 8011e42:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8011e44:	6878      	ldr	r0, [r7, #4]
 8011e46:	f7ff fe9f 	bl	8011b88 <tcp_free>
      break;
 8011e4a:	e01a      	b.n	8011e82 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 8011e4c:	6878      	ldr	r0, [r7, #4]
 8011e4e:	f7ff ff13 	bl	8011c78 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8011e52:	6879      	ldr	r1, [r7, #4]
 8011e54:	4815      	ldr	r0, [pc, #84]	; (8011eac <tcp_close_shutdown+0x1c0>)
 8011e56:	f001 fab9 	bl	80133cc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8011e5a:	6878      	ldr	r0, [r7, #4]
 8011e5c:	f7ff feb0 	bl	8011bc0 <tcp_free_listen>
      break;
 8011e60:	e00f      	b.n	8011e82 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011e62:	6879      	ldr	r1, [r7, #4]
 8011e64:	480d      	ldr	r0, [pc, #52]	; (8011e9c <tcp_close_shutdown+0x1b0>)
 8011e66:	f001 fab1 	bl	80133cc <tcp_pcb_remove>
 8011e6a:	4b0d      	ldr	r3, [pc, #52]	; (8011ea0 <tcp_close_shutdown+0x1b4>)
 8011e6c:	2201      	movs	r2, #1
 8011e6e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8011e70:	6878      	ldr	r0, [r7, #4]
 8011e72:	f7ff fe89 	bl	8011b88 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8011e76:	e004      	b.n	8011e82 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 8011e78:	6878      	ldr	r0, [r7, #4]
 8011e7a:	f000 f819 	bl	8011eb0 <tcp_close_shutdown_fin>
 8011e7e:	4603      	mov	r3, r0
 8011e80:	e000      	b.n	8011e84 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 8011e82:	2300      	movs	r3, #0
}
 8011e84:	4618      	mov	r0, r3
 8011e86:	3710      	adds	r7, #16
 8011e88:	46bd      	mov	sp, r7
 8011e8a:	bdb0      	pop	{r4, r5, r7, pc}
 8011e8c:	0801ed9c 	.word	0x0801ed9c
 8011e90:	0801ee70 	.word	0x0801ee70
 8011e94:	0801ede0 	.word	0x0801ede0
 8011e98:	0801ee90 	.word	0x0801ee90
 8011e9c:	20007058 	.word	0x20007058
 8011ea0:	20007060 	.word	0x20007060
 8011ea4:	20007098 	.word	0x20007098
 8011ea8:	20007050 	.word	0x20007050
 8011eac:	20007054 	.word	0x20007054

08011eb0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b084      	sub	sp, #16
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d106      	bne.n	8011ecc <tcp_close_shutdown_fin+0x1c>
 8011ebe:	4b2e      	ldr	r3, [pc, #184]	; (8011f78 <tcp_close_shutdown_fin+0xc8>)
 8011ec0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8011ec4:	492d      	ldr	r1, [pc, #180]	; (8011f7c <tcp_close_shutdown_fin+0xcc>)
 8011ec6:	482e      	ldr	r0, [pc, #184]	; (8011f80 <tcp_close_shutdown_fin+0xd0>)
 8011ec8:	f009 f9ce 	bl	801b268 <iprintf>

  switch (pcb->state) {
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	7d1b      	ldrb	r3, [r3, #20]
 8011ed0:	2b07      	cmp	r3, #7
 8011ed2:	d020      	beq.n	8011f16 <tcp_close_shutdown_fin+0x66>
 8011ed4:	2b07      	cmp	r3, #7
 8011ed6:	dc2b      	bgt.n	8011f30 <tcp_close_shutdown_fin+0x80>
 8011ed8:	2b03      	cmp	r3, #3
 8011eda:	d002      	beq.n	8011ee2 <tcp_close_shutdown_fin+0x32>
 8011edc:	2b04      	cmp	r3, #4
 8011ede:	d00d      	beq.n	8011efc <tcp_close_shutdown_fin+0x4c>
 8011ee0:	e026      	b.n	8011f30 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8011ee2:	6878      	ldr	r0, [r7, #4]
 8011ee4:	f004 fd50 	bl	8016988 <tcp_send_fin>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011eec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d11f      	bne.n	8011f34 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	2205      	movs	r2, #5
 8011ef8:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011efa:	e01b      	b.n	8011f34 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8011efc:	6878      	ldr	r0, [r7, #4]
 8011efe:	f004 fd43 	bl	8016988 <tcp_send_fin>
 8011f02:	4603      	mov	r3, r0
 8011f04:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d114      	bne.n	8011f38 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	2205      	movs	r2, #5
 8011f12:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011f14:	e010      	b.n	8011f38 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8011f16:	6878      	ldr	r0, [r7, #4]
 8011f18:	f004 fd36 	bl	8016988 <tcp_send_fin>
 8011f1c:	4603      	mov	r3, r0
 8011f1e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d109      	bne.n	8011f3c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	2209      	movs	r2, #9
 8011f2c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011f2e:	e005      	b.n	8011f3c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8011f30:	2300      	movs	r3, #0
 8011f32:	e01c      	b.n	8011f6e <tcp_close_shutdown_fin+0xbe>
      break;
 8011f34:	bf00      	nop
 8011f36:	e002      	b.n	8011f3e <tcp_close_shutdown_fin+0x8e>
      break;
 8011f38:	bf00      	nop
 8011f3a:	e000      	b.n	8011f3e <tcp_close_shutdown_fin+0x8e>
      break;
 8011f3c:	bf00      	nop
  }

  if (err == ERR_OK) {
 8011f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d103      	bne.n	8011f4e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8011f46:	6878      	ldr	r0, [r7, #4]
 8011f48:	f004 fe5c 	bl	8016c04 <tcp_output>
 8011f4c:	e00d      	b.n	8011f6a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8011f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f56:	d108      	bne.n	8011f6a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	8b5b      	ldrh	r3, [r3, #26]
 8011f5c:	f043 0308 	orr.w	r3, r3, #8
 8011f60:	b29a      	uxth	r2, r3
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8011f66:	2300      	movs	r3, #0
 8011f68:	e001      	b.n	8011f6e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8011f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011f6e:	4618      	mov	r0, r3
 8011f70:	3710      	adds	r7, #16
 8011f72:	46bd      	mov	sp, r7
 8011f74:	bd80      	pop	{r7, pc}
 8011f76:	bf00      	nop
 8011f78:	0801ed9c 	.word	0x0801ed9c
 8011f7c:	0801ee4c 	.word	0x0801ee4c
 8011f80:	0801ede0 	.word	0x0801ede0

08011f84 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8011f84:	b580      	push	{r7, lr}
 8011f86:	b082      	sub	sp, #8
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d109      	bne.n	8011fa6 <tcp_close+0x22>
 8011f92:	4b0f      	ldr	r3, [pc, #60]	; (8011fd0 <tcp_close+0x4c>)
 8011f94:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8011f98:	490e      	ldr	r1, [pc, #56]	; (8011fd4 <tcp_close+0x50>)
 8011f9a:	480f      	ldr	r0, [pc, #60]	; (8011fd8 <tcp_close+0x54>)
 8011f9c:	f009 f964 	bl	801b268 <iprintf>
 8011fa0:	f06f 030f 	mvn.w	r3, #15
 8011fa4:	e00f      	b.n	8011fc6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	7d1b      	ldrb	r3, [r3, #20]
 8011faa:	2b01      	cmp	r3, #1
 8011fac:	d006      	beq.n	8011fbc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	8b5b      	ldrh	r3, [r3, #26]
 8011fb2:	f043 0310 	orr.w	r3, r3, #16
 8011fb6:	b29a      	uxth	r2, r3
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8011fbc:	2101      	movs	r1, #1
 8011fbe:	6878      	ldr	r0, [r7, #4]
 8011fc0:	f7ff fe94 	bl	8011cec <tcp_close_shutdown>
 8011fc4:	4603      	mov	r3, r0
}
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	3708      	adds	r7, #8
 8011fca:	46bd      	mov	sp, r7
 8011fcc:	bd80      	pop	{r7, pc}
 8011fce:	bf00      	nop
 8011fd0:	0801ed9c 	.word	0x0801ed9c
 8011fd4:	0801eeac 	.word	0x0801eeac
 8011fd8:	0801ede0 	.word	0x0801ede0

08011fdc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8011fdc:	b580      	push	{r7, lr}
 8011fde:	b08e      	sub	sp, #56	; 0x38
 8011fe0:	af04      	add	r7, sp, #16
 8011fe2:	6078      	str	r0, [r7, #4]
 8011fe4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d107      	bne.n	8011ffc <tcp_abandon+0x20>
 8011fec:	4b52      	ldr	r3, [pc, #328]	; (8012138 <tcp_abandon+0x15c>)
 8011fee:	f240 223d 	movw	r2, #573	; 0x23d
 8011ff2:	4952      	ldr	r1, [pc, #328]	; (801213c <tcp_abandon+0x160>)
 8011ff4:	4852      	ldr	r0, [pc, #328]	; (8012140 <tcp_abandon+0x164>)
 8011ff6:	f009 f937 	bl	801b268 <iprintf>
 8011ffa:	e099      	b.n	8012130 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	7d1b      	ldrb	r3, [r3, #20]
 8012000:	2b01      	cmp	r3, #1
 8012002:	d106      	bne.n	8012012 <tcp_abandon+0x36>
 8012004:	4b4c      	ldr	r3, [pc, #304]	; (8012138 <tcp_abandon+0x15c>)
 8012006:	f44f 7210 	mov.w	r2, #576	; 0x240
 801200a:	494e      	ldr	r1, [pc, #312]	; (8012144 <tcp_abandon+0x168>)
 801200c:	484c      	ldr	r0, [pc, #304]	; (8012140 <tcp_abandon+0x164>)
 801200e:	f009 f92b 	bl	801b268 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	7d1b      	ldrb	r3, [r3, #20]
 8012016:	2b0a      	cmp	r3, #10
 8012018:	d107      	bne.n	801202a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801201a:	6879      	ldr	r1, [r7, #4]
 801201c:	484a      	ldr	r0, [pc, #296]	; (8012148 <tcp_abandon+0x16c>)
 801201e:	f001 f9d5 	bl	80133cc <tcp_pcb_remove>
    tcp_free(pcb);
 8012022:	6878      	ldr	r0, [r7, #4]
 8012024:	f7ff fdb0 	bl	8011b88 <tcp_free>
 8012028:	e082      	b.n	8012130 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801202a:	2300      	movs	r3, #0
 801202c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801202e:	2300      	movs	r3, #0
 8012030:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012036:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801203c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012044:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	691b      	ldr	r3, [r3, #16]
 801204a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	7d1b      	ldrb	r3, [r3, #20]
 8012050:	2b00      	cmp	r3, #0
 8012052:	d126      	bne.n	80120a2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	8adb      	ldrh	r3, [r3, #22]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d02e      	beq.n	80120ba <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801205c:	4b3b      	ldr	r3, [pc, #236]	; (801214c <tcp_abandon+0x170>)
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	687a      	ldr	r2, [r7, #4]
 8012062:	429a      	cmp	r2, r3
 8012064:	d105      	bne.n	8012072 <tcp_abandon+0x96>
 8012066:	4b39      	ldr	r3, [pc, #228]	; (801214c <tcp_abandon+0x170>)
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	68db      	ldr	r3, [r3, #12]
 801206c:	4a37      	ldr	r2, [pc, #220]	; (801214c <tcp_abandon+0x170>)
 801206e:	6013      	str	r3, [r2, #0]
 8012070:	e013      	b.n	801209a <tcp_abandon+0xbe>
 8012072:	4b36      	ldr	r3, [pc, #216]	; (801214c <tcp_abandon+0x170>)
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	61fb      	str	r3, [r7, #28]
 8012078:	e00c      	b.n	8012094 <tcp_abandon+0xb8>
 801207a:	69fb      	ldr	r3, [r7, #28]
 801207c:	68db      	ldr	r3, [r3, #12]
 801207e:	687a      	ldr	r2, [r7, #4]
 8012080:	429a      	cmp	r2, r3
 8012082:	d104      	bne.n	801208e <tcp_abandon+0xb2>
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	68da      	ldr	r2, [r3, #12]
 8012088:	69fb      	ldr	r3, [r7, #28]
 801208a:	60da      	str	r2, [r3, #12]
 801208c:	e005      	b.n	801209a <tcp_abandon+0xbe>
 801208e:	69fb      	ldr	r3, [r7, #28]
 8012090:	68db      	ldr	r3, [r3, #12]
 8012092:	61fb      	str	r3, [r7, #28]
 8012094:	69fb      	ldr	r3, [r7, #28]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d1ef      	bne.n	801207a <tcp_abandon+0x9e>
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	2200      	movs	r2, #0
 801209e:	60da      	str	r2, [r3, #12]
 80120a0:	e00b      	b.n	80120ba <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80120a2:	683b      	ldr	r3, [r7, #0]
 80120a4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	8adb      	ldrh	r3, [r3, #22]
 80120aa:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80120ac:	6879      	ldr	r1, [r7, #4]
 80120ae:	4828      	ldr	r0, [pc, #160]	; (8012150 <tcp_abandon+0x174>)
 80120b0:	f001 f98c 	bl	80133cc <tcp_pcb_remove>
 80120b4:	4b27      	ldr	r3, [pc, #156]	; (8012154 <tcp_abandon+0x178>)
 80120b6:	2201      	movs	r2, #1
 80120b8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d004      	beq.n	80120cc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120c6:	4618      	mov	r0, r3
 80120c8:	f000 fe7e 	bl	8012dc8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d004      	beq.n	80120de <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120d8:	4618      	mov	r0, r3
 80120da:	f000 fe75 	bl	8012dc8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d004      	beq.n	80120f0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80120ea:	4618      	mov	r0, r3
 80120ec:	f000 fe6c 	bl	8012dc8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80120f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d00e      	beq.n	8012114 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80120f6:	6879      	ldr	r1, [r7, #4]
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	3304      	adds	r3, #4
 80120fc:	687a      	ldr	r2, [r7, #4]
 80120fe:	8b12      	ldrh	r2, [r2, #24]
 8012100:	9202      	str	r2, [sp, #8]
 8012102:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012104:	9201      	str	r2, [sp, #4]
 8012106:	9300      	str	r3, [sp, #0]
 8012108:	460b      	mov	r3, r1
 801210a:	697a      	ldr	r2, [r7, #20]
 801210c:	69b9      	ldr	r1, [r7, #24]
 801210e:	6878      	ldr	r0, [r7, #4]
 8012110:	f005 fb2c 	bl	801776c <tcp_rst>
    }
    last_state = pcb->state;
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	7d1b      	ldrb	r3, [r3, #20]
 8012118:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801211a:	6878      	ldr	r0, [r7, #4]
 801211c:	f7ff fd34 	bl	8011b88 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8012120:	693b      	ldr	r3, [r7, #16]
 8012122:	2b00      	cmp	r3, #0
 8012124:	d004      	beq.n	8012130 <tcp_abandon+0x154>
 8012126:	693b      	ldr	r3, [r7, #16]
 8012128:	f06f 010c 	mvn.w	r1, #12
 801212c:	68f8      	ldr	r0, [r7, #12]
 801212e:	4798      	blx	r3
  }
}
 8012130:	3728      	adds	r7, #40	; 0x28
 8012132:	46bd      	mov	sp, r7
 8012134:	bd80      	pop	{r7, pc}
 8012136:	bf00      	nop
 8012138:	0801ed9c 	.word	0x0801ed9c
 801213c:	0801eee0 	.word	0x0801eee0
 8012140:	0801ede0 	.word	0x0801ede0
 8012144:	0801eefc 	.word	0x0801eefc
 8012148:	2000705c 	.word	0x2000705c
 801214c:	20007050 	.word	0x20007050
 8012150:	20007058 	.word	0x20007058
 8012154:	20007060 	.word	0x20007060

08012158 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8012158:	b580      	push	{r7, lr}
 801215a:	b082      	sub	sp, #8
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8012160:	2101      	movs	r1, #1
 8012162:	6878      	ldr	r0, [r7, #4]
 8012164:	f7ff ff3a 	bl	8011fdc <tcp_abandon>
}
 8012168:	bf00      	nop
 801216a:	3708      	adds	r7, #8
 801216c:	46bd      	mov	sp, r7
 801216e:	bd80      	pop	{r7, pc}

08012170 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8012170:	b580      	push	{r7, lr}
 8012172:	b084      	sub	sp, #16
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	2b00      	cmp	r3, #0
 801217c:	d106      	bne.n	801218c <tcp_update_rcv_ann_wnd+0x1c>
 801217e:	4b25      	ldr	r3, [pc, #148]	; (8012214 <tcp_update_rcv_ann_wnd+0xa4>)
 8012180:	f240 32a6 	movw	r2, #934	; 0x3a6
 8012184:	4924      	ldr	r1, [pc, #144]	; (8012218 <tcp_update_rcv_ann_wnd+0xa8>)
 8012186:	4825      	ldr	r0, [pc, #148]	; (801221c <tcp_update_rcv_ann_wnd+0xac>)
 8012188:	f009 f86e 	bl	801b268 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012190:	687a      	ldr	r2, [r7, #4]
 8012192:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8012194:	4413      	add	r3, r2
 8012196:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801219c:	687a      	ldr	r2, [r7, #4]
 801219e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80121a0:	f640 3168 	movw	r1, #2920	; 0xb68
 80121a4:	428a      	cmp	r2, r1
 80121a6:	bf28      	it	cs
 80121a8:	460a      	movcs	r2, r1
 80121aa:	b292      	uxth	r2, r2
 80121ac:	4413      	add	r3, r2
 80121ae:	68fa      	ldr	r2, [r7, #12]
 80121b0:	1ad3      	subs	r3, r2, r3
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	db08      	blt.n	80121c8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121c2:	68fa      	ldr	r2, [r7, #12]
 80121c4:	1ad3      	subs	r3, r2, r3
 80121c6:	e020      	b.n	801220a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121d0:	1ad3      	subs	r3, r2, r3
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	dd03      	ble.n	80121de <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	2200      	movs	r2, #0
 80121da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80121dc:	e014      	b.n	8012208 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121e6:	1ad3      	subs	r3, r2, r3
 80121e8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80121ea:	68bb      	ldr	r3, [r7, #8]
 80121ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80121f0:	d306      	bcc.n	8012200 <tcp_update_rcv_ann_wnd+0x90>
 80121f2:	4b08      	ldr	r3, [pc, #32]	; (8012214 <tcp_update_rcv_ann_wnd+0xa4>)
 80121f4:	f240 32b6 	movw	r2, #950	; 0x3b6
 80121f8:	4909      	ldr	r1, [pc, #36]	; (8012220 <tcp_update_rcv_ann_wnd+0xb0>)
 80121fa:	4808      	ldr	r0, [pc, #32]	; (801221c <tcp_update_rcv_ann_wnd+0xac>)
 80121fc:	f009 f834 	bl	801b268 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8012200:	68bb      	ldr	r3, [r7, #8]
 8012202:	b29a      	uxth	r2, r3
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8012208:	2300      	movs	r3, #0
  }
}
 801220a:	4618      	mov	r0, r3
 801220c:	3710      	adds	r7, #16
 801220e:	46bd      	mov	sp, r7
 8012210:	bd80      	pop	{r7, pc}
 8012212:	bf00      	nop
 8012214:	0801ed9c 	.word	0x0801ed9c
 8012218:	0801eff8 	.word	0x0801eff8
 801221c:	0801ede0 	.word	0x0801ede0
 8012220:	0801f01c 	.word	0x0801f01c

08012224 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8012224:	b580      	push	{r7, lr}
 8012226:	b084      	sub	sp, #16
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]
 801222c:	460b      	mov	r3, r1
 801222e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d107      	bne.n	8012246 <tcp_recved+0x22>
 8012236:	4b20      	ldr	r3, [pc, #128]	; (80122b8 <tcp_recved+0x94>)
 8012238:	f240 32cf 	movw	r2, #975	; 0x3cf
 801223c:	491f      	ldr	r1, [pc, #124]	; (80122bc <tcp_recved+0x98>)
 801223e:	4820      	ldr	r0, [pc, #128]	; (80122c0 <tcp_recved+0x9c>)
 8012240:	f009 f812 	bl	801b268 <iprintf>
 8012244:	e034      	b.n	80122b0 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	7d1b      	ldrb	r3, [r3, #20]
 801224a:	2b01      	cmp	r3, #1
 801224c:	d106      	bne.n	801225c <tcp_recved+0x38>
 801224e:	4b1a      	ldr	r3, [pc, #104]	; (80122b8 <tcp_recved+0x94>)
 8012250:	f240 32d2 	movw	r2, #978	; 0x3d2
 8012254:	491b      	ldr	r1, [pc, #108]	; (80122c4 <tcp_recved+0xa0>)
 8012256:	481a      	ldr	r0, [pc, #104]	; (80122c0 <tcp_recved+0x9c>)
 8012258:	f009 f806 	bl	801b268 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012260:	887b      	ldrh	r3, [r7, #2]
 8012262:	4413      	add	r3, r2
 8012264:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8012266:	89fb      	ldrh	r3, [r7, #14]
 8012268:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801226c:	4293      	cmp	r3, r2
 801226e:	d804      	bhi.n	801227a <tcp_recved+0x56>
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012274:	89fa      	ldrh	r2, [r7, #14]
 8012276:	429a      	cmp	r2, r3
 8012278:	d204      	bcs.n	8012284 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8012280:	851a      	strh	r2, [r3, #40]	; 0x28
 8012282:	e002      	b.n	801228a <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	89fa      	ldrh	r2, [r7, #14]
 8012288:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801228a:	6878      	ldr	r0, [r7, #4]
 801228c:	f7ff ff70 	bl	8012170 <tcp_update_rcv_ann_wnd>
 8012290:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8012292:	68bb      	ldr	r3, [r7, #8]
 8012294:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8012298:	4293      	cmp	r3, r2
 801229a:	d909      	bls.n	80122b0 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	8b5b      	ldrh	r3, [r3, #26]
 80122a0:	f043 0302 	orr.w	r3, r3, #2
 80122a4:	b29a      	uxth	r2, r3
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80122aa:	6878      	ldr	r0, [r7, #4]
 80122ac:	f004 fcaa 	bl	8016c04 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80122b0:	3710      	adds	r7, #16
 80122b2:	46bd      	mov	sp, r7
 80122b4:	bd80      	pop	{r7, pc}
 80122b6:	bf00      	nop
 80122b8:	0801ed9c 	.word	0x0801ed9c
 80122bc:	0801f038 	.word	0x0801f038
 80122c0:	0801ede0 	.word	0x0801ede0
 80122c4:	0801f050 	.word	0x0801f050

080122c8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80122c8:	b480      	push	{r7}
 80122ca:	b083      	sub	sp, #12
 80122cc:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80122ce:	2300      	movs	r3, #0
 80122d0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80122d2:	4b1e      	ldr	r3, [pc, #120]	; (801234c <tcp_new_port+0x84>)
 80122d4:	881b      	ldrh	r3, [r3, #0]
 80122d6:	3301      	adds	r3, #1
 80122d8:	b29a      	uxth	r2, r3
 80122da:	4b1c      	ldr	r3, [pc, #112]	; (801234c <tcp_new_port+0x84>)
 80122dc:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80122de:	4b1b      	ldr	r3, [pc, #108]	; (801234c <tcp_new_port+0x84>)
 80122e0:	881b      	ldrh	r3, [r3, #0]
 80122e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80122e6:	4293      	cmp	r3, r2
 80122e8:	d103      	bne.n	80122f2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80122ea:	4b18      	ldr	r3, [pc, #96]	; (801234c <tcp_new_port+0x84>)
 80122ec:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80122f0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80122f2:	2300      	movs	r3, #0
 80122f4:	71fb      	strb	r3, [r7, #7]
 80122f6:	e01e      	b.n	8012336 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80122f8:	79fb      	ldrb	r3, [r7, #7]
 80122fa:	4a15      	ldr	r2, [pc, #84]	; (8012350 <tcp_new_port+0x88>)
 80122fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	603b      	str	r3, [r7, #0]
 8012304:	e011      	b.n	801232a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8012306:	683b      	ldr	r3, [r7, #0]
 8012308:	8ada      	ldrh	r2, [r3, #22]
 801230a:	4b10      	ldr	r3, [pc, #64]	; (801234c <tcp_new_port+0x84>)
 801230c:	881b      	ldrh	r3, [r3, #0]
 801230e:	429a      	cmp	r2, r3
 8012310:	d108      	bne.n	8012324 <tcp_new_port+0x5c>
        n++;
 8012312:	88bb      	ldrh	r3, [r7, #4]
 8012314:	3301      	adds	r3, #1
 8012316:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8012318:	88bb      	ldrh	r3, [r7, #4]
 801231a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801231e:	d3d8      	bcc.n	80122d2 <tcp_new_port+0xa>
          return 0;
 8012320:	2300      	movs	r3, #0
 8012322:	e00d      	b.n	8012340 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8012324:	683b      	ldr	r3, [r7, #0]
 8012326:	68db      	ldr	r3, [r3, #12]
 8012328:	603b      	str	r3, [r7, #0]
 801232a:	683b      	ldr	r3, [r7, #0]
 801232c:	2b00      	cmp	r3, #0
 801232e:	d1ea      	bne.n	8012306 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8012330:	79fb      	ldrb	r3, [r7, #7]
 8012332:	3301      	adds	r3, #1
 8012334:	71fb      	strb	r3, [r7, #7]
 8012336:	79fb      	ldrb	r3, [r7, #7]
 8012338:	2b03      	cmp	r3, #3
 801233a:	d9dd      	bls.n	80122f8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801233c:	4b03      	ldr	r3, [pc, #12]	; (801234c <tcp_new_port+0x84>)
 801233e:	881b      	ldrh	r3, [r3, #0]
}
 8012340:	4618      	mov	r0, r3
 8012342:	370c      	adds	r7, #12
 8012344:	46bd      	mov	sp, r7
 8012346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801234a:	4770      	bx	lr
 801234c:	20000054 	.word	0x20000054
 8012350:	08020dbc 	.word	0x08020dbc

08012354 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8012354:	b580      	push	{r7, lr}
 8012356:	b08a      	sub	sp, #40	; 0x28
 8012358:	af00      	add	r7, sp, #0
 801235a:	60f8      	str	r0, [r7, #12]
 801235c:	60b9      	str	r1, [r7, #8]
 801235e:	603b      	str	r3, [r7, #0]
 8012360:	4613      	mov	r3, r2
 8012362:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8012364:	2300      	movs	r3, #0
 8012366:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	2b00      	cmp	r3, #0
 801236c:	d109      	bne.n	8012382 <tcp_connect+0x2e>
 801236e:	4b7d      	ldr	r3, [pc, #500]	; (8012564 <tcp_connect+0x210>)
 8012370:	f240 4235 	movw	r2, #1077	; 0x435
 8012374:	497c      	ldr	r1, [pc, #496]	; (8012568 <tcp_connect+0x214>)
 8012376:	487d      	ldr	r0, [pc, #500]	; (801256c <tcp_connect+0x218>)
 8012378:	f008 ff76 	bl	801b268 <iprintf>
 801237c:	f06f 030f 	mvn.w	r3, #15
 8012380:	e0ec      	b.n	801255c <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8012382:	68bb      	ldr	r3, [r7, #8]
 8012384:	2b00      	cmp	r3, #0
 8012386:	d109      	bne.n	801239c <tcp_connect+0x48>
 8012388:	4b76      	ldr	r3, [pc, #472]	; (8012564 <tcp_connect+0x210>)
 801238a:	f240 4236 	movw	r2, #1078	; 0x436
 801238e:	4978      	ldr	r1, [pc, #480]	; (8012570 <tcp_connect+0x21c>)
 8012390:	4876      	ldr	r0, [pc, #472]	; (801256c <tcp_connect+0x218>)
 8012392:	f008 ff69 	bl	801b268 <iprintf>
 8012396:	f06f 030f 	mvn.w	r3, #15
 801239a:	e0df      	b.n	801255c <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	7d1b      	ldrb	r3, [r3, #20]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d009      	beq.n	80123b8 <tcp_connect+0x64>
 80123a4:	4b6f      	ldr	r3, [pc, #444]	; (8012564 <tcp_connect+0x210>)
 80123a6:	f44f 6287 	mov.w	r2, #1080	; 0x438
 80123aa:	4972      	ldr	r1, [pc, #456]	; (8012574 <tcp_connect+0x220>)
 80123ac:	486f      	ldr	r0, [pc, #444]	; (801256c <tcp_connect+0x218>)
 80123ae:	f008 ff5b 	bl	801b268 <iprintf>
 80123b2:	f06f 0309 	mvn.w	r3, #9
 80123b6:	e0d1      	b.n	801255c <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 80123b8:	68bb      	ldr	r3, [r7, #8]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d002      	beq.n	80123c4 <tcp_connect+0x70>
 80123be:	68bb      	ldr	r3, [r7, #8]
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	e000      	b.n	80123c6 <tcp_connect+0x72>
 80123c4:	2300      	movs	r3, #0
 80123c6:	68fa      	ldr	r2, [r7, #12]
 80123c8:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	88fa      	ldrh	r2, [r7, #6]
 80123ce:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	7a1b      	ldrb	r3, [r3, #8]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d006      	beq.n	80123e6 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	7a1b      	ldrb	r3, [r3, #8]
 80123dc:	4618      	mov	r0, r3
 80123de:	f7fe fd41 	bl	8010e64 <netif_get_by_index>
 80123e2:	6278      	str	r0, [r7, #36]	; 0x24
 80123e4:	e005      	b.n	80123f2 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	3304      	adds	r3, #4
 80123ea:	4618      	mov	r0, r3
 80123ec:	f006 ff84 	bl	80192f8 <ip4_route>
 80123f0:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 80123f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d102      	bne.n	80123fe <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 80123f8:	f06f 0303 	mvn.w	r3, #3
 80123fc:	e0ae      	b.n	801255c <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d003      	beq.n	801240c <tcp_connect+0xb8>
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d111      	bne.n	8012430 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 801240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801240e:	2b00      	cmp	r3, #0
 8012410:	d002      	beq.n	8012418 <tcp_connect+0xc4>
 8012412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012414:	3304      	adds	r3, #4
 8012416:	e000      	b.n	801241a <tcp_connect+0xc6>
 8012418:	2300      	movs	r3, #0
 801241a:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 801241c:	69fb      	ldr	r3, [r7, #28]
 801241e:	2b00      	cmp	r3, #0
 8012420:	d102      	bne.n	8012428 <tcp_connect+0xd4>
      return ERR_RTE;
 8012422:	f06f 0303 	mvn.w	r3, #3
 8012426:	e099      	b.n	801255c <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012428:	69fb      	ldr	r3, [r7, #28]
 801242a:	681a      	ldr	r2, [r3, #0]
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	8adb      	ldrh	r3, [r3, #22]
 8012434:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	8adb      	ldrh	r3, [r3, #22]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d10c      	bne.n	8012458 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 801243e:	f7ff ff43 	bl	80122c8 <tcp_new_port>
 8012442:	4603      	mov	r3, r0
 8012444:	461a      	mov	r2, r3
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	8adb      	ldrh	r3, [r3, #22]
 801244e:	2b00      	cmp	r3, #0
 8012450:	d102      	bne.n	8012458 <tcp_connect+0x104>
      return ERR_BUF;
 8012452:	f06f 0301 	mvn.w	r3, #1
 8012456:	e081      	b.n	801255c <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8012458:	68f8      	ldr	r0, [r7, #12]
 801245a:	f001 f84b 	bl	80134f4 <tcp_next_iss>
 801245e:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	2200      	movs	r2, #0
 8012464:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	697a      	ldr	r2, [r7, #20]
 801246a:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 801246c:	697b      	ldr	r3, [r7, #20]
 801246e:	1e5a      	subs	r2, r3, #1
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8012474:	697b      	ldr	r3, [r7, #20]
 8012476:	1e5a      	subs	r2, r3, #1
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 801247c:	697b      	ldr	r3, [r7, #20]
 801247e:	1e5a      	subs	r2, r3, #1
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801248a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80124a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	f44f 7206 	mov.w	r2, #536	; 0x218
 80124ac:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	3304      	adds	r3, #4
 80124b6:	461a      	mov	r2, r3
 80124b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80124ba:	f001 f841 	bl	8013540 <tcp_eff_send_mss_netif>
 80124be:	4603      	mov	r3, r0
 80124c0:	461a      	mov	r2, r3
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	2201      	movs	r2, #1
 80124ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	683a      	ldr	r2, [r7, #0]
 80124d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 80124d6:	2102      	movs	r1, #2
 80124d8:	68f8      	ldr	r0, [r7, #12]
 80124da:	f004 faa5 	bl	8016a28 <tcp_enqueue_flags>
 80124de:	4603      	mov	r3, r0
 80124e0:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 80124e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d136      	bne.n	8012558 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	2202      	movs	r2, #2
 80124ee:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 80124f0:	8b7b      	ldrh	r3, [r7, #26]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d021      	beq.n	801253a <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80124f6:	4b20      	ldr	r3, [pc, #128]	; (8012578 <tcp_connect+0x224>)
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	68fa      	ldr	r2, [r7, #12]
 80124fc:	429a      	cmp	r2, r3
 80124fe:	d105      	bne.n	801250c <tcp_connect+0x1b8>
 8012500:	4b1d      	ldr	r3, [pc, #116]	; (8012578 <tcp_connect+0x224>)
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	68db      	ldr	r3, [r3, #12]
 8012506:	4a1c      	ldr	r2, [pc, #112]	; (8012578 <tcp_connect+0x224>)
 8012508:	6013      	str	r3, [r2, #0]
 801250a:	e013      	b.n	8012534 <tcp_connect+0x1e0>
 801250c:	4b1a      	ldr	r3, [pc, #104]	; (8012578 <tcp_connect+0x224>)
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	623b      	str	r3, [r7, #32]
 8012512:	e00c      	b.n	801252e <tcp_connect+0x1da>
 8012514:	6a3b      	ldr	r3, [r7, #32]
 8012516:	68db      	ldr	r3, [r3, #12]
 8012518:	68fa      	ldr	r2, [r7, #12]
 801251a:	429a      	cmp	r2, r3
 801251c:	d104      	bne.n	8012528 <tcp_connect+0x1d4>
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	68da      	ldr	r2, [r3, #12]
 8012522:	6a3b      	ldr	r3, [r7, #32]
 8012524:	60da      	str	r2, [r3, #12]
 8012526:	e005      	b.n	8012534 <tcp_connect+0x1e0>
 8012528:	6a3b      	ldr	r3, [r7, #32]
 801252a:	68db      	ldr	r3, [r3, #12]
 801252c:	623b      	str	r3, [r7, #32]
 801252e:	6a3b      	ldr	r3, [r7, #32]
 8012530:	2b00      	cmp	r3, #0
 8012532:	d1ef      	bne.n	8012514 <tcp_connect+0x1c0>
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	2200      	movs	r2, #0
 8012538:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 801253a:	4b10      	ldr	r3, [pc, #64]	; (801257c <tcp_connect+0x228>)
 801253c:	681a      	ldr	r2, [r3, #0]
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	60da      	str	r2, [r3, #12]
 8012542:	4a0e      	ldr	r2, [pc, #56]	; (801257c <tcp_connect+0x228>)
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	6013      	str	r3, [r2, #0]
 8012548:	f005 fad2 	bl	8017af0 <tcp_timer_needed>
 801254c:	4b0c      	ldr	r3, [pc, #48]	; (8012580 <tcp_connect+0x22c>)
 801254e:	2201      	movs	r2, #1
 8012550:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8012552:	68f8      	ldr	r0, [r7, #12]
 8012554:	f004 fb56 	bl	8016c04 <tcp_output>
  }
  return ret;
 8012558:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801255c:	4618      	mov	r0, r3
 801255e:	3728      	adds	r7, #40	; 0x28
 8012560:	46bd      	mov	sp, r7
 8012562:	bd80      	pop	{r7, pc}
 8012564:	0801ed9c 	.word	0x0801ed9c
 8012568:	0801f078 	.word	0x0801f078
 801256c:	0801ede0 	.word	0x0801ede0
 8012570:	0801f094 	.word	0x0801f094
 8012574:	0801f0b0 	.word	0x0801f0b0
 8012578:	20007050 	.word	0x20007050
 801257c:	20007058 	.word	0x20007058
 8012580:	20007060 	.word	0x20007060

08012584 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8012584:	b5b0      	push	{r4, r5, r7, lr}
 8012586:	b090      	sub	sp, #64	; 0x40
 8012588:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801258a:	2300      	movs	r3, #0
 801258c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8012590:	4b94      	ldr	r3, [pc, #592]	; (80127e4 <tcp_slowtmr+0x260>)
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	3301      	adds	r3, #1
 8012596:	4a93      	ldr	r2, [pc, #588]	; (80127e4 <tcp_slowtmr+0x260>)
 8012598:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801259a:	4b93      	ldr	r3, [pc, #588]	; (80127e8 <tcp_slowtmr+0x264>)
 801259c:	781b      	ldrb	r3, [r3, #0]
 801259e:	3301      	adds	r3, #1
 80125a0:	b2da      	uxtb	r2, r3
 80125a2:	4b91      	ldr	r3, [pc, #580]	; (80127e8 <tcp_slowtmr+0x264>)
 80125a4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80125a6:	2300      	movs	r3, #0
 80125a8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80125aa:	4b90      	ldr	r3, [pc, #576]	; (80127ec <tcp_slowtmr+0x268>)
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80125b0:	e29d      	b.n	8012aee <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80125b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125b4:	7d1b      	ldrb	r3, [r3, #20]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d106      	bne.n	80125c8 <tcp_slowtmr+0x44>
 80125ba:	4b8d      	ldr	r3, [pc, #564]	; (80127f0 <tcp_slowtmr+0x26c>)
 80125bc:	f240 42be 	movw	r2, #1214	; 0x4be
 80125c0:	498c      	ldr	r1, [pc, #560]	; (80127f4 <tcp_slowtmr+0x270>)
 80125c2:	488d      	ldr	r0, [pc, #564]	; (80127f8 <tcp_slowtmr+0x274>)
 80125c4:	f008 fe50 	bl	801b268 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80125c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125ca:	7d1b      	ldrb	r3, [r3, #20]
 80125cc:	2b01      	cmp	r3, #1
 80125ce:	d106      	bne.n	80125de <tcp_slowtmr+0x5a>
 80125d0:	4b87      	ldr	r3, [pc, #540]	; (80127f0 <tcp_slowtmr+0x26c>)
 80125d2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80125d6:	4989      	ldr	r1, [pc, #548]	; (80127fc <tcp_slowtmr+0x278>)
 80125d8:	4887      	ldr	r0, [pc, #540]	; (80127f8 <tcp_slowtmr+0x274>)
 80125da:	f008 fe45 	bl	801b268 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80125de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125e0:	7d1b      	ldrb	r3, [r3, #20]
 80125e2:	2b0a      	cmp	r3, #10
 80125e4:	d106      	bne.n	80125f4 <tcp_slowtmr+0x70>
 80125e6:	4b82      	ldr	r3, [pc, #520]	; (80127f0 <tcp_slowtmr+0x26c>)
 80125e8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80125ec:	4984      	ldr	r1, [pc, #528]	; (8012800 <tcp_slowtmr+0x27c>)
 80125ee:	4882      	ldr	r0, [pc, #520]	; (80127f8 <tcp_slowtmr+0x274>)
 80125f0:	f008 fe3a 	bl	801b268 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80125f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125f6:	7f9a      	ldrb	r2, [r3, #30]
 80125f8:	4b7b      	ldr	r3, [pc, #492]	; (80127e8 <tcp_slowtmr+0x264>)
 80125fa:	781b      	ldrb	r3, [r3, #0]
 80125fc:	429a      	cmp	r2, r3
 80125fe:	d105      	bne.n	801260c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8012600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012602:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012606:	68db      	ldr	r3, [r3, #12]
 8012608:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 801260a:	e270      	b.n	8012aee <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 801260c:	4b76      	ldr	r3, [pc, #472]	; (80127e8 <tcp_slowtmr+0x264>)
 801260e:	781a      	ldrb	r2, [r3, #0]
 8012610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012612:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8012614:	2300      	movs	r3, #0
 8012616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 801261a:	2300      	movs	r3, #0
 801261c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8012620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012622:	7d1b      	ldrb	r3, [r3, #20]
 8012624:	2b02      	cmp	r3, #2
 8012626:	d10a      	bne.n	801263e <tcp_slowtmr+0xba>
 8012628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801262a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801262e:	2b05      	cmp	r3, #5
 8012630:	d905      	bls.n	801263e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8012632:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012636:	3301      	adds	r3, #1
 8012638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801263c:	e11e      	b.n	801287c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801263e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012640:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012644:	2b0b      	cmp	r3, #11
 8012646:	d905      	bls.n	8012654 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8012648:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801264c:	3301      	adds	r3, #1
 801264e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012652:	e113      	b.n	801287c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8012654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012656:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801265a:	2b00      	cmp	r3, #0
 801265c:	d075      	beq.n	801274a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801265e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012662:	2b00      	cmp	r3, #0
 8012664:	d006      	beq.n	8012674 <tcp_slowtmr+0xf0>
 8012666:	4b62      	ldr	r3, [pc, #392]	; (80127f0 <tcp_slowtmr+0x26c>)
 8012668:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801266c:	4965      	ldr	r1, [pc, #404]	; (8012804 <tcp_slowtmr+0x280>)
 801266e:	4862      	ldr	r0, [pc, #392]	; (80127f8 <tcp_slowtmr+0x274>)
 8012670:	f008 fdfa 	bl	801b268 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8012674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012678:	2b00      	cmp	r3, #0
 801267a:	d106      	bne.n	801268a <tcp_slowtmr+0x106>
 801267c:	4b5c      	ldr	r3, [pc, #368]	; (80127f0 <tcp_slowtmr+0x26c>)
 801267e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8012682:	4961      	ldr	r1, [pc, #388]	; (8012808 <tcp_slowtmr+0x284>)
 8012684:	485c      	ldr	r0, [pc, #368]	; (80127f8 <tcp_slowtmr+0x274>)
 8012686:	f008 fdef 	bl	801b268 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801268a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801268c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012690:	2b0b      	cmp	r3, #11
 8012692:	d905      	bls.n	80126a0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8012694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012698:	3301      	adds	r3, #1
 801269a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801269e:	e0ed      	b.n	801287c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80126a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126a2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80126a6:	3b01      	subs	r3, #1
 80126a8:	4a58      	ldr	r2, [pc, #352]	; (801280c <tcp_slowtmr+0x288>)
 80126aa:	5cd3      	ldrb	r3, [r2, r3]
 80126ac:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80126ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126b0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80126b4:	7c7a      	ldrb	r2, [r7, #17]
 80126b6:	429a      	cmp	r2, r3
 80126b8:	d907      	bls.n	80126ca <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80126ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126bc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80126c0:	3301      	adds	r3, #1
 80126c2:	b2da      	uxtb	r2, r3
 80126c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126c6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80126ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126cc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80126d0:	7c7a      	ldrb	r2, [r7, #17]
 80126d2:	429a      	cmp	r2, r3
 80126d4:	f200 80d2 	bhi.w	801287c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80126d8:	2301      	movs	r3, #1
 80126da:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80126dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d108      	bne.n	80126f8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80126e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80126e8:	f005 f934 	bl	8017954 <tcp_zero_window_probe>
 80126ec:	4603      	mov	r3, r0
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d014      	beq.n	801271c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80126f2:	2300      	movs	r3, #0
 80126f4:	623b      	str	r3, [r7, #32]
 80126f6:	e011      	b.n	801271c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80126f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80126fe:	4619      	mov	r1, r3
 8012700:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012702:	f003 fff9 	bl	80166f8 <tcp_split_unsent_seg>
 8012706:	4603      	mov	r3, r0
 8012708:	2b00      	cmp	r3, #0
 801270a:	d107      	bne.n	801271c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 801270c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801270e:	f004 fa79 	bl	8016c04 <tcp_output>
 8012712:	4603      	mov	r3, r0
 8012714:	2b00      	cmp	r3, #0
 8012716:	d101      	bne.n	801271c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8012718:	2300      	movs	r3, #0
 801271a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 801271c:	6a3b      	ldr	r3, [r7, #32]
 801271e:	2b00      	cmp	r3, #0
 8012720:	f000 80ac 	beq.w	801287c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8012724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012726:	2200      	movs	r2, #0
 8012728:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801272c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801272e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012732:	2b06      	cmp	r3, #6
 8012734:	f200 80a2 	bhi.w	801287c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8012738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801273a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801273e:	3301      	adds	r3, #1
 8012740:	b2da      	uxtb	r2, r3
 8012742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012744:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8012748:	e098      	b.n	801287c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801274a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801274c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012750:	2b00      	cmp	r3, #0
 8012752:	db0f      	blt.n	8012774 <tcp_slowtmr+0x1f0>
 8012754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012756:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801275a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801275e:	4293      	cmp	r3, r2
 8012760:	d008      	beq.n	8012774 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8012762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012764:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012768:	b29b      	uxth	r3, r3
 801276a:	3301      	adds	r3, #1
 801276c:	b29b      	uxth	r3, r3
 801276e:	b21a      	sxth	r2, r3
 8012770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012772:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8012774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012776:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801277a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801277c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8012780:	429a      	cmp	r2, r3
 8012782:	db7b      	blt.n	801287c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8012784:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012786:	f004 fd31 	bl	80171ec <tcp_rexmit_rto_prepare>
 801278a:	4603      	mov	r3, r0
 801278c:	2b00      	cmp	r3, #0
 801278e:	d007      	beq.n	80127a0 <tcp_slowtmr+0x21c>
 8012790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012794:	2b00      	cmp	r3, #0
 8012796:	d171      	bne.n	801287c <tcp_slowtmr+0x2f8>
 8012798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801279a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801279c:	2b00      	cmp	r3, #0
 801279e:	d06d      	beq.n	801287c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80127a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127a2:	7d1b      	ldrb	r3, [r3, #20]
 80127a4:	2b02      	cmp	r3, #2
 80127a6:	d03a      	beq.n	801281e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80127a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80127ae:	2b0c      	cmp	r3, #12
 80127b0:	bf28      	it	cs
 80127b2:	230c      	movcs	r3, #12
 80127b4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80127b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127b8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80127bc:	10db      	asrs	r3, r3, #3
 80127be:	b21b      	sxth	r3, r3
 80127c0:	461a      	mov	r2, r3
 80127c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127c4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80127c8:	4413      	add	r3, r2
 80127ca:	7efa      	ldrb	r2, [r7, #27]
 80127cc:	4910      	ldr	r1, [pc, #64]	; (8012810 <tcp_slowtmr+0x28c>)
 80127ce:	5c8a      	ldrb	r2, [r1, r2]
 80127d0:	4093      	lsls	r3, r2
 80127d2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80127d4:	697b      	ldr	r3, [r7, #20]
 80127d6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80127da:	4293      	cmp	r3, r2
 80127dc:	dc1a      	bgt.n	8012814 <tcp_slowtmr+0x290>
 80127de:	697b      	ldr	r3, [r7, #20]
 80127e0:	b21a      	sxth	r2, r3
 80127e2:	e019      	b.n	8012818 <tcp_slowtmr+0x294>
 80127e4:	2000704c 	.word	0x2000704c
 80127e8:	20007062 	.word	0x20007062
 80127ec:	20007058 	.word	0x20007058
 80127f0:	0801ed9c 	.word	0x0801ed9c
 80127f4:	0801f0e0 	.word	0x0801f0e0
 80127f8:	0801ede0 	.word	0x0801ede0
 80127fc:	0801f10c 	.word	0x0801f10c
 8012800:	0801f138 	.word	0x0801f138
 8012804:	0801f168 	.word	0x0801f168
 8012808:	0801f19c 	.word	0x0801f19c
 801280c:	08020db4 	.word	0x08020db4
 8012810:	08020da4 	.word	0x08020da4
 8012814:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8012818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801281a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801281e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012820:	2200      	movs	r2, #0
 8012822:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8012824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012826:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801282a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801282c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012830:	4293      	cmp	r3, r2
 8012832:	bf28      	it	cs
 8012834:	4613      	movcs	r3, r2
 8012836:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8012838:	8a7b      	ldrh	r3, [r7, #18]
 801283a:	085b      	lsrs	r3, r3, #1
 801283c:	b29a      	uxth	r2, r3
 801283e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012840:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8012844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012846:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801284a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801284c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801284e:	005b      	lsls	r3, r3, #1
 8012850:	b29b      	uxth	r3, r3
 8012852:	429a      	cmp	r2, r3
 8012854:	d206      	bcs.n	8012864 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8012856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012858:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801285a:	005b      	lsls	r3, r3, #1
 801285c:	b29a      	uxth	r2, r3
 801285e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012860:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8012864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012866:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8012868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801286a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801286e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012870:	2200      	movs	r2, #0
 8012872:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8012876:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012878:	f004 fd28 	bl	80172cc <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801287c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801287e:	7d1b      	ldrb	r3, [r3, #20]
 8012880:	2b06      	cmp	r3, #6
 8012882:	d111      	bne.n	80128a8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8012884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012886:	8b5b      	ldrh	r3, [r3, #26]
 8012888:	f003 0310 	and.w	r3, r3, #16
 801288c:	2b00      	cmp	r3, #0
 801288e:	d00b      	beq.n	80128a8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012890:	4b9c      	ldr	r3, [pc, #624]	; (8012b04 <tcp_slowtmr+0x580>)
 8012892:	681a      	ldr	r2, [r3, #0]
 8012894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012896:	6a1b      	ldr	r3, [r3, #32]
 8012898:	1ad3      	subs	r3, r2, r3
 801289a:	2b28      	cmp	r3, #40	; 0x28
 801289c:	d904      	bls.n	80128a8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801289e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80128a2:	3301      	adds	r3, #1
 80128a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80128a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128aa:	7a5b      	ldrb	r3, [r3, #9]
 80128ac:	f003 0308 	and.w	r3, r3, #8
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d04a      	beq.n	801294a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80128b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128b6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80128b8:	2b04      	cmp	r3, #4
 80128ba:	d003      	beq.n	80128c4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80128bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128be:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80128c0:	2b07      	cmp	r3, #7
 80128c2:	d142      	bne.n	801294a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80128c4:	4b8f      	ldr	r3, [pc, #572]	; (8012b04 <tcp_slowtmr+0x580>)
 80128c6:	681a      	ldr	r2, [r3, #0]
 80128c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128ca:	6a1b      	ldr	r3, [r3, #32]
 80128cc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80128ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128d0:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80128d4:	4b8c      	ldr	r3, [pc, #560]	; (8012b08 <tcp_slowtmr+0x584>)
 80128d6:	440b      	add	r3, r1
 80128d8:	498c      	ldr	r1, [pc, #560]	; (8012b0c <tcp_slowtmr+0x588>)
 80128da:	fba1 1303 	umull	r1, r3, r1, r3
 80128de:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80128e0:	429a      	cmp	r2, r3
 80128e2:	d90a      	bls.n	80128fa <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80128e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80128e8:	3301      	adds	r3, #1
 80128ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80128ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80128f2:	3301      	adds	r3, #1
 80128f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80128f8:	e027      	b.n	801294a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80128fa:	4b82      	ldr	r3, [pc, #520]	; (8012b04 <tcp_slowtmr+0x580>)
 80128fc:	681a      	ldr	r2, [r3, #0]
 80128fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012900:	6a1b      	ldr	r3, [r3, #32]
 8012902:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8012904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012906:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801290a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801290c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8012910:	4618      	mov	r0, r3
 8012912:	4b7f      	ldr	r3, [pc, #508]	; (8012b10 <tcp_slowtmr+0x58c>)
 8012914:	fb00 f303 	mul.w	r3, r0, r3
 8012918:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801291a:	497c      	ldr	r1, [pc, #496]	; (8012b0c <tcp_slowtmr+0x588>)
 801291c:	fba1 1303 	umull	r1, r3, r1, r3
 8012920:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012922:	429a      	cmp	r2, r3
 8012924:	d911      	bls.n	801294a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8012926:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012928:	f004 ffd4 	bl	80178d4 <tcp_keepalive>
 801292c:	4603      	mov	r3, r0
 801292e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8012932:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8012936:	2b00      	cmp	r3, #0
 8012938:	d107      	bne.n	801294a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 801293a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801293c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8012940:	3301      	adds	r3, #1
 8012942:	b2da      	uxtb	r2, r3
 8012944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012946:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801294a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801294c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801294e:	2b00      	cmp	r3, #0
 8012950:	d011      	beq.n	8012976 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8012952:	4b6c      	ldr	r3, [pc, #432]	; (8012b04 <tcp_slowtmr+0x580>)
 8012954:	681a      	ldr	r2, [r3, #0]
 8012956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012958:	6a1b      	ldr	r3, [r3, #32]
 801295a:	1ad2      	subs	r2, r2, r3
 801295c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801295e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8012962:	4619      	mov	r1, r3
 8012964:	460b      	mov	r3, r1
 8012966:	005b      	lsls	r3, r3, #1
 8012968:	440b      	add	r3, r1
 801296a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801296c:	429a      	cmp	r2, r3
 801296e:	d302      	bcc.n	8012976 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8012970:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012972:	f000 fe8f 	bl	8013694 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8012976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012978:	7d1b      	ldrb	r3, [r3, #20]
 801297a:	2b03      	cmp	r3, #3
 801297c:	d10b      	bne.n	8012996 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801297e:	4b61      	ldr	r3, [pc, #388]	; (8012b04 <tcp_slowtmr+0x580>)
 8012980:	681a      	ldr	r2, [r3, #0]
 8012982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012984:	6a1b      	ldr	r3, [r3, #32]
 8012986:	1ad3      	subs	r3, r2, r3
 8012988:	2b28      	cmp	r3, #40	; 0x28
 801298a:	d904      	bls.n	8012996 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801298c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012990:	3301      	adds	r3, #1
 8012992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8012996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012998:	7d1b      	ldrb	r3, [r3, #20]
 801299a:	2b09      	cmp	r3, #9
 801299c:	d10b      	bne.n	80129b6 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801299e:	4b59      	ldr	r3, [pc, #356]	; (8012b04 <tcp_slowtmr+0x580>)
 80129a0:	681a      	ldr	r2, [r3, #0]
 80129a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129a4:	6a1b      	ldr	r3, [r3, #32]
 80129a6:	1ad3      	subs	r3, r2, r3
 80129a8:	2bf0      	cmp	r3, #240	; 0xf0
 80129aa:	d904      	bls.n	80129b6 <tcp_slowtmr+0x432>
        ++pcb_remove;
 80129ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80129b0:	3301      	adds	r3, #1
 80129b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80129b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d060      	beq.n	8012a80 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80129be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80129c4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80129c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80129c8:	f000 fcb0 	bl	801332c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80129cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d010      	beq.n	80129f4 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80129d2:	4b50      	ldr	r3, [pc, #320]	; (8012b14 <tcp_slowtmr+0x590>)
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80129d8:	429a      	cmp	r2, r3
 80129da:	d106      	bne.n	80129ea <tcp_slowtmr+0x466>
 80129dc:	4b4e      	ldr	r3, [pc, #312]	; (8012b18 <tcp_slowtmr+0x594>)
 80129de:	f240 526d 	movw	r2, #1389	; 0x56d
 80129e2:	494e      	ldr	r1, [pc, #312]	; (8012b1c <tcp_slowtmr+0x598>)
 80129e4:	484e      	ldr	r0, [pc, #312]	; (8012b20 <tcp_slowtmr+0x59c>)
 80129e6:	f008 fc3f 	bl	801b268 <iprintf>
        prev->next = pcb->next;
 80129ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ec:	68da      	ldr	r2, [r3, #12]
 80129ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129f0:	60da      	str	r2, [r3, #12]
 80129f2:	e00f      	b.n	8012a14 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80129f4:	4b47      	ldr	r3, [pc, #284]	; (8012b14 <tcp_slowtmr+0x590>)
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80129fa:	429a      	cmp	r2, r3
 80129fc:	d006      	beq.n	8012a0c <tcp_slowtmr+0x488>
 80129fe:	4b46      	ldr	r3, [pc, #280]	; (8012b18 <tcp_slowtmr+0x594>)
 8012a00:	f240 5271 	movw	r2, #1393	; 0x571
 8012a04:	4947      	ldr	r1, [pc, #284]	; (8012b24 <tcp_slowtmr+0x5a0>)
 8012a06:	4846      	ldr	r0, [pc, #280]	; (8012b20 <tcp_slowtmr+0x59c>)
 8012a08:	f008 fc2e 	bl	801b268 <iprintf>
        tcp_active_pcbs = pcb->next;
 8012a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a0e:	68db      	ldr	r3, [r3, #12]
 8012a10:	4a40      	ldr	r2, [pc, #256]	; (8012b14 <tcp_slowtmr+0x590>)
 8012a12:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8012a14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d013      	beq.n	8012a44 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a1e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8012a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a22:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8012a24:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8012a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a28:	3304      	adds	r3, #4
 8012a2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a2c:	8ad2      	ldrh	r2, [r2, #22]
 8012a2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012a30:	8b09      	ldrh	r1, [r1, #24]
 8012a32:	9102      	str	r1, [sp, #8]
 8012a34:	9201      	str	r2, [sp, #4]
 8012a36:	9300      	str	r3, [sp, #0]
 8012a38:	462b      	mov	r3, r5
 8012a3a:	4622      	mov	r2, r4
 8012a3c:	4601      	mov	r1, r0
 8012a3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012a40:	f004 fe94 	bl	801776c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8012a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a46:	691b      	ldr	r3, [r3, #16]
 8012a48:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8012a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a4c:	7d1b      	ldrb	r3, [r3, #20]
 8012a4e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8012a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a52:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8012a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a56:	68db      	ldr	r3, [r3, #12]
 8012a58:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012a5a:	6838      	ldr	r0, [r7, #0]
 8012a5c:	f7ff f894 	bl	8011b88 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8012a60:	4b31      	ldr	r3, [pc, #196]	; (8012b28 <tcp_slowtmr+0x5a4>)
 8012a62:	2200      	movs	r2, #0
 8012a64:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d004      	beq.n	8012a76 <tcp_slowtmr+0x4f2>
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	f06f 010c 	mvn.w	r1, #12
 8012a72:	68b8      	ldr	r0, [r7, #8]
 8012a74:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8012a76:	4b2c      	ldr	r3, [pc, #176]	; (8012b28 <tcp_slowtmr+0x5a4>)
 8012a78:	781b      	ldrb	r3, [r3, #0]
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d037      	beq.n	8012aee <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8012a7e:	e592      	b.n	80125a6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8012a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a82:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a86:	68db      	ldr	r3, [r3, #12]
 8012a88:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8012a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a8c:	7f1b      	ldrb	r3, [r3, #28]
 8012a8e:	3301      	adds	r3, #1
 8012a90:	b2da      	uxtb	r2, r3
 8012a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a94:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8012a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a98:	7f1a      	ldrb	r2, [r3, #28]
 8012a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a9c:	7f5b      	ldrb	r3, [r3, #29]
 8012a9e:	429a      	cmp	r2, r3
 8012aa0:	d325      	bcc.n	8012aee <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8012aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012aa4:	2200      	movs	r2, #0
 8012aa6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8012aa8:	4b1f      	ldr	r3, [pc, #124]	; (8012b28 <tcp_slowtmr+0x5a4>)
 8012aaa:	2200      	movs	r2, #0
 8012aac:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8012aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d00b      	beq.n	8012ad0 <tcp_slowtmr+0x54c>
 8012ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012aba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012abe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012ac0:	6912      	ldr	r2, [r2, #16]
 8012ac2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012ac4:	4610      	mov	r0, r2
 8012ac6:	4798      	blx	r3
 8012ac8:	4603      	mov	r3, r0
 8012aca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8012ace:	e002      	b.n	8012ad6 <tcp_slowtmr+0x552>
 8012ad0:	2300      	movs	r3, #0
 8012ad2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8012ad6:	4b14      	ldr	r3, [pc, #80]	; (8012b28 <tcp_slowtmr+0x5a4>)
 8012ad8:	781b      	ldrb	r3, [r3, #0]
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d000      	beq.n	8012ae0 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8012ade:	e562      	b.n	80125a6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8012ae0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d102      	bne.n	8012aee <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8012ae8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012aea:	f004 f88b 	bl	8016c04 <tcp_output>
  while (pcb != NULL) {
 8012aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	f47f ad5e 	bne.w	80125b2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8012af6:	2300      	movs	r3, #0
 8012af8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8012afa:	4b0c      	ldr	r3, [pc, #48]	; (8012b2c <tcp_slowtmr+0x5a8>)
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012b00:	e069      	b.n	8012bd6 <tcp_slowtmr+0x652>
 8012b02:	bf00      	nop
 8012b04:	2000704c 	.word	0x2000704c
 8012b08:	000a4cb8 	.word	0x000a4cb8
 8012b0c:	10624dd3 	.word	0x10624dd3
 8012b10:	000124f8 	.word	0x000124f8
 8012b14:	20007058 	.word	0x20007058
 8012b18:	0801ed9c 	.word	0x0801ed9c
 8012b1c:	0801f1d4 	.word	0x0801f1d4
 8012b20:	0801ede0 	.word	0x0801ede0
 8012b24:	0801f200 	.word	0x0801f200
 8012b28:	20007060 	.word	0x20007060
 8012b2c:	2000705c 	.word	0x2000705c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b32:	7d1b      	ldrb	r3, [r3, #20]
 8012b34:	2b0a      	cmp	r3, #10
 8012b36:	d006      	beq.n	8012b46 <tcp_slowtmr+0x5c2>
 8012b38:	4b2b      	ldr	r3, [pc, #172]	; (8012be8 <tcp_slowtmr+0x664>)
 8012b3a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8012b3e:	492b      	ldr	r1, [pc, #172]	; (8012bec <tcp_slowtmr+0x668>)
 8012b40:	482b      	ldr	r0, [pc, #172]	; (8012bf0 <tcp_slowtmr+0x66c>)
 8012b42:	f008 fb91 	bl	801b268 <iprintf>
    pcb_remove = 0;
 8012b46:	2300      	movs	r3, #0
 8012b48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012b4c:	4b29      	ldr	r3, [pc, #164]	; (8012bf4 <tcp_slowtmr+0x670>)
 8012b4e:	681a      	ldr	r2, [r3, #0]
 8012b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b52:	6a1b      	ldr	r3, [r3, #32]
 8012b54:	1ad3      	subs	r3, r2, r3
 8012b56:	2bf0      	cmp	r3, #240	; 0xf0
 8012b58:	d904      	bls.n	8012b64 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8012b5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012b5e:	3301      	adds	r3, #1
 8012b60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012b64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d02f      	beq.n	8012bcc <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8012b6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012b6e:	f000 fbdd 	bl	801332c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8012b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d010      	beq.n	8012b9a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8012b78:	4b1f      	ldr	r3, [pc, #124]	; (8012bf8 <tcp_slowtmr+0x674>)
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012b7e:	429a      	cmp	r2, r3
 8012b80:	d106      	bne.n	8012b90 <tcp_slowtmr+0x60c>
 8012b82:	4b19      	ldr	r3, [pc, #100]	; (8012be8 <tcp_slowtmr+0x664>)
 8012b84:	f240 52af 	movw	r2, #1455	; 0x5af
 8012b88:	491c      	ldr	r1, [pc, #112]	; (8012bfc <tcp_slowtmr+0x678>)
 8012b8a:	4819      	ldr	r0, [pc, #100]	; (8012bf0 <tcp_slowtmr+0x66c>)
 8012b8c:	f008 fb6c 	bl	801b268 <iprintf>
        prev->next = pcb->next;
 8012b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b92:	68da      	ldr	r2, [r3, #12]
 8012b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b96:	60da      	str	r2, [r3, #12]
 8012b98:	e00f      	b.n	8012bba <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8012b9a:	4b17      	ldr	r3, [pc, #92]	; (8012bf8 <tcp_slowtmr+0x674>)
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012ba0:	429a      	cmp	r2, r3
 8012ba2:	d006      	beq.n	8012bb2 <tcp_slowtmr+0x62e>
 8012ba4:	4b10      	ldr	r3, [pc, #64]	; (8012be8 <tcp_slowtmr+0x664>)
 8012ba6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8012baa:	4915      	ldr	r1, [pc, #84]	; (8012c00 <tcp_slowtmr+0x67c>)
 8012bac:	4810      	ldr	r0, [pc, #64]	; (8012bf0 <tcp_slowtmr+0x66c>)
 8012bae:	f008 fb5b 	bl	801b268 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8012bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bb4:	68db      	ldr	r3, [r3, #12]
 8012bb6:	4a10      	ldr	r2, [pc, #64]	; (8012bf8 <tcp_slowtmr+0x674>)
 8012bb8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8012bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bbc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8012bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bc0:	68db      	ldr	r3, [r3, #12]
 8012bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012bc4:	69f8      	ldr	r0, [r7, #28]
 8012bc6:	f7fe ffdf 	bl	8011b88 <tcp_free>
 8012bca:	e004      	b.n	8012bd6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8012bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bce:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bd2:	68db      	ldr	r3, [r3, #12]
 8012bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d1a9      	bne.n	8012b30 <tcp_slowtmr+0x5ac>
    }
  }
}
 8012bdc:	bf00      	nop
 8012bde:	bf00      	nop
 8012be0:	3730      	adds	r7, #48	; 0x30
 8012be2:	46bd      	mov	sp, r7
 8012be4:	bdb0      	pop	{r4, r5, r7, pc}
 8012be6:	bf00      	nop
 8012be8:	0801ed9c 	.word	0x0801ed9c
 8012bec:	0801f22c 	.word	0x0801f22c
 8012bf0:	0801ede0 	.word	0x0801ede0
 8012bf4:	2000704c 	.word	0x2000704c
 8012bf8:	2000705c 	.word	0x2000705c
 8012bfc:	0801f25c 	.word	0x0801f25c
 8012c00:	0801f284 	.word	0x0801f284

08012c04 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b082      	sub	sp, #8
 8012c08:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8012c0a:	4b2d      	ldr	r3, [pc, #180]	; (8012cc0 <tcp_fasttmr+0xbc>)
 8012c0c:	781b      	ldrb	r3, [r3, #0]
 8012c0e:	3301      	adds	r3, #1
 8012c10:	b2da      	uxtb	r2, r3
 8012c12:	4b2b      	ldr	r3, [pc, #172]	; (8012cc0 <tcp_fasttmr+0xbc>)
 8012c14:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8012c16:	4b2b      	ldr	r3, [pc, #172]	; (8012cc4 <tcp_fasttmr+0xc0>)
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012c1c:	e048      	b.n	8012cb0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	7f9a      	ldrb	r2, [r3, #30]
 8012c22:	4b27      	ldr	r3, [pc, #156]	; (8012cc0 <tcp_fasttmr+0xbc>)
 8012c24:	781b      	ldrb	r3, [r3, #0]
 8012c26:	429a      	cmp	r2, r3
 8012c28:	d03f      	beq.n	8012caa <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8012c2a:	4b25      	ldr	r3, [pc, #148]	; (8012cc0 <tcp_fasttmr+0xbc>)
 8012c2c:	781a      	ldrb	r2, [r3, #0]
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	8b5b      	ldrh	r3, [r3, #26]
 8012c36:	f003 0301 	and.w	r3, r3, #1
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d010      	beq.n	8012c60 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	8b5b      	ldrh	r3, [r3, #26]
 8012c42:	f043 0302 	orr.w	r3, r3, #2
 8012c46:	b29a      	uxth	r2, r3
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8012c4c:	6878      	ldr	r0, [r7, #4]
 8012c4e:	f003 ffd9 	bl	8016c04 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	8b5b      	ldrh	r3, [r3, #26]
 8012c56:	f023 0303 	bic.w	r3, r3, #3
 8012c5a:	b29a      	uxth	r2, r3
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	8b5b      	ldrh	r3, [r3, #26]
 8012c64:	f003 0308 	and.w	r3, r3, #8
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d009      	beq.n	8012c80 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	8b5b      	ldrh	r3, [r3, #26]
 8012c70:	f023 0308 	bic.w	r3, r3, #8
 8012c74:	b29a      	uxth	r2, r3
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8012c7a:	6878      	ldr	r0, [r7, #4]
 8012c7c:	f7ff f918 	bl	8011eb0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	68db      	ldr	r3, [r3, #12]
 8012c84:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d00a      	beq.n	8012ca4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8012c8e:	4b0e      	ldr	r3, [pc, #56]	; (8012cc8 <tcp_fasttmr+0xc4>)
 8012c90:	2200      	movs	r2, #0
 8012c92:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8012c94:	6878      	ldr	r0, [r7, #4]
 8012c96:	f000 f819 	bl	8012ccc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8012c9a:	4b0b      	ldr	r3, [pc, #44]	; (8012cc8 <tcp_fasttmr+0xc4>)
 8012c9c:	781b      	ldrb	r3, [r3, #0]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d000      	beq.n	8012ca4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8012ca2:	e7b8      	b.n	8012c16 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8012ca4:	683b      	ldr	r3, [r7, #0]
 8012ca6:	607b      	str	r3, [r7, #4]
 8012ca8:	e002      	b.n	8012cb0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	68db      	ldr	r3, [r3, #12]
 8012cae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d1b3      	bne.n	8012c1e <tcp_fasttmr+0x1a>
    }
  }
}
 8012cb6:	bf00      	nop
 8012cb8:	bf00      	nop
 8012cba:	3708      	adds	r7, #8
 8012cbc:	46bd      	mov	sp, r7
 8012cbe:	bd80      	pop	{r7, pc}
 8012cc0:	20007062 	.word	0x20007062
 8012cc4:	20007058 	.word	0x20007058
 8012cc8:	20007060 	.word	0x20007060

08012ccc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8012ccc:	b590      	push	{r4, r7, lr}
 8012cce:	b085      	sub	sp, #20
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d109      	bne.n	8012cee <tcp_process_refused_data+0x22>
 8012cda:	4b38      	ldr	r3, [pc, #224]	; (8012dbc <tcp_process_refused_data+0xf0>)
 8012cdc:	f240 6209 	movw	r2, #1545	; 0x609
 8012ce0:	4937      	ldr	r1, [pc, #220]	; (8012dc0 <tcp_process_refused_data+0xf4>)
 8012ce2:	4838      	ldr	r0, [pc, #224]	; (8012dc4 <tcp_process_refused_data+0xf8>)
 8012ce4:	f008 fac0 	bl	801b268 <iprintf>
 8012ce8:	f06f 030f 	mvn.w	r3, #15
 8012cec:	e061      	b.n	8012db2 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012cf2:	7b5b      	ldrb	r3, [r3, #13]
 8012cf4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012cfa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	2200      	movs	r2, #0
 8012d00:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d00b      	beq.n	8012d24 <tcp_process_refused_data+0x58>
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	6918      	ldr	r0, [r3, #16]
 8012d16:	2300      	movs	r3, #0
 8012d18:	68ba      	ldr	r2, [r7, #8]
 8012d1a:	6879      	ldr	r1, [r7, #4]
 8012d1c:	47a0      	blx	r4
 8012d1e:	4603      	mov	r3, r0
 8012d20:	73fb      	strb	r3, [r7, #15]
 8012d22:	e007      	b.n	8012d34 <tcp_process_refused_data+0x68>
 8012d24:	2300      	movs	r3, #0
 8012d26:	68ba      	ldr	r2, [r7, #8]
 8012d28:	6879      	ldr	r1, [r7, #4]
 8012d2a:	2000      	movs	r0, #0
 8012d2c:	f000 f8a6 	bl	8012e7c <tcp_recv_null>
 8012d30:	4603      	mov	r3, r0
 8012d32:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8012d34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d12b      	bne.n	8012d94 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8012d3c:	7bbb      	ldrb	r3, [r7, #14]
 8012d3e:	f003 0320 	and.w	r3, r3, #32
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d034      	beq.n	8012db0 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012d4a:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8012d4e:	4293      	cmp	r3, r2
 8012d50:	d005      	beq.n	8012d5e <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012d56:	3301      	adds	r3, #1
 8012d58:	b29a      	uxth	r2, r3
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d00b      	beq.n	8012d80 <tcp_process_refused_data+0xb4>
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	6918      	ldr	r0, [r3, #16]
 8012d72:	2300      	movs	r3, #0
 8012d74:	2200      	movs	r2, #0
 8012d76:	6879      	ldr	r1, [r7, #4]
 8012d78:	47a0      	blx	r4
 8012d7a:	4603      	mov	r3, r0
 8012d7c:	73fb      	strb	r3, [r7, #15]
 8012d7e:	e001      	b.n	8012d84 <tcp_process_refused_data+0xb8>
 8012d80:	2300      	movs	r3, #0
 8012d82:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8012d84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d88:	f113 0f0d 	cmn.w	r3, #13
 8012d8c:	d110      	bne.n	8012db0 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 8012d8e:	f06f 030c 	mvn.w	r3, #12
 8012d92:	e00e      	b.n	8012db2 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8012d94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d98:	f113 0f0d 	cmn.w	r3, #13
 8012d9c:	d102      	bne.n	8012da4 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8012d9e:	f06f 030c 	mvn.w	r3, #12
 8012da2:	e006      	b.n	8012db2 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	68ba      	ldr	r2, [r7, #8]
 8012da8:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8012daa:	f06f 0304 	mvn.w	r3, #4
 8012dae:	e000      	b.n	8012db2 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8012db0:	2300      	movs	r3, #0
}
 8012db2:	4618      	mov	r0, r3
 8012db4:	3714      	adds	r7, #20
 8012db6:	46bd      	mov	sp, r7
 8012db8:	bd90      	pop	{r4, r7, pc}
 8012dba:	bf00      	nop
 8012dbc:	0801ed9c 	.word	0x0801ed9c
 8012dc0:	0801f2ac 	.word	0x0801f2ac
 8012dc4:	0801ede0 	.word	0x0801ede0

08012dc8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8012dc8:	b580      	push	{r7, lr}
 8012dca:	b084      	sub	sp, #16
 8012dcc:	af00      	add	r7, sp, #0
 8012dce:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8012dd0:	e007      	b.n	8012de2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8012dd8:	6878      	ldr	r0, [r7, #4]
 8012dda:	f000 f80a 	bl	8012df2 <tcp_seg_free>
    seg = next;
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d1f4      	bne.n	8012dd2 <tcp_segs_free+0xa>
  }
}
 8012de8:	bf00      	nop
 8012dea:	bf00      	nop
 8012dec:	3710      	adds	r7, #16
 8012dee:	46bd      	mov	sp, r7
 8012df0:	bd80      	pop	{r7, pc}

08012df2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8012df2:	b580      	push	{r7, lr}
 8012df4:	b082      	sub	sp, #8
 8012df6:	af00      	add	r7, sp, #0
 8012df8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d00c      	beq.n	8012e1a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	685b      	ldr	r3, [r3, #4]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d004      	beq.n	8012e12 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	685b      	ldr	r3, [r3, #4]
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	f7fe fb89 	bl	8011524 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8012e12:	6879      	ldr	r1, [r7, #4]
 8012e14:	2003      	movs	r0, #3
 8012e16:	f7fd fd0f 	bl	8010838 <memp_free>
  }
}
 8012e1a:	bf00      	nop
 8012e1c:	3708      	adds	r7, #8
 8012e1e:	46bd      	mov	sp, r7
 8012e20:	bd80      	pop	{r7, pc}
	...

08012e24 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8012e24:	b580      	push	{r7, lr}
 8012e26:	b084      	sub	sp, #16
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d106      	bne.n	8012e40 <tcp_seg_copy+0x1c>
 8012e32:	4b0f      	ldr	r3, [pc, #60]	; (8012e70 <tcp_seg_copy+0x4c>)
 8012e34:	f240 6282 	movw	r2, #1666	; 0x682
 8012e38:	490e      	ldr	r1, [pc, #56]	; (8012e74 <tcp_seg_copy+0x50>)
 8012e3a:	480f      	ldr	r0, [pc, #60]	; (8012e78 <tcp_seg_copy+0x54>)
 8012e3c:	f008 fa14 	bl	801b268 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8012e40:	2003      	movs	r0, #3
 8012e42:	f7fd fc89 	bl	8010758 <memp_malloc>
 8012e46:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d101      	bne.n	8012e52 <tcp_seg_copy+0x2e>
    return NULL;
 8012e4e:	2300      	movs	r3, #0
 8012e50:	e00a      	b.n	8012e68 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8012e52:	2210      	movs	r2, #16
 8012e54:	6879      	ldr	r1, [r7, #4]
 8012e56:	68f8      	ldr	r0, [r7, #12]
 8012e58:	f008 fc0f 	bl	801b67a <memcpy>
  pbuf_ref(cseg->p);
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	685b      	ldr	r3, [r3, #4]
 8012e60:	4618      	mov	r0, r3
 8012e62:	f7fe fbff 	bl	8011664 <pbuf_ref>
  return cseg;
 8012e66:	68fb      	ldr	r3, [r7, #12]
}
 8012e68:	4618      	mov	r0, r3
 8012e6a:	3710      	adds	r7, #16
 8012e6c:	46bd      	mov	sp, r7
 8012e6e:	bd80      	pop	{r7, pc}
 8012e70:	0801ed9c 	.word	0x0801ed9c
 8012e74:	0801f2f0 	.word	0x0801f2f0
 8012e78:	0801ede0 	.word	0x0801ede0

08012e7c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b084      	sub	sp, #16
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	60f8      	str	r0, [r7, #12]
 8012e84:	60b9      	str	r1, [r7, #8]
 8012e86:	607a      	str	r2, [r7, #4]
 8012e88:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8012e8a:	68bb      	ldr	r3, [r7, #8]
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d109      	bne.n	8012ea4 <tcp_recv_null+0x28>
 8012e90:	4b12      	ldr	r3, [pc, #72]	; (8012edc <tcp_recv_null+0x60>)
 8012e92:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012e96:	4912      	ldr	r1, [pc, #72]	; (8012ee0 <tcp_recv_null+0x64>)
 8012e98:	4812      	ldr	r0, [pc, #72]	; (8012ee4 <tcp_recv_null+0x68>)
 8012e9a:	f008 f9e5 	bl	801b268 <iprintf>
 8012e9e:	f06f 030f 	mvn.w	r3, #15
 8012ea2:	e016      	b.n	8012ed2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d009      	beq.n	8012ebe <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	891b      	ldrh	r3, [r3, #8]
 8012eae:	4619      	mov	r1, r3
 8012eb0:	68b8      	ldr	r0, [r7, #8]
 8012eb2:	f7ff f9b7 	bl	8012224 <tcp_recved>
    pbuf_free(p);
 8012eb6:	6878      	ldr	r0, [r7, #4]
 8012eb8:	f7fe fb34 	bl	8011524 <pbuf_free>
 8012ebc:	e008      	b.n	8012ed0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8012ebe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d104      	bne.n	8012ed0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8012ec6:	68b8      	ldr	r0, [r7, #8]
 8012ec8:	f7ff f85c 	bl	8011f84 <tcp_close>
 8012ecc:	4603      	mov	r3, r0
 8012ece:	e000      	b.n	8012ed2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8012ed0:	2300      	movs	r3, #0
}
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	3710      	adds	r7, #16
 8012ed6:	46bd      	mov	sp, r7
 8012ed8:	bd80      	pop	{r7, pc}
 8012eda:	bf00      	nop
 8012edc:	0801ed9c 	.word	0x0801ed9c
 8012ee0:	0801f30c 	.word	0x0801f30c
 8012ee4:	0801ede0 	.word	0x0801ede0

08012ee8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	b086      	sub	sp, #24
 8012eec:	af00      	add	r7, sp, #0
 8012eee:	4603      	mov	r3, r0
 8012ef0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8012ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	db01      	blt.n	8012efe <tcp_kill_prio+0x16>
 8012efa:	79fb      	ldrb	r3, [r7, #7]
 8012efc:	e000      	b.n	8012f00 <tcp_kill_prio+0x18>
 8012efe:	237f      	movs	r3, #127	; 0x7f
 8012f00:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8012f02:	7afb      	ldrb	r3, [r7, #11]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d034      	beq.n	8012f72 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8012f08:	7afb      	ldrb	r3, [r7, #11]
 8012f0a:	3b01      	subs	r3, #1
 8012f0c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8012f0e:	2300      	movs	r3, #0
 8012f10:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012f12:	2300      	movs	r3, #0
 8012f14:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f16:	4b19      	ldr	r3, [pc, #100]	; (8012f7c <tcp_kill_prio+0x94>)
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	617b      	str	r3, [r7, #20]
 8012f1c:	e01f      	b.n	8012f5e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8012f1e:	697b      	ldr	r3, [r7, #20]
 8012f20:	7d5b      	ldrb	r3, [r3, #21]
 8012f22:	7afa      	ldrb	r2, [r7, #11]
 8012f24:	429a      	cmp	r2, r3
 8012f26:	d80c      	bhi.n	8012f42 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012f28:	697b      	ldr	r3, [r7, #20]
 8012f2a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8012f2c:	7afa      	ldrb	r2, [r7, #11]
 8012f2e:	429a      	cmp	r2, r3
 8012f30:	d112      	bne.n	8012f58 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012f32:	4b13      	ldr	r3, [pc, #76]	; (8012f80 <tcp_kill_prio+0x98>)
 8012f34:	681a      	ldr	r2, [r3, #0]
 8012f36:	697b      	ldr	r3, [r7, #20]
 8012f38:	6a1b      	ldr	r3, [r3, #32]
 8012f3a:	1ad3      	subs	r3, r2, r3
 8012f3c:	68fa      	ldr	r2, [r7, #12]
 8012f3e:	429a      	cmp	r2, r3
 8012f40:	d80a      	bhi.n	8012f58 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8012f42:	4b0f      	ldr	r3, [pc, #60]	; (8012f80 <tcp_kill_prio+0x98>)
 8012f44:	681a      	ldr	r2, [r3, #0]
 8012f46:	697b      	ldr	r3, [r7, #20]
 8012f48:	6a1b      	ldr	r3, [r3, #32]
 8012f4a:	1ad3      	subs	r3, r2, r3
 8012f4c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8012f4e:	697b      	ldr	r3, [r7, #20]
 8012f50:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8012f52:	697b      	ldr	r3, [r7, #20]
 8012f54:	7d5b      	ldrb	r3, [r3, #21]
 8012f56:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f58:	697b      	ldr	r3, [r7, #20]
 8012f5a:	68db      	ldr	r3, [r3, #12]
 8012f5c:	617b      	str	r3, [r7, #20]
 8012f5e:	697b      	ldr	r3, [r7, #20]
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d1dc      	bne.n	8012f1e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8012f64:	693b      	ldr	r3, [r7, #16]
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d004      	beq.n	8012f74 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012f6a:	6938      	ldr	r0, [r7, #16]
 8012f6c:	f7ff f8f4 	bl	8012158 <tcp_abort>
 8012f70:	e000      	b.n	8012f74 <tcp_kill_prio+0x8c>
    return;
 8012f72:	bf00      	nop
  }
}
 8012f74:	3718      	adds	r7, #24
 8012f76:	46bd      	mov	sp, r7
 8012f78:	bd80      	pop	{r7, pc}
 8012f7a:	bf00      	nop
 8012f7c:	20007058 	.word	0x20007058
 8012f80:	2000704c 	.word	0x2000704c

08012f84 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8012f84:	b580      	push	{r7, lr}
 8012f86:	b086      	sub	sp, #24
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	4603      	mov	r3, r0
 8012f8c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8012f8e:	79fb      	ldrb	r3, [r7, #7]
 8012f90:	2b08      	cmp	r3, #8
 8012f92:	d009      	beq.n	8012fa8 <tcp_kill_state+0x24>
 8012f94:	79fb      	ldrb	r3, [r7, #7]
 8012f96:	2b09      	cmp	r3, #9
 8012f98:	d006      	beq.n	8012fa8 <tcp_kill_state+0x24>
 8012f9a:	4b1a      	ldr	r3, [pc, #104]	; (8013004 <tcp_kill_state+0x80>)
 8012f9c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8012fa0:	4919      	ldr	r1, [pc, #100]	; (8013008 <tcp_kill_state+0x84>)
 8012fa2:	481a      	ldr	r0, [pc, #104]	; (801300c <tcp_kill_state+0x88>)
 8012fa4:	f008 f960 	bl	801b268 <iprintf>

  inactivity = 0;
 8012fa8:	2300      	movs	r3, #0
 8012faa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012fac:	2300      	movs	r3, #0
 8012fae:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012fb0:	4b17      	ldr	r3, [pc, #92]	; (8013010 <tcp_kill_state+0x8c>)
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	617b      	str	r3, [r7, #20]
 8012fb6:	e017      	b.n	8012fe8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8012fb8:	697b      	ldr	r3, [r7, #20]
 8012fba:	7d1b      	ldrb	r3, [r3, #20]
 8012fbc:	79fa      	ldrb	r2, [r7, #7]
 8012fbe:	429a      	cmp	r2, r3
 8012fc0:	d10f      	bne.n	8012fe2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012fc2:	4b14      	ldr	r3, [pc, #80]	; (8013014 <tcp_kill_state+0x90>)
 8012fc4:	681a      	ldr	r2, [r3, #0]
 8012fc6:	697b      	ldr	r3, [r7, #20]
 8012fc8:	6a1b      	ldr	r3, [r3, #32]
 8012fca:	1ad3      	subs	r3, r2, r3
 8012fcc:	68fa      	ldr	r2, [r7, #12]
 8012fce:	429a      	cmp	r2, r3
 8012fd0:	d807      	bhi.n	8012fe2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8012fd2:	4b10      	ldr	r3, [pc, #64]	; (8013014 <tcp_kill_state+0x90>)
 8012fd4:	681a      	ldr	r2, [r3, #0]
 8012fd6:	697b      	ldr	r3, [r7, #20]
 8012fd8:	6a1b      	ldr	r3, [r3, #32]
 8012fda:	1ad3      	subs	r3, r2, r3
 8012fdc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8012fde:	697b      	ldr	r3, [r7, #20]
 8012fe0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012fe2:	697b      	ldr	r3, [r7, #20]
 8012fe4:	68db      	ldr	r3, [r3, #12]
 8012fe6:	617b      	str	r3, [r7, #20]
 8012fe8:	697b      	ldr	r3, [r7, #20]
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d1e4      	bne.n	8012fb8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8012fee:	693b      	ldr	r3, [r7, #16]
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d003      	beq.n	8012ffc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8012ff4:	2100      	movs	r1, #0
 8012ff6:	6938      	ldr	r0, [r7, #16]
 8012ff8:	f7fe fff0 	bl	8011fdc <tcp_abandon>
  }
}
 8012ffc:	bf00      	nop
 8012ffe:	3718      	adds	r7, #24
 8013000:	46bd      	mov	sp, r7
 8013002:	bd80      	pop	{r7, pc}
 8013004:	0801ed9c 	.word	0x0801ed9c
 8013008:	0801f328 	.word	0x0801f328
 801300c:	0801ede0 	.word	0x0801ede0
 8013010:	20007058 	.word	0x20007058
 8013014:	2000704c 	.word	0x2000704c

08013018 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8013018:	b580      	push	{r7, lr}
 801301a:	b084      	sub	sp, #16
 801301c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801301e:	2300      	movs	r3, #0
 8013020:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8013022:	2300      	movs	r3, #0
 8013024:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013026:	4b12      	ldr	r3, [pc, #72]	; (8013070 <tcp_kill_timewait+0x58>)
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	60fb      	str	r3, [r7, #12]
 801302c:	e012      	b.n	8013054 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801302e:	4b11      	ldr	r3, [pc, #68]	; (8013074 <tcp_kill_timewait+0x5c>)
 8013030:	681a      	ldr	r2, [r3, #0]
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	6a1b      	ldr	r3, [r3, #32]
 8013036:	1ad3      	subs	r3, r2, r3
 8013038:	687a      	ldr	r2, [r7, #4]
 801303a:	429a      	cmp	r2, r3
 801303c:	d807      	bhi.n	801304e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801303e:	4b0d      	ldr	r3, [pc, #52]	; (8013074 <tcp_kill_timewait+0x5c>)
 8013040:	681a      	ldr	r2, [r3, #0]
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	6a1b      	ldr	r3, [r3, #32]
 8013046:	1ad3      	subs	r3, r2, r3
 8013048:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	68db      	ldr	r3, [r3, #12]
 8013052:	60fb      	str	r3, [r7, #12]
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d1e9      	bne.n	801302e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801305a:	68bb      	ldr	r3, [r7, #8]
 801305c:	2b00      	cmp	r3, #0
 801305e:	d002      	beq.n	8013066 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013060:	68b8      	ldr	r0, [r7, #8]
 8013062:	f7ff f879 	bl	8012158 <tcp_abort>
  }
}
 8013066:	bf00      	nop
 8013068:	3710      	adds	r7, #16
 801306a:	46bd      	mov	sp, r7
 801306c:	bd80      	pop	{r7, pc}
 801306e:	bf00      	nop
 8013070:	2000705c 	.word	0x2000705c
 8013074:	2000704c 	.word	0x2000704c

08013078 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8013078:	b580      	push	{r7, lr}
 801307a:	b082      	sub	sp, #8
 801307c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801307e:	4b10      	ldr	r3, [pc, #64]	; (80130c0 <tcp_handle_closepend+0x48>)
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8013084:	e014      	b.n	80130b0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	68db      	ldr	r3, [r3, #12]
 801308a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	8b5b      	ldrh	r3, [r3, #26]
 8013090:	f003 0308 	and.w	r3, r3, #8
 8013094:	2b00      	cmp	r3, #0
 8013096:	d009      	beq.n	80130ac <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	8b5b      	ldrh	r3, [r3, #26]
 801309c:	f023 0308 	bic.w	r3, r3, #8
 80130a0:	b29a      	uxth	r2, r3
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80130a6:	6878      	ldr	r0, [r7, #4]
 80130a8:	f7fe ff02 	bl	8011eb0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80130ac:	683b      	ldr	r3, [r7, #0]
 80130ae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d1e7      	bne.n	8013086 <tcp_handle_closepend+0xe>
  }
}
 80130b6:	bf00      	nop
 80130b8:	bf00      	nop
 80130ba:	3708      	adds	r7, #8
 80130bc:	46bd      	mov	sp, r7
 80130be:	bd80      	pop	{r7, pc}
 80130c0:	20007058 	.word	0x20007058

080130c4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80130c4:	b580      	push	{r7, lr}
 80130c6:	b084      	sub	sp, #16
 80130c8:	af00      	add	r7, sp, #0
 80130ca:	4603      	mov	r3, r0
 80130cc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80130ce:	2001      	movs	r0, #1
 80130d0:	f7fd fb42 	bl	8010758 <memp_malloc>
 80130d4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d126      	bne.n	801312a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80130dc:	f7ff ffcc 	bl	8013078 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80130e0:	f7ff ff9a 	bl	8013018 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80130e4:	2001      	movs	r0, #1
 80130e6:	f7fd fb37 	bl	8010758 <memp_malloc>
 80130ea:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d11b      	bne.n	801312a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80130f2:	2009      	movs	r0, #9
 80130f4:	f7ff ff46 	bl	8012f84 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80130f8:	2001      	movs	r0, #1
 80130fa:	f7fd fb2d 	bl	8010758 <memp_malloc>
 80130fe:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d111      	bne.n	801312a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8013106:	2008      	movs	r0, #8
 8013108:	f7ff ff3c 	bl	8012f84 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801310c:	2001      	movs	r0, #1
 801310e:	f7fd fb23 	bl	8010758 <memp_malloc>
 8013112:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	2b00      	cmp	r3, #0
 8013118:	d107      	bne.n	801312a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801311a:	79fb      	ldrb	r3, [r7, #7]
 801311c:	4618      	mov	r0, r3
 801311e:	f7ff fee3 	bl	8012ee8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013122:	2001      	movs	r0, #1
 8013124:	f7fd fb18 	bl	8010758 <memp_malloc>
 8013128:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d03f      	beq.n	80131b0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8013130:	229c      	movs	r2, #156	; 0x9c
 8013132:	2100      	movs	r1, #0
 8013134:	68f8      	ldr	r0, [r7, #12]
 8013136:	f008 fa27 	bl	801b588 <memset>
    pcb->prio = prio;
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	79fa      	ldrb	r2, [r7, #7]
 801313e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8013146:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8013150:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	22ff      	movs	r2, #255	; 0xff
 801315e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013166:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	2206      	movs	r2, #6
 801316c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	2206      	movs	r2, #6
 8013174:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801317c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	2201      	movs	r2, #1
 8013182:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8013186:	4b0d      	ldr	r3, [pc, #52]	; (80131bc <tcp_alloc+0xf8>)
 8013188:	681a      	ldr	r2, [r3, #0]
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801318e:	4b0c      	ldr	r3, [pc, #48]	; (80131c0 <tcp_alloc+0xfc>)
 8013190:	781a      	ldrb	r2, [r3, #0]
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801319c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	4a08      	ldr	r2, [pc, #32]	; (80131c4 <tcp_alloc+0x100>)
 80131a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	4a07      	ldr	r2, [pc, #28]	; (80131c8 <tcp_alloc+0x104>)
 80131ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80131b0:	68fb      	ldr	r3, [r7, #12]
}
 80131b2:	4618      	mov	r0, r3
 80131b4:	3710      	adds	r7, #16
 80131b6:	46bd      	mov	sp, r7
 80131b8:	bd80      	pop	{r7, pc}
 80131ba:	bf00      	nop
 80131bc:	2000704c 	.word	0x2000704c
 80131c0:	20007062 	.word	0x20007062
 80131c4:	08012e7d 	.word	0x08012e7d
 80131c8:	006ddd00 	.word	0x006ddd00

080131cc <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 80131d0:	2040      	movs	r0, #64	; 0x40
 80131d2:	f7ff ff77 	bl	80130c4 <tcp_alloc>
 80131d6:	4603      	mov	r3, r0
}
 80131d8:	4618      	mov	r0, r3
 80131da:	bd80      	pop	{r7, pc}

080131dc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80131dc:	b480      	push	{r7}
 80131de:	b083      	sub	sp, #12
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	6078      	str	r0, [r7, #4]
 80131e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d002      	beq.n	80131f2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	683a      	ldr	r2, [r7, #0]
 80131f0:	611a      	str	r2, [r3, #16]
  }
}
 80131f2:	bf00      	nop
 80131f4:	370c      	adds	r7, #12
 80131f6:	46bd      	mov	sp, r7
 80131f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131fc:	4770      	bx	lr
	...

08013200 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8013200:	b580      	push	{r7, lr}
 8013202:	b082      	sub	sp, #8
 8013204:	af00      	add	r7, sp, #0
 8013206:	6078      	str	r0, [r7, #4]
 8013208:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d00e      	beq.n	801322e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	7d1b      	ldrb	r3, [r3, #20]
 8013214:	2b01      	cmp	r3, #1
 8013216:	d106      	bne.n	8013226 <tcp_recv+0x26>
 8013218:	4b07      	ldr	r3, [pc, #28]	; (8013238 <tcp_recv+0x38>)
 801321a:	f240 72df 	movw	r2, #2015	; 0x7df
 801321e:	4907      	ldr	r1, [pc, #28]	; (801323c <tcp_recv+0x3c>)
 8013220:	4807      	ldr	r0, [pc, #28]	; (8013240 <tcp_recv+0x40>)
 8013222:	f008 f821 	bl	801b268 <iprintf>
    pcb->recv = recv;
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	683a      	ldr	r2, [r7, #0]
 801322a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801322e:	bf00      	nop
 8013230:	3708      	adds	r7, #8
 8013232:	46bd      	mov	sp, r7
 8013234:	bd80      	pop	{r7, pc}
 8013236:	bf00      	nop
 8013238:	0801ed9c 	.word	0x0801ed9c
 801323c:	0801f338 	.word	0x0801f338
 8013240:	0801ede0 	.word	0x0801ede0

08013244 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8013244:	b580      	push	{r7, lr}
 8013246:	b082      	sub	sp, #8
 8013248:	af00      	add	r7, sp, #0
 801324a:	6078      	str	r0, [r7, #4]
 801324c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	2b00      	cmp	r3, #0
 8013252:	d00e      	beq.n	8013272 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	7d1b      	ldrb	r3, [r3, #20]
 8013258:	2b01      	cmp	r3, #1
 801325a:	d106      	bne.n	801326a <tcp_sent+0x26>
 801325c:	4b07      	ldr	r3, [pc, #28]	; (801327c <tcp_sent+0x38>)
 801325e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8013262:	4907      	ldr	r1, [pc, #28]	; (8013280 <tcp_sent+0x3c>)
 8013264:	4807      	ldr	r0, [pc, #28]	; (8013284 <tcp_sent+0x40>)
 8013266:	f007 ffff 	bl	801b268 <iprintf>
    pcb->sent = sent;
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	683a      	ldr	r2, [r7, #0]
 801326e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8013272:	bf00      	nop
 8013274:	3708      	adds	r7, #8
 8013276:	46bd      	mov	sp, r7
 8013278:	bd80      	pop	{r7, pc}
 801327a:	bf00      	nop
 801327c:	0801ed9c 	.word	0x0801ed9c
 8013280:	0801f360 	.word	0x0801f360
 8013284:	0801ede0 	.word	0x0801ede0

08013288 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8013288:	b580      	push	{r7, lr}
 801328a:	b082      	sub	sp, #8
 801328c:	af00      	add	r7, sp, #0
 801328e:	6078      	str	r0, [r7, #4]
 8013290:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d00e      	beq.n	80132b6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	7d1b      	ldrb	r3, [r3, #20]
 801329c:	2b01      	cmp	r3, #1
 801329e:	d106      	bne.n	80132ae <tcp_err+0x26>
 80132a0:	4b07      	ldr	r3, [pc, #28]	; (80132c0 <tcp_err+0x38>)
 80132a2:	f640 020d 	movw	r2, #2061	; 0x80d
 80132a6:	4907      	ldr	r1, [pc, #28]	; (80132c4 <tcp_err+0x3c>)
 80132a8:	4807      	ldr	r0, [pc, #28]	; (80132c8 <tcp_err+0x40>)
 80132aa:	f007 ffdd 	bl	801b268 <iprintf>
    pcb->errf = err;
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	683a      	ldr	r2, [r7, #0]
 80132b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80132b6:	bf00      	nop
 80132b8:	3708      	adds	r7, #8
 80132ba:	46bd      	mov	sp, r7
 80132bc:	bd80      	pop	{r7, pc}
 80132be:	bf00      	nop
 80132c0:	0801ed9c 	.word	0x0801ed9c
 80132c4:	0801f388 	.word	0x0801f388
 80132c8:	0801ede0 	.word	0x0801ede0

080132cc <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80132cc:	b580      	push	{r7, lr}
 80132ce:	b084      	sub	sp, #16
 80132d0:	af00      	add	r7, sp, #0
 80132d2:	60f8      	str	r0, [r7, #12]
 80132d4:	60b9      	str	r1, [r7, #8]
 80132d6:	4613      	mov	r3, r2
 80132d8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d107      	bne.n	80132f0 <tcp_poll+0x24>
 80132e0:	4b0e      	ldr	r3, [pc, #56]	; (801331c <tcp_poll+0x50>)
 80132e2:	f640 023d 	movw	r2, #2109	; 0x83d
 80132e6:	490e      	ldr	r1, [pc, #56]	; (8013320 <tcp_poll+0x54>)
 80132e8:	480e      	ldr	r0, [pc, #56]	; (8013324 <tcp_poll+0x58>)
 80132ea:	f007 ffbd 	bl	801b268 <iprintf>
 80132ee:	e011      	b.n	8013314 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	7d1b      	ldrb	r3, [r3, #20]
 80132f4:	2b01      	cmp	r3, #1
 80132f6:	d106      	bne.n	8013306 <tcp_poll+0x3a>
 80132f8:	4b08      	ldr	r3, [pc, #32]	; (801331c <tcp_poll+0x50>)
 80132fa:	f640 023e 	movw	r2, #2110	; 0x83e
 80132fe:	490a      	ldr	r1, [pc, #40]	; (8013328 <tcp_poll+0x5c>)
 8013300:	4808      	ldr	r0, [pc, #32]	; (8013324 <tcp_poll+0x58>)
 8013302:	f007 ffb1 	bl	801b268 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	68ba      	ldr	r2, [r7, #8]
 801330a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	79fa      	ldrb	r2, [r7, #7]
 8013312:	775a      	strb	r2, [r3, #29]
}
 8013314:	3710      	adds	r7, #16
 8013316:	46bd      	mov	sp, r7
 8013318:	bd80      	pop	{r7, pc}
 801331a:	bf00      	nop
 801331c:	0801ed9c 	.word	0x0801ed9c
 8013320:	0801f3b0 	.word	0x0801f3b0
 8013324:	0801ede0 	.word	0x0801ede0
 8013328:	0801f3c8 	.word	0x0801f3c8

0801332c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801332c:	b580      	push	{r7, lr}
 801332e:	b082      	sub	sp, #8
 8013330:	af00      	add	r7, sp, #0
 8013332:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d107      	bne.n	801334a <tcp_pcb_purge+0x1e>
 801333a:	4b21      	ldr	r3, [pc, #132]	; (80133c0 <tcp_pcb_purge+0x94>)
 801333c:	f640 0251 	movw	r2, #2129	; 0x851
 8013340:	4920      	ldr	r1, [pc, #128]	; (80133c4 <tcp_pcb_purge+0x98>)
 8013342:	4821      	ldr	r0, [pc, #132]	; (80133c8 <tcp_pcb_purge+0x9c>)
 8013344:	f007 ff90 	bl	801b268 <iprintf>
 8013348:	e037      	b.n	80133ba <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	7d1b      	ldrb	r3, [r3, #20]
 801334e:	2b00      	cmp	r3, #0
 8013350:	d033      	beq.n	80133ba <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8013356:	2b0a      	cmp	r3, #10
 8013358:	d02f      	beq.n	80133ba <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801335e:	2b01      	cmp	r3, #1
 8013360:	d02b      	beq.n	80133ba <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013366:	2b00      	cmp	r3, #0
 8013368:	d007      	beq.n	801337a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801336e:	4618      	mov	r0, r3
 8013370:	f7fe f8d8 	bl	8011524 <pbuf_free>
      pcb->refused_data = NULL;
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	2200      	movs	r2, #0
 8013378:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801337e:	2b00      	cmp	r3, #0
 8013380:	d002      	beq.n	8013388 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8013382:	6878      	ldr	r0, [r7, #4]
 8013384:	f000 f986 	bl	8013694 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801338e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013394:	4618      	mov	r0, r3
 8013396:	f7ff fd17 	bl	8012dc8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801339e:	4618      	mov	r0, r3
 80133a0:	f7ff fd12 	bl	8012dc8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	2200      	movs	r2, #0
 80133a8:	66da      	str	r2, [r3, #108]	; 0x6c
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	2200      	movs	r2, #0
 80133b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80133ba:	3708      	adds	r7, #8
 80133bc:	46bd      	mov	sp, r7
 80133be:	bd80      	pop	{r7, pc}
 80133c0:	0801ed9c 	.word	0x0801ed9c
 80133c4:	0801f3e8 	.word	0x0801f3e8
 80133c8:	0801ede0 	.word	0x0801ede0

080133cc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80133cc:	b580      	push	{r7, lr}
 80133ce:	b084      	sub	sp, #16
 80133d0:	af00      	add	r7, sp, #0
 80133d2:	6078      	str	r0, [r7, #4]
 80133d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80133d6:	683b      	ldr	r3, [r7, #0]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d106      	bne.n	80133ea <tcp_pcb_remove+0x1e>
 80133dc:	4b3e      	ldr	r3, [pc, #248]	; (80134d8 <tcp_pcb_remove+0x10c>)
 80133de:	f640 0283 	movw	r2, #2179	; 0x883
 80133e2:	493e      	ldr	r1, [pc, #248]	; (80134dc <tcp_pcb_remove+0x110>)
 80133e4:	483e      	ldr	r0, [pc, #248]	; (80134e0 <tcp_pcb_remove+0x114>)
 80133e6:	f007 ff3f 	bl	801b268 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d106      	bne.n	80133fe <tcp_pcb_remove+0x32>
 80133f0:	4b39      	ldr	r3, [pc, #228]	; (80134d8 <tcp_pcb_remove+0x10c>)
 80133f2:	f640 0284 	movw	r2, #2180	; 0x884
 80133f6:	493b      	ldr	r1, [pc, #236]	; (80134e4 <tcp_pcb_remove+0x118>)
 80133f8:	4839      	ldr	r0, [pc, #228]	; (80134e0 <tcp_pcb_remove+0x114>)
 80133fa:	f007 ff35 	bl	801b268 <iprintf>

  TCP_RMV(pcblist, pcb);
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	683a      	ldr	r2, [r7, #0]
 8013404:	429a      	cmp	r2, r3
 8013406:	d105      	bne.n	8013414 <tcp_pcb_remove+0x48>
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	68da      	ldr	r2, [r3, #12]
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	601a      	str	r2, [r3, #0]
 8013412:	e013      	b.n	801343c <tcp_pcb_remove+0x70>
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	60fb      	str	r3, [r7, #12]
 801341a:	e00c      	b.n	8013436 <tcp_pcb_remove+0x6a>
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	68db      	ldr	r3, [r3, #12]
 8013420:	683a      	ldr	r2, [r7, #0]
 8013422:	429a      	cmp	r2, r3
 8013424:	d104      	bne.n	8013430 <tcp_pcb_remove+0x64>
 8013426:	683b      	ldr	r3, [r7, #0]
 8013428:	68da      	ldr	r2, [r3, #12]
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	60da      	str	r2, [r3, #12]
 801342e:	e005      	b.n	801343c <tcp_pcb_remove+0x70>
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	68db      	ldr	r3, [r3, #12]
 8013434:	60fb      	str	r3, [r7, #12]
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	2b00      	cmp	r3, #0
 801343a:	d1ef      	bne.n	801341c <tcp_pcb_remove+0x50>
 801343c:	683b      	ldr	r3, [r7, #0]
 801343e:	2200      	movs	r2, #0
 8013440:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8013442:	6838      	ldr	r0, [r7, #0]
 8013444:	f7ff ff72 	bl	801332c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8013448:	683b      	ldr	r3, [r7, #0]
 801344a:	7d1b      	ldrb	r3, [r3, #20]
 801344c:	2b0a      	cmp	r3, #10
 801344e:	d013      	beq.n	8013478 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8013450:	683b      	ldr	r3, [r7, #0]
 8013452:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8013454:	2b01      	cmp	r3, #1
 8013456:	d00f      	beq.n	8013478 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8013458:	683b      	ldr	r3, [r7, #0]
 801345a:	8b5b      	ldrh	r3, [r3, #26]
 801345c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8013460:	2b00      	cmp	r3, #0
 8013462:	d009      	beq.n	8013478 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8013464:	683b      	ldr	r3, [r7, #0]
 8013466:	8b5b      	ldrh	r3, [r3, #26]
 8013468:	f043 0302 	orr.w	r3, r3, #2
 801346c:	b29a      	uxth	r2, r3
 801346e:	683b      	ldr	r3, [r7, #0]
 8013470:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013472:	6838      	ldr	r0, [r7, #0]
 8013474:	f003 fbc6 	bl	8016c04 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8013478:	683b      	ldr	r3, [r7, #0]
 801347a:	7d1b      	ldrb	r3, [r3, #20]
 801347c:	2b01      	cmp	r3, #1
 801347e:	d020      	beq.n	80134c2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8013480:	683b      	ldr	r3, [r7, #0]
 8013482:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013484:	2b00      	cmp	r3, #0
 8013486:	d006      	beq.n	8013496 <tcp_pcb_remove+0xca>
 8013488:	4b13      	ldr	r3, [pc, #76]	; (80134d8 <tcp_pcb_remove+0x10c>)
 801348a:	f640 0293 	movw	r2, #2195	; 0x893
 801348e:	4916      	ldr	r1, [pc, #88]	; (80134e8 <tcp_pcb_remove+0x11c>)
 8013490:	4813      	ldr	r0, [pc, #76]	; (80134e0 <tcp_pcb_remove+0x114>)
 8013492:	f007 fee9 	bl	801b268 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8013496:	683b      	ldr	r3, [r7, #0]
 8013498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801349a:	2b00      	cmp	r3, #0
 801349c:	d006      	beq.n	80134ac <tcp_pcb_remove+0xe0>
 801349e:	4b0e      	ldr	r3, [pc, #56]	; (80134d8 <tcp_pcb_remove+0x10c>)
 80134a0:	f640 0294 	movw	r2, #2196	; 0x894
 80134a4:	4911      	ldr	r1, [pc, #68]	; (80134ec <tcp_pcb_remove+0x120>)
 80134a6:	480e      	ldr	r0, [pc, #56]	; (80134e0 <tcp_pcb_remove+0x114>)
 80134a8:	f007 fede 	bl	801b268 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80134ac:	683b      	ldr	r3, [r7, #0]
 80134ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d006      	beq.n	80134c2 <tcp_pcb_remove+0xf6>
 80134b4:	4b08      	ldr	r3, [pc, #32]	; (80134d8 <tcp_pcb_remove+0x10c>)
 80134b6:	f640 0296 	movw	r2, #2198	; 0x896
 80134ba:	490d      	ldr	r1, [pc, #52]	; (80134f0 <tcp_pcb_remove+0x124>)
 80134bc:	4808      	ldr	r0, [pc, #32]	; (80134e0 <tcp_pcb_remove+0x114>)
 80134be:	f007 fed3 	bl	801b268 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80134c2:	683b      	ldr	r3, [r7, #0]
 80134c4:	2200      	movs	r2, #0
 80134c6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80134c8:	683b      	ldr	r3, [r7, #0]
 80134ca:	2200      	movs	r2, #0
 80134cc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80134ce:	bf00      	nop
 80134d0:	3710      	adds	r7, #16
 80134d2:	46bd      	mov	sp, r7
 80134d4:	bd80      	pop	{r7, pc}
 80134d6:	bf00      	nop
 80134d8:	0801ed9c 	.word	0x0801ed9c
 80134dc:	0801f404 	.word	0x0801f404
 80134e0:	0801ede0 	.word	0x0801ede0
 80134e4:	0801f420 	.word	0x0801f420
 80134e8:	0801f440 	.word	0x0801f440
 80134ec:	0801f458 	.word	0x0801f458
 80134f0:	0801f474 	.word	0x0801f474

080134f4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80134f4:	b580      	push	{r7, lr}
 80134f6:	b082      	sub	sp, #8
 80134f8:	af00      	add	r7, sp, #0
 80134fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d106      	bne.n	8013510 <tcp_next_iss+0x1c>
 8013502:	4b0a      	ldr	r3, [pc, #40]	; (801352c <tcp_next_iss+0x38>)
 8013504:	f640 02af 	movw	r2, #2223	; 0x8af
 8013508:	4909      	ldr	r1, [pc, #36]	; (8013530 <tcp_next_iss+0x3c>)
 801350a:	480a      	ldr	r0, [pc, #40]	; (8013534 <tcp_next_iss+0x40>)
 801350c:	f007 feac 	bl	801b268 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8013510:	4b09      	ldr	r3, [pc, #36]	; (8013538 <tcp_next_iss+0x44>)
 8013512:	681a      	ldr	r2, [r3, #0]
 8013514:	4b09      	ldr	r3, [pc, #36]	; (801353c <tcp_next_iss+0x48>)
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	4413      	add	r3, r2
 801351a:	4a07      	ldr	r2, [pc, #28]	; (8013538 <tcp_next_iss+0x44>)
 801351c:	6013      	str	r3, [r2, #0]
  return iss;
 801351e:	4b06      	ldr	r3, [pc, #24]	; (8013538 <tcp_next_iss+0x44>)
 8013520:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8013522:	4618      	mov	r0, r3
 8013524:	3708      	adds	r7, #8
 8013526:	46bd      	mov	sp, r7
 8013528:	bd80      	pop	{r7, pc}
 801352a:	bf00      	nop
 801352c:	0801ed9c 	.word	0x0801ed9c
 8013530:	0801f48c 	.word	0x0801f48c
 8013534:	0801ede0 	.word	0x0801ede0
 8013538:	20000058 	.word	0x20000058
 801353c:	2000704c 	.word	0x2000704c

08013540 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8013540:	b580      	push	{r7, lr}
 8013542:	b086      	sub	sp, #24
 8013544:	af00      	add	r7, sp, #0
 8013546:	4603      	mov	r3, r0
 8013548:	60b9      	str	r1, [r7, #8]
 801354a:	607a      	str	r2, [r7, #4]
 801354c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d106      	bne.n	8013562 <tcp_eff_send_mss_netif+0x22>
 8013554:	4b14      	ldr	r3, [pc, #80]	; (80135a8 <tcp_eff_send_mss_netif+0x68>)
 8013556:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801355a:	4914      	ldr	r1, [pc, #80]	; (80135ac <tcp_eff_send_mss_netif+0x6c>)
 801355c:	4814      	ldr	r0, [pc, #80]	; (80135b0 <tcp_eff_send_mss_netif+0x70>)
 801355e:	f007 fe83 	bl	801b268 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8013562:	68bb      	ldr	r3, [r7, #8]
 8013564:	2b00      	cmp	r3, #0
 8013566:	d101      	bne.n	801356c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8013568:	89fb      	ldrh	r3, [r7, #14]
 801356a:	e019      	b.n	80135a0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801356c:	68bb      	ldr	r3, [r7, #8]
 801356e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013570:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8013572:	8afb      	ldrh	r3, [r7, #22]
 8013574:	2b00      	cmp	r3, #0
 8013576:	d012      	beq.n	801359e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8013578:	2328      	movs	r3, #40	; 0x28
 801357a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801357c:	8afa      	ldrh	r2, [r7, #22]
 801357e:	8abb      	ldrh	r3, [r7, #20]
 8013580:	429a      	cmp	r2, r3
 8013582:	d904      	bls.n	801358e <tcp_eff_send_mss_netif+0x4e>
 8013584:	8afa      	ldrh	r2, [r7, #22]
 8013586:	8abb      	ldrh	r3, [r7, #20]
 8013588:	1ad3      	subs	r3, r2, r3
 801358a:	b29b      	uxth	r3, r3
 801358c:	e000      	b.n	8013590 <tcp_eff_send_mss_netif+0x50>
 801358e:	2300      	movs	r3, #0
 8013590:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8013592:	8a7a      	ldrh	r2, [r7, #18]
 8013594:	89fb      	ldrh	r3, [r7, #14]
 8013596:	4293      	cmp	r3, r2
 8013598:	bf28      	it	cs
 801359a:	4613      	movcs	r3, r2
 801359c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801359e:	89fb      	ldrh	r3, [r7, #14]
}
 80135a0:	4618      	mov	r0, r3
 80135a2:	3718      	adds	r7, #24
 80135a4:	46bd      	mov	sp, r7
 80135a6:	bd80      	pop	{r7, pc}
 80135a8:	0801ed9c 	.word	0x0801ed9c
 80135ac:	0801f4a8 	.word	0x0801f4a8
 80135b0:	0801ede0 	.word	0x0801ede0

080135b4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80135b4:	b580      	push	{r7, lr}
 80135b6:	b084      	sub	sp, #16
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	6078      	str	r0, [r7, #4]
 80135bc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80135be:	683b      	ldr	r3, [r7, #0]
 80135c0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d119      	bne.n	80135fc <tcp_netif_ip_addr_changed_pcblist+0x48>
 80135c8:	4b10      	ldr	r3, [pc, #64]	; (801360c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80135ca:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80135ce:	4910      	ldr	r1, [pc, #64]	; (8013610 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80135d0:	4810      	ldr	r0, [pc, #64]	; (8013614 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80135d2:	f007 fe49 	bl	801b268 <iprintf>

  while (pcb != NULL) {
 80135d6:	e011      	b.n	80135fc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	681a      	ldr	r2, [r3, #0]
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	429a      	cmp	r2, r3
 80135e2:	d108      	bne.n	80135f6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	68db      	ldr	r3, [r3, #12]
 80135e8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80135ea:	68f8      	ldr	r0, [r7, #12]
 80135ec:	f7fe fdb4 	bl	8012158 <tcp_abort>
      pcb = next;
 80135f0:	68bb      	ldr	r3, [r7, #8]
 80135f2:	60fb      	str	r3, [r7, #12]
 80135f4:	e002      	b.n	80135fc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	68db      	ldr	r3, [r3, #12]
 80135fa:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d1ea      	bne.n	80135d8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8013602:	bf00      	nop
 8013604:	bf00      	nop
 8013606:	3710      	adds	r7, #16
 8013608:	46bd      	mov	sp, r7
 801360a:	bd80      	pop	{r7, pc}
 801360c:	0801ed9c 	.word	0x0801ed9c
 8013610:	0801f4d0 	.word	0x0801f4d0
 8013614:	0801ede0 	.word	0x0801ede0

08013618 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013618:	b580      	push	{r7, lr}
 801361a:	b084      	sub	sp, #16
 801361c:	af00      	add	r7, sp, #0
 801361e:	6078      	str	r0, [r7, #4]
 8013620:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	2b00      	cmp	r3, #0
 8013626:	d02a      	beq.n	801367e <tcp_netif_ip_addr_changed+0x66>
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d026      	beq.n	801367e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8013630:	4b15      	ldr	r3, [pc, #84]	; (8013688 <tcp_netif_ip_addr_changed+0x70>)
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	4619      	mov	r1, r3
 8013636:	6878      	ldr	r0, [r7, #4]
 8013638:	f7ff ffbc 	bl	80135b4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801363c:	4b13      	ldr	r3, [pc, #76]	; (801368c <tcp_netif_ip_addr_changed+0x74>)
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	4619      	mov	r1, r3
 8013642:	6878      	ldr	r0, [r7, #4]
 8013644:	f7ff ffb6 	bl	80135b4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8013648:	683b      	ldr	r3, [r7, #0]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d017      	beq.n	801367e <tcp_netif_ip_addr_changed+0x66>
 801364e:	683b      	ldr	r3, [r7, #0]
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	2b00      	cmp	r3, #0
 8013654:	d013      	beq.n	801367e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013656:	4b0e      	ldr	r3, [pc, #56]	; (8013690 <tcp_netif_ip_addr_changed+0x78>)
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	60fb      	str	r3, [r7, #12]
 801365c:	e00c      	b.n	8013678 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	681a      	ldr	r2, [r3, #0]
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	429a      	cmp	r2, r3
 8013668:	d103      	bne.n	8013672 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801366a:	683b      	ldr	r3, [r7, #0]
 801366c:	681a      	ldr	r2, [r3, #0]
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	68db      	ldr	r3, [r3, #12]
 8013676:	60fb      	str	r3, [r7, #12]
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d1ef      	bne.n	801365e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801367e:	bf00      	nop
 8013680:	3710      	adds	r7, #16
 8013682:	46bd      	mov	sp, r7
 8013684:	bd80      	pop	{r7, pc}
 8013686:	bf00      	nop
 8013688:	20007058 	.word	0x20007058
 801368c:	20007050 	.word	0x20007050
 8013690:	20007054 	.word	0x20007054

08013694 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8013694:	b580      	push	{r7, lr}
 8013696:	b082      	sub	sp, #8
 8013698:	af00      	add	r7, sp, #0
 801369a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d007      	beq.n	80136b4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80136a8:	4618      	mov	r0, r3
 80136aa:	f7ff fb8d 	bl	8012dc8 <tcp_segs_free>
    pcb->ooseq = NULL;
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	2200      	movs	r2, #0
 80136b2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80136b4:	bf00      	nop
 80136b6:	3708      	adds	r7, #8
 80136b8:	46bd      	mov	sp, r7
 80136ba:	bd80      	pop	{r7, pc}

080136bc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80136bc:	b590      	push	{r4, r7, lr}
 80136be:	b08d      	sub	sp, #52	; 0x34
 80136c0:	af04      	add	r7, sp, #16
 80136c2:	6078      	str	r0, [r7, #4]
 80136c4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d105      	bne.n	80136d8 <tcp_input+0x1c>
 80136cc:	4b9b      	ldr	r3, [pc, #620]	; (801393c <tcp_input+0x280>)
 80136ce:	2283      	movs	r2, #131	; 0x83
 80136d0:	499b      	ldr	r1, [pc, #620]	; (8013940 <tcp_input+0x284>)
 80136d2:	489c      	ldr	r0, [pc, #624]	; (8013944 <tcp_input+0x288>)
 80136d4:	f007 fdc8 	bl	801b268 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	685b      	ldr	r3, [r3, #4]
 80136dc:	4a9a      	ldr	r2, [pc, #616]	; (8013948 <tcp_input+0x28c>)
 80136de:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	895b      	ldrh	r3, [r3, #10]
 80136e4:	2b13      	cmp	r3, #19
 80136e6:	f240 83d1 	bls.w	8013e8c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80136ea:	4b98      	ldr	r3, [pc, #608]	; (801394c <tcp_input+0x290>)
 80136ec:	695b      	ldr	r3, [r3, #20]
 80136ee:	4a97      	ldr	r2, [pc, #604]	; (801394c <tcp_input+0x290>)
 80136f0:	6812      	ldr	r2, [r2, #0]
 80136f2:	4611      	mov	r1, r2
 80136f4:	4618      	mov	r0, r3
 80136f6:	f006 f895 	bl	8019824 <ip4_addr_isbroadcast_u32>
 80136fa:	4603      	mov	r3, r0
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	f040 83c7 	bne.w	8013e90 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8013702:	4b92      	ldr	r3, [pc, #584]	; (801394c <tcp_input+0x290>)
 8013704:	695b      	ldr	r3, [r3, #20]
 8013706:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801370a:	2be0      	cmp	r3, #224	; 0xe0
 801370c:	f000 83c0 	beq.w	8013e90 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8013710:	4b8d      	ldr	r3, [pc, #564]	; (8013948 <tcp_input+0x28c>)
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	899b      	ldrh	r3, [r3, #12]
 8013716:	b29b      	uxth	r3, r3
 8013718:	4618      	mov	r0, r3
 801371a:	f7fc faff 	bl	800fd1c <lwip_htons>
 801371e:	4603      	mov	r3, r0
 8013720:	0b1b      	lsrs	r3, r3, #12
 8013722:	b29b      	uxth	r3, r3
 8013724:	b2db      	uxtb	r3, r3
 8013726:	009b      	lsls	r3, r3, #2
 8013728:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801372a:	7cbb      	ldrb	r3, [r7, #18]
 801372c:	2b13      	cmp	r3, #19
 801372e:	f240 83b1 	bls.w	8013e94 <tcp_input+0x7d8>
 8013732:	7cbb      	ldrb	r3, [r7, #18]
 8013734:	b29a      	uxth	r2, r3
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	891b      	ldrh	r3, [r3, #8]
 801373a:	429a      	cmp	r2, r3
 801373c:	f200 83aa 	bhi.w	8013e94 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8013740:	7cbb      	ldrb	r3, [r7, #18]
 8013742:	b29b      	uxth	r3, r3
 8013744:	3b14      	subs	r3, #20
 8013746:	b29a      	uxth	r2, r3
 8013748:	4b81      	ldr	r3, [pc, #516]	; (8013950 <tcp_input+0x294>)
 801374a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801374c:	4b81      	ldr	r3, [pc, #516]	; (8013954 <tcp_input+0x298>)
 801374e:	2200      	movs	r2, #0
 8013750:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	895a      	ldrh	r2, [r3, #10]
 8013756:	7cbb      	ldrb	r3, [r7, #18]
 8013758:	b29b      	uxth	r3, r3
 801375a:	429a      	cmp	r2, r3
 801375c:	d309      	bcc.n	8013772 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801375e:	4b7c      	ldr	r3, [pc, #496]	; (8013950 <tcp_input+0x294>)
 8013760:	881a      	ldrh	r2, [r3, #0]
 8013762:	4b7d      	ldr	r3, [pc, #500]	; (8013958 <tcp_input+0x29c>)
 8013764:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8013766:	7cbb      	ldrb	r3, [r7, #18]
 8013768:	4619      	mov	r1, r3
 801376a:	6878      	ldr	r0, [r7, #4]
 801376c:	f7fd fe54 	bl	8011418 <pbuf_remove_header>
 8013770:	e04e      	b.n	8013810 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d105      	bne.n	8013786 <tcp_input+0xca>
 801377a:	4b70      	ldr	r3, [pc, #448]	; (801393c <tcp_input+0x280>)
 801377c:	22c2      	movs	r2, #194	; 0xc2
 801377e:	4977      	ldr	r1, [pc, #476]	; (801395c <tcp_input+0x2a0>)
 8013780:	4870      	ldr	r0, [pc, #448]	; (8013944 <tcp_input+0x288>)
 8013782:	f007 fd71 	bl	801b268 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8013786:	2114      	movs	r1, #20
 8013788:	6878      	ldr	r0, [r7, #4]
 801378a:	f7fd fe45 	bl	8011418 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	895a      	ldrh	r2, [r3, #10]
 8013792:	4b71      	ldr	r3, [pc, #452]	; (8013958 <tcp_input+0x29c>)
 8013794:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8013796:	4b6e      	ldr	r3, [pc, #440]	; (8013950 <tcp_input+0x294>)
 8013798:	881a      	ldrh	r2, [r3, #0]
 801379a:	4b6f      	ldr	r3, [pc, #444]	; (8013958 <tcp_input+0x29c>)
 801379c:	881b      	ldrh	r3, [r3, #0]
 801379e:	1ad3      	subs	r3, r2, r3
 80137a0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80137a2:	4b6d      	ldr	r3, [pc, #436]	; (8013958 <tcp_input+0x29c>)
 80137a4:	881b      	ldrh	r3, [r3, #0]
 80137a6:	4619      	mov	r1, r3
 80137a8:	6878      	ldr	r0, [r7, #4]
 80137aa:	f7fd fe35 	bl	8011418 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	895b      	ldrh	r3, [r3, #10]
 80137b4:	8a3a      	ldrh	r2, [r7, #16]
 80137b6:	429a      	cmp	r2, r3
 80137b8:	f200 836e 	bhi.w	8013e98 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	685b      	ldr	r3, [r3, #4]
 80137c2:	4a64      	ldr	r2, [pc, #400]	; (8013954 <tcp_input+0x298>)
 80137c4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	8a3a      	ldrh	r2, [r7, #16]
 80137cc:	4611      	mov	r1, r2
 80137ce:	4618      	mov	r0, r3
 80137d0:	f7fd fe22 	bl	8011418 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	891a      	ldrh	r2, [r3, #8]
 80137d8:	8a3b      	ldrh	r3, [r7, #16]
 80137da:	1ad3      	subs	r3, r2, r3
 80137dc:	b29a      	uxth	r2, r3
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	895b      	ldrh	r3, [r3, #10]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d005      	beq.n	80137f6 <tcp_input+0x13a>
 80137ea:	4b54      	ldr	r3, [pc, #336]	; (801393c <tcp_input+0x280>)
 80137ec:	22df      	movs	r2, #223	; 0xdf
 80137ee:	495c      	ldr	r1, [pc, #368]	; (8013960 <tcp_input+0x2a4>)
 80137f0:	4854      	ldr	r0, [pc, #336]	; (8013944 <tcp_input+0x288>)
 80137f2:	f007 fd39 	bl	801b268 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	891a      	ldrh	r2, [r3, #8]
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	891b      	ldrh	r3, [r3, #8]
 8013800:	429a      	cmp	r2, r3
 8013802:	d005      	beq.n	8013810 <tcp_input+0x154>
 8013804:	4b4d      	ldr	r3, [pc, #308]	; (801393c <tcp_input+0x280>)
 8013806:	22e0      	movs	r2, #224	; 0xe0
 8013808:	4956      	ldr	r1, [pc, #344]	; (8013964 <tcp_input+0x2a8>)
 801380a:	484e      	ldr	r0, [pc, #312]	; (8013944 <tcp_input+0x288>)
 801380c:	f007 fd2c 	bl	801b268 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8013810:	4b4d      	ldr	r3, [pc, #308]	; (8013948 <tcp_input+0x28c>)
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	881b      	ldrh	r3, [r3, #0]
 8013816:	b29b      	uxth	r3, r3
 8013818:	4a4b      	ldr	r2, [pc, #300]	; (8013948 <tcp_input+0x28c>)
 801381a:	6814      	ldr	r4, [r2, #0]
 801381c:	4618      	mov	r0, r3
 801381e:	f7fc fa7d 	bl	800fd1c <lwip_htons>
 8013822:	4603      	mov	r3, r0
 8013824:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8013826:	4b48      	ldr	r3, [pc, #288]	; (8013948 <tcp_input+0x28c>)
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	885b      	ldrh	r3, [r3, #2]
 801382c:	b29b      	uxth	r3, r3
 801382e:	4a46      	ldr	r2, [pc, #280]	; (8013948 <tcp_input+0x28c>)
 8013830:	6814      	ldr	r4, [r2, #0]
 8013832:	4618      	mov	r0, r3
 8013834:	f7fc fa72 	bl	800fd1c <lwip_htons>
 8013838:	4603      	mov	r3, r0
 801383a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801383c:	4b42      	ldr	r3, [pc, #264]	; (8013948 <tcp_input+0x28c>)
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	685b      	ldr	r3, [r3, #4]
 8013842:	4a41      	ldr	r2, [pc, #260]	; (8013948 <tcp_input+0x28c>)
 8013844:	6814      	ldr	r4, [r2, #0]
 8013846:	4618      	mov	r0, r3
 8013848:	f7fc fa7d 	bl	800fd46 <lwip_htonl>
 801384c:	4603      	mov	r3, r0
 801384e:	6063      	str	r3, [r4, #4]
 8013850:	6863      	ldr	r3, [r4, #4]
 8013852:	4a45      	ldr	r2, [pc, #276]	; (8013968 <tcp_input+0x2ac>)
 8013854:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8013856:	4b3c      	ldr	r3, [pc, #240]	; (8013948 <tcp_input+0x28c>)
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	689b      	ldr	r3, [r3, #8]
 801385c:	4a3a      	ldr	r2, [pc, #232]	; (8013948 <tcp_input+0x28c>)
 801385e:	6814      	ldr	r4, [r2, #0]
 8013860:	4618      	mov	r0, r3
 8013862:	f7fc fa70 	bl	800fd46 <lwip_htonl>
 8013866:	4603      	mov	r3, r0
 8013868:	60a3      	str	r3, [r4, #8]
 801386a:	68a3      	ldr	r3, [r4, #8]
 801386c:	4a3f      	ldr	r2, [pc, #252]	; (801396c <tcp_input+0x2b0>)
 801386e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8013870:	4b35      	ldr	r3, [pc, #212]	; (8013948 <tcp_input+0x28c>)
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	89db      	ldrh	r3, [r3, #14]
 8013876:	b29b      	uxth	r3, r3
 8013878:	4a33      	ldr	r2, [pc, #204]	; (8013948 <tcp_input+0x28c>)
 801387a:	6814      	ldr	r4, [r2, #0]
 801387c:	4618      	mov	r0, r3
 801387e:	f7fc fa4d 	bl	800fd1c <lwip_htons>
 8013882:	4603      	mov	r3, r0
 8013884:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8013886:	4b30      	ldr	r3, [pc, #192]	; (8013948 <tcp_input+0x28c>)
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	899b      	ldrh	r3, [r3, #12]
 801388c:	b29b      	uxth	r3, r3
 801388e:	4618      	mov	r0, r3
 8013890:	f7fc fa44 	bl	800fd1c <lwip_htons>
 8013894:	4603      	mov	r3, r0
 8013896:	b2db      	uxtb	r3, r3
 8013898:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801389c:	b2da      	uxtb	r2, r3
 801389e:	4b34      	ldr	r3, [pc, #208]	; (8013970 <tcp_input+0x2b4>)
 80138a0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	891a      	ldrh	r2, [r3, #8]
 80138a6:	4b33      	ldr	r3, [pc, #204]	; (8013974 <tcp_input+0x2b8>)
 80138a8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80138aa:	4b31      	ldr	r3, [pc, #196]	; (8013970 <tcp_input+0x2b4>)
 80138ac:	781b      	ldrb	r3, [r3, #0]
 80138ae:	f003 0303 	and.w	r3, r3, #3
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d00c      	beq.n	80138d0 <tcp_input+0x214>
    tcplen++;
 80138b6:	4b2f      	ldr	r3, [pc, #188]	; (8013974 <tcp_input+0x2b8>)
 80138b8:	881b      	ldrh	r3, [r3, #0]
 80138ba:	3301      	adds	r3, #1
 80138bc:	b29a      	uxth	r2, r3
 80138be:	4b2d      	ldr	r3, [pc, #180]	; (8013974 <tcp_input+0x2b8>)
 80138c0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	891a      	ldrh	r2, [r3, #8]
 80138c6:	4b2b      	ldr	r3, [pc, #172]	; (8013974 <tcp_input+0x2b8>)
 80138c8:	881b      	ldrh	r3, [r3, #0]
 80138ca:	429a      	cmp	r2, r3
 80138cc:	f200 82e6 	bhi.w	8013e9c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80138d0:	2300      	movs	r3, #0
 80138d2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80138d4:	4b28      	ldr	r3, [pc, #160]	; (8013978 <tcp_input+0x2bc>)
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	61fb      	str	r3, [r7, #28]
 80138da:	e09d      	b.n	8013a18 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80138dc:	69fb      	ldr	r3, [r7, #28]
 80138de:	7d1b      	ldrb	r3, [r3, #20]
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d105      	bne.n	80138f0 <tcp_input+0x234>
 80138e4:	4b15      	ldr	r3, [pc, #84]	; (801393c <tcp_input+0x280>)
 80138e6:	22fb      	movs	r2, #251	; 0xfb
 80138e8:	4924      	ldr	r1, [pc, #144]	; (801397c <tcp_input+0x2c0>)
 80138ea:	4816      	ldr	r0, [pc, #88]	; (8013944 <tcp_input+0x288>)
 80138ec:	f007 fcbc 	bl	801b268 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80138f0:	69fb      	ldr	r3, [r7, #28]
 80138f2:	7d1b      	ldrb	r3, [r3, #20]
 80138f4:	2b0a      	cmp	r3, #10
 80138f6:	d105      	bne.n	8013904 <tcp_input+0x248>
 80138f8:	4b10      	ldr	r3, [pc, #64]	; (801393c <tcp_input+0x280>)
 80138fa:	22fc      	movs	r2, #252	; 0xfc
 80138fc:	4920      	ldr	r1, [pc, #128]	; (8013980 <tcp_input+0x2c4>)
 80138fe:	4811      	ldr	r0, [pc, #68]	; (8013944 <tcp_input+0x288>)
 8013900:	f007 fcb2 	bl	801b268 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8013904:	69fb      	ldr	r3, [r7, #28]
 8013906:	7d1b      	ldrb	r3, [r3, #20]
 8013908:	2b01      	cmp	r3, #1
 801390a:	d105      	bne.n	8013918 <tcp_input+0x25c>
 801390c:	4b0b      	ldr	r3, [pc, #44]	; (801393c <tcp_input+0x280>)
 801390e:	22fd      	movs	r2, #253	; 0xfd
 8013910:	491c      	ldr	r1, [pc, #112]	; (8013984 <tcp_input+0x2c8>)
 8013912:	480c      	ldr	r0, [pc, #48]	; (8013944 <tcp_input+0x288>)
 8013914:	f007 fca8 	bl	801b268 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013918:	69fb      	ldr	r3, [r7, #28]
 801391a:	7a1b      	ldrb	r3, [r3, #8]
 801391c:	2b00      	cmp	r3, #0
 801391e:	d033      	beq.n	8013988 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013920:	69fb      	ldr	r3, [r7, #28]
 8013922:	7a1a      	ldrb	r2, [r3, #8]
 8013924:	4b09      	ldr	r3, [pc, #36]	; (801394c <tcp_input+0x290>)
 8013926:	685b      	ldr	r3, [r3, #4]
 8013928:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801392c:	3301      	adds	r3, #1
 801392e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013930:	429a      	cmp	r2, r3
 8013932:	d029      	beq.n	8013988 <tcp_input+0x2cc>
      prev = pcb;
 8013934:	69fb      	ldr	r3, [r7, #28]
 8013936:	61bb      	str	r3, [r7, #24]
      continue;
 8013938:	e06b      	b.n	8013a12 <tcp_input+0x356>
 801393a:	bf00      	nop
 801393c:	0801f504 	.word	0x0801f504
 8013940:	0801f538 	.word	0x0801f538
 8013944:	0801f550 	.word	0x0801f550
 8013948:	20007074 	.word	0x20007074
 801394c:	20000770 	.word	0x20000770
 8013950:	20007078 	.word	0x20007078
 8013954:	2000707c 	.word	0x2000707c
 8013958:	2000707a 	.word	0x2000707a
 801395c:	0801f578 	.word	0x0801f578
 8013960:	0801f588 	.word	0x0801f588
 8013964:	0801f594 	.word	0x0801f594
 8013968:	20007084 	.word	0x20007084
 801396c:	20007088 	.word	0x20007088
 8013970:	20007090 	.word	0x20007090
 8013974:	2000708e 	.word	0x2000708e
 8013978:	20007058 	.word	0x20007058
 801397c:	0801f5b4 	.word	0x0801f5b4
 8013980:	0801f5dc 	.word	0x0801f5dc
 8013984:	0801f608 	.word	0x0801f608
    }

    if (pcb->remote_port == tcphdr->src &&
 8013988:	69fb      	ldr	r3, [r7, #28]
 801398a:	8b1a      	ldrh	r2, [r3, #24]
 801398c:	4b72      	ldr	r3, [pc, #456]	; (8013b58 <tcp_input+0x49c>)
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	881b      	ldrh	r3, [r3, #0]
 8013992:	b29b      	uxth	r3, r3
 8013994:	429a      	cmp	r2, r3
 8013996:	d13a      	bne.n	8013a0e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8013998:	69fb      	ldr	r3, [r7, #28]
 801399a:	8ada      	ldrh	r2, [r3, #22]
 801399c:	4b6e      	ldr	r3, [pc, #440]	; (8013b58 <tcp_input+0x49c>)
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	885b      	ldrh	r3, [r3, #2]
 80139a2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80139a4:	429a      	cmp	r2, r3
 80139a6:	d132      	bne.n	8013a0e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80139a8:	69fb      	ldr	r3, [r7, #28]
 80139aa:	685a      	ldr	r2, [r3, #4]
 80139ac:	4b6b      	ldr	r3, [pc, #428]	; (8013b5c <tcp_input+0x4a0>)
 80139ae:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80139b0:	429a      	cmp	r2, r3
 80139b2:	d12c      	bne.n	8013a0e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80139b4:	69fb      	ldr	r3, [r7, #28]
 80139b6:	681a      	ldr	r2, [r3, #0]
 80139b8:	4b68      	ldr	r3, [pc, #416]	; (8013b5c <tcp_input+0x4a0>)
 80139ba:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80139bc:	429a      	cmp	r2, r3
 80139be:	d126      	bne.n	8013a0e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80139c0:	69fb      	ldr	r3, [r7, #28]
 80139c2:	68db      	ldr	r3, [r3, #12]
 80139c4:	69fa      	ldr	r2, [r7, #28]
 80139c6:	429a      	cmp	r2, r3
 80139c8:	d106      	bne.n	80139d8 <tcp_input+0x31c>
 80139ca:	4b65      	ldr	r3, [pc, #404]	; (8013b60 <tcp_input+0x4a4>)
 80139cc:	f240 120d 	movw	r2, #269	; 0x10d
 80139d0:	4964      	ldr	r1, [pc, #400]	; (8013b64 <tcp_input+0x4a8>)
 80139d2:	4865      	ldr	r0, [pc, #404]	; (8013b68 <tcp_input+0x4ac>)
 80139d4:	f007 fc48 	bl	801b268 <iprintf>
      if (prev != NULL) {
 80139d8:	69bb      	ldr	r3, [r7, #24]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d00a      	beq.n	80139f4 <tcp_input+0x338>
        prev->next = pcb->next;
 80139de:	69fb      	ldr	r3, [r7, #28]
 80139e0:	68da      	ldr	r2, [r3, #12]
 80139e2:	69bb      	ldr	r3, [r7, #24]
 80139e4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80139e6:	4b61      	ldr	r3, [pc, #388]	; (8013b6c <tcp_input+0x4b0>)
 80139e8:	681a      	ldr	r2, [r3, #0]
 80139ea:	69fb      	ldr	r3, [r7, #28]
 80139ec:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80139ee:	4a5f      	ldr	r2, [pc, #380]	; (8013b6c <tcp_input+0x4b0>)
 80139f0:	69fb      	ldr	r3, [r7, #28]
 80139f2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80139f4:	69fb      	ldr	r3, [r7, #28]
 80139f6:	68db      	ldr	r3, [r3, #12]
 80139f8:	69fa      	ldr	r2, [r7, #28]
 80139fa:	429a      	cmp	r2, r3
 80139fc:	d111      	bne.n	8013a22 <tcp_input+0x366>
 80139fe:	4b58      	ldr	r3, [pc, #352]	; (8013b60 <tcp_input+0x4a4>)
 8013a00:	f240 1215 	movw	r2, #277	; 0x115
 8013a04:	495a      	ldr	r1, [pc, #360]	; (8013b70 <tcp_input+0x4b4>)
 8013a06:	4858      	ldr	r0, [pc, #352]	; (8013b68 <tcp_input+0x4ac>)
 8013a08:	f007 fc2e 	bl	801b268 <iprintf>
      break;
 8013a0c:	e009      	b.n	8013a22 <tcp_input+0x366>
    }
    prev = pcb;
 8013a0e:	69fb      	ldr	r3, [r7, #28]
 8013a10:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a12:	69fb      	ldr	r3, [r7, #28]
 8013a14:	68db      	ldr	r3, [r3, #12]
 8013a16:	61fb      	str	r3, [r7, #28]
 8013a18:	69fb      	ldr	r3, [r7, #28]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	f47f af5e 	bne.w	80138dc <tcp_input+0x220>
 8013a20:	e000      	b.n	8013a24 <tcp_input+0x368>
      break;
 8013a22:	bf00      	nop
  }

  if (pcb == NULL) {
 8013a24:	69fb      	ldr	r3, [r7, #28]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	f040 80aa 	bne.w	8013b80 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a2c:	4b51      	ldr	r3, [pc, #324]	; (8013b74 <tcp_input+0x4b8>)
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	61fb      	str	r3, [r7, #28]
 8013a32:	e03f      	b.n	8013ab4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013a34:	69fb      	ldr	r3, [r7, #28]
 8013a36:	7d1b      	ldrb	r3, [r3, #20]
 8013a38:	2b0a      	cmp	r3, #10
 8013a3a:	d006      	beq.n	8013a4a <tcp_input+0x38e>
 8013a3c:	4b48      	ldr	r3, [pc, #288]	; (8013b60 <tcp_input+0x4a4>)
 8013a3e:	f240 121f 	movw	r2, #287	; 0x11f
 8013a42:	494d      	ldr	r1, [pc, #308]	; (8013b78 <tcp_input+0x4bc>)
 8013a44:	4848      	ldr	r0, [pc, #288]	; (8013b68 <tcp_input+0x4ac>)
 8013a46:	f007 fc0f 	bl	801b268 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013a4a:	69fb      	ldr	r3, [r7, #28]
 8013a4c:	7a1b      	ldrb	r3, [r3, #8]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d009      	beq.n	8013a66 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013a52:	69fb      	ldr	r3, [r7, #28]
 8013a54:	7a1a      	ldrb	r2, [r3, #8]
 8013a56:	4b41      	ldr	r3, [pc, #260]	; (8013b5c <tcp_input+0x4a0>)
 8013a58:	685b      	ldr	r3, [r3, #4]
 8013a5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013a5e:	3301      	adds	r3, #1
 8013a60:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013a62:	429a      	cmp	r2, r3
 8013a64:	d122      	bne.n	8013aac <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8013a66:	69fb      	ldr	r3, [r7, #28]
 8013a68:	8b1a      	ldrh	r2, [r3, #24]
 8013a6a:	4b3b      	ldr	r3, [pc, #236]	; (8013b58 <tcp_input+0x49c>)
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	881b      	ldrh	r3, [r3, #0]
 8013a70:	b29b      	uxth	r3, r3
 8013a72:	429a      	cmp	r2, r3
 8013a74:	d11b      	bne.n	8013aae <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8013a76:	69fb      	ldr	r3, [r7, #28]
 8013a78:	8ada      	ldrh	r2, [r3, #22]
 8013a7a:	4b37      	ldr	r3, [pc, #220]	; (8013b58 <tcp_input+0x49c>)
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	885b      	ldrh	r3, [r3, #2]
 8013a80:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8013a82:	429a      	cmp	r2, r3
 8013a84:	d113      	bne.n	8013aae <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013a86:	69fb      	ldr	r3, [r7, #28]
 8013a88:	685a      	ldr	r2, [r3, #4]
 8013a8a:	4b34      	ldr	r3, [pc, #208]	; (8013b5c <tcp_input+0x4a0>)
 8013a8c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8013a8e:	429a      	cmp	r2, r3
 8013a90:	d10d      	bne.n	8013aae <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013a92:	69fb      	ldr	r3, [r7, #28]
 8013a94:	681a      	ldr	r2, [r3, #0]
 8013a96:	4b31      	ldr	r3, [pc, #196]	; (8013b5c <tcp_input+0x4a0>)
 8013a98:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013a9a:	429a      	cmp	r2, r3
 8013a9c:	d107      	bne.n	8013aae <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8013a9e:	69f8      	ldr	r0, [r7, #28]
 8013aa0:	f000 fb56 	bl	8014150 <tcp_timewait_input>
        }
        pbuf_free(p);
 8013aa4:	6878      	ldr	r0, [r7, #4]
 8013aa6:	f7fd fd3d 	bl	8011524 <pbuf_free>
        return;
 8013aaa:	e1fd      	b.n	8013ea8 <tcp_input+0x7ec>
        continue;
 8013aac:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013aae:	69fb      	ldr	r3, [r7, #28]
 8013ab0:	68db      	ldr	r3, [r3, #12]
 8013ab2:	61fb      	str	r3, [r7, #28]
 8013ab4:	69fb      	ldr	r3, [r7, #28]
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d1bc      	bne.n	8013a34 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8013aba:	2300      	movs	r3, #0
 8013abc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013abe:	4b2f      	ldr	r3, [pc, #188]	; (8013b7c <tcp_input+0x4c0>)
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	617b      	str	r3, [r7, #20]
 8013ac4:	e02a      	b.n	8013b1c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013ac6:	697b      	ldr	r3, [r7, #20]
 8013ac8:	7a1b      	ldrb	r3, [r3, #8]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d00c      	beq.n	8013ae8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013ace:	697b      	ldr	r3, [r7, #20]
 8013ad0:	7a1a      	ldrb	r2, [r3, #8]
 8013ad2:	4b22      	ldr	r3, [pc, #136]	; (8013b5c <tcp_input+0x4a0>)
 8013ad4:	685b      	ldr	r3, [r3, #4]
 8013ad6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013ada:	3301      	adds	r3, #1
 8013adc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013ade:	429a      	cmp	r2, r3
 8013ae0:	d002      	beq.n	8013ae8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8013ae2:	697b      	ldr	r3, [r7, #20]
 8013ae4:	61bb      	str	r3, [r7, #24]
        continue;
 8013ae6:	e016      	b.n	8013b16 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8013ae8:	697b      	ldr	r3, [r7, #20]
 8013aea:	8ada      	ldrh	r2, [r3, #22]
 8013aec:	4b1a      	ldr	r3, [pc, #104]	; (8013b58 <tcp_input+0x49c>)
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	885b      	ldrh	r3, [r3, #2]
 8013af2:	b29b      	uxth	r3, r3
 8013af4:	429a      	cmp	r2, r3
 8013af6:	d10c      	bne.n	8013b12 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8013af8:	697b      	ldr	r3, [r7, #20]
 8013afa:	681a      	ldr	r2, [r3, #0]
 8013afc:	4b17      	ldr	r3, [pc, #92]	; (8013b5c <tcp_input+0x4a0>)
 8013afe:	695b      	ldr	r3, [r3, #20]
 8013b00:	429a      	cmp	r2, r3
 8013b02:	d00f      	beq.n	8013b24 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8013b04:	697b      	ldr	r3, [r7, #20]
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d00d      	beq.n	8013b26 <tcp_input+0x46a>
 8013b0a:	697b      	ldr	r3, [r7, #20]
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d009      	beq.n	8013b26 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8013b12:	697b      	ldr	r3, [r7, #20]
 8013b14:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013b16:	697b      	ldr	r3, [r7, #20]
 8013b18:	68db      	ldr	r3, [r3, #12]
 8013b1a:	617b      	str	r3, [r7, #20]
 8013b1c:	697b      	ldr	r3, [r7, #20]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d1d1      	bne.n	8013ac6 <tcp_input+0x40a>
 8013b22:	e000      	b.n	8013b26 <tcp_input+0x46a>
            break;
 8013b24:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8013b26:	697b      	ldr	r3, [r7, #20]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d029      	beq.n	8013b80 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8013b2c:	69bb      	ldr	r3, [r7, #24]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d00a      	beq.n	8013b48 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8013b32:	697b      	ldr	r3, [r7, #20]
 8013b34:	68da      	ldr	r2, [r3, #12]
 8013b36:	69bb      	ldr	r3, [r7, #24]
 8013b38:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8013b3a:	4b10      	ldr	r3, [pc, #64]	; (8013b7c <tcp_input+0x4c0>)
 8013b3c:	681a      	ldr	r2, [r3, #0]
 8013b3e:	697b      	ldr	r3, [r7, #20]
 8013b40:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8013b42:	4a0e      	ldr	r2, [pc, #56]	; (8013b7c <tcp_input+0x4c0>)
 8013b44:	697b      	ldr	r3, [r7, #20]
 8013b46:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8013b48:	6978      	ldr	r0, [r7, #20]
 8013b4a:	f000 fa03 	bl	8013f54 <tcp_listen_input>
      }
      pbuf_free(p);
 8013b4e:	6878      	ldr	r0, [r7, #4]
 8013b50:	f7fd fce8 	bl	8011524 <pbuf_free>
      return;
 8013b54:	e1a8      	b.n	8013ea8 <tcp_input+0x7ec>
 8013b56:	bf00      	nop
 8013b58:	20007074 	.word	0x20007074
 8013b5c:	20000770 	.word	0x20000770
 8013b60:	0801f504 	.word	0x0801f504
 8013b64:	0801f630 	.word	0x0801f630
 8013b68:	0801f550 	.word	0x0801f550
 8013b6c:	20007058 	.word	0x20007058
 8013b70:	0801f65c 	.word	0x0801f65c
 8013b74:	2000705c 	.word	0x2000705c
 8013b78:	0801f688 	.word	0x0801f688
 8013b7c:	20007054 	.word	0x20007054
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8013b80:	69fb      	ldr	r3, [r7, #28]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	f000 8158 	beq.w	8013e38 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8013b88:	4b95      	ldr	r3, [pc, #596]	; (8013de0 <tcp_input+0x724>)
 8013b8a:	2200      	movs	r2, #0
 8013b8c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	891a      	ldrh	r2, [r3, #8]
 8013b92:	4b93      	ldr	r3, [pc, #588]	; (8013de0 <tcp_input+0x724>)
 8013b94:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8013b96:	4a92      	ldr	r2, [pc, #584]	; (8013de0 <tcp_input+0x724>)
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8013b9c:	4b91      	ldr	r3, [pc, #580]	; (8013de4 <tcp_input+0x728>)
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	4a8f      	ldr	r2, [pc, #572]	; (8013de0 <tcp_input+0x724>)
 8013ba2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8013ba4:	4b90      	ldr	r3, [pc, #576]	; (8013de8 <tcp_input+0x72c>)
 8013ba6:	2200      	movs	r2, #0
 8013ba8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8013baa:	4b90      	ldr	r3, [pc, #576]	; (8013dec <tcp_input+0x730>)
 8013bac:	2200      	movs	r2, #0
 8013bae:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8013bb0:	4b8f      	ldr	r3, [pc, #572]	; (8013df0 <tcp_input+0x734>)
 8013bb2:	2200      	movs	r2, #0
 8013bb4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8013bb6:	4b8f      	ldr	r3, [pc, #572]	; (8013df4 <tcp_input+0x738>)
 8013bb8:	781b      	ldrb	r3, [r3, #0]
 8013bba:	f003 0308 	and.w	r3, r3, #8
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d006      	beq.n	8013bd0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	7b5b      	ldrb	r3, [r3, #13]
 8013bc6:	f043 0301 	orr.w	r3, r3, #1
 8013bca:	b2da      	uxtb	r2, r3
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8013bd0:	69fb      	ldr	r3, [r7, #28]
 8013bd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d017      	beq.n	8013c08 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013bd8:	69f8      	ldr	r0, [r7, #28]
 8013bda:	f7ff f877 	bl	8012ccc <tcp_process_refused_data>
 8013bde:	4603      	mov	r3, r0
 8013be0:	f113 0f0d 	cmn.w	r3, #13
 8013be4:	d007      	beq.n	8013bf6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013be6:	69fb      	ldr	r3, [r7, #28]
 8013be8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d00c      	beq.n	8013c08 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013bee:	4b82      	ldr	r3, [pc, #520]	; (8013df8 <tcp_input+0x73c>)
 8013bf0:	881b      	ldrh	r3, [r3, #0]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d008      	beq.n	8013c08 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8013bf6:	69fb      	ldr	r3, [r7, #28]
 8013bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	f040 80e4 	bne.w	8013dc8 <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8013c00:	69f8      	ldr	r0, [r7, #28]
 8013c02:	f003 fe05 	bl	8017810 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8013c06:	e0df      	b.n	8013dc8 <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 8013c08:	4a7c      	ldr	r2, [pc, #496]	; (8013dfc <tcp_input+0x740>)
 8013c0a:	69fb      	ldr	r3, [r7, #28]
 8013c0c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8013c0e:	69f8      	ldr	r0, [r7, #28]
 8013c10:	f000 fb18 	bl	8014244 <tcp_process>
 8013c14:	4603      	mov	r3, r0
 8013c16:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8013c18:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013c1c:	f113 0f0d 	cmn.w	r3, #13
 8013c20:	f000 80d4 	beq.w	8013dcc <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 8013c24:	4b71      	ldr	r3, [pc, #452]	; (8013dec <tcp_input+0x730>)
 8013c26:	781b      	ldrb	r3, [r3, #0]
 8013c28:	f003 0308 	and.w	r3, r3, #8
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d015      	beq.n	8013c5c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8013c30:	69fb      	ldr	r3, [r7, #28]
 8013c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d008      	beq.n	8013c4c <tcp_input+0x590>
 8013c3a:	69fb      	ldr	r3, [r7, #28]
 8013c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013c40:	69fa      	ldr	r2, [r7, #28]
 8013c42:	6912      	ldr	r2, [r2, #16]
 8013c44:	f06f 010d 	mvn.w	r1, #13
 8013c48:	4610      	mov	r0, r2
 8013c4a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013c4c:	69f9      	ldr	r1, [r7, #28]
 8013c4e:	486c      	ldr	r0, [pc, #432]	; (8013e00 <tcp_input+0x744>)
 8013c50:	f7ff fbbc 	bl	80133cc <tcp_pcb_remove>
        tcp_free(pcb);
 8013c54:	69f8      	ldr	r0, [r7, #28]
 8013c56:	f7fd ff97 	bl	8011b88 <tcp_free>
 8013c5a:	e0da      	b.n	8013e12 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8013c5c:	2300      	movs	r3, #0
 8013c5e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8013c60:	4b63      	ldr	r3, [pc, #396]	; (8013df0 <tcp_input+0x734>)
 8013c62:	881b      	ldrh	r3, [r3, #0]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d01d      	beq.n	8013ca4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8013c68:	4b61      	ldr	r3, [pc, #388]	; (8013df0 <tcp_input+0x734>)
 8013c6a:	881b      	ldrh	r3, [r3, #0]
 8013c6c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8013c6e:	69fb      	ldr	r3, [r7, #28]
 8013c70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d00a      	beq.n	8013c8e <tcp_input+0x5d2>
 8013c78:	69fb      	ldr	r3, [r7, #28]
 8013c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013c7e:	69fa      	ldr	r2, [r7, #28]
 8013c80:	6910      	ldr	r0, [r2, #16]
 8013c82:	89fa      	ldrh	r2, [r7, #14]
 8013c84:	69f9      	ldr	r1, [r7, #28]
 8013c86:	4798      	blx	r3
 8013c88:	4603      	mov	r3, r0
 8013c8a:	74fb      	strb	r3, [r7, #19]
 8013c8c:	e001      	b.n	8013c92 <tcp_input+0x5d6>
 8013c8e:	2300      	movs	r3, #0
 8013c90:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013c92:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013c96:	f113 0f0d 	cmn.w	r3, #13
 8013c9a:	f000 8099 	beq.w	8013dd0 <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 8013c9e:	4b54      	ldr	r3, [pc, #336]	; (8013df0 <tcp_input+0x734>)
 8013ca0:	2200      	movs	r2, #0
 8013ca2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8013ca4:	69f8      	ldr	r0, [r7, #28]
 8013ca6:	f000 f915 	bl	8013ed4 <tcp_input_delayed_close>
 8013caa:	4603      	mov	r3, r0
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	f040 8091 	bne.w	8013dd4 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8013cb2:	4b4d      	ldr	r3, [pc, #308]	; (8013de8 <tcp_input+0x72c>)
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d041      	beq.n	8013d3e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8013cba:	69fb      	ldr	r3, [r7, #28]
 8013cbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d006      	beq.n	8013cd0 <tcp_input+0x614>
 8013cc2:	4b50      	ldr	r3, [pc, #320]	; (8013e04 <tcp_input+0x748>)
 8013cc4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013cc8:	494f      	ldr	r1, [pc, #316]	; (8013e08 <tcp_input+0x74c>)
 8013cca:	4850      	ldr	r0, [pc, #320]	; (8013e0c <tcp_input+0x750>)
 8013ccc:	f007 facc 	bl	801b268 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8013cd0:	69fb      	ldr	r3, [r7, #28]
 8013cd2:	8b5b      	ldrh	r3, [r3, #26]
 8013cd4:	f003 0310 	and.w	r3, r3, #16
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d008      	beq.n	8013cee <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8013cdc:	4b42      	ldr	r3, [pc, #264]	; (8013de8 <tcp_input+0x72c>)
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	f7fd fc1f 	bl	8011524 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8013ce6:	69f8      	ldr	r0, [r7, #28]
 8013ce8:	f7fe fa36 	bl	8012158 <tcp_abort>
            goto aborted;
 8013cec:	e091      	b.n	8013e12 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8013cee:	69fb      	ldr	r3, [r7, #28]
 8013cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d00c      	beq.n	8013d12 <tcp_input+0x656>
 8013cf8:	69fb      	ldr	r3, [r7, #28]
 8013cfa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013cfe:	69fb      	ldr	r3, [r7, #28]
 8013d00:	6918      	ldr	r0, [r3, #16]
 8013d02:	4b39      	ldr	r3, [pc, #228]	; (8013de8 <tcp_input+0x72c>)
 8013d04:	681a      	ldr	r2, [r3, #0]
 8013d06:	2300      	movs	r3, #0
 8013d08:	69f9      	ldr	r1, [r7, #28]
 8013d0a:	47a0      	blx	r4
 8013d0c:	4603      	mov	r3, r0
 8013d0e:	74fb      	strb	r3, [r7, #19]
 8013d10:	e008      	b.n	8013d24 <tcp_input+0x668>
 8013d12:	4b35      	ldr	r3, [pc, #212]	; (8013de8 <tcp_input+0x72c>)
 8013d14:	681a      	ldr	r2, [r3, #0]
 8013d16:	2300      	movs	r3, #0
 8013d18:	69f9      	ldr	r1, [r7, #28]
 8013d1a:	2000      	movs	r0, #0
 8013d1c:	f7ff f8ae 	bl	8012e7c <tcp_recv_null>
 8013d20:	4603      	mov	r3, r0
 8013d22:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8013d24:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013d28:	f113 0f0d 	cmn.w	r3, #13
 8013d2c:	d054      	beq.n	8013dd8 <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8013d2e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d003      	beq.n	8013d3e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8013d36:	4b2c      	ldr	r3, [pc, #176]	; (8013de8 <tcp_input+0x72c>)
 8013d38:	681a      	ldr	r2, [r3, #0]
 8013d3a:	69fb      	ldr	r3, [r7, #28]
 8013d3c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8013d3e:	4b2b      	ldr	r3, [pc, #172]	; (8013dec <tcp_input+0x730>)
 8013d40:	781b      	ldrb	r3, [r3, #0]
 8013d42:	f003 0320 	and.w	r3, r3, #32
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d031      	beq.n	8013dae <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 8013d4a:	69fb      	ldr	r3, [r7, #28]
 8013d4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d009      	beq.n	8013d66 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8013d52:	69fb      	ldr	r3, [r7, #28]
 8013d54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013d56:	7b5a      	ldrb	r2, [r3, #13]
 8013d58:	69fb      	ldr	r3, [r7, #28]
 8013d5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013d5c:	f042 0220 	orr.w	r2, r2, #32
 8013d60:	b2d2      	uxtb	r2, r2
 8013d62:	735a      	strb	r2, [r3, #13]
 8013d64:	e023      	b.n	8013dae <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013d66:	69fb      	ldr	r3, [r7, #28]
 8013d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013d6a:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8013d6e:	4293      	cmp	r3, r2
 8013d70:	d005      	beq.n	8013d7e <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 8013d72:	69fb      	ldr	r3, [r7, #28]
 8013d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013d76:	3301      	adds	r3, #1
 8013d78:	b29a      	uxth	r2, r3
 8013d7a:	69fb      	ldr	r3, [r7, #28]
 8013d7c:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8013d7e:	69fb      	ldr	r3, [r7, #28]
 8013d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d00b      	beq.n	8013da0 <tcp_input+0x6e4>
 8013d88:	69fb      	ldr	r3, [r7, #28]
 8013d8a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013d8e:	69fb      	ldr	r3, [r7, #28]
 8013d90:	6918      	ldr	r0, [r3, #16]
 8013d92:	2300      	movs	r3, #0
 8013d94:	2200      	movs	r2, #0
 8013d96:	69f9      	ldr	r1, [r7, #28]
 8013d98:	47a0      	blx	r4
 8013d9a:	4603      	mov	r3, r0
 8013d9c:	74fb      	strb	r3, [r7, #19]
 8013d9e:	e001      	b.n	8013da4 <tcp_input+0x6e8>
 8013da0:	2300      	movs	r3, #0
 8013da2:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013da4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013da8:	f113 0f0d 	cmn.w	r3, #13
 8013dac:	d016      	beq.n	8013ddc <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8013dae:	4b13      	ldr	r3, [pc, #76]	; (8013dfc <tcp_input+0x740>)
 8013db0:	2200      	movs	r2, #0
 8013db2:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8013db4:	69f8      	ldr	r0, [r7, #28]
 8013db6:	f000 f88d 	bl	8013ed4 <tcp_input_delayed_close>
 8013dba:	4603      	mov	r3, r0
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d127      	bne.n	8013e10 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8013dc0:	69f8      	ldr	r0, [r7, #28]
 8013dc2:	f002 ff1f 	bl	8016c04 <tcp_output>
 8013dc6:	e024      	b.n	8013e12 <tcp_input+0x756>
        goto aborted;
 8013dc8:	bf00      	nop
 8013dca:	e022      	b.n	8013e12 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8013dcc:	bf00      	nop
 8013dce:	e020      	b.n	8013e12 <tcp_input+0x756>
              goto aborted;
 8013dd0:	bf00      	nop
 8013dd2:	e01e      	b.n	8013e12 <tcp_input+0x756>
          goto aborted;
 8013dd4:	bf00      	nop
 8013dd6:	e01c      	b.n	8013e12 <tcp_input+0x756>
            goto aborted;
 8013dd8:	bf00      	nop
 8013dda:	e01a      	b.n	8013e12 <tcp_input+0x756>
              goto aborted;
 8013ddc:	bf00      	nop
 8013dde:	e018      	b.n	8013e12 <tcp_input+0x756>
 8013de0:	20007064 	.word	0x20007064
 8013de4:	20007074 	.word	0x20007074
 8013de8:	20007094 	.word	0x20007094
 8013dec:	20007091 	.word	0x20007091
 8013df0:	2000708c 	.word	0x2000708c
 8013df4:	20007090 	.word	0x20007090
 8013df8:	2000708e 	.word	0x2000708e
 8013dfc:	20007098 	.word	0x20007098
 8013e00:	20007058 	.word	0x20007058
 8013e04:	0801f504 	.word	0x0801f504
 8013e08:	0801f6b8 	.word	0x0801f6b8
 8013e0c:	0801f550 	.word	0x0801f550
          goto aborted;
 8013e10:	bf00      	nop
    tcp_input_pcb = NULL;
 8013e12:	4b27      	ldr	r3, [pc, #156]	; (8013eb0 <tcp_input+0x7f4>)
 8013e14:	2200      	movs	r2, #0
 8013e16:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8013e18:	4b26      	ldr	r3, [pc, #152]	; (8013eb4 <tcp_input+0x7f8>)
 8013e1a:	2200      	movs	r2, #0
 8013e1c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8013e1e:	4b26      	ldr	r3, [pc, #152]	; (8013eb8 <tcp_input+0x7fc>)
 8013e20:	685b      	ldr	r3, [r3, #4]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d03f      	beq.n	8013ea6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8013e26:	4b24      	ldr	r3, [pc, #144]	; (8013eb8 <tcp_input+0x7fc>)
 8013e28:	685b      	ldr	r3, [r3, #4]
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	f7fd fb7a 	bl	8011524 <pbuf_free>
      inseg.p = NULL;
 8013e30:	4b21      	ldr	r3, [pc, #132]	; (8013eb8 <tcp_input+0x7fc>)
 8013e32:	2200      	movs	r2, #0
 8013e34:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8013e36:	e036      	b.n	8013ea6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8013e38:	4b20      	ldr	r3, [pc, #128]	; (8013ebc <tcp_input+0x800>)
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	899b      	ldrh	r3, [r3, #12]
 8013e3e:	b29b      	uxth	r3, r3
 8013e40:	4618      	mov	r0, r3
 8013e42:	f7fb ff6b 	bl	800fd1c <lwip_htons>
 8013e46:	4603      	mov	r3, r0
 8013e48:	b2db      	uxtb	r3, r3
 8013e4a:	f003 0304 	and.w	r3, r3, #4
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d118      	bne.n	8013e84 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013e52:	4b1b      	ldr	r3, [pc, #108]	; (8013ec0 <tcp_input+0x804>)
 8013e54:	6819      	ldr	r1, [r3, #0]
 8013e56:	4b1b      	ldr	r3, [pc, #108]	; (8013ec4 <tcp_input+0x808>)
 8013e58:	881b      	ldrh	r3, [r3, #0]
 8013e5a:	461a      	mov	r2, r3
 8013e5c:	4b1a      	ldr	r3, [pc, #104]	; (8013ec8 <tcp_input+0x80c>)
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013e62:	4b16      	ldr	r3, [pc, #88]	; (8013ebc <tcp_input+0x800>)
 8013e64:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013e66:	885b      	ldrh	r3, [r3, #2]
 8013e68:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013e6a:	4a14      	ldr	r2, [pc, #80]	; (8013ebc <tcp_input+0x800>)
 8013e6c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013e6e:	8812      	ldrh	r2, [r2, #0]
 8013e70:	b292      	uxth	r2, r2
 8013e72:	9202      	str	r2, [sp, #8]
 8013e74:	9301      	str	r3, [sp, #4]
 8013e76:	4b15      	ldr	r3, [pc, #84]	; (8013ecc <tcp_input+0x810>)
 8013e78:	9300      	str	r3, [sp, #0]
 8013e7a:	4b15      	ldr	r3, [pc, #84]	; (8013ed0 <tcp_input+0x814>)
 8013e7c:	4602      	mov	r2, r0
 8013e7e:	2000      	movs	r0, #0
 8013e80:	f003 fc74 	bl	801776c <tcp_rst>
    pbuf_free(p);
 8013e84:	6878      	ldr	r0, [r7, #4]
 8013e86:	f7fd fb4d 	bl	8011524 <pbuf_free>
  return;
 8013e8a:	e00c      	b.n	8013ea6 <tcp_input+0x7ea>
    goto dropped;
 8013e8c:	bf00      	nop
 8013e8e:	e006      	b.n	8013e9e <tcp_input+0x7e2>
    goto dropped;
 8013e90:	bf00      	nop
 8013e92:	e004      	b.n	8013e9e <tcp_input+0x7e2>
    goto dropped;
 8013e94:	bf00      	nop
 8013e96:	e002      	b.n	8013e9e <tcp_input+0x7e2>
      goto dropped;
 8013e98:	bf00      	nop
 8013e9a:	e000      	b.n	8013e9e <tcp_input+0x7e2>
      goto dropped;
 8013e9c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8013e9e:	6878      	ldr	r0, [r7, #4]
 8013ea0:	f7fd fb40 	bl	8011524 <pbuf_free>
 8013ea4:	e000      	b.n	8013ea8 <tcp_input+0x7ec>
  return;
 8013ea6:	bf00      	nop
}
 8013ea8:	3724      	adds	r7, #36	; 0x24
 8013eaa:	46bd      	mov	sp, r7
 8013eac:	bd90      	pop	{r4, r7, pc}
 8013eae:	bf00      	nop
 8013eb0:	20007098 	.word	0x20007098
 8013eb4:	20007094 	.word	0x20007094
 8013eb8:	20007064 	.word	0x20007064
 8013ebc:	20007074 	.word	0x20007074
 8013ec0:	20007088 	.word	0x20007088
 8013ec4:	2000708e 	.word	0x2000708e
 8013ec8:	20007084 	.word	0x20007084
 8013ecc:	20000780 	.word	0x20000780
 8013ed0:	20000784 	.word	0x20000784

08013ed4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b082      	sub	sp, #8
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d106      	bne.n	8013ef0 <tcp_input_delayed_close+0x1c>
 8013ee2:	4b17      	ldr	r3, [pc, #92]	; (8013f40 <tcp_input_delayed_close+0x6c>)
 8013ee4:	f240 225a 	movw	r2, #602	; 0x25a
 8013ee8:	4916      	ldr	r1, [pc, #88]	; (8013f44 <tcp_input_delayed_close+0x70>)
 8013eea:	4817      	ldr	r0, [pc, #92]	; (8013f48 <tcp_input_delayed_close+0x74>)
 8013eec:	f007 f9bc 	bl	801b268 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8013ef0:	4b16      	ldr	r3, [pc, #88]	; (8013f4c <tcp_input_delayed_close+0x78>)
 8013ef2:	781b      	ldrb	r3, [r3, #0]
 8013ef4:	f003 0310 	and.w	r3, r3, #16
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d01c      	beq.n	8013f36 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	8b5b      	ldrh	r3, [r3, #26]
 8013f00:	f003 0310 	and.w	r3, r3, #16
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d10d      	bne.n	8013f24 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d008      	beq.n	8013f24 <tcp_input_delayed_close+0x50>
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013f18:	687a      	ldr	r2, [r7, #4]
 8013f1a:	6912      	ldr	r2, [r2, #16]
 8013f1c:	f06f 010e 	mvn.w	r1, #14
 8013f20:	4610      	mov	r0, r2
 8013f22:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013f24:	6879      	ldr	r1, [r7, #4]
 8013f26:	480a      	ldr	r0, [pc, #40]	; (8013f50 <tcp_input_delayed_close+0x7c>)
 8013f28:	f7ff fa50 	bl	80133cc <tcp_pcb_remove>
    tcp_free(pcb);
 8013f2c:	6878      	ldr	r0, [r7, #4]
 8013f2e:	f7fd fe2b 	bl	8011b88 <tcp_free>
    return 1;
 8013f32:	2301      	movs	r3, #1
 8013f34:	e000      	b.n	8013f38 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8013f36:	2300      	movs	r3, #0
}
 8013f38:	4618      	mov	r0, r3
 8013f3a:	3708      	adds	r7, #8
 8013f3c:	46bd      	mov	sp, r7
 8013f3e:	bd80      	pop	{r7, pc}
 8013f40:	0801f504 	.word	0x0801f504
 8013f44:	0801f6d4 	.word	0x0801f6d4
 8013f48:	0801f550 	.word	0x0801f550
 8013f4c:	20007091 	.word	0x20007091
 8013f50:	20007058 	.word	0x20007058

08013f54 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8013f54:	b590      	push	{r4, r7, lr}
 8013f56:	b08b      	sub	sp, #44	; 0x2c
 8013f58:	af04      	add	r7, sp, #16
 8013f5a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8013f5c:	4b6f      	ldr	r3, [pc, #444]	; (801411c <tcp_listen_input+0x1c8>)
 8013f5e:	781b      	ldrb	r3, [r3, #0]
 8013f60:	f003 0304 	and.w	r3, r3, #4
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	f040 80d2 	bne.w	801410e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d106      	bne.n	8013f7e <tcp_listen_input+0x2a>
 8013f70:	4b6b      	ldr	r3, [pc, #428]	; (8014120 <tcp_listen_input+0x1cc>)
 8013f72:	f240 2281 	movw	r2, #641	; 0x281
 8013f76:	496b      	ldr	r1, [pc, #428]	; (8014124 <tcp_listen_input+0x1d0>)
 8013f78:	486b      	ldr	r0, [pc, #428]	; (8014128 <tcp_listen_input+0x1d4>)
 8013f7a:	f007 f975 	bl	801b268 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8013f7e:	4b67      	ldr	r3, [pc, #412]	; (801411c <tcp_listen_input+0x1c8>)
 8013f80:	781b      	ldrb	r3, [r3, #0]
 8013f82:	f003 0310 	and.w	r3, r3, #16
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d019      	beq.n	8013fbe <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013f8a:	4b68      	ldr	r3, [pc, #416]	; (801412c <tcp_listen_input+0x1d8>)
 8013f8c:	6819      	ldr	r1, [r3, #0]
 8013f8e:	4b68      	ldr	r3, [pc, #416]	; (8014130 <tcp_listen_input+0x1dc>)
 8013f90:	881b      	ldrh	r3, [r3, #0]
 8013f92:	461a      	mov	r2, r3
 8013f94:	4b67      	ldr	r3, [pc, #412]	; (8014134 <tcp_listen_input+0x1e0>)
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013f9a:	4b67      	ldr	r3, [pc, #412]	; (8014138 <tcp_listen_input+0x1e4>)
 8013f9c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013f9e:	885b      	ldrh	r3, [r3, #2]
 8013fa0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013fa2:	4a65      	ldr	r2, [pc, #404]	; (8014138 <tcp_listen_input+0x1e4>)
 8013fa4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013fa6:	8812      	ldrh	r2, [r2, #0]
 8013fa8:	b292      	uxth	r2, r2
 8013faa:	9202      	str	r2, [sp, #8]
 8013fac:	9301      	str	r3, [sp, #4]
 8013fae:	4b63      	ldr	r3, [pc, #396]	; (801413c <tcp_listen_input+0x1e8>)
 8013fb0:	9300      	str	r3, [sp, #0]
 8013fb2:	4b63      	ldr	r3, [pc, #396]	; (8014140 <tcp_listen_input+0x1ec>)
 8013fb4:	4602      	mov	r2, r0
 8013fb6:	6878      	ldr	r0, [r7, #4]
 8013fb8:	f003 fbd8 	bl	801776c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8013fbc:	e0a9      	b.n	8014112 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8013fbe:	4b57      	ldr	r3, [pc, #348]	; (801411c <tcp_listen_input+0x1c8>)
 8013fc0:	781b      	ldrb	r3, [r3, #0]
 8013fc2:	f003 0302 	and.w	r3, r3, #2
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	f000 80a3 	beq.w	8014112 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	7d5b      	ldrb	r3, [r3, #21]
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	f7ff f877 	bl	80130c4 <tcp_alloc>
 8013fd6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8013fd8:	697b      	ldr	r3, [r7, #20]
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d111      	bne.n	8014002 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	699b      	ldr	r3, [r3, #24]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d00a      	beq.n	8013ffc <tcp_listen_input+0xa8>
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	699b      	ldr	r3, [r3, #24]
 8013fea:	687a      	ldr	r2, [r7, #4]
 8013fec:	6910      	ldr	r0, [r2, #16]
 8013fee:	f04f 32ff 	mov.w	r2, #4294967295
 8013ff2:	2100      	movs	r1, #0
 8013ff4:	4798      	blx	r3
 8013ff6:	4603      	mov	r3, r0
 8013ff8:	73bb      	strb	r3, [r7, #14]
      return;
 8013ffa:	e08b      	b.n	8014114 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013ffc:	23f0      	movs	r3, #240	; 0xf0
 8013ffe:	73bb      	strb	r3, [r7, #14]
      return;
 8014000:	e088      	b.n	8014114 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8014002:	4b50      	ldr	r3, [pc, #320]	; (8014144 <tcp_listen_input+0x1f0>)
 8014004:	695a      	ldr	r2, [r3, #20]
 8014006:	697b      	ldr	r3, [r7, #20]
 8014008:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801400a:	4b4e      	ldr	r3, [pc, #312]	; (8014144 <tcp_listen_input+0x1f0>)
 801400c:	691a      	ldr	r2, [r3, #16]
 801400e:	697b      	ldr	r3, [r7, #20]
 8014010:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	8ada      	ldrh	r2, [r3, #22]
 8014016:	697b      	ldr	r3, [r7, #20]
 8014018:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801401a:	4b47      	ldr	r3, [pc, #284]	; (8014138 <tcp_listen_input+0x1e4>)
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	881b      	ldrh	r3, [r3, #0]
 8014020:	b29a      	uxth	r2, r3
 8014022:	697b      	ldr	r3, [r7, #20]
 8014024:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8014026:	697b      	ldr	r3, [r7, #20]
 8014028:	2203      	movs	r2, #3
 801402a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801402c:	4b41      	ldr	r3, [pc, #260]	; (8014134 <tcp_listen_input+0x1e0>)
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	1c5a      	adds	r2, r3, #1
 8014032:	697b      	ldr	r3, [r7, #20]
 8014034:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8014036:	697b      	ldr	r3, [r7, #20]
 8014038:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801403a:	697b      	ldr	r3, [r7, #20]
 801403c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801403e:	6978      	ldr	r0, [r7, #20]
 8014040:	f7ff fa58 	bl	80134f4 <tcp_next_iss>
 8014044:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8014046:	697b      	ldr	r3, [r7, #20]
 8014048:	693a      	ldr	r2, [r7, #16]
 801404a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801404c:	697b      	ldr	r3, [r7, #20]
 801404e:	693a      	ldr	r2, [r7, #16]
 8014050:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8014052:	697b      	ldr	r3, [r7, #20]
 8014054:	693a      	ldr	r2, [r7, #16]
 8014056:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8014058:	697b      	ldr	r3, [r7, #20]
 801405a:	693a      	ldr	r2, [r7, #16]
 801405c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801405e:	4b35      	ldr	r3, [pc, #212]	; (8014134 <tcp_listen_input+0x1e0>)
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	1e5a      	subs	r2, r3, #1
 8014064:	697b      	ldr	r3, [r7, #20]
 8014066:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	691a      	ldr	r2, [r3, #16]
 801406c:	697b      	ldr	r3, [r7, #20]
 801406e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8014070:	697b      	ldr	r3, [r7, #20]
 8014072:	687a      	ldr	r2, [r7, #4]
 8014074:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	7a5b      	ldrb	r3, [r3, #9]
 801407a:	f003 030c 	and.w	r3, r3, #12
 801407e:	b2da      	uxtb	r2, r3
 8014080:	697b      	ldr	r3, [r7, #20]
 8014082:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	7a1a      	ldrb	r2, [r3, #8]
 8014088:	697b      	ldr	r3, [r7, #20]
 801408a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801408c:	4b2e      	ldr	r3, [pc, #184]	; (8014148 <tcp_listen_input+0x1f4>)
 801408e:	681a      	ldr	r2, [r3, #0]
 8014090:	697b      	ldr	r3, [r7, #20]
 8014092:	60da      	str	r2, [r3, #12]
 8014094:	4a2c      	ldr	r2, [pc, #176]	; (8014148 <tcp_listen_input+0x1f4>)
 8014096:	697b      	ldr	r3, [r7, #20]
 8014098:	6013      	str	r3, [r2, #0]
 801409a:	f003 fd29 	bl	8017af0 <tcp_timer_needed>
 801409e:	4b2b      	ldr	r3, [pc, #172]	; (801414c <tcp_listen_input+0x1f8>)
 80140a0:	2201      	movs	r2, #1
 80140a2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80140a4:	6978      	ldr	r0, [r7, #20]
 80140a6:	f001 fd8f 	bl	8015bc8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80140aa:	4b23      	ldr	r3, [pc, #140]	; (8014138 <tcp_listen_input+0x1e4>)
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	89db      	ldrh	r3, [r3, #14]
 80140b0:	b29a      	uxth	r2, r3
 80140b2:	697b      	ldr	r3, [r7, #20]
 80140b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80140b8:	697b      	ldr	r3, [r7, #20]
 80140ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80140be:	697b      	ldr	r3, [r7, #20]
 80140c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80140c4:	697b      	ldr	r3, [r7, #20]
 80140c6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80140c8:	697b      	ldr	r3, [r7, #20]
 80140ca:	3304      	adds	r3, #4
 80140cc:	4618      	mov	r0, r3
 80140ce:	f005 f913 	bl	80192f8 <ip4_route>
 80140d2:	4601      	mov	r1, r0
 80140d4:	697b      	ldr	r3, [r7, #20]
 80140d6:	3304      	adds	r3, #4
 80140d8:	461a      	mov	r2, r3
 80140da:	4620      	mov	r0, r4
 80140dc:	f7ff fa30 	bl	8013540 <tcp_eff_send_mss_netif>
 80140e0:	4603      	mov	r3, r0
 80140e2:	461a      	mov	r2, r3
 80140e4:	697b      	ldr	r3, [r7, #20]
 80140e6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80140e8:	2112      	movs	r1, #18
 80140ea:	6978      	ldr	r0, [r7, #20]
 80140ec:	f002 fc9c 	bl	8016a28 <tcp_enqueue_flags>
 80140f0:	4603      	mov	r3, r0
 80140f2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80140f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d004      	beq.n	8014106 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80140fc:	2100      	movs	r1, #0
 80140fe:	6978      	ldr	r0, [r7, #20]
 8014100:	f7fd ff6c 	bl	8011fdc <tcp_abandon>
      return;
 8014104:	e006      	b.n	8014114 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8014106:	6978      	ldr	r0, [r7, #20]
 8014108:	f002 fd7c 	bl	8016c04 <tcp_output>
  return;
 801410c:	e001      	b.n	8014112 <tcp_listen_input+0x1be>
    return;
 801410e:	bf00      	nop
 8014110:	e000      	b.n	8014114 <tcp_listen_input+0x1c0>
  return;
 8014112:	bf00      	nop
}
 8014114:	371c      	adds	r7, #28
 8014116:	46bd      	mov	sp, r7
 8014118:	bd90      	pop	{r4, r7, pc}
 801411a:	bf00      	nop
 801411c:	20007090 	.word	0x20007090
 8014120:	0801f504 	.word	0x0801f504
 8014124:	0801f6fc 	.word	0x0801f6fc
 8014128:	0801f550 	.word	0x0801f550
 801412c:	20007088 	.word	0x20007088
 8014130:	2000708e 	.word	0x2000708e
 8014134:	20007084 	.word	0x20007084
 8014138:	20007074 	.word	0x20007074
 801413c:	20000780 	.word	0x20000780
 8014140:	20000784 	.word	0x20000784
 8014144:	20000770 	.word	0x20000770
 8014148:	20007058 	.word	0x20007058
 801414c:	20007060 	.word	0x20007060

08014150 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8014150:	b580      	push	{r7, lr}
 8014152:	b086      	sub	sp, #24
 8014154:	af04      	add	r7, sp, #16
 8014156:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8014158:	4b2f      	ldr	r3, [pc, #188]	; (8014218 <tcp_timewait_input+0xc8>)
 801415a:	781b      	ldrb	r3, [r3, #0]
 801415c:	f003 0304 	and.w	r3, r3, #4
 8014160:	2b00      	cmp	r3, #0
 8014162:	d153      	bne.n	801420c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	2b00      	cmp	r3, #0
 8014168:	d106      	bne.n	8014178 <tcp_timewait_input+0x28>
 801416a:	4b2c      	ldr	r3, [pc, #176]	; (801421c <tcp_timewait_input+0xcc>)
 801416c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014170:	492b      	ldr	r1, [pc, #172]	; (8014220 <tcp_timewait_input+0xd0>)
 8014172:	482c      	ldr	r0, [pc, #176]	; (8014224 <tcp_timewait_input+0xd4>)
 8014174:	f007 f878 	bl	801b268 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8014178:	4b27      	ldr	r3, [pc, #156]	; (8014218 <tcp_timewait_input+0xc8>)
 801417a:	781b      	ldrb	r3, [r3, #0]
 801417c:	f003 0302 	and.w	r3, r3, #2
 8014180:	2b00      	cmp	r3, #0
 8014182:	d02a      	beq.n	80141da <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8014184:	4b28      	ldr	r3, [pc, #160]	; (8014228 <tcp_timewait_input+0xd8>)
 8014186:	681a      	ldr	r2, [r3, #0]
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801418c:	1ad3      	subs	r3, r2, r3
 801418e:	2b00      	cmp	r3, #0
 8014190:	db2d      	blt.n	80141ee <tcp_timewait_input+0x9e>
 8014192:	4b25      	ldr	r3, [pc, #148]	; (8014228 <tcp_timewait_input+0xd8>)
 8014194:	681a      	ldr	r2, [r3, #0]
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801419a:	6879      	ldr	r1, [r7, #4]
 801419c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801419e:	440b      	add	r3, r1
 80141a0:	1ad3      	subs	r3, r2, r3
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	dc23      	bgt.n	80141ee <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80141a6:	4b21      	ldr	r3, [pc, #132]	; (801422c <tcp_timewait_input+0xdc>)
 80141a8:	6819      	ldr	r1, [r3, #0]
 80141aa:	4b21      	ldr	r3, [pc, #132]	; (8014230 <tcp_timewait_input+0xe0>)
 80141ac:	881b      	ldrh	r3, [r3, #0]
 80141ae:	461a      	mov	r2, r3
 80141b0:	4b1d      	ldr	r3, [pc, #116]	; (8014228 <tcp_timewait_input+0xd8>)
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80141b6:	4b1f      	ldr	r3, [pc, #124]	; (8014234 <tcp_timewait_input+0xe4>)
 80141b8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80141ba:	885b      	ldrh	r3, [r3, #2]
 80141bc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80141be:	4a1d      	ldr	r2, [pc, #116]	; (8014234 <tcp_timewait_input+0xe4>)
 80141c0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80141c2:	8812      	ldrh	r2, [r2, #0]
 80141c4:	b292      	uxth	r2, r2
 80141c6:	9202      	str	r2, [sp, #8]
 80141c8:	9301      	str	r3, [sp, #4]
 80141ca:	4b1b      	ldr	r3, [pc, #108]	; (8014238 <tcp_timewait_input+0xe8>)
 80141cc:	9300      	str	r3, [sp, #0]
 80141ce:	4b1b      	ldr	r3, [pc, #108]	; (801423c <tcp_timewait_input+0xec>)
 80141d0:	4602      	mov	r2, r0
 80141d2:	6878      	ldr	r0, [r7, #4]
 80141d4:	f003 faca 	bl	801776c <tcp_rst>
      return;
 80141d8:	e01b      	b.n	8014212 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80141da:	4b0f      	ldr	r3, [pc, #60]	; (8014218 <tcp_timewait_input+0xc8>)
 80141dc:	781b      	ldrb	r3, [r3, #0]
 80141de:	f003 0301 	and.w	r3, r3, #1
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d003      	beq.n	80141ee <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80141e6:	4b16      	ldr	r3, [pc, #88]	; (8014240 <tcp_timewait_input+0xf0>)
 80141e8:	681a      	ldr	r2, [r3, #0]
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80141ee:	4b10      	ldr	r3, [pc, #64]	; (8014230 <tcp_timewait_input+0xe0>)
 80141f0:	881b      	ldrh	r3, [r3, #0]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d00c      	beq.n	8014210 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	8b5b      	ldrh	r3, [r3, #26]
 80141fa:	f043 0302 	orr.w	r3, r3, #2
 80141fe:	b29a      	uxth	r2, r3
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014204:	6878      	ldr	r0, [r7, #4]
 8014206:	f002 fcfd 	bl	8016c04 <tcp_output>
  }
  return;
 801420a:	e001      	b.n	8014210 <tcp_timewait_input+0xc0>
    return;
 801420c:	bf00      	nop
 801420e:	e000      	b.n	8014212 <tcp_timewait_input+0xc2>
  return;
 8014210:	bf00      	nop
}
 8014212:	3708      	adds	r7, #8
 8014214:	46bd      	mov	sp, r7
 8014216:	bd80      	pop	{r7, pc}
 8014218:	20007090 	.word	0x20007090
 801421c:	0801f504 	.word	0x0801f504
 8014220:	0801f71c 	.word	0x0801f71c
 8014224:	0801f550 	.word	0x0801f550
 8014228:	20007084 	.word	0x20007084
 801422c:	20007088 	.word	0x20007088
 8014230:	2000708e 	.word	0x2000708e
 8014234:	20007074 	.word	0x20007074
 8014238:	20000780 	.word	0x20000780
 801423c:	20000784 	.word	0x20000784
 8014240:	2000704c 	.word	0x2000704c

08014244 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8014244:	b590      	push	{r4, r7, lr}
 8014246:	b08d      	sub	sp, #52	; 0x34
 8014248:	af04      	add	r7, sp, #16
 801424a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801424c:	2300      	movs	r3, #0
 801424e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8014250:	2300      	movs	r3, #0
 8014252:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	2b00      	cmp	r3, #0
 8014258:	d106      	bne.n	8014268 <tcp_process+0x24>
 801425a:	4b9d      	ldr	r3, [pc, #628]	; (80144d0 <tcp_process+0x28c>)
 801425c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8014260:	499c      	ldr	r1, [pc, #624]	; (80144d4 <tcp_process+0x290>)
 8014262:	489d      	ldr	r0, [pc, #628]	; (80144d8 <tcp_process+0x294>)
 8014264:	f007 f800 	bl	801b268 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8014268:	4b9c      	ldr	r3, [pc, #624]	; (80144dc <tcp_process+0x298>)
 801426a:	781b      	ldrb	r3, [r3, #0]
 801426c:	f003 0304 	and.w	r3, r3, #4
 8014270:	2b00      	cmp	r3, #0
 8014272:	d04e      	beq.n	8014312 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	7d1b      	ldrb	r3, [r3, #20]
 8014278:	2b02      	cmp	r3, #2
 801427a:	d108      	bne.n	801428e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014280:	4b97      	ldr	r3, [pc, #604]	; (80144e0 <tcp_process+0x29c>)
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	429a      	cmp	r2, r3
 8014286:	d123      	bne.n	80142d0 <tcp_process+0x8c>
        acceptable = 1;
 8014288:	2301      	movs	r3, #1
 801428a:	76fb      	strb	r3, [r7, #27]
 801428c:	e020      	b.n	80142d0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014292:	4b94      	ldr	r3, [pc, #592]	; (80144e4 <tcp_process+0x2a0>)
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	429a      	cmp	r2, r3
 8014298:	d102      	bne.n	80142a0 <tcp_process+0x5c>
        acceptable = 1;
 801429a:	2301      	movs	r3, #1
 801429c:	76fb      	strb	r3, [r7, #27]
 801429e:	e017      	b.n	80142d0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80142a0:	4b90      	ldr	r3, [pc, #576]	; (80144e4 <tcp_process+0x2a0>)
 80142a2:	681a      	ldr	r2, [r3, #0]
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142a8:	1ad3      	subs	r3, r2, r3
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	db10      	blt.n	80142d0 <tcp_process+0x8c>
 80142ae:	4b8d      	ldr	r3, [pc, #564]	; (80144e4 <tcp_process+0x2a0>)
 80142b0:	681a      	ldr	r2, [r3, #0]
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142b6:	6879      	ldr	r1, [r7, #4]
 80142b8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80142ba:	440b      	add	r3, r1
 80142bc:	1ad3      	subs	r3, r2, r3
 80142be:	2b00      	cmp	r3, #0
 80142c0:	dc06      	bgt.n	80142d0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	8b5b      	ldrh	r3, [r3, #26]
 80142c6:	f043 0302 	orr.w	r3, r3, #2
 80142ca:	b29a      	uxth	r2, r3
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80142d0:	7efb      	ldrb	r3, [r7, #27]
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d01b      	beq.n	801430e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	7d1b      	ldrb	r3, [r3, #20]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d106      	bne.n	80142ec <tcp_process+0xa8>
 80142de:	4b7c      	ldr	r3, [pc, #496]	; (80144d0 <tcp_process+0x28c>)
 80142e0:	f44f 724e 	mov.w	r2, #824	; 0x338
 80142e4:	4980      	ldr	r1, [pc, #512]	; (80144e8 <tcp_process+0x2a4>)
 80142e6:	487c      	ldr	r0, [pc, #496]	; (80144d8 <tcp_process+0x294>)
 80142e8:	f006 ffbe 	bl	801b268 <iprintf>
      recv_flags |= TF_RESET;
 80142ec:	4b7f      	ldr	r3, [pc, #508]	; (80144ec <tcp_process+0x2a8>)
 80142ee:	781b      	ldrb	r3, [r3, #0]
 80142f0:	f043 0308 	orr.w	r3, r3, #8
 80142f4:	b2da      	uxtb	r2, r3
 80142f6:	4b7d      	ldr	r3, [pc, #500]	; (80144ec <tcp_process+0x2a8>)
 80142f8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	8b5b      	ldrh	r3, [r3, #26]
 80142fe:	f023 0301 	bic.w	r3, r3, #1
 8014302:	b29a      	uxth	r2, r3
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8014308:	f06f 030d 	mvn.w	r3, #13
 801430c:	e37a      	b.n	8014a04 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801430e:	2300      	movs	r3, #0
 8014310:	e378      	b.n	8014a04 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8014312:	4b72      	ldr	r3, [pc, #456]	; (80144dc <tcp_process+0x298>)
 8014314:	781b      	ldrb	r3, [r3, #0]
 8014316:	f003 0302 	and.w	r3, r3, #2
 801431a:	2b00      	cmp	r3, #0
 801431c:	d010      	beq.n	8014340 <tcp_process+0xfc>
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	7d1b      	ldrb	r3, [r3, #20]
 8014322:	2b02      	cmp	r3, #2
 8014324:	d00c      	beq.n	8014340 <tcp_process+0xfc>
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	7d1b      	ldrb	r3, [r3, #20]
 801432a:	2b03      	cmp	r3, #3
 801432c:	d008      	beq.n	8014340 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	8b5b      	ldrh	r3, [r3, #26]
 8014332:	f043 0302 	orr.w	r3, r3, #2
 8014336:	b29a      	uxth	r2, r3
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801433c:	2300      	movs	r3, #0
 801433e:	e361      	b.n	8014a04 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	8b5b      	ldrh	r3, [r3, #26]
 8014344:	f003 0310 	and.w	r3, r3, #16
 8014348:	2b00      	cmp	r3, #0
 801434a:	d103      	bne.n	8014354 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801434c:	4b68      	ldr	r3, [pc, #416]	; (80144f0 <tcp_process+0x2ac>)
 801434e:	681a      	ldr	r2, [r3, #0]
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	2200      	movs	r2, #0
 8014358:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	2200      	movs	r2, #0
 8014360:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8014364:	6878      	ldr	r0, [r7, #4]
 8014366:	f001 fc2f 	bl	8015bc8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	7d1b      	ldrb	r3, [r3, #20]
 801436e:	3b02      	subs	r3, #2
 8014370:	2b07      	cmp	r3, #7
 8014372:	f200 8337 	bhi.w	80149e4 <tcp_process+0x7a0>
 8014376:	a201      	add	r2, pc, #4	; (adr r2, 801437c <tcp_process+0x138>)
 8014378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801437c:	0801439d 	.word	0x0801439d
 8014380:	080145cd 	.word	0x080145cd
 8014384:	08014745 	.word	0x08014745
 8014388:	0801476f 	.word	0x0801476f
 801438c:	08014893 	.word	0x08014893
 8014390:	08014745 	.word	0x08014745
 8014394:	0801491f 	.word	0x0801491f
 8014398:	080149af 	.word	0x080149af
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801439c:	4b4f      	ldr	r3, [pc, #316]	; (80144dc <tcp_process+0x298>)
 801439e:	781b      	ldrb	r3, [r3, #0]
 80143a0:	f003 0310 	and.w	r3, r3, #16
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	f000 80e4 	beq.w	8014572 <tcp_process+0x32e>
 80143aa:	4b4c      	ldr	r3, [pc, #304]	; (80144dc <tcp_process+0x298>)
 80143ac:	781b      	ldrb	r3, [r3, #0]
 80143ae:	f003 0302 	and.w	r3, r3, #2
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	f000 80dd 	beq.w	8014572 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80143bc:	1c5a      	adds	r2, r3, #1
 80143be:	4b48      	ldr	r3, [pc, #288]	; (80144e0 <tcp_process+0x29c>)
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	429a      	cmp	r2, r3
 80143c4:	f040 80d5 	bne.w	8014572 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80143c8:	4b46      	ldr	r3, [pc, #280]	; (80144e4 <tcp_process+0x2a0>)
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	1c5a      	adds	r2, r3, #1
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80143da:	4b41      	ldr	r3, [pc, #260]	; (80144e0 <tcp_process+0x29c>)
 80143dc:	681a      	ldr	r2, [r3, #0]
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80143e2:	4b44      	ldr	r3, [pc, #272]	; (80144f4 <tcp_process+0x2b0>)
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	89db      	ldrh	r3, [r3, #14]
 80143e8:	b29a      	uxth	r2, r3
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80143fc:	4b39      	ldr	r3, [pc, #228]	; (80144e4 <tcp_process+0x2a0>)
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	1e5a      	subs	r2, r3, #1
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	2204      	movs	r2, #4
 801440a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	3304      	adds	r3, #4
 8014414:	4618      	mov	r0, r3
 8014416:	f004 ff6f 	bl	80192f8 <ip4_route>
 801441a:	4601      	mov	r1, r0
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	3304      	adds	r3, #4
 8014420:	461a      	mov	r2, r3
 8014422:	4620      	mov	r0, r4
 8014424:	f7ff f88c 	bl	8013540 <tcp_eff_send_mss_netif>
 8014428:	4603      	mov	r3, r0
 801442a:	461a      	mov	r2, r3
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014434:	009a      	lsls	r2, r3, #2
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801443a:	005b      	lsls	r3, r3, #1
 801443c:	f241 111c 	movw	r1, #4380	; 0x111c
 8014440:	428b      	cmp	r3, r1
 8014442:	bf38      	it	cc
 8014444:	460b      	movcc	r3, r1
 8014446:	429a      	cmp	r2, r3
 8014448:	d204      	bcs.n	8014454 <tcp_process+0x210>
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801444e:	009b      	lsls	r3, r3, #2
 8014450:	b29b      	uxth	r3, r3
 8014452:	e00d      	b.n	8014470 <tcp_process+0x22c>
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014458:	005b      	lsls	r3, r3, #1
 801445a:	f241 121c 	movw	r2, #4380	; 0x111c
 801445e:	4293      	cmp	r3, r2
 8014460:	d904      	bls.n	801446c <tcp_process+0x228>
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014466:	005b      	lsls	r3, r3, #1
 8014468:	b29b      	uxth	r3, r3
 801446a:	e001      	b.n	8014470 <tcp_process+0x22c>
 801446c:	f241 131c 	movw	r3, #4380	; 0x111c
 8014470:	687a      	ldr	r2, [r7, #4]
 8014472:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801447c:	2b00      	cmp	r3, #0
 801447e:	d106      	bne.n	801448e <tcp_process+0x24a>
 8014480:	4b13      	ldr	r3, [pc, #76]	; (80144d0 <tcp_process+0x28c>)
 8014482:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8014486:	491c      	ldr	r1, [pc, #112]	; (80144f8 <tcp_process+0x2b4>)
 8014488:	4813      	ldr	r0, [pc, #76]	; (80144d8 <tcp_process+0x294>)
 801448a:	f006 feed 	bl	801b268 <iprintf>
        --pcb->snd_queuelen;
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014494:	3b01      	subs	r3, #1
 8014496:	b29a      	uxth	r2, r3
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80144a2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80144a4:	69fb      	ldr	r3, [r7, #28]
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d12a      	bne.n	8014500 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80144ae:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80144b0:	69fb      	ldr	r3, [r7, #28]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d106      	bne.n	80144c4 <tcp_process+0x280>
 80144b6:	4b06      	ldr	r3, [pc, #24]	; (80144d0 <tcp_process+0x28c>)
 80144b8:	f44f 725d 	mov.w	r2, #884	; 0x374
 80144bc:	490f      	ldr	r1, [pc, #60]	; (80144fc <tcp_process+0x2b8>)
 80144be:	4806      	ldr	r0, [pc, #24]	; (80144d8 <tcp_process+0x294>)
 80144c0:	f006 fed2 	bl	801b268 <iprintf>
          pcb->unsent = rseg->next;
 80144c4:	69fb      	ldr	r3, [r7, #28]
 80144c6:	681a      	ldr	r2, [r3, #0]
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	66da      	str	r2, [r3, #108]	; 0x6c
 80144cc:	e01c      	b.n	8014508 <tcp_process+0x2c4>
 80144ce:	bf00      	nop
 80144d0:	0801f504 	.word	0x0801f504
 80144d4:	0801f73c 	.word	0x0801f73c
 80144d8:	0801f550 	.word	0x0801f550
 80144dc:	20007090 	.word	0x20007090
 80144e0:	20007088 	.word	0x20007088
 80144e4:	20007084 	.word	0x20007084
 80144e8:	0801f758 	.word	0x0801f758
 80144ec:	20007091 	.word	0x20007091
 80144f0:	2000704c 	.word	0x2000704c
 80144f4:	20007074 	.word	0x20007074
 80144f8:	0801f778 	.word	0x0801f778
 80144fc:	0801f790 	.word	0x0801f790
        } else {
          pcb->unacked = rseg->next;
 8014500:	69fb      	ldr	r3, [r7, #28]
 8014502:	681a      	ldr	r2, [r3, #0]
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8014508:	69f8      	ldr	r0, [r7, #28]
 801450a:	f7fe fc72 	bl	8012df2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014512:	2b00      	cmp	r3, #0
 8014514:	d104      	bne.n	8014520 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801451c:	861a      	strh	r2, [r3, #48]	; 0x30
 801451e:	e006      	b.n	801452e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	2200      	movs	r2, #0
 8014524:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	2200      	movs	r2, #0
 801452a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014534:	2b00      	cmp	r3, #0
 8014536:	d00a      	beq.n	801454e <tcp_process+0x30a>
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801453e:	687a      	ldr	r2, [r7, #4]
 8014540:	6910      	ldr	r0, [r2, #16]
 8014542:	2200      	movs	r2, #0
 8014544:	6879      	ldr	r1, [r7, #4]
 8014546:	4798      	blx	r3
 8014548:	4603      	mov	r3, r0
 801454a:	76bb      	strb	r3, [r7, #26]
 801454c:	e001      	b.n	8014552 <tcp_process+0x30e>
 801454e:	2300      	movs	r3, #0
 8014550:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8014552:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014556:	f113 0f0d 	cmn.w	r3, #13
 801455a:	d102      	bne.n	8014562 <tcp_process+0x31e>
          return ERR_ABRT;
 801455c:	f06f 030c 	mvn.w	r3, #12
 8014560:	e250      	b.n	8014a04 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	8b5b      	ldrh	r3, [r3, #26]
 8014566:	f043 0302 	orr.w	r3, r3, #2
 801456a:	b29a      	uxth	r2, r3
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8014570:	e23a      	b.n	80149e8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8014572:	4b98      	ldr	r3, [pc, #608]	; (80147d4 <tcp_process+0x590>)
 8014574:	781b      	ldrb	r3, [r3, #0]
 8014576:	f003 0310 	and.w	r3, r3, #16
 801457a:	2b00      	cmp	r3, #0
 801457c:	f000 8234 	beq.w	80149e8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014580:	4b95      	ldr	r3, [pc, #596]	; (80147d8 <tcp_process+0x594>)
 8014582:	6819      	ldr	r1, [r3, #0]
 8014584:	4b95      	ldr	r3, [pc, #596]	; (80147dc <tcp_process+0x598>)
 8014586:	881b      	ldrh	r3, [r3, #0]
 8014588:	461a      	mov	r2, r3
 801458a:	4b95      	ldr	r3, [pc, #596]	; (80147e0 <tcp_process+0x59c>)
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014590:	4b94      	ldr	r3, [pc, #592]	; (80147e4 <tcp_process+0x5a0>)
 8014592:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014594:	885b      	ldrh	r3, [r3, #2]
 8014596:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014598:	4a92      	ldr	r2, [pc, #584]	; (80147e4 <tcp_process+0x5a0>)
 801459a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801459c:	8812      	ldrh	r2, [r2, #0]
 801459e:	b292      	uxth	r2, r2
 80145a0:	9202      	str	r2, [sp, #8]
 80145a2:	9301      	str	r3, [sp, #4]
 80145a4:	4b90      	ldr	r3, [pc, #576]	; (80147e8 <tcp_process+0x5a4>)
 80145a6:	9300      	str	r3, [sp, #0]
 80145a8:	4b90      	ldr	r3, [pc, #576]	; (80147ec <tcp_process+0x5a8>)
 80145aa:	4602      	mov	r2, r0
 80145ac:	6878      	ldr	r0, [r7, #4]
 80145ae:	f003 f8dd 	bl	801776c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80145b8:	2b05      	cmp	r3, #5
 80145ba:	f200 8215 	bhi.w	80149e8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	2200      	movs	r2, #0
 80145c2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80145c4:	6878      	ldr	r0, [r7, #4]
 80145c6:	f002 fea9 	bl	801731c <tcp_rexmit_rto>
      break;
 80145ca:	e20d      	b.n	80149e8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80145cc:	4b81      	ldr	r3, [pc, #516]	; (80147d4 <tcp_process+0x590>)
 80145ce:	781b      	ldrb	r3, [r3, #0]
 80145d0:	f003 0310 	and.w	r3, r3, #16
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	f000 80a1 	beq.w	801471c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80145da:	4b7f      	ldr	r3, [pc, #508]	; (80147d8 <tcp_process+0x594>)
 80145dc:	681a      	ldr	r2, [r3, #0]
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80145e2:	1ad3      	subs	r3, r2, r3
 80145e4:	3b01      	subs	r3, #1
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	db7e      	blt.n	80146e8 <tcp_process+0x4a4>
 80145ea:	4b7b      	ldr	r3, [pc, #492]	; (80147d8 <tcp_process+0x594>)
 80145ec:	681a      	ldr	r2, [r3, #0]
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80145f2:	1ad3      	subs	r3, r2, r3
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	dc77      	bgt.n	80146e8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	2204      	movs	r2, #4
 80145fc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014602:	2b00      	cmp	r3, #0
 8014604:	d102      	bne.n	801460c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8014606:	23fa      	movs	r3, #250	; 0xfa
 8014608:	76bb      	strb	r3, [r7, #26]
 801460a:	e01d      	b.n	8014648 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014610:	699b      	ldr	r3, [r3, #24]
 8014612:	2b00      	cmp	r3, #0
 8014614:	d106      	bne.n	8014624 <tcp_process+0x3e0>
 8014616:	4b76      	ldr	r3, [pc, #472]	; (80147f0 <tcp_process+0x5ac>)
 8014618:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801461c:	4975      	ldr	r1, [pc, #468]	; (80147f4 <tcp_process+0x5b0>)
 801461e:	4876      	ldr	r0, [pc, #472]	; (80147f8 <tcp_process+0x5b4>)
 8014620:	f006 fe22 	bl	801b268 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014628:	699b      	ldr	r3, [r3, #24]
 801462a:	2b00      	cmp	r3, #0
 801462c:	d00a      	beq.n	8014644 <tcp_process+0x400>
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014632:	699b      	ldr	r3, [r3, #24]
 8014634:	687a      	ldr	r2, [r7, #4]
 8014636:	6910      	ldr	r0, [r2, #16]
 8014638:	2200      	movs	r2, #0
 801463a:	6879      	ldr	r1, [r7, #4]
 801463c:	4798      	blx	r3
 801463e:	4603      	mov	r3, r0
 8014640:	76bb      	strb	r3, [r7, #26]
 8014642:	e001      	b.n	8014648 <tcp_process+0x404>
 8014644:	23f0      	movs	r3, #240	; 0xf0
 8014646:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8014648:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801464c:	2b00      	cmp	r3, #0
 801464e:	d00a      	beq.n	8014666 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8014650:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014654:	f113 0f0d 	cmn.w	r3, #13
 8014658:	d002      	beq.n	8014660 <tcp_process+0x41c>
              tcp_abort(pcb);
 801465a:	6878      	ldr	r0, [r7, #4]
 801465c:	f7fd fd7c 	bl	8012158 <tcp_abort>
            }
            return ERR_ABRT;
 8014660:	f06f 030c 	mvn.w	r3, #12
 8014664:	e1ce      	b.n	8014a04 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8014666:	6878      	ldr	r0, [r7, #4]
 8014668:	f000 fae0 	bl	8014c2c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801466c:	4b63      	ldr	r3, [pc, #396]	; (80147fc <tcp_process+0x5b8>)
 801466e:	881b      	ldrh	r3, [r3, #0]
 8014670:	2b00      	cmp	r3, #0
 8014672:	d005      	beq.n	8014680 <tcp_process+0x43c>
            recv_acked--;
 8014674:	4b61      	ldr	r3, [pc, #388]	; (80147fc <tcp_process+0x5b8>)
 8014676:	881b      	ldrh	r3, [r3, #0]
 8014678:	3b01      	subs	r3, #1
 801467a:	b29a      	uxth	r2, r3
 801467c:	4b5f      	ldr	r3, [pc, #380]	; (80147fc <tcp_process+0x5b8>)
 801467e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014684:	009a      	lsls	r2, r3, #2
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801468a:	005b      	lsls	r3, r3, #1
 801468c:	f241 111c 	movw	r1, #4380	; 0x111c
 8014690:	428b      	cmp	r3, r1
 8014692:	bf38      	it	cc
 8014694:	460b      	movcc	r3, r1
 8014696:	429a      	cmp	r2, r3
 8014698:	d204      	bcs.n	80146a4 <tcp_process+0x460>
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801469e:	009b      	lsls	r3, r3, #2
 80146a0:	b29b      	uxth	r3, r3
 80146a2:	e00d      	b.n	80146c0 <tcp_process+0x47c>
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80146a8:	005b      	lsls	r3, r3, #1
 80146aa:	f241 121c 	movw	r2, #4380	; 0x111c
 80146ae:	4293      	cmp	r3, r2
 80146b0:	d904      	bls.n	80146bc <tcp_process+0x478>
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80146b6:	005b      	lsls	r3, r3, #1
 80146b8:	b29b      	uxth	r3, r3
 80146ba:	e001      	b.n	80146c0 <tcp_process+0x47c>
 80146bc:	f241 131c 	movw	r3, #4380	; 0x111c
 80146c0:	687a      	ldr	r2, [r7, #4]
 80146c2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80146c6:	4b4e      	ldr	r3, [pc, #312]	; (8014800 <tcp_process+0x5bc>)
 80146c8:	781b      	ldrb	r3, [r3, #0]
 80146ca:	f003 0320 	and.w	r3, r3, #32
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d037      	beq.n	8014742 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	8b5b      	ldrh	r3, [r3, #26]
 80146d6:	f043 0302 	orr.w	r3, r3, #2
 80146da:	b29a      	uxth	r2, r3
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	2207      	movs	r2, #7
 80146e4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80146e6:	e02c      	b.n	8014742 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80146e8:	4b3b      	ldr	r3, [pc, #236]	; (80147d8 <tcp_process+0x594>)
 80146ea:	6819      	ldr	r1, [r3, #0]
 80146ec:	4b3b      	ldr	r3, [pc, #236]	; (80147dc <tcp_process+0x598>)
 80146ee:	881b      	ldrh	r3, [r3, #0]
 80146f0:	461a      	mov	r2, r3
 80146f2:	4b3b      	ldr	r3, [pc, #236]	; (80147e0 <tcp_process+0x59c>)
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80146f8:	4b3a      	ldr	r3, [pc, #232]	; (80147e4 <tcp_process+0x5a0>)
 80146fa:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80146fc:	885b      	ldrh	r3, [r3, #2]
 80146fe:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014700:	4a38      	ldr	r2, [pc, #224]	; (80147e4 <tcp_process+0x5a0>)
 8014702:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014704:	8812      	ldrh	r2, [r2, #0]
 8014706:	b292      	uxth	r2, r2
 8014708:	9202      	str	r2, [sp, #8]
 801470a:	9301      	str	r3, [sp, #4]
 801470c:	4b36      	ldr	r3, [pc, #216]	; (80147e8 <tcp_process+0x5a4>)
 801470e:	9300      	str	r3, [sp, #0]
 8014710:	4b36      	ldr	r3, [pc, #216]	; (80147ec <tcp_process+0x5a8>)
 8014712:	4602      	mov	r2, r0
 8014714:	6878      	ldr	r0, [r7, #4]
 8014716:	f003 f829 	bl	801776c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801471a:	e167      	b.n	80149ec <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801471c:	4b2d      	ldr	r3, [pc, #180]	; (80147d4 <tcp_process+0x590>)
 801471e:	781b      	ldrb	r3, [r3, #0]
 8014720:	f003 0302 	and.w	r3, r3, #2
 8014724:	2b00      	cmp	r3, #0
 8014726:	f000 8161 	beq.w	80149ec <tcp_process+0x7a8>
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801472e:	1e5a      	subs	r2, r3, #1
 8014730:	4b2b      	ldr	r3, [pc, #172]	; (80147e0 <tcp_process+0x59c>)
 8014732:	681b      	ldr	r3, [r3, #0]
 8014734:	429a      	cmp	r2, r3
 8014736:	f040 8159 	bne.w	80149ec <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801473a:	6878      	ldr	r0, [r7, #4]
 801473c:	f002 fe10 	bl	8017360 <tcp_rexmit>
      break;
 8014740:	e154      	b.n	80149ec <tcp_process+0x7a8>
 8014742:	e153      	b.n	80149ec <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8014744:	6878      	ldr	r0, [r7, #4]
 8014746:	f000 fa71 	bl	8014c2c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801474a:	4b2d      	ldr	r3, [pc, #180]	; (8014800 <tcp_process+0x5bc>)
 801474c:	781b      	ldrb	r3, [r3, #0]
 801474e:	f003 0320 	and.w	r3, r3, #32
 8014752:	2b00      	cmp	r3, #0
 8014754:	f000 814c 	beq.w	80149f0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	8b5b      	ldrh	r3, [r3, #26]
 801475c:	f043 0302 	orr.w	r3, r3, #2
 8014760:	b29a      	uxth	r2, r3
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	2207      	movs	r2, #7
 801476a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801476c:	e140      	b.n	80149f0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801476e:	6878      	ldr	r0, [r7, #4]
 8014770:	f000 fa5c 	bl	8014c2c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014774:	4b22      	ldr	r3, [pc, #136]	; (8014800 <tcp_process+0x5bc>)
 8014776:	781b      	ldrb	r3, [r3, #0]
 8014778:	f003 0320 	and.w	r3, r3, #32
 801477c:	2b00      	cmp	r3, #0
 801477e:	d071      	beq.n	8014864 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014780:	4b14      	ldr	r3, [pc, #80]	; (80147d4 <tcp_process+0x590>)
 8014782:	781b      	ldrb	r3, [r3, #0]
 8014784:	f003 0310 	and.w	r3, r3, #16
 8014788:	2b00      	cmp	r3, #0
 801478a:	d060      	beq.n	801484e <tcp_process+0x60a>
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014790:	4b11      	ldr	r3, [pc, #68]	; (80147d8 <tcp_process+0x594>)
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	429a      	cmp	r2, r3
 8014796:	d15a      	bne.n	801484e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801479c:	2b00      	cmp	r3, #0
 801479e:	d156      	bne.n	801484e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	8b5b      	ldrh	r3, [r3, #26]
 80147a4:	f043 0302 	orr.w	r3, r3, #2
 80147a8:	b29a      	uxth	r2, r3
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80147ae:	6878      	ldr	r0, [r7, #4]
 80147b0:	f7fe fdbc 	bl	801332c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80147b4:	4b13      	ldr	r3, [pc, #76]	; (8014804 <tcp_process+0x5c0>)
 80147b6:	681b      	ldr	r3, [r3, #0]
 80147b8:	687a      	ldr	r2, [r7, #4]
 80147ba:	429a      	cmp	r2, r3
 80147bc:	d105      	bne.n	80147ca <tcp_process+0x586>
 80147be:	4b11      	ldr	r3, [pc, #68]	; (8014804 <tcp_process+0x5c0>)
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	68db      	ldr	r3, [r3, #12]
 80147c4:	4a0f      	ldr	r2, [pc, #60]	; (8014804 <tcp_process+0x5c0>)
 80147c6:	6013      	str	r3, [r2, #0]
 80147c8:	e02e      	b.n	8014828 <tcp_process+0x5e4>
 80147ca:	4b0e      	ldr	r3, [pc, #56]	; (8014804 <tcp_process+0x5c0>)
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	617b      	str	r3, [r7, #20]
 80147d0:	e027      	b.n	8014822 <tcp_process+0x5de>
 80147d2:	bf00      	nop
 80147d4:	20007090 	.word	0x20007090
 80147d8:	20007088 	.word	0x20007088
 80147dc:	2000708e 	.word	0x2000708e
 80147e0:	20007084 	.word	0x20007084
 80147e4:	20007074 	.word	0x20007074
 80147e8:	20000780 	.word	0x20000780
 80147ec:	20000784 	.word	0x20000784
 80147f0:	0801f504 	.word	0x0801f504
 80147f4:	0801f7a4 	.word	0x0801f7a4
 80147f8:	0801f550 	.word	0x0801f550
 80147fc:	2000708c 	.word	0x2000708c
 8014800:	20007091 	.word	0x20007091
 8014804:	20007058 	.word	0x20007058
 8014808:	697b      	ldr	r3, [r7, #20]
 801480a:	68db      	ldr	r3, [r3, #12]
 801480c:	687a      	ldr	r2, [r7, #4]
 801480e:	429a      	cmp	r2, r3
 8014810:	d104      	bne.n	801481c <tcp_process+0x5d8>
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	68da      	ldr	r2, [r3, #12]
 8014816:	697b      	ldr	r3, [r7, #20]
 8014818:	60da      	str	r2, [r3, #12]
 801481a:	e005      	b.n	8014828 <tcp_process+0x5e4>
 801481c:	697b      	ldr	r3, [r7, #20]
 801481e:	68db      	ldr	r3, [r3, #12]
 8014820:	617b      	str	r3, [r7, #20]
 8014822:	697b      	ldr	r3, [r7, #20]
 8014824:	2b00      	cmp	r3, #0
 8014826:	d1ef      	bne.n	8014808 <tcp_process+0x5c4>
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	2200      	movs	r2, #0
 801482c:	60da      	str	r2, [r3, #12]
 801482e:	4b77      	ldr	r3, [pc, #476]	; (8014a0c <tcp_process+0x7c8>)
 8014830:	2201      	movs	r2, #1
 8014832:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	220a      	movs	r2, #10
 8014838:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801483a:	4b75      	ldr	r3, [pc, #468]	; (8014a10 <tcp_process+0x7cc>)
 801483c:	681a      	ldr	r2, [r3, #0]
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	60da      	str	r2, [r3, #12]
 8014842:	4a73      	ldr	r2, [pc, #460]	; (8014a10 <tcp_process+0x7cc>)
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	6013      	str	r3, [r2, #0]
 8014848:	f003 f952 	bl	8017af0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801484c:	e0d2      	b.n	80149f4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	8b5b      	ldrh	r3, [r3, #26]
 8014852:	f043 0302 	orr.w	r3, r3, #2
 8014856:	b29a      	uxth	r2, r3
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	2208      	movs	r2, #8
 8014860:	751a      	strb	r2, [r3, #20]
      break;
 8014862:	e0c7      	b.n	80149f4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014864:	4b6b      	ldr	r3, [pc, #428]	; (8014a14 <tcp_process+0x7d0>)
 8014866:	781b      	ldrb	r3, [r3, #0]
 8014868:	f003 0310 	and.w	r3, r3, #16
 801486c:	2b00      	cmp	r3, #0
 801486e:	f000 80c1 	beq.w	80149f4 <tcp_process+0x7b0>
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014876:	4b68      	ldr	r3, [pc, #416]	; (8014a18 <tcp_process+0x7d4>)
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	429a      	cmp	r2, r3
 801487c:	f040 80ba 	bne.w	80149f4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014884:	2b00      	cmp	r3, #0
 8014886:	f040 80b5 	bne.w	80149f4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	2206      	movs	r2, #6
 801488e:	751a      	strb	r2, [r3, #20]
      break;
 8014890:	e0b0      	b.n	80149f4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8014892:	6878      	ldr	r0, [r7, #4]
 8014894:	f000 f9ca 	bl	8014c2c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014898:	4b60      	ldr	r3, [pc, #384]	; (8014a1c <tcp_process+0x7d8>)
 801489a:	781b      	ldrb	r3, [r3, #0]
 801489c:	f003 0320 	and.w	r3, r3, #32
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	f000 80a9 	beq.w	80149f8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	8b5b      	ldrh	r3, [r3, #26]
 80148aa:	f043 0302 	orr.w	r3, r3, #2
 80148ae:	b29a      	uxth	r2, r3
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80148b4:	6878      	ldr	r0, [r7, #4]
 80148b6:	f7fe fd39 	bl	801332c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80148ba:	4b59      	ldr	r3, [pc, #356]	; (8014a20 <tcp_process+0x7dc>)
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	687a      	ldr	r2, [r7, #4]
 80148c0:	429a      	cmp	r2, r3
 80148c2:	d105      	bne.n	80148d0 <tcp_process+0x68c>
 80148c4:	4b56      	ldr	r3, [pc, #344]	; (8014a20 <tcp_process+0x7dc>)
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	68db      	ldr	r3, [r3, #12]
 80148ca:	4a55      	ldr	r2, [pc, #340]	; (8014a20 <tcp_process+0x7dc>)
 80148cc:	6013      	str	r3, [r2, #0]
 80148ce:	e013      	b.n	80148f8 <tcp_process+0x6b4>
 80148d0:	4b53      	ldr	r3, [pc, #332]	; (8014a20 <tcp_process+0x7dc>)
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	613b      	str	r3, [r7, #16]
 80148d6:	e00c      	b.n	80148f2 <tcp_process+0x6ae>
 80148d8:	693b      	ldr	r3, [r7, #16]
 80148da:	68db      	ldr	r3, [r3, #12]
 80148dc:	687a      	ldr	r2, [r7, #4]
 80148de:	429a      	cmp	r2, r3
 80148e0:	d104      	bne.n	80148ec <tcp_process+0x6a8>
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	68da      	ldr	r2, [r3, #12]
 80148e6:	693b      	ldr	r3, [r7, #16]
 80148e8:	60da      	str	r2, [r3, #12]
 80148ea:	e005      	b.n	80148f8 <tcp_process+0x6b4>
 80148ec:	693b      	ldr	r3, [r7, #16]
 80148ee:	68db      	ldr	r3, [r3, #12]
 80148f0:	613b      	str	r3, [r7, #16]
 80148f2:	693b      	ldr	r3, [r7, #16]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d1ef      	bne.n	80148d8 <tcp_process+0x694>
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	2200      	movs	r2, #0
 80148fc:	60da      	str	r2, [r3, #12]
 80148fe:	4b43      	ldr	r3, [pc, #268]	; (8014a0c <tcp_process+0x7c8>)
 8014900:	2201      	movs	r2, #1
 8014902:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	220a      	movs	r2, #10
 8014908:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801490a:	4b41      	ldr	r3, [pc, #260]	; (8014a10 <tcp_process+0x7cc>)
 801490c:	681a      	ldr	r2, [r3, #0]
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	60da      	str	r2, [r3, #12]
 8014912:	4a3f      	ldr	r2, [pc, #252]	; (8014a10 <tcp_process+0x7cc>)
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	6013      	str	r3, [r2, #0]
 8014918:	f003 f8ea 	bl	8017af0 <tcp_timer_needed>
      }
      break;
 801491c:	e06c      	b.n	80149f8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801491e:	6878      	ldr	r0, [r7, #4]
 8014920:	f000 f984 	bl	8014c2c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014924:	4b3b      	ldr	r3, [pc, #236]	; (8014a14 <tcp_process+0x7d0>)
 8014926:	781b      	ldrb	r3, [r3, #0]
 8014928:	f003 0310 	and.w	r3, r3, #16
 801492c:	2b00      	cmp	r3, #0
 801492e:	d065      	beq.n	80149fc <tcp_process+0x7b8>
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014934:	4b38      	ldr	r3, [pc, #224]	; (8014a18 <tcp_process+0x7d4>)
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	429a      	cmp	r2, r3
 801493a:	d15f      	bne.n	80149fc <tcp_process+0x7b8>
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014940:	2b00      	cmp	r3, #0
 8014942:	d15b      	bne.n	80149fc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8014944:	6878      	ldr	r0, [r7, #4]
 8014946:	f7fe fcf1 	bl	801332c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801494a:	4b35      	ldr	r3, [pc, #212]	; (8014a20 <tcp_process+0x7dc>)
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	687a      	ldr	r2, [r7, #4]
 8014950:	429a      	cmp	r2, r3
 8014952:	d105      	bne.n	8014960 <tcp_process+0x71c>
 8014954:	4b32      	ldr	r3, [pc, #200]	; (8014a20 <tcp_process+0x7dc>)
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	68db      	ldr	r3, [r3, #12]
 801495a:	4a31      	ldr	r2, [pc, #196]	; (8014a20 <tcp_process+0x7dc>)
 801495c:	6013      	str	r3, [r2, #0]
 801495e:	e013      	b.n	8014988 <tcp_process+0x744>
 8014960:	4b2f      	ldr	r3, [pc, #188]	; (8014a20 <tcp_process+0x7dc>)
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	60fb      	str	r3, [r7, #12]
 8014966:	e00c      	b.n	8014982 <tcp_process+0x73e>
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	68db      	ldr	r3, [r3, #12]
 801496c:	687a      	ldr	r2, [r7, #4]
 801496e:	429a      	cmp	r2, r3
 8014970:	d104      	bne.n	801497c <tcp_process+0x738>
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	68da      	ldr	r2, [r3, #12]
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	60da      	str	r2, [r3, #12]
 801497a:	e005      	b.n	8014988 <tcp_process+0x744>
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	68db      	ldr	r3, [r3, #12]
 8014980:	60fb      	str	r3, [r7, #12]
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	2b00      	cmp	r3, #0
 8014986:	d1ef      	bne.n	8014968 <tcp_process+0x724>
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	2200      	movs	r2, #0
 801498c:	60da      	str	r2, [r3, #12]
 801498e:	4b1f      	ldr	r3, [pc, #124]	; (8014a0c <tcp_process+0x7c8>)
 8014990:	2201      	movs	r2, #1
 8014992:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	220a      	movs	r2, #10
 8014998:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801499a:	4b1d      	ldr	r3, [pc, #116]	; (8014a10 <tcp_process+0x7cc>)
 801499c:	681a      	ldr	r2, [r3, #0]
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	60da      	str	r2, [r3, #12]
 80149a2:	4a1b      	ldr	r2, [pc, #108]	; (8014a10 <tcp_process+0x7cc>)
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	6013      	str	r3, [r2, #0]
 80149a8:	f003 f8a2 	bl	8017af0 <tcp_timer_needed>
      }
      break;
 80149ac:	e026      	b.n	80149fc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80149ae:	6878      	ldr	r0, [r7, #4]
 80149b0:	f000 f93c 	bl	8014c2c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80149b4:	4b17      	ldr	r3, [pc, #92]	; (8014a14 <tcp_process+0x7d0>)
 80149b6:	781b      	ldrb	r3, [r3, #0]
 80149b8:	f003 0310 	and.w	r3, r3, #16
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d01f      	beq.n	8014a00 <tcp_process+0x7bc>
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80149c4:	4b14      	ldr	r3, [pc, #80]	; (8014a18 <tcp_process+0x7d4>)
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	429a      	cmp	r2, r3
 80149ca:	d119      	bne.n	8014a00 <tcp_process+0x7bc>
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d115      	bne.n	8014a00 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80149d4:	4b11      	ldr	r3, [pc, #68]	; (8014a1c <tcp_process+0x7d8>)
 80149d6:	781b      	ldrb	r3, [r3, #0]
 80149d8:	f043 0310 	orr.w	r3, r3, #16
 80149dc:	b2da      	uxtb	r2, r3
 80149de:	4b0f      	ldr	r3, [pc, #60]	; (8014a1c <tcp_process+0x7d8>)
 80149e0:	701a      	strb	r2, [r3, #0]
      }
      break;
 80149e2:	e00d      	b.n	8014a00 <tcp_process+0x7bc>
    default:
      break;
 80149e4:	bf00      	nop
 80149e6:	e00c      	b.n	8014a02 <tcp_process+0x7be>
      break;
 80149e8:	bf00      	nop
 80149ea:	e00a      	b.n	8014a02 <tcp_process+0x7be>
      break;
 80149ec:	bf00      	nop
 80149ee:	e008      	b.n	8014a02 <tcp_process+0x7be>
      break;
 80149f0:	bf00      	nop
 80149f2:	e006      	b.n	8014a02 <tcp_process+0x7be>
      break;
 80149f4:	bf00      	nop
 80149f6:	e004      	b.n	8014a02 <tcp_process+0x7be>
      break;
 80149f8:	bf00      	nop
 80149fa:	e002      	b.n	8014a02 <tcp_process+0x7be>
      break;
 80149fc:	bf00      	nop
 80149fe:	e000      	b.n	8014a02 <tcp_process+0x7be>
      break;
 8014a00:	bf00      	nop
  }
  return ERR_OK;
 8014a02:	2300      	movs	r3, #0
}
 8014a04:	4618      	mov	r0, r3
 8014a06:	3724      	adds	r7, #36	; 0x24
 8014a08:	46bd      	mov	sp, r7
 8014a0a:	bd90      	pop	{r4, r7, pc}
 8014a0c:	20007060 	.word	0x20007060
 8014a10:	2000705c 	.word	0x2000705c
 8014a14:	20007090 	.word	0x20007090
 8014a18:	20007088 	.word	0x20007088
 8014a1c:	20007091 	.word	0x20007091
 8014a20:	20007058 	.word	0x20007058

08014a24 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8014a24:	b590      	push	{r4, r7, lr}
 8014a26:	b085      	sub	sp, #20
 8014a28:	af00      	add	r7, sp, #0
 8014a2a:	6078      	str	r0, [r7, #4]
 8014a2c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d106      	bne.n	8014a42 <tcp_oos_insert_segment+0x1e>
 8014a34:	4b3b      	ldr	r3, [pc, #236]	; (8014b24 <tcp_oos_insert_segment+0x100>)
 8014a36:	f240 421f 	movw	r2, #1055	; 0x41f
 8014a3a:	493b      	ldr	r1, [pc, #236]	; (8014b28 <tcp_oos_insert_segment+0x104>)
 8014a3c:	483b      	ldr	r0, [pc, #236]	; (8014b2c <tcp_oos_insert_segment+0x108>)
 8014a3e:	f006 fc13 	bl	801b268 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	68db      	ldr	r3, [r3, #12]
 8014a46:	899b      	ldrh	r3, [r3, #12]
 8014a48:	b29b      	uxth	r3, r3
 8014a4a:	4618      	mov	r0, r3
 8014a4c:	f7fb f966 	bl	800fd1c <lwip_htons>
 8014a50:	4603      	mov	r3, r0
 8014a52:	b2db      	uxtb	r3, r3
 8014a54:	f003 0301 	and.w	r3, r3, #1
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d028      	beq.n	8014aae <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8014a5c:	6838      	ldr	r0, [r7, #0]
 8014a5e:	f7fe f9b3 	bl	8012dc8 <tcp_segs_free>
    next = NULL;
 8014a62:	2300      	movs	r3, #0
 8014a64:	603b      	str	r3, [r7, #0]
 8014a66:	e056      	b.n	8014b16 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014a68:	683b      	ldr	r3, [r7, #0]
 8014a6a:	68db      	ldr	r3, [r3, #12]
 8014a6c:	899b      	ldrh	r3, [r3, #12]
 8014a6e:	b29b      	uxth	r3, r3
 8014a70:	4618      	mov	r0, r3
 8014a72:	f7fb f953 	bl	800fd1c <lwip_htons>
 8014a76:	4603      	mov	r3, r0
 8014a78:	b2db      	uxtb	r3, r3
 8014a7a:	f003 0301 	and.w	r3, r3, #1
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d00d      	beq.n	8014a9e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	68db      	ldr	r3, [r3, #12]
 8014a86:	899b      	ldrh	r3, [r3, #12]
 8014a88:	b29c      	uxth	r4, r3
 8014a8a:	2001      	movs	r0, #1
 8014a8c:	f7fb f946 	bl	800fd1c <lwip_htons>
 8014a90:	4603      	mov	r3, r0
 8014a92:	461a      	mov	r2, r3
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	68db      	ldr	r3, [r3, #12]
 8014a98:	4322      	orrs	r2, r4
 8014a9a:	b292      	uxth	r2, r2
 8014a9c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8014a9e:	683b      	ldr	r3, [r7, #0]
 8014aa0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8014aa2:	683b      	ldr	r3, [r7, #0]
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8014aa8:	68f8      	ldr	r0, [r7, #12]
 8014aaa:	f7fe f9a2 	bl	8012df2 <tcp_seg_free>
    while (next &&
 8014aae:	683b      	ldr	r3, [r7, #0]
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d00e      	beq.n	8014ad2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	891b      	ldrh	r3, [r3, #8]
 8014ab8:	461a      	mov	r2, r3
 8014aba:	4b1d      	ldr	r3, [pc, #116]	; (8014b30 <tcp_oos_insert_segment+0x10c>)
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	441a      	add	r2, r3
 8014ac0:	683b      	ldr	r3, [r7, #0]
 8014ac2:	68db      	ldr	r3, [r3, #12]
 8014ac4:	685b      	ldr	r3, [r3, #4]
 8014ac6:	6839      	ldr	r1, [r7, #0]
 8014ac8:	8909      	ldrh	r1, [r1, #8]
 8014aca:	440b      	add	r3, r1
 8014acc:	1ad3      	subs	r3, r2, r3
    while (next &&
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	daca      	bge.n	8014a68 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8014ad2:	683b      	ldr	r3, [r7, #0]
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d01e      	beq.n	8014b16 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	891b      	ldrh	r3, [r3, #8]
 8014adc:	461a      	mov	r2, r3
 8014ade:	4b14      	ldr	r3, [pc, #80]	; (8014b30 <tcp_oos_insert_segment+0x10c>)
 8014ae0:	681b      	ldr	r3, [r3, #0]
 8014ae2:	441a      	add	r2, r3
 8014ae4:	683b      	ldr	r3, [r7, #0]
 8014ae6:	68db      	ldr	r3, [r3, #12]
 8014ae8:	685b      	ldr	r3, [r3, #4]
 8014aea:	1ad3      	subs	r3, r2, r3
    if (next &&
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	dd12      	ble.n	8014b16 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8014af0:	683b      	ldr	r3, [r7, #0]
 8014af2:	68db      	ldr	r3, [r3, #12]
 8014af4:	685b      	ldr	r3, [r3, #4]
 8014af6:	b29a      	uxth	r2, r3
 8014af8:	4b0d      	ldr	r3, [pc, #52]	; (8014b30 <tcp_oos_insert_segment+0x10c>)
 8014afa:	681b      	ldr	r3, [r3, #0]
 8014afc:	b29b      	uxth	r3, r3
 8014afe:	1ad3      	subs	r3, r2, r3
 8014b00:	b29a      	uxth	r2, r3
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	685a      	ldr	r2, [r3, #4]
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	891b      	ldrh	r3, [r3, #8]
 8014b0e:	4619      	mov	r1, r3
 8014b10:	4610      	mov	r0, r2
 8014b12:	f7fc fb83 	bl	801121c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	683a      	ldr	r2, [r7, #0]
 8014b1a:	601a      	str	r2, [r3, #0]
}
 8014b1c:	bf00      	nop
 8014b1e:	3714      	adds	r7, #20
 8014b20:	46bd      	mov	sp, r7
 8014b22:	bd90      	pop	{r4, r7, pc}
 8014b24:	0801f504 	.word	0x0801f504
 8014b28:	0801f7c4 	.word	0x0801f7c4
 8014b2c:	0801f550 	.word	0x0801f550
 8014b30:	20007084 	.word	0x20007084

08014b34 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8014b34:	b5b0      	push	{r4, r5, r7, lr}
 8014b36:	b086      	sub	sp, #24
 8014b38:	af00      	add	r7, sp, #0
 8014b3a:	60f8      	str	r0, [r7, #12]
 8014b3c:	60b9      	str	r1, [r7, #8]
 8014b3e:	607a      	str	r2, [r7, #4]
 8014b40:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8014b42:	e03e      	b.n	8014bc2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8014b44:	68bb      	ldr	r3, [r7, #8]
 8014b46:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8014b48:	68bb      	ldr	r3, [r7, #8]
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8014b4e:	697b      	ldr	r3, [r7, #20]
 8014b50:	685b      	ldr	r3, [r3, #4]
 8014b52:	4618      	mov	r0, r3
 8014b54:	f7fc fd6e 	bl	8011634 <pbuf_clen>
 8014b58:	4603      	mov	r3, r0
 8014b5a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014b62:	8a7a      	ldrh	r2, [r7, #18]
 8014b64:	429a      	cmp	r2, r3
 8014b66:	d906      	bls.n	8014b76 <tcp_free_acked_segments+0x42>
 8014b68:	4b2a      	ldr	r3, [pc, #168]	; (8014c14 <tcp_free_acked_segments+0xe0>)
 8014b6a:	f240 4257 	movw	r2, #1111	; 0x457
 8014b6e:	492a      	ldr	r1, [pc, #168]	; (8014c18 <tcp_free_acked_segments+0xe4>)
 8014b70:	482a      	ldr	r0, [pc, #168]	; (8014c1c <tcp_free_acked_segments+0xe8>)
 8014b72:	f006 fb79 	bl	801b268 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8014b7c:	8a7b      	ldrh	r3, [r7, #18]
 8014b7e:	1ad3      	subs	r3, r2, r3
 8014b80:	b29a      	uxth	r2, r3
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8014b88:	697b      	ldr	r3, [r7, #20]
 8014b8a:	891a      	ldrh	r2, [r3, #8]
 8014b8c:	4b24      	ldr	r3, [pc, #144]	; (8014c20 <tcp_free_acked_segments+0xec>)
 8014b8e:	881b      	ldrh	r3, [r3, #0]
 8014b90:	4413      	add	r3, r2
 8014b92:	b29a      	uxth	r2, r3
 8014b94:	4b22      	ldr	r3, [pc, #136]	; (8014c20 <tcp_free_acked_segments+0xec>)
 8014b96:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8014b98:	6978      	ldr	r0, [r7, #20]
 8014b9a:	f7fe f92a 	bl	8012df2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d00c      	beq.n	8014bc2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8014ba8:	68bb      	ldr	r3, [r7, #8]
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d109      	bne.n	8014bc2 <tcp_free_acked_segments+0x8e>
 8014bae:	683b      	ldr	r3, [r7, #0]
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d106      	bne.n	8014bc2 <tcp_free_acked_segments+0x8e>
 8014bb4:	4b17      	ldr	r3, [pc, #92]	; (8014c14 <tcp_free_acked_segments+0xe0>)
 8014bb6:	f240 4261 	movw	r2, #1121	; 0x461
 8014bba:	491a      	ldr	r1, [pc, #104]	; (8014c24 <tcp_free_acked_segments+0xf0>)
 8014bbc:	4817      	ldr	r0, [pc, #92]	; (8014c1c <tcp_free_acked_segments+0xe8>)
 8014bbe:	f006 fb53 	bl	801b268 <iprintf>
  while (seg_list != NULL &&
 8014bc2:	68bb      	ldr	r3, [r7, #8]
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	d020      	beq.n	8014c0a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8014bc8:	68bb      	ldr	r3, [r7, #8]
 8014bca:	68db      	ldr	r3, [r3, #12]
 8014bcc:	685b      	ldr	r3, [r3, #4]
 8014bce:	4618      	mov	r0, r3
 8014bd0:	f7fb f8b9 	bl	800fd46 <lwip_htonl>
 8014bd4:	4604      	mov	r4, r0
 8014bd6:	68bb      	ldr	r3, [r7, #8]
 8014bd8:	891b      	ldrh	r3, [r3, #8]
 8014bda:	461d      	mov	r5, r3
 8014bdc:	68bb      	ldr	r3, [r7, #8]
 8014bde:	68db      	ldr	r3, [r3, #12]
 8014be0:	899b      	ldrh	r3, [r3, #12]
 8014be2:	b29b      	uxth	r3, r3
 8014be4:	4618      	mov	r0, r3
 8014be6:	f7fb f899 	bl	800fd1c <lwip_htons>
 8014bea:	4603      	mov	r3, r0
 8014bec:	b2db      	uxtb	r3, r3
 8014bee:	f003 0303 	and.w	r3, r3, #3
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d001      	beq.n	8014bfa <tcp_free_acked_segments+0xc6>
 8014bf6:	2301      	movs	r3, #1
 8014bf8:	e000      	b.n	8014bfc <tcp_free_acked_segments+0xc8>
 8014bfa:	2300      	movs	r3, #0
 8014bfc:	442b      	add	r3, r5
 8014bfe:	18e2      	adds	r2, r4, r3
 8014c00:	4b09      	ldr	r3, [pc, #36]	; (8014c28 <tcp_free_acked_segments+0xf4>)
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	dd9c      	ble.n	8014b44 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8014c0a:	68bb      	ldr	r3, [r7, #8]
}
 8014c0c:	4618      	mov	r0, r3
 8014c0e:	3718      	adds	r7, #24
 8014c10:	46bd      	mov	sp, r7
 8014c12:	bdb0      	pop	{r4, r5, r7, pc}
 8014c14:	0801f504 	.word	0x0801f504
 8014c18:	0801f7ec 	.word	0x0801f7ec
 8014c1c:	0801f550 	.word	0x0801f550
 8014c20:	2000708c 	.word	0x2000708c
 8014c24:	0801f814 	.word	0x0801f814
 8014c28:	20007088 	.word	0x20007088

08014c2c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8014c2c:	b5b0      	push	{r4, r5, r7, lr}
 8014c2e:	b094      	sub	sp, #80	; 0x50
 8014c30:	af00      	add	r7, sp, #0
 8014c32:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8014c34:	2300      	movs	r3, #0
 8014c36:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d106      	bne.n	8014c4c <tcp_receive+0x20>
 8014c3e:	4b91      	ldr	r3, [pc, #580]	; (8014e84 <tcp_receive+0x258>)
 8014c40:	f240 427b 	movw	r2, #1147	; 0x47b
 8014c44:	4990      	ldr	r1, [pc, #576]	; (8014e88 <tcp_receive+0x25c>)
 8014c46:	4891      	ldr	r0, [pc, #580]	; (8014e8c <tcp_receive+0x260>)
 8014c48:	f006 fb0e 	bl	801b268 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	7d1b      	ldrb	r3, [r3, #20]
 8014c50:	2b03      	cmp	r3, #3
 8014c52:	d806      	bhi.n	8014c62 <tcp_receive+0x36>
 8014c54:	4b8b      	ldr	r3, [pc, #556]	; (8014e84 <tcp_receive+0x258>)
 8014c56:	f240 427c 	movw	r2, #1148	; 0x47c
 8014c5a:	498d      	ldr	r1, [pc, #564]	; (8014e90 <tcp_receive+0x264>)
 8014c5c:	488b      	ldr	r0, [pc, #556]	; (8014e8c <tcp_receive+0x260>)
 8014c5e:	f006 fb03 	bl	801b268 <iprintf>

  if (flags & TCP_ACK) {
 8014c62:	4b8c      	ldr	r3, [pc, #560]	; (8014e94 <tcp_receive+0x268>)
 8014c64:	781b      	ldrb	r3, [r3, #0]
 8014c66:	f003 0310 	and.w	r3, r3, #16
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	f000 8264 	beq.w	8015138 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014c76:	461a      	mov	r2, r3
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014c7c:	4413      	add	r3, r2
 8014c7e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014c84:	4b84      	ldr	r3, [pc, #528]	; (8014e98 <tcp_receive+0x26c>)
 8014c86:	681b      	ldr	r3, [r3, #0]
 8014c88:	1ad3      	subs	r3, r2, r3
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	db1b      	blt.n	8014cc6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014c92:	4b81      	ldr	r3, [pc, #516]	; (8014e98 <tcp_receive+0x26c>)
 8014c94:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014c96:	429a      	cmp	r2, r3
 8014c98:	d106      	bne.n	8014ca8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014c9e:	4b7f      	ldr	r3, [pc, #508]	; (8014e9c <tcp_receive+0x270>)
 8014ca0:	681b      	ldr	r3, [r3, #0]
 8014ca2:	1ad3      	subs	r3, r2, r3
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	db0e      	blt.n	8014cc6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014cac:	4b7b      	ldr	r3, [pc, #492]	; (8014e9c <tcp_receive+0x270>)
 8014cae:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014cb0:	429a      	cmp	r2, r3
 8014cb2:	d125      	bne.n	8014d00 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014cb4:	4b7a      	ldr	r3, [pc, #488]	; (8014ea0 <tcp_receive+0x274>)
 8014cb6:	681b      	ldr	r3, [r3, #0]
 8014cb8:	89db      	ldrh	r3, [r3, #14]
 8014cba:	b29a      	uxth	r2, r3
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014cc2:	429a      	cmp	r2, r3
 8014cc4:	d91c      	bls.n	8014d00 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8014cc6:	4b76      	ldr	r3, [pc, #472]	; (8014ea0 <tcp_receive+0x274>)
 8014cc8:	681b      	ldr	r3, [r3, #0]
 8014cca:	89db      	ldrh	r3, [r3, #14]
 8014ccc:	b29a      	uxth	r2, r3
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014ce0:	429a      	cmp	r2, r3
 8014ce2:	d205      	bcs.n	8014cf0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8014cf0:	4b69      	ldr	r3, [pc, #420]	; (8014e98 <tcp_receive+0x26c>)
 8014cf2:	681a      	ldr	r2, [r3, #0]
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8014cf8:	4b68      	ldr	r3, [pc, #416]	; (8014e9c <tcp_receive+0x270>)
 8014cfa:	681a      	ldr	r2, [r3, #0]
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8014d00:	4b66      	ldr	r3, [pc, #408]	; (8014e9c <tcp_receive+0x270>)
 8014d02:	681a      	ldr	r2, [r3, #0]
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d08:	1ad3      	subs	r3, r2, r3
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	dc58      	bgt.n	8014dc0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8014d0e:	4b65      	ldr	r3, [pc, #404]	; (8014ea4 <tcp_receive+0x278>)
 8014d10:	881b      	ldrh	r3, [r3, #0]
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d14b      	bne.n	8014dae <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014d1a:	687a      	ldr	r2, [r7, #4]
 8014d1c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8014d20:	4413      	add	r3, r2
 8014d22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014d24:	429a      	cmp	r2, r3
 8014d26:	d142      	bne.n	8014dae <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	db3d      	blt.n	8014dae <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014d36:	4b59      	ldr	r3, [pc, #356]	; (8014e9c <tcp_receive+0x270>)
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	429a      	cmp	r2, r3
 8014d3c:	d137      	bne.n	8014dae <tcp_receive+0x182>
              found_dupack = 1;
 8014d3e:	2301      	movs	r3, #1
 8014d40:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014d48:	2bff      	cmp	r3, #255	; 0xff
 8014d4a:	d007      	beq.n	8014d5c <tcp_receive+0x130>
                ++pcb->dupacks;
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014d52:	3301      	adds	r3, #1
 8014d54:	b2da      	uxtb	r2, r3
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014d62:	2b03      	cmp	r3, #3
 8014d64:	d91b      	bls.n	8014d9e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014d70:	4413      	add	r3, r2
 8014d72:	b29a      	uxth	r2, r3
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014d7a:	429a      	cmp	r2, r3
 8014d7c:	d30a      	bcc.n	8014d94 <tcp_receive+0x168>
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014d88:	4413      	add	r3, r2
 8014d8a:	b29a      	uxth	r2, r3
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014d92:	e004      	b.n	8014d9e <tcp_receive+0x172>
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014d9a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014da4:	2b02      	cmp	r3, #2
 8014da6:	d902      	bls.n	8014dae <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8014da8:	6878      	ldr	r0, [r7, #4]
 8014daa:	f002 fb45 	bl	8017438 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8014dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	f040 8161 	bne.w	8015078 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	2200      	movs	r2, #0
 8014dba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014dbe:	e15b      	b.n	8015078 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014dc0:	4b36      	ldr	r3, [pc, #216]	; (8014e9c <tcp_receive+0x270>)
 8014dc2:	681a      	ldr	r2, [r3, #0]
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014dc8:	1ad3      	subs	r3, r2, r3
 8014dca:	3b01      	subs	r3, #1
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	f2c0 814e 	blt.w	801506e <tcp_receive+0x442>
 8014dd2:	4b32      	ldr	r3, [pc, #200]	; (8014e9c <tcp_receive+0x270>)
 8014dd4:	681a      	ldr	r2, [r3, #0]
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014dda:	1ad3      	subs	r3, r2, r3
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	f300 8146 	bgt.w	801506e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	8b5b      	ldrh	r3, [r3, #26]
 8014de6:	f003 0304 	and.w	r3, r3, #4
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d010      	beq.n	8014e10 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	8b5b      	ldrh	r3, [r3, #26]
 8014df2:	f023 0304 	bic.w	r3, r3, #4
 8014df6:	b29a      	uxth	r2, r3
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	2200      	movs	r2, #0
 8014e0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	2200      	movs	r2, #0
 8014e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014e1e:	10db      	asrs	r3, r3, #3
 8014e20:	b21b      	sxth	r3, r3
 8014e22:	b29a      	uxth	r2, r3
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014e2a:	b29b      	uxth	r3, r3
 8014e2c:	4413      	add	r3, r2
 8014e2e:	b29b      	uxth	r3, r3
 8014e30:	b21a      	sxth	r2, r3
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8014e38:	4b18      	ldr	r3, [pc, #96]	; (8014e9c <tcp_receive+0x270>)
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	b29a      	uxth	r2, r3
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014e42:	b29b      	uxth	r3, r3
 8014e44:	1ad3      	subs	r3, r2, r3
 8014e46:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	2200      	movs	r2, #0
 8014e4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8014e50:	4b12      	ldr	r3, [pc, #72]	; (8014e9c <tcp_receive+0x270>)
 8014e52:	681a      	ldr	r2, [r3, #0]
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	7d1b      	ldrb	r3, [r3, #20]
 8014e5c:	2b03      	cmp	r3, #3
 8014e5e:	f240 8097 	bls.w	8014f90 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014e6e:	429a      	cmp	r2, r3
 8014e70:	d245      	bcs.n	8014efe <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	8b5b      	ldrh	r3, [r3, #26]
 8014e76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d014      	beq.n	8014ea8 <tcp_receive+0x27c>
 8014e7e:	2301      	movs	r3, #1
 8014e80:	e013      	b.n	8014eaa <tcp_receive+0x27e>
 8014e82:	bf00      	nop
 8014e84:	0801f504 	.word	0x0801f504
 8014e88:	0801f834 	.word	0x0801f834
 8014e8c:	0801f550 	.word	0x0801f550
 8014e90:	0801f850 	.word	0x0801f850
 8014e94:	20007090 	.word	0x20007090
 8014e98:	20007084 	.word	0x20007084
 8014e9c:	20007088 	.word	0x20007088
 8014ea0:	20007074 	.word	0x20007074
 8014ea4:	2000708e 	.word	0x2000708e
 8014ea8:	2302      	movs	r3, #2
 8014eaa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8014eae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014eb2:	b29a      	uxth	r2, r3
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014eb8:	fb12 f303 	smulbb	r3, r2, r3
 8014ebc:	b29b      	uxth	r3, r3
 8014ebe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014ec0:	4293      	cmp	r3, r2
 8014ec2:	bf28      	it	cs
 8014ec4:	4613      	movcs	r3, r2
 8014ec6:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014ece:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014ed0:	4413      	add	r3, r2
 8014ed2:	b29a      	uxth	r2, r3
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014eda:	429a      	cmp	r2, r3
 8014edc:	d309      	bcc.n	8014ef2 <tcp_receive+0x2c6>
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014ee4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014ee6:	4413      	add	r3, r2
 8014ee8:	b29a      	uxth	r2, r3
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014ef0:	e04e      	b.n	8014f90 <tcp_receive+0x364>
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014ef8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014efc:	e048      	b.n	8014f90 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014f04:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014f06:	4413      	add	r3, r2
 8014f08:	b29a      	uxth	r2, r3
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014f10:	429a      	cmp	r2, r3
 8014f12:	d309      	bcc.n	8014f28 <tcp_receive+0x2fc>
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014f1a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014f1c:	4413      	add	r3, r2
 8014f1e:	b29a      	uxth	r2, r3
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8014f26:	e004      	b.n	8014f32 <tcp_receive+0x306>
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014f2e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014f3e:	429a      	cmp	r2, r3
 8014f40:	d326      	bcc.n	8014f90 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014f4e:	1ad3      	subs	r3, r2, r3
 8014f50:	b29a      	uxth	r2, r3
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014f62:	4413      	add	r3, r2
 8014f64:	b29a      	uxth	r2, r3
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014f6c:	429a      	cmp	r2, r3
 8014f6e:	d30a      	bcc.n	8014f86 <tcp_receive+0x35a>
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014f7a:	4413      	add	r3, r2
 8014f7c:	b29a      	uxth	r2, r3
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014f84:	e004      	b.n	8014f90 <tcp_receive+0x364>
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014f8c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014f98:	4a98      	ldr	r2, [pc, #608]	; (80151fc <tcp_receive+0x5d0>)
 8014f9a:	6878      	ldr	r0, [r7, #4]
 8014f9c:	f7ff fdca 	bl	8014b34 <tcp_free_acked_segments>
 8014fa0:	4602      	mov	r2, r0
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014fae:	4a94      	ldr	r2, [pc, #592]	; (8015200 <tcp_receive+0x5d4>)
 8014fb0:	6878      	ldr	r0, [r7, #4]
 8014fb2:	f7ff fdbf 	bl	8014b34 <tcp_free_acked_segments>
 8014fb6:	4602      	mov	r2, r0
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d104      	bne.n	8014fce <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014fca:	861a      	strh	r2, [r3, #48]	; 0x30
 8014fcc:	e002      	b.n	8014fd4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	2200      	movs	r2, #0
 8014fd2:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	2200      	movs	r2, #0
 8014fd8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d103      	bne.n	8014fea <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	2200      	movs	r2, #0
 8014fe6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8014ff0:	4b84      	ldr	r3, [pc, #528]	; (8015204 <tcp_receive+0x5d8>)
 8014ff2:	881b      	ldrh	r3, [r3, #0]
 8014ff4:	4413      	add	r3, r2
 8014ff6:	b29a      	uxth	r2, r3
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	8b5b      	ldrh	r3, [r3, #26]
 8015002:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015006:	2b00      	cmp	r3, #0
 8015008:	d035      	beq.n	8015076 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801500e:	2b00      	cmp	r3, #0
 8015010:	d118      	bne.n	8015044 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015016:	2b00      	cmp	r3, #0
 8015018:	d00c      	beq.n	8015034 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015022:	68db      	ldr	r3, [r3, #12]
 8015024:	685b      	ldr	r3, [r3, #4]
 8015026:	4618      	mov	r0, r3
 8015028:	f7fa fe8d 	bl	800fd46 <lwip_htonl>
 801502c:	4603      	mov	r3, r0
 801502e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8015030:	2b00      	cmp	r3, #0
 8015032:	dc20      	bgt.n	8015076 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	8b5b      	ldrh	r3, [r3, #26]
 8015038:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801503c:	b29a      	uxth	r2, r3
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015042:	e018      	b.n	8015076 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801504c:	68db      	ldr	r3, [r3, #12]
 801504e:	685b      	ldr	r3, [r3, #4]
 8015050:	4618      	mov	r0, r3
 8015052:	f7fa fe78 	bl	800fd46 <lwip_htonl>
 8015056:	4603      	mov	r3, r0
 8015058:	1ae3      	subs	r3, r4, r3
 801505a:	2b00      	cmp	r3, #0
 801505c:	dc0b      	bgt.n	8015076 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	8b5b      	ldrh	r3, [r3, #26]
 8015062:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015066:	b29a      	uxth	r2, r3
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801506c:	e003      	b.n	8015076 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801506e:	6878      	ldr	r0, [r7, #4]
 8015070:	f002 fbce 	bl	8017810 <tcp_send_empty_ack>
 8015074:	e000      	b.n	8015078 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015076:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801507c:	2b00      	cmp	r3, #0
 801507e:	d05b      	beq.n	8015138 <tcp_receive+0x50c>
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015084:	4b60      	ldr	r3, [pc, #384]	; (8015208 <tcp_receive+0x5dc>)
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	1ad3      	subs	r3, r2, r3
 801508a:	2b00      	cmp	r3, #0
 801508c:	da54      	bge.n	8015138 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801508e:	4b5f      	ldr	r3, [pc, #380]	; (801520c <tcp_receive+0x5e0>)
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	b29a      	uxth	r2, r3
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015098:	b29b      	uxth	r3, r3
 801509a:	1ad3      	subs	r3, r2, r3
 801509c:	b29b      	uxth	r3, r3
 801509e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80150a2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80150ac:	10db      	asrs	r3, r3, #3
 80150ae:	b21b      	sxth	r3, r3
 80150b0:	b29b      	uxth	r3, r3
 80150b2:	1ad3      	subs	r3, r2, r3
 80150b4:	b29b      	uxth	r3, r3
 80150b6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80150c0:	b29a      	uxth	r2, r3
 80150c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80150c6:	4413      	add	r3, r2
 80150c8:	b29b      	uxth	r3, r3
 80150ca:	b21a      	sxth	r2, r3
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80150d0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	da05      	bge.n	80150e4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80150d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80150dc:	425b      	negs	r3, r3
 80150de:	b29b      	uxth	r3, r3
 80150e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80150e4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80150ee:	109b      	asrs	r3, r3, #2
 80150f0:	b21b      	sxth	r3, r3
 80150f2:	b29b      	uxth	r3, r3
 80150f4:	1ad3      	subs	r3, r2, r3
 80150f6:	b29b      	uxth	r3, r3
 80150f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015102:	b29a      	uxth	r2, r3
 8015104:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015108:	4413      	add	r3, r2
 801510a:	b29b      	uxth	r3, r3
 801510c:	b21a      	sxth	r2, r3
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015118:	10db      	asrs	r3, r3, #3
 801511a:	b21b      	sxth	r3, r3
 801511c:	b29a      	uxth	r2, r3
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015124:	b29b      	uxth	r3, r3
 8015126:	4413      	add	r3, r2
 8015128:	b29b      	uxth	r3, r3
 801512a:	b21a      	sxth	r2, r3
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	2200      	movs	r2, #0
 8015136:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8015138:	4b35      	ldr	r3, [pc, #212]	; (8015210 <tcp_receive+0x5e4>)
 801513a:	881b      	ldrh	r3, [r3, #0]
 801513c:	2b00      	cmp	r3, #0
 801513e:	f000 84e2 	beq.w	8015b06 <tcp_receive+0xeda>
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	7d1b      	ldrb	r3, [r3, #20]
 8015146:	2b06      	cmp	r3, #6
 8015148:	f200 84dd 	bhi.w	8015b06 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015150:	4b30      	ldr	r3, [pc, #192]	; (8015214 <tcp_receive+0x5e8>)
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	1ad3      	subs	r3, r2, r3
 8015156:	3b01      	subs	r3, #1
 8015158:	2b00      	cmp	r3, #0
 801515a:	f2c0 808f 	blt.w	801527c <tcp_receive+0x650>
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015162:	4b2b      	ldr	r3, [pc, #172]	; (8015210 <tcp_receive+0x5e4>)
 8015164:	881b      	ldrh	r3, [r3, #0]
 8015166:	4619      	mov	r1, r3
 8015168:	4b2a      	ldr	r3, [pc, #168]	; (8015214 <tcp_receive+0x5e8>)
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	440b      	add	r3, r1
 801516e:	1ad3      	subs	r3, r2, r3
 8015170:	3301      	adds	r3, #1
 8015172:	2b00      	cmp	r3, #0
 8015174:	f300 8082 	bgt.w	801527c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8015178:	4b27      	ldr	r3, [pc, #156]	; (8015218 <tcp_receive+0x5ec>)
 801517a:	685b      	ldr	r3, [r3, #4]
 801517c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015182:	4b24      	ldr	r3, [pc, #144]	; (8015214 <tcp_receive+0x5e8>)
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	1ad3      	subs	r3, r2, r3
 8015188:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801518a:	4b23      	ldr	r3, [pc, #140]	; (8015218 <tcp_receive+0x5ec>)
 801518c:	685b      	ldr	r3, [r3, #4]
 801518e:	2b00      	cmp	r3, #0
 8015190:	d106      	bne.n	80151a0 <tcp_receive+0x574>
 8015192:	4b22      	ldr	r3, [pc, #136]	; (801521c <tcp_receive+0x5f0>)
 8015194:	f240 5294 	movw	r2, #1428	; 0x594
 8015198:	4921      	ldr	r1, [pc, #132]	; (8015220 <tcp_receive+0x5f4>)
 801519a:	4822      	ldr	r0, [pc, #136]	; (8015224 <tcp_receive+0x5f8>)
 801519c:	f006 f864 	bl	801b268 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80151a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151a2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80151a6:	4293      	cmp	r3, r2
 80151a8:	d906      	bls.n	80151b8 <tcp_receive+0x58c>
 80151aa:	4b1c      	ldr	r3, [pc, #112]	; (801521c <tcp_receive+0x5f0>)
 80151ac:	f240 5295 	movw	r2, #1429	; 0x595
 80151b0:	491d      	ldr	r1, [pc, #116]	; (8015228 <tcp_receive+0x5fc>)
 80151b2:	481c      	ldr	r0, [pc, #112]	; (8015224 <tcp_receive+0x5f8>)
 80151b4:	f006 f858 	bl	801b268 <iprintf>
      off = (u16_t)off32;
 80151b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151ba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80151be:	4b16      	ldr	r3, [pc, #88]	; (8015218 <tcp_receive+0x5ec>)
 80151c0:	685b      	ldr	r3, [r3, #4]
 80151c2:	891b      	ldrh	r3, [r3, #8]
 80151c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80151c8:	429a      	cmp	r2, r3
 80151ca:	d906      	bls.n	80151da <tcp_receive+0x5ae>
 80151cc:	4b13      	ldr	r3, [pc, #76]	; (801521c <tcp_receive+0x5f0>)
 80151ce:	f240 5297 	movw	r2, #1431	; 0x597
 80151d2:	4916      	ldr	r1, [pc, #88]	; (801522c <tcp_receive+0x600>)
 80151d4:	4813      	ldr	r0, [pc, #76]	; (8015224 <tcp_receive+0x5f8>)
 80151d6:	f006 f847 	bl	801b268 <iprintf>
      inseg.len -= off;
 80151da:	4b0f      	ldr	r3, [pc, #60]	; (8015218 <tcp_receive+0x5ec>)
 80151dc:	891a      	ldrh	r2, [r3, #8]
 80151de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80151e2:	1ad3      	subs	r3, r2, r3
 80151e4:	b29a      	uxth	r2, r3
 80151e6:	4b0c      	ldr	r3, [pc, #48]	; (8015218 <tcp_receive+0x5ec>)
 80151e8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80151ea:	4b0b      	ldr	r3, [pc, #44]	; (8015218 <tcp_receive+0x5ec>)
 80151ec:	685b      	ldr	r3, [r3, #4]
 80151ee:	891a      	ldrh	r2, [r3, #8]
 80151f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80151f4:	1ad3      	subs	r3, r2, r3
 80151f6:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80151f8:	e02a      	b.n	8015250 <tcp_receive+0x624>
 80151fa:	bf00      	nop
 80151fc:	0801f86c 	.word	0x0801f86c
 8015200:	0801f874 	.word	0x0801f874
 8015204:	2000708c 	.word	0x2000708c
 8015208:	20007088 	.word	0x20007088
 801520c:	2000704c 	.word	0x2000704c
 8015210:	2000708e 	.word	0x2000708e
 8015214:	20007084 	.word	0x20007084
 8015218:	20007064 	.word	0x20007064
 801521c:	0801f504 	.word	0x0801f504
 8015220:	0801f87c 	.word	0x0801f87c
 8015224:	0801f550 	.word	0x0801f550
 8015228:	0801f88c 	.word	0x0801f88c
 801522c:	0801f89c 	.word	0x0801f89c
        off -= p->len;
 8015230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015232:	895b      	ldrh	r3, [r3, #10]
 8015234:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015238:	1ad3      	subs	r3, r2, r3
 801523a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801523e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015240:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015242:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8015244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015246:	2200      	movs	r2, #0
 8015248:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801524a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801524c:	681b      	ldr	r3, [r3, #0]
 801524e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8015250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015252:	895b      	ldrh	r3, [r3, #10]
 8015254:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015258:	429a      	cmp	r2, r3
 801525a:	d8e9      	bhi.n	8015230 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801525c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015260:	4619      	mov	r1, r3
 8015262:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015264:	f7fc f8d8 	bl	8011418 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801526c:	4a91      	ldr	r2, [pc, #580]	; (80154b4 <tcp_receive+0x888>)
 801526e:	6013      	str	r3, [r2, #0]
 8015270:	4b91      	ldr	r3, [pc, #580]	; (80154b8 <tcp_receive+0x88c>)
 8015272:	68db      	ldr	r3, [r3, #12]
 8015274:	4a8f      	ldr	r2, [pc, #572]	; (80154b4 <tcp_receive+0x888>)
 8015276:	6812      	ldr	r2, [r2, #0]
 8015278:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801527a:	e00d      	b.n	8015298 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801527c:	4b8d      	ldr	r3, [pc, #564]	; (80154b4 <tcp_receive+0x888>)
 801527e:	681a      	ldr	r2, [r3, #0]
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015284:	1ad3      	subs	r3, r2, r3
 8015286:	2b00      	cmp	r3, #0
 8015288:	da06      	bge.n	8015298 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	8b5b      	ldrh	r3, [r3, #26]
 801528e:	f043 0302 	orr.w	r3, r3, #2
 8015292:	b29a      	uxth	r2, r3
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015298:	4b86      	ldr	r3, [pc, #536]	; (80154b4 <tcp_receive+0x888>)
 801529a:	681a      	ldr	r2, [r3, #0]
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152a0:	1ad3      	subs	r3, r2, r3
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	f2c0 842a 	blt.w	8015afc <tcp_receive+0xed0>
 80152a8:	4b82      	ldr	r3, [pc, #520]	; (80154b4 <tcp_receive+0x888>)
 80152aa:	681a      	ldr	r2, [r3, #0]
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152b0:	6879      	ldr	r1, [r7, #4]
 80152b2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80152b4:	440b      	add	r3, r1
 80152b6:	1ad3      	subs	r3, r2, r3
 80152b8:	3301      	adds	r3, #1
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	f300 841e 	bgt.w	8015afc <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80152c4:	4b7b      	ldr	r3, [pc, #492]	; (80154b4 <tcp_receive+0x888>)
 80152c6:	681b      	ldr	r3, [r3, #0]
 80152c8:	429a      	cmp	r2, r3
 80152ca:	f040 829a 	bne.w	8015802 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80152ce:	4b7a      	ldr	r3, [pc, #488]	; (80154b8 <tcp_receive+0x88c>)
 80152d0:	891c      	ldrh	r4, [r3, #8]
 80152d2:	4b79      	ldr	r3, [pc, #484]	; (80154b8 <tcp_receive+0x88c>)
 80152d4:	68db      	ldr	r3, [r3, #12]
 80152d6:	899b      	ldrh	r3, [r3, #12]
 80152d8:	b29b      	uxth	r3, r3
 80152da:	4618      	mov	r0, r3
 80152dc:	f7fa fd1e 	bl	800fd1c <lwip_htons>
 80152e0:	4603      	mov	r3, r0
 80152e2:	b2db      	uxtb	r3, r3
 80152e4:	f003 0303 	and.w	r3, r3, #3
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d001      	beq.n	80152f0 <tcp_receive+0x6c4>
 80152ec:	2301      	movs	r3, #1
 80152ee:	e000      	b.n	80152f2 <tcp_receive+0x6c6>
 80152f0:	2300      	movs	r3, #0
 80152f2:	4423      	add	r3, r4
 80152f4:	b29a      	uxth	r2, r3
 80152f6:	4b71      	ldr	r3, [pc, #452]	; (80154bc <tcp_receive+0x890>)
 80152f8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80152fe:	4b6f      	ldr	r3, [pc, #444]	; (80154bc <tcp_receive+0x890>)
 8015300:	881b      	ldrh	r3, [r3, #0]
 8015302:	429a      	cmp	r2, r3
 8015304:	d275      	bcs.n	80153f2 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015306:	4b6c      	ldr	r3, [pc, #432]	; (80154b8 <tcp_receive+0x88c>)
 8015308:	68db      	ldr	r3, [r3, #12]
 801530a:	899b      	ldrh	r3, [r3, #12]
 801530c:	b29b      	uxth	r3, r3
 801530e:	4618      	mov	r0, r3
 8015310:	f7fa fd04 	bl	800fd1c <lwip_htons>
 8015314:	4603      	mov	r3, r0
 8015316:	b2db      	uxtb	r3, r3
 8015318:	f003 0301 	and.w	r3, r3, #1
 801531c:	2b00      	cmp	r3, #0
 801531e:	d01f      	beq.n	8015360 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8015320:	4b65      	ldr	r3, [pc, #404]	; (80154b8 <tcp_receive+0x88c>)
 8015322:	68db      	ldr	r3, [r3, #12]
 8015324:	899b      	ldrh	r3, [r3, #12]
 8015326:	b29b      	uxth	r3, r3
 8015328:	b21b      	sxth	r3, r3
 801532a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801532e:	b21c      	sxth	r4, r3
 8015330:	4b61      	ldr	r3, [pc, #388]	; (80154b8 <tcp_receive+0x88c>)
 8015332:	68db      	ldr	r3, [r3, #12]
 8015334:	899b      	ldrh	r3, [r3, #12]
 8015336:	b29b      	uxth	r3, r3
 8015338:	4618      	mov	r0, r3
 801533a:	f7fa fcef 	bl	800fd1c <lwip_htons>
 801533e:	4603      	mov	r3, r0
 8015340:	b2db      	uxtb	r3, r3
 8015342:	b29b      	uxth	r3, r3
 8015344:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015348:	b29b      	uxth	r3, r3
 801534a:	4618      	mov	r0, r3
 801534c:	f7fa fce6 	bl	800fd1c <lwip_htons>
 8015350:	4603      	mov	r3, r0
 8015352:	b21b      	sxth	r3, r3
 8015354:	4323      	orrs	r3, r4
 8015356:	b21a      	sxth	r2, r3
 8015358:	4b57      	ldr	r3, [pc, #348]	; (80154b8 <tcp_receive+0x88c>)
 801535a:	68db      	ldr	r3, [r3, #12]
 801535c:	b292      	uxth	r2, r2
 801535e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015364:	4b54      	ldr	r3, [pc, #336]	; (80154b8 <tcp_receive+0x88c>)
 8015366:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015368:	4b53      	ldr	r3, [pc, #332]	; (80154b8 <tcp_receive+0x88c>)
 801536a:	68db      	ldr	r3, [r3, #12]
 801536c:	899b      	ldrh	r3, [r3, #12]
 801536e:	b29b      	uxth	r3, r3
 8015370:	4618      	mov	r0, r3
 8015372:	f7fa fcd3 	bl	800fd1c <lwip_htons>
 8015376:	4603      	mov	r3, r0
 8015378:	b2db      	uxtb	r3, r3
 801537a:	f003 0302 	and.w	r3, r3, #2
 801537e:	2b00      	cmp	r3, #0
 8015380:	d005      	beq.n	801538e <tcp_receive+0x762>
            inseg.len -= 1;
 8015382:	4b4d      	ldr	r3, [pc, #308]	; (80154b8 <tcp_receive+0x88c>)
 8015384:	891b      	ldrh	r3, [r3, #8]
 8015386:	3b01      	subs	r3, #1
 8015388:	b29a      	uxth	r2, r3
 801538a:	4b4b      	ldr	r3, [pc, #300]	; (80154b8 <tcp_receive+0x88c>)
 801538c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801538e:	4b4a      	ldr	r3, [pc, #296]	; (80154b8 <tcp_receive+0x88c>)
 8015390:	685b      	ldr	r3, [r3, #4]
 8015392:	4a49      	ldr	r2, [pc, #292]	; (80154b8 <tcp_receive+0x88c>)
 8015394:	8912      	ldrh	r2, [r2, #8]
 8015396:	4611      	mov	r1, r2
 8015398:	4618      	mov	r0, r3
 801539a:	f7fb ff3f 	bl	801121c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801539e:	4b46      	ldr	r3, [pc, #280]	; (80154b8 <tcp_receive+0x88c>)
 80153a0:	891c      	ldrh	r4, [r3, #8]
 80153a2:	4b45      	ldr	r3, [pc, #276]	; (80154b8 <tcp_receive+0x88c>)
 80153a4:	68db      	ldr	r3, [r3, #12]
 80153a6:	899b      	ldrh	r3, [r3, #12]
 80153a8:	b29b      	uxth	r3, r3
 80153aa:	4618      	mov	r0, r3
 80153ac:	f7fa fcb6 	bl	800fd1c <lwip_htons>
 80153b0:	4603      	mov	r3, r0
 80153b2:	b2db      	uxtb	r3, r3
 80153b4:	f003 0303 	and.w	r3, r3, #3
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d001      	beq.n	80153c0 <tcp_receive+0x794>
 80153bc:	2301      	movs	r3, #1
 80153be:	e000      	b.n	80153c2 <tcp_receive+0x796>
 80153c0:	2300      	movs	r3, #0
 80153c2:	4423      	add	r3, r4
 80153c4:	b29a      	uxth	r2, r3
 80153c6:	4b3d      	ldr	r3, [pc, #244]	; (80154bc <tcp_receive+0x890>)
 80153c8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80153ca:	4b3c      	ldr	r3, [pc, #240]	; (80154bc <tcp_receive+0x890>)
 80153cc:	881b      	ldrh	r3, [r3, #0]
 80153ce:	461a      	mov	r2, r3
 80153d0:	4b38      	ldr	r3, [pc, #224]	; (80154b4 <tcp_receive+0x888>)
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	441a      	add	r2, r3
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153da:	6879      	ldr	r1, [r7, #4]
 80153dc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80153de:	440b      	add	r3, r1
 80153e0:	429a      	cmp	r2, r3
 80153e2:	d006      	beq.n	80153f2 <tcp_receive+0x7c6>
 80153e4:	4b36      	ldr	r3, [pc, #216]	; (80154c0 <tcp_receive+0x894>)
 80153e6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80153ea:	4936      	ldr	r1, [pc, #216]	; (80154c4 <tcp_receive+0x898>)
 80153ec:	4836      	ldr	r0, [pc, #216]	; (80154c8 <tcp_receive+0x89c>)
 80153ee:	f005 ff3b 	bl	801b268 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	f000 80e7 	beq.w	80155ca <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80153fc:	4b2e      	ldr	r3, [pc, #184]	; (80154b8 <tcp_receive+0x88c>)
 80153fe:	68db      	ldr	r3, [r3, #12]
 8015400:	899b      	ldrh	r3, [r3, #12]
 8015402:	b29b      	uxth	r3, r3
 8015404:	4618      	mov	r0, r3
 8015406:	f7fa fc89 	bl	800fd1c <lwip_htons>
 801540a:	4603      	mov	r3, r0
 801540c:	b2db      	uxtb	r3, r3
 801540e:	f003 0301 	and.w	r3, r3, #1
 8015412:	2b00      	cmp	r3, #0
 8015414:	d010      	beq.n	8015438 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8015416:	e00a      	b.n	801542e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801541c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015422:	681a      	ldr	r2, [r3, #0]
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8015428:	68f8      	ldr	r0, [r7, #12]
 801542a:	f7fd fce2 	bl	8012df2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015432:	2b00      	cmp	r3, #0
 8015434:	d1f0      	bne.n	8015418 <tcp_receive+0x7ec>
 8015436:	e0c8      	b.n	80155ca <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801543c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801543e:	e052      	b.n	80154e6 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015442:	68db      	ldr	r3, [r3, #12]
 8015444:	899b      	ldrh	r3, [r3, #12]
 8015446:	b29b      	uxth	r3, r3
 8015448:	4618      	mov	r0, r3
 801544a:	f7fa fc67 	bl	800fd1c <lwip_htons>
 801544e:	4603      	mov	r3, r0
 8015450:	b2db      	uxtb	r3, r3
 8015452:	f003 0301 	and.w	r3, r3, #1
 8015456:	2b00      	cmp	r3, #0
 8015458:	d03d      	beq.n	80154d6 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801545a:	4b17      	ldr	r3, [pc, #92]	; (80154b8 <tcp_receive+0x88c>)
 801545c:	68db      	ldr	r3, [r3, #12]
 801545e:	899b      	ldrh	r3, [r3, #12]
 8015460:	b29b      	uxth	r3, r3
 8015462:	4618      	mov	r0, r3
 8015464:	f7fa fc5a 	bl	800fd1c <lwip_htons>
 8015468:	4603      	mov	r3, r0
 801546a:	b2db      	uxtb	r3, r3
 801546c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015470:	2b00      	cmp	r3, #0
 8015472:	d130      	bne.n	80154d6 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8015474:	4b10      	ldr	r3, [pc, #64]	; (80154b8 <tcp_receive+0x88c>)
 8015476:	68db      	ldr	r3, [r3, #12]
 8015478:	899b      	ldrh	r3, [r3, #12]
 801547a:	b29c      	uxth	r4, r3
 801547c:	2001      	movs	r0, #1
 801547e:	f7fa fc4d 	bl	800fd1c <lwip_htons>
 8015482:	4603      	mov	r3, r0
 8015484:	461a      	mov	r2, r3
 8015486:	4b0c      	ldr	r3, [pc, #48]	; (80154b8 <tcp_receive+0x88c>)
 8015488:	68db      	ldr	r3, [r3, #12]
 801548a:	4322      	orrs	r2, r4
 801548c:	b292      	uxth	r2, r2
 801548e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8015490:	4b09      	ldr	r3, [pc, #36]	; (80154b8 <tcp_receive+0x88c>)
 8015492:	891c      	ldrh	r4, [r3, #8]
 8015494:	4b08      	ldr	r3, [pc, #32]	; (80154b8 <tcp_receive+0x88c>)
 8015496:	68db      	ldr	r3, [r3, #12]
 8015498:	899b      	ldrh	r3, [r3, #12]
 801549a:	b29b      	uxth	r3, r3
 801549c:	4618      	mov	r0, r3
 801549e:	f7fa fc3d 	bl	800fd1c <lwip_htons>
 80154a2:	4603      	mov	r3, r0
 80154a4:	b2db      	uxtb	r3, r3
 80154a6:	f003 0303 	and.w	r3, r3, #3
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d00e      	beq.n	80154cc <tcp_receive+0x8a0>
 80154ae:	2301      	movs	r3, #1
 80154b0:	e00d      	b.n	80154ce <tcp_receive+0x8a2>
 80154b2:	bf00      	nop
 80154b4:	20007084 	.word	0x20007084
 80154b8:	20007064 	.word	0x20007064
 80154bc:	2000708e 	.word	0x2000708e
 80154c0:	0801f504 	.word	0x0801f504
 80154c4:	0801f8ac 	.word	0x0801f8ac
 80154c8:	0801f550 	.word	0x0801f550
 80154cc:	2300      	movs	r3, #0
 80154ce:	4423      	add	r3, r4
 80154d0:	b29a      	uxth	r2, r3
 80154d2:	4b98      	ldr	r3, [pc, #608]	; (8015734 <tcp_receive+0xb08>)
 80154d4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80154d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80154d8:	613b      	str	r3, [r7, #16]
              next = next->next;
 80154da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80154e0:	6938      	ldr	r0, [r7, #16]
 80154e2:	f7fd fc86 	bl	8012df2 <tcp_seg_free>
            while (next &&
 80154e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d00e      	beq.n	801550a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80154ec:	4b91      	ldr	r3, [pc, #580]	; (8015734 <tcp_receive+0xb08>)
 80154ee:	881b      	ldrh	r3, [r3, #0]
 80154f0:	461a      	mov	r2, r3
 80154f2:	4b91      	ldr	r3, [pc, #580]	; (8015738 <tcp_receive+0xb0c>)
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	441a      	add	r2, r3
 80154f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80154fa:	68db      	ldr	r3, [r3, #12]
 80154fc:	685b      	ldr	r3, [r3, #4]
 80154fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015500:	8909      	ldrh	r1, [r1, #8]
 8015502:	440b      	add	r3, r1
 8015504:	1ad3      	subs	r3, r2, r3
            while (next &&
 8015506:	2b00      	cmp	r3, #0
 8015508:	da9a      	bge.n	8015440 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801550a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801550c:	2b00      	cmp	r3, #0
 801550e:	d059      	beq.n	80155c4 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8015510:	4b88      	ldr	r3, [pc, #544]	; (8015734 <tcp_receive+0xb08>)
 8015512:	881b      	ldrh	r3, [r3, #0]
 8015514:	461a      	mov	r2, r3
 8015516:	4b88      	ldr	r3, [pc, #544]	; (8015738 <tcp_receive+0xb0c>)
 8015518:	681b      	ldr	r3, [r3, #0]
 801551a:	441a      	add	r2, r3
 801551c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801551e:	68db      	ldr	r3, [r3, #12]
 8015520:	685b      	ldr	r3, [r3, #4]
 8015522:	1ad3      	subs	r3, r2, r3
            if (next &&
 8015524:	2b00      	cmp	r3, #0
 8015526:	dd4d      	ble.n	80155c4 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8015528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801552a:	68db      	ldr	r3, [r3, #12]
 801552c:	685b      	ldr	r3, [r3, #4]
 801552e:	b29a      	uxth	r2, r3
 8015530:	4b81      	ldr	r3, [pc, #516]	; (8015738 <tcp_receive+0xb0c>)
 8015532:	681b      	ldr	r3, [r3, #0]
 8015534:	b29b      	uxth	r3, r3
 8015536:	1ad3      	subs	r3, r2, r3
 8015538:	b29a      	uxth	r2, r3
 801553a:	4b80      	ldr	r3, [pc, #512]	; (801573c <tcp_receive+0xb10>)
 801553c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801553e:	4b7f      	ldr	r3, [pc, #508]	; (801573c <tcp_receive+0xb10>)
 8015540:	68db      	ldr	r3, [r3, #12]
 8015542:	899b      	ldrh	r3, [r3, #12]
 8015544:	b29b      	uxth	r3, r3
 8015546:	4618      	mov	r0, r3
 8015548:	f7fa fbe8 	bl	800fd1c <lwip_htons>
 801554c:	4603      	mov	r3, r0
 801554e:	b2db      	uxtb	r3, r3
 8015550:	f003 0302 	and.w	r3, r3, #2
 8015554:	2b00      	cmp	r3, #0
 8015556:	d005      	beq.n	8015564 <tcp_receive+0x938>
                inseg.len -= 1;
 8015558:	4b78      	ldr	r3, [pc, #480]	; (801573c <tcp_receive+0xb10>)
 801555a:	891b      	ldrh	r3, [r3, #8]
 801555c:	3b01      	subs	r3, #1
 801555e:	b29a      	uxth	r2, r3
 8015560:	4b76      	ldr	r3, [pc, #472]	; (801573c <tcp_receive+0xb10>)
 8015562:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8015564:	4b75      	ldr	r3, [pc, #468]	; (801573c <tcp_receive+0xb10>)
 8015566:	685b      	ldr	r3, [r3, #4]
 8015568:	4a74      	ldr	r2, [pc, #464]	; (801573c <tcp_receive+0xb10>)
 801556a:	8912      	ldrh	r2, [r2, #8]
 801556c:	4611      	mov	r1, r2
 801556e:	4618      	mov	r0, r3
 8015570:	f7fb fe54 	bl	801121c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8015574:	4b71      	ldr	r3, [pc, #452]	; (801573c <tcp_receive+0xb10>)
 8015576:	891c      	ldrh	r4, [r3, #8]
 8015578:	4b70      	ldr	r3, [pc, #448]	; (801573c <tcp_receive+0xb10>)
 801557a:	68db      	ldr	r3, [r3, #12]
 801557c:	899b      	ldrh	r3, [r3, #12]
 801557e:	b29b      	uxth	r3, r3
 8015580:	4618      	mov	r0, r3
 8015582:	f7fa fbcb 	bl	800fd1c <lwip_htons>
 8015586:	4603      	mov	r3, r0
 8015588:	b2db      	uxtb	r3, r3
 801558a:	f003 0303 	and.w	r3, r3, #3
 801558e:	2b00      	cmp	r3, #0
 8015590:	d001      	beq.n	8015596 <tcp_receive+0x96a>
 8015592:	2301      	movs	r3, #1
 8015594:	e000      	b.n	8015598 <tcp_receive+0x96c>
 8015596:	2300      	movs	r3, #0
 8015598:	4423      	add	r3, r4
 801559a:	b29a      	uxth	r2, r3
 801559c:	4b65      	ldr	r3, [pc, #404]	; (8015734 <tcp_receive+0xb08>)
 801559e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80155a0:	4b64      	ldr	r3, [pc, #400]	; (8015734 <tcp_receive+0xb08>)
 80155a2:	881b      	ldrh	r3, [r3, #0]
 80155a4:	461a      	mov	r2, r3
 80155a6:	4b64      	ldr	r3, [pc, #400]	; (8015738 <tcp_receive+0xb0c>)
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	441a      	add	r2, r3
 80155ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80155ae:	68db      	ldr	r3, [r3, #12]
 80155b0:	685b      	ldr	r3, [r3, #4]
 80155b2:	429a      	cmp	r2, r3
 80155b4:	d006      	beq.n	80155c4 <tcp_receive+0x998>
 80155b6:	4b62      	ldr	r3, [pc, #392]	; (8015740 <tcp_receive+0xb14>)
 80155b8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80155bc:	4961      	ldr	r1, [pc, #388]	; (8015744 <tcp_receive+0xb18>)
 80155be:	4862      	ldr	r0, [pc, #392]	; (8015748 <tcp_receive+0xb1c>)
 80155c0:	f005 fe52 	bl	801b268 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80155c8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80155ca:	4b5a      	ldr	r3, [pc, #360]	; (8015734 <tcp_receive+0xb08>)
 80155cc:	881b      	ldrh	r3, [r3, #0]
 80155ce:	461a      	mov	r2, r3
 80155d0:	4b59      	ldr	r3, [pc, #356]	; (8015738 <tcp_receive+0xb0c>)
 80155d2:	681b      	ldr	r3, [r3, #0]
 80155d4:	441a      	add	r2, r3
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80155de:	4b55      	ldr	r3, [pc, #340]	; (8015734 <tcp_receive+0xb08>)
 80155e0:	881b      	ldrh	r3, [r3, #0]
 80155e2:	429a      	cmp	r2, r3
 80155e4:	d206      	bcs.n	80155f4 <tcp_receive+0x9c8>
 80155e6:	4b56      	ldr	r3, [pc, #344]	; (8015740 <tcp_receive+0xb14>)
 80155e8:	f240 6207 	movw	r2, #1543	; 0x607
 80155ec:	4957      	ldr	r1, [pc, #348]	; (801574c <tcp_receive+0xb20>)
 80155ee:	4856      	ldr	r0, [pc, #344]	; (8015748 <tcp_receive+0xb1c>)
 80155f0:	f005 fe3a 	bl	801b268 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80155f8:	4b4e      	ldr	r3, [pc, #312]	; (8015734 <tcp_receive+0xb08>)
 80155fa:	881b      	ldrh	r3, [r3, #0]
 80155fc:	1ad3      	subs	r3, r2, r3
 80155fe:	b29a      	uxth	r2, r3
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8015604:	6878      	ldr	r0, [r7, #4]
 8015606:	f7fc fdb3 	bl	8012170 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801560a:	4b4c      	ldr	r3, [pc, #304]	; (801573c <tcp_receive+0xb10>)
 801560c:	685b      	ldr	r3, [r3, #4]
 801560e:	891b      	ldrh	r3, [r3, #8]
 8015610:	2b00      	cmp	r3, #0
 8015612:	d006      	beq.n	8015622 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8015614:	4b49      	ldr	r3, [pc, #292]	; (801573c <tcp_receive+0xb10>)
 8015616:	685b      	ldr	r3, [r3, #4]
 8015618:	4a4d      	ldr	r2, [pc, #308]	; (8015750 <tcp_receive+0xb24>)
 801561a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801561c:	4b47      	ldr	r3, [pc, #284]	; (801573c <tcp_receive+0xb10>)
 801561e:	2200      	movs	r2, #0
 8015620:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015622:	4b46      	ldr	r3, [pc, #280]	; (801573c <tcp_receive+0xb10>)
 8015624:	68db      	ldr	r3, [r3, #12]
 8015626:	899b      	ldrh	r3, [r3, #12]
 8015628:	b29b      	uxth	r3, r3
 801562a:	4618      	mov	r0, r3
 801562c:	f7fa fb76 	bl	800fd1c <lwip_htons>
 8015630:	4603      	mov	r3, r0
 8015632:	b2db      	uxtb	r3, r3
 8015634:	f003 0301 	and.w	r3, r3, #1
 8015638:	2b00      	cmp	r3, #0
 801563a:	f000 80b8 	beq.w	80157ae <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801563e:	4b45      	ldr	r3, [pc, #276]	; (8015754 <tcp_receive+0xb28>)
 8015640:	781b      	ldrb	r3, [r3, #0]
 8015642:	f043 0320 	orr.w	r3, r3, #32
 8015646:	b2da      	uxtb	r2, r3
 8015648:	4b42      	ldr	r3, [pc, #264]	; (8015754 <tcp_receive+0xb28>)
 801564a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801564c:	e0af      	b.n	80157ae <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015652:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015658:	68db      	ldr	r3, [r3, #12]
 801565a:	685b      	ldr	r3, [r3, #4]
 801565c:	4a36      	ldr	r2, [pc, #216]	; (8015738 <tcp_receive+0xb0c>)
 801565e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8015660:	68bb      	ldr	r3, [r7, #8]
 8015662:	891b      	ldrh	r3, [r3, #8]
 8015664:	461c      	mov	r4, r3
 8015666:	68bb      	ldr	r3, [r7, #8]
 8015668:	68db      	ldr	r3, [r3, #12]
 801566a:	899b      	ldrh	r3, [r3, #12]
 801566c:	b29b      	uxth	r3, r3
 801566e:	4618      	mov	r0, r3
 8015670:	f7fa fb54 	bl	800fd1c <lwip_htons>
 8015674:	4603      	mov	r3, r0
 8015676:	b2db      	uxtb	r3, r3
 8015678:	f003 0303 	and.w	r3, r3, #3
 801567c:	2b00      	cmp	r3, #0
 801567e:	d001      	beq.n	8015684 <tcp_receive+0xa58>
 8015680:	2301      	movs	r3, #1
 8015682:	e000      	b.n	8015686 <tcp_receive+0xa5a>
 8015684:	2300      	movs	r3, #0
 8015686:	191a      	adds	r2, r3, r4
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801568c:	441a      	add	r2, r3
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015696:	461c      	mov	r4, r3
 8015698:	68bb      	ldr	r3, [r7, #8]
 801569a:	891b      	ldrh	r3, [r3, #8]
 801569c:	461d      	mov	r5, r3
 801569e:	68bb      	ldr	r3, [r7, #8]
 80156a0:	68db      	ldr	r3, [r3, #12]
 80156a2:	899b      	ldrh	r3, [r3, #12]
 80156a4:	b29b      	uxth	r3, r3
 80156a6:	4618      	mov	r0, r3
 80156a8:	f7fa fb38 	bl	800fd1c <lwip_htons>
 80156ac:	4603      	mov	r3, r0
 80156ae:	b2db      	uxtb	r3, r3
 80156b0:	f003 0303 	and.w	r3, r3, #3
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d001      	beq.n	80156bc <tcp_receive+0xa90>
 80156b8:	2301      	movs	r3, #1
 80156ba:	e000      	b.n	80156be <tcp_receive+0xa92>
 80156bc:	2300      	movs	r3, #0
 80156be:	442b      	add	r3, r5
 80156c0:	429c      	cmp	r4, r3
 80156c2:	d206      	bcs.n	80156d2 <tcp_receive+0xaa6>
 80156c4:	4b1e      	ldr	r3, [pc, #120]	; (8015740 <tcp_receive+0xb14>)
 80156c6:	f240 622b 	movw	r2, #1579	; 0x62b
 80156ca:	4923      	ldr	r1, [pc, #140]	; (8015758 <tcp_receive+0xb2c>)
 80156cc:	481e      	ldr	r0, [pc, #120]	; (8015748 <tcp_receive+0xb1c>)
 80156ce:	f005 fdcb 	bl	801b268 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80156d2:	68bb      	ldr	r3, [r7, #8]
 80156d4:	891b      	ldrh	r3, [r3, #8]
 80156d6:	461c      	mov	r4, r3
 80156d8:	68bb      	ldr	r3, [r7, #8]
 80156da:	68db      	ldr	r3, [r3, #12]
 80156dc:	899b      	ldrh	r3, [r3, #12]
 80156de:	b29b      	uxth	r3, r3
 80156e0:	4618      	mov	r0, r3
 80156e2:	f7fa fb1b 	bl	800fd1c <lwip_htons>
 80156e6:	4603      	mov	r3, r0
 80156e8:	b2db      	uxtb	r3, r3
 80156ea:	f003 0303 	and.w	r3, r3, #3
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d001      	beq.n	80156f6 <tcp_receive+0xaca>
 80156f2:	2301      	movs	r3, #1
 80156f4:	e000      	b.n	80156f8 <tcp_receive+0xacc>
 80156f6:	2300      	movs	r3, #0
 80156f8:	1919      	adds	r1, r3, r4
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80156fe:	b28b      	uxth	r3, r1
 8015700:	1ad3      	subs	r3, r2, r3
 8015702:	b29a      	uxth	r2, r3
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8015708:	6878      	ldr	r0, [r7, #4]
 801570a:	f7fc fd31 	bl	8012170 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801570e:	68bb      	ldr	r3, [r7, #8]
 8015710:	685b      	ldr	r3, [r3, #4]
 8015712:	891b      	ldrh	r3, [r3, #8]
 8015714:	2b00      	cmp	r3, #0
 8015716:	d028      	beq.n	801576a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8015718:	4b0d      	ldr	r3, [pc, #52]	; (8015750 <tcp_receive+0xb24>)
 801571a:	681b      	ldr	r3, [r3, #0]
 801571c:	2b00      	cmp	r3, #0
 801571e:	d01d      	beq.n	801575c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8015720:	4b0b      	ldr	r3, [pc, #44]	; (8015750 <tcp_receive+0xb24>)
 8015722:	681a      	ldr	r2, [r3, #0]
 8015724:	68bb      	ldr	r3, [r7, #8]
 8015726:	685b      	ldr	r3, [r3, #4]
 8015728:	4619      	mov	r1, r3
 801572a:	4610      	mov	r0, r2
 801572c:	f7fb ffbc 	bl	80116a8 <pbuf_cat>
 8015730:	e018      	b.n	8015764 <tcp_receive+0xb38>
 8015732:	bf00      	nop
 8015734:	2000708e 	.word	0x2000708e
 8015738:	20007084 	.word	0x20007084
 801573c:	20007064 	.word	0x20007064
 8015740:	0801f504 	.word	0x0801f504
 8015744:	0801f8e4 	.word	0x0801f8e4
 8015748:	0801f550 	.word	0x0801f550
 801574c:	0801f920 	.word	0x0801f920
 8015750:	20007094 	.word	0x20007094
 8015754:	20007091 	.word	0x20007091
 8015758:	0801f940 	.word	0x0801f940
            } else {
              recv_data = cseg->p;
 801575c:	68bb      	ldr	r3, [r7, #8]
 801575e:	685b      	ldr	r3, [r3, #4]
 8015760:	4a70      	ldr	r2, [pc, #448]	; (8015924 <tcp_receive+0xcf8>)
 8015762:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8015764:	68bb      	ldr	r3, [r7, #8]
 8015766:	2200      	movs	r2, #0
 8015768:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801576a:	68bb      	ldr	r3, [r7, #8]
 801576c:	68db      	ldr	r3, [r3, #12]
 801576e:	899b      	ldrh	r3, [r3, #12]
 8015770:	b29b      	uxth	r3, r3
 8015772:	4618      	mov	r0, r3
 8015774:	f7fa fad2 	bl	800fd1c <lwip_htons>
 8015778:	4603      	mov	r3, r0
 801577a:	b2db      	uxtb	r3, r3
 801577c:	f003 0301 	and.w	r3, r3, #1
 8015780:	2b00      	cmp	r3, #0
 8015782:	d00d      	beq.n	80157a0 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8015784:	4b68      	ldr	r3, [pc, #416]	; (8015928 <tcp_receive+0xcfc>)
 8015786:	781b      	ldrb	r3, [r3, #0]
 8015788:	f043 0320 	orr.w	r3, r3, #32
 801578c:	b2da      	uxtb	r2, r3
 801578e:	4b66      	ldr	r3, [pc, #408]	; (8015928 <tcp_receive+0xcfc>)
 8015790:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	7d1b      	ldrb	r3, [r3, #20]
 8015796:	2b04      	cmp	r3, #4
 8015798:	d102      	bne.n	80157a0 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	2207      	movs	r2, #7
 801579e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80157a0:	68bb      	ldr	r3, [r7, #8]
 80157a2:	681a      	ldr	r2, [r3, #0]
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80157a8:	68b8      	ldr	r0, [r7, #8]
 80157aa:	f7fd fb22 	bl	8012df2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d008      	beq.n	80157c8 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80157ba:	68db      	ldr	r3, [r3, #12]
 80157bc:	685a      	ldr	r2, [r3, #4]
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80157c2:	429a      	cmp	r2, r3
 80157c4:	f43f af43 	beq.w	801564e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	8b5b      	ldrh	r3, [r3, #26]
 80157cc:	f003 0301 	and.w	r3, r3, #1
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d00e      	beq.n	80157f2 <tcp_receive+0xbc6>
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	8b5b      	ldrh	r3, [r3, #26]
 80157d8:	f023 0301 	bic.w	r3, r3, #1
 80157dc:	b29a      	uxth	r2, r3
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	835a      	strh	r2, [r3, #26]
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	8b5b      	ldrh	r3, [r3, #26]
 80157e6:	f043 0302 	orr.w	r3, r3, #2
 80157ea:	b29a      	uxth	r2, r3
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80157f0:	e188      	b.n	8015b04 <tcp_receive+0xed8>
        tcp_ack(pcb);
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	8b5b      	ldrh	r3, [r3, #26]
 80157f6:	f043 0301 	orr.w	r3, r3, #1
 80157fa:	b29a      	uxth	r2, r3
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015800:	e180      	b.n	8015b04 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015806:	2b00      	cmp	r3, #0
 8015808:	d106      	bne.n	8015818 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801580a:	4848      	ldr	r0, [pc, #288]	; (801592c <tcp_receive+0xd00>)
 801580c:	f7fd fb0a 	bl	8012e24 <tcp_seg_copy>
 8015810:	4602      	mov	r2, r0
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	675a      	str	r2, [r3, #116]	; 0x74
 8015816:	e16d      	b.n	8015af4 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8015818:	2300      	movs	r3, #0
 801581a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015820:	63bb      	str	r3, [r7, #56]	; 0x38
 8015822:	e157      	b.n	8015ad4 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8015824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015826:	68db      	ldr	r3, [r3, #12]
 8015828:	685a      	ldr	r2, [r3, #4]
 801582a:	4b41      	ldr	r3, [pc, #260]	; (8015930 <tcp_receive+0xd04>)
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	429a      	cmp	r2, r3
 8015830:	d11d      	bne.n	801586e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8015832:	4b3e      	ldr	r3, [pc, #248]	; (801592c <tcp_receive+0xd00>)
 8015834:	891a      	ldrh	r2, [r3, #8]
 8015836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015838:	891b      	ldrh	r3, [r3, #8]
 801583a:	429a      	cmp	r2, r3
 801583c:	f240 814f 	bls.w	8015ade <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015840:	483a      	ldr	r0, [pc, #232]	; (801592c <tcp_receive+0xd00>)
 8015842:	f7fd faef 	bl	8012e24 <tcp_seg_copy>
 8015846:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8015848:	697b      	ldr	r3, [r7, #20]
 801584a:	2b00      	cmp	r3, #0
 801584c:	f000 8149 	beq.w	8015ae2 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8015850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015852:	2b00      	cmp	r3, #0
 8015854:	d003      	beq.n	801585e <tcp_receive+0xc32>
                    prev->next = cseg;
 8015856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015858:	697a      	ldr	r2, [r7, #20]
 801585a:	601a      	str	r2, [r3, #0]
 801585c:	e002      	b.n	8015864 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	697a      	ldr	r2, [r7, #20]
 8015862:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8015864:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015866:	6978      	ldr	r0, [r7, #20]
 8015868:	f7ff f8dc 	bl	8014a24 <tcp_oos_insert_segment>
                }
                break;
 801586c:	e139      	b.n	8015ae2 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801586e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015870:	2b00      	cmp	r3, #0
 8015872:	d117      	bne.n	80158a4 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8015874:	4b2e      	ldr	r3, [pc, #184]	; (8015930 <tcp_receive+0xd04>)
 8015876:	681a      	ldr	r2, [r3, #0]
 8015878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801587a:	68db      	ldr	r3, [r3, #12]
 801587c:	685b      	ldr	r3, [r3, #4]
 801587e:	1ad3      	subs	r3, r2, r3
 8015880:	2b00      	cmp	r3, #0
 8015882:	da57      	bge.n	8015934 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015884:	4829      	ldr	r0, [pc, #164]	; (801592c <tcp_receive+0xd00>)
 8015886:	f7fd facd 	bl	8012e24 <tcp_seg_copy>
 801588a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801588c:	69bb      	ldr	r3, [r7, #24]
 801588e:	2b00      	cmp	r3, #0
 8015890:	f000 8129 	beq.w	8015ae6 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	69ba      	ldr	r2, [r7, #24]
 8015898:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801589a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801589c:	69b8      	ldr	r0, [r7, #24]
 801589e:	f7ff f8c1 	bl	8014a24 <tcp_oos_insert_segment>
                  }
                  break;
 80158a2:	e120      	b.n	8015ae6 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80158a4:	4b22      	ldr	r3, [pc, #136]	; (8015930 <tcp_receive+0xd04>)
 80158a6:	681a      	ldr	r2, [r3, #0]
 80158a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80158aa:	68db      	ldr	r3, [r3, #12]
 80158ac:	685b      	ldr	r3, [r3, #4]
 80158ae:	1ad3      	subs	r3, r2, r3
 80158b0:	3b01      	subs	r3, #1
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	db3e      	blt.n	8015934 <tcp_receive+0xd08>
 80158b6:	4b1e      	ldr	r3, [pc, #120]	; (8015930 <tcp_receive+0xd04>)
 80158b8:	681a      	ldr	r2, [r3, #0]
 80158ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158bc:	68db      	ldr	r3, [r3, #12]
 80158be:	685b      	ldr	r3, [r3, #4]
 80158c0:	1ad3      	subs	r3, r2, r3
 80158c2:	3301      	adds	r3, #1
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	dc35      	bgt.n	8015934 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80158c8:	4818      	ldr	r0, [pc, #96]	; (801592c <tcp_receive+0xd00>)
 80158ca:	f7fd faab 	bl	8012e24 <tcp_seg_copy>
 80158ce:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80158d0:	69fb      	ldr	r3, [r7, #28]
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	f000 8109 	beq.w	8015aea <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80158d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80158da:	68db      	ldr	r3, [r3, #12]
 80158dc:	685b      	ldr	r3, [r3, #4]
 80158de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80158e0:	8912      	ldrh	r2, [r2, #8]
 80158e2:	441a      	add	r2, r3
 80158e4:	4b12      	ldr	r3, [pc, #72]	; (8015930 <tcp_receive+0xd04>)
 80158e6:	681b      	ldr	r3, [r3, #0]
 80158e8:	1ad3      	subs	r3, r2, r3
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	dd12      	ble.n	8015914 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80158ee:	4b10      	ldr	r3, [pc, #64]	; (8015930 <tcp_receive+0xd04>)
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	b29a      	uxth	r2, r3
 80158f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80158f6:	68db      	ldr	r3, [r3, #12]
 80158f8:	685b      	ldr	r3, [r3, #4]
 80158fa:	b29b      	uxth	r3, r3
 80158fc:	1ad3      	subs	r3, r2, r3
 80158fe:	b29a      	uxth	r2, r3
 8015900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015902:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8015904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015906:	685a      	ldr	r2, [r3, #4]
 8015908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801590a:	891b      	ldrh	r3, [r3, #8]
 801590c:	4619      	mov	r1, r3
 801590e:	4610      	mov	r0, r2
 8015910:	f7fb fc84 	bl	801121c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8015914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015916:	69fa      	ldr	r2, [r7, #28]
 8015918:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801591a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801591c:	69f8      	ldr	r0, [r7, #28]
 801591e:	f7ff f881 	bl	8014a24 <tcp_oos_insert_segment>
                  }
                  break;
 8015922:	e0e2      	b.n	8015aea <tcp_receive+0xebe>
 8015924:	20007094 	.word	0x20007094
 8015928:	20007091 	.word	0x20007091
 801592c:	20007064 	.word	0x20007064
 8015930:	20007084 	.word	0x20007084
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8015934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015936:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8015938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	2b00      	cmp	r3, #0
 801593e:	f040 80c6 	bne.w	8015ace <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8015942:	4b80      	ldr	r3, [pc, #512]	; (8015b44 <tcp_receive+0xf18>)
 8015944:	681a      	ldr	r2, [r3, #0]
 8015946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015948:	68db      	ldr	r3, [r3, #12]
 801594a:	685b      	ldr	r3, [r3, #4]
 801594c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801594e:	2b00      	cmp	r3, #0
 8015950:	f340 80bd 	ble.w	8015ace <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8015954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015956:	68db      	ldr	r3, [r3, #12]
 8015958:	899b      	ldrh	r3, [r3, #12]
 801595a:	b29b      	uxth	r3, r3
 801595c:	4618      	mov	r0, r3
 801595e:	f7fa f9dd 	bl	800fd1c <lwip_htons>
 8015962:	4603      	mov	r3, r0
 8015964:	b2db      	uxtb	r3, r3
 8015966:	f003 0301 	and.w	r3, r3, #1
 801596a:	2b00      	cmp	r3, #0
 801596c:	f040 80bf 	bne.w	8015aee <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8015970:	4875      	ldr	r0, [pc, #468]	; (8015b48 <tcp_receive+0xf1c>)
 8015972:	f7fd fa57 	bl	8012e24 <tcp_seg_copy>
 8015976:	4602      	mov	r2, r0
 8015978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801597a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801597c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801597e:	681b      	ldr	r3, [r3, #0]
 8015980:	2b00      	cmp	r3, #0
 8015982:	f000 80b6 	beq.w	8015af2 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8015986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015988:	68db      	ldr	r3, [r3, #12]
 801598a:	685b      	ldr	r3, [r3, #4]
 801598c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801598e:	8912      	ldrh	r2, [r2, #8]
 8015990:	441a      	add	r2, r3
 8015992:	4b6c      	ldr	r3, [pc, #432]	; (8015b44 <tcp_receive+0xf18>)
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	1ad3      	subs	r3, r2, r3
 8015998:	2b00      	cmp	r3, #0
 801599a:	dd12      	ble.n	80159c2 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801599c:	4b69      	ldr	r3, [pc, #420]	; (8015b44 <tcp_receive+0xf18>)
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	b29a      	uxth	r2, r3
 80159a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159a4:	68db      	ldr	r3, [r3, #12]
 80159a6:	685b      	ldr	r3, [r3, #4]
 80159a8:	b29b      	uxth	r3, r3
 80159aa:	1ad3      	subs	r3, r2, r3
 80159ac:	b29a      	uxth	r2, r3
 80159ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159b0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80159b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159b4:	685a      	ldr	r2, [r3, #4]
 80159b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159b8:	891b      	ldrh	r3, [r3, #8]
 80159ba:	4619      	mov	r1, r3
 80159bc:	4610      	mov	r0, r2
 80159be:	f7fb fc2d 	bl	801121c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80159c2:	4b62      	ldr	r3, [pc, #392]	; (8015b4c <tcp_receive+0xf20>)
 80159c4:	881b      	ldrh	r3, [r3, #0]
 80159c6:	461a      	mov	r2, r3
 80159c8:	4b5e      	ldr	r3, [pc, #376]	; (8015b44 <tcp_receive+0xf18>)
 80159ca:	681b      	ldr	r3, [r3, #0]
 80159cc:	441a      	add	r2, r3
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159d2:	6879      	ldr	r1, [r7, #4]
 80159d4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80159d6:	440b      	add	r3, r1
 80159d8:	1ad3      	subs	r3, r2, r3
 80159da:	2b00      	cmp	r3, #0
 80159dc:	f340 8089 	ble.w	8015af2 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80159e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159e2:	681b      	ldr	r3, [r3, #0]
 80159e4:	68db      	ldr	r3, [r3, #12]
 80159e6:	899b      	ldrh	r3, [r3, #12]
 80159e8:	b29b      	uxth	r3, r3
 80159ea:	4618      	mov	r0, r3
 80159ec:	f7fa f996 	bl	800fd1c <lwip_htons>
 80159f0:	4603      	mov	r3, r0
 80159f2:	b2db      	uxtb	r3, r3
 80159f4:	f003 0301 	and.w	r3, r3, #1
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d022      	beq.n	8015a42 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80159fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159fe:	681b      	ldr	r3, [r3, #0]
 8015a00:	68db      	ldr	r3, [r3, #12]
 8015a02:	899b      	ldrh	r3, [r3, #12]
 8015a04:	b29b      	uxth	r3, r3
 8015a06:	b21b      	sxth	r3, r3
 8015a08:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015a0c:	b21c      	sxth	r4, r3
 8015a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a10:	681b      	ldr	r3, [r3, #0]
 8015a12:	68db      	ldr	r3, [r3, #12]
 8015a14:	899b      	ldrh	r3, [r3, #12]
 8015a16:	b29b      	uxth	r3, r3
 8015a18:	4618      	mov	r0, r3
 8015a1a:	f7fa f97f 	bl	800fd1c <lwip_htons>
 8015a1e:	4603      	mov	r3, r0
 8015a20:	b2db      	uxtb	r3, r3
 8015a22:	b29b      	uxth	r3, r3
 8015a24:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015a28:	b29b      	uxth	r3, r3
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	f7fa f976 	bl	800fd1c <lwip_htons>
 8015a30:	4603      	mov	r3, r0
 8015a32:	b21b      	sxth	r3, r3
 8015a34:	4323      	orrs	r3, r4
 8015a36:	b21a      	sxth	r2, r3
 8015a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	68db      	ldr	r3, [r3, #12]
 8015a3e:	b292      	uxth	r2, r2
 8015a40:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a46:	b29a      	uxth	r2, r3
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015a4c:	4413      	add	r3, r2
 8015a4e:	b299      	uxth	r1, r3
 8015a50:	4b3c      	ldr	r3, [pc, #240]	; (8015b44 <tcp_receive+0xf18>)
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	b29a      	uxth	r2, r3
 8015a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a58:	681b      	ldr	r3, [r3, #0]
 8015a5a:	1a8a      	subs	r2, r1, r2
 8015a5c:	b292      	uxth	r2, r2
 8015a5e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8015a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	685a      	ldr	r2, [r3, #4]
 8015a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	891b      	ldrh	r3, [r3, #8]
 8015a6c:	4619      	mov	r1, r3
 8015a6e:	4610      	mov	r0, r2
 8015a70:	f7fb fbd4 	bl	801121c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8015a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a76:	681b      	ldr	r3, [r3, #0]
 8015a78:	891c      	ldrh	r4, [r3, #8]
 8015a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a7c:	681b      	ldr	r3, [r3, #0]
 8015a7e:	68db      	ldr	r3, [r3, #12]
 8015a80:	899b      	ldrh	r3, [r3, #12]
 8015a82:	b29b      	uxth	r3, r3
 8015a84:	4618      	mov	r0, r3
 8015a86:	f7fa f949 	bl	800fd1c <lwip_htons>
 8015a8a:	4603      	mov	r3, r0
 8015a8c:	b2db      	uxtb	r3, r3
 8015a8e:	f003 0303 	and.w	r3, r3, #3
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d001      	beq.n	8015a9a <tcp_receive+0xe6e>
 8015a96:	2301      	movs	r3, #1
 8015a98:	e000      	b.n	8015a9c <tcp_receive+0xe70>
 8015a9a:	2300      	movs	r3, #0
 8015a9c:	4423      	add	r3, r4
 8015a9e:	b29a      	uxth	r2, r3
 8015aa0:	4b2a      	ldr	r3, [pc, #168]	; (8015b4c <tcp_receive+0xf20>)
 8015aa2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015aa4:	4b29      	ldr	r3, [pc, #164]	; (8015b4c <tcp_receive+0xf20>)
 8015aa6:	881b      	ldrh	r3, [r3, #0]
 8015aa8:	461a      	mov	r2, r3
 8015aaa:	4b26      	ldr	r3, [pc, #152]	; (8015b44 <tcp_receive+0xf18>)
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	441a      	add	r2, r3
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ab4:	6879      	ldr	r1, [r7, #4]
 8015ab6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015ab8:	440b      	add	r3, r1
 8015aba:	429a      	cmp	r2, r3
 8015abc:	d019      	beq.n	8015af2 <tcp_receive+0xec6>
 8015abe:	4b24      	ldr	r3, [pc, #144]	; (8015b50 <tcp_receive+0xf24>)
 8015ac0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8015ac4:	4923      	ldr	r1, [pc, #140]	; (8015b54 <tcp_receive+0xf28>)
 8015ac6:	4824      	ldr	r0, [pc, #144]	; (8015b58 <tcp_receive+0xf2c>)
 8015ac8:	f005 fbce 	bl	801b268 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8015acc:	e011      	b.n	8015af2 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ad0:	681b      	ldr	r3, [r3, #0]
 8015ad2:	63bb      	str	r3, [r7, #56]	; 0x38
 8015ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	f47f aea4 	bne.w	8015824 <tcp_receive+0xbf8>
 8015adc:	e00a      	b.n	8015af4 <tcp_receive+0xec8>
                break;
 8015ade:	bf00      	nop
 8015ae0:	e008      	b.n	8015af4 <tcp_receive+0xec8>
                break;
 8015ae2:	bf00      	nop
 8015ae4:	e006      	b.n	8015af4 <tcp_receive+0xec8>
                  break;
 8015ae6:	bf00      	nop
 8015ae8:	e004      	b.n	8015af4 <tcp_receive+0xec8>
                  break;
 8015aea:	bf00      	nop
 8015aec:	e002      	b.n	8015af4 <tcp_receive+0xec8>
                  break;
 8015aee:	bf00      	nop
 8015af0:	e000      	b.n	8015af4 <tcp_receive+0xec8>
                break;
 8015af2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8015af4:	6878      	ldr	r0, [r7, #4]
 8015af6:	f001 fe8b 	bl	8017810 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8015afa:	e003      	b.n	8015b04 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8015afc:	6878      	ldr	r0, [r7, #4]
 8015afe:	f001 fe87 	bl	8017810 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015b02:	e01a      	b.n	8015b3a <tcp_receive+0xf0e>
 8015b04:	e019      	b.n	8015b3a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8015b06:	4b0f      	ldr	r3, [pc, #60]	; (8015b44 <tcp_receive+0xf18>)
 8015b08:	681a      	ldr	r2, [r3, #0]
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b0e:	1ad3      	subs	r3, r2, r3
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	db0a      	blt.n	8015b2a <tcp_receive+0xefe>
 8015b14:	4b0b      	ldr	r3, [pc, #44]	; (8015b44 <tcp_receive+0xf18>)
 8015b16:	681a      	ldr	r2, [r3, #0]
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b1c:	6879      	ldr	r1, [r7, #4]
 8015b1e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015b20:	440b      	add	r3, r1
 8015b22:	1ad3      	subs	r3, r2, r3
 8015b24:	3301      	adds	r3, #1
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	dd07      	ble.n	8015b3a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	8b5b      	ldrh	r3, [r3, #26]
 8015b2e:	f043 0302 	orr.w	r3, r3, #2
 8015b32:	b29a      	uxth	r2, r3
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8015b38:	e7ff      	b.n	8015b3a <tcp_receive+0xf0e>
 8015b3a:	bf00      	nop
 8015b3c:	3750      	adds	r7, #80	; 0x50
 8015b3e:	46bd      	mov	sp, r7
 8015b40:	bdb0      	pop	{r4, r5, r7, pc}
 8015b42:	bf00      	nop
 8015b44:	20007084 	.word	0x20007084
 8015b48:	20007064 	.word	0x20007064
 8015b4c:	2000708e 	.word	0x2000708e
 8015b50:	0801f504 	.word	0x0801f504
 8015b54:	0801f8ac 	.word	0x0801f8ac
 8015b58:	0801f550 	.word	0x0801f550

08015b5c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8015b5c:	b480      	push	{r7}
 8015b5e:	b083      	sub	sp, #12
 8015b60:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8015b62:	4b15      	ldr	r3, [pc, #84]	; (8015bb8 <tcp_get_next_optbyte+0x5c>)
 8015b64:	881b      	ldrh	r3, [r3, #0]
 8015b66:	1c5a      	adds	r2, r3, #1
 8015b68:	b291      	uxth	r1, r2
 8015b6a:	4a13      	ldr	r2, [pc, #76]	; (8015bb8 <tcp_get_next_optbyte+0x5c>)
 8015b6c:	8011      	strh	r1, [r2, #0]
 8015b6e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8015b70:	4b12      	ldr	r3, [pc, #72]	; (8015bbc <tcp_get_next_optbyte+0x60>)
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	d004      	beq.n	8015b82 <tcp_get_next_optbyte+0x26>
 8015b78:	4b11      	ldr	r3, [pc, #68]	; (8015bc0 <tcp_get_next_optbyte+0x64>)
 8015b7a:	881b      	ldrh	r3, [r3, #0]
 8015b7c:	88fa      	ldrh	r2, [r7, #6]
 8015b7e:	429a      	cmp	r2, r3
 8015b80:	d208      	bcs.n	8015b94 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8015b82:	4b10      	ldr	r3, [pc, #64]	; (8015bc4 <tcp_get_next_optbyte+0x68>)
 8015b84:	681b      	ldr	r3, [r3, #0]
 8015b86:	3314      	adds	r3, #20
 8015b88:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8015b8a:	88fb      	ldrh	r3, [r7, #6]
 8015b8c:	683a      	ldr	r2, [r7, #0]
 8015b8e:	4413      	add	r3, r2
 8015b90:	781b      	ldrb	r3, [r3, #0]
 8015b92:	e00b      	b.n	8015bac <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8015b94:	88fb      	ldrh	r3, [r7, #6]
 8015b96:	b2da      	uxtb	r2, r3
 8015b98:	4b09      	ldr	r3, [pc, #36]	; (8015bc0 <tcp_get_next_optbyte+0x64>)
 8015b9a:	881b      	ldrh	r3, [r3, #0]
 8015b9c:	b2db      	uxtb	r3, r3
 8015b9e:	1ad3      	subs	r3, r2, r3
 8015ba0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8015ba2:	4b06      	ldr	r3, [pc, #24]	; (8015bbc <tcp_get_next_optbyte+0x60>)
 8015ba4:	681a      	ldr	r2, [r3, #0]
 8015ba6:	797b      	ldrb	r3, [r7, #5]
 8015ba8:	4413      	add	r3, r2
 8015baa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015bac:	4618      	mov	r0, r3
 8015bae:	370c      	adds	r7, #12
 8015bb0:	46bd      	mov	sp, r7
 8015bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bb6:	4770      	bx	lr
 8015bb8:	20007080 	.word	0x20007080
 8015bbc:	2000707c 	.word	0x2000707c
 8015bc0:	2000707a 	.word	0x2000707a
 8015bc4:	20007074 	.word	0x20007074

08015bc8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8015bc8:	b580      	push	{r7, lr}
 8015bca:	b084      	sub	sp, #16
 8015bcc:	af00      	add	r7, sp, #0
 8015bce:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	d106      	bne.n	8015be4 <tcp_parseopt+0x1c>
 8015bd6:	4b32      	ldr	r3, [pc, #200]	; (8015ca0 <tcp_parseopt+0xd8>)
 8015bd8:	f240 727d 	movw	r2, #1917	; 0x77d
 8015bdc:	4931      	ldr	r1, [pc, #196]	; (8015ca4 <tcp_parseopt+0xdc>)
 8015bde:	4832      	ldr	r0, [pc, #200]	; (8015ca8 <tcp_parseopt+0xe0>)
 8015be0:	f005 fb42 	bl	801b268 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8015be4:	4b31      	ldr	r3, [pc, #196]	; (8015cac <tcp_parseopt+0xe4>)
 8015be6:	881b      	ldrh	r3, [r3, #0]
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	d056      	beq.n	8015c9a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015bec:	4b30      	ldr	r3, [pc, #192]	; (8015cb0 <tcp_parseopt+0xe8>)
 8015bee:	2200      	movs	r2, #0
 8015bf0:	801a      	strh	r2, [r3, #0]
 8015bf2:	e046      	b.n	8015c82 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8015bf4:	f7ff ffb2 	bl	8015b5c <tcp_get_next_optbyte>
 8015bf8:	4603      	mov	r3, r0
 8015bfa:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8015bfc:	7bfb      	ldrb	r3, [r7, #15]
 8015bfe:	2b02      	cmp	r3, #2
 8015c00:	d006      	beq.n	8015c10 <tcp_parseopt+0x48>
 8015c02:	2b02      	cmp	r3, #2
 8015c04:	dc2c      	bgt.n	8015c60 <tcp_parseopt+0x98>
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d042      	beq.n	8015c90 <tcp_parseopt+0xc8>
 8015c0a:	2b01      	cmp	r3, #1
 8015c0c:	d128      	bne.n	8015c60 <tcp_parseopt+0x98>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8015c0e:	e038      	b.n	8015c82 <tcp_parseopt+0xba>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8015c10:	f7ff ffa4 	bl	8015b5c <tcp_get_next_optbyte>
 8015c14:	4603      	mov	r3, r0
 8015c16:	2b04      	cmp	r3, #4
 8015c18:	d13c      	bne.n	8015c94 <tcp_parseopt+0xcc>
 8015c1a:	4b25      	ldr	r3, [pc, #148]	; (8015cb0 <tcp_parseopt+0xe8>)
 8015c1c:	881b      	ldrh	r3, [r3, #0]
 8015c1e:	3301      	adds	r3, #1
 8015c20:	4a22      	ldr	r2, [pc, #136]	; (8015cac <tcp_parseopt+0xe4>)
 8015c22:	8812      	ldrh	r2, [r2, #0]
 8015c24:	4293      	cmp	r3, r2
 8015c26:	da35      	bge.n	8015c94 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8015c28:	f7ff ff98 	bl	8015b5c <tcp_get_next_optbyte>
 8015c2c:	4603      	mov	r3, r0
 8015c2e:	b29b      	uxth	r3, r3
 8015c30:	021b      	lsls	r3, r3, #8
 8015c32:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8015c34:	f7ff ff92 	bl	8015b5c <tcp_get_next_optbyte>
 8015c38:	4603      	mov	r3, r0
 8015c3a:	b29a      	uxth	r2, r3
 8015c3c:	89bb      	ldrh	r3, [r7, #12]
 8015c3e:	4313      	orrs	r3, r2
 8015c40:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8015c42:	89bb      	ldrh	r3, [r7, #12]
 8015c44:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8015c48:	4293      	cmp	r3, r2
 8015c4a:	d804      	bhi.n	8015c56 <tcp_parseopt+0x8e>
 8015c4c:	89bb      	ldrh	r3, [r7, #12]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d001      	beq.n	8015c56 <tcp_parseopt+0x8e>
 8015c52:	89ba      	ldrh	r2, [r7, #12]
 8015c54:	e001      	b.n	8015c5a <tcp_parseopt+0x92>
 8015c56:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8015c5e:	e010      	b.n	8015c82 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8015c60:	f7ff ff7c 	bl	8015b5c <tcp_get_next_optbyte>
 8015c64:	4603      	mov	r3, r0
 8015c66:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8015c68:	7afb      	ldrb	r3, [r7, #11]
 8015c6a:	2b01      	cmp	r3, #1
 8015c6c:	d914      	bls.n	8015c98 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8015c6e:	7afb      	ldrb	r3, [r7, #11]
 8015c70:	b29a      	uxth	r2, r3
 8015c72:	4b0f      	ldr	r3, [pc, #60]	; (8015cb0 <tcp_parseopt+0xe8>)
 8015c74:	881b      	ldrh	r3, [r3, #0]
 8015c76:	4413      	add	r3, r2
 8015c78:	b29b      	uxth	r3, r3
 8015c7a:	3b02      	subs	r3, #2
 8015c7c:	b29a      	uxth	r2, r3
 8015c7e:	4b0c      	ldr	r3, [pc, #48]	; (8015cb0 <tcp_parseopt+0xe8>)
 8015c80:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015c82:	4b0b      	ldr	r3, [pc, #44]	; (8015cb0 <tcp_parseopt+0xe8>)
 8015c84:	881a      	ldrh	r2, [r3, #0]
 8015c86:	4b09      	ldr	r3, [pc, #36]	; (8015cac <tcp_parseopt+0xe4>)
 8015c88:	881b      	ldrh	r3, [r3, #0]
 8015c8a:	429a      	cmp	r2, r3
 8015c8c:	d3b2      	bcc.n	8015bf4 <tcp_parseopt+0x2c>
 8015c8e:	e004      	b.n	8015c9a <tcp_parseopt+0xd2>
          return;
 8015c90:	bf00      	nop
 8015c92:	e002      	b.n	8015c9a <tcp_parseopt+0xd2>
            return;
 8015c94:	bf00      	nop
 8015c96:	e000      	b.n	8015c9a <tcp_parseopt+0xd2>
            return;
 8015c98:	bf00      	nop
      }
    }
  }
}
 8015c9a:	3710      	adds	r7, #16
 8015c9c:	46bd      	mov	sp, r7
 8015c9e:	bd80      	pop	{r7, pc}
 8015ca0:	0801f504 	.word	0x0801f504
 8015ca4:	0801f968 	.word	0x0801f968
 8015ca8:	0801f550 	.word	0x0801f550
 8015cac:	20007078 	.word	0x20007078
 8015cb0:	20007080 	.word	0x20007080

08015cb4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8015cb4:	b480      	push	{r7}
 8015cb6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8015cb8:	4b05      	ldr	r3, [pc, #20]	; (8015cd0 <tcp_trigger_input_pcb_close+0x1c>)
 8015cba:	781b      	ldrb	r3, [r3, #0]
 8015cbc:	f043 0310 	orr.w	r3, r3, #16
 8015cc0:	b2da      	uxtb	r2, r3
 8015cc2:	4b03      	ldr	r3, [pc, #12]	; (8015cd0 <tcp_trigger_input_pcb_close+0x1c>)
 8015cc4:	701a      	strb	r2, [r3, #0]
}
 8015cc6:	bf00      	nop
 8015cc8:	46bd      	mov	sp, r7
 8015cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cce:	4770      	bx	lr
 8015cd0:	20007091 	.word	0x20007091

08015cd4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8015cd4:	b580      	push	{r7, lr}
 8015cd6:	b084      	sub	sp, #16
 8015cd8:	af00      	add	r7, sp, #0
 8015cda:	60f8      	str	r0, [r7, #12]
 8015cdc:	60b9      	str	r1, [r7, #8]
 8015cde:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d00a      	beq.n	8015cfc <tcp_route+0x28>
 8015ce6:	68fb      	ldr	r3, [r7, #12]
 8015ce8:	7a1b      	ldrb	r3, [r3, #8]
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d006      	beq.n	8015cfc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8015cee:	68fb      	ldr	r3, [r7, #12]
 8015cf0:	7a1b      	ldrb	r3, [r3, #8]
 8015cf2:	4618      	mov	r0, r3
 8015cf4:	f7fb f8b6 	bl	8010e64 <netif_get_by_index>
 8015cf8:	4603      	mov	r3, r0
 8015cfa:	e003      	b.n	8015d04 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8015cfc:	6878      	ldr	r0, [r7, #4]
 8015cfe:	f003 fafb 	bl	80192f8 <ip4_route>
 8015d02:	4603      	mov	r3, r0
  }
}
 8015d04:	4618      	mov	r0, r3
 8015d06:	3710      	adds	r7, #16
 8015d08:	46bd      	mov	sp, r7
 8015d0a:	bd80      	pop	{r7, pc}

08015d0c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8015d0c:	b590      	push	{r4, r7, lr}
 8015d0e:	b087      	sub	sp, #28
 8015d10:	af00      	add	r7, sp, #0
 8015d12:	60f8      	str	r0, [r7, #12]
 8015d14:	60b9      	str	r1, [r7, #8]
 8015d16:	603b      	str	r3, [r7, #0]
 8015d18:	4613      	mov	r3, r2
 8015d1a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d105      	bne.n	8015d2e <tcp_create_segment+0x22>
 8015d22:	4b44      	ldr	r3, [pc, #272]	; (8015e34 <tcp_create_segment+0x128>)
 8015d24:	22a3      	movs	r2, #163	; 0xa3
 8015d26:	4944      	ldr	r1, [pc, #272]	; (8015e38 <tcp_create_segment+0x12c>)
 8015d28:	4844      	ldr	r0, [pc, #272]	; (8015e3c <tcp_create_segment+0x130>)
 8015d2a:	f005 fa9d 	bl	801b268 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8015d2e:	68bb      	ldr	r3, [r7, #8]
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d105      	bne.n	8015d40 <tcp_create_segment+0x34>
 8015d34:	4b3f      	ldr	r3, [pc, #252]	; (8015e34 <tcp_create_segment+0x128>)
 8015d36:	22a4      	movs	r2, #164	; 0xa4
 8015d38:	4941      	ldr	r1, [pc, #260]	; (8015e40 <tcp_create_segment+0x134>)
 8015d3a:	4840      	ldr	r0, [pc, #256]	; (8015e3c <tcp_create_segment+0x130>)
 8015d3c:	f005 fa94 	bl	801b268 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015d40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015d44:	009b      	lsls	r3, r3, #2
 8015d46:	b2db      	uxtb	r3, r3
 8015d48:	f003 0304 	and.w	r3, r3, #4
 8015d4c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8015d4e:	2003      	movs	r0, #3
 8015d50:	f7fa fd02 	bl	8010758 <memp_malloc>
 8015d54:	6138      	str	r0, [r7, #16]
 8015d56:	693b      	ldr	r3, [r7, #16]
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d104      	bne.n	8015d66 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8015d5c:	68b8      	ldr	r0, [r7, #8]
 8015d5e:	f7fb fbe1 	bl	8011524 <pbuf_free>
    return NULL;
 8015d62:	2300      	movs	r3, #0
 8015d64:	e061      	b.n	8015e2a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8015d66:	693b      	ldr	r3, [r7, #16]
 8015d68:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015d6c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8015d6e:	693b      	ldr	r3, [r7, #16]
 8015d70:	2200      	movs	r2, #0
 8015d72:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8015d74:	693b      	ldr	r3, [r7, #16]
 8015d76:	68ba      	ldr	r2, [r7, #8]
 8015d78:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8015d7a:	68bb      	ldr	r3, [r7, #8]
 8015d7c:	891a      	ldrh	r2, [r3, #8]
 8015d7e:	7dfb      	ldrb	r3, [r7, #23]
 8015d80:	b29b      	uxth	r3, r3
 8015d82:	429a      	cmp	r2, r3
 8015d84:	d205      	bcs.n	8015d92 <tcp_create_segment+0x86>
 8015d86:	4b2b      	ldr	r3, [pc, #172]	; (8015e34 <tcp_create_segment+0x128>)
 8015d88:	22b0      	movs	r2, #176	; 0xb0
 8015d8a:	492e      	ldr	r1, [pc, #184]	; (8015e44 <tcp_create_segment+0x138>)
 8015d8c:	482b      	ldr	r0, [pc, #172]	; (8015e3c <tcp_create_segment+0x130>)
 8015d8e:	f005 fa6b 	bl	801b268 <iprintf>
  seg->len = p->tot_len - optlen;
 8015d92:	68bb      	ldr	r3, [r7, #8]
 8015d94:	891a      	ldrh	r2, [r3, #8]
 8015d96:	7dfb      	ldrb	r3, [r7, #23]
 8015d98:	b29b      	uxth	r3, r3
 8015d9a:	1ad3      	subs	r3, r2, r3
 8015d9c:	b29a      	uxth	r2, r3
 8015d9e:	693b      	ldr	r3, [r7, #16]
 8015da0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8015da2:	2114      	movs	r1, #20
 8015da4:	68b8      	ldr	r0, [r7, #8]
 8015da6:	f7fb fb27 	bl	80113f8 <pbuf_add_header>
 8015daa:	4603      	mov	r3, r0
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d004      	beq.n	8015dba <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8015db0:	6938      	ldr	r0, [r7, #16]
 8015db2:	f7fd f81e 	bl	8012df2 <tcp_seg_free>
    return NULL;
 8015db6:	2300      	movs	r3, #0
 8015db8:	e037      	b.n	8015e2a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8015dba:	693b      	ldr	r3, [r7, #16]
 8015dbc:	685b      	ldr	r3, [r3, #4]
 8015dbe:	685a      	ldr	r2, [r3, #4]
 8015dc0:	693b      	ldr	r3, [r7, #16]
 8015dc2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8015dc4:	68fb      	ldr	r3, [r7, #12]
 8015dc6:	8ada      	ldrh	r2, [r3, #22]
 8015dc8:	693b      	ldr	r3, [r7, #16]
 8015dca:	68dc      	ldr	r4, [r3, #12]
 8015dcc:	4610      	mov	r0, r2
 8015dce:	f7f9 ffa5 	bl	800fd1c <lwip_htons>
 8015dd2:	4603      	mov	r3, r0
 8015dd4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8015dd6:	68fb      	ldr	r3, [r7, #12]
 8015dd8:	8b1a      	ldrh	r2, [r3, #24]
 8015dda:	693b      	ldr	r3, [r7, #16]
 8015ddc:	68dc      	ldr	r4, [r3, #12]
 8015dde:	4610      	mov	r0, r2
 8015de0:	f7f9 ff9c 	bl	800fd1c <lwip_htons>
 8015de4:	4603      	mov	r3, r0
 8015de6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8015de8:	693b      	ldr	r3, [r7, #16]
 8015dea:	68dc      	ldr	r4, [r3, #12]
 8015dec:	6838      	ldr	r0, [r7, #0]
 8015dee:	f7f9 ffaa 	bl	800fd46 <lwip_htonl>
 8015df2:	4603      	mov	r3, r0
 8015df4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8015df6:	7dfb      	ldrb	r3, [r7, #23]
 8015df8:	089b      	lsrs	r3, r3, #2
 8015dfa:	b2db      	uxtb	r3, r3
 8015dfc:	b29b      	uxth	r3, r3
 8015dfe:	3305      	adds	r3, #5
 8015e00:	b29b      	uxth	r3, r3
 8015e02:	031b      	lsls	r3, r3, #12
 8015e04:	b29a      	uxth	r2, r3
 8015e06:	79fb      	ldrb	r3, [r7, #7]
 8015e08:	b29b      	uxth	r3, r3
 8015e0a:	4313      	orrs	r3, r2
 8015e0c:	b29a      	uxth	r2, r3
 8015e0e:	693b      	ldr	r3, [r7, #16]
 8015e10:	68dc      	ldr	r4, [r3, #12]
 8015e12:	4610      	mov	r0, r2
 8015e14:	f7f9 ff82 	bl	800fd1c <lwip_htons>
 8015e18:	4603      	mov	r3, r0
 8015e1a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8015e1c:	693b      	ldr	r3, [r7, #16]
 8015e1e:	68db      	ldr	r3, [r3, #12]
 8015e20:	2200      	movs	r2, #0
 8015e22:	749a      	strb	r2, [r3, #18]
 8015e24:	2200      	movs	r2, #0
 8015e26:	74da      	strb	r2, [r3, #19]
  return seg;
 8015e28:	693b      	ldr	r3, [r7, #16]
}
 8015e2a:	4618      	mov	r0, r3
 8015e2c:	371c      	adds	r7, #28
 8015e2e:	46bd      	mov	sp, r7
 8015e30:	bd90      	pop	{r4, r7, pc}
 8015e32:	bf00      	nop
 8015e34:	0801f984 	.word	0x0801f984
 8015e38:	0801f9b8 	.word	0x0801f9b8
 8015e3c:	0801f9d8 	.word	0x0801f9d8
 8015e40:	0801fa00 	.word	0x0801fa00
 8015e44:	0801fa24 	.word	0x0801fa24

08015e48 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8015e48:	b580      	push	{r7, lr}
 8015e4a:	b086      	sub	sp, #24
 8015e4c:	af00      	add	r7, sp, #0
 8015e4e:	607b      	str	r3, [r7, #4]
 8015e50:	4603      	mov	r3, r0
 8015e52:	73fb      	strb	r3, [r7, #15]
 8015e54:	460b      	mov	r3, r1
 8015e56:	81bb      	strh	r3, [r7, #12]
 8015e58:	4613      	mov	r3, r2
 8015e5a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8015e5c:	89bb      	ldrh	r3, [r7, #12]
 8015e5e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d105      	bne.n	8015e72 <tcp_pbuf_prealloc+0x2a>
 8015e66:	4b30      	ldr	r3, [pc, #192]	; (8015f28 <tcp_pbuf_prealloc+0xe0>)
 8015e68:	22e8      	movs	r2, #232	; 0xe8
 8015e6a:	4930      	ldr	r1, [pc, #192]	; (8015f2c <tcp_pbuf_prealloc+0xe4>)
 8015e6c:	4830      	ldr	r0, [pc, #192]	; (8015f30 <tcp_pbuf_prealloc+0xe8>)
 8015e6e:	f005 f9fb 	bl	801b268 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8015e72:	6a3b      	ldr	r3, [r7, #32]
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d105      	bne.n	8015e84 <tcp_pbuf_prealloc+0x3c>
 8015e78:	4b2b      	ldr	r3, [pc, #172]	; (8015f28 <tcp_pbuf_prealloc+0xe0>)
 8015e7a:	22e9      	movs	r2, #233	; 0xe9
 8015e7c:	492d      	ldr	r1, [pc, #180]	; (8015f34 <tcp_pbuf_prealloc+0xec>)
 8015e7e:	482c      	ldr	r0, [pc, #176]	; (8015f30 <tcp_pbuf_prealloc+0xe8>)
 8015e80:	f005 f9f2 	bl	801b268 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8015e84:	89ba      	ldrh	r2, [r7, #12]
 8015e86:	897b      	ldrh	r3, [r7, #10]
 8015e88:	429a      	cmp	r2, r3
 8015e8a:	d221      	bcs.n	8015ed0 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015e8c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015e90:	f003 0302 	and.w	r3, r3, #2
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d111      	bne.n	8015ebc <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8015e98:	6a3b      	ldr	r3, [r7, #32]
 8015e9a:	8b5b      	ldrh	r3, [r3, #26]
 8015e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d115      	bne.n	8015ed0 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8015ea4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d007      	beq.n	8015ebc <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8015eac:	6a3b      	ldr	r3, [r7, #32]
 8015eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d103      	bne.n	8015ebc <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8015eb4:	6a3b      	ldr	r3, [r7, #32]
 8015eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d009      	beq.n	8015ed0 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8015ebc:	89bb      	ldrh	r3, [r7, #12]
 8015ebe:	f203 53b7 	addw	r3, r3, #1463	; 0x5b7
 8015ec2:	f023 0203 	bic.w	r2, r3, #3
 8015ec6:	897b      	ldrh	r3, [r7, #10]
 8015ec8:	4293      	cmp	r3, r2
 8015eca:	bf28      	it	cs
 8015ecc:	4613      	movcs	r3, r2
 8015ece:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8015ed0:	8af9      	ldrh	r1, [r7, #22]
 8015ed2:	7bfb      	ldrb	r3, [r7, #15]
 8015ed4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015ed8:	4618      	mov	r0, r3
 8015eda:	f7fb f83f 	bl	8010f5c <pbuf_alloc>
 8015ede:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015ee0:	693b      	ldr	r3, [r7, #16]
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d101      	bne.n	8015eea <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8015ee6:	2300      	movs	r3, #0
 8015ee8:	e019      	b.n	8015f1e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8015eea:	693b      	ldr	r3, [r7, #16]
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d006      	beq.n	8015f00 <tcp_pbuf_prealloc+0xb8>
 8015ef2:	4b0d      	ldr	r3, [pc, #52]	; (8015f28 <tcp_pbuf_prealloc+0xe0>)
 8015ef4:	f240 120b 	movw	r2, #267	; 0x10b
 8015ef8:	490f      	ldr	r1, [pc, #60]	; (8015f38 <tcp_pbuf_prealloc+0xf0>)
 8015efa:	480d      	ldr	r0, [pc, #52]	; (8015f30 <tcp_pbuf_prealloc+0xe8>)
 8015efc:	f005 f9b4 	bl	801b268 <iprintf>
  *oversize = p->len - length;
 8015f00:	693b      	ldr	r3, [r7, #16]
 8015f02:	895a      	ldrh	r2, [r3, #10]
 8015f04:	89bb      	ldrh	r3, [r7, #12]
 8015f06:	1ad3      	subs	r3, r2, r3
 8015f08:	b29a      	uxth	r2, r3
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8015f0e:	693b      	ldr	r3, [r7, #16]
 8015f10:	89ba      	ldrh	r2, [r7, #12]
 8015f12:	811a      	strh	r2, [r3, #8]
 8015f14:	693b      	ldr	r3, [r7, #16]
 8015f16:	891a      	ldrh	r2, [r3, #8]
 8015f18:	693b      	ldr	r3, [r7, #16]
 8015f1a:	815a      	strh	r2, [r3, #10]
  return p;
 8015f1c:	693b      	ldr	r3, [r7, #16]
}
 8015f1e:	4618      	mov	r0, r3
 8015f20:	3718      	adds	r7, #24
 8015f22:	46bd      	mov	sp, r7
 8015f24:	bd80      	pop	{r7, pc}
 8015f26:	bf00      	nop
 8015f28:	0801f984 	.word	0x0801f984
 8015f2c:	0801fa3c 	.word	0x0801fa3c
 8015f30:	0801f9d8 	.word	0x0801f9d8
 8015f34:	0801fa60 	.word	0x0801fa60
 8015f38:	0801fa80 	.word	0x0801fa80

08015f3c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8015f3c:	b580      	push	{r7, lr}
 8015f3e:	b082      	sub	sp, #8
 8015f40:	af00      	add	r7, sp, #0
 8015f42:	6078      	str	r0, [r7, #4]
 8015f44:	460b      	mov	r3, r1
 8015f46:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d106      	bne.n	8015f5c <tcp_write_checks+0x20>
 8015f4e:	4b33      	ldr	r3, [pc, #204]	; (801601c <tcp_write_checks+0xe0>)
 8015f50:	f240 1233 	movw	r2, #307	; 0x133
 8015f54:	4932      	ldr	r1, [pc, #200]	; (8016020 <tcp_write_checks+0xe4>)
 8015f56:	4833      	ldr	r0, [pc, #204]	; (8016024 <tcp_write_checks+0xe8>)
 8015f58:	f005 f986 	bl	801b268 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	7d1b      	ldrb	r3, [r3, #20]
 8015f60:	2b04      	cmp	r3, #4
 8015f62:	d00e      	beq.n	8015f82 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8015f68:	2b07      	cmp	r3, #7
 8015f6a:	d00a      	beq.n	8015f82 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8015f70:	2b02      	cmp	r3, #2
 8015f72:	d006      	beq.n	8015f82 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8015f78:	2b03      	cmp	r3, #3
 8015f7a:	d002      	beq.n	8015f82 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8015f7c:	f06f 030a 	mvn.w	r3, #10
 8015f80:	e048      	b.n	8016014 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8015f82:	887b      	ldrh	r3, [r7, #2]
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d101      	bne.n	8015f8c <tcp_write_checks+0x50>
    return ERR_OK;
 8015f88:	2300      	movs	r3, #0
 8015f8a:	e043      	b.n	8016014 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015f92:	887a      	ldrh	r2, [r7, #2]
 8015f94:	429a      	cmp	r2, r3
 8015f96:	d909      	bls.n	8015fac <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	8b5b      	ldrh	r3, [r3, #26]
 8015f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015fa0:	b29a      	uxth	r2, r3
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8015faa:	e033      	b.n	8016014 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015fb2:	2b0f      	cmp	r3, #15
 8015fb4:	d909      	bls.n	8015fca <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	8b5b      	ldrh	r3, [r3, #26]
 8015fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015fbe:	b29a      	uxth	r2, r3
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8015fc8:	e024      	b.n	8016014 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d00f      	beq.n	8015ff4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d11a      	bne.n	8016012 <tcp_write_checks+0xd6>
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d116      	bne.n	8016012 <tcp_write_checks+0xd6>
 8015fe4:	4b0d      	ldr	r3, [pc, #52]	; (801601c <tcp_write_checks+0xe0>)
 8015fe6:	f240 1255 	movw	r2, #341	; 0x155
 8015fea:	490f      	ldr	r1, [pc, #60]	; (8016028 <tcp_write_checks+0xec>)
 8015fec:	480d      	ldr	r0, [pc, #52]	; (8016024 <tcp_write_checks+0xe8>)
 8015fee:	f005 f93b 	bl	801b268 <iprintf>
 8015ff2:	e00e      	b.n	8016012 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d103      	bne.n	8016004 <tcp_write_checks+0xc8>
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016000:	2b00      	cmp	r3, #0
 8016002:	d006      	beq.n	8016012 <tcp_write_checks+0xd6>
 8016004:	4b05      	ldr	r3, [pc, #20]	; (801601c <tcp_write_checks+0xe0>)
 8016006:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801600a:	4908      	ldr	r1, [pc, #32]	; (801602c <tcp_write_checks+0xf0>)
 801600c:	4805      	ldr	r0, [pc, #20]	; (8016024 <tcp_write_checks+0xe8>)
 801600e:	f005 f92b 	bl	801b268 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8016012:	2300      	movs	r3, #0
}
 8016014:	4618      	mov	r0, r3
 8016016:	3708      	adds	r7, #8
 8016018:	46bd      	mov	sp, r7
 801601a:	bd80      	pop	{r7, pc}
 801601c:	0801f984 	.word	0x0801f984
 8016020:	0801fa94 	.word	0x0801fa94
 8016024:	0801f9d8 	.word	0x0801f9d8
 8016028:	0801fab4 	.word	0x0801fab4
 801602c:	0801faf0 	.word	0x0801faf0

08016030 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8016030:	b590      	push	{r4, r7, lr}
 8016032:	b09b      	sub	sp, #108	; 0x6c
 8016034:	af04      	add	r7, sp, #16
 8016036:	60f8      	str	r0, [r7, #12]
 8016038:	60b9      	str	r1, [r7, #8]
 801603a:	4611      	mov	r1, r2
 801603c:	461a      	mov	r2, r3
 801603e:	460b      	mov	r3, r1
 8016040:	80fb      	strh	r3, [r7, #6]
 8016042:	4613      	mov	r3, r2
 8016044:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8016046:	2300      	movs	r3, #0
 8016048:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801604a:	2300      	movs	r3, #0
 801604c:	653b      	str	r3, [r7, #80]	; 0x50
 801604e:	2300      	movs	r3, #0
 8016050:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016052:	2300      	movs	r3, #0
 8016054:	64bb      	str	r3, [r7, #72]	; 0x48
 8016056:	2300      	movs	r3, #0
 8016058:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801605a:	2300      	movs	r3, #0
 801605c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8016060:	2300      	movs	r3, #0
 8016062:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8016066:	2300      	movs	r3, #0
 8016068:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801606a:	2300      	movs	r3, #0
 801606c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801606e:	2300      	movs	r3, #0
 8016070:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8016072:	68fb      	ldr	r3, [r7, #12]
 8016074:	2b00      	cmp	r3, #0
 8016076:	d109      	bne.n	801608c <tcp_write+0x5c>
 8016078:	4ba4      	ldr	r3, [pc, #656]	; (801630c <tcp_write+0x2dc>)
 801607a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801607e:	49a4      	ldr	r1, [pc, #656]	; (8016310 <tcp_write+0x2e0>)
 8016080:	48a4      	ldr	r0, [pc, #656]	; (8016314 <tcp_write+0x2e4>)
 8016082:	f005 f8f1 	bl	801b268 <iprintf>
 8016086:	f06f 030f 	mvn.w	r3, #15
 801608a:	e32a      	b.n	80166e2 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801608c:	68fb      	ldr	r3, [r7, #12]
 801608e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8016092:	085b      	lsrs	r3, r3, #1
 8016094:	b29a      	uxth	r2, r3
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801609a:	4293      	cmp	r3, r2
 801609c:	bf28      	it	cs
 801609e:	4613      	movcs	r3, r2
 80160a0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80160a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d102      	bne.n	80160ae <tcp_write+0x7e>
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80160ac:	e000      	b.n	80160b0 <tcp_write+0x80>
 80160ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160b0:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80160b2:	68bb      	ldr	r3, [r7, #8]
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d109      	bne.n	80160cc <tcp_write+0x9c>
 80160b8:	4b94      	ldr	r3, [pc, #592]	; (801630c <tcp_write+0x2dc>)
 80160ba:	f240 12ad 	movw	r2, #429	; 0x1ad
 80160be:	4996      	ldr	r1, [pc, #600]	; (8016318 <tcp_write+0x2e8>)
 80160c0:	4894      	ldr	r0, [pc, #592]	; (8016314 <tcp_write+0x2e4>)
 80160c2:	f005 f8d1 	bl	801b268 <iprintf>
 80160c6:	f06f 030f 	mvn.w	r3, #15
 80160ca:	e30a      	b.n	80166e2 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80160cc:	88fb      	ldrh	r3, [r7, #6]
 80160ce:	4619      	mov	r1, r3
 80160d0:	68f8      	ldr	r0, [r7, #12]
 80160d2:	f7ff ff33 	bl	8015f3c <tcp_write_checks>
 80160d6:	4603      	mov	r3, r0
 80160d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80160dc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d002      	beq.n	80160ea <tcp_write+0xba>
    return err;
 80160e4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80160e8:	e2fb      	b.n	80166e2 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80160ea:	68fb      	ldr	r3, [r7, #12]
 80160ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80160f0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80160f4:	2300      	movs	r3, #0
 80160f6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80160fa:	68fb      	ldr	r3, [r7, #12]
 80160fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80160fe:	2b00      	cmp	r3, #0
 8016100:	f000 80f6 	beq.w	80162f0 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016108:	653b      	str	r3, [r7, #80]	; 0x50
 801610a:	e002      	b.n	8016112 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801610c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016114:	681b      	ldr	r3, [r3, #0]
 8016116:	2b00      	cmp	r3, #0
 8016118:	d1f8      	bne.n	801610c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801611a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801611c:	7a9b      	ldrb	r3, [r3, #10]
 801611e:	009b      	lsls	r3, r3, #2
 8016120:	b29b      	uxth	r3, r3
 8016122:	f003 0304 	and.w	r3, r3, #4
 8016126:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8016128:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801612a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801612c:	891b      	ldrh	r3, [r3, #8]
 801612e:	4619      	mov	r1, r3
 8016130:	8c3b      	ldrh	r3, [r7, #32]
 8016132:	440b      	add	r3, r1
 8016134:	429a      	cmp	r2, r3
 8016136:	da06      	bge.n	8016146 <tcp_write+0x116>
 8016138:	4b74      	ldr	r3, [pc, #464]	; (801630c <tcp_write+0x2dc>)
 801613a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801613e:	4977      	ldr	r1, [pc, #476]	; (801631c <tcp_write+0x2ec>)
 8016140:	4874      	ldr	r0, [pc, #464]	; (8016314 <tcp_write+0x2e4>)
 8016142:	f005 f891 	bl	801b268 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8016146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016148:	891a      	ldrh	r2, [r3, #8]
 801614a:	8c3b      	ldrh	r3, [r7, #32]
 801614c:	4413      	add	r3, r2
 801614e:	b29b      	uxth	r3, r3
 8016150:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016152:	1ad3      	subs	r3, r2, r3
 8016154:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801615c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801615e:	8a7b      	ldrh	r3, [r7, #18]
 8016160:	2b00      	cmp	r3, #0
 8016162:	d026      	beq.n	80161b2 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8016164:	8a7b      	ldrh	r3, [r7, #18]
 8016166:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016168:	429a      	cmp	r2, r3
 801616a:	d206      	bcs.n	801617a <tcp_write+0x14a>
 801616c:	4b67      	ldr	r3, [pc, #412]	; (801630c <tcp_write+0x2dc>)
 801616e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8016172:	496b      	ldr	r1, [pc, #428]	; (8016320 <tcp_write+0x2f0>)
 8016174:	4867      	ldr	r0, [pc, #412]	; (8016314 <tcp_write+0x2e4>)
 8016176:	f005 f877 	bl	801b268 <iprintf>
      seg = last_unsent;
 801617a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801617c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801617e:	8a7b      	ldrh	r3, [r7, #18]
 8016180:	88fa      	ldrh	r2, [r7, #6]
 8016182:	4293      	cmp	r3, r2
 8016184:	bf28      	it	cs
 8016186:	4613      	movcs	r3, r2
 8016188:	b29b      	uxth	r3, r3
 801618a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801618c:	4293      	cmp	r3, r2
 801618e:	bf28      	it	cs
 8016190:	4613      	movcs	r3, r2
 8016192:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8016194:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016198:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801619a:	4413      	add	r3, r2
 801619c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80161a0:	8a7a      	ldrh	r2, [r7, #18]
 80161a2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80161a4:	1ad3      	subs	r3, r2, r3
 80161a6:	b29b      	uxth	r3, r3
 80161a8:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80161aa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80161ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80161ae:	1ad3      	subs	r3, r2, r3
 80161b0:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80161b2:	8a7b      	ldrh	r3, [r7, #18]
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	d00b      	beq.n	80161d0 <tcp_write+0x1a0>
 80161b8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80161bc:	88fb      	ldrh	r3, [r7, #6]
 80161be:	429a      	cmp	r2, r3
 80161c0:	d006      	beq.n	80161d0 <tcp_write+0x1a0>
 80161c2:	4b52      	ldr	r3, [pc, #328]	; (801630c <tcp_write+0x2dc>)
 80161c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80161c8:	4956      	ldr	r1, [pc, #344]	; (8016324 <tcp_write+0x2f4>)
 80161ca:	4852      	ldr	r0, [pc, #328]	; (8016314 <tcp_write+0x2e4>)
 80161cc:	f005 f84c 	bl	801b268 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80161d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80161d4:	88fb      	ldrh	r3, [r7, #6]
 80161d6:	429a      	cmp	r2, r3
 80161d8:	f080 8167 	bcs.w	80164aa <tcp_write+0x47a>
 80161dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80161de:	2b00      	cmp	r3, #0
 80161e0:	f000 8163 	beq.w	80164aa <tcp_write+0x47a>
 80161e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80161e6:	891b      	ldrh	r3, [r3, #8]
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	f000 815e 	beq.w	80164aa <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80161ee:	88fa      	ldrh	r2, [r7, #6]
 80161f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80161f4:	1ad2      	subs	r2, r2, r3
 80161f6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80161f8:	4293      	cmp	r3, r2
 80161fa:	bfa8      	it	ge
 80161fc:	4613      	movge	r3, r2
 80161fe:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8016200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016202:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8016204:	797b      	ldrb	r3, [r7, #5]
 8016206:	f003 0301 	and.w	r3, r3, #1
 801620a:	2b00      	cmp	r3, #0
 801620c:	d027      	beq.n	801625e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801620e:	f107 0012 	add.w	r0, r7, #18
 8016212:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016214:	8bf9      	ldrh	r1, [r7, #30]
 8016216:	2301      	movs	r3, #1
 8016218:	9302      	str	r3, [sp, #8]
 801621a:	797b      	ldrb	r3, [r7, #5]
 801621c:	9301      	str	r3, [sp, #4]
 801621e:	68fb      	ldr	r3, [r7, #12]
 8016220:	9300      	str	r3, [sp, #0]
 8016222:	4603      	mov	r3, r0
 8016224:	2000      	movs	r0, #0
 8016226:	f7ff fe0f 	bl	8015e48 <tcp_pbuf_prealloc>
 801622a:	6578      	str	r0, [r7, #84]	; 0x54
 801622c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801622e:	2b00      	cmp	r3, #0
 8016230:	f000 8225 	beq.w	801667e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8016234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016236:	6858      	ldr	r0, [r3, #4]
 8016238:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801623c:	68ba      	ldr	r2, [r7, #8]
 801623e:	4413      	add	r3, r2
 8016240:	8bfa      	ldrh	r2, [r7, #30]
 8016242:	4619      	mov	r1, r3
 8016244:	f005 fa19 	bl	801b67a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8016248:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801624a:	f7fb f9f3 	bl	8011634 <pbuf_clen>
 801624e:	4603      	mov	r3, r0
 8016250:	461a      	mov	r2, r3
 8016252:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016256:	4413      	add	r3, r2
 8016258:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801625c:	e041      	b.n	80162e2 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801625e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016260:	685b      	ldr	r3, [r3, #4]
 8016262:	637b      	str	r3, [r7, #52]	; 0x34
 8016264:	e002      	b.n	801626c <tcp_write+0x23c>
 8016266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016268:	681b      	ldr	r3, [r3, #0]
 801626a:	637b      	str	r3, [r7, #52]	; 0x34
 801626c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801626e:	681b      	ldr	r3, [r3, #0]
 8016270:	2b00      	cmp	r3, #0
 8016272:	d1f8      	bne.n	8016266 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8016274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016276:	7b1b      	ldrb	r3, [r3, #12]
 8016278:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801627c:	2b00      	cmp	r3, #0
 801627e:	d115      	bne.n	80162ac <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8016280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016282:	685b      	ldr	r3, [r3, #4]
 8016284:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016286:	8952      	ldrh	r2, [r2, #10]
 8016288:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801628a:	68ba      	ldr	r2, [r7, #8]
 801628c:	429a      	cmp	r2, r3
 801628e:	d10d      	bne.n	80162ac <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8016290:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016294:	2b00      	cmp	r3, #0
 8016296:	d006      	beq.n	80162a6 <tcp_write+0x276>
 8016298:	4b1c      	ldr	r3, [pc, #112]	; (801630c <tcp_write+0x2dc>)
 801629a:	f240 2231 	movw	r2, #561	; 0x231
 801629e:	4922      	ldr	r1, [pc, #136]	; (8016328 <tcp_write+0x2f8>)
 80162a0:	481c      	ldr	r0, [pc, #112]	; (8016314 <tcp_write+0x2e4>)
 80162a2:	f004 ffe1 	bl	801b268 <iprintf>
          extendlen = seglen;
 80162a6:	8bfb      	ldrh	r3, [r7, #30]
 80162a8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80162aa:	e01a      	b.n	80162e2 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80162ac:	8bfb      	ldrh	r3, [r7, #30]
 80162ae:	2201      	movs	r2, #1
 80162b0:	4619      	mov	r1, r3
 80162b2:	2000      	movs	r0, #0
 80162b4:	f7fa fe52 	bl	8010f5c <pbuf_alloc>
 80162b8:	6578      	str	r0, [r7, #84]	; 0x54
 80162ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80162bc:	2b00      	cmp	r3, #0
 80162be:	f000 81e0 	beq.w	8016682 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80162c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80162c6:	68ba      	ldr	r2, [r7, #8]
 80162c8:	441a      	add	r2, r3
 80162ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80162cc:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80162ce:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80162d0:	f7fb f9b0 	bl	8011634 <pbuf_clen>
 80162d4:	4603      	mov	r3, r0
 80162d6:	461a      	mov	r2, r3
 80162d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80162dc:	4413      	add	r3, r2
 80162de:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80162e2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80162e6:	8bfb      	ldrh	r3, [r7, #30]
 80162e8:	4413      	add	r3, r2
 80162ea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80162ee:	e0dc      	b.n	80164aa <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	f000 80d7 	beq.w	80164aa <tcp_write+0x47a>
 80162fc:	4b03      	ldr	r3, [pc, #12]	; (801630c <tcp_write+0x2dc>)
 80162fe:	f240 224a 	movw	r2, #586	; 0x24a
 8016302:	490a      	ldr	r1, [pc, #40]	; (801632c <tcp_write+0x2fc>)
 8016304:	4803      	ldr	r0, [pc, #12]	; (8016314 <tcp_write+0x2e4>)
 8016306:	f004 ffaf 	bl	801b268 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801630a:	e0ce      	b.n	80164aa <tcp_write+0x47a>
 801630c:	0801f984 	.word	0x0801f984
 8016310:	0801fb24 	.word	0x0801fb24
 8016314:	0801f9d8 	.word	0x0801f9d8
 8016318:	0801fb3c 	.word	0x0801fb3c
 801631c:	0801fb70 	.word	0x0801fb70
 8016320:	0801fb88 	.word	0x0801fb88
 8016324:	0801fba8 	.word	0x0801fba8
 8016328:	0801fbc8 	.word	0x0801fbc8
 801632c:	0801fbf4 	.word	0x0801fbf4
    struct pbuf *p;
    u16_t left = len - pos;
 8016330:	88fa      	ldrh	r2, [r7, #6]
 8016332:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016336:	1ad3      	subs	r3, r2, r3
 8016338:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801633a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801633e:	b29b      	uxth	r3, r3
 8016340:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016342:	1ad3      	subs	r3, r2, r3
 8016344:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8016346:	8b7a      	ldrh	r2, [r7, #26]
 8016348:	8bbb      	ldrh	r3, [r7, #28]
 801634a:	4293      	cmp	r3, r2
 801634c:	bf28      	it	cs
 801634e:	4613      	movcs	r3, r2
 8016350:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8016352:	797b      	ldrb	r3, [r7, #5]
 8016354:	f003 0301 	and.w	r3, r3, #1
 8016358:	2b00      	cmp	r3, #0
 801635a:	d036      	beq.n	80163ca <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801635c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016360:	b29a      	uxth	r2, r3
 8016362:	8b3b      	ldrh	r3, [r7, #24]
 8016364:	4413      	add	r3, r2
 8016366:	b299      	uxth	r1, r3
 8016368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801636a:	2b00      	cmp	r3, #0
 801636c:	bf0c      	ite	eq
 801636e:	2301      	moveq	r3, #1
 8016370:	2300      	movne	r3, #0
 8016372:	b2db      	uxtb	r3, r3
 8016374:	f107 0012 	add.w	r0, r7, #18
 8016378:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801637a:	9302      	str	r3, [sp, #8]
 801637c:	797b      	ldrb	r3, [r7, #5]
 801637e:	9301      	str	r3, [sp, #4]
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	9300      	str	r3, [sp, #0]
 8016384:	4603      	mov	r3, r0
 8016386:	2036      	movs	r0, #54	; 0x36
 8016388:	f7ff fd5e 	bl	8015e48 <tcp_pbuf_prealloc>
 801638c:	6338      	str	r0, [r7, #48]	; 0x30
 801638e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016390:	2b00      	cmp	r3, #0
 8016392:	f000 8178 	beq.w	8016686 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8016396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016398:	895b      	ldrh	r3, [r3, #10]
 801639a:	8b3a      	ldrh	r2, [r7, #24]
 801639c:	429a      	cmp	r2, r3
 801639e:	d906      	bls.n	80163ae <tcp_write+0x37e>
 80163a0:	4b8c      	ldr	r3, [pc, #560]	; (80165d4 <tcp_write+0x5a4>)
 80163a2:	f240 2266 	movw	r2, #614	; 0x266
 80163a6:	498c      	ldr	r1, [pc, #560]	; (80165d8 <tcp_write+0x5a8>)
 80163a8:	488c      	ldr	r0, [pc, #560]	; (80165dc <tcp_write+0x5ac>)
 80163aa:	f004 ff5d 	bl	801b268 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80163ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163b0:	685a      	ldr	r2, [r3, #4]
 80163b2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80163b6:	18d0      	adds	r0, r2, r3
 80163b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80163bc:	68ba      	ldr	r2, [r7, #8]
 80163be:	4413      	add	r3, r2
 80163c0:	8b3a      	ldrh	r2, [r7, #24]
 80163c2:	4619      	mov	r1, r3
 80163c4:	f005 f959 	bl	801b67a <memcpy>
 80163c8:	e02f      	b.n	801642a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80163ca:	8a7b      	ldrh	r3, [r7, #18]
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d006      	beq.n	80163de <tcp_write+0x3ae>
 80163d0:	4b80      	ldr	r3, [pc, #512]	; (80165d4 <tcp_write+0x5a4>)
 80163d2:	f240 2271 	movw	r2, #625	; 0x271
 80163d6:	4982      	ldr	r1, [pc, #520]	; (80165e0 <tcp_write+0x5b0>)
 80163d8:	4880      	ldr	r0, [pc, #512]	; (80165dc <tcp_write+0x5ac>)
 80163da:	f004 ff45 	bl	801b268 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80163de:	8b3b      	ldrh	r3, [r7, #24]
 80163e0:	2201      	movs	r2, #1
 80163e2:	4619      	mov	r1, r3
 80163e4:	2036      	movs	r0, #54	; 0x36
 80163e6:	f7fa fdb9 	bl	8010f5c <pbuf_alloc>
 80163ea:	6178      	str	r0, [r7, #20]
 80163ec:	697b      	ldr	r3, [r7, #20]
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	f000 814b 	beq.w	801668a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80163f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80163f8:	68ba      	ldr	r2, [r7, #8]
 80163fa:	441a      	add	r2, r3
 80163fc:	697b      	ldr	r3, [r7, #20]
 80163fe:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016400:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016404:	b29b      	uxth	r3, r3
 8016406:	f44f 7220 	mov.w	r2, #640	; 0x280
 801640a:	4619      	mov	r1, r3
 801640c:	2036      	movs	r0, #54	; 0x36
 801640e:	f7fa fda5 	bl	8010f5c <pbuf_alloc>
 8016412:	6338      	str	r0, [r7, #48]	; 0x30
 8016414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016416:	2b00      	cmp	r3, #0
 8016418:	d103      	bne.n	8016422 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801641a:	6978      	ldr	r0, [r7, #20]
 801641c:	f7fb f882 	bl	8011524 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8016420:	e136      	b.n	8016690 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8016422:	6979      	ldr	r1, [r7, #20]
 8016424:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016426:	f7fb f93f 	bl	80116a8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801642a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801642c:	f7fb f902 	bl	8011634 <pbuf_clen>
 8016430:	4603      	mov	r3, r0
 8016432:	461a      	mov	r2, r3
 8016434:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016438:	4413      	add	r3, r2
 801643a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801643e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016442:	2b10      	cmp	r3, #16
 8016444:	d903      	bls.n	801644e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8016446:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016448:	f7fb f86c 	bl	8011524 <pbuf_free>
      goto memerr;
 801644c:	e120      	b.n	8016690 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801644e:	68fb      	ldr	r3, [r7, #12]
 8016450:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8016452:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016456:	441a      	add	r2, r3
 8016458:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801645c:	9300      	str	r3, [sp, #0]
 801645e:	4613      	mov	r3, r2
 8016460:	2200      	movs	r2, #0
 8016462:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016464:	68f8      	ldr	r0, [r7, #12]
 8016466:	f7ff fc51 	bl	8015d0c <tcp_create_segment>
 801646a:	64f8      	str	r0, [r7, #76]	; 0x4c
 801646c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801646e:	2b00      	cmp	r3, #0
 8016470:	f000 810d 	beq.w	801668e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8016474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016476:	2b00      	cmp	r3, #0
 8016478:	d102      	bne.n	8016480 <tcp_write+0x450>
      queue = seg;
 801647a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801647c:	647b      	str	r3, [r7, #68]	; 0x44
 801647e:	e00c      	b.n	801649a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8016480:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016482:	2b00      	cmp	r3, #0
 8016484:	d106      	bne.n	8016494 <tcp_write+0x464>
 8016486:	4b53      	ldr	r3, [pc, #332]	; (80165d4 <tcp_write+0x5a4>)
 8016488:	f240 22ab 	movw	r2, #683	; 0x2ab
 801648c:	4955      	ldr	r1, [pc, #340]	; (80165e4 <tcp_write+0x5b4>)
 801648e:	4853      	ldr	r0, [pc, #332]	; (80165dc <tcp_write+0x5ac>)
 8016490:	f004 feea 	bl	801b268 <iprintf>
      prev_seg->next = seg;
 8016494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016496:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016498:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801649a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801649c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801649e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80164a2:	8b3b      	ldrh	r3, [r7, #24]
 80164a4:	4413      	add	r3, r2
 80164a6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80164aa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80164ae:	88fb      	ldrh	r3, [r7, #6]
 80164b0:	429a      	cmp	r2, r3
 80164b2:	f4ff af3d 	bcc.w	8016330 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80164b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d02c      	beq.n	8016516 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80164bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80164be:	685b      	ldr	r3, [r3, #4]
 80164c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80164c2:	e01e      	b.n	8016502 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80164c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164c6:	891a      	ldrh	r2, [r3, #8]
 80164c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80164ca:	4413      	add	r3, r2
 80164cc:	b29a      	uxth	r2, r3
 80164ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164d0:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80164d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164d4:	681b      	ldr	r3, [r3, #0]
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d110      	bne.n	80164fc <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80164da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164dc:	685b      	ldr	r3, [r3, #4]
 80164de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80164e0:	8952      	ldrh	r2, [r2, #10]
 80164e2:	4413      	add	r3, r2
 80164e4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80164e6:	68b9      	ldr	r1, [r7, #8]
 80164e8:	4618      	mov	r0, r3
 80164ea:	f005 f8c6 	bl	801b67a <memcpy>
        p->len += oversize_used;
 80164ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164f0:	895a      	ldrh	r2, [r3, #10]
 80164f2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80164f4:	4413      	add	r3, r2
 80164f6:	b29a      	uxth	r2, r3
 80164f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164fa:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80164fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016504:	2b00      	cmp	r3, #0
 8016506:	d1dd      	bne.n	80164c4 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8016508:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801650a:	891a      	ldrh	r2, [r3, #8]
 801650c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801650e:	4413      	add	r3, r2
 8016510:	b29a      	uxth	r2, r3
 8016512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016514:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8016516:	8a7a      	ldrh	r2, [r7, #18]
 8016518:	68fb      	ldr	r3, [r7, #12]
 801651a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801651e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016520:	2b00      	cmp	r3, #0
 8016522:	d018      	beq.n	8016556 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8016524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016526:	2b00      	cmp	r3, #0
 8016528:	d106      	bne.n	8016538 <tcp_write+0x508>
 801652a:	4b2a      	ldr	r3, [pc, #168]	; (80165d4 <tcp_write+0x5a4>)
 801652c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8016530:	492d      	ldr	r1, [pc, #180]	; (80165e8 <tcp_write+0x5b8>)
 8016532:	482a      	ldr	r0, [pc, #168]	; (80165dc <tcp_write+0x5ac>)
 8016534:	f004 fe98 	bl	801b268 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8016538:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801653a:	685b      	ldr	r3, [r3, #4]
 801653c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801653e:	4618      	mov	r0, r3
 8016540:	f7fb f8b2 	bl	80116a8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8016544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016546:	891a      	ldrh	r2, [r3, #8]
 8016548:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801654a:	891b      	ldrh	r3, [r3, #8]
 801654c:	4413      	add	r3, r2
 801654e:	b29a      	uxth	r2, r3
 8016550:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016552:	811a      	strh	r2, [r3, #8]
 8016554:	e037      	b.n	80165c6 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8016556:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016558:	2b00      	cmp	r3, #0
 801655a:	d034      	beq.n	80165c6 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801655c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801655e:	2b00      	cmp	r3, #0
 8016560:	d003      	beq.n	801656a <tcp_write+0x53a>
 8016562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016564:	685b      	ldr	r3, [r3, #4]
 8016566:	2b00      	cmp	r3, #0
 8016568:	d106      	bne.n	8016578 <tcp_write+0x548>
 801656a:	4b1a      	ldr	r3, [pc, #104]	; (80165d4 <tcp_write+0x5a4>)
 801656c:	f240 22e6 	movw	r2, #742	; 0x2e6
 8016570:	491e      	ldr	r1, [pc, #120]	; (80165ec <tcp_write+0x5bc>)
 8016572:	481a      	ldr	r0, [pc, #104]	; (80165dc <tcp_write+0x5ac>)
 8016574:	f004 fe78 	bl	801b268 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8016578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801657a:	685b      	ldr	r3, [r3, #4]
 801657c:	62bb      	str	r3, [r7, #40]	; 0x28
 801657e:	e009      	b.n	8016594 <tcp_write+0x564>
      p->tot_len += extendlen;
 8016580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016582:	891a      	ldrh	r2, [r3, #8]
 8016584:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016586:	4413      	add	r3, r2
 8016588:	b29a      	uxth	r2, r3
 801658a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801658c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801658e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016590:	681b      	ldr	r3, [r3, #0]
 8016592:	62bb      	str	r3, [r7, #40]	; 0x28
 8016594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016596:	681b      	ldr	r3, [r3, #0]
 8016598:	2b00      	cmp	r3, #0
 801659a:	d1f1      	bne.n	8016580 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801659c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801659e:	891a      	ldrh	r2, [r3, #8]
 80165a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80165a2:	4413      	add	r3, r2
 80165a4:	b29a      	uxth	r2, r3
 80165a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165a8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80165aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165ac:	895a      	ldrh	r2, [r3, #10]
 80165ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80165b0:	4413      	add	r3, r2
 80165b2:	b29a      	uxth	r2, r3
 80165b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165b6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80165b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80165ba:	891a      	ldrh	r2, [r3, #8]
 80165bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80165be:	4413      	add	r3, r2
 80165c0:	b29a      	uxth	r2, r3
 80165c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80165c4:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80165c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	d111      	bne.n	80165f0 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80165cc:	68fb      	ldr	r3, [r7, #12]
 80165ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80165d0:	66da      	str	r2, [r3, #108]	; 0x6c
 80165d2:	e010      	b.n	80165f6 <tcp_write+0x5c6>
 80165d4:	0801f984 	.word	0x0801f984
 80165d8:	0801fc24 	.word	0x0801fc24
 80165dc:	0801f9d8 	.word	0x0801f9d8
 80165e0:	0801fc64 	.word	0x0801fc64
 80165e4:	0801fc74 	.word	0x0801fc74
 80165e8:	0801fc88 	.word	0x0801fc88
 80165ec:	0801fcc0 	.word	0x0801fcc0
  } else {
    last_unsent->next = queue;
 80165f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80165f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80165f4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80165f6:	68fb      	ldr	r3, [r7, #12]
 80165f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80165fa:	88fb      	ldrh	r3, [r7, #6]
 80165fc:	441a      	add	r2, r3
 80165fe:	68fb      	ldr	r3, [r7, #12]
 8016600:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8016608:	88fb      	ldrh	r3, [r7, #6]
 801660a:	1ad3      	subs	r3, r2, r3
 801660c:	b29a      	uxth	r2, r3
 801660e:	68fb      	ldr	r3, [r7, #12]
 8016610:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8016614:	68fb      	ldr	r3, [r7, #12]
 8016616:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801661a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801661e:	68fb      	ldr	r3, [r7, #12]
 8016620:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016624:	2b00      	cmp	r3, #0
 8016626:	d00e      	beq.n	8016646 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8016628:	68fb      	ldr	r3, [r7, #12]
 801662a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801662c:	2b00      	cmp	r3, #0
 801662e:	d10a      	bne.n	8016646 <tcp_write+0x616>
 8016630:	68fb      	ldr	r3, [r7, #12]
 8016632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016634:	2b00      	cmp	r3, #0
 8016636:	d106      	bne.n	8016646 <tcp_write+0x616>
 8016638:	4b2c      	ldr	r3, [pc, #176]	; (80166ec <tcp_write+0x6bc>)
 801663a:	f240 3212 	movw	r2, #786	; 0x312
 801663e:	492c      	ldr	r1, [pc, #176]	; (80166f0 <tcp_write+0x6c0>)
 8016640:	482c      	ldr	r0, [pc, #176]	; (80166f4 <tcp_write+0x6c4>)
 8016642:	f004 fe11 	bl	801b268 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8016646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016648:	2b00      	cmp	r3, #0
 801664a:	d016      	beq.n	801667a <tcp_write+0x64a>
 801664c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801664e:	68db      	ldr	r3, [r3, #12]
 8016650:	2b00      	cmp	r3, #0
 8016652:	d012      	beq.n	801667a <tcp_write+0x64a>
 8016654:	797b      	ldrb	r3, [r7, #5]
 8016656:	f003 0302 	and.w	r3, r3, #2
 801665a:	2b00      	cmp	r3, #0
 801665c:	d10d      	bne.n	801667a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801665e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016660:	68db      	ldr	r3, [r3, #12]
 8016662:	899b      	ldrh	r3, [r3, #12]
 8016664:	b29c      	uxth	r4, r3
 8016666:	2008      	movs	r0, #8
 8016668:	f7f9 fb58 	bl	800fd1c <lwip_htons>
 801666c:	4603      	mov	r3, r0
 801666e:	461a      	mov	r2, r3
 8016670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016672:	68db      	ldr	r3, [r3, #12]
 8016674:	4322      	orrs	r2, r4
 8016676:	b292      	uxth	r2, r2
 8016678:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801667a:	2300      	movs	r3, #0
 801667c:	e031      	b.n	80166e2 <tcp_write+0x6b2>
          goto memerr;
 801667e:	bf00      	nop
 8016680:	e006      	b.n	8016690 <tcp_write+0x660>
            goto memerr;
 8016682:	bf00      	nop
 8016684:	e004      	b.n	8016690 <tcp_write+0x660>
        goto memerr;
 8016686:	bf00      	nop
 8016688:	e002      	b.n	8016690 <tcp_write+0x660>
        goto memerr;
 801668a:	bf00      	nop
 801668c:	e000      	b.n	8016690 <tcp_write+0x660>
      goto memerr;
 801668e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016690:	68fb      	ldr	r3, [r7, #12]
 8016692:	8b5b      	ldrh	r3, [r3, #26]
 8016694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016698:	b29a      	uxth	r2, r3
 801669a:	68fb      	ldr	r3, [r7, #12]
 801669c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801669e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d002      	beq.n	80166aa <tcp_write+0x67a>
    pbuf_free(concat_p);
 80166a4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80166a6:	f7fa ff3d 	bl	8011524 <pbuf_free>
  }
  if (queue != NULL) {
 80166aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	d002      	beq.n	80166b6 <tcp_write+0x686>
    tcp_segs_free(queue);
 80166b0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80166b2:	f7fc fb89 	bl	8012dc8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80166b6:	68fb      	ldr	r3, [r7, #12]
 80166b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80166bc:	2b00      	cmp	r3, #0
 80166be:	d00e      	beq.n	80166de <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80166c0:	68fb      	ldr	r3, [r7, #12]
 80166c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80166c4:	2b00      	cmp	r3, #0
 80166c6:	d10a      	bne.n	80166de <tcp_write+0x6ae>
 80166c8:	68fb      	ldr	r3, [r7, #12]
 80166ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	d106      	bne.n	80166de <tcp_write+0x6ae>
 80166d0:	4b06      	ldr	r3, [pc, #24]	; (80166ec <tcp_write+0x6bc>)
 80166d2:	f240 3227 	movw	r2, #807	; 0x327
 80166d6:	4906      	ldr	r1, [pc, #24]	; (80166f0 <tcp_write+0x6c0>)
 80166d8:	4806      	ldr	r0, [pc, #24]	; (80166f4 <tcp_write+0x6c4>)
 80166da:	f004 fdc5 	bl	801b268 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80166de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80166e2:	4618      	mov	r0, r3
 80166e4:	375c      	adds	r7, #92	; 0x5c
 80166e6:	46bd      	mov	sp, r7
 80166e8:	bd90      	pop	{r4, r7, pc}
 80166ea:	bf00      	nop
 80166ec:	0801f984 	.word	0x0801f984
 80166f0:	0801fcf8 	.word	0x0801fcf8
 80166f4:	0801f9d8 	.word	0x0801f9d8

080166f8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80166f8:	b590      	push	{r4, r7, lr}
 80166fa:	b08b      	sub	sp, #44	; 0x2c
 80166fc:	af02      	add	r7, sp, #8
 80166fe:	6078      	str	r0, [r7, #4]
 8016700:	460b      	mov	r3, r1
 8016702:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8016704:	2300      	movs	r3, #0
 8016706:	61fb      	str	r3, [r7, #28]
 8016708:	2300      	movs	r3, #0
 801670a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801670c:	2300      	movs	r3, #0
 801670e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	2b00      	cmp	r3, #0
 8016714:	d106      	bne.n	8016724 <tcp_split_unsent_seg+0x2c>
 8016716:	4b95      	ldr	r3, [pc, #596]	; (801696c <tcp_split_unsent_seg+0x274>)
 8016718:	f240 324b 	movw	r2, #843	; 0x34b
 801671c:	4994      	ldr	r1, [pc, #592]	; (8016970 <tcp_split_unsent_seg+0x278>)
 801671e:	4895      	ldr	r0, [pc, #596]	; (8016974 <tcp_split_unsent_seg+0x27c>)
 8016720:	f004 fda2 	bl	801b268 <iprintf>

  useg = pcb->unsent;
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016728:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801672a:	697b      	ldr	r3, [r7, #20]
 801672c:	2b00      	cmp	r3, #0
 801672e:	d102      	bne.n	8016736 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8016730:	f04f 33ff 	mov.w	r3, #4294967295
 8016734:	e116      	b.n	8016964 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8016736:	887b      	ldrh	r3, [r7, #2]
 8016738:	2b00      	cmp	r3, #0
 801673a:	d109      	bne.n	8016750 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801673c:	4b8b      	ldr	r3, [pc, #556]	; (801696c <tcp_split_unsent_seg+0x274>)
 801673e:	f240 3253 	movw	r2, #851	; 0x353
 8016742:	498d      	ldr	r1, [pc, #564]	; (8016978 <tcp_split_unsent_seg+0x280>)
 8016744:	488b      	ldr	r0, [pc, #556]	; (8016974 <tcp_split_unsent_seg+0x27c>)
 8016746:	f004 fd8f 	bl	801b268 <iprintf>
    return ERR_VAL;
 801674a:	f06f 0305 	mvn.w	r3, #5
 801674e:	e109      	b.n	8016964 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8016750:	697b      	ldr	r3, [r7, #20]
 8016752:	891b      	ldrh	r3, [r3, #8]
 8016754:	887a      	ldrh	r2, [r7, #2]
 8016756:	429a      	cmp	r2, r3
 8016758:	d301      	bcc.n	801675e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801675a:	2300      	movs	r3, #0
 801675c:	e102      	b.n	8016964 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016762:	887a      	ldrh	r2, [r7, #2]
 8016764:	429a      	cmp	r2, r3
 8016766:	d906      	bls.n	8016776 <tcp_split_unsent_seg+0x7e>
 8016768:	4b80      	ldr	r3, [pc, #512]	; (801696c <tcp_split_unsent_seg+0x274>)
 801676a:	f240 325b 	movw	r2, #859	; 0x35b
 801676e:	4983      	ldr	r1, [pc, #524]	; (801697c <tcp_split_unsent_seg+0x284>)
 8016770:	4880      	ldr	r0, [pc, #512]	; (8016974 <tcp_split_unsent_seg+0x27c>)
 8016772:	f004 fd79 	bl	801b268 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8016776:	697b      	ldr	r3, [r7, #20]
 8016778:	891b      	ldrh	r3, [r3, #8]
 801677a:	2b00      	cmp	r3, #0
 801677c:	d106      	bne.n	801678c <tcp_split_unsent_seg+0x94>
 801677e:	4b7b      	ldr	r3, [pc, #492]	; (801696c <tcp_split_unsent_seg+0x274>)
 8016780:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8016784:	497e      	ldr	r1, [pc, #504]	; (8016980 <tcp_split_unsent_seg+0x288>)
 8016786:	487b      	ldr	r0, [pc, #492]	; (8016974 <tcp_split_unsent_seg+0x27c>)
 8016788:	f004 fd6e 	bl	801b268 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801678c:	697b      	ldr	r3, [r7, #20]
 801678e:	7a9b      	ldrb	r3, [r3, #10]
 8016790:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8016792:	7bfb      	ldrb	r3, [r7, #15]
 8016794:	009b      	lsls	r3, r3, #2
 8016796:	b2db      	uxtb	r3, r3
 8016798:	f003 0304 	and.w	r3, r3, #4
 801679c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801679e:	697b      	ldr	r3, [r7, #20]
 80167a0:	891a      	ldrh	r2, [r3, #8]
 80167a2:	887b      	ldrh	r3, [r7, #2]
 80167a4:	1ad3      	subs	r3, r2, r3
 80167a6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80167a8:	7bbb      	ldrb	r3, [r7, #14]
 80167aa:	b29a      	uxth	r2, r3
 80167ac:	89bb      	ldrh	r3, [r7, #12]
 80167ae:	4413      	add	r3, r2
 80167b0:	b29b      	uxth	r3, r3
 80167b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80167b6:	4619      	mov	r1, r3
 80167b8:	2036      	movs	r0, #54	; 0x36
 80167ba:	f7fa fbcf 	bl	8010f5c <pbuf_alloc>
 80167be:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80167c0:	693b      	ldr	r3, [r7, #16]
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	f000 80b7 	beq.w	8016936 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80167c8:	697b      	ldr	r3, [r7, #20]
 80167ca:	685b      	ldr	r3, [r3, #4]
 80167cc:	891a      	ldrh	r2, [r3, #8]
 80167ce:	697b      	ldr	r3, [r7, #20]
 80167d0:	891b      	ldrh	r3, [r3, #8]
 80167d2:	1ad3      	subs	r3, r2, r3
 80167d4:	b29a      	uxth	r2, r3
 80167d6:	887b      	ldrh	r3, [r7, #2]
 80167d8:	4413      	add	r3, r2
 80167da:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80167dc:	697b      	ldr	r3, [r7, #20]
 80167de:	6858      	ldr	r0, [r3, #4]
 80167e0:	693b      	ldr	r3, [r7, #16]
 80167e2:	685a      	ldr	r2, [r3, #4]
 80167e4:	7bbb      	ldrb	r3, [r7, #14]
 80167e6:	18d1      	adds	r1, r2, r3
 80167e8:	897b      	ldrh	r3, [r7, #10]
 80167ea:	89ba      	ldrh	r2, [r7, #12]
 80167ec:	f7fb f884 	bl	80118f8 <pbuf_copy_partial>
 80167f0:	4603      	mov	r3, r0
 80167f2:	461a      	mov	r2, r3
 80167f4:	89bb      	ldrh	r3, [r7, #12]
 80167f6:	4293      	cmp	r3, r2
 80167f8:	f040 809f 	bne.w	801693a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80167fc:	697b      	ldr	r3, [r7, #20]
 80167fe:	68db      	ldr	r3, [r3, #12]
 8016800:	899b      	ldrh	r3, [r3, #12]
 8016802:	b29b      	uxth	r3, r3
 8016804:	4618      	mov	r0, r3
 8016806:	f7f9 fa89 	bl	800fd1c <lwip_htons>
 801680a:	4603      	mov	r3, r0
 801680c:	b2db      	uxtb	r3, r3
 801680e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016812:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8016814:	2300      	movs	r3, #0
 8016816:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8016818:	7efb      	ldrb	r3, [r7, #27]
 801681a:	f003 0308 	and.w	r3, r3, #8
 801681e:	2b00      	cmp	r3, #0
 8016820:	d007      	beq.n	8016832 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8016822:	7efb      	ldrb	r3, [r7, #27]
 8016824:	f023 0308 	bic.w	r3, r3, #8
 8016828:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801682a:	7ebb      	ldrb	r3, [r7, #26]
 801682c:	f043 0308 	orr.w	r3, r3, #8
 8016830:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8016832:	7efb      	ldrb	r3, [r7, #27]
 8016834:	f003 0301 	and.w	r3, r3, #1
 8016838:	2b00      	cmp	r3, #0
 801683a:	d007      	beq.n	801684c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801683c:	7efb      	ldrb	r3, [r7, #27]
 801683e:	f023 0301 	bic.w	r3, r3, #1
 8016842:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8016844:	7ebb      	ldrb	r3, [r7, #26]
 8016846:	f043 0301 	orr.w	r3, r3, #1
 801684a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801684c:	697b      	ldr	r3, [r7, #20]
 801684e:	68db      	ldr	r3, [r3, #12]
 8016850:	685b      	ldr	r3, [r3, #4]
 8016852:	4618      	mov	r0, r3
 8016854:	f7f9 fa77 	bl	800fd46 <lwip_htonl>
 8016858:	4602      	mov	r2, r0
 801685a:	887b      	ldrh	r3, [r7, #2]
 801685c:	18d1      	adds	r1, r2, r3
 801685e:	7eba      	ldrb	r2, [r7, #26]
 8016860:	7bfb      	ldrb	r3, [r7, #15]
 8016862:	9300      	str	r3, [sp, #0]
 8016864:	460b      	mov	r3, r1
 8016866:	6939      	ldr	r1, [r7, #16]
 8016868:	6878      	ldr	r0, [r7, #4]
 801686a:	f7ff fa4f 	bl	8015d0c <tcp_create_segment>
 801686e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8016870:	69fb      	ldr	r3, [r7, #28]
 8016872:	2b00      	cmp	r3, #0
 8016874:	d063      	beq.n	801693e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8016876:	697b      	ldr	r3, [r7, #20]
 8016878:	685b      	ldr	r3, [r3, #4]
 801687a:	4618      	mov	r0, r3
 801687c:	f7fa feda 	bl	8011634 <pbuf_clen>
 8016880:	4603      	mov	r3, r0
 8016882:	461a      	mov	r2, r3
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801688a:	1a9b      	subs	r3, r3, r2
 801688c:	b29a      	uxth	r2, r3
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8016894:	697b      	ldr	r3, [r7, #20]
 8016896:	6858      	ldr	r0, [r3, #4]
 8016898:	697b      	ldr	r3, [r7, #20]
 801689a:	685b      	ldr	r3, [r3, #4]
 801689c:	891a      	ldrh	r2, [r3, #8]
 801689e:	89bb      	ldrh	r3, [r7, #12]
 80168a0:	1ad3      	subs	r3, r2, r3
 80168a2:	b29b      	uxth	r3, r3
 80168a4:	4619      	mov	r1, r3
 80168a6:	f7fa fcb9 	bl	801121c <pbuf_realloc>
  useg->len -= remainder;
 80168aa:	697b      	ldr	r3, [r7, #20]
 80168ac:	891a      	ldrh	r2, [r3, #8]
 80168ae:	89bb      	ldrh	r3, [r7, #12]
 80168b0:	1ad3      	subs	r3, r2, r3
 80168b2:	b29a      	uxth	r2, r3
 80168b4:	697b      	ldr	r3, [r7, #20]
 80168b6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80168b8:	697b      	ldr	r3, [r7, #20]
 80168ba:	68db      	ldr	r3, [r3, #12]
 80168bc:	899b      	ldrh	r3, [r3, #12]
 80168be:	b29c      	uxth	r4, r3
 80168c0:	7efb      	ldrb	r3, [r7, #27]
 80168c2:	b29b      	uxth	r3, r3
 80168c4:	4618      	mov	r0, r3
 80168c6:	f7f9 fa29 	bl	800fd1c <lwip_htons>
 80168ca:	4603      	mov	r3, r0
 80168cc:	461a      	mov	r2, r3
 80168ce:	697b      	ldr	r3, [r7, #20]
 80168d0:	68db      	ldr	r3, [r3, #12]
 80168d2:	4322      	orrs	r2, r4
 80168d4:	b292      	uxth	r2, r2
 80168d6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80168d8:	697b      	ldr	r3, [r7, #20]
 80168da:	685b      	ldr	r3, [r3, #4]
 80168dc:	4618      	mov	r0, r3
 80168de:	f7fa fea9 	bl	8011634 <pbuf_clen>
 80168e2:	4603      	mov	r3, r0
 80168e4:	461a      	mov	r2, r3
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80168ec:	4413      	add	r3, r2
 80168ee:	b29a      	uxth	r2, r3
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80168f6:	69fb      	ldr	r3, [r7, #28]
 80168f8:	685b      	ldr	r3, [r3, #4]
 80168fa:	4618      	mov	r0, r3
 80168fc:	f7fa fe9a 	bl	8011634 <pbuf_clen>
 8016900:	4603      	mov	r3, r0
 8016902:	461a      	mov	r2, r3
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801690a:	4413      	add	r3, r2
 801690c:	b29a      	uxth	r2, r3
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8016914:	697b      	ldr	r3, [r7, #20]
 8016916:	681a      	ldr	r2, [r3, #0]
 8016918:	69fb      	ldr	r3, [r7, #28]
 801691a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801691c:	697b      	ldr	r3, [r7, #20]
 801691e:	69fa      	ldr	r2, [r7, #28]
 8016920:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8016922:	69fb      	ldr	r3, [r7, #28]
 8016924:	681b      	ldr	r3, [r3, #0]
 8016926:	2b00      	cmp	r3, #0
 8016928:	d103      	bne.n	8016932 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	2200      	movs	r2, #0
 801692e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8016932:	2300      	movs	r3, #0
 8016934:	e016      	b.n	8016964 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8016936:	bf00      	nop
 8016938:	e002      	b.n	8016940 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801693a:	bf00      	nop
 801693c:	e000      	b.n	8016940 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801693e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8016940:	69fb      	ldr	r3, [r7, #28]
 8016942:	2b00      	cmp	r3, #0
 8016944:	d006      	beq.n	8016954 <tcp_split_unsent_seg+0x25c>
 8016946:	4b09      	ldr	r3, [pc, #36]	; (801696c <tcp_split_unsent_seg+0x274>)
 8016948:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801694c:	490d      	ldr	r1, [pc, #52]	; (8016984 <tcp_split_unsent_seg+0x28c>)
 801694e:	4809      	ldr	r0, [pc, #36]	; (8016974 <tcp_split_unsent_seg+0x27c>)
 8016950:	f004 fc8a 	bl	801b268 <iprintf>
  if (p != NULL) {
 8016954:	693b      	ldr	r3, [r7, #16]
 8016956:	2b00      	cmp	r3, #0
 8016958:	d002      	beq.n	8016960 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801695a:	6938      	ldr	r0, [r7, #16]
 801695c:	f7fa fde2 	bl	8011524 <pbuf_free>
  }

  return ERR_MEM;
 8016960:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016964:	4618      	mov	r0, r3
 8016966:	3724      	adds	r7, #36	; 0x24
 8016968:	46bd      	mov	sp, r7
 801696a:	bd90      	pop	{r4, r7, pc}
 801696c:	0801f984 	.word	0x0801f984
 8016970:	0801fd18 	.word	0x0801fd18
 8016974:	0801f9d8 	.word	0x0801f9d8
 8016978:	0801fd3c 	.word	0x0801fd3c
 801697c:	0801fd60 	.word	0x0801fd60
 8016980:	0801fd70 	.word	0x0801fd70
 8016984:	0801fd80 	.word	0x0801fd80

08016988 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8016988:	b590      	push	{r4, r7, lr}
 801698a:	b085      	sub	sp, #20
 801698c:	af00      	add	r7, sp, #0
 801698e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	2b00      	cmp	r3, #0
 8016994:	d106      	bne.n	80169a4 <tcp_send_fin+0x1c>
 8016996:	4b21      	ldr	r3, [pc, #132]	; (8016a1c <tcp_send_fin+0x94>)
 8016998:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801699c:	4920      	ldr	r1, [pc, #128]	; (8016a20 <tcp_send_fin+0x98>)
 801699e:	4821      	ldr	r0, [pc, #132]	; (8016a24 <tcp_send_fin+0x9c>)
 80169a0:	f004 fc62 	bl	801b268 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d02e      	beq.n	8016a0a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80169b0:	60fb      	str	r3, [r7, #12]
 80169b2:	e002      	b.n	80169ba <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80169b4:	68fb      	ldr	r3, [r7, #12]
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80169ba:	68fb      	ldr	r3, [r7, #12]
 80169bc:	681b      	ldr	r3, [r3, #0]
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d1f8      	bne.n	80169b4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80169c2:	68fb      	ldr	r3, [r7, #12]
 80169c4:	68db      	ldr	r3, [r3, #12]
 80169c6:	899b      	ldrh	r3, [r3, #12]
 80169c8:	b29b      	uxth	r3, r3
 80169ca:	4618      	mov	r0, r3
 80169cc:	f7f9 f9a6 	bl	800fd1c <lwip_htons>
 80169d0:	4603      	mov	r3, r0
 80169d2:	b2db      	uxtb	r3, r3
 80169d4:	f003 0307 	and.w	r3, r3, #7
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d116      	bne.n	8016a0a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80169dc:	68fb      	ldr	r3, [r7, #12]
 80169de:	68db      	ldr	r3, [r3, #12]
 80169e0:	899b      	ldrh	r3, [r3, #12]
 80169e2:	b29c      	uxth	r4, r3
 80169e4:	2001      	movs	r0, #1
 80169e6:	f7f9 f999 	bl	800fd1c <lwip_htons>
 80169ea:	4603      	mov	r3, r0
 80169ec:	461a      	mov	r2, r3
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	68db      	ldr	r3, [r3, #12]
 80169f2:	4322      	orrs	r2, r4
 80169f4:	b292      	uxth	r2, r2
 80169f6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	8b5b      	ldrh	r3, [r3, #26]
 80169fc:	f043 0320 	orr.w	r3, r3, #32
 8016a00:	b29a      	uxth	r2, r3
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8016a06:	2300      	movs	r3, #0
 8016a08:	e004      	b.n	8016a14 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8016a0a:	2101      	movs	r1, #1
 8016a0c:	6878      	ldr	r0, [r7, #4]
 8016a0e:	f000 f80b 	bl	8016a28 <tcp_enqueue_flags>
 8016a12:	4603      	mov	r3, r0
}
 8016a14:	4618      	mov	r0, r3
 8016a16:	3714      	adds	r7, #20
 8016a18:	46bd      	mov	sp, r7
 8016a1a:	bd90      	pop	{r4, r7, pc}
 8016a1c:	0801f984 	.word	0x0801f984
 8016a20:	0801fd8c 	.word	0x0801fd8c
 8016a24:	0801f9d8 	.word	0x0801f9d8

08016a28 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8016a28:	b580      	push	{r7, lr}
 8016a2a:	b08a      	sub	sp, #40	; 0x28
 8016a2c:	af02      	add	r7, sp, #8
 8016a2e:	6078      	str	r0, [r7, #4]
 8016a30:	460b      	mov	r3, r1
 8016a32:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8016a34:	2300      	movs	r3, #0
 8016a36:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8016a38:	2300      	movs	r3, #0
 8016a3a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8016a3c:	78fb      	ldrb	r3, [r7, #3]
 8016a3e:	f003 0303 	and.w	r3, r3, #3
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d106      	bne.n	8016a54 <tcp_enqueue_flags+0x2c>
 8016a46:	4b67      	ldr	r3, [pc, #412]	; (8016be4 <tcp_enqueue_flags+0x1bc>)
 8016a48:	f240 4211 	movw	r2, #1041	; 0x411
 8016a4c:	4966      	ldr	r1, [pc, #408]	; (8016be8 <tcp_enqueue_flags+0x1c0>)
 8016a4e:	4867      	ldr	r0, [pc, #412]	; (8016bec <tcp_enqueue_flags+0x1c4>)
 8016a50:	f004 fc0a 	bl	801b268 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d106      	bne.n	8016a68 <tcp_enqueue_flags+0x40>
 8016a5a:	4b62      	ldr	r3, [pc, #392]	; (8016be4 <tcp_enqueue_flags+0x1bc>)
 8016a5c:	f240 4213 	movw	r2, #1043	; 0x413
 8016a60:	4963      	ldr	r1, [pc, #396]	; (8016bf0 <tcp_enqueue_flags+0x1c8>)
 8016a62:	4862      	ldr	r0, [pc, #392]	; (8016bec <tcp_enqueue_flags+0x1c4>)
 8016a64:	f004 fc00 	bl	801b268 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8016a68:	78fb      	ldrb	r3, [r7, #3]
 8016a6a:	f003 0302 	and.w	r3, r3, #2
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d001      	beq.n	8016a76 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8016a72:	2301      	movs	r3, #1
 8016a74:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016a76:	7ffb      	ldrb	r3, [r7, #31]
 8016a78:	009b      	lsls	r3, r3, #2
 8016a7a:	b2db      	uxtb	r3, r3
 8016a7c:	f003 0304 	and.w	r3, r3, #4
 8016a80:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016a82:	7dfb      	ldrb	r3, [r7, #23]
 8016a84:	b29b      	uxth	r3, r3
 8016a86:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016a8a:	4619      	mov	r1, r3
 8016a8c:	2036      	movs	r0, #54	; 0x36
 8016a8e:	f7fa fa65 	bl	8010f5c <pbuf_alloc>
 8016a92:	6138      	str	r0, [r7, #16]
 8016a94:	693b      	ldr	r3, [r7, #16]
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d109      	bne.n	8016aae <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	8b5b      	ldrh	r3, [r3, #26]
 8016a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016aa2:	b29a      	uxth	r2, r3
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8016aac:	e095      	b.n	8016bda <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8016aae:	693b      	ldr	r3, [r7, #16]
 8016ab0:	895a      	ldrh	r2, [r3, #10]
 8016ab2:	7dfb      	ldrb	r3, [r7, #23]
 8016ab4:	b29b      	uxth	r3, r3
 8016ab6:	429a      	cmp	r2, r3
 8016ab8:	d206      	bcs.n	8016ac8 <tcp_enqueue_flags+0xa0>
 8016aba:	4b4a      	ldr	r3, [pc, #296]	; (8016be4 <tcp_enqueue_flags+0x1bc>)
 8016abc:	f240 4239 	movw	r2, #1081	; 0x439
 8016ac0:	494c      	ldr	r1, [pc, #304]	; (8016bf4 <tcp_enqueue_flags+0x1cc>)
 8016ac2:	484a      	ldr	r0, [pc, #296]	; (8016bec <tcp_enqueue_flags+0x1c4>)
 8016ac4:	f004 fbd0 	bl	801b268 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8016acc:	78fa      	ldrb	r2, [r7, #3]
 8016ace:	7ffb      	ldrb	r3, [r7, #31]
 8016ad0:	9300      	str	r3, [sp, #0]
 8016ad2:	460b      	mov	r3, r1
 8016ad4:	6939      	ldr	r1, [r7, #16]
 8016ad6:	6878      	ldr	r0, [r7, #4]
 8016ad8:	f7ff f918 	bl	8015d0c <tcp_create_segment>
 8016adc:	60f8      	str	r0, [r7, #12]
 8016ade:	68fb      	ldr	r3, [r7, #12]
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d109      	bne.n	8016af8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	8b5b      	ldrh	r3, [r3, #26]
 8016ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016aec:	b29a      	uxth	r2, r3
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016af2:	f04f 33ff 	mov.w	r3, #4294967295
 8016af6:	e070      	b.n	8016bda <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8016af8:	68fb      	ldr	r3, [r7, #12]
 8016afa:	68db      	ldr	r3, [r3, #12]
 8016afc:	f003 0303 	and.w	r3, r3, #3
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	d006      	beq.n	8016b12 <tcp_enqueue_flags+0xea>
 8016b04:	4b37      	ldr	r3, [pc, #220]	; (8016be4 <tcp_enqueue_flags+0x1bc>)
 8016b06:	f240 4242 	movw	r2, #1090	; 0x442
 8016b0a:	493b      	ldr	r1, [pc, #236]	; (8016bf8 <tcp_enqueue_flags+0x1d0>)
 8016b0c:	4837      	ldr	r0, [pc, #220]	; (8016bec <tcp_enqueue_flags+0x1c4>)
 8016b0e:	f004 fbab 	bl	801b268 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8016b12:	68fb      	ldr	r3, [r7, #12]
 8016b14:	891b      	ldrh	r3, [r3, #8]
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d006      	beq.n	8016b28 <tcp_enqueue_flags+0x100>
 8016b1a:	4b32      	ldr	r3, [pc, #200]	; (8016be4 <tcp_enqueue_flags+0x1bc>)
 8016b1c:	f240 4243 	movw	r2, #1091	; 0x443
 8016b20:	4936      	ldr	r1, [pc, #216]	; (8016bfc <tcp_enqueue_flags+0x1d4>)
 8016b22:	4832      	ldr	r0, [pc, #200]	; (8016bec <tcp_enqueue_flags+0x1c4>)
 8016b24:	f004 fba0 	bl	801b268 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d103      	bne.n	8016b38 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	68fa      	ldr	r2, [r7, #12]
 8016b34:	66da      	str	r2, [r3, #108]	; 0x6c
 8016b36:	e00d      	b.n	8016b54 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b3c:	61bb      	str	r3, [r7, #24]
 8016b3e:	e002      	b.n	8016b46 <tcp_enqueue_flags+0x11e>
 8016b40:	69bb      	ldr	r3, [r7, #24]
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	61bb      	str	r3, [r7, #24]
 8016b46:	69bb      	ldr	r3, [r7, #24]
 8016b48:	681b      	ldr	r3, [r3, #0]
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d1f8      	bne.n	8016b40 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8016b4e:	69bb      	ldr	r3, [r7, #24]
 8016b50:	68fa      	ldr	r2, [r7, #12]
 8016b52:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	2200      	movs	r2, #0
 8016b58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8016b5c:	78fb      	ldrb	r3, [r7, #3]
 8016b5e:	f003 0302 	and.w	r3, r3, #2
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	d104      	bne.n	8016b70 <tcp_enqueue_flags+0x148>
 8016b66:	78fb      	ldrb	r3, [r7, #3]
 8016b68:	f003 0301 	and.w	r3, r3, #1
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	d004      	beq.n	8016b7a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016b74:	1c5a      	adds	r2, r3, #1
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8016b7a:	78fb      	ldrb	r3, [r7, #3]
 8016b7c:	f003 0301 	and.w	r3, r3, #1
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	d006      	beq.n	8016b92 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	8b5b      	ldrh	r3, [r3, #26]
 8016b88:	f043 0320 	orr.w	r3, r3, #32
 8016b8c:	b29a      	uxth	r2, r3
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016b92:	68fb      	ldr	r3, [r7, #12]
 8016b94:	685b      	ldr	r3, [r3, #4]
 8016b96:	4618      	mov	r0, r3
 8016b98:	f7fa fd4c 	bl	8011634 <pbuf_clen>
 8016b9c:	4603      	mov	r3, r0
 8016b9e:	461a      	mov	r2, r3
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016ba6:	4413      	add	r3, r2
 8016ba8:	b29a      	uxth	r2, r3
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	d00e      	beq.n	8016bd8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	d10a      	bne.n	8016bd8 <tcp_enqueue_flags+0x1b0>
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d106      	bne.n	8016bd8 <tcp_enqueue_flags+0x1b0>
 8016bca:	4b06      	ldr	r3, [pc, #24]	; (8016be4 <tcp_enqueue_flags+0x1bc>)
 8016bcc:	f240 4265 	movw	r2, #1125	; 0x465
 8016bd0:	490b      	ldr	r1, [pc, #44]	; (8016c00 <tcp_enqueue_flags+0x1d8>)
 8016bd2:	4806      	ldr	r0, [pc, #24]	; (8016bec <tcp_enqueue_flags+0x1c4>)
 8016bd4:	f004 fb48 	bl	801b268 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8016bd8:	2300      	movs	r3, #0
}
 8016bda:	4618      	mov	r0, r3
 8016bdc:	3720      	adds	r7, #32
 8016bde:	46bd      	mov	sp, r7
 8016be0:	bd80      	pop	{r7, pc}
 8016be2:	bf00      	nop
 8016be4:	0801f984 	.word	0x0801f984
 8016be8:	0801fda8 	.word	0x0801fda8
 8016bec:	0801f9d8 	.word	0x0801f9d8
 8016bf0:	0801fe00 	.word	0x0801fe00
 8016bf4:	0801fe20 	.word	0x0801fe20
 8016bf8:	0801fe5c 	.word	0x0801fe5c
 8016bfc:	0801fe74 	.word	0x0801fe74
 8016c00:	0801fea0 	.word	0x0801fea0

08016c04 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8016c04:	b5b0      	push	{r4, r5, r7, lr}
 8016c06:	b08a      	sub	sp, #40	; 0x28
 8016c08:	af00      	add	r7, sp, #0
 8016c0a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d106      	bne.n	8016c20 <tcp_output+0x1c>
 8016c12:	4b8a      	ldr	r3, [pc, #552]	; (8016e3c <tcp_output+0x238>)
 8016c14:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8016c18:	4989      	ldr	r1, [pc, #548]	; (8016e40 <tcp_output+0x23c>)
 8016c1a:	488a      	ldr	r0, [pc, #552]	; (8016e44 <tcp_output+0x240>)
 8016c1c:	f004 fb24 	bl	801b268 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	7d1b      	ldrb	r3, [r3, #20]
 8016c24:	2b01      	cmp	r3, #1
 8016c26:	d106      	bne.n	8016c36 <tcp_output+0x32>
 8016c28:	4b84      	ldr	r3, [pc, #528]	; (8016e3c <tcp_output+0x238>)
 8016c2a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8016c2e:	4986      	ldr	r1, [pc, #536]	; (8016e48 <tcp_output+0x244>)
 8016c30:	4884      	ldr	r0, [pc, #528]	; (8016e44 <tcp_output+0x240>)
 8016c32:	f004 fb19 	bl	801b268 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8016c36:	4b85      	ldr	r3, [pc, #532]	; (8016e4c <tcp_output+0x248>)
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	687a      	ldr	r2, [r7, #4]
 8016c3c:	429a      	cmp	r2, r3
 8016c3e:	d101      	bne.n	8016c44 <tcp_output+0x40>
    return ERR_OK;
 8016c40:	2300      	movs	r3, #0
 8016c42:	e1ce      	b.n	8016fe2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016c50:	4293      	cmp	r3, r2
 8016c52:	bf28      	it	cs
 8016c54:	4613      	movcs	r3, r2
 8016c56:	b29b      	uxth	r3, r3
 8016c58:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016c5e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8016c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	d10b      	bne.n	8016c7e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	8b5b      	ldrh	r3, [r3, #26]
 8016c6a:	f003 0302 	and.w	r3, r3, #2
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	f000 81aa 	beq.w	8016fc8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8016c74:	6878      	ldr	r0, [r7, #4]
 8016c76:	f000 fdcb 	bl	8017810 <tcp_send_empty_ack>
 8016c7a:	4603      	mov	r3, r0
 8016c7c:	e1b1      	b.n	8016fe2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8016c7e:	6879      	ldr	r1, [r7, #4]
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	3304      	adds	r3, #4
 8016c84:	461a      	mov	r2, r3
 8016c86:	6878      	ldr	r0, [r7, #4]
 8016c88:	f7ff f824 	bl	8015cd4 <tcp_route>
 8016c8c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8016c8e:	697b      	ldr	r3, [r7, #20]
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d102      	bne.n	8016c9a <tcp_output+0x96>
    return ERR_RTE;
 8016c94:	f06f 0303 	mvn.w	r3, #3
 8016c98:	e1a3      	b.n	8016fe2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d003      	beq.n	8016ca8 <tcp_output+0xa4>
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	d111      	bne.n	8016ccc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8016ca8:	697b      	ldr	r3, [r7, #20]
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d002      	beq.n	8016cb4 <tcp_output+0xb0>
 8016cae:	697b      	ldr	r3, [r7, #20]
 8016cb0:	3304      	adds	r3, #4
 8016cb2:	e000      	b.n	8016cb6 <tcp_output+0xb2>
 8016cb4:	2300      	movs	r3, #0
 8016cb6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8016cb8:	693b      	ldr	r3, [r7, #16]
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	d102      	bne.n	8016cc4 <tcp_output+0xc0>
      return ERR_RTE;
 8016cbe:	f06f 0303 	mvn.w	r3, #3
 8016cc2:	e18e      	b.n	8016fe2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016cc4:	693b      	ldr	r3, [r7, #16]
 8016cc6:	681a      	ldr	r2, [r3, #0]
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8016ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cce:	68db      	ldr	r3, [r3, #12]
 8016cd0:	685b      	ldr	r3, [r3, #4]
 8016cd2:	4618      	mov	r0, r3
 8016cd4:	f7f9 f837 	bl	800fd46 <lwip_htonl>
 8016cd8:	4602      	mov	r2, r0
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016cde:	1ad3      	subs	r3, r2, r3
 8016ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016ce2:	8912      	ldrh	r2, [r2, #8]
 8016ce4:	4413      	add	r3, r2
 8016ce6:	69ba      	ldr	r2, [r7, #24]
 8016ce8:	429a      	cmp	r2, r3
 8016cea:	d227      	bcs.n	8016d3c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016cf2:	461a      	mov	r2, r3
 8016cf4:	69bb      	ldr	r3, [r7, #24]
 8016cf6:	4293      	cmp	r3, r2
 8016cf8:	d114      	bne.n	8016d24 <tcp_output+0x120>
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	d110      	bne.n	8016d24 <tcp_output+0x120>
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d10b      	bne.n	8016d24 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	2200      	movs	r2, #0
 8016d10:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	2201      	movs	r2, #1
 8016d18:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	2200      	movs	r2, #0
 8016d20:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	8b5b      	ldrh	r3, [r3, #26]
 8016d28:	f003 0302 	and.w	r3, r3, #2
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	f000 814d 	beq.w	8016fcc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8016d32:	6878      	ldr	r0, [r7, #4]
 8016d34:	f000 fd6c 	bl	8017810 <tcp_send_empty_ack>
 8016d38:	4603      	mov	r3, r0
 8016d3a:	e152      	b.n	8016fe2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	2200      	movs	r2, #0
 8016d40:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016d48:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8016d4a:	6a3b      	ldr	r3, [r7, #32]
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	f000 811c 	beq.w	8016f8a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8016d52:	e002      	b.n	8016d5a <tcp_output+0x156>
 8016d54:	6a3b      	ldr	r3, [r7, #32]
 8016d56:	681b      	ldr	r3, [r3, #0]
 8016d58:	623b      	str	r3, [r7, #32]
 8016d5a:	6a3b      	ldr	r3, [r7, #32]
 8016d5c:	681b      	ldr	r3, [r3, #0]
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d1f8      	bne.n	8016d54 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8016d62:	e112      	b.n	8016f8a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8016d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d66:	68db      	ldr	r3, [r3, #12]
 8016d68:	899b      	ldrh	r3, [r3, #12]
 8016d6a:	b29b      	uxth	r3, r3
 8016d6c:	4618      	mov	r0, r3
 8016d6e:	f7f8 ffd5 	bl	800fd1c <lwip_htons>
 8016d72:	4603      	mov	r3, r0
 8016d74:	b2db      	uxtb	r3, r3
 8016d76:	f003 0304 	and.w	r3, r3, #4
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d006      	beq.n	8016d8c <tcp_output+0x188>
 8016d7e:	4b2f      	ldr	r3, [pc, #188]	; (8016e3c <tcp_output+0x238>)
 8016d80:	f240 5236 	movw	r2, #1334	; 0x536
 8016d84:	4932      	ldr	r1, [pc, #200]	; (8016e50 <tcp_output+0x24c>)
 8016d86:	482f      	ldr	r0, [pc, #188]	; (8016e44 <tcp_output+0x240>)
 8016d88:	f004 fa6e 	bl	801b268 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d01f      	beq.n	8016dd4 <tcp_output+0x1d0>
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	8b5b      	ldrh	r3, [r3, #26]
 8016d98:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	d119      	bne.n	8016dd4 <tcp_output+0x1d0>
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016da4:	2b00      	cmp	r3, #0
 8016da6:	d00b      	beq.n	8016dc0 <tcp_output+0x1bc>
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016dac:	681b      	ldr	r3, [r3, #0]
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	d110      	bne.n	8016dd4 <tcp_output+0x1d0>
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016db6:	891a      	ldrh	r2, [r3, #8]
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016dbc:	429a      	cmp	r2, r3
 8016dbe:	d209      	bcs.n	8016dd4 <tcp_output+0x1d0>
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d004      	beq.n	8016dd4 <tcp_output+0x1d0>
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016dd0:	2b0f      	cmp	r3, #15
 8016dd2:	d901      	bls.n	8016dd8 <tcp_output+0x1d4>
 8016dd4:	2301      	movs	r3, #1
 8016dd6:	e000      	b.n	8016dda <tcp_output+0x1d6>
 8016dd8:	2300      	movs	r3, #0
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	d106      	bne.n	8016dec <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	8b5b      	ldrh	r3, [r3, #26]
 8016de2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	f000 80e4 	beq.w	8016fb4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	7d1b      	ldrb	r3, [r3, #20]
 8016df0:	2b02      	cmp	r3, #2
 8016df2:	d00d      	beq.n	8016e10 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8016df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016df6:	68db      	ldr	r3, [r3, #12]
 8016df8:	899b      	ldrh	r3, [r3, #12]
 8016dfa:	b29c      	uxth	r4, r3
 8016dfc:	2010      	movs	r0, #16
 8016dfe:	f7f8 ff8d 	bl	800fd1c <lwip_htons>
 8016e02:	4603      	mov	r3, r0
 8016e04:	461a      	mov	r2, r3
 8016e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e08:	68db      	ldr	r3, [r3, #12]
 8016e0a:	4322      	orrs	r2, r4
 8016e0c:	b292      	uxth	r2, r2
 8016e0e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8016e10:	697a      	ldr	r2, [r7, #20]
 8016e12:	6879      	ldr	r1, [r7, #4]
 8016e14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016e16:	f000 f909 	bl	801702c <tcp_output_segment>
 8016e1a:	4603      	mov	r3, r0
 8016e1c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8016e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	d016      	beq.n	8016e54 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	8b5b      	ldrh	r3, [r3, #26]
 8016e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016e2e:	b29a      	uxth	r2, r3
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	835a      	strh	r2, [r3, #26]
      return err;
 8016e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016e38:	e0d3      	b.n	8016fe2 <tcp_output+0x3de>
 8016e3a:	bf00      	nop
 8016e3c:	0801f984 	.word	0x0801f984
 8016e40:	0801fec8 	.word	0x0801fec8
 8016e44:	0801f9d8 	.word	0x0801f9d8
 8016e48:	0801fee0 	.word	0x0801fee0
 8016e4c:	20007098 	.word	0x20007098
 8016e50:	0801ff08 	.word	0x0801ff08
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8016e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e56:	681a      	ldr	r2, [r3, #0]
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	7d1b      	ldrb	r3, [r3, #20]
 8016e60:	2b02      	cmp	r3, #2
 8016e62:	d006      	beq.n	8016e72 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	8b5b      	ldrh	r3, [r3, #26]
 8016e68:	f023 0303 	bic.w	r3, r3, #3
 8016e6c:	b29a      	uxth	r2, r3
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e74:	68db      	ldr	r3, [r3, #12]
 8016e76:	685b      	ldr	r3, [r3, #4]
 8016e78:	4618      	mov	r0, r3
 8016e7a:	f7f8 ff64 	bl	800fd46 <lwip_htonl>
 8016e7e:	4604      	mov	r4, r0
 8016e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e82:	891b      	ldrh	r3, [r3, #8]
 8016e84:	461d      	mov	r5, r3
 8016e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e88:	68db      	ldr	r3, [r3, #12]
 8016e8a:	899b      	ldrh	r3, [r3, #12]
 8016e8c:	b29b      	uxth	r3, r3
 8016e8e:	4618      	mov	r0, r3
 8016e90:	f7f8 ff44 	bl	800fd1c <lwip_htons>
 8016e94:	4603      	mov	r3, r0
 8016e96:	b2db      	uxtb	r3, r3
 8016e98:	f003 0303 	and.w	r3, r3, #3
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d001      	beq.n	8016ea4 <tcp_output+0x2a0>
 8016ea0:	2301      	movs	r3, #1
 8016ea2:	e000      	b.n	8016ea6 <tcp_output+0x2a2>
 8016ea4:	2300      	movs	r3, #0
 8016ea6:	442b      	add	r3, r5
 8016ea8:	4423      	add	r3, r4
 8016eaa:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016eb0:	68bb      	ldr	r3, [r7, #8]
 8016eb2:	1ad3      	subs	r3, r2, r3
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	da02      	bge.n	8016ebe <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	68ba      	ldr	r2, [r7, #8]
 8016ebc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8016ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ec0:	891b      	ldrh	r3, [r3, #8]
 8016ec2:	461c      	mov	r4, r3
 8016ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ec6:	68db      	ldr	r3, [r3, #12]
 8016ec8:	899b      	ldrh	r3, [r3, #12]
 8016eca:	b29b      	uxth	r3, r3
 8016ecc:	4618      	mov	r0, r3
 8016ece:	f7f8 ff25 	bl	800fd1c <lwip_htons>
 8016ed2:	4603      	mov	r3, r0
 8016ed4:	b2db      	uxtb	r3, r3
 8016ed6:	f003 0303 	and.w	r3, r3, #3
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d001      	beq.n	8016ee2 <tcp_output+0x2de>
 8016ede:	2301      	movs	r3, #1
 8016ee0:	e000      	b.n	8016ee4 <tcp_output+0x2e0>
 8016ee2:	2300      	movs	r3, #0
 8016ee4:	4423      	add	r3, r4
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	d049      	beq.n	8016f7e <tcp_output+0x37a>
      seg->next = NULL;
 8016eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016eec:	2200      	movs	r2, #0
 8016eee:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d105      	bne.n	8016f04 <tcp_output+0x300>
        pcb->unacked = seg;
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016efc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8016efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f00:	623b      	str	r3, [r7, #32]
 8016f02:	e03f      	b.n	8016f84 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8016f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f06:	68db      	ldr	r3, [r3, #12]
 8016f08:	685b      	ldr	r3, [r3, #4]
 8016f0a:	4618      	mov	r0, r3
 8016f0c:	f7f8 ff1b 	bl	800fd46 <lwip_htonl>
 8016f10:	4604      	mov	r4, r0
 8016f12:	6a3b      	ldr	r3, [r7, #32]
 8016f14:	68db      	ldr	r3, [r3, #12]
 8016f16:	685b      	ldr	r3, [r3, #4]
 8016f18:	4618      	mov	r0, r3
 8016f1a:	f7f8 ff14 	bl	800fd46 <lwip_htonl>
 8016f1e:	4603      	mov	r3, r0
 8016f20:	1ae3      	subs	r3, r4, r3
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	da24      	bge.n	8016f70 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	3370      	adds	r3, #112	; 0x70
 8016f2a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016f2c:	e002      	b.n	8016f34 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8016f2e:	69fb      	ldr	r3, [r7, #28]
 8016f30:	681b      	ldr	r3, [r3, #0]
 8016f32:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016f34:	69fb      	ldr	r3, [r7, #28]
 8016f36:	681b      	ldr	r3, [r3, #0]
 8016f38:	2b00      	cmp	r3, #0
 8016f3a:	d011      	beq.n	8016f60 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016f3c:	69fb      	ldr	r3, [r7, #28]
 8016f3e:	681b      	ldr	r3, [r3, #0]
 8016f40:	68db      	ldr	r3, [r3, #12]
 8016f42:	685b      	ldr	r3, [r3, #4]
 8016f44:	4618      	mov	r0, r3
 8016f46:	f7f8 fefe 	bl	800fd46 <lwip_htonl>
 8016f4a:	4604      	mov	r4, r0
 8016f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f4e:	68db      	ldr	r3, [r3, #12]
 8016f50:	685b      	ldr	r3, [r3, #4]
 8016f52:	4618      	mov	r0, r3
 8016f54:	f7f8 fef7 	bl	800fd46 <lwip_htonl>
 8016f58:	4603      	mov	r3, r0
 8016f5a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	dbe6      	blt.n	8016f2e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8016f60:	69fb      	ldr	r3, [r7, #28]
 8016f62:	681a      	ldr	r2, [r3, #0]
 8016f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f66:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8016f68:	69fb      	ldr	r3, [r7, #28]
 8016f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f6c:	601a      	str	r2, [r3, #0]
 8016f6e:	e009      	b.n	8016f84 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8016f70:	6a3b      	ldr	r3, [r7, #32]
 8016f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f74:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8016f76:	6a3b      	ldr	r3, [r7, #32]
 8016f78:	681b      	ldr	r3, [r3, #0]
 8016f7a:	623b      	str	r3, [r7, #32]
 8016f7c:	e002      	b.n	8016f84 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8016f7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016f80:	f7fb ff37 	bl	8012df2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016f88:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8016f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	d012      	beq.n	8016fb6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8016f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f92:	68db      	ldr	r3, [r3, #12]
 8016f94:	685b      	ldr	r3, [r3, #4]
 8016f96:	4618      	mov	r0, r3
 8016f98:	f7f8 fed5 	bl	800fd46 <lwip_htonl>
 8016f9c:	4602      	mov	r2, r0
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016fa2:	1ad3      	subs	r3, r2, r3
 8016fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016fa6:	8912      	ldrh	r2, [r2, #8]
 8016fa8:	4413      	add	r3, r2
  while (seg != NULL &&
 8016faa:	69ba      	ldr	r2, [r7, #24]
 8016fac:	429a      	cmp	r2, r3
 8016fae:	f4bf aed9 	bcs.w	8016d64 <tcp_output+0x160>
 8016fb2:	e000      	b.n	8016fb6 <tcp_output+0x3b2>
      break;
 8016fb4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d108      	bne.n	8016fd0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	2200      	movs	r2, #0
 8016fc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8016fc6:	e004      	b.n	8016fd2 <tcp_output+0x3ce>
    goto output_done;
 8016fc8:	bf00      	nop
 8016fca:	e002      	b.n	8016fd2 <tcp_output+0x3ce>
    goto output_done;
 8016fcc:	bf00      	nop
 8016fce:	e000      	b.n	8016fd2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8016fd0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	8b5b      	ldrh	r3, [r3, #26]
 8016fd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016fda:	b29a      	uxth	r2, r3
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8016fe0:	2300      	movs	r3, #0
}
 8016fe2:	4618      	mov	r0, r3
 8016fe4:	3728      	adds	r7, #40	; 0x28
 8016fe6:	46bd      	mov	sp, r7
 8016fe8:	bdb0      	pop	{r4, r5, r7, pc}
 8016fea:	bf00      	nop

08016fec <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8016fec:	b580      	push	{r7, lr}
 8016fee:	b082      	sub	sp, #8
 8016ff0:	af00      	add	r7, sp, #0
 8016ff2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d106      	bne.n	8017008 <tcp_output_segment_busy+0x1c>
 8016ffa:	4b09      	ldr	r3, [pc, #36]	; (8017020 <tcp_output_segment_busy+0x34>)
 8016ffc:	f240 529a 	movw	r2, #1434	; 0x59a
 8017000:	4908      	ldr	r1, [pc, #32]	; (8017024 <tcp_output_segment_busy+0x38>)
 8017002:	4809      	ldr	r0, [pc, #36]	; (8017028 <tcp_output_segment_busy+0x3c>)
 8017004:	f004 f930 	bl	801b268 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	685b      	ldr	r3, [r3, #4]
 801700c:	7b9b      	ldrb	r3, [r3, #14]
 801700e:	2b01      	cmp	r3, #1
 8017010:	d001      	beq.n	8017016 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8017012:	2301      	movs	r3, #1
 8017014:	e000      	b.n	8017018 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8017016:	2300      	movs	r3, #0
}
 8017018:	4618      	mov	r0, r3
 801701a:	3708      	adds	r7, #8
 801701c:	46bd      	mov	sp, r7
 801701e:	bd80      	pop	{r7, pc}
 8017020:	0801f984 	.word	0x0801f984
 8017024:	0801ff20 	.word	0x0801ff20
 8017028:	0801f9d8 	.word	0x0801f9d8

0801702c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801702c:	b5b0      	push	{r4, r5, r7, lr}
 801702e:	b08c      	sub	sp, #48	; 0x30
 8017030:	af04      	add	r7, sp, #16
 8017032:	60f8      	str	r0, [r7, #12]
 8017034:	60b9      	str	r1, [r7, #8]
 8017036:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8017038:	68fb      	ldr	r3, [r7, #12]
 801703a:	2b00      	cmp	r3, #0
 801703c:	d106      	bne.n	801704c <tcp_output_segment+0x20>
 801703e:	4b64      	ldr	r3, [pc, #400]	; (80171d0 <tcp_output_segment+0x1a4>)
 8017040:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8017044:	4963      	ldr	r1, [pc, #396]	; (80171d4 <tcp_output_segment+0x1a8>)
 8017046:	4864      	ldr	r0, [pc, #400]	; (80171d8 <tcp_output_segment+0x1ac>)
 8017048:	f004 f90e 	bl	801b268 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801704c:	68bb      	ldr	r3, [r7, #8]
 801704e:	2b00      	cmp	r3, #0
 8017050:	d106      	bne.n	8017060 <tcp_output_segment+0x34>
 8017052:	4b5f      	ldr	r3, [pc, #380]	; (80171d0 <tcp_output_segment+0x1a4>)
 8017054:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8017058:	4960      	ldr	r1, [pc, #384]	; (80171dc <tcp_output_segment+0x1b0>)
 801705a:	485f      	ldr	r0, [pc, #380]	; (80171d8 <tcp_output_segment+0x1ac>)
 801705c:	f004 f904 	bl	801b268 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	2b00      	cmp	r3, #0
 8017064:	d106      	bne.n	8017074 <tcp_output_segment+0x48>
 8017066:	4b5a      	ldr	r3, [pc, #360]	; (80171d0 <tcp_output_segment+0x1a4>)
 8017068:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801706c:	495c      	ldr	r1, [pc, #368]	; (80171e0 <tcp_output_segment+0x1b4>)
 801706e:	485a      	ldr	r0, [pc, #360]	; (80171d8 <tcp_output_segment+0x1ac>)
 8017070:	f004 f8fa 	bl	801b268 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8017074:	68f8      	ldr	r0, [r7, #12]
 8017076:	f7ff ffb9 	bl	8016fec <tcp_output_segment_busy>
 801707a:	4603      	mov	r3, r0
 801707c:	2b00      	cmp	r3, #0
 801707e:	d001      	beq.n	8017084 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8017080:	2300      	movs	r3, #0
 8017082:	e0a1      	b.n	80171c8 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8017084:	68bb      	ldr	r3, [r7, #8]
 8017086:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017088:	68fb      	ldr	r3, [r7, #12]
 801708a:	68dc      	ldr	r4, [r3, #12]
 801708c:	4610      	mov	r0, r2
 801708e:	f7f8 fe5a 	bl	800fd46 <lwip_htonl>
 8017092:	4603      	mov	r3, r0
 8017094:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8017096:	68bb      	ldr	r3, [r7, #8]
 8017098:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801709a:	68fb      	ldr	r3, [r7, #12]
 801709c:	68dc      	ldr	r4, [r3, #12]
 801709e:	4610      	mov	r0, r2
 80170a0:	f7f8 fe3c 	bl	800fd1c <lwip_htons>
 80170a4:	4603      	mov	r3, r0
 80170a6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80170a8:	68bb      	ldr	r3, [r7, #8]
 80170aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80170ac:	68ba      	ldr	r2, [r7, #8]
 80170ae:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80170b0:	441a      	add	r2, r3
 80170b2:	68bb      	ldr	r3, [r7, #8]
 80170b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80170b6:	68fb      	ldr	r3, [r7, #12]
 80170b8:	68db      	ldr	r3, [r3, #12]
 80170ba:	3314      	adds	r3, #20
 80170bc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80170be:	68fb      	ldr	r3, [r7, #12]
 80170c0:	7a9b      	ldrb	r3, [r3, #10]
 80170c2:	f003 0301 	and.w	r3, r3, #1
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d015      	beq.n	80170f6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80170ca:	68bb      	ldr	r3, [r7, #8]
 80170cc:	3304      	adds	r3, #4
 80170ce:	461a      	mov	r2, r3
 80170d0:	6879      	ldr	r1, [r7, #4]
 80170d2:	f240 50b4 	movw	r0, #1460	; 0x5b4
 80170d6:	f7fc fa33 	bl	8013540 <tcp_eff_send_mss_netif>
 80170da:	4603      	mov	r3, r0
 80170dc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80170de:	8b7b      	ldrh	r3, [r7, #26]
 80170e0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80170e4:	4618      	mov	r0, r3
 80170e6:	f7f8 fe2e 	bl	800fd46 <lwip_htonl>
 80170ea:	4602      	mov	r2, r0
 80170ec:	69fb      	ldr	r3, [r7, #28]
 80170ee:	601a      	str	r2, [r3, #0]
    opts += 1;
 80170f0:	69fb      	ldr	r3, [r7, #28]
 80170f2:	3304      	adds	r3, #4
 80170f4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80170f6:	68bb      	ldr	r3, [r7, #8]
 80170f8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	da02      	bge.n	8017106 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8017100:	68bb      	ldr	r3, [r7, #8]
 8017102:	2200      	movs	r2, #0
 8017104:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8017106:	68bb      	ldr	r3, [r7, #8]
 8017108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801710a:	2b00      	cmp	r3, #0
 801710c:	d10c      	bne.n	8017128 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801710e:	4b35      	ldr	r3, [pc, #212]	; (80171e4 <tcp_output_segment+0x1b8>)
 8017110:	681a      	ldr	r2, [r3, #0]
 8017112:	68bb      	ldr	r3, [r7, #8]
 8017114:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8017116:	68fb      	ldr	r3, [r7, #12]
 8017118:	68db      	ldr	r3, [r3, #12]
 801711a:	685b      	ldr	r3, [r3, #4]
 801711c:	4618      	mov	r0, r3
 801711e:	f7f8 fe12 	bl	800fd46 <lwip_htonl>
 8017122:	4602      	mov	r2, r0
 8017124:	68bb      	ldr	r3, [r7, #8]
 8017126:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8017128:	68fb      	ldr	r3, [r7, #12]
 801712a:	68da      	ldr	r2, [r3, #12]
 801712c:	68fb      	ldr	r3, [r7, #12]
 801712e:	685b      	ldr	r3, [r3, #4]
 8017130:	685b      	ldr	r3, [r3, #4]
 8017132:	1ad3      	subs	r3, r2, r3
 8017134:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8017136:	68fb      	ldr	r3, [r7, #12]
 8017138:	685b      	ldr	r3, [r3, #4]
 801713a:	8959      	ldrh	r1, [r3, #10]
 801713c:	68fb      	ldr	r3, [r7, #12]
 801713e:	685b      	ldr	r3, [r3, #4]
 8017140:	8b3a      	ldrh	r2, [r7, #24]
 8017142:	1a8a      	subs	r2, r1, r2
 8017144:	b292      	uxth	r2, r2
 8017146:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8017148:	68fb      	ldr	r3, [r7, #12]
 801714a:	685b      	ldr	r3, [r3, #4]
 801714c:	8919      	ldrh	r1, [r3, #8]
 801714e:	68fb      	ldr	r3, [r7, #12]
 8017150:	685b      	ldr	r3, [r3, #4]
 8017152:	8b3a      	ldrh	r2, [r7, #24]
 8017154:	1a8a      	subs	r2, r1, r2
 8017156:	b292      	uxth	r2, r2
 8017158:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801715a:	68fb      	ldr	r3, [r7, #12]
 801715c:	685b      	ldr	r3, [r3, #4]
 801715e:	68fa      	ldr	r2, [r7, #12]
 8017160:	68d2      	ldr	r2, [r2, #12]
 8017162:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8017164:	68fb      	ldr	r3, [r7, #12]
 8017166:	68db      	ldr	r3, [r3, #12]
 8017168:	2200      	movs	r2, #0
 801716a:	741a      	strb	r2, [r3, #16]
 801716c:	2200      	movs	r2, #0
 801716e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	68da      	ldr	r2, [r3, #12]
 8017174:	68fb      	ldr	r3, [r7, #12]
 8017176:	7a9b      	ldrb	r3, [r3, #10]
 8017178:	f003 0301 	and.w	r3, r3, #1
 801717c:	2b00      	cmp	r3, #0
 801717e:	d001      	beq.n	8017184 <tcp_output_segment+0x158>
 8017180:	2318      	movs	r3, #24
 8017182:	e000      	b.n	8017186 <tcp_output_segment+0x15a>
 8017184:	2314      	movs	r3, #20
 8017186:	4413      	add	r3, r2
 8017188:	69fa      	ldr	r2, [r7, #28]
 801718a:	429a      	cmp	r2, r3
 801718c:	d006      	beq.n	801719c <tcp_output_segment+0x170>
 801718e:	4b10      	ldr	r3, [pc, #64]	; (80171d0 <tcp_output_segment+0x1a4>)
 8017190:	f240 621c 	movw	r2, #1564	; 0x61c
 8017194:	4914      	ldr	r1, [pc, #80]	; (80171e8 <tcp_output_segment+0x1bc>)
 8017196:	4810      	ldr	r0, [pc, #64]	; (80171d8 <tcp_output_segment+0x1ac>)
 8017198:	f004 f866 	bl	801b268 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801719c:	68fb      	ldr	r3, [r7, #12]
 801719e:	6858      	ldr	r0, [r3, #4]
 80171a0:	68b9      	ldr	r1, [r7, #8]
 80171a2:	68bb      	ldr	r3, [r7, #8]
 80171a4:	1d1c      	adds	r4, r3, #4
 80171a6:	68bb      	ldr	r3, [r7, #8]
 80171a8:	7add      	ldrb	r5, [r3, #11]
 80171aa:	68bb      	ldr	r3, [r7, #8]
 80171ac:	7a9b      	ldrb	r3, [r3, #10]
 80171ae:	687a      	ldr	r2, [r7, #4]
 80171b0:	9202      	str	r2, [sp, #8]
 80171b2:	2206      	movs	r2, #6
 80171b4:	9201      	str	r2, [sp, #4]
 80171b6:	9300      	str	r3, [sp, #0]
 80171b8:	462b      	mov	r3, r5
 80171ba:	4622      	mov	r2, r4
 80171bc:	f002 fa5a 	bl	8019674 <ip4_output_if>
 80171c0:	4603      	mov	r3, r0
 80171c2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80171c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80171c8:	4618      	mov	r0, r3
 80171ca:	3720      	adds	r7, #32
 80171cc:	46bd      	mov	sp, r7
 80171ce:	bdb0      	pop	{r4, r5, r7, pc}
 80171d0:	0801f984 	.word	0x0801f984
 80171d4:	0801ff48 	.word	0x0801ff48
 80171d8:	0801f9d8 	.word	0x0801f9d8
 80171dc:	0801ff68 	.word	0x0801ff68
 80171e0:	0801ff88 	.word	0x0801ff88
 80171e4:	2000704c 	.word	0x2000704c
 80171e8:	0801ffac 	.word	0x0801ffac

080171ec <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80171ec:	b5b0      	push	{r4, r5, r7, lr}
 80171ee:	b084      	sub	sp, #16
 80171f0:	af00      	add	r7, sp, #0
 80171f2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	d106      	bne.n	8017208 <tcp_rexmit_rto_prepare+0x1c>
 80171fa:	4b31      	ldr	r3, [pc, #196]	; (80172c0 <tcp_rexmit_rto_prepare+0xd4>)
 80171fc:	f240 6263 	movw	r2, #1635	; 0x663
 8017200:	4930      	ldr	r1, [pc, #192]	; (80172c4 <tcp_rexmit_rto_prepare+0xd8>)
 8017202:	4831      	ldr	r0, [pc, #196]	; (80172c8 <tcp_rexmit_rto_prepare+0xdc>)
 8017204:	f004 f830 	bl	801b268 <iprintf>

  if (pcb->unacked == NULL) {
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801720c:	2b00      	cmp	r3, #0
 801720e:	d102      	bne.n	8017216 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8017210:	f06f 0305 	mvn.w	r3, #5
 8017214:	e050      	b.n	80172b8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801721a:	60fb      	str	r3, [r7, #12]
 801721c:	e00b      	b.n	8017236 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801721e:	68f8      	ldr	r0, [r7, #12]
 8017220:	f7ff fee4 	bl	8016fec <tcp_output_segment_busy>
 8017224:	4603      	mov	r3, r0
 8017226:	2b00      	cmp	r3, #0
 8017228:	d002      	beq.n	8017230 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801722a:	f06f 0305 	mvn.w	r3, #5
 801722e:	e043      	b.n	80172b8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017230:	68fb      	ldr	r3, [r7, #12]
 8017232:	681b      	ldr	r3, [r3, #0]
 8017234:	60fb      	str	r3, [r7, #12]
 8017236:	68fb      	ldr	r3, [r7, #12]
 8017238:	681b      	ldr	r3, [r3, #0]
 801723a:	2b00      	cmp	r3, #0
 801723c:	d1ef      	bne.n	801721e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801723e:	68f8      	ldr	r0, [r7, #12]
 8017240:	f7ff fed4 	bl	8016fec <tcp_output_segment_busy>
 8017244:	4603      	mov	r3, r0
 8017246:	2b00      	cmp	r3, #0
 8017248:	d002      	beq.n	8017250 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801724a:	f06f 0305 	mvn.w	r3, #5
 801724e:	e033      	b.n	80172b8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8017254:	68fb      	ldr	r3, [r7, #12]
 8017256:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	2200      	movs	r2, #0
 8017264:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	8b5b      	ldrh	r3, [r3, #26]
 801726a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801726e:	b29a      	uxth	r2, r3
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8017274:	68fb      	ldr	r3, [r7, #12]
 8017276:	68db      	ldr	r3, [r3, #12]
 8017278:	685b      	ldr	r3, [r3, #4]
 801727a:	4618      	mov	r0, r3
 801727c:	f7f8 fd63 	bl	800fd46 <lwip_htonl>
 8017280:	4604      	mov	r4, r0
 8017282:	68fb      	ldr	r3, [r7, #12]
 8017284:	891b      	ldrh	r3, [r3, #8]
 8017286:	461d      	mov	r5, r3
 8017288:	68fb      	ldr	r3, [r7, #12]
 801728a:	68db      	ldr	r3, [r3, #12]
 801728c:	899b      	ldrh	r3, [r3, #12]
 801728e:	b29b      	uxth	r3, r3
 8017290:	4618      	mov	r0, r3
 8017292:	f7f8 fd43 	bl	800fd1c <lwip_htons>
 8017296:	4603      	mov	r3, r0
 8017298:	b2db      	uxtb	r3, r3
 801729a:	f003 0303 	and.w	r3, r3, #3
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d001      	beq.n	80172a6 <tcp_rexmit_rto_prepare+0xba>
 80172a2:	2301      	movs	r3, #1
 80172a4:	e000      	b.n	80172a8 <tcp_rexmit_rto_prepare+0xbc>
 80172a6:	2300      	movs	r3, #0
 80172a8:	442b      	add	r3, r5
 80172aa:	18e2      	adds	r2, r4, r3
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	2200      	movs	r2, #0
 80172b4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80172b6:	2300      	movs	r3, #0
}
 80172b8:	4618      	mov	r0, r3
 80172ba:	3710      	adds	r7, #16
 80172bc:	46bd      	mov	sp, r7
 80172be:	bdb0      	pop	{r4, r5, r7, pc}
 80172c0:	0801f984 	.word	0x0801f984
 80172c4:	0801ffc0 	.word	0x0801ffc0
 80172c8:	0801f9d8 	.word	0x0801f9d8

080172cc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80172cc:	b580      	push	{r7, lr}
 80172ce:	b082      	sub	sp, #8
 80172d0:	af00      	add	r7, sp, #0
 80172d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	2b00      	cmp	r3, #0
 80172d8:	d106      	bne.n	80172e8 <tcp_rexmit_rto_commit+0x1c>
 80172da:	4b0d      	ldr	r3, [pc, #52]	; (8017310 <tcp_rexmit_rto_commit+0x44>)
 80172dc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80172e0:	490c      	ldr	r1, [pc, #48]	; (8017314 <tcp_rexmit_rto_commit+0x48>)
 80172e2:	480d      	ldr	r0, [pc, #52]	; (8017318 <tcp_rexmit_rto_commit+0x4c>)
 80172e4:	f003 ffc0 	bl	801b268 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80172ee:	2bff      	cmp	r3, #255	; 0xff
 80172f0:	d007      	beq.n	8017302 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80172f8:	3301      	adds	r3, #1
 80172fa:	b2da      	uxtb	r2, r3
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8017302:	6878      	ldr	r0, [r7, #4]
 8017304:	f7ff fc7e 	bl	8016c04 <tcp_output>
}
 8017308:	bf00      	nop
 801730a:	3708      	adds	r7, #8
 801730c:	46bd      	mov	sp, r7
 801730e:	bd80      	pop	{r7, pc}
 8017310:	0801f984 	.word	0x0801f984
 8017314:	0801ffe4 	.word	0x0801ffe4
 8017318:	0801f9d8 	.word	0x0801f9d8

0801731c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801731c:	b580      	push	{r7, lr}
 801731e:	b082      	sub	sp, #8
 8017320:	af00      	add	r7, sp, #0
 8017322:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	2b00      	cmp	r3, #0
 8017328:	d106      	bne.n	8017338 <tcp_rexmit_rto+0x1c>
 801732a:	4b0a      	ldr	r3, [pc, #40]	; (8017354 <tcp_rexmit_rto+0x38>)
 801732c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8017330:	4909      	ldr	r1, [pc, #36]	; (8017358 <tcp_rexmit_rto+0x3c>)
 8017332:	480a      	ldr	r0, [pc, #40]	; (801735c <tcp_rexmit_rto+0x40>)
 8017334:	f003 ff98 	bl	801b268 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8017338:	6878      	ldr	r0, [r7, #4]
 801733a:	f7ff ff57 	bl	80171ec <tcp_rexmit_rto_prepare>
 801733e:	4603      	mov	r3, r0
 8017340:	2b00      	cmp	r3, #0
 8017342:	d102      	bne.n	801734a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8017344:	6878      	ldr	r0, [r7, #4]
 8017346:	f7ff ffc1 	bl	80172cc <tcp_rexmit_rto_commit>
  }
}
 801734a:	bf00      	nop
 801734c:	3708      	adds	r7, #8
 801734e:	46bd      	mov	sp, r7
 8017350:	bd80      	pop	{r7, pc}
 8017352:	bf00      	nop
 8017354:	0801f984 	.word	0x0801f984
 8017358:	08020008 	.word	0x08020008
 801735c:	0801f9d8 	.word	0x0801f9d8

08017360 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8017360:	b590      	push	{r4, r7, lr}
 8017362:	b085      	sub	sp, #20
 8017364:	af00      	add	r7, sp, #0
 8017366:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	2b00      	cmp	r3, #0
 801736c:	d106      	bne.n	801737c <tcp_rexmit+0x1c>
 801736e:	4b2f      	ldr	r3, [pc, #188]	; (801742c <tcp_rexmit+0xcc>)
 8017370:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8017374:	492e      	ldr	r1, [pc, #184]	; (8017430 <tcp_rexmit+0xd0>)
 8017376:	482f      	ldr	r0, [pc, #188]	; (8017434 <tcp_rexmit+0xd4>)
 8017378:	f003 ff76 	bl	801b268 <iprintf>

  if (pcb->unacked == NULL) {
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017380:	2b00      	cmp	r3, #0
 8017382:	d102      	bne.n	801738a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8017384:	f06f 0305 	mvn.w	r3, #5
 8017388:	e04c      	b.n	8017424 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801738e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8017390:	68b8      	ldr	r0, [r7, #8]
 8017392:	f7ff fe2b 	bl	8016fec <tcp_output_segment_busy>
 8017396:	4603      	mov	r3, r0
 8017398:	2b00      	cmp	r3, #0
 801739a:	d002      	beq.n	80173a2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801739c:	f06f 0305 	mvn.w	r3, #5
 80173a0:	e040      	b.n	8017424 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80173a2:	68bb      	ldr	r3, [r7, #8]
 80173a4:	681a      	ldr	r2, [r3, #0]
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	336c      	adds	r3, #108	; 0x6c
 80173ae:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80173b0:	e002      	b.n	80173b8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80173b2:	68fb      	ldr	r3, [r7, #12]
 80173b4:	681b      	ldr	r3, [r3, #0]
 80173b6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80173b8:	68fb      	ldr	r3, [r7, #12]
 80173ba:	681b      	ldr	r3, [r3, #0]
 80173bc:	2b00      	cmp	r3, #0
 80173be:	d011      	beq.n	80173e4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80173c0:	68fb      	ldr	r3, [r7, #12]
 80173c2:	681b      	ldr	r3, [r3, #0]
 80173c4:	68db      	ldr	r3, [r3, #12]
 80173c6:	685b      	ldr	r3, [r3, #4]
 80173c8:	4618      	mov	r0, r3
 80173ca:	f7f8 fcbc 	bl	800fd46 <lwip_htonl>
 80173ce:	4604      	mov	r4, r0
 80173d0:	68bb      	ldr	r3, [r7, #8]
 80173d2:	68db      	ldr	r3, [r3, #12]
 80173d4:	685b      	ldr	r3, [r3, #4]
 80173d6:	4618      	mov	r0, r3
 80173d8:	f7f8 fcb5 	bl	800fd46 <lwip_htonl>
 80173dc:	4603      	mov	r3, r0
 80173de:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	dbe6      	blt.n	80173b2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80173e4:	68fb      	ldr	r3, [r7, #12]
 80173e6:	681a      	ldr	r2, [r3, #0]
 80173e8:	68bb      	ldr	r3, [r7, #8]
 80173ea:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80173ec:	68fb      	ldr	r3, [r7, #12]
 80173ee:	68ba      	ldr	r2, [r7, #8]
 80173f0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80173f2:	68bb      	ldr	r3, [r7, #8]
 80173f4:	681b      	ldr	r3, [r3, #0]
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d103      	bne.n	8017402 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	2200      	movs	r2, #0
 80173fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8017402:	687b      	ldr	r3, [r7, #4]
 8017404:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017408:	2bff      	cmp	r3, #255	; 0xff
 801740a:	d007      	beq.n	801741c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017412:	3301      	adds	r3, #1
 8017414:	b2da      	uxtb	r2, r3
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	2200      	movs	r2, #0
 8017420:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8017422:	2300      	movs	r3, #0
}
 8017424:	4618      	mov	r0, r3
 8017426:	3714      	adds	r7, #20
 8017428:	46bd      	mov	sp, r7
 801742a:	bd90      	pop	{r4, r7, pc}
 801742c:	0801f984 	.word	0x0801f984
 8017430:	08020024 	.word	0x08020024
 8017434:	0801f9d8 	.word	0x0801f9d8

08017438 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8017438:	b580      	push	{r7, lr}
 801743a:	b082      	sub	sp, #8
 801743c:	af00      	add	r7, sp, #0
 801743e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	2b00      	cmp	r3, #0
 8017444:	d106      	bne.n	8017454 <tcp_rexmit_fast+0x1c>
 8017446:	4b2a      	ldr	r3, [pc, #168]	; (80174f0 <tcp_rexmit_fast+0xb8>)
 8017448:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801744c:	4929      	ldr	r1, [pc, #164]	; (80174f4 <tcp_rexmit_fast+0xbc>)
 801744e:	482a      	ldr	r0, [pc, #168]	; (80174f8 <tcp_rexmit_fast+0xc0>)
 8017450:	f003 ff0a 	bl	801b268 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017458:	2b00      	cmp	r3, #0
 801745a:	d045      	beq.n	80174e8 <tcp_rexmit_fast+0xb0>
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	8b5b      	ldrh	r3, [r3, #26]
 8017460:	f003 0304 	and.w	r3, r3, #4
 8017464:	2b00      	cmp	r3, #0
 8017466:	d13f      	bne.n	80174e8 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8017468:	6878      	ldr	r0, [r7, #4]
 801746a:	f7ff ff79 	bl	8017360 <tcp_rexmit>
 801746e:	4603      	mov	r3, r0
 8017470:	2b00      	cmp	r3, #0
 8017472:	d139      	bne.n	80174e8 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017480:	4293      	cmp	r3, r2
 8017482:	bf28      	it	cs
 8017484:	4613      	movcs	r3, r2
 8017486:	b29b      	uxth	r3, r3
 8017488:	2b00      	cmp	r3, #0
 801748a:	da00      	bge.n	801748e <tcp_rexmit_fast+0x56>
 801748c:	3301      	adds	r3, #1
 801748e:	105b      	asrs	r3, r3, #1
 8017490:	b29a      	uxth	r2, r3
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801749e:	461a      	mov	r2, r3
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80174a4:	005b      	lsls	r3, r3, #1
 80174a6:	429a      	cmp	r2, r3
 80174a8:	d206      	bcs.n	80174b8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80174ae:	005b      	lsls	r3, r3, #1
 80174b0:	b29a      	uxth	r2, r3
 80174b2:	687b      	ldr	r3, [r7, #4]
 80174b4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80174c2:	4619      	mov	r1, r3
 80174c4:	0049      	lsls	r1, r1, #1
 80174c6:	440b      	add	r3, r1
 80174c8:	b29b      	uxth	r3, r3
 80174ca:	4413      	add	r3, r2
 80174cc:	b29a      	uxth	r2, r3
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	8b5b      	ldrh	r3, [r3, #26]
 80174d8:	f043 0304 	orr.w	r3, r3, #4
 80174dc:	b29a      	uxth	r2, r3
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	2200      	movs	r2, #0
 80174e6:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80174e8:	bf00      	nop
 80174ea:	3708      	adds	r7, #8
 80174ec:	46bd      	mov	sp, r7
 80174ee:	bd80      	pop	{r7, pc}
 80174f0:	0801f984 	.word	0x0801f984
 80174f4:	0802003c 	.word	0x0802003c
 80174f8:	0801f9d8 	.word	0x0801f9d8

080174fc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80174fc:	b580      	push	{r7, lr}
 80174fe:	b086      	sub	sp, #24
 8017500:	af00      	add	r7, sp, #0
 8017502:	60f8      	str	r0, [r7, #12]
 8017504:	607b      	str	r3, [r7, #4]
 8017506:	460b      	mov	r3, r1
 8017508:	817b      	strh	r3, [r7, #10]
 801750a:	4613      	mov	r3, r2
 801750c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801750e:	897a      	ldrh	r2, [r7, #10]
 8017510:	893b      	ldrh	r3, [r7, #8]
 8017512:	4413      	add	r3, r2
 8017514:	b29b      	uxth	r3, r3
 8017516:	3314      	adds	r3, #20
 8017518:	b29b      	uxth	r3, r3
 801751a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801751e:	4619      	mov	r1, r3
 8017520:	2022      	movs	r0, #34	; 0x22
 8017522:	f7f9 fd1b 	bl	8010f5c <pbuf_alloc>
 8017526:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8017528:	697b      	ldr	r3, [r7, #20]
 801752a:	2b00      	cmp	r3, #0
 801752c:	d04d      	beq.n	80175ca <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801752e:	897b      	ldrh	r3, [r7, #10]
 8017530:	3313      	adds	r3, #19
 8017532:	697a      	ldr	r2, [r7, #20]
 8017534:	8952      	ldrh	r2, [r2, #10]
 8017536:	4293      	cmp	r3, r2
 8017538:	db06      	blt.n	8017548 <tcp_output_alloc_header_common+0x4c>
 801753a:	4b26      	ldr	r3, [pc, #152]	; (80175d4 <tcp_output_alloc_header_common+0xd8>)
 801753c:	f240 7223 	movw	r2, #1827	; 0x723
 8017540:	4925      	ldr	r1, [pc, #148]	; (80175d8 <tcp_output_alloc_header_common+0xdc>)
 8017542:	4826      	ldr	r0, [pc, #152]	; (80175dc <tcp_output_alloc_header_common+0xe0>)
 8017544:	f003 fe90 	bl	801b268 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8017548:	697b      	ldr	r3, [r7, #20]
 801754a:	685b      	ldr	r3, [r3, #4]
 801754c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801754e:	8c3b      	ldrh	r3, [r7, #32]
 8017550:	4618      	mov	r0, r3
 8017552:	f7f8 fbe3 	bl	800fd1c <lwip_htons>
 8017556:	4603      	mov	r3, r0
 8017558:	461a      	mov	r2, r3
 801755a:	693b      	ldr	r3, [r7, #16]
 801755c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801755e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017560:	4618      	mov	r0, r3
 8017562:	f7f8 fbdb 	bl	800fd1c <lwip_htons>
 8017566:	4603      	mov	r3, r0
 8017568:	461a      	mov	r2, r3
 801756a:	693b      	ldr	r3, [r7, #16]
 801756c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801756e:	693b      	ldr	r3, [r7, #16]
 8017570:	687a      	ldr	r2, [r7, #4]
 8017572:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8017574:	68f8      	ldr	r0, [r7, #12]
 8017576:	f7f8 fbe6 	bl	800fd46 <lwip_htonl>
 801757a:	4602      	mov	r2, r0
 801757c:	693b      	ldr	r3, [r7, #16]
 801757e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8017580:	897b      	ldrh	r3, [r7, #10]
 8017582:	089b      	lsrs	r3, r3, #2
 8017584:	b29b      	uxth	r3, r3
 8017586:	3305      	adds	r3, #5
 8017588:	b29b      	uxth	r3, r3
 801758a:	031b      	lsls	r3, r3, #12
 801758c:	b29a      	uxth	r2, r3
 801758e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017592:	b29b      	uxth	r3, r3
 8017594:	4313      	orrs	r3, r2
 8017596:	b29b      	uxth	r3, r3
 8017598:	4618      	mov	r0, r3
 801759a:	f7f8 fbbf 	bl	800fd1c <lwip_htons>
 801759e:	4603      	mov	r3, r0
 80175a0:	461a      	mov	r2, r3
 80175a2:	693b      	ldr	r3, [r7, #16]
 80175a4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80175a6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80175a8:	4618      	mov	r0, r3
 80175aa:	f7f8 fbb7 	bl	800fd1c <lwip_htons>
 80175ae:	4603      	mov	r3, r0
 80175b0:	461a      	mov	r2, r3
 80175b2:	693b      	ldr	r3, [r7, #16]
 80175b4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80175b6:	693b      	ldr	r3, [r7, #16]
 80175b8:	2200      	movs	r2, #0
 80175ba:	741a      	strb	r2, [r3, #16]
 80175bc:	2200      	movs	r2, #0
 80175be:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80175c0:	693b      	ldr	r3, [r7, #16]
 80175c2:	2200      	movs	r2, #0
 80175c4:	749a      	strb	r2, [r3, #18]
 80175c6:	2200      	movs	r2, #0
 80175c8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80175ca:	697b      	ldr	r3, [r7, #20]
}
 80175cc:	4618      	mov	r0, r3
 80175ce:	3718      	adds	r7, #24
 80175d0:	46bd      	mov	sp, r7
 80175d2:	bd80      	pop	{r7, pc}
 80175d4:	0801f984 	.word	0x0801f984
 80175d8:	0802005c 	.word	0x0802005c
 80175dc:	0801f9d8 	.word	0x0801f9d8

080175e0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80175e0:	b5b0      	push	{r4, r5, r7, lr}
 80175e2:	b08a      	sub	sp, #40	; 0x28
 80175e4:	af04      	add	r7, sp, #16
 80175e6:	60f8      	str	r0, [r7, #12]
 80175e8:	607b      	str	r3, [r7, #4]
 80175ea:	460b      	mov	r3, r1
 80175ec:	817b      	strh	r3, [r7, #10]
 80175ee:	4613      	mov	r3, r2
 80175f0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80175f2:	68fb      	ldr	r3, [r7, #12]
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	d106      	bne.n	8017606 <tcp_output_alloc_header+0x26>
 80175f8:	4b15      	ldr	r3, [pc, #84]	; (8017650 <tcp_output_alloc_header+0x70>)
 80175fa:	f240 7242 	movw	r2, #1858	; 0x742
 80175fe:	4915      	ldr	r1, [pc, #84]	; (8017654 <tcp_output_alloc_header+0x74>)
 8017600:	4815      	ldr	r0, [pc, #84]	; (8017658 <tcp_output_alloc_header+0x78>)
 8017602:	f003 fe31 	bl	801b268 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8017606:	68fb      	ldr	r3, [r7, #12]
 8017608:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801760a:	68fb      	ldr	r3, [r7, #12]
 801760c:	8adb      	ldrh	r3, [r3, #22]
 801760e:	68fa      	ldr	r2, [r7, #12]
 8017610:	8b12      	ldrh	r2, [r2, #24]
 8017612:	68f9      	ldr	r1, [r7, #12]
 8017614:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8017616:	893d      	ldrh	r5, [r7, #8]
 8017618:	897c      	ldrh	r4, [r7, #10]
 801761a:	9103      	str	r1, [sp, #12]
 801761c:	2110      	movs	r1, #16
 801761e:	9102      	str	r1, [sp, #8]
 8017620:	9201      	str	r2, [sp, #4]
 8017622:	9300      	str	r3, [sp, #0]
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	462a      	mov	r2, r5
 8017628:	4621      	mov	r1, r4
 801762a:	f7ff ff67 	bl	80174fc <tcp_output_alloc_header_common>
 801762e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8017630:	697b      	ldr	r3, [r7, #20]
 8017632:	2b00      	cmp	r3, #0
 8017634:	d006      	beq.n	8017644 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017636:	68fb      	ldr	r3, [r7, #12]
 8017638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801763a:	68fa      	ldr	r2, [r7, #12]
 801763c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801763e:	441a      	add	r2, r3
 8017640:	68fb      	ldr	r3, [r7, #12]
 8017642:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8017644:	697b      	ldr	r3, [r7, #20]
}
 8017646:	4618      	mov	r0, r3
 8017648:	3718      	adds	r7, #24
 801764a:	46bd      	mov	sp, r7
 801764c:	bdb0      	pop	{r4, r5, r7, pc}
 801764e:	bf00      	nop
 8017650:	0801f984 	.word	0x0801f984
 8017654:	0802008c 	.word	0x0802008c
 8017658:	0801f9d8 	.word	0x0801f9d8

0801765c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801765c:	b580      	push	{r7, lr}
 801765e:	b088      	sub	sp, #32
 8017660:	af00      	add	r7, sp, #0
 8017662:	60f8      	str	r0, [r7, #12]
 8017664:	60b9      	str	r1, [r7, #8]
 8017666:	4611      	mov	r1, r2
 8017668:	461a      	mov	r2, r3
 801766a:	460b      	mov	r3, r1
 801766c:	71fb      	strb	r3, [r7, #7]
 801766e:	4613      	mov	r3, r2
 8017670:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8017672:	2300      	movs	r3, #0
 8017674:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8017676:	68bb      	ldr	r3, [r7, #8]
 8017678:	2b00      	cmp	r3, #0
 801767a:	d106      	bne.n	801768a <tcp_output_fill_options+0x2e>
 801767c:	4b12      	ldr	r3, [pc, #72]	; (80176c8 <tcp_output_fill_options+0x6c>)
 801767e:	f240 7256 	movw	r2, #1878	; 0x756
 8017682:	4912      	ldr	r1, [pc, #72]	; (80176cc <tcp_output_fill_options+0x70>)
 8017684:	4812      	ldr	r0, [pc, #72]	; (80176d0 <tcp_output_fill_options+0x74>)
 8017686:	f003 fdef 	bl	801b268 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801768a:	68bb      	ldr	r3, [r7, #8]
 801768c:	685b      	ldr	r3, [r3, #4]
 801768e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8017690:	69bb      	ldr	r3, [r7, #24]
 8017692:	3314      	adds	r3, #20
 8017694:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8017696:	8bfb      	ldrh	r3, [r7, #30]
 8017698:	009b      	lsls	r3, r3, #2
 801769a:	461a      	mov	r2, r3
 801769c:	79fb      	ldrb	r3, [r7, #7]
 801769e:	009b      	lsls	r3, r3, #2
 80176a0:	f003 0304 	and.w	r3, r3, #4
 80176a4:	4413      	add	r3, r2
 80176a6:	3314      	adds	r3, #20
 80176a8:	69ba      	ldr	r2, [r7, #24]
 80176aa:	4413      	add	r3, r2
 80176ac:	697a      	ldr	r2, [r7, #20]
 80176ae:	429a      	cmp	r2, r3
 80176b0:	d006      	beq.n	80176c0 <tcp_output_fill_options+0x64>
 80176b2:	4b05      	ldr	r3, [pc, #20]	; (80176c8 <tcp_output_fill_options+0x6c>)
 80176b4:	f240 7275 	movw	r2, #1909	; 0x775
 80176b8:	4906      	ldr	r1, [pc, #24]	; (80176d4 <tcp_output_fill_options+0x78>)
 80176ba:	4805      	ldr	r0, [pc, #20]	; (80176d0 <tcp_output_fill_options+0x74>)
 80176bc:	f003 fdd4 	bl	801b268 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80176c0:	bf00      	nop
 80176c2:	3720      	adds	r7, #32
 80176c4:	46bd      	mov	sp, r7
 80176c6:	bd80      	pop	{r7, pc}
 80176c8:	0801f984 	.word	0x0801f984
 80176cc:	080200b4 	.word	0x080200b4
 80176d0:	0801f9d8 	.word	0x0801f9d8
 80176d4:	0801ffac 	.word	0x0801ffac

080176d8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80176d8:	b580      	push	{r7, lr}
 80176da:	b08a      	sub	sp, #40	; 0x28
 80176dc:	af04      	add	r7, sp, #16
 80176de:	60f8      	str	r0, [r7, #12]
 80176e0:	60b9      	str	r1, [r7, #8]
 80176e2:	607a      	str	r2, [r7, #4]
 80176e4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80176e6:	68bb      	ldr	r3, [r7, #8]
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d106      	bne.n	80176fa <tcp_output_control_segment+0x22>
 80176ec:	4b1c      	ldr	r3, [pc, #112]	; (8017760 <tcp_output_control_segment+0x88>)
 80176ee:	f240 7287 	movw	r2, #1927	; 0x787
 80176f2:	491c      	ldr	r1, [pc, #112]	; (8017764 <tcp_output_control_segment+0x8c>)
 80176f4:	481c      	ldr	r0, [pc, #112]	; (8017768 <tcp_output_control_segment+0x90>)
 80176f6:	f003 fdb7 	bl	801b268 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80176fa:	683a      	ldr	r2, [r7, #0]
 80176fc:	6879      	ldr	r1, [r7, #4]
 80176fe:	68f8      	ldr	r0, [r7, #12]
 8017700:	f7fe fae8 	bl	8015cd4 <tcp_route>
 8017704:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8017706:	693b      	ldr	r3, [r7, #16]
 8017708:	2b00      	cmp	r3, #0
 801770a:	d102      	bne.n	8017712 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801770c:	23fc      	movs	r3, #252	; 0xfc
 801770e:	75fb      	strb	r3, [r7, #23]
 8017710:	e01c      	b.n	801774c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8017712:	68fb      	ldr	r3, [r7, #12]
 8017714:	2b00      	cmp	r3, #0
 8017716:	d006      	beq.n	8017726 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8017718:	68fb      	ldr	r3, [r7, #12]
 801771a:	7adb      	ldrb	r3, [r3, #11]
 801771c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801771e:	68fb      	ldr	r3, [r7, #12]
 8017720:	7a9b      	ldrb	r3, [r3, #10]
 8017722:	757b      	strb	r3, [r7, #21]
 8017724:	e003      	b.n	801772e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8017726:	23ff      	movs	r3, #255	; 0xff
 8017728:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801772a:	2300      	movs	r3, #0
 801772c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801772e:	7dba      	ldrb	r2, [r7, #22]
 8017730:	693b      	ldr	r3, [r7, #16]
 8017732:	9302      	str	r3, [sp, #8]
 8017734:	2306      	movs	r3, #6
 8017736:	9301      	str	r3, [sp, #4]
 8017738:	7d7b      	ldrb	r3, [r7, #21]
 801773a:	9300      	str	r3, [sp, #0]
 801773c:	4613      	mov	r3, r2
 801773e:	683a      	ldr	r2, [r7, #0]
 8017740:	6879      	ldr	r1, [r7, #4]
 8017742:	68b8      	ldr	r0, [r7, #8]
 8017744:	f001 ff96 	bl	8019674 <ip4_output_if>
 8017748:	4603      	mov	r3, r0
 801774a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801774c:	68b8      	ldr	r0, [r7, #8]
 801774e:	f7f9 fee9 	bl	8011524 <pbuf_free>
  return err;
 8017752:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017756:	4618      	mov	r0, r3
 8017758:	3718      	adds	r7, #24
 801775a:	46bd      	mov	sp, r7
 801775c:	bd80      	pop	{r7, pc}
 801775e:	bf00      	nop
 8017760:	0801f984 	.word	0x0801f984
 8017764:	080200dc 	.word	0x080200dc
 8017768:	0801f9d8 	.word	0x0801f9d8

0801776c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801776c:	b590      	push	{r4, r7, lr}
 801776e:	b08b      	sub	sp, #44	; 0x2c
 8017770:	af04      	add	r7, sp, #16
 8017772:	60f8      	str	r0, [r7, #12]
 8017774:	60b9      	str	r1, [r7, #8]
 8017776:	607a      	str	r2, [r7, #4]
 8017778:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801777a:	683b      	ldr	r3, [r7, #0]
 801777c:	2b00      	cmp	r3, #0
 801777e:	d106      	bne.n	801778e <tcp_rst+0x22>
 8017780:	4b1f      	ldr	r3, [pc, #124]	; (8017800 <tcp_rst+0x94>)
 8017782:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8017786:	491f      	ldr	r1, [pc, #124]	; (8017804 <tcp_rst+0x98>)
 8017788:	481f      	ldr	r0, [pc, #124]	; (8017808 <tcp_rst+0x9c>)
 801778a:	f003 fd6d 	bl	801b268 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801778e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017790:	2b00      	cmp	r3, #0
 8017792:	d106      	bne.n	80177a2 <tcp_rst+0x36>
 8017794:	4b1a      	ldr	r3, [pc, #104]	; (8017800 <tcp_rst+0x94>)
 8017796:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801779a:	491c      	ldr	r1, [pc, #112]	; (801780c <tcp_rst+0xa0>)
 801779c:	481a      	ldr	r0, [pc, #104]	; (8017808 <tcp_rst+0x9c>)
 801779e:	f003 fd63 	bl	801b268 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80177a2:	2300      	movs	r3, #0
 80177a4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80177a6:	f24d 0316 	movw	r3, #53270	; 0xd016
 80177aa:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80177ac:	7dfb      	ldrb	r3, [r7, #23]
 80177ae:	b29c      	uxth	r4, r3
 80177b0:	68b8      	ldr	r0, [r7, #8]
 80177b2:	f7f8 fac8 	bl	800fd46 <lwip_htonl>
 80177b6:	4602      	mov	r2, r0
 80177b8:	8abb      	ldrh	r3, [r7, #20]
 80177ba:	9303      	str	r3, [sp, #12]
 80177bc:	2314      	movs	r3, #20
 80177be:	9302      	str	r3, [sp, #8]
 80177c0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80177c2:	9301      	str	r3, [sp, #4]
 80177c4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80177c6:	9300      	str	r3, [sp, #0]
 80177c8:	4613      	mov	r3, r2
 80177ca:	2200      	movs	r2, #0
 80177cc:	4621      	mov	r1, r4
 80177ce:	6878      	ldr	r0, [r7, #4]
 80177d0:	f7ff fe94 	bl	80174fc <tcp_output_alloc_header_common>
 80177d4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80177d6:	693b      	ldr	r3, [r7, #16]
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d00c      	beq.n	80177f6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80177dc:	7dfb      	ldrb	r3, [r7, #23]
 80177de:	2200      	movs	r2, #0
 80177e0:	6939      	ldr	r1, [r7, #16]
 80177e2:	68f8      	ldr	r0, [r7, #12]
 80177e4:	f7ff ff3a 	bl	801765c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80177e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177ea:	683a      	ldr	r2, [r7, #0]
 80177ec:	6939      	ldr	r1, [r7, #16]
 80177ee:	68f8      	ldr	r0, [r7, #12]
 80177f0:	f7ff ff72 	bl	80176d8 <tcp_output_control_segment>
 80177f4:	e000      	b.n	80177f8 <tcp_rst+0x8c>
    return;
 80177f6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80177f8:	371c      	adds	r7, #28
 80177fa:	46bd      	mov	sp, r7
 80177fc:	bd90      	pop	{r4, r7, pc}
 80177fe:	bf00      	nop
 8017800:	0801f984 	.word	0x0801f984
 8017804:	08020108 	.word	0x08020108
 8017808:	0801f9d8 	.word	0x0801f9d8
 801780c:	08020124 	.word	0x08020124

08017810 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8017810:	b590      	push	{r4, r7, lr}
 8017812:	b087      	sub	sp, #28
 8017814:	af00      	add	r7, sp, #0
 8017816:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8017818:	2300      	movs	r3, #0
 801781a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801781c:	2300      	movs	r3, #0
 801781e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	2b00      	cmp	r3, #0
 8017824:	d106      	bne.n	8017834 <tcp_send_empty_ack+0x24>
 8017826:	4b28      	ldr	r3, [pc, #160]	; (80178c8 <tcp_send_empty_ack+0xb8>)
 8017828:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801782c:	4927      	ldr	r1, [pc, #156]	; (80178cc <tcp_send_empty_ack+0xbc>)
 801782e:	4828      	ldr	r0, [pc, #160]	; (80178d0 <tcp_send_empty_ack+0xc0>)
 8017830:	f003 fd1a 	bl	801b268 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017834:	7dfb      	ldrb	r3, [r7, #23]
 8017836:	009b      	lsls	r3, r3, #2
 8017838:	b2db      	uxtb	r3, r3
 801783a:	f003 0304 	and.w	r3, r3, #4
 801783e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8017840:	7d7b      	ldrb	r3, [r7, #21]
 8017842:	b29c      	uxth	r4, r3
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017848:	4618      	mov	r0, r3
 801784a:	f7f8 fa7c 	bl	800fd46 <lwip_htonl>
 801784e:	4603      	mov	r3, r0
 8017850:	2200      	movs	r2, #0
 8017852:	4621      	mov	r1, r4
 8017854:	6878      	ldr	r0, [r7, #4]
 8017856:	f7ff fec3 	bl	80175e0 <tcp_output_alloc_header>
 801785a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801785c:	693b      	ldr	r3, [r7, #16]
 801785e:	2b00      	cmp	r3, #0
 8017860:	d109      	bne.n	8017876 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	8b5b      	ldrh	r3, [r3, #26]
 8017866:	f043 0303 	orr.w	r3, r3, #3
 801786a:	b29a      	uxth	r2, r3
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8017870:	f06f 0301 	mvn.w	r3, #1
 8017874:	e023      	b.n	80178be <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8017876:	7dbb      	ldrb	r3, [r7, #22]
 8017878:	7dfa      	ldrb	r2, [r7, #23]
 801787a:	6939      	ldr	r1, [r7, #16]
 801787c:	6878      	ldr	r0, [r7, #4]
 801787e:	f7ff feed 	bl	801765c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017882:	687a      	ldr	r2, [r7, #4]
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	3304      	adds	r3, #4
 8017888:	6939      	ldr	r1, [r7, #16]
 801788a:	6878      	ldr	r0, [r7, #4]
 801788c:	f7ff ff24 	bl	80176d8 <tcp_output_control_segment>
 8017890:	4603      	mov	r3, r0
 8017892:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8017894:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017898:	2b00      	cmp	r3, #0
 801789a:	d007      	beq.n	80178ac <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	8b5b      	ldrh	r3, [r3, #26]
 80178a0:	f043 0303 	orr.w	r3, r3, #3
 80178a4:	b29a      	uxth	r2, r3
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	835a      	strh	r2, [r3, #26]
 80178aa:	e006      	b.n	80178ba <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	8b5b      	ldrh	r3, [r3, #26]
 80178b0:	f023 0303 	bic.w	r3, r3, #3
 80178b4:	b29a      	uxth	r2, r3
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80178ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80178be:	4618      	mov	r0, r3
 80178c0:	371c      	adds	r7, #28
 80178c2:	46bd      	mov	sp, r7
 80178c4:	bd90      	pop	{r4, r7, pc}
 80178c6:	bf00      	nop
 80178c8:	0801f984 	.word	0x0801f984
 80178cc:	08020140 	.word	0x08020140
 80178d0:	0801f9d8 	.word	0x0801f9d8

080178d4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80178d4:	b590      	push	{r4, r7, lr}
 80178d6:	b087      	sub	sp, #28
 80178d8:	af00      	add	r7, sp, #0
 80178da:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80178dc:	2300      	movs	r3, #0
 80178de:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d106      	bne.n	80178f4 <tcp_keepalive+0x20>
 80178e6:	4b18      	ldr	r3, [pc, #96]	; (8017948 <tcp_keepalive+0x74>)
 80178e8:	f640 0224 	movw	r2, #2084	; 0x824
 80178ec:	4917      	ldr	r1, [pc, #92]	; (801794c <tcp_keepalive+0x78>)
 80178ee:	4818      	ldr	r0, [pc, #96]	; (8017950 <tcp_keepalive+0x7c>)
 80178f0:	f003 fcba 	bl	801b268 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80178f4:	7dfb      	ldrb	r3, [r7, #23]
 80178f6:	b29c      	uxth	r4, r3
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80178fc:	3b01      	subs	r3, #1
 80178fe:	4618      	mov	r0, r3
 8017900:	f7f8 fa21 	bl	800fd46 <lwip_htonl>
 8017904:	4603      	mov	r3, r0
 8017906:	2200      	movs	r2, #0
 8017908:	4621      	mov	r1, r4
 801790a:	6878      	ldr	r0, [r7, #4]
 801790c:	f7ff fe68 	bl	80175e0 <tcp_output_alloc_header>
 8017910:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017912:	693b      	ldr	r3, [r7, #16]
 8017914:	2b00      	cmp	r3, #0
 8017916:	d102      	bne.n	801791e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8017918:	f04f 33ff 	mov.w	r3, #4294967295
 801791c:	e010      	b.n	8017940 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801791e:	7dfb      	ldrb	r3, [r7, #23]
 8017920:	2200      	movs	r2, #0
 8017922:	6939      	ldr	r1, [r7, #16]
 8017924:	6878      	ldr	r0, [r7, #4]
 8017926:	f7ff fe99 	bl	801765c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801792a:	687a      	ldr	r2, [r7, #4]
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	3304      	adds	r3, #4
 8017930:	6939      	ldr	r1, [r7, #16]
 8017932:	6878      	ldr	r0, [r7, #4]
 8017934:	f7ff fed0 	bl	80176d8 <tcp_output_control_segment>
 8017938:	4603      	mov	r3, r0
 801793a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801793c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017940:	4618      	mov	r0, r3
 8017942:	371c      	adds	r7, #28
 8017944:	46bd      	mov	sp, r7
 8017946:	bd90      	pop	{r4, r7, pc}
 8017948:	0801f984 	.word	0x0801f984
 801794c:	08020160 	.word	0x08020160
 8017950:	0801f9d8 	.word	0x0801f9d8

08017954 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8017954:	b590      	push	{r4, r7, lr}
 8017956:	b08b      	sub	sp, #44	; 0x2c
 8017958:	af00      	add	r7, sp, #0
 801795a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801795c:	2300      	movs	r3, #0
 801795e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	2b00      	cmp	r3, #0
 8017966:	d106      	bne.n	8017976 <tcp_zero_window_probe+0x22>
 8017968:	4b4c      	ldr	r3, [pc, #304]	; (8017a9c <tcp_zero_window_probe+0x148>)
 801796a:	f640 024f 	movw	r2, #2127	; 0x84f
 801796e:	494c      	ldr	r1, [pc, #304]	; (8017aa0 <tcp_zero_window_probe+0x14c>)
 8017970:	484c      	ldr	r0, [pc, #304]	; (8017aa4 <tcp_zero_window_probe+0x150>)
 8017972:	f003 fc79 	bl	801b268 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801797a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801797c:	6a3b      	ldr	r3, [r7, #32]
 801797e:	2b00      	cmp	r3, #0
 8017980:	d101      	bne.n	8017986 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8017982:	2300      	movs	r3, #0
 8017984:	e086      	b.n	8017a94 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801798c:	2bff      	cmp	r3, #255	; 0xff
 801798e:	d007      	beq.n	80179a0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8017996:	3301      	adds	r3, #1
 8017998:	b2da      	uxtb	r2, r3
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80179a0:	6a3b      	ldr	r3, [r7, #32]
 80179a2:	68db      	ldr	r3, [r3, #12]
 80179a4:	899b      	ldrh	r3, [r3, #12]
 80179a6:	b29b      	uxth	r3, r3
 80179a8:	4618      	mov	r0, r3
 80179aa:	f7f8 f9b7 	bl	800fd1c <lwip_htons>
 80179ae:	4603      	mov	r3, r0
 80179b0:	b2db      	uxtb	r3, r3
 80179b2:	f003 0301 	and.w	r3, r3, #1
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	d005      	beq.n	80179c6 <tcp_zero_window_probe+0x72>
 80179ba:	6a3b      	ldr	r3, [r7, #32]
 80179bc:	891b      	ldrh	r3, [r3, #8]
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d101      	bne.n	80179c6 <tcp_zero_window_probe+0x72>
 80179c2:	2301      	movs	r3, #1
 80179c4:	e000      	b.n	80179c8 <tcp_zero_window_probe+0x74>
 80179c6:	2300      	movs	r3, #0
 80179c8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80179ca:	7ffb      	ldrb	r3, [r7, #31]
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	bf0c      	ite	eq
 80179d0:	2301      	moveq	r3, #1
 80179d2:	2300      	movne	r3, #0
 80179d4:	b2db      	uxtb	r3, r3
 80179d6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80179d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80179dc:	b299      	uxth	r1, r3
 80179de:	6a3b      	ldr	r3, [r7, #32]
 80179e0:	68db      	ldr	r3, [r3, #12]
 80179e2:	685b      	ldr	r3, [r3, #4]
 80179e4:	8bba      	ldrh	r2, [r7, #28]
 80179e6:	6878      	ldr	r0, [r7, #4]
 80179e8:	f7ff fdfa 	bl	80175e0 <tcp_output_alloc_header>
 80179ec:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80179ee:	69bb      	ldr	r3, [r7, #24]
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d102      	bne.n	80179fa <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80179f4:	f04f 33ff 	mov.w	r3, #4294967295
 80179f8:	e04c      	b.n	8017a94 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80179fa:	69bb      	ldr	r3, [r7, #24]
 80179fc:	685b      	ldr	r3, [r3, #4]
 80179fe:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8017a00:	7ffb      	ldrb	r3, [r7, #31]
 8017a02:	2b00      	cmp	r3, #0
 8017a04:	d011      	beq.n	8017a2a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8017a06:	697b      	ldr	r3, [r7, #20]
 8017a08:	899b      	ldrh	r3, [r3, #12]
 8017a0a:	b29b      	uxth	r3, r3
 8017a0c:	b21b      	sxth	r3, r3
 8017a0e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8017a12:	b21c      	sxth	r4, r3
 8017a14:	2011      	movs	r0, #17
 8017a16:	f7f8 f981 	bl	800fd1c <lwip_htons>
 8017a1a:	4603      	mov	r3, r0
 8017a1c:	b21b      	sxth	r3, r3
 8017a1e:	4323      	orrs	r3, r4
 8017a20:	b21b      	sxth	r3, r3
 8017a22:	b29a      	uxth	r2, r3
 8017a24:	697b      	ldr	r3, [r7, #20]
 8017a26:	819a      	strh	r2, [r3, #12]
 8017a28:	e010      	b.n	8017a4c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8017a2a:	69bb      	ldr	r3, [r7, #24]
 8017a2c:	685b      	ldr	r3, [r3, #4]
 8017a2e:	3314      	adds	r3, #20
 8017a30:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8017a32:	6a3b      	ldr	r3, [r7, #32]
 8017a34:	6858      	ldr	r0, [r3, #4]
 8017a36:	6a3b      	ldr	r3, [r7, #32]
 8017a38:	685b      	ldr	r3, [r3, #4]
 8017a3a:	891a      	ldrh	r2, [r3, #8]
 8017a3c:	6a3b      	ldr	r3, [r7, #32]
 8017a3e:	891b      	ldrh	r3, [r3, #8]
 8017a40:	1ad3      	subs	r3, r2, r3
 8017a42:	b29b      	uxth	r3, r3
 8017a44:	2201      	movs	r2, #1
 8017a46:	6939      	ldr	r1, [r7, #16]
 8017a48:	f7f9 ff56 	bl	80118f8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8017a4c:	6a3b      	ldr	r3, [r7, #32]
 8017a4e:	68db      	ldr	r3, [r3, #12]
 8017a50:	685b      	ldr	r3, [r3, #4]
 8017a52:	4618      	mov	r0, r3
 8017a54:	f7f8 f977 	bl	800fd46 <lwip_htonl>
 8017a58:	4603      	mov	r3, r0
 8017a5a:	3301      	adds	r3, #1
 8017a5c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017a62:	68fb      	ldr	r3, [r7, #12]
 8017a64:	1ad3      	subs	r3, r2, r3
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	da02      	bge.n	8017a70 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	68fa      	ldr	r2, [r7, #12]
 8017a6e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017a70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017a74:	2200      	movs	r2, #0
 8017a76:	69b9      	ldr	r1, [r7, #24]
 8017a78:	6878      	ldr	r0, [r7, #4]
 8017a7a:	f7ff fdef 	bl	801765c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017a7e:	687a      	ldr	r2, [r7, #4]
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	3304      	adds	r3, #4
 8017a84:	69b9      	ldr	r1, [r7, #24]
 8017a86:	6878      	ldr	r0, [r7, #4]
 8017a88:	f7ff fe26 	bl	80176d8 <tcp_output_control_segment>
 8017a8c:	4603      	mov	r3, r0
 8017a8e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017a90:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8017a94:	4618      	mov	r0, r3
 8017a96:	372c      	adds	r7, #44	; 0x2c
 8017a98:	46bd      	mov	sp, r7
 8017a9a:	bd90      	pop	{r4, r7, pc}
 8017a9c:	0801f984 	.word	0x0801f984
 8017aa0:	0802017c 	.word	0x0802017c
 8017aa4:	0801f9d8 	.word	0x0801f9d8

08017aa8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8017aa8:	b580      	push	{r7, lr}
 8017aaa:	b082      	sub	sp, #8
 8017aac:	af00      	add	r7, sp, #0
 8017aae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8017ab0:	f7fa f8a2 	bl	8011bf8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8017ab4:	4b0a      	ldr	r3, [pc, #40]	; (8017ae0 <tcpip_tcp_timer+0x38>)
 8017ab6:	681b      	ldr	r3, [r3, #0]
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	d103      	bne.n	8017ac4 <tcpip_tcp_timer+0x1c>
 8017abc:	4b09      	ldr	r3, [pc, #36]	; (8017ae4 <tcpip_tcp_timer+0x3c>)
 8017abe:	681b      	ldr	r3, [r3, #0]
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	d005      	beq.n	8017ad0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017ac4:	2200      	movs	r2, #0
 8017ac6:	4908      	ldr	r1, [pc, #32]	; (8017ae8 <tcpip_tcp_timer+0x40>)
 8017ac8:	20fa      	movs	r0, #250	; 0xfa
 8017aca:	f000 f8f3 	bl	8017cb4 <sys_timeout>
 8017ace:	e003      	b.n	8017ad8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8017ad0:	4b06      	ldr	r3, [pc, #24]	; (8017aec <tcpip_tcp_timer+0x44>)
 8017ad2:	2200      	movs	r2, #0
 8017ad4:	601a      	str	r2, [r3, #0]
  }
}
 8017ad6:	bf00      	nop
 8017ad8:	bf00      	nop
 8017ada:	3708      	adds	r7, #8
 8017adc:	46bd      	mov	sp, r7
 8017ade:	bd80      	pop	{r7, pc}
 8017ae0:	20007058 	.word	0x20007058
 8017ae4:	2000705c 	.word	0x2000705c
 8017ae8:	08017aa9 	.word	0x08017aa9
 8017aec:	200070a4 	.word	0x200070a4

08017af0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8017af0:	b580      	push	{r7, lr}
 8017af2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8017af4:	4b0a      	ldr	r3, [pc, #40]	; (8017b20 <tcp_timer_needed+0x30>)
 8017af6:	681b      	ldr	r3, [r3, #0]
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	d10f      	bne.n	8017b1c <tcp_timer_needed+0x2c>
 8017afc:	4b09      	ldr	r3, [pc, #36]	; (8017b24 <tcp_timer_needed+0x34>)
 8017afe:	681b      	ldr	r3, [r3, #0]
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	d103      	bne.n	8017b0c <tcp_timer_needed+0x1c>
 8017b04:	4b08      	ldr	r3, [pc, #32]	; (8017b28 <tcp_timer_needed+0x38>)
 8017b06:	681b      	ldr	r3, [r3, #0]
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	d007      	beq.n	8017b1c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8017b0c:	4b04      	ldr	r3, [pc, #16]	; (8017b20 <tcp_timer_needed+0x30>)
 8017b0e:	2201      	movs	r2, #1
 8017b10:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017b12:	2200      	movs	r2, #0
 8017b14:	4905      	ldr	r1, [pc, #20]	; (8017b2c <tcp_timer_needed+0x3c>)
 8017b16:	20fa      	movs	r0, #250	; 0xfa
 8017b18:	f000 f8cc 	bl	8017cb4 <sys_timeout>
  }
}
 8017b1c:	bf00      	nop
 8017b1e:	bd80      	pop	{r7, pc}
 8017b20:	200070a4 	.word	0x200070a4
 8017b24:	20007058 	.word	0x20007058
 8017b28:	2000705c 	.word	0x2000705c
 8017b2c:	08017aa9 	.word	0x08017aa9

08017b30 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8017b30:	b580      	push	{r7, lr}
 8017b32:	b086      	sub	sp, #24
 8017b34:	af00      	add	r7, sp, #0
 8017b36:	60f8      	str	r0, [r7, #12]
 8017b38:	60b9      	str	r1, [r7, #8]
 8017b3a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8017b3c:	2006      	movs	r0, #6
 8017b3e:	f7f8 fe0b 	bl	8010758 <memp_malloc>
 8017b42:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8017b44:	693b      	ldr	r3, [r7, #16]
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	d109      	bne.n	8017b5e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8017b4a:	693b      	ldr	r3, [r7, #16]
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	d151      	bne.n	8017bf4 <sys_timeout_abs+0xc4>
 8017b50:	4b2a      	ldr	r3, [pc, #168]	; (8017bfc <sys_timeout_abs+0xcc>)
 8017b52:	22be      	movs	r2, #190	; 0xbe
 8017b54:	492a      	ldr	r1, [pc, #168]	; (8017c00 <sys_timeout_abs+0xd0>)
 8017b56:	482b      	ldr	r0, [pc, #172]	; (8017c04 <sys_timeout_abs+0xd4>)
 8017b58:	f003 fb86 	bl	801b268 <iprintf>
    return;
 8017b5c:	e04a      	b.n	8017bf4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8017b5e:	693b      	ldr	r3, [r7, #16]
 8017b60:	2200      	movs	r2, #0
 8017b62:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8017b64:	693b      	ldr	r3, [r7, #16]
 8017b66:	68ba      	ldr	r2, [r7, #8]
 8017b68:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8017b6a:	693b      	ldr	r3, [r7, #16]
 8017b6c:	687a      	ldr	r2, [r7, #4]
 8017b6e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8017b70:	693b      	ldr	r3, [r7, #16]
 8017b72:	68fa      	ldr	r2, [r7, #12]
 8017b74:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8017b76:	4b24      	ldr	r3, [pc, #144]	; (8017c08 <sys_timeout_abs+0xd8>)
 8017b78:	681b      	ldr	r3, [r3, #0]
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	d103      	bne.n	8017b86 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8017b7e:	4a22      	ldr	r2, [pc, #136]	; (8017c08 <sys_timeout_abs+0xd8>)
 8017b80:	693b      	ldr	r3, [r7, #16]
 8017b82:	6013      	str	r3, [r2, #0]
    return;
 8017b84:	e037      	b.n	8017bf6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8017b86:	693b      	ldr	r3, [r7, #16]
 8017b88:	685a      	ldr	r2, [r3, #4]
 8017b8a:	4b1f      	ldr	r3, [pc, #124]	; (8017c08 <sys_timeout_abs+0xd8>)
 8017b8c:	681b      	ldr	r3, [r3, #0]
 8017b8e:	685b      	ldr	r3, [r3, #4]
 8017b90:	1ad3      	subs	r3, r2, r3
 8017b92:	0fdb      	lsrs	r3, r3, #31
 8017b94:	f003 0301 	and.w	r3, r3, #1
 8017b98:	b2db      	uxtb	r3, r3
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	d007      	beq.n	8017bae <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8017b9e:	4b1a      	ldr	r3, [pc, #104]	; (8017c08 <sys_timeout_abs+0xd8>)
 8017ba0:	681a      	ldr	r2, [r3, #0]
 8017ba2:	693b      	ldr	r3, [r7, #16]
 8017ba4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8017ba6:	4a18      	ldr	r2, [pc, #96]	; (8017c08 <sys_timeout_abs+0xd8>)
 8017ba8:	693b      	ldr	r3, [r7, #16]
 8017baa:	6013      	str	r3, [r2, #0]
 8017bac:	e023      	b.n	8017bf6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8017bae:	4b16      	ldr	r3, [pc, #88]	; (8017c08 <sys_timeout_abs+0xd8>)
 8017bb0:	681b      	ldr	r3, [r3, #0]
 8017bb2:	617b      	str	r3, [r7, #20]
 8017bb4:	e01a      	b.n	8017bec <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8017bb6:	697b      	ldr	r3, [r7, #20]
 8017bb8:	681b      	ldr	r3, [r3, #0]
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d00b      	beq.n	8017bd6 <sys_timeout_abs+0xa6>
 8017bbe:	693b      	ldr	r3, [r7, #16]
 8017bc0:	685a      	ldr	r2, [r3, #4]
 8017bc2:	697b      	ldr	r3, [r7, #20]
 8017bc4:	681b      	ldr	r3, [r3, #0]
 8017bc6:	685b      	ldr	r3, [r3, #4]
 8017bc8:	1ad3      	subs	r3, r2, r3
 8017bca:	0fdb      	lsrs	r3, r3, #31
 8017bcc:	f003 0301 	and.w	r3, r3, #1
 8017bd0:	b2db      	uxtb	r3, r3
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	d007      	beq.n	8017be6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8017bd6:	697b      	ldr	r3, [r7, #20]
 8017bd8:	681a      	ldr	r2, [r3, #0]
 8017bda:	693b      	ldr	r3, [r7, #16]
 8017bdc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8017bde:	697b      	ldr	r3, [r7, #20]
 8017be0:	693a      	ldr	r2, [r7, #16]
 8017be2:	601a      	str	r2, [r3, #0]
        break;
 8017be4:	e007      	b.n	8017bf6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8017be6:	697b      	ldr	r3, [r7, #20]
 8017be8:	681b      	ldr	r3, [r3, #0]
 8017bea:	617b      	str	r3, [r7, #20]
 8017bec:	697b      	ldr	r3, [r7, #20]
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d1e1      	bne.n	8017bb6 <sys_timeout_abs+0x86>
 8017bf2:	e000      	b.n	8017bf6 <sys_timeout_abs+0xc6>
    return;
 8017bf4:	bf00      	nop
      }
    }
  }
}
 8017bf6:	3718      	adds	r7, #24
 8017bf8:	46bd      	mov	sp, r7
 8017bfa:	bd80      	pop	{r7, pc}
 8017bfc:	080201a0 	.word	0x080201a0
 8017c00:	080201d4 	.word	0x080201d4
 8017c04:	08020214 	.word	0x08020214
 8017c08:	2000709c 	.word	0x2000709c

08017c0c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8017c0c:	b580      	push	{r7, lr}
 8017c0e:	b086      	sub	sp, #24
 8017c10:	af00      	add	r7, sp, #0
 8017c12:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8017c18:	697b      	ldr	r3, [r7, #20]
 8017c1a:	685b      	ldr	r3, [r3, #4]
 8017c1c:	4798      	blx	r3

  now = sys_now();
 8017c1e:	f7f7 fe35 	bl	800f88c <sys_now>
 8017c22:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8017c24:	697b      	ldr	r3, [r7, #20]
 8017c26:	681a      	ldr	r2, [r3, #0]
 8017c28:	4b0f      	ldr	r3, [pc, #60]	; (8017c68 <lwip_cyclic_timer+0x5c>)
 8017c2a:	681b      	ldr	r3, [r3, #0]
 8017c2c:	4413      	add	r3, r2
 8017c2e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8017c30:	68fa      	ldr	r2, [r7, #12]
 8017c32:	693b      	ldr	r3, [r7, #16]
 8017c34:	1ad3      	subs	r3, r2, r3
 8017c36:	0fdb      	lsrs	r3, r3, #31
 8017c38:	f003 0301 	and.w	r3, r3, #1
 8017c3c:	b2db      	uxtb	r3, r3
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	d009      	beq.n	8017c56 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8017c42:	697b      	ldr	r3, [r7, #20]
 8017c44:	681a      	ldr	r2, [r3, #0]
 8017c46:	693b      	ldr	r3, [r7, #16]
 8017c48:	4413      	add	r3, r2
 8017c4a:	687a      	ldr	r2, [r7, #4]
 8017c4c:	4907      	ldr	r1, [pc, #28]	; (8017c6c <lwip_cyclic_timer+0x60>)
 8017c4e:	4618      	mov	r0, r3
 8017c50:	f7ff ff6e 	bl	8017b30 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8017c54:	e004      	b.n	8017c60 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8017c56:	687a      	ldr	r2, [r7, #4]
 8017c58:	4904      	ldr	r1, [pc, #16]	; (8017c6c <lwip_cyclic_timer+0x60>)
 8017c5a:	68f8      	ldr	r0, [r7, #12]
 8017c5c:	f7ff ff68 	bl	8017b30 <sys_timeout_abs>
}
 8017c60:	bf00      	nop
 8017c62:	3718      	adds	r7, #24
 8017c64:	46bd      	mov	sp, r7
 8017c66:	bd80      	pop	{r7, pc}
 8017c68:	200070a0 	.word	0x200070a0
 8017c6c:	08017c0d 	.word	0x08017c0d

08017c70 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8017c70:	b580      	push	{r7, lr}
 8017c72:	b082      	sub	sp, #8
 8017c74:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017c76:	2301      	movs	r3, #1
 8017c78:	607b      	str	r3, [r7, #4]
 8017c7a:	e00e      	b.n	8017c9a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8017c7c:	4a0b      	ldr	r2, [pc, #44]	; (8017cac <sys_timeouts_init+0x3c>)
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	00db      	lsls	r3, r3, #3
 8017c88:	4a08      	ldr	r2, [pc, #32]	; (8017cac <sys_timeouts_init+0x3c>)
 8017c8a:	4413      	add	r3, r2
 8017c8c:	461a      	mov	r2, r3
 8017c8e:	4908      	ldr	r1, [pc, #32]	; (8017cb0 <sys_timeouts_init+0x40>)
 8017c90:	f000 f810 	bl	8017cb4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	3301      	adds	r3, #1
 8017c98:	607b      	str	r3, [r7, #4]
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	2b02      	cmp	r3, #2
 8017c9e:	d9ed      	bls.n	8017c7c <sys_timeouts_init+0xc>
  }
}
 8017ca0:	bf00      	nop
 8017ca2:	bf00      	nop
 8017ca4:	3708      	adds	r7, #8
 8017ca6:	46bd      	mov	sp, r7
 8017ca8:	bd80      	pop	{r7, pc}
 8017caa:	bf00      	nop
 8017cac:	08020dcc 	.word	0x08020dcc
 8017cb0:	08017c0d 	.word	0x08017c0d

08017cb4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8017cb4:	b580      	push	{r7, lr}
 8017cb6:	b086      	sub	sp, #24
 8017cb8:	af00      	add	r7, sp, #0
 8017cba:	60f8      	str	r0, [r7, #12]
 8017cbc:	60b9      	str	r1, [r7, #8]
 8017cbe:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8017cc0:	68fb      	ldr	r3, [r7, #12]
 8017cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017cc6:	d306      	bcc.n	8017cd6 <sys_timeout+0x22>
 8017cc8:	4b0a      	ldr	r3, [pc, #40]	; (8017cf4 <sys_timeout+0x40>)
 8017cca:	f240 1229 	movw	r2, #297	; 0x129
 8017cce:	490a      	ldr	r1, [pc, #40]	; (8017cf8 <sys_timeout+0x44>)
 8017cd0:	480a      	ldr	r0, [pc, #40]	; (8017cfc <sys_timeout+0x48>)
 8017cd2:	f003 fac9 	bl	801b268 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8017cd6:	f7f7 fdd9 	bl	800f88c <sys_now>
 8017cda:	4602      	mov	r2, r0
 8017cdc:	68fb      	ldr	r3, [r7, #12]
 8017cde:	4413      	add	r3, r2
 8017ce0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8017ce2:	687a      	ldr	r2, [r7, #4]
 8017ce4:	68b9      	ldr	r1, [r7, #8]
 8017ce6:	6978      	ldr	r0, [r7, #20]
 8017ce8:	f7ff ff22 	bl	8017b30 <sys_timeout_abs>
#endif
}
 8017cec:	bf00      	nop
 8017cee:	3718      	adds	r7, #24
 8017cf0:	46bd      	mov	sp, r7
 8017cf2:	bd80      	pop	{r7, pc}
 8017cf4:	080201a0 	.word	0x080201a0
 8017cf8:	0802023c 	.word	0x0802023c
 8017cfc:	08020214 	.word	0x08020214

08017d00 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8017d00:	b580      	push	{r7, lr}
 8017d02:	b084      	sub	sp, #16
 8017d04:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8017d06:	f7f7 fdc1 	bl	800f88c <sys_now>
 8017d0a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8017d0c:	4b1a      	ldr	r3, [pc, #104]	; (8017d78 <sys_check_timeouts+0x78>)
 8017d0e:	781b      	ldrb	r3, [r3, #0]
 8017d10:	b2db      	uxtb	r3, r3
 8017d12:	2b00      	cmp	r3, #0
 8017d14:	d001      	beq.n	8017d1a <sys_check_timeouts+0x1a>
 8017d16:	f7f9 f8cb 	bl	8010eb0 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8017d1a:	4b18      	ldr	r3, [pc, #96]	; (8017d7c <sys_check_timeouts+0x7c>)
 8017d1c:	681b      	ldr	r3, [r3, #0]
 8017d1e:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8017d20:	68bb      	ldr	r3, [r7, #8]
 8017d22:	2b00      	cmp	r3, #0
 8017d24:	d022      	beq.n	8017d6c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8017d26:	68bb      	ldr	r3, [r7, #8]
 8017d28:	685b      	ldr	r3, [r3, #4]
 8017d2a:	68fa      	ldr	r2, [r7, #12]
 8017d2c:	1ad3      	subs	r3, r2, r3
 8017d2e:	0fdb      	lsrs	r3, r3, #31
 8017d30:	f003 0301 	and.w	r3, r3, #1
 8017d34:	b2db      	uxtb	r3, r3
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	d11a      	bne.n	8017d70 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8017d3a:	68bb      	ldr	r3, [r7, #8]
 8017d3c:	681b      	ldr	r3, [r3, #0]
 8017d3e:	4a0f      	ldr	r2, [pc, #60]	; (8017d7c <sys_check_timeouts+0x7c>)
 8017d40:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8017d42:	68bb      	ldr	r3, [r7, #8]
 8017d44:	689b      	ldr	r3, [r3, #8]
 8017d46:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8017d48:	68bb      	ldr	r3, [r7, #8]
 8017d4a:	68db      	ldr	r3, [r3, #12]
 8017d4c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8017d4e:	68bb      	ldr	r3, [r7, #8]
 8017d50:	685b      	ldr	r3, [r3, #4]
 8017d52:	4a0b      	ldr	r2, [pc, #44]	; (8017d80 <sys_check_timeouts+0x80>)
 8017d54:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8017d56:	68b9      	ldr	r1, [r7, #8]
 8017d58:	2006      	movs	r0, #6
 8017d5a:	f7f8 fd6d 	bl	8010838 <memp_free>
    if (handler != NULL) {
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d0d3      	beq.n	8017d0c <sys_check_timeouts+0xc>
      handler(arg);
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	6838      	ldr	r0, [r7, #0]
 8017d68:	4798      	blx	r3
  do {
 8017d6a:	e7cf      	b.n	8017d0c <sys_check_timeouts+0xc>
      return;
 8017d6c:	bf00      	nop
 8017d6e:	e000      	b.n	8017d72 <sys_check_timeouts+0x72>
      return;
 8017d70:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8017d72:	3710      	adds	r7, #16
 8017d74:	46bd      	mov	sp, r7
 8017d76:	bd80      	pop	{r7, pc}
 8017d78:	20007049 	.word	0x20007049
 8017d7c:	2000709c 	.word	0x2000709c
 8017d80:	200070a0 	.word	0x200070a0

08017d84 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8017d84:	b580      	push	{r7, lr}
 8017d86:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8017d88:	f002 fd32 	bl	801a7f0 <rand>
 8017d8c:	4603      	mov	r3, r0
 8017d8e:	b29b      	uxth	r3, r3
 8017d90:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8017d94:	b29b      	uxth	r3, r3
 8017d96:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8017d9a:	b29a      	uxth	r2, r3
 8017d9c:	4b01      	ldr	r3, [pc, #4]	; (8017da4 <udp_init+0x20>)
 8017d9e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8017da0:	bf00      	nop
 8017da2:	bd80      	pop	{r7, pc}
 8017da4:	2000005c 	.word	0x2000005c

08017da8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8017da8:	b580      	push	{r7, lr}
 8017daa:	b084      	sub	sp, #16
 8017dac:	af00      	add	r7, sp, #0
 8017dae:	60f8      	str	r0, [r7, #12]
 8017db0:	60b9      	str	r1, [r7, #8]
 8017db2:	4613      	mov	r3, r2
 8017db4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8017db6:	68fb      	ldr	r3, [r7, #12]
 8017db8:	2b00      	cmp	r3, #0
 8017dba:	d105      	bne.n	8017dc8 <udp_input_local_match+0x20>
 8017dbc:	4b27      	ldr	r3, [pc, #156]	; (8017e5c <udp_input_local_match+0xb4>)
 8017dbe:	2287      	movs	r2, #135	; 0x87
 8017dc0:	4927      	ldr	r1, [pc, #156]	; (8017e60 <udp_input_local_match+0xb8>)
 8017dc2:	4828      	ldr	r0, [pc, #160]	; (8017e64 <udp_input_local_match+0xbc>)
 8017dc4:	f003 fa50 	bl	801b268 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8017dc8:	68bb      	ldr	r3, [r7, #8]
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	d105      	bne.n	8017dda <udp_input_local_match+0x32>
 8017dce:	4b23      	ldr	r3, [pc, #140]	; (8017e5c <udp_input_local_match+0xb4>)
 8017dd0:	2288      	movs	r2, #136	; 0x88
 8017dd2:	4925      	ldr	r1, [pc, #148]	; (8017e68 <udp_input_local_match+0xc0>)
 8017dd4:	4823      	ldr	r0, [pc, #140]	; (8017e64 <udp_input_local_match+0xbc>)
 8017dd6:	f003 fa47 	bl	801b268 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017dda:	68fb      	ldr	r3, [r7, #12]
 8017ddc:	7a1b      	ldrb	r3, [r3, #8]
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	d00b      	beq.n	8017dfa <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017de2:	68fb      	ldr	r3, [r7, #12]
 8017de4:	7a1a      	ldrb	r2, [r3, #8]
 8017de6:	4b21      	ldr	r3, [pc, #132]	; (8017e6c <udp_input_local_match+0xc4>)
 8017de8:	685b      	ldr	r3, [r3, #4]
 8017dea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017dee:	3301      	adds	r3, #1
 8017df0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017df2:	429a      	cmp	r2, r3
 8017df4:	d001      	beq.n	8017dfa <udp_input_local_match+0x52>
    return 0;
 8017df6:	2300      	movs	r3, #0
 8017df8:	e02b      	b.n	8017e52 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8017dfa:	79fb      	ldrb	r3, [r7, #7]
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	d018      	beq.n	8017e32 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017e00:	68fb      	ldr	r3, [r7, #12]
 8017e02:	2b00      	cmp	r3, #0
 8017e04:	d013      	beq.n	8017e2e <udp_input_local_match+0x86>
 8017e06:	68fb      	ldr	r3, [r7, #12]
 8017e08:	681b      	ldr	r3, [r3, #0]
 8017e0a:	2b00      	cmp	r3, #0
 8017e0c:	d00f      	beq.n	8017e2e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017e0e:	4b17      	ldr	r3, [pc, #92]	; (8017e6c <udp_input_local_match+0xc4>)
 8017e10:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e16:	d00a      	beq.n	8017e2e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8017e18:	68fb      	ldr	r3, [r7, #12]
 8017e1a:	681a      	ldr	r2, [r3, #0]
 8017e1c:	4b13      	ldr	r3, [pc, #76]	; (8017e6c <udp_input_local_match+0xc4>)
 8017e1e:	695b      	ldr	r3, [r3, #20]
 8017e20:	405a      	eors	r2, r3
 8017e22:	68bb      	ldr	r3, [r7, #8]
 8017e24:	3308      	adds	r3, #8
 8017e26:	681b      	ldr	r3, [r3, #0]
 8017e28:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	d110      	bne.n	8017e50 <udp_input_local_match+0xa8>
          return 1;
 8017e2e:	2301      	movs	r3, #1
 8017e30:	e00f      	b.n	8017e52 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017e32:	68fb      	ldr	r3, [r7, #12]
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	d009      	beq.n	8017e4c <udp_input_local_match+0xa4>
 8017e38:	68fb      	ldr	r3, [r7, #12]
 8017e3a:	681b      	ldr	r3, [r3, #0]
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d005      	beq.n	8017e4c <udp_input_local_match+0xa4>
 8017e40:	68fb      	ldr	r3, [r7, #12]
 8017e42:	681a      	ldr	r2, [r3, #0]
 8017e44:	4b09      	ldr	r3, [pc, #36]	; (8017e6c <udp_input_local_match+0xc4>)
 8017e46:	695b      	ldr	r3, [r3, #20]
 8017e48:	429a      	cmp	r2, r3
 8017e4a:	d101      	bne.n	8017e50 <udp_input_local_match+0xa8>
        return 1;
 8017e4c:	2301      	movs	r3, #1
 8017e4e:	e000      	b.n	8017e52 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8017e50:	2300      	movs	r3, #0
}
 8017e52:	4618      	mov	r0, r3
 8017e54:	3710      	adds	r7, #16
 8017e56:	46bd      	mov	sp, r7
 8017e58:	bd80      	pop	{r7, pc}
 8017e5a:	bf00      	nop
 8017e5c:	08020288 	.word	0x08020288
 8017e60:	080202b8 	.word	0x080202b8
 8017e64:	080202dc 	.word	0x080202dc
 8017e68:	08020304 	.word	0x08020304
 8017e6c:	20000770 	.word	0x20000770

08017e70 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8017e70:	b590      	push	{r4, r7, lr}
 8017e72:	b08d      	sub	sp, #52	; 0x34
 8017e74:	af02      	add	r7, sp, #8
 8017e76:	6078      	str	r0, [r7, #4]
 8017e78:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8017e7a:	2300      	movs	r3, #0
 8017e7c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	d105      	bne.n	8017e90 <udp_input+0x20>
 8017e84:	4b7c      	ldr	r3, [pc, #496]	; (8018078 <udp_input+0x208>)
 8017e86:	22cf      	movs	r2, #207	; 0xcf
 8017e88:	497c      	ldr	r1, [pc, #496]	; (801807c <udp_input+0x20c>)
 8017e8a:	487d      	ldr	r0, [pc, #500]	; (8018080 <udp_input+0x210>)
 8017e8c:	f003 f9ec 	bl	801b268 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8017e90:	683b      	ldr	r3, [r7, #0]
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	d105      	bne.n	8017ea2 <udp_input+0x32>
 8017e96:	4b78      	ldr	r3, [pc, #480]	; (8018078 <udp_input+0x208>)
 8017e98:	22d0      	movs	r2, #208	; 0xd0
 8017e9a:	497a      	ldr	r1, [pc, #488]	; (8018084 <udp_input+0x214>)
 8017e9c:	4878      	ldr	r0, [pc, #480]	; (8018080 <udp_input+0x210>)
 8017e9e:	f003 f9e3 	bl	801b268 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8017ea2:	687b      	ldr	r3, [r7, #4]
 8017ea4:	895b      	ldrh	r3, [r3, #10]
 8017ea6:	2b07      	cmp	r3, #7
 8017ea8:	d803      	bhi.n	8017eb2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8017eaa:	6878      	ldr	r0, [r7, #4]
 8017eac:	f7f9 fb3a 	bl	8011524 <pbuf_free>
    goto end;
 8017eb0:	e0de      	b.n	8018070 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	685b      	ldr	r3, [r3, #4]
 8017eb6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8017eb8:	4b73      	ldr	r3, [pc, #460]	; (8018088 <udp_input+0x218>)
 8017eba:	695b      	ldr	r3, [r3, #20]
 8017ebc:	4a72      	ldr	r2, [pc, #456]	; (8018088 <udp_input+0x218>)
 8017ebe:	6812      	ldr	r2, [r2, #0]
 8017ec0:	4611      	mov	r1, r2
 8017ec2:	4618      	mov	r0, r3
 8017ec4:	f001 fcae 	bl	8019824 <ip4_addr_isbroadcast_u32>
 8017ec8:	4603      	mov	r3, r0
 8017eca:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8017ecc:	697b      	ldr	r3, [r7, #20]
 8017ece:	881b      	ldrh	r3, [r3, #0]
 8017ed0:	b29b      	uxth	r3, r3
 8017ed2:	4618      	mov	r0, r3
 8017ed4:	f7f7 ff22 	bl	800fd1c <lwip_htons>
 8017ed8:	4603      	mov	r3, r0
 8017eda:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8017edc:	697b      	ldr	r3, [r7, #20]
 8017ede:	885b      	ldrh	r3, [r3, #2]
 8017ee0:	b29b      	uxth	r3, r3
 8017ee2:	4618      	mov	r0, r3
 8017ee4:	f7f7 ff1a 	bl	800fd1c <lwip_htons>
 8017ee8:	4603      	mov	r3, r0
 8017eea:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8017eec:	2300      	movs	r3, #0
 8017eee:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8017ef0:	2300      	movs	r3, #0
 8017ef2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8017ef4:	2300      	movs	r3, #0
 8017ef6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017ef8:	4b64      	ldr	r3, [pc, #400]	; (801808c <udp_input+0x21c>)
 8017efa:	681b      	ldr	r3, [r3, #0]
 8017efc:	627b      	str	r3, [r7, #36]	; 0x24
 8017efe:	e054      	b.n	8017faa <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8017f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f02:	8a5b      	ldrh	r3, [r3, #18]
 8017f04:	89fa      	ldrh	r2, [r7, #14]
 8017f06:	429a      	cmp	r2, r3
 8017f08:	d14a      	bne.n	8017fa0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8017f0a:	7cfb      	ldrb	r3, [r7, #19]
 8017f0c:	461a      	mov	r2, r3
 8017f0e:	6839      	ldr	r1, [r7, #0]
 8017f10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017f12:	f7ff ff49 	bl	8017da8 <udp_input_local_match>
 8017f16:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d041      	beq.n	8017fa0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8017f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f1e:	7c1b      	ldrb	r3, [r3, #16]
 8017f20:	f003 0304 	and.w	r3, r3, #4
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	d11d      	bne.n	8017f64 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8017f28:	69fb      	ldr	r3, [r7, #28]
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	d102      	bne.n	8017f34 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8017f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f30:	61fb      	str	r3, [r7, #28]
 8017f32:	e017      	b.n	8017f64 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8017f34:	7cfb      	ldrb	r3, [r7, #19]
 8017f36:	2b00      	cmp	r3, #0
 8017f38:	d014      	beq.n	8017f64 <udp_input+0xf4>
 8017f3a:	4b53      	ldr	r3, [pc, #332]	; (8018088 <udp_input+0x218>)
 8017f3c:	695b      	ldr	r3, [r3, #20]
 8017f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f42:	d10f      	bne.n	8017f64 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8017f44:	69fb      	ldr	r3, [r7, #28]
 8017f46:	681a      	ldr	r2, [r3, #0]
 8017f48:	683b      	ldr	r3, [r7, #0]
 8017f4a:	3304      	adds	r3, #4
 8017f4c:	681b      	ldr	r3, [r3, #0]
 8017f4e:	429a      	cmp	r2, r3
 8017f50:	d008      	beq.n	8017f64 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8017f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f54:	681a      	ldr	r2, [r3, #0]
 8017f56:	683b      	ldr	r3, [r7, #0]
 8017f58:	3304      	adds	r3, #4
 8017f5a:	681b      	ldr	r3, [r3, #0]
 8017f5c:	429a      	cmp	r2, r3
 8017f5e:	d101      	bne.n	8017f64 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8017f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f62:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8017f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f66:	8a9b      	ldrh	r3, [r3, #20]
 8017f68:	8a3a      	ldrh	r2, [r7, #16]
 8017f6a:	429a      	cmp	r2, r3
 8017f6c:	d118      	bne.n	8017fa0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f70:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8017f72:	2b00      	cmp	r3, #0
 8017f74:	d005      	beq.n	8017f82 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8017f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f78:	685a      	ldr	r2, [r3, #4]
 8017f7a:	4b43      	ldr	r3, [pc, #268]	; (8018088 <udp_input+0x218>)
 8017f7c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017f7e:	429a      	cmp	r2, r3
 8017f80:	d10e      	bne.n	8017fa0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8017f82:	6a3b      	ldr	r3, [r7, #32]
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	d014      	beq.n	8017fb2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8017f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f8a:	68da      	ldr	r2, [r3, #12]
 8017f8c:	6a3b      	ldr	r3, [r7, #32]
 8017f8e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8017f90:	4b3e      	ldr	r3, [pc, #248]	; (801808c <udp_input+0x21c>)
 8017f92:	681a      	ldr	r2, [r3, #0]
 8017f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f96:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8017f98:	4a3c      	ldr	r2, [pc, #240]	; (801808c <udp_input+0x21c>)
 8017f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f9c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8017f9e:	e008      	b.n	8017fb2 <udp_input+0x142>
      }
    }

    prev = pcb;
 8017fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fa2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fa6:	68db      	ldr	r3, [r3, #12]
 8017fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8017faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fac:	2b00      	cmp	r3, #0
 8017fae:	d1a7      	bne.n	8017f00 <udp_input+0x90>
 8017fb0:	e000      	b.n	8017fb4 <udp_input+0x144>
        break;
 8017fb2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8017fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fb6:	2b00      	cmp	r3, #0
 8017fb8:	d101      	bne.n	8017fbe <udp_input+0x14e>
    pcb = uncon_pcb;
 8017fba:	69fb      	ldr	r3, [r7, #28]
 8017fbc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8017fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	d002      	beq.n	8017fca <udp_input+0x15a>
    for_us = 1;
 8017fc4:	2301      	movs	r3, #1
 8017fc6:	76fb      	strb	r3, [r7, #27]
 8017fc8:	e00a      	b.n	8017fe0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8017fca:	683b      	ldr	r3, [r7, #0]
 8017fcc:	3304      	adds	r3, #4
 8017fce:	681a      	ldr	r2, [r3, #0]
 8017fd0:	4b2d      	ldr	r3, [pc, #180]	; (8018088 <udp_input+0x218>)
 8017fd2:	695b      	ldr	r3, [r3, #20]
 8017fd4:	429a      	cmp	r2, r3
 8017fd6:	bf0c      	ite	eq
 8017fd8:	2301      	moveq	r3, #1
 8017fda:	2300      	movne	r3, #0
 8017fdc:	b2db      	uxtb	r3, r3
 8017fde:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8017fe0:	7efb      	ldrb	r3, [r7, #27]
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	d041      	beq.n	801806a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8017fe6:	2108      	movs	r1, #8
 8017fe8:	6878      	ldr	r0, [r7, #4]
 8017fea:	f7f9 fa15 	bl	8011418 <pbuf_remove_header>
 8017fee:	4603      	mov	r3, r0
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	d00a      	beq.n	801800a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8017ff4:	4b20      	ldr	r3, [pc, #128]	; (8018078 <udp_input+0x208>)
 8017ff6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8017ffa:	4925      	ldr	r1, [pc, #148]	; (8018090 <udp_input+0x220>)
 8017ffc:	4820      	ldr	r0, [pc, #128]	; (8018080 <udp_input+0x210>)
 8017ffe:	f003 f933 	bl	801b268 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8018002:	6878      	ldr	r0, [r7, #4]
 8018004:	f7f9 fa8e 	bl	8011524 <pbuf_free>
      goto end;
 8018008:	e032      	b.n	8018070 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801800a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801800c:	2b00      	cmp	r3, #0
 801800e:	d012      	beq.n	8018036 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8018010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018012:	699b      	ldr	r3, [r3, #24]
 8018014:	2b00      	cmp	r3, #0
 8018016:	d00a      	beq.n	801802e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8018018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801801a:	699c      	ldr	r4, [r3, #24]
 801801c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801801e:	69d8      	ldr	r0, [r3, #28]
 8018020:	8a3b      	ldrh	r3, [r7, #16]
 8018022:	9300      	str	r3, [sp, #0]
 8018024:	4b1b      	ldr	r3, [pc, #108]	; (8018094 <udp_input+0x224>)
 8018026:	687a      	ldr	r2, [r7, #4]
 8018028:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801802a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801802c:	e021      	b.n	8018072 <udp_input+0x202>
        pbuf_free(p);
 801802e:	6878      	ldr	r0, [r7, #4]
 8018030:	f7f9 fa78 	bl	8011524 <pbuf_free>
        goto end;
 8018034:	e01c      	b.n	8018070 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8018036:	7cfb      	ldrb	r3, [r7, #19]
 8018038:	2b00      	cmp	r3, #0
 801803a:	d112      	bne.n	8018062 <udp_input+0x1f2>
 801803c:	4b12      	ldr	r3, [pc, #72]	; (8018088 <udp_input+0x218>)
 801803e:	695b      	ldr	r3, [r3, #20]
 8018040:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018044:	2be0      	cmp	r3, #224	; 0xe0
 8018046:	d00c      	beq.n	8018062 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8018048:	4b0f      	ldr	r3, [pc, #60]	; (8018088 <udp_input+0x218>)
 801804a:	899b      	ldrh	r3, [r3, #12]
 801804c:	3308      	adds	r3, #8
 801804e:	b29b      	uxth	r3, r3
 8018050:	b21b      	sxth	r3, r3
 8018052:	4619      	mov	r1, r3
 8018054:	6878      	ldr	r0, [r7, #4]
 8018056:	f7f9 fa52 	bl	80114fe <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801805a:	2103      	movs	r1, #3
 801805c:	6878      	ldr	r0, [r7, #4]
 801805e:	f001 f8b7 	bl	80191d0 <icmp_dest_unreach>
      pbuf_free(p);
 8018062:	6878      	ldr	r0, [r7, #4]
 8018064:	f7f9 fa5e 	bl	8011524 <pbuf_free>
  return;
 8018068:	e003      	b.n	8018072 <udp_input+0x202>
    pbuf_free(p);
 801806a:	6878      	ldr	r0, [r7, #4]
 801806c:	f7f9 fa5a 	bl	8011524 <pbuf_free>
  return;
 8018070:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8018072:	372c      	adds	r7, #44	; 0x2c
 8018074:	46bd      	mov	sp, r7
 8018076:	bd90      	pop	{r4, r7, pc}
 8018078:	08020288 	.word	0x08020288
 801807c:	0802032c 	.word	0x0802032c
 8018080:	080202dc 	.word	0x080202dc
 8018084:	08020344 	.word	0x08020344
 8018088:	20000770 	.word	0x20000770
 801808c:	200070a8 	.word	0x200070a8
 8018090:	08020360 	.word	0x08020360
 8018094:	20000780 	.word	0x20000780

08018098 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018098:	b480      	push	{r7}
 801809a:	b085      	sub	sp, #20
 801809c:	af00      	add	r7, sp, #0
 801809e:	6078      	str	r0, [r7, #4]
 80180a0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	d01e      	beq.n	80180e6 <udp_netif_ip_addr_changed+0x4e>
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	681b      	ldr	r3, [r3, #0]
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	d01a      	beq.n	80180e6 <udp_netif_ip_addr_changed+0x4e>
 80180b0:	683b      	ldr	r3, [r7, #0]
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	d017      	beq.n	80180e6 <udp_netif_ip_addr_changed+0x4e>
 80180b6:	683b      	ldr	r3, [r7, #0]
 80180b8:	681b      	ldr	r3, [r3, #0]
 80180ba:	2b00      	cmp	r3, #0
 80180bc:	d013      	beq.n	80180e6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80180be:	4b0d      	ldr	r3, [pc, #52]	; (80180f4 <udp_netif_ip_addr_changed+0x5c>)
 80180c0:	681b      	ldr	r3, [r3, #0]
 80180c2:	60fb      	str	r3, [r7, #12]
 80180c4:	e00c      	b.n	80180e0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80180c6:	68fb      	ldr	r3, [r7, #12]
 80180c8:	681a      	ldr	r2, [r3, #0]
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	681b      	ldr	r3, [r3, #0]
 80180ce:	429a      	cmp	r2, r3
 80180d0:	d103      	bne.n	80180da <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80180d2:	683b      	ldr	r3, [r7, #0]
 80180d4:	681a      	ldr	r2, [r3, #0]
 80180d6:	68fb      	ldr	r3, [r7, #12]
 80180d8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80180da:	68fb      	ldr	r3, [r7, #12]
 80180dc:	68db      	ldr	r3, [r3, #12]
 80180de:	60fb      	str	r3, [r7, #12]
 80180e0:	68fb      	ldr	r3, [r7, #12]
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	d1ef      	bne.n	80180c6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80180e6:	bf00      	nop
 80180e8:	3714      	adds	r7, #20
 80180ea:	46bd      	mov	sp, r7
 80180ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180f0:	4770      	bx	lr
 80180f2:	bf00      	nop
 80180f4:	200070a8 	.word	0x200070a8

080180f8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80180f8:	b580      	push	{r7, lr}
 80180fa:	b082      	sub	sp, #8
 80180fc:	af00      	add	r7, sp, #0
 80180fe:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8018100:	4915      	ldr	r1, [pc, #84]	; (8018158 <etharp_free_entry+0x60>)
 8018102:	687a      	ldr	r2, [r7, #4]
 8018104:	4613      	mov	r3, r2
 8018106:	005b      	lsls	r3, r3, #1
 8018108:	4413      	add	r3, r2
 801810a:	00db      	lsls	r3, r3, #3
 801810c:	440b      	add	r3, r1
 801810e:	681b      	ldr	r3, [r3, #0]
 8018110:	2b00      	cmp	r3, #0
 8018112:	d013      	beq.n	801813c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8018114:	4910      	ldr	r1, [pc, #64]	; (8018158 <etharp_free_entry+0x60>)
 8018116:	687a      	ldr	r2, [r7, #4]
 8018118:	4613      	mov	r3, r2
 801811a:	005b      	lsls	r3, r3, #1
 801811c:	4413      	add	r3, r2
 801811e:	00db      	lsls	r3, r3, #3
 8018120:	440b      	add	r3, r1
 8018122:	681b      	ldr	r3, [r3, #0]
 8018124:	4618      	mov	r0, r3
 8018126:	f7f9 f9fd 	bl	8011524 <pbuf_free>
    arp_table[i].q = NULL;
 801812a:	490b      	ldr	r1, [pc, #44]	; (8018158 <etharp_free_entry+0x60>)
 801812c:	687a      	ldr	r2, [r7, #4]
 801812e:	4613      	mov	r3, r2
 8018130:	005b      	lsls	r3, r3, #1
 8018132:	4413      	add	r3, r2
 8018134:	00db      	lsls	r3, r3, #3
 8018136:	440b      	add	r3, r1
 8018138:	2200      	movs	r2, #0
 801813a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801813c:	4906      	ldr	r1, [pc, #24]	; (8018158 <etharp_free_entry+0x60>)
 801813e:	687a      	ldr	r2, [r7, #4]
 8018140:	4613      	mov	r3, r2
 8018142:	005b      	lsls	r3, r3, #1
 8018144:	4413      	add	r3, r2
 8018146:	00db      	lsls	r3, r3, #3
 8018148:	440b      	add	r3, r1
 801814a:	3314      	adds	r3, #20
 801814c:	2200      	movs	r2, #0
 801814e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8018150:	bf00      	nop
 8018152:	3708      	adds	r7, #8
 8018154:	46bd      	mov	sp, r7
 8018156:	bd80      	pop	{r7, pc}
 8018158:	200070ac 	.word	0x200070ac

0801815c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801815c:	b580      	push	{r7, lr}
 801815e:	b082      	sub	sp, #8
 8018160:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018162:	2300      	movs	r3, #0
 8018164:	607b      	str	r3, [r7, #4]
 8018166:	e096      	b.n	8018296 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8018168:	494f      	ldr	r1, [pc, #316]	; (80182a8 <etharp_tmr+0x14c>)
 801816a:	687a      	ldr	r2, [r7, #4]
 801816c:	4613      	mov	r3, r2
 801816e:	005b      	lsls	r3, r3, #1
 8018170:	4413      	add	r3, r2
 8018172:	00db      	lsls	r3, r3, #3
 8018174:	440b      	add	r3, r1
 8018176:	3314      	adds	r3, #20
 8018178:	781b      	ldrb	r3, [r3, #0]
 801817a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801817c:	78fb      	ldrb	r3, [r7, #3]
 801817e:	2b00      	cmp	r3, #0
 8018180:	f000 8086 	beq.w	8018290 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8018184:	4948      	ldr	r1, [pc, #288]	; (80182a8 <etharp_tmr+0x14c>)
 8018186:	687a      	ldr	r2, [r7, #4]
 8018188:	4613      	mov	r3, r2
 801818a:	005b      	lsls	r3, r3, #1
 801818c:	4413      	add	r3, r2
 801818e:	00db      	lsls	r3, r3, #3
 8018190:	440b      	add	r3, r1
 8018192:	3312      	adds	r3, #18
 8018194:	881b      	ldrh	r3, [r3, #0]
 8018196:	3301      	adds	r3, #1
 8018198:	b298      	uxth	r0, r3
 801819a:	4943      	ldr	r1, [pc, #268]	; (80182a8 <etharp_tmr+0x14c>)
 801819c:	687a      	ldr	r2, [r7, #4]
 801819e:	4613      	mov	r3, r2
 80181a0:	005b      	lsls	r3, r3, #1
 80181a2:	4413      	add	r3, r2
 80181a4:	00db      	lsls	r3, r3, #3
 80181a6:	440b      	add	r3, r1
 80181a8:	3312      	adds	r3, #18
 80181aa:	4602      	mov	r2, r0
 80181ac:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80181ae:	493e      	ldr	r1, [pc, #248]	; (80182a8 <etharp_tmr+0x14c>)
 80181b0:	687a      	ldr	r2, [r7, #4]
 80181b2:	4613      	mov	r3, r2
 80181b4:	005b      	lsls	r3, r3, #1
 80181b6:	4413      	add	r3, r2
 80181b8:	00db      	lsls	r3, r3, #3
 80181ba:	440b      	add	r3, r1
 80181bc:	3312      	adds	r3, #18
 80181be:	881b      	ldrh	r3, [r3, #0]
 80181c0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80181c4:	d215      	bcs.n	80181f2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80181c6:	4938      	ldr	r1, [pc, #224]	; (80182a8 <etharp_tmr+0x14c>)
 80181c8:	687a      	ldr	r2, [r7, #4]
 80181ca:	4613      	mov	r3, r2
 80181cc:	005b      	lsls	r3, r3, #1
 80181ce:	4413      	add	r3, r2
 80181d0:	00db      	lsls	r3, r3, #3
 80181d2:	440b      	add	r3, r1
 80181d4:	3314      	adds	r3, #20
 80181d6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80181d8:	2b01      	cmp	r3, #1
 80181da:	d10e      	bne.n	80181fa <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80181dc:	4932      	ldr	r1, [pc, #200]	; (80182a8 <etharp_tmr+0x14c>)
 80181de:	687a      	ldr	r2, [r7, #4]
 80181e0:	4613      	mov	r3, r2
 80181e2:	005b      	lsls	r3, r3, #1
 80181e4:	4413      	add	r3, r2
 80181e6:	00db      	lsls	r3, r3, #3
 80181e8:	440b      	add	r3, r1
 80181ea:	3312      	adds	r3, #18
 80181ec:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80181ee:	2b04      	cmp	r3, #4
 80181f0:	d903      	bls.n	80181fa <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80181f2:	6878      	ldr	r0, [r7, #4]
 80181f4:	f7ff ff80 	bl	80180f8 <etharp_free_entry>
 80181f8:	e04a      	b.n	8018290 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80181fa:	492b      	ldr	r1, [pc, #172]	; (80182a8 <etharp_tmr+0x14c>)
 80181fc:	687a      	ldr	r2, [r7, #4]
 80181fe:	4613      	mov	r3, r2
 8018200:	005b      	lsls	r3, r3, #1
 8018202:	4413      	add	r3, r2
 8018204:	00db      	lsls	r3, r3, #3
 8018206:	440b      	add	r3, r1
 8018208:	3314      	adds	r3, #20
 801820a:	781b      	ldrb	r3, [r3, #0]
 801820c:	2b03      	cmp	r3, #3
 801820e:	d10a      	bne.n	8018226 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8018210:	4925      	ldr	r1, [pc, #148]	; (80182a8 <etharp_tmr+0x14c>)
 8018212:	687a      	ldr	r2, [r7, #4]
 8018214:	4613      	mov	r3, r2
 8018216:	005b      	lsls	r3, r3, #1
 8018218:	4413      	add	r3, r2
 801821a:	00db      	lsls	r3, r3, #3
 801821c:	440b      	add	r3, r1
 801821e:	3314      	adds	r3, #20
 8018220:	2204      	movs	r2, #4
 8018222:	701a      	strb	r2, [r3, #0]
 8018224:	e034      	b.n	8018290 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8018226:	4920      	ldr	r1, [pc, #128]	; (80182a8 <etharp_tmr+0x14c>)
 8018228:	687a      	ldr	r2, [r7, #4]
 801822a:	4613      	mov	r3, r2
 801822c:	005b      	lsls	r3, r3, #1
 801822e:	4413      	add	r3, r2
 8018230:	00db      	lsls	r3, r3, #3
 8018232:	440b      	add	r3, r1
 8018234:	3314      	adds	r3, #20
 8018236:	781b      	ldrb	r3, [r3, #0]
 8018238:	2b04      	cmp	r3, #4
 801823a:	d10a      	bne.n	8018252 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801823c:	491a      	ldr	r1, [pc, #104]	; (80182a8 <etharp_tmr+0x14c>)
 801823e:	687a      	ldr	r2, [r7, #4]
 8018240:	4613      	mov	r3, r2
 8018242:	005b      	lsls	r3, r3, #1
 8018244:	4413      	add	r3, r2
 8018246:	00db      	lsls	r3, r3, #3
 8018248:	440b      	add	r3, r1
 801824a:	3314      	adds	r3, #20
 801824c:	2202      	movs	r2, #2
 801824e:	701a      	strb	r2, [r3, #0]
 8018250:	e01e      	b.n	8018290 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018252:	4915      	ldr	r1, [pc, #84]	; (80182a8 <etharp_tmr+0x14c>)
 8018254:	687a      	ldr	r2, [r7, #4]
 8018256:	4613      	mov	r3, r2
 8018258:	005b      	lsls	r3, r3, #1
 801825a:	4413      	add	r3, r2
 801825c:	00db      	lsls	r3, r3, #3
 801825e:	440b      	add	r3, r1
 8018260:	3314      	adds	r3, #20
 8018262:	781b      	ldrb	r3, [r3, #0]
 8018264:	2b01      	cmp	r3, #1
 8018266:	d113      	bne.n	8018290 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8018268:	490f      	ldr	r1, [pc, #60]	; (80182a8 <etharp_tmr+0x14c>)
 801826a:	687a      	ldr	r2, [r7, #4]
 801826c:	4613      	mov	r3, r2
 801826e:	005b      	lsls	r3, r3, #1
 8018270:	4413      	add	r3, r2
 8018272:	00db      	lsls	r3, r3, #3
 8018274:	440b      	add	r3, r1
 8018276:	3308      	adds	r3, #8
 8018278:	6818      	ldr	r0, [r3, #0]
 801827a:	687a      	ldr	r2, [r7, #4]
 801827c:	4613      	mov	r3, r2
 801827e:	005b      	lsls	r3, r3, #1
 8018280:	4413      	add	r3, r2
 8018282:	00db      	lsls	r3, r3, #3
 8018284:	4a08      	ldr	r2, [pc, #32]	; (80182a8 <etharp_tmr+0x14c>)
 8018286:	4413      	add	r3, r2
 8018288:	3304      	adds	r3, #4
 801828a:	4619      	mov	r1, r3
 801828c:	f000 fe6e 	bl	8018f6c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018290:	687b      	ldr	r3, [r7, #4]
 8018292:	3301      	adds	r3, #1
 8018294:	607b      	str	r3, [r7, #4]
 8018296:	687b      	ldr	r3, [r7, #4]
 8018298:	2b09      	cmp	r3, #9
 801829a:	f77f af65 	ble.w	8018168 <etharp_tmr+0xc>
      }
    }
  }
}
 801829e:	bf00      	nop
 80182a0:	bf00      	nop
 80182a2:	3708      	adds	r7, #8
 80182a4:	46bd      	mov	sp, r7
 80182a6:	bd80      	pop	{r7, pc}
 80182a8:	200070ac 	.word	0x200070ac

080182ac <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80182ac:	b580      	push	{r7, lr}
 80182ae:	b08a      	sub	sp, #40	; 0x28
 80182b0:	af00      	add	r7, sp, #0
 80182b2:	60f8      	str	r0, [r7, #12]
 80182b4:	460b      	mov	r3, r1
 80182b6:	607a      	str	r2, [r7, #4]
 80182b8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80182ba:	230a      	movs	r3, #10
 80182bc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80182be:	230a      	movs	r3, #10
 80182c0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80182c2:	230a      	movs	r3, #10
 80182c4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80182c6:	2300      	movs	r3, #0
 80182c8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80182ca:	230a      	movs	r3, #10
 80182cc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80182ce:	2300      	movs	r3, #0
 80182d0:	83bb      	strh	r3, [r7, #28]
 80182d2:	2300      	movs	r3, #0
 80182d4:	837b      	strh	r3, [r7, #26]
 80182d6:	2300      	movs	r3, #0
 80182d8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80182da:	2300      	movs	r3, #0
 80182dc:	843b      	strh	r3, [r7, #32]
 80182de:	e0ae      	b.n	801843e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80182e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80182e4:	49a6      	ldr	r1, [pc, #664]	; (8018580 <etharp_find_entry+0x2d4>)
 80182e6:	4613      	mov	r3, r2
 80182e8:	005b      	lsls	r3, r3, #1
 80182ea:	4413      	add	r3, r2
 80182ec:	00db      	lsls	r3, r3, #3
 80182ee:	440b      	add	r3, r1
 80182f0:	3314      	adds	r3, #20
 80182f2:	781b      	ldrb	r3, [r3, #0]
 80182f4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80182f6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80182fa:	2b0a      	cmp	r3, #10
 80182fc:	d105      	bne.n	801830a <etharp_find_entry+0x5e>
 80182fe:	7dfb      	ldrb	r3, [r7, #23]
 8018300:	2b00      	cmp	r3, #0
 8018302:	d102      	bne.n	801830a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8018304:	8c3b      	ldrh	r3, [r7, #32]
 8018306:	847b      	strh	r3, [r7, #34]	; 0x22
 8018308:	e095      	b.n	8018436 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801830a:	7dfb      	ldrb	r3, [r7, #23]
 801830c:	2b00      	cmp	r3, #0
 801830e:	f000 8092 	beq.w	8018436 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8018312:	7dfb      	ldrb	r3, [r7, #23]
 8018314:	2b01      	cmp	r3, #1
 8018316:	d009      	beq.n	801832c <etharp_find_entry+0x80>
 8018318:	7dfb      	ldrb	r3, [r7, #23]
 801831a:	2b01      	cmp	r3, #1
 801831c:	d806      	bhi.n	801832c <etharp_find_entry+0x80>
 801831e:	4b99      	ldr	r3, [pc, #612]	; (8018584 <etharp_find_entry+0x2d8>)
 8018320:	f240 1223 	movw	r2, #291	; 0x123
 8018324:	4998      	ldr	r1, [pc, #608]	; (8018588 <etharp_find_entry+0x2dc>)
 8018326:	4899      	ldr	r0, [pc, #612]	; (801858c <etharp_find_entry+0x2e0>)
 8018328:	f002 ff9e 	bl	801b268 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801832c:	68fb      	ldr	r3, [r7, #12]
 801832e:	2b00      	cmp	r3, #0
 8018330:	d020      	beq.n	8018374 <etharp_find_entry+0xc8>
 8018332:	68fb      	ldr	r3, [r7, #12]
 8018334:	6819      	ldr	r1, [r3, #0]
 8018336:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801833a:	4891      	ldr	r0, [pc, #580]	; (8018580 <etharp_find_entry+0x2d4>)
 801833c:	4613      	mov	r3, r2
 801833e:	005b      	lsls	r3, r3, #1
 8018340:	4413      	add	r3, r2
 8018342:	00db      	lsls	r3, r3, #3
 8018344:	4403      	add	r3, r0
 8018346:	3304      	adds	r3, #4
 8018348:	681b      	ldr	r3, [r3, #0]
 801834a:	4299      	cmp	r1, r3
 801834c:	d112      	bne.n	8018374 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	2b00      	cmp	r3, #0
 8018352:	d00c      	beq.n	801836e <etharp_find_entry+0xc2>
 8018354:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018358:	4989      	ldr	r1, [pc, #548]	; (8018580 <etharp_find_entry+0x2d4>)
 801835a:	4613      	mov	r3, r2
 801835c:	005b      	lsls	r3, r3, #1
 801835e:	4413      	add	r3, r2
 8018360:	00db      	lsls	r3, r3, #3
 8018362:	440b      	add	r3, r1
 8018364:	3308      	adds	r3, #8
 8018366:	681b      	ldr	r3, [r3, #0]
 8018368:	687a      	ldr	r2, [r7, #4]
 801836a:	429a      	cmp	r2, r3
 801836c:	d102      	bne.n	8018374 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801836e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018372:	e100      	b.n	8018576 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8018374:	7dfb      	ldrb	r3, [r7, #23]
 8018376:	2b01      	cmp	r3, #1
 8018378:	d140      	bne.n	80183fc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801837a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801837e:	4980      	ldr	r1, [pc, #512]	; (8018580 <etharp_find_entry+0x2d4>)
 8018380:	4613      	mov	r3, r2
 8018382:	005b      	lsls	r3, r3, #1
 8018384:	4413      	add	r3, r2
 8018386:	00db      	lsls	r3, r3, #3
 8018388:	440b      	add	r3, r1
 801838a:	681b      	ldr	r3, [r3, #0]
 801838c:	2b00      	cmp	r3, #0
 801838e:	d01a      	beq.n	80183c6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8018390:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018394:	497a      	ldr	r1, [pc, #488]	; (8018580 <etharp_find_entry+0x2d4>)
 8018396:	4613      	mov	r3, r2
 8018398:	005b      	lsls	r3, r3, #1
 801839a:	4413      	add	r3, r2
 801839c:	00db      	lsls	r3, r3, #3
 801839e:	440b      	add	r3, r1
 80183a0:	3312      	adds	r3, #18
 80183a2:	881b      	ldrh	r3, [r3, #0]
 80183a4:	8bba      	ldrh	r2, [r7, #28]
 80183a6:	429a      	cmp	r2, r3
 80183a8:	d845      	bhi.n	8018436 <etharp_find_entry+0x18a>
            old_queue = i;
 80183aa:	8c3b      	ldrh	r3, [r7, #32]
 80183ac:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80183ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80183b2:	4973      	ldr	r1, [pc, #460]	; (8018580 <etharp_find_entry+0x2d4>)
 80183b4:	4613      	mov	r3, r2
 80183b6:	005b      	lsls	r3, r3, #1
 80183b8:	4413      	add	r3, r2
 80183ba:	00db      	lsls	r3, r3, #3
 80183bc:	440b      	add	r3, r1
 80183be:	3312      	adds	r3, #18
 80183c0:	881b      	ldrh	r3, [r3, #0]
 80183c2:	83bb      	strh	r3, [r7, #28]
 80183c4:	e037      	b.n	8018436 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80183c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80183ca:	496d      	ldr	r1, [pc, #436]	; (8018580 <etharp_find_entry+0x2d4>)
 80183cc:	4613      	mov	r3, r2
 80183ce:	005b      	lsls	r3, r3, #1
 80183d0:	4413      	add	r3, r2
 80183d2:	00db      	lsls	r3, r3, #3
 80183d4:	440b      	add	r3, r1
 80183d6:	3312      	adds	r3, #18
 80183d8:	881b      	ldrh	r3, [r3, #0]
 80183da:	8b7a      	ldrh	r2, [r7, #26]
 80183dc:	429a      	cmp	r2, r3
 80183de:	d82a      	bhi.n	8018436 <etharp_find_entry+0x18a>
            old_pending = i;
 80183e0:	8c3b      	ldrh	r3, [r7, #32]
 80183e2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80183e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80183e8:	4965      	ldr	r1, [pc, #404]	; (8018580 <etharp_find_entry+0x2d4>)
 80183ea:	4613      	mov	r3, r2
 80183ec:	005b      	lsls	r3, r3, #1
 80183ee:	4413      	add	r3, r2
 80183f0:	00db      	lsls	r3, r3, #3
 80183f2:	440b      	add	r3, r1
 80183f4:	3312      	adds	r3, #18
 80183f6:	881b      	ldrh	r3, [r3, #0]
 80183f8:	837b      	strh	r3, [r7, #26]
 80183fa:	e01c      	b.n	8018436 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80183fc:	7dfb      	ldrb	r3, [r7, #23]
 80183fe:	2b01      	cmp	r3, #1
 8018400:	d919      	bls.n	8018436 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8018402:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018406:	495e      	ldr	r1, [pc, #376]	; (8018580 <etharp_find_entry+0x2d4>)
 8018408:	4613      	mov	r3, r2
 801840a:	005b      	lsls	r3, r3, #1
 801840c:	4413      	add	r3, r2
 801840e:	00db      	lsls	r3, r3, #3
 8018410:	440b      	add	r3, r1
 8018412:	3312      	adds	r3, #18
 8018414:	881b      	ldrh	r3, [r3, #0]
 8018416:	8b3a      	ldrh	r2, [r7, #24]
 8018418:	429a      	cmp	r2, r3
 801841a:	d80c      	bhi.n	8018436 <etharp_find_entry+0x18a>
            old_stable = i;
 801841c:	8c3b      	ldrh	r3, [r7, #32]
 801841e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8018420:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018424:	4956      	ldr	r1, [pc, #344]	; (8018580 <etharp_find_entry+0x2d4>)
 8018426:	4613      	mov	r3, r2
 8018428:	005b      	lsls	r3, r3, #1
 801842a:	4413      	add	r3, r2
 801842c:	00db      	lsls	r3, r3, #3
 801842e:	440b      	add	r3, r1
 8018430:	3312      	adds	r3, #18
 8018432:	881b      	ldrh	r3, [r3, #0]
 8018434:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018436:	8c3b      	ldrh	r3, [r7, #32]
 8018438:	3301      	adds	r3, #1
 801843a:	b29b      	uxth	r3, r3
 801843c:	843b      	strh	r3, [r7, #32]
 801843e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018442:	2b09      	cmp	r3, #9
 8018444:	f77f af4c 	ble.w	80182e0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8018448:	7afb      	ldrb	r3, [r7, #11]
 801844a:	f003 0302 	and.w	r3, r3, #2
 801844e:	2b00      	cmp	r3, #0
 8018450:	d108      	bne.n	8018464 <etharp_find_entry+0x1b8>
 8018452:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018456:	2b0a      	cmp	r3, #10
 8018458:	d107      	bne.n	801846a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801845a:	7afb      	ldrb	r3, [r7, #11]
 801845c:	f003 0301 	and.w	r3, r3, #1
 8018460:	2b00      	cmp	r3, #0
 8018462:	d102      	bne.n	801846a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8018464:	f04f 33ff 	mov.w	r3, #4294967295
 8018468:	e085      	b.n	8018576 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801846a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801846e:	2b09      	cmp	r3, #9
 8018470:	dc02      	bgt.n	8018478 <etharp_find_entry+0x1cc>
    i = empty;
 8018472:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018474:	843b      	strh	r3, [r7, #32]
 8018476:	e039      	b.n	80184ec <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8018478:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801847c:	2b09      	cmp	r3, #9
 801847e:	dc14      	bgt.n	80184aa <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8018480:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018482:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8018484:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018488:	493d      	ldr	r1, [pc, #244]	; (8018580 <etharp_find_entry+0x2d4>)
 801848a:	4613      	mov	r3, r2
 801848c:	005b      	lsls	r3, r3, #1
 801848e:	4413      	add	r3, r2
 8018490:	00db      	lsls	r3, r3, #3
 8018492:	440b      	add	r3, r1
 8018494:	681b      	ldr	r3, [r3, #0]
 8018496:	2b00      	cmp	r3, #0
 8018498:	d018      	beq.n	80184cc <etharp_find_entry+0x220>
 801849a:	4b3a      	ldr	r3, [pc, #232]	; (8018584 <etharp_find_entry+0x2d8>)
 801849c:	f240 126d 	movw	r2, #365	; 0x16d
 80184a0:	493b      	ldr	r1, [pc, #236]	; (8018590 <etharp_find_entry+0x2e4>)
 80184a2:	483a      	ldr	r0, [pc, #232]	; (801858c <etharp_find_entry+0x2e0>)
 80184a4:	f002 fee0 	bl	801b268 <iprintf>
 80184a8:	e010      	b.n	80184cc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80184aa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80184ae:	2b09      	cmp	r3, #9
 80184b0:	dc02      	bgt.n	80184b8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80184b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80184b4:	843b      	strh	r3, [r7, #32]
 80184b6:	e009      	b.n	80184cc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80184b8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80184bc:	2b09      	cmp	r3, #9
 80184be:	dc02      	bgt.n	80184c6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80184c0:	8bfb      	ldrh	r3, [r7, #30]
 80184c2:	843b      	strh	r3, [r7, #32]
 80184c4:	e002      	b.n	80184cc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80184c6:	f04f 33ff 	mov.w	r3, #4294967295
 80184ca:	e054      	b.n	8018576 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80184cc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80184d0:	2b09      	cmp	r3, #9
 80184d2:	dd06      	ble.n	80184e2 <etharp_find_entry+0x236>
 80184d4:	4b2b      	ldr	r3, [pc, #172]	; (8018584 <etharp_find_entry+0x2d8>)
 80184d6:	f240 127f 	movw	r2, #383	; 0x17f
 80184da:	492e      	ldr	r1, [pc, #184]	; (8018594 <etharp_find_entry+0x2e8>)
 80184dc:	482b      	ldr	r0, [pc, #172]	; (801858c <etharp_find_entry+0x2e0>)
 80184de:	f002 fec3 	bl	801b268 <iprintf>
    etharp_free_entry(i);
 80184e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80184e6:	4618      	mov	r0, r3
 80184e8:	f7ff fe06 	bl	80180f8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80184ec:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80184f0:	2b09      	cmp	r3, #9
 80184f2:	dd06      	ble.n	8018502 <etharp_find_entry+0x256>
 80184f4:	4b23      	ldr	r3, [pc, #140]	; (8018584 <etharp_find_entry+0x2d8>)
 80184f6:	f240 1283 	movw	r2, #387	; 0x183
 80184fa:	4926      	ldr	r1, [pc, #152]	; (8018594 <etharp_find_entry+0x2e8>)
 80184fc:	4823      	ldr	r0, [pc, #140]	; (801858c <etharp_find_entry+0x2e0>)
 80184fe:	f002 feb3 	bl	801b268 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8018502:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018506:	491e      	ldr	r1, [pc, #120]	; (8018580 <etharp_find_entry+0x2d4>)
 8018508:	4613      	mov	r3, r2
 801850a:	005b      	lsls	r3, r3, #1
 801850c:	4413      	add	r3, r2
 801850e:	00db      	lsls	r3, r3, #3
 8018510:	440b      	add	r3, r1
 8018512:	3314      	adds	r3, #20
 8018514:	781b      	ldrb	r3, [r3, #0]
 8018516:	2b00      	cmp	r3, #0
 8018518:	d006      	beq.n	8018528 <etharp_find_entry+0x27c>
 801851a:	4b1a      	ldr	r3, [pc, #104]	; (8018584 <etharp_find_entry+0x2d8>)
 801851c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8018520:	491d      	ldr	r1, [pc, #116]	; (8018598 <etharp_find_entry+0x2ec>)
 8018522:	481a      	ldr	r0, [pc, #104]	; (801858c <etharp_find_entry+0x2e0>)
 8018524:	f002 fea0 	bl	801b268 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8018528:	68fb      	ldr	r3, [r7, #12]
 801852a:	2b00      	cmp	r3, #0
 801852c:	d00b      	beq.n	8018546 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801852e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018532:	68fb      	ldr	r3, [r7, #12]
 8018534:	6819      	ldr	r1, [r3, #0]
 8018536:	4812      	ldr	r0, [pc, #72]	; (8018580 <etharp_find_entry+0x2d4>)
 8018538:	4613      	mov	r3, r2
 801853a:	005b      	lsls	r3, r3, #1
 801853c:	4413      	add	r3, r2
 801853e:	00db      	lsls	r3, r3, #3
 8018540:	4403      	add	r3, r0
 8018542:	3304      	adds	r3, #4
 8018544:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8018546:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801854a:	490d      	ldr	r1, [pc, #52]	; (8018580 <etharp_find_entry+0x2d4>)
 801854c:	4613      	mov	r3, r2
 801854e:	005b      	lsls	r3, r3, #1
 8018550:	4413      	add	r3, r2
 8018552:	00db      	lsls	r3, r3, #3
 8018554:	440b      	add	r3, r1
 8018556:	3312      	adds	r3, #18
 8018558:	2200      	movs	r2, #0
 801855a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801855c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018560:	4907      	ldr	r1, [pc, #28]	; (8018580 <etharp_find_entry+0x2d4>)
 8018562:	4613      	mov	r3, r2
 8018564:	005b      	lsls	r3, r3, #1
 8018566:	4413      	add	r3, r2
 8018568:	00db      	lsls	r3, r3, #3
 801856a:	440b      	add	r3, r1
 801856c:	3308      	adds	r3, #8
 801856e:	687a      	ldr	r2, [r7, #4]
 8018570:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8018572:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8018576:	4618      	mov	r0, r3
 8018578:	3728      	adds	r7, #40	; 0x28
 801857a:	46bd      	mov	sp, r7
 801857c:	bd80      	pop	{r7, pc}
 801857e:	bf00      	nop
 8018580:	200070ac 	.word	0x200070ac
 8018584:	080205ec 	.word	0x080205ec
 8018588:	08020624 	.word	0x08020624
 801858c:	08020664 	.word	0x08020664
 8018590:	0802068c 	.word	0x0802068c
 8018594:	080206a4 	.word	0x080206a4
 8018598:	080206b8 	.word	0x080206b8

0801859c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801859c:	b580      	push	{r7, lr}
 801859e:	b088      	sub	sp, #32
 80185a0:	af02      	add	r7, sp, #8
 80185a2:	60f8      	str	r0, [r7, #12]
 80185a4:	60b9      	str	r1, [r7, #8]
 80185a6:	607a      	str	r2, [r7, #4]
 80185a8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80185aa:	68fb      	ldr	r3, [r7, #12]
 80185ac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80185b0:	2b06      	cmp	r3, #6
 80185b2:	d006      	beq.n	80185c2 <etharp_update_arp_entry+0x26>
 80185b4:	4b48      	ldr	r3, [pc, #288]	; (80186d8 <etharp_update_arp_entry+0x13c>)
 80185b6:	f240 12a9 	movw	r2, #425	; 0x1a9
 80185ba:	4948      	ldr	r1, [pc, #288]	; (80186dc <etharp_update_arp_entry+0x140>)
 80185bc:	4848      	ldr	r0, [pc, #288]	; (80186e0 <etharp_update_arp_entry+0x144>)
 80185be:	f002 fe53 	bl	801b268 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80185c2:	68bb      	ldr	r3, [r7, #8]
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	d012      	beq.n	80185ee <etharp_update_arp_entry+0x52>
 80185c8:	68bb      	ldr	r3, [r7, #8]
 80185ca:	681b      	ldr	r3, [r3, #0]
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d00e      	beq.n	80185ee <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80185d0:	68bb      	ldr	r3, [r7, #8]
 80185d2:	681b      	ldr	r3, [r3, #0]
 80185d4:	68f9      	ldr	r1, [r7, #12]
 80185d6:	4618      	mov	r0, r3
 80185d8:	f001 f924 	bl	8019824 <ip4_addr_isbroadcast_u32>
 80185dc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80185de:	2b00      	cmp	r3, #0
 80185e0:	d105      	bne.n	80185ee <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80185e2:	68bb      	ldr	r3, [r7, #8]
 80185e4:	681b      	ldr	r3, [r3, #0]
 80185e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80185ea:	2be0      	cmp	r3, #224	; 0xe0
 80185ec:	d102      	bne.n	80185f4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80185ee:	f06f 030f 	mvn.w	r3, #15
 80185f2:	e06c      	b.n	80186ce <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80185f4:	78fb      	ldrb	r3, [r7, #3]
 80185f6:	68fa      	ldr	r2, [r7, #12]
 80185f8:	4619      	mov	r1, r3
 80185fa:	68b8      	ldr	r0, [r7, #8]
 80185fc:	f7ff fe56 	bl	80182ac <etharp_find_entry>
 8018600:	4603      	mov	r3, r0
 8018602:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8018604:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018608:	2b00      	cmp	r3, #0
 801860a:	da02      	bge.n	8018612 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801860c:	8afb      	ldrh	r3, [r7, #22]
 801860e:	b25b      	sxtb	r3, r3
 8018610:	e05d      	b.n	80186ce <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8018612:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018616:	4933      	ldr	r1, [pc, #204]	; (80186e4 <etharp_update_arp_entry+0x148>)
 8018618:	4613      	mov	r3, r2
 801861a:	005b      	lsls	r3, r3, #1
 801861c:	4413      	add	r3, r2
 801861e:	00db      	lsls	r3, r3, #3
 8018620:	440b      	add	r3, r1
 8018622:	3314      	adds	r3, #20
 8018624:	2202      	movs	r2, #2
 8018626:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8018628:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801862c:	492d      	ldr	r1, [pc, #180]	; (80186e4 <etharp_update_arp_entry+0x148>)
 801862e:	4613      	mov	r3, r2
 8018630:	005b      	lsls	r3, r3, #1
 8018632:	4413      	add	r3, r2
 8018634:	00db      	lsls	r3, r3, #3
 8018636:	440b      	add	r3, r1
 8018638:	3308      	adds	r3, #8
 801863a:	68fa      	ldr	r2, [r7, #12]
 801863c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801863e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018642:	4613      	mov	r3, r2
 8018644:	005b      	lsls	r3, r3, #1
 8018646:	4413      	add	r3, r2
 8018648:	00db      	lsls	r3, r3, #3
 801864a:	3308      	adds	r3, #8
 801864c:	4a25      	ldr	r2, [pc, #148]	; (80186e4 <etharp_update_arp_entry+0x148>)
 801864e:	4413      	add	r3, r2
 8018650:	3304      	adds	r3, #4
 8018652:	2206      	movs	r2, #6
 8018654:	6879      	ldr	r1, [r7, #4]
 8018656:	4618      	mov	r0, r3
 8018658:	f003 f80f 	bl	801b67a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801865c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018660:	4920      	ldr	r1, [pc, #128]	; (80186e4 <etharp_update_arp_entry+0x148>)
 8018662:	4613      	mov	r3, r2
 8018664:	005b      	lsls	r3, r3, #1
 8018666:	4413      	add	r3, r2
 8018668:	00db      	lsls	r3, r3, #3
 801866a:	440b      	add	r3, r1
 801866c:	3312      	adds	r3, #18
 801866e:	2200      	movs	r2, #0
 8018670:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8018672:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018676:	491b      	ldr	r1, [pc, #108]	; (80186e4 <etharp_update_arp_entry+0x148>)
 8018678:	4613      	mov	r3, r2
 801867a:	005b      	lsls	r3, r3, #1
 801867c:	4413      	add	r3, r2
 801867e:	00db      	lsls	r3, r3, #3
 8018680:	440b      	add	r3, r1
 8018682:	681b      	ldr	r3, [r3, #0]
 8018684:	2b00      	cmp	r3, #0
 8018686:	d021      	beq.n	80186cc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8018688:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801868c:	4915      	ldr	r1, [pc, #84]	; (80186e4 <etharp_update_arp_entry+0x148>)
 801868e:	4613      	mov	r3, r2
 8018690:	005b      	lsls	r3, r3, #1
 8018692:	4413      	add	r3, r2
 8018694:	00db      	lsls	r3, r3, #3
 8018696:	440b      	add	r3, r1
 8018698:	681b      	ldr	r3, [r3, #0]
 801869a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801869c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80186a0:	4910      	ldr	r1, [pc, #64]	; (80186e4 <etharp_update_arp_entry+0x148>)
 80186a2:	4613      	mov	r3, r2
 80186a4:	005b      	lsls	r3, r3, #1
 80186a6:	4413      	add	r3, r2
 80186a8:	00db      	lsls	r3, r3, #3
 80186aa:	440b      	add	r3, r1
 80186ac:	2200      	movs	r2, #0
 80186ae:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80186b0:	68fb      	ldr	r3, [r7, #12]
 80186b2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80186b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80186ba:	9300      	str	r3, [sp, #0]
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	6939      	ldr	r1, [r7, #16]
 80186c0:	68f8      	ldr	r0, [r7, #12]
 80186c2:	f002 f84d 	bl	801a760 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80186c6:	6938      	ldr	r0, [r7, #16]
 80186c8:	f7f8 ff2c 	bl	8011524 <pbuf_free>
  }
  return ERR_OK;
 80186cc:	2300      	movs	r3, #0
}
 80186ce:	4618      	mov	r0, r3
 80186d0:	3718      	adds	r7, #24
 80186d2:	46bd      	mov	sp, r7
 80186d4:	bd80      	pop	{r7, pc}
 80186d6:	bf00      	nop
 80186d8:	080205ec 	.word	0x080205ec
 80186dc:	080206e4 	.word	0x080206e4
 80186e0:	08020664 	.word	0x08020664
 80186e4:	200070ac 	.word	0x200070ac

080186e8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80186e8:	b580      	push	{r7, lr}
 80186ea:	b084      	sub	sp, #16
 80186ec:	af00      	add	r7, sp, #0
 80186ee:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80186f0:	2300      	movs	r3, #0
 80186f2:	60fb      	str	r3, [r7, #12]
 80186f4:	e01e      	b.n	8018734 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80186f6:	4913      	ldr	r1, [pc, #76]	; (8018744 <etharp_cleanup_netif+0x5c>)
 80186f8:	68fa      	ldr	r2, [r7, #12]
 80186fa:	4613      	mov	r3, r2
 80186fc:	005b      	lsls	r3, r3, #1
 80186fe:	4413      	add	r3, r2
 8018700:	00db      	lsls	r3, r3, #3
 8018702:	440b      	add	r3, r1
 8018704:	3314      	adds	r3, #20
 8018706:	781b      	ldrb	r3, [r3, #0]
 8018708:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801870a:	7afb      	ldrb	r3, [r7, #11]
 801870c:	2b00      	cmp	r3, #0
 801870e:	d00e      	beq.n	801872e <etharp_cleanup_netif+0x46>
 8018710:	490c      	ldr	r1, [pc, #48]	; (8018744 <etharp_cleanup_netif+0x5c>)
 8018712:	68fa      	ldr	r2, [r7, #12]
 8018714:	4613      	mov	r3, r2
 8018716:	005b      	lsls	r3, r3, #1
 8018718:	4413      	add	r3, r2
 801871a:	00db      	lsls	r3, r3, #3
 801871c:	440b      	add	r3, r1
 801871e:	3308      	adds	r3, #8
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	687a      	ldr	r2, [r7, #4]
 8018724:	429a      	cmp	r2, r3
 8018726:	d102      	bne.n	801872e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8018728:	68f8      	ldr	r0, [r7, #12]
 801872a:	f7ff fce5 	bl	80180f8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801872e:	68fb      	ldr	r3, [r7, #12]
 8018730:	3301      	adds	r3, #1
 8018732:	60fb      	str	r3, [r7, #12]
 8018734:	68fb      	ldr	r3, [r7, #12]
 8018736:	2b09      	cmp	r3, #9
 8018738:	dddd      	ble.n	80186f6 <etharp_cleanup_netif+0xe>
    }
  }
}
 801873a:	bf00      	nop
 801873c:	bf00      	nop
 801873e:	3710      	adds	r7, #16
 8018740:	46bd      	mov	sp, r7
 8018742:	bd80      	pop	{r7, pc}
 8018744:	200070ac 	.word	0x200070ac

08018748 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8018748:	b5b0      	push	{r4, r5, r7, lr}
 801874a:	b08a      	sub	sp, #40	; 0x28
 801874c:	af04      	add	r7, sp, #16
 801874e:	6078      	str	r0, [r7, #4]
 8018750:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8018752:	683b      	ldr	r3, [r7, #0]
 8018754:	2b00      	cmp	r3, #0
 8018756:	d107      	bne.n	8018768 <etharp_input+0x20>
 8018758:	4b3d      	ldr	r3, [pc, #244]	; (8018850 <etharp_input+0x108>)
 801875a:	f240 228a 	movw	r2, #650	; 0x28a
 801875e:	493d      	ldr	r1, [pc, #244]	; (8018854 <etharp_input+0x10c>)
 8018760:	483d      	ldr	r0, [pc, #244]	; (8018858 <etharp_input+0x110>)
 8018762:	f002 fd81 	bl	801b268 <iprintf>
 8018766:	e06f      	b.n	8018848 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	685b      	ldr	r3, [r3, #4]
 801876c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801876e:	693b      	ldr	r3, [r7, #16]
 8018770:	881b      	ldrh	r3, [r3, #0]
 8018772:	b29b      	uxth	r3, r3
 8018774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018778:	d10c      	bne.n	8018794 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801877a:	693b      	ldr	r3, [r7, #16]
 801877c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801877e:	2b06      	cmp	r3, #6
 8018780:	d108      	bne.n	8018794 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018782:	693b      	ldr	r3, [r7, #16]
 8018784:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018786:	2b04      	cmp	r3, #4
 8018788:	d104      	bne.n	8018794 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801878a:	693b      	ldr	r3, [r7, #16]
 801878c:	885b      	ldrh	r3, [r3, #2]
 801878e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018790:	2b08      	cmp	r3, #8
 8018792:	d003      	beq.n	801879c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8018794:	6878      	ldr	r0, [r7, #4]
 8018796:	f7f8 fec5 	bl	8011524 <pbuf_free>
    return;
 801879a:	e055      	b.n	8018848 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801879c:	693b      	ldr	r3, [r7, #16]
 801879e:	330e      	adds	r3, #14
 80187a0:	681b      	ldr	r3, [r3, #0]
 80187a2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80187a4:	693b      	ldr	r3, [r7, #16]
 80187a6:	3318      	adds	r3, #24
 80187a8:	681b      	ldr	r3, [r3, #0]
 80187aa:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80187ac:	683b      	ldr	r3, [r7, #0]
 80187ae:	3304      	adds	r3, #4
 80187b0:	681b      	ldr	r3, [r3, #0]
 80187b2:	2b00      	cmp	r3, #0
 80187b4:	d102      	bne.n	80187bc <etharp_input+0x74>
    for_us = 0;
 80187b6:	2300      	movs	r3, #0
 80187b8:	75fb      	strb	r3, [r7, #23]
 80187ba:	e009      	b.n	80187d0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80187bc:	68ba      	ldr	r2, [r7, #8]
 80187be:	683b      	ldr	r3, [r7, #0]
 80187c0:	3304      	adds	r3, #4
 80187c2:	681b      	ldr	r3, [r3, #0]
 80187c4:	429a      	cmp	r2, r3
 80187c6:	bf0c      	ite	eq
 80187c8:	2301      	moveq	r3, #1
 80187ca:	2300      	movne	r3, #0
 80187cc:	b2db      	uxtb	r3, r3
 80187ce:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80187d0:	693b      	ldr	r3, [r7, #16]
 80187d2:	f103 0208 	add.w	r2, r3, #8
 80187d6:	7dfb      	ldrb	r3, [r7, #23]
 80187d8:	2b00      	cmp	r3, #0
 80187da:	d001      	beq.n	80187e0 <etharp_input+0x98>
 80187dc:	2301      	movs	r3, #1
 80187de:	e000      	b.n	80187e2 <etharp_input+0x9a>
 80187e0:	2302      	movs	r3, #2
 80187e2:	f107 010c 	add.w	r1, r7, #12
 80187e6:	6838      	ldr	r0, [r7, #0]
 80187e8:	f7ff fed8 	bl	801859c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80187ec:	693b      	ldr	r3, [r7, #16]
 80187ee:	88db      	ldrh	r3, [r3, #6]
 80187f0:	b29b      	uxth	r3, r3
 80187f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80187f6:	d003      	beq.n	8018800 <etharp_input+0xb8>
 80187f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80187fc:	d01e      	beq.n	801883c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80187fe:	e020      	b.n	8018842 <etharp_input+0xfa>
      if (for_us) {
 8018800:	7dfb      	ldrb	r3, [r7, #23]
 8018802:	2b00      	cmp	r3, #0
 8018804:	d01c      	beq.n	8018840 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8018806:	683b      	ldr	r3, [r7, #0]
 8018808:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801880c:	693b      	ldr	r3, [r7, #16]
 801880e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8018812:	683b      	ldr	r3, [r7, #0]
 8018814:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8018818:	683b      	ldr	r3, [r7, #0]
 801881a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801881c:	693a      	ldr	r2, [r7, #16]
 801881e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8018820:	2102      	movs	r1, #2
 8018822:	9103      	str	r1, [sp, #12]
 8018824:	f107 010c 	add.w	r1, r7, #12
 8018828:	9102      	str	r1, [sp, #8]
 801882a:	9201      	str	r2, [sp, #4]
 801882c:	9300      	str	r3, [sp, #0]
 801882e:	462b      	mov	r3, r5
 8018830:	4622      	mov	r2, r4
 8018832:	4601      	mov	r1, r0
 8018834:	6838      	ldr	r0, [r7, #0]
 8018836:	f000 faeb 	bl	8018e10 <etharp_raw>
      break;
 801883a:	e001      	b.n	8018840 <etharp_input+0xf8>
      break;
 801883c:	bf00      	nop
 801883e:	e000      	b.n	8018842 <etharp_input+0xfa>
      break;
 8018840:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8018842:	6878      	ldr	r0, [r7, #4]
 8018844:	f7f8 fe6e 	bl	8011524 <pbuf_free>
}
 8018848:	3718      	adds	r7, #24
 801884a:	46bd      	mov	sp, r7
 801884c:	bdb0      	pop	{r4, r5, r7, pc}
 801884e:	bf00      	nop
 8018850:	080205ec 	.word	0x080205ec
 8018854:	0802073c 	.word	0x0802073c
 8018858:	08020664 	.word	0x08020664

0801885c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801885c:	b580      	push	{r7, lr}
 801885e:	b086      	sub	sp, #24
 8018860:	af02      	add	r7, sp, #8
 8018862:	60f8      	str	r0, [r7, #12]
 8018864:	60b9      	str	r1, [r7, #8]
 8018866:	4613      	mov	r3, r2
 8018868:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801886a:	79fa      	ldrb	r2, [r7, #7]
 801886c:	4944      	ldr	r1, [pc, #272]	; (8018980 <etharp_output_to_arp_index+0x124>)
 801886e:	4613      	mov	r3, r2
 8018870:	005b      	lsls	r3, r3, #1
 8018872:	4413      	add	r3, r2
 8018874:	00db      	lsls	r3, r3, #3
 8018876:	440b      	add	r3, r1
 8018878:	3314      	adds	r3, #20
 801887a:	781b      	ldrb	r3, [r3, #0]
 801887c:	2b01      	cmp	r3, #1
 801887e:	d806      	bhi.n	801888e <etharp_output_to_arp_index+0x32>
 8018880:	4b40      	ldr	r3, [pc, #256]	; (8018984 <etharp_output_to_arp_index+0x128>)
 8018882:	f240 22ee 	movw	r2, #750	; 0x2ee
 8018886:	4940      	ldr	r1, [pc, #256]	; (8018988 <etharp_output_to_arp_index+0x12c>)
 8018888:	4840      	ldr	r0, [pc, #256]	; (801898c <etharp_output_to_arp_index+0x130>)
 801888a:	f002 fced 	bl	801b268 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801888e:	79fa      	ldrb	r2, [r7, #7]
 8018890:	493b      	ldr	r1, [pc, #236]	; (8018980 <etharp_output_to_arp_index+0x124>)
 8018892:	4613      	mov	r3, r2
 8018894:	005b      	lsls	r3, r3, #1
 8018896:	4413      	add	r3, r2
 8018898:	00db      	lsls	r3, r3, #3
 801889a:	440b      	add	r3, r1
 801889c:	3314      	adds	r3, #20
 801889e:	781b      	ldrb	r3, [r3, #0]
 80188a0:	2b02      	cmp	r3, #2
 80188a2:	d153      	bne.n	801894c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80188a4:	79fa      	ldrb	r2, [r7, #7]
 80188a6:	4936      	ldr	r1, [pc, #216]	; (8018980 <etharp_output_to_arp_index+0x124>)
 80188a8:	4613      	mov	r3, r2
 80188aa:	005b      	lsls	r3, r3, #1
 80188ac:	4413      	add	r3, r2
 80188ae:	00db      	lsls	r3, r3, #3
 80188b0:	440b      	add	r3, r1
 80188b2:	3312      	adds	r3, #18
 80188b4:	881b      	ldrh	r3, [r3, #0]
 80188b6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80188ba:	d919      	bls.n	80188f0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80188bc:	79fa      	ldrb	r2, [r7, #7]
 80188be:	4613      	mov	r3, r2
 80188c0:	005b      	lsls	r3, r3, #1
 80188c2:	4413      	add	r3, r2
 80188c4:	00db      	lsls	r3, r3, #3
 80188c6:	4a2e      	ldr	r2, [pc, #184]	; (8018980 <etharp_output_to_arp_index+0x124>)
 80188c8:	4413      	add	r3, r2
 80188ca:	3304      	adds	r3, #4
 80188cc:	4619      	mov	r1, r3
 80188ce:	68f8      	ldr	r0, [r7, #12]
 80188d0:	f000 fb4c 	bl	8018f6c <etharp_request>
 80188d4:	4603      	mov	r3, r0
 80188d6:	2b00      	cmp	r3, #0
 80188d8:	d138      	bne.n	801894c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80188da:	79fa      	ldrb	r2, [r7, #7]
 80188dc:	4928      	ldr	r1, [pc, #160]	; (8018980 <etharp_output_to_arp_index+0x124>)
 80188de:	4613      	mov	r3, r2
 80188e0:	005b      	lsls	r3, r3, #1
 80188e2:	4413      	add	r3, r2
 80188e4:	00db      	lsls	r3, r3, #3
 80188e6:	440b      	add	r3, r1
 80188e8:	3314      	adds	r3, #20
 80188ea:	2203      	movs	r2, #3
 80188ec:	701a      	strb	r2, [r3, #0]
 80188ee:	e02d      	b.n	801894c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80188f0:	79fa      	ldrb	r2, [r7, #7]
 80188f2:	4923      	ldr	r1, [pc, #140]	; (8018980 <etharp_output_to_arp_index+0x124>)
 80188f4:	4613      	mov	r3, r2
 80188f6:	005b      	lsls	r3, r3, #1
 80188f8:	4413      	add	r3, r2
 80188fa:	00db      	lsls	r3, r3, #3
 80188fc:	440b      	add	r3, r1
 80188fe:	3312      	adds	r3, #18
 8018900:	881b      	ldrh	r3, [r3, #0]
 8018902:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8018906:	d321      	bcc.n	801894c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8018908:	79fa      	ldrb	r2, [r7, #7]
 801890a:	4613      	mov	r3, r2
 801890c:	005b      	lsls	r3, r3, #1
 801890e:	4413      	add	r3, r2
 8018910:	00db      	lsls	r3, r3, #3
 8018912:	4a1b      	ldr	r2, [pc, #108]	; (8018980 <etharp_output_to_arp_index+0x124>)
 8018914:	4413      	add	r3, r2
 8018916:	1d19      	adds	r1, r3, #4
 8018918:	79fa      	ldrb	r2, [r7, #7]
 801891a:	4613      	mov	r3, r2
 801891c:	005b      	lsls	r3, r3, #1
 801891e:	4413      	add	r3, r2
 8018920:	00db      	lsls	r3, r3, #3
 8018922:	3308      	adds	r3, #8
 8018924:	4a16      	ldr	r2, [pc, #88]	; (8018980 <etharp_output_to_arp_index+0x124>)
 8018926:	4413      	add	r3, r2
 8018928:	3304      	adds	r3, #4
 801892a:	461a      	mov	r2, r3
 801892c:	68f8      	ldr	r0, [r7, #12]
 801892e:	f000 fafb 	bl	8018f28 <etharp_request_dst>
 8018932:	4603      	mov	r3, r0
 8018934:	2b00      	cmp	r3, #0
 8018936:	d109      	bne.n	801894c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018938:	79fa      	ldrb	r2, [r7, #7]
 801893a:	4911      	ldr	r1, [pc, #68]	; (8018980 <etharp_output_to_arp_index+0x124>)
 801893c:	4613      	mov	r3, r2
 801893e:	005b      	lsls	r3, r3, #1
 8018940:	4413      	add	r3, r2
 8018942:	00db      	lsls	r3, r3, #3
 8018944:	440b      	add	r3, r1
 8018946:	3314      	adds	r3, #20
 8018948:	2203      	movs	r2, #3
 801894a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801894c:	68fb      	ldr	r3, [r7, #12]
 801894e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8018952:	79fa      	ldrb	r2, [r7, #7]
 8018954:	4613      	mov	r3, r2
 8018956:	005b      	lsls	r3, r3, #1
 8018958:	4413      	add	r3, r2
 801895a:	00db      	lsls	r3, r3, #3
 801895c:	3308      	adds	r3, #8
 801895e:	4a08      	ldr	r2, [pc, #32]	; (8018980 <etharp_output_to_arp_index+0x124>)
 8018960:	4413      	add	r3, r2
 8018962:	3304      	adds	r3, #4
 8018964:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018968:	9200      	str	r2, [sp, #0]
 801896a:	460a      	mov	r2, r1
 801896c:	68b9      	ldr	r1, [r7, #8]
 801896e:	68f8      	ldr	r0, [r7, #12]
 8018970:	f001 fef6 	bl	801a760 <ethernet_output>
 8018974:	4603      	mov	r3, r0
}
 8018976:	4618      	mov	r0, r3
 8018978:	3710      	adds	r7, #16
 801897a:	46bd      	mov	sp, r7
 801897c:	bd80      	pop	{r7, pc}
 801897e:	bf00      	nop
 8018980:	200070ac 	.word	0x200070ac
 8018984:	080205ec 	.word	0x080205ec
 8018988:	0802075c 	.word	0x0802075c
 801898c:	08020664 	.word	0x08020664

08018990 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8018990:	b580      	push	{r7, lr}
 8018992:	b08a      	sub	sp, #40	; 0x28
 8018994:	af02      	add	r7, sp, #8
 8018996:	60f8      	str	r0, [r7, #12]
 8018998:	60b9      	str	r1, [r7, #8]
 801899a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801899c:	687b      	ldr	r3, [r7, #4]
 801899e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80189a0:	68fb      	ldr	r3, [r7, #12]
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	d106      	bne.n	80189b4 <etharp_output+0x24>
 80189a6:	4b73      	ldr	r3, [pc, #460]	; (8018b74 <etharp_output+0x1e4>)
 80189a8:	f240 321e 	movw	r2, #798	; 0x31e
 80189ac:	4972      	ldr	r1, [pc, #456]	; (8018b78 <etharp_output+0x1e8>)
 80189ae:	4873      	ldr	r0, [pc, #460]	; (8018b7c <etharp_output+0x1ec>)
 80189b0:	f002 fc5a 	bl	801b268 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80189b4:	68bb      	ldr	r3, [r7, #8]
 80189b6:	2b00      	cmp	r3, #0
 80189b8:	d106      	bne.n	80189c8 <etharp_output+0x38>
 80189ba:	4b6e      	ldr	r3, [pc, #440]	; (8018b74 <etharp_output+0x1e4>)
 80189bc:	f240 321f 	movw	r2, #799	; 0x31f
 80189c0:	496f      	ldr	r1, [pc, #444]	; (8018b80 <etharp_output+0x1f0>)
 80189c2:	486e      	ldr	r0, [pc, #440]	; (8018b7c <etharp_output+0x1ec>)
 80189c4:	f002 fc50 	bl	801b268 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80189c8:	687b      	ldr	r3, [r7, #4]
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	d106      	bne.n	80189dc <etharp_output+0x4c>
 80189ce:	4b69      	ldr	r3, [pc, #420]	; (8018b74 <etharp_output+0x1e4>)
 80189d0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80189d4:	496b      	ldr	r1, [pc, #428]	; (8018b84 <etharp_output+0x1f4>)
 80189d6:	4869      	ldr	r0, [pc, #420]	; (8018b7c <etharp_output+0x1ec>)
 80189d8:	f002 fc46 	bl	801b268 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	681b      	ldr	r3, [r3, #0]
 80189e0:	68f9      	ldr	r1, [r7, #12]
 80189e2:	4618      	mov	r0, r3
 80189e4:	f000 ff1e 	bl	8019824 <ip4_addr_isbroadcast_u32>
 80189e8:	4603      	mov	r3, r0
 80189ea:	2b00      	cmp	r3, #0
 80189ec:	d002      	beq.n	80189f4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80189ee:	4b66      	ldr	r3, [pc, #408]	; (8018b88 <etharp_output+0x1f8>)
 80189f0:	61fb      	str	r3, [r7, #28]
 80189f2:	e0af      	b.n	8018b54 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	681b      	ldr	r3, [r3, #0]
 80189f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80189fc:	2be0      	cmp	r3, #224	; 0xe0
 80189fe:	d118      	bne.n	8018a32 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8018a00:	2301      	movs	r3, #1
 8018a02:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8018a04:	2300      	movs	r3, #0
 8018a06:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8018a08:	235e      	movs	r3, #94	; 0x5e
 8018a0a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	3301      	adds	r3, #1
 8018a10:	781b      	ldrb	r3, [r3, #0]
 8018a12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018a16:	b2db      	uxtb	r3, r3
 8018a18:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	3302      	adds	r3, #2
 8018a1e:	781b      	ldrb	r3, [r3, #0]
 8018a20:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	3303      	adds	r3, #3
 8018a26:	781b      	ldrb	r3, [r3, #0]
 8018a28:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8018a2a:	f107 0310 	add.w	r3, r7, #16
 8018a2e:	61fb      	str	r3, [r7, #28]
 8018a30:	e090      	b.n	8018b54 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018a32:	687b      	ldr	r3, [r7, #4]
 8018a34:	681a      	ldr	r2, [r3, #0]
 8018a36:	68fb      	ldr	r3, [r7, #12]
 8018a38:	3304      	adds	r3, #4
 8018a3a:	681b      	ldr	r3, [r3, #0]
 8018a3c:	405a      	eors	r2, r3
 8018a3e:	68fb      	ldr	r3, [r7, #12]
 8018a40:	3308      	adds	r3, #8
 8018a42:	681b      	ldr	r3, [r3, #0]
 8018a44:	4013      	ands	r3, r2
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	d012      	beq.n	8018a70 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	681b      	ldr	r3, [r3, #0]
 8018a4e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018a50:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8018a54:	4293      	cmp	r3, r2
 8018a56:	d00b      	beq.n	8018a70 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8018a58:	68fb      	ldr	r3, [r7, #12]
 8018a5a:	330c      	adds	r3, #12
 8018a5c:	681b      	ldr	r3, [r3, #0]
 8018a5e:	2b00      	cmp	r3, #0
 8018a60:	d003      	beq.n	8018a6a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8018a62:	68fb      	ldr	r3, [r7, #12]
 8018a64:	330c      	adds	r3, #12
 8018a66:	61bb      	str	r3, [r7, #24]
 8018a68:	e002      	b.n	8018a70 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8018a6a:	f06f 0303 	mvn.w	r3, #3
 8018a6e:	e07d      	b.n	8018b6c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018a70:	4b46      	ldr	r3, [pc, #280]	; (8018b8c <etharp_output+0x1fc>)
 8018a72:	781b      	ldrb	r3, [r3, #0]
 8018a74:	4619      	mov	r1, r3
 8018a76:	4a46      	ldr	r2, [pc, #280]	; (8018b90 <etharp_output+0x200>)
 8018a78:	460b      	mov	r3, r1
 8018a7a:	005b      	lsls	r3, r3, #1
 8018a7c:	440b      	add	r3, r1
 8018a7e:	00db      	lsls	r3, r3, #3
 8018a80:	4413      	add	r3, r2
 8018a82:	3314      	adds	r3, #20
 8018a84:	781b      	ldrb	r3, [r3, #0]
 8018a86:	2b01      	cmp	r3, #1
 8018a88:	d925      	bls.n	8018ad6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018a8a:	4b40      	ldr	r3, [pc, #256]	; (8018b8c <etharp_output+0x1fc>)
 8018a8c:	781b      	ldrb	r3, [r3, #0]
 8018a8e:	4619      	mov	r1, r3
 8018a90:	4a3f      	ldr	r2, [pc, #252]	; (8018b90 <etharp_output+0x200>)
 8018a92:	460b      	mov	r3, r1
 8018a94:	005b      	lsls	r3, r3, #1
 8018a96:	440b      	add	r3, r1
 8018a98:	00db      	lsls	r3, r3, #3
 8018a9a:	4413      	add	r3, r2
 8018a9c:	3308      	adds	r3, #8
 8018a9e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018aa0:	68fa      	ldr	r2, [r7, #12]
 8018aa2:	429a      	cmp	r2, r3
 8018aa4:	d117      	bne.n	8018ad6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8018aa6:	69bb      	ldr	r3, [r7, #24]
 8018aa8:	681a      	ldr	r2, [r3, #0]
 8018aaa:	4b38      	ldr	r3, [pc, #224]	; (8018b8c <etharp_output+0x1fc>)
 8018aac:	781b      	ldrb	r3, [r3, #0]
 8018aae:	4618      	mov	r0, r3
 8018ab0:	4937      	ldr	r1, [pc, #220]	; (8018b90 <etharp_output+0x200>)
 8018ab2:	4603      	mov	r3, r0
 8018ab4:	005b      	lsls	r3, r3, #1
 8018ab6:	4403      	add	r3, r0
 8018ab8:	00db      	lsls	r3, r3, #3
 8018aba:	440b      	add	r3, r1
 8018abc:	3304      	adds	r3, #4
 8018abe:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018ac0:	429a      	cmp	r2, r3
 8018ac2:	d108      	bne.n	8018ad6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8018ac4:	4b31      	ldr	r3, [pc, #196]	; (8018b8c <etharp_output+0x1fc>)
 8018ac6:	781b      	ldrb	r3, [r3, #0]
 8018ac8:	461a      	mov	r2, r3
 8018aca:	68b9      	ldr	r1, [r7, #8]
 8018acc:	68f8      	ldr	r0, [r7, #12]
 8018ace:	f7ff fec5 	bl	801885c <etharp_output_to_arp_index>
 8018ad2:	4603      	mov	r3, r0
 8018ad4:	e04a      	b.n	8018b6c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018ad6:	2300      	movs	r3, #0
 8018ad8:	75fb      	strb	r3, [r7, #23]
 8018ada:	e031      	b.n	8018b40 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018adc:	7dfa      	ldrb	r2, [r7, #23]
 8018ade:	492c      	ldr	r1, [pc, #176]	; (8018b90 <etharp_output+0x200>)
 8018ae0:	4613      	mov	r3, r2
 8018ae2:	005b      	lsls	r3, r3, #1
 8018ae4:	4413      	add	r3, r2
 8018ae6:	00db      	lsls	r3, r3, #3
 8018ae8:	440b      	add	r3, r1
 8018aea:	3314      	adds	r3, #20
 8018aec:	781b      	ldrb	r3, [r3, #0]
 8018aee:	2b01      	cmp	r3, #1
 8018af0:	d923      	bls.n	8018b3a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8018af2:	7dfa      	ldrb	r2, [r7, #23]
 8018af4:	4926      	ldr	r1, [pc, #152]	; (8018b90 <etharp_output+0x200>)
 8018af6:	4613      	mov	r3, r2
 8018af8:	005b      	lsls	r3, r3, #1
 8018afa:	4413      	add	r3, r2
 8018afc:	00db      	lsls	r3, r3, #3
 8018afe:	440b      	add	r3, r1
 8018b00:	3308      	adds	r3, #8
 8018b02:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018b04:	68fa      	ldr	r2, [r7, #12]
 8018b06:	429a      	cmp	r2, r3
 8018b08:	d117      	bne.n	8018b3a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8018b0a:	69bb      	ldr	r3, [r7, #24]
 8018b0c:	6819      	ldr	r1, [r3, #0]
 8018b0e:	7dfa      	ldrb	r2, [r7, #23]
 8018b10:	481f      	ldr	r0, [pc, #124]	; (8018b90 <etharp_output+0x200>)
 8018b12:	4613      	mov	r3, r2
 8018b14:	005b      	lsls	r3, r3, #1
 8018b16:	4413      	add	r3, r2
 8018b18:	00db      	lsls	r3, r3, #3
 8018b1a:	4403      	add	r3, r0
 8018b1c:	3304      	adds	r3, #4
 8018b1e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8018b20:	4299      	cmp	r1, r3
 8018b22:	d10a      	bne.n	8018b3a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8018b24:	4a19      	ldr	r2, [pc, #100]	; (8018b8c <etharp_output+0x1fc>)
 8018b26:	7dfb      	ldrb	r3, [r7, #23]
 8018b28:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8018b2a:	7dfb      	ldrb	r3, [r7, #23]
 8018b2c:	461a      	mov	r2, r3
 8018b2e:	68b9      	ldr	r1, [r7, #8]
 8018b30:	68f8      	ldr	r0, [r7, #12]
 8018b32:	f7ff fe93 	bl	801885c <etharp_output_to_arp_index>
 8018b36:	4603      	mov	r3, r0
 8018b38:	e018      	b.n	8018b6c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018b3a:	7dfb      	ldrb	r3, [r7, #23]
 8018b3c:	3301      	adds	r3, #1
 8018b3e:	75fb      	strb	r3, [r7, #23]
 8018b40:	7dfb      	ldrb	r3, [r7, #23]
 8018b42:	2b09      	cmp	r3, #9
 8018b44:	d9ca      	bls.n	8018adc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8018b46:	68ba      	ldr	r2, [r7, #8]
 8018b48:	69b9      	ldr	r1, [r7, #24]
 8018b4a:	68f8      	ldr	r0, [r7, #12]
 8018b4c:	f000 f822 	bl	8018b94 <etharp_query>
 8018b50:	4603      	mov	r3, r0
 8018b52:	e00b      	b.n	8018b6c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8018b54:	68fb      	ldr	r3, [r7, #12]
 8018b56:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8018b5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018b5e:	9300      	str	r3, [sp, #0]
 8018b60:	69fb      	ldr	r3, [r7, #28]
 8018b62:	68b9      	ldr	r1, [r7, #8]
 8018b64:	68f8      	ldr	r0, [r7, #12]
 8018b66:	f001 fdfb 	bl	801a760 <ethernet_output>
 8018b6a:	4603      	mov	r3, r0
}
 8018b6c:	4618      	mov	r0, r3
 8018b6e:	3720      	adds	r7, #32
 8018b70:	46bd      	mov	sp, r7
 8018b72:	bd80      	pop	{r7, pc}
 8018b74:	080205ec 	.word	0x080205ec
 8018b78:	0802073c 	.word	0x0802073c
 8018b7c:	08020664 	.word	0x08020664
 8018b80:	0802078c 	.word	0x0802078c
 8018b84:	0802072c 	.word	0x0802072c
 8018b88:	08020de8 	.word	0x08020de8
 8018b8c:	2000719c 	.word	0x2000719c
 8018b90:	200070ac 	.word	0x200070ac

08018b94 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8018b94:	b580      	push	{r7, lr}
 8018b96:	b08c      	sub	sp, #48	; 0x30
 8018b98:	af02      	add	r7, sp, #8
 8018b9a:	60f8      	str	r0, [r7, #12]
 8018b9c:	60b9      	str	r1, [r7, #8]
 8018b9e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8018ba0:	68fb      	ldr	r3, [r7, #12]
 8018ba2:	3326      	adds	r3, #38	; 0x26
 8018ba4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8018ba6:	23ff      	movs	r3, #255	; 0xff
 8018ba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8018bac:	2300      	movs	r3, #0
 8018bae:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018bb0:	68bb      	ldr	r3, [r7, #8]
 8018bb2:	681b      	ldr	r3, [r3, #0]
 8018bb4:	68f9      	ldr	r1, [r7, #12]
 8018bb6:	4618      	mov	r0, r3
 8018bb8:	f000 fe34 	bl	8019824 <ip4_addr_isbroadcast_u32>
 8018bbc:	4603      	mov	r3, r0
 8018bbe:	2b00      	cmp	r3, #0
 8018bc0:	d10c      	bne.n	8018bdc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018bc2:	68bb      	ldr	r3, [r7, #8]
 8018bc4:	681b      	ldr	r3, [r3, #0]
 8018bc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018bca:	2be0      	cmp	r3, #224	; 0xe0
 8018bcc:	d006      	beq.n	8018bdc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018bce:	68bb      	ldr	r3, [r7, #8]
 8018bd0:	2b00      	cmp	r3, #0
 8018bd2:	d003      	beq.n	8018bdc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8018bd4:	68bb      	ldr	r3, [r7, #8]
 8018bd6:	681b      	ldr	r3, [r3, #0]
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	d102      	bne.n	8018be2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018bdc:	f06f 030f 	mvn.w	r3, #15
 8018be0:	e101      	b.n	8018de6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8018be2:	68fa      	ldr	r2, [r7, #12]
 8018be4:	2101      	movs	r1, #1
 8018be6:	68b8      	ldr	r0, [r7, #8]
 8018be8:	f7ff fb60 	bl	80182ac <etharp_find_entry>
 8018bec:	4603      	mov	r3, r0
 8018bee:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8018bf0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	da02      	bge.n	8018bfe <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8018bf8:	8a7b      	ldrh	r3, [r7, #18]
 8018bfa:	b25b      	sxtb	r3, r3
 8018bfc:	e0f3      	b.n	8018de6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8018bfe:	8a7b      	ldrh	r3, [r7, #18]
 8018c00:	2b7e      	cmp	r3, #126	; 0x7e
 8018c02:	d906      	bls.n	8018c12 <etharp_query+0x7e>
 8018c04:	4b7a      	ldr	r3, [pc, #488]	; (8018df0 <etharp_query+0x25c>)
 8018c06:	f240 32c1 	movw	r2, #961	; 0x3c1
 8018c0a:	497a      	ldr	r1, [pc, #488]	; (8018df4 <etharp_query+0x260>)
 8018c0c:	487a      	ldr	r0, [pc, #488]	; (8018df8 <etharp_query+0x264>)
 8018c0e:	f002 fb2b 	bl	801b268 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8018c12:	8a7b      	ldrh	r3, [r7, #18]
 8018c14:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8018c16:	7c7a      	ldrb	r2, [r7, #17]
 8018c18:	4978      	ldr	r1, [pc, #480]	; (8018dfc <etharp_query+0x268>)
 8018c1a:	4613      	mov	r3, r2
 8018c1c:	005b      	lsls	r3, r3, #1
 8018c1e:	4413      	add	r3, r2
 8018c20:	00db      	lsls	r3, r3, #3
 8018c22:	440b      	add	r3, r1
 8018c24:	3314      	adds	r3, #20
 8018c26:	781b      	ldrb	r3, [r3, #0]
 8018c28:	2b00      	cmp	r3, #0
 8018c2a:	d115      	bne.n	8018c58 <etharp_query+0xc4>
    is_new_entry = 1;
 8018c2c:	2301      	movs	r3, #1
 8018c2e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8018c30:	7c7a      	ldrb	r2, [r7, #17]
 8018c32:	4972      	ldr	r1, [pc, #456]	; (8018dfc <etharp_query+0x268>)
 8018c34:	4613      	mov	r3, r2
 8018c36:	005b      	lsls	r3, r3, #1
 8018c38:	4413      	add	r3, r2
 8018c3a:	00db      	lsls	r3, r3, #3
 8018c3c:	440b      	add	r3, r1
 8018c3e:	3314      	adds	r3, #20
 8018c40:	2201      	movs	r2, #1
 8018c42:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8018c44:	7c7a      	ldrb	r2, [r7, #17]
 8018c46:	496d      	ldr	r1, [pc, #436]	; (8018dfc <etharp_query+0x268>)
 8018c48:	4613      	mov	r3, r2
 8018c4a:	005b      	lsls	r3, r3, #1
 8018c4c:	4413      	add	r3, r2
 8018c4e:	00db      	lsls	r3, r3, #3
 8018c50:	440b      	add	r3, r1
 8018c52:	3308      	adds	r3, #8
 8018c54:	68fa      	ldr	r2, [r7, #12]
 8018c56:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8018c58:	7c7a      	ldrb	r2, [r7, #17]
 8018c5a:	4968      	ldr	r1, [pc, #416]	; (8018dfc <etharp_query+0x268>)
 8018c5c:	4613      	mov	r3, r2
 8018c5e:	005b      	lsls	r3, r3, #1
 8018c60:	4413      	add	r3, r2
 8018c62:	00db      	lsls	r3, r3, #3
 8018c64:	440b      	add	r3, r1
 8018c66:	3314      	adds	r3, #20
 8018c68:	781b      	ldrb	r3, [r3, #0]
 8018c6a:	2b01      	cmp	r3, #1
 8018c6c:	d011      	beq.n	8018c92 <etharp_query+0xfe>
 8018c6e:	7c7a      	ldrb	r2, [r7, #17]
 8018c70:	4962      	ldr	r1, [pc, #392]	; (8018dfc <etharp_query+0x268>)
 8018c72:	4613      	mov	r3, r2
 8018c74:	005b      	lsls	r3, r3, #1
 8018c76:	4413      	add	r3, r2
 8018c78:	00db      	lsls	r3, r3, #3
 8018c7a:	440b      	add	r3, r1
 8018c7c:	3314      	adds	r3, #20
 8018c7e:	781b      	ldrb	r3, [r3, #0]
 8018c80:	2b01      	cmp	r3, #1
 8018c82:	d806      	bhi.n	8018c92 <etharp_query+0xfe>
 8018c84:	4b5a      	ldr	r3, [pc, #360]	; (8018df0 <etharp_query+0x25c>)
 8018c86:	f240 32cd 	movw	r2, #973	; 0x3cd
 8018c8a:	495d      	ldr	r1, [pc, #372]	; (8018e00 <etharp_query+0x26c>)
 8018c8c:	485a      	ldr	r0, [pc, #360]	; (8018df8 <etharp_query+0x264>)
 8018c8e:	f002 faeb 	bl	801b268 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8018c92:	6a3b      	ldr	r3, [r7, #32]
 8018c94:	2b00      	cmp	r3, #0
 8018c96:	d102      	bne.n	8018c9e <etharp_query+0x10a>
 8018c98:	687b      	ldr	r3, [r7, #4]
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d10c      	bne.n	8018cb8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8018c9e:	68b9      	ldr	r1, [r7, #8]
 8018ca0:	68f8      	ldr	r0, [r7, #12]
 8018ca2:	f000 f963 	bl	8018f6c <etharp_request>
 8018ca6:	4603      	mov	r3, r0
 8018ca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	2b00      	cmp	r3, #0
 8018cb0:	d102      	bne.n	8018cb8 <etharp_query+0x124>
      return result;
 8018cb2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018cb6:	e096      	b.n	8018de6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	d106      	bne.n	8018ccc <etharp_query+0x138>
 8018cbe:	4b4c      	ldr	r3, [pc, #304]	; (8018df0 <etharp_query+0x25c>)
 8018cc0:	f240 32e1 	movw	r2, #993	; 0x3e1
 8018cc4:	494f      	ldr	r1, [pc, #316]	; (8018e04 <etharp_query+0x270>)
 8018cc6:	484c      	ldr	r0, [pc, #304]	; (8018df8 <etharp_query+0x264>)
 8018cc8:	f002 face 	bl	801b268 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8018ccc:	7c7a      	ldrb	r2, [r7, #17]
 8018cce:	494b      	ldr	r1, [pc, #300]	; (8018dfc <etharp_query+0x268>)
 8018cd0:	4613      	mov	r3, r2
 8018cd2:	005b      	lsls	r3, r3, #1
 8018cd4:	4413      	add	r3, r2
 8018cd6:	00db      	lsls	r3, r3, #3
 8018cd8:	440b      	add	r3, r1
 8018cda:	3314      	adds	r3, #20
 8018cdc:	781b      	ldrb	r3, [r3, #0]
 8018cde:	2b01      	cmp	r3, #1
 8018ce0:	d917      	bls.n	8018d12 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8018ce2:	4a49      	ldr	r2, [pc, #292]	; (8018e08 <etharp_query+0x274>)
 8018ce4:	7c7b      	ldrb	r3, [r7, #17]
 8018ce6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8018ce8:	7c7a      	ldrb	r2, [r7, #17]
 8018cea:	4613      	mov	r3, r2
 8018cec:	005b      	lsls	r3, r3, #1
 8018cee:	4413      	add	r3, r2
 8018cf0:	00db      	lsls	r3, r3, #3
 8018cf2:	3308      	adds	r3, #8
 8018cf4:	4a41      	ldr	r2, [pc, #260]	; (8018dfc <etharp_query+0x268>)
 8018cf6:	4413      	add	r3, r2
 8018cf8:	3304      	adds	r3, #4
 8018cfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018cfe:	9200      	str	r2, [sp, #0]
 8018d00:	697a      	ldr	r2, [r7, #20]
 8018d02:	6879      	ldr	r1, [r7, #4]
 8018d04:	68f8      	ldr	r0, [r7, #12]
 8018d06:	f001 fd2b 	bl	801a760 <ethernet_output>
 8018d0a:	4603      	mov	r3, r0
 8018d0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018d10:	e067      	b.n	8018de2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018d12:	7c7a      	ldrb	r2, [r7, #17]
 8018d14:	4939      	ldr	r1, [pc, #228]	; (8018dfc <etharp_query+0x268>)
 8018d16:	4613      	mov	r3, r2
 8018d18:	005b      	lsls	r3, r3, #1
 8018d1a:	4413      	add	r3, r2
 8018d1c:	00db      	lsls	r3, r3, #3
 8018d1e:	440b      	add	r3, r1
 8018d20:	3314      	adds	r3, #20
 8018d22:	781b      	ldrb	r3, [r3, #0]
 8018d24:	2b01      	cmp	r3, #1
 8018d26:	d15c      	bne.n	8018de2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8018d28:	2300      	movs	r3, #0
 8018d2a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018d30:	e01c      	b.n	8018d6c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8018d32:	69fb      	ldr	r3, [r7, #28]
 8018d34:	895a      	ldrh	r2, [r3, #10]
 8018d36:	69fb      	ldr	r3, [r7, #28]
 8018d38:	891b      	ldrh	r3, [r3, #8]
 8018d3a:	429a      	cmp	r2, r3
 8018d3c:	d10a      	bne.n	8018d54 <etharp_query+0x1c0>
 8018d3e:	69fb      	ldr	r3, [r7, #28]
 8018d40:	681b      	ldr	r3, [r3, #0]
 8018d42:	2b00      	cmp	r3, #0
 8018d44:	d006      	beq.n	8018d54 <etharp_query+0x1c0>
 8018d46:	4b2a      	ldr	r3, [pc, #168]	; (8018df0 <etharp_query+0x25c>)
 8018d48:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8018d4c:	492f      	ldr	r1, [pc, #188]	; (8018e0c <etharp_query+0x278>)
 8018d4e:	482a      	ldr	r0, [pc, #168]	; (8018df8 <etharp_query+0x264>)
 8018d50:	f002 fa8a 	bl	801b268 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8018d54:	69fb      	ldr	r3, [r7, #28]
 8018d56:	7b1b      	ldrb	r3, [r3, #12]
 8018d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	d002      	beq.n	8018d66 <etharp_query+0x1d2>
        copy_needed = 1;
 8018d60:	2301      	movs	r3, #1
 8018d62:	61bb      	str	r3, [r7, #24]
        break;
 8018d64:	e005      	b.n	8018d72 <etharp_query+0x1de>
      }
      p = p->next;
 8018d66:	69fb      	ldr	r3, [r7, #28]
 8018d68:	681b      	ldr	r3, [r3, #0]
 8018d6a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018d6c:	69fb      	ldr	r3, [r7, #28]
 8018d6e:	2b00      	cmp	r3, #0
 8018d70:	d1df      	bne.n	8018d32 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8018d72:	69bb      	ldr	r3, [r7, #24]
 8018d74:	2b00      	cmp	r3, #0
 8018d76:	d007      	beq.n	8018d88 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8018d78:	687a      	ldr	r2, [r7, #4]
 8018d7a:	f44f 7120 	mov.w	r1, #640	; 0x280
 8018d7e:	200e      	movs	r0, #14
 8018d80:	f7f8 febe 	bl	8011b00 <pbuf_clone>
 8018d84:	61f8      	str	r0, [r7, #28]
 8018d86:	e004      	b.n	8018d92 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8018d8c:	69f8      	ldr	r0, [r7, #28]
 8018d8e:	f7f8 fc69 	bl	8011664 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8018d92:	69fb      	ldr	r3, [r7, #28]
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	d021      	beq.n	8018ddc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8018d98:	7c7a      	ldrb	r2, [r7, #17]
 8018d9a:	4918      	ldr	r1, [pc, #96]	; (8018dfc <etharp_query+0x268>)
 8018d9c:	4613      	mov	r3, r2
 8018d9e:	005b      	lsls	r3, r3, #1
 8018da0:	4413      	add	r3, r2
 8018da2:	00db      	lsls	r3, r3, #3
 8018da4:	440b      	add	r3, r1
 8018da6:	681b      	ldr	r3, [r3, #0]
 8018da8:	2b00      	cmp	r3, #0
 8018daa:	d00a      	beq.n	8018dc2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8018dac:	7c7a      	ldrb	r2, [r7, #17]
 8018dae:	4913      	ldr	r1, [pc, #76]	; (8018dfc <etharp_query+0x268>)
 8018db0:	4613      	mov	r3, r2
 8018db2:	005b      	lsls	r3, r3, #1
 8018db4:	4413      	add	r3, r2
 8018db6:	00db      	lsls	r3, r3, #3
 8018db8:	440b      	add	r3, r1
 8018dba:	681b      	ldr	r3, [r3, #0]
 8018dbc:	4618      	mov	r0, r3
 8018dbe:	f7f8 fbb1 	bl	8011524 <pbuf_free>
      }
      arp_table[i].q = p;
 8018dc2:	7c7a      	ldrb	r2, [r7, #17]
 8018dc4:	490d      	ldr	r1, [pc, #52]	; (8018dfc <etharp_query+0x268>)
 8018dc6:	4613      	mov	r3, r2
 8018dc8:	005b      	lsls	r3, r3, #1
 8018dca:	4413      	add	r3, r2
 8018dcc:	00db      	lsls	r3, r3, #3
 8018dce:	440b      	add	r3, r1
 8018dd0:	69fa      	ldr	r2, [r7, #28]
 8018dd2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8018dd4:	2300      	movs	r3, #0
 8018dd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018dda:	e002      	b.n	8018de2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8018ddc:	23ff      	movs	r3, #255	; 0xff
 8018dde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8018de2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8018de6:	4618      	mov	r0, r3
 8018de8:	3728      	adds	r7, #40	; 0x28
 8018dea:	46bd      	mov	sp, r7
 8018dec:	bd80      	pop	{r7, pc}
 8018dee:	bf00      	nop
 8018df0:	080205ec 	.word	0x080205ec
 8018df4:	08020798 	.word	0x08020798
 8018df8:	08020664 	.word	0x08020664
 8018dfc:	200070ac 	.word	0x200070ac
 8018e00:	080207a8 	.word	0x080207a8
 8018e04:	0802078c 	.word	0x0802078c
 8018e08:	2000719c 	.word	0x2000719c
 8018e0c:	080207d0 	.word	0x080207d0

08018e10 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8018e10:	b580      	push	{r7, lr}
 8018e12:	b08a      	sub	sp, #40	; 0x28
 8018e14:	af02      	add	r7, sp, #8
 8018e16:	60f8      	str	r0, [r7, #12]
 8018e18:	60b9      	str	r1, [r7, #8]
 8018e1a:	607a      	str	r2, [r7, #4]
 8018e1c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8018e1e:	2300      	movs	r3, #0
 8018e20:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018e22:	68fb      	ldr	r3, [r7, #12]
 8018e24:	2b00      	cmp	r3, #0
 8018e26:	d106      	bne.n	8018e36 <etharp_raw+0x26>
 8018e28:	4b3a      	ldr	r3, [pc, #232]	; (8018f14 <etharp_raw+0x104>)
 8018e2a:	f240 4257 	movw	r2, #1111	; 0x457
 8018e2e:	493a      	ldr	r1, [pc, #232]	; (8018f18 <etharp_raw+0x108>)
 8018e30:	483a      	ldr	r0, [pc, #232]	; (8018f1c <etharp_raw+0x10c>)
 8018e32:	f002 fa19 	bl	801b268 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8018e36:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018e3a:	211c      	movs	r1, #28
 8018e3c:	200e      	movs	r0, #14
 8018e3e:	f7f8 f88d 	bl	8010f5c <pbuf_alloc>
 8018e42:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8018e44:	69bb      	ldr	r3, [r7, #24]
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	d102      	bne.n	8018e50 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8018e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8018e4e:	e05d      	b.n	8018f0c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8018e50:	69bb      	ldr	r3, [r7, #24]
 8018e52:	895b      	ldrh	r3, [r3, #10]
 8018e54:	2b1b      	cmp	r3, #27
 8018e56:	d806      	bhi.n	8018e66 <etharp_raw+0x56>
 8018e58:	4b2e      	ldr	r3, [pc, #184]	; (8018f14 <etharp_raw+0x104>)
 8018e5a:	f240 4262 	movw	r2, #1122	; 0x462
 8018e5e:	4930      	ldr	r1, [pc, #192]	; (8018f20 <etharp_raw+0x110>)
 8018e60:	482e      	ldr	r0, [pc, #184]	; (8018f1c <etharp_raw+0x10c>)
 8018e62:	f002 fa01 	bl	801b268 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8018e66:	69bb      	ldr	r3, [r7, #24]
 8018e68:	685b      	ldr	r3, [r3, #4]
 8018e6a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8018e6c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018e6e:	4618      	mov	r0, r3
 8018e70:	f7f6 ff54 	bl	800fd1c <lwip_htons>
 8018e74:	4603      	mov	r3, r0
 8018e76:	461a      	mov	r2, r3
 8018e78:	697b      	ldr	r3, [r7, #20]
 8018e7a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8018e7c:	68fb      	ldr	r3, [r7, #12]
 8018e7e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018e82:	2b06      	cmp	r3, #6
 8018e84:	d006      	beq.n	8018e94 <etharp_raw+0x84>
 8018e86:	4b23      	ldr	r3, [pc, #140]	; (8018f14 <etharp_raw+0x104>)
 8018e88:	f240 4269 	movw	r2, #1129	; 0x469
 8018e8c:	4925      	ldr	r1, [pc, #148]	; (8018f24 <etharp_raw+0x114>)
 8018e8e:	4823      	ldr	r0, [pc, #140]	; (8018f1c <etharp_raw+0x10c>)
 8018e90:	f002 f9ea 	bl	801b268 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8018e94:	697b      	ldr	r3, [r7, #20]
 8018e96:	3308      	adds	r3, #8
 8018e98:	2206      	movs	r2, #6
 8018e9a:	6839      	ldr	r1, [r7, #0]
 8018e9c:	4618      	mov	r0, r3
 8018e9e:	f002 fbec 	bl	801b67a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8018ea2:	697b      	ldr	r3, [r7, #20]
 8018ea4:	3312      	adds	r3, #18
 8018ea6:	2206      	movs	r2, #6
 8018ea8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018eaa:	4618      	mov	r0, r3
 8018eac:	f002 fbe5 	bl	801b67a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8018eb0:	697b      	ldr	r3, [r7, #20]
 8018eb2:	330e      	adds	r3, #14
 8018eb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018eb6:	6812      	ldr	r2, [r2, #0]
 8018eb8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8018eba:	697b      	ldr	r3, [r7, #20]
 8018ebc:	3318      	adds	r3, #24
 8018ebe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018ec0:	6812      	ldr	r2, [r2, #0]
 8018ec2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8018ec4:	697b      	ldr	r3, [r7, #20]
 8018ec6:	2200      	movs	r2, #0
 8018ec8:	701a      	strb	r2, [r3, #0]
 8018eca:	2200      	movs	r2, #0
 8018ecc:	f042 0201 	orr.w	r2, r2, #1
 8018ed0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8018ed2:	697b      	ldr	r3, [r7, #20]
 8018ed4:	2200      	movs	r2, #0
 8018ed6:	f042 0208 	orr.w	r2, r2, #8
 8018eda:	709a      	strb	r2, [r3, #2]
 8018edc:	2200      	movs	r2, #0
 8018ede:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8018ee0:	697b      	ldr	r3, [r7, #20]
 8018ee2:	2206      	movs	r2, #6
 8018ee4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8018ee6:	697b      	ldr	r3, [r7, #20]
 8018ee8:	2204      	movs	r2, #4
 8018eea:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8018eec:	f640 0306 	movw	r3, #2054	; 0x806
 8018ef0:	9300      	str	r3, [sp, #0]
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	68ba      	ldr	r2, [r7, #8]
 8018ef6:	69b9      	ldr	r1, [r7, #24]
 8018ef8:	68f8      	ldr	r0, [r7, #12]
 8018efa:	f001 fc31 	bl	801a760 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8018efe:	69b8      	ldr	r0, [r7, #24]
 8018f00:	f7f8 fb10 	bl	8011524 <pbuf_free>
  p = NULL;
 8018f04:	2300      	movs	r3, #0
 8018f06:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8018f08:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018f0c:	4618      	mov	r0, r3
 8018f0e:	3720      	adds	r7, #32
 8018f10:	46bd      	mov	sp, r7
 8018f12:	bd80      	pop	{r7, pc}
 8018f14:	080205ec 	.word	0x080205ec
 8018f18:	0802073c 	.word	0x0802073c
 8018f1c:	08020664 	.word	0x08020664
 8018f20:	080207ec 	.word	0x080207ec
 8018f24:	08020820 	.word	0x08020820

08018f28 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8018f28:	b580      	push	{r7, lr}
 8018f2a:	b088      	sub	sp, #32
 8018f2c:	af04      	add	r7, sp, #16
 8018f2e:	60f8      	str	r0, [r7, #12]
 8018f30:	60b9      	str	r1, [r7, #8]
 8018f32:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018f34:	68fb      	ldr	r3, [r7, #12]
 8018f36:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8018f3a:	68fb      	ldr	r3, [r7, #12]
 8018f3c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8018f40:	68fb      	ldr	r3, [r7, #12]
 8018f42:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018f44:	2201      	movs	r2, #1
 8018f46:	9203      	str	r2, [sp, #12]
 8018f48:	68ba      	ldr	r2, [r7, #8]
 8018f4a:	9202      	str	r2, [sp, #8]
 8018f4c:	4a06      	ldr	r2, [pc, #24]	; (8018f68 <etharp_request_dst+0x40>)
 8018f4e:	9201      	str	r2, [sp, #4]
 8018f50:	9300      	str	r3, [sp, #0]
 8018f52:	4603      	mov	r3, r0
 8018f54:	687a      	ldr	r2, [r7, #4]
 8018f56:	68f8      	ldr	r0, [r7, #12]
 8018f58:	f7ff ff5a 	bl	8018e10 <etharp_raw>
 8018f5c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8018f5e:	4618      	mov	r0, r3
 8018f60:	3710      	adds	r7, #16
 8018f62:	46bd      	mov	sp, r7
 8018f64:	bd80      	pop	{r7, pc}
 8018f66:	bf00      	nop
 8018f68:	08020df0 	.word	0x08020df0

08018f6c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8018f6c:	b580      	push	{r7, lr}
 8018f6e:	b082      	sub	sp, #8
 8018f70:	af00      	add	r7, sp, #0
 8018f72:	6078      	str	r0, [r7, #4]
 8018f74:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8018f76:	4a05      	ldr	r2, [pc, #20]	; (8018f8c <etharp_request+0x20>)
 8018f78:	6839      	ldr	r1, [r7, #0]
 8018f7a:	6878      	ldr	r0, [r7, #4]
 8018f7c:	f7ff ffd4 	bl	8018f28 <etharp_request_dst>
 8018f80:	4603      	mov	r3, r0
}
 8018f82:	4618      	mov	r0, r3
 8018f84:	3708      	adds	r7, #8
 8018f86:	46bd      	mov	sp, r7
 8018f88:	bd80      	pop	{r7, pc}
 8018f8a:	bf00      	nop
 8018f8c:	08020de8 	.word	0x08020de8

08018f90 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8018f90:	b580      	push	{r7, lr}
 8018f92:	b08e      	sub	sp, #56	; 0x38
 8018f94:	af04      	add	r7, sp, #16
 8018f96:	6078      	str	r0, [r7, #4]
 8018f98:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8018f9a:	4b87      	ldr	r3, [pc, #540]	; (80191b8 <icmp_input+0x228>)
 8018f9c:	689b      	ldr	r3, [r3, #8]
 8018f9e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8018fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fa2:	781b      	ldrb	r3, [r3, #0]
 8018fa4:	f003 030f 	and.w	r3, r3, #15
 8018fa8:	b2db      	uxtb	r3, r3
 8018faa:	009b      	lsls	r3, r3, #2
 8018fac:	b2db      	uxtb	r3, r3
 8018fae:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8018fb0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018fb2:	2b13      	cmp	r3, #19
 8018fb4:	f240 80e8 	bls.w	8019188 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	895b      	ldrh	r3, [r3, #10]
 8018fbc:	2b03      	cmp	r3, #3
 8018fbe:	f240 80e5 	bls.w	801918c <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	685b      	ldr	r3, [r3, #4]
 8018fc6:	781b      	ldrb	r3, [r3, #0]
 8018fc8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8018fcc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8018fd0:	2b00      	cmp	r3, #0
 8018fd2:	f000 80d2 	beq.w	801917a <icmp_input+0x1ea>
 8018fd6:	2b08      	cmp	r3, #8
 8018fd8:	f040 80d2 	bne.w	8019180 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8018fdc:	4b77      	ldr	r3, [pc, #476]	; (80191bc <icmp_input+0x22c>)
 8018fde:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018fe0:	4b75      	ldr	r3, [pc, #468]	; (80191b8 <icmp_input+0x228>)
 8018fe2:	695b      	ldr	r3, [r3, #20]
 8018fe4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018fe8:	2be0      	cmp	r3, #224	; 0xe0
 8018fea:	f000 80d6 	beq.w	801919a <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8018fee:	4b72      	ldr	r3, [pc, #456]	; (80191b8 <icmp_input+0x228>)
 8018ff0:	695b      	ldr	r3, [r3, #20]
 8018ff2:	4a71      	ldr	r2, [pc, #452]	; (80191b8 <icmp_input+0x228>)
 8018ff4:	6812      	ldr	r2, [r2, #0]
 8018ff6:	4611      	mov	r1, r2
 8018ff8:	4618      	mov	r0, r3
 8018ffa:	f000 fc13 	bl	8019824 <ip4_addr_isbroadcast_u32>
 8018ffe:	4603      	mov	r3, r0
 8019000:	2b00      	cmp	r3, #0
 8019002:	f040 80cc 	bne.w	801919e <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8019006:	687b      	ldr	r3, [r7, #4]
 8019008:	891b      	ldrh	r3, [r3, #8]
 801900a:	2b07      	cmp	r3, #7
 801900c:	f240 80c0 	bls.w	8019190 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8019010:	6878      	ldr	r0, [r7, #4]
 8019012:	f7f6 ff20 	bl	800fe56 <inet_chksum_pbuf>
 8019016:	4603      	mov	r3, r0
 8019018:	2b00      	cmp	r3, #0
 801901a:	d003      	beq.n	8019024 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 801901c:	6878      	ldr	r0, [r7, #4]
 801901e:	f7f8 fa81 	bl	8011524 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8019022:	e0c5      	b.n	80191b0 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019024:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019026:	330e      	adds	r3, #14
 8019028:	4619      	mov	r1, r3
 801902a:	6878      	ldr	r0, [r7, #4]
 801902c:	f7f8 f9e4 	bl	80113f8 <pbuf_add_header>
 8019030:	4603      	mov	r3, r0
 8019032:	2b00      	cmp	r3, #0
 8019034:	d04b      	beq.n	80190ce <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	891a      	ldrh	r2, [r3, #8]
 801903a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801903c:	4413      	add	r3, r2
 801903e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	891b      	ldrh	r3, [r3, #8]
 8019044:	8b7a      	ldrh	r2, [r7, #26]
 8019046:	429a      	cmp	r2, r3
 8019048:	f0c0 80ab 	bcc.w	80191a2 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801904c:	8b7b      	ldrh	r3, [r7, #26]
 801904e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019052:	4619      	mov	r1, r3
 8019054:	200e      	movs	r0, #14
 8019056:	f7f7 ff81 	bl	8010f5c <pbuf_alloc>
 801905a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801905c:	697b      	ldr	r3, [r7, #20]
 801905e:	2b00      	cmp	r3, #0
 8019060:	f000 80a1 	beq.w	80191a6 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8019064:	697b      	ldr	r3, [r7, #20]
 8019066:	895b      	ldrh	r3, [r3, #10]
 8019068:	461a      	mov	r2, r3
 801906a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801906c:	3308      	adds	r3, #8
 801906e:	429a      	cmp	r2, r3
 8019070:	d203      	bcs.n	801907a <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8019072:	6978      	ldr	r0, [r7, #20]
 8019074:	f7f8 fa56 	bl	8011524 <pbuf_free>
          goto icmperr;
 8019078:	e096      	b.n	80191a8 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801907a:	697b      	ldr	r3, [r7, #20]
 801907c:	685b      	ldr	r3, [r3, #4]
 801907e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8019080:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019082:	4618      	mov	r0, r3
 8019084:	f002 faf9 	bl	801b67a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8019088:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801908a:	4619      	mov	r1, r3
 801908c:	6978      	ldr	r0, [r7, #20]
 801908e:	f7f8 f9c3 	bl	8011418 <pbuf_remove_header>
 8019092:	4603      	mov	r3, r0
 8019094:	2b00      	cmp	r3, #0
 8019096:	d009      	beq.n	80190ac <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8019098:	4b49      	ldr	r3, [pc, #292]	; (80191c0 <icmp_input+0x230>)
 801909a:	22b6      	movs	r2, #182	; 0xb6
 801909c:	4949      	ldr	r1, [pc, #292]	; (80191c4 <icmp_input+0x234>)
 801909e:	484a      	ldr	r0, [pc, #296]	; (80191c8 <icmp_input+0x238>)
 80190a0:	f002 f8e2 	bl	801b268 <iprintf>
          pbuf_free(r);
 80190a4:	6978      	ldr	r0, [r7, #20]
 80190a6:	f7f8 fa3d 	bl	8011524 <pbuf_free>
          goto icmperr;
 80190aa:	e07d      	b.n	80191a8 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80190ac:	6879      	ldr	r1, [r7, #4]
 80190ae:	6978      	ldr	r0, [r7, #20]
 80190b0:	f7f8 fb50 	bl	8011754 <pbuf_copy>
 80190b4:	4603      	mov	r3, r0
 80190b6:	2b00      	cmp	r3, #0
 80190b8:	d003      	beq.n	80190c2 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80190ba:	6978      	ldr	r0, [r7, #20]
 80190bc:	f7f8 fa32 	bl	8011524 <pbuf_free>
          goto icmperr;
 80190c0:	e072      	b.n	80191a8 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 80190c2:	6878      	ldr	r0, [r7, #4]
 80190c4:	f7f8 fa2e 	bl	8011524 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80190c8:	697b      	ldr	r3, [r7, #20]
 80190ca:	607b      	str	r3, [r7, #4]
 80190cc:	e00f      	b.n	80190ee <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80190ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80190d0:	330e      	adds	r3, #14
 80190d2:	4619      	mov	r1, r3
 80190d4:	6878      	ldr	r0, [r7, #4]
 80190d6:	f7f8 f99f 	bl	8011418 <pbuf_remove_header>
 80190da:	4603      	mov	r3, r0
 80190dc:	2b00      	cmp	r3, #0
 80190de:	d006      	beq.n	80190ee <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80190e0:	4b37      	ldr	r3, [pc, #220]	; (80191c0 <icmp_input+0x230>)
 80190e2:	22c7      	movs	r2, #199	; 0xc7
 80190e4:	4939      	ldr	r1, [pc, #228]	; (80191cc <icmp_input+0x23c>)
 80190e6:	4838      	ldr	r0, [pc, #224]	; (80191c8 <icmp_input+0x238>)
 80190e8:	f002 f8be 	bl	801b268 <iprintf>
          goto icmperr;
 80190ec:	e05c      	b.n	80191a8 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	685b      	ldr	r3, [r3, #4]
 80190f2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80190f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80190f6:	4619      	mov	r1, r3
 80190f8:	6878      	ldr	r0, [r7, #4]
 80190fa:	f7f8 f97d 	bl	80113f8 <pbuf_add_header>
 80190fe:	4603      	mov	r3, r0
 8019100:	2b00      	cmp	r3, #0
 8019102:	d13c      	bne.n	801917e <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8019104:	687b      	ldr	r3, [r7, #4]
 8019106:	685b      	ldr	r3, [r3, #4]
 8019108:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801910a:	69fb      	ldr	r3, [r7, #28]
 801910c:	681a      	ldr	r2, [r3, #0]
 801910e:	68fb      	ldr	r3, [r7, #12]
 8019110:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8019112:	4b29      	ldr	r3, [pc, #164]	; (80191b8 <icmp_input+0x228>)
 8019114:	691a      	ldr	r2, [r3, #16]
 8019116:	68fb      	ldr	r3, [r7, #12]
 8019118:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801911a:	693b      	ldr	r3, [r7, #16]
 801911c:	2200      	movs	r2, #0
 801911e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8019120:	693b      	ldr	r3, [r7, #16]
 8019122:	885b      	ldrh	r3, [r3, #2]
 8019124:	b29b      	uxth	r3, r3
 8019126:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801912a:	4293      	cmp	r3, r2
 801912c:	d907      	bls.n	801913e <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801912e:	693b      	ldr	r3, [r7, #16]
 8019130:	885b      	ldrh	r3, [r3, #2]
 8019132:	b29b      	uxth	r3, r3
 8019134:	3309      	adds	r3, #9
 8019136:	b29a      	uxth	r2, r3
 8019138:	693b      	ldr	r3, [r7, #16]
 801913a:	805a      	strh	r2, [r3, #2]
 801913c:	e006      	b.n	801914c <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801913e:	693b      	ldr	r3, [r7, #16]
 8019140:	885b      	ldrh	r3, [r3, #2]
 8019142:	b29b      	uxth	r3, r3
 8019144:	3308      	adds	r3, #8
 8019146:	b29a      	uxth	r2, r3
 8019148:	693b      	ldr	r3, [r7, #16]
 801914a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801914c:	68fb      	ldr	r3, [r7, #12]
 801914e:	22ff      	movs	r2, #255	; 0xff
 8019150:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8019152:	68fb      	ldr	r3, [r7, #12]
 8019154:	2200      	movs	r2, #0
 8019156:	729a      	strb	r2, [r3, #10]
 8019158:	2200      	movs	r2, #0
 801915a:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801915c:	683b      	ldr	r3, [r7, #0]
 801915e:	9302      	str	r3, [sp, #8]
 8019160:	2301      	movs	r3, #1
 8019162:	9301      	str	r3, [sp, #4]
 8019164:	2300      	movs	r3, #0
 8019166:	9300      	str	r3, [sp, #0]
 8019168:	23ff      	movs	r3, #255	; 0xff
 801916a:	2200      	movs	r2, #0
 801916c:	69f9      	ldr	r1, [r7, #28]
 801916e:	6878      	ldr	r0, [r7, #4]
 8019170:	f000 fa80 	bl	8019674 <ip4_output_if>
 8019174:	4603      	mov	r3, r0
 8019176:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8019178:	e001      	b.n	801917e <icmp_input+0x1ee>
      break;
 801917a:	bf00      	nop
 801917c:	e000      	b.n	8019180 <icmp_input+0x1f0>
      break;
 801917e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8019180:	6878      	ldr	r0, [r7, #4]
 8019182:	f7f8 f9cf 	bl	8011524 <pbuf_free>
  return;
 8019186:	e013      	b.n	80191b0 <icmp_input+0x220>
    goto lenerr;
 8019188:	bf00      	nop
 801918a:	e002      	b.n	8019192 <icmp_input+0x202>
    goto lenerr;
 801918c:	bf00      	nop
 801918e:	e000      	b.n	8019192 <icmp_input+0x202>
        goto lenerr;
 8019190:	bf00      	nop
lenerr:
  pbuf_free(p);
 8019192:	6878      	ldr	r0, [r7, #4]
 8019194:	f7f8 f9c6 	bl	8011524 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019198:	e00a      	b.n	80191b0 <icmp_input+0x220>
        goto icmperr;
 801919a:	bf00      	nop
 801919c:	e004      	b.n	80191a8 <icmp_input+0x218>
        goto icmperr;
 801919e:	bf00      	nop
 80191a0:	e002      	b.n	80191a8 <icmp_input+0x218>
          goto icmperr;
 80191a2:	bf00      	nop
 80191a4:	e000      	b.n	80191a8 <icmp_input+0x218>
          goto icmperr;
 80191a6:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80191a8:	6878      	ldr	r0, [r7, #4]
 80191aa:	f7f8 f9bb 	bl	8011524 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80191ae:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80191b0:	3728      	adds	r7, #40	; 0x28
 80191b2:	46bd      	mov	sp, r7
 80191b4:	bd80      	pop	{r7, pc}
 80191b6:	bf00      	nop
 80191b8:	20000770 	.word	0x20000770
 80191bc:	20000784 	.word	0x20000784
 80191c0:	08020864 	.word	0x08020864
 80191c4:	0802089c 	.word	0x0802089c
 80191c8:	080208d4 	.word	0x080208d4
 80191cc:	080208fc 	.word	0x080208fc

080191d0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80191d0:	b580      	push	{r7, lr}
 80191d2:	b082      	sub	sp, #8
 80191d4:	af00      	add	r7, sp, #0
 80191d6:	6078      	str	r0, [r7, #4]
 80191d8:	460b      	mov	r3, r1
 80191da:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80191dc:	78fb      	ldrb	r3, [r7, #3]
 80191de:	461a      	mov	r2, r3
 80191e0:	2103      	movs	r1, #3
 80191e2:	6878      	ldr	r0, [r7, #4]
 80191e4:	f000 f814 	bl	8019210 <icmp_send_response>
}
 80191e8:	bf00      	nop
 80191ea:	3708      	adds	r7, #8
 80191ec:	46bd      	mov	sp, r7
 80191ee:	bd80      	pop	{r7, pc}

080191f0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80191f0:	b580      	push	{r7, lr}
 80191f2:	b082      	sub	sp, #8
 80191f4:	af00      	add	r7, sp, #0
 80191f6:	6078      	str	r0, [r7, #4]
 80191f8:	460b      	mov	r3, r1
 80191fa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80191fc:	78fb      	ldrb	r3, [r7, #3]
 80191fe:	461a      	mov	r2, r3
 8019200:	210b      	movs	r1, #11
 8019202:	6878      	ldr	r0, [r7, #4]
 8019204:	f000 f804 	bl	8019210 <icmp_send_response>
}
 8019208:	bf00      	nop
 801920a:	3708      	adds	r7, #8
 801920c:	46bd      	mov	sp, r7
 801920e:	bd80      	pop	{r7, pc}

08019210 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8019210:	b580      	push	{r7, lr}
 8019212:	b08c      	sub	sp, #48	; 0x30
 8019214:	af04      	add	r7, sp, #16
 8019216:	6078      	str	r0, [r7, #4]
 8019218:	460b      	mov	r3, r1
 801921a:	70fb      	strb	r3, [r7, #3]
 801921c:	4613      	mov	r3, r2
 801921e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8019220:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019224:	2124      	movs	r1, #36	; 0x24
 8019226:	2022      	movs	r0, #34	; 0x22
 8019228:	f7f7 fe98 	bl	8010f5c <pbuf_alloc>
 801922c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801922e:	69fb      	ldr	r3, [r7, #28]
 8019230:	2b00      	cmp	r3, #0
 8019232:	d056      	beq.n	80192e2 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8019234:	69fb      	ldr	r3, [r7, #28]
 8019236:	895b      	ldrh	r3, [r3, #10]
 8019238:	2b23      	cmp	r3, #35	; 0x23
 801923a:	d806      	bhi.n	801924a <icmp_send_response+0x3a>
 801923c:	4b2b      	ldr	r3, [pc, #172]	; (80192ec <icmp_send_response+0xdc>)
 801923e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8019242:	492b      	ldr	r1, [pc, #172]	; (80192f0 <icmp_send_response+0xe0>)
 8019244:	482b      	ldr	r0, [pc, #172]	; (80192f4 <icmp_send_response+0xe4>)
 8019246:	f002 f80f 	bl	801b268 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801924a:	687b      	ldr	r3, [r7, #4]
 801924c:	685b      	ldr	r3, [r3, #4]
 801924e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8019250:	69fb      	ldr	r3, [r7, #28]
 8019252:	685b      	ldr	r3, [r3, #4]
 8019254:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8019256:	697b      	ldr	r3, [r7, #20]
 8019258:	78fa      	ldrb	r2, [r7, #3]
 801925a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801925c:	697b      	ldr	r3, [r7, #20]
 801925e:	78ba      	ldrb	r2, [r7, #2]
 8019260:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8019262:	697b      	ldr	r3, [r7, #20]
 8019264:	2200      	movs	r2, #0
 8019266:	711a      	strb	r2, [r3, #4]
 8019268:	2200      	movs	r2, #0
 801926a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801926c:	697b      	ldr	r3, [r7, #20]
 801926e:	2200      	movs	r2, #0
 8019270:	719a      	strb	r2, [r3, #6]
 8019272:	2200      	movs	r2, #0
 8019274:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8019276:	69fb      	ldr	r3, [r7, #28]
 8019278:	685b      	ldr	r3, [r3, #4]
 801927a:	f103 0008 	add.w	r0, r3, #8
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	685b      	ldr	r3, [r3, #4]
 8019282:	221c      	movs	r2, #28
 8019284:	4619      	mov	r1, r3
 8019286:	f002 f9f8 	bl	801b67a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801928a:	69bb      	ldr	r3, [r7, #24]
 801928c:	68db      	ldr	r3, [r3, #12]
 801928e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8019290:	f107 030c 	add.w	r3, r7, #12
 8019294:	4618      	mov	r0, r3
 8019296:	f000 f82f 	bl	80192f8 <ip4_route>
 801929a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801929c:	693b      	ldr	r3, [r7, #16]
 801929e:	2b00      	cmp	r3, #0
 80192a0:	d01b      	beq.n	80192da <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80192a2:	697b      	ldr	r3, [r7, #20]
 80192a4:	2200      	movs	r2, #0
 80192a6:	709a      	strb	r2, [r3, #2]
 80192a8:	2200      	movs	r2, #0
 80192aa:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80192ac:	69fb      	ldr	r3, [r7, #28]
 80192ae:	895b      	ldrh	r3, [r3, #10]
 80192b0:	4619      	mov	r1, r3
 80192b2:	6978      	ldr	r0, [r7, #20]
 80192b4:	f7f6 fdbd 	bl	800fe32 <inet_chksum>
 80192b8:	4603      	mov	r3, r0
 80192ba:	461a      	mov	r2, r3
 80192bc:	697b      	ldr	r3, [r7, #20]
 80192be:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80192c0:	f107 020c 	add.w	r2, r7, #12
 80192c4:	693b      	ldr	r3, [r7, #16]
 80192c6:	9302      	str	r3, [sp, #8]
 80192c8:	2301      	movs	r3, #1
 80192ca:	9301      	str	r3, [sp, #4]
 80192cc:	2300      	movs	r3, #0
 80192ce:	9300      	str	r3, [sp, #0]
 80192d0:	23ff      	movs	r3, #255	; 0xff
 80192d2:	2100      	movs	r1, #0
 80192d4:	69f8      	ldr	r0, [r7, #28]
 80192d6:	f000 f9cd 	bl	8019674 <ip4_output_if>
  }
  pbuf_free(q);
 80192da:	69f8      	ldr	r0, [r7, #28]
 80192dc:	f7f8 f922 	bl	8011524 <pbuf_free>
 80192e0:	e000      	b.n	80192e4 <icmp_send_response+0xd4>
    return;
 80192e2:	bf00      	nop
}
 80192e4:	3720      	adds	r7, #32
 80192e6:	46bd      	mov	sp, r7
 80192e8:	bd80      	pop	{r7, pc}
 80192ea:	bf00      	nop
 80192ec:	08020864 	.word	0x08020864
 80192f0:	08020930 	.word	0x08020930
 80192f4:	080208d4 	.word	0x080208d4

080192f8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80192f8:	b480      	push	{r7}
 80192fa:	b085      	sub	sp, #20
 80192fc:	af00      	add	r7, sp, #0
 80192fe:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8019300:	4b33      	ldr	r3, [pc, #204]	; (80193d0 <ip4_route+0xd8>)
 8019302:	681b      	ldr	r3, [r3, #0]
 8019304:	60fb      	str	r3, [r7, #12]
 8019306:	e036      	b.n	8019376 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019308:	68fb      	ldr	r3, [r7, #12]
 801930a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801930e:	f003 0301 	and.w	r3, r3, #1
 8019312:	b2db      	uxtb	r3, r3
 8019314:	2b00      	cmp	r3, #0
 8019316:	d02b      	beq.n	8019370 <ip4_route+0x78>
 8019318:	68fb      	ldr	r3, [r7, #12]
 801931a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801931e:	089b      	lsrs	r3, r3, #2
 8019320:	f003 0301 	and.w	r3, r3, #1
 8019324:	b2db      	uxtb	r3, r3
 8019326:	2b00      	cmp	r3, #0
 8019328:	d022      	beq.n	8019370 <ip4_route+0x78>
 801932a:	68fb      	ldr	r3, [r7, #12]
 801932c:	3304      	adds	r3, #4
 801932e:	681b      	ldr	r3, [r3, #0]
 8019330:	2b00      	cmp	r3, #0
 8019332:	d01d      	beq.n	8019370 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8019334:	687b      	ldr	r3, [r7, #4]
 8019336:	681a      	ldr	r2, [r3, #0]
 8019338:	68fb      	ldr	r3, [r7, #12]
 801933a:	3304      	adds	r3, #4
 801933c:	681b      	ldr	r3, [r3, #0]
 801933e:	405a      	eors	r2, r3
 8019340:	68fb      	ldr	r3, [r7, #12]
 8019342:	3308      	adds	r3, #8
 8019344:	681b      	ldr	r3, [r3, #0]
 8019346:	4013      	ands	r3, r2
 8019348:	2b00      	cmp	r3, #0
 801934a:	d101      	bne.n	8019350 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801934c:	68fb      	ldr	r3, [r7, #12]
 801934e:	e038      	b.n	80193c2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8019350:	68fb      	ldr	r3, [r7, #12]
 8019352:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019356:	f003 0302 	and.w	r3, r3, #2
 801935a:	2b00      	cmp	r3, #0
 801935c:	d108      	bne.n	8019370 <ip4_route+0x78>
 801935e:	687b      	ldr	r3, [r7, #4]
 8019360:	681a      	ldr	r2, [r3, #0]
 8019362:	68fb      	ldr	r3, [r7, #12]
 8019364:	330c      	adds	r3, #12
 8019366:	681b      	ldr	r3, [r3, #0]
 8019368:	429a      	cmp	r2, r3
 801936a:	d101      	bne.n	8019370 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801936c:	68fb      	ldr	r3, [r7, #12]
 801936e:	e028      	b.n	80193c2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8019370:	68fb      	ldr	r3, [r7, #12]
 8019372:	681b      	ldr	r3, [r3, #0]
 8019374:	60fb      	str	r3, [r7, #12]
 8019376:	68fb      	ldr	r3, [r7, #12]
 8019378:	2b00      	cmp	r3, #0
 801937a:	d1c5      	bne.n	8019308 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801937c:	4b15      	ldr	r3, [pc, #84]	; (80193d4 <ip4_route+0xdc>)
 801937e:	681b      	ldr	r3, [r3, #0]
 8019380:	2b00      	cmp	r3, #0
 8019382:	d01a      	beq.n	80193ba <ip4_route+0xc2>
 8019384:	4b13      	ldr	r3, [pc, #76]	; (80193d4 <ip4_route+0xdc>)
 8019386:	681b      	ldr	r3, [r3, #0]
 8019388:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801938c:	f003 0301 	and.w	r3, r3, #1
 8019390:	2b00      	cmp	r3, #0
 8019392:	d012      	beq.n	80193ba <ip4_route+0xc2>
 8019394:	4b0f      	ldr	r3, [pc, #60]	; (80193d4 <ip4_route+0xdc>)
 8019396:	681b      	ldr	r3, [r3, #0]
 8019398:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801939c:	f003 0304 	and.w	r3, r3, #4
 80193a0:	2b00      	cmp	r3, #0
 80193a2:	d00a      	beq.n	80193ba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80193a4:	4b0b      	ldr	r3, [pc, #44]	; (80193d4 <ip4_route+0xdc>)
 80193a6:	681b      	ldr	r3, [r3, #0]
 80193a8:	3304      	adds	r3, #4
 80193aa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80193ac:	2b00      	cmp	r3, #0
 80193ae:	d004      	beq.n	80193ba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80193b0:	687b      	ldr	r3, [r7, #4]
 80193b2:	681b      	ldr	r3, [r3, #0]
 80193b4:	b2db      	uxtb	r3, r3
 80193b6:	2b7f      	cmp	r3, #127	; 0x7f
 80193b8:	d101      	bne.n	80193be <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80193ba:	2300      	movs	r3, #0
 80193bc:	e001      	b.n	80193c2 <ip4_route+0xca>
  }

  return netif_default;
 80193be:	4b05      	ldr	r3, [pc, #20]	; (80193d4 <ip4_route+0xdc>)
 80193c0:	681b      	ldr	r3, [r3, #0]
}
 80193c2:	4618      	mov	r0, r3
 80193c4:	3714      	adds	r7, #20
 80193c6:	46bd      	mov	sp, r7
 80193c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193cc:	4770      	bx	lr
 80193ce:	bf00      	nop
 80193d0:	20007040 	.word	0x20007040
 80193d4:	20007044 	.word	0x20007044

080193d8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80193d8:	b580      	push	{r7, lr}
 80193da:	b082      	sub	sp, #8
 80193dc:	af00      	add	r7, sp, #0
 80193de:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80193e6:	f003 0301 	and.w	r3, r3, #1
 80193ea:	b2db      	uxtb	r3, r3
 80193ec:	2b00      	cmp	r3, #0
 80193ee:	d016      	beq.n	801941e <ip4_input_accept+0x46>
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	3304      	adds	r3, #4
 80193f4:	681b      	ldr	r3, [r3, #0]
 80193f6:	2b00      	cmp	r3, #0
 80193f8:	d011      	beq.n	801941e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80193fa:	4b0b      	ldr	r3, [pc, #44]	; (8019428 <ip4_input_accept+0x50>)
 80193fc:	695a      	ldr	r2, [r3, #20]
 80193fe:	687b      	ldr	r3, [r7, #4]
 8019400:	3304      	adds	r3, #4
 8019402:	681b      	ldr	r3, [r3, #0]
 8019404:	429a      	cmp	r2, r3
 8019406:	d008      	beq.n	801941a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8019408:	4b07      	ldr	r3, [pc, #28]	; (8019428 <ip4_input_accept+0x50>)
 801940a:	695b      	ldr	r3, [r3, #20]
 801940c:	6879      	ldr	r1, [r7, #4]
 801940e:	4618      	mov	r0, r3
 8019410:	f000 fa08 	bl	8019824 <ip4_addr_isbroadcast_u32>
 8019414:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019416:	2b00      	cmp	r3, #0
 8019418:	d001      	beq.n	801941e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801941a:	2301      	movs	r3, #1
 801941c:	e000      	b.n	8019420 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801941e:	2300      	movs	r3, #0
}
 8019420:	4618      	mov	r0, r3
 8019422:	3708      	adds	r7, #8
 8019424:	46bd      	mov	sp, r7
 8019426:	bd80      	pop	{r7, pc}
 8019428:	20000770 	.word	0x20000770

0801942c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801942c:	b580      	push	{r7, lr}
 801942e:	b086      	sub	sp, #24
 8019430:	af00      	add	r7, sp, #0
 8019432:	6078      	str	r0, [r7, #4]
 8019434:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8019436:	687b      	ldr	r3, [r7, #4]
 8019438:	685b      	ldr	r3, [r3, #4]
 801943a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801943c:	697b      	ldr	r3, [r7, #20]
 801943e:	781b      	ldrb	r3, [r3, #0]
 8019440:	091b      	lsrs	r3, r3, #4
 8019442:	b2db      	uxtb	r3, r3
 8019444:	2b04      	cmp	r3, #4
 8019446:	d004      	beq.n	8019452 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8019448:	6878      	ldr	r0, [r7, #4]
 801944a:	f7f8 f86b 	bl	8011524 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801944e:	2300      	movs	r3, #0
 8019450:	e107      	b.n	8019662 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8019452:	697b      	ldr	r3, [r7, #20]
 8019454:	781b      	ldrb	r3, [r3, #0]
 8019456:	f003 030f 	and.w	r3, r3, #15
 801945a:	b2db      	uxtb	r3, r3
 801945c:	009b      	lsls	r3, r3, #2
 801945e:	b2db      	uxtb	r3, r3
 8019460:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8019462:	697b      	ldr	r3, [r7, #20]
 8019464:	885b      	ldrh	r3, [r3, #2]
 8019466:	b29b      	uxth	r3, r3
 8019468:	4618      	mov	r0, r3
 801946a:	f7f6 fc57 	bl	800fd1c <lwip_htons>
 801946e:	4603      	mov	r3, r0
 8019470:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8019472:	687b      	ldr	r3, [r7, #4]
 8019474:	891b      	ldrh	r3, [r3, #8]
 8019476:	89ba      	ldrh	r2, [r7, #12]
 8019478:	429a      	cmp	r2, r3
 801947a:	d204      	bcs.n	8019486 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801947c:	89bb      	ldrh	r3, [r7, #12]
 801947e:	4619      	mov	r1, r3
 8019480:	6878      	ldr	r0, [r7, #4]
 8019482:	f7f7 fecb 	bl	801121c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8019486:	687b      	ldr	r3, [r7, #4]
 8019488:	895b      	ldrh	r3, [r3, #10]
 801948a:	89fa      	ldrh	r2, [r7, #14]
 801948c:	429a      	cmp	r2, r3
 801948e:	d807      	bhi.n	80194a0 <ip4_input+0x74>
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	891b      	ldrh	r3, [r3, #8]
 8019494:	89ba      	ldrh	r2, [r7, #12]
 8019496:	429a      	cmp	r2, r3
 8019498:	d802      	bhi.n	80194a0 <ip4_input+0x74>
 801949a:	89fb      	ldrh	r3, [r7, #14]
 801949c:	2b13      	cmp	r3, #19
 801949e:	d804      	bhi.n	80194aa <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80194a0:	6878      	ldr	r0, [r7, #4]
 80194a2:	f7f8 f83f 	bl	8011524 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80194a6:	2300      	movs	r3, #0
 80194a8:	e0db      	b.n	8019662 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80194aa:	697b      	ldr	r3, [r7, #20]
 80194ac:	691b      	ldr	r3, [r3, #16]
 80194ae:	4a6f      	ldr	r2, [pc, #444]	; (801966c <ip4_input+0x240>)
 80194b0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80194b2:	697b      	ldr	r3, [r7, #20]
 80194b4:	68db      	ldr	r3, [r3, #12]
 80194b6:	4a6d      	ldr	r2, [pc, #436]	; (801966c <ip4_input+0x240>)
 80194b8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80194ba:	4b6c      	ldr	r3, [pc, #432]	; (801966c <ip4_input+0x240>)
 80194bc:	695b      	ldr	r3, [r3, #20]
 80194be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80194c2:	2be0      	cmp	r3, #224	; 0xe0
 80194c4:	d112      	bne.n	80194ec <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80194c6:	683b      	ldr	r3, [r7, #0]
 80194c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80194cc:	f003 0301 	and.w	r3, r3, #1
 80194d0:	b2db      	uxtb	r3, r3
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	d007      	beq.n	80194e6 <ip4_input+0xba>
 80194d6:	683b      	ldr	r3, [r7, #0]
 80194d8:	3304      	adds	r3, #4
 80194da:	681b      	ldr	r3, [r3, #0]
 80194dc:	2b00      	cmp	r3, #0
 80194de:	d002      	beq.n	80194e6 <ip4_input+0xba>
      netif = inp;
 80194e0:	683b      	ldr	r3, [r7, #0]
 80194e2:	613b      	str	r3, [r7, #16]
 80194e4:	e02a      	b.n	801953c <ip4_input+0x110>
    } else {
      netif = NULL;
 80194e6:	2300      	movs	r3, #0
 80194e8:	613b      	str	r3, [r7, #16]
 80194ea:	e027      	b.n	801953c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80194ec:	6838      	ldr	r0, [r7, #0]
 80194ee:	f7ff ff73 	bl	80193d8 <ip4_input_accept>
 80194f2:	4603      	mov	r3, r0
 80194f4:	2b00      	cmp	r3, #0
 80194f6:	d002      	beq.n	80194fe <ip4_input+0xd2>
      netif = inp;
 80194f8:	683b      	ldr	r3, [r7, #0]
 80194fa:	613b      	str	r3, [r7, #16]
 80194fc:	e01e      	b.n	801953c <ip4_input+0x110>
    } else {
      netif = NULL;
 80194fe:	2300      	movs	r3, #0
 8019500:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8019502:	4b5a      	ldr	r3, [pc, #360]	; (801966c <ip4_input+0x240>)
 8019504:	695b      	ldr	r3, [r3, #20]
 8019506:	b2db      	uxtb	r3, r3
 8019508:	2b7f      	cmp	r3, #127	; 0x7f
 801950a:	d017      	beq.n	801953c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801950c:	4b58      	ldr	r3, [pc, #352]	; (8019670 <ip4_input+0x244>)
 801950e:	681b      	ldr	r3, [r3, #0]
 8019510:	613b      	str	r3, [r7, #16]
 8019512:	e00e      	b.n	8019532 <ip4_input+0x106>
          if (netif == inp) {
 8019514:	693a      	ldr	r2, [r7, #16]
 8019516:	683b      	ldr	r3, [r7, #0]
 8019518:	429a      	cmp	r2, r3
 801951a:	d006      	beq.n	801952a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801951c:	6938      	ldr	r0, [r7, #16]
 801951e:	f7ff ff5b 	bl	80193d8 <ip4_input_accept>
 8019522:	4603      	mov	r3, r0
 8019524:	2b00      	cmp	r3, #0
 8019526:	d108      	bne.n	801953a <ip4_input+0x10e>
 8019528:	e000      	b.n	801952c <ip4_input+0x100>
            continue;
 801952a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801952c:	693b      	ldr	r3, [r7, #16]
 801952e:	681b      	ldr	r3, [r3, #0]
 8019530:	613b      	str	r3, [r7, #16]
 8019532:	693b      	ldr	r3, [r7, #16]
 8019534:	2b00      	cmp	r3, #0
 8019536:	d1ed      	bne.n	8019514 <ip4_input+0xe8>
 8019538:	e000      	b.n	801953c <ip4_input+0x110>
            break;
 801953a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801953c:	4b4b      	ldr	r3, [pc, #300]	; (801966c <ip4_input+0x240>)
 801953e:	691b      	ldr	r3, [r3, #16]
 8019540:	6839      	ldr	r1, [r7, #0]
 8019542:	4618      	mov	r0, r3
 8019544:	f000 f96e 	bl	8019824 <ip4_addr_isbroadcast_u32>
 8019548:	4603      	mov	r3, r0
 801954a:	2b00      	cmp	r3, #0
 801954c:	d105      	bne.n	801955a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801954e:	4b47      	ldr	r3, [pc, #284]	; (801966c <ip4_input+0x240>)
 8019550:	691b      	ldr	r3, [r3, #16]
 8019552:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019556:	2be0      	cmp	r3, #224	; 0xe0
 8019558:	d104      	bne.n	8019564 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801955a:	6878      	ldr	r0, [r7, #4]
 801955c:	f7f7 ffe2 	bl	8011524 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8019560:	2300      	movs	r3, #0
 8019562:	e07e      	b.n	8019662 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8019564:	693b      	ldr	r3, [r7, #16]
 8019566:	2b00      	cmp	r3, #0
 8019568:	d104      	bne.n	8019574 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801956a:	6878      	ldr	r0, [r7, #4]
 801956c:	f7f7 ffda 	bl	8011524 <pbuf_free>
    return ERR_OK;
 8019570:	2300      	movs	r3, #0
 8019572:	e076      	b.n	8019662 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8019574:	697b      	ldr	r3, [r7, #20]
 8019576:	88db      	ldrh	r3, [r3, #6]
 8019578:	b29b      	uxth	r3, r3
 801957a:	461a      	mov	r2, r3
 801957c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8019580:	4013      	ands	r3, r2
 8019582:	2b00      	cmp	r3, #0
 8019584:	d00b      	beq.n	801959e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8019586:	6878      	ldr	r0, [r7, #4]
 8019588:	f000 fd22 	bl	8019fd0 <ip4_reass>
 801958c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801958e:	687b      	ldr	r3, [r7, #4]
 8019590:	2b00      	cmp	r3, #0
 8019592:	d101      	bne.n	8019598 <ip4_input+0x16c>
      return ERR_OK;
 8019594:	2300      	movs	r3, #0
 8019596:	e064      	b.n	8019662 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	685b      	ldr	r3, [r3, #4]
 801959c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801959e:	4a33      	ldr	r2, [pc, #204]	; (801966c <ip4_input+0x240>)
 80195a0:	693b      	ldr	r3, [r7, #16]
 80195a2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80195a4:	4a31      	ldr	r2, [pc, #196]	; (801966c <ip4_input+0x240>)
 80195a6:	683b      	ldr	r3, [r7, #0]
 80195a8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80195aa:	4a30      	ldr	r2, [pc, #192]	; (801966c <ip4_input+0x240>)
 80195ac:	697b      	ldr	r3, [r7, #20]
 80195ae:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80195b0:	697b      	ldr	r3, [r7, #20]
 80195b2:	781b      	ldrb	r3, [r3, #0]
 80195b4:	f003 030f 	and.w	r3, r3, #15
 80195b8:	b2db      	uxtb	r3, r3
 80195ba:	009b      	lsls	r3, r3, #2
 80195bc:	b2db      	uxtb	r3, r3
 80195be:	b29a      	uxth	r2, r3
 80195c0:	4b2a      	ldr	r3, [pc, #168]	; (801966c <ip4_input+0x240>)
 80195c2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80195c4:	89fb      	ldrh	r3, [r7, #14]
 80195c6:	4619      	mov	r1, r3
 80195c8:	6878      	ldr	r0, [r7, #4]
 80195ca:	f7f7 ff25 	bl	8011418 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80195ce:	697b      	ldr	r3, [r7, #20]
 80195d0:	7a5b      	ldrb	r3, [r3, #9]
 80195d2:	2b11      	cmp	r3, #17
 80195d4:	d006      	beq.n	80195e4 <ip4_input+0x1b8>
 80195d6:	2b11      	cmp	r3, #17
 80195d8:	dc13      	bgt.n	8019602 <ip4_input+0x1d6>
 80195da:	2b01      	cmp	r3, #1
 80195dc:	d00c      	beq.n	80195f8 <ip4_input+0x1cc>
 80195de:	2b06      	cmp	r3, #6
 80195e0:	d005      	beq.n	80195ee <ip4_input+0x1c2>
 80195e2:	e00e      	b.n	8019602 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80195e4:	6839      	ldr	r1, [r7, #0]
 80195e6:	6878      	ldr	r0, [r7, #4]
 80195e8:	f7fe fc42 	bl	8017e70 <udp_input>
        break;
 80195ec:	e026      	b.n	801963c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80195ee:	6839      	ldr	r1, [r7, #0]
 80195f0:	6878      	ldr	r0, [r7, #4]
 80195f2:	f7fa f863 	bl	80136bc <tcp_input>
        break;
 80195f6:	e021      	b.n	801963c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80195f8:	6839      	ldr	r1, [r7, #0]
 80195fa:	6878      	ldr	r0, [r7, #4]
 80195fc:	f7ff fcc8 	bl	8018f90 <icmp_input>
        break;
 8019600:	e01c      	b.n	801963c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019602:	4b1a      	ldr	r3, [pc, #104]	; (801966c <ip4_input+0x240>)
 8019604:	695b      	ldr	r3, [r3, #20]
 8019606:	6939      	ldr	r1, [r7, #16]
 8019608:	4618      	mov	r0, r3
 801960a:	f000 f90b 	bl	8019824 <ip4_addr_isbroadcast_u32>
 801960e:	4603      	mov	r3, r0
 8019610:	2b00      	cmp	r3, #0
 8019612:	d10f      	bne.n	8019634 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019614:	4b15      	ldr	r3, [pc, #84]	; (801966c <ip4_input+0x240>)
 8019616:	695b      	ldr	r3, [r3, #20]
 8019618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801961c:	2be0      	cmp	r3, #224	; 0xe0
 801961e:	d009      	beq.n	8019634 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8019620:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8019624:	4619      	mov	r1, r3
 8019626:	6878      	ldr	r0, [r7, #4]
 8019628:	f7f7 ff69 	bl	80114fe <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801962c:	2102      	movs	r1, #2
 801962e:	6878      	ldr	r0, [r7, #4]
 8019630:	f7ff fdce 	bl	80191d0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8019634:	6878      	ldr	r0, [r7, #4]
 8019636:	f7f7 ff75 	bl	8011524 <pbuf_free>
        break;
 801963a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801963c:	4b0b      	ldr	r3, [pc, #44]	; (801966c <ip4_input+0x240>)
 801963e:	2200      	movs	r2, #0
 8019640:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8019642:	4b0a      	ldr	r3, [pc, #40]	; (801966c <ip4_input+0x240>)
 8019644:	2200      	movs	r2, #0
 8019646:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8019648:	4b08      	ldr	r3, [pc, #32]	; (801966c <ip4_input+0x240>)
 801964a:	2200      	movs	r2, #0
 801964c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801964e:	4b07      	ldr	r3, [pc, #28]	; (801966c <ip4_input+0x240>)
 8019650:	2200      	movs	r2, #0
 8019652:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8019654:	4b05      	ldr	r3, [pc, #20]	; (801966c <ip4_input+0x240>)
 8019656:	2200      	movs	r2, #0
 8019658:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801965a:	4b04      	ldr	r3, [pc, #16]	; (801966c <ip4_input+0x240>)
 801965c:	2200      	movs	r2, #0
 801965e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8019660:	2300      	movs	r3, #0
}
 8019662:	4618      	mov	r0, r3
 8019664:	3718      	adds	r7, #24
 8019666:	46bd      	mov	sp, r7
 8019668:	bd80      	pop	{r7, pc}
 801966a:	bf00      	nop
 801966c:	20000770 	.word	0x20000770
 8019670:	20007040 	.word	0x20007040

08019674 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8019674:	b580      	push	{r7, lr}
 8019676:	b08a      	sub	sp, #40	; 0x28
 8019678:	af04      	add	r7, sp, #16
 801967a:	60f8      	str	r0, [r7, #12]
 801967c:	60b9      	str	r1, [r7, #8]
 801967e:	607a      	str	r2, [r7, #4]
 8019680:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8019682:	68bb      	ldr	r3, [r7, #8]
 8019684:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8019686:	687b      	ldr	r3, [r7, #4]
 8019688:	2b00      	cmp	r3, #0
 801968a:	d009      	beq.n	80196a0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801968c:	68bb      	ldr	r3, [r7, #8]
 801968e:	2b00      	cmp	r3, #0
 8019690:	d003      	beq.n	801969a <ip4_output_if+0x26>
 8019692:	68bb      	ldr	r3, [r7, #8]
 8019694:	681b      	ldr	r3, [r3, #0]
 8019696:	2b00      	cmp	r3, #0
 8019698:	d102      	bne.n	80196a0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801969a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801969c:	3304      	adds	r3, #4
 801969e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80196a0:	78fa      	ldrb	r2, [r7, #3]
 80196a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196a4:	9302      	str	r3, [sp, #8]
 80196a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80196aa:	9301      	str	r3, [sp, #4]
 80196ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80196b0:	9300      	str	r3, [sp, #0]
 80196b2:	4613      	mov	r3, r2
 80196b4:	687a      	ldr	r2, [r7, #4]
 80196b6:	6979      	ldr	r1, [r7, #20]
 80196b8:	68f8      	ldr	r0, [r7, #12]
 80196ba:	f000 f805 	bl	80196c8 <ip4_output_if_src>
 80196be:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80196c0:	4618      	mov	r0, r3
 80196c2:	3718      	adds	r7, #24
 80196c4:	46bd      	mov	sp, r7
 80196c6:	bd80      	pop	{r7, pc}

080196c8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80196c8:	b580      	push	{r7, lr}
 80196ca:	b088      	sub	sp, #32
 80196cc:	af00      	add	r7, sp, #0
 80196ce:	60f8      	str	r0, [r7, #12]
 80196d0:	60b9      	str	r1, [r7, #8]
 80196d2:	607a      	str	r2, [r7, #4]
 80196d4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80196d6:	68fb      	ldr	r3, [r7, #12]
 80196d8:	7b9b      	ldrb	r3, [r3, #14]
 80196da:	2b01      	cmp	r3, #1
 80196dc:	d006      	beq.n	80196ec <ip4_output_if_src+0x24>
 80196de:	4b4b      	ldr	r3, [pc, #300]	; (801980c <ip4_output_if_src+0x144>)
 80196e0:	f44f 7255 	mov.w	r2, #852	; 0x354
 80196e4:	494a      	ldr	r1, [pc, #296]	; (8019810 <ip4_output_if_src+0x148>)
 80196e6:	484b      	ldr	r0, [pc, #300]	; (8019814 <ip4_output_if_src+0x14c>)
 80196e8:	f001 fdbe 	bl	801b268 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	2b00      	cmp	r3, #0
 80196f0:	d060      	beq.n	80197b4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80196f2:	2314      	movs	r3, #20
 80196f4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80196f6:	2114      	movs	r1, #20
 80196f8:	68f8      	ldr	r0, [r7, #12]
 80196fa:	f7f7 fe7d 	bl	80113f8 <pbuf_add_header>
 80196fe:	4603      	mov	r3, r0
 8019700:	2b00      	cmp	r3, #0
 8019702:	d002      	beq.n	801970a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019704:	f06f 0301 	mvn.w	r3, #1
 8019708:	e07c      	b.n	8019804 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801970a:	68fb      	ldr	r3, [r7, #12]
 801970c:	685b      	ldr	r3, [r3, #4]
 801970e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8019710:	68fb      	ldr	r3, [r7, #12]
 8019712:	895b      	ldrh	r3, [r3, #10]
 8019714:	2b13      	cmp	r3, #19
 8019716:	d806      	bhi.n	8019726 <ip4_output_if_src+0x5e>
 8019718:	4b3c      	ldr	r3, [pc, #240]	; (801980c <ip4_output_if_src+0x144>)
 801971a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801971e:	493e      	ldr	r1, [pc, #248]	; (8019818 <ip4_output_if_src+0x150>)
 8019720:	483c      	ldr	r0, [pc, #240]	; (8019814 <ip4_output_if_src+0x14c>)
 8019722:	f001 fda1 	bl	801b268 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8019726:	69fb      	ldr	r3, [r7, #28]
 8019728:	78fa      	ldrb	r2, [r7, #3]
 801972a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801972c:	69fb      	ldr	r3, [r7, #28]
 801972e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8019732:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8019734:	687b      	ldr	r3, [r7, #4]
 8019736:	681a      	ldr	r2, [r3, #0]
 8019738:	69fb      	ldr	r3, [r7, #28]
 801973a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801973c:	8b7b      	ldrh	r3, [r7, #26]
 801973e:	089b      	lsrs	r3, r3, #2
 8019740:	b29b      	uxth	r3, r3
 8019742:	b2db      	uxtb	r3, r3
 8019744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019748:	b2da      	uxtb	r2, r3
 801974a:	69fb      	ldr	r3, [r7, #28]
 801974c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801974e:	69fb      	ldr	r3, [r7, #28]
 8019750:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8019754:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8019756:	68fb      	ldr	r3, [r7, #12]
 8019758:	891b      	ldrh	r3, [r3, #8]
 801975a:	4618      	mov	r0, r3
 801975c:	f7f6 fade 	bl	800fd1c <lwip_htons>
 8019760:	4603      	mov	r3, r0
 8019762:	461a      	mov	r2, r3
 8019764:	69fb      	ldr	r3, [r7, #28]
 8019766:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8019768:	69fb      	ldr	r3, [r7, #28]
 801976a:	2200      	movs	r2, #0
 801976c:	719a      	strb	r2, [r3, #6]
 801976e:	2200      	movs	r2, #0
 8019770:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8019772:	4b2a      	ldr	r3, [pc, #168]	; (801981c <ip4_output_if_src+0x154>)
 8019774:	881b      	ldrh	r3, [r3, #0]
 8019776:	4618      	mov	r0, r3
 8019778:	f7f6 fad0 	bl	800fd1c <lwip_htons>
 801977c:	4603      	mov	r3, r0
 801977e:	461a      	mov	r2, r3
 8019780:	69fb      	ldr	r3, [r7, #28]
 8019782:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8019784:	4b25      	ldr	r3, [pc, #148]	; (801981c <ip4_output_if_src+0x154>)
 8019786:	881b      	ldrh	r3, [r3, #0]
 8019788:	3301      	adds	r3, #1
 801978a:	b29a      	uxth	r2, r3
 801978c:	4b23      	ldr	r3, [pc, #140]	; (801981c <ip4_output_if_src+0x154>)
 801978e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8019790:	68bb      	ldr	r3, [r7, #8]
 8019792:	2b00      	cmp	r3, #0
 8019794:	d104      	bne.n	80197a0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8019796:	4b22      	ldr	r3, [pc, #136]	; (8019820 <ip4_output_if_src+0x158>)
 8019798:	681a      	ldr	r2, [r3, #0]
 801979a:	69fb      	ldr	r3, [r7, #28]
 801979c:	60da      	str	r2, [r3, #12]
 801979e:	e003      	b.n	80197a8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80197a0:	68bb      	ldr	r3, [r7, #8]
 80197a2:	681a      	ldr	r2, [r3, #0]
 80197a4:	69fb      	ldr	r3, [r7, #28]
 80197a6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80197a8:	69fb      	ldr	r3, [r7, #28]
 80197aa:	2200      	movs	r2, #0
 80197ac:	729a      	strb	r2, [r3, #10]
 80197ae:	2200      	movs	r2, #0
 80197b0:	72da      	strb	r2, [r3, #11]
 80197b2:	e00f      	b.n	80197d4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80197b4:	68fb      	ldr	r3, [r7, #12]
 80197b6:	895b      	ldrh	r3, [r3, #10]
 80197b8:	2b13      	cmp	r3, #19
 80197ba:	d802      	bhi.n	80197c2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80197bc:	f06f 0301 	mvn.w	r3, #1
 80197c0:	e020      	b.n	8019804 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80197c2:	68fb      	ldr	r3, [r7, #12]
 80197c4:	685b      	ldr	r3, [r3, #4]
 80197c6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80197c8:	69fb      	ldr	r3, [r7, #28]
 80197ca:	691b      	ldr	r3, [r3, #16]
 80197cc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80197ce:	f107 0314 	add.w	r3, r7, #20
 80197d2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80197d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80197d8:	2b00      	cmp	r3, #0
 80197da:	d00c      	beq.n	80197f6 <ip4_output_if_src+0x12e>
 80197dc:	68fb      	ldr	r3, [r7, #12]
 80197de:	891a      	ldrh	r2, [r3, #8]
 80197e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80197e4:	429a      	cmp	r2, r3
 80197e6:	d906      	bls.n	80197f6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80197e8:	687a      	ldr	r2, [r7, #4]
 80197ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80197ec:	68f8      	ldr	r0, [r7, #12]
 80197ee:	f000 fde3 	bl	801a3b8 <ip4_frag>
 80197f2:	4603      	mov	r3, r0
 80197f4:	e006      	b.n	8019804 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80197f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197f8:	695b      	ldr	r3, [r3, #20]
 80197fa:	687a      	ldr	r2, [r7, #4]
 80197fc:	68f9      	ldr	r1, [r7, #12]
 80197fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019800:	4798      	blx	r3
 8019802:	4603      	mov	r3, r0
}
 8019804:	4618      	mov	r0, r3
 8019806:	3720      	adds	r7, #32
 8019808:	46bd      	mov	sp, r7
 801980a:	bd80      	pop	{r7, pc}
 801980c:	0802095c 	.word	0x0802095c
 8019810:	08020990 	.word	0x08020990
 8019814:	0802099c 	.word	0x0802099c
 8019818:	080209c4 	.word	0x080209c4
 801981c:	2000719e 	.word	0x2000719e
 8019820:	08020de4 	.word	0x08020de4

08019824 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8019824:	b480      	push	{r7}
 8019826:	b085      	sub	sp, #20
 8019828:	af00      	add	r7, sp, #0
 801982a:	6078      	str	r0, [r7, #4]
 801982c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801982e:	687b      	ldr	r3, [r7, #4]
 8019830:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8019832:	687b      	ldr	r3, [r7, #4]
 8019834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019838:	d002      	beq.n	8019840 <ip4_addr_isbroadcast_u32+0x1c>
 801983a:	687b      	ldr	r3, [r7, #4]
 801983c:	2b00      	cmp	r3, #0
 801983e:	d101      	bne.n	8019844 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8019840:	2301      	movs	r3, #1
 8019842:	e02a      	b.n	801989a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8019844:	683b      	ldr	r3, [r7, #0]
 8019846:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801984a:	f003 0302 	and.w	r3, r3, #2
 801984e:	2b00      	cmp	r3, #0
 8019850:	d101      	bne.n	8019856 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8019852:	2300      	movs	r3, #0
 8019854:	e021      	b.n	801989a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8019856:	683b      	ldr	r3, [r7, #0]
 8019858:	3304      	adds	r3, #4
 801985a:	681b      	ldr	r3, [r3, #0]
 801985c:	687a      	ldr	r2, [r7, #4]
 801985e:	429a      	cmp	r2, r3
 8019860:	d101      	bne.n	8019866 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8019862:	2300      	movs	r3, #0
 8019864:	e019      	b.n	801989a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8019866:	68fa      	ldr	r2, [r7, #12]
 8019868:	683b      	ldr	r3, [r7, #0]
 801986a:	3304      	adds	r3, #4
 801986c:	681b      	ldr	r3, [r3, #0]
 801986e:	405a      	eors	r2, r3
 8019870:	683b      	ldr	r3, [r7, #0]
 8019872:	3308      	adds	r3, #8
 8019874:	681b      	ldr	r3, [r3, #0]
 8019876:	4013      	ands	r3, r2
 8019878:	2b00      	cmp	r3, #0
 801987a:	d10d      	bne.n	8019898 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801987c:	683b      	ldr	r3, [r7, #0]
 801987e:	3308      	adds	r3, #8
 8019880:	681b      	ldr	r3, [r3, #0]
 8019882:	43da      	mvns	r2, r3
 8019884:	687b      	ldr	r3, [r7, #4]
 8019886:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8019888:	683b      	ldr	r3, [r7, #0]
 801988a:	3308      	adds	r3, #8
 801988c:	681b      	ldr	r3, [r3, #0]
 801988e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019890:	429a      	cmp	r2, r3
 8019892:	d101      	bne.n	8019898 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8019894:	2301      	movs	r3, #1
 8019896:	e000      	b.n	801989a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8019898:	2300      	movs	r3, #0
  }
}
 801989a:	4618      	mov	r0, r3
 801989c:	3714      	adds	r7, #20
 801989e:	46bd      	mov	sp, r7
 80198a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198a4:	4770      	bx	lr
	...

080198a8 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 80198a8:	b580      	push	{r7, lr}
 80198aa:	b082      	sub	sp, #8
 80198ac:	af00      	add	r7, sp, #0
 80198ae:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 80198b0:	2210      	movs	r2, #16
 80198b2:	4904      	ldr	r1, [pc, #16]	; (80198c4 <ip4addr_ntoa+0x1c>)
 80198b4:	6878      	ldr	r0, [r7, #4]
 80198b6:	f000 f807 	bl	80198c8 <ip4addr_ntoa_r>
 80198ba:	4603      	mov	r3, r0
}
 80198bc:	4618      	mov	r0, r3
 80198be:	3708      	adds	r7, #8
 80198c0:	46bd      	mov	sp, r7
 80198c2:	bd80      	pop	{r7, pc}
 80198c4:	200071a0 	.word	0x200071a0

080198c8 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 80198c8:	b480      	push	{r7}
 80198ca:	b08d      	sub	sp, #52	; 0x34
 80198cc:	af00      	add	r7, sp, #0
 80198ce:	60f8      	str	r0, [r7, #12]
 80198d0:	60b9      	str	r1, [r7, #8]
 80198d2:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 80198d4:	2300      	movs	r3, #0
 80198d6:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 80198d8:	68fb      	ldr	r3, [r7, #12]
 80198da:	681b      	ldr	r3, [r3, #0]
 80198dc:	61bb      	str	r3, [r7, #24]

  rp = buf;
 80198de:	68bb      	ldr	r3, [r7, #8]
 80198e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 80198e2:	f107 0318 	add.w	r3, r7, #24
 80198e6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80198e8:	2300      	movs	r3, #0
 80198ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80198ee:	e058      	b.n	80199a2 <ip4addr_ntoa_r+0xda>
    i = 0;
 80198f0:	2300      	movs	r3, #0
 80198f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 80198f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198f8:	781a      	ldrb	r2, [r3, #0]
 80198fa:	4b32      	ldr	r3, [pc, #200]	; (80199c4 <ip4addr_ntoa_r+0xfc>)
 80198fc:	fba3 1302 	umull	r1, r3, r3, r2
 8019900:	08d9      	lsrs	r1, r3, #3
 8019902:	460b      	mov	r3, r1
 8019904:	009b      	lsls	r3, r3, #2
 8019906:	440b      	add	r3, r1
 8019908:	005b      	lsls	r3, r3, #1
 801990a:	1ad3      	subs	r3, r2, r3
 801990c:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 801990e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019910:	781b      	ldrb	r3, [r3, #0]
 8019912:	4a2c      	ldr	r2, [pc, #176]	; (80199c4 <ip4addr_ntoa_r+0xfc>)
 8019914:	fba2 2303 	umull	r2, r3, r2, r3
 8019918:	08db      	lsrs	r3, r3, #3
 801991a:	b2da      	uxtb	r2, r3
 801991c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801991e:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8019920:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019924:	1c5a      	adds	r2, r3, #1
 8019926:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801992a:	4619      	mov	r1, r3
 801992c:	7ffb      	ldrb	r3, [r7, #31]
 801992e:	3330      	adds	r3, #48	; 0x30
 8019930:	b2da      	uxtb	r2, r3
 8019932:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8019936:	443b      	add	r3, r7
 8019938:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 801993c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801993e:	781b      	ldrb	r3, [r3, #0]
 8019940:	2b00      	cmp	r3, #0
 8019942:	d1d8      	bne.n	80198f6 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8019944:	e011      	b.n	801996a <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 8019946:	6a3b      	ldr	r3, [r7, #32]
 8019948:	1c5a      	adds	r2, r3, #1
 801994a:	623a      	str	r2, [r7, #32]
 801994c:	687a      	ldr	r2, [r7, #4]
 801994e:	429a      	cmp	r2, r3
 8019950:	dc01      	bgt.n	8019956 <ip4addr_ntoa_r+0x8e>
        return NULL;
 8019952:	2300      	movs	r3, #0
 8019954:	e030      	b.n	80199b8 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8019956:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801995a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801995c:	1c59      	adds	r1, r3, #1
 801995e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8019960:	3230      	adds	r2, #48	; 0x30
 8019962:	443a      	add	r2, r7
 8019964:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8019968:	701a      	strb	r2, [r3, #0]
    while (i--) {
 801996a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801996e:	1e5a      	subs	r2, r3, #1
 8019970:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8019974:	2b00      	cmp	r3, #0
 8019976:	d1e6      	bne.n	8019946 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8019978:	6a3b      	ldr	r3, [r7, #32]
 801997a:	1c5a      	adds	r2, r3, #1
 801997c:	623a      	str	r2, [r7, #32]
 801997e:	687a      	ldr	r2, [r7, #4]
 8019980:	429a      	cmp	r2, r3
 8019982:	dc01      	bgt.n	8019988 <ip4addr_ntoa_r+0xc0>
      return NULL;
 8019984:	2300      	movs	r3, #0
 8019986:	e017      	b.n	80199b8 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8019988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801998a:	1c5a      	adds	r2, r3, #1
 801998c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801998e:	222e      	movs	r2, #46	; 0x2e
 8019990:	701a      	strb	r2, [r3, #0]
    ap++;
 8019992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019994:	3301      	adds	r3, #1
 8019996:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8019998:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801999c:	3301      	adds	r3, #1
 801999e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80199a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80199a6:	2b03      	cmp	r3, #3
 80199a8:	d9a2      	bls.n	80198f0 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 80199aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199ac:	3b01      	subs	r3, #1
 80199ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80199b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199b2:	2200      	movs	r2, #0
 80199b4:	701a      	strb	r2, [r3, #0]
  return buf;
 80199b6:	68bb      	ldr	r3, [r7, #8]
}
 80199b8:	4618      	mov	r0, r3
 80199ba:	3734      	adds	r7, #52	; 0x34
 80199bc:	46bd      	mov	sp, r7
 80199be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199c2:	4770      	bx	lr
 80199c4:	cccccccd 	.word	0xcccccccd

080199c8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80199c8:	b580      	push	{r7, lr}
 80199ca:	b084      	sub	sp, #16
 80199cc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80199ce:	2300      	movs	r3, #0
 80199d0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80199d2:	4b12      	ldr	r3, [pc, #72]	; (8019a1c <ip_reass_tmr+0x54>)
 80199d4:	681b      	ldr	r3, [r3, #0]
 80199d6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80199d8:	e018      	b.n	8019a0c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80199da:	68fb      	ldr	r3, [r7, #12]
 80199dc:	7fdb      	ldrb	r3, [r3, #31]
 80199de:	2b00      	cmp	r3, #0
 80199e0:	d00b      	beq.n	80199fa <ip_reass_tmr+0x32>
      r->timer--;
 80199e2:	68fb      	ldr	r3, [r7, #12]
 80199e4:	7fdb      	ldrb	r3, [r3, #31]
 80199e6:	3b01      	subs	r3, #1
 80199e8:	b2da      	uxtb	r2, r3
 80199ea:	68fb      	ldr	r3, [r7, #12]
 80199ec:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80199ee:	68fb      	ldr	r3, [r7, #12]
 80199f0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80199f2:	68fb      	ldr	r3, [r7, #12]
 80199f4:	681b      	ldr	r3, [r3, #0]
 80199f6:	60fb      	str	r3, [r7, #12]
 80199f8:	e008      	b.n	8019a0c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80199fa:	68fb      	ldr	r3, [r7, #12]
 80199fc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80199fe:	68fb      	ldr	r3, [r7, #12]
 8019a00:	681b      	ldr	r3, [r3, #0]
 8019a02:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8019a04:	68b9      	ldr	r1, [r7, #8]
 8019a06:	6878      	ldr	r0, [r7, #4]
 8019a08:	f000 f80a 	bl	8019a20 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8019a0c:	68fb      	ldr	r3, [r7, #12]
 8019a0e:	2b00      	cmp	r3, #0
 8019a10:	d1e3      	bne.n	80199da <ip_reass_tmr+0x12>
    }
  }
}
 8019a12:	bf00      	nop
 8019a14:	bf00      	nop
 8019a16:	3710      	adds	r7, #16
 8019a18:	46bd      	mov	sp, r7
 8019a1a:	bd80      	pop	{r7, pc}
 8019a1c:	200071b0 	.word	0x200071b0

08019a20 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019a20:	b580      	push	{r7, lr}
 8019a22:	b088      	sub	sp, #32
 8019a24:	af00      	add	r7, sp, #0
 8019a26:	6078      	str	r0, [r7, #4]
 8019a28:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8019a2a:	2300      	movs	r3, #0
 8019a2c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8019a2e:	683a      	ldr	r2, [r7, #0]
 8019a30:	687b      	ldr	r3, [r7, #4]
 8019a32:	429a      	cmp	r2, r3
 8019a34:	d105      	bne.n	8019a42 <ip_reass_free_complete_datagram+0x22>
 8019a36:	4b45      	ldr	r3, [pc, #276]	; (8019b4c <ip_reass_free_complete_datagram+0x12c>)
 8019a38:	22ab      	movs	r2, #171	; 0xab
 8019a3a:	4945      	ldr	r1, [pc, #276]	; (8019b50 <ip_reass_free_complete_datagram+0x130>)
 8019a3c:	4845      	ldr	r0, [pc, #276]	; (8019b54 <ip_reass_free_complete_datagram+0x134>)
 8019a3e:	f001 fc13 	bl	801b268 <iprintf>
  if (prev != NULL) {
 8019a42:	683b      	ldr	r3, [r7, #0]
 8019a44:	2b00      	cmp	r3, #0
 8019a46:	d00a      	beq.n	8019a5e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8019a48:	683b      	ldr	r3, [r7, #0]
 8019a4a:	681b      	ldr	r3, [r3, #0]
 8019a4c:	687a      	ldr	r2, [r7, #4]
 8019a4e:	429a      	cmp	r2, r3
 8019a50:	d005      	beq.n	8019a5e <ip_reass_free_complete_datagram+0x3e>
 8019a52:	4b3e      	ldr	r3, [pc, #248]	; (8019b4c <ip_reass_free_complete_datagram+0x12c>)
 8019a54:	22ad      	movs	r2, #173	; 0xad
 8019a56:	4940      	ldr	r1, [pc, #256]	; (8019b58 <ip_reass_free_complete_datagram+0x138>)
 8019a58:	483e      	ldr	r0, [pc, #248]	; (8019b54 <ip_reass_free_complete_datagram+0x134>)
 8019a5a:	f001 fc05 	bl	801b268 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8019a5e:	687b      	ldr	r3, [r7, #4]
 8019a60:	685b      	ldr	r3, [r3, #4]
 8019a62:	685b      	ldr	r3, [r3, #4]
 8019a64:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8019a66:	697b      	ldr	r3, [r7, #20]
 8019a68:	889b      	ldrh	r3, [r3, #4]
 8019a6a:	b29b      	uxth	r3, r3
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	d12a      	bne.n	8019ac6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8019a70:	687b      	ldr	r3, [r7, #4]
 8019a72:	685b      	ldr	r3, [r3, #4]
 8019a74:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8019a76:	697b      	ldr	r3, [r7, #20]
 8019a78:	681a      	ldr	r2, [r3, #0]
 8019a7a:	687b      	ldr	r3, [r7, #4]
 8019a7c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8019a7e:	69bb      	ldr	r3, [r7, #24]
 8019a80:	6858      	ldr	r0, [r3, #4]
 8019a82:	687b      	ldr	r3, [r7, #4]
 8019a84:	3308      	adds	r3, #8
 8019a86:	2214      	movs	r2, #20
 8019a88:	4619      	mov	r1, r3
 8019a8a:	f001 fdf6 	bl	801b67a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8019a8e:	2101      	movs	r1, #1
 8019a90:	69b8      	ldr	r0, [r7, #24]
 8019a92:	f7ff fbad 	bl	80191f0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8019a96:	69b8      	ldr	r0, [r7, #24]
 8019a98:	f7f7 fdcc 	bl	8011634 <pbuf_clen>
 8019a9c:	4603      	mov	r3, r0
 8019a9e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019aa0:	8bfa      	ldrh	r2, [r7, #30]
 8019aa2:	8a7b      	ldrh	r3, [r7, #18]
 8019aa4:	4413      	add	r3, r2
 8019aa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019aaa:	db05      	blt.n	8019ab8 <ip_reass_free_complete_datagram+0x98>
 8019aac:	4b27      	ldr	r3, [pc, #156]	; (8019b4c <ip_reass_free_complete_datagram+0x12c>)
 8019aae:	22bc      	movs	r2, #188	; 0xbc
 8019ab0:	492a      	ldr	r1, [pc, #168]	; (8019b5c <ip_reass_free_complete_datagram+0x13c>)
 8019ab2:	4828      	ldr	r0, [pc, #160]	; (8019b54 <ip_reass_free_complete_datagram+0x134>)
 8019ab4:	f001 fbd8 	bl	801b268 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019ab8:	8bfa      	ldrh	r2, [r7, #30]
 8019aba:	8a7b      	ldrh	r3, [r7, #18]
 8019abc:	4413      	add	r3, r2
 8019abe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8019ac0:	69b8      	ldr	r0, [r7, #24]
 8019ac2:	f7f7 fd2f 	bl	8011524 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	685b      	ldr	r3, [r3, #4]
 8019aca:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8019acc:	e01f      	b.n	8019b0e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8019ace:	69bb      	ldr	r3, [r7, #24]
 8019ad0:	685b      	ldr	r3, [r3, #4]
 8019ad2:	617b      	str	r3, [r7, #20]
    pcur = p;
 8019ad4:	69bb      	ldr	r3, [r7, #24]
 8019ad6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8019ad8:	697b      	ldr	r3, [r7, #20]
 8019ada:	681b      	ldr	r3, [r3, #0]
 8019adc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8019ade:	68f8      	ldr	r0, [r7, #12]
 8019ae0:	f7f7 fda8 	bl	8011634 <pbuf_clen>
 8019ae4:	4603      	mov	r3, r0
 8019ae6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019ae8:	8bfa      	ldrh	r2, [r7, #30]
 8019aea:	8a7b      	ldrh	r3, [r7, #18]
 8019aec:	4413      	add	r3, r2
 8019aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019af2:	db05      	blt.n	8019b00 <ip_reass_free_complete_datagram+0xe0>
 8019af4:	4b15      	ldr	r3, [pc, #84]	; (8019b4c <ip_reass_free_complete_datagram+0x12c>)
 8019af6:	22cc      	movs	r2, #204	; 0xcc
 8019af8:	4918      	ldr	r1, [pc, #96]	; (8019b5c <ip_reass_free_complete_datagram+0x13c>)
 8019afa:	4816      	ldr	r0, [pc, #88]	; (8019b54 <ip_reass_free_complete_datagram+0x134>)
 8019afc:	f001 fbb4 	bl	801b268 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019b00:	8bfa      	ldrh	r2, [r7, #30]
 8019b02:	8a7b      	ldrh	r3, [r7, #18]
 8019b04:	4413      	add	r3, r2
 8019b06:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8019b08:	68f8      	ldr	r0, [r7, #12]
 8019b0a:	f7f7 fd0b 	bl	8011524 <pbuf_free>
  while (p != NULL) {
 8019b0e:	69bb      	ldr	r3, [r7, #24]
 8019b10:	2b00      	cmp	r3, #0
 8019b12:	d1dc      	bne.n	8019ace <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8019b14:	6839      	ldr	r1, [r7, #0]
 8019b16:	6878      	ldr	r0, [r7, #4]
 8019b18:	f000 f8c2 	bl	8019ca0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8019b1c:	4b10      	ldr	r3, [pc, #64]	; (8019b60 <ip_reass_free_complete_datagram+0x140>)
 8019b1e:	881b      	ldrh	r3, [r3, #0]
 8019b20:	8bfa      	ldrh	r2, [r7, #30]
 8019b22:	429a      	cmp	r2, r3
 8019b24:	d905      	bls.n	8019b32 <ip_reass_free_complete_datagram+0x112>
 8019b26:	4b09      	ldr	r3, [pc, #36]	; (8019b4c <ip_reass_free_complete_datagram+0x12c>)
 8019b28:	22d2      	movs	r2, #210	; 0xd2
 8019b2a:	490e      	ldr	r1, [pc, #56]	; (8019b64 <ip_reass_free_complete_datagram+0x144>)
 8019b2c:	4809      	ldr	r0, [pc, #36]	; (8019b54 <ip_reass_free_complete_datagram+0x134>)
 8019b2e:	f001 fb9b 	bl	801b268 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8019b32:	4b0b      	ldr	r3, [pc, #44]	; (8019b60 <ip_reass_free_complete_datagram+0x140>)
 8019b34:	881a      	ldrh	r2, [r3, #0]
 8019b36:	8bfb      	ldrh	r3, [r7, #30]
 8019b38:	1ad3      	subs	r3, r2, r3
 8019b3a:	b29a      	uxth	r2, r3
 8019b3c:	4b08      	ldr	r3, [pc, #32]	; (8019b60 <ip_reass_free_complete_datagram+0x140>)
 8019b3e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8019b40:	8bfb      	ldrh	r3, [r7, #30]
}
 8019b42:	4618      	mov	r0, r3
 8019b44:	3720      	adds	r7, #32
 8019b46:	46bd      	mov	sp, r7
 8019b48:	bd80      	pop	{r7, pc}
 8019b4a:	bf00      	nop
 8019b4c:	080209f4 	.word	0x080209f4
 8019b50:	08020a30 	.word	0x08020a30
 8019b54:	08020a3c 	.word	0x08020a3c
 8019b58:	08020a64 	.word	0x08020a64
 8019b5c:	08020a78 	.word	0x08020a78
 8019b60:	200071b4 	.word	0x200071b4
 8019b64:	08020a98 	.word	0x08020a98

08019b68 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8019b68:	b580      	push	{r7, lr}
 8019b6a:	b08a      	sub	sp, #40	; 0x28
 8019b6c:	af00      	add	r7, sp, #0
 8019b6e:	6078      	str	r0, [r7, #4]
 8019b70:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8019b72:	2300      	movs	r3, #0
 8019b74:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8019b76:	2300      	movs	r3, #0
 8019b78:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8019b7a:	2300      	movs	r3, #0
 8019b7c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8019b7e:	2300      	movs	r3, #0
 8019b80:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8019b82:	2300      	movs	r3, #0
 8019b84:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8019b86:	4b28      	ldr	r3, [pc, #160]	; (8019c28 <ip_reass_remove_oldest_datagram+0xc0>)
 8019b88:	681b      	ldr	r3, [r3, #0]
 8019b8a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019b8c:	e030      	b.n	8019bf0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8019b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b90:	695a      	ldr	r2, [r3, #20]
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	68db      	ldr	r3, [r3, #12]
 8019b96:	429a      	cmp	r2, r3
 8019b98:	d10c      	bne.n	8019bb4 <ip_reass_remove_oldest_datagram+0x4c>
 8019b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b9c:	699a      	ldr	r2, [r3, #24]
 8019b9e:	687b      	ldr	r3, [r7, #4]
 8019ba0:	691b      	ldr	r3, [r3, #16]
 8019ba2:	429a      	cmp	r2, r3
 8019ba4:	d106      	bne.n	8019bb4 <ip_reass_remove_oldest_datagram+0x4c>
 8019ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ba8:	899a      	ldrh	r2, [r3, #12]
 8019baa:	687b      	ldr	r3, [r7, #4]
 8019bac:	889b      	ldrh	r3, [r3, #4]
 8019bae:	b29b      	uxth	r3, r3
 8019bb0:	429a      	cmp	r2, r3
 8019bb2:	d014      	beq.n	8019bde <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8019bb4:	693b      	ldr	r3, [r7, #16]
 8019bb6:	3301      	adds	r3, #1
 8019bb8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8019bba:	6a3b      	ldr	r3, [r7, #32]
 8019bbc:	2b00      	cmp	r3, #0
 8019bbe:	d104      	bne.n	8019bca <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8019bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bc2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019bc4:	69fb      	ldr	r3, [r7, #28]
 8019bc6:	61bb      	str	r3, [r7, #24]
 8019bc8:	e009      	b.n	8019bde <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8019bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bcc:	7fda      	ldrb	r2, [r3, #31]
 8019bce:	6a3b      	ldr	r3, [r7, #32]
 8019bd0:	7fdb      	ldrb	r3, [r3, #31]
 8019bd2:	429a      	cmp	r2, r3
 8019bd4:	d803      	bhi.n	8019bde <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8019bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bd8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019bda:	69fb      	ldr	r3, [r7, #28]
 8019bdc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8019bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019be0:	681b      	ldr	r3, [r3, #0]
 8019be2:	2b00      	cmp	r3, #0
 8019be4:	d001      	beq.n	8019bea <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8019be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019be8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8019bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bec:	681b      	ldr	r3, [r3, #0]
 8019bee:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bf2:	2b00      	cmp	r3, #0
 8019bf4:	d1cb      	bne.n	8019b8e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8019bf6:	6a3b      	ldr	r3, [r7, #32]
 8019bf8:	2b00      	cmp	r3, #0
 8019bfa:	d008      	beq.n	8019c0e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8019bfc:	69b9      	ldr	r1, [r7, #24]
 8019bfe:	6a38      	ldr	r0, [r7, #32]
 8019c00:	f7ff ff0e 	bl	8019a20 <ip_reass_free_complete_datagram>
 8019c04:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8019c06:	697a      	ldr	r2, [r7, #20]
 8019c08:	68fb      	ldr	r3, [r7, #12]
 8019c0a:	4413      	add	r3, r2
 8019c0c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8019c0e:	697a      	ldr	r2, [r7, #20]
 8019c10:	683b      	ldr	r3, [r7, #0]
 8019c12:	429a      	cmp	r2, r3
 8019c14:	da02      	bge.n	8019c1c <ip_reass_remove_oldest_datagram+0xb4>
 8019c16:	693b      	ldr	r3, [r7, #16]
 8019c18:	2b01      	cmp	r3, #1
 8019c1a:	dcac      	bgt.n	8019b76 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8019c1c:	697b      	ldr	r3, [r7, #20]
}
 8019c1e:	4618      	mov	r0, r3
 8019c20:	3728      	adds	r7, #40	; 0x28
 8019c22:	46bd      	mov	sp, r7
 8019c24:	bd80      	pop	{r7, pc}
 8019c26:	bf00      	nop
 8019c28:	200071b0 	.word	0x200071b0

08019c2c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8019c2c:	b580      	push	{r7, lr}
 8019c2e:	b084      	sub	sp, #16
 8019c30:	af00      	add	r7, sp, #0
 8019c32:	6078      	str	r0, [r7, #4]
 8019c34:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019c36:	2004      	movs	r0, #4
 8019c38:	f7f6 fd8e 	bl	8010758 <memp_malloc>
 8019c3c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8019c3e:	68fb      	ldr	r3, [r7, #12]
 8019c40:	2b00      	cmp	r3, #0
 8019c42:	d110      	bne.n	8019c66 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8019c44:	6839      	ldr	r1, [r7, #0]
 8019c46:	6878      	ldr	r0, [r7, #4]
 8019c48:	f7ff ff8e 	bl	8019b68 <ip_reass_remove_oldest_datagram>
 8019c4c:	4602      	mov	r2, r0
 8019c4e:	683b      	ldr	r3, [r7, #0]
 8019c50:	4293      	cmp	r3, r2
 8019c52:	dc03      	bgt.n	8019c5c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019c54:	2004      	movs	r0, #4
 8019c56:	f7f6 fd7f 	bl	8010758 <memp_malloc>
 8019c5a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8019c5c:	68fb      	ldr	r3, [r7, #12]
 8019c5e:	2b00      	cmp	r3, #0
 8019c60:	d101      	bne.n	8019c66 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8019c62:	2300      	movs	r3, #0
 8019c64:	e016      	b.n	8019c94 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8019c66:	2220      	movs	r2, #32
 8019c68:	2100      	movs	r1, #0
 8019c6a:	68f8      	ldr	r0, [r7, #12]
 8019c6c:	f001 fc8c 	bl	801b588 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8019c70:	68fb      	ldr	r3, [r7, #12]
 8019c72:	220f      	movs	r2, #15
 8019c74:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8019c76:	4b09      	ldr	r3, [pc, #36]	; (8019c9c <ip_reass_enqueue_new_datagram+0x70>)
 8019c78:	681a      	ldr	r2, [r3, #0]
 8019c7a:	68fb      	ldr	r3, [r7, #12]
 8019c7c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8019c7e:	4a07      	ldr	r2, [pc, #28]	; (8019c9c <ip_reass_enqueue_new_datagram+0x70>)
 8019c80:	68fb      	ldr	r3, [r7, #12]
 8019c82:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8019c84:	68fb      	ldr	r3, [r7, #12]
 8019c86:	3308      	adds	r3, #8
 8019c88:	2214      	movs	r2, #20
 8019c8a:	6879      	ldr	r1, [r7, #4]
 8019c8c:	4618      	mov	r0, r3
 8019c8e:	f001 fcf4 	bl	801b67a <memcpy>
  return ipr;
 8019c92:	68fb      	ldr	r3, [r7, #12]
}
 8019c94:	4618      	mov	r0, r3
 8019c96:	3710      	adds	r7, #16
 8019c98:	46bd      	mov	sp, r7
 8019c9a:	bd80      	pop	{r7, pc}
 8019c9c:	200071b0 	.word	0x200071b0

08019ca0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019ca0:	b580      	push	{r7, lr}
 8019ca2:	b082      	sub	sp, #8
 8019ca4:	af00      	add	r7, sp, #0
 8019ca6:	6078      	str	r0, [r7, #4]
 8019ca8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8019caa:	4b10      	ldr	r3, [pc, #64]	; (8019cec <ip_reass_dequeue_datagram+0x4c>)
 8019cac:	681b      	ldr	r3, [r3, #0]
 8019cae:	687a      	ldr	r2, [r7, #4]
 8019cb0:	429a      	cmp	r2, r3
 8019cb2:	d104      	bne.n	8019cbe <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	681b      	ldr	r3, [r3, #0]
 8019cb8:	4a0c      	ldr	r2, [pc, #48]	; (8019cec <ip_reass_dequeue_datagram+0x4c>)
 8019cba:	6013      	str	r3, [r2, #0]
 8019cbc:	e00d      	b.n	8019cda <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8019cbe:	683b      	ldr	r3, [r7, #0]
 8019cc0:	2b00      	cmp	r3, #0
 8019cc2:	d106      	bne.n	8019cd2 <ip_reass_dequeue_datagram+0x32>
 8019cc4:	4b0a      	ldr	r3, [pc, #40]	; (8019cf0 <ip_reass_dequeue_datagram+0x50>)
 8019cc6:	f240 1245 	movw	r2, #325	; 0x145
 8019cca:	490a      	ldr	r1, [pc, #40]	; (8019cf4 <ip_reass_dequeue_datagram+0x54>)
 8019ccc:	480a      	ldr	r0, [pc, #40]	; (8019cf8 <ip_reass_dequeue_datagram+0x58>)
 8019cce:	f001 facb 	bl	801b268 <iprintf>
    prev->next = ipr->next;
 8019cd2:	687b      	ldr	r3, [r7, #4]
 8019cd4:	681a      	ldr	r2, [r3, #0]
 8019cd6:	683b      	ldr	r3, [r7, #0]
 8019cd8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8019cda:	6879      	ldr	r1, [r7, #4]
 8019cdc:	2004      	movs	r0, #4
 8019cde:	f7f6 fdab 	bl	8010838 <memp_free>
}
 8019ce2:	bf00      	nop
 8019ce4:	3708      	adds	r7, #8
 8019ce6:	46bd      	mov	sp, r7
 8019ce8:	bd80      	pop	{r7, pc}
 8019cea:	bf00      	nop
 8019cec:	200071b0 	.word	0x200071b0
 8019cf0:	080209f4 	.word	0x080209f4
 8019cf4:	08020abc 	.word	0x08020abc
 8019cf8:	08020a3c 	.word	0x08020a3c

08019cfc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8019cfc:	b580      	push	{r7, lr}
 8019cfe:	b08c      	sub	sp, #48	; 0x30
 8019d00:	af00      	add	r7, sp, #0
 8019d02:	60f8      	str	r0, [r7, #12]
 8019d04:	60b9      	str	r1, [r7, #8]
 8019d06:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8019d08:	2300      	movs	r3, #0
 8019d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8019d0c:	2301      	movs	r3, #1
 8019d0e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8019d10:	68bb      	ldr	r3, [r7, #8]
 8019d12:	685b      	ldr	r3, [r3, #4]
 8019d14:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8019d16:	69fb      	ldr	r3, [r7, #28]
 8019d18:	885b      	ldrh	r3, [r3, #2]
 8019d1a:	b29b      	uxth	r3, r3
 8019d1c:	4618      	mov	r0, r3
 8019d1e:	f7f5 fffd 	bl	800fd1c <lwip_htons>
 8019d22:	4603      	mov	r3, r0
 8019d24:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8019d26:	69fb      	ldr	r3, [r7, #28]
 8019d28:	781b      	ldrb	r3, [r3, #0]
 8019d2a:	f003 030f 	and.w	r3, r3, #15
 8019d2e:	b2db      	uxtb	r3, r3
 8019d30:	009b      	lsls	r3, r3, #2
 8019d32:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8019d34:	7e7b      	ldrb	r3, [r7, #25]
 8019d36:	b29b      	uxth	r3, r3
 8019d38:	8b7a      	ldrh	r2, [r7, #26]
 8019d3a:	429a      	cmp	r2, r3
 8019d3c:	d202      	bcs.n	8019d44 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8019d42:	e135      	b.n	8019fb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8019d44:	7e7b      	ldrb	r3, [r7, #25]
 8019d46:	b29b      	uxth	r3, r3
 8019d48:	8b7a      	ldrh	r2, [r7, #26]
 8019d4a:	1ad3      	subs	r3, r2, r3
 8019d4c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8019d4e:	69fb      	ldr	r3, [r7, #28]
 8019d50:	88db      	ldrh	r3, [r3, #6]
 8019d52:	b29b      	uxth	r3, r3
 8019d54:	4618      	mov	r0, r3
 8019d56:	f7f5 ffe1 	bl	800fd1c <lwip_htons>
 8019d5a:	4603      	mov	r3, r0
 8019d5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019d60:	b29b      	uxth	r3, r3
 8019d62:	00db      	lsls	r3, r3, #3
 8019d64:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8019d66:	68bb      	ldr	r3, [r7, #8]
 8019d68:	685b      	ldr	r3, [r3, #4]
 8019d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8019d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d6e:	2200      	movs	r2, #0
 8019d70:	701a      	strb	r2, [r3, #0]
 8019d72:	2200      	movs	r2, #0
 8019d74:	705a      	strb	r2, [r3, #1]
 8019d76:	2200      	movs	r2, #0
 8019d78:	709a      	strb	r2, [r3, #2]
 8019d7a:	2200      	movs	r2, #0
 8019d7c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8019d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d80:	8afa      	ldrh	r2, [r7, #22]
 8019d82:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8019d84:	8afa      	ldrh	r2, [r7, #22]
 8019d86:	8b7b      	ldrh	r3, [r7, #26]
 8019d88:	4413      	add	r3, r2
 8019d8a:	b29a      	uxth	r2, r3
 8019d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d8e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8019d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d92:	88db      	ldrh	r3, [r3, #6]
 8019d94:	b29b      	uxth	r3, r3
 8019d96:	8afa      	ldrh	r2, [r7, #22]
 8019d98:	429a      	cmp	r2, r3
 8019d9a:	d902      	bls.n	8019da2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8019da0:	e106      	b.n	8019fb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8019da2:	68fb      	ldr	r3, [r7, #12]
 8019da4:	685b      	ldr	r3, [r3, #4]
 8019da6:	627b      	str	r3, [r7, #36]	; 0x24
 8019da8:	e068      	b.n	8019e7c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8019daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019dac:	685b      	ldr	r3, [r3, #4]
 8019dae:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8019db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019db2:	889b      	ldrh	r3, [r3, #4]
 8019db4:	b29a      	uxth	r2, r3
 8019db6:	693b      	ldr	r3, [r7, #16]
 8019db8:	889b      	ldrh	r3, [r3, #4]
 8019dba:	b29b      	uxth	r3, r3
 8019dbc:	429a      	cmp	r2, r3
 8019dbe:	d235      	bcs.n	8019e2c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8019dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019dc4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8019dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019dc8:	2b00      	cmp	r3, #0
 8019dca:	d020      	beq.n	8019e0e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8019dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dce:	889b      	ldrh	r3, [r3, #4]
 8019dd0:	b29a      	uxth	r2, r3
 8019dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019dd4:	88db      	ldrh	r3, [r3, #6]
 8019dd6:	b29b      	uxth	r3, r3
 8019dd8:	429a      	cmp	r2, r3
 8019dda:	d307      	bcc.n	8019dec <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8019ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dde:	88db      	ldrh	r3, [r3, #6]
 8019de0:	b29a      	uxth	r2, r3
 8019de2:	693b      	ldr	r3, [r7, #16]
 8019de4:	889b      	ldrh	r3, [r3, #4]
 8019de6:	b29b      	uxth	r3, r3
 8019de8:	429a      	cmp	r2, r3
 8019dea:	d902      	bls.n	8019df2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019dec:	f04f 33ff 	mov.w	r3, #4294967295
 8019df0:	e0de      	b.n	8019fb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8019df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019df4:	68ba      	ldr	r2, [r7, #8]
 8019df6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8019df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019dfa:	88db      	ldrh	r3, [r3, #6]
 8019dfc:	b29a      	uxth	r2, r3
 8019dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e00:	889b      	ldrh	r3, [r3, #4]
 8019e02:	b29b      	uxth	r3, r3
 8019e04:	429a      	cmp	r2, r3
 8019e06:	d03d      	beq.n	8019e84 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019e08:	2300      	movs	r3, #0
 8019e0a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8019e0c:	e03a      	b.n	8019e84 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8019e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e10:	88db      	ldrh	r3, [r3, #6]
 8019e12:	b29a      	uxth	r2, r3
 8019e14:	693b      	ldr	r3, [r7, #16]
 8019e16:	889b      	ldrh	r3, [r3, #4]
 8019e18:	b29b      	uxth	r3, r3
 8019e1a:	429a      	cmp	r2, r3
 8019e1c:	d902      	bls.n	8019e24 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8019e22:	e0c5      	b.n	8019fb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8019e24:	68fb      	ldr	r3, [r7, #12]
 8019e26:	68ba      	ldr	r2, [r7, #8]
 8019e28:	605a      	str	r2, [r3, #4]
      break;
 8019e2a:	e02b      	b.n	8019e84 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8019e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e2e:	889b      	ldrh	r3, [r3, #4]
 8019e30:	b29a      	uxth	r2, r3
 8019e32:	693b      	ldr	r3, [r7, #16]
 8019e34:	889b      	ldrh	r3, [r3, #4]
 8019e36:	b29b      	uxth	r3, r3
 8019e38:	429a      	cmp	r2, r3
 8019e3a:	d102      	bne.n	8019e42 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8019e40:	e0b6      	b.n	8019fb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8019e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e44:	889b      	ldrh	r3, [r3, #4]
 8019e46:	b29a      	uxth	r2, r3
 8019e48:	693b      	ldr	r3, [r7, #16]
 8019e4a:	88db      	ldrh	r3, [r3, #6]
 8019e4c:	b29b      	uxth	r3, r3
 8019e4e:	429a      	cmp	r2, r3
 8019e50:	d202      	bcs.n	8019e58 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019e52:	f04f 33ff 	mov.w	r3, #4294967295
 8019e56:	e0ab      	b.n	8019fb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8019e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e5a:	2b00      	cmp	r3, #0
 8019e5c:	d009      	beq.n	8019e72 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8019e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e60:	88db      	ldrh	r3, [r3, #6]
 8019e62:	b29a      	uxth	r2, r3
 8019e64:	693b      	ldr	r3, [r7, #16]
 8019e66:	889b      	ldrh	r3, [r3, #4]
 8019e68:	b29b      	uxth	r3, r3
 8019e6a:	429a      	cmp	r2, r3
 8019e6c:	d001      	beq.n	8019e72 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019e6e:	2300      	movs	r3, #0
 8019e70:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8019e72:	693b      	ldr	r3, [r7, #16]
 8019e74:	681b      	ldr	r3, [r3, #0]
 8019e76:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8019e78:	693b      	ldr	r3, [r7, #16]
 8019e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8019e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e7e:	2b00      	cmp	r3, #0
 8019e80:	d193      	bne.n	8019daa <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8019e82:	e000      	b.n	8019e86 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8019e84:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8019e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e88:	2b00      	cmp	r3, #0
 8019e8a:	d12d      	bne.n	8019ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8019e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e8e:	2b00      	cmp	r3, #0
 8019e90:	d01c      	beq.n	8019ecc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8019e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e94:	88db      	ldrh	r3, [r3, #6]
 8019e96:	b29a      	uxth	r2, r3
 8019e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e9a:	889b      	ldrh	r3, [r3, #4]
 8019e9c:	b29b      	uxth	r3, r3
 8019e9e:	429a      	cmp	r2, r3
 8019ea0:	d906      	bls.n	8019eb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8019ea2:	4b45      	ldr	r3, [pc, #276]	; (8019fb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019ea4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8019ea8:	4944      	ldr	r1, [pc, #272]	; (8019fbc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8019eaa:	4845      	ldr	r0, [pc, #276]	; (8019fc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019eac:	f001 f9dc 	bl	801b268 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8019eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019eb2:	68ba      	ldr	r2, [r7, #8]
 8019eb4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8019eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019eb8:	88db      	ldrh	r3, [r3, #6]
 8019eba:	b29a      	uxth	r2, r3
 8019ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ebe:	889b      	ldrh	r3, [r3, #4]
 8019ec0:	b29b      	uxth	r3, r3
 8019ec2:	429a      	cmp	r2, r3
 8019ec4:	d010      	beq.n	8019ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8019ec6:	2300      	movs	r3, #0
 8019ec8:	623b      	str	r3, [r7, #32]
 8019eca:	e00d      	b.n	8019ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8019ecc:	68fb      	ldr	r3, [r7, #12]
 8019ece:	685b      	ldr	r3, [r3, #4]
 8019ed0:	2b00      	cmp	r3, #0
 8019ed2:	d006      	beq.n	8019ee2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8019ed4:	4b38      	ldr	r3, [pc, #224]	; (8019fb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019ed6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8019eda:	493a      	ldr	r1, [pc, #232]	; (8019fc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8019edc:	4838      	ldr	r0, [pc, #224]	; (8019fc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019ede:	f001 f9c3 	bl	801b268 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8019ee2:	68fb      	ldr	r3, [r7, #12]
 8019ee4:	68ba      	ldr	r2, [r7, #8]
 8019ee6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	d105      	bne.n	8019efa <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8019eee:	68fb      	ldr	r3, [r7, #12]
 8019ef0:	7f9b      	ldrb	r3, [r3, #30]
 8019ef2:	f003 0301 	and.w	r3, r3, #1
 8019ef6:	2b00      	cmp	r3, #0
 8019ef8:	d059      	beq.n	8019fae <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8019efa:	6a3b      	ldr	r3, [r7, #32]
 8019efc:	2b00      	cmp	r3, #0
 8019efe:	d04f      	beq.n	8019fa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8019f00:	68fb      	ldr	r3, [r7, #12]
 8019f02:	685b      	ldr	r3, [r3, #4]
 8019f04:	2b00      	cmp	r3, #0
 8019f06:	d006      	beq.n	8019f16 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8019f08:	68fb      	ldr	r3, [r7, #12]
 8019f0a:	685b      	ldr	r3, [r3, #4]
 8019f0c:	685b      	ldr	r3, [r3, #4]
 8019f0e:	889b      	ldrh	r3, [r3, #4]
 8019f10:	b29b      	uxth	r3, r3
 8019f12:	2b00      	cmp	r3, #0
 8019f14:	d002      	beq.n	8019f1c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8019f16:	2300      	movs	r3, #0
 8019f18:	623b      	str	r3, [r7, #32]
 8019f1a:	e041      	b.n	8019fa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8019f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f1e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8019f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f22:	681b      	ldr	r3, [r3, #0]
 8019f24:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8019f26:	e012      	b.n	8019f4e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8019f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f2a:	685b      	ldr	r3, [r3, #4]
 8019f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8019f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f30:	88db      	ldrh	r3, [r3, #6]
 8019f32:	b29a      	uxth	r2, r3
 8019f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f36:	889b      	ldrh	r3, [r3, #4]
 8019f38:	b29b      	uxth	r3, r3
 8019f3a:	429a      	cmp	r2, r3
 8019f3c:	d002      	beq.n	8019f44 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8019f3e:	2300      	movs	r3, #0
 8019f40:	623b      	str	r3, [r7, #32]
            break;
 8019f42:	e007      	b.n	8019f54 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8019f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f46:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8019f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f4a:	681b      	ldr	r3, [r3, #0]
 8019f4c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8019f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f50:	2b00      	cmp	r3, #0
 8019f52:	d1e9      	bne.n	8019f28 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8019f54:	6a3b      	ldr	r3, [r7, #32]
 8019f56:	2b00      	cmp	r3, #0
 8019f58:	d022      	beq.n	8019fa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8019f5a:	68fb      	ldr	r3, [r7, #12]
 8019f5c:	685b      	ldr	r3, [r3, #4]
 8019f5e:	2b00      	cmp	r3, #0
 8019f60:	d106      	bne.n	8019f70 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8019f62:	4b15      	ldr	r3, [pc, #84]	; (8019fb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019f64:	f240 12df 	movw	r2, #479	; 0x1df
 8019f68:	4917      	ldr	r1, [pc, #92]	; (8019fc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019f6a:	4815      	ldr	r0, [pc, #84]	; (8019fc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019f6c:	f001 f97c 	bl	801b268 <iprintf>
          LWIP_ASSERT("sanity check",
 8019f70:	68fb      	ldr	r3, [r7, #12]
 8019f72:	685b      	ldr	r3, [r3, #4]
 8019f74:	685b      	ldr	r3, [r3, #4]
 8019f76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019f78:	429a      	cmp	r2, r3
 8019f7a:	d106      	bne.n	8019f8a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8019f7c:	4b0e      	ldr	r3, [pc, #56]	; (8019fb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019f7e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8019f82:	4911      	ldr	r1, [pc, #68]	; (8019fc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019f84:	480e      	ldr	r0, [pc, #56]	; (8019fc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019f86:	f001 f96f 	bl	801b268 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8019f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f8c:	681b      	ldr	r3, [r3, #0]
 8019f8e:	2b00      	cmp	r3, #0
 8019f90:	d006      	beq.n	8019fa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8019f92:	4b09      	ldr	r3, [pc, #36]	; (8019fb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019f94:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8019f98:	490c      	ldr	r1, [pc, #48]	; (8019fcc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8019f9a:	4809      	ldr	r0, [pc, #36]	; (8019fc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019f9c:	f001 f964 	bl	801b268 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8019fa0:	6a3b      	ldr	r3, [r7, #32]
 8019fa2:	2b00      	cmp	r3, #0
 8019fa4:	bf14      	ite	ne
 8019fa6:	2301      	movne	r3, #1
 8019fa8:	2300      	moveq	r3, #0
 8019faa:	b2db      	uxtb	r3, r3
 8019fac:	e000      	b.n	8019fb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8019fae:	2300      	movs	r3, #0
}
 8019fb0:	4618      	mov	r0, r3
 8019fb2:	3730      	adds	r7, #48	; 0x30
 8019fb4:	46bd      	mov	sp, r7
 8019fb6:	bd80      	pop	{r7, pc}
 8019fb8:	080209f4 	.word	0x080209f4
 8019fbc:	08020ad8 	.word	0x08020ad8
 8019fc0:	08020a3c 	.word	0x08020a3c
 8019fc4:	08020af8 	.word	0x08020af8
 8019fc8:	08020b30 	.word	0x08020b30
 8019fcc:	08020b40 	.word	0x08020b40

08019fd0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8019fd0:	b580      	push	{r7, lr}
 8019fd2:	b08e      	sub	sp, #56	; 0x38
 8019fd4:	af00      	add	r7, sp, #0
 8019fd6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	685b      	ldr	r3, [r3, #4]
 8019fdc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8019fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fe0:	781b      	ldrb	r3, [r3, #0]
 8019fe2:	f003 030f 	and.w	r3, r3, #15
 8019fe6:	b2db      	uxtb	r3, r3
 8019fe8:	009b      	lsls	r3, r3, #2
 8019fea:	b2db      	uxtb	r3, r3
 8019fec:	2b14      	cmp	r3, #20
 8019fee:	f040 8171 	bne.w	801a2d4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8019ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ff4:	88db      	ldrh	r3, [r3, #6]
 8019ff6:	b29b      	uxth	r3, r3
 8019ff8:	4618      	mov	r0, r3
 8019ffa:	f7f5 fe8f 	bl	800fd1c <lwip_htons>
 8019ffe:	4603      	mov	r3, r0
 801a000:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a004:	b29b      	uxth	r3, r3
 801a006:	00db      	lsls	r3, r3, #3
 801a008:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a00c:	885b      	ldrh	r3, [r3, #2]
 801a00e:	b29b      	uxth	r3, r3
 801a010:	4618      	mov	r0, r3
 801a012:	f7f5 fe83 	bl	800fd1c <lwip_htons>
 801a016:	4603      	mov	r3, r0
 801a018:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801a01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a01c:	781b      	ldrb	r3, [r3, #0]
 801a01e:	f003 030f 	and.w	r3, r3, #15
 801a022:	b2db      	uxtb	r3, r3
 801a024:	009b      	lsls	r3, r3, #2
 801a026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801a02a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a02e:	b29b      	uxth	r3, r3
 801a030:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a032:	429a      	cmp	r2, r3
 801a034:	f0c0 8150 	bcc.w	801a2d8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801a038:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a03c:	b29b      	uxth	r3, r3
 801a03e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a040:	1ad3      	subs	r3, r2, r3
 801a042:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801a044:	6878      	ldr	r0, [r7, #4]
 801a046:	f7f7 faf5 	bl	8011634 <pbuf_clen>
 801a04a:	4603      	mov	r3, r0
 801a04c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801a04e:	4b8c      	ldr	r3, [pc, #560]	; (801a280 <ip4_reass+0x2b0>)
 801a050:	881b      	ldrh	r3, [r3, #0]
 801a052:	461a      	mov	r2, r3
 801a054:	8c3b      	ldrh	r3, [r7, #32]
 801a056:	4413      	add	r3, r2
 801a058:	2b0a      	cmp	r3, #10
 801a05a:	dd10      	ble.n	801a07e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a05c:	8c3b      	ldrh	r3, [r7, #32]
 801a05e:	4619      	mov	r1, r3
 801a060:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a062:	f7ff fd81 	bl	8019b68 <ip_reass_remove_oldest_datagram>
 801a066:	4603      	mov	r3, r0
 801a068:	2b00      	cmp	r3, #0
 801a06a:	f000 8137 	beq.w	801a2dc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801a06e:	4b84      	ldr	r3, [pc, #528]	; (801a280 <ip4_reass+0x2b0>)
 801a070:	881b      	ldrh	r3, [r3, #0]
 801a072:	461a      	mov	r2, r3
 801a074:	8c3b      	ldrh	r3, [r7, #32]
 801a076:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a078:	2b0a      	cmp	r3, #10
 801a07a:	f300 812f 	bgt.w	801a2dc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a07e:	4b81      	ldr	r3, [pc, #516]	; (801a284 <ip4_reass+0x2b4>)
 801a080:	681b      	ldr	r3, [r3, #0]
 801a082:	633b      	str	r3, [r7, #48]	; 0x30
 801a084:	e015      	b.n	801a0b2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801a086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a088:	695a      	ldr	r2, [r3, #20]
 801a08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a08c:	68db      	ldr	r3, [r3, #12]
 801a08e:	429a      	cmp	r2, r3
 801a090:	d10c      	bne.n	801a0ac <ip4_reass+0xdc>
 801a092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a094:	699a      	ldr	r2, [r3, #24]
 801a096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a098:	691b      	ldr	r3, [r3, #16]
 801a09a:	429a      	cmp	r2, r3
 801a09c:	d106      	bne.n	801a0ac <ip4_reass+0xdc>
 801a09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0a0:	899a      	ldrh	r2, [r3, #12]
 801a0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0a4:	889b      	ldrh	r3, [r3, #4]
 801a0a6:	b29b      	uxth	r3, r3
 801a0a8:	429a      	cmp	r2, r3
 801a0aa:	d006      	beq.n	801a0ba <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0ae:	681b      	ldr	r3, [r3, #0]
 801a0b0:	633b      	str	r3, [r7, #48]	; 0x30
 801a0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0b4:	2b00      	cmp	r3, #0
 801a0b6:	d1e6      	bne.n	801a086 <ip4_reass+0xb6>
 801a0b8:	e000      	b.n	801a0bc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801a0ba:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801a0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0be:	2b00      	cmp	r3, #0
 801a0c0:	d109      	bne.n	801a0d6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801a0c2:	8c3b      	ldrh	r3, [r7, #32]
 801a0c4:	4619      	mov	r1, r3
 801a0c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a0c8:	f7ff fdb0 	bl	8019c2c <ip_reass_enqueue_new_datagram>
 801a0cc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801a0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0d0:	2b00      	cmp	r3, #0
 801a0d2:	d11c      	bne.n	801a10e <ip4_reass+0x13e>
      goto nullreturn;
 801a0d4:	e105      	b.n	801a2e2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0d8:	88db      	ldrh	r3, [r3, #6]
 801a0da:	b29b      	uxth	r3, r3
 801a0dc:	4618      	mov	r0, r3
 801a0de:	f7f5 fe1d 	bl	800fd1c <lwip_htons>
 801a0e2:	4603      	mov	r3, r0
 801a0e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a0e8:	2b00      	cmp	r3, #0
 801a0ea:	d110      	bne.n	801a10e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801a0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0ee:	89db      	ldrh	r3, [r3, #14]
 801a0f0:	4618      	mov	r0, r3
 801a0f2:	f7f5 fe13 	bl	800fd1c <lwip_htons>
 801a0f6:	4603      	mov	r3, r0
 801a0f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a0fc:	2b00      	cmp	r3, #0
 801a0fe:	d006      	beq.n	801a10e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801a100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a102:	3308      	adds	r3, #8
 801a104:	2214      	movs	r2, #20
 801a106:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a108:	4618      	mov	r0, r3
 801a10a:	f001 fab6 	bl	801b67a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801a10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a110:	88db      	ldrh	r3, [r3, #6]
 801a112:	b29b      	uxth	r3, r3
 801a114:	f003 0320 	and.w	r3, r3, #32
 801a118:	2b00      	cmp	r3, #0
 801a11a:	bf0c      	ite	eq
 801a11c:	2301      	moveq	r3, #1
 801a11e:	2300      	movne	r3, #0
 801a120:	b2db      	uxtb	r3, r3
 801a122:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801a124:	69fb      	ldr	r3, [r7, #28]
 801a126:	2b00      	cmp	r3, #0
 801a128:	d00e      	beq.n	801a148 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801a12a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a12c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a12e:	4413      	add	r3, r2
 801a130:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801a132:	8b7a      	ldrh	r2, [r7, #26]
 801a134:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801a136:	429a      	cmp	r2, r3
 801a138:	f0c0 80a0 	bcc.w	801a27c <ip4_reass+0x2ac>
 801a13c:	8b7b      	ldrh	r3, [r7, #26]
 801a13e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801a142:	4293      	cmp	r3, r2
 801a144:	f200 809a 	bhi.w	801a27c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801a148:	69fa      	ldr	r2, [r7, #28]
 801a14a:	6879      	ldr	r1, [r7, #4]
 801a14c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a14e:	f7ff fdd5 	bl	8019cfc <ip_reass_chain_frag_into_datagram_and_validate>
 801a152:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801a154:	697b      	ldr	r3, [r7, #20]
 801a156:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a15a:	f000 809b 	beq.w	801a294 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801a15e:	4b48      	ldr	r3, [pc, #288]	; (801a280 <ip4_reass+0x2b0>)
 801a160:	881a      	ldrh	r2, [r3, #0]
 801a162:	8c3b      	ldrh	r3, [r7, #32]
 801a164:	4413      	add	r3, r2
 801a166:	b29a      	uxth	r2, r3
 801a168:	4b45      	ldr	r3, [pc, #276]	; (801a280 <ip4_reass+0x2b0>)
 801a16a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801a16c:	69fb      	ldr	r3, [r7, #28]
 801a16e:	2b00      	cmp	r3, #0
 801a170:	d00d      	beq.n	801a18e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801a172:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a174:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a176:	4413      	add	r3, r2
 801a178:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801a17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a17c:	8a7a      	ldrh	r2, [r7, #18]
 801a17e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801a180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a182:	7f9b      	ldrb	r3, [r3, #30]
 801a184:	f043 0301 	orr.w	r3, r3, #1
 801a188:	b2da      	uxtb	r2, r3
 801a18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a18c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801a18e:	697b      	ldr	r3, [r7, #20]
 801a190:	2b01      	cmp	r3, #1
 801a192:	d171      	bne.n	801a278 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801a194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a196:	8b9b      	ldrh	r3, [r3, #28]
 801a198:	3314      	adds	r3, #20
 801a19a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801a19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a19e:	685b      	ldr	r3, [r3, #4]
 801a1a0:	685b      	ldr	r3, [r3, #4]
 801a1a2:	681b      	ldr	r3, [r3, #0]
 801a1a4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801a1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1a8:	685b      	ldr	r3, [r3, #4]
 801a1aa:	685b      	ldr	r3, [r3, #4]
 801a1ac:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801a1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1b0:	3308      	adds	r3, #8
 801a1b2:	2214      	movs	r2, #20
 801a1b4:	4619      	mov	r1, r3
 801a1b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a1b8:	f001 fa5f 	bl	801b67a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801a1bc:	8a3b      	ldrh	r3, [r7, #16]
 801a1be:	4618      	mov	r0, r3
 801a1c0:	f7f5 fdac 	bl	800fd1c <lwip_htons>
 801a1c4:	4603      	mov	r3, r0
 801a1c6:	461a      	mov	r2, r3
 801a1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1ca:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801a1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1ce:	2200      	movs	r2, #0
 801a1d0:	719a      	strb	r2, [r3, #6]
 801a1d2:	2200      	movs	r2, #0
 801a1d4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801a1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1d8:	2200      	movs	r2, #0
 801a1da:	729a      	strb	r2, [r3, #10]
 801a1dc:	2200      	movs	r2, #0
 801a1de:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801a1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1e2:	685b      	ldr	r3, [r3, #4]
 801a1e4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801a1e6:	e00d      	b.n	801a204 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801a1e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a1ea:	685b      	ldr	r3, [r3, #4]
 801a1ec:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801a1ee:	2114      	movs	r1, #20
 801a1f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801a1f2:	f7f7 f911 	bl	8011418 <pbuf_remove_header>
      pbuf_cat(p, r);
 801a1f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a1f8:	6878      	ldr	r0, [r7, #4]
 801a1fa:	f7f7 fa55 	bl	80116a8 <pbuf_cat>
      r = iprh->next_pbuf;
 801a1fe:	68fb      	ldr	r3, [r7, #12]
 801a200:	681b      	ldr	r3, [r3, #0]
 801a202:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801a204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a206:	2b00      	cmp	r3, #0
 801a208:	d1ee      	bne.n	801a1e8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801a20a:	4b1e      	ldr	r3, [pc, #120]	; (801a284 <ip4_reass+0x2b4>)
 801a20c:	681b      	ldr	r3, [r3, #0]
 801a20e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a210:	429a      	cmp	r2, r3
 801a212:	d102      	bne.n	801a21a <ip4_reass+0x24a>
      ipr_prev = NULL;
 801a214:	2300      	movs	r3, #0
 801a216:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a218:	e010      	b.n	801a23c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a21a:	4b1a      	ldr	r3, [pc, #104]	; (801a284 <ip4_reass+0x2b4>)
 801a21c:	681b      	ldr	r3, [r3, #0]
 801a21e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a220:	e007      	b.n	801a232 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801a222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a224:	681b      	ldr	r3, [r3, #0]
 801a226:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a228:	429a      	cmp	r2, r3
 801a22a:	d006      	beq.n	801a23a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a22e:	681b      	ldr	r3, [r3, #0]
 801a230:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a234:	2b00      	cmp	r3, #0
 801a236:	d1f4      	bne.n	801a222 <ip4_reass+0x252>
 801a238:	e000      	b.n	801a23c <ip4_reass+0x26c>
          break;
 801a23a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801a23c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a23e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a240:	f7ff fd2e 	bl	8019ca0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801a244:	6878      	ldr	r0, [r7, #4]
 801a246:	f7f7 f9f5 	bl	8011634 <pbuf_clen>
 801a24a:	4603      	mov	r3, r0
 801a24c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801a24e:	4b0c      	ldr	r3, [pc, #48]	; (801a280 <ip4_reass+0x2b0>)
 801a250:	881b      	ldrh	r3, [r3, #0]
 801a252:	8c3a      	ldrh	r2, [r7, #32]
 801a254:	429a      	cmp	r2, r3
 801a256:	d906      	bls.n	801a266 <ip4_reass+0x296>
 801a258:	4b0b      	ldr	r3, [pc, #44]	; (801a288 <ip4_reass+0x2b8>)
 801a25a:	f240 229b 	movw	r2, #667	; 0x29b
 801a25e:	490b      	ldr	r1, [pc, #44]	; (801a28c <ip4_reass+0x2bc>)
 801a260:	480b      	ldr	r0, [pc, #44]	; (801a290 <ip4_reass+0x2c0>)
 801a262:	f001 f801 	bl	801b268 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801a266:	4b06      	ldr	r3, [pc, #24]	; (801a280 <ip4_reass+0x2b0>)
 801a268:	881a      	ldrh	r2, [r3, #0]
 801a26a:	8c3b      	ldrh	r3, [r7, #32]
 801a26c:	1ad3      	subs	r3, r2, r3
 801a26e:	b29a      	uxth	r2, r3
 801a270:	4b03      	ldr	r3, [pc, #12]	; (801a280 <ip4_reass+0x2b0>)
 801a272:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801a274:	687b      	ldr	r3, [r7, #4]
 801a276:	e038      	b.n	801a2ea <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801a278:	2300      	movs	r3, #0
 801a27a:	e036      	b.n	801a2ea <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801a27c:	bf00      	nop
 801a27e:	e00a      	b.n	801a296 <ip4_reass+0x2c6>
 801a280:	200071b4 	.word	0x200071b4
 801a284:	200071b0 	.word	0x200071b0
 801a288:	080209f4 	.word	0x080209f4
 801a28c:	08020b64 	.word	0x08020b64
 801a290:	08020a3c 	.word	0x08020a3c
    goto nullreturn_ipr;
 801a294:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801a296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a298:	2b00      	cmp	r3, #0
 801a29a:	d106      	bne.n	801a2aa <ip4_reass+0x2da>
 801a29c:	4b15      	ldr	r3, [pc, #84]	; (801a2f4 <ip4_reass+0x324>)
 801a29e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801a2a2:	4915      	ldr	r1, [pc, #84]	; (801a2f8 <ip4_reass+0x328>)
 801a2a4:	4815      	ldr	r0, [pc, #84]	; (801a2fc <ip4_reass+0x32c>)
 801a2a6:	f000 ffdf 	bl	801b268 <iprintf>
  if (ipr->p == NULL) {
 801a2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2ac:	685b      	ldr	r3, [r3, #4]
 801a2ae:	2b00      	cmp	r3, #0
 801a2b0:	d116      	bne.n	801a2e0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801a2b2:	4b13      	ldr	r3, [pc, #76]	; (801a300 <ip4_reass+0x330>)
 801a2b4:	681b      	ldr	r3, [r3, #0]
 801a2b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a2b8:	429a      	cmp	r2, r3
 801a2ba:	d006      	beq.n	801a2ca <ip4_reass+0x2fa>
 801a2bc:	4b0d      	ldr	r3, [pc, #52]	; (801a2f4 <ip4_reass+0x324>)
 801a2be:	f240 22ab 	movw	r2, #683	; 0x2ab
 801a2c2:	4910      	ldr	r1, [pc, #64]	; (801a304 <ip4_reass+0x334>)
 801a2c4:	480d      	ldr	r0, [pc, #52]	; (801a2fc <ip4_reass+0x32c>)
 801a2c6:	f000 ffcf 	bl	801b268 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801a2ca:	2100      	movs	r1, #0
 801a2cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a2ce:	f7ff fce7 	bl	8019ca0 <ip_reass_dequeue_datagram>
 801a2d2:	e006      	b.n	801a2e2 <ip4_reass+0x312>
    goto nullreturn;
 801a2d4:	bf00      	nop
 801a2d6:	e004      	b.n	801a2e2 <ip4_reass+0x312>
    goto nullreturn;
 801a2d8:	bf00      	nop
 801a2da:	e002      	b.n	801a2e2 <ip4_reass+0x312>
      goto nullreturn;
 801a2dc:	bf00      	nop
 801a2de:	e000      	b.n	801a2e2 <ip4_reass+0x312>
  }

nullreturn:
 801a2e0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801a2e2:	6878      	ldr	r0, [r7, #4]
 801a2e4:	f7f7 f91e 	bl	8011524 <pbuf_free>
  return NULL;
 801a2e8:	2300      	movs	r3, #0
}
 801a2ea:	4618      	mov	r0, r3
 801a2ec:	3738      	adds	r7, #56	; 0x38
 801a2ee:	46bd      	mov	sp, r7
 801a2f0:	bd80      	pop	{r7, pc}
 801a2f2:	bf00      	nop
 801a2f4:	080209f4 	.word	0x080209f4
 801a2f8:	08020b80 	.word	0x08020b80
 801a2fc:	08020a3c 	.word	0x08020a3c
 801a300:	200071b0 	.word	0x200071b0
 801a304:	08020b8c 	.word	0x08020b8c

0801a308 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801a308:	b580      	push	{r7, lr}
 801a30a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801a30c:	2005      	movs	r0, #5
 801a30e:	f7f6 fa23 	bl	8010758 <memp_malloc>
 801a312:	4603      	mov	r3, r0
}
 801a314:	4618      	mov	r0, r3
 801a316:	bd80      	pop	{r7, pc}

0801a318 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801a318:	b580      	push	{r7, lr}
 801a31a:	b082      	sub	sp, #8
 801a31c:	af00      	add	r7, sp, #0
 801a31e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801a320:	687b      	ldr	r3, [r7, #4]
 801a322:	2b00      	cmp	r3, #0
 801a324:	d106      	bne.n	801a334 <ip_frag_free_pbuf_custom_ref+0x1c>
 801a326:	4b07      	ldr	r3, [pc, #28]	; (801a344 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801a328:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801a32c:	4906      	ldr	r1, [pc, #24]	; (801a348 <ip_frag_free_pbuf_custom_ref+0x30>)
 801a32e:	4807      	ldr	r0, [pc, #28]	; (801a34c <ip_frag_free_pbuf_custom_ref+0x34>)
 801a330:	f000 ff9a 	bl	801b268 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801a334:	6879      	ldr	r1, [r7, #4]
 801a336:	2005      	movs	r0, #5
 801a338:	f7f6 fa7e 	bl	8010838 <memp_free>
}
 801a33c:	bf00      	nop
 801a33e:	3708      	adds	r7, #8
 801a340:	46bd      	mov	sp, r7
 801a342:	bd80      	pop	{r7, pc}
 801a344:	080209f4 	.word	0x080209f4
 801a348:	08020bac 	.word	0x08020bac
 801a34c:	08020a3c 	.word	0x08020a3c

0801a350 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801a350:	b580      	push	{r7, lr}
 801a352:	b084      	sub	sp, #16
 801a354:	af00      	add	r7, sp, #0
 801a356:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801a358:	687b      	ldr	r3, [r7, #4]
 801a35a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801a35c:	68fb      	ldr	r3, [r7, #12]
 801a35e:	2b00      	cmp	r3, #0
 801a360:	d106      	bne.n	801a370 <ipfrag_free_pbuf_custom+0x20>
 801a362:	4b11      	ldr	r3, [pc, #68]	; (801a3a8 <ipfrag_free_pbuf_custom+0x58>)
 801a364:	f240 22ce 	movw	r2, #718	; 0x2ce
 801a368:	4910      	ldr	r1, [pc, #64]	; (801a3ac <ipfrag_free_pbuf_custom+0x5c>)
 801a36a:	4811      	ldr	r0, [pc, #68]	; (801a3b0 <ipfrag_free_pbuf_custom+0x60>)
 801a36c:	f000 ff7c 	bl	801b268 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801a370:	68fa      	ldr	r2, [r7, #12]
 801a372:	687b      	ldr	r3, [r7, #4]
 801a374:	429a      	cmp	r2, r3
 801a376:	d006      	beq.n	801a386 <ipfrag_free_pbuf_custom+0x36>
 801a378:	4b0b      	ldr	r3, [pc, #44]	; (801a3a8 <ipfrag_free_pbuf_custom+0x58>)
 801a37a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801a37e:	490d      	ldr	r1, [pc, #52]	; (801a3b4 <ipfrag_free_pbuf_custom+0x64>)
 801a380:	480b      	ldr	r0, [pc, #44]	; (801a3b0 <ipfrag_free_pbuf_custom+0x60>)
 801a382:	f000 ff71 	bl	801b268 <iprintf>
  if (pcr->original != NULL) {
 801a386:	68fb      	ldr	r3, [r7, #12]
 801a388:	695b      	ldr	r3, [r3, #20]
 801a38a:	2b00      	cmp	r3, #0
 801a38c:	d004      	beq.n	801a398 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801a38e:	68fb      	ldr	r3, [r7, #12]
 801a390:	695b      	ldr	r3, [r3, #20]
 801a392:	4618      	mov	r0, r3
 801a394:	f7f7 f8c6 	bl	8011524 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801a398:	68f8      	ldr	r0, [r7, #12]
 801a39a:	f7ff ffbd 	bl	801a318 <ip_frag_free_pbuf_custom_ref>
}
 801a39e:	bf00      	nop
 801a3a0:	3710      	adds	r7, #16
 801a3a2:	46bd      	mov	sp, r7
 801a3a4:	bd80      	pop	{r7, pc}
 801a3a6:	bf00      	nop
 801a3a8:	080209f4 	.word	0x080209f4
 801a3ac:	08020bb8 	.word	0x08020bb8
 801a3b0:	08020a3c 	.word	0x08020a3c
 801a3b4:	08020bc4 	.word	0x08020bc4

0801a3b8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801a3b8:	b580      	push	{r7, lr}
 801a3ba:	b094      	sub	sp, #80	; 0x50
 801a3bc:	af02      	add	r7, sp, #8
 801a3be:	60f8      	str	r0, [r7, #12]
 801a3c0:	60b9      	str	r1, [r7, #8]
 801a3c2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801a3c4:	2300      	movs	r3, #0
 801a3c6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801a3ca:	68bb      	ldr	r3, [r7, #8]
 801a3cc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a3ce:	3b14      	subs	r3, #20
 801a3d0:	2b00      	cmp	r3, #0
 801a3d2:	da00      	bge.n	801a3d6 <ip4_frag+0x1e>
 801a3d4:	3307      	adds	r3, #7
 801a3d6:	10db      	asrs	r3, r3, #3
 801a3d8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801a3da:	2314      	movs	r3, #20
 801a3dc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801a3de:	68fb      	ldr	r3, [r7, #12]
 801a3e0:	685b      	ldr	r3, [r3, #4]
 801a3e2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801a3e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a3e6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801a3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a3ea:	781b      	ldrb	r3, [r3, #0]
 801a3ec:	f003 030f 	and.w	r3, r3, #15
 801a3f0:	b2db      	uxtb	r3, r3
 801a3f2:	009b      	lsls	r3, r3, #2
 801a3f4:	b2db      	uxtb	r3, r3
 801a3f6:	2b14      	cmp	r3, #20
 801a3f8:	d002      	beq.n	801a400 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801a3fa:	f06f 0305 	mvn.w	r3, #5
 801a3fe:	e110      	b.n	801a622 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801a400:	68fb      	ldr	r3, [r7, #12]
 801a402:	895b      	ldrh	r3, [r3, #10]
 801a404:	2b13      	cmp	r3, #19
 801a406:	d809      	bhi.n	801a41c <ip4_frag+0x64>
 801a408:	4b88      	ldr	r3, [pc, #544]	; (801a62c <ip4_frag+0x274>)
 801a40a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801a40e:	4988      	ldr	r1, [pc, #544]	; (801a630 <ip4_frag+0x278>)
 801a410:	4888      	ldr	r0, [pc, #544]	; (801a634 <ip4_frag+0x27c>)
 801a412:	f000 ff29 	bl	801b268 <iprintf>
 801a416:	f06f 0305 	mvn.w	r3, #5
 801a41a:	e102      	b.n	801a622 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801a41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a41e:	88db      	ldrh	r3, [r3, #6]
 801a420:	b29b      	uxth	r3, r3
 801a422:	4618      	mov	r0, r3
 801a424:	f7f5 fc7a 	bl	800fd1c <lwip_htons>
 801a428:	4603      	mov	r3, r0
 801a42a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801a42c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a42e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a432:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801a436:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a438:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a43c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801a43e:	68fb      	ldr	r3, [r7, #12]
 801a440:	891b      	ldrh	r3, [r3, #8]
 801a442:	3b14      	subs	r3, #20
 801a444:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801a448:	e0e1      	b.n	801a60e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801a44a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a44c:	00db      	lsls	r3, r3, #3
 801a44e:	b29b      	uxth	r3, r3
 801a450:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a454:	4293      	cmp	r3, r2
 801a456:	bf28      	it	cs
 801a458:	4613      	movcs	r3, r2
 801a45a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801a45c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a460:	2114      	movs	r1, #20
 801a462:	200e      	movs	r0, #14
 801a464:	f7f6 fd7a 	bl	8010f5c <pbuf_alloc>
 801a468:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801a46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a46c:	2b00      	cmp	r3, #0
 801a46e:	f000 80d5 	beq.w	801a61c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801a472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a474:	895b      	ldrh	r3, [r3, #10]
 801a476:	2b13      	cmp	r3, #19
 801a478:	d806      	bhi.n	801a488 <ip4_frag+0xd0>
 801a47a:	4b6c      	ldr	r3, [pc, #432]	; (801a62c <ip4_frag+0x274>)
 801a47c:	f44f 7249 	mov.w	r2, #804	; 0x324
 801a480:	496d      	ldr	r1, [pc, #436]	; (801a638 <ip4_frag+0x280>)
 801a482:	486c      	ldr	r0, [pc, #432]	; (801a634 <ip4_frag+0x27c>)
 801a484:	f000 fef0 	bl	801b268 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801a488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a48a:	685b      	ldr	r3, [r3, #4]
 801a48c:	2214      	movs	r2, #20
 801a48e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a490:	4618      	mov	r0, r3
 801a492:	f001 f8f2 	bl	801b67a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801a496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a498:	685b      	ldr	r3, [r3, #4]
 801a49a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801a49c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a49e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801a4a2:	e064      	b.n	801a56e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801a4a4:	68fb      	ldr	r3, [r7, #12]
 801a4a6:	895a      	ldrh	r2, [r3, #10]
 801a4a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a4aa:	1ad3      	subs	r3, r2, r3
 801a4ac:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801a4ae:	68fb      	ldr	r3, [r7, #12]
 801a4b0:	895b      	ldrh	r3, [r3, #10]
 801a4b2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a4b4:	429a      	cmp	r2, r3
 801a4b6:	d906      	bls.n	801a4c6 <ip4_frag+0x10e>
 801a4b8:	4b5c      	ldr	r3, [pc, #368]	; (801a62c <ip4_frag+0x274>)
 801a4ba:	f240 322d 	movw	r2, #813	; 0x32d
 801a4be:	495f      	ldr	r1, [pc, #380]	; (801a63c <ip4_frag+0x284>)
 801a4c0:	485c      	ldr	r0, [pc, #368]	; (801a634 <ip4_frag+0x27c>)
 801a4c2:	f000 fed1 	bl	801b268 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801a4c6:	8bfa      	ldrh	r2, [r7, #30]
 801a4c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a4cc:	4293      	cmp	r3, r2
 801a4ce:	bf28      	it	cs
 801a4d0:	4613      	movcs	r3, r2
 801a4d2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801a4d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a4da:	2b00      	cmp	r3, #0
 801a4dc:	d105      	bne.n	801a4ea <ip4_frag+0x132>
        poff = 0;
 801a4de:	2300      	movs	r3, #0
 801a4e0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801a4e2:	68fb      	ldr	r3, [r7, #12]
 801a4e4:	681b      	ldr	r3, [r3, #0]
 801a4e6:	60fb      	str	r3, [r7, #12]
        continue;
 801a4e8:	e041      	b.n	801a56e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801a4ea:	f7ff ff0d 	bl	801a308 <ip_frag_alloc_pbuf_custom_ref>
 801a4ee:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801a4f0:	69bb      	ldr	r3, [r7, #24]
 801a4f2:	2b00      	cmp	r3, #0
 801a4f4:	d103      	bne.n	801a4fe <ip4_frag+0x146>
        pbuf_free(rambuf);
 801a4f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a4f8:	f7f7 f814 	bl	8011524 <pbuf_free>
        goto memerr;
 801a4fc:	e08f      	b.n	801a61e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a4fe:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801a500:	68fb      	ldr	r3, [r7, #12]
 801a502:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a504:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a506:	4413      	add	r3, r2
 801a508:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801a50c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801a510:	9201      	str	r2, [sp, #4]
 801a512:	9300      	str	r3, [sp, #0]
 801a514:	4603      	mov	r3, r0
 801a516:	2241      	movs	r2, #65	; 0x41
 801a518:	2000      	movs	r0, #0
 801a51a:	f7f6 fe4b 	bl	80111b4 <pbuf_alloced_custom>
 801a51e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801a520:	697b      	ldr	r3, [r7, #20]
 801a522:	2b00      	cmp	r3, #0
 801a524:	d106      	bne.n	801a534 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801a526:	69b8      	ldr	r0, [r7, #24]
 801a528:	f7ff fef6 	bl	801a318 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801a52c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a52e:	f7f6 fff9 	bl	8011524 <pbuf_free>
        goto memerr;
 801a532:	e074      	b.n	801a61e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801a534:	68f8      	ldr	r0, [r7, #12]
 801a536:	f7f7 f895 	bl	8011664 <pbuf_ref>
      pcr->original = p;
 801a53a:	69bb      	ldr	r3, [r7, #24]
 801a53c:	68fa      	ldr	r2, [r7, #12]
 801a53e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801a540:	69bb      	ldr	r3, [r7, #24]
 801a542:	4a3f      	ldr	r2, [pc, #252]	; (801a640 <ip4_frag+0x288>)
 801a544:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801a546:	6979      	ldr	r1, [r7, #20]
 801a548:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a54a:	f7f7 f8ad 	bl	80116a8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801a54e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801a552:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a556:	1ad3      	subs	r3, r2, r3
 801a558:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801a55c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a560:	2b00      	cmp	r3, #0
 801a562:	d004      	beq.n	801a56e <ip4_frag+0x1b6>
        poff = 0;
 801a564:	2300      	movs	r3, #0
 801a566:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801a568:	68fb      	ldr	r3, [r7, #12]
 801a56a:	681b      	ldr	r3, [r3, #0]
 801a56c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801a56e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a572:	2b00      	cmp	r3, #0
 801a574:	d196      	bne.n	801a4a4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801a576:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a578:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a57c:	4413      	add	r3, r2
 801a57e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801a580:	68bb      	ldr	r3, [r7, #8]
 801a582:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a584:	f1a3 0213 	sub.w	r2, r3, #19
 801a588:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a58c:	429a      	cmp	r2, r3
 801a58e:	bfcc      	ite	gt
 801a590:	2301      	movgt	r3, #1
 801a592:	2300      	movle	r3, #0
 801a594:	b2db      	uxtb	r3, r3
 801a596:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801a598:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a59c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a5a0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801a5a2:	6a3b      	ldr	r3, [r7, #32]
 801a5a4:	2b00      	cmp	r3, #0
 801a5a6:	d002      	beq.n	801a5ae <ip4_frag+0x1f6>
 801a5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5aa:	2b00      	cmp	r3, #0
 801a5ac:	d003      	beq.n	801a5b6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801a5ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a5b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a5b4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801a5b6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a5b8:	4618      	mov	r0, r3
 801a5ba:	f7f5 fbaf 	bl	800fd1c <lwip_htons>
 801a5be:	4603      	mov	r3, r0
 801a5c0:	461a      	mov	r2, r3
 801a5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a5c4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801a5c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a5c8:	3314      	adds	r3, #20
 801a5ca:	b29b      	uxth	r3, r3
 801a5cc:	4618      	mov	r0, r3
 801a5ce:	f7f5 fba5 	bl	800fd1c <lwip_htons>
 801a5d2:	4603      	mov	r3, r0
 801a5d4:	461a      	mov	r2, r3
 801a5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a5d8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801a5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a5dc:	2200      	movs	r2, #0
 801a5de:	729a      	strb	r2, [r3, #10]
 801a5e0:	2200      	movs	r2, #0
 801a5e2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801a5e4:	68bb      	ldr	r3, [r7, #8]
 801a5e6:	695b      	ldr	r3, [r3, #20]
 801a5e8:	687a      	ldr	r2, [r7, #4]
 801a5ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a5ec:	68b8      	ldr	r0, [r7, #8]
 801a5ee:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801a5f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a5f2:	f7f6 ff97 	bl	8011524 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801a5f6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a5fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a5fc:	1ad3      	subs	r3, r2, r3
 801a5fe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801a602:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801a606:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a608:	4413      	add	r3, r2
 801a60a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801a60e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a612:	2b00      	cmp	r3, #0
 801a614:	f47f af19 	bne.w	801a44a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801a618:	2300      	movs	r3, #0
 801a61a:	e002      	b.n	801a622 <ip4_frag+0x26a>
      goto memerr;
 801a61c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801a61e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a622:	4618      	mov	r0, r3
 801a624:	3748      	adds	r7, #72	; 0x48
 801a626:	46bd      	mov	sp, r7
 801a628:	bd80      	pop	{r7, pc}
 801a62a:	bf00      	nop
 801a62c:	080209f4 	.word	0x080209f4
 801a630:	08020bd0 	.word	0x08020bd0
 801a634:	08020a3c 	.word	0x08020a3c
 801a638:	08020bec 	.word	0x08020bec
 801a63c:	08020c0c 	.word	0x08020c0c
 801a640:	0801a351 	.word	0x0801a351

0801a644 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801a644:	b580      	push	{r7, lr}
 801a646:	b086      	sub	sp, #24
 801a648:	af00      	add	r7, sp, #0
 801a64a:	6078      	str	r0, [r7, #4]
 801a64c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801a64e:	230e      	movs	r3, #14
 801a650:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801a652:	687b      	ldr	r3, [r7, #4]
 801a654:	895b      	ldrh	r3, [r3, #10]
 801a656:	2b0e      	cmp	r3, #14
 801a658:	d96e      	bls.n	801a738 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801a65a:	687b      	ldr	r3, [r7, #4]
 801a65c:	7bdb      	ldrb	r3, [r3, #15]
 801a65e:	2b00      	cmp	r3, #0
 801a660:	d106      	bne.n	801a670 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801a662:	683b      	ldr	r3, [r7, #0]
 801a664:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801a668:	3301      	adds	r3, #1
 801a66a:	b2da      	uxtb	r2, r3
 801a66c:	687b      	ldr	r3, [r7, #4]
 801a66e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801a670:	687b      	ldr	r3, [r7, #4]
 801a672:	685b      	ldr	r3, [r3, #4]
 801a674:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801a676:	693b      	ldr	r3, [r7, #16]
 801a678:	7b1a      	ldrb	r2, [r3, #12]
 801a67a:	7b5b      	ldrb	r3, [r3, #13]
 801a67c:	021b      	lsls	r3, r3, #8
 801a67e:	4313      	orrs	r3, r2
 801a680:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801a682:	693b      	ldr	r3, [r7, #16]
 801a684:	781b      	ldrb	r3, [r3, #0]
 801a686:	f003 0301 	and.w	r3, r3, #1
 801a68a:	2b00      	cmp	r3, #0
 801a68c:	d023      	beq.n	801a6d6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801a68e:	693b      	ldr	r3, [r7, #16]
 801a690:	781b      	ldrb	r3, [r3, #0]
 801a692:	2b01      	cmp	r3, #1
 801a694:	d10f      	bne.n	801a6b6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a696:	693b      	ldr	r3, [r7, #16]
 801a698:	785b      	ldrb	r3, [r3, #1]
 801a69a:	2b00      	cmp	r3, #0
 801a69c:	d11b      	bne.n	801a6d6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801a69e:	693b      	ldr	r3, [r7, #16]
 801a6a0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a6a2:	2b5e      	cmp	r3, #94	; 0x5e
 801a6a4:	d117      	bne.n	801a6d6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801a6a6:	687b      	ldr	r3, [r7, #4]
 801a6a8:	7b5b      	ldrb	r3, [r3, #13]
 801a6aa:	f043 0310 	orr.w	r3, r3, #16
 801a6ae:	b2da      	uxtb	r2, r3
 801a6b0:	687b      	ldr	r3, [r7, #4]
 801a6b2:	735a      	strb	r2, [r3, #13]
 801a6b4:	e00f      	b.n	801a6d6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801a6b6:	693b      	ldr	r3, [r7, #16]
 801a6b8:	2206      	movs	r2, #6
 801a6ba:	4928      	ldr	r1, [pc, #160]	; (801a75c <ethernet_input+0x118>)
 801a6bc:	4618      	mov	r0, r3
 801a6be:	f000 ff39 	bl	801b534 <memcmp>
 801a6c2:	4603      	mov	r3, r0
 801a6c4:	2b00      	cmp	r3, #0
 801a6c6:	d106      	bne.n	801a6d6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801a6c8:	687b      	ldr	r3, [r7, #4]
 801a6ca:	7b5b      	ldrb	r3, [r3, #13]
 801a6cc:	f043 0308 	orr.w	r3, r3, #8
 801a6d0:	b2da      	uxtb	r2, r3
 801a6d2:	687b      	ldr	r3, [r7, #4]
 801a6d4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801a6d6:	89fb      	ldrh	r3, [r7, #14]
 801a6d8:	2b08      	cmp	r3, #8
 801a6da:	d003      	beq.n	801a6e4 <ethernet_input+0xa0>
 801a6dc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801a6e0:	d014      	beq.n	801a70c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801a6e2:	e032      	b.n	801a74a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a6e4:	683b      	ldr	r3, [r7, #0]
 801a6e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a6ea:	f003 0308 	and.w	r3, r3, #8
 801a6ee:	2b00      	cmp	r3, #0
 801a6f0:	d024      	beq.n	801a73c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a6f2:	8afb      	ldrh	r3, [r7, #22]
 801a6f4:	4619      	mov	r1, r3
 801a6f6:	6878      	ldr	r0, [r7, #4]
 801a6f8:	f7f6 fe8e 	bl	8011418 <pbuf_remove_header>
 801a6fc:	4603      	mov	r3, r0
 801a6fe:	2b00      	cmp	r3, #0
 801a700:	d11e      	bne.n	801a740 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801a702:	6839      	ldr	r1, [r7, #0]
 801a704:	6878      	ldr	r0, [r7, #4]
 801a706:	f7fe fe91 	bl	801942c <ip4_input>
      break;
 801a70a:	e013      	b.n	801a734 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a70c:	683b      	ldr	r3, [r7, #0]
 801a70e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a712:	f003 0308 	and.w	r3, r3, #8
 801a716:	2b00      	cmp	r3, #0
 801a718:	d014      	beq.n	801a744 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a71a:	8afb      	ldrh	r3, [r7, #22]
 801a71c:	4619      	mov	r1, r3
 801a71e:	6878      	ldr	r0, [r7, #4]
 801a720:	f7f6 fe7a 	bl	8011418 <pbuf_remove_header>
 801a724:	4603      	mov	r3, r0
 801a726:	2b00      	cmp	r3, #0
 801a728:	d10e      	bne.n	801a748 <ethernet_input+0x104>
        etharp_input(p, netif);
 801a72a:	6839      	ldr	r1, [r7, #0]
 801a72c:	6878      	ldr	r0, [r7, #4]
 801a72e:	f7fe f80b 	bl	8018748 <etharp_input>
      break;
 801a732:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801a734:	2300      	movs	r3, #0
 801a736:	e00c      	b.n	801a752 <ethernet_input+0x10e>
    goto free_and_return;
 801a738:	bf00      	nop
 801a73a:	e006      	b.n	801a74a <ethernet_input+0x106>
        goto free_and_return;
 801a73c:	bf00      	nop
 801a73e:	e004      	b.n	801a74a <ethernet_input+0x106>
        goto free_and_return;
 801a740:	bf00      	nop
 801a742:	e002      	b.n	801a74a <ethernet_input+0x106>
        goto free_and_return;
 801a744:	bf00      	nop
 801a746:	e000      	b.n	801a74a <ethernet_input+0x106>
        goto free_and_return;
 801a748:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801a74a:	6878      	ldr	r0, [r7, #4]
 801a74c:	f7f6 feea 	bl	8011524 <pbuf_free>
  return ERR_OK;
 801a750:	2300      	movs	r3, #0
}
 801a752:	4618      	mov	r0, r3
 801a754:	3718      	adds	r7, #24
 801a756:	46bd      	mov	sp, r7
 801a758:	bd80      	pop	{r7, pc}
 801a75a:	bf00      	nop
 801a75c:	08020de8 	.word	0x08020de8

0801a760 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801a760:	b580      	push	{r7, lr}
 801a762:	b086      	sub	sp, #24
 801a764:	af00      	add	r7, sp, #0
 801a766:	60f8      	str	r0, [r7, #12]
 801a768:	60b9      	str	r1, [r7, #8]
 801a76a:	607a      	str	r2, [r7, #4]
 801a76c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801a76e:	8c3b      	ldrh	r3, [r7, #32]
 801a770:	4618      	mov	r0, r3
 801a772:	f7f5 fad3 	bl	800fd1c <lwip_htons>
 801a776:	4603      	mov	r3, r0
 801a778:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801a77a:	210e      	movs	r1, #14
 801a77c:	68b8      	ldr	r0, [r7, #8]
 801a77e:	f7f6 fe3b 	bl	80113f8 <pbuf_add_header>
 801a782:	4603      	mov	r3, r0
 801a784:	2b00      	cmp	r3, #0
 801a786:	d125      	bne.n	801a7d4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801a788:	68bb      	ldr	r3, [r7, #8]
 801a78a:	685b      	ldr	r3, [r3, #4]
 801a78c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801a78e:	693b      	ldr	r3, [r7, #16]
 801a790:	8afa      	ldrh	r2, [r7, #22]
 801a792:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801a794:	693b      	ldr	r3, [r7, #16]
 801a796:	2206      	movs	r2, #6
 801a798:	6839      	ldr	r1, [r7, #0]
 801a79a:	4618      	mov	r0, r3
 801a79c:	f000 ff6d 	bl	801b67a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801a7a0:	693b      	ldr	r3, [r7, #16]
 801a7a2:	3306      	adds	r3, #6
 801a7a4:	2206      	movs	r2, #6
 801a7a6:	6879      	ldr	r1, [r7, #4]
 801a7a8:	4618      	mov	r0, r3
 801a7aa:	f000 ff66 	bl	801b67a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801a7ae:	68fb      	ldr	r3, [r7, #12]
 801a7b0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a7b4:	2b06      	cmp	r3, #6
 801a7b6:	d006      	beq.n	801a7c6 <ethernet_output+0x66>
 801a7b8:	4b0a      	ldr	r3, [pc, #40]	; (801a7e4 <ethernet_output+0x84>)
 801a7ba:	f44f 7299 	mov.w	r2, #306	; 0x132
 801a7be:	490a      	ldr	r1, [pc, #40]	; (801a7e8 <ethernet_output+0x88>)
 801a7c0:	480a      	ldr	r0, [pc, #40]	; (801a7ec <ethernet_output+0x8c>)
 801a7c2:	f000 fd51 	bl	801b268 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801a7c6:	68fb      	ldr	r3, [r7, #12]
 801a7c8:	699b      	ldr	r3, [r3, #24]
 801a7ca:	68b9      	ldr	r1, [r7, #8]
 801a7cc:	68f8      	ldr	r0, [r7, #12]
 801a7ce:	4798      	blx	r3
 801a7d0:	4603      	mov	r3, r0
 801a7d2:	e002      	b.n	801a7da <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801a7d4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801a7d6:	f06f 0301 	mvn.w	r3, #1
}
 801a7da:	4618      	mov	r0, r3
 801a7dc:	3718      	adds	r7, #24
 801a7de:	46bd      	mov	sp, r7
 801a7e0:	bd80      	pop	{r7, pc}
 801a7e2:	bf00      	nop
 801a7e4:	08020c1c 	.word	0x08020c1c
 801a7e8:	08020c54 	.word	0x08020c54
 801a7ec:	08020c88 	.word	0x08020c88

0801a7f0 <rand>:
 801a7f0:	4b16      	ldr	r3, [pc, #88]	; (801a84c <rand+0x5c>)
 801a7f2:	b510      	push	{r4, lr}
 801a7f4:	681c      	ldr	r4, [r3, #0]
 801a7f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801a7f8:	b9b3      	cbnz	r3, 801a828 <rand+0x38>
 801a7fa:	2018      	movs	r0, #24
 801a7fc:	f001 fdac 	bl	801c358 <malloc>
 801a800:	4602      	mov	r2, r0
 801a802:	6320      	str	r0, [r4, #48]	; 0x30
 801a804:	b920      	cbnz	r0, 801a810 <rand+0x20>
 801a806:	4b12      	ldr	r3, [pc, #72]	; (801a850 <rand+0x60>)
 801a808:	4812      	ldr	r0, [pc, #72]	; (801a854 <rand+0x64>)
 801a80a:	2152      	movs	r1, #82	; 0x52
 801a80c:	f000 ff44 	bl	801b698 <__assert_func>
 801a810:	4911      	ldr	r1, [pc, #68]	; (801a858 <rand+0x68>)
 801a812:	4b12      	ldr	r3, [pc, #72]	; (801a85c <rand+0x6c>)
 801a814:	e9c0 1300 	strd	r1, r3, [r0]
 801a818:	4b11      	ldr	r3, [pc, #68]	; (801a860 <rand+0x70>)
 801a81a:	6083      	str	r3, [r0, #8]
 801a81c:	230b      	movs	r3, #11
 801a81e:	8183      	strh	r3, [r0, #12]
 801a820:	2100      	movs	r1, #0
 801a822:	2001      	movs	r0, #1
 801a824:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801a828:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a82a:	480e      	ldr	r0, [pc, #56]	; (801a864 <rand+0x74>)
 801a82c:	690b      	ldr	r3, [r1, #16]
 801a82e:	694c      	ldr	r4, [r1, #20]
 801a830:	4a0d      	ldr	r2, [pc, #52]	; (801a868 <rand+0x78>)
 801a832:	4358      	muls	r0, r3
 801a834:	fb02 0004 	mla	r0, r2, r4, r0
 801a838:	fba3 3202 	umull	r3, r2, r3, r2
 801a83c:	3301      	adds	r3, #1
 801a83e:	eb40 0002 	adc.w	r0, r0, r2
 801a842:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801a846:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801a84a:	bd10      	pop	{r4, pc}
 801a84c:	200000b8 	.word	0x200000b8
 801a850:	08020df6 	.word	0x08020df6
 801a854:	08020e0d 	.word	0x08020e0d
 801a858:	abcd330e 	.word	0xabcd330e
 801a85c:	e66d1234 	.word	0xe66d1234
 801a860:	0005deec 	.word	0x0005deec
 801a864:	5851f42d 	.word	0x5851f42d
 801a868:	4c957f2d 	.word	0x4c957f2d

0801a86c <__cvt>:
 801a86c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a86e:	ed2d 8b02 	vpush	{d8}
 801a872:	eeb0 8b40 	vmov.f64	d8, d0
 801a876:	b085      	sub	sp, #20
 801a878:	4617      	mov	r7, r2
 801a87a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801a87c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801a87e:	ee18 2a90 	vmov	r2, s17
 801a882:	f025 0520 	bic.w	r5, r5, #32
 801a886:	2a00      	cmp	r2, #0
 801a888:	bfb6      	itet	lt
 801a88a:	222d      	movlt	r2, #45	; 0x2d
 801a88c:	2200      	movge	r2, #0
 801a88e:	eeb1 8b40 	vneglt.f64	d8, d0
 801a892:	2d46      	cmp	r5, #70	; 0x46
 801a894:	460c      	mov	r4, r1
 801a896:	701a      	strb	r2, [r3, #0]
 801a898:	d004      	beq.n	801a8a4 <__cvt+0x38>
 801a89a:	2d45      	cmp	r5, #69	; 0x45
 801a89c:	d100      	bne.n	801a8a0 <__cvt+0x34>
 801a89e:	3401      	adds	r4, #1
 801a8a0:	2102      	movs	r1, #2
 801a8a2:	e000      	b.n	801a8a6 <__cvt+0x3a>
 801a8a4:	2103      	movs	r1, #3
 801a8a6:	ab03      	add	r3, sp, #12
 801a8a8:	9301      	str	r3, [sp, #4]
 801a8aa:	ab02      	add	r3, sp, #8
 801a8ac:	9300      	str	r3, [sp, #0]
 801a8ae:	4622      	mov	r2, r4
 801a8b0:	4633      	mov	r3, r6
 801a8b2:	eeb0 0b48 	vmov.f64	d0, d8
 801a8b6:	f000 ff97 	bl	801b7e8 <_dtoa_r>
 801a8ba:	2d47      	cmp	r5, #71	; 0x47
 801a8bc:	d101      	bne.n	801a8c2 <__cvt+0x56>
 801a8be:	07fb      	lsls	r3, r7, #31
 801a8c0:	d51a      	bpl.n	801a8f8 <__cvt+0x8c>
 801a8c2:	2d46      	cmp	r5, #70	; 0x46
 801a8c4:	eb00 0204 	add.w	r2, r0, r4
 801a8c8:	d10c      	bne.n	801a8e4 <__cvt+0x78>
 801a8ca:	7803      	ldrb	r3, [r0, #0]
 801a8cc:	2b30      	cmp	r3, #48	; 0x30
 801a8ce:	d107      	bne.n	801a8e0 <__cvt+0x74>
 801a8d0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a8d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8d8:	bf1c      	itt	ne
 801a8da:	f1c4 0401 	rsbne	r4, r4, #1
 801a8de:	6034      	strne	r4, [r6, #0]
 801a8e0:	6833      	ldr	r3, [r6, #0]
 801a8e2:	441a      	add	r2, r3
 801a8e4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a8e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8ec:	bf08      	it	eq
 801a8ee:	9203      	streq	r2, [sp, #12]
 801a8f0:	2130      	movs	r1, #48	; 0x30
 801a8f2:	9b03      	ldr	r3, [sp, #12]
 801a8f4:	4293      	cmp	r3, r2
 801a8f6:	d307      	bcc.n	801a908 <__cvt+0x9c>
 801a8f8:	9b03      	ldr	r3, [sp, #12]
 801a8fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a8fc:	1a1b      	subs	r3, r3, r0
 801a8fe:	6013      	str	r3, [r2, #0]
 801a900:	b005      	add	sp, #20
 801a902:	ecbd 8b02 	vpop	{d8}
 801a906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a908:	1c5c      	adds	r4, r3, #1
 801a90a:	9403      	str	r4, [sp, #12]
 801a90c:	7019      	strb	r1, [r3, #0]
 801a90e:	e7f0      	b.n	801a8f2 <__cvt+0x86>

0801a910 <__exponent>:
 801a910:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a912:	4603      	mov	r3, r0
 801a914:	2900      	cmp	r1, #0
 801a916:	bfb8      	it	lt
 801a918:	4249      	neglt	r1, r1
 801a91a:	f803 2b02 	strb.w	r2, [r3], #2
 801a91e:	bfb4      	ite	lt
 801a920:	222d      	movlt	r2, #45	; 0x2d
 801a922:	222b      	movge	r2, #43	; 0x2b
 801a924:	2909      	cmp	r1, #9
 801a926:	7042      	strb	r2, [r0, #1]
 801a928:	dd2a      	ble.n	801a980 <__exponent+0x70>
 801a92a:	f10d 0207 	add.w	r2, sp, #7
 801a92e:	4617      	mov	r7, r2
 801a930:	260a      	movs	r6, #10
 801a932:	4694      	mov	ip, r2
 801a934:	fb91 f5f6 	sdiv	r5, r1, r6
 801a938:	fb06 1415 	mls	r4, r6, r5, r1
 801a93c:	3430      	adds	r4, #48	; 0x30
 801a93e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801a942:	460c      	mov	r4, r1
 801a944:	2c63      	cmp	r4, #99	; 0x63
 801a946:	f102 32ff 	add.w	r2, r2, #4294967295
 801a94a:	4629      	mov	r1, r5
 801a94c:	dcf1      	bgt.n	801a932 <__exponent+0x22>
 801a94e:	3130      	adds	r1, #48	; 0x30
 801a950:	f1ac 0402 	sub.w	r4, ip, #2
 801a954:	f802 1c01 	strb.w	r1, [r2, #-1]
 801a958:	1c41      	adds	r1, r0, #1
 801a95a:	4622      	mov	r2, r4
 801a95c:	42ba      	cmp	r2, r7
 801a95e:	d30a      	bcc.n	801a976 <__exponent+0x66>
 801a960:	f10d 0209 	add.w	r2, sp, #9
 801a964:	eba2 020c 	sub.w	r2, r2, ip
 801a968:	42bc      	cmp	r4, r7
 801a96a:	bf88      	it	hi
 801a96c:	2200      	movhi	r2, #0
 801a96e:	4413      	add	r3, r2
 801a970:	1a18      	subs	r0, r3, r0
 801a972:	b003      	add	sp, #12
 801a974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a976:	f812 5b01 	ldrb.w	r5, [r2], #1
 801a97a:	f801 5f01 	strb.w	r5, [r1, #1]!
 801a97e:	e7ed      	b.n	801a95c <__exponent+0x4c>
 801a980:	2330      	movs	r3, #48	; 0x30
 801a982:	3130      	adds	r1, #48	; 0x30
 801a984:	7083      	strb	r3, [r0, #2]
 801a986:	70c1      	strb	r1, [r0, #3]
 801a988:	1d03      	adds	r3, r0, #4
 801a98a:	e7f1      	b.n	801a970 <__exponent+0x60>
 801a98c:	0000      	movs	r0, r0
	...

0801a990 <_printf_float>:
 801a990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a994:	b08b      	sub	sp, #44	; 0x2c
 801a996:	460c      	mov	r4, r1
 801a998:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801a99c:	4616      	mov	r6, r2
 801a99e:	461f      	mov	r7, r3
 801a9a0:	4605      	mov	r5, r0
 801a9a2:	f000 fdf9 	bl	801b598 <_localeconv_r>
 801a9a6:	f8d0 b000 	ldr.w	fp, [r0]
 801a9aa:	4658      	mov	r0, fp
 801a9ac:	f7e7 fb80 	bl	80020b0 <strlen>
 801a9b0:	2300      	movs	r3, #0
 801a9b2:	9308      	str	r3, [sp, #32]
 801a9b4:	f8d8 3000 	ldr.w	r3, [r8]
 801a9b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 801a9bc:	6822      	ldr	r2, [r4, #0]
 801a9be:	3307      	adds	r3, #7
 801a9c0:	f023 0307 	bic.w	r3, r3, #7
 801a9c4:	f103 0108 	add.w	r1, r3, #8
 801a9c8:	f8c8 1000 	str.w	r1, [r8]
 801a9cc:	ed93 0b00 	vldr	d0, [r3]
 801a9d0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 801ac30 <_printf_float+0x2a0>
 801a9d4:	eeb0 7bc0 	vabs.f64	d7, d0
 801a9d8:	eeb4 7b46 	vcmp.f64	d7, d6
 801a9dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9e0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 801a9e4:	4682      	mov	sl, r0
 801a9e6:	dd24      	ble.n	801aa32 <_printf_float+0xa2>
 801a9e8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801a9ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9f0:	d502      	bpl.n	801a9f8 <_printf_float+0x68>
 801a9f2:	232d      	movs	r3, #45	; 0x2d
 801a9f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a9f8:	498f      	ldr	r1, [pc, #572]	; (801ac38 <_printf_float+0x2a8>)
 801a9fa:	4b90      	ldr	r3, [pc, #576]	; (801ac3c <_printf_float+0x2ac>)
 801a9fc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801aa00:	bf94      	ite	ls
 801aa02:	4688      	movls	r8, r1
 801aa04:	4698      	movhi	r8, r3
 801aa06:	2303      	movs	r3, #3
 801aa08:	6123      	str	r3, [r4, #16]
 801aa0a:	f022 0204 	bic.w	r2, r2, #4
 801aa0e:	2300      	movs	r3, #0
 801aa10:	6022      	str	r2, [r4, #0]
 801aa12:	9304      	str	r3, [sp, #16]
 801aa14:	9700      	str	r7, [sp, #0]
 801aa16:	4633      	mov	r3, r6
 801aa18:	aa09      	add	r2, sp, #36	; 0x24
 801aa1a:	4621      	mov	r1, r4
 801aa1c:	4628      	mov	r0, r5
 801aa1e:	f000 f9d1 	bl	801adc4 <_printf_common>
 801aa22:	3001      	adds	r0, #1
 801aa24:	f040 808a 	bne.w	801ab3c <_printf_float+0x1ac>
 801aa28:	f04f 30ff 	mov.w	r0, #4294967295
 801aa2c:	b00b      	add	sp, #44	; 0x2c
 801aa2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa32:	eeb4 0b40 	vcmp.f64	d0, d0
 801aa36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa3a:	d709      	bvc.n	801aa50 <_printf_float+0xc0>
 801aa3c:	ee10 3a90 	vmov	r3, s1
 801aa40:	2b00      	cmp	r3, #0
 801aa42:	bfbc      	itt	lt
 801aa44:	232d      	movlt	r3, #45	; 0x2d
 801aa46:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801aa4a:	497d      	ldr	r1, [pc, #500]	; (801ac40 <_printf_float+0x2b0>)
 801aa4c:	4b7d      	ldr	r3, [pc, #500]	; (801ac44 <_printf_float+0x2b4>)
 801aa4e:	e7d5      	b.n	801a9fc <_printf_float+0x6c>
 801aa50:	6863      	ldr	r3, [r4, #4]
 801aa52:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801aa56:	9104      	str	r1, [sp, #16]
 801aa58:	1c59      	adds	r1, r3, #1
 801aa5a:	d13c      	bne.n	801aad6 <_printf_float+0x146>
 801aa5c:	2306      	movs	r3, #6
 801aa5e:	6063      	str	r3, [r4, #4]
 801aa60:	2300      	movs	r3, #0
 801aa62:	9303      	str	r3, [sp, #12]
 801aa64:	ab08      	add	r3, sp, #32
 801aa66:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801aa6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801aa6e:	ab07      	add	r3, sp, #28
 801aa70:	6861      	ldr	r1, [r4, #4]
 801aa72:	9300      	str	r3, [sp, #0]
 801aa74:	6022      	str	r2, [r4, #0]
 801aa76:	f10d 031b 	add.w	r3, sp, #27
 801aa7a:	4628      	mov	r0, r5
 801aa7c:	f7ff fef6 	bl	801a86c <__cvt>
 801aa80:	9b04      	ldr	r3, [sp, #16]
 801aa82:	9907      	ldr	r1, [sp, #28]
 801aa84:	2b47      	cmp	r3, #71	; 0x47
 801aa86:	4680      	mov	r8, r0
 801aa88:	d108      	bne.n	801aa9c <_printf_float+0x10c>
 801aa8a:	1cc8      	adds	r0, r1, #3
 801aa8c:	db02      	blt.n	801aa94 <_printf_float+0x104>
 801aa8e:	6863      	ldr	r3, [r4, #4]
 801aa90:	4299      	cmp	r1, r3
 801aa92:	dd41      	ble.n	801ab18 <_printf_float+0x188>
 801aa94:	f1a9 0902 	sub.w	r9, r9, #2
 801aa98:	fa5f f989 	uxtb.w	r9, r9
 801aa9c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801aaa0:	d820      	bhi.n	801aae4 <_printf_float+0x154>
 801aaa2:	3901      	subs	r1, #1
 801aaa4:	464a      	mov	r2, r9
 801aaa6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801aaaa:	9107      	str	r1, [sp, #28]
 801aaac:	f7ff ff30 	bl	801a910 <__exponent>
 801aab0:	9a08      	ldr	r2, [sp, #32]
 801aab2:	9004      	str	r0, [sp, #16]
 801aab4:	1813      	adds	r3, r2, r0
 801aab6:	2a01      	cmp	r2, #1
 801aab8:	6123      	str	r3, [r4, #16]
 801aaba:	dc02      	bgt.n	801aac2 <_printf_float+0x132>
 801aabc:	6822      	ldr	r2, [r4, #0]
 801aabe:	07d2      	lsls	r2, r2, #31
 801aac0:	d501      	bpl.n	801aac6 <_printf_float+0x136>
 801aac2:	3301      	adds	r3, #1
 801aac4:	6123      	str	r3, [r4, #16]
 801aac6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801aaca:	2b00      	cmp	r3, #0
 801aacc:	d0a2      	beq.n	801aa14 <_printf_float+0x84>
 801aace:	232d      	movs	r3, #45	; 0x2d
 801aad0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801aad4:	e79e      	b.n	801aa14 <_printf_float+0x84>
 801aad6:	9904      	ldr	r1, [sp, #16]
 801aad8:	2947      	cmp	r1, #71	; 0x47
 801aada:	d1c1      	bne.n	801aa60 <_printf_float+0xd0>
 801aadc:	2b00      	cmp	r3, #0
 801aade:	d1bf      	bne.n	801aa60 <_printf_float+0xd0>
 801aae0:	2301      	movs	r3, #1
 801aae2:	e7bc      	b.n	801aa5e <_printf_float+0xce>
 801aae4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801aae8:	d118      	bne.n	801ab1c <_printf_float+0x18c>
 801aaea:	2900      	cmp	r1, #0
 801aaec:	6863      	ldr	r3, [r4, #4]
 801aaee:	dd0b      	ble.n	801ab08 <_printf_float+0x178>
 801aaf0:	6121      	str	r1, [r4, #16]
 801aaf2:	b913      	cbnz	r3, 801aafa <_printf_float+0x16a>
 801aaf4:	6822      	ldr	r2, [r4, #0]
 801aaf6:	07d0      	lsls	r0, r2, #31
 801aaf8:	d502      	bpl.n	801ab00 <_printf_float+0x170>
 801aafa:	3301      	adds	r3, #1
 801aafc:	440b      	add	r3, r1
 801aafe:	6123      	str	r3, [r4, #16]
 801ab00:	2300      	movs	r3, #0
 801ab02:	65a1      	str	r1, [r4, #88]	; 0x58
 801ab04:	9304      	str	r3, [sp, #16]
 801ab06:	e7de      	b.n	801aac6 <_printf_float+0x136>
 801ab08:	b913      	cbnz	r3, 801ab10 <_printf_float+0x180>
 801ab0a:	6822      	ldr	r2, [r4, #0]
 801ab0c:	07d2      	lsls	r2, r2, #31
 801ab0e:	d501      	bpl.n	801ab14 <_printf_float+0x184>
 801ab10:	3302      	adds	r3, #2
 801ab12:	e7f4      	b.n	801aafe <_printf_float+0x16e>
 801ab14:	2301      	movs	r3, #1
 801ab16:	e7f2      	b.n	801aafe <_printf_float+0x16e>
 801ab18:	f04f 0967 	mov.w	r9, #103	; 0x67
 801ab1c:	9b08      	ldr	r3, [sp, #32]
 801ab1e:	4299      	cmp	r1, r3
 801ab20:	db05      	blt.n	801ab2e <_printf_float+0x19e>
 801ab22:	6823      	ldr	r3, [r4, #0]
 801ab24:	6121      	str	r1, [r4, #16]
 801ab26:	07d8      	lsls	r0, r3, #31
 801ab28:	d5ea      	bpl.n	801ab00 <_printf_float+0x170>
 801ab2a:	1c4b      	adds	r3, r1, #1
 801ab2c:	e7e7      	b.n	801aafe <_printf_float+0x16e>
 801ab2e:	2900      	cmp	r1, #0
 801ab30:	bfd4      	ite	le
 801ab32:	f1c1 0202 	rsble	r2, r1, #2
 801ab36:	2201      	movgt	r2, #1
 801ab38:	4413      	add	r3, r2
 801ab3a:	e7e0      	b.n	801aafe <_printf_float+0x16e>
 801ab3c:	6823      	ldr	r3, [r4, #0]
 801ab3e:	055a      	lsls	r2, r3, #21
 801ab40:	d407      	bmi.n	801ab52 <_printf_float+0x1c2>
 801ab42:	6923      	ldr	r3, [r4, #16]
 801ab44:	4642      	mov	r2, r8
 801ab46:	4631      	mov	r1, r6
 801ab48:	4628      	mov	r0, r5
 801ab4a:	47b8      	blx	r7
 801ab4c:	3001      	adds	r0, #1
 801ab4e:	d12a      	bne.n	801aba6 <_printf_float+0x216>
 801ab50:	e76a      	b.n	801aa28 <_printf_float+0x98>
 801ab52:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801ab56:	f240 80e0 	bls.w	801ad1a <_printf_float+0x38a>
 801ab5a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801ab5e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ab62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab66:	d133      	bne.n	801abd0 <_printf_float+0x240>
 801ab68:	4a37      	ldr	r2, [pc, #220]	; (801ac48 <_printf_float+0x2b8>)
 801ab6a:	2301      	movs	r3, #1
 801ab6c:	4631      	mov	r1, r6
 801ab6e:	4628      	mov	r0, r5
 801ab70:	47b8      	blx	r7
 801ab72:	3001      	adds	r0, #1
 801ab74:	f43f af58 	beq.w	801aa28 <_printf_float+0x98>
 801ab78:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801ab7c:	429a      	cmp	r2, r3
 801ab7e:	db02      	blt.n	801ab86 <_printf_float+0x1f6>
 801ab80:	6823      	ldr	r3, [r4, #0]
 801ab82:	07d8      	lsls	r0, r3, #31
 801ab84:	d50f      	bpl.n	801aba6 <_printf_float+0x216>
 801ab86:	4653      	mov	r3, sl
 801ab88:	465a      	mov	r2, fp
 801ab8a:	4631      	mov	r1, r6
 801ab8c:	4628      	mov	r0, r5
 801ab8e:	47b8      	blx	r7
 801ab90:	3001      	adds	r0, #1
 801ab92:	f43f af49 	beq.w	801aa28 <_printf_float+0x98>
 801ab96:	f04f 0800 	mov.w	r8, #0
 801ab9a:	f104 091a 	add.w	r9, r4, #26
 801ab9e:	9b08      	ldr	r3, [sp, #32]
 801aba0:	3b01      	subs	r3, #1
 801aba2:	4543      	cmp	r3, r8
 801aba4:	dc09      	bgt.n	801abba <_printf_float+0x22a>
 801aba6:	6823      	ldr	r3, [r4, #0]
 801aba8:	079b      	lsls	r3, r3, #30
 801abaa:	f100 8106 	bmi.w	801adba <_printf_float+0x42a>
 801abae:	68e0      	ldr	r0, [r4, #12]
 801abb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801abb2:	4298      	cmp	r0, r3
 801abb4:	bfb8      	it	lt
 801abb6:	4618      	movlt	r0, r3
 801abb8:	e738      	b.n	801aa2c <_printf_float+0x9c>
 801abba:	2301      	movs	r3, #1
 801abbc:	464a      	mov	r2, r9
 801abbe:	4631      	mov	r1, r6
 801abc0:	4628      	mov	r0, r5
 801abc2:	47b8      	blx	r7
 801abc4:	3001      	adds	r0, #1
 801abc6:	f43f af2f 	beq.w	801aa28 <_printf_float+0x98>
 801abca:	f108 0801 	add.w	r8, r8, #1
 801abce:	e7e6      	b.n	801ab9e <_printf_float+0x20e>
 801abd0:	9b07      	ldr	r3, [sp, #28]
 801abd2:	2b00      	cmp	r3, #0
 801abd4:	dc3a      	bgt.n	801ac4c <_printf_float+0x2bc>
 801abd6:	4a1c      	ldr	r2, [pc, #112]	; (801ac48 <_printf_float+0x2b8>)
 801abd8:	2301      	movs	r3, #1
 801abda:	4631      	mov	r1, r6
 801abdc:	4628      	mov	r0, r5
 801abde:	47b8      	blx	r7
 801abe0:	3001      	adds	r0, #1
 801abe2:	f43f af21 	beq.w	801aa28 <_printf_float+0x98>
 801abe6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801abea:	4313      	orrs	r3, r2
 801abec:	d102      	bne.n	801abf4 <_printf_float+0x264>
 801abee:	6823      	ldr	r3, [r4, #0]
 801abf0:	07d9      	lsls	r1, r3, #31
 801abf2:	d5d8      	bpl.n	801aba6 <_printf_float+0x216>
 801abf4:	4653      	mov	r3, sl
 801abf6:	465a      	mov	r2, fp
 801abf8:	4631      	mov	r1, r6
 801abfa:	4628      	mov	r0, r5
 801abfc:	47b8      	blx	r7
 801abfe:	3001      	adds	r0, #1
 801ac00:	f43f af12 	beq.w	801aa28 <_printf_float+0x98>
 801ac04:	f04f 0900 	mov.w	r9, #0
 801ac08:	f104 0a1a 	add.w	sl, r4, #26
 801ac0c:	9b07      	ldr	r3, [sp, #28]
 801ac0e:	425b      	negs	r3, r3
 801ac10:	454b      	cmp	r3, r9
 801ac12:	dc01      	bgt.n	801ac18 <_printf_float+0x288>
 801ac14:	9b08      	ldr	r3, [sp, #32]
 801ac16:	e795      	b.n	801ab44 <_printf_float+0x1b4>
 801ac18:	2301      	movs	r3, #1
 801ac1a:	4652      	mov	r2, sl
 801ac1c:	4631      	mov	r1, r6
 801ac1e:	4628      	mov	r0, r5
 801ac20:	47b8      	blx	r7
 801ac22:	3001      	adds	r0, #1
 801ac24:	f43f af00 	beq.w	801aa28 <_printf_float+0x98>
 801ac28:	f109 0901 	add.w	r9, r9, #1
 801ac2c:	e7ee      	b.n	801ac0c <_printf_float+0x27c>
 801ac2e:	bf00      	nop
 801ac30:	ffffffff 	.word	0xffffffff
 801ac34:	7fefffff 	.word	0x7fefffff
 801ac38:	08020f66 	.word	0x08020f66
 801ac3c:	08020f6a 	.word	0x08020f6a
 801ac40:	08020f6e 	.word	0x08020f6e
 801ac44:	08020f72 	.word	0x08020f72
 801ac48:	08020f76 	.word	0x08020f76
 801ac4c:	9a08      	ldr	r2, [sp, #32]
 801ac4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ac50:	429a      	cmp	r2, r3
 801ac52:	bfa8      	it	ge
 801ac54:	461a      	movge	r2, r3
 801ac56:	2a00      	cmp	r2, #0
 801ac58:	4691      	mov	r9, r2
 801ac5a:	dc38      	bgt.n	801acce <_printf_float+0x33e>
 801ac5c:	2300      	movs	r3, #0
 801ac5e:	9305      	str	r3, [sp, #20]
 801ac60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ac64:	f104 021a 	add.w	r2, r4, #26
 801ac68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ac6a:	9905      	ldr	r1, [sp, #20]
 801ac6c:	9304      	str	r3, [sp, #16]
 801ac6e:	eba3 0309 	sub.w	r3, r3, r9
 801ac72:	428b      	cmp	r3, r1
 801ac74:	dc33      	bgt.n	801acde <_printf_float+0x34e>
 801ac76:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801ac7a:	429a      	cmp	r2, r3
 801ac7c:	db3c      	blt.n	801acf8 <_printf_float+0x368>
 801ac7e:	6823      	ldr	r3, [r4, #0]
 801ac80:	07da      	lsls	r2, r3, #31
 801ac82:	d439      	bmi.n	801acf8 <_printf_float+0x368>
 801ac84:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801ac88:	eba2 0903 	sub.w	r9, r2, r3
 801ac8c:	9b04      	ldr	r3, [sp, #16]
 801ac8e:	1ad2      	subs	r2, r2, r3
 801ac90:	4591      	cmp	r9, r2
 801ac92:	bfa8      	it	ge
 801ac94:	4691      	movge	r9, r2
 801ac96:	f1b9 0f00 	cmp.w	r9, #0
 801ac9a:	dc35      	bgt.n	801ad08 <_printf_float+0x378>
 801ac9c:	f04f 0800 	mov.w	r8, #0
 801aca0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801aca4:	f104 0a1a 	add.w	sl, r4, #26
 801aca8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801acac:	1a9b      	subs	r3, r3, r2
 801acae:	eba3 0309 	sub.w	r3, r3, r9
 801acb2:	4543      	cmp	r3, r8
 801acb4:	f77f af77 	ble.w	801aba6 <_printf_float+0x216>
 801acb8:	2301      	movs	r3, #1
 801acba:	4652      	mov	r2, sl
 801acbc:	4631      	mov	r1, r6
 801acbe:	4628      	mov	r0, r5
 801acc0:	47b8      	blx	r7
 801acc2:	3001      	adds	r0, #1
 801acc4:	f43f aeb0 	beq.w	801aa28 <_printf_float+0x98>
 801acc8:	f108 0801 	add.w	r8, r8, #1
 801accc:	e7ec      	b.n	801aca8 <_printf_float+0x318>
 801acce:	4613      	mov	r3, r2
 801acd0:	4631      	mov	r1, r6
 801acd2:	4642      	mov	r2, r8
 801acd4:	4628      	mov	r0, r5
 801acd6:	47b8      	blx	r7
 801acd8:	3001      	adds	r0, #1
 801acda:	d1bf      	bne.n	801ac5c <_printf_float+0x2cc>
 801acdc:	e6a4      	b.n	801aa28 <_printf_float+0x98>
 801acde:	2301      	movs	r3, #1
 801ace0:	4631      	mov	r1, r6
 801ace2:	4628      	mov	r0, r5
 801ace4:	9204      	str	r2, [sp, #16]
 801ace6:	47b8      	blx	r7
 801ace8:	3001      	adds	r0, #1
 801acea:	f43f ae9d 	beq.w	801aa28 <_printf_float+0x98>
 801acee:	9b05      	ldr	r3, [sp, #20]
 801acf0:	9a04      	ldr	r2, [sp, #16]
 801acf2:	3301      	adds	r3, #1
 801acf4:	9305      	str	r3, [sp, #20]
 801acf6:	e7b7      	b.n	801ac68 <_printf_float+0x2d8>
 801acf8:	4653      	mov	r3, sl
 801acfa:	465a      	mov	r2, fp
 801acfc:	4631      	mov	r1, r6
 801acfe:	4628      	mov	r0, r5
 801ad00:	47b8      	blx	r7
 801ad02:	3001      	adds	r0, #1
 801ad04:	d1be      	bne.n	801ac84 <_printf_float+0x2f4>
 801ad06:	e68f      	b.n	801aa28 <_printf_float+0x98>
 801ad08:	9a04      	ldr	r2, [sp, #16]
 801ad0a:	464b      	mov	r3, r9
 801ad0c:	4442      	add	r2, r8
 801ad0e:	4631      	mov	r1, r6
 801ad10:	4628      	mov	r0, r5
 801ad12:	47b8      	blx	r7
 801ad14:	3001      	adds	r0, #1
 801ad16:	d1c1      	bne.n	801ac9c <_printf_float+0x30c>
 801ad18:	e686      	b.n	801aa28 <_printf_float+0x98>
 801ad1a:	9a08      	ldr	r2, [sp, #32]
 801ad1c:	2a01      	cmp	r2, #1
 801ad1e:	dc01      	bgt.n	801ad24 <_printf_float+0x394>
 801ad20:	07db      	lsls	r3, r3, #31
 801ad22:	d537      	bpl.n	801ad94 <_printf_float+0x404>
 801ad24:	2301      	movs	r3, #1
 801ad26:	4642      	mov	r2, r8
 801ad28:	4631      	mov	r1, r6
 801ad2a:	4628      	mov	r0, r5
 801ad2c:	47b8      	blx	r7
 801ad2e:	3001      	adds	r0, #1
 801ad30:	f43f ae7a 	beq.w	801aa28 <_printf_float+0x98>
 801ad34:	4653      	mov	r3, sl
 801ad36:	465a      	mov	r2, fp
 801ad38:	4631      	mov	r1, r6
 801ad3a:	4628      	mov	r0, r5
 801ad3c:	47b8      	blx	r7
 801ad3e:	3001      	adds	r0, #1
 801ad40:	f43f ae72 	beq.w	801aa28 <_printf_float+0x98>
 801ad44:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801ad48:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ad4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad50:	9b08      	ldr	r3, [sp, #32]
 801ad52:	d01a      	beq.n	801ad8a <_printf_float+0x3fa>
 801ad54:	3b01      	subs	r3, #1
 801ad56:	f108 0201 	add.w	r2, r8, #1
 801ad5a:	4631      	mov	r1, r6
 801ad5c:	4628      	mov	r0, r5
 801ad5e:	47b8      	blx	r7
 801ad60:	3001      	adds	r0, #1
 801ad62:	d10e      	bne.n	801ad82 <_printf_float+0x3f2>
 801ad64:	e660      	b.n	801aa28 <_printf_float+0x98>
 801ad66:	2301      	movs	r3, #1
 801ad68:	464a      	mov	r2, r9
 801ad6a:	4631      	mov	r1, r6
 801ad6c:	4628      	mov	r0, r5
 801ad6e:	47b8      	blx	r7
 801ad70:	3001      	adds	r0, #1
 801ad72:	f43f ae59 	beq.w	801aa28 <_printf_float+0x98>
 801ad76:	f108 0801 	add.w	r8, r8, #1
 801ad7a:	9b08      	ldr	r3, [sp, #32]
 801ad7c:	3b01      	subs	r3, #1
 801ad7e:	4543      	cmp	r3, r8
 801ad80:	dcf1      	bgt.n	801ad66 <_printf_float+0x3d6>
 801ad82:	9b04      	ldr	r3, [sp, #16]
 801ad84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801ad88:	e6dd      	b.n	801ab46 <_printf_float+0x1b6>
 801ad8a:	f04f 0800 	mov.w	r8, #0
 801ad8e:	f104 091a 	add.w	r9, r4, #26
 801ad92:	e7f2      	b.n	801ad7a <_printf_float+0x3ea>
 801ad94:	2301      	movs	r3, #1
 801ad96:	4642      	mov	r2, r8
 801ad98:	e7df      	b.n	801ad5a <_printf_float+0x3ca>
 801ad9a:	2301      	movs	r3, #1
 801ad9c:	464a      	mov	r2, r9
 801ad9e:	4631      	mov	r1, r6
 801ada0:	4628      	mov	r0, r5
 801ada2:	47b8      	blx	r7
 801ada4:	3001      	adds	r0, #1
 801ada6:	f43f ae3f 	beq.w	801aa28 <_printf_float+0x98>
 801adaa:	f108 0801 	add.w	r8, r8, #1
 801adae:	68e3      	ldr	r3, [r4, #12]
 801adb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801adb2:	1a5b      	subs	r3, r3, r1
 801adb4:	4543      	cmp	r3, r8
 801adb6:	dcf0      	bgt.n	801ad9a <_printf_float+0x40a>
 801adb8:	e6f9      	b.n	801abae <_printf_float+0x21e>
 801adba:	f04f 0800 	mov.w	r8, #0
 801adbe:	f104 0919 	add.w	r9, r4, #25
 801adc2:	e7f4      	b.n	801adae <_printf_float+0x41e>

0801adc4 <_printf_common>:
 801adc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801adc8:	4616      	mov	r6, r2
 801adca:	4699      	mov	r9, r3
 801adcc:	688a      	ldr	r2, [r1, #8]
 801adce:	690b      	ldr	r3, [r1, #16]
 801add0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801add4:	4293      	cmp	r3, r2
 801add6:	bfb8      	it	lt
 801add8:	4613      	movlt	r3, r2
 801adda:	6033      	str	r3, [r6, #0]
 801addc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ade0:	4607      	mov	r7, r0
 801ade2:	460c      	mov	r4, r1
 801ade4:	b10a      	cbz	r2, 801adea <_printf_common+0x26>
 801ade6:	3301      	adds	r3, #1
 801ade8:	6033      	str	r3, [r6, #0]
 801adea:	6823      	ldr	r3, [r4, #0]
 801adec:	0699      	lsls	r1, r3, #26
 801adee:	bf42      	ittt	mi
 801adf0:	6833      	ldrmi	r3, [r6, #0]
 801adf2:	3302      	addmi	r3, #2
 801adf4:	6033      	strmi	r3, [r6, #0]
 801adf6:	6825      	ldr	r5, [r4, #0]
 801adf8:	f015 0506 	ands.w	r5, r5, #6
 801adfc:	d106      	bne.n	801ae0c <_printf_common+0x48>
 801adfe:	f104 0a19 	add.w	sl, r4, #25
 801ae02:	68e3      	ldr	r3, [r4, #12]
 801ae04:	6832      	ldr	r2, [r6, #0]
 801ae06:	1a9b      	subs	r3, r3, r2
 801ae08:	42ab      	cmp	r3, r5
 801ae0a:	dc26      	bgt.n	801ae5a <_printf_common+0x96>
 801ae0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801ae10:	1e13      	subs	r3, r2, #0
 801ae12:	6822      	ldr	r2, [r4, #0]
 801ae14:	bf18      	it	ne
 801ae16:	2301      	movne	r3, #1
 801ae18:	0692      	lsls	r2, r2, #26
 801ae1a:	d42b      	bmi.n	801ae74 <_printf_common+0xb0>
 801ae1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ae20:	4649      	mov	r1, r9
 801ae22:	4638      	mov	r0, r7
 801ae24:	47c0      	blx	r8
 801ae26:	3001      	adds	r0, #1
 801ae28:	d01e      	beq.n	801ae68 <_printf_common+0xa4>
 801ae2a:	6823      	ldr	r3, [r4, #0]
 801ae2c:	6922      	ldr	r2, [r4, #16]
 801ae2e:	f003 0306 	and.w	r3, r3, #6
 801ae32:	2b04      	cmp	r3, #4
 801ae34:	bf02      	ittt	eq
 801ae36:	68e5      	ldreq	r5, [r4, #12]
 801ae38:	6833      	ldreq	r3, [r6, #0]
 801ae3a:	1aed      	subeq	r5, r5, r3
 801ae3c:	68a3      	ldr	r3, [r4, #8]
 801ae3e:	bf0c      	ite	eq
 801ae40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ae44:	2500      	movne	r5, #0
 801ae46:	4293      	cmp	r3, r2
 801ae48:	bfc4      	itt	gt
 801ae4a:	1a9b      	subgt	r3, r3, r2
 801ae4c:	18ed      	addgt	r5, r5, r3
 801ae4e:	2600      	movs	r6, #0
 801ae50:	341a      	adds	r4, #26
 801ae52:	42b5      	cmp	r5, r6
 801ae54:	d11a      	bne.n	801ae8c <_printf_common+0xc8>
 801ae56:	2000      	movs	r0, #0
 801ae58:	e008      	b.n	801ae6c <_printf_common+0xa8>
 801ae5a:	2301      	movs	r3, #1
 801ae5c:	4652      	mov	r2, sl
 801ae5e:	4649      	mov	r1, r9
 801ae60:	4638      	mov	r0, r7
 801ae62:	47c0      	blx	r8
 801ae64:	3001      	adds	r0, #1
 801ae66:	d103      	bne.n	801ae70 <_printf_common+0xac>
 801ae68:	f04f 30ff 	mov.w	r0, #4294967295
 801ae6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae70:	3501      	adds	r5, #1
 801ae72:	e7c6      	b.n	801ae02 <_printf_common+0x3e>
 801ae74:	18e1      	adds	r1, r4, r3
 801ae76:	1c5a      	adds	r2, r3, #1
 801ae78:	2030      	movs	r0, #48	; 0x30
 801ae7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ae7e:	4422      	add	r2, r4
 801ae80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ae84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ae88:	3302      	adds	r3, #2
 801ae8a:	e7c7      	b.n	801ae1c <_printf_common+0x58>
 801ae8c:	2301      	movs	r3, #1
 801ae8e:	4622      	mov	r2, r4
 801ae90:	4649      	mov	r1, r9
 801ae92:	4638      	mov	r0, r7
 801ae94:	47c0      	blx	r8
 801ae96:	3001      	adds	r0, #1
 801ae98:	d0e6      	beq.n	801ae68 <_printf_common+0xa4>
 801ae9a:	3601      	adds	r6, #1
 801ae9c:	e7d9      	b.n	801ae52 <_printf_common+0x8e>
	...

0801aea0 <_printf_i>:
 801aea0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801aea4:	7e0f      	ldrb	r7, [r1, #24]
 801aea6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801aea8:	2f78      	cmp	r7, #120	; 0x78
 801aeaa:	4691      	mov	r9, r2
 801aeac:	4680      	mov	r8, r0
 801aeae:	460c      	mov	r4, r1
 801aeb0:	469a      	mov	sl, r3
 801aeb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801aeb6:	d807      	bhi.n	801aec8 <_printf_i+0x28>
 801aeb8:	2f62      	cmp	r7, #98	; 0x62
 801aeba:	d80a      	bhi.n	801aed2 <_printf_i+0x32>
 801aebc:	2f00      	cmp	r7, #0
 801aebe:	f000 80d4 	beq.w	801b06a <_printf_i+0x1ca>
 801aec2:	2f58      	cmp	r7, #88	; 0x58
 801aec4:	f000 80c0 	beq.w	801b048 <_printf_i+0x1a8>
 801aec8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801aecc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801aed0:	e03a      	b.n	801af48 <_printf_i+0xa8>
 801aed2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801aed6:	2b15      	cmp	r3, #21
 801aed8:	d8f6      	bhi.n	801aec8 <_printf_i+0x28>
 801aeda:	a101      	add	r1, pc, #4	; (adr r1, 801aee0 <_printf_i+0x40>)
 801aedc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801aee0:	0801af39 	.word	0x0801af39
 801aee4:	0801af4d 	.word	0x0801af4d
 801aee8:	0801aec9 	.word	0x0801aec9
 801aeec:	0801aec9 	.word	0x0801aec9
 801aef0:	0801aec9 	.word	0x0801aec9
 801aef4:	0801aec9 	.word	0x0801aec9
 801aef8:	0801af4d 	.word	0x0801af4d
 801aefc:	0801aec9 	.word	0x0801aec9
 801af00:	0801aec9 	.word	0x0801aec9
 801af04:	0801aec9 	.word	0x0801aec9
 801af08:	0801aec9 	.word	0x0801aec9
 801af0c:	0801b051 	.word	0x0801b051
 801af10:	0801af79 	.word	0x0801af79
 801af14:	0801b00b 	.word	0x0801b00b
 801af18:	0801aec9 	.word	0x0801aec9
 801af1c:	0801aec9 	.word	0x0801aec9
 801af20:	0801b073 	.word	0x0801b073
 801af24:	0801aec9 	.word	0x0801aec9
 801af28:	0801af79 	.word	0x0801af79
 801af2c:	0801aec9 	.word	0x0801aec9
 801af30:	0801aec9 	.word	0x0801aec9
 801af34:	0801b013 	.word	0x0801b013
 801af38:	682b      	ldr	r3, [r5, #0]
 801af3a:	1d1a      	adds	r2, r3, #4
 801af3c:	681b      	ldr	r3, [r3, #0]
 801af3e:	602a      	str	r2, [r5, #0]
 801af40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801af44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801af48:	2301      	movs	r3, #1
 801af4a:	e09f      	b.n	801b08c <_printf_i+0x1ec>
 801af4c:	6820      	ldr	r0, [r4, #0]
 801af4e:	682b      	ldr	r3, [r5, #0]
 801af50:	0607      	lsls	r7, r0, #24
 801af52:	f103 0104 	add.w	r1, r3, #4
 801af56:	6029      	str	r1, [r5, #0]
 801af58:	d501      	bpl.n	801af5e <_printf_i+0xbe>
 801af5a:	681e      	ldr	r6, [r3, #0]
 801af5c:	e003      	b.n	801af66 <_printf_i+0xc6>
 801af5e:	0646      	lsls	r6, r0, #25
 801af60:	d5fb      	bpl.n	801af5a <_printf_i+0xba>
 801af62:	f9b3 6000 	ldrsh.w	r6, [r3]
 801af66:	2e00      	cmp	r6, #0
 801af68:	da03      	bge.n	801af72 <_printf_i+0xd2>
 801af6a:	232d      	movs	r3, #45	; 0x2d
 801af6c:	4276      	negs	r6, r6
 801af6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801af72:	485a      	ldr	r0, [pc, #360]	; (801b0dc <_printf_i+0x23c>)
 801af74:	230a      	movs	r3, #10
 801af76:	e012      	b.n	801af9e <_printf_i+0xfe>
 801af78:	682b      	ldr	r3, [r5, #0]
 801af7a:	6820      	ldr	r0, [r4, #0]
 801af7c:	1d19      	adds	r1, r3, #4
 801af7e:	6029      	str	r1, [r5, #0]
 801af80:	0605      	lsls	r5, r0, #24
 801af82:	d501      	bpl.n	801af88 <_printf_i+0xe8>
 801af84:	681e      	ldr	r6, [r3, #0]
 801af86:	e002      	b.n	801af8e <_printf_i+0xee>
 801af88:	0641      	lsls	r1, r0, #25
 801af8a:	d5fb      	bpl.n	801af84 <_printf_i+0xe4>
 801af8c:	881e      	ldrh	r6, [r3, #0]
 801af8e:	4853      	ldr	r0, [pc, #332]	; (801b0dc <_printf_i+0x23c>)
 801af90:	2f6f      	cmp	r7, #111	; 0x6f
 801af92:	bf0c      	ite	eq
 801af94:	2308      	moveq	r3, #8
 801af96:	230a      	movne	r3, #10
 801af98:	2100      	movs	r1, #0
 801af9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801af9e:	6865      	ldr	r5, [r4, #4]
 801afa0:	60a5      	str	r5, [r4, #8]
 801afa2:	2d00      	cmp	r5, #0
 801afa4:	bfa2      	ittt	ge
 801afa6:	6821      	ldrge	r1, [r4, #0]
 801afa8:	f021 0104 	bicge.w	r1, r1, #4
 801afac:	6021      	strge	r1, [r4, #0]
 801afae:	b90e      	cbnz	r6, 801afb4 <_printf_i+0x114>
 801afb0:	2d00      	cmp	r5, #0
 801afb2:	d04b      	beq.n	801b04c <_printf_i+0x1ac>
 801afb4:	4615      	mov	r5, r2
 801afb6:	fbb6 f1f3 	udiv	r1, r6, r3
 801afba:	fb03 6711 	mls	r7, r3, r1, r6
 801afbe:	5dc7      	ldrb	r7, [r0, r7]
 801afc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801afc4:	4637      	mov	r7, r6
 801afc6:	42bb      	cmp	r3, r7
 801afc8:	460e      	mov	r6, r1
 801afca:	d9f4      	bls.n	801afb6 <_printf_i+0x116>
 801afcc:	2b08      	cmp	r3, #8
 801afce:	d10b      	bne.n	801afe8 <_printf_i+0x148>
 801afd0:	6823      	ldr	r3, [r4, #0]
 801afd2:	07de      	lsls	r6, r3, #31
 801afd4:	d508      	bpl.n	801afe8 <_printf_i+0x148>
 801afd6:	6923      	ldr	r3, [r4, #16]
 801afd8:	6861      	ldr	r1, [r4, #4]
 801afda:	4299      	cmp	r1, r3
 801afdc:	bfde      	ittt	le
 801afde:	2330      	movle	r3, #48	; 0x30
 801afe0:	f805 3c01 	strble.w	r3, [r5, #-1]
 801afe4:	f105 35ff 	addle.w	r5, r5, #4294967295
 801afe8:	1b52      	subs	r2, r2, r5
 801afea:	6122      	str	r2, [r4, #16]
 801afec:	f8cd a000 	str.w	sl, [sp]
 801aff0:	464b      	mov	r3, r9
 801aff2:	aa03      	add	r2, sp, #12
 801aff4:	4621      	mov	r1, r4
 801aff6:	4640      	mov	r0, r8
 801aff8:	f7ff fee4 	bl	801adc4 <_printf_common>
 801affc:	3001      	adds	r0, #1
 801affe:	d14a      	bne.n	801b096 <_printf_i+0x1f6>
 801b000:	f04f 30ff 	mov.w	r0, #4294967295
 801b004:	b004      	add	sp, #16
 801b006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b00a:	6823      	ldr	r3, [r4, #0]
 801b00c:	f043 0320 	orr.w	r3, r3, #32
 801b010:	6023      	str	r3, [r4, #0]
 801b012:	4833      	ldr	r0, [pc, #204]	; (801b0e0 <_printf_i+0x240>)
 801b014:	2778      	movs	r7, #120	; 0x78
 801b016:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b01a:	6823      	ldr	r3, [r4, #0]
 801b01c:	6829      	ldr	r1, [r5, #0]
 801b01e:	061f      	lsls	r7, r3, #24
 801b020:	f851 6b04 	ldr.w	r6, [r1], #4
 801b024:	d402      	bmi.n	801b02c <_printf_i+0x18c>
 801b026:	065f      	lsls	r7, r3, #25
 801b028:	bf48      	it	mi
 801b02a:	b2b6      	uxthmi	r6, r6
 801b02c:	07df      	lsls	r7, r3, #31
 801b02e:	bf48      	it	mi
 801b030:	f043 0320 	orrmi.w	r3, r3, #32
 801b034:	6029      	str	r1, [r5, #0]
 801b036:	bf48      	it	mi
 801b038:	6023      	strmi	r3, [r4, #0]
 801b03a:	b91e      	cbnz	r6, 801b044 <_printf_i+0x1a4>
 801b03c:	6823      	ldr	r3, [r4, #0]
 801b03e:	f023 0320 	bic.w	r3, r3, #32
 801b042:	6023      	str	r3, [r4, #0]
 801b044:	2310      	movs	r3, #16
 801b046:	e7a7      	b.n	801af98 <_printf_i+0xf8>
 801b048:	4824      	ldr	r0, [pc, #144]	; (801b0dc <_printf_i+0x23c>)
 801b04a:	e7e4      	b.n	801b016 <_printf_i+0x176>
 801b04c:	4615      	mov	r5, r2
 801b04e:	e7bd      	b.n	801afcc <_printf_i+0x12c>
 801b050:	682b      	ldr	r3, [r5, #0]
 801b052:	6826      	ldr	r6, [r4, #0]
 801b054:	6961      	ldr	r1, [r4, #20]
 801b056:	1d18      	adds	r0, r3, #4
 801b058:	6028      	str	r0, [r5, #0]
 801b05a:	0635      	lsls	r5, r6, #24
 801b05c:	681b      	ldr	r3, [r3, #0]
 801b05e:	d501      	bpl.n	801b064 <_printf_i+0x1c4>
 801b060:	6019      	str	r1, [r3, #0]
 801b062:	e002      	b.n	801b06a <_printf_i+0x1ca>
 801b064:	0670      	lsls	r0, r6, #25
 801b066:	d5fb      	bpl.n	801b060 <_printf_i+0x1c0>
 801b068:	8019      	strh	r1, [r3, #0]
 801b06a:	2300      	movs	r3, #0
 801b06c:	6123      	str	r3, [r4, #16]
 801b06e:	4615      	mov	r5, r2
 801b070:	e7bc      	b.n	801afec <_printf_i+0x14c>
 801b072:	682b      	ldr	r3, [r5, #0]
 801b074:	1d1a      	adds	r2, r3, #4
 801b076:	602a      	str	r2, [r5, #0]
 801b078:	681d      	ldr	r5, [r3, #0]
 801b07a:	6862      	ldr	r2, [r4, #4]
 801b07c:	2100      	movs	r1, #0
 801b07e:	4628      	mov	r0, r5
 801b080:	f7e6 ffc6 	bl	8002010 <memchr>
 801b084:	b108      	cbz	r0, 801b08a <_printf_i+0x1ea>
 801b086:	1b40      	subs	r0, r0, r5
 801b088:	6060      	str	r0, [r4, #4]
 801b08a:	6863      	ldr	r3, [r4, #4]
 801b08c:	6123      	str	r3, [r4, #16]
 801b08e:	2300      	movs	r3, #0
 801b090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b094:	e7aa      	b.n	801afec <_printf_i+0x14c>
 801b096:	6923      	ldr	r3, [r4, #16]
 801b098:	462a      	mov	r2, r5
 801b09a:	4649      	mov	r1, r9
 801b09c:	4640      	mov	r0, r8
 801b09e:	47d0      	blx	sl
 801b0a0:	3001      	adds	r0, #1
 801b0a2:	d0ad      	beq.n	801b000 <_printf_i+0x160>
 801b0a4:	6823      	ldr	r3, [r4, #0]
 801b0a6:	079b      	lsls	r3, r3, #30
 801b0a8:	d413      	bmi.n	801b0d2 <_printf_i+0x232>
 801b0aa:	68e0      	ldr	r0, [r4, #12]
 801b0ac:	9b03      	ldr	r3, [sp, #12]
 801b0ae:	4298      	cmp	r0, r3
 801b0b0:	bfb8      	it	lt
 801b0b2:	4618      	movlt	r0, r3
 801b0b4:	e7a6      	b.n	801b004 <_printf_i+0x164>
 801b0b6:	2301      	movs	r3, #1
 801b0b8:	4632      	mov	r2, r6
 801b0ba:	4649      	mov	r1, r9
 801b0bc:	4640      	mov	r0, r8
 801b0be:	47d0      	blx	sl
 801b0c0:	3001      	adds	r0, #1
 801b0c2:	d09d      	beq.n	801b000 <_printf_i+0x160>
 801b0c4:	3501      	adds	r5, #1
 801b0c6:	68e3      	ldr	r3, [r4, #12]
 801b0c8:	9903      	ldr	r1, [sp, #12]
 801b0ca:	1a5b      	subs	r3, r3, r1
 801b0cc:	42ab      	cmp	r3, r5
 801b0ce:	dcf2      	bgt.n	801b0b6 <_printf_i+0x216>
 801b0d0:	e7eb      	b.n	801b0aa <_printf_i+0x20a>
 801b0d2:	2500      	movs	r5, #0
 801b0d4:	f104 0619 	add.w	r6, r4, #25
 801b0d8:	e7f5      	b.n	801b0c6 <_printf_i+0x226>
 801b0da:	bf00      	nop
 801b0dc:	08020f78 	.word	0x08020f78
 801b0e0:	08020f89 	.word	0x08020f89

0801b0e4 <std>:
 801b0e4:	2300      	movs	r3, #0
 801b0e6:	b510      	push	{r4, lr}
 801b0e8:	4604      	mov	r4, r0
 801b0ea:	e9c0 3300 	strd	r3, r3, [r0]
 801b0ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b0f2:	6083      	str	r3, [r0, #8]
 801b0f4:	8181      	strh	r1, [r0, #12]
 801b0f6:	6643      	str	r3, [r0, #100]	; 0x64
 801b0f8:	81c2      	strh	r2, [r0, #14]
 801b0fa:	6183      	str	r3, [r0, #24]
 801b0fc:	4619      	mov	r1, r3
 801b0fe:	2208      	movs	r2, #8
 801b100:	305c      	adds	r0, #92	; 0x5c
 801b102:	f000 fa41 	bl	801b588 <memset>
 801b106:	4b0d      	ldr	r3, [pc, #52]	; (801b13c <std+0x58>)
 801b108:	6263      	str	r3, [r4, #36]	; 0x24
 801b10a:	4b0d      	ldr	r3, [pc, #52]	; (801b140 <std+0x5c>)
 801b10c:	62a3      	str	r3, [r4, #40]	; 0x28
 801b10e:	4b0d      	ldr	r3, [pc, #52]	; (801b144 <std+0x60>)
 801b110:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b112:	4b0d      	ldr	r3, [pc, #52]	; (801b148 <std+0x64>)
 801b114:	6323      	str	r3, [r4, #48]	; 0x30
 801b116:	4b0d      	ldr	r3, [pc, #52]	; (801b14c <std+0x68>)
 801b118:	6224      	str	r4, [r4, #32]
 801b11a:	429c      	cmp	r4, r3
 801b11c:	d006      	beq.n	801b12c <std+0x48>
 801b11e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801b122:	4294      	cmp	r4, r2
 801b124:	d002      	beq.n	801b12c <std+0x48>
 801b126:	33d0      	adds	r3, #208	; 0xd0
 801b128:	429c      	cmp	r4, r3
 801b12a:	d105      	bne.n	801b138 <std+0x54>
 801b12c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b134:	f000 ba9e 	b.w	801b674 <__retarget_lock_init_recursive>
 801b138:	bd10      	pop	{r4, pc}
 801b13a:	bf00      	nop
 801b13c:	0801b385 	.word	0x0801b385
 801b140:	0801b3a7 	.word	0x0801b3a7
 801b144:	0801b3df 	.word	0x0801b3df
 801b148:	0801b403 	.word	0x0801b403
 801b14c:	200071b8 	.word	0x200071b8

0801b150 <stdio_exit_handler>:
 801b150:	4a02      	ldr	r2, [pc, #8]	; (801b15c <stdio_exit_handler+0xc>)
 801b152:	4903      	ldr	r1, [pc, #12]	; (801b160 <stdio_exit_handler+0x10>)
 801b154:	4803      	ldr	r0, [pc, #12]	; (801b164 <stdio_exit_handler+0x14>)
 801b156:	f000 b869 	b.w	801b22c <_fwalk_sglue>
 801b15a:	bf00      	nop
 801b15c:	20000060 	.word	0x20000060
 801b160:	0801d1fd 	.word	0x0801d1fd
 801b164:	2000006c 	.word	0x2000006c

0801b168 <cleanup_stdio>:
 801b168:	6841      	ldr	r1, [r0, #4]
 801b16a:	4b0c      	ldr	r3, [pc, #48]	; (801b19c <cleanup_stdio+0x34>)
 801b16c:	4299      	cmp	r1, r3
 801b16e:	b510      	push	{r4, lr}
 801b170:	4604      	mov	r4, r0
 801b172:	d001      	beq.n	801b178 <cleanup_stdio+0x10>
 801b174:	f002 f842 	bl	801d1fc <_fflush_r>
 801b178:	68a1      	ldr	r1, [r4, #8]
 801b17a:	4b09      	ldr	r3, [pc, #36]	; (801b1a0 <cleanup_stdio+0x38>)
 801b17c:	4299      	cmp	r1, r3
 801b17e:	d002      	beq.n	801b186 <cleanup_stdio+0x1e>
 801b180:	4620      	mov	r0, r4
 801b182:	f002 f83b 	bl	801d1fc <_fflush_r>
 801b186:	68e1      	ldr	r1, [r4, #12]
 801b188:	4b06      	ldr	r3, [pc, #24]	; (801b1a4 <cleanup_stdio+0x3c>)
 801b18a:	4299      	cmp	r1, r3
 801b18c:	d004      	beq.n	801b198 <cleanup_stdio+0x30>
 801b18e:	4620      	mov	r0, r4
 801b190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b194:	f002 b832 	b.w	801d1fc <_fflush_r>
 801b198:	bd10      	pop	{r4, pc}
 801b19a:	bf00      	nop
 801b19c:	200071b8 	.word	0x200071b8
 801b1a0:	20007220 	.word	0x20007220
 801b1a4:	20007288 	.word	0x20007288

0801b1a8 <global_stdio_init.part.0>:
 801b1a8:	b510      	push	{r4, lr}
 801b1aa:	4b0b      	ldr	r3, [pc, #44]	; (801b1d8 <global_stdio_init.part.0+0x30>)
 801b1ac:	4c0b      	ldr	r4, [pc, #44]	; (801b1dc <global_stdio_init.part.0+0x34>)
 801b1ae:	4a0c      	ldr	r2, [pc, #48]	; (801b1e0 <global_stdio_init.part.0+0x38>)
 801b1b0:	601a      	str	r2, [r3, #0]
 801b1b2:	4620      	mov	r0, r4
 801b1b4:	2200      	movs	r2, #0
 801b1b6:	2104      	movs	r1, #4
 801b1b8:	f7ff ff94 	bl	801b0e4 <std>
 801b1bc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801b1c0:	2201      	movs	r2, #1
 801b1c2:	2109      	movs	r1, #9
 801b1c4:	f7ff ff8e 	bl	801b0e4 <std>
 801b1c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801b1cc:	2202      	movs	r2, #2
 801b1ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b1d2:	2112      	movs	r1, #18
 801b1d4:	f7ff bf86 	b.w	801b0e4 <std>
 801b1d8:	200072f0 	.word	0x200072f0
 801b1dc:	200071b8 	.word	0x200071b8
 801b1e0:	0801b151 	.word	0x0801b151

0801b1e4 <__sfp_lock_acquire>:
 801b1e4:	4801      	ldr	r0, [pc, #4]	; (801b1ec <__sfp_lock_acquire+0x8>)
 801b1e6:	f000 ba46 	b.w	801b676 <__retarget_lock_acquire_recursive>
 801b1ea:	bf00      	nop
 801b1ec:	200072f9 	.word	0x200072f9

0801b1f0 <__sfp_lock_release>:
 801b1f0:	4801      	ldr	r0, [pc, #4]	; (801b1f8 <__sfp_lock_release+0x8>)
 801b1f2:	f000 ba41 	b.w	801b678 <__retarget_lock_release_recursive>
 801b1f6:	bf00      	nop
 801b1f8:	200072f9 	.word	0x200072f9

0801b1fc <__sinit>:
 801b1fc:	b510      	push	{r4, lr}
 801b1fe:	4604      	mov	r4, r0
 801b200:	f7ff fff0 	bl	801b1e4 <__sfp_lock_acquire>
 801b204:	6a23      	ldr	r3, [r4, #32]
 801b206:	b11b      	cbz	r3, 801b210 <__sinit+0x14>
 801b208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b20c:	f7ff bff0 	b.w	801b1f0 <__sfp_lock_release>
 801b210:	4b04      	ldr	r3, [pc, #16]	; (801b224 <__sinit+0x28>)
 801b212:	6223      	str	r3, [r4, #32]
 801b214:	4b04      	ldr	r3, [pc, #16]	; (801b228 <__sinit+0x2c>)
 801b216:	681b      	ldr	r3, [r3, #0]
 801b218:	2b00      	cmp	r3, #0
 801b21a:	d1f5      	bne.n	801b208 <__sinit+0xc>
 801b21c:	f7ff ffc4 	bl	801b1a8 <global_stdio_init.part.0>
 801b220:	e7f2      	b.n	801b208 <__sinit+0xc>
 801b222:	bf00      	nop
 801b224:	0801b169 	.word	0x0801b169
 801b228:	200072f0 	.word	0x200072f0

0801b22c <_fwalk_sglue>:
 801b22c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b230:	4607      	mov	r7, r0
 801b232:	4688      	mov	r8, r1
 801b234:	4614      	mov	r4, r2
 801b236:	2600      	movs	r6, #0
 801b238:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b23c:	f1b9 0901 	subs.w	r9, r9, #1
 801b240:	d505      	bpl.n	801b24e <_fwalk_sglue+0x22>
 801b242:	6824      	ldr	r4, [r4, #0]
 801b244:	2c00      	cmp	r4, #0
 801b246:	d1f7      	bne.n	801b238 <_fwalk_sglue+0xc>
 801b248:	4630      	mov	r0, r6
 801b24a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b24e:	89ab      	ldrh	r3, [r5, #12]
 801b250:	2b01      	cmp	r3, #1
 801b252:	d907      	bls.n	801b264 <_fwalk_sglue+0x38>
 801b254:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b258:	3301      	adds	r3, #1
 801b25a:	d003      	beq.n	801b264 <_fwalk_sglue+0x38>
 801b25c:	4629      	mov	r1, r5
 801b25e:	4638      	mov	r0, r7
 801b260:	47c0      	blx	r8
 801b262:	4306      	orrs	r6, r0
 801b264:	3568      	adds	r5, #104	; 0x68
 801b266:	e7e9      	b.n	801b23c <_fwalk_sglue+0x10>

0801b268 <iprintf>:
 801b268:	b40f      	push	{r0, r1, r2, r3}
 801b26a:	b507      	push	{r0, r1, r2, lr}
 801b26c:	4906      	ldr	r1, [pc, #24]	; (801b288 <iprintf+0x20>)
 801b26e:	ab04      	add	r3, sp, #16
 801b270:	6808      	ldr	r0, [r1, #0]
 801b272:	f853 2b04 	ldr.w	r2, [r3], #4
 801b276:	6881      	ldr	r1, [r0, #8]
 801b278:	9301      	str	r3, [sp, #4]
 801b27a:	f001 fe1f 	bl	801cebc <_vfiprintf_r>
 801b27e:	b003      	add	sp, #12
 801b280:	f85d eb04 	ldr.w	lr, [sp], #4
 801b284:	b004      	add	sp, #16
 801b286:	4770      	bx	lr
 801b288:	200000b8 	.word	0x200000b8

0801b28c <_puts_r>:
 801b28c:	6a03      	ldr	r3, [r0, #32]
 801b28e:	b570      	push	{r4, r5, r6, lr}
 801b290:	6884      	ldr	r4, [r0, #8]
 801b292:	4605      	mov	r5, r0
 801b294:	460e      	mov	r6, r1
 801b296:	b90b      	cbnz	r3, 801b29c <_puts_r+0x10>
 801b298:	f7ff ffb0 	bl	801b1fc <__sinit>
 801b29c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b29e:	07db      	lsls	r3, r3, #31
 801b2a0:	d405      	bmi.n	801b2ae <_puts_r+0x22>
 801b2a2:	89a3      	ldrh	r3, [r4, #12]
 801b2a4:	0598      	lsls	r0, r3, #22
 801b2a6:	d402      	bmi.n	801b2ae <_puts_r+0x22>
 801b2a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b2aa:	f000 f9e4 	bl	801b676 <__retarget_lock_acquire_recursive>
 801b2ae:	89a3      	ldrh	r3, [r4, #12]
 801b2b0:	0719      	lsls	r1, r3, #28
 801b2b2:	d513      	bpl.n	801b2dc <_puts_r+0x50>
 801b2b4:	6923      	ldr	r3, [r4, #16]
 801b2b6:	b18b      	cbz	r3, 801b2dc <_puts_r+0x50>
 801b2b8:	3e01      	subs	r6, #1
 801b2ba:	68a3      	ldr	r3, [r4, #8]
 801b2bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b2c0:	3b01      	subs	r3, #1
 801b2c2:	60a3      	str	r3, [r4, #8]
 801b2c4:	b9e9      	cbnz	r1, 801b302 <_puts_r+0x76>
 801b2c6:	2b00      	cmp	r3, #0
 801b2c8:	da2e      	bge.n	801b328 <_puts_r+0x9c>
 801b2ca:	4622      	mov	r2, r4
 801b2cc:	210a      	movs	r1, #10
 801b2ce:	4628      	mov	r0, r5
 801b2d0:	f000 f89b 	bl	801b40a <__swbuf_r>
 801b2d4:	3001      	adds	r0, #1
 801b2d6:	d007      	beq.n	801b2e8 <_puts_r+0x5c>
 801b2d8:	250a      	movs	r5, #10
 801b2da:	e007      	b.n	801b2ec <_puts_r+0x60>
 801b2dc:	4621      	mov	r1, r4
 801b2de:	4628      	mov	r0, r5
 801b2e0:	f000 f8d0 	bl	801b484 <__swsetup_r>
 801b2e4:	2800      	cmp	r0, #0
 801b2e6:	d0e7      	beq.n	801b2b8 <_puts_r+0x2c>
 801b2e8:	f04f 35ff 	mov.w	r5, #4294967295
 801b2ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b2ee:	07da      	lsls	r2, r3, #31
 801b2f0:	d405      	bmi.n	801b2fe <_puts_r+0x72>
 801b2f2:	89a3      	ldrh	r3, [r4, #12]
 801b2f4:	059b      	lsls	r3, r3, #22
 801b2f6:	d402      	bmi.n	801b2fe <_puts_r+0x72>
 801b2f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b2fa:	f000 f9bd 	bl	801b678 <__retarget_lock_release_recursive>
 801b2fe:	4628      	mov	r0, r5
 801b300:	bd70      	pop	{r4, r5, r6, pc}
 801b302:	2b00      	cmp	r3, #0
 801b304:	da04      	bge.n	801b310 <_puts_r+0x84>
 801b306:	69a2      	ldr	r2, [r4, #24]
 801b308:	429a      	cmp	r2, r3
 801b30a:	dc06      	bgt.n	801b31a <_puts_r+0x8e>
 801b30c:	290a      	cmp	r1, #10
 801b30e:	d004      	beq.n	801b31a <_puts_r+0x8e>
 801b310:	6823      	ldr	r3, [r4, #0]
 801b312:	1c5a      	adds	r2, r3, #1
 801b314:	6022      	str	r2, [r4, #0]
 801b316:	7019      	strb	r1, [r3, #0]
 801b318:	e7cf      	b.n	801b2ba <_puts_r+0x2e>
 801b31a:	4622      	mov	r2, r4
 801b31c:	4628      	mov	r0, r5
 801b31e:	f000 f874 	bl	801b40a <__swbuf_r>
 801b322:	3001      	adds	r0, #1
 801b324:	d1c9      	bne.n	801b2ba <_puts_r+0x2e>
 801b326:	e7df      	b.n	801b2e8 <_puts_r+0x5c>
 801b328:	6823      	ldr	r3, [r4, #0]
 801b32a:	250a      	movs	r5, #10
 801b32c:	1c5a      	adds	r2, r3, #1
 801b32e:	6022      	str	r2, [r4, #0]
 801b330:	701d      	strb	r5, [r3, #0]
 801b332:	e7db      	b.n	801b2ec <_puts_r+0x60>

0801b334 <puts>:
 801b334:	4b02      	ldr	r3, [pc, #8]	; (801b340 <puts+0xc>)
 801b336:	4601      	mov	r1, r0
 801b338:	6818      	ldr	r0, [r3, #0]
 801b33a:	f7ff bfa7 	b.w	801b28c <_puts_r>
 801b33e:	bf00      	nop
 801b340:	200000b8 	.word	0x200000b8

0801b344 <siprintf>:
 801b344:	b40e      	push	{r1, r2, r3}
 801b346:	b500      	push	{lr}
 801b348:	b09c      	sub	sp, #112	; 0x70
 801b34a:	ab1d      	add	r3, sp, #116	; 0x74
 801b34c:	9002      	str	r0, [sp, #8]
 801b34e:	9006      	str	r0, [sp, #24]
 801b350:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b354:	4809      	ldr	r0, [pc, #36]	; (801b37c <siprintf+0x38>)
 801b356:	9107      	str	r1, [sp, #28]
 801b358:	9104      	str	r1, [sp, #16]
 801b35a:	4909      	ldr	r1, [pc, #36]	; (801b380 <siprintf+0x3c>)
 801b35c:	f853 2b04 	ldr.w	r2, [r3], #4
 801b360:	9105      	str	r1, [sp, #20]
 801b362:	6800      	ldr	r0, [r0, #0]
 801b364:	9301      	str	r3, [sp, #4]
 801b366:	a902      	add	r1, sp, #8
 801b368:	f001 fc80 	bl	801cc6c <_svfiprintf_r>
 801b36c:	9b02      	ldr	r3, [sp, #8]
 801b36e:	2200      	movs	r2, #0
 801b370:	701a      	strb	r2, [r3, #0]
 801b372:	b01c      	add	sp, #112	; 0x70
 801b374:	f85d eb04 	ldr.w	lr, [sp], #4
 801b378:	b003      	add	sp, #12
 801b37a:	4770      	bx	lr
 801b37c:	200000b8 	.word	0x200000b8
 801b380:	ffff0208 	.word	0xffff0208

0801b384 <__sread>:
 801b384:	b510      	push	{r4, lr}
 801b386:	460c      	mov	r4, r1
 801b388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b38c:	f000 f92a 	bl	801b5e4 <_read_r>
 801b390:	2800      	cmp	r0, #0
 801b392:	bfab      	itete	ge
 801b394:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b396:	89a3      	ldrhlt	r3, [r4, #12]
 801b398:	181b      	addge	r3, r3, r0
 801b39a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b39e:	bfac      	ite	ge
 801b3a0:	6563      	strge	r3, [r4, #84]	; 0x54
 801b3a2:	81a3      	strhlt	r3, [r4, #12]
 801b3a4:	bd10      	pop	{r4, pc}

0801b3a6 <__swrite>:
 801b3a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b3aa:	461f      	mov	r7, r3
 801b3ac:	898b      	ldrh	r3, [r1, #12]
 801b3ae:	05db      	lsls	r3, r3, #23
 801b3b0:	4605      	mov	r5, r0
 801b3b2:	460c      	mov	r4, r1
 801b3b4:	4616      	mov	r6, r2
 801b3b6:	d505      	bpl.n	801b3c4 <__swrite+0x1e>
 801b3b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b3bc:	2302      	movs	r3, #2
 801b3be:	2200      	movs	r2, #0
 801b3c0:	f000 f8fe 	bl	801b5c0 <_lseek_r>
 801b3c4:	89a3      	ldrh	r3, [r4, #12]
 801b3c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b3ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b3ce:	81a3      	strh	r3, [r4, #12]
 801b3d0:	4632      	mov	r2, r6
 801b3d2:	463b      	mov	r3, r7
 801b3d4:	4628      	mov	r0, r5
 801b3d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b3da:	f000 b915 	b.w	801b608 <_write_r>

0801b3de <__sseek>:
 801b3de:	b510      	push	{r4, lr}
 801b3e0:	460c      	mov	r4, r1
 801b3e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b3e6:	f000 f8eb 	bl	801b5c0 <_lseek_r>
 801b3ea:	1c43      	adds	r3, r0, #1
 801b3ec:	89a3      	ldrh	r3, [r4, #12]
 801b3ee:	bf15      	itete	ne
 801b3f0:	6560      	strne	r0, [r4, #84]	; 0x54
 801b3f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b3f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b3fa:	81a3      	strheq	r3, [r4, #12]
 801b3fc:	bf18      	it	ne
 801b3fe:	81a3      	strhne	r3, [r4, #12]
 801b400:	bd10      	pop	{r4, pc}

0801b402 <__sclose>:
 801b402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b406:	f000 b8cb 	b.w	801b5a0 <_close_r>

0801b40a <__swbuf_r>:
 801b40a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b40c:	460e      	mov	r6, r1
 801b40e:	4614      	mov	r4, r2
 801b410:	4605      	mov	r5, r0
 801b412:	b118      	cbz	r0, 801b41c <__swbuf_r+0x12>
 801b414:	6a03      	ldr	r3, [r0, #32]
 801b416:	b90b      	cbnz	r3, 801b41c <__swbuf_r+0x12>
 801b418:	f7ff fef0 	bl	801b1fc <__sinit>
 801b41c:	69a3      	ldr	r3, [r4, #24]
 801b41e:	60a3      	str	r3, [r4, #8]
 801b420:	89a3      	ldrh	r3, [r4, #12]
 801b422:	071a      	lsls	r2, r3, #28
 801b424:	d525      	bpl.n	801b472 <__swbuf_r+0x68>
 801b426:	6923      	ldr	r3, [r4, #16]
 801b428:	b31b      	cbz	r3, 801b472 <__swbuf_r+0x68>
 801b42a:	6823      	ldr	r3, [r4, #0]
 801b42c:	6922      	ldr	r2, [r4, #16]
 801b42e:	1a98      	subs	r0, r3, r2
 801b430:	6963      	ldr	r3, [r4, #20]
 801b432:	b2f6      	uxtb	r6, r6
 801b434:	4283      	cmp	r3, r0
 801b436:	4637      	mov	r7, r6
 801b438:	dc04      	bgt.n	801b444 <__swbuf_r+0x3a>
 801b43a:	4621      	mov	r1, r4
 801b43c:	4628      	mov	r0, r5
 801b43e:	f001 fedd 	bl	801d1fc <_fflush_r>
 801b442:	b9e0      	cbnz	r0, 801b47e <__swbuf_r+0x74>
 801b444:	68a3      	ldr	r3, [r4, #8]
 801b446:	3b01      	subs	r3, #1
 801b448:	60a3      	str	r3, [r4, #8]
 801b44a:	6823      	ldr	r3, [r4, #0]
 801b44c:	1c5a      	adds	r2, r3, #1
 801b44e:	6022      	str	r2, [r4, #0]
 801b450:	701e      	strb	r6, [r3, #0]
 801b452:	6962      	ldr	r2, [r4, #20]
 801b454:	1c43      	adds	r3, r0, #1
 801b456:	429a      	cmp	r2, r3
 801b458:	d004      	beq.n	801b464 <__swbuf_r+0x5a>
 801b45a:	89a3      	ldrh	r3, [r4, #12]
 801b45c:	07db      	lsls	r3, r3, #31
 801b45e:	d506      	bpl.n	801b46e <__swbuf_r+0x64>
 801b460:	2e0a      	cmp	r6, #10
 801b462:	d104      	bne.n	801b46e <__swbuf_r+0x64>
 801b464:	4621      	mov	r1, r4
 801b466:	4628      	mov	r0, r5
 801b468:	f001 fec8 	bl	801d1fc <_fflush_r>
 801b46c:	b938      	cbnz	r0, 801b47e <__swbuf_r+0x74>
 801b46e:	4638      	mov	r0, r7
 801b470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b472:	4621      	mov	r1, r4
 801b474:	4628      	mov	r0, r5
 801b476:	f000 f805 	bl	801b484 <__swsetup_r>
 801b47a:	2800      	cmp	r0, #0
 801b47c:	d0d5      	beq.n	801b42a <__swbuf_r+0x20>
 801b47e:	f04f 37ff 	mov.w	r7, #4294967295
 801b482:	e7f4      	b.n	801b46e <__swbuf_r+0x64>

0801b484 <__swsetup_r>:
 801b484:	b538      	push	{r3, r4, r5, lr}
 801b486:	4b2a      	ldr	r3, [pc, #168]	; (801b530 <__swsetup_r+0xac>)
 801b488:	4605      	mov	r5, r0
 801b48a:	6818      	ldr	r0, [r3, #0]
 801b48c:	460c      	mov	r4, r1
 801b48e:	b118      	cbz	r0, 801b498 <__swsetup_r+0x14>
 801b490:	6a03      	ldr	r3, [r0, #32]
 801b492:	b90b      	cbnz	r3, 801b498 <__swsetup_r+0x14>
 801b494:	f7ff feb2 	bl	801b1fc <__sinit>
 801b498:	89a3      	ldrh	r3, [r4, #12]
 801b49a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b49e:	0718      	lsls	r0, r3, #28
 801b4a0:	d422      	bmi.n	801b4e8 <__swsetup_r+0x64>
 801b4a2:	06d9      	lsls	r1, r3, #27
 801b4a4:	d407      	bmi.n	801b4b6 <__swsetup_r+0x32>
 801b4a6:	2309      	movs	r3, #9
 801b4a8:	602b      	str	r3, [r5, #0]
 801b4aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b4ae:	81a3      	strh	r3, [r4, #12]
 801b4b0:	f04f 30ff 	mov.w	r0, #4294967295
 801b4b4:	e034      	b.n	801b520 <__swsetup_r+0x9c>
 801b4b6:	0758      	lsls	r0, r3, #29
 801b4b8:	d512      	bpl.n	801b4e0 <__swsetup_r+0x5c>
 801b4ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b4bc:	b141      	cbz	r1, 801b4d0 <__swsetup_r+0x4c>
 801b4be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b4c2:	4299      	cmp	r1, r3
 801b4c4:	d002      	beq.n	801b4cc <__swsetup_r+0x48>
 801b4c6:	4628      	mov	r0, r5
 801b4c8:	f000 fefa 	bl	801c2c0 <_free_r>
 801b4cc:	2300      	movs	r3, #0
 801b4ce:	6363      	str	r3, [r4, #52]	; 0x34
 801b4d0:	89a3      	ldrh	r3, [r4, #12]
 801b4d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b4d6:	81a3      	strh	r3, [r4, #12]
 801b4d8:	2300      	movs	r3, #0
 801b4da:	6063      	str	r3, [r4, #4]
 801b4dc:	6923      	ldr	r3, [r4, #16]
 801b4de:	6023      	str	r3, [r4, #0]
 801b4e0:	89a3      	ldrh	r3, [r4, #12]
 801b4e2:	f043 0308 	orr.w	r3, r3, #8
 801b4e6:	81a3      	strh	r3, [r4, #12]
 801b4e8:	6923      	ldr	r3, [r4, #16]
 801b4ea:	b94b      	cbnz	r3, 801b500 <__swsetup_r+0x7c>
 801b4ec:	89a3      	ldrh	r3, [r4, #12]
 801b4ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b4f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b4f6:	d003      	beq.n	801b500 <__swsetup_r+0x7c>
 801b4f8:	4621      	mov	r1, r4
 801b4fa:	4628      	mov	r0, r5
 801b4fc:	f001 fede 	bl	801d2bc <__smakebuf_r>
 801b500:	89a0      	ldrh	r0, [r4, #12]
 801b502:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b506:	f010 0301 	ands.w	r3, r0, #1
 801b50a:	d00a      	beq.n	801b522 <__swsetup_r+0x9e>
 801b50c:	2300      	movs	r3, #0
 801b50e:	60a3      	str	r3, [r4, #8]
 801b510:	6963      	ldr	r3, [r4, #20]
 801b512:	425b      	negs	r3, r3
 801b514:	61a3      	str	r3, [r4, #24]
 801b516:	6923      	ldr	r3, [r4, #16]
 801b518:	b943      	cbnz	r3, 801b52c <__swsetup_r+0xa8>
 801b51a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b51e:	d1c4      	bne.n	801b4aa <__swsetup_r+0x26>
 801b520:	bd38      	pop	{r3, r4, r5, pc}
 801b522:	0781      	lsls	r1, r0, #30
 801b524:	bf58      	it	pl
 801b526:	6963      	ldrpl	r3, [r4, #20]
 801b528:	60a3      	str	r3, [r4, #8]
 801b52a:	e7f4      	b.n	801b516 <__swsetup_r+0x92>
 801b52c:	2000      	movs	r0, #0
 801b52e:	e7f7      	b.n	801b520 <__swsetup_r+0x9c>
 801b530:	200000b8 	.word	0x200000b8

0801b534 <memcmp>:
 801b534:	b510      	push	{r4, lr}
 801b536:	3901      	subs	r1, #1
 801b538:	4402      	add	r2, r0
 801b53a:	4290      	cmp	r0, r2
 801b53c:	d101      	bne.n	801b542 <memcmp+0xe>
 801b53e:	2000      	movs	r0, #0
 801b540:	e005      	b.n	801b54e <memcmp+0x1a>
 801b542:	7803      	ldrb	r3, [r0, #0]
 801b544:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b548:	42a3      	cmp	r3, r4
 801b54a:	d001      	beq.n	801b550 <memcmp+0x1c>
 801b54c:	1b18      	subs	r0, r3, r4
 801b54e:	bd10      	pop	{r4, pc}
 801b550:	3001      	adds	r0, #1
 801b552:	e7f2      	b.n	801b53a <memcmp+0x6>

0801b554 <memmove>:
 801b554:	4288      	cmp	r0, r1
 801b556:	b510      	push	{r4, lr}
 801b558:	eb01 0402 	add.w	r4, r1, r2
 801b55c:	d902      	bls.n	801b564 <memmove+0x10>
 801b55e:	4284      	cmp	r4, r0
 801b560:	4623      	mov	r3, r4
 801b562:	d807      	bhi.n	801b574 <memmove+0x20>
 801b564:	1e43      	subs	r3, r0, #1
 801b566:	42a1      	cmp	r1, r4
 801b568:	d008      	beq.n	801b57c <memmove+0x28>
 801b56a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b56e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b572:	e7f8      	b.n	801b566 <memmove+0x12>
 801b574:	4402      	add	r2, r0
 801b576:	4601      	mov	r1, r0
 801b578:	428a      	cmp	r2, r1
 801b57a:	d100      	bne.n	801b57e <memmove+0x2a>
 801b57c:	bd10      	pop	{r4, pc}
 801b57e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b582:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b586:	e7f7      	b.n	801b578 <memmove+0x24>

0801b588 <memset>:
 801b588:	4402      	add	r2, r0
 801b58a:	4603      	mov	r3, r0
 801b58c:	4293      	cmp	r3, r2
 801b58e:	d100      	bne.n	801b592 <memset+0xa>
 801b590:	4770      	bx	lr
 801b592:	f803 1b01 	strb.w	r1, [r3], #1
 801b596:	e7f9      	b.n	801b58c <memset+0x4>

0801b598 <_localeconv_r>:
 801b598:	4800      	ldr	r0, [pc, #0]	; (801b59c <_localeconv_r+0x4>)
 801b59a:	4770      	bx	lr
 801b59c:	200001ac 	.word	0x200001ac

0801b5a0 <_close_r>:
 801b5a0:	b538      	push	{r3, r4, r5, lr}
 801b5a2:	4d06      	ldr	r5, [pc, #24]	; (801b5bc <_close_r+0x1c>)
 801b5a4:	2300      	movs	r3, #0
 801b5a6:	4604      	mov	r4, r0
 801b5a8:	4608      	mov	r0, r1
 801b5aa:	602b      	str	r3, [r5, #0]
 801b5ac:	f7e8 faad 	bl	8003b0a <_close>
 801b5b0:	1c43      	adds	r3, r0, #1
 801b5b2:	d102      	bne.n	801b5ba <_close_r+0x1a>
 801b5b4:	682b      	ldr	r3, [r5, #0]
 801b5b6:	b103      	cbz	r3, 801b5ba <_close_r+0x1a>
 801b5b8:	6023      	str	r3, [r4, #0]
 801b5ba:	bd38      	pop	{r3, r4, r5, pc}
 801b5bc:	200072f4 	.word	0x200072f4

0801b5c0 <_lseek_r>:
 801b5c0:	b538      	push	{r3, r4, r5, lr}
 801b5c2:	4d07      	ldr	r5, [pc, #28]	; (801b5e0 <_lseek_r+0x20>)
 801b5c4:	4604      	mov	r4, r0
 801b5c6:	4608      	mov	r0, r1
 801b5c8:	4611      	mov	r1, r2
 801b5ca:	2200      	movs	r2, #0
 801b5cc:	602a      	str	r2, [r5, #0]
 801b5ce:	461a      	mov	r2, r3
 801b5d0:	f7e8 fac2 	bl	8003b58 <_lseek>
 801b5d4:	1c43      	adds	r3, r0, #1
 801b5d6:	d102      	bne.n	801b5de <_lseek_r+0x1e>
 801b5d8:	682b      	ldr	r3, [r5, #0]
 801b5da:	b103      	cbz	r3, 801b5de <_lseek_r+0x1e>
 801b5dc:	6023      	str	r3, [r4, #0]
 801b5de:	bd38      	pop	{r3, r4, r5, pc}
 801b5e0:	200072f4 	.word	0x200072f4

0801b5e4 <_read_r>:
 801b5e4:	b538      	push	{r3, r4, r5, lr}
 801b5e6:	4d07      	ldr	r5, [pc, #28]	; (801b604 <_read_r+0x20>)
 801b5e8:	4604      	mov	r4, r0
 801b5ea:	4608      	mov	r0, r1
 801b5ec:	4611      	mov	r1, r2
 801b5ee:	2200      	movs	r2, #0
 801b5f0:	602a      	str	r2, [r5, #0]
 801b5f2:	461a      	mov	r2, r3
 801b5f4:	f7e8 fa50 	bl	8003a98 <_read>
 801b5f8:	1c43      	adds	r3, r0, #1
 801b5fa:	d102      	bne.n	801b602 <_read_r+0x1e>
 801b5fc:	682b      	ldr	r3, [r5, #0]
 801b5fe:	b103      	cbz	r3, 801b602 <_read_r+0x1e>
 801b600:	6023      	str	r3, [r4, #0]
 801b602:	bd38      	pop	{r3, r4, r5, pc}
 801b604:	200072f4 	.word	0x200072f4

0801b608 <_write_r>:
 801b608:	b538      	push	{r3, r4, r5, lr}
 801b60a:	4d07      	ldr	r5, [pc, #28]	; (801b628 <_write_r+0x20>)
 801b60c:	4604      	mov	r4, r0
 801b60e:	4608      	mov	r0, r1
 801b610:	4611      	mov	r1, r2
 801b612:	2200      	movs	r2, #0
 801b614:	602a      	str	r2, [r5, #0]
 801b616:	461a      	mov	r2, r3
 801b618:	f7e8 fa5b 	bl	8003ad2 <_write>
 801b61c:	1c43      	adds	r3, r0, #1
 801b61e:	d102      	bne.n	801b626 <_write_r+0x1e>
 801b620:	682b      	ldr	r3, [r5, #0]
 801b622:	b103      	cbz	r3, 801b626 <_write_r+0x1e>
 801b624:	6023      	str	r3, [r4, #0]
 801b626:	bd38      	pop	{r3, r4, r5, pc}
 801b628:	200072f4 	.word	0x200072f4

0801b62c <__libc_init_array>:
 801b62c:	b570      	push	{r4, r5, r6, lr}
 801b62e:	4d0d      	ldr	r5, [pc, #52]	; (801b664 <__libc_init_array+0x38>)
 801b630:	4c0d      	ldr	r4, [pc, #52]	; (801b668 <__libc_init_array+0x3c>)
 801b632:	1b64      	subs	r4, r4, r5
 801b634:	10a4      	asrs	r4, r4, #2
 801b636:	2600      	movs	r6, #0
 801b638:	42a6      	cmp	r6, r4
 801b63a:	d109      	bne.n	801b650 <__libc_init_array+0x24>
 801b63c:	4d0b      	ldr	r5, [pc, #44]	; (801b66c <__libc_init_array+0x40>)
 801b63e:	4c0c      	ldr	r4, [pc, #48]	; (801b670 <__libc_init_array+0x44>)
 801b640:	f001 ff62 	bl	801d508 <_init>
 801b644:	1b64      	subs	r4, r4, r5
 801b646:	10a4      	asrs	r4, r4, #2
 801b648:	2600      	movs	r6, #0
 801b64a:	42a6      	cmp	r6, r4
 801b64c:	d105      	bne.n	801b65a <__libc_init_array+0x2e>
 801b64e:	bd70      	pop	{r4, r5, r6, pc}
 801b650:	f855 3b04 	ldr.w	r3, [r5], #4
 801b654:	4798      	blx	r3
 801b656:	3601      	adds	r6, #1
 801b658:	e7ee      	b.n	801b638 <__libc_init_array+0xc>
 801b65a:	f855 3b04 	ldr.w	r3, [r5], #4
 801b65e:	4798      	blx	r3
 801b660:	3601      	adds	r6, #1
 801b662:	e7f2      	b.n	801b64a <__libc_init_array+0x1e>
 801b664:	080211c8 	.word	0x080211c8
 801b668:	080211c8 	.word	0x080211c8
 801b66c:	080211c8 	.word	0x080211c8
 801b670:	080211cc 	.word	0x080211cc

0801b674 <__retarget_lock_init_recursive>:
 801b674:	4770      	bx	lr

0801b676 <__retarget_lock_acquire_recursive>:
 801b676:	4770      	bx	lr

0801b678 <__retarget_lock_release_recursive>:
 801b678:	4770      	bx	lr

0801b67a <memcpy>:
 801b67a:	440a      	add	r2, r1
 801b67c:	4291      	cmp	r1, r2
 801b67e:	f100 33ff 	add.w	r3, r0, #4294967295
 801b682:	d100      	bne.n	801b686 <memcpy+0xc>
 801b684:	4770      	bx	lr
 801b686:	b510      	push	{r4, lr}
 801b688:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b68c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b690:	4291      	cmp	r1, r2
 801b692:	d1f9      	bne.n	801b688 <memcpy+0xe>
 801b694:	bd10      	pop	{r4, pc}
	...

0801b698 <__assert_func>:
 801b698:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b69a:	4614      	mov	r4, r2
 801b69c:	461a      	mov	r2, r3
 801b69e:	4b09      	ldr	r3, [pc, #36]	; (801b6c4 <__assert_func+0x2c>)
 801b6a0:	681b      	ldr	r3, [r3, #0]
 801b6a2:	4605      	mov	r5, r0
 801b6a4:	68d8      	ldr	r0, [r3, #12]
 801b6a6:	b14c      	cbz	r4, 801b6bc <__assert_func+0x24>
 801b6a8:	4b07      	ldr	r3, [pc, #28]	; (801b6c8 <__assert_func+0x30>)
 801b6aa:	9100      	str	r1, [sp, #0]
 801b6ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b6b0:	4906      	ldr	r1, [pc, #24]	; (801b6cc <__assert_func+0x34>)
 801b6b2:	462b      	mov	r3, r5
 801b6b4:	f001 fdca 	bl	801d24c <fiprintf>
 801b6b8:	f001 fe6e 	bl	801d398 <abort>
 801b6bc:	4b04      	ldr	r3, [pc, #16]	; (801b6d0 <__assert_func+0x38>)
 801b6be:	461c      	mov	r4, r3
 801b6c0:	e7f3      	b.n	801b6aa <__assert_func+0x12>
 801b6c2:	bf00      	nop
 801b6c4:	200000b8 	.word	0x200000b8
 801b6c8:	08020f9a 	.word	0x08020f9a
 801b6cc:	08020fa7 	.word	0x08020fa7
 801b6d0:	08020fd5 	.word	0x08020fd5

0801b6d4 <quorem>:
 801b6d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6d8:	6903      	ldr	r3, [r0, #16]
 801b6da:	690c      	ldr	r4, [r1, #16]
 801b6dc:	42a3      	cmp	r3, r4
 801b6de:	4607      	mov	r7, r0
 801b6e0:	db7e      	blt.n	801b7e0 <quorem+0x10c>
 801b6e2:	3c01      	subs	r4, #1
 801b6e4:	f101 0814 	add.w	r8, r1, #20
 801b6e8:	f100 0514 	add.w	r5, r0, #20
 801b6ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b6f0:	9301      	str	r3, [sp, #4]
 801b6f2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b6f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b6fa:	3301      	adds	r3, #1
 801b6fc:	429a      	cmp	r2, r3
 801b6fe:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801b702:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b706:	fbb2 f6f3 	udiv	r6, r2, r3
 801b70a:	d331      	bcc.n	801b770 <quorem+0x9c>
 801b70c:	f04f 0e00 	mov.w	lr, #0
 801b710:	4640      	mov	r0, r8
 801b712:	46ac      	mov	ip, r5
 801b714:	46f2      	mov	sl, lr
 801b716:	f850 2b04 	ldr.w	r2, [r0], #4
 801b71a:	b293      	uxth	r3, r2
 801b71c:	fb06 e303 	mla	r3, r6, r3, lr
 801b720:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b724:	0c1a      	lsrs	r2, r3, #16
 801b726:	b29b      	uxth	r3, r3
 801b728:	ebaa 0303 	sub.w	r3, sl, r3
 801b72c:	f8dc a000 	ldr.w	sl, [ip]
 801b730:	fa13 f38a 	uxtah	r3, r3, sl
 801b734:	fb06 220e 	mla	r2, r6, lr, r2
 801b738:	9300      	str	r3, [sp, #0]
 801b73a:	9b00      	ldr	r3, [sp, #0]
 801b73c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b740:	b292      	uxth	r2, r2
 801b742:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801b746:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b74a:	f8bd 3000 	ldrh.w	r3, [sp]
 801b74e:	4581      	cmp	r9, r0
 801b750:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b754:	f84c 3b04 	str.w	r3, [ip], #4
 801b758:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801b75c:	d2db      	bcs.n	801b716 <quorem+0x42>
 801b75e:	f855 300b 	ldr.w	r3, [r5, fp]
 801b762:	b92b      	cbnz	r3, 801b770 <quorem+0x9c>
 801b764:	9b01      	ldr	r3, [sp, #4]
 801b766:	3b04      	subs	r3, #4
 801b768:	429d      	cmp	r5, r3
 801b76a:	461a      	mov	r2, r3
 801b76c:	d32c      	bcc.n	801b7c8 <quorem+0xf4>
 801b76e:	613c      	str	r4, [r7, #16]
 801b770:	4638      	mov	r0, r7
 801b772:	f001 f921 	bl	801c9b8 <__mcmp>
 801b776:	2800      	cmp	r0, #0
 801b778:	db22      	blt.n	801b7c0 <quorem+0xec>
 801b77a:	3601      	adds	r6, #1
 801b77c:	4629      	mov	r1, r5
 801b77e:	2000      	movs	r0, #0
 801b780:	f858 2b04 	ldr.w	r2, [r8], #4
 801b784:	f8d1 c000 	ldr.w	ip, [r1]
 801b788:	b293      	uxth	r3, r2
 801b78a:	1ac3      	subs	r3, r0, r3
 801b78c:	0c12      	lsrs	r2, r2, #16
 801b78e:	fa13 f38c 	uxtah	r3, r3, ip
 801b792:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801b796:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b79a:	b29b      	uxth	r3, r3
 801b79c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b7a0:	45c1      	cmp	r9, r8
 801b7a2:	f841 3b04 	str.w	r3, [r1], #4
 801b7a6:	ea4f 4022 	mov.w	r0, r2, asr #16
 801b7aa:	d2e9      	bcs.n	801b780 <quorem+0xac>
 801b7ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b7b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b7b4:	b922      	cbnz	r2, 801b7c0 <quorem+0xec>
 801b7b6:	3b04      	subs	r3, #4
 801b7b8:	429d      	cmp	r5, r3
 801b7ba:	461a      	mov	r2, r3
 801b7bc:	d30a      	bcc.n	801b7d4 <quorem+0x100>
 801b7be:	613c      	str	r4, [r7, #16]
 801b7c0:	4630      	mov	r0, r6
 801b7c2:	b003      	add	sp, #12
 801b7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7c8:	6812      	ldr	r2, [r2, #0]
 801b7ca:	3b04      	subs	r3, #4
 801b7cc:	2a00      	cmp	r2, #0
 801b7ce:	d1ce      	bne.n	801b76e <quorem+0x9a>
 801b7d0:	3c01      	subs	r4, #1
 801b7d2:	e7c9      	b.n	801b768 <quorem+0x94>
 801b7d4:	6812      	ldr	r2, [r2, #0]
 801b7d6:	3b04      	subs	r3, #4
 801b7d8:	2a00      	cmp	r2, #0
 801b7da:	d1f0      	bne.n	801b7be <quorem+0xea>
 801b7dc:	3c01      	subs	r4, #1
 801b7de:	e7eb      	b.n	801b7b8 <quorem+0xe4>
 801b7e0:	2000      	movs	r0, #0
 801b7e2:	e7ee      	b.n	801b7c2 <quorem+0xee>
 801b7e4:	0000      	movs	r0, r0
	...

0801b7e8 <_dtoa_r>:
 801b7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7ec:	ed2d 8b02 	vpush	{d8}
 801b7f0:	69c5      	ldr	r5, [r0, #28]
 801b7f2:	b091      	sub	sp, #68	; 0x44
 801b7f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 801b7f8:	ec59 8b10 	vmov	r8, r9, d0
 801b7fc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801b7fe:	9106      	str	r1, [sp, #24]
 801b800:	4606      	mov	r6, r0
 801b802:	9208      	str	r2, [sp, #32]
 801b804:	930c      	str	r3, [sp, #48]	; 0x30
 801b806:	b975      	cbnz	r5, 801b826 <_dtoa_r+0x3e>
 801b808:	2010      	movs	r0, #16
 801b80a:	f000 fda5 	bl	801c358 <malloc>
 801b80e:	4602      	mov	r2, r0
 801b810:	61f0      	str	r0, [r6, #28]
 801b812:	b920      	cbnz	r0, 801b81e <_dtoa_r+0x36>
 801b814:	4ba6      	ldr	r3, [pc, #664]	; (801bab0 <_dtoa_r+0x2c8>)
 801b816:	21ef      	movs	r1, #239	; 0xef
 801b818:	48a6      	ldr	r0, [pc, #664]	; (801bab4 <_dtoa_r+0x2cc>)
 801b81a:	f7ff ff3d 	bl	801b698 <__assert_func>
 801b81e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b822:	6005      	str	r5, [r0, #0]
 801b824:	60c5      	str	r5, [r0, #12]
 801b826:	69f3      	ldr	r3, [r6, #28]
 801b828:	6819      	ldr	r1, [r3, #0]
 801b82a:	b151      	cbz	r1, 801b842 <_dtoa_r+0x5a>
 801b82c:	685a      	ldr	r2, [r3, #4]
 801b82e:	604a      	str	r2, [r1, #4]
 801b830:	2301      	movs	r3, #1
 801b832:	4093      	lsls	r3, r2
 801b834:	608b      	str	r3, [r1, #8]
 801b836:	4630      	mov	r0, r6
 801b838:	f000 fe82 	bl	801c540 <_Bfree>
 801b83c:	69f3      	ldr	r3, [r6, #28]
 801b83e:	2200      	movs	r2, #0
 801b840:	601a      	str	r2, [r3, #0]
 801b842:	f1b9 0300 	subs.w	r3, r9, #0
 801b846:	bfbb      	ittet	lt
 801b848:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801b84c:	9303      	strlt	r3, [sp, #12]
 801b84e:	2300      	movge	r3, #0
 801b850:	2201      	movlt	r2, #1
 801b852:	bfac      	ite	ge
 801b854:	6023      	strge	r3, [r4, #0]
 801b856:	6022      	strlt	r2, [r4, #0]
 801b858:	4b97      	ldr	r3, [pc, #604]	; (801bab8 <_dtoa_r+0x2d0>)
 801b85a:	9c03      	ldr	r4, [sp, #12]
 801b85c:	43a3      	bics	r3, r4
 801b85e:	d11c      	bne.n	801b89a <_dtoa_r+0xb2>
 801b860:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b862:	f242 730f 	movw	r3, #9999	; 0x270f
 801b866:	6013      	str	r3, [r2, #0]
 801b868:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801b86c:	ea53 0308 	orrs.w	r3, r3, r8
 801b870:	f000 84fb 	beq.w	801c26a <_dtoa_r+0xa82>
 801b874:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b876:	b963      	cbnz	r3, 801b892 <_dtoa_r+0xaa>
 801b878:	4b90      	ldr	r3, [pc, #576]	; (801babc <_dtoa_r+0x2d4>)
 801b87a:	e020      	b.n	801b8be <_dtoa_r+0xd6>
 801b87c:	4b90      	ldr	r3, [pc, #576]	; (801bac0 <_dtoa_r+0x2d8>)
 801b87e:	9301      	str	r3, [sp, #4]
 801b880:	3308      	adds	r3, #8
 801b882:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b884:	6013      	str	r3, [r2, #0]
 801b886:	9801      	ldr	r0, [sp, #4]
 801b888:	b011      	add	sp, #68	; 0x44
 801b88a:	ecbd 8b02 	vpop	{d8}
 801b88e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b892:	4b8a      	ldr	r3, [pc, #552]	; (801babc <_dtoa_r+0x2d4>)
 801b894:	9301      	str	r3, [sp, #4]
 801b896:	3303      	adds	r3, #3
 801b898:	e7f3      	b.n	801b882 <_dtoa_r+0x9a>
 801b89a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801b89e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801b8a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8a6:	d10c      	bne.n	801b8c2 <_dtoa_r+0xda>
 801b8a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b8aa:	2301      	movs	r3, #1
 801b8ac:	6013      	str	r3, [r2, #0]
 801b8ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b8b0:	2b00      	cmp	r3, #0
 801b8b2:	f000 84d7 	beq.w	801c264 <_dtoa_r+0xa7c>
 801b8b6:	4b83      	ldr	r3, [pc, #524]	; (801bac4 <_dtoa_r+0x2dc>)
 801b8b8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b8ba:	6013      	str	r3, [r2, #0]
 801b8bc:	3b01      	subs	r3, #1
 801b8be:	9301      	str	r3, [sp, #4]
 801b8c0:	e7e1      	b.n	801b886 <_dtoa_r+0x9e>
 801b8c2:	aa0e      	add	r2, sp, #56	; 0x38
 801b8c4:	a90f      	add	r1, sp, #60	; 0x3c
 801b8c6:	4630      	mov	r0, r6
 801b8c8:	eeb0 0b48 	vmov.f64	d0, d8
 801b8cc:	f001 f91a 	bl	801cb04 <__d2b>
 801b8d0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801b8d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b8d6:	4605      	mov	r5, r0
 801b8d8:	2b00      	cmp	r3, #0
 801b8da:	d046      	beq.n	801b96a <_dtoa_r+0x182>
 801b8dc:	eeb0 7b48 	vmov.f64	d7, d8
 801b8e0:	ee18 1a90 	vmov	r1, s17
 801b8e4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801b8e8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801b8ec:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801b8f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801b8f4:	2000      	movs	r0, #0
 801b8f6:	ee07 1a90 	vmov	s15, r1
 801b8fa:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 801b8fe:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801ba98 <_dtoa_r+0x2b0>
 801b902:	ee37 7b46 	vsub.f64	d7, d7, d6
 801b906:	ed9f 6b66 	vldr	d6, [pc, #408]	; 801baa0 <_dtoa_r+0x2b8>
 801b90a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801b90e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801baa8 <_dtoa_r+0x2c0>
 801b912:	ee07 3a90 	vmov	s15, r3
 801b916:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801b91a:	eeb0 7b46 	vmov.f64	d7, d6
 801b91e:	eea4 7b05 	vfma.f64	d7, d4, d5
 801b922:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801b926:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801b92a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b92e:	ee16 ba90 	vmov	fp, s13
 801b932:	9009      	str	r0, [sp, #36]	; 0x24
 801b934:	d508      	bpl.n	801b948 <_dtoa_r+0x160>
 801b936:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801b93a:	eeb4 6b47 	vcmp.f64	d6, d7
 801b93e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b942:	bf18      	it	ne
 801b944:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801b948:	f1bb 0f16 	cmp.w	fp, #22
 801b94c:	d82b      	bhi.n	801b9a6 <_dtoa_r+0x1be>
 801b94e:	495e      	ldr	r1, [pc, #376]	; (801bac8 <_dtoa_r+0x2e0>)
 801b950:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801b954:	ed91 7b00 	vldr	d7, [r1]
 801b958:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801b95c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b960:	d501      	bpl.n	801b966 <_dtoa_r+0x17e>
 801b962:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b966:	2100      	movs	r1, #0
 801b968:	e01e      	b.n	801b9a8 <_dtoa_r+0x1c0>
 801b96a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b96c:	4413      	add	r3, r2
 801b96e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 801b972:	2920      	cmp	r1, #32
 801b974:	bfc1      	itttt	gt
 801b976:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 801b97a:	408c      	lslgt	r4, r1
 801b97c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 801b980:	fa28 f101 	lsrgt.w	r1, r8, r1
 801b984:	bfd6      	itet	le
 801b986:	f1c1 0120 	rsble	r1, r1, #32
 801b98a:	4321      	orrgt	r1, r4
 801b98c:	fa08 f101 	lslle.w	r1, r8, r1
 801b990:	ee07 1a90 	vmov	s15, r1
 801b994:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801b998:	3b01      	subs	r3, #1
 801b99a:	ee17 1a90 	vmov	r1, s15
 801b99e:	2001      	movs	r0, #1
 801b9a0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801b9a4:	e7a7      	b.n	801b8f6 <_dtoa_r+0x10e>
 801b9a6:	2101      	movs	r1, #1
 801b9a8:	1ad2      	subs	r2, r2, r3
 801b9aa:	1e53      	subs	r3, r2, #1
 801b9ac:	9305      	str	r3, [sp, #20]
 801b9ae:	bf45      	ittet	mi
 801b9b0:	f1c2 0301 	rsbmi	r3, r2, #1
 801b9b4:	9304      	strmi	r3, [sp, #16]
 801b9b6:	2300      	movpl	r3, #0
 801b9b8:	2300      	movmi	r3, #0
 801b9ba:	bf4c      	ite	mi
 801b9bc:	9305      	strmi	r3, [sp, #20]
 801b9be:	9304      	strpl	r3, [sp, #16]
 801b9c0:	f1bb 0f00 	cmp.w	fp, #0
 801b9c4:	910b      	str	r1, [sp, #44]	; 0x2c
 801b9c6:	db18      	blt.n	801b9fa <_dtoa_r+0x212>
 801b9c8:	9b05      	ldr	r3, [sp, #20]
 801b9ca:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801b9ce:	445b      	add	r3, fp
 801b9d0:	9305      	str	r3, [sp, #20]
 801b9d2:	2300      	movs	r3, #0
 801b9d4:	9a06      	ldr	r2, [sp, #24]
 801b9d6:	2a09      	cmp	r2, #9
 801b9d8:	d848      	bhi.n	801ba6c <_dtoa_r+0x284>
 801b9da:	2a05      	cmp	r2, #5
 801b9dc:	bfc4      	itt	gt
 801b9de:	3a04      	subgt	r2, #4
 801b9e0:	9206      	strgt	r2, [sp, #24]
 801b9e2:	9a06      	ldr	r2, [sp, #24]
 801b9e4:	f1a2 0202 	sub.w	r2, r2, #2
 801b9e8:	bfcc      	ite	gt
 801b9ea:	2400      	movgt	r4, #0
 801b9ec:	2401      	movle	r4, #1
 801b9ee:	2a03      	cmp	r2, #3
 801b9f0:	d847      	bhi.n	801ba82 <_dtoa_r+0x29a>
 801b9f2:	e8df f002 	tbb	[pc, r2]
 801b9f6:	2d0b      	.short	0x2d0b
 801b9f8:	392b      	.short	0x392b
 801b9fa:	9b04      	ldr	r3, [sp, #16]
 801b9fc:	2200      	movs	r2, #0
 801b9fe:	eba3 030b 	sub.w	r3, r3, fp
 801ba02:	9304      	str	r3, [sp, #16]
 801ba04:	920a      	str	r2, [sp, #40]	; 0x28
 801ba06:	f1cb 0300 	rsb	r3, fp, #0
 801ba0a:	e7e3      	b.n	801b9d4 <_dtoa_r+0x1ec>
 801ba0c:	2200      	movs	r2, #0
 801ba0e:	9207      	str	r2, [sp, #28]
 801ba10:	9a08      	ldr	r2, [sp, #32]
 801ba12:	2a00      	cmp	r2, #0
 801ba14:	dc38      	bgt.n	801ba88 <_dtoa_r+0x2a0>
 801ba16:	f04f 0a01 	mov.w	sl, #1
 801ba1a:	46d1      	mov	r9, sl
 801ba1c:	4652      	mov	r2, sl
 801ba1e:	f8cd a020 	str.w	sl, [sp, #32]
 801ba22:	69f7      	ldr	r7, [r6, #28]
 801ba24:	2100      	movs	r1, #0
 801ba26:	2004      	movs	r0, #4
 801ba28:	f100 0c14 	add.w	ip, r0, #20
 801ba2c:	4594      	cmp	ip, r2
 801ba2e:	d930      	bls.n	801ba92 <_dtoa_r+0x2aa>
 801ba30:	6079      	str	r1, [r7, #4]
 801ba32:	4630      	mov	r0, r6
 801ba34:	930d      	str	r3, [sp, #52]	; 0x34
 801ba36:	f000 fd43 	bl	801c4c0 <_Balloc>
 801ba3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ba3c:	9001      	str	r0, [sp, #4]
 801ba3e:	4602      	mov	r2, r0
 801ba40:	2800      	cmp	r0, #0
 801ba42:	d145      	bne.n	801bad0 <_dtoa_r+0x2e8>
 801ba44:	4b21      	ldr	r3, [pc, #132]	; (801bacc <_dtoa_r+0x2e4>)
 801ba46:	f240 11af 	movw	r1, #431	; 0x1af
 801ba4a:	e6e5      	b.n	801b818 <_dtoa_r+0x30>
 801ba4c:	2201      	movs	r2, #1
 801ba4e:	e7de      	b.n	801ba0e <_dtoa_r+0x226>
 801ba50:	2200      	movs	r2, #0
 801ba52:	9207      	str	r2, [sp, #28]
 801ba54:	9a08      	ldr	r2, [sp, #32]
 801ba56:	eb0b 0a02 	add.w	sl, fp, r2
 801ba5a:	f10a 0901 	add.w	r9, sl, #1
 801ba5e:	464a      	mov	r2, r9
 801ba60:	2a01      	cmp	r2, #1
 801ba62:	bfb8      	it	lt
 801ba64:	2201      	movlt	r2, #1
 801ba66:	e7dc      	b.n	801ba22 <_dtoa_r+0x23a>
 801ba68:	2201      	movs	r2, #1
 801ba6a:	e7f2      	b.n	801ba52 <_dtoa_r+0x26a>
 801ba6c:	2401      	movs	r4, #1
 801ba6e:	2200      	movs	r2, #0
 801ba70:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801ba74:	f04f 3aff 	mov.w	sl, #4294967295
 801ba78:	2100      	movs	r1, #0
 801ba7a:	46d1      	mov	r9, sl
 801ba7c:	2212      	movs	r2, #18
 801ba7e:	9108      	str	r1, [sp, #32]
 801ba80:	e7cf      	b.n	801ba22 <_dtoa_r+0x23a>
 801ba82:	2201      	movs	r2, #1
 801ba84:	9207      	str	r2, [sp, #28]
 801ba86:	e7f5      	b.n	801ba74 <_dtoa_r+0x28c>
 801ba88:	f8dd a020 	ldr.w	sl, [sp, #32]
 801ba8c:	46d1      	mov	r9, sl
 801ba8e:	4652      	mov	r2, sl
 801ba90:	e7c7      	b.n	801ba22 <_dtoa_r+0x23a>
 801ba92:	3101      	adds	r1, #1
 801ba94:	0040      	lsls	r0, r0, #1
 801ba96:	e7c7      	b.n	801ba28 <_dtoa_r+0x240>
 801ba98:	636f4361 	.word	0x636f4361
 801ba9c:	3fd287a7 	.word	0x3fd287a7
 801baa0:	8b60c8b3 	.word	0x8b60c8b3
 801baa4:	3fc68a28 	.word	0x3fc68a28
 801baa8:	509f79fb 	.word	0x509f79fb
 801baac:	3fd34413 	.word	0x3fd34413
 801bab0:	08020df6 	.word	0x08020df6
 801bab4:	08020fe3 	.word	0x08020fe3
 801bab8:	7ff00000 	.word	0x7ff00000
 801babc:	08020fdf 	.word	0x08020fdf
 801bac0:	08020fd6 	.word	0x08020fd6
 801bac4:	08020f77 	.word	0x08020f77
 801bac8:	080210d0 	.word	0x080210d0
 801bacc:	0802103b 	.word	0x0802103b
 801bad0:	69f2      	ldr	r2, [r6, #28]
 801bad2:	9901      	ldr	r1, [sp, #4]
 801bad4:	6011      	str	r1, [r2, #0]
 801bad6:	f1b9 0f0e 	cmp.w	r9, #14
 801bada:	d86c      	bhi.n	801bbb6 <_dtoa_r+0x3ce>
 801badc:	2c00      	cmp	r4, #0
 801bade:	d06a      	beq.n	801bbb6 <_dtoa_r+0x3ce>
 801bae0:	f1bb 0f00 	cmp.w	fp, #0
 801bae4:	f340 80a0 	ble.w	801bc28 <_dtoa_r+0x440>
 801bae8:	4ac1      	ldr	r2, [pc, #772]	; (801bdf0 <_dtoa_r+0x608>)
 801baea:	f00b 010f 	and.w	r1, fp, #15
 801baee:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801baf2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801baf6:	ed92 7b00 	vldr	d7, [r2]
 801bafa:	ea4f 122b 	mov.w	r2, fp, asr #4
 801bafe:	f000 8087 	beq.w	801bc10 <_dtoa_r+0x428>
 801bb02:	49bc      	ldr	r1, [pc, #752]	; (801bdf4 <_dtoa_r+0x60c>)
 801bb04:	ed91 6b08 	vldr	d6, [r1, #32]
 801bb08:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801bb0c:	ed8d 6b02 	vstr	d6, [sp, #8]
 801bb10:	f002 020f 	and.w	r2, r2, #15
 801bb14:	2103      	movs	r1, #3
 801bb16:	48b7      	ldr	r0, [pc, #732]	; (801bdf4 <_dtoa_r+0x60c>)
 801bb18:	2a00      	cmp	r2, #0
 801bb1a:	d17b      	bne.n	801bc14 <_dtoa_r+0x42c>
 801bb1c:	ed9d 6b02 	vldr	d6, [sp, #8]
 801bb20:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801bb24:	ed8d 7b02 	vstr	d7, [sp, #8]
 801bb28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bb2a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801bb2e:	2a00      	cmp	r2, #0
 801bb30:	f000 80a0 	beq.w	801bc74 <_dtoa_r+0x48c>
 801bb34:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801bb38:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801bb3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb40:	f140 8098 	bpl.w	801bc74 <_dtoa_r+0x48c>
 801bb44:	f1b9 0f00 	cmp.w	r9, #0
 801bb48:	f000 8094 	beq.w	801bc74 <_dtoa_r+0x48c>
 801bb4c:	f1ba 0f00 	cmp.w	sl, #0
 801bb50:	dd2f      	ble.n	801bbb2 <_dtoa_r+0x3ca>
 801bb52:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801bb56:	ee27 7b06 	vmul.f64	d7, d7, d6
 801bb5a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801bb5e:	f10b 32ff 	add.w	r2, fp, #4294967295
 801bb62:	3101      	adds	r1, #1
 801bb64:	4654      	mov	r4, sl
 801bb66:	ed9d 6b02 	vldr	d6, [sp, #8]
 801bb6a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801bb6e:	ee07 1a90 	vmov	s15, r1
 801bb72:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801bb76:	eea7 5b06 	vfma.f64	d5, d7, d6
 801bb7a:	ee15 7a90 	vmov	r7, s11
 801bb7e:	ec51 0b15 	vmov	r0, r1, d5
 801bb82:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 801bb86:	2c00      	cmp	r4, #0
 801bb88:	d177      	bne.n	801bc7a <_dtoa_r+0x492>
 801bb8a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801bb8e:	ee36 6b47 	vsub.f64	d6, d6, d7
 801bb92:	ec41 0b17 	vmov	d7, r0, r1
 801bb96:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801bb9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb9e:	f300 826a 	bgt.w	801c076 <_dtoa_r+0x88e>
 801bba2:	eeb1 7b47 	vneg.f64	d7, d7
 801bba6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801bbaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bbae:	f100 8260 	bmi.w	801c072 <_dtoa_r+0x88a>
 801bbb2:	ed8d 8b02 	vstr	d8, [sp, #8]
 801bbb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bbb8:	2a00      	cmp	r2, #0
 801bbba:	f2c0 811d 	blt.w	801bdf8 <_dtoa_r+0x610>
 801bbbe:	f1bb 0f0e 	cmp.w	fp, #14
 801bbc2:	f300 8119 	bgt.w	801bdf8 <_dtoa_r+0x610>
 801bbc6:	4b8a      	ldr	r3, [pc, #552]	; (801bdf0 <_dtoa_r+0x608>)
 801bbc8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801bbcc:	ed93 6b00 	vldr	d6, [r3]
 801bbd0:	9b08      	ldr	r3, [sp, #32]
 801bbd2:	2b00      	cmp	r3, #0
 801bbd4:	f280 80b7 	bge.w	801bd46 <_dtoa_r+0x55e>
 801bbd8:	f1b9 0f00 	cmp.w	r9, #0
 801bbdc:	f300 80b3 	bgt.w	801bd46 <_dtoa_r+0x55e>
 801bbe0:	f040 8246 	bne.w	801c070 <_dtoa_r+0x888>
 801bbe4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801bbe8:	ee26 6b07 	vmul.f64	d6, d6, d7
 801bbec:	ed9d 7b02 	vldr	d7, [sp, #8]
 801bbf0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801bbf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bbf8:	464c      	mov	r4, r9
 801bbfa:	464f      	mov	r7, r9
 801bbfc:	f280 821c 	bge.w	801c038 <_dtoa_r+0x850>
 801bc00:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801bc04:	2331      	movs	r3, #49	; 0x31
 801bc06:	f808 3b01 	strb.w	r3, [r8], #1
 801bc0a:	f10b 0b01 	add.w	fp, fp, #1
 801bc0e:	e218      	b.n	801c042 <_dtoa_r+0x85a>
 801bc10:	2102      	movs	r1, #2
 801bc12:	e780      	b.n	801bb16 <_dtoa_r+0x32e>
 801bc14:	07d4      	lsls	r4, r2, #31
 801bc16:	d504      	bpl.n	801bc22 <_dtoa_r+0x43a>
 801bc18:	ed90 6b00 	vldr	d6, [r0]
 801bc1c:	3101      	adds	r1, #1
 801bc1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801bc22:	1052      	asrs	r2, r2, #1
 801bc24:	3008      	adds	r0, #8
 801bc26:	e777      	b.n	801bb18 <_dtoa_r+0x330>
 801bc28:	d022      	beq.n	801bc70 <_dtoa_r+0x488>
 801bc2a:	f1cb 0200 	rsb	r2, fp, #0
 801bc2e:	4970      	ldr	r1, [pc, #448]	; (801bdf0 <_dtoa_r+0x608>)
 801bc30:	f002 000f 	and.w	r0, r2, #15
 801bc34:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801bc38:	ed91 7b00 	vldr	d7, [r1]
 801bc3c:	ee28 7b07 	vmul.f64	d7, d8, d7
 801bc40:	ed8d 7b02 	vstr	d7, [sp, #8]
 801bc44:	486b      	ldr	r0, [pc, #428]	; (801bdf4 <_dtoa_r+0x60c>)
 801bc46:	1112      	asrs	r2, r2, #4
 801bc48:	2400      	movs	r4, #0
 801bc4a:	2102      	movs	r1, #2
 801bc4c:	b92a      	cbnz	r2, 801bc5a <_dtoa_r+0x472>
 801bc4e:	2c00      	cmp	r4, #0
 801bc50:	f43f af6a 	beq.w	801bb28 <_dtoa_r+0x340>
 801bc54:	ed8d 7b02 	vstr	d7, [sp, #8]
 801bc58:	e766      	b.n	801bb28 <_dtoa_r+0x340>
 801bc5a:	07d7      	lsls	r7, r2, #31
 801bc5c:	d505      	bpl.n	801bc6a <_dtoa_r+0x482>
 801bc5e:	ed90 6b00 	vldr	d6, [r0]
 801bc62:	3101      	adds	r1, #1
 801bc64:	2401      	movs	r4, #1
 801bc66:	ee27 7b06 	vmul.f64	d7, d7, d6
 801bc6a:	1052      	asrs	r2, r2, #1
 801bc6c:	3008      	adds	r0, #8
 801bc6e:	e7ed      	b.n	801bc4c <_dtoa_r+0x464>
 801bc70:	2102      	movs	r1, #2
 801bc72:	e759      	b.n	801bb28 <_dtoa_r+0x340>
 801bc74:	465a      	mov	r2, fp
 801bc76:	464c      	mov	r4, r9
 801bc78:	e775      	b.n	801bb66 <_dtoa_r+0x37e>
 801bc7a:	ec41 0b17 	vmov	d7, r0, r1
 801bc7e:	495c      	ldr	r1, [pc, #368]	; (801bdf0 <_dtoa_r+0x608>)
 801bc80:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 801bc84:	ed11 4b02 	vldr	d4, [r1, #-8]
 801bc88:	9901      	ldr	r1, [sp, #4]
 801bc8a:	440c      	add	r4, r1
 801bc8c:	9907      	ldr	r1, [sp, #28]
 801bc8e:	b351      	cbz	r1, 801bce6 <_dtoa_r+0x4fe>
 801bc90:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801bc94:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801bc98:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801bc9c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801bca0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801bca4:	ee35 7b47 	vsub.f64	d7, d5, d7
 801bca8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801bcac:	ee14 1a90 	vmov	r1, s9
 801bcb0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801bcb4:	3130      	adds	r1, #48	; 0x30
 801bcb6:	ee36 6b45 	vsub.f64	d6, d6, d5
 801bcba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801bcbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bcc2:	f808 1b01 	strb.w	r1, [r8], #1
 801bcc6:	d439      	bmi.n	801bd3c <_dtoa_r+0x554>
 801bcc8:	ee32 5b46 	vsub.f64	d5, d2, d6
 801bccc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801bcd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bcd4:	d472      	bmi.n	801bdbc <_dtoa_r+0x5d4>
 801bcd6:	45a0      	cmp	r8, r4
 801bcd8:	f43f af6b 	beq.w	801bbb2 <_dtoa_r+0x3ca>
 801bcdc:	ee27 7b03 	vmul.f64	d7, d7, d3
 801bce0:	ee26 6b03 	vmul.f64	d6, d6, d3
 801bce4:	e7e0      	b.n	801bca8 <_dtoa_r+0x4c0>
 801bce6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801bcea:	ee27 7b04 	vmul.f64	d7, d7, d4
 801bcee:	4620      	mov	r0, r4
 801bcf0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801bcf4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801bcf8:	ee14 1a90 	vmov	r1, s9
 801bcfc:	3130      	adds	r1, #48	; 0x30
 801bcfe:	f808 1b01 	strb.w	r1, [r8], #1
 801bd02:	45a0      	cmp	r8, r4
 801bd04:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801bd08:	ee36 6b45 	vsub.f64	d6, d6, d5
 801bd0c:	d118      	bne.n	801bd40 <_dtoa_r+0x558>
 801bd0e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801bd12:	ee37 4b05 	vadd.f64	d4, d7, d5
 801bd16:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801bd1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd1e:	dc4d      	bgt.n	801bdbc <_dtoa_r+0x5d4>
 801bd20:	ee35 5b47 	vsub.f64	d5, d5, d7
 801bd24:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801bd28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd2c:	f57f af41 	bpl.w	801bbb2 <_dtoa_r+0x3ca>
 801bd30:	4680      	mov	r8, r0
 801bd32:	3801      	subs	r0, #1
 801bd34:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801bd38:	2b30      	cmp	r3, #48	; 0x30
 801bd3a:	d0f9      	beq.n	801bd30 <_dtoa_r+0x548>
 801bd3c:	4693      	mov	fp, r2
 801bd3e:	e02a      	b.n	801bd96 <_dtoa_r+0x5ae>
 801bd40:	ee26 6b03 	vmul.f64	d6, d6, d3
 801bd44:	e7d6      	b.n	801bcf4 <_dtoa_r+0x50c>
 801bd46:	ed9d 7b02 	vldr	d7, [sp, #8]
 801bd4a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801bd4e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801bd52:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801bd56:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801bd5a:	ee15 3a10 	vmov	r3, s10
 801bd5e:	3330      	adds	r3, #48	; 0x30
 801bd60:	f808 3b01 	strb.w	r3, [r8], #1
 801bd64:	9b01      	ldr	r3, [sp, #4]
 801bd66:	eba8 0303 	sub.w	r3, r8, r3
 801bd6a:	4599      	cmp	r9, r3
 801bd6c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801bd70:	eea3 7b46 	vfms.f64	d7, d3, d6
 801bd74:	d133      	bne.n	801bdde <_dtoa_r+0x5f6>
 801bd76:	ee37 7b07 	vadd.f64	d7, d7, d7
 801bd7a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801bd7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd82:	dc1a      	bgt.n	801bdba <_dtoa_r+0x5d2>
 801bd84:	eeb4 7b46 	vcmp.f64	d7, d6
 801bd88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd8c:	d103      	bne.n	801bd96 <_dtoa_r+0x5ae>
 801bd8e:	ee15 3a10 	vmov	r3, s10
 801bd92:	07d9      	lsls	r1, r3, #31
 801bd94:	d411      	bmi.n	801bdba <_dtoa_r+0x5d2>
 801bd96:	4629      	mov	r1, r5
 801bd98:	4630      	mov	r0, r6
 801bd9a:	f000 fbd1 	bl	801c540 <_Bfree>
 801bd9e:	2300      	movs	r3, #0
 801bda0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bda2:	f888 3000 	strb.w	r3, [r8]
 801bda6:	f10b 0301 	add.w	r3, fp, #1
 801bdaa:	6013      	str	r3, [r2, #0]
 801bdac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bdae:	2b00      	cmp	r3, #0
 801bdb0:	f43f ad69 	beq.w	801b886 <_dtoa_r+0x9e>
 801bdb4:	f8c3 8000 	str.w	r8, [r3]
 801bdb8:	e565      	b.n	801b886 <_dtoa_r+0x9e>
 801bdba:	465a      	mov	r2, fp
 801bdbc:	4643      	mov	r3, r8
 801bdbe:	4698      	mov	r8, r3
 801bdc0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 801bdc4:	2939      	cmp	r1, #57	; 0x39
 801bdc6:	d106      	bne.n	801bdd6 <_dtoa_r+0x5ee>
 801bdc8:	9901      	ldr	r1, [sp, #4]
 801bdca:	4299      	cmp	r1, r3
 801bdcc:	d1f7      	bne.n	801bdbe <_dtoa_r+0x5d6>
 801bdce:	9801      	ldr	r0, [sp, #4]
 801bdd0:	2130      	movs	r1, #48	; 0x30
 801bdd2:	3201      	adds	r2, #1
 801bdd4:	7001      	strb	r1, [r0, #0]
 801bdd6:	7819      	ldrb	r1, [r3, #0]
 801bdd8:	3101      	adds	r1, #1
 801bdda:	7019      	strb	r1, [r3, #0]
 801bddc:	e7ae      	b.n	801bd3c <_dtoa_r+0x554>
 801bdde:	ee27 7b04 	vmul.f64	d7, d7, d4
 801bde2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801bde6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bdea:	d1b2      	bne.n	801bd52 <_dtoa_r+0x56a>
 801bdec:	e7d3      	b.n	801bd96 <_dtoa_r+0x5ae>
 801bdee:	bf00      	nop
 801bdf0:	080210d0 	.word	0x080210d0
 801bdf4:	080210a8 	.word	0x080210a8
 801bdf8:	9907      	ldr	r1, [sp, #28]
 801bdfa:	2900      	cmp	r1, #0
 801bdfc:	f000 80d0 	beq.w	801bfa0 <_dtoa_r+0x7b8>
 801be00:	9906      	ldr	r1, [sp, #24]
 801be02:	2901      	cmp	r1, #1
 801be04:	f300 80b4 	bgt.w	801bf70 <_dtoa_r+0x788>
 801be08:	9909      	ldr	r1, [sp, #36]	; 0x24
 801be0a:	2900      	cmp	r1, #0
 801be0c:	f000 80ac 	beq.w	801bf68 <_dtoa_r+0x780>
 801be10:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801be14:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801be18:	461c      	mov	r4, r3
 801be1a:	9309      	str	r3, [sp, #36]	; 0x24
 801be1c:	9b04      	ldr	r3, [sp, #16]
 801be1e:	4413      	add	r3, r2
 801be20:	9304      	str	r3, [sp, #16]
 801be22:	9b05      	ldr	r3, [sp, #20]
 801be24:	2101      	movs	r1, #1
 801be26:	4413      	add	r3, r2
 801be28:	4630      	mov	r0, r6
 801be2a:	9305      	str	r3, [sp, #20]
 801be2c:	f000 fc3e 	bl	801c6ac <__i2b>
 801be30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801be32:	4607      	mov	r7, r0
 801be34:	f1b8 0f00 	cmp.w	r8, #0
 801be38:	d00d      	beq.n	801be56 <_dtoa_r+0x66e>
 801be3a:	9a05      	ldr	r2, [sp, #20]
 801be3c:	2a00      	cmp	r2, #0
 801be3e:	dd0a      	ble.n	801be56 <_dtoa_r+0x66e>
 801be40:	4542      	cmp	r2, r8
 801be42:	9904      	ldr	r1, [sp, #16]
 801be44:	bfa8      	it	ge
 801be46:	4642      	movge	r2, r8
 801be48:	1a89      	subs	r1, r1, r2
 801be4a:	9104      	str	r1, [sp, #16]
 801be4c:	9905      	ldr	r1, [sp, #20]
 801be4e:	eba8 0802 	sub.w	r8, r8, r2
 801be52:	1a8a      	subs	r2, r1, r2
 801be54:	9205      	str	r2, [sp, #20]
 801be56:	b303      	cbz	r3, 801be9a <_dtoa_r+0x6b2>
 801be58:	9a07      	ldr	r2, [sp, #28]
 801be5a:	2a00      	cmp	r2, #0
 801be5c:	f000 80a5 	beq.w	801bfaa <_dtoa_r+0x7c2>
 801be60:	2c00      	cmp	r4, #0
 801be62:	dd13      	ble.n	801be8c <_dtoa_r+0x6a4>
 801be64:	4639      	mov	r1, r7
 801be66:	4622      	mov	r2, r4
 801be68:	4630      	mov	r0, r6
 801be6a:	930d      	str	r3, [sp, #52]	; 0x34
 801be6c:	f000 fcde 	bl	801c82c <__pow5mult>
 801be70:	462a      	mov	r2, r5
 801be72:	4601      	mov	r1, r0
 801be74:	4607      	mov	r7, r0
 801be76:	4630      	mov	r0, r6
 801be78:	f000 fc2e 	bl	801c6d8 <__multiply>
 801be7c:	4629      	mov	r1, r5
 801be7e:	9009      	str	r0, [sp, #36]	; 0x24
 801be80:	4630      	mov	r0, r6
 801be82:	f000 fb5d 	bl	801c540 <_Bfree>
 801be86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801be88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801be8a:	4615      	mov	r5, r2
 801be8c:	1b1a      	subs	r2, r3, r4
 801be8e:	d004      	beq.n	801be9a <_dtoa_r+0x6b2>
 801be90:	4629      	mov	r1, r5
 801be92:	4630      	mov	r0, r6
 801be94:	f000 fcca 	bl	801c82c <__pow5mult>
 801be98:	4605      	mov	r5, r0
 801be9a:	2101      	movs	r1, #1
 801be9c:	4630      	mov	r0, r6
 801be9e:	f000 fc05 	bl	801c6ac <__i2b>
 801bea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bea4:	2b00      	cmp	r3, #0
 801bea6:	4604      	mov	r4, r0
 801bea8:	f340 8081 	ble.w	801bfae <_dtoa_r+0x7c6>
 801beac:	461a      	mov	r2, r3
 801beae:	4601      	mov	r1, r0
 801beb0:	4630      	mov	r0, r6
 801beb2:	f000 fcbb 	bl	801c82c <__pow5mult>
 801beb6:	9b06      	ldr	r3, [sp, #24]
 801beb8:	2b01      	cmp	r3, #1
 801beba:	4604      	mov	r4, r0
 801bebc:	dd7a      	ble.n	801bfb4 <_dtoa_r+0x7cc>
 801bebe:	2300      	movs	r3, #0
 801bec0:	9309      	str	r3, [sp, #36]	; 0x24
 801bec2:	6922      	ldr	r2, [r4, #16]
 801bec4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801bec8:	6910      	ldr	r0, [r2, #16]
 801beca:	f000 fba1 	bl	801c610 <__hi0bits>
 801bece:	f1c0 0020 	rsb	r0, r0, #32
 801bed2:	9b05      	ldr	r3, [sp, #20]
 801bed4:	4418      	add	r0, r3
 801bed6:	f010 001f 	ands.w	r0, r0, #31
 801beda:	f000 8093 	beq.w	801c004 <_dtoa_r+0x81c>
 801bede:	f1c0 0220 	rsb	r2, r0, #32
 801bee2:	2a04      	cmp	r2, #4
 801bee4:	f340 8085 	ble.w	801bff2 <_dtoa_r+0x80a>
 801bee8:	9b04      	ldr	r3, [sp, #16]
 801beea:	f1c0 001c 	rsb	r0, r0, #28
 801beee:	4403      	add	r3, r0
 801bef0:	9304      	str	r3, [sp, #16]
 801bef2:	9b05      	ldr	r3, [sp, #20]
 801bef4:	4480      	add	r8, r0
 801bef6:	4403      	add	r3, r0
 801bef8:	9305      	str	r3, [sp, #20]
 801befa:	9b04      	ldr	r3, [sp, #16]
 801befc:	2b00      	cmp	r3, #0
 801befe:	dd05      	ble.n	801bf0c <_dtoa_r+0x724>
 801bf00:	4629      	mov	r1, r5
 801bf02:	461a      	mov	r2, r3
 801bf04:	4630      	mov	r0, r6
 801bf06:	f000 fceb 	bl	801c8e0 <__lshift>
 801bf0a:	4605      	mov	r5, r0
 801bf0c:	9b05      	ldr	r3, [sp, #20]
 801bf0e:	2b00      	cmp	r3, #0
 801bf10:	dd05      	ble.n	801bf1e <_dtoa_r+0x736>
 801bf12:	4621      	mov	r1, r4
 801bf14:	461a      	mov	r2, r3
 801bf16:	4630      	mov	r0, r6
 801bf18:	f000 fce2 	bl	801c8e0 <__lshift>
 801bf1c:	4604      	mov	r4, r0
 801bf1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bf20:	2b00      	cmp	r3, #0
 801bf22:	d071      	beq.n	801c008 <_dtoa_r+0x820>
 801bf24:	4621      	mov	r1, r4
 801bf26:	4628      	mov	r0, r5
 801bf28:	f000 fd46 	bl	801c9b8 <__mcmp>
 801bf2c:	2800      	cmp	r0, #0
 801bf2e:	da6b      	bge.n	801c008 <_dtoa_r+0x820>
 801bf30:	2300      	movs	r3, #0
 801bf32:	4629      	mov	r1, r5
 801bf34:	220a      	movs	r2, #10
 801bf36:	4630      	mov	r0, r6
 801bf38:	f000 fb24 	bl	801c584 <__multadd>
 801bf3c:	9b07      	ldr	r3, [sp, #28]
 801bf3e:	f10b 3bff 	add.w	fp, fp, #4294967295
 801bf42:	4605      	mov	r5, r0
 801bf44:	2b00      	cmp	r3, #0
 801bf46:	f000 8197 	beq.w	801c278 <_dtoa_r+0xa90>
 801bf4a:	4639      	mov	r1, r7
 801bf4c:	2300      	movs	r3, #0
 801bf4e:	220a      	movs	r2, #10
 801bf50:	4630      	mov	r0, r6
 801bf52:	f000 fb17 	bl	801c584 <__multadd>
 801bf56:	f1ba 0f00 	cmp.w	sl, #0
 801bf5a:	4607      	mov	r7, r0
 801bf5c:	f300 8093 	bgt.w	801c086 <_dtoa_r+0x89e>
 801bf60:	9b06      	ldr	r3, [sp, #24]
 801bf62:	2b02      	cmp	r3, #2
 801bf64:	dc57      	bgt.n	801c016 <_dtoa_r+0x82e>
 801bf66:	e08e      	b.n	801c086 <_dtoa_r+0x89e>
 801bf68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bf6a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801bf6e:	e751      	b.n	801be14 <_dtoa_r+0x62c>
 801bf70:	f109 34ff 	add.w	r4, r9, #4294967295
 801bf74:	42a3      	cmp	r3, r4
 801bf76:	bfbf      	itttt	lt
 801bf78:	1ae2      	sublt	r2, r4, r3
 801bf7a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801bf7c:	189b      	addlt	r3, r3, r2
 801bf7e:	930a      	strlt	r3, [sp, #40]	; 0x28
 801bf80:	bfae      	itee	ge
 801bf82:	1b1c      	subge	r4, r3, r4
 801bf84:	4623      	movlt	r3, r4
 801bf86:	2400      	movlt	r4, #0
 801bf88:	f1b9 0f00 	cmp.w	r9, #0
 801bf8c:	bfb5      	itete	lt
 801bf8e:	9a04      	ldrlt	r2, [sp, #16]
 801bf90:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801bf94:	eba2 0809 	sublt.w	r8, r2, r9
 801bf98:	464a      	movge	r2, r9
 801bf9a:	bfb8      	it	lt
 801bf9c:	2200      	movlt	r2, #0
 801bf9e:	e73c      	b.n	801be1a <_dtoa_r+0x632>
 801bfa0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801bfa4:	9f07      	ldr	r7, [sp, #28]
 801bfa6:	461c      	mov	r4, r3
 801bfa8:	e744      	b.n	801be34 <_dtoa_r+0x64c>
 801bfaa:	461a      	mov	r2, r3
 801bfac:	e770      	b.n	801be90 <_dtoa_r+0x6a8>
 801bfae:	9b06      	ldr	r3, [sp, #24]
 801bfb0:	2b01      	cmp	r3, #1
 801bfb2:	dc18      	bgt.n	801bfe6 <_dtoa_r+0x7fe>
 801bfb4:	9b02      	ldr	r3, [sp, #8]
 801bfb6:	b9b3      	cbnz	r3, 801bfe6 <_dtoa_r+0x7fe>
 801bfb8:	9b03      	ldr	r3, [sp, #12]
 801bfba:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801bfbe:	b9a2      	cbnz	r2, 801bfea <_dtoa_r+0x802>
 801bfc0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801bfc4:	0d12      	lsrs	r2, r2, #20
 801bfc6:	0512      	lsls	r2, r2, #20
 801bfc8:	b18a      	cbz	r2, 801bfee <_dtoa_r+0x806>
 801bfca:	9b04      	ldr	r3, [sp, #16]
 801bfcc:	3301      	adds	r3, #1
 801bfce:	9304      	str	r3, [sp, #16]
 801bfd0:	9b05      	ldr	r3, [sp, #20]
 801bfd2:	3301      	adds	r3, #1
 801bfd4:	9305      	str	r3, [sp, #20]
 801bfd6:	2301      	movs	r3, #1
 801bfd8:	9309      	str	r3, [sp, #36]	; 0x24
 801bfda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bfdc:	2b00      	cmp	r3, #0
 801bfde:	f47f af70 	bne.w	801bec2 <_dtoa_r+0x6da>
 801bfe2:	2001      	movs	r0, #1
 801bfe4:	e775      	b.n	801bed2 <_dtoa_r+0x6ea>
 801bfe6:	2300      	movs	r3, #0
 801bfe8:	e7f6      	b.n	801bfd8 <_dtoa_r+0x7f0>
 801bfea:	9b02      	ldr	r3, [sp, #8]
 801bfec:	e7f4      	b.n	801bfd8 <_dtoa_r+0x7f0>
 801bfee:	9209      	str	r2, [sp, #36]	; 0x24
 801bff0:	e7f3      	b.n	801bfda <_dtoa_r+0x7f2>
 801bff2:	d082      	beq.n	801befa <_dtoa_r+0x712>
 801bff4:	9b04      	ldr	r3, [sp, #16]
 801bff6:	321c      	adds	r2, #28
 801bff8:	4413      	add	r3, r2
 801bffa:	9304      	str	r3, [sp, #16]
 801bffc:	9b05      	ldr	r3, [sp, #20]
 801bffe:	4490      	add	r8, r2
 801c000:	4413      	add	r3, r2
 801c002:	e779      	b.n	801bef8 <_dtoa_r+0x710>
 801c004:	4602      	mov	r2, r0
 801c006:	e7f5      	b.n	801bff4 <_dtoa_r+0x80c>
 801c008:	f1b9 0f00 	cmp.w	r9, #0
 801c00c:	dc36      	bgt.n	801c07c <_dtoa_r+0x894>
 801c00e:	9b06      	ldr	r3, [sp, #24]
 801c010:	2b02      	cmp	r3, #2
 801c012:	dd33      	ble.n	801c07c <_dtoa_r+0x894>
 801c014:	46ca      	mov	sl, r9
 801c016:	f1ba 0f00 	cmp.w	sl, #0
 801c01a:	d10d      	bne.n	801c038 <_dtoa_r+0x850>
 801c01c:	4621      	mov	r1, r4
 801c01e:	4653      	mov	r3, sl
 801c020:	2205      	movs	r2, #5
 801c022:	4630      	mov	r0, r6
 801c024:	f000 faae 	bl	801c584 <__multadd>
 801c028:	4601      	mov	r1, r0
 801c02a:	4604      	mov	r4, r0
 801c02c:	4628      	mov	r0, r5
 801c02e:	f000 fcc3 	bl	801c9b8 <__mcmp>
 801c032:	2800      	cmp	r0, #0
 801c034:	f73f ade4 	bgt.w	801bc00 <_dtoa_r+0x418>
 801c038:	9b08      	ldr	r3, [sp, #32]
 801c03a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c03e:	ea6f 0b03 	mvn.w	fp, r3
 801c042:	f04f 0900 	mov.w	r9, #0
 801c046:	4621      	mov	r1, r4
 801c048:	4630      	mov	r0, r6
 801c04a:	f000 fa79 	bl	801c540 <_Bfree>
 801c04e:	2f00      	cmp	r7, #0
 801c050:	f43f aea1 	beq.w	801bd96 <_dtoa_r+0x5ae>
 801c054:	f1b9 0f00 	cmp.w	r9, #0
 801c058:	d005      	beq.n	801c066 <_dtoa_r+0x87e>
 801c05a:	45b9      	cmp	r9, r7
 801c05c:	d003      	beq.n	801c066 <_dtoa_r+0x87e>
 801c05e:	4649      	mov	r1, r9
 801c060:	4630      	mov	r0, r6
 801c062:	f000 fa6d 	bl	801c540 <_Bfree>
 801c066:	4639      	mov	r1, r7
 801c068:	4630      	mov	r0, r6
 801c06a:	f000 fa69 	bl	801c540 <_Bfree>
 801c06e:	e692      	b.n	801bd96 <_dtoa_r+0x5ae>
 801c070:	2400      	movs	r4, #0
 801c072:	4627      	mov	r7, r4
 801c074:	e7e0      	b.n	801c038 <_dtoa_r+0x850>
 801c076:	4693      	mov	fp, r2
 801c078:	4627      	mov	r7, r4
 801c07a:	e5c1      	b.n	801bc00 <_dtoa_r+0x418>
 801c07c:	9b07      	ldr	r3, [sp, #28]
 801c07e:	46ca      	mov	sl, r9
 801c080:	2b00      	cmp	r3, #0
 801c082:	f000 8100 	beq.w	801c286 <_dtoa_r+0xa9e>
 801c086:	f1b8 0f00 	cmp.w	r8, #0
 801c08a:	dd05      	ble.n	801c098 <_dtoa_r+0x8b0>
 801c08c:	4639      	mov	r1, r7
 801c08e:	4642      	mov	r2, r8
 801c090:	4630      	mov	r0, r6
 801c092:	f000 fc25 	bl	801c8e0 <__lshift>
 801c096:	4607      	mov	r7, r0
 801c098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c09a:	2b00      	cmp	r3, #0
 801c09c:	d05d      	beq.n	801c15a <_dtoa_r+0x972>
 801c09e:	6879      	ldr	r1, [r7, #4]
 801c0a0:	4630      	mov	r0, r6
 801c0a2:	f000 fa0d 	bl	801c4c0 <_Balloc>
 801c0a6:	4680      	mov	r8, r0
 801c0a8:	b928      	cbnz	r0, 801c0b6 <_dtoa_r+0x8ce>
 801c0aa:	4b82      	ldr	r3, [pc, #520]	; (801c2b4 <_dtoa_r+0xacc>)
 801c0ac:	4602      	mov	r2, r0
 801c0ae:	f240 21ef 	movw	r1, #751	; 0x2ef
 801c0b2:	f7ff bbb1 	b.w	801b818 <_dtoa_r+0x30>
 801c0b6:	693a      	ldr	r2, [r7, #16]
 801c0b8:	3202      	adds	r2, #2
 801c0ba:	0092      	lsls	r2, r2, #2
 801c0bc:	f107 010c 	add.w	r1, r7, #12
 801c0c0:	300c      	adds	r0, #12
 801c0c2:	f7ff fada 	bl	801b67a <memcpy>
 801c0c6:	2201      	movs	r2, #1
 801c0c8:	4641      	mov	r1, r8
 801c0ca:	4630      	mov	r0, r6
 801c0cc:	f000 fc08 	bl	801c8e0 <__lshift>
 801c0d0:	9b01      	ldr	r3, [sp, #4]
 801c0d2:	3301      	adds	r3, #1
 801c0d4:	9304      	str	r3, [sp, #16]
 801c0d6:	9b01      	ldr	r3, [sp, #4]
 801c0d8:	4453      	add	r3, sl
 801c0da:	9308      	str	r3, [sp, #32]
 801c0dc:	9b02      	ldr	r3, [sp, #8]
 801c0de:	f003 0301 	and.w	r3, r3, #1
 801c0e2:	46b9      	mov	r9, r7
 801c0e4:	9307      	str	r3, [sp, #28]
 801c0e6:	4607      	mov	r7, r0
 801c0e8:	9b04      	ldr	r3, [sp, #16]
 801c0ea:	4621      	mov	r1, r4
 801c0ec:	3b01      	subs	r3, #1
 801c0ee:	4628      	mov	r0, r5
 801c0f0:	9302      	str	r3, [sp, #8]
 801c0f2:	f7ff faef 	bl	801b6d4 <quorem>
 801c0f6:	4603      	mov	r3, r0
 801c0f8:	3330      	adds	r3, #48	; 0x30
 801c0fa:	9005      	str	r0, [sp, #20]
 801c0fc:	4649      	mov	r1, r9
 801c0fe:	4628      	mov	r0, r5
 801c100:	9309      	str	r3, [sp, #36]	; 0x24
 801c102:	f000 fc59 	bl	801c9b8 <__mcmp>
 801c106:	463a      	mov	r2, r7
 801c108:	4682      	mov	sl, r0
 801c10a:	4621      	mov	r1, r4
 801c10c:	4630      	mov	r0, r6
 801c10e:	f000 fc6f 	bl	801c9f0 <__mdiff>
 801c112:	68c2      	ldr	r2, [r0, #12]
 801c114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c116:	4680      	mov	r8, r0
 801c118:	bb0a      	cbnz	r2, 801c15e <_dtoa_r+0x976>
 801c11a:	4601      	mov	r1, r0
 801c11c:	4628      	mov	r0, r5
 801c11e:	f000 fc4b 	bl	801c9b8 <__mcmp>
 801c122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c124:	4602      	mov	r2, r0
 801c126:	4641      	mov	r1, r8
 801c128:	4630      	mov	r0, r6
 801c12a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801c12e:	f000 fa07 	bl	801c540 <_Bfree>
 801c132:	9b06      	ldr	r3, [sp, #24]
 801c134:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c136:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801c13a:	ea43 0102 	orr.w	r1, r3, r2
 801c13e:	9b07      	ldr	r3, [sp, #28]
 801c140:	4319      	orrs	r1, r3
 801c142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c144:	d10d      	bne.n	801c162 <_dtoa_r+0x97a>
 801c146:	2b39      	cmp	r3, #57	; 0x39
 801c148:	d029      	beq.n	801c19e <_dtoa_r+0x9b6>
 801c14a:	f1ba 0f00 	cmp.w	sl, #0
 801c14e:	dd01      	ble.n	801c154 <_dtoa_r+0x96c>
 801c150:	9b05      	ldr	r3, [sp, #20]
 801c152:	3331      	adds	r3, #49	; 0x31
 801c154:	9a02      	ldr	r2, [sp, #8]
 801c156:	7013      	strb	r3, [r2, #0]
 801c158:	e775      	b.n	801c046 <_dtoa_r+0x85e>
 801c15a:	4638      	mov	r0, r7
 801c15c:	e7b8      	b.n	801c0d0 <_dtoa_r+0x8e8>
 801c15e:	2201      	movs	r2, #1
 801c160:	e7e1      	b.n	801c126 <_dtoa_r+0x93e>
 801c162:	f1ba 0f00 	cmp.w	sl, #0
 801c166:	db06      	blt.n	801c176 <_dtoa_r+0x98e>
 801c168:	9906      	ldr	r1, [sp, #24]
 801c16a:	ea41 0a0a 	orr.w	sl, r1, sl
 801c16e:	9907      	ldr	r1, [sp, #28]
 801c170:	ea5a 0a01 	orrs.w	sl, sl, r1
 801c174:	d120      	bne.n	801c1b8 <_dtoa_r+0x9d0>
 801c176:	2a00      	cmp	r2, #0
 801c178:	ddec      	ble.n	801c154 <_dtoa_r+0x96c>
 801c17a:	4629      	mov	r1, r5
 801c17c:	2201      	movs	r2, #1
 801c17e:	4630      	mov	r0, r6
 801c180:	9304      	str	r3, [sp, #16]
 801c182:	f000 fbad 	bl	801c8e0 <__lshift>
 801c186:	4621      	mov	r1, r4
 801c188:	4605      	mov	r5, r0
 801c18a:	f000 fc15 	bl	801c9b8 <__mcmp>
 801c18e:	2800      	cmp	r0, #0
 801c190:	9b04      	ldr	r3, [sp, #16]
 801c192:	dc02      	bgt.n	801c19a <_dtoa_r+0x9b2>
 801c194:	d1de      	bne.n	801c154 <_dtoa_r+0x96c>
 801c196:	07da      	lsls	r2, r3, #31
 801c198:	d5dc      	bpl.n	801c154 <_dtoa_r+0x96c>
 801c19a:	2b39      	cmp	r3, #57	; 0x39
 801c19c:	d1d8      	bne.n	801c150 <_dtoa_r+0x968>
 801c19e:	9a02      	ldr	r2, [sp, #8]
 801c1a0:	2339      	movs	r3, #57	; 0x39
 801c1a2:	7013      	strb	r3, [r2, #0]
 801c1a4:	4643      	mov	r3, r8
 801c1a6:	4698      	mov	r8, r3
 801c1a8:	3b01      	subs	r3, #1
 801c1aa:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801c1ae:	2a39      	cmp	r2, #57	; 0x39
 801c1b0:	d051      	beq.n	801c256 <_dtoa_r+0xa6e>
 801c1b2:	3201      	adds	r2, #1
 801c1b4:	701a      	strb	r2, [r3, #0]
 801c1b6:	e746      	b.n	801c046 <_dtoa_r+0x85e>
 801c1b8:	2a00      	cmp	r2, #0
 801c1ba:	dd03      	ble.n	801c1c4 <_dtoa_r+0x9dc>
 801c1bc:	2b39      	cmp	r3, #57	; 0x39
 801c1be:	d0ee      	beq.n	801c19e <_dtoa_r+0x9b6>
 801c1c0:	3301      	adds	r3, #1
 801c1c2:	e7c7      	b.n	801c154 <_dtoa_r+0x96c>
 801c1c4:	9a04      	ldr	r2, [sp, #16]
 801c1c6:	9908      	ldr	r1, [sp, #32]
 801c1c8:	f802 3c01 	strb.w	r3, [r2, #-1]
 801c1cc:	428a      	cmp	r2, r1
 801c1ce:	d02b      	beq.n	801c228 <_dtoa_r+0xa40>
 801c1d0:	4629      	mov	r1, r5
 801c1d2:	2300      	movs	r3, #0
 801c1d4:	220a      	movs	r2, #10
 801c1d6:	4630      	mov	r0, r6
 801c1d8:	f000 f9d4 	bl	801c584 <__multadd>
 801c1dc:	45b9      	cmp	r9, r7
 801c1de:	4605      	mov	r5, r0
 801c1e0:	f04f 0300 	mov.w	r3, #0
 801c1e4:	f04f 020a 	mov.w	r2, #10
 801c1e8:	4649      	mov	r1, r9
 801c1ea:	4630      	mov	r0, r6
 801c1ec:	d107      	bne.n	801c1fe <_dtoa_r+0xa16>
 801c1ee:	f000 f9c9 	bl	801c584 <__multadd>
 801c1f2:	4681      	mov	r9, r0
 801c1f4:	4607      	mov	r7, r0
 801c1f6:	9b04      	ldr	r3, [sp, #16]
 801c1f8:	3301      	adds	r3, #1
 801c1fa:	9304      	str	r3, [sp, #16]
 801c1fc:	e774      	b.n	801c0e8 <_dtoa_r+0x900>
 801c1fe:	f000 f9c1 	bl	801c584 <__multadd>
 801c202:	4639      	mov	r1, r7
 801c204:	4681      	mov	r9, r0
 801c206:	2300      	movs	r3, #0
 801c208:	220a      	movs	r2, #10
 801c20a:	4630      	mov	r0, r6
 801c20c:	f000 f9ba 	bl	801c584 <__multadd>
 801c210:	4607      	mov	r7, r0
 801c212:	e7f0      	b.n	801c1f6 <_dtoa_r+0xa0e>
 801c214:	f1ba 0f00 	cmp.w	sl, #0
 801c218:	9a01      	ldr	r2, [sp, #4]
 801c21a:	bfcc      	ite	gt
 801c21c:	46d0      	movgt	r8, sl
 801c21e:	f04f 0801 	movle.w	r8, #1
 801c222:	4490      	add	r8, r2
 801c224:	f04f 0900 	mov.w	r9, #0
 801c228:	4629      	mov	r1, r5
 801c22a:	2201      	movs	r2, #1
 801c22c:	4630      	mov	r0, r6
 801c22e:	9302      	str	r3, [sp, #8]
 801c230:	f000 fb56 	bl	801c8e0 <__lshift>
 801c234:	4621      	mov	r1, r4
 801c236:	4605      	mov	r5, r0
 801c238:	f000 fbbe 	bl	801c9b8 <__mcmp>
 801c23c:	2800      	cmp	r0, #0
 801c23e:	dcb1      	bgt.n	801c1a4 <_dtoa_r+0x9bc>
 801c240:	d102      	bne.n	801c248 <_dtoa_r+0xa60>
 801c242:	9b02      	ldr	r3, [sp, #8]
 801c244:	07db      	lsls	r3, r3, #31
 801c246:	d4ad      	bmi.n	801c1a4 <_dtoa_r+0x9bc>
 801c248:	4643      	mov	r3, r8
 801c24a:	4698      	mov	r8, r3
 801c24c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c250:	2a30      	cmp	r2, #48	; 0x30
 801c252:	d0fa      	beq.n	801c24a <_dtoa_r+0xa62>
 801c254:	e6f7      	b.n	801c046 <_dtoa_r+0x85e>
 801c256:	9a01      	ldr	r2, [sp, #4]
 801c258:	429a      	cmp	r2, r3
 801c25a:	d1a4      	bne.n	801c1a6 <_dtoa_r+0x9be>
 801c25c:	f10b 0b01 	add.w	fp, fp, #1
 801c260:	2331      	movs	r3, #49	; 0x31
 801c262:	e778      	b.n	801c156 <_dtoa_r+0x96e>
 801c264:	4b14      	ldr	r3, [pc, #80]	; (801c2b8 <_dtoa_r+0xad0>)
 801c266:	f7ff bb2a 	b.w	801b8be <_dtoa_r+0xd6>
 801c26a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c26c:	2b00      	cmp	r3, #0
 801c26e:	f47f ab05 	bne.w	801b87c <_dtoa_r+0x94>
 801c272:	4b12      	ldr	r3, [pc, #72]	; (801c2bc <_dtoa_r+0xad4>)
 801c274:	f7ff bb23 	b.w	801b8be <_dtoa_r+0xd6>
 801c278:	f1ba 0f00 	cmp.w	sl, #0
 801c27c:	dc03      	bgt.n	801c286 <_dtoa_r+0xa9e>
 801c27e:	9b06      	ldr	r3, [sp, #24]
 801c280:	2b02      	cmp	r3, #2
 801c282:	f73f aec8 	bgt.w	801c016 <_dtoa_r+0x82e>
 801c286:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c28a:	4621      	mov	r1, r4
 801c28c:	4628      	mov	r0, r5
 801c28e:	f7ff fa21 	bl	801b6d4 <quorem>
 801c292:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801c296:	f808 3b01 	strb.w	r3, [r8], #1
 801c29a:	9a01      	ldr	r2, [sp, #4]
 801c29c:	eba8 0202 	sub.w	r2, r8, r2
 801c2a0:	4592      	cmp	sl, r2
 801c2a2:	ddb7      	ble.n	801c214 <_dtoa_r+0xa2c>
 801c2a4:	4629      	mov	r1, r5
 801c2a6:	2300      	movs	r3, #0
 801c2a8:	220a      	movs	r2, #10
 801c2aa:	4630      	mov	r0, r6
 801c2ac:	f000 f96a 	bl	801c584 <__multadd>
 801c2b0:	4605      	mov	r5, r0
 801c2b2:	e7ea      	b.n	801c28a <_dtoa_r+0xaa2>
 801c2b4:	0802103b 	.word	0x0802103b
 801c2b8:	08020f76 	.word	0x08020f76
 801c2bc:	08020fd6 	.word	0x08020fd6

0801c2c0 <_free_r>:
 801c2c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c2c2:	2900      	cmp	r1, #0
 801c2c4:	d044      	beq.n	801c350 <_free_r+0x90>
 801c2c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c2ca:	9001      	str	r0, [sp, #4]
 801c2cc:	2b00      	cmp	r3, #0
 801c2ce:	f1a1 0404 	sub.w	r4, r1, #4
 801c2d2:	bfb8      	it	lt
 801c2d4:	18e4      	addlt	r4, r4, r3
 801c2d6:	f000 f8e7 	bl	801c4a8 <__malloc_lock>
 801c2da:	4a1e      	ldr	r2, [pc, #120]	; (801c354 <_free_r+0x94>)
 801c2dc:	9801      	ldr	r0, [sp, #4]
 801c2de:	6813      	ldr	r3, [r2, #0]
 801c2e0:	b933      	cbnz	r3, 801c2f0 <_free_r+0x30>
 801c2e2:	6063      	str	r3, [r4, #4]
 801c2e4:	6014      	str	r4, [r2, #0]
 801c2e6:	b003      	add	sp, #12
 801c2e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c2ec:	f000 b8e2 	b.w	801c4b4 <__malloc_unlock>
 801c2f0:	42a3      	cmp	r3, r4
 801c2f2:	d908      	bls.n	801c306 <_free_r+0x46>
 801c2f4:	6825      	ldr	r5, [r4, #0]
 801c2f6:	1961      	adds	r1, r4, r5
 801c2f8:	428b      	cmp	r3, r1
 801c2fa:	bf01      	itttt	eq
 801c2fc:	6819      	ldreq	r1, [r3, #0]
 801c2fe:	685b      	ldreq	r3, [r3, #4]
 801c300:	1949      	addeq	r1, r1, r5
 801c302:	6021      	streq	r1, [r4, #0]
 801c304:	e7ed      	b.n	801c2e2 <_free_r+0x22>
 801c306:	461a      	mov	r2, r3
 801c308:	685b      	ldr	r3, [r3, #4]
 801c30a:	b10b      	cbz	r3, 801c310 <_free_r+0x50>
 801c30c:	42a3      	cmp	r3, r4
 801c30e:	d9fa      	bls.n	801c306 <_free_r+0x46>
 801c310:	6811      	ldr	r1, [r2, #0]
 801c312:	1855      	adds	r5, r2, r1
 801c314:	42a5      	cmp	r5, r4
 801c316:	d10b      	bne.n	801c330 <_free_r+0x70>
 801c318:	6824      	ldr	r4, [r4, #0]
 801c31a:	4421      	add	r1, r4
 801c31c:	1854      	adds	r4, r2, r1
 801c31e:	42a3      	cmp	r3, r4
 801c320:	6011      	str	r1, [r2, #0]
 801c322:	d1e0      	bne.n	801c2e6 <_free_r+0x26>
 801c324:	681c      	ldr	r4, [r3, #0]
 801c326:	685b      	ldr	r3, [r3, #4]
 801c328:	6053      	str	r3, [r2, #4]
 801c32a:	440c      	add	r4, r1
 801c32c:	6014      	str	r4, [r2, #0]
 801c32e:	e7da      	b.n	801c2e6 <_free_r+0x26>
 801c330:	d902      	bls.n	801c338 <_free_r+0x78>
 801c332:	230c      	movs	r3, #12
 801c334:	6003      	str	r3, [r0, #0]
 801c336:	e7d6      	b.n	801c2e6 <_free_r+0x26>
 801c338:	6825      	ldr	r5, [r4, #0]
 801c33a:	1961      	adds	r1, r4, r5
 801c33c:	428b      	cmp	r3, r1
 801c33e:	bf04      	itt	eq
 801c340:	6819      	ldreq	r1, [r3, #0]
 801c342:	685b      	ldreq	r3, [r3, #4]
 801c344:	6063      	str	r3, [r4, #4]
 801c346:	bf04      	itt	eq
 801c348:	1949      	addeq	r1, r1, r5
 801c34a:	6021      	streq	r1, [r4, #0]
 801c34c:	6054      	str	r4, [r2, #4]
 801c34e:	e7ca      	b.n	801c2e6 <_free_r+0x26>
 801c350:	b003      	add	sp, #12
 801c352:	bd30      	pop	{r4, r5, pc}
 801c354:	200072fc 	.word	0x200072fc

0801c358 <malloc>:
 801c358:	4b02      	ldr	r3, [pc, #8]	; (801c364 <malloc+0xc>)
 801c35a:	4601      	mov	r1, r0
 801c35c:	6818      	ldr	r0, [r3, #0]
 801c35e:	f000 b823 	b.w	801c3a8 <_malloc_r>
 801c362:	bf00      	nop
 801c364:	200000b8 	.word	0x200000b8

0801c368 <sbrk_aligned>:
 801c368:	b570      	push	{r4, r5, r6, lr}
 801c36a:	4e0e      	ldr	r6, [pc, #56]	; (801c3a4 <sbrk_aligned+0x3c>)
 801c36c:	460c      	mov	r4, r1
 801c36e:	6831      	ldr	r1, [r6, #0]
 801c370:	4605      	mov	r5, r0
 801c372:	b911      	cbnz	r1, 801c37a <sbrk_aligned+0x12>
 801c374:	f001 f800 	bl	801d378 <_sbrk_r>
 801c378:	6030      	str	r0, [r6, #0]
 801c37a:	4621      	mov	r1, r4
 801c37c:	4628      	mov	r0, r5
 801c37e:	f000 fffb 	bl	801d378 <_sbrk_r>
 801c382:	1c43      	adds	r3, r0, #1
 801c384:	d00a      	beq.n	801c39c <sbrk_aligned+0x34>
 801c386:	1cc4      	adds	r4, r0, #3
 801c388:	f024 0403 	bic.w	r4, r4, #3
 801c38c:	42a0      	cmp	r0, r4
 801c38e:	d007      	beq.n	801c3a0 <sbrk_aligned+0x38>
 801c390:	1a21      	subs	r1, r4, r0
 801c392:	4628      	mov	r0, r5
 801c394:	f000 fff0 	bl	801d378 <_sbrk_r>
 801c398:	3001      	adds	r0, #1
 801c39a:	d101      	bne.n	801c3a0 <sbrk_aligned+0x38>
 801c39c:	f04f 34ff 	mov.w	r4, #4294967295
 801c3a0:	4620      	mov	r0, r4
 801c3a2:	bd70      	pop	{r4, r5, r6, pc}
 801c3a4:	20007300 	.word	0x20007300

0801c3a8 <_malloc_r>:
 801c3a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c3ac:	1ccd      	adds	r5, r1, #3
 801c3ae:	f025 0503 	bic.w	r5, r5, #3
 801c3b2:	3508      	adds	r5, #8
 801c3b4:	2d0c      	cmp	r5, #12
 801c3b6:	bf38      	it	cc
 801c3b8:	250c      	movcc	r5, #12
 801c3ba:	2d00      	cmp	r5, #0
 801c3bc:	4607      	mov	r7, r0
 801c3be:	db01      	blt.n	801c3c4 <_malloc_r+0x1c>
 801c3c0:	42a9      	cmp	r1, r5
 801c3c2:	d905      	bls.n	801c3d0 <_malloc_r+0x28>
 801c3c4:	230c      	movs	r3, #12
 801c3c6:	603b      	str	r3, [r7, #0]
 801c3c8:	2600      	movs	r6, #0
 801c3ca:	4630      	mov	r0, r6
 801c3cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c3d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801c4a4 <_malloc_r+0xfc>
 801c3d4:	f000 f868 	bl	801c4a8 <__malloc_lock>
 801c3d8:	f8d8 3000 	ldr.w	r3, [r8]
 801c3dc:	461c      	mov	r4, r3
 801c3de:	bb5c      	cbnz	r4, 801c438 <_malloc_r+0x90>
 801c3e0:	4629      	mov	r1, r5
 801c3e2:	4638      	mov	r0, r7
 801c3e4:	f7ff ffc0 	bl	801c368 <sbrk_aligned>
 801c3e8:	1c43      	adds	r3, r0, #1
 801c3ea:	4604      	mov	r4, r0
 801c3ec:	d155      	bne.n	801c49a <_malloc_r+0xf2>
 801c3ee:	f8d8 4000 	ldr.w	r4, [r8]
 801c3f2:	4626      	mov	r6, r4
 801c3f4:	2e00      	cmp	r6, #0
 801c3f6:	d145      	bne.n	801c484 <_malloc_r+0xdc>
 801c3f8:	2c00      	cmp	r4, #0
 801c3fa:	d048      	beq.n	801c48e <_malloc_r+0xe6>
 801c3fc:	6823      	ldr	r3, [r4, #0]
 801c3fe:	4631      	mov	r1, r6
 801c400:	4638      	mov	r0, r7
 801c402:	eb04 0903 	add.w	r9, r4, r3
 801c406:	f000 ffb7 	bl	801d378 <_sbrk_r>
 801c40a:	4581      	cmp	r9, r0
 801c40c:	d13f      	bne.n	801c48e <_malloc_r+0xe6>
 801c40e:	6821      	ldr	r1, [r4, #0]
 801c410:	1a6d      	subs	r5, r5, r1
 801c412:	4629      	mov	r1, r5
 801c414:	4638      	mov	r0, r7
 801c416:	f7ff ffa7 	bl	801c368 <sbrk_aligned>
 801c41a:	3001      	adds	r0, #1
 801c41c:	d037      	beq.n	801c48e <_malloc_r+0xe6>
 801c41e:	6823      	ldr	r3, [r4, #0]
 801c420:	442b      	add	r3, r5
 801c422:	6023      	str	r3, [r4, #0]
 801c424:	f8d8 3000 	ldr.w	r3, [r8]
 801c428:	2b00      	cmp	r3, #0
 801c42a:	d038      	beq.n	801c49e <_malloc_r+0xf6>
 801c42c:	685a      	ldr	r2, [r3, #4]
 801c42e:	42a2      	cmp	r2, r4
 801c430:	d12b      	bne.n	801c48a <_malloc_r+0xe2>
 801c432:	2200      	movs	r2, #0
 801c434:	605a      	str	r2, [r3, #4]
 801c436:	e00f      	b.n	801c458 <_malloc_r+0xb0>
 801c438:	6822      	ldr	r2, [r4, #0]
 801c43a:	1b52      	subs	r2, r2, r5
 801c43c:	d41f      	bmi.n	801c47e <_malloc_r+0xd6>
 801c43e:	2a0b      	cmp	r2, #11
 801c440:	d917      	bls.n	801c472 <_malloc_r+0xca>
 801c442:	1961      	adds	r1, r4, r5
 801c444:	42a3      	cmp	r3, r4
 801c446:	6025      	str	r5, [r4, #0]
 801c448:	bf18      	it	ne
 801c44a:	6059      	strne	r1, [r3, #4]
 801c44c:	6863      	ldr	r3, [r4, #4]
 801c44e:	bf08      	it	eq
 801c450:	f8c8 1000 	streq.w	r1, [r8]
 801c454:	5162      	str	r2, [r4, r5]
 801c456:	604b      	str	r3, [r1, #4]
 801c458:	4638      	mov	r0, r7
 801c45a:	f104 060b 	add.w	r6, r4, #11
 801c45e:	f000 f829 	bl	801c4b4 <__malloc_unlock>
 801c462:	f026 0607 	bic.w	r6, r6, #7
 801c466:	1d23      	adds	r3, r4, #4
 801c468:	1af2      	subs	r2, r6, r3
 801c46a:	d0ae      	beq.n	801c3ca <_malloc_r+0x22>
 801c46c:	1b9b      	subs	r3, r3, r6
 801c46e:	50a3      	str	r3, [r4, r2]
 801c470:	e7ab      	b.n	801c3ca <_malloc_r+0x22>
 801c472:	42a3      	cmp	r3, r4
 801c474:	6862      	ldr	r2, [r4, #4]
 801c476:	d1dd      	bne.n	801c434 <_malloc_r+0x8c>
 801c478:	f8c8 2000 	str.w	r2, [r8]
 801c47c:	e7ec      	b.n	801c458 <_malloc_r+0xb0>
 801c47e:	4623      	mov	r3, r4
 801c480:	6864      	ldr	r4, [r4, #4]
 801c482:	e7ac      	b.n	801c3de <_malloc_r+0x36>
 801c484:	4634      	mov	r4, r6
 801c486:	6876      	ldr	r6, [r6, #4]
 801c488:	e7b4      	b.n	801c3f4 <_malloc_r+0x4c>
 801c48a:	4613      	mov	r3, r2
 801c48c:	e7cc      	b.n	801c428 <_malloc_r+0x80>
 801c48e:	230c      	movs	r3, #12
 801c490:	603b      	str	r3, [r7, #0]
 801c492:	4638      	mov	r0, r7
 801c494:	f000 f80e 	bl	801c4b4 <__malloc_unlock>
 801c498:	e797      	b.n	801c3ca <_malloc_r+0x22>
 801c49a:	6025      	str	r5, [r4, #0]
 801c49c:	e7dc      	b.n	801c458 <_malloc_r+0xb0>
 801c49e:	605b      	str	r3, [r3, #4]
 801c4a0:	deff      	udf	#255	; 0xff
 801c4a2:	bf00      	nop
 801c4a4:	200072fc 	.word	0x200072fc

0801c4a8 <__malloc_lock>:
 801c4a8:	4801      	ldr	r0, [pc, #4]	; (801c4b0 <__malloc_lock+0x8>)
 801c4aa:	f7ff b8e4 	b.w	801b676 <__retarget_lock_acquire_recursive>
 801c4ae:	bf00      	nop
 801c4b0:	200072f8 	.word	0x200072f8

0801c4b4 <__malloc_unlock>:
 801c4b4:	4801      	ldr	r0, [pc, #4]	; (801c4bc <__malloc_unlock+0x8>)
 801c4b6:	f7ff b8df 	b.w	801b678 <__retarget_lock_release_recursive>
 801c4ba:	bf00      	nop
 801c4bc:	200072f8 	.word	0x200072f8

0801c4c0 <_Balloc>:
 801c4c0:	b570      	push	{r4, r5, r6, lr}
 801c4c2:	69c6      	ldr	r6, [r0, #28]
 801c4c4:	4604      	mov	r4, r0
 801c4c6:	460d      	mov	r5, r1
 801c4c8:	b976      	cbnz	r6, 801c4e8 <_Balloc+0x28>
 801c4ca:	2010      	movs	r0, #16
 801c4cc:	f7ff ff44 	bl	801c358 <malloc>
 801c4d0:	4602      	mov	r2, r0
 801c4d2:	61e0      	str	r0, [r4, #28]
 801c4d4:	b920      	cbnz	r0, 801c4e0 <_Balloc+0x20>
 801c4d6:	4b18      	ldr	r3, [pc, #96]	; (801c538 <_Balloc+0x78>)
 801c4d8:	4818      	ldr	r0, [pc, #96]	; (801c53c <_Balloc+0x7c>)
 801c4da:	216b      	movs	r1, #107	; 0x6b
 801c4dc:	f7ff f8dc 	bl	801b698 <__assert_func>
 801c4e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c4e4:	6006      	str	r6, [r0, #0]
 801c4e6:	60c6      	str	r6, [r0, #12]
 801c4e8:	69e6      	ldr	r6, [r4, #28]
 801c4ea:	68f3      	ldr	r3, [r6, #12]
 801c4ec:	b183      	cbz	r3, 801c510 <_Balloc+0x50>
 801c4ee:	69e3      	ldr	r3, [r4, #28]
 801c4f0:	68db      	ldr	r3, [r3, #12]
 801c4f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c4f6:	b9b8      	cbnz	r0, 801c528 <_Balloc+0x68>
 801c4f8:	2101      	movs	r1, #1
 801c4fa:	fa01 f605 	lsl.w	r6, r1, r5
 801c4fe:	1d72      	adds	r2, r6, #5
 801c500:	0092      	lsls	r2, r2, #2
 801c502:	4620      	mov	r0, r4
 801c504:	f000 ff4f 	bl	801d3a6 <_calloc_r>
 801c508:	b160      	cbz	r0, 801c524 <_Balloc+0x64>
 801c50a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c50e:	e00e      	b.n	801c52e <_Balloc+0x6e>
 801c510:	2221      	movs	r2, #33	; 0x21
 801c512:	2104      	movs	r1, #4
 801c514:	4620      	mov	r0, r4
 801c516:	f000 ff46 	bl	801d3a6 <_calloc_r>
 801c51a:	69e3      	ldr	r3, [r4, #28]
 801c51c:	60f0      	str	r0, [r6, #12]
 801c51e:	68db      	ldr	r3, [r3, #12]
 801c520:	2b00      	cmp	r3, #0
 801c522:	d1e4      	bne.n	801c4ee <_Balloc+0x2e>
 801c524:	2000      	movs	r0, #0
 801c526:	bd70      	pop	{r4, r5, r6, pc}
 801c528:	6802      	ldr	r2, [r0, #0]
 801c52a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c52e:	2300      	movs	r3, #0
 801c530:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c534:	e7f7      	b.n	801c526 <_Balloc+0x66>
 801c536:	bf00      	nop
 801c538:	08020df6 	.word	0x08020df6
 801c53c:	0802104c 	.word	0x0802104c

0801c540 <_Bfree>:
 801c540:	b570      	push	{r4, r5, r6, lr}
 801c542:	69c6      	ldr	r6, [r0, #28]
 801c544:	4605      	mov	r5, r0
 801c546:	460c      	mov	r4, r1
 801c548:	b976      	cbnz	r6, 801c568 <_Bfree+0x28>
 801c54a:	2010      	movs	r0, #16
 801c54c:	f7ff ff04 	bl	801c358 <malloc>
 801c550:	4602      	mov	r2, r0
 801c552:	61e8      	str	r0, [r5, #28]
 801c554:	b920      	cbnz	r0, 801c560 <_Bfree+0x20>
 801c556:	4b09      	ldr	r3, [pc, #36]	; (801c57c <_Bfree+0x3c>)
 801c558:	4809      	ldr	r0, [pc, #36]	; (801c580 <_Bfree+0x40>)
 801c55a:	218f      	movs	r1, #143	; 0x8f
 801c55c:	f7ff f89c 	bl	801b698 <__assert_func>
 801c560:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c564:	6006      	str	r6, [r0, #0]
 801c566:	60c6      	str	r6, [r0, #12]
 801c568:	b13c      	cbz	r4, 801c57a <_Bfree+0x3a>
 801c56a:	69eb      	ldr	r3, [r5, #28]
 801c56c:	6862      	ldr	r2, [r4, #4]
 801c56e:	68db      	ldr	r3, [r3, #12]
 801c570:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c574:	6021      	str	r1, [r4, #0]
 801c576:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801c57a:	bd70      	pop	{r4, r5, r6, pc}
 801c57c:	08020df6 	.word	0x08020df6
 801c580:	0802104c 	.word	0x0802104c

0801c584 <__multadd>:
 801c584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c588:	690d      	ldr	r5, [r1, #16]
 801c58a:	4607      	mov	r7, r0
 801c58c:	460c      	mov	r4, r1
 801c58e:	461e      	mov	r6, r3
 801c590:	f101 0c14 	add.w	ip, r1, #20
 801c594:	2000      	movs	r0, #0
 801c596:	f8dc 3000 	ldr.w	r3, [ip]
 801c59a:	b299      	uxth	r1, r3
 801c59c:	fb02 6101 	mla	r1, r2, r1, r6
 801c5a0:	0c1e      	lsrs	r6, r3, #16
 801c5a2:	0c0b      	lsrs	r3, r1, #16
 801c5a4:	fb02 3306 	mla	r3, r2, r6, r3
 801c5a8:	b289      	uxth	r1, r1
 801c5aa:	3001      	adds	r0, #1
 801c5ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801c5b0:	4285      	cmp	r5, r0
 801c5b2:	f84c 1b04 	str.w	r1, [ip], #4
 801c5b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801c5ba:	dcec      	bgt.n	801c596 <__multadd+0x12>
 801c5bc:	b30e      	cbz	r6, 801c602 <__multadd+0x7e>
 801c5be:	68a3      	ldr	r3, [r4, #8]
 801c5c0:	42ab      	cmp	r3, r5
 801c5c2:	dc19      	bgt.n	801c5f8 <__multadd+0x74>
 801c5c4:	6861      	ldr	r1, [r4, #4]
 801c5c6:	4638      	mov	r0, r7
 801c5c8:	3101      	adds	r1, #1
 801c5ca:	f7ff ff79 	bl	801c4c0 <_Balloc>
 801c5ce:	4680      	mov	r8, r0
 801c5d0:	b928      	cbnz	r0, 801c5de <__multadd+0x5a>
 801c5d2:	4602      	mov	r2, r0
 801c5d4:	4b0c      	ldr	r3, [pc, #48]	; (801c608 <__multadd+0x84>)
 801c5d6:	480d      	ldr	r0, [pc, #52]	; (801c60c <__multadd+0x88>)
 801c5d8:	21ba      	movs	r1, #186	; 0xba
 801c5da:	f7ff f85d 	bl	801b698 <__assert_func>
 801c5de:	6922      	ldr	r2, [r4, #16]
 801c5e0:	3202      	adds	r2, #2
 801c5e2:	f104 010c 	add.w	r1, r4, #12
 801c5e6:	0092      	lsls	r2, r2, #2
 801c5e8:	300c      	adds	r0, #12
 801c5ea:	f7ff f846 	bl	801b67a <memcpy>
 801c5ee:	4621      	mov	r1, r4
 801c5f0:	4638      	mov	r0, r7
 801c5f2:	f7ff ffa5 	bl	801c540 <_Bfree>
 801c5f6:	4644      	mov	r4, r8
 801c5f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801c5fc:	3501      	adds	r5, #1
 801c5fe:	615e      	str	r6, [r3, #20]
 801c600:	6125      	str	r5, [r4, #16]
 801c602:	4620      	mov	r0, r4
 801c604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c608:	0802103b 	.word	0x0802103b
 801c60c:	0802104c 	.word	0x0802104c

0801c610 <__hi0bits>:
 801c610:	0c03      	lsrs	r3, r0, #16
 801c612:	041b      	lsls	r3, r3, #16
 801c614:	b9d3      	cbnz	r3, 801c64c <__hi0bits+0x3c>
 801c616:	0400      	lsls	r0, r0, #16
 801c618:	2310      	movs	r3, #16
 801c61a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801c61e:	bf04      	itt	eq
 801c620:	0200      	lsleq	r0, r0, #8
 801c622:	3308      	addeq	r3, #8
 801c624:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801c628:	bf04      	itt	eq
 801c62a:	0100      	lsleq	r0, r0, #4
 801c62c:	3304      	addeq	r3, #4
 801c62e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801c632:	bf04      	itt	eq
 801c634:	0080      	lsleq	r0, r0, #2
 801c636:	3302      	addeq	r3, #2
 801c638:	2800      	cmp	r0, #0
 801c63a:	db05      	blt.n	801c648 <__hi0bits+0x38>
 801c63c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801c640:	f103 0301 	add.w	r3, r3, #1
 801c644:	bf08      	it	eq
 801c646:	2320      	moveq	r3, #32
 801c648:	4618      	mov	r0, r3
 801c64a:	4770      	bx	lr
 801c64c:	2300      	movs	r3, #0
 801c64e:	e7e4      	b.n	801c61a <__hi0bits+0xa>

0801c650 <__lo0bits>:
 801c650:	6803      	ldr	r3, [r0, #0]
 801c652:	f013 0207 	ands.w	r2, r3, #7
 801c656:	d00c      	beq.n	801c672 <__lo0bits+0x22>
 801c658:	07d9      	lsls	r1, r3, #31
 801c65a:	d422      	bmi.n	801c6a2 <__lo0bits+0x52>
 801c65c:	079a      	lsls	r2, r3, #30
 801c65e:	bf49      	itett	mi
 801c660:	085b      	lsrmi	r3, r3, #1
 801c662:	089b      	lsrpl	r3, r3, #2
 801c664:	6003      	strmi	r3, [r0, #0]
 801c666:	2201      	movmi	r2, #1
 801c668:	bf5c      	itt	pl
 801c66a:	6003      	strpl	r3, [r0, #0]
 801c66c:	2202      	movpl	r2, #2
 801c66e:	4610      	mov	r0, r2
 801c670:	4770      	bx	lr
 801c672:	b299      	uxth	r1, r3
 801c674:	b909      	cbnz	r1, 801c67a <__lo0bits+0x2a>
 801c676:	0c1b      	lsrs	r3, r3, #16
 801c678:	2210      	movs	r2, #16
 801c67a:	b2d9      	uxtb	r1, r3
 801c67c:	b909      	cbnz	r1, 801c682 <__lo0bits+0x32>
 801c67e:	3208      	adds	r2, #8
 801c680:	0a1b      	lsrs	r3, r3, #8
 801c682:	0719      	lsls	r1, r3, #28
 801c684:	bf04      	itt	eq
 801c686:	091b      	lsreq	r3, r3, #4
 801c688:	3204      	addeq	r2, #4
 801c68a:	0799      	lsls	r1, r3, #30
 801c68c:	bf04      	itt	eq
 801c68e:	089b      	lsreq	r3, r3, #2
 801c690:	3202      	addeq	r2, #2
 801c692:	07d9      	lsls	r1, r3, #31
 801c694:	d403      	bmi.n	801c69e <__lo0bits+0x4e>
 801c696:	085b      	lsrs	r3, r3, #1
 801c698:	f102 0201 	add.w	r2, r2, #1
 801c69c:	d003      	beq.n	801c6a6 <__lo0bits+0x56>
 801c69e:	6003      	str	r3, [r0, #0]
 801c6a0:	e7e5      	b.n	801c66e <__lo0bits+0x1e>
 801c6a2:	2200      	movs	r2, #0
 801c6a4:	e7e3      	b.n	801c66e <__lo0bits+0x1e>
 801c6a6:	2220      	movs	r2, #32
 801c6a8:	e7e1      	b.n	801c66e <__lo0bits+0x1e>
	...

0801c6ac <__i2b>:
 801c6ac:	b510      	push	{r4, lr}
 801c6ae:	460c      	mov	r4, r1
 801c6b0:	2101      	movs	r1, #1
 801c6b2:	f7ff ff05 	bl	801c4c0 <_Balloc>
 801c6b6:	4602      	mov	r2, r0
 801c6b8:	b928      	cbnz	r0, 801c6c6 <__i2b+0x1a>
 801c6ba:	4b05      	ldr	r3, [pc, #20]	; (801c6d0 <__i2b+0x24>)
 801c6bc:	4805      	ldr	r0, [pc, #20]	; (801c6d4 <__i2b+0x28>)
 801c6be:	f240 1145 	movw	r1, #325	; 0x145
 801c6c2:	f7fe ffe9 	bl	801b698 <__assert_func>
 801c6c6:	2301      	movs	r3, #1
 801c6c8:	6144      	str	r4, [r0, #20]
 801c6ca:	6103      	str	r3, [r0, #16]
 801c6cc:	bd10      	pop	{r4, pc}
 801c6ce:	bf00      	nop
 801c6d0:	0802103b 	.word	0x0802103b
 801c6d4:	0802104c 	.word	0x0802104c

0801c6d8 <__multiply>:
 801c6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6dc:	4691      	mov	r9, r2
 801c6de:	690a      	ldr	r2, [r1, #16]
 801c6e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801c6e4:	429a      	cmp	r2, r3
 801c6e6:	bfb8      	it	lt
 801c6e8:	460b      	movlt	r3, r1
 801c6ea:	460c      	mov	r4, r1
 801c6ec:	bfbc      	itt	lt
 801c6ee:	464c      	movlt	r4, r9
 801c6f0:	4699      	movlt	r9, r3
 801c6f2:	6927      	ldr	r7, [r4, #16]
 801c6f4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801c6f8:	68a3      	ldr	r3, [r4, #8]
 801c6fa:	6861      	ldr	r1, [r4, #4]
 801c6fc:	eb07 060a 	add.w	r6, r7, sl
 801c700:	42b3      	cmp	r3, r6
 801c702:	b085      	sub	sp, #20
 801c704:	bfb8      	it	lt
 801c706:	3101      	addlt	r1, #1
 801c708:	f7ff feda 	bl	801c4c0 <_Balloc>
 801c70c:	b930      	cbnz	r0, 801c71c <__multiply+0x44>
 801c70e:	4602      	mov	r2, r0
 801c710:	4b44      	ldr	r3, [pc, #272]	; (801c824 <__multiply+0x14c>)
 801c712:	4845      	ldr	r0, [pc, #276]	; (801c828 <__multiply+0x150>)
 801c714:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801c718:	f7fe ffbe 	bl	801b698 <__assert_func>
 801c71c:	f100 0514 	add.w	r5, r0, #20
 801c720:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801c724:	462b      	mov	r3, r5
 801c726:	2200      	movs	r2, #0
 801c728:	4543      	cmp	r3, r8
 801c72a:	d321      	bcc.n	801c770 <__multiply+0x98>
 801c72c:	f104 0314 	add.w	r3, r4, #20
 801c730:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801c734:	f109 0314 	add.w	r3, r9, #20
 801c738:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801c73c:	9202      	str	r2, [sp, #8]
 801c73e:	1b3a      	subs	r2, r7, r4
 801c740:	3a15      	subs	r2, #21
 801c742:	f022 0203 	bic.w	r2, r2, #3
 801c746:	3204      	adds	r2, #4
 801c748:	f104 0115 	add.w	r1, r4, #21
 801c74c:	428f      	cmp	r7, r1
 801c74e:	bf38      	it	cc
 801c750:	2204      	movcc	r2, #4
 801c752:	9201      	str	r2, [sp, #4]
 801c754:	9a02      	ldr	r2, [sp, #8]
 801c756:	9303      	str	r3, [sp, #12]
 801c758:	429a      	cmp	r2, r3
 801c75a:	d80c      	bhi.n	801c776 <__multiply+0x9e>
 801c75c:	2e00      	cmp	r6, #0
 801c75e:	dd03      	ble.n	801c768 <__multiply+0x90>
 801c760:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801c764:	2b00      	cmp	r3, #0
 801c766:	d05b      	beq.n	801c820 <__multiply+0x148>
 801c768:	6106      	str	r6, [r0, #16]
 801c76a:	b005      	add	sp, #20
 801c76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c770:	f843 2b04 	str.w	r2, [r3], #4
 801c774:	e7d8      	b.n	801c728 <__multiply+0x50>
 801c776:	f8b3 a000 	ldrh.w	sl, [r3]
 801c77a:	f1ba 0f00 	cmp.w	sl, #0
 801c77e:	d024      	beq.n	801c7ca <__multiply+0xf2>
 801c780:	f104 0e14 	add.w	lr, r4, #20
 801c784:	46a9      	mov	r9, r5
 801c786:	f04f 0c00 	mov.w	ip, #0
 801c78a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801c78e:	f8d9 1000 	ldr.w	r1, [r9]
 801c792:	fa1f fb82 	uxth.w	fp, r2
 801c796:	b289      	uxth	r1, r1
 801c798:	fb0a 110b 	mla	r1, sl, fp, r1
 801c79c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801c7a0:	f8d9 2000 	ldr.w	r2, [r9]
 801c7a4:	4461      	add	r1, ip
 801c7a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801c7aa:	fb0a c20b 	mla	r2, sl, fp, ip
 801c7ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801c7b2:	b289      	uxth	r1, r1
 801c7b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801c7b8:	4577      	cmp	r7, lr
 801c7ba:	f849 1b04 	str.w	r1, [r9], #4
 801c7be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801c7c2:	d8e2      	bhi.n	801c78a <__multiply+0xb2>
 801c7c4:	9a01      	ldr	r2, [sp, #4]
 801c7c6:	f845 c002 	str.w	ip, [r5, r2]
 801c7ca:	9a03      	ldr	r2, [sp, #12]
 801c7cc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801c7d0:	3304      	adds	r3, #4
 801c7d2:	f1b9 0f00 	cmp.w	r9, #0
 801c7d6:	d021      	beq.n	801c81c <__multiply+0x144>
 801c7d8:	6829      	ldr	r1, [r5, #0]
 801c7da:	f104 0c14 	add.w	ip, r4, #20
 801c7de:	46ae      	mov	lr, r5
 801c7e0:	f04f 0a00 	mov.w	sl, #0
 801c7e4:	f8bc b000 	ldrh.w	fp, [ip]
 801c7e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801c7ec:	fb09 220b 	mla	r2, r9, fp, r2
 801c7f0:	4452      	add	r2, sl
 801c7f2:	b289      	uxth	r1, r1
 801c7f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801c7f8:	f84e 1b04 	str.w	r1, [lr], #4
 801c7fc:	f85c 1b04 	ldr.w	r1, [ip], #4
 801c800:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801c804:	f8be 1000 	ldrh.w	r1, [lr]
 801c808:	fb09 110a 	mla	r1, r9, sl, r1
 801c80c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801c810:	4567      	cmp	r7, ip
 801c812:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801c816:	d8e5      	bhi.n	801c7e4 <__multiply+0x10c>
 801c818:	9a01      	ldr	r2, [sp, #4]
 801c81a:	50a9      	str	r1, [r5, r2]
 801c81c:	3504      	adds	r5, #4
 801c81e:	e799      	b.n	801c754 <__multiply+0x7c>
 801c820:	3e01      	subs	r6, #1
 801c822:	e79b      	b.n	801c75c <__multiply+0x84>
 801c824:	0802103b 	.word	0x0802103b
 801c828:	0802104c 	.word	0x0802104c

0801c82c <__pow5mult>:
 801c82c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c830:	4615      	mov	r5, r2
 801c832:	f012 0203 	ands.w	r2, r2, #3
 801c836:	4606      	mov	r6, r0
 801c838:	460f      	mov	r7, r1
 801c83a:	d007      	beq.n	801c84c <__pow5mult+0x20>
 801c83c:	4c25      	ldr	r4, [pc, #148]	; (801c8d4 <__pow5mult+0xa8>)
 801c83e:	3a01      	subs	r2, #1
 801c840:	2300      	movs	r3, #0
 801c842:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c846:	f7ff fe9d 	bl	801c584 <__multadd>
 801c84a:	4607      	mov	r7, r0
 801c84c:	10ad      	asrs	r5, r5, #2
 801c84e:	d03d      	beq.n	801c8cc <__pow5mult+0xa0>
 801c850:	69f4      	ldr	r4, [r6, #28]
 801c852:	b97c      	cbnz	r4, 801c874 <__pow5mult+0x48>
 801c854:	2010      	movs	r0, #16
 801c856:	f7ff fd7f 	bl	801c358 <malloc>
 801c85a:	4602      	mov	r2, r0
 801c85c:	61f0      	str	r0, [r6, #28]
 801c85e:	b928      	cbnz	r0, 801c86c <__pow5mult+0x40>
 801c860:	4b1d      	ldr	r3, [pc, #116]	; (801c8d8 <__pow5mult+0xac>)
 801c862:	481e      	ldr	r0, [pc, #120]	; (801c8dc <__pow5mult+0xb0>)
 801c864:	f240 11b3 	movw	r1, #435	; 0x1b3
 801c868:	f7fe ff16 	bl	801b698 <__assert_func>
 801c86c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c870:	6004      	str	r4, [r0, #0]
 801c872:	60c4      	str	r4, [r0, #12]
 801c874:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801c878:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801c87c:	b94c      	cbnz	r4, 801c892 <__pow5mult+0x66>
 801c87e:	f240 2171 	movw	r1, #625	; 0x271
 801c882:	4630      	mov	r0, r6
 801c884:	f7ff ff12 	bl	801c6ac <__i2b>
 801c888:	2300      	movs	r3, #0
 801c88a:	f8c8 0008 	str.w	r0, [r8, #8]
 801c88e:	4604      	mov	r4, r0
 801c890:	6003      	str	r3, [r0, #0]
 801c892:	f04f 0900 	mov.w	r9, #0
 801c896:	07eb      	lsls	r3, r5, #31
 801c898:	d50a      	bpl.n	801c8b0 <__pow5mult+0x84>
 801c89a:	4639      	mov	r1, r7
 801c89c:	4622      	mov	r2, r4
 801c89e:	4630      	mov	r0, r6
 801c8a0:	f7ff ff1a 	bl	801c6d8 <__multiply>
 801c8a4:	4639      	mov	r1, r7
 801c8a6:	4680      	mov	r8, r0
 801c8a8:	4630      	mov	r0, r6
 801c8aa:	f7ff fe49 	bl	801c540 <_Bfree>
 801c8ae:	4647      	mov	r7, r8
 801c8b0:	106d      	asrs	r5, r5, #1
 801c8b2:	d00b      	beq.n	801c8cc <__pow5mult+0xa0>
 801c8b4:	6820      	ldr	r0, [r4, #0]
 801c8b6:	b938      	cbnz	r0, 801c8c8 <__pow5mult+0x9c>
 801c8b8:	4622      	mov	r2, r4
 801c8ba:	4621      	mov	r1, r4
 801c8bc:	4630      	mov	r0, r6
 801c8be:	f7ff ff0b 	bl	801c6d8 <__multiply>
 801c8c2:	6020      	str	r0, [r4, #0]
 801c8c4:	f8c0 9000 	str.w	r9, [r0]
 801c8c8:	4604      	mov	r4, r0
 801c8ca:	e7e4      	b.n	801c896 <__pow5mult+0x6a>
 801c8cc:	4638      	mov	r0, r7
 801c8ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c8d2:	bf00      	nop
 801c8d4:	08021198 	.word	0x08021198
 801c8d8:	08020df6 	.word	0x08020df6
 801c8dc:	0802104c 	.word	0x0802104c

0801c8e0 <__lshift>:
 801c8e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c8e4:	460c      	mov	r4, r1
 801c8e6:	6849      	ldr	r1, [r1, #4]
 801c8e8:	6923      	ldr	r3, [r4, #16]
 801c8ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801c8ee:	68a3      	ldr	r3, [r4, #8]
 801c8f0:	4607      	mov	r7, r0
 801c8f2:	4691      	mov	r9, r2
 801c8f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801c8f8:	f108 0601 	add.w	r6, r8, #1
 801c8fc:	42b3      	cmp	r3, r6
 801c8fe:	db0b      	blt.n	801c918 <__lshift+0x38>
 801c900:	4638      	mov	r0, r7
 801c902:	f7ff fddd 	bl	801c4c0 <_Balloc>
 801c906:	4605      	mov	r5, r0
 801c908:	b948      	cbnz	r0, 801c91e <__lshift+0x3e>
 801c90a:	4602      	mov	r2, r0
 801c90c:	4b28      	ldr	r3, [pc, #160]	; (801c9b0 <__lshift+0xd0>)
 801c90e:	4829      	ldr	r0, [pc, #164]	; (801c9b4 <__lshift+0xd4>)
 801c910:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801c914:	f7fe fec0 	bl	801b698 <__assert_func>
 801c918:	3101      	adds	r1, #1
 801c91a:	005b      	lsls	r3, r3, #1
 801c91c:	e7ee      	b.n	801c8fc <__lshift+0x1c>
 801c91e:	2300      	movs	r3, #0
 801c920:	f100 0114 	add.w	r1, r0, #20
 801c924:	f100 0210 	add.w	r2, r0, #16
 801c928:	4618      	mov	r0, r3
 801c92a:	4553      	cmp	r3, sl
 801c92c:	db33      	blt.n	801c996 <__lshift+0xb6>
 801c92e:	6920      	ldr	r0, [r4, #16]
 801c930:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801c934:	f104 0314 	add.w	r3, r4, #20
 801c938:	f019 091f 	ands.w	r9, r9, #31
 801c93c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801c940:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801c944:	d02b      	beq.n	801c99e <__lshift+0xbe>
 801c946:	f1c9 0e20 	rsb	lr, r9, #32
 801c94a:	468a      	mov	sl, r1
 801c94c:	2200      	movs	r2, #0
 801c94e:	6818      	ldr	r0, [r3, #0]
 801c950:	fa00 f009 	lsl.w	r0, r0, r9
 801c954:	4310      	orrs	r0, r2
 801c956:	f84a 0b04 	str.w	r0, [sl], #4
 801c95a:	f853 2b04 	ldr.w	r2, [r3], #4
 801c95e:	459c      	cmp	ip, r3
 801c960:	fa22 f20e 	lsr.w	r2, r2, lr
 801c964:	d8f3      	bhi.n	801c94e <__lshift+0x6e>
 801c966:	ebac 0304 	sub.w	r3, ip, r4
 801c96a:	3b15      	subs	r3, #21
 801c96c:	f023 0303 	bic.w	r3, r3, #3
 801c970:	3304      	adds	r3, #4
 801c972:	f104 0015 	add.w	r0, r4, #21
 801c976:	4584      	cmp	ip, r0
 801c978:	bf38      	it	cc
 801c97a:	2304      	movcc	r3, #4
 801c97c:	50ca      	str	r2, [r1, r3]
 801c97e:	b10a      	cbz	r2, 801c984 <__lshift+0xa4>
 801c980:	f108 0602 	add.w	r6, r8, #2
 801c984:	3e01      	subs	r6, #1
 801c986:	4638      	mov	r0, r7
 801c988:	612e      	str	r6, [r5, #16]
 801c98a:	4621      	mov	r1, r4
 801c98c:	f7ff fdd8 	bl	801c540 <_Bfree>
 801c990:	4628      	mov	r0, r5
 801c992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c996:	f842 0f04 	str.w	r0, [r2, #4]!
 801c99a:	3301      	adds	r3, #1
 801c99c:	e7c5      	b.n	801c92a <__lshift+0x4a>
 801c99e:	3904      	subs	r1, #4
 801c9a0:	f853 2b04 	ldr.w	r2, [r3], #4
 801c9a4:	f841 2f04 	str.w	r2, [r1, #4]!
 801c9a8:	459c      	cmp	ip, r3
 801c9aa:	d8f9      	bhi.n	801c9a0 <__lshift+0xc0>
 801c9ac:	e7ea      	b.n	801c984 <__lshift+0xa4>
 801c9ae:	bf00      	nop
 801c9b0:	0802103b 	.word	0x0802103b
 801c9b4:	0802104c 	.word	0x0802104c

0801c9b8 <__mcmp>:
 801c9b8:	b530      	push	{r4, r5, lr}
 801c9ba:	6902      	ldr	r2, [r0, #16]
 801c9bc:	690c      	ldr	r4, [r1, #16]
 801c9be:	1b12      	subs	r2, r2, r4
 801c9c0:	d10e      	bne.n	801c9e0 <__mcmp+0x28>
 801c9c2:	f100 0314 	add.w	r3, r0, #20
 801c9c6:	3114      	adds	r1, #20
 801c9c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801c9cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801c9d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801c9d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801c9d8:	42a5      	cmp	r5, r4
 801c9da:	d003      	beq.n	801c9e4 <__mcmp+0x2c>
 801c9dc:	d305      	bcc.n	801c9ea <__mcmp+0x32>
 801c9de:	2201      	movs	r2, #1
 801c9e0:	4610      	mov	r0, r2
 801c9e2:	bd30      	pop	{r4, r5, pc}
 801c9e4:	4283      	cmp	r3, r0
 801c9e6:	d3f3      	bcc.n	801c9d0 <__mcmp+0x18>
 801c9e8:	e7fa      	b.n	801c9e0 <__mcmp+0x28>
 801c9ea:	f04f 32ff 	mov.w	r2, #4294967295
 801c9ee:	e7f7      	b.n	801c9e0 <__mcmp+0x28>

0801c9f0 <__mdiff>:
 801c9f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9f4:	460c      	mov	r4, r1
 801c9f6:	4606      	mov	r6, r0
 801c9f8:	4611      	mov	r1, r2
 801c9fa:	4620      	mov	r0, r4
 801c9fc:	4690      	mov	r8, r2
 801c9fe:	f7ff ffdb 	bl	801c9b8 <__mcmp>
 801ca02:	1e05      	subs	r5, r0, #0
 801ca04:	d110      	bne.n	801ca28 <__mdiff+0x38>
 801ca06:	4629      	mov	r1, r5
 801ca08:	4630      	mov	r0, r6
 801ca0a:	f7ff fd59 	bl	801c4c0 <_Balloc>
 801ca0e:	b930      	cbnz	r0, 801ca1e <__mdiff+0x2e>
 801ca10:	4b3a      	ldr	r3, [pc, #232]	; (801cafc <__mdiff+0x10c>)
 801ca12:	4602      	mov	r2, r0
 801ca14:	f240 2137 	movw	r1, #567	; 0x237
 801ca18:	4839      	ldr	r0, [pc, #228]	; (801cb00 <__mdiff+0x110>)
 801ca1a:	f7fe fe3d 	bl	801b698 <__assert_func>
 801ca1e:	2301      	movs	r3, #1
 801ca20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801ca24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca28:	bfa4      	itt	ge
 801ca2a:	4643      	movge	r3, r8
 801ca2c:	46a0      	movge	r8, r4
 801ca2e:	4630      	mov	r0, r6
 801ca30:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801ca34:	bfa6      	itte	ge
 801ca36:	461c      	movge	r4, r3
 801ca38:	2500      	movge	r5, #0
 801ca3a:	2501      	movlt	r5, #1
 801ca3c:	f7ff fd40 	bl	801c4c0 <_Balloc>
 801ca40:	b920      	cbnz	r0, 801ca4c <__mdiff+0x5c>
 801ca42:	4b2e      	ldr	r3, [pc, #184]	; (801cafc <__mdiff+0x10c>)
 801ca44:	4602      	mov	r2, r0
 801ca46:	f240 2145 	movw	r1, #581	; 0x245
 801ca4a:	e7e5      	b.n	801ca18 <__mdiff+0x28>
 801ca4c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801ca50:	6926      	ldr	r6, [r4, #16]
 801ca52:	60c5      	str	r5, [r0, #12]
 801ca54:	f104 0914 	add.w	r9, r4, #20
 801ca58:	f108 0514 	add.w	r5, r8, #20
 801ca5c:	f100 0e14 	add.w	lr, r0, #20
 801ca60:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801ca64:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801ca68:	f108 0210 	add.w	r2, r8, #16
 801ca6c:	46f2      	mov	sl, lr
 801ca6e:	2100      	movs	r1, #0
 801ca70:	f859 3b04 	ldr.w	r3, [r9], #4
 801ca74:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801ca78:	fa11 f88b 	uxtah	r8, r1, fp
 801ca7c:	b299      	uxth	r1, r3
 801ca7e:	0c1b      	lsrs	r3, r3, #16
 801ca80:	eba8 0801 	sub.w	r8, r8, r1
 801ca84:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801ca88:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801ca8c:	fa1f f888 	uxth.w	r8, r8
 801ca90:	1419      	asrs	r1, r3, #16
 801ca92:	454e      	cmp	r6, r9
 801ca94:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801ca98:	f84a 3b04 	str.w	r3, [sl], #4
 801ca9c:	d8e8      	bhi.n	801ca70 <__mdiff+0x80>
 801ca9e:	1b33      	subs	r3, r6, r4
 801caa0:	3b15      	subs	r3, #21
 801caa2:	f023 0303 	bic.w	r3, r3, #3
 801caa6:	3304      	adds	r3, #4
 801caa8:	3415      	adds	r4, #21
 801caaa:	42a6      	cmp	r6, r4
 801caac:	bf38      	it	cc
 801caae:	2304      	movcc	r3, #4
 801cab0:	441d      	add	r5, r3
 801cab2:	4473      	add	r3, lr
 801cab4:	469e      	mov	lr, r3
 801cab6:	462e      	mov	r6, r5
 801cab8:	4566      	cmp	r6, ip
 801caba:	d30e      	bcc.n	801cada <__mdiff+0xea>
 801cabc:	f10c 0203 	add.w	r2, ip, #3
 801cac0:	1b52      	subs	r2, r2, r5
 801cac2:	f022 0203 	bic.w	r2, r2, #3
 801cac6:	3d03      	subs	r5, #3
 801cac8:	45ac      	cmp	ip, r5
 801caca:	bf38      	it	cc
 801cacc:	2200      	movcc	r2, #0
 801cace:	4413      	add	r3, r2
 801cad0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801cad4:	b17a      	cbz	r2, 801caf6 <__mdiff+0x106>
 801cad6:	6107      	str	r7, [r0, #16]
 801cad8:	e7a4      	b.n	801ca24 <__mdiff+0x34>
 801cada:	f856 8b04 	ldr.w	r8, [r6], #4
 801cade:	fa11 f288 	uxtah	r2, r1, r8
 801cae2:	1414      	asrs	r4, r2, #16
 801cae4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801cae8:	b292      	uxth	r2, r2
 801caea:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801caee:	f84e 2b04 	str.w	r2, [lr], #4
 801caf2:	1421      	asrs	r1, r4, #16
 801caf4:	e7e0      	b.n	801cab8 <__mdiff+0xc8>
 801caf6:	3f01      	subs	r7, #1
 801caf8:	e7ea      	b.n	801cad0 <__mdiff+0xe0>
 801cafa:	bf00      	nop
 801cafc:	0802103b 	.word	0x0802103b
 801cb00:	0802104c 	.word	0x0802104c

0801cb04 <__d2b>:
 801cb04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801cb08:	460f      	mov	r7, r1
 801cb0a:	2101      	movs	r1, #1
 801cb0c:	ec59 8b10 	vmov	r8, r9, d0
 801cb10:	4616      	mov	r6, r2
 801cb12:	f7ff fcd5 	bl	801c4c0 <_Balloc>
 801cb16:	4604      	mov	r4, r0
 801cb18:	b930      	cbnz	r0, 801cb28 <__d2b+0x24>
 801cb1a:	4602      	mov	r2, r0
 801cb1c:	4b24      	ldr	r3, [pc, #144]	; (801cbb0 <__d2b+0xac>)
 801cb1e:	4825      	ldr	r0, [pc, #148]	; (801cbb4 <__d2b+0xb0>)
 801cb20:	f240 310f 	movw	r1, #783	; 0x30f
 801cb24:	f7fe fdb8 	bl	801b698 <__assert_func>
 801cb28:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801cb2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801cb30:	bb2d      	cbnz	r5, 801cb7e <__d2b+0x7a>
 801cb32:	9301      	str	r3, [sp, #4]
 801cb34:	f1b8 0300 	subs.w	r3, r8, #0
 801cb38:	d026      	beq.n	801cb88 <__d2b+0x84>
 801cb3a:	4668      	mov	r0, sp
 801cb3c:	9300      	str	r3, [sp, #0]
 801cb3e:	f7ff fd87 	bl	801c650 <__lo0bits>
 801cb42:	e9dd 1200 	ldrd	r1, r2, [sp]
 801cb46:	b1e8      	cbz	r0, 801cb84 <__d2b+0x80>
 801cb48:	f1c0 0320 	rsb	r3, r0, #32
 801cb4c:	fa02 f303 	lsl.w	r3, r2, r3
 801cb50:	430b      	orrs	r3, r1
 801cb52:	40c2      	lsrs	r2, r0
 801cb54:	6163      	str	r3, [r4, #20]
 801cb56:	9201      	str	r2, [sp, #4]
 801cb58:	9b01      	ldr	r3, [sp, #4]
 801cb5a:	61a3      	str	r3, [r4, #24]
 801cb5c:	2b00      	cmp	r3, #0
 801cb5e:	bf14      	ite	ne
 801cb60:	2202      	movne	r2, #2
 801cb62:	2201      	moveq	r2, #1
 801cb64:	6122      	str	r2, [r4, #16]
 801cb66:	b1bd      	cbz	r5, 801cb98 <__d2b+0x94>
 801cb68:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801cb6c:	4405      	add	r5, r0
 801cb6e:	603d      	str	r5, [r7, #0]
 801cb70:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801cb74:	6030      	str	r0, [r6, #0]
 801cb76:	4620      	mov	r0, r4
 801cb78:	b003      	add	sp, #12
 801cb7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cb7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cb82:	e7d6      	b.n	801cb32 <__d2b+0x2e>
 801cb84:	6161      	str	r1, [r4, #20]
 801cb86:	e7e7      	b.n	801cb58 <__d2b+0x54>
 801cb88:	a801      	add	r0, sp, #4
 801cb8a:	f7ff fd61 	bl	801c650 <__lo0bits>
 801cb8e:	9b01      	ldr	r3, [sp, #4]
 801cb90:	6163      	str	r3, [r4, #20]
 801cb92:	3020      	adds	r0, #32
 801cb94:	2201      	movs	r2, #1
 801cb96:	e7e5      	b.n	801cb64 <__d2b+0x60>
 801cb98:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801cb9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801cba0:	6038      	str	r0, [r7, #0]
 801cba2:	6918      	ldr	r0, [r3, #16]
 801cba4:	f7ff fd34 	bl	801c610 <__hi0bits>
 801cba8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801cbac:	e7e2      	b.n	801cb74 <__d2b+0x70>
 801cbae:	bf00      	nop
 801cbb0:	0802103b 	.word	0x0802103b
 801cbb4:	0802104c 	.word	0x0802104c

0801cbb8 <__ssputs_r>:
 801cbb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cbbc:	688e      	ldr	r6, [r1, #8]
 801cbbe:	461f      	mov	r7, r3
 801cbc0:	42be      	cmp	r6, r7
 801cbc2:	680b      	ldr	r3, [r1, #0]
 801cbc4:	4682      	mov	sl, r0
 801cbc6:	460c      	mov	r4, r1
 801cbc8:	4690      	mov	r8, r2
 801cbca:	d82c      	bhi.n	801cc26 <__ssputs_r+0x6e>
 801cbcc:	898a      	ldrh	r2, [r1, #12]
 801cbce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801cbd2:	d026      	beq.n	801cc22 <__ssputs_r+0x6a>
 801cbd4:	6965      	ldr	r5, [r4, #20]
 801cbd6:	6909      	ldr	r1, [r1, #16]
 801cbd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cbdc:	eba3 0901 	sub.w	r9, r3, r1
 801cbe0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801cbe4:	1c7b      	adds	r3, r7, #1
 801cbe6:	444b      	add	r3, r9
 801cbe8:	106d      	asrs	r5, r5, #1
 801cbea:	429d      	cmp	r5, r3
 801cbec:	bf38      	it	cc
 801cbee:	461d      	movcc	r5, r3
 801cbf0:	0553      	lsls	r3, r2, #21
 801cbf2:	d527      	bpl.n	801cc44 <__ssputs_r+0x8c>
 801cbf4:	4629      	mov	r1, r5
 801cbf6:	f7ff fbd7 	bl	801c3a8 <_malloc_r>
 801cbfa:	4606      	mov	r6, r0
 801cbfc:	b360      	cbz	r0, 801cc58 <__ssputs_r+0xa0>
 801cbfe:	6921      	ldr	r1, [r4, #16]
 801cc00:	464a      	mov	r2, r9
 801cc02:	f7fe fd3a 	bl	801b67a <memcpy>
 801cc06:	89a3      	ldrh	r3, [r4, #12]
 801cc08:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801cc0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cc10:	81a3      	strh	r3, [r4, #12]
 801cc12:	6126      	str	r6, [r4, #16]
 801cc14:	6165      	str	r5, [r4, #20]
 801cc16:	444e      	add	r6, r9
 801cc18:	eba5 0509 	sub.w	r5, r5, r9
 801cc1c:	6026      	str	r6, [r4, #0]
 801cc1e:	60a5      	str	r5, [r4, #8]
 801cc20:	463e      	mov	r6, r7
 801cc22:	42be      	cmp	r6, r7
 801cc24:	d900      	bls.n	801cc28 <__ssputs_r+0x70>
 801cc26:	463e      	mov	r6, r7
 801cc28:	6820      	ldr	r0, [r4, #0]
 801cc2a:	4632      	mov	r2, r6
 801cc2c:	4641      	mov	r1, r8
 801cc2e:	f7fe fc91 	bl	801b554 <memmove>
 801cc32:	68a3      	ldr	r3, [r4, #8]
 801cc34:	1b9b      	subs	r3, r3, r6
 801cc36:	60a3      	str	r3, [r4, #8]
 801cc38:	6823      	ldr	r3, [r4, #0]
 801cc3a:	4433      	add	r3, r6
 801cc3c:	6023      	str	r3, [r4, #0]
 801cc3e:	2000      	movs	r0, #0
 801cc40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cc44:	462a      	mov	r2, r5
 801cc46:	f000 fbd6 	bl	801d3f6 <_realloc_r>
 801cc4a:	4606      	mov	r6, r0
 801cc4c:	2800      	cmp	r0, #0
 801cc4e:	d1e0      	bne.n	801cc12 <__ssputs_r+0x5a>
 801cc50:	6921      	ldr	r1, [r4, #16]
 801cc52:	4650      	mov	r0, sl
 801cc54:	f7ff fb34 	bl	801c2c0 <_free_r>
 801cc58:	230c      	movs	r3, #12
 801cc5a:	f8ca 3000 	str.w	r3, [sl]
 801cc5e:	89a3      	ldrh	r3, [r4, #12]
 801cc60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cc64:	81a3      	strh	r3, [r4, #12]
 801cc66:	f04f 30ff 	mov.w	r0, #4294967295
 801cc6a:	e7e9      	b.n	801cc40 <__ssputs_r+0x88>

0801cc6c <_svfiprintf_r>:
 801cc6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc70:	4698      	mov	r8, r3
 801cc72:	898b      	ldrh	r3, [r1, #12]
 801cc74:	061b      	lsls	r3, r3, #24
 801cc76:	b09d      	sub	sp, #116	; 0x74
 801cc78:	4607      	mov	r7, r0
 801cc7a:	460d      	mov	r5, r1
 801cc7c:	4614      	mov	r4, r2
 801cc7e:	d50e      	bpl.n	801cc9e <_svfiprintf_r+0x32>
 801cc80:	690b      	ldr	r3, [r1, #16]
 801cc82:	b963      	cbnz	r3, 801cc9e <_svfiprintf_r+0x32>
 801cc84:	2140      	movs	r1, #64	; 0x40
 801cc86:	f7ff fb8f 	bl	801c3a8 <_malloc_r>
 801cc8a:	6028      	str	r0, [r5, #0]
 801cc8c:	6128      	str	r0, [r5, #16]
 801cc8e:	b920      	cbnz	r0, 801cc9a <_svfiprintf_r+0x2e>
 801cc90:	230c      	movs	r3, #12
 801cc92:	603b      	str	r3, [r7, #0]
 801cc94:	f04f 30ff 	mov.w	r0, #4294967295
 801cc98:	e0d0      	b.n	801ce3c <_svfiprintf_r+0x1d0>
 801cc9a:	2340      	movs	r3, #64	; 0x40
 801cc9c:	616b      	str	r3, [r5, #20]
 801cc9e:	2300      	movs	r3, #0
 801cca0:	9309      	str	r3, [sp, #36]	; 0x24
 801cca2:	2320      	movs	r3, #32
 801cca4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801cca8:	f8cd 800c 	str.w	r8, [sp, #12]
 801ccac:	2330      	movs	r3, #48	; 0x30
 801ccae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801ce54 <_svfiprintf_r+0x1e8>
 801ccb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ccb6:	f04f 0901 	mov.w	r9, #1
 801ccba:	4623      	mov	r3, r4
 801ccbc:	469a      	mov	sl, r3
 801ccbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ccc2:	b10a      	cbz	r2, 801ccc8 <_svfiprintf_r+0x5c>
 801ccc4:	2a25      	cmp	r2, #37	; 0x25
 801ccc6:	d1f9      	bne.n	801ccbc <_svfiprintf_r+0x50>
 801ccc8:	ebba 0b04 	subs.w	fp, sl, r4
 801cccc:	d00b      	beq.n	801cce6 <_svfiprintf_r+0x7a>
 801ccce:	465b      	mov	r3, fp
 801ccd0:	4622      	mov	r2, r4
 801ccd2:	4629      	mov	r1, r5
 801ccd4:	4638      	mov	r0, r7
 801ccd6:	f7ff ff6f 	bl	801cbb8 <__ssputs_r>
 801ccda:	3001      	adds	r0, #1
 801ccdc:	f000 80a9 	beq.w	801ce32 <_svfiprintf_r+0x1c6>
 801cce0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cce2:	445a      	add	r2, fp
 801cce4:	9209      	str	r2, [sp, #36]	; 0x24
 801cce6:	f89a 3000 	ldrb.w	r3, [sl]
 801ccea:	2b00      	cmp	r3, #0
 801ccec:	f000 80a1 	beq.w	801ce32 <_svfiprintf_r+0x1c6>
 801ccf0:	2300      	movs	r3, #0
 801ccf2:	f04f 32ff 	mov.w	r2, #4294967295
 801ccf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ccfa:	f10a 0a01 	add.w	sl, sl, #1
 801ccfe:	9304      	str	r3, [sp, #16]
 801cd00:	9307      	str	r3, [sp, #28]
 801cd02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801cd06:	931a      	str	r3, [sp, #104]	; 0x68
 801cd08:	4654      	mov	r4, sl
 801cd0a:	2205      	movs	r2, #5
 801cd0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cd10:	4850      	ldr	r0, [pc, #320]	; (801ce54 <_svfiprintf_r+0x1e8>)
 801cd12:	f7e5 f97d 	bl	8002010 <memchr>
 801cd16:	9a04      	ldr	r2, [sp, #16]
 801cd18:	b9d8      	cbnz	r0, 801cd52 <_svfiprintf_r+0xe6>
 801cd1a:	06d0      	lsls	r0, r2, #27
 801cd1c:	bf44      	itt	mi
 801cd1e:	2320      	movmi	r3, #32
 801cd20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cd24:	0711      	lsls	r1, r2, #28
 801cd26:	bf44      	itt	mi
 801cd28:	232b      	movmi	r3, #43	; 0x2b
 801cd2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cd2e:	f89a 3000 	ldrb.w	r3, [sl]
 801cd32:	2b2a      	cmp	r3, #42	; 0x2a
 801cd34:	d015      	beq.n	801cd62 <_svfiprintf_r+0xf6>
 801cd36:	9a07      	ldr	r2, [sp, #28]
 801cd38:	4654      	mov	r4, sl
 801cd3a:	2000      	movs	r0, #0
 801cd3c:	f04f 0c0a 	mov.w	ip, #10
 801cd40:	4621      	mov	r1, r4
 801cd42:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cd46:	3b30      	subs	r3, #48	; 0x30
 801cd48:	2b09      	cmp	r3, #9
 801cd4a:	d94d      	bls.n	801cde8 <_svfiprintf_r+0x17c>
 801cd4c:	b1b0      	cbz	r0, 801cd7c <_svfiprintf_r+0x110>
 801cd4e:	9207      	str	r2, [sp, #28]
 801cd50:	e014      	b.n	801cd7c <_svfiprintf_r+0x110>
 801cd52:	eba0 0308 	sub.w	r3, r0, r8
 801cd56:	fa09 f303 	lsl.w	r3, r9, r3
 801cd5a:	4313      	orrs	r3, r2
 801cd5c:	9304      	str	r3, [sp, #16]
 801cd5e:	46a2      	mov	sl, r4
 801cd60:	e7d2      	b.n	801cd08 <_svfiprintf_r+0x9c>
 801cd62:	9b03      	ldr	r3, [sp, #12]
 801cd64:	1d19      	adds	r1, r3, #4
 801cd66:	681b      	ldr	r3, [r3, #0]
 801cd68:	9103      	str	r1, [sp, #12]
 801cd6a:	2b00      	cmp	r3, #0
 801cd6c:	bfbb      	ittet	lt
 801cd6e:	425b      	neglt	r3, r3
 801cd70:	f042 0202 	orrlt.w	r2, r2, #2
 801cd74:	9307      	strge	r3, [sp, #28]
 801cd76:	9307      	strlt	r3, [sp, #28]
 801cd78:	bfb8      	it	lt
 801cd7a:	9204      	strlt	r2, [sp, #16]
 801cd7c:	7823      	ldrb	r3, [r4, #0]
 801cd7e:	2b2e      	cmp	r3, #46	; 0x2e
 801cd80:	d10c      	bne.n	801cd9c <_svfiprintf_r+0x130>
 801cd82:	7863      	ldrb	r3, [r4, #1]
 801cd84:	2b2a      	cmp	r3, #42	; 0x2a
 801cd86:	d134      	bne.n	801cdf2 <_svfiprintf_r+0x186>
 801cd88:	9b03      	ldr	r3, [sp, #12]
 801cd8a:	1d1a      	adds	r2, r3, #4
 801cd8c:	681b      	ldr	r3, [r3, #0]
 801cd8e:	9203      	str	r2, [sp, #12]
 801cd90:	2b00      	cmp	r3, #0
 801cd92:	bfb8      	it	lt
 801cd94:	f04f 33ff 	movlt.w	r3, #4294967295
 801cd98:	3402      	adds	r4, #2
 801cd9a:	9305      	str	r3, [sp, #20]
 801cd9c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801ce64 <_svfiprintf_r+0x1f8>
 801cda0:	7821      	ldrb	r1, [r4, #0]
 801cda2:	2203      	movs	r2, #3
 801cda4:	4650      	mov	r0, sl
 801cda6:	f7e5 f933 	bl	8002010 <memchr>
 801cdaa:	b138      	cbz	r0, 801cdbc <_svfiprintf_r+0x150>
 801cdac:	9b04      	ldr	r3, [sp, #16]
 801cdae:	eba0 000a 	sub.w	r0, r0, sl
 801cdb2:	2240      	movs	r2, #64	; 0x40
 801cdb4:	4082      	lsls	r2, r0
 801cdb6:	4313      	orrs	r3, r2
 801cdb8:	3401      	adds	r4, #1
 801cdba:	9304      	str	r3, [sp, #16]
 801cdbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cdc0:	4825      	ldr	r0, [pc, #148]	; (801ce58 <_svfiprintf_r+0x1ec>)
 801cdc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801cdc6:	2206      	movs	r2, #6
 801cdc8:	f7e5 f922 	bl	8002010 <memchr>
 801cdcc:	2800      	cmp	r0, #0
 801cdce:	d038      	beq.n	801ce42 <_svfiprintf_r+0x1d6>
 801cdd0:	4b22      	ldr	r3, [pc, #136]	; (801ce5c <_svfiprintf_r+0x1f0>)
 801cdd2:	bb1b      	cbnz	r3, 801ce1c <_svfiprintf_r+0x1b0>
 801cdd4:	9b03      	ldr	r3, [sp, #12]
 801cdd6:	3307      	adds	r3, #7
 801cdd8:	f023 0307 	bic.w	r3, r3, #7
 801cddc:	3308      	adds	r3, #8
 801cdde:	9303      	str	r3, [sp, #12]
 801cde0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cde2:	4433      	add	r3, r6
 801cde4:	9309      	str	r3, [sp, #36]	; 0x24
 801cde6:	e768      	b.n	801ccba <_svfiprintf_r+0x4e>
 801cde8:	fb0c 3202 	mla	r2, ip, r2, r3
 801cdec:	460c      	mov	r4, r1
 801cdee:	2001      	movs	r0, #1
 801cdf0:	e7a6      	b.n	801cd40 <_svfiprintf_r+0xd4>
 801cdf2:	2300      	movs	r3, #0
 801cdf4:	3401      	adds	r4, #1
 801cdf6:	9305      	str	r3, [sp, #20]
 801cdf8:	4619      	mov	r1, r3
 801cdfa:	f04f 0c0a 	mov.w	ip, #10
 801cdfe:	4620      	mov	r0, r4
 801ce00:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ce04:	3a30      	subs	r2, #48	; 0x30
 801ce06:	2a09      	cmp	r2, #9
 801ce08:	d903      	bls.n	801ce12 <_svfiprintf_r+0x1a6>
 801ce0a:	2b00      	cmp	r3, #0
 801ce0c:	d0c6      	beq.n	801cd9c <_svfiprintf_r+0x130>
 801ce0e:	9105      	str	r1, [sp, #20]
 801ce10:	e7c4      	b.n	801cd9c <_svfiprintf_r+0x130>
 801ce12:	fb0c 2101 	mla	r1, ip, r1, r2
 801ce16:	4604      	mov	r4, r0
 801ce18:	2301      	movs	r3, #1
 801ce1a:	e7f0      	b.n	801cdfe <_svfiprintf_r+0x192>
 801ce1c:	ab03      	add	r3, sp, #12
 801ce1e:	9300      	str	r3, [sp, #0]
 801ce20:	462a      	mov	r2, r5
 801ce22:	4b0f      	ldr	r3, [pc, #60]	; (801ce60 <_svfiprintf_r+0x1f4>)
 801ce24:	a904      	add	r1, sp, #16
 801ce26:	4638      	mov	r0, r7
 801ce28:	f7fd fdb2 	bl	801a990 <_printf_float>
 801ce2c:	1c42      	adds	r2, r0, #1
 801ce2e:	4606      	mov	r6, r0
 801ce30:	d1d6      	bne.n	801cde0 <_svfiprintf_r+0x174>
 801ce32:	89ab      	ldrh	r3, [r5, #12]
 801ce34:	065b      	lsls	r3, r3, #25
 801ce36:	f53f af2d 	bmi.w	801cc94 <_svfiprintf_r+0x28>
 801ce3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ce3c:	b01d      	add	sp, #116	; 0x74
 801ce3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce42:	ab03      	add	r3, sp, #12
 801ce44:	9300      	str	r3, [sp, #0]
 801ce46:	462a      	mov	r2, r5
 801ce48:	4b05      	ldr	r3, [pc, #20]	; (801ce60 <_svfiprintf_r+0x1f4>)
 801ce4a:	a904      	add	r1, sp, #16
 801ce4c:	4638      	mov	r0, r7
 801ce4e:	f7fe f827 	bl	801aea0 <_printf_i>
 801ce52:	e7eb      	b.n	801ce2c <_svfiprintf_r+0x1c0>
 801ce54:	080211a4 	.word	0x080211a4
 801ce58:	080211ae 	.word	0x080211ae
 801ce5c:	0801a991 	.word	0x0801a991
 801ce60:	0801cbb9 	.word	0x0801cbb9
 801ce64:	080211aa 	.word	0x080211aa

0801ce68 <__sfputc_r>:
 801ce68:	6893      	ldr	r3, [r2, #8]
 801ce6a:	3b01      	subs	r3, #1
 801ce6c:	2b00      	cmp	r3, #0
 801ce6e:	b410      	push	{r4}
 801ce70:	6093      	str	r3, [r2, #8]
 801ce72:	da08      	bge.n	801ce86 <__sfputc_r+0x1e>
 801ce74:	6994      	ldr	r4, [r2, #24]
 801ce76:	42a3      	cmp	r3, r4
 801ce78:	db01      	blt.n	801ce7e <__sfputc_r+0x16>
 801ce7a:	290a      	cmp	r1, #10
 801ce7c:	d103      	bne.n	801ce86 <__sfputc_r+0x1e>
 801ce7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ce82:	f7fe bac2 	b.w	801b40a <__swbuf_r>
 801ce86:	6813      	ldr	r3, [r2, #0]
 801ce88:	1c58      	adds	r0, r3, #1
 801ce8a:	6010      	str	r0, [r2, #0]
 801ce8c:	7019      	strb	r1, [r3, #0]
 801ce8e:	4608      	mov	r0, r1
 801ce90:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ce94:	4770      	bx	lr

0801ce96 <__sfputs_r>:
 801ce96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ce98:	4606      	mov	r6, r0
 801ce9a:	460f      	mov	r7, r1
 801ce9c:	4614      	mov	r4, r2
 801ce9e:	18d5      	adds	r5, r2, r3
 801cea0:	42ac      	cmp	r4, r5
 801cea2:	d101      	bne.n	801cea8 <__sfputs_r+0x12>
 801cea4:	2000      	movs	r0, #0
 801cea6:	e007      	b.n	801ceb8 <__sfputs_r+0x22>
 801cea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ceac:	463a      	mov	r2, r7
 801ceae:	4630      	mov	r0, r6
 801ceb0:	f7ff ffda 	bl	801ce68 <__sfputc_r>
 801ceb4:	1c43      	adds	r3, r0, #1
 801ceb6:	d1f3      	bne.n	801cea0 <__sfputs_r+0xa>
 801ceb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801cebc <_vfiprintf_r>:
 801cebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cec0:	460d      	mov	r5, r1
 801cec2:	b09d      	sub	sp, #116	; 0x74
 801cec4:	4614      	mov	r4, r2
 801cec6:	4698      	mov	r8, r3
 801cec8:	4606      	mov	r6, r0
 801ceca:	b118      	cbz	r0, 801ced4 <_vfiprintf_r+0x18>
 801cecc:	6a03      	ldr	r3, [r0, #32]
 801cece:	b90b      	cbnz	r3, 801ced4 <_vfiprintf_r+0x18>
 801ced0:	f7fe f994 	bl	801b1fc <__sinit>
 801ced4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ced6:	07d9      	lsls	r1, r3, #31
 801ced8:	d405      	bmi.n	801cee6 <_vfiprintf_r+0x2a>
 801ceda:	89ab      	ldrh	r3, [r5, #12]
 801cedc:	059a      	lsls	r2, r3, #22
 801cede:	d402      	bmi.n	801cee6 <_vfiprintf_r+0x2a>
 801cee0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801cee2:	f7fe fbc8 	bl	801b676 <__retarget_lock_acquire_recursive>
 801cee6:	89ab      	ldrh	r3, [r5, #12]
 801cee8:	071b      	lsls	r3, r3, #28
 801ceea:	d501      	bpl.n	801cef0 <_vfiprintf_r+0x34>
 801ceec:	692b      	ldr	r3, [r5, #16]
 801ceee:	b99b      	cbnz	r3, 801cf18 <_vfiprintf_r+0x5c>
 801cef0:	4629      	mov	r1, r5
 801cef2:	4630      	mov	r0, r6
 801cef4:	f7fe fac6 	bl	801b484 <__swsetup_r>
 801cef8:	b170      	cbz	r0, 801cf18 <_vfiprintf_r+0x5c>
 801cefa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801cefc:	07dc      	lsls	r4, r3, #31
 801cefe:	d504      	bpl.n	801cf0a <_vfiprintf_r+0x4e>
 801cf00:	f04f 30ff 	mov.w	r0, #4294967295
 801cf04:	b01d      	add	sp, #116	; 0x74
 801cf06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf0a:	89ab      	ldrh	r3, [r5, #12]
 801cf0c:	0598      	lsls	r0, r3, #22
 801cf0e:	d4f7      	bmi.n	801cf00 <_vfiprintf_r+0x44>
 801cf10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801cf12:	f7fe fbb1 	bl	801b678 <__retarget_lock_release_recursive>
 801cf16:	e7f3      	b.n	801cf00 <_vfiprintf_r+0x44>
 801cf18:	2300      	movs	r3, #0
 801cf1a:	9309      	str	r3, [sp, #36]	; 0x24
 801cf1c:	2320      	movs	r3, #32
 801cf1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801cf22:	f8cd 800c 	str.w	r8, [sp, #12]
 801cf26:	2330      	movs	r3, #48	; 0x30
 801cf28:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801d0dc <_vfiprintf_r+0x220>
 801cf2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801cf30:	f04f 0901 	mov.w	r9, #1
 801cf34:	4623      	mov	r3, r4
 801cf36:	469a      	mov	sl, r3
 801cf38:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cf3c:	b10a      	cbz	r2, 801cf42 <_vfiprintf_r+0x86>
 801cf3e:	2a25      	cmp	r2, #37	; 0x25
 801cf40:	d1f9      	bne.n	801cf36 <_vfiprintf_r+0x7a>
 801cf42:	ebba 0b04 	subs.w	fp, sl, r4
 801cf46:	d00b      	beq.n	801cf60 <_vfiprintf_r+0xa4>
 801cf48:	465b      	mov	r3, fp
 801cf4a:	4622      	mov	r2, r4
 801cf4c:	4629      	mov	r1, r5
 801cf4e:	4630      	mov	r0, r6
 801cf50:	f7ff ffa1 	bl	801ce96 <__sfputs_r>
 801cf54:	3001      	adds	r0, #1
 801cf56:	f000 80a9 	beq.w	801d0ac <_vfiprintf_r+0x1f0>
 801cf5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cf5c:	445a      	add	r2, fp
 801cf5e:	9209      	str	r2, [sp, #36]	; 0x24
 801cf60:	f89a 3000 	ldrb.w	r3, [sl]
 801cf64:	2b00      	cmp	r3, #0
 801cf66:	f000 80a1 	beq.w	801d0ac <_vfiprintf_r+0x1f0>
 801cf6a:	2300      	movs	r3, #0
 801cf6c:	f04f 32ff 	mov.w	r2, #4294967295
 801cf70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cf74:	f10a 0a01 	add.w	sl, sl, #1
 801cf78:	9304      	str	r3, [sp, #16]
 801cf7a:	9307      	str	r3, [sp, #28]
 801cf7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801cf80:	931a      	str	r3, [sp, #104]	; 0x68
 801cf82:	4654      	mov	r4, sl
 801cf84:	2205      	movs	r2, #5
 801cf86:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cf8a:	4854      	ldr	r0, [pc, #336]	; (801d0dc <_vfiprintf_r+0x220>)
 801cf8c:	f7e5 f840 	bl	8002010 <memchr>
 801cf90:	9a04      	ldr	r2, [sp, #16]
 801cf92:	b9d8      	cbnz	r0, 801cfcc <_vfiprintf_r+0x110>
 801cf94:	06d1      	lsls	r1, r2, #27
 801cf96:	bf44      	itt	mi
 801cf98:	2320      	movmi	r3, #32
 801cf9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cf9e:	0713      	lsls	r3, r2, #28
 801cfa0:	bf44      	itt	mi
 801cfa2:	232b      	movmi	r3, #43	; 0x2b
 801cfa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cfa8:	f89a 3000 	ldrb.w	r3, [sl]
 801cfac:	2b2a      	cmp	r3, #42	; 0x2a
 801cfae:	d015      	beq.n	801cfdc <_vfiprintf_r+0x120>
 801cfb0:	9a07      	ldr	r2, [sp, #28]
 801cfb2:	4654      	mov	r4, sl
 801cfb4:	2000      	movs	r0, #0
 801cfb6:	f04f 0c0a 	mov.w	ip, #10
 801cfba:	4621      	mov	r1, r4
 801cfbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cfc0:	3b30      	subs	r3, #48	; 0x30
 801cfc2:	2b09      	cmp	r3, #9
 801cfc4:	d94d      	bls.n	801d062 <_vfiprintf_r+0x1a6>
 801cfc6:	b1b0      	cbz	r0, 801cff6 <_vfiprintf_r+0x13a>
 801cfc8:	9207      	str	r2, [sp, #28]
 801cfca:	e014      	b.n	801cff6 <_vfiprintf_r+0x13a>
 801cfcc:	eba0 0308 	sub.w	r3, r0, r8
 801cfd0:	fa09 f303 	lsl.w	r3, r9, r3
 801cfd4:	4313      	orrs	r3, r2
 801cfd6:	9304      	str	r3, [sp, #16]
 801cfd8:	46a2      	mov	sl, r4
 801cfda:	e7d2      	b.n	801cf82 <_vfiprintf_r+0xc6>
 801cfdc:	9b03      	ldr	r3, [sp, #12]
 801cfde:	1d19      	adds	r1, r3, #4
 801cfe0:	681b      	ldr	r3, [r3, #0]
 801cfe2:	9103      	str	r1, [sp, #12]
 801cfe4:	2b00      	cmp	r3, #0
 801cfe6:	bfbb      	ittet	lt
 801cfe8:	425b      	neglt	r3, r3
 801cfea:	f042 0202 	orrlt.w	r2, r2, #2
 801cfee:	9307      	strge	r3, [sp, #28]
 801cff0:	9307      	strlt	r3, [sp, #28]
 801cff2:	bfb8      	it	lt
 801cff4:	9204      	strlt	r2, [sp, #16]
 801cff6:	7823      	ldrb	r3, [r4, #0]
 801cff8:	2b2e      	cmp	r3, #46	; 0x2e
 801cffa:	d10c      	bne.n	801d016 <_vfiprintf_r+0x15a>
 801cffc:	7863      	ldrb	r3, [r4, #1]
 801cffe:	2b2a      	cmp	r3, #42	; 0x2a
 801d000:	d134      	bne.n	801d06c <_vfiprintf_r+0x1b0>
 801d002:	9b03      	ldr	r3, [sp, #12]
 801d004:	1d1a      	adds	r2, r3, #4
 801d006:	681b      	ldr	r3, [r3, #0]
 801d008:	9203      	str	r2, [sp, #12]
 801d00a:	2b00      	cmp	r3, #0
 801d00c:	bfb8      	it	lt
 801d00e:	f04f 33ff 	movlt.w	r3, #4294967295
 801d012:	3402      	adds	r4, #2
 801d014:	9305      	str	r3, [sp, #20]
 801d016:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801d0ec <_vfiprintf_r+0x230>
 801d01a:	7821      	ldrb	r1, [r4, #0]
 801d01c:	2203      	movs	r2, #3
 801d01e:	4650      	mov	r0, sl
 801d020:	f7e4 fff6 	bl	8002010 <memchr>
 801d024:	b138      	cbz	r0, 801d036 <_vfiprintf_r+0x17a>
 801d026:	9b04      	ldr	r3, [sp, #16]
 801d028:	eba0 000a 	sub.w	r0, r0, sl
 801d02c:	2240      	movs	r2, #64	; 0x40
 801d02e:	4082      	lsls	r2, r0
 801d030:	4313      	orrs	r3, r2
 801d032:	3401      	adds	r4, #1
 801d034:	9304      	str	r3, [sp, #16]
 801d036:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d03a:	4829      	ldr	r0, [pc, #164]	; (801d0e0 <_vfiprintf_r+0x224>)
 801d03c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d040:	2206      	movs	r2, #6
 801d042:	f7e4 ffe5 	bl	8002010 <memchr>
 801d046:	2800      	cmp	r0, #0
 801d048:	d03f      	beq.n	801d0ca <_vfiprintf_r+0x20e>
 801d04a:	4b26      	ldr	r3, [pc, #152]	; (801d0e4 <_vfiprintf_r+0x228>)
 801d04c:	bb1b      	cbnz	r3, 801d096 <_vfiprintf_r+0x1da>
 801d04e:	9b03      	ldr	r3, [sp, #12]
 801d050:	3307      	adds	r3, #7
 801d052:	f023 0307 	bic.w	r3, r3, #7
 801d056:	3308      	adds	r3, #8
 801d058:	9303      	str	r3, [sp, #12]
 801d05a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d05c:	443b      	add	r3, r7
 801d05e:	9309      	str	r3, [sp, #36]	; 0x24
 801d060:	e768      	b.n	801cf34 <_vfiprintf_r+0x78>
 801d062:	fb0c 3202 	mla	r2, ip, r2, r3
 801d066:	460c      	mov	r4, r1
 801d068:	2001      	movs	r0, #1
 801d06a:	e7a6      	b.n	801cfba <_vfiprintf_r+0xfe>
 801d06c:	2300      	movs	r3, #0
 801d06e:	3401      	adds	r4, #1
 801d070:	9305      	str	r3, [sp, #20]
 801d072:	4619      	mov	r1, r3
 801d074:	f04f 0c0a 	mov.w	ip, #10
 801d078:	4620      	mov	r0, r4
 801d07a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d07e:	3a30      	subs	r2, #48	; 0x30
 801d080:	2a09      	cmp	r2, #9
 801d082:	d903      	bls.n	801d08c <_vfiprintf_r+0x1d0>
 801d084:	2b00      	cmp	r3, #0
 801d086:	d0c6      	beq.n	801d016 <_vfiprintf_r+0x15a>
 801d088:	9105      	str	r1, [sp, #20]
 801d08a:	e7c4      	b.n	801d016 <_vfiprintf_r+0x15a>
 801d08c:	fb0c 2101 	mla	r1, ip, r1, r2
 801d090:	4604      	mov	r4, r0
 801d092:	2301      	movs	r3, #1
 801d094:	e7f0      	b.n	801d078 <_vfiprintf_r+0x1bc>
 801d096:	ab03      	add	r3, sp, #12
 801d098:	9300      	str	r3, [sp, #0]
 801d09a:	462a      	mov	r2, r5
 801d09c:	4b12      	ldr	r3, [pc, #72]	; (801d0e8 <_vfiprintf_r+0x22c>)
 801d09e:	a904      	add	r1, sp, #16
 801d0a0:	4630      	mov	r0, r6
 801d0a2:	f7fd fc75 	bl	801a990 <_printf_float>
 801d0a6:	4607      	mov	r7, r0
 801d0a8:	1c78      	adds	r0, r7, #1
 801d0aa:	d1d6      	bne.n	801d05a <_vfiprintf_r+0x19e>
 801d0ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d0ae:	07d9      	lsls	r1, r3, #31
 801d0b0:	d405      	bmi.n	801d0be <_vfiprintf_r+0x202>
 801d0b2:	89ab      	ldrh	r3, [r5, #12]
 801d0b4:	059a      	lsls	r2, r3, #22
 801d0b6:	d402      	bmi.n	801d0be <_vfiprintf_r+0x202>
 801d0b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d0ba:	f7fe fadd 	bl	801b678 <__retarget_lock_release_recursive>
 801d0be:	89ab      	ldrh	r3, [r5, #12]
 801d0c0:	065b      	lsls	r3, r3, #25
 801d0c2:	f53f af1d 	bmi.w	801cf00 <_vfiprintf_r+0x44>
 801d0c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d0c8:	e71c      	b.n	801cf04 <_vfiprintf_r+0x48>
 801d0ca:	ab03      	add	r3, sp, #12
 801d0cc:	9300      	str	r3, [sp, #0]
 801d0ce:	462a      	mov	r2, r5
 801d0d0:	4b05      	ldr	r3, [pc, #20]	; (801d0e8 <_vfiprintf_r+0x22c>)
 801d0d2:	a904      	add	r1, sp, #16
 801d0d4:	4630      	mov	r0, r6
 801d0d6:	f7fd fee3 	bl	801aea0 <_printf_i>
 801d0da:	e7e4      	b.n	801d0a6 <_vfiprintf_r+0x1ea>
 801d0dc:	080211a4 	.word	0x080211a4
 801d0e0:	080211ae 	.word	0x080211ae
 801d0e4:	0801a991 	.word	0x0801a991
 801d0e8:	0801ce97 	.word	0x0801ce97
 801d0ec:	080211aa 	.word	0x080211aa

0801d0f0 <__sflush_r>:
 801d0f0:	898a      	ldrh	r2, [r1, #12]
 801d0f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d0f6:	4605      	mov	r5, r0
 801d0f8:	0710      	lsls	r0, r2, #28
 801d0fa:	460c      	mov	r4, r1
 801d0fc:	d458      	bmi.n	801d1b0 <__sflush_r+0xc0>
 801d0fe:	684b      	ldr	r3, [r1, #4]
 801d100:	2b00      	cmp	r3, #0
 801d102:	dc05      	bgt.n	801d110 <__sflush_r+0x20>
 801d104:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d106:	2b00      	cmp	r3, #0
 801d108:	dc02      	bgt.n	801d110 <__sflush_r+0x20>
 801d10a:	2000      	movs	r0, #0
 801d10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d110:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d112:	2e00      	cmp	r6, #0
 801d114:	d0f9      	beq.n	801d10a <__sflush_r+0x1a>
 801d116:	2300      	movs	r3, #0
 801d118:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d11c:	682f      	ldr	r7, [r5, #0]
 801d11e:	6a21      	ldr	r1, [r4, #32]
 801d120:	602b      	str	r3, [r5, #0]
 801d122:	d032      	beq.n	801d18a <__sflush_r+0x9a>
 801d124:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d126:	89a3      	ldrh	r3, [r4, #12]
 801d128:	075a      	lsls	r2, r3, #29
 801d12a:	d505      	bpl.n	801d138 <__sflush_r+0x48>
 801d12c:	6863      	ldr	r3, [r4, #4]
 801d12e:	1ac0      	subs	r0, r0, r3
 801d130:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d132:	b10b      	cbz	r3, 801d138 <__sflush_r+0x48>
 801d134:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d136:	1ac0      	subs	r0, r0, r3
 801d138:	2300      	movs	r3, #0
 801d13a:	4602      	mov	r2, r0
 801d13c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d13e:	6a21      	ldr	r1, [r4, #32]
 801d140:	4628      	mov	r0, r5
 801d142:	47b0      	blx	r6
 801d144:	1c43      	adds	r3, r0, #1
 801d146:	89a3      	ldrh	r3, [r4, #12]
 801d148:	d106      	bne.n	801d158 <__sflush_r+0x68>
 801d14a:	6829      	ldr	r1, [r5, #0]
 801d14c:	291d      	cmp	r1, #29
 801d14e:	d82b      	bhi.n	801d1a8 <__sflush_r+0xb8>
 801d150:	4a29      	ldr	r2, [pc, #164]	; (801d1f8 <__sflush_r+0x108>)
 801d152:	410a      	asrs	r2, r1
 801d154:	07d6      	lsls	r6, r2, #31
 801d156:	d427      	bmi.n	801d1a8 <__sflush_r+0xb8>
 801d158:	2200      	movs	r2, #0
 801d15a:	6062      	str	r2, [r4, #4]
 801d15c:	04d9      	lsls	r1, r3, #19
 801d15e:	6922      	ldr	r2, [r4, #16]
 801d160:	6022      	str	r2, [r4, #0]
 801d162:	d504      	bpl.n	801d16e <__sflush_r+0x7e>
 801d164:	1c42      	adds	r2, r0, #1
 801d166:	d101      	bne.n	801d16c <__sflush_r+0x7c>
 801d168:	682b      	ldr	r3, [r5, #0]
 801d16a:	b903      	cbnz	r3, 801d16e <__sflush_r+0x7e>
 801d16c:	6560      	str	r0, [r4, #84]	; 0x54
 801d16e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d170:	602f      	str	r7, [r5, #0]
 801d172:	2900      	cmp	r1, #0
 801d174:	d0c9      	beq.n	801d10a <__sflush_r+0x1a>
 801d176:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d17a:	4299      	cmp	r1, r3
 801d17c:	d002      	beq.n	801d184 <__sflush_r+0x94>
 801d17e:	4628      	mov	r0, r5
 801d180:	f7ff f89e 	bl	801c2c0 <_free_r>
 801d184:	2000      	movs	r0, #0
 801d186:	6360      	str	r0, [r4, #52]	; 0x34
 801d188:	e7c0      	b.n	801d10c <__sflush_r+0x1c>
 801d18a:	2301      	movs	r3, #1
 801d18c:	4628      	mov	r0, r5
 801d18e:	47b0      	blx	r6
 801d190:	1c41      	adds	r1, r0, #1
 801d192:	d1c8      	bne.n	801d126 <__sflush_r+0x36>
 801d194:	682b      	ldr	r3, [r5, #0]
 801d196:	2b00      	cmp	r3, #0
 801d198:	d0c5      	beq.n	801d126 <__sflush_r+0x36>
 801d19a:	2b1d      	cmp	r3, #29
 801d19c:	d001      	beq.n	801d1a2 <__sflush_r+0xb2>
 801d19e:	2b16      	cmp	r3, #22
 801d1a0:	d101      	bne.n	801d1a6 <__sflush_r+0xb6>
 801d1a2:	602f      	str	r7, [r5, #0]
 801d1a4:	e7b1      	b.n	801d10a <__sflush_r+0x1a>
 801d1a6:	89a3      	ldrh	r3, [r4, #12]
 801d1a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d1ac:	81a3      	strh	r3, [r4, #12]
 801d1ae:	e7ad      	b.n	801d10c <__sflush_r+0x1c>
 801d1b0:	690f      	ldr	r7, [r1, #16]
 801d1b2:	2f00      	cmp	r7, #0
 801d1b4:	d0a9      	beq.n	801d10a <__sflush_r+0x1a>
 801d1b6:	0793      	lsls	r3, r2, #30
 801d1b8:	680e      	ldr	r6, [r1, #0]
 801d1ba:	bf08      	it	eq
 801d1bc:	694b      	ldreq	r3, [r1, #20]
 801d1be:	600f      	str	r7, [r1, #0]
 801d1c0:	bf18      	it	ne
 801d1c2:	2300      	movne	r3, #0
 801d1c4:	eba6 0807 	sub.w	r8, r6, r7
 801d1c8:	608b      	str	r3, [r1, #8]
 801d1ca:	f1b8 0f00 	cmp.w	r8, #0
 801d1ce:	dd9c      	ble.n	801d10a <__sflush_r+0x1a>
 801d1d0:	6a21      	ldr	r1, [r4, #32]
 801d1d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d1d4:	4643      	mov	r3, r8
 801d1d6:	463a      	mov	r2, r7
 801d1d8:	4628      	mov	r0, r5
 801d1da:	47b0      	blx	r6
 801d1dc:	2800      	cmp	r0, #0
 801d1de:	dc06      	bgt.n	801d1ee <__sflush_r+0xfe>
 801d1e0:	89a3      	ldrh	r3, [r4, #12]
 801d1e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d1e6:	81a3      	strh	r3, [r4, #12]
 801d1e8:	f04f 30ff 	mov.w	r0, #4294967295
 801d1ec:	e78e      	b.n	801d10c <__sflush_r+0x1c>
 801d1ee:	4407      	add	r7, r0
 801d1f0:	eba8 0800 	sub.w	r8, r8, r0
 801d1f4:	e7e9      	b.n	801d1ca <__sflush_r+0xda>
 801d1f6:	bf00      	nop
 801d1f8:	dfbffffe 	.word	0xdfbffffe

0801d1fc <_fflush_r>:
 801d1fc:	b538      	push	{r3, r4, r5, lr}
 801d1fe:	690b      	ldr	r3, [r1, #16]
 801d200:	4605      	mov	r5, r0
 801d202:	460c      	mov	r4, r1
 801d204:	b913      	cbnz	r3, 801d20c <_fflush_r+0x10>
 801d206:	2500      	movs	r5, #0
 801d208:	4628      	mov	r0, r5
 801d20a:	bd38      	pop	{r3, r4, r5, pc}
 801d20c:	b118      	cbz	r0, 801d216 <_fflush_r+0x1a>
 801d20e:	6a03      	ldr	r3, [r0, #32]
 801d210:	b90b      	cbnz	r3, 801d216 <_fflush_r+0x1a>
 801d212:	f7fd fff3 	bl	801b1fc <__sinit>
 801d216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d21a:	2b00      	cmp	r3, #0
 801d21c:	d0f3      	beq.n	801d206 <_fflush_r+0xa>
 801d21e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d220:	07d0      	lsls	r0, r2, #31
 801d222:	d404      	bmi.n	801d22e <_fflush_r+0x32>
 801d224:	0599      	lsls	r1, r3, #22
 801d226:	d402      	bmi.n	801d22e <_fflush_r+0x32>
 801d228:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d22a:	f7fe fa24 	bl	801b676 <__retarget_lock_acquire_recursive>
 801d22e:	4628      	mov	r0, r5
 801d230:	4621      	mov	r1, r4
 801d232:	f7ff ff5d 	bl	801d0f0 <__sflush_r>
 801d236:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d238:	07da      	lsls	r2, r3, #31
 801d23a:	4605      	mov	r5, r0
 801d23c:	d4e4      	bmi.n	801d208 <_fflush_r+0xc>
 801d23e:	89a3      	ldrh	r3, [r4, #12]
 801d240:	059b      	lsls	r3, r3, #22
 801d242:	d4e1      	bmi.n	801d208 <_fflush_r+0xc>
 801d244:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d246:	f7fe fa17 	bl	801b678 <__retarget_lock_release_recursive>
 801d24a:	e7dd      	b.n	801d208 <_fflush_r+0xc>

0801d24c <fiprintf>:
 801d24c:	b40e      	push	{r1, r2, r3}
 801d24e:	b503      	push	{r0, r1, lr}
 801d250:	4601      	mov	r1, r0
 801d252:	ab03      	add	r3, sp, #12
 801d254:	4805      	ldr	r0, [pc, #20]	; (801d26c <fiprintf+0x20>)
 801d256:	f853 2b04 	ldr.w	r2, [r3], #4
 801d25a:	6800      	ldr	r0, [r0, #0]
 801d25c:	9301      	str	r3, [sp, #4]
 801d25e:	f7ff fe2d 	bl	801cebc <_vfiprintf_r>
 801d262:	b002      	add	sp, #8
 801d264:	f85d eb04 	ldr.w	lr, [sp], #4
 801d268:	b003      	add	sp, #12
 801d26a:	4770      	bx	lr
 801d26c:	200000b8 	.word	0x200000b8

0801d270 <__swhatbuf_r>:
 801d270:	b570      	push	{r4, r5, r6, lr}
 801d272:	460c      	mov	r4, r1
 801d274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d278:	2900      	cmp	r1, #0
 801d27a:	b096      	sub	sp, #88	; 0x58
 801d27c:	4615      	mov	r5, r2
 801d27e:	461e      	mov	r6, r3
 801d280:	da0d      	bge.n	801d29e <__swhatbuf_r+0x2e>
 801d282:	89a3      	ldrh	r3, [r4, #12]
 801d284:	f013 0f80 	tst.w	r3, #128	; 0x80
 801d288:	f04f 0100 	mov.w	r1, #0
 801d28c:	bf0c      	ite	eq
 801d28e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801d292:	2340      	movne	r3, #64	; 0x40
 801d294:	2000      	movs	r0, #0
 801d296:	6031      	str	r1, [r6, #0]
 801d298:	602b      	str	r3, [r5, #0]
 801d29a:	b016      	add	sp, #88	; 0x58
 801d29c:	bd70      	pop	{r4, r5, r6, pc}
 801d29e:	466a      	mov	r2, sp
 801d2a0:	f000 f848 	bl	801d334 <_fstat_r>
 801d2a4:	2800      	cmp	r0, #0
 801d2a6:	dbec      	blt.n	801d282 <__swhatbuf_r+0x12>
 801d2a8:	9901      	ldr	r1, [sp, #4]
 801d2aa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801d2ae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801d2b2:	4259      	negs	r1, r3
 801d2b4:	4159      	adcs	r1, r3
 801d2b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d2ba:	e7eb      	b.n	801d294 <__swhatbuf_r+0x24>

0801d2bc <__smakebuf_r>:
 801d2bc:	898b      	ldrh	r3, [r1, #12]
 801d2be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d2c0:	079d      	lsls	r5, r3, #30
 801d2c2:	4606      	mov	r6, r0
 801d2c4:	460c      	mov	r4, r1
 801d2c6:	d507      	bpl.n	801d2d8 <__smakebuf_r+0x1c>
 801d2c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d2cc:	6023      	str	r3, [r4, #0]
 801d2ce:	6123      	str	r3, [r4, #16]
 801d2d0:	2301      	movs	r3, #1
 801d2d2:	6163      	str	r3, [r4, #20]
 801d2d4:	b002      	add	sp, #8
 801d2d6:	bd70      	pop	{r4, r5, r6, pc}
 801d2d8:	ab01      	add	r3, sp, #4
 801d2da:	466a      	mov	r2, sp
 801d2dc:	f7ff ffc8 	bl	801d270 <__swhatbuf_r>
 801d2e0:	9900      	ldr	r1, [sp, #0]
 801d2e2:	4605      	mov	r5, r0
 801d2e4:	4630      	mov	r0, r6
 801d2e6:	f7ff f85f 	bl	801c3a8 <_malloc_r>
 801d2ea:	b948      	cbnz	r0, 801d300 <__smakebuf_r+0x44>
 801d2ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d2f0:	059a      	lsls	r2, r3, #22
 801d2f2:	d4ef      	bmi.n	801d2d4 <__smakebuf_r+0x18>
 801d2f4:	f023 0303 	bic.w	r3, r3, #3
 801d2f8:	f043 0302 	orr.w	r3, r3, #2
 801d2fc:	81a3      	strh	r3, [r4, #12]
 801d2fe:	e7e3      	b.n	801d2c8 <__smakebuf_r+0xc>
 801d300:	89a3      	ldrh	r3, [r4, #12]
 801d302:	6020      	str	r0, [r4, #0]
 801d304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d308:	81a3      	strh	r3, [r4, #12]
 801d30a:	9b00      	ldr	r3, [sp, #0]
 801d30c:	6163      	str	r3, [r4, #20]
 801d30e:	9b01      	ldr	r3, [sp, #4]
 801d310:	6120      	str	r0, [r4, #16]
 801d312:	b15b      	cbz	r3, 801d32c <__smakebuf_r+0x70>
 801d314:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d318:	4630      	mov	r0, r6
 801d31a:	f000 f81d 	bl	801d358 <_isatty_r>
 801d31e:	b128      	cbz	r0, 801d32c <__smakebuf_r+0x70>
 801d320:	89a3      	ldrh	r3, [r4, #12]
 801d322:	f023 0303 	bic.w	r3, r3, #3
 801d326:	f043 0301 	orr.w	r3, r3, #1
 801d32a:	81a3      	strh	r3, [r4, #12]
 801d32c:	89a3      	ldrh	r3, [r4, #12]
 801d32e:	431d      	orrs	r5, r3
 801d330:	81a5      	strh	r5, [r4, #12]
 801d332:	e7cf      	b.n	801d2d4 <__smakebuf_r+0x18>

0801d334 <_fstat_r>:
 801d334:	b538      	push	{r3, r4, r5, lr}
 801d336:	4d07      	ldr	r5, [pc, #28]	; (801d354 <_fstat_r+0x20>)
 801d338:	2300      	movs	r3, #0
 801d33a:	4604      	mov	r4, r0
 801d33c:	4608      	mov	r0, r1
 801d33e:	4611      	mov	r1, r2
 801d340:	602b      	str	r3, [r5, #0]
 801d342:	f7e6 fbee 	bl	8003b22 <_fstat>
 801d346:	1c43      	adds	r3, r0, #1
 801d348:	d102      	bne.n	801d350 <_fstat_r+0x1c>
 801d34a:	682b      	ldr	r3, [r5, #0]
 801d34c:	b103      	cbz	r3, 801d350 <_fstat_r+0x1c>
 801d34e:	6023      	str	r3, [r4, #0]
 801d350:	bd38      	pop	{r3, r4, r5, pc}
 801d352:	bf00      	nop
 801d354:	200072f4 	.word	0x200072f4

0801d358 <_isatty_r>:
 801d358:	b538      	push	{r3, r4, r5, lr}
 801d35a:	4d06      	ldr	r5, [pc, #24]	; (801d374 <_isatty_r+0x1c>)
 801d35c:	2300      	movs	r3, #0
 801d35e:	4604      	mov	r4, r0
 801d360:	4608      	mov	r0, r1
 801d362:	602b      	str	r3, [r5, #0]
 801d364:	f7e6 fbed 	bl	8003b42 <_isatty>
 801d368:	1c43      	adds	r3, r0, #1
 801d36a:	d102      	bne.n	801d372 <_isatty_r+0x1a>
 801d36c:	682b      	ldr	r3, [r5, #0]
 801d36e:	b103      	cbz	r3, 801d372 <_isatty_r+0x1a>
 801d370:	6023      	str	r3, [r4, #0]
 801d372:	bd38      	pop	{r3, r4, r5, pc}
 801d374:	200072f4 	.word	0x200072f4

0801d378 <_sbrk_r>:
 801d378:	b538      	push	{r3, r4, r5, lr}
 801d37a:	4d06      	ldr	r5, [pc, #24]	; (801d394 <_sbrk_r+0x1c>)
 801d37c:	2300      	movs	r3, #0
 801d37e:	4604      	mov	r4, r0
 801d380:	4608      	mov	r0, r1
 801d382:	602b      	str	r3, [r5, #0]
 801d384:	f7e6 fbf6 	bl	8003b74 <_sbrk>
 801d388:	1c43      	adds	r3, r0, #1
 801d38a:	d102      	bne.n	801d392 <_sbrk_r+0x1a>
 801d38c:	682b      	ldr	r3, [r5, #0]
 801d38e:	b103      	cbz	r3, 801d392 <_sbrk_r+0x1a>
 801d390:	6023      	str	r3, [r4, #0]
 801d392:	bd38      	pop	{r3, r4, r5, pc}
 801d394:	200072f4 	.word	0x200072f4

0801d398 <abort>:
 801d398:	b508      	push	{r3, lr}
 801d39a:	2006      	movs	r0, #6
 801d39c:	f000 f890 	bl	801d4c0 <raise>
 801d3a0:	2001      	movs	r0, #1
 801d3a2:	f7e6 fb6f 	bl	8003a84 <_exit>

0801d3a6 <_calloc_r>:
 801d3a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d3a8:	fba1 2402 	umull	r2, r4, r1, r2
 801d3ac:	b94c      	cbnz	r4, 801d3c2 <_calloc_r+0x1c>
 801d3ae:	4611      	mov	r1, r2
 801d3b0:	9201      	str	r2, [sp, #4]
 801d3b2:	f7fe fff9 	bl	801c3a8 <_malloc_r>
 801d3b6:	9a01      	ldr	r2, [sp, #4]
 801d3b8:	4605      	mov	r5, r0
 801d3ba:	b930      	cbnz	r0, 801d3ca <_calloc_r+0x24>
 801d3bc:	4628      	mov	r0, r5
 801d3be:	b003      	add	sp, #12
 801d3c0:	bd30      	pop	{r4, r5, pc}
 801d3c2:	220c      	movs	r2, #12
 801d3c4:	6002      	str	r2, [r0, #0]
 801d3c6:	2500      	movs	r5, #0
 801d3c8:	e7f8      	b.n	801d3bc <_calloc_r+0x16>
 801d3ca:	4621      	mov	r1, r4
 801d3cc:	f7fe f8dc 	bl	801b588 <memset>
 801d3d0:	e7f4      	b.n	801d3bc <_calloc_r+0x16>

0801d3d2 <__ascii_mbtowc>:
 801d3d2:	b082      	sub	sp, #8
 801d3d4:	b901      	cbnz	r1, 801d3d8 <__ascii_mbtowc+0x6>
 801d3d6:	a901      	add	r1, sp, #4
 801d3d8:	b142      	cbz	r2, 801d3ec <__ascii_mbtowc+0x1a>
 801d3da:	b14b      	cbz	r3, 801d3f0 <__ascii_mbtowc+0x1e>
 801d3dc:	7813      	ldrb	r3, [r2, #0]
 801d3de:	600b      	str	r3, [r1, #0]
 801d3e0:	7812      	ldrb	r2, [r2, #0]
 801d3e2:	1e10      	subs	r0, r2, #0
 801d3e4:	bf18      	it	ne
 801d3e6:	2001      	movne	r0, #1
 801d3e8:	b002      	add	sp, #8
 801d3ea:	4770      	bx	lr
 801d3ec:	4610      	mov	r0, r2
 801d3ee:	e7fb      	b.n	801d3e8 <__ascii_mbtowc+0x16>
 801d3f0:	f06f 0001 	mvn.w	r0, #1
 801d3f4:	e7f8      	b.n	801d3e8 <__ascii_mbtowc+0x16>

0801d3f6 <_realloc_r>:
 801d3f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d3fa:	4680      	mov	r8, r0
 801d3fc:	4614      	mov	r4, r2
 801d3fe:	460e      	mov	r6, r1
 801d400:	b921      	cbnz	r1, 801d40c <_realloc_r+0x16>
 801d402:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d406:	4611      	mov	r1, r2
 801d408:	f7fe bfce 	b.w	801c3a8 <_malloc_r>
 801d40c:	b92a      	cbnz	r2, 801d41a <_realloc_r+0x24>
 801d40e:	f7fe ff57 	bl	801c2c0 <_free_r>
 801d412:	4625      	mov	r5, r4
 801d414:	4628      	mov	r0, r5
 801d416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d41a:	f000 f86d 	bl	801d4f8 <_malloc_usable_size_r>
 801d41e:	4284      	cmp	r4, r0
 801d420:	4607      	mov	r7, r0
 801d422:	d802      	bhi.n	801d42a <_realloc_r+0x34>
 801d424:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801d428:	d812      	bhi.n	801d450 <_realloc_r+0x5a>
 801d42a:	4621      	mov	r1, r4
 801d42c:	4640      	mov	r0, r8
 801d42e:	f7fe ffbb 	bl	801c3a8 <_malloc_r>
 801d432:	4605      	mov	r5, r0
 801d434:	2800      	cmp	r0, #0
 801d436:	d0ed      	beq.n	801d414 <_realloc_r+0x1e>
 801d438:	42bc      	cmp	r4, r7
 801d43a:	4622      	mov	r2, r4
 801d43c:	4631      	mov	r1, r6
 801d43e:	bf28      	it	cs
 801d440:	463a      	movcs	r2, r7
 801d442:	f7fe f91a 	bl	801b67a <memcpy>
 801d446:	4631      	mov	r1, r6
 801d448:	4640      	mov	r0, r8
 801d44a:	f7fe ff39 	bl	801c2c0 <_free_r>
 801d44e:	e7e1      	b.n	801d414 <_realloc_r+0x1e>
 801d450:	4635      	mov	r5, r6
 801d452:	e7df      	b.n	801d414 <_realloc_r+0x1e>

0801d454 <__ascii_wctomb>:
 801d454:	b149      	cbz	r1, 801d46a <__ascii_wctomb+0x16>
 801d456:	2aff      	cmp	r2, #255	; 0xff
 801d458:	bf85      	ittet	hi
 801d45a:	238a      	movhi	r3, #138	; 0x8a
 801d45c:	6003      	strhi	r3, [r0, #0]
 801d45e:	700a      	strbls	r2, [r1, #0]
 801d460:	f04f 30ff 	movhi.w	r0, #4294967295
 801d464:	bf98      	it	ls
 801d466:	2001      	movls	r0, #1
 801d468:	4770      	bx	lr
 801d46a:	4608      	mov	r0, r1
 801d46c:	4770      	bx	lr

0801d46e <_raise_r>:
 801d46e:	291f      	cmp	r1, #31
 801d470:	b538      	push	{r3, r4, r5, lr}
 801d472:	4604      	mov	r4, r0
 801d474:	460d      	mov	r5, r1
 801d476:	d904      	bls.n	801d482 <_raise_r+0x14>
 801d478:	2316      	movs	r3, #22
 801d47a:	6003      	str	r3, [r0, #0]
 801d47c:	f04f 30ff 	mov.w	r0, #4294967295
 801d480:	bd38      	pop	{r3, r4, r5, pc}
 801d482:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801d484:	b112      	cbz	r2, 801d48c <_raise_r+0x1e>
 801d486:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d48a:	b94b      	cbnz	r3, 801d4a0 <_raise_r+0x32>
 801d48c:	4620      	mov	r0, r4
 801d48e:	f000 f831 	bl	801d4f4 <_getpid_r>
 801d492:	462a      	mov	r2, r5
 801d494:	4601      	mov	r1, r0
 801d496:	4620      	mov	r0, r4
 801d498:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d49c:	f000 b818 	b.w	801d4d0 <_kill_r>
 801d4a0:	2b01      	cmp	r3, #1
 801d4a2:	d00a      	beq.n	801d4ba <_raise_r+0x4c>
 801d4a4:	1c59      	adds	r1, r3, #1
 801d4a6:	d103      	bne.n	801d4b0 <_raise_r+0x42>
 801d4a8:	2316      	movs	r3, #22
 801d4aa:	6003      	str	r3, [r0, #0]
 801d4ac:	2001      	movs	r0, #1
 801d4ae:	e7e7      	b.n	801d480 <_raise_r+0x12>
 801d4b0:	2400      	movs	r4, #0
 801d4b2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801d4b6:	4628      	mov	r0, r5
 801d4b8:	4798      	blx	r3
 801d4ba:	2000      	movs	r0, #0
 801d4bc:	e7e0      	b.n	801d480 <_raise_r+0x12>
	...

0801d4c0 <raise>:
 801d4c0:	4b02      	ldr	r3, [pc, #8]	; (801d4cc <raise+0xc>)
 801d4c2:	4601      	mov	r1, r0
 801d4c4:	6818      	ldr	r0, [r3, #0]
 801d4c6:	f7ff bfd2 	b.w	801d46e <_raise_r>
 801d4ca:	bf00      	nop
 801d4cc:	200000b8 	.word	0x200000b8

0801d4d0 <_kill_r>:
 801d4d0:	b538      	push	{r3, r4, r5, lr}
 801d4d2:	4d07      	ldr	r5, [pc, #28]	; (801d4f0 <_kill_r+0x20>)
 801d4d4:	2300      	movs	r3, #0
 801d4d6:	4604      	mov	r4, r0
 801d4d8:	4608      	mov	r0, r1
 801d4da:	4611      	mov	r1, r2
 801d4dc:	602b      	str	r3, [r5, #0]
 801d4de:	f7e6 fabf 	bl	8003a60 <_kill>
 801d4e2:	1c43      	adds	r3, r0, #1
 801d4e4:	d102      	bne.n	801d4ec <_kill_r+0x1c>
 801d4e6:	682b      	ldr	r3, [r5, #0]
 801d4e8:	b103      	cbz	r3, 801d4ec <_kill_r+0x1c>
 801d4ea:	6023      	str	r3, [r4, #0]
 801d4ec:	bd38      	pop	{r3, r4, r5, pc}
 801d4ee:	bf00      	nop
 801d4f0:	200072f4 	.word	0x200072f4

0801d4f4 <_getpid_r>:
 801d4f4:	f7e6 baac 	b.w	8003a50 <_getpid>

0801d4f8 <_malloc_usable_size_r>:
 801d4f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d4fc:	1f18      	subs	r0, r3, #4
 801d4fe:	2b00      	cmp	r3, #0
 801d500:	bfbc      	itt	lt
 801d502:	580b      	ldrlt	r3, [r1, r0]
 801d504:	18c0      	addlt	r0, r0, r3
 801d506:	4770      	bx	lr

0801d508 <_init>:
 801d508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d50a:	bf00      	nop
 801d50c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d50e:	bc08      	pop	{r3}
 801d510:	469e      	mov	lr, r3
 801d512:	4770      	bx	lr

0801d514 <_fini>:
 801d514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d516:	bf00      	nop
 801d518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d51a:	bc08      	pop	{r3}
 801d51c:	469e      	mov	lr, r3
 801d51e:	4770      	bx	lr

0801d520 <__stop_timer_veneer>:
 801d520:	f85f f000 	ldr.w	pc, [pc]	; 801d524 <__stop_timer_veneer+0x4>
 801d524:	00001a41 	.word	0x00001a41

0801d528 <__init_ldc_comms_veneer>:
 801d528:	f85f f000 	ldr.w	pc, [pc]	; 801d52c <__init_ldc_comms_veneer+0x4>
 801d52c:	00000019 	.word	0x00000019

0801d530 <__MW_update_veneer>:
 801d530:	f85f f000 	ldr.w	pc, [pc]	; 801d534 <__MW_update_veneer+0x4>
 801d534:	0000155d 	.word	0x0000155d

0801d538 <__start_timer_veneer>:
 801d538:	f85f f000 	ldr.w	pc, [pc]	; 801d53c <__start_timer_veneer+0x4>
 801d53c:	00001a05 	.word	0x00001a05

0801d540 <__timer_delay_veneer>:
 801d540:	f85f f000 	ldr.w	pc, [pc]	; 801d544 <__timer_delay_veneer+0x4>
 801d544:	00001a7d 	.word	0x00001a7d

0801d548 <__check_timer_veneer>:
 801d548:	f85f f000 	ldr.w	pc, [pc]	; 801d54c <__check_timer_veneer+0x4>
 801d54c:	00001a65 	.word	0x00001a65

0801d550 <__calc_fixed_time_MW_sweep_veneer>:
 801d550:	f85f f000 	ldr.w	pc, [pc]	; 801d554 <__calc_fixed_time_MW_sweep_veneer+0x4>
 801d554:	00000fc9 	.word	0x00000fc9

0801d558 <__start_pop_veneer>:
 801d558:	f85f f000 	ldr.w	pc, [pc]	; 801d55c <__start_pop_veneer+0x4>
 801d55c:	00001b6d 	.word	0x00001b6d

0801d560 <__stop_pop_veneer>:
 801d560:	f85f f000 	ldr.w	pc, [pc]	; 801d564 <__stop_pop_veneer+0x4>
 801d564:	00001bc9 	.word	0x00001bc9

0801d568 <__start_POP_calibration_veneer>:
 801d568:	f85f f000 	ldr.w	pc, [pc]	; 801d56c <__start_POP_calibration_veneer+0x4>
 801d56c:	00001441 	.word	0x00001441
